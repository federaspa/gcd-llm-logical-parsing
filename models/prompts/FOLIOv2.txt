Given a set of Natural Language Premises and a Natural Language Question. 
The task is extract the First-Order-Logic Predicates, and parse the Premises and Question into First-Order-Logic formulas.
The grammar of the first-order logic formular is defined as follows:
1) logical conjunction of expr1 and expr2: expr1 ∧ expr2
2) logical disjunction of expr1 and expr2: expr1 ∨ expr2
3) logical exclusive disjunction of expr1 and expr2: expr1 ⊕ expr2
4) logical negation of expr1: ¬expr1
5) expr1 implies expr2: expr1 → expr2
6) expr1 if and only if expr2: expr1 ↔ expr2
7) logical universal quantification: ∀x
8) logical existential quantification: ∃x
------
Natural Language Premises:
"""
All people who regularly drink coffee are dependent on caffeine. 
People regularly drink coffee, or they don't want to be addicted to caffeine, or both. 
No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug. 
Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug. 
Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.
"""
Natural Language Question:
"""
Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.
"""
###
First-Order-Logic Predicates:
"""
IsDependentOn(x, y) ::: x is dependent on y.
DrinkRegularly(x, y) ::: x regularly drinks y.
WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.
AwareThatDrug(x, y) ::: x is aware that y is a drug.
Student(x) ::: x is a student.
"""
First-Order-Logic Premises:
"""
∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.
∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.
∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.
¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.
¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.
"""
First-Order-Logic Question:
"""
¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.
"""
------
Natural Language Premises:
"""
Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music. 
Any choral conductor is a musician. 
Some musicians love music. 
Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.
"""
Natural Language Question:
"""
Miroslav Venhoda loved music.
"""
###
First-Order-Logic Predicates:
"""
Czech(x) ::: x is czech
ChoralConductor(x) ::: x is a choral conductor
SpecializeInPerformanceOf(x, y) ::: x Specializes in the performance of y
Musician(x) ::: x is a musician
Love(x, y) ::: x loves y
PublishedBook(x, y) ::: x published the book y
"""
First-Order-Logic Premises:
"""
Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic) ::: Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.
∀x (ChoralConductor(x) → Musician(x)) ::: Any choral conductor is a musician.
∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music))) ::: Some musicians love music.
PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946) ::: Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.
"""
First-Order-Logic Conclusion:
"""
Love(miroslav, music) ::: Miroslav Venhoda loved music.
∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946)) ::: A Czech published a book in 1946.
¬∃x (ChoralConductor(x) ∧ Specialize(x, renaissance)) ::: No choral conductor specialized in the performance of Renaissance.
"""
------
Natural Language Premises:
[[PROBLEM]]
Natural Language Question:
[[QUESTION]]
###