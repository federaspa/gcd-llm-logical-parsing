root   ::= S

S ::= F | QUANT VAR (S | F) | "¬" (S | F)

F ::= "¬"? "(" F ")" | F OP F | L

OP ::= "⊕" | "∨" | "∧" | "→" | "↔"
L ::= "¬"? PRED "(" TERMS ")"
TERMS ::= TERM | TERM "," TERMS
TERM ::=  VAR | CONST
QUANT ::= "∀" | "∃"
CONST ::= string
VAR ::= "x" | "y" | "z"
PRED ::= [[PREDICATES]]

string ::=
  "\"" (
    [^"\\\x7F\x00-\x1F] |
    "\\" (["\\bfnrt] | "u" [0-9a-fA-F]{4}) # escapes
  )* "\"" ws

# Optional space: by convention, applied in this grammar after literal chars when allowed
ws ::= | " " | "\n" [ \t]{0,20}