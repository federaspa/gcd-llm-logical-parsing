#### Root structure defining the JSON output format ####
root ::= "{" ws declarations ws constraints ws options ws "}"

ws ::= [ \t\n\r]*

declarations ::= "\"declarations\":" ws "[" ws decllist ws "]"
decllist ::= declaration (ws "," ws declaration)*

constraints ::= "," ws "\"constraints\":" ws "[" ws constraintlist ws "]"
constraintlist ::= constraint (ws "," ws constraint)*

options ::= "," ws "\"options\":" ws "[" ws optionlist ws "]"
optionlist ::= option (ws "," ws option)*

#### Declarations section ####
declaration ::= "\"" (enumsort | intsort | function) "\""

# Enum sort declaration
enumsort ::= name ws "=" ws "EnumSort([" ws enumvals ws "])"
enumvals ::= name (ws "," ws name)*

# Int sort declaration
intsort ::= name ws "=" ws "IntSort([" ws intvals ws "])"
intvals ::= number (ws "," ws number)*

# Function declaration
function ::= name ws "=" ws "Function(" funcargs ")"
funcargs ::= "[" ws funcarglist ws "]" ws "->" ws "[" ws funcreturn ws "]"
funcarglist ::= name (ws "," ws name)*
funcreturn ::= type

#### Constraints section ####
constraint ::= "\"" formula "\""

# Formula constructs
formula ::= basic | quantified | unary | binary | predicate | count

# Basic formula elements
basic ::= "(" formula ")" | value | name

# Quantified expressions
quantified ::= quantifier "[" quantparams "]" ws "," ws formula
quantifier ::= "ForAll" | "Exists"
quantparams ::= qparam (ws "," ws qparam)*
qparam ::= name ":" name

# Unary operations
unary ::= "Not" "(" formula ")"

# Binary operations
binary ::= binop "(" formula ws "," ws formula ")"
binop ::= "And" | "Or" | "Implies" | "Xor"

# Predicate expressions
predicate ::= name "(" predargs ")"
predargs ::= predarg (ws "," ws predarg)*
predarg ::= name | number | formula

# Count expressions
count ::= "Count([" countparams "]" ws "," ws formula ")"
countparams ::= cparam (ws "," ws cparam)*
cparam ::= name ":" name

#### Options section ####
option ::= "\"" verification_func "\""
verification_func ::= is_valid | is_sat | is_unsat | is_accurate_list | is_exception

# Verification functions
is_valid ::= "is_valid(" formula ")"
is_sat ::= "is_sat(" formula ")"
is_unsat ::= "is_unsat(" formula ")"
is_accurate_list ::= "is_accurate_list([" ws formulas ws "])"
is_exception ::= "is_exception(" formula ")"

# List of formulas for is_accurate_list
formulas ::= formula (ws "," ws formula)*

#### Basic elements ####
name ::= [a-zA-Z][a-zA-Z0-9_]*
number ::= [0-9]+
value ::= "true" | "false"
type ::= "bool" | "int" | name