#### Root structure defining the JSON output format ####
root ::= "{" ws declarations ws constraints ws options ws "}"

ws ::= [ \t\n\r]*

declarations ::= "\"declarations\":" ws "[" ws decllist ws "]," ws 
decllist ::= declaration (ws "," ws declaration)*

constraints ::= "\"constraints\":" ws "[" ws constraintlist ws "]"
constraintlist ::= constraint (ws "," ws constraint)*

options ::= "," ws "\"options\":" ws "[" ws optionlist ws "]"
optionlist ::= option (ws "," ws option)*

# Declarations section
declaration ::= enumsortdecl | intsortdecl | functiondecl

enumsortdecl ::= identifier "=" "EnumSort" "(" "[" enummembers "]" ")" "\n"
enummembers ::= identifier ("," " " identifier)*

intsortdecl ::= identifier "=" "IntSort" "(" "[" intmembers "]" ")" "\n"
intmembers ::= number ("," " " number)*

functiondecl ::= identifier "=" "Function" "(" functionargs ")" "\n"
functionargs ::= "[" typelist "]" " -> " "[" type "]" | "[" typelist "]"
typelist ::= type ("," " " type)*
type ::= identifier | "int" | "bool"

# Constraints section
constraint ::= constraintexpr
constraintexpr ::= forallexpr | existsexpr | countexpr | distinctexpr | basicexpr

forallexpr ::= "ForAll" "(" "[" varbindings "]" "," constraintexpr ")"
existsexpr ::= "Exists" "(" "[" varbindings "]" "," constraintexpr ")"
varbindings ::= varbinding ("," " " varbinding)*
varbinding ::= identifier ":" identifier

countexpr ::= "Count" "(" "[" varbindings "]" "," constraintexpr ")"
distinctexpr ::= "Distinct" "(" "[" varbinding "]" "," constraintexpr ")"

basicexpr ::= functioncall | comparison | logicalexpr
functioncall ::= identifier "(" arglist ")"
arglist ::= expr ("," expr)*
comparison ::= expr comparisonop expr
comparisonop ::= "==" | "!=" | "<=" | ">=" | "<" | ">"
logicalexpr ::= "And" "(" exprlist ")" | "Or" "(" exprlist ")" | "Not" "(" expr ")"
exprlist ::= expr ("," " " expr)*
expr ::= identifier | number | functioncall | logicalexpr | comparison

# Options section
option ::= validitycheck
validitycheck ::= "is_valid" "(" constraintexpr ")" | "is_unsat" "(" constraintexpr ")" | "is_sat" "(" constraintexpr ")"

# Basic elements
identifier ::= [A-Za-z][A-Za-z0-9]*
number ::= [0-9]+
text ::= [^\n]+
comment ::= [^\n]+