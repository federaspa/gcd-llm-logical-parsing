[
    {
        "id": 93,
        "raw_prog": {
            "First-Order-Logic Rules": "∃x (Pet(x) ∧ AllowedIn(x, y)) ::: Pets are allowed in some managed buildings.\n∀x (RequireDeposit(x) → ∃y (RentApartment(z, y) ∧ SecurityDeposit(x) ∧ (Equal(SecurityDeposit(x), RentAmount(y)) ∨ MoreThan(SecurityDeposit(x), RentAmount(y))))) ::: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Pet(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\nCat(x) → Pet(x) ::: Cats are pets.\nManagedBuilding(olivegarden) ::: The Olive Garden is a managed building.\nRentAmount(2000, olivegarden) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(tom, olivegarden) ↔ (AllowedIn(tom, olivegarden) ∧ SecurityDeposit(olivegarden) ∧ (Equal(SecurityDeposit(olivegarden), 1500) ∨ ¬MoreThan(SecurityDeposit(olivegarden), 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.",
            "First-Order-Logic Question": "RentApartment(tom, olivegarden) ::: Tom will rent an apartment in The Olive Garden."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "∃x (Pet(x) ∧ AllowedIn(x, y)) ::: Pets are allowed in some managed buildings.\nRequireDeposit(x)→¬(AllowedIn(x,y)∧ManagedBuilding(x)) ::: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Pet(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\nCat(x) → Pet(x) ::: Cats are pets.\nManagedBuilding(olivegarden) ::: The Olive Garden is a managed building.\nRentAmount(2000, olivegarden) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(x,y)↔(AllowedIn(x,y)∧SecurityDeposit(y)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.",
            "First-Order-Logic Question": "RentApartment(tom, olivegarden) ::: Tom will rent an apartment in The Olive Garden."
        },
        "diff": [
            {
                "raw": "∀x (RequireDeposit(x) → ∃y (RentApartment(z, y) ∧ SecurityDeposit(x) ∧ (Equal(SecurityDeposit(x), RentAmount(y)) ∨ MoreThan(SecurityDeposit(x), RentAmount(y))))) ::: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more.",
                "gram": "RequireDeposit(x)→¬(AllowedIn(x,y)∧ManagedBuilding(x)) ::: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more."
            },
            {
                "raw": "RentApartment(tom, olivegarden) ↔ (AllowedIn(tom, olivegarden) ∧ SecurityDeposit(olivegarden) ∧ (Equal(SecurityDeposit(olivegarden), 1500) ∨ ¬MoreThan(SecurityDeposit(olivegarden), 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
                "gram": "RentApartment(x,y)↔(AllowedIn(x,y)∧SecurityDeposit(y)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500."
            }
        ],
        "answer": "B",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": "∃x (Pet(x) ∧ AllowedIn(x, y)) ::: Pets are allowed in some managed buildings.\n∀x ∃y ∃z (RequireDeposit(x) → (RentApartment(z, y) ∧ SecurityDeposit(x) ∧ (Equal(x,y) ∨ MoreThan(x,y)))) ::: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Pet(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\nCat(x) → Pet(x) ::: Cats are pets.\nManagedBuilding(olivegarden) ::: The Olive Garden is a managed building.\nRentAmount(2000, olivegarden) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(tom, olivegarden) ↔ (AllowedIn(tom, olivegarden) ∧ SecurityDeposit(olivegarden) ∧ (Equal(olivegarden, 1500) ∨ ¬MoreThan(olivegarden, 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.",
            "First-Order-Logic Question": "RentApartment(tom, olivegarden) ::: Tom will rent an apartment in The Olive Garden."
        },
        "fixed": true
    },
    {
        "id": 124,
        "raw_prog": {
            "First-Order-Logic Rules": "∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty. \n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers. \n∀x (Plane(x) → Empty(x)) ::: All planes are empty. \n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes. \nAirline(Greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n",
            "First-Order-Logic Question": "¬(Greyhound(x) ∧ Boeing707(x)) ::: A Greyhound is not a Boeing 707."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty. \n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers. \n∀x (Plane(x) → Empty(x)) ::: All planes are empty. \n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes. \nAirline(x)→¬(Greyhound(x)∧Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n",
            "First-Order-Logic Question": "¬(Greyhound(x) ∧ Boeing707(x)) ::: A Greyhound is not a Boeing 707."
        },
        "diff": [
            {
                "raw": "Airline(Greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.",
                "gram": "Airline(x)→¬(Greyhound(x)∧Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes."
            }
        ],
        "answer": "A",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": "∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty. \n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers. \n∀x (Plane(x) → Empty(x)) ::: All planes are empty. \n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes. \n∀x ((Greyhound(x) ∧ ¬Airline(x)) → ¬Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n",
            "First-Order-Logic Question": "¬(Greyhound(x) ∧ Boeing707(x)) ::: A Greyhound is not a Boeing 707."
        },
        "fixed": true
    },
    {
        "id": 41,
        "raw_prog": {
            "First-Order-Logic Rules": "∀x (DesignStyle(x, ZahaHadid) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProductDesign(x) → ¬Timeless(x)) ::: No mass product design is timeless.\nDesignStyle(ZahaHadid, y) ∨ DesignStyle(KellyWearstler, y) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x, KellyWearstler) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x, KellyWearstler) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x (Timeless(DesignBy(x, Max)) → (MassProductDesign(DesignBy(x, Max)) ∧ Evocative(DesignBy(x, Max)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n",
            "First-Order-Logic Question": "Evocative(DesignBy(Max, Max)) ∨ Dreamy(DesignBy(Max, Max)) ::: A design by Max is either evocative or dreamy."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "∀x (DesignStyle(x, ZahaHadid) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProductDesign(x) → ¬Timeless(x)) ::: No mass product design is timeless.\nDesignStyle(ZahaHadid, y) ∨ DesignStyle(KellyWearstler, y) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x, KellyWearstler) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x, KellyWearstler) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x(Timeless(x)→(MassProductDesign(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n",
            "First-Order-Logic Question": "Evocative(x)∨Dreamy(x) ::: A design by Max is either evocative or dreamy."
        },
        "diff": [
            {
                "raw": "∀x (Timeless(DesignBy(x, Max)) → (MassProductDesign(DesignBy(x, Max)) ∧ Evocative(DesignBy(x, Max)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
                "gram": "∀x(Timeless(x)→(MassProductDesign(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative."
            }
        ],
        "answer": "B",
        "grammar_answer": "A",
        "manual_prog": {
            "First-Order-Logic Rules": "∀x (DesignStyle(x, ZahaHadid) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProductDesign(x) → ¬Timeless(x)) ::: No mass product design is timeless.\nDesignStyle(ZahaHadid, y) ∨ DesignStyle(KellyWearstler, y) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x, KellyWearstler) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x, KellyWearstler) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x (DesignBy(x, Max) ∧ Timeless(x)) → (DesignBy(x, Max) ∧ MassProductDesign(x) ∧ Evocative(x)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n",
            "First-Order-Logic Question": "DesignBy(x, Max) ∧ Evocative(x) ∨ DesignBy(x, Max) ∧ Dreamy(x) ::: A design by Max is either evocative or dreamy."
        },
        "fixed": true
    },
    {
        "id": 95,
        "raw_prog": {
            "First-Order-Logic Rules": "∃x (Pet(x) ∧ AllowedIn(x, y)) ::: Pets are allowed in some managed buildings.\n∀x (RequireDeposit(x) → (Equal(x, RentAmount(y, z)) ∨ MoreThan(x, RentAmount(y, z)))) ::: A deposit is required to rent an apartment in a managed building.\nCat(fluffy) ∧ Pet(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\nCat(x) → Pet(x) ::: Cats are pets.\nManaged(olivegarden) ∧ Building(olivegarden) ::: The Olive Garden is a managed building.\nRentAmount(olivegarden, 2000) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(tom, olivegarden) ↔ (MoveInWith(tom, fluffy) ∧ ¬MoreThan(deposit, 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.\n",
            "First-Order-Logic Question": "Equal(deposit, 2000) ∨ MoreThan(deposit, 2000) ::: The security deposit at the Olive Garden is either $2000 or more."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "∃x (Pet(x) ∧ AllowedIn(x, y)) ::: Pets are allowed in some managed buildings.\n∀x(RequireDeposit(x)→(Equal(x,y))) ::: A deposit is required to rent an apartment in a managed building.\nCat(fluffy) ∧ Pet(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\nCat(x) → Pet(x) ::: Cats are pets.\nManaged(olivegarden) ∧ Building(olivegarden) ::: The Olive Garden is a managed building.\nRentAmount(olivegarden, 2000) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(tom, olivegarden) ↔ (MoveInWith(tom, fluffy) ∧ ¬MoreThan(deposit, 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.\n",
            "First-Order-Logic Question": "Equal(deposit, 2000) ∨ MoreThan(deposit, 2000) ::: The security deposit at the Olive Garden is either $2000 or more."
        },
        "diff": [
            {
                "raw": "∀x (RequireDeposit(x) → (Equal(x, RentAmount(y, z)) ∨ MoreThan(x, RentAmount(y, z)))) ::: A deposit is required to rent an apartment in a managed building.",
                "gram": "∀x(RequireDeposit(x)→(Equal(x,y))) ::: A deposit is required to rent an apartment in a managed building."
            }
        ],
        "answer": "A",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": "∃x (Pet(x) ∧ AllowedIn(x, y)) ::: Pets are allowed in some managed buildings.\n∀x (RequireDeposit(x) → (RentAmount(y, z) ∧ Equal(x, y) ∨ RentAmount(y, z) ∧ MoreThan(x, y))) ::: A deposit is required to rent an apartment in a managed building.\nCat(fluffy) ∧ Pet(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\nCat(x) → Pet(x) ::: Cats are pets.\nManaged(olivegarden) ∧ Building(olivegarden) ::: The Olive Garden is a managed building.\nRentAmount(olivegarden, 2000) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(tom, olivegarden) ↔ (MoveInWith(tom, fluffy) ∧ ¬MoreThan(deposit, 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.\n",
            "First-Order-Logic Question": "Equal(deposit, 2000) ∨ MoreThan(deposit, 2000) ::: The security deposit at the Olive Garden is either $2000 or more."
        },
        "fixed": true
    },
    {
        "id": 114,
        "raw_prog": {
            "First-Order-Logic Rules": "MountainRange(picurismountains) ∨ MountainRange(picurismountains) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juandeonate, picurismountains) ::: Juan de Onate visited the Picuris Mountains.\nLocatedIn(hardingpegmatitemine, picurismountains) ∧ Donated(hardingpegmatitemine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ Has(y, donated) ∧ LocatedIn(y, x))) ::: There are no mountain ranges in Texas that have mines which have been donated.\n",
            "First-Order-Logic Question": "NotLocatedIn(hardingpegmatitemine, newmexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "MountainRange(picurismountains) ∨ MountainRange(picurismountains) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juandeonate, picurismountains) ::: Juan de Onate visited the Picuris Mountains.\nLocatedIn(hardingpegmatitemine, picurismountains) ∧ Donated(hardingpegmatitemine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n¬∃y(Mine(y)∧Has(y,x)∧LocatedIn(y,x)) ::: There are no mountain ranges in Texas that have mines which have been donated.\n",
            "First-Order-Logic Question": "NotLocatedIn(hardingpegmatitemine, newmexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
        },
        "diff": [
            {
                "raw": "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ Has(y, donated) ∧ LocatedIn(y, x))) ::: There are no mountain ranges in Texas that have mines which have been donated.",
                "gram": "¬∃y(Mine(y)∧Has(y,x)∧LocatedIn(y,x)) ::: There are no mountain ranges in Texas that have mines which have been donated."
            }
        ],
        "answer": "B",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": "MountainRange(picurismountains) ∨ MountainRange(picurismountains) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juandeonate, picurismountains) ::: Juan de Onate visited the Picuris Mountains.\nLocatedIn(hardingpegmatitemine, picurismountains) ∧ Donated(hardingpegmatitemine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x ∃y (MountainRange(x) ∧ In(x, texas) → ¬(Mine(y) ∧ Has(y, donated) ∧ LocatedIn(y, x))) ::: There are no mountain ranges in Texas that have mines which have been donated.\n",
            "First-Order-Logic Question": "NotLocatedIn(hardingpegmatitemine, newmexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
        },
        "fixed": true
    },
    {
        "id": 70,
        "raw_prog": {
            "First-Order-Logic Rules": [
                "British(badults) ∧ Sitcom(badults) ∧ ∀x (MemberOf(x, pappys) → Star(x, badults)) ::: Badults is a British Sitcom series, starring members of Pappy's.",
                "Pilot(badults, 2013) ∧ Network(badults, bbcthree) ::: Badults piloted in July 2013 on BBC Three.",
                "WorkingTitle(badults, thesecretdudesociety) ::: The Working title 'The Secret Dude Society' was used for Badults.",
                "ScriptEditor(andrewcollins, badults) ::: Andrew Collins was the script editor for Badults."
            ],
            "First-Order-Logic Question": [
                "∀x (MemberOf(x, pappys) → ¬∃y (Star(x, y) ∧ (Network(y, bbctwo) ∨ Network(y, bbcthree)))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
            ]
        },
        "gram_prog": {
            "First-Order-Logic Rules": [
                "British(badults) ∧ Sitcom(badults) ∧ ∀x (MemberOf(x, pappys) → Star(x, badults)) ::: Badults is a British Sitcom series, starring members of Pappy's.",
                "Pilot(badults, 2013) ∧ Network(badults, bbcthree) ::: Badults piloted in July 2013 on BBC Three.",
                "WorkingTitle(badults, thesecretdudesociety) ::: The Working title 'The Secret Dude Society' was used for Badults.",
                "ScriptEditor(andrewcollins, badults) ::: Andrew Collins was the script editor for Badults."
            ],
            "First-Order-Logic Question": [
                "∀x(MemberOf(x,y)→¬(Star(x,y))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
            ]
        },
        "diff": [],
        "answer": "B",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": [
                "British(badults) ∧ Sitcom(badults) ∧ ∀x (MemberOf(x, pappys) → Star(x, badults)) ::: Badults is a British Sitcom series, starring members of Pappy's.",
                "Pilot(badults, 2013) ∧ Network(badults, bbcthree) ::: Badults piloted in July 2013 on BBC Three.",
                "WorkingTitle(badults, thesecretdudesociety) ::: The Working title 'The Secret Dude Society' was used for Badults.",
                "ScriptEditor(andrewcollins, badults) ::: Andrew Collins was the script editor for Badults."
            ],
            "First-Order-Logic Question": [
                "∀x ∃y (MemberOf(x, pappys) → ¬(Star(x, y) ∧ (Network(y, bbctwo) ∨ Network(y, bbcthree)))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
            ]
        },
        "fixed": true
    },
    {
        "id": 113,
        "raw_prog": {
            "First-Order-Logic Rules": [
                "MountainRange(picurismountains) ∧ (In(picurismountains, newmexico) ⊕ In(picurismountains, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.",
                "Visit(juandeonate, picurismountains) ::: Juan de Onate visited the Picuris Mountains.",
                "Mine(hardingpegmatitemine) ∧ LocatedIn(hardingpegmatitemine, picurismountains) ∧ Donate(hardingpegmatitemine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
                "∀x ∃y (MountainRange(x) ∧ In(x, texas) → ¬(Mine(y) ∧ LocatedIn(y, x) ∧ Donate(y))) ::: There are no mountain ranges in Texas that have mines which have been donated."
            ],
            "First-Order-Logic Question": "∃x (MountainRange(x) ∧ In(x, texas) ∧ Visit(juandeonate, x)) ::: Juan de Onate visited a mountain range in Texas."
        },
        "gram_prog": {
            "First-Order-Logic Rules": [
                "MountainRange(picurismountains) ∧ (In(picurismountains, newmexico) ⊕ In(picurismountains, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.",
                "Visit(juandeonate, picurismountains) ::: Juan de Onate visited the Picuris Mountains.",
                "Mine(hardingpegmatitemine) ∧ LocatedIn(hardingpegmatitemine, picurismountains) ∧ Donate(hardingpegmatitemine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
                "∀x(MountainRange(x)→¬(In(x,y))) ::: There are no mountain ranges in Texas that have mines which have been donated."
            ],
            "First-Order-Logic Question": "∃x (MountainRange(x) ∧ In(x, texas) ∧ Visit(juandeonate, x)) ::: Juan de Onate visited a mountain range in Texas."
        },
        "diff": [
            {
                "raw": "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donate(y))) ::: There are no mountain ranges in Texas that have mines which have been donated.",
                "gram": "∀x(MountainRange(x)→¬(In(x,y))) ::: There are no mountain ranges in Texas that have mines which have been donated."
            }
        ],
        "answer": "C",
        "grammar_answer": "A",
        "manual_prog": {
            "First-Order-Logic Rules": [
                "MountainRange(picurismountains) ∧ (In(picurismountains, newmexico) ⊕ In(picurismountains, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.",
                "Visit(juandeonate, picurismountains) ::: Juan de Onate visited the Picuris Mountains.",
                "Mine(hardingpegmatitemine) ∧ LocatedIn(hardingpegmatitemine, picurismountains) ∧ Donate(hardingpegmatitemine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
                "∀x ∃y (MountainRange(x) ∧ In(x, texas) → ¬(Mine(y) ∧ LocatedIn(y, x) ∧ Donate(y))) ::: There are no mountain ranges in Texas that have mines which have been donated."
            ],
            "First-Order-Logic Question": "∃x (MountainRange(x) ∧ In(x, texas) ∧ Visit(juandeonate, x)) ::: Juan de Onate visited a mountain range in Texas."
        },
        "fixed": false
    },
    {
        "id": 143,
        "raw_prog": {
            "First-Order-Logic Rules": "∀x (BreedingBack(x) → ArtificiallySelected(x)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nBredBack(heck_cattle, aurochs) ∧ Resemble(heck_cattle, aurochs) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAnimal(heck_cattle) ::: Heck cattle are animals.\nAnimal(aurochs) ::: Aurochs are animals.\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ BredBack(x, y) ∧ Resemble(x, y) ∧ Extinct(y)) ::: Some animals to be bred-back resemble animals that are extinct.\n",
            "First-Order-Logic Question": "∃x (Animal(x) ∧ ArtificiallySelected(x) ∧ x = heck_cattle) ::: Some Heck cattle are artificially selected."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "∀x (BreedingBack(x) → ArtificiallySelected(x)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nBredBack(heck_cattle, aurochs) ∧ Resemble(heck_cattle, aurochs) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAnimal(heck_cattle) ::: Heck cattle are animals.\nAnimal(aurochs) ::: Aurochs are animals.\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ BredBack(x, y) ∧ Resemble(x, y) ∧ Extinct(y)) ::: Some animals to be bred-back resemble animals that are extinct.\n",
            "First-Order-Logic Question": "∃x(Animal(x)∧ArtificiallySelected(x)∧Resemble(x,x)) ::: Some Heck cattle are artificially selected."
        },
        "diff": [],
        "answer": "A",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": "∀x (BreedingBack(x) → ArtificiallySelected(x)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nBredBack(heck_cattle, aurochs) ∧ Resemble(heck_cattle, aurochs) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAnimal(heck_cattle) ::: Heck cattle are animals.\nAnimal(aurochs) ::: Aurochs are animals.\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ BredBack(x, y) ∧ Resemble(x, y) ∧ Extinct(y)) ::: Some animals to be bred-back resemble animals that are extinct.\n",
            "First-Order-Logic Question": "∃x (Animal(x) ∧ ArtificiallySelected(x) ∧ x = heck_cattle) ::: Some Heck cattle are artificially selected."
        },
        "fixed": false
    },
    {
        "id": 10,
        "raw_prog": {
            "First-Order-Logic Rules": "∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x) ∨ OcellatedWildTurkey(x))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nNot(tom, EasternWildTurkey(tom)) ::: Tom is not an Eastern wild turkey.\nNot(tom, OsceolaWildTurkey(tom)) ::: Tom is not an Osceola wild turkey.\nNot(tom, GouldsWildTurkey(tom)) ∧ Not(tom, MerriamsWildTurkey(tom)) ∧ Not(tom, RioGrandeWildTurkey(tom)) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.\n",
            "First-Order-Logic Question": "EasternWildTurkey(tom) ::: Tom is an Eastern wild turkey."
        },
        "gram_prog": {
            "First-Order-Logic Rules": "∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x) ∨ OcellatedWildTurkey(x))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nNot(x,y)→(EasternWildTurkey(x)→¬OsceolaWildTurkey(x)) ::: Tom is not an Eastern wild turkey.\nNot(x,y)→OsceolaWildTurkey(x) ::: Tom is not an Osceola wild turkey.\nNot(x,y)→(WildTurkey(x)∧¬EasternWildTurkey(x)) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.\n",
            "First-Order-Logic Question": "EasternWildTurkey(tom) ::: Tom is an Eastern wild turkey."
        },
        "diff": [
            {
                "raw": "Not(tom, EasternWildTurkey(tom)) ::: Tom is not an Eastern wild turkey.",
                "gram": "Not(x,y)→(EasternWildTurkey(x)→¬OsceolaWildTurkey(x)) ::: Tom is not an Eastern wild turkey."
            },
            {
                "raw": "Not(tom, OsceolaWildTurkey(tom)) ::: Tom is not an Osceola wild turkey.",
                "gram": "Not(x,y)→OsceolaWildTurkey(x) ::: Tom is not an Osceola wild turkey."
            },
            {
                "raw": "Not(tom, GouldsWildTurkey(tom)) ∧ Not(tom, MerriamsWildTurkey(tom)) ∧ Not(tom, RioGrandeWildTurkey(tom)) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
                "gram": "Not(x,y)→(WildTurkey(x)∧¬EasternWildTurkey(x)) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey."
            }
        ],
        "answer": "B",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": "∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x) ∨ OcellatedWildTurkey(x))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n¬EasternWildTurkey(tom) ::: Tom is not an Eastern wild turkey.\n¬OsceolaWildTurkey(tom) ::: Tom is not an Osceola wild turkey.\n¬GouldsWildTurkey(tom) ∧ ¬MerriamsWildTurkey(tom) ∧ ¬RioGrandeWildTurkey(tom) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.\n",
            "First-Order-Logic Question": "EasternWildTurkey(tom) ::: Tom is an Eastern wild turkey."
        },
        "fixed": true
    },
    {
        "id": 38,
        "raw_prog": {
            "First-Order-Logic Rules": [
                "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.",
                "∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.",
                "Write(beethoven, symphonyNo9) ∧ Composer(beethoven) ::: Beethoven wrote Symphony No. 9.",
                "Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.",
                "Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.",
                "Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.",
                "∀x (Orchestra(x) → ∃y (Lead(y, x) ∧ Conductor(y))) ::: Orchestras are led by conductors."
            ],
            "First-Order-Logic Question": "Not(Conductor(beethoven)) ::: Beethoven is not a conductor."
        },
        "gram_prog": {
            "First-Order-Logic Rules": [
                "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.",
                "∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.",
                "Write(beethoven, symphonyNo9) ∧ Composer(beethoven) ::: Beethoven wrote Symphony No. 9.",
                "Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.",
                "Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.",
                "Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.",
                "∀x (Orchestra(x) → ∃y (Lead(y, x) ∧ Conductor(y))) ::: Orchestras are led by conductors."
            ],
            "First-Order-Logic Question": "Not(x)→Composer(x)∨Write(x,y)∨Premiere(x,y)∨Orchestra(x)∨Lead(x,y)∨Conductor(x) ::: Beethoven is not a conductor."
        },
        "diff": [],
        "answer": "B",
        "grammar_answer": "C",
        "manual_prog": {
            "First-Order-Logic Rules": [
                "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.",
                "∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.",
                "Write(beethoven, symphonyNo9) ∧ Composer(beethoven) ::: Beethoven wrote Symphony No. 9.",
                "Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.",
                "Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.",
                "Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.",
                "∀x (Orchestra(x) → ∃y (Lead(y, x) ∧ Conductor(y))) ::: Orchestras are led by conductors."
            ],
            "First-Order-Logic Question": "¬Conductor(beethoven) ::: Beethoven is not a conductor."
        },
        "fixed": true
    }
]