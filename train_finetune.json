[
    {
        "NLSTATEMENT": "All people who regularly drink coffee are dependent on caffeine.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Drinks(x) → Dependent(x))",
        "CORRECT": "∀x (Drinks(x) → Dependent(x))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Jokes(x) → ¬Unaware(x))",
        "CORRECT": "∀x (Jokes(x) → ¬Unaware(x))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))",
        "CORRECT": "(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependentrina) ∨ Student(rina)",
        "CORRECT": "¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "Some musicians love music.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃(x (Musici)an(x) → Love(x, music))",
        "CORRECT": "∃x (Musician(x) → Love(x, music))",
        "PREDICATES": "Publish(x, y)\nBook(x)\nChoralConductor(x)\nCzech(x)\nLove(x, y)\nAuthor(x, y)\nSpecialize(x, y)\nMusician(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "CORRECT": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "PREDICATES": "Publish(x, y)\nBook(x)\nChoralConductor(x)\nCzech(x)\nLove(x, y)\nAuthor(x, y)\nSpecialize(x, y)\nMusician(x)"
    },
    {
        "NLSTATEMENT": "Any choral conductor is a musician.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ChoralConductor(x) → ∀x  Musician(x))",
        "CORRECT": "∀x (ChoralConductor(x) → Musician(x))",
        "PREDICATES": "Publish(x, y)\nBook(x)\nChoralConductor(x)\nCzech(x)\nLove(x, y)\nAuthor(x, y)\nSpecialize(x, y)\nMusician(x)"
    },
    {
        "NLSTATEMENT": "All eels are fish. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x  (Eel (x)→  Fish (x))",
        "CORRECT": "∀x  (Eel (x)→  Fish (x))",
        "PREDICATES": "Eel(x)\nAnimal(x)\nFish(x)\nPlant(x)\nBreathe(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All eels are fish. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x  (Eel (x)→  Fish (x))",
        "CORRECT": "∀x  (Eel (x)→  Fish (x))",
        "PREDICATES": "Eel(x)\nAnimal(x)\nFish(x)\nPlant(x)\nBreathe(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ",
        "CORRECT": " Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ",
        "PREDICATES": "Eel(x)\nAnimal(x)\nFish(x)\nPlant(x)\nBreathe(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Blake(x) → Historic(x, year1990))",
        "CORRECT": "∀x (Blake(x) → Historic(x, year1990))",
        "PREDICATES": "Historic(x, y)\nBlake(x)\nFiveStory(x)\nWork(x, y)\nLocate(x, y)\nConstruct(x, y)\nBuilding(x)\nEmmet(x)"
    },
    {
        "NLSTATEMENT": "The Emmet Building is a five-story building in Portland, Oregon.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))",
        "CORRECT": "∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))",
        "PREDICATES": "Historic(x, y)\nBlake(x)\nFiveStory(x)\nWork(x, y)\nLocate(x, y)\nConstruct(x, y)\nBuilding(x)\nEmmet(x)"
    },
    {
        "NLSTATEMENT": "The Emmet Building was built in 1915.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Emmet(x) → Construct(x, year1915))",
        "CORRECT": "∀x (Emmet(x) → Construct(x, year1915))",
        "PREDICATES": "Historic(x, y)\nBlake(x)\nFiveStory(x)\nWork(x, y)\nLocate(x, y)\nConstruct(x, y)\nBuilding(x)\nEmmet(x)"
    },
    {
        "NLSTATEMENT": "William Dickinson attended Westminster school for high school and then the University of Edinburgh.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)",
        "CORRECT": "Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "The University of Edinburgh is a university located in the United Kingdom.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)",
        "CORRECT": "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "The University of Edinburgh is a university located in the United Kingdom.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)",
        "CORRECT": "LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "William Dickinson supported the Portland Whigs.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Supported(williamdickinson, portlandwhigs)",
        "CORRECT": "Supported(williamdickinson, portlandwhigs)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "Katya knows LanguageA. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬Communicate(katya, danil)",
        "CORRECT": "¬Communicate(katya, danil)",
        "PREDICATES": "Know(x, y)\nCommunicate(x, y)\nUniversalLanguage(x)"
    },
    {
        "NLSTATEMENT": "Some customers go to cinemas every week",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x CinemaEveryWeek(x)",
        "CORRECT": "∃x (CinemaEveryWeek(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Some customers go to cinemas every week",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (CinemaEveryWeek(x))",
        "CORRECT": "∃x (CinemaEveryWeek(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Customers either subscribe to AMC service or HBO service. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (AMC(x) ∨ HBO(x))",
        "CORRECT": "∀x (AMC(x) ∨ HBO(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (AMC(x) → Thr(eeMovies(x)))",
        "CORRECT": "∀x (AMC(x) → ThreeMovies(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Some customers go to cinemas every week",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (CinemaEveryWeek(x))",
        "CORRECT": "∃x (CinemaEveryWeek(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "MorePoints(realMadrid, barcelona)",
        "CORRECT": "MorePoints(realMadrid, barcelona)",
        "PREDICATES": "LaLiga(x)\nMorePointsInGameBetween(x, y)\nHigherRank(x, y)\nMorePoints(x, y)"
    },
    {
        "NLSTATEMENT": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)",
        "CORRECT": "¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)",
        "PREDICATES": "LaLiga(x)\nMorePointsInGameBetween(x, y)\nHigherRank(x, y)\nMorePoints(x, y)"
    },
    {
        "NLSTATEMENT": "Tom is a citizen of Lawton Park.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Citizenof(tom, lawtonPark)",
        "CORRECT": "Citizenof(tom, lawtonPark)",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "All citizens of Lawton Park use the zip code 98199. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Citizenof((x,) lawtonPark) → Usezipcode(x, number98199))",
        "CORRECT": "∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "Daniel uses the zip code 98199. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Usezipcode(dani(el, number981)99)",
        "CORRECT": "Usezipcode(daniel, number98199)",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "All citizens of Lawton Park use the zip code 98199. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Citizenofx, lawtonPark) → Usezipcode(x, number98199)",
        "CORRECT": "∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "IsLegislatortiffanyTAlston",
        "CORRECT": "IsLegislator(tiffanyTAlston)",
        "PREDICATES": "Suspended(x)\nIsLegislator(x)\nStealsFunds(x)"
    },
    {
        "NLSTATEMENT": "If a legislator is found guilty of stealing government funds, they will be suspended from office.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x IsLegislator(x ∧ StealsFunds(x) → Suspended(x))",
        "CORRECT": "∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))",
        "PREDICATES": "Suspended(x)\nIsLegislator(x)\nStealsFunds(x)"
    },
    {
        "NLSTATEMENT": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "IsLegislator(tiffanyTAlston)",
        "CORRECT": "IsLegislator(tiffanyTAlston)",
        "PREDICATES": "Suspended(x)\nIsLegislator(x)\nStealsFunds(x)"
    },
    {
        "NLSTATEMENT": "Stonefish is a fish.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Fish(stonefish)",
        "CORRECT": "Fish(stonefish)",
        "PREDICATES": "Sting(x, y)\nCauseDeath(x)\nUseAntivenom(x)\nTreated(x)\nFish(x)\nStepOn(x, y)\nApplyHeat(x)"
    },
    {
        "NLSTATEMENT": "Stonefish stings cause death if not treated.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Sting(stonefish, x) ∧ (¬Treated()x) → CauseDeath(x))",
        "CORRECT": "∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))",
        "PREDICATES": "Sting(x, y)\nCauseDeath(x)\nUseAntivenom(x)\nTreated(x)\nFish(x)\nStepOn(x, y)\nApplyHeat(x)"
    },
    {
        "NLSTATEMENT": "It stings to step on a stonefish.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "CORRECT": "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "PREDICATES": "Sting(x, y)\nCauseDeath(x)\nUseAntivenom(x)\nTreated(x)\nFish(x)\nStepOn(x, y)\nApplyHeat(x)"
    },
    {
        "NLSTATEMENT": "All monitors in the library are produced by AOC. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Libraryx) → AOC(x)",
        "CORRECT": "∀x (Library(x) → AOC(x))",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "L-2021 is either in the library or has a type-c port.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Library(l2021) ⊕ TypeC(l2021) ",
        "CORRECT": "Library(l2021) ⊕ TypeC(l2021) ",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "If the monitor has a type-c port, then it is not produced by AOC.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (TypeC(x() → ¬AOC(x)))",
        "CORRECT": "∀x (TypeC(x) → ¬AOC(x))",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "If the monitor has a type-c port, then it is not produced by AOC.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (TypeC(x) → ¬AOCx)",
        "CORRECT": "∀x (TypeC(x) → ¬AOC(x))",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "Some monitors produced by LG have a type-c port.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (L(G(x) ∧ Typ)eC(x))",
        "CORRECT": "∃x (LG(x) ∧ TypeC(x))",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "If people have busy schedules without time to cook, then they go to fast food places often.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Busy(x) → FastFood(x))",
        "CORRECT": "∀x (Busy(x) → FastFood(x))",
        "PREDICATES": "Busy(x)\nVegetarian(x)\nFastFood(x)\nHamburgers(x)\nMeat(x)\nConscious(x)"
    },
    {
        "NLSTATEMENT": "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)",
        "CORRECT": "¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)",
        "PREDICATES": "Busy(x)\nVegetarian(x)\nFastFood(x)\nHamburgers(x)\nMeat(x)\nConscious(x)"
    },
    {
        "NLSTATEMENT": "If people have busy schedules without time to cook, then they go to fast food places often.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Busy(x) → ∀x  FastFood(x))",
        "CORRECT": "∀x (Busy(x) → FastFood(x))",
        "PREDICATES": "Busy(x)\nVegetarian(x)\nFastFood(x)\nHamburgers(x)\nMeat(x)\nConscious(x)"
    },
    {
        "NLSTATEMENT": "If Sam uses a Mac, he will play a song.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∃x (Use(sam, mac) → (Song(x) ∧ Play(sam, x)))",
        "CORRECT": " ∃x (Use(sam, mac) → (Song(x) ∧ Play(sam, x)))",
        "PREDICATES": "Use(x, y)\nPlay(x, y)\nProject(x)\nWrittenIn(x, y)\nBe(x, y)\nDo(x, y)\nSong(x)"
    },
    {
        "NLSTATEMENT": "If Sam does a project written in Python, he will not use a Mac.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "CORRECT": " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "PREDICATES": "Use(x, y)\nPlay(x, y)\nProject(x)\nWrittenIn(x, y)\nBe(x, y)\nDo(x, y)\nSong(x)"
    },
    {
        "NLSTATEMENT": "If a song is not \"Perfect\", Sam will never play it.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (¬Be(x, perfect) → ¬Play(sam, x))",
        "CORRECT": " ∀x (¬Be(x, perfect) → ¬Play(sam, x))",
        "PREDICATES": "Use(x, y)\nPlay(x, y)\nProject(x)\nWrittenIn(x, y)\nBe(x, y)\nDo(x, y)\nSong(x)"
    },
    {
        "NLSTATEMENT": "Some pets are rabbits.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Pet(x) ∧ Reptile(x))",
        "CORRECT": "∃x (Pet(x) ∧ Reptile(x))",
        "PREDICATES": "HasFur(x)\nReptile(x)\nPet(x)\nRabbit(x)"
    },
    {
        "NLSTATEMENT": "All software is programmed. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Software(x) → Program(x))",
        "CORRECT": "∀x (Software(x) → Program(x))",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "All YouTube-related applications are video applications. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Youtube(x) → App(x))",
        "CORRECT": "∀x (Youtube(x) → App(x))",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "TikTok is not good.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Goodtiktok",
        "CORRECT": "¬Good(tiktok)",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "An APP is either related to YouTube or Instagram.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Youtube(x) ∨ Instagram(x))",
        "CORRECT": "∀x (Youtube(x) ∨ Instagram(x))",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "Located within Elliot County, Ordinary is on Kentucky Route 32.",
        "ERRORTYPE": "no_error",
        "SKETCH": "In(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)",
        "CORRECT": "In(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)",
        "PREDICATES": "UnincorporatedCommunity(x)\nOn(x, y)\nIn(x, y)\nNorthwestOf(x, y)"
    },
    {
        "NLSTATEMENT": "Ordinary is an unincorporated community.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "UnincorporatedCommunity(ordinary)",
        "CORRECT": "UnincorporatedCommunity(ordinary)",
        "PREDICATES": "UnincorporatedCommunity(x)\nOn(x, y)\nIn(x, y)\nNorthwestOf(x, y)"
    },
    {
        "NLSTATEMENT": "If Susan is a Harvard student, then she is a young adult.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "HarvardStudent(susan) → YoungAdult(susan)",
        "CORRECT": "HarvardStudent(susan) → YoungAdult(susan)",
        "PREDICATES": "YoungAdult(x)\nYaleStudent(x)\nCollegeStudent(x)\nDiligent(x)\nHarvardStudent(x)\nGoOnDiet(x)"
    },
    {
        "NLSTATEMENT": "If Susan is a Harvard student, then she is a young adult.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "HarvardStudent(susan) → YoungAdul(t(susa)n)",
        "CORRECT": "HarvardStudent(susan) → YoungAdult(susan)",
        "PREDICATES": "YoungAdult(x)\nYaleStudent(x)\nCollegeStudent(x)\nDiligent(x)\nHarvardStudent(x)\nGoOnDiet(x)"
    },
    {
        "NLSTATEMENT": "Someone is either a Yale student or a Harvard student.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "CORRECT": "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "PREDICATES": "YoungAdult(x)\nYaleStudent(x)\nCollegeStudent(x)\nDiligent(x)\nHarvardStudent(x)\nGoOnDiet(x)"
    },
    {
        "NLSTATEMENT": "Vic DiCara plays guitar and bass.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "CORRECT": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "PREDICATES": "Band(x, y)\nPlay(x, y)\nMusic(x, y)"
    },
    {
        "NLSTATEMENT": "Vic DiCara plays guitar and bass.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "CORRECT": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "PREDICATES": "Band(x, y)\nPlay(x, y)\nMusic(x, y)"
    },
    {
        "NLSTATEMENT": "Amy is good at sports or Amy is an Olympic gold medal winner.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)",
        "CORRECT": "GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)",
        "PREDICATES": "Athlete(x)\nScientist(x)\nNobelLaureate(x)\nOlympicGoldMedalWinner(x)\nGoodAtSports(x)"
    },
    {
        "NLSTATEMENT": "No scientists are good at sports.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Scient(ist(x) )→ ¬GoodAtSports(x))",
        "CORRECT": "∀x (Scientist(x) → ¬GoodAtSports(x))",
        "PREDICATES": "Athlete(x)\nScientist(x)\nNobelLaureate(x)\nOlympicGoldMedalWinner(x)\nGoodAtSports(x)"
    },
    {
        "NLSTATEMENT": "All Olympic gold medal winners are good athletes.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (OlympicGoldMedalWinner(x) → Athlete(x))",
        "CORRECT": "∀x (OlympicGoldMedalWinner(x) → Athlete(x))",
        "PREDICATES": "Athlete(x)\nScientist(x)\nNobelLaureate(x)\nOlympicGoldMedalWinner(x)\nGoodAtSports(x)"
    },
    {
        "NLSTATEMENT": "No fruits that are beneficial to people are on a warning list.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Benefit(x) → ∀x  ¬WarningList(x))",
        "CORRECT": "∀x (Benefit(x) → ¬WarningList(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "No fruits that are beneficial to people are on a warning list.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Benefit(x) → ∀x  ¬WarningList(x))",
        "CORRECT": "∀x (Benefit(x) → ¬WarningList(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(Benefit(k) ∧ Apple(k)) → (RedF)ruit(k)",
        "CORRECT": "¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "All fruits with the color red contain a large amount of vitamin C.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x RedFruit(x → VC(x))",
        "CORRECT": "∀x (RedFruit(x) → VC(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "All fruits with the color red contain a large amount of vitamin C.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (RedFruit(x) → VC(x))",
        "CORRECT": "∀x (RedFruit(x) → VC(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "James has a car or works at Meta.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "HaveCars(james) ∨ Meta(james)",
        "CORRECT": "HaveCars(james) ∨ Meta(james)",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "No students drive to their destination. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Student(x) → ¬Drive(x))",
        "CORRECT": "∀x (Student(x) → ¬Drive(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "If a person has a high income, then he/she will not take a bus to their destination.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (HighIncome(x) → ¬Bus(x))",
        "CORRECT": "∀x (HighIncome(x) → ¬Bus(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "Everyone who has a car will choose to drive to their destination. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (HaveCars(x) → ∀x  Drive(x))",
        "CORRECT": "∀x (HaveCars(x) → Drive(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "People will either take a bus or drive to their destination. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Bus(x) ∨ Drivex)",
        "CORRECT": "∀x (Bus(x) ∨ Drive(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "Everyone working at Meta has a high income. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Meta(x) → HighIncome(x))",
        "CORRECT": "∀x (Meta(x) → HighIncome(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "Students either go to the park or go to the movies. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Park(x) ⊕ Movies(x))",
        "CORRECT": "∀x (Park(x) ⊕ Movies(x))",
        "PREDICATES": "Nature(x)\nMovies(x)\nNoClass(x)\nSummerCamp(x)\nPark(x)\nFreeTime(x)"
    },
    {
        "NLSTATEMENT": "All students not in summer camp do not have class during the weekend. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (SummerCamp(x) → NoClass(x))",
        "CORRECT": "∀x (SummerCamp(x) → NoClass(x))",
        "PREDICATES": "Nature(x)\nMovies(x)\nNoClass(x)\nSummerCamp(x)\nPark(x)\nFreeTime(x)"
    },
    {
        "NLSTATEMENT": "No television stars are certified public accountants.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (TelevisionStar(x) → ∀x  ¬CertifiedPublicAccoutant(x))",
        "CORRECT": "∀x (TelevisionStar(x) → ¬CertifiedPublicAccoutant(x))",
        "PREDICATES": "GoodBusinessSense(x)\nTelevisionStar(x)\nCertifiedPublicAccoutant(x)"
    },
    {
        "NLSTATEMENT": "No student good at planning is awarded the Dean's List. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Planning(x) → ∀x  ¬Award(x))",
        "CORRECT": "∀x (Planning(x) → ¬Award(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "All students good at chemistry enjoy conducting experiments. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Chemistry(x) → ∀x  Experiment(x))",
        "CORRECT": "∀x (Chemistry(x) → Experiment(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "No student good at planning is awarded the Dean's List. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Planning(x) → ∀x  ¬Award(x))",
        "CORRECT": "∀x (Planning(x) → ¬Award(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "All students that enjoy conducting experiments are good at planning. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Experiment(x) → Planning(x))",
        "CORRECT": "∀x (Experiment(x) → Planning(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "A Leetode problem is either easy or hard.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Easy(x) ⊕ Hard(x))",
        "CORRECT": "∀x (Easy(x) ⊕ Hard(x))",
        "PREDICATES": "Easy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "A Leetode problem is either easy or hard.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Easy(x) ⊕ Hard(x))",
        "CORRECT": "∀x (Easy(x) ⊕ Hard(x))",
        "PREDICATES": "Easy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "All Leetcode problems that are recommended to novices are easy. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Recommended(x) → Easy(x))",
        "CORRECT": "∀x (Recommended(x) → Easy(x))",
        "PREDICATES": "Easy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))",
        "CORRECT": "∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))",
        "PREDICATES": "Spend(x, y)\nBorrow(x, y)\nRent(x, y)\nDriveTo(x, y)\nOwn(x, y)\nGoesTo(x, y)\nCamping(x, y)"
    },
    {
        "NLSTATEMENT": "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)",
        "CORRECT": "¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)",
        "PREDICATES": "Celebrating(x)\nOutgoing(x)\nGettingMarried(x)\nWeddings(x)\nLargeGathering(x)\nPreTeen(x)"
    },
    {
        "NLSTATEMENT": "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " LargeGathering(x) → Celebrating(x)",
        "CORRECT": "∀x LargeGathering(x) → Celebrating(x)",
        "PREDICATES": "Celebrating(x)\nOutgoing(x)\nGettingMarried(x)\nWeddings(x)\nLargeGathering(x)\nPreTeen(x)"
    },
    {
        "NLSTATEMENT": "All people who attend weddings are getting married or have friends who are getting married.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " Weddings(x) → GettingMarried(x)",
        "CORRECT": "∀x Weddings(x) → GettingMarried(x)",
        "PREDICATES": "Celebrating(x)\nOutgoing(x)\nGettingMarried(x)\nWeddings(x)\nLargeGathering(x)\nPreTeen(x)"
    },
    {
        "NLSTATEMENT": "All Republicans are anti-abortion.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Republicans(x) → Anti-abortion(x))",
        "CORRECT": "∀x (Republicans(x) → Anti-abortion(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either Republicans or Democrats. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (Republicans(x) ∨ Democrats(x))",
        "CORRECT": " ∀x (Republicans(x) ∨ Democrats(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either conservative or liberal. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Conservative(x) ∨ ∀x  Liberal(x))",
        "CORRECT": " ∀x (Conservative(x) ∨ Liberal(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either Republicans or Democrats. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Republicans(x) ∨ ∀x  Democrats(x))",
        "CORRECT": " ∀x (Republicans(x) ∨ Democrats(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either Republicans or Democrats. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Republicans(x) ∨ ∀x  Democrats(x))",
        "CORRECT": " ∀x (Republicans(x) ∨ Democrats(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "All Republicans are anti-abortion.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Republicans(x) → Anti-abortion(x))",
        "CORRECT": "∀x (Republicans(x) → Anti-abortion(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "A U.S government official is either conservative or a Republican.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "CORRECT": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either conservative or liberal. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Conservative(x) ∨ Liberal(x))",
        "CORRECT": " ∀x (Conservative(x) ∨ Liberal(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "All advocates of high tariff rates are Republicans.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (AdvocateOfHighTariff(x) → Republican(x))",
        "CORRECT": "∀x (AdvocateOfHighTariff(x) → Republican(x))",
        "PREDICATES": "Republican(x)\nConservative(x)\nAdvocateOfHighTariff(x)"
    },
    {
        "NLSTATEMENT": "No athletes are slow runners. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Athlete(x) → ¬SlowRunner(x))",
        "CORRECT": "∀x (Athlete(x) → ¬SlowRunner(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nAthlete(x)\nKnicksPlayer(x)\nNBAPlayer(x)\nSlowRunner(x)"
    },
    {
        "NLSTATEMENT": "Jim is either not a professional basketball player or not a slow runner. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))",
        "CORRECT": "¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nAthlete(x)\nKnicksPlayer(x)\nNBAPlayer(x)\nSlowRunner(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nAthlete(x)\nKnicksPlayer(x)\nNBAPlayer(x)\nSlowRunner(x)"
    },
    {
        "NLSTATEMENT": "All kids love animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Kid(x) → ∀x  LoveAnimals(x))",
        "CORRECT": "∀x (Kid(x) → LoveAnimals(x))",
        "PREDICATES": "LoveAnimals(x)\nToddler(x)\nKid(x)\nBad(x)\nPirate(x)"
    },
    {
        "NLSTATEMENT": "If Nancy is not a pirate, then Nancy loves animals.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬Pirate(nancy) → LoveAnimals(nancy)",
        "CORRECT": "¬Pirate(nancy) → LoveAnimals(nancy)",
        "PREDICATES": "LoveAnimals(x)\nToddler(x)\nKid(x)\nBad(x)\nPirate(x)"
    },
    {
        "NLSTATEMENT": "If someone loves animals, then they are not bad.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (LoveAnimals((x) → ¬Bad)(x))",
        "CORRECT": "∀x (LoveAnimals(x) → ¬Bad(x))",
        "PREDICATES": "LoveAnimals(x)\nToddler(x)\nKid(x)\nBad(x)\nPirate(x)"
    },
    {
        "NLSTATEMENT": "Kirkland is a US city.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "CityCountry(kirkland, us)",
        "CORRECT": "CityCountry(kirkland, us)",
        "PREDICATES": "FromCountry(x, y)\nIsFilm(x)\nDirectedBy(x, y)\nNomination(x, y)\nIsDocumentary(x)\nFilmmaker(x)\nFromCity(x, y)\nCityCountry(x, y)"
    },
    {
        "NLSTATEMENT": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)",
        "CORRECT": "DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)",
        "PREDICATES": "FromCountry(x, y)\nIsFilm(x)\nDirectedBy(x, y)\nNomination(x, y)\nIsDocumentary(x)\nFilmmaker(x)\nFromCity(x, y)\nCityCountry(x, y)"
    },
    {
        "NLSTATEMENT": "If a person is from a city in a country, the person is from the country.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))",
        "CORRECT": "∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))",
        "PREDICATES": "FromCountry(x, y)\nIsFilm(x)\nDirectedBy(x, y)\nNomination(x, y)\nIsDocumentary(x)\nFilmmaker(x)\nFromCity(x, y)\nCityCountry(x, y)"
    },
    {
        "NLSTATEMENT": "All bears in zoos are not wild. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Bear(x) ∧( InZoo(x)) → ¬Wild()x))",
        "CORRECT": "∀x ((Bear(x) ∧ InZoo(x)) → ¬Wild(x))",
        "PREDICATES": "Bear(x)\nWild(x)\nInZoo(x)"
    },
    {
        "NLSTATEMENT": "Queens are female.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Queen(x) → Female(x))",
        "CORRECT": "∀x (Queen(x) → Female(x))",
        "PREDICATES": "Leader(x)\nFemale(x)\nMale(x)\nKing(x)\nInMonarchy(x)\nQueen(x)"
    },
    {
        "NLSTATEMENT": "Leaders are either a king or a queen.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Leader(x) → King(x) ⊕ Queen(x))",
        "CORRECT": "∀x (Leader(x) → King(x) ⊕ Queen(x))",
        "PREDICATES": "Leader(x)\nFemale(x)\nMale(x)\nKing(x)\nInMonarchy(x)\nQueen(x)"
    },
    {
        "NLSTATEMENT": "Elizabeth is a leader",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Leaderelizabeth",
        "CORRECT": "Leader(elizabeth)",
        "PREDICATES": "Leader(x)\nFemale(x)\nMale(x)\nKing(x)\nInMonarchy(x)\nQueen(x)"
    },
    {
        "NLSTATEMENT": "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (WorkHome(x) → Jobs(x))",
        "CORRECT": "∀x (WorkHome(x) → Jobs(x))",
        "PREDICATES": "Late(x)\nJobs(x)\nWorkHome(x)\nCalifornia(x)\nCelebrities(x)\nMatcha(x)"
    },
    {
        "NLSTATEMENT": "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Matcha(x) → ¬Late(x))",
        "CORRECT": "∀x (Matcha(x) → ¬Late(x))",
        "PREDICATES": "Late(x)\nJobs(x)\nWorkHome(x)\nCalifornia(x)\nCelebrities(x)\nMatcha(x)"
    },
    {
        "NLSTATEMENT": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))",
        "CORRECT": "(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))",
        "PREDICATES": "Late(x)\nJobs(x)\nWorkHome(x)\nCalifornia(x)\nCelebrities(x)\nMatcha(x)"
    },
    {
        "NLSTATEMENT": "Thomas Barber played in the Football League for Aston Villa.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
        "CORRECT": "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
        "PREDICATES": "ProfessionalFootballer(x)\nPlayedInTheFootballLeagueFor(x, y)\nPlayedAs(x, y)\nScoredTheWinningGoalIn(x, y)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Thomas Barber scored the winning goal in the 1913 FA Cup Final.",
        "ERRORTYPE": "no_error",
        "SKETCH": "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)",
        "CORRECT": "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)",
        "PREDICATES": "ProfessionalFootballer(x)\nPlayedInTheFootballLeagueFor(x, y)\nPlayedAs(x, y)\nScoredTheWinningGoalIn(x, y)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Thomas Barber played as a half back and inside left.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)",
        "CORRECT": "PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)",
        "PREDICATES": "ProfessionalFootballer(x)\nPlayedInTheFootballLeagueFor(x, y)\nPlayedAs(x, y)\nScoredTheWinningGoalIn(x, y)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ∀y (PlayInConcert(y, x) → GoodAt(y, x))",
        "CORRECT": "∀y ∀x (PlayInConcert(y, x) → GoodAt(y, x))",
        "PREDICATES": "Play(x, y)\nPlayInConcert(x, y)\nPlayerInConcert(x)\nGoodAt(x, y)"
    },
    {
        "NLSTATEMENT": "Peter plays piano, violin, and saxophone.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Play(peter, piano) ∧Play(peter, violin)",
        "CORRECT": "Play(peter, piano) ∧Play(peter, violin)",
        "PREDICATES": "Play(x, y)\nPlayInConcert(x, y)\nPlayerInConcert(x)\nGoodAt(x, y)"
    },
    {
        "NLSTATEMENT": "Oliver plays a different musical instrument from Peter in the concert.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬PlayInConcert(oliver, piano)",
        "CORRECT": "¬PlayInConcert(oliver, piano)",
        "PREDICATES": "Play(x, y)\nPlayInConcert(x, y)\nPlayerInConcert(x)\nGoodAt(x, y)"
    },
    {
        "NLSTATEMENT": "Every animal that travels on land enjoys basking in the sun.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (TravelsOnLand(x) → EnjoysBasking(x))",
        "CORRECT": "∀x (TravelsOnLand(x) → EnjoysBasking(x))",
        "PREDICATES": "CanSwim(x)\nTravelsOnLand(x)\nSplashes(x)\nCanWalk(x)\nGoesUnderwater(x)\nEnjoysWater(x)\nEnjoysBasking(x)"
    },
    {
        "NLSTATEMENT": "If something can go underwater, then it enjoys water.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (GoesUnderwater(x) → EnjoysWater(x))",
        "CORRECT": "∀x (GoesUnderwater(x) → EnjoysWater(x))",
        "PREDICATES": "CanSwim(x)\nTravelsOnLand(x)\nSplashes(x)\nCanWalk(x)\nGoesUnderwater(x)\nEnjoysWater(x)\nEnjoysBasking(x)"
    },
    {
        "NLSTATEMENT": "Either an animal can swim or it can walk.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CanSwim(x) ∨ CanWalk(x))",
        "CORRECT": "∀x (CanSwim(x) ∨ CanWalk(x))",
        "PREDICATES": "CanSwim(x)\nTravelsOnLand(x)\nSplashes(x)\nCanWalk(x)\nGoesUnderwater(x)\nEnjoysWater(x)\nEnjoysBasking(x)"
    },
    {
        "NLSTATEMENT": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
        "ERRORTYPE": "no_error",
        "SKETCH": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "CORRECT": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " PValue(cancerResearchers, theImportanceOfS(ubstitu)tionsToCancerGrowth)",
        "CORRECT": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
        "CORRECT": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "P values are thresholds for belief, not metrics of effect. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (PValue(x) → ThresholdsForBelief(x) ∧ ∀x  ¬MetricsOfEffect(x))",
        "CORRECT": " ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "A worksheet is either paper or is environment-friendly.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)",
        "CORRECT": "Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All environment-friendly things are good.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (EnvironmentFriendly(x) → Good(x))",
        "CORRECT": "∀x (EnvironmentFriendly(x) → Good(x))",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All environment-friendly things are good.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (EnvironmentFriendly(x) → ∀x  Good(x))",
        "CORRECT": "∀x (EnvironmentFriendly(x) → Good(x))",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All woodware is dispensable.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Woodware(x) → Dispensable(x))",
        "CORRECT": "∀x (Woodware(x) → Dispensable(x))",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All snakes are reptiles.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Snake(x) → Reptile(x))",
        "CORRECT": "∀x (Snake(x) → Reptile(x))",
        "PREDICATES": "HasFur(x)\nSnake(x)\nReptile(x)"
    },
    {
        "NLSTATEMENT": "All buildings owned by Bloomberg are located in Manhattans. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Bloomberg(x) → ∀x  Located(manhattans, x))",
        "CORRECT": "∀x (Bloomberg(x) → Located(manhattans, x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nBloombergLogo(x)\nLocated(x, y)"
    },
    {
        "NLSTATEMENT": "All buildings owned by Bloomberg are located in Manhattans. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Bloomberg(x) → Located(manhattans, x))",
        "CORRECT": "∀x (Bloomberg(x) → Located(manhattans, x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nBloombergLogo(x)\nLocated(x, y)"
    },
    {
        "NLSTATEMENT": "Tower A is managed by the Yale Housing.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "YaleHousing(tower-a)",
        "CORRECT": "YaleHousing(tower-a)",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nBloombergLogo(x)\nLocated(x, y)"
    },
    {
        "NLSTATEMENT": "Either an animal is a bird or it eats other animals.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Bird(x) ∨ EatOtherAnimals(x))",
        "CORRECT": "∀x (Bird(x) ∨ EatOtherAnimals(x))",
        "PREDICATES": "Carnivore(x)\nReptile(x)\nLizard(x)\nBird(x)\nColdBlooded(x)\nEatOtherAnimals(x)"
    },
    {
        "NLSTATEMENT": "If an animal eats other animals, then it is a carnivore.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (EatOtherAnimals(x) → Carnivore((x)))",
        "CORRECT": "∀x (EatOtherAnimals(x) → Carnivore(x))",
        "PREDICATES": "Carnivore(x)\nReptile(x)\nLizard(x)\nBird(x)\nColdBlooded(x)\nEatOtherAnimals(x)"
    },
    {
        "NLSTATEMENT": "If an animal eats other animals, then it is a carnivore.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (EatOth(erAnimals)(x) → Carnivore(x))",
        "CORRECT": "∀x (EatOtherAnimals(x) → Carnivore(x))",
        "PREDICATES": "Carnivore(x)\nReptile(x)\nLizard(x)\nBird(x)\nColdBlooded(x)\nEatOtherAnimals(x)"
    },
    {
        "NLSTATEMENT": "The Mongol region was where Ambiorus Dementjevi lived.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (AmbiortusDementjevi(x) → Lived(x, mongolregion))",
        "CORRECT": "∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "The Mongol region was where Ambiorus Dementjevi lived.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (AmbiortusDementjevi(x) → ∀x  Lived(x, mongolregion))",
        "CORRECT": "∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "Ambiortus is a prehistoric bird genus.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)",
        "CORRECT": "Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "The Mongol region was where Ambiorus Dementjevi lived.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (AmbiortusDementjevi(x) → ∀x  Lived(x, mongolregion))",
        "CORRECT": "∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "Either someone is a football player or a basketball player.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "CORRECT": "∀x (BasketballPlayer(x) ∨ PlayFootball(x))",
        "PREDICATES": "InShape(x)\nThrowFootball(x)\nThrowFootballSpiral(x)\nTall(x)\nPlayFootball(x)\nBasketballPlayer(x)\nUseFootball(x)"
    },
    {
        "NLSTATEMENT": "If someone is tall, then they are in shape.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Tall(x) → InShape(x))",
        "CORRECT": "∀x (Tall(x) → InShape(x))",
        "PREDICATES": "InShape(x)\nThrowFootball(x)\nThrowFootballSpiral(x)\nTall(x)\nPlayFootball(x)\nBasketballPlayer(x)\nUseFootball(x)"
    },
    {
        "NLSTATEMENT": "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)",
        "CORRECT": "¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)",
        "PREDICATES": "InShape(x)\nThrowFootball(x)\nThrowFootballSpiral(x)\nTall(x)\nPlayFootball(x)\nBasketballPlayer(x)\nUseFootball(x)"
    },
    {
        "NLSTATEMENT": "Fort Ticonderoga is the current name for Fort Carillon.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "CurrentNamefortticonderoga, fortcarillon",
        "CORRECT": "CurrentName(fortticonderoga, fortcarillon)",
        "PREDICATES": "LocatedIn(x, y)\nCurrentName(x, y)\nBuilt(x, y)"
    },
    {
        "NLSTATEMENT": "Fort Carillon was located in New France.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "LocatedIn(fortcarillon, newfrance)",
        "CORRECT": "LocatedIn(fortcarillon, newfrance)",
        "PREDICATES": "LocatedIn(x, y)\nCurrentName(x, y)\nBuilt(x, y)"
    },
    {
        "NLSTATEMENT": "New France is not in Europe.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬LocatedIn(newfrance, europe)",
        "CORRECT": "¬LocatedIn(newfrance, europe)",
        "PREDICATES": "LocatedIn(x, y)\nCurrentName(x, y)\nBuilt(x, y)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NBAPlayer(x) → ∀x  ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "No soccer players are professional basketball players.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "CORRECT": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (NBAPlayer(x) → Professi(ona)lBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All folk songs are songs. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (FolkSong(x) → Song(x))",
        "CORRECT": "∀x (FolkSong(x) → Song(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "Inception is a sci-fi movie.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "ScifiMovie(inception)",
        "CORRECT": "ScifiMovie(inception)",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All sci-fi movies are movies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (ScifiMoviex) → Movie(x)",
        "CORRECT": "∀x (ScifiMovie(x) → Movie(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "No songs are visual. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Song(x) → ¬Visual(x))",
        "CORRECT": "∀x (Song(x) → ¬Visual(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "Jeff is not an extrovert and someone who likes to talk to strangers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangersjeff",
        "CORRECT": " ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)",
        "PREDICATES": "Extroverts(x)\nOvertlyExpressive(x)\nLikeToTalkToStrangers(x)\nShyAndReticentPerson(x)\nIntroverts(x)"
    },
    {
        "NLSTATEMENT": "People are either extroverts or introverts.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Extroverts(x) ∨ ∀x  Introverts(x)) ",
        "CORRECT": " ∀x (Extroverts(x) ∨ Introverts(x)) ",
        "PREDICATES": "Extroverts(x)\nOvertlyExpressive(x)\nLikeToTalkToStrangers(x)\nShyAndReticentPerson(x)\nIntroverts(x)"
    },
    {
        "NLSTATEMENT": "No shy and reticent person likes to talk to strangers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x ShyAndReticentPerson(x → ¬LikeToTalkToStrangers(x))",
        "CORRECT": " ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))",
        "PREDICATES": "Extroverts(x)\nOvertlyExpressive(x)\nLikeToTalkToStrangers(x)\nShyAndReticentPerson(x)\nIntroverts(x)"
    },
    {
        "NLSTATEMENT": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ThreePointer(x) → TwoPointer(x))",
        "CORRECT": "∀x (ThreePointer(x) → TwoPointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "LowScore(candace) ⊕ ThreePointer(candace)",
        "CORRECT": "LowScore(candace) ⊕ ThreePointer(candace)",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (TopPlayer(x) ∨ ∀x  ThreePointer(x))",
        "CORRECT": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ThreePointer(x) → TwoPointer(x))",
        "CORRECT": "∀x (ThreePointer(x) → TwoPointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No low-scoring players are top players in the league.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (LowScore(x) → ∀x  ¬TopPlayer(x))",
        "CORRECT": "∀x (LowScore(x) → ¬TopPlayer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "CORRECT": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Two(Pointer(x) → ¬BadM)id(x))",
        "CORRECT": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x TwoPointer(x → ¬BadMid(x))",
        "CORRECT": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "CORRECT": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No plants are fungi.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Plant(x) → ∀x  ¬Fungi(x))",
        "CORRECT": "∀x (Plant(x) → ¬Fungi(x))",
        "PREDICATES": "Plant(x)\nMushroom(x)\nFungi(x)"
    },
    {
        "NLSTATEMENT": "And some streets are roads.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Street(x) ∧ Road(x))",
        "CORRECT": "∃x (Street(x) ∧ Road(x))",
        "PREDICATES": "Street(x)\nRoad(x)\nClean(x)"
    },
    {
        "NLSTATEMENT": "New York City is on the East Coast. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "On(newyorkcity, eastcoast)",
        "CORRECT": "On(newyorkcity, eastcoast)",
        "PREDICATES": "Uncomfortable(x)\nInFirstClass(x)\nOn(x, y)\nTravelingTo(x, y)\nTravelingFrom(x, y)\nOnLongFlight(x)"
    },
    {
        "NLSTATEMENT": "Singh Kaur is a musician and famous.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Musician(singhKaur) ∧ Famous(singhKaur)",
        "CORRECT": "Musician(singhKaur) ∧ Famous(singhKaur)",
        "PREDICATES": "Famous(x)\nSinger(x)\nBusy(x)\nMusician(x)\nWriter(x)\nMakeMoney(x)"
    },
    {
        "NLSTATEMENT": "A musician can be a singer or a writer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Musician(x) ∧ ∃x  Singer(x) ∨ Writer(x))",
        "CORRECT": "∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))",
        "PREDICATES": "Famous(x)\nSinger(x)\nBusy(x)\nMusician(x)\nWriter(x)\nMakeMoney(x)"
    },
    {
        "NLSTATEMENT": "Musicians have very busy lives.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Musician(x) → ∀x  Busy(x))",
        "CORRECT": "∀x (Musician(x) → Busy(x))",
        "PREDICATES": "Famous(x)\nSinger(x)\nBusy(x)\nMusician(x)\nWriter(x)\nMakeMoney(x)"
    },
    {
        "NLSTATEMENT": "Everything tall has  height.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Tall(x) → HasHeight(x))",
        "CORRECT": "∀x (Tall(x) → HasHeight(x))",
        "PREDICATES": "Building(x)\nTall(x)\nHasHeight(x)"
    },
    {
        "NLSTATEMENT": "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Cat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield)",
        "CORRECT": "Cat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield)",
        "PREDICATES": "ShareHome(x, y)\nLikeLasagna(x)\nBeFat(x)\nHate(x, y)\nBeOrange(x)\nBeChildish(x)\nCat(x)\nMainCharacterGarfield(x)\nPet(x, y)\nBePossessive(x)"
    },
    {
        "NLSTATEMENT": "Hulu is a goat or a human.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Goat(hulu) ∨ Human(hulu)",
        "CORRECT": "Goat(hulu) ∨ Human(hulu)",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "All goats are animals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Goat(x) → Animal(x))",
        "CORRECT": "∀x (Goat(x) → Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "All humans eat.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Human(x → Eat(x))",
        "CORRECT": "∀x (Human(x) → Eat(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "If something eats, then it is not a plant.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Eat(x) → ¬Plant(x))",
        "CORRECT": "∀x (Eat(x) → ¬Plant(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "All humans eat.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Human(x) → Eat(x))",
        "CORRECT": "∀x (Human(x) → Eat(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "All goats are animals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Goat(x) → Animal(x))",
        "CORRECT": "∀x (Goat(x) → Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "The Controlled Substances Act was an act passed in 1971.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "CORRECT": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "PREDICATES": "PassedIn(x, y)\nHarmful(x)\nPreventsHarm(x)\nBeneficial(x)\nDrugs(x)\nChemicalEndangerment(x)\nAct(x)\nExposedToControlledSubstance(x, y)\nControlledSubstances(x)"
    },
    {
        "NLSTATEMENT": "The Controlled Substances Act was an act passed in 1971.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "CORRECT": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "PREDICATES": "PassedIn(x, y)\nHarmful(x)\nPreventsHarm(x)\nBeneficial(x)\nDrugs(x)\nChemicalEndangerment(x)\nAct(x)\nExposedToControlledSubstance(x, y)\nControlledSubstances(x)"
    },
    {
        "NLSTATEMENT": "Some Acts prevent harmful things.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (Act(x) ∧ Preven(tsHarm()x))",
        "CORRECT": "∃x (Act(x) ∧ PreventsHarm(x))",
        "PREDICATES": "PassedIn(x, y)\nHarmful(x)\nPreventsHarm(x)\nBeneficial(x)\nDrugs(x)\nChemicalEndangerment(x)\nAct(x)\nExposedToControlledSubstance(x, y)\nControlledSubstances(x)"
    },
    {
        "NLSTATEMENT": "All entrepreneurs are starting a new company.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (Entrepreneurs(x) → StartingANewCompany(x))",
        "CORRECT": " ∀x (Entrepreneurs(x) → StartingANewCompany(x))",
        "PREDICATES": "WorkAtCorporateJobs(x)\nEntrepreneurs(x)\naverse(x)\nHateWorkingForOthers(x)\nStartingANewCompany(x)"
    },
    {
        "NLSTATEMENT": "No people who work at corporate jobs are starting a new company.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))",
        "CORRECT": "∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))",
        "PREDICATES": "WorkAtCorporateJobs(x)\nEntrepreneurs(x)\naverse(x)\nHateWorkingForOthers(x)\nStartingANewCompany(x)"
    },
    {
        "NLSTATEMENT": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)",
        "CORRECT": " ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)",
        "PREDICATES": "WorkAtCorporateJobs(x)\nEntrepreneurs(x)\naverse(x)\nHateWorkingForOthers(x)\nStartingANewCompany(x)"
    },
    {
        "NLSTATEMENT": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)",
        "CORRECT": "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)",
        "PREDICATES": "Cook(x)\nRun(x)\nSmokey(x)\nKitchen(x)\nUp(x)\nDown(x)"
    },
    {
        "NLSTATEMENT": "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Kitchen(x) → Up(x) ⊕ Down(x))",
        "CORRECT": "∀x (Kitchen(x) → Up(x) ⊕ Down(x))",
        "PREDICATES": "Cook(x)\nRun(x)\nSmokey(x)\nKitchen(x)\nUp(x)\nDown(x)"
    },
    {
        "NLSTATEMENT": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)",
        "CORRECT": "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)",
        "PREDICATES": "Cook(x)\nRun(x)\nSmokey(x)\nKitchen(x)\nUp(x)\nDown(x)"
    },
    {
        "NLSTATEMENT": "New York City is a highly developed city.",
        "ERRORTYPE": "no_error",
        "SKETCH": "HighlyDeveloped(nyc)",
        "CORRECT": "HighlyDeveloped(nyc)",
        "PREDICATES": "Locate(x, y)\nHighlyDeveloped(x)"
    },
    {
        "NLSTATEMENT": "New York City is Located in the United States of America.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Locate(nyc, usa)",
        "CORRECT": "Locate(nyc, usa)",
        "PREDICATES": "Locate(x, y)\nHighlyDeveloped(x)"
    },
    {
        "NLSTATEMENT": "New York City is Located in the United States of America.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Locate(nyc, usa)",
        "CORRECT": "Locate(nyc, usa)",
        "PREDICATES": "Locate(x, y)\nHighlyDeveloped(x)"
    },
    {
        "NLSTATEMENT": "Callus 4 is a poem that was written by the ancient Roman writer Catullus.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)",
        "CORRECT": "Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)",
        "PREDICATES": "Poem(x)\nWrittenBy(x, y)\nAgingAnalogy(x)\nWaves(x)\nRoman(x)\nRetirementShip(x)\nLambic(x)"
    },
    {
        "NLSTATEMENT": "Callus 4 is a story about the retirement of a well-traveled ship.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Retirem(entShip(callus)4)",
        "CORRECT": "RetirementShip(callus4)",
        "PREDICATES": "Poem(x)\nWrittenBy(x, y)\nAgingAnalogy(x)\nWaves(x)\nRoman(x)\nRetirementShip(x)\nLambic(x)"
    },
    {
        "NLSTATEMENT": "Callus 4 is a story about the retirement of a well-traveled ship.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "RetirementShip(callus4)",
        "CORRECT": "RetirementShip(callus4)",
        "PREDICATES": "Poem(x)\nWrittenBy(x, y)\nAgingAnalogy(x)\nWaves(x)\nRoman(x)\nRetirementShip(x)\nLambic(x)"
    },
    {
        "NLSTATEMENT": "Westworld is an American science fiction-thriller TV series.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)",
        "CORRECT": "TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)",
        "PREDICATES": "TVSeries(x)\nScienceFictionThriller(x)\nDebut(x, y)\nDirect(x, y)\nAdapt(x, y)\nWrite(x, y)\nAbout(x, y)\nProduce(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))",
        "CORRECT": "∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))",
        "PREDICATES": "TVSeries(x)\nScienceFictionThriller(x)\nDebut(x, y)\nDirect(x, y)\nAdapt(x, y)\nWrite(x, y)\nAbout(x, y)\nProduce(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "CORRECT": "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "PREDICATES": "Country(x)\nWon(x, y)\nFewerGoldMedalsThan(x, y)\nPlaced(x, y)\nSecondToBe(x, y)\nHeldIn(x, y)"
    },
    {
        "NLSTATEMENT": "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Wony, mostgoldmedals) → FewerGoldMedalsThan(x, y)",
        "CORRECT": "∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))",
        "PREDICATES": "Country(x)\nWon(x, y)\nFewerGoldMedalsThan(x, y)\nPlaced(x, y)\nSecondToBe(x, y)\nHeldIn(x, y)"
    },
    {
        "NLSTATEMENT": "China won the most gold medals (48) in the 2008 Summer Olympics.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Won(china, mostgoldmedals)",
        "CORRECT": "Won(china, mostgoldmedals)",
        "PREDICATES": "Country(x)\nWon(x, y)\nFewerGoldMedalsThan(x, y)\nPlaced(x, y)\nSecondToBe(x, y)\nHeldIn(x, y)"
    },
    {
        "NLSTATEMENT": "Yangshuo is not a district in Guilin. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬DistrictIn(yangshuo, guilin)",
        "CORRECT": "¬DistrictIn(yangshuo, guilin)",
        "PREDICATES": "DistrictIn(x, y)\nCity(x)"
    },
    {
        "NLSTATEMENT": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) (∧ DistrictIn(diecai, gui)lin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)",
        "CORRECT": "DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)",
        "PREDICATES": "DistrictIn(x, y)\nCity(x)"
    },
    {
        "NLSTATEMENT": "Yangshuo is not a district in Guilin. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬DistrictIn(ya(ngshuo, guili)n)",
        "CORRECT": "¬DistrictIn(yangshuo, guilin)",
        "PREDICATES": "DistrictIn(x, y)\nCity(x)"
    },
    {
        "NLSTATEMENT": "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Homecooked(x) → GoingOut(x))",
        "CORRECT": "∀x (Homecooked(x) → GoingOut(x))",
        "PREDICATES": "Homecooked(x)\nGoingOut(x)\nProfessional(x)\nSpace(x)\nGarden(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (GoingOut(x) → Takeout(x))",
        "CORRECT": "∀x (GoingOut(x) → Takeout(x))",
        "PREDICATES": "Homecooked(x)\nGoingOut(x)\nProfessional(x)\nSpace(x)\nGarden(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "All people who grow their own fresh vegetables in their home garden also have ample space.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Garden(x) → ∀x  Space(x))",
        "CORRECT": "∀x (Garden(x) → Space(x))",
        "PREDICATES": "Homecooked(x)\nGoingOut(x)\nProfessional(x)\nSpace(x)\nGarden(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to the company are connected to Google Home. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Company(x) → GoogleHome(x))",
        "CORRECT": "∀x (Company(x) → GoogleHome(x))",
        "PREDICATES": "Controlled(x)\nCompany(x)\nWifi(x)\nGoogleHome(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to employees are connected to the company's wifi. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Employee(x) → Wifi(x))",
        "CORRECT": "∀x (Employee(x) → Wifi(x))",
        "PREDICATES": "Controlled(x)\nCompany(x)\nWifi(x)\nGoogleHome(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices that connect to the company's wifi are easy to operate. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Wifi(x) → EasyToOperatex)",
        "CORRECT": "∀x (Wifi(x) → EasyToOperate(x))",
        "PREDICATES": "Controlled(x)\nCompany(x)\nWifi(x)\nGoogleHome(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Orchestra(x) ⊕ Unique(x))",
        "CORRECT": "∀x (Orchestra(x) ⊕ Unique(x))",
        "PREDICATES": "Capable(x)\nUnique(x)\nTouring(x)\nInteresting(x)\nOrchestra(x)"
    },
    {
        "NLSTATEMENT": "All musicians who are interesting as individual performers are capable of attracting large audiences.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Interesting(x)( → Cap)able(x))",
        "CORRECT": "∀x (Interesting(x) → Capable(x))",
        "PREDICATES": "Capable(x)\nUnique(x)\nTouring(x)\nInteresting(x)\nOrchestra(x)"
    },
    {
        "NLSTATEMENT": "No touring musicians are permanent members of an orchestra.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Orchestra(x) → ¬Touring(x))",
        "CORRECT": "∀x (Orchestra(x) → ¬Touring(x))",
        "PREDICATES": "Capable(x)\nUnique(x)\nTouring(x)\nInteresting(x)\nOrchestra(x)"
    },
    {
        "NLSTATEMENT": "Potter is a wizard and flies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Wizard((potter) ∧ Fly(potte)r)",
        "CORRECT": "Wizard(potter) ∧ Fly(potter)",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "Potter is a wizard and flies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Wizard(potter) ∧ Flypotter",
        "CORRECT": "Wizard(potter) ∧ Fly(potter)",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "Every person that knows magic can fly.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (KnowMagic(x) → Fly(x))",
        "CORRECT": "∀x (KnowMagic(x) → Fly(x))",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "Harry either yells and flies, or neither yells nor flies.",
        "ERRORTYPE": "no_error",
        "SKETCH": "(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))",
        "CORRECT": "(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "All produced in the US are sold in the US. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (US(x) → SoldInUS(x))",
        "CORRECT": "∀x (US(x) → SoldInUS(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "All sold in the US are sold in Walmart. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (SoldInUS(x) → ∀x  SoldInWalmart(x))",
        "CORRECT": "∀x (SoldInUS(x) → SoldInWalmart(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "G-910 is either displayed on the homepage or cheaper.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))",
        "CORRECT": "¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "Products are either produced in China or the US. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (China(x) ⊕ USx)",
        "CORRECT": "∀x (China(x) ⊕ US(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "All produced in China are labeled. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (China(x) → Labeled(x))",
        "CORRECT": "∀x (China(x) → Labeled(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "If people are environmentally conscious, then they have solar panels in their homes.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Environmental(x) → Solar(x))",
        "CORRECT": "∀x (Environmental(x) → Solar(x))",
        "PREDICATES": "Environmental(x)\nDailyMail(x)\nAmazon(x)\nSaveMoney(x)\nNeighborhood(x)\nSolar(x)"
    },
    {
        "NLSTATEMENT": "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Ama(zon(x) → )DailyMail(x))",
        "CORRECT": "∀x (Amazon(x) → DailyMail(x))",
        "PREDICATES": "Environmental(x)\nDailyMail(x)\nAmazon(x)\nSaveMoney(x)\nNeighborhood(x)\nSolar(x)"
    },
    {
        "NLSTATEMENT": "Evidence can be either satisfactory or unsatisfactory.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Crime(x) ∧ ∀x  Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))",
        "CORRECT": "∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))",
        "PREDICATES": "Satisfactory(x)\nInvestigatePersonally(x, y)\nEvidence(x)\nCountry(x)\nCrime(x)\nProsecutor(x)\nPoliceCompInves(x)\nHandToProsecutor(x, y)\nUnsatisfactory(x)\nProsecuteTheOffender(x, y)"
    },
    {
        "NLSTATEMENT": "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → ∀x  Evidence(y) ∧ HandToProsecutor(x, y))",
        "CORRECT": "∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))",
        "PREDICATES": "Satisfactory(x)\nInvestigatePersonally(x, y)\nEvidence(x)\nCountry(x)\nCrime(x)\nProsecutor(x)\nPoliceCompInves(x)\nHandToProsecutor(x, y)\nUnsatisfactory(x)\nProsecuteTheOffender(x, y)"
    },
    {
        "NLSTATEMENT": "In Indonesia, the prosecutor only personally investigates cases of some special crimes.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃y ∃x (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))",
        "CORRECT": "∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))",
        "PREDICATES": "Satisfactory(x)\nInvestigatePersonally(x, y)\nEvidence(x)\nCountry(x)\nCrime(x)\nProsecutor(x)\nPoliceCompInves(x)\nHandToProsecutor(x, y)\nUnsatisfactory(x)\nProsecuteTheOffender(x, y)"
    },
    {
        "NLSTATEMENT": "Moonwatch is not a digital watch or an automatic.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬DigitalWat(ch(moonwatch) ⊕ Auto)maticWatch(moonwatch)",
        "CORRECT": "¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "No watch that is battery-powered is automatic.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))",
        "CORRECT": "∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "All digital watches are battery-powered.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (DigitalWatch(x) → ∀x  BatteryPoweredWatch(x))",
        "CORRECT": "∀x (DigitalWatch(x) → BatteryPoweredWatch(x))",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "Some mechanical watches are automatic.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (MechanicalWatch(x) ∧ AutomaticWatch(x))",
        "CORRECT": "∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "A country cannot simultaneously regulate the exchange rate and successfully control inflation.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬( (InfControl(x) ∧ ∀x  ExRate(x)))",
        "CORRECT": "¬(∀x (InfControl(x) ∧ ExRate(x)))",
        "PREDICATES": "ExRate(x)\nStongCurr(x)\nExportFall(x)\nEffMonPolicy(x)\nEmbargo(x)\nInfControl(x)"
    },
    {
        "NLSTATEMENT": "Video Gag is a French television series that airs weekly.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))",
        "CORRECT": "∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))",
        "PREDICATES": "VideoGag(x)\nAirsWeekly(x)\nFrench(x)\nFunnyVideos(x)\nChannelTF1(x)\nFrenchTelevision(x)"
    },
    {
        "NLSTATEMENT": "Video Gag airs on the French broadcast channel TF1. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (VideoGag(x) → ChannelTF1(x))",
        "CORRECT": "∀x (VideoGag(x) → ChannelTF1(x))",
        "PREDICATES": "VideoGag(x)\nAirsWeekly(x)\nFrench(x)\nFunnyVideos(x)\nChannelTF1(x)\nFrenchTelevision(x)"
    },
    {
        "NLSTATEMENT": "All iPhones are cellphones. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Iphone(x) → Cellphone(x))",
        "CORRECT": "∀x (Iphone(x) → Cellphone(x))",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "Jack is either an engineer or a worker.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Engineer(jack) ⊕ Worker(jack) ",
        "CORRECT": "Engineer(jack) ⊕ Worker(jack) ",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "All iPhones are cellphones. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Iphone(x) → C(ellphon)e(x))",
        "CORRECT": "∀x (Iphone(x) → Cellphone(x))",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "All engineers are workers.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Engineer(x) → Worker(x))",
        "CORRECT": "∀x (Engineer(x) → Worker(x))",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "Some phones are iPhones.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Phone(x) ∧ ∃x  IPhone(x))",
        "CORRECT": "∃x (Phone(x) ∧ IPhone(x))",
        "PREDICATES": "Electronic(x)\nPhone(x)\nIPhone(x)"
    },
    {
        "NLSTATEMENT": "Metropolitan Museum of Art is a museum in NYC.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "CORRECT": "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "PREDICATES": "InNYC(x)\nInclude(x, y)\nMuseum(x)"
    },
    {
        "NLSTATEMENT": "Museum of Modern Art (MoMA) is a museum if NYC. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Museum(museumofModernArt) ∧ InNYC(museumofModernArt)",
        "CORRECT": "Museum(museumofModernArt) ∧ InNYC(museumofModernArt)",
        "PREDICATES": "InNYC(x)\nInclude(x, y)\nMuseum(x)"
    },
    {
        "NLSTATEMENT": "Metropolitan Museum of Art includes Bytantine and Islamic Art. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)",
        "CORRECT": "Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)",
        "PREDICATES": "InNYC(x)\nInclude(x, y)\nMuseum(x)"
    },
    {
        "NLSTATEMENT": "Benji is not a person who likes eating cheese and a person who studies Spanish.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬(Cheese(benji) ∧ Spanish(benji))",
        "CORRECT": "¬(Cheese(benji) ∧ Spanish(benji))",
        "PREDICATES": "Spanish(x)\nFrancophile(x)\nSpainFav(x)\nFrench(x)\nCheese(x)"
    },
    {
        "NLSTATEMENT": "Benji is not a person who likes eating cheese and a person who studies Spanish.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(Cheese(benji) ∧ Spanish(benji))",
        "CORRECT": "¬(Cheese(benji) ∧ Spanish(benji))",
        "PREDICATES": "Spanish(x)\nFrancophile(x)\nSpainFav(x)\nFrench(x)\nCheese(x)"
    },
    {
        "NLSTATEMENT": "A person likes Spain as their favorite country or likes eating cheese.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (SpainFav(x) ∨ ∀x  Cheese(x))",
        "CORRECT": "∀x (SpainFav(x) ∨ Cheese(x))",
        "PREDICATES": "Spanish(x)\nFrancophile(x)\nSpainFav(x)\nFrench(x)\nCheese(x)"
    },
    {
        "NLSTATEMENT": "No cities are villages.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (City(x) → ∀x  ¬Village(x))",
        "CORRECT": "∀x (City(x) → ¬Village(x))",
        "PREDICATES": "City(x)\nProvince(x)\nPopulation155(x)\nLocatedIn(x, y)\nDutch(x)\nVillage(x)"
    },
    {
        "NLSTATEMENT": "Gasteren is village located in the province of Drenthe.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)",
        "CORRECT": "Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)",
        "PREDICATES": "City(x)\nProvince(x)\nPopulation155(x)\nLocatedIn(x, y)\nDutch(x)\nVillage(x)"
    },
    {
        "NLSTATEMENT": "Drenthe is a Dutch province. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Province(drenthe) ∧ Dutch(drenthe)",
        "CORRECT": "Province(drenthe) ∧ Dutch(drenthe)",
        "PREDICATES": "City(x)\nProvince(x)\nPopulation155(x)\nLocatedIn(x, y)\nDutch(x)\nVillage(x)"
    },
    {
        "NLSTATEMENT": "All animals are either vertebrates or invertebrates.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "CORRECT": "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
        "PREDICATES": "Hyrax(x)\nVertebrate(x)\nMammal(x)\nPlatypuses(x)\nAnimal(x)\nGrebes(x)\nLayEgg(x)\nInvertebrate(x)\nEchidnas(x)"
    },
    {
        "NLSTATEMENT": "Grebes lay eggs.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Grebes(x) → LayEgg(x))",
        "CORRECT": "∀x (Grebes(x) → LayEgg(x))",
        "PREDICATES": "Hyrax(x)\nVertebrate(x)\nMammal(x)\nPlatypuses(x)\nAnimal(x)\nGrebes(x)\nLayEgg(x)\nInvertebrate(x)\nEchidnas(x)"
    },
    {
        "NLSTATEMENT": "No mammals are invertebrates.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Mammalx) → ¬Invertebrate(x)",
        "CORRECT": "∀x (Mammal(x) → ¬Invertebrate(x))",
        "PREDICATES": "Hyrax(x)\nVertebrate(x)\nMammal(x)\nPlatypuses(x)\nAnimal(x)\nGrebes(x)\nLayEgg(x)\nInvertebrate(x)\nEchidnas(x)"
    },
    {
        "NLSTATEMENT": "Bobby Flynn was born in Queensland.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "BornIn(bobbyFlynn, queensland)",
        "CORRECT": "BornIn(bobbyFlynn, queensland)",
        "PREDICATES": "CompetedOnAustralianIdol(x)\nMadeNationWideTour2007(x)\nSinger(x)\nFinished7th(x)\nIsMember(x, y)\nBornIn(x, y)\nSongWriter(x)\nAustralianCitizen(x)"
    },
    {
        "NLSTATEMENT": "Bobby Flynn is a member of The Omega Three band.",
        "ERRORTYPE": "no_error",
        "SKETCH": "IsMember(bobbyFlynn, theOmegaThreeBand)",
        "CORRECT": "IsMember(bobbyFlynn, theOmegaThreeBand)",
        "PREDICATES": "CompetedOnAustralianIdol(x)\nMadeNationWideTour2007(x)\nSinger(x)\nFinished7th(x)\nIsMember(x, y)\nBornIn(x, y)\nSongWriter(x)\nAustralianCitizen(x)"
    },
    {
        "NLSTATEMENT": "Bobby Flynn is a member of The Omega Three band.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IsMember(bobbyFlynn, theOmegaThreeBand)",
        "CORRECT": "IsMember(bobbyFlynn, theOmegaThreeBand)",
        "PREDICATES": "CompetedOnAustralianIdol(x)\nMadeNationWideTour2007(x)\nSinger(x)\nFinished7th(x)\nIsMember(x, y)\nBornIn(x, y)\nSongWriter(x)\nAustralianCitizen(x)"
    },
    {
        "NLSTATEMENT": "All enzymes are organic compounds.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Enzyme(x) → OrganicCompound(x))",
        "CORRECT": "∀x (Enzyme(x) → OrganicCompound(x))",
        "PREDICATES": "Protein(x)\nOrganicCompound(x)\nEnzyme(x)"
    },
    {
        "NLSTATEMENT": "Maggie Friedman produced and developed Eastwick.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastw(ic)k)",
        "CORRECT": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "PREDICATES": "By(x, y)\nExecutiveProducerOf(x, y)\nLifetimeTelevisionSeries(x)\nProducer(x)\nDrama(x)\nShowRunnerOf(x, y)\nSeries(x)\nProduced(x, y)\nDeveloped(x, y)\nScreenwriter(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Maggie Friedman produced and developed Eastwick.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "CORRECT": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "PREDICATES": "By(x, y)\nExecutiveProducerOf(x, y)\nLifetimeTelevisionSeries(x)\nProducer(x)\nDrama(x)\nShowRunnerOf(x, y)\nSeries(x)\nProduced(x, y)\nDeveloped(x, y)\nScreenwriter(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Maggie Friedman produced and developed Eastwick.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "CORRECT": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "PREDICATES": "By(x, y)\nExecutiveProducerOf(x, y)\nLifetimeTelevisionSeries(x)\nProducer(x)\nDrama(x)\nShowRunnerOf(x, y)\nSeries(x)\nProduced(x, y)\nDeveloped(x, y)\nScreenwriter(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "If a company has employees working for them somewhere, then they have an office there.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀x ∀z (C(ompany(x) ∧ )WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))",
        "CORRECT": "∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))",
        "PREDICATES": "Company(x)\nElectricalEngineer(x)\nWorkedIn(x, y)\nWorkedFor(x, y)\nGreek(x)\nHasOfficeIn(x, y)"
    },
    {
        "NLSTATEMENT": "If a company has employees working for them somewhere, then they have an office there.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))",
        "CORRECT": "∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))",
        "PREDICATES": "Company(x)\nElectricalEngineer(x)\nWorkedIn(x, y)\nWorkedFor(x, y)\nGreek(x)\nHasOfficeIn(x, y)"
    },
    {
        "NLSTATEMENT": "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Song(hooray) ∧ ¬N1GermanSingle(hooray)",
        "CORRECT": "Song(hooray) ∧ ¬N1GermanSingle(hooray)",
        "PREDICATES": "By(x, y)\nHitEurope(x)\nSong(x)\nPeaksBelowN1(x)\nN1GermanSingle(x)"
    },
    {
        "NLSTATEMENT": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Song(hooray) ∧ HitEurope(hooray)",
        "CORRECT": "Song(hooray) ∧ HitEurope(hooray)",
        "PREDICATES": "By(x, y)\nHitEurope(x)\nSong(x)\nPeaksBelowN1(x)\nN1GermanSingle(x)"
    },
    {
        "NLSTATEMENT": "A song that peaks below #1 on the german charts is also a song that is not the #1 single",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))",
        "CORRECT": "∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))",
        "PREDICATES": "By(x, y)\nHitEurope(x)\nSong(x)\nPeaksBelowN1(x)\nN1GermanSingle(x)"
    },
    {
        "NLSTATEMENT": "Bakers who can also make scrambled eggs can make a good breakfast.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Baker(x) ∧ MakeScrambledEggs(x) → MakeGoodBreakfast(x))",
        "CORRECT": "∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))",
        "PREDICATES": "MakeMuffins(x)\nCook(x)\nMakeCookies(x)\nBaker(x)\nMakeGoodBreakfast(x)\nMakeScrambledEggs(x)\nChef(x)\nMakePasta(x)"
    },
    {
        "NLSTATEMENT": "People who cook can make scrambled eggs and pasta.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Cook(x) → MakeScrambledEggs(x) ∧ MakePasta(x))",
        "CORRECT": "∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))",
        "PREDICATES": "MakeMuffins(x)\nCook(x)\nMakeCookies(x)\nBaker(x)\nMakeGoodBreakfast(x)\nMakeScrambledEggs(x)\nChef(x)\nMakePasta(x)"
    },
    {
        "NLSTATEMENT": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "CORRECT": "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "PREDICATES": "Develops(x, y)\nFor(x, y)\nAdministers(x, y)\nAssociatedWith(x, y)\nIn(x, y)\nUsedFor(x, y)\nGRE(x)\nStandardizedTest(x)\nTOEFL(x)\nInternationalTest(x)\nSubjectTests(x)\nStateWideAssesment(x)\nTOEIC(x)"
    },
    {
        "NLSTATEMENT": "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytou(se)ducationinstitutions))",
        "CORRECT": "∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))",
        "PREDICATES": "Develops(x, y)\nFor(x, y)\nAdministers(x, y)\nAssociatedWith(x, y)\nIn(x, y)\nUsedFor(x, y)\nGRE(x)\nStandardizedTest(x)\nTOEFL(x)\nInternationalTest(x)\nSubjectTests(x)\nStateWideAssesment(x)\nTOEIC(x)"
    },
    {
        "NLSTATEMENT": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "CORRECT": "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "PREDICATES": "Develops(x, y)\nFor(x, y)\nAdministers(x, y)\nAssociatedWith(x, y)\nIn(x, y)\nUsedFor(x, y)\nGRE(x)\nStandardizedTest(x)\nTOEFL(x)\nInternationalTest(x)\nSubjectTests(x)\nStateWideAssesment(x)\nTOEIC(x)"
    },
    {
        "NLSTATEMENT": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Travel(x) → Europe(x()))",
        "CORRECT": "∀x (Travel(x) → Europe(x))",
        "PREDICATES": "Gelato(x)\nEurope(x)\nResist(x)\nItaly(x)\nRegret(x)\nTravel(x)"
    },
    {
        "NLSTATEMENT": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Travel(x) → Europe(x))",
        "CORRECT": "∀x (Travel(x) → Europe(x))",
        "PREDICATES": "Gelato(x)\nEurope(x)\nResist(x)\nItaly(x)\nRegret(x)\nTravel(x)"
    },
    {
        "NLSTATEMENT": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Gelato(x) → ∀x  Italy(x))",
        "CORRECT": "∀x (Gelato(x) → Italy(x))",
        "PREDICATES": "Gelato(x)\nEurope(x)\nResist(x)\nItaly(x)\nRegret(x)\nTravel(x)"
    },
    {
        "NLSTATEMENT": "All PhD graduates can work full time. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "CORRECT": "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "PREDICATES": "WorkFullTime(x)\nFullTimeAcademic(x)\nPhdGraduate(x)\nStudyAbroad(x)\nStudentVisa(x)"
    },
    {
        "NLSTATEMENT": "Everyone who wants to study abroad needs to have a student visa.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (StudyAbroad(x) → Student(Visa)(x))",
        "CORRECT": "∀x (StudyAbroad(x) → StudentVisa(x))",
        "PREDICATES": "WorkFullTime(x)\nFullTimeAcademic(x)\nPhdGraduate(x)\nStudyAbroad(x)\nStudentVisa(x)"
    },
    {
        "NLSTATEMENT": "Everyone who wants to study abroad needs to have a student visa.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (StudyAbroad(x) → StudentVisa(x))",
        "CORRECT": "∀x (StudyAbroad(x) → StudentVisa(x))",
        "PREDICATES": "WorkFullTime(x)\nFullTimeAcademic(x)\nPhdGraduate(x)\nStudyAbroad(x)\nStudentVisa(x)"
    },
    {
        "NLSTATEMENT": "The installment sales method is the approach to recognize revenue under the US GAAP.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (UsesGAAP(x) → UsesInstallmentMethod(x))",
        "CORRECT": "∀x (UsesGAAP(x) → UsesInstallmentMethod(x))",
        "PREDICATES": "UsesGAAP(x)\nRecognizedWhen(x, y)\nUsesAccruralAccounting(x)\nWorksFor(x, y)\nUsesCashAccounting(x)\nUsesInstallmentMethod(x)\nDevelopedBy(x, y)"
    },
    {
        "NLSTATEMENT": "In cash accounting, revenues are recognized when cash is received.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (UsesCashAccounting(x) → ∀x  RecognizedWhen(revenues, cashrecieved))",
        "CORRECT": "∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))",
        "PREDICATES": "UsesGAAP(x)\nRecognizedWhen(x, y)\nUsesAccruralAccounting(x)\nWorksFor(x, y)\nUsesCashAccounting(x)\nUsesInstallmentMethod(x)\nDevelopedBy(x, y)"
    },
    {
        "NLSTATEMENT": "Sally works for the US Securities and Exchange Commission.",
        "ERRORTYPE": "no_error",
        "SKETCH": "WorksFor(sally, ussecuritiesandexchangecommission)",
        "CORRECT": "WorksFor(sally, ussecuritiesandexchangecommission)",
        "PREDICATES": "UsesGAAP(x)\nRecognizedWhen(x, y)\nUsesAccruralAccounting(x)\nWorksFor(x, y)\nUsesCashAccounting(x)\nUsesInstallmentMethod(x)\nDevelopedBy(x, y)"
    },
    {
        "NLSTATEMENT": "If a person is respected by others, then he/she contributes to the country. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Respected(x) → ContributeToCountry(x))",
        "CORRECT": "∀x (Respected(x) → ContributeToCountry(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "James is either with a bad record in the local state or respected by others. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "BadRecord(james) ⊕ Respected(james)",
        "CORRECT": "BadRecord(james) ⊕ Respected(james)",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "All people who once stayed in prison for some time have a bad record in the local state. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Prison(x) → BadReco(rd()x))",
        "CORRECT": "∀x (Prison(x) → BadRecord(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "All people who once were sentenced for thief stayed in prison for some time. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Thief(x) → Prison(x))",
        "CORRECT": "∀x (Thief(x) → Prison(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "The Croton River is in southwestern New York.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "In(crotonriver, so(uthwesternnewy)ork)",
        "CORRECT": "In(crotonriver, southwesternnewyork)",
        "PREDICATES": "DrainageBasinOf(x, y)\nIn(x, y)\nFrom(x, y)\nFlowsTo(x, y)\nWater(x)"
    },
    {
        "NLSTATEMENT": "The Croton River is in southwestern New York.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "In(crotonriver, southwesternnewyork)",
        "CORRECT": "In(crotonriver, southwesternnewyork)",
        "PREDICATES": "DrainageBasinOf(x, y)\nIn(x, y)\nFrom(x, y)\nFlowsTo(x, y)\nWater(x)"
    },
    {
        "NLSTATEMENT": "The Bronx is in New York.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "In(bronx, newyork)",
        "CORRECT": "In(bronx, newyork)",
        "PREDICATES": "DrainageBasinOf(x, y)\nIn(x, y)\nFrom(x, y)\nFlowsTo(x, y)\nWater(x)"
    },
    {
        "NLSTATEMENT": "No nuclear-powered submarines are commercial vessels.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NuclearPoweredSubmarine(x) → ∀x  ¬CommercialVessel(x))",
        "CORRECT": "∀x (NuclearPoweredSubmarine(x) → ¬CommercialVessel(x))",
        "PREDICATES": "NuclearPoweredSubmarine(x)\nWarship(x)\nCommercialVessel(x)"
    },
    {
        "NLSTATEMENT": "If a album is written by a rock band, then the genre of the album is rock.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → ∀x  Genre(x, rock))",
        "CORRECT": "∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))",
        "PREDICATES": "AlbumAward(x, y)\nAlbumByBand(x, y)\nRockBand(x, y)\nSongInAlbum(x, y)\nGenre(x, y)\nRockBandAward(x, y)\nSongInFilm(x)"
    },
    {
        "NLSTATEMENT": "A song in Trouble at the Henhouse appeared in a film.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))",
        "CORRECT": "∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))",
        "PREDICATES": "AlbumAward(x, y)\nAlbumByBand(x, y)\nRockBand(x, y)\nSongInAlbum(x, y)\nGenre(x, y)\nRockBandAward(x, y)\nSongInFilm(x)"
    },
    {
        "NLSTATEMENT": "Trouble at the Henhouse is an album by The Tragically Hip.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
        "CORRECT": "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
        "PREDICATES": "AlbumAward(x, y)\nAlbumByBand(x, y)\nRockBand(x, y)\nSongInAlbum(x, y)\nGenre(x, y)\nRockBandAward(x, y)\nSongInFilm(x)"
    },
    {
        "NLSTATEMENT": "Daniel’s older sister works at Meta as a technical sourcer. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)",
        "CORRECT": " WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)",
        "PREDICATES": "TechnicalSourcer(x)\nWorksAtMeta(x)\nGraduatedFromStanfordUniversity(x)\nDoctorPracticingInternalMedicine(x, y)\nStudiedBioengineering(x, y)\nSoftwareEngineer(x)\nWorksAt(x, y)"
    },
    {
        "NLSTATEMENT": "Daniel is a software engineer and he works at Palantir Technologies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SoftwareEngineer(daniel) ∧ WorksAtdaniel, palantirTechnologies",
        "CORRECT": "SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)",
        "PREDICATES": "TechnicalSourcer(x)\nWorksAtMeta(x)\nGraduatedFromStanfordUniversity(x)\nDoctorPracticingInternalMedicine(x, y)\nStudiedBioengineering(x, y)\nSoftwareEngineer(x)\nWorksAt(x, y)"
    },
    {
        "NLSTATEMENT": "Daniel’s dad and older sister both graduated from Stanford University.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)",
        "CORRECT": " GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)",
        "PREDICATES": "TechnicalSourcer(x)\nWorksAtMeta(x)\nGraduatedFromStanfordUniversity(x)\nDoctorPracticingInternalMedicine(x, y)\nStudiedBioengineering(x, y)\nSoftwareEngineer(x)\nWorksAt(x, y)"
    },
    {
        "NLSTATEMENT": "Airbus made more in revenue than Boeing last year.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "MoreinRevenue(airbus, boeing)",
        "CORRECT": "MoreinRevenue(airbus, boeing)",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "All commerical aircraft are produced by either Boeing or Airbus.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((CommercialAircraft(x)) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "CORRECT": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "All commerical aircraft are produced by either Boeing or Airbus.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "CORRECT": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "All commerical aircraft are produced by either Boeing or Airbus.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "CORRECT": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "Luzon is an island in the Philippines.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Island(luzon)( ∧ In(luzon,) philippines)",
        "CORRECT": "Island(luzon) ∧ In(luzon, philippines)",
        "PREDICATES": "Killed(x)\nStruckIn(x, y)\nIsland(x)\nEarthquake(x)\nIn(x, y)\nStruck(x, y)"
    },
    {
        "NLSTATEMENT": "Luzon is an island in the Philippines.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Island(luzon) ∧ In(luzon, philippines)",
        "CORRECT": "Island(luzon) ∧ In(luzon, philippines)",
        "PREDICATES": "Killed(x)\nStruckIn(x, y)\nIsland(x)\nEarthquake(x)\nIn(x, y)\nStruck(x, y)"
    },
    {
        "NLSTATEMENT": "People died in the December 1999 earthquake in Luzon.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "CORRECT": "∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "PREDICATES": "Killed(x)\nStruckIn(x, y)\nIsland(x)\nEarthquake(x)\nIn(x, y)\nStruck(x, y)"
    },
    {
        "NLSTATEMENT": "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Casinos(x) → LasVegas(x))",
        "CORRECT": "∀x (Casinos(x) → LasVegas(x))",
        "PREDICATES": "DisposableIncome(x)\nNewspapers(x)\nCasinos(x)\nInvests(x)\nLasVegas(x)\nGambling(x)"
    },
    {
        "NLSTATEMENT": "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Investsx) → Newspapers(x)",
        "CORRECT": "∀x (Invests(x) → Newspapers(x))",
        "PREDICATES": "DisposableIncome(x)\nNewspapers(x)\nCasinos(x)\nInvests(x)\nLasVegas(x)\nGambling(x)"
    },
    {
        "NLSTATEMENT": "People either invest in the public stock market regularly or enjoy gambling regularly.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Invests(x) ∨( Gambling(x)))",
        "CORRECT": "∀x (Invests(x) ∨ Gambling(x))",
        "PREDICATES": "DisposableIncome(x)\nNewspapers(x)\nCasinos(x)\nInvests(x)\nLasVegas(x)\nGambling(x)"
    },
    {
        "NLSTATEMENT": "All students learning piano can strike the right notes. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))",
        "CORRECT": "∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))",
        "PREDICATES": "LearningPiano(x)\nFindCoordinationChallenging(x)\nStartCoordination(x)\nStrikeRightNotes(x)\nGetRhythmRight(x)\nGoodAtCoordination(x)\nStudent(x)\nPutEmotion(x)"
    },
    {
        "NLSTATEMENT": "All students learning piano can strike the right notes. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))",
        "CORRECT": "∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))",
        "PREDICATES": "LearningPiano(x)\nFindCoordinationChallenging(x)\nStartCoordination(x)\nStrikeRightNotes(x)\nGetRhythmRight(x)\nGoodAtCoordination(x)\nStudent(x)\nPutEmotion(x)"
    },
    {
        "NLSTATEMENT": "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Participa(tedIn(barbaraannmarshall, prelim)inaryheatfreestylerelay)",
        "CORRECT": "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)",
        "PREDICATES": "ParticipatedIn(x, y)\nFormerSwimmer(x)\nRepresented(x, y)\nRecieved(x, y)\nRelaySwimmer(x)\nFormerWorldRecordHolder(x)\nHomeCountry(x, y)"
    },
    {
        "NLSTATEMENT": "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "CORRECT": "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "PREDICATES": "ParticipatedIn(x, y)\nFormerSwimmer(x)\nRepresented(x, y)\nRecieved(x, y)\nRelaySwimmer(x)\nFormerWorldRecordHolder(x)\nHomeCountry(x, y)"
    },
    {
        "NLSTATEMENT": "The yellow stage comes after the red stage.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Player(x) → RedToYellow(x))",
        "CORRECT": "∀x (Player(x) → RedToYellow(x))",
        "PREDICATES": "YellowToGreen(x)\nStartRed(x)\nRedToYellow(x)\nRedToGreen(x)\nPlayer(x)"
    },
    {
        "NLSTATEMENT": "All players must proceed one stage at a time.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Player(x) → ¬RedToGreen(x))",
        "CORRECT": "∀x (Player(x) → ¬RedToGreen(x))",
        "PREDICATES": "YellowToGreen(x)\nStartRed(x)\nRedToYellow(x)\nRedToGreen(x)\nPlayer(x)"
    },
    {
        "NLSTATEMENT": "Each player begins at the red stage.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Player(x) → ∀x  StartRed(x))",
        "CORRECT": "∀x (Player(x) → StartRed(x))",
        "PREDICATES": "YellowToGreen(x)\nStartRed(x)\nRedToYellow(x)\nRedToGreen(x)\nPlayer(x)"
    },
    {
        "NLSTATEMENT": "People are either scared of animals or love animals.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "CORRECT": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Physical(x) ∨ Words(x))",
        "CORRECT": "∀x (Physical(x) ∨ Words(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Physical(x) ∨ Words(x))",
        "CORRECT": "∀x (Physical(x) ∨ Words(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People are either scared of animals or love animals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "CORRECT": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People are either scared of animals or love animals.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "CORRECT": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "All birds have wings.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Bird(x) → ∀x  Winged(x))",
        "CORRECT": "∀x (Bird(x) → Winged(x))",
        "PREDICATES": "Winged(x)\nBird(x)\nReptile(x)\nIguana(x)\nFly(x)"
    },
    {
        "NLSTATEMENT": "John is neither an iguana nor a bird.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬Iguana(john) ⊕ Bird(john)",
        "CORRECT": "¬Iguana(john) ⊕ Bird(john)",
        "PREDICATES": "Winged(x)\nBird(x)\nReptile(x)\nIguana(x)\nFly(x)"
    },
    {
        "NLSTATEMENT": "John is neither an iguana nor a bird.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬Iguana(john) ⊕ Bird(john)",
        "CORRECT": "¬Iguana(john) ⊕ Bird(john)",
        "PREDICATES": "Winged(x)\nBird(x)\nReptile(x)\nIguana(x)\nFly(x)"
    },
    {
        "NLSTATEMENT": "EndGame is a movie released in 2006.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "MovieendGame ∧ Released(endGame, year2006)",
        "CORRECT": "Movie(endGame) ∧ Released(endGame, year2006)",
        "PREDICATES": "Set(x, y)\nDirected(x, y)\nReleased(x, y)\nFrom(x, y)\nMovie(x)\nFilmedOutside(x, y)\nFilmedIn(x, y)"
    },
    {
        "NLSTATEMENT": "EndGame is a movie released in 2006.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Movie(endGame) ∧ Released(endGame, year2006)",
        "CORRECT": "Movie(endGame) ∧ Released(endGame, year2006)",
        "PREDICATES": "Set(x, y)\nDirected(x, y)\nReleased(x, y)\nFrom(x, y)\nMovie(x)\nFilmedOutside(x, y)\nFilmedIn(x, y)"
    },
    {
        "NLSTATEMENT": "Andy Chang is from Hong Kong.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "From(andyChang, hongKong)",
        "CORRECT": "From(andyChang, hongKong)",
        "PREDICATES": "Set(x, y)\nDirected(x, y)\nReleased(x, y)\nFrom(x, y)\nMovie(x)\nFilmedOutside(x, y)\nFilmedIn(x, y)"
    },
    {
        "NLSTATEMENT": "If a real number equals another real number adding one, the first number is larger.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))",
        "CORRECT": "∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))",
        "PREDICATES": "EqualDouble(x, y)\nPositive(x)\nLarger(x, y)\nRealNum(x)\nEqualAddOne(x, y)"
    },
    {
        "NLSTATEMENT": "Seven equals six plus one.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "EqualAddOne(seven, six)",
        "CORRECT": "EqualAddOne(seven, six)",
        "PREDICATES": "EqualDouble(x, y)\nPositive(x)\nLarger(x, y)\nRealNum(x)\nEqualAddOne(x, y)"
    },
    {
        "NLSTATEMENT": "Four is the double of two.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Equa(lDouble(f)our, two)",
        "CORRECT": "EqualDouble(four, two)",
        "PREDICATES": "EqualDouble(x, y)\nPositive(x)\nLarger(x, y)\nRealNum(x)\nEqualAddOne(x, y)"
    },
    {
        "NLSTATEMENT": "Some poker players are dogs.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (PokerPlayer(x) ∧ ∃x  Dog(x))",
        "CORRECT": "∃x (PokerPlayer(x) ∧ Dog(x))",
        "PREDICATES": "Dog(x)\nNeverTellsTruth(x)\nPokerPlayer(x)"
    },
    {
        "NLSTATEMENT": "All Chinese are Asian.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ( Chinese(x)→  Asian(x))",
        "CORRECT": "∀x ( Chinese(x)→  Asian(x))",
        "PREDICATES": "Human(x)\nSpanish(x)\nChinese(x)\nBritish(x)\nIndian(x)\nAsian(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Jessee is either both an Indian and a human, or neither an Indian nor a human.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))",
        "CORRECT": "( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))",
        "PREDICATES": "Human(x)\nSpanish(x)\nChinese(x)\nBritish(x)\nIndian(x)\nAsian(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "All Chinese are Asian.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ( Chinese(x)→  Asian(x))",
        "CORRECT": "∀x ( Chinese(x)→  Asian(x))",
        "PREDICATES": "Human(x)\nSpanish(x)\nChinese(x)\nBritish(x)\nIndian(x)\nAsian(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Some well-informed people are people who never admit a mistake.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (WellInformed(x) ∧ ∃x  NeverAdmitMistakes(x))",
        "CORRECT": "∃x (WellInformed(x) ∧ NeverAdmitMistakes(x))",
        "PREDICATES": "NeverAdmitMistakes(x)\nGoodTeacher(x)\nWellInformed(x)"
    },
    {
        "NLSTATEMENT": "Mort is a piece of Philatelic literature.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "PhilatelicLit(mort)",
        "CORRECT": "PhilatelicLit(mort)",
        "PREDICATES": "Periodical(x)\nStamp(x)\nAuction(x)\nBook(x)\nBackground(x)\nPhilatelicLit(x)\nBibliography(x)"
    },
    {
        "NLSTATEMENT": "Mort is not a Stamp catalogue.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬Stamp(mort)",
        "CORRECT": "¬Stamp(mort)",
        "PREDICATES": "Periodical(x)\nStamp(x)\nAuction(x)\nBook(x)\nBackground(x)\nPhilatelicLit(x)\nBibliography(x)"
    },
    {
        "NLSTATEMENT": "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(Periodical(mort) ∨ Auctionmort) ∨ Bibliography(mort ∨ Background(mort))",
        "CORRECT": "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PREDICATES": "Periodical(x)\nStamp(x)\nAuction(x)\nBook(x)\nBackground(x)\nPhilatelicLit(x)\nBibliography(x)"
    },
    {
        "NLSTATEMENT": "Tintin was produced by Paramount.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Produced(paramount, tintin)",
        "CORRECT": "Produced(paramount, tintin)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Adventures of Rusty is a drama film and children's film.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "CORRECT": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Columbia Pictures produced Adventures of Rusty",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Produced(columbiapictures, adventuresofrusty)",
        "CORRECT": "Produced(columbiapictures, adventuresofrusty)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Adventures of Rusty is a drama film and children's film.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "CORRECT": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)",
        "CORRECT": "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)",
        "PREDICATES": "VicePremier(x)\nInstrumentalIn(x, y)\nParamountLeaderOf(x, y)\nPartysSecretaryGeneral(x)\nDisastrous(x)\nPresidedOver(x, y)\nUnder(x, y)\nLaunchedBy(x, y)\nPraisedFor(x, y)\nFollowing(x, y)\nDiedIn(x, y)\nGraduallyRoseTo(x, y)"
    },
    {
        "NLSTATEMENT": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ",
        "ERRORTYPE": "no_error",
        "SKETCH": "ParamountLeaderOf(dengxiaoping, prc)",
        "CORRECT": "ParamountLeaderOf(dengxiaoping, prc)",
        "PREDICATES": "VicePremier(x)\nInstrumentalIn(x, y)\nParamountLeaderOf(x, y)\nPartysSecretaryGeneral(x)\nDisastrous(x)\nPresidedOver(x, y)\nUnder(x, y)\nLaunchedBy(x, y)\nPraisedFor(x, y)\nFollowing(x, y)\nDiedIn(x, y)\nGraduallyRoseTo(x, y)"
    },
    {
        "NLSTATEMENT": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)",
        "CORRECT": "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)",
        "PREDICATES": "VicePremier(x)\nInstrumentalIn(x, y)\nParamountLeaderOf(x, y)\nPartysSecretaryGeneral(x)\nDisastrous(x)\nPresidedOver(x, y)\nUnder(x, y)\nLaunchedBy(x, y)\nPraisedFor(x, y)\nFollowing(x, y)\nDiedIn(x, y)\nGraduallyRoseTo(x, y)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Science-fiction(x) ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All imaginative processes are produced in human brains.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "CORRECT": "∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "No facts are proven to be false.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Fact(x) → ∀x  ¬ProvedToBeFalse(x)) ",
        "CORRECT": " ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "No facts are proven to be false.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ",
        "CORRECT": " ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All imaginative processes are produced in human brains.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ImaginativeProcess(x) → ∀x  ProducedInHumanBrains(x))",
        "CORRECT": "∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All imaginative processes are produced in human brains.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "CORRECT": "∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "No facts are proven to be false.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ",
        "CORRECT": " ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "Dune is a science-fiction or proven to be false.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " Science-fiction(dune) ∨ ProvedToBeFalse(dune)",
        "CORRECT": " Science-fiction(dune) ∨ ProvedToBeFalse(dune)",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "If a superhero is American, he speaks English.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Superhero(x) ∧ American(x) → Speak(x, english)) ",
        "CORRECT": " ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) ",
        "PREDICATES": "Superhero(x)\nSpeak(x, y)\nComeFrom(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Captain America is a superhero.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " Superhero(captain america) ",
        "CORRECT": " Superhero(captain america) ",
        "PREDICATES": "Superhero(x)\nSpeak(x, y)\nComeFrom(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Captain America is an American.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " America(n(cap)tain america) ",
        "CORRECT": " American(captain america) ",
        "PREDICATES": "Superhero(x)\nSpeak(x, y)\nComeFrom(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Robert Zimmer is an essayist.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IsEssayist(robertZimmer)",
        "CORRECT": "IsEssayist(robertZimmer)",
        "PREDICATES": "IsEssayist(x)\nIsGerman(x)\nIsWriter(x)\nBornIn(x, y)\nBornInGermany(x)"
    },
    {
        "NLSTATEMENT": "Robert Zimmer is an essayist.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "IsEssayist(robertZimmer)",
        "CORRECT": "IsEssayist(robertZimmer)",
        "PREDICATES": "IsEssayist(x)\nIsGerman(x)\nIsWriter(x)\nBornIn(x, y)\nBornInGermany(x)"
    },
    {
        "NLSTATEMENT": "Every person born in Germany is German.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BornInGermany(x) → IsGerman(x))",
        "CORRECT": "∀x (BornInGermany(x) → IsGerman(x))",
        "PREDICATES": "IsEssayist(x)\nIsGerman(x)\nIsWriter(x)\nBornIn(x, y)\nBornInGermany(x)"
    },
    {
        "NLSTATEMENT": "John has a high salary.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "HighSalary(john)",
        "CORRECT": "HighSalary(john)",
        "PREDICATES": "HighCreditScore(x)\nRepay(x)\nMortgage(x)\nHighSalary(x)"
    },
    {
        "NLSTATEMENT": "Some PhD students have high IQs.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (PhDStudent(x) ∧ HighIQ(x))",
        "CORRECT": "∃x (PhDStudent(x) ∧ HighIQ(x))",
        "PREDICATES": "GraduateStudent(x)\nMemberOfUniversity(x)\nHighIQ(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All students are members of the university.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Student(x) → MemberOfUniversity(x))",
        "CORRECT": "∀x (Student(x) → MemberOfUniversity(x))",
        "PREDICATES": "GraduateStudent(x)\nMemberOfUniversity(x)\nHighIQ(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All graduate students are students.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (GraduateStudent(x) → Student(x))",
        "CORRECT": "∀x (GraduateStudent(x) → Student(x))",
        "PREDICATES": "GraduateStudent(x)\nMemberOfUniversity(x)\nHighIQ(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "The Eiffel Tower is one of the main tourist attractions located in Paris.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)",
        "CORRECT": "TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)",
        "PREDICATES": "See(x, y)\nTouristAttraction(x)\nEuropeanCountry(x)\nSpeak(x, y)\nLiveIn(x, y)\nCapitalOf(x, y)\nLocatedIn(x, y)\nGoTo(x, y)"
    },
    {
        "NLSTATEMENT": "Belgium, France and Germany are European countries.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "EuropeanCountry(belgium) ∨ EuropeanCountry(f(rance) ∨ EuropeanCou)ntry(germany)",
        "CORRECT": "EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)",
        "PREDICATES": "See(x, y)\nTouristAttraction(x)\nEuropeanCountry(x)\nSpeak(x, y)\nLiveIn(x, y)\nCapitalOf(x, y)\nLocatedIn(x, y)\nGoTo(x, y)"
    },
    {
        "NLSTATEMENT": "If John goes to Europe, he will see some tourist attractions.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))",
        "CORRECT": "∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))",
        "PREDICATES": "See(x, y)\nTouristAttraction(x)\nEuropeanCountry(x)\nSpeak(x, y)\nLiveIn(x, y)\nCapitalOf(x, y)\nLocatedIn(x, y)\nGoTo(x, y)"
    },
    {
        "NLSTATEMENT": "All sports cars are loud.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (SportsCar(x) → ∀x  LoudCar(x))",
        "CORRECT": "∀x (SportsCar(x) → LoudCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "No loud cars are electric.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (LoudCar(x) → ¬ElectricCar(x))",
        "CORRECT": "∀x (LoudCar(x) → ¬ElectricCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "All sports cars are loud.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (SportsCar(x) → (Lo)udCar(x))",
        "CORRECT": "∀x (SportsCar(x) → LoudCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "If a car is a Ferrari, then it is a sports car.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Ferrari(x) → SportsCar(x))",
        "CORRECT": "∀x (Ferrari(x) → SportsCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "All flowers are plants.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Flower(x) → Plant(x))",
        "CORRECT": "∀x (Flower(x) → Plant(x))",
        "PREDICATES": "Flower(x)\nGrownInGarden(x)\nKitten(x)\nPlant(x)\nCuteAnimal(x)"
    },
    {
        "NLSTATEMENT": "Piper is a kitten or a cute animal.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Kitten(piper) ∨ CuteAnimal(piper)",
        "CORRECT": "Kitten(piper) ∨ CuteAnimal(piper)",
        "PREDICATES": "Flower(x)\nGrownInGarden(x)\nKitten(x)\nPlant(x)\nCuteAnimal(x)"
    },
    {
        "NLSTATEMENT": "All flowers are plants.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Flower(x → Plant(x))",
        "CORRECT": "∀x (Flower(x) → Plant(x))",
        "PREDICATES": "Flower(x)\nGrownInGarden(x)\nKitten(x)\nPlant(x)\nCuteAnimal(x)"
    },
    {
        "NLSTATEMENT": "Guam has participated in the Winter Olympics.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "ParticipatedIn(guam, wintero(l)ympics)",
        "CORRECT": "ParticipatedIn(guam, winterolympics)",
        "PREDICATES": "SendAthletes(x)\nParticipatedIn(x, y)\nYear(x)\nBeHeld(x, y)\nBeFrom(x, y)"
    },
    {
        "NLSTATEMENT": "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)",
        "CORRECT": "BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)",
        "PREDICATES": "SendAthletes(x)\nParticipatedIn(x, y)\nYear(x)\nBeHeld(x, y)\nBeFrom(x, y)"
    },
    {
        "NLSTATEMENT": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))",
        "CORRECT": "∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "One of the word-setters of My Word! was Michael O'Donnell.",
        "ERRORTYPE": "no_error",
        "SKETCH": "WordSetter(michael)",
        "CORRECT": "WordSetter(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "One of the word-setters of My Word! was Michael O'Donnell.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "WordSetter(michael)",
        "CORRECT": "WordSetter(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "CORRECT": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "The magazine World Medicine was edited by Michael O'Donnell.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "CORRECT": "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "Some reading is homework.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (IsReading(x) ∧ Homework(x))",
        "CORRECT": "∃x (IsReading(x) ∧ Homework(x))",
        "PREDICATES": "Homework(x)\nIsReading(x)\nIsFun(x)"
    },
    {
        "NLSTATEMENT": "If violence is good, it is justified.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ((Violence(x) ∧ Good(x)) → Justified(x))",
        "CORRECT": "∀x ((Violence(x) ∧ Good(x)) → Justified(x))",
        "PREDICATES": "Violence(x)\nLawful(x)\nGood(x)\nJustified(x)"
    },
    {
        "NLSTATEMENT": "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (RegularlyRide(x) → ∀x  ¬Cramped(x))",
        "CORRECT": "∀x (RegularlyRide(x) → ¬Cramped(x))",
        "PREDICATES": "DisposableIncome(x)\nCompete(x)\nInvested(x)\nRanch(x)\nRegularlyRide(x)\nCramped(x)"
    },
    {
        "NLSTATEMENT": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))",
        "CORRECT": "(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))",
        "PREDICATES": "DisposableIncome(x)\nCompete(x)\nInvested(x)\nRanch(x)\nRegularlyRide(x)\nCramped(x)"
    },
    {
        "NLSTATEMENT": "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Compete(x) → Invested(x))",
        "CORRECT": "∀x (Compete(x) → Invested(x))",
        "PREDICATES": "DisposableIncome(x)\nCompete(x)\nInvested(x)\nRanch(x)\nRegularlyRide(x)\nCramped(x)"
    },
    {
        "NLSTATEMENT": "A roundel is not higher than adjacent walls. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))",
        "CORRECT": "∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "Battery towers are an artillery fortification.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BatteryTower(x) → ArtilleryFortification(x))",
        "CORRECT": "∀x (BatteryTower(x) → ArtilleryFortification(x))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "A roundel is a rounded artillery fortification.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Roundel(x → Rounded(x) ∧ ArtilleryFortification(x))",
        "CORRECT": "∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "A roundel is a rounded artillery fortification.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Roundel(x) → ∀x  Rounded(x) ∧ ArtilleryFortification(x))",
        "CORRECT": "∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "Some papers are tissues.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Paper(x) ∧ Tissue(x))",
        "CORRECT": "∃x (Paper(x) ∧ Tissue(x))",
        "PREDICATES": "Soft(x)\nTissue(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "Volunteers work in groups or individually.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))",
        "CORRECT": "∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))",
        "PREDICATES": "WorkRegularly(x)\nGetIntangibleBenefits(x)\nWorkInGroup(x)\nEnvironmental(x)\nTrained(x)\nWorkAsNeeded(x)\nVolunteer(x)\nWorkIndividually(x)\nContributeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Volunteers work in groups or individually.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Volunteer(x) → WorkInGroup(x) ∨ WorkIndividually(x))",
        "CORRECT": "∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))",
        "PREDICATES": "WorkRegularly(x)\nGetIntangibleBenefits(x)\nWorkInGroup(x)\nEnvironmental(x)\nTrained(x)\nWorkAsNeeded(x)\nVolunteer(x)\nWorkIndividually(x)\nContributeTo(x, y)"
    },
    {
        "NLSTATEMENT": "All volunteers receive intangible benefits for their work.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Volunteer(x) → GetInt(an)gibleBenefits(x))",
        "CORRECT": "∀x (Volunteer(x) → GetIntangibleBenefits(x))",
        "PREDICATES": "WorkRegularly(x)\nGetIntangibleBenefits(x)\nWorkInGroup(x)\nEnvironmental(x)\nTrained(x)\nWorkAsNeeded(x)\nVolunteer(x)\nWorkIndividually(x)\nContributeTo(x, y)"
    },
    {
        "NLSTATEMENT": "All old people living in stable homes do not like surprises.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Old(x) → ∀x  NoSurprises(x))",
        "CORRECT": "∀x (Old(x) → NoSurprises(x))",
        "PREDICATES": "Impulsive(x)\nNoSurprises(x)\nConsistent(x)\nNoShopping(x)\nOld(x)\nFlannel(x)"
    },
    {
        "NLSTATEMENT": "If people have very high energy and are impulsive, then they like surprises.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Impulsive(x) → ¬NoSurprises(x))",
        "CORRECT": "∀x (Impulsive(x) → ¬NoSurprises(x))",
        "PREDICATES": "Impulsive(x)\nNoSurprises(x)\nConsistent(x)\nNoShopping(x)\nOld(x)\nFlannel(x)"
    },
    {
        "NLSTATEMENT": "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x( (Consistent(x) → N)oSurprises(x))",
        "CORRECT": "∀x (Consistent(x) → NoSurprises(x))",
        "PREDICATES": "Impulsive(x)\nNoSurprises(x)\nConsistent(x)\nNoShopping(x)\nOld(x)\nFlannel(x)"
    },
    {
        "NLSTATEMENT": "Adam has a favorite car.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∃x (Favorite(adam, x))",
        "CORRECT": "∃x (Favorite(adam, x))",
        "PREDICATES": "Broke(x, y)\nFavorite(x, y)\nOwns(x, y)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Adam has a favorite car.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∃x (Favorite(adam, x))",
        "CORRECT": "∃x (Favorite(adam, x))",
        "PREDICATES": "Broke(x, y)\nFavorite(x, y)\nOwns(x, y)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "No buildings in New Haven are higher than 400 meters. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (NewHaven(x) → ¬High(x))",
        "CORRECT": "∀x (NewHaven(x) → ¬High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "All buildings managed by Yale Housing are in New Haven. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (YaleHousing(x) → NewHavenx)",
        "CORRECT": "∀x (YaleHousing(x) → NewHaven(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "No buildings in New Haven are higher than 400 meters. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (NewHaven(x) → ¬High(x))",
        "CORRECT": "∀x (NewHaven(x) → ¬High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BloombergLogo(x) → Bloomberg(x))",
        "CORRECT": "∀x (BloombergLogo(x) → Bloomberg(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "Everything that is an osprey is a bird.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Osprey(x) → Bird(x))",
        "CORRECT": "∀x (Osprey(x) → Bird(x))",
        "PREDICATES": "Osprey(x)\nFish(x)\nBird(x)\nGoldfish(x)\nCarp(x)"
    },
    {
        "NLSTATEMENT": "No fish are birds.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Fish(x) → ∀x  ¬Bird(x))",
        "CORRECT": "∀x (Fish(x) → ¬Bird(x))",
        "PREDICATES": "Osprey(x)\nFish(x)\nBird(x)\nGoldfish(x)\nCarp(x)"
    },
    {
        "NLSTATEMENT": "If something is a carp, then it is a fish.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Carp(x) → Fish(x))",
        "CORRECT": "∀x (Carp(x) → Fish(x))",
        "PREDICATES": "Osprey(x)\nFish(x)\nBird(x)\nGoldfish(x)\nCarp(x)"
    },
    {
        "NLSTATEMENT": "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))",
        "CORRECT": "∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))",
        "PREDICATES": "WantToGo(x)\nLosAngeles(x)\nMiami(x)\nFloridaCityVisited(x, y)\nCaliforniaCityVisited(x, y)\nOrlando(x)\nFlorida(x)\nSanDiego(x)\nCalifornia(x)\nSanFrancisco(x)\nNeverGo(x)"
    },
    {
        "NLSTATEMENT": "Mrs. Smith has been to one city in Florida.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FloridaCityVisited(mrs.smith, one)",
        "CORRECT": "FloridaCityVisited(mrs.smith, one)",
        "PREDICATES": "WantToGo(x)\nLosAngeles(x)\nMiami(x)\nFloridaCityVisited(x, y)\nCaliforniaCityVisited(x, y)\nOrlando(x)\nFlorida(x)\nSanDiego(x)\nCalifornia(x)\nSanFrancisco(x)\nNeverGo(x)"
    },
    {
        "NLSTATEMENT": "Cities in Florida that they are interested in are Orlando and Miami.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))",
        "CORRECT": "∀x (((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))",
        "PREDICATES": "WantToGo(x)\nLosAngeles(x)\nMiami(x)\nFloridaCityVisited(x, y)\nCaliforniaCityVisited(x, y)\nOrlando(x)\nFlorida(x)\nSanDiego(x)\nCalifornia(x)\nSanFrancisco(x)\nNeverGo(x)"
    },
    {
        "NLSTATEMENT": "All light things are unstable.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Light(x) → ∀x  Unstable(x))",
        "CORRECT": "∀x (Light(x) → Unstable(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All light things are unstable.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Light(x) → Un)stable(x))",
        "CORRECT": "∀x (Light(x) → Unstable(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All small things are light. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Small(x) → Light(x))",
        "CORRECT": "∀x (Small(x) → Light(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All unstable things are kinetic. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Unstable(x) → Kinetic(x))",
        "CORRECT": "∀x (Unstable(x) → Kinetic(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All heavy things are still.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Heavyx) → Still(x)",
        "CORRECT": "∀x (Heavy(x) → Still(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "Everything is either big or small.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Big(x) ⊕ Small(x))",
        "CORRECT": "∀x (Big(x) ⊕ Small(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "DI Ray is a police procedural television series.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "TelevisionSeries(diRay)",
        "CORRECT": "TelevisionSeries(diRay)",
        "PREDICATES": "British(x)\nTelevisionSeries(x)\nWrite(x, y)\nCreate(x, y)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "DI Ray was produced by Jed Mercurio.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Pro(duce(jed, d)iRay)",
        "CORRECT": "Produce(jed, diRay)",
        "PREDICATES": "British(x)\nTelevisionSeries(x)\nWrite(x, y)\nCreate(x, y)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "All women are human.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Woman(x) → ∀x  Human(x))",
        "CORRECT": "∀x (Woman(x) → Human(x))",
        "PREDICATES": "Human(x)\nGentleman(x)\nLawyer(x)\nMan(x)\nWoman(x)\nSheep(x)"
    },
    {
        "NLSTATEMENT": "No sheep are human.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Sheep(x) → ¬Human(x))",
        "CORRECT": "∀x (Sheep(x) → ¬Human(x))",
        "PREDICATES": "Human(x)\nGentleman(x)\nLawyer(x)\nMan(x)\nWoman(x)\nSheep(x)"
    },
    {
        "NLSTATEMENT": "All gentlemen are men.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Gentleman(x) → Man(x))",
        "CORRECT": "∀x (Gentleman(x) → Man(x))",
        "PREDICATES": "Human(x)\nGentleman(x)\nLawyer(x)\nMan(x)\nWoman(x)\nSheep(x)"
    },
    {
        "NLSTATEMENT": "Some defenders are centerback.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Defender(x) ∧ Centerback(x))",
        "CORRECT": "∃x (Defender(x) ∧ Centerback(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "Some defenders are centerback.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Defender(x) ∧ Centerback(x))",
        "CORRECT": "∃x (Defender(x) ∧ Centerback(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "If a person doesn't have enough money to buy a product, then that person can't buy it.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ∀y  ¬Buy(x, y))",
        "CORRECT": "∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))",
        "PREDICATES": "Product(x)\nOneOEightO(x)\nTwoK(x)\nBuy(x, y)\nFourK(x)\nHaveEnoughMoneyFor(x, y)\nMonitor(x)\nMoreExpensive(x, y)\nPerson(x)"
    },
    {
        "NLSTATEMENT": "If a person doesn't have enough money to buy a product, then that person can't buy it.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMone(y)For(x, y) → ¬Buy(x, y))",
        "CORRECT": "∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))",
        "PREDICATES": "Product(x)\nOneOEightO(x)\nTwoK(x)\nBuy(x, y)\nFourK(x)\nHaveEnoughMoneyFor(x, y)\nMonitor(x)\nMoreExpensive(x, y)\nPerson(x)"
    },
    {
        "NLSTATEMENT": "All artificial satellites are important scientific achievements.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))",
        "CORRECT": "∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))",
        "PREDICATES": "ImportantScientificAchievement(x)\nUSInvention(x)\nArtificialSatellite(x)"
    },
    {
        "NLSTATEMENT": "Some cats are not pets.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Cat(x) ∧ ¬Pet(x))",
        "CORRECT": "∃x (Cat(x) ∧ ¬Pet(x))",
        "PREDICATES": "Cat(x)\nMammal(x)\nPet(x)"
    },
    {
        "NLSTATEMENT": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Busy(x) → MakeFood(x))",
        "CORRECT": "∀x (Busy(x) → MakeFood(x))",
        "PREDICATES": "CaffeineAddict(x)\nBusy(x)\nCoffeeShop(x)\nKitchenAppliance(x)\nMakeFood(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Busy(x) → ∀x  MakeFood(x))",
        "CORRECT": "∀x (Busy(x) → MakeFood(x))",
        "PREDICATES": "CaffeineAddict(x)\nBusy(x)\nCoffeeShop(x)\nKitchenAppliance(x)\nMakeFood(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "CORRECT": "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "PREDICATES": "CaffeineAddict(x)\nBusy(x)\nCoffeeShop(x)\nKitchenAppliance(x)\nMakeFood(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "No professional basketball players are soccer players.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬( (SoccerPlayer(x) ∧ ∃x  ProfessionalBasketballPlayer(x)))",
        "CORRECT": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All defenders are soccer players.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Defender(x) → SoccerPlayer(x))",
        "CORRECT": "∀x (Defender(x) → SoccerPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "Roger Federer is not an NBA player or a defender.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))",
        "CORRECT": "¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "If someone is a lifeguard, then they work at a pool.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Lifeguard(x) → WorkAtPool(x))",
        "CORRECT": "∀x (Lifeguard(x) → WorkAtPool(x))",
        "PREDICATES": "Nice(x)\nTeacherWorkingAtPool(x)\nPoolManager(x)\nWorkAtPool(x)\nLifeguard(x)"
    },
    {
        "NLSTATEMENT": "If someone is a lifeguard, then they work at a pool.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Lifeguard(x) → WorkAtPool(x))",
        "CORRECT": "∀x (Lifeguard(x) → WorkAtPool(x))",
        "PREDICATES": "Nice(x)\nTeacherWorkingAtPool(x)\nPoolManager(x)\nWorkAtPool(x)\nLifeguard(x)"
    },
    {
        "NLSTATEMENT": "If someone is a lifeguard, then they work at a pool.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Lifeguard(x) → WorkAtPool(x))",
        "CORRECT": "∀x (Lifeguard(x) → WorkAtPool(x))",
        "PREDICATES": "Nice(x)\nTeacherWorkingAtPool(x)\nPoolManager(x)\nWorkAtPool(x)\nLifeguard(x)"
    },
    {
        "NLSTATEMENT": "Not all art pieces require talent.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ArtPiece(x) ∧ ¬RequiresTalent(x))",
        "CORRECT": "∃x (ArtPiece(x) ∧ ¬RequiresTalent(x))",
        "PREDICATES": "RequiresPractice(x)\nArtPiece(x)\nRequiresTalent(x)"
    },
    {
        "NLSTATEMENT": "Bernarda Bryson Shahn was married to Ben Shahn.",
        "ERRORTYPE": "no_error",
        "SKETCH": "MarriedTo(bernardaBrysonShahn, benShahn)",
        "CORRECT": "MarriedTo(bernardaBrysonShahn, benShahn)",
        "PREDICATES": "Lithographer(x)\nPainter(x)\nBornIn(x, y)\nMarriedTo(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Bernarda Bryson Shahn was born in Athens, Ohio. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "BornIn(bernardaBrysonShahn, athensOhio)",
        "CORRECT": "BornIn(bernardaBrysonShahn, athensOhio)",
        "PREDICATES": "Lithographer(x)\nPainter(x)\nBornIn(x, y)\nMarriedTo(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "People born in Athens, Ohio are Americans.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BornIn(x, athensOhio) → ∀x  American(x))",
        "CORRECT": "∀x (BornIn(x, athensOhio) → American(x))",
        "PREDICATES": "Lithographer(x)\nPainter(x)\nBornIn(x, y)\nMarriedTo(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (House(x) ∨ ∀x  Apartment(x))",
        "CORRECT": "∀x (House(x) ∨ Apartment(x))",
        "PREDICATES": "Roommate(x)\nApartment(x)\nIphone(x)\nPet(x)\nTech(x)\nHouse(x)"
    },
    {
        "NLSTATEMENT": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (House(x) ∨ Apartment(x))",
        "CORRECT": "∀x (House(x) ∨ Apartment(x))",
        "PREDICATES": "Roommate(x)\nApartment(x)\nIphone(x)\nPet(x)\nTech(x)\nHouse(x)"
    },
    {
        "NLSTATEMENT": "All faculty members have a job at a school.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (FacultyMember(x) → JobAtSchool(x))",
        "CORRECT": "∀x (FacultyMember(x) → JobAtSchool(x))",
        "PREDICATES": "JobAtSchool(x)\nPaidBySchool(x)\nOnPayroll(x)\nHasStudents(x)\nTeacher(x)\nFacultyMember(x)"
    },
    {
        "NLSTATEMENT": "All faculty members have a job at a school.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (FacultyMember(x) → ∀x  JobAtSchool(x))",
        "CORRECT": "∀x (FacultyMember(x) → JobAtSchool(x))",
        "PREDICATES": "JobAtSchool(x)\nPaidBySchool(x)\nOnPayroll(x)\nHasStudents(x)\nTeacher(x)\nFacultyMember(x)"
    },
    {
        "NLSTATEMENT": "One can either be a faculty member or a teacher.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (FacultyMember(x) ∨ Teacher(x))",
        "CORRECT": "∀x (FacultyMember(x) ∨ Teacher(x))",
        "PREDICATES": "JobAtSchool(x)\nPaidBySchool(x)\nOnPayroll(x)\nHasStudents(x)\nTeacher(x)\nFacultyMember(x)"
    },
    {
        "NLSTATEMENT": "Kangaroo is an animal.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Kangaroo(x) → Animal(x))",
        "CORRECT": "∀x (Kangaroo(x) → Animal(x))",
        "PREDICATES": "Kangaroo(x)\nLiveIn(x, y)\nMaySee(x, y, z)\nAnimal(x)\nGoTo(x, y)\nFlyTo(x, y)\nEnoughMoney(x)"
    },
    {
        "NLSTATEMENT": "Intro Geology has no prerequisites.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (¬Prereq(x, introgeology))",
        "CORRECT": "∀x (¬Prereq(x, introgeology))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "Intro Geology has no prerequisites.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (¬Prereq(x, introgeology))",
        "CORRECT": "∀x (¬Prereq(x, introgeology))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "Intro Geology has no prerequisites.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (¬Prereq(x, introgeolo(gy)))",
        "CORRECT": "∀x (¬Prereq(x, introgeology))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "If a class has prerequisites the student must take the prerequisites to take the class.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  ((Prereq(x, y) ∧ ∀y  Taken(x)) ↔ CanTake(y))",
        "CORRECT": "∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "The Harry Potter series consists of 7 distinct works.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "SevenDistinctWorks(harryPotter)",
        "CORRECT": "SevenDistinctWorks(harryPotter)",
        "PREDICATES": "Heptalogy(x)\nSevenDistinctWorks(x)"
    },
    {
        "NLSTATEMENT": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (SevenDistinctWorks(x) → Heptalogy(x))",
        "CORRECT": "∀x (SevenDistinctWorks(x) → Heptalogy(x))",
        "PREDICATES": "Heptalogy(x)\nSevenDistinctWorks(x)"
    },
    {
        "NLSTATEMENT": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (SevenDistinctWorks(x) → Heptalogy(x))",
        "CORRECT": "∀x (SevenDistinctWorks(x) → Heptalogy(x))",
        "PREDICATES": "Heptalogy(x)\nSevenDistinctWorks(x)"
    },
    {
        "NLSTATEMENT": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))",
        "CORRECT": "¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))",
        "PREDICATES": "NotAcademics(x)\nRenaissanceFair(x)\nIndustry(x)\nHistoryRenaissance(x)\nHistoryProf(x)\nDressingUp(x)"
    },
    {
        "NLSTATEMENT": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))",
        "CORRECT": "¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))",
        "PREDICATES": "NotAcademics(x)\nRenaissanceFair(x)\nIndustry(x)\nHistoryRenaissance(x)\nHistoryProf(x)\nDressingUp(x)"
    },
    {
        "NLSTATEMENT": "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (HistoryRenaissance(x) → ∀x  RenaissanceFair(x))",
        "CORRECT": "∀x (HistoryRenaissance(x) → RenaissanceFair(x))",
        "PREDICATES": "NotAcademics(x)\nRenaissanceFair(x)\nIndustry(x)\nHistoryRenaissance(x)\nHistoryProf(x)\nDressingUp(x)"
    },
    {
        "NLSTATEMENT": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ForFamilyUse(x) → IntendedToBeDrivenAtModerateSpeeds(x))",
        "CORRECT": "∀x (ForFamilyUse(x) → IntendedToBeDrivenAtModerateSpeeds(x))",
        "PREDICATES": "SportsCar(x)\nIntendedToBeDrivenAtModerateSpeeds(x)\nForFamilyUse(x)"
    },
    {
        "NLSTATEMENT": "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(WorkTeams(kat) ∧ Tired(kat)) ∨ (¬WorkTeams(kat) ∧ ¬Tired(kat))",
        "CORRECT": "(WorkTeams(kat) ∧ Tired(kat)) ∨ (¬WorkTeams(kat) ∧ ¬Tired(kat))",
        "PREDICATES": "Tired(x)\nWorkTeams(x)\nPositiveAttitude(x)\nBossPromotions(x)\nNegativeFeedback(x)\nColleagues(x)"
    },
    {
        "NLSTATEMENT": "People either come into work every day with a positive attitude or are always tired every morning.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ ((Tired(x) → BossPromotions(x)))",
        "CORRECT": "∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ ((Tired(x) → BossPromotions(x)))",
        "PREDICATES": "Tired(x)\nWorkTeams(x)\nPositiveAttitude(x)\nBossPromotions(x)\nNegativeFeedback(x)\nColleagues(x)"
    },
    {
        "NLSTATEMENT": "If people work well in teams in their workplace, then they get along with all their colleagues at their work.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (WorkTeams(x) → Colleagues(x))",
        "CORRECT": "∀x (WorkTeams(x) → Colleagues(x))",
        "PREDICATES": "Tired(x)\nWorkTeams(x)\nPositiveAttitude(x)\nBossPromotions(x)\nNegativeFeedback(x)\nColleagues(x)"
    },
    {
        "NLSTATEMENT": "Drishti is open-source.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "OpenSourcedrishti",
        "CORRECT": "OpenSource(drishti)",
        "PREDICATES": "ModifyFree(x)\nOpenSource(x)"
    },
    {
        "NLSTATEMENT": "There are five grades including A+, A, B+, B, and C in English.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Grade(a+) ∨ Gradea ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)",
        "CORRECT": "Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)",
        "PREDICATES": "LowerThan90(x)\nGrade(x)\nGetGrade(x, y)\nBetter(x, y)\nRange90to95(x)\nGreaterThan95(x)"
    },
    {
        "NLSTATEMENT": "If a student gets A in English, then his score is in the range of 90-95.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (GetGrade(x, a) → Range90to95(x))",
        "CORRECT": "∀x (GetGrade(x, a) → Range90to95(x))",
        "PREDICATES": "LowerThan90(x)\nGrade(x)\nGetGrade(x, y)\nBetter(x, y)\nRange90to95(x)\nGreaterThan95(x)"
    },
    {
        "NLSTATEMENT": "Zhang got an A in English.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "GetGrade(z(hang), a)",
        "CORRECT": "GetGrade(zhang, a)",
        "PREDICATES": "LowerThan90(x)\nGrade(x)\nGetGrade(x, y)\nBetter(x, y)\nRange90to95(x)\nGreaterThan95(x)"
    },
    {
        "NLSTATEMENT": "Olivia sleeps during the night.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (SleepingDuring(olivia, x) → Night(x))",
        "CORRECT": "∀x (SleepingDuring(olivia, x) → Night(x))",
        "PREDICATES": "PrefersCoolAt(x, y)\nNight(x)\nPrefersWarmAt(x, y)\nDay(x)\nWorkingDuring(x, y)\nSleepingDuring(x, y)"
    },
    {
        "NLSTATEMENT": "Taylor Swift gives a commencement speech in New York University in 2022.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Speech(taylorSwift, nyc)",
        "CORRECT": "Speech(taylorSwift, nyc)",
        "PREDICATES": "Manhattan(x)\nHaveAlbum(x)\nSpeech(x, y)\nIvyLeague(x)"
    },
    {
        "NLSTATEMENT": "Columbia University is one of the Ivy League schools.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IvyLeague(columbiaUniversity)",
        "CORRECT": "IvyLeague(columbiaUniversity)",
        "PREDICATES": "Manhattan(x)\nHaveAlbum(x)\nSpeech(x, y)\nIvyLeague(x)"
    },
    {
        "NLSTATEMENT": "Customers either choose Plan A or Plan B.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (PlanA(x) ∨ PlanB(x))",
        "CORRECT": "∀x (PlanA(x) ∨ PlanB(x))",
        "PREDICATES": "PlanA(x)\nStudyAtSchool(x)\nNoPlan(x)\nPlanB(x)\nOlderThan80(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "Customers either choose Plan A or Plan B.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PlanA(x) ∨ PlanB(x))",
        "CORRECT": "∀x (PlanA(x) ∨ PlanB(x))",
        "PREDICATES": "PlanA(x)\nStudyAtSchool(x)\nNoPlan(x)\nPlanB(x)\nOlderThan80(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "James is not a customer who is currently studying at school. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬StudyAtSchool(james)",
        "CORRECT": "¬StudyAtSchool(james)",
        "PREDICATES": "PlanA(x)\nStudyAtSchool(x)\nNoPlan(x)\nPlanB(x)\nOlderThan80(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "Some horses are racehorses.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Horse(x) ∧ Racehorse(x))",
        "CORRECT": "∃x (Horse(x) ∧ Racehorse(x))",
        "PREDICATES": "Horse(x)\nDead(x)\nRacehorse(x)\nRacing(x)\nFalls(x)"
    },
    {
        "NLSTATEMENT": "A horse is a racehorse if it is in a race.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Horse(x) ∧ Racing(x) → Racehorse(x))",
        "CORRECT": "∀x (Horse(x) ∧ Racing(x) → Racehorse(x))",
        "PREDICATES": "Horse(x)\nDead(x)\nRacehorse(x)\nRacing(x)\nFalls(x)"
    },
    {
        "NLSTATEMENT": "A horse is a racehorse if it is in a race.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Horse(x) ∧ Racing(x) → ∀x  Racehorse(x))",
        "CORRECT": "∀x (Horse(x) ∧ Racing(x) → Racehorse(x))",
        "PREDICATES": "Horse(x)\nDead(x)\nRacehorse(x)\nRacing(x)\nFalls(x)"
    },
    {
        "NLSTATEMENT": "Frederick Monhoff was an architect, artist, and illustrator.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)",
        "CORRECT": "Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)",
        "PREDICATES": "Architect(x)\nSpeak(x, y)\nArtist(x)\nGoodAt(x, y)\nIllustrator(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "All Americans speak English.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (American(x) → ∀x  Speak(x, english))",
        "CORRECT": "∀x (American(x) → Speak(x, english))",
        "PREDICATES": "Architect(x)\nSpeak(x, y)\nArtist(x)\nGoodAt(x, y)\nIllustrator(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "TheSecondSmallestEige(nvalueOf(fie)dlerEigenvalue, theGraphLaplacian)",
        "CORRECT": "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)",
        "PREDICATES": "KnownFor(x, y)\nMathematician(x)\nHonoredBy(x, y)\nTheSecondSmallestEigenvalueOf(x, y)\nCzech(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
        "ERRORTYPE": "no_error",
        "SKETCH": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
        "CORRECT": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
        "PREDICATES": "KnownFor(x, y)\nMathematician(x)\nHonoredBy(x, y)\nTheSecondSmallestEigenvalueOf(x, y)\nCzech(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Fiedler is honored by the Fiedler eigenvalue.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
        "CORRECT": "HonoredBy(miroslavfiedler, fiedlerEigenvalue)",
        "PREDICATES": "KnownFor(x, y)\nMathematician(x)\nHonoredBy(x, y)\nTheSecondSmallestEigenvalueOf(x, y)\nCzech(x)"
    },
    {
        "NLSTATEMENT": "You can play games on a computer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Computer(x) → ∀x  CanPlayGames(x))",
        "CORRECT": "∀x (Computer(x) → CanPlayGames(x))",
        "PREDICATES": "Laptop(x)\nCanPlayGames(x)\nComputer(x)\nPhone(x)"
    },
    {
        "NLSTATEMENT": "A laptop is a computer.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Laptop(x) → Computer(x))",
        "CORRECT": "∀x (Laptop(x) → Computer(x))",
        "PREDICATES": "Laptop(x)\nCanPlayGames(x)\nComputer(x)\nPhone(x)"
    },
    {
        "NLSTATEMENT": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)",
        "CORRECT": "In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)",
        "PREDICATES": "Married(x, y)\nIn(x, y)\nLawyer(x)\nGraduatedWith(x, y)\nPracticedLawTogether(x, y)\nServedAs(x, y)\nGraduated(x, y)\nAmericanPolitician(x)"
    },
    {
        "NLSTATEMENT": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
        "ERRORTYPE": "no_error",
        "SKETCH": "AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "CORRECT": "AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "PREDICATES": "Married(x, y)\nIn(x, y)\nLawyer(x)\nGraduatedWith(x, y)\nPracticedLawTogether(x, y)\nServedAs(x, y)\nGraduated(x, y)\nAmericanPolitician(x)"
    },
    {
        "NLSTATEMENT": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "AmericanPolitician(walterbrown) ∧ Lawy(er(walterbrown) ∧ ServedAs(wa)lterbrown, postamastergeneral)",
        "CORRECT": "AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "PREDICATES": "Married(x, y)\nIn(x, y)\nLawyer(x)\nGraduatedWith(x, y)\nPracticedLawTogether(x, y)\nServedAs(x, y)\nGraduated(x, y)\nAmericanPolitician(x)"
    },
    {
        "NLSTATEMENT": "All products sold in JD are shipped from China. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (SoldJD(x) → ShipChina(x))",
        "CORRECT": "∀x (SoldJD(x) → ShipChina(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "All products sold in JD are shipped from China. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (SoldJD(x) → ShipChina(x))",
        "CORRECT": "∀x (SoldJD(x) → ShipChina(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "MacBook is not made in China and is not commonly used in China.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))",
        "CORRECT": "¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "MacBook is not made in China and is not commonly used in China.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))",
        "CORRECT": "¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "All products commonly used in China are sold in JD.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (CommonlyUsedChina(x) → SoldJD(x))",
        "CORRECT": "∀x (CommonlyUsedChina(x) → SoldJD(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "CentralLine(oxfordCircus)",
        "CORRECT": "CentralLine(oxfordCircus)",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "CentralLine(oxfordCircus)",
        "CORRECT": "CentralLine(oxfordCircus)",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "CentralLine(oxfordCircus)",
        "CORRECT": "CentralLine(oxfordCircus)",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "Oxford Street is in London.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (OxfordStreet(x) → London(x))",
        "CORRECT": "∀x (OxfordStreet(x) → London(x))",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "A thing is either alive or dead.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Alive(x) ⊕ Dead(x))",
        "CORRECT": "∀x (Alive(x) ⊕ Dead(x))",
        "PREDICATES": "Dog(x)\nDead(x)\nCat(x)\nGhost(x)\nAlive(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "A thing is either alive or dead.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Alive(x) ⊕ Dead(x))",
        "CORRECT": "∀x (Alive(x) ⊕ Dead(x))",
        "PREDICATES": "Dog(x)\nDead(x)\nCat(x)\nGhost(x)\nAlive(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "An animal is either a cat or a dog.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Cat(x) ⊕ Dog(x))",
        "CORRECT": "∀x (Cat(x) ⊕ Dog(x))",
        "PREDICATES": "Dog(x)\nDead(x)\nCat(x)\nGhost(x)\nAlive(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "Everything that is a husky is a dog.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Husky(x) → Dog(x))",
        "CORRECT": "∀x (Husky(x) → Dog(x))",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "Fido is either a Bengal tiger or a cat.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Benga(lTiger(fido) ∨ C)at(fido)",
        "CORRECT": "BengalTiger(fido) ∨ Cat(fido)",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "No cats are dogs.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Cat(x) → ∀x  ¬Dog(x))",
        "CORRECT": "∀x (Cat(x) → ¬Dog(x))",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "All Bengal tigers are tigers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (BengalTiger((x) → Ti)ger(x))",
        "CORRECT": "∀x (BengalTiger(x) → Tiger(x))",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "CORRECT": "∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "PREDICATES": "SummerOlympicsCountry(x, y)\nCityInCountry(x, y)\nCityInState(x, y)\nSummerOlympicsState(x, y)\nSummerOlympicsCity(x, y)\nStateInCountry(x, y)\nInSummerOlympics(x, y)"
    },
    {
        "NLSTATEMENT": "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).",
        "ERRORTYPE": "no_error",
        "SKETCH": "SummerOlympicsCity(y2028, la)",
        "CORRECT": "SummerOlympicsCity(y2028, la)",
        "PREDICATES": "SummerOlympicsCountry(x, y)\nCityInCountry(x, y)\nCityInState(x, y)\nSummerOlympicsState(x, y)\nSummerOlympicsCity(x, y)\nStateInCountry(x, y)\nInSummerOlympics(x, y)"
    },
    {
        "NLSTATEMENT": "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))",
        "CORRECT": "∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))",
        "PREDICATES": "SummerOlympicsCountry(x, y)\nCityInCountry(x, y)\nCityInState(x, y)\nSummerOlympicsState(x, y)\nSummerOlympicsCity(x, y)\nStateInCountry(x, y)\nInSummerOlympics(x, y)"
    },
    {
        "NLSTATEMENT": "Cats like playing with all voles.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Vole(x) → CatLikePlayingWith(x))",
        "CORRECT": "∀x (Vole(x) → CatLikePlayingWith(x))",
        "PREDICATES": "Vole(x)\nLiveInColdPlace(x)\nCatLikePlayingWith(x)\nLarger(x, y)\nFind(x, y)\nLive(x, y)"
    },
    {
        "NLSTATEMENT": "The boreal taiga zone in North America is a cold place to live in.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))",
        "CORRECT": "∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))",
        "PREDICATES": "Vole(x)\nLiveInColdPlace(x)\nCatLikePlayingWith(x)\nLarger(x, y)\nFind(x, y)\nLive(x, y)"
    },
    {
        "NLSTATEMENT": "No men have breast cancer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Men(x) → ∀x  ¬BreastCancer(x))",
        "CORRECT": " ∀x (Men(x) → ¬BreastCancer(x))",
        "PREDICATES": "WithoutTumor(x)\nBreastCancer(x)\nATypeOfCancer(x)\nWomen(x)\nMen(x)"
    },
    {
        "NLSTATEMENT": "Either breast cancer or non-breast cancer. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (Bre(astCancer )(x) ∨ Non-BreastCancer(x)) ",
        "CORRECT": " ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ",
        "PREDICATES": "WithoutTumor(x)\nBreastCancer(x)\nATypeOfCancer(x)\nWomen(x)\nMen(x)"
    },
    {
        "NLSTATEMENT": "Either breast cancer or non-breast cancer. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (BreastCancer (x) ∨ ∀x  Non-BreastCancer(x)) ",
        "CORRECT": " ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ",
        "PREDICATES": "WithoutTumor(x)\nBreastCancer(x)\nATypeOfCancer(x)\nWomen(x)\nMen(x)"
    },
    {
        "NLSTATEMENT": "LG34 is equipped in the lab.  ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Lab(lg-34)",
        "CORRECT": "Lab(lg-34)",
        "PREDICATES": "Lab(x)\nA1080p(x)\nAOC(x)\nCheaper(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "Some monitors equipped in the lab are produced by the company named AOC. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Lab(x) ∧ ∃x  AOC(x))",
        "CORRECT": "∃x (Lab(x) ∧ AOC(x))",
        "PREDICATES": "Lab(x)\nA1080p(x)\nAOC(x)\nCheaper(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "If the monitor is cheaper than its original prices, then its resolution is 1080p. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Cheaper(x) → A1080p(x))",
        "CORRECT": "∀x (Cheaper(x) → A1080p(x))",
        "PREDICATES": "Lab(x)\nA1080p(x)\nAOC(x)\nCheaper(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "Some fruits sold in New Haven are shipped from Mexico.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))",
        "CORRECT": "∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))",
        "CORRECT": "¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "No fruits shipped from Columbia are fruits sold in New York. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ShippedFromColumbia(x) → ∀x  ¬SoldNewYork(x))",
        "CORRECT": "∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))",
        "CORRECT": "¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "A-2017 supports the type-c port. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "TypeC(a-2017)",
        "CORRECT": "TypeC(a-2017)",
        "PREDICATES": "Cheap(x)\nA1080p(x)\nAOC(x)\nLibrary(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "If a monitor has a resolution of 1080p, then it does not support the type-c port. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (A1080p(x) → ∀x  ¬TypeC(x))",
        "CORRECT": "∀x (A1080p(x) → ¬TypeC(x))",
        "PREDICATES": "Cheap(x)\nA1080p(x)\nAOC(x)\nLibrary(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "A-2017 supports the type-c port. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "TypeC(a-2017)",
        "CORRECT": "TypeC(a-2017)",
        "PREDICATES": "Cheap(x)\nA1080p(x)\nAOC(x)\nLibrary(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "Sūduva Marijampolė is a soccer team.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "SoccerTeam(suduva)",
        "CORRECT": "SoccerTeam(suduva)",
        "PREDICATES": "Hold(x, y)\nSoccerTeam(x)"
    },
    {
        "NLSTATEMENT": "North Yorkshire is in England.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (NorthYorkshire(x) → England(x))",
        "CORRECT": "∀x (NorthYorkshire(x) → England(x))",
        "PREDICATES": "Village(x)\nNorthYorkshire(x)\nAinderbyQuernhow(x)\nCivilParish(x)\nEngland(x)\nHambleton(x)"
    },
    {
        "NLSTATEMENT": "Hambleton District is in North Yorkshire.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Hambleton(x) → NorthYorkshire(x))",
        "CORRECT": "∀x (Hambleton(x) → NorthYorkshire(x))",
        "PREDICATES": "Village(x)\nNorthYorkshire(x)\nAinderbyQuernhow(x)\nCivilParish(x)\nEngland(x)\nHambleton(x)"
    },
    {
        "NLSTATEMENT": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Author(douglasAdams) ∧ Book(theSa(lmonOfDoub)t)",
        "CORRECT": "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "PREDICATES": "AboutTechnology(x)\nAuthor(x)\nBook(x)\nCreateInnovativeIdea(x)\nAboutLifeExperience(x)\nContainInnovativeIdea(x)\nWriter(x)"
    },
    {
        "NLSTATEMENT": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Author(douglasAdams) ∧ BooktheSalmonOfDoubt",
        "CORRECT": "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "PREDICATES": "AboutTechnology(x)\nAuthor(x)\nBook(x)\nCreateInnovativeIdea(x)\nAboutLifeExperience(x)\nContainInnovativeIdea(x)\nWriter(x)"
    },
    {
        "NLSTATEMENT": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "CORRECT": "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "PREDICATES": "AboutTechnology(x)\nAuthor(x)\nBook(x)\nCreateInnovativeIdea(x)\nAboutLifeExperience(x)\nContainInnovativeIdea(x)\nWriter(x)"
    },
    {
        "NLSTATEMENT": "No disposable products can help slow down global warming. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "CORRECT": "∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)",
        "CORRECT": " ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "All sustainable fashion brands are eco-friendly brands.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (SustainableFashionBrand(x) → ∀x  Eco-friendlyBrand(x))",
        "CORRECT": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "All sustainable fashion brands are eco-friendly brands.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "CORRECT": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "All sustainable fashion brands are eco-friendly brands.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "CORRECT": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "All sustainable fashion brands are eco-friendly brands.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrandx)",
        "CORRECT": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "Roy Richardson was old when he debuted in cricket.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Old(royrichardson) ∧ DebutedIn(royrichardson, cricket)",
        "CORRECT": "Old(royrichardson) ∧ DebutedIn(royrichardson, cricket)",
        "PREDICATES": "Dismissed(x, y)\nOld(x)\nBatsman(x)\nPlayedFor(x, y)\nConstituentCountry(x)\nMediumPaceBowler(x)\nCricketeer(x)\nDebutedIn(x, y)\nRightHanded(x)"
    },
    {
        "NLSTATEMENT": "Roy Richardson was a cricketer for Sint Maartener, a consituent country.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Cricketeerroyrichardson ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)",
        "CORRECT": "Cricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)",
        "PREDICATES": "Dismissed(x, y)\nOld(x)\nBatsman(x)\nPlayedFor(x, y)\nConstituentCountry(x)\nMediumPaceBowler(x)\nCricketeer(x)\nDebutedIn(x, y)\nRightHanded(x)"
    },
    {
        "NLSTATEMENT": " John submitted his resume to Google and got a job there.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "CVjohn, google ∧ Employed(john, google)",
        "CORRECT": "CV(john, google) ∧ Employed(john, google)",
        "PREDICATES": "Yale(x)\nCV(x, y)\nEmployed(x, y)\nWorkExp(x)\nGoodEduc(x)"
    },
    {
        "NLSTATEMENT": "No students are doctors.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Studentx) → ¬Doctor(x)",
        "CORRECT": "∀x (Student(x) → ¬Doctor(x))",
        "PREDICATES": "TakingClass(x)\nDoctor(x)\nGraduateStudent(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All graduate students are people taking classes. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (GraduateStudent(x) → TakingClass(x))",
        "CORRECT": "∀x (GraduateStudent(x) → TakingClass(x))",
        "PREDICATES": "TakingClass(x)\nDoctor(x)\nGraduateStudent(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All people taking classes are students. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x( (TakingClass)(x) → Student(x))",
        "CORRECT": "∀x (TakingClass(x) → Student(x))",
        "PREDICATES": "TakingClass(x)\nDoctor(x)\nGraduateStudent(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Hugh Vanstone has lit more than 160 productions.",
        "ERRORTYPE": "no_error",
        "SKETCH": "LitOver160Productions(hughVanstone)",
        "CORRECT": "LitOver160Productions(hughVanstone)",
        "PREDICATES": "AttendedSchoolWhereFrom(x)\nLitOver160Productions(x)\nWorldLeadingLightningDesigner(x)\nFromUK(x)"
    },
    {
        "NLSTATEMENT": "Hugh Vanstone has lit more than 160 productions.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LitOver160Productions(hughVanstone)",
        "CORRECT": "LitOver160Productions(hughVanstone)",
        "PREDICATES": "AttendedSchoolWhereFrom(x)\nLitOver160Productions(x)\nWorldLeadingLightningDesigner(x)\nFromUK(x)"
    },
    {
        "NLSTATEMENT": "Hugh Vanstone is from the UK.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "FromUK(hughVanstone)",
        "CORRECT": "FromUK(hughVanstone)",
        "PREDICATES": "AttendedSchoolWhereFrom(x)\nLitOver160Productions(x)\nWorldLeadingLightningDesigner(x)\nFromUK(x)"
    },
    {
        "NLSTATEMENT": "No man can run faster than Bolt. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Man(x) → ¬FasterThanBolt(x))",
        "CORRECT": "∀x (Man(x) → ¬FasterThanBolt(x))",
        "PREDICATES": "Man(x)\nFasterThanBolt(x)"
    },
    {
        "NLSTATEMENT": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanforddonaldErvinKnuth",
        "CORRECT": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "PREDICATES": "BeCalled(x, y)\nAmericanComputerScientist(x)\nProfessorStanford(x)\nMathematician(x)"
    },
    {
        "NLSTATEMENT": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "CORRECT": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "PREDICATES": "BeCalled(x, y)\nAmericanComputerScientist(x)\nProfessorStanford(x)\nMathematician(x)"
    },
    {
        "NLSTATEMENT": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "CORRECT": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "PREDICATES": "BeCalled(x, y)\nAmericanComputerScientist(x)\nProfessorStanford(x)\nMathematician(x)"
    },
    {
        "NLSTATEMENT": "Neocrepidodera Corpulentas are flea beetles or moths.",
        "ERRORTYPE": "no_error",
        "SKETCH": "FleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta)",
        "CORRECT": "FleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta)",
        "PREDICATES": "Moth(x)\nSpecies(x)\nIn(x, y)\nFleaBeetle(x)\nFamily(x)"
    },
    {
        "NLSTATEMENT": "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Species(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpul(en)ta, chrysomelidae)",
        "CORRECT": "Species(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpulenta, chrysomelidae)",
        "PREDICATES": "Moth(x)\nSpecies(x)\nIn(x, y)\nFleaBeetle(x)\nFamily(x)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli made car bodies. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Made(carrozz(eriacolli, carbodies))",
        "CORRECT": "Made(carrozzeriacolli, carbodies)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli is a company that specialized in using aluminum.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SpecializedIncarrozzeriacolli, usingaluminum",
        "CORRECT": "SpecializedIn(carrozzeriacolli, usingaluminum)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBycarrozzeriacolli, giuseppecolli ∧ EstablishedIn(carrozzeriacolli, y1901)",
        "CORRECT": "MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli made car bodies. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Made(carrozzeriacolli, carbodies)",
        "CORRECT": "Made(carrozzeriacolli, carbodies)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "The first automobiles built by Carrozzeria Colli were racing cars.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (FirstAutomobilesBy(x, carrozzeriacolli) → ∀x  Racingcar(x))",
        "CORRECT": "∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "John will go to the cinema if and only if Jack goes to the cinema today.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)",
        "CORRECT": "GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)",
        "PREDICATES": "GoToTheCinema(x, y)\nMonth(x)\nMovie(x)\nBadWeather(x)"
    },
    {
        "NLSTATEMENT": "John will go to the cinema if and only if Jack goes to the cinema today.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)",
        "CORRECT": "GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)",
        "PREDICATES": "GoToTheCinema(x, y)\nMonth(x)\nMovie(x)\nBadWeather(x)"
    },
    {
        "NLSTATEMENT": "Joe owns an item fron Quiksilver.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (QuiksilverSells(x) → JoeOwns(x))",
        "CORRECT": "∃x (QuiksilverSells(x) → JoeOwns(x))",
        "PREDICATES": "Clothing(x)\nFootwear(x)\nJoeOwns(x)\nAccessory(x)\nQuiksilverSells(x)\nSportswear(x)"
    },
    {
        "NLSTATEMENT": "Joe owns an item fron Quiksilver.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (QuiksilverSells(x) → JoeOwns(x))",
        "CORRECT": "∃x (QuiksilverSells(x) → JoeOwns(x))",
        "PREDICATES": "Clothing(x)\nFootwear(x)\nJoeOwns(x)\nAccessory(x)\nQuiksilverSells(x)\nSportswear(x)"
    },
    {
        "NLSTATEMENT": "Flannels are a type of clothing.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Clothingflannel",
        "CORRECT": "Clothing(flannel)",
        "PREDICATES": "Clothing(x)\nFootwear(x)\nJoeOwns(x)\nAccessory(x)\nQuiksilverSells(x)\nSportswear(x)"
    },
    {
        "NLSTATEMENT": "All video games in the FIFA series support the PS4 platform. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (FIFAx) → SupportPS4(x)",
        "CORRECT": "∀x (FIFA(x) → SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "All video games supporting users to simulate playing soccer games online are in the FIFA series.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (SoccerOnline(x) → FIFA(x))",
        "CORRECT": "∀x (SoccerOnline(x) → FIFA(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "No video games released by Nintendo support the PS4 platform.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Nintendo(x) → ¬SupportPS4(x))",
        "CORRECT": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "No video games released by Nintendo support the PS4 platform.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "CORRECT": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "Social payments in Russia can only be transferred to MIR payment cards.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SocialRussia(x) → Mir(x))",
        "CORRECT": "∀x (SocialRussia(x) → Mir(x))",
        "PREDICATES": "Mir(x)\nSocialRussia(x)\nApplePay(x)\nInternational(x)\nRussianBank(x)"
    },
    {
        "NLSTATEMENT": "No payment cards issued by Russian banks can be used with ApplePay.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (RussianBank(x() → ¬A)pplePay(x))",
        "CORRECT": "∀x (RussianBank(x) → ¬ApplePay(x))",
        "PREDICATES": "Mir(x)\nSocialRussia(x)\nApplePay(x)\nInternational(x)\nRussianBank(x)"
    },
    {
        "NLSTATEMENT": "No payment cards issued by Russian banks can be used with ApplePay.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (RussianBank(x) → ¬ApplePay(x))",
        "CORRECT": "∀x (RussianBank(x) → ¬ApplePay(x))",
        "PREDICATES": "Mir(x)\nSocialRussia(x)\nApplePay(x)\nInternational(x)\nRussianBank(x)"
    },
    {
        "NLSTATEMENT": "The Astro is a van produced by Chevrolet. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Chevrolet(astro) ∧ Van(astro)",
        "CORRECT": "Chevrolet(astro) ∧ Van(astro)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "Cars produced by Chevrolet are either cars or vans.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Chevrolet(x) → ∀x  Car(x) ⊕ Van(x))",
        "CORRECT": "∀x (Chevrolet(x) → Car(x) ⊕ Van(x))",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "The Lumina APV is produced by Chevrolet. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Chevrolet(luminaAPV)",
        "CORRECT": "Chevrolet(luminaAPV)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "The Lumina APV is produced by Chevrolet. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Chevrolet(luminaAPV)",
        "CORRECT": "Chevrolet(luminaAPV)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "Everyone who works in person is a commuter.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (InPerson(x) → ∀x  Commuter(x))",
        "CORRECT": "∀x (InPerson(x) → Commuter(x))",
        "PREDICATES": "Commuter(x)\nFromHome(x)\nRelaxed(x)\nInPerson(x)\nHomeOffice(x)"
    },
    {
        "NLSTATEMENT": "Everyone who works from home has a relaxed schedule.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (FromHome(x) → ∀x  Relaxed(x))",
        "CORRECT": "∀x (FromHome(x) → Relaxed(x))",
        "PREDICATES": "Commuter(x)\nFromHome(x)\nRelaxed(x)\nInPerson(x)\nHomeOffice(x)"
    },
    {
        "NLSTATEMENT": "Everyone who works in person is a commuter.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (InPe(rson(x) → Co)mmuter(x))",
        "CORRECT": "∀x (InPerson(x) → Commuter(x))",
        "PREDICATES": "Commuter(x)\nFromHome(x)\nRelaxed(x)\nInPerson(x)\nHomeOffice(x)"
    },
    {
        "NLSTATEMENT": "Jason Kramer is an American music supervisor.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "MusicSupervisor(jasonKramer) ∧ American(jasonKramer)",
        "CORRECT": "MusicSupervisor(jasonKramer) ∧ American(jasonKramer)",
        "PREDICATES": "HostShowOnPublicRadioStation(x)\nMusicSupervisor(x)\nRadioPersonality(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Some American radio personalities are also music supervisors. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))",
        "CORRECT": "∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))",
        "PREDICATES": "HostShowOnPublicRadioStation(x)\nMusicSupervisor(x)\nRadioPersonality(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Some American radio personalities are also music supervisors. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (American(x) ∧ ∃x  MusicSupervisor(x) ∧ RadioPersonality(x))",
        "CORRECT": "∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))",
        "PREDICATES": "HostShowOnPublicRadioStation(x)\nMusicSupervisor(x)\nRadioPersonality(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "No coffee sold in Walmart is produced in France. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Walmart(x) → ¬France(x))",
        "CORRECT": "∀x (Walmart(x) → ¬France(x))",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "All coffee with high prices is favored by local residents. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (HighPrice(x) → Favored(x))",
        "CORRECT": "∀x (HighPrice(x) → Favored(x))",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "All coffee supplied by the company is sold in Walmart. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Comp(an)y(x) → Walmart(x))",
        "CORRECT": "∀x (Company(x) → Walmart(x))",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "Civet Coffee is not produced in Columbia and is cheap.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))",
        "CORRECT": "¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "Poland is in Europe.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Poland(x) → Europe(x))",
        "CORRECT": "∀x (Poland(x) → Europe(x))",
        "PREDICATES": "Europe(x)\nGalicia(x)\nRochelleLive(x)\nDominiqueLive(x)\nAlfonsoLive(x)\nSpain(x)\nPoland(x)"
    },
    {
        "NLSTATEMENT": "There are two places named Galicia: either in Spain or in Poland.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "CORRECT": "∀x (Galicia(x) → Spain(x) ⊕ Poland(x))",
        "PREDICATES": "Europe(x)\nGalicia(x)\nRochelleLive(x)\nDominiqueLive(x)\nAlfonsoLive(x)\nSpain(x)\nPoland(x)"
    },
    {
        "NLSTATEMENT": "Alfonso lives in Galicia.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (AlfonsoLive(x) → Galicia(x))",
        "CORRECT": "∀x (AlfonsoLive(x) → Galicia(x))",
        "PREDICATES": "Europe(x)\nGalicia(x)\nRochelleLive(x)\nDominiqueLive(x)\nAlfonsoLive(x)\nSpain(x)\nPoland(x)"
    },
    {
        "NLSTATEMENT": "Ralph Hammerthaler is a German writer.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Writer(ralphHammerthaler)",
        "CORRECT": "Writer(ralphHammerthaler)",
        "PREDICATES": "LocatedIn(x, y)\nWriter(x)\nBornIn1965(x)\nBornIn(x, y)"
    },
    {
        "NLSTATEMENT": "Germany is in Europe.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "LocatedIn(germany, europe)",
        "CORRECT": "LocatedIn(germany, europe)",
        "PREDICATES": "LocatedIn(x, y)\nWriter(x)\nBornIn1965(x)\nBornIn(x, y)"
    },
    {
        "NLSTATEMENT": "Some books that have won Hugo Awards are written by Tomas.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "CORRECT": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "PREDICATES": "SoldOneMillion(x)\nWinningHugoAward(x)\nWrittenByTomas(x)\nInspiredFromShakespeare(x)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "Some books that have won Hugo Awards are written by Tomas.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (WinningHugoAward(x) ∧ ∃x  WrittenByTomas(x))",
        "CORRECT": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "PREDICATES": "SoldOneMillion(x)\nWinningHugoAward(x)\nWrittenByTomas(x)\nInspiredFromShakespeare(x)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "Some books that have won Hugo Awards are written by Tomas.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (WinningHugoAwardx) ∧ WrittenByTomas(x)",
        "CORRECT": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "PREDICATES": "SoldOneMillion(x)\nWinningHugoAward(x)\nWrittenByTomas(x)\nInspiredFromShakespeare(x)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "All lemons are fruit.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Lemon(x) → Fruit(x))",
        "CORRECT": "∀x (Lemon(x) → Fruit(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All edible things are food. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Edible(x) → Food(x))",
        "CORRECT": "∀x (Edible(x) → Food(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All lemons are fruit.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Lemon(x → Fruit(x))",
        "CORRECT": "∀x (Lemon(x) → Fruit(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All edible things are food. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Ediblex) → Food(x)",
        "CORRECT": "∀x (Edible(x) → Food(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All teams attending the NBA finals have more than thirty years of history.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (team(x) ∧ Attending(x, nbafinals) → ∀x  HasMoreThan(x, thirtyyearsofhistory))",
        "CORRECT": "∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))",
        "PREDICATES": "Attending(x, y)\nTeam(x)\nHasMoreThan(x, y)\nWon(x, y)\nMoreIncome(x)\nFrom(x, y)\nLost(x, y)\nteam(x)"
    },
    {
        "NLSTATEMENT": "If a team wins the NBA finals, then they will have more income.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))",
        "CORRECT": "∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))",
        "PREDICATES": "Attending(x, y)\nTeam(x)\nHasMoreThan(x, y)\nWon(x, y)\nMoreIncome(x)\nFrom(x, y)\nLost(x, y)\nteam(x)"
    },
    {
        "NLSTATEMENT": "Boston Celtics are a team that lost the NBA finals.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Team(bostonceltics) ∧ Lostbostonceltics, nbafinals",
        "CORRECT": "Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)",
        "PREDICATES": "Attending(x, y)\nTeam(x)\nHasMoreThan(x, y)\nWon(x, y)\nMoreIncome(x)\nFrom(x, y)\nLost(x, y)\nteam(x)"
    },
    {
        "NLSTATEMENT": "Maya is a volleyball player.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "VolleyballPlayer(maya)",
        "CORRECT": "VolleyballPlayer(maya)",
        "PREDICATES": "WillPlayViolin(x)\nVolleyballPlayer(x)\nCanInjureFingures(x)"
    },
    {
        "NLSTATEMENT": "A device is either with the company logo or belongs to employees. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CompanyLogo(x) ∨ Employee(x))",
        "CORRECT": "∀x (CompanyLogo(x) ∨ Employee(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to employees are available to connect to the company's wifi. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Employee((x) → )Wifi(x))",
        "CORRECT": "∀x (Employee(x) → Wifi(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "IPod1 is produced before 2020. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬ProducedAfter2020(iPod1)",
        "CORRECT": "¬ProducedAfter2020(iPod1)",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to the company are connected to Google Home. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (InCompany(x) → GoogleHomex)",
        "CORRECT": "∀x (InCompany(x) → GoogleHome(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All CD players are delicate mechanisms.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (CDPlay(er(x) → DelicateM)echanism(x))",
        "CORRECT": "∀x (CDPlayer(x) → DelicateMechanism(x))",
        "PREDICATES": "CDPlayer(x)\nSuitableToyForChildren(x)\nDelicateMechanism(x)"
    },
    {
        "NLSTATEMENT": "All baby elephants are elephants.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BabyElephant(x) → Elephant(x))",
        "CORRECT": "∀x (BabyElephant(x) → Elephant(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "All baby elephants are elephants.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BabyElephant(x) → Elephant(x))",
        "CORRECT": "∀x (BabyElephant(x) → Elephant(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "Some baby elephants are sleepy.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x BabyElephant(x ∧ Sleepy(x))",
        "CORRECT": "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "Some baby elephants are sleepy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BabyElephant(x) ∧ ∃x  Sleepy(x))",
        "CORRECT": "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "Some baby elephants are sleepy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BabyElephant(x) ∧ ∃x  Sleepy(x))",
        "CORRECT": "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "No faculty does homework.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Faculty(x) → ∀x  ¬DoesHomework(x))",
        "CORRECT": "∀x (Faculty(x) → ¬DoesHomework(x))",
        "PREDICATES": "WorkAtSchool(x)\nKid(x)\nStudent(x)\nDoesHomework(x)\nFaculty(x)"
    },
    {
        "NLSTATEMENT": "No faculty does homework.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Facultyx) → ¬DoesHomework(x)",
        "CORRECT": "∀x (Faculty(x) → ¬DoesHomework(x))",
        "PREDICATES": "WorkAtSchool(x)\nKid(x)\nStudent(x)\nDoesHomework(x)\nFaculty(x)"
    },
    {
        "NLSTATEMENT": "If someone works at a school, then they are faculty.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (WorkAtSchool(x) → Faculty(x))",
        "CORRECT": "∀x (WorkAtSchool(x) → Faculty(x))",
        "PREDICATES": "WorkAtSchool(x)\nKid(x)\nStudent(x)\nDoesHomework(x)\nFaculty(x)"
    },
    {
        "NLSTATEMENT": "All songs that are full of lyrics need to be written with words",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))",
        "CORRECT": "∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))",
        "PREDICATES": "MaxListensToRap(x)\nSongsFromKanyeWest(x)\nNeedToBeWrittenWithWords(x)\nMaxListensToClassicalMusic(x)\nSongsFrom12thCentury(x)\nSongsFullOfLyrics(x)"
    },
    {
        "NLSTATEMENT": "Either Max listens to classical music or Max listens to rap. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (MaxListensToCla(ssicalMusic(x) ∨ MaxListensT)oRap(x))",
        "CORRECT": "∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))",
        "PREDICATES": "MaxListensToRap(x)\nSongsFromKanyeWest(x)\nNeedToBeWrittenWithWords(x)\nMaxListensToClassicalMusic(x)\nSongsFrom12thCentury(x)\nSongsFullOfLyrics(x)"
    },
    {
        "NLSTATEMENT": "If the song Max listens to is rap, then the song is from Kanye West. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((MaxListensToRap(x) → SongsFr)omKanyeWest(x))",
        "CORRECT": "∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))",
        "PREDICATES": "MaxListensToRap(x)\nSongsFromKanyeWest(x)\nNeedToBeWrittenWithWords(x)\nMaxListensToClassicalMusic(x)\nSongsFrom12thCentury(x)\nSongsFullOfLyrics(x)"
    },
    {
        "NLSTATEMENT": "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  (Peak(x, y) → ∀y  Popular(x))",
        "CORRECT": "∀x ∀y (Peak(x, y) → Popular(x))",
        "PREDICATES": "Peak(x, y)\nPopular(x)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  (Peak(x, y) → ∀y  Popular(x))",
        "CORRECT": "∀x ∀y (Peak(x, y) → Popular(x))",
        "PREDICATES": "Peak(x, y)\nPopular(x)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∀y (Peak(x, y) → Popular(x))",
        "CORRECT": "∀x ∀y (Peak(x, y) → Popular(x))",
        "PREDICATES": "Peak(x, y)\nPopular(x)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "All people who limp often and regularly have long-term medical issues with underlying causes.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Limp(x → Medical(x))",
        "CORRECT": "∀x (Limp(x) → Medical(x))",
        "PREDICATES": "Limp(x)\nTired(x)\nSpry(x)\nGym(x)\nIndoors(x)\nMedical(x)"
    },
    {
        "NLSTATEMENT": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Medicalx) → ¬Spry(x)",
        "CORRECT": "∀x (Medical(x) → ¬Spry(x))",
        "PREDICATES": "Limp(x)\nTired(x)\nSpry(x)\nGym(x)\nIndoors(x)\nMedical(x)"
    },
    {
        "NLSTATEMENT": "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Spry(x) ⊕ Tired(x)) ∧ ∀x  ((Tired(x) → Indoors(x)))",
        "CORRECT": "∀x (Spry(x) ⊕ Tired(x)) ∧ ((Tired(x) → Indoors(x)))",
        "PREDICATES": "Limp(x)\nTired(x)\nSpry(x)\nGym(x)\nIndoors(x)\nMedical(x)"
    },
    {
        "NLSTATEMENT": "Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)",
        "CORRECT": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)",
        "PREDICATES": "PlayPenalty(x, y)\nPlayExtra(x, y)\nDuring(x)\nSoccerTeam(x)\nSameScore(x, y)"
    },
    {
        "NLSTATEMENT": "Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)",
        "CORRECT": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)",
        "PREDICATES": "PlayPenalty(x, y)\nPlayExtra(x, y)\nDuring(x)\nSoccerTeam(x)\nSameScore(x, y)"
    },
    {
        "NLSTATEMENT": "System 7 has released several club singles.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (ClubSinglex) ∧ Released(system7, x)",
        "CORRECT": "∃x (ClubSingle(x) ∧ Released(system7, x))",
        "PREDICATES": "Single(x)\nFormed(x, y)\nElectronicDanceMusicBand(x)\nReleased(x, y)\nClubSingle(x)\nBand(x)\nFormerMemberOf(x, y)\nBasedOn(x, y)"
    },
    {
        "NLSTATEMENT": "Steve Hillage and Miquette Giraudy formed System 7.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, s(yste)m7)",
        "CORRECT": "Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)",
        "PREDICATES": "Single(x)\nFormed(x, y)\nElectronicDanceMusicBand(x)\nReleased(x, y)\nClubSingle(x)\nBand(x)\nFormerMemberOf(x, y)\nBasedOn(x, y)"
    },
    {
        "NLSTATEMENT": "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)",
        "CORRECT": "FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)",
        "PREDICATES": "Single(x)\nFormed(x, y)\nElectronicDanceMusicBand(x)\nReleased(x, y)\nClubSingle(x)\nBand(x)\nFormerMemberOf(x, y)\nBasedOn(x, y)"
    },
    {
        "NLSTATEMENT": "Extractive models are a kind of summarization models.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Model(x) ∧ ∀x  Extractive(x) → Summarization(x))",
        "CORRECT": "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "PREDICATES": "Summarization(x)\nOnlyUseInputDocument(x)\nModel(x)\nFaithful(x)\nExtractive(x)"
    },
    {
        "NLSTATEMENT": "A summarization model is always faithful if it uses content from the input documents.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "CORRECT": "∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))",
        "PREDICATES": "Summarization(x)\nOnlyUseInputDocument(x)\nModel(x)\nFaithful(x)\nExtractive(x)"
    },
    {
        "NLSTATEMENT": "If people want to work in the software engineering industry, then they practice coding questions.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x Industry(x) → Coding(x)",
        "CORRECT": "∀x Industry(x) → Coding(x)",
        "PREDICATES": "ParentDoctors(x)\nIndustry(x)\nStudyingToBeDoctor(x)\nHealthcare(x)\nStudy(x)\nCoding(x)"
    },
    {
        "NLSTATEMENT": "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) ",
        "CORRECT": "¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) ",
        "PREDICATES": "ParentDoctors(x)\nIndustry(x)\nStudyingToBeDoctor(x)\nHealthcare(x)\nStudy(x)\nCoding(x)"
    },
    {
        "NLSTATEMENT": "If people want to work in the software engineering industry, then they practice coding questions.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " Industry(x) → Coding(x)",
        "CORRECT": "∀x Industry(x) → Coding(x)",
        "PREDICATES": "ParentDoctors(x)\nIndustry(x)\nStudyingToBeDoctor(x)\nHealthcare(x)\nStudy(x)\nCoding(x)"
    },
    {
        "NLSTATEMENT": "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x Luxury(x) → Shopping(x)",
        "CORRECT": "∀x Luxury(x) → Shopping(x)",
        "PREDICATES": "Frivolous(x)\nMiserly(x)\nLuxury(x)\nSpa(x)\nShopping(x)"
    },
    {
        "NLSTATEMENT": "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " Frivolous(x) → Luxury(x)",
        "CORRECT": "∀x Frivolous(x) → Luxury(x)",
        "PREDICATES": "Frivolous(x)\nMiserly(x)\nLuxury(x)\nSpa(x)\nShopping(x)"
    },
    {
        "NLSTATEMENT": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬MiserlyJess → ¬Luxury(Jess)",
        "CORRECT": "¬Miserly(Jess) → ¬Luxury(Jess)",
        "PREDICATES": "Frivolous(x)\nMiserly(x)\nLuxury(x)\nSpa(x)\nShopping(x)"
    },
    {
        "NLSTATEMENT": "The indie pop band Phoenix has released 6 albums. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "AlbumsReleased(phoenix, l6)",
        "CORRECT": "AlbumsReleased(phoenix, l6)",
        "PREDICATES": "By(x, y)\nAlbum(x)\nSingle(x)\nSoldOver(x, y)\nAlbumsReleased(x, y)\nFrom(x, y)\nIsAlbumOf(x, y)\nCertifiedGold(x)"
    },
    {
        "NLSTATEMENT": "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)",
        "CORRECT": "Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)",
        "PREDICATES": "By(x, y)\nAlbum(x)\nSingle(x)\nSoldOver(x, y)\nAlbumsReleased(x, y)\nFrom(x, y)\nIsAlbumOf(x, y)\nCertifiedGold(x)"
    },
    {
        "NLSTATEMENT": "Peter Parker wears a uniform when he is a superhero.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Superhero(peter) → WearUniformpeter",
        "CORRECT": "Superhero(peter) → WearUniform(peter)",
        "PREDICATES": "Wake(x)\nSuperhero(x)\nDestroyer(x)\nGod(x)\nCivilian(x)\nBreakBridge(x)\nHappy(x)\nWearUniform(x)\nAngry(x)"
    },
    {
        "NLSTATEMENT": "Thor will break a bridge when he is happy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Happy(thor) → BreakBridge(thor)",
        "CORRECT": "Happy(thor) → BreakBridge(thor)",
        "PREDICATES": "Wake(x)\nSuperhero(x)\nDestroyer(x)\nGod(x)\nCivilian(x)\nBreakBridge(x)\nHappy(x)\nWearUniform(x)\nAngry(x)"
    },
    {
        "NLSTATEMENT": "Peter Parker wears a uniform when he is a superhero.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Superhero(peter) → WearUniform(peter)",
        "CORRECT": "Superhero(peter) → WearUniform(peter)",
        "PREDICATES": "Wake(x)\nSuperhero(x)\nDestroyer(x)\nGod(x)\nCivilian(x)\nBreakBridge(x)\nHappy(x)\nWearUniform(x)\nAngry(x)"
    },
    {
        "NLSTATEMENT": "Diethylcarbamazine can be used to treat river blindness.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "CORRECT": "∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "PREDICATES": "Treats(x, y)\nIvermectin(x)\nMedication(x)\nDiethylcarbamazine(x)\nRiverBlindness(x)\nPreferredTreatment(x, y)\nDiscoveredIn(x, y)"
    },
    {
        "NLSTATEMENT": "The only preferred treatment for river blindness is ivermectin.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (RiverBlindness(y) ∧ ∀x  PreferredTreatment(x, y) → Ivermectin(x))",
        "CORRECT": "∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))",
        "PREDICATES": "Treats(x, y)\nIvermectin(x)\nMedication(x)\nDiethylcarbamazine(x)\nRiverBlindness(x)\nPreferredTreatment(x, y)\nDiscoveredIn(x, y)"
    },
    {
        "NLSTATEMENT": "Diethylcarbamazine can be used to treat river blindness.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "CORRECT": "∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "PREDICATES": "Treats(x, y)\nIvermectin(x)\nMedication(x)\nDiethylcarbamazine(x)\nRiverBlindness(x)\nPreferredTreatment(x, y)\nDiscoveredIn(x, y)"
    },
    {
        "NLSTATEMENT": "All implementing machine learning algorithms are to learn and classify multivariate data.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (ImplementingMachineLearningAlgorithms(x) → ∀x  LearnAndClassifyMultivariateData(x)) ",
        "CORRECT": " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        "PREDICATES": "LearnAndClassifyMultivariateData(x)\nImplementingMachineLearningAlgorithms(x)\nMultivoxelPatternAnalysis(x)\nUsesGeneralizedLinearModel(x)\nUnivariateAnalysis(x)"
    },
    {
        "NLSTATEMENT": "All implementing machine learning algorithms are to learn and classify multivariate data.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        "CORRECT": " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        "PREDICATES": "LearnAndClassifyMultivariateData(x)\nImplementingMachineLearningAlgorithms(x)\nMultivoxelPatternAnalysis(x)\nUsesGeneralizedLinearModel(x)\nUnivariateAnalysis(x)"
    },
    {
        "NLSTATEMENT": "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)",
        "CORRECT": " UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)",
        "PREDICATES": "LearnAndClassifyMultivariateData(x)\nImplementingMachineLearningAlgorithms(x)\nMultivoxelPatternAnalysis(x)\nUsesGeneralizedLinearModel(x)\nUnivariateAnalysis(x)"
    },
    {
        "NLSTATEMENT": "All Leukemia is blood cancer. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Leukemia(x) → ∀x  BloodCancer(x))",
        "CORRECT": "∀x (Leukemia(x) → BloodCancer(x))",
        "PREDICATES": "BloodCancer(x)\nLabTestsOrImagingRequired(x)\nLeukemia(x)\nRareDiseases(x)\nMild(x)\nRequiresAMedicalDiagnosis(x)"
    },
    {
        "NLSTATEMENT": "If something is mild, then no lab tests or imaging is required. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "CORRECT": "∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ",
        "PREDICATES": "BloodCancer(x)\nLabTestsOrImagingRequired(x)\nLeukemia(x)\nRareDiseases(x)\nMild(x)\nRequiresAMedicalDiagnosis(x)"
    },
    {
        "NLSTATEMENT": "All blood cancers are rare diseases.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BloodCancer(x) → RareDiseases(x))",
        "CORRECT": "∀x (BloodCancer(x) → RareDiseases(x))",
        "PREDICATES": "BloodCancer(x)\nLabTestsOrImagingRequired(x)\nLeukemia(x)\nRareDiseases(x)\nMild(x)\nRequiresAMedicalDiagnosis(x)"
    },
    {
        "NLSTATEMENT": "All rare earth metals are essential for electric vehicles.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))",
        "CORRECT": " ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))",
        "PREDICATES": "EssentialForElectricVehicles(x)\nBeUsedForBatteries(x)\nrareEarthMetals(x)\nNotScarce(x)\nPreciousMetals(x)\nRareEarthMetals(x)"
    },
    {
        "NLSTATEMENT": "No precious metals aren't scarce.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PreciousMetals(x) → ¬NotScarce(x))",
        "CORRECT": "∀x (PreciousMetals(x) → ¬NotScarce(x))",
        "PREDICATES": "EssentialForElectricVehicles(x)\nBeUsedForBatteries(x)\nrareEarthMetals(x)\nNotScarce(x)\nPreciousMetals(x)\nRareEarthMetals(x)"
    },
    {
        "NLSTATEMENT": "All rare earth metals are essential for electric vehicles.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))",
        "CORRECT": " ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))",
        "PREDICATES": "EssentialForElectricVehicles(x)\nBeUsedForBatteries(x)\nrareEarthMetals(x)\nNotScarce(x)\nPreciousMetals(x)\nRareEarthMetals(x)"
    },
    {
        "NLSTATEMENT": "If people hire a maid or cleaning service, then they have tidy houses.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (HireCleaning(x) → TidyHouse(x))",
        "CORRECT": "∀x (HireCleaning(x) → TidyHouse(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "If people own at least one pet, then they do not have tidy houses.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "CORRECT": "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "If people grew up with childhood pets, then they own at least one pet.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ChildhoodPet(x) → OwnPet(x))",
        "CORRECT": "∀x (ChildhoodPet(x) → OwnPet(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "If people own at least one pet, then they do not have tidy houses.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "CORRECT": "∀x (OwnPet(x) → ¬TidyHouse(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "If people live in the suburbs, then they have tidy houses.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Suburbs(x) → ChildhoodPet(x))",
        "CORRECT": "∀x (Suburbs(x) → ChildhoodPet(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "The bottle is not upright.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬Upright(bottle)",
        "CORRECT": "¬Upright(bottle)",
        "PREDICATES": "ToppledOver(x)\nUpright(x)"
    },
    {
        "NLSTATEMENT": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Committments(x) → ∀x  Hardworking(x))",
        "CORRECT": "∀x (Committments(x) → Hardworking(x))",
        "PREDICATES": "BusyMorning(x)\nCommittments(x)\nHardworking(x)\nOrganized(x)\nCereal(x)\nYoungChildren(x)"
    },
    {
        "NLSTATEMENT": "All young children below the age of ten eat cereal and milk every day for breakfast.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (YoungChildren(x) → BusyMorning(x))",
        "CORRECT": "∀x (YoungChildren(x) → BusyMorning(x))",
        "PREDICATES": "BusyMorning(x)\nCommittments(x)\nHardworking(x)\nOrganized(x)\nCereal(x)\nYoungChildren(x)"
    },
    {
        "NLSTATEMENT": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(H(ardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john)) ∧ ¬BusyMorning(john))",
        "CORRECT": "(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))",
        "PREDICATES": "BusyMorning(x)\nCommittments(x)\nHardworking(x)\nOrganized(x)\nCereal(x)\nYoungChildren(x)"
    },
    {
        "NLSTATEMENT": "Ableton makes music software.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "MakesMusicSoftware(ableton)",
        "CORRECT": "MakesMusicSoftware(ableton)",
        "PREDICATES": "OfficeIn(x, y)\nIsMultinationalCompany(x)\nSameCountry(x, y)\nMakesMusicSoftware(x)"
    },
    {
        "NLSTATEMENT": "USA and Germany are different countries.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬SameCountry(germany, usa)",
        "CORRECT": "¬SameCountry(germany, usa)",
        "PREDICATES": "OfficeIn(x, y)\nIsMultinationalCompany(x)\nSameCountry(x, y)\nMakesMusicSoftware(x)"
    },
    {
        "NLSTATEMENT": "Any company that has offices in different countries is a multinational company.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀z ∀y ∀x (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))",
        "CORRECT": "∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))",
        "PREDICATES": "OfficeIn(x, y)\nIsMultinationalCompany(x)\nSameCountry(x, y)\nMakesMusicSoftware(x)"
    },
    {
        "NLSTATEMENT": "All nonflying birds in Antarctica are penguins.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NonFlyingBirdAntartica(x) → ∀x  Penguin(x))",
        "CORRECT": "∀x (NonFlyingBirdAntartica(x) → Penguin(x))",
        "PREDICATES": "Swimmer(x)\nPenguin(x)\nNonFlyingBirdAntartica(x)\nGoesUnderwater(x)\nEatsFishCaughtThemselves(x)"
    },
    {
        "NLSTATEMENT": "Every penguin eats fish they catch themselves.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Penguin(x) → ∀x  EatsFishCaughtThemselves(x))",
        "CORRECT": "∀x (Penguin(x) → EatsFishCaughtThemselves(x))",
        "PREDICATES": "Swimmer(x)\nPenguin(x)\nNonFlyingBirdAntartica(x)\nGoesUnderwater(x)\nEatsFishCaughtThemselves(x)"
    },
    {
        "NLSTATEMENT": "All nonflying birds in Antarctica are penguins.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (NonFlyingBirdAntart(ica(x) → Pengu)in(x))",
        "CORRECT": "∀x (NonFlyingBirdAntartica(x) → Penguin(x))",
        "PREDICATES": "Swimmer(x)\nPenguin(x)\nNonFlyingBirdAntartica(x)\nGoesUnderwater(x)\nEatsFishCaughtThemselves(x)"
    },
    {
        "NLSTATEMENT": "All researchers are professors.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Researcher(x) → Professor((x)))",
        "CORRECT": "∀x (Researcher(x) → Professor(x))",
        "PREDICATES": "Researcher(x)\nStudent(x)\nStudy(x)\nTeacher(x)\nProfessor(x)"
    },
    {
        "NLSTATEMENT": "No teachers are students.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Teacher(x) → ¬Student(x))",
        "CORRECT": "∀x (Teacher(x) → ¬Student(x))",
        "PREDICATES": "Researcher(x)\nStudent(x)\nStudy(x)\nTeacher(x)\nProfessor(x)"
    },
    {
        "NLSTATEMENT": "Leon is not studying or a researcher.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬Study(leon) ⊕ Researcher(leon)",
        "CORRECT": "¬Study(leon) ⊕ Researcher(leon)",
        "PREDICATES": "Researcher(x)\nStudent(x)\nStudy(x)\nTeacher(x)\nProfessor(x)"
    },
    {
        "NLSTATEMENT": "Cutmen typically handle swelling, nosebleeds and lacerations. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Cutman(x) → Handle(x, swelling) ∧ Handle(x), nosebleeds) ∧ Handle(x, lacerations))",
        "CORRECT": "∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))",
        "PREDICATES": "Cutman(x)\nTreat(x, y)\nHandle(x, y)\nPrevent(x, y)\nAppear(x, y)"
    },
    {
        "NLSTATEMENT": "Cutmen typically handle swelling, nosebleeds and lacerations. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))",
        "CORRECT": "∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))",
        "PREDICATES": "Cutman(x)\nTreat(x, y)\nHandle(x, y)\nPrevent(x, y)\nAppear(x, y)"
    },
    {
        "NLSTATEMENT": "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))",
        "CORRECT": "∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))",
        "PREDICATES": "Cutman(x)\nTreat(x, y)\nHandle(x, y)\nPrevent(x, y)\nAppear(x, y)"
    },
    {
        "NLSTATEMENT": "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PaintedBymonaLisa, leonardodaVinci ∧ Portrait(monaLisa)",
        "CORRECT": "PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)",
        "PREDICATES": "History(x)\nScientist(x)\nWorldsBestKnown(x)\nPortrait(x)\nStillLife(x)\nPaintedBy(x, y)\nLandscape(x)\nPainter(x)\nAnimal(x)\nPainting(x)"
    },
    {
        "NLSTATEMENT": "Painting genres are history, portrait, animal, landscape, and still life.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Painting(x) → (History(x) ∨ ∀x  Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))",
        "CORRECT": "∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))",
        "PREDICATES": "History(x)\nScientist(x)\nWorldsBestKnown(x)\nPortrait(x)\nStillLife(x)\nPaintedBy(x, y)\nLandscape(x)\nPainter(x)\nAnimal(x)\nPainting(x)"
    },
    {
        "NLSTATEMENT": "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PaintedBy(monaLisa, leonardodaVinci) ∧ PortraitmonaLisa",
        "CORRECT": "PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)",
        "PREDICATES": "History(x)\nScientist(x)\nWorldsBestKnown(x)\nPortrait(x)\nStillLife(x)\nPaintedBy(x, y)\nLandscape(x)\nPainter(x)\nAnimal(x)\nPainting(x)"
    },
    {
        "NLSTATEMENT": "Nadal is a World Tour player or a Grand Slam champion",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "CORRECT": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "All Grand Slam champions are World Tour players.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "CORRECT": "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "Nadal is a World Tour player or a Grand Slam champion",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "CORRECT": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "All Grand Slam champions are World Tour players.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (GrandSlamChampion(x) → ∀x  WorldTourPlayer(x))",
        "CORRECT": "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "No professional tennis umpires are professional tennis players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTen(nisPlaye)r(x))",
        "CORRECT": "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "All Grand Slam umpires are professional tennis umpires.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (GrandSlamUmpire(x) → ∀x  ProfessionalTennisUmpire(x))",
        "CORRECT": "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "Sanctioned buisnesses are limited.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "CORRECT": "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "PREDICATES": "Buisness(x)\nSanctioned(x)\nLimited(x)\nFree(x)"
    },
    {
        "NLSTATEMENT": "Sanctioned buisnesses are limited.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Buisness(x) ∧ Sanctioned(x) → Limitedx)",
        "CORRECT": "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "PREDICATES": "Buisness(x)\nSanctioned(x)\nLimited(x)\nFree(x)"
    },
    {
        "NLSTATEMENT": "Unsanctioned buisnesses are free.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Buisness(x) ∧ ∀x  ¬Sanctioned(x) → Free(x))",
        "CORRECT": "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "PREDICATES": "Buisness(x)\nSanctioned(x)\nLimited(x)\nFree(x)"
    },
    {
        "NLSTATEMENT": "V is depressing. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (V(x) → Depressingx)",
        "CORRECT": "∀x (V(x) → Depressing(x))",
        "PREDICATES": "V(x)\nSad(x)\nDepressing(x)"
    },
    {
        "NLSTATEMENT": "A paalstab is not an axe, but rather a digging shovel.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Paalstab(x) → ¬Axe(x) ∧ ∀x  DiggingShovel(x))",
        "CORRECT": "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))",
        "PREDICATES": "Palstave(x)\nMould(x)\nFoundIn(x, y)\nPopularized(x, y)\nDiggingShovel(x)\nArcheologist(x)\nAxe(x)\nFrom(x, y)\nPaalstab(x)\nCastIn(x, y)"
    },
    {
        "NLSTATEMENT": "Palstaves are a type of early bronze axe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Palstave(x) → Fr(om(x, earlybronzeag)e) ∧ Axe(x))",
        "CORRECT": "∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))",
        "PREDICATES": "Palstave(x)\nMould(x)\nFoundIn(x, y)\nPopularized(x, y)\nDiggingShovel(x)\nArcheologist(x)\nAxe(x)\nFrom(x, y)\nPaalstab(x)\nCastIn(x, y)"
    },
    {
        "NLSTATEMENT": "A paalstab is not an axe, but rather a digging shovel.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))",
        "CORRECT": "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))",
        "PREDICATES": "Palstave(x)\nMould(x)\nFoundIn(x, y)\nPopularized(x, y)\nDiggingShovel(x)\nArcheologist(x)\nAxe(x)\nFrom(x, y)\nPaalstab(x)\nCastIn(x, y)"
    },
    {
        "NLSTATEMENT": "Koei Tecmo is a Japanese video game and anime holding company.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "CORRECT": "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "PREDICATES": "DisbandedIn(x, y)\nDisbanded(x)\nCompany(x)\nJapanese(x)\nSurvived(x)\nVideoGameHoldingCompany(x)\nRenamed(x)\nAnimeHoldingCompany(x)\nHoldingCompany(x)\nHolds(x, y)"
    },
    {
        "NLSTATEMENT": "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "CORRECT": "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "PREDICATES": "DisbandedIn(x, y)\nDisbanded(x)\nCompany(x)\nJapanese(x)\nSurvived(x)\nVideoGameHoldingCompany(x)\nRenamed(x)\nAnimeHoldingCompany(x)\nHoldingCompany(x)\nHolds(x, y)"
    },
    {
        "NLSTATEMENT": "Tecmo was disbanded in Japan, while Koei survived, but was renamed.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Disbanded(tecmo) ∧ DisbandedIn(tec(mo, japan) ∧ Surv)ived(koei) ∧ Renamed(koei)",
        "CORRECT": "Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)",
        "PREDICATES": "DisbandedIn(x, y)\nDisbanded(x)\nCompany(x)\nJapanese(x)\nSurvived(x)\nVideoGameHoldingCompany(x)\nRenamed(x)\nAnimeHoldingCompany(x)\nHoldingCompany(x)\nHolds(x, y)"
    },
    {
        "NLSTATEMENT": "Camera accessory for the system is compatible with that system",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y (Accessory(x, y) → Compatible(x, y))",
        "CORRECT": "∀x ∀y (Accessory(x, y) → Compatible(x, y))",
        "PREDICATES": "Compatible(x, y)\nAccessory(x, y)"
    },
    {
        "NLSTATEMENT": "Only the Playstation Camera is compatible with more than one system.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)",
        "CORRECT": "¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)",
        "PREDICATES": "Compatible(x, y)\nAccessory(x, y)"
    },
    {
        "NLSTATEMENT": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Accessory(pseyetoy, ps2)",
        "CORRECT": "Accessory(pseyetoy, ps2)",
        "PREDICATES": "Compatible(x, y)\nAccessory(x, y)"
    },
    {
        "NLSTATEMENT": "If a European plays football, they play what Americans call soccer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ((FootballPlayer(x) ∧ ∀x  European(x)) → PlaysAmericanSoccer(x))",
        "CORRECT": "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))",
        "PREDICATES": "European(x)\nPlaysAmericanSoccer(x)\nFootballPlayer(x)"
    },
    {
        "NLSTATEMENT": "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (DevelopedByParadox(x) → SoldMillion(x))",
        "CORRECT": "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "PREDICATES": "SoldMillion(x)\nPublishedBefore2010(x)\nPopular(x)\nBestSeller(x)\nDevelopedByParadox(x)\nSupportLinuxSystem(x)"
    },
    {
        "NLSTATEMENT": "All Games developed by Paradox Development Studio sold more than 1 million copies. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (DevelopedByParadox(x) → ∀x  SoldMillion(x))",
        "CORRECT": "∀x (DevelopedByParadox(x) → SoldMillion(x))",
        "PREDICATES": "SoldMillion(x)\nPublishedBefore2010(x)\nPopular(x)\nBestSeller(x)\nDevelopedByParadox(x)\nSupportLinuxSystem(x)"
    },
    {
        "NLSTATEMENT": "FIFA22 neither supports the Linux OS system nor is it popular among young people.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))",
        "CORRECT": "¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))",
        "PREDICATES": "SoldMillion(x)\nPublishedBefore2010(x)\nPopular(x)\nBestSeller(x)\nDevelopedByParadox(x)\nSupportLinuxSystem(x)"
    },
    {
        "NLSTATEMENT": "All people from China speak Chinese.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (From(x, y) ∧ China(y) → Speak(x, chinese))",
        "CORRECT": "∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))",
        "PREDICATES": "India(x)\nSpeak(x, y)\nChina(x)\nFrom(x, y)\nBRICS(x)\nEmergingEconomy(x)"
    },
    {
        "NLSTATEMENT": "There is an Indian.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x ∃y (From(x, y) ∧ India(y))",
        "CORRECT": "∃x ∃y (From(x, y) ∧ India(y))",
        "PREDICATES": "India(x)\nSpeak(x, y)\nChina(x)\nFrom(x, y)\nBRICS(x)\nEmergingEconomy(x)"
    },
    {
        "NLSTATEMENT": "India is one of BRICS and its economy is emerging.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))",
        "CORRECT": "∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))",
        "PREDICATES": "India(x)\nSpeak(x, y)\nChina(x)\nFrom(x, y)\nBRICS(x)\nEmergingEconomy(x)"
    },
    {
        "NLSTATEMENT": "Daveed Diggs played Thomas Jefferson.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "P(layed(daveedDiggs, thomasJefferso)n)",
        "CORRECT": "Played(daveedDiggs, thomasJefferson)",
        "PREDICATES": "Film(x)\nPlayed(x, y)\nPlayedIn(x, y)\nPlayedTwoRoles(x)\nWonBestActorAward(x)\nMusical(x)\nActor(x)\nFilmProducer(x)"
    },
    {
        "NLSTATEMENT": "Daveed Diggs played Thomas Jefferson.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PlayeddaveedDiggs, thomasJefferson",
        "CORRECT": "Played(daveedDiggs, thomasJefferson)",
        "PREDICATES": "Film(x)\nPlayed(x, y)\nPlayedIn(x, y)\nPlayedTwoRoles(x)\nWonBestActorAward(x)\nMusical(x)\nActor(x)\nFilmProducer(x)"
    },
    {
        "NLSTATEMENT": "Musicals are not films.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Musical(x) → ¬Film(x))",
        "CORRECT": "∀x (Musical(x) → ¬Film(x))",
        "PREDICATES": "Film(x)\nPlayed(x, y)\nPlayedIn(x, y)\nPlayedTwoRoles(x)\nWonBestActorAward(x)\nMusical(x)\nActor(x)\nFilmProducer(x)"
    },
    {
        "NLSTATEMENT": "A football player in the Polish First Division has scored over 180 goals. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))",
        "CORRECT": "∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))",
        "PREDICATES": "FootballPlayer(x)\nNamedAfter(x, y)\nIn(x, y)\nPolishFootballPlayer(x)\nFrom(x, y)\nScoredMoreThan180Goals(x)"
    },
    {
        "NLSTATEMENT": "A football player in the Polish First Division has scored over 180 goals. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (In(x, polishfirstd(ivision) ∧ ScoredMoreThan180)Goals(x))",
        "CORRECT": "∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))",
        "PREDICATES": "FootballPlayer(x)\nNamedAfter(x, y)\nIn(x, y)\nPolishFootballPlayer(x)\nFrom(x, y)\nScoredMoreThan180Goals(x)"
    },
    {
        "NLSTATEMENT": "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)",
        "CORRECT": "PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)",
        "PREDICATES": "Challenger(x)\nDefeated(x, y)\nElected(x)\nYear(x)\nDemocraticParty(x)\nPhiladephiaCouncil(x)\nRunFor(x)"
    },
    {
        "NLSTATEMENT": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Year(y1987) → PhiladephiaCouncil(annJLan(d) ∧ RunFor(annJLand) ∧ Defeated()annJLand, nutter)",
        "CORRECT": "Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)",
        "PREDICATES": "Challenger(x)\nDefeated(x, y)\nElected(x)\nYear(x)\nDemocraticParty(x)\nPhiladephiaCouncil(x)\nRunFor(x)"
    },
    {
        "NLSTATEMENT": "Ann J. Land ran unopposed for the Philadephia City Council in 1980.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)",
        "CORRECT": "Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)",
        "PREDICATES": "Challenger(x)\nDefeated(x, y)\nElected(x)\nYear(x)\nDemocraticParty(x)\nPhiladephiaCouncil(x)\nRunFor(x)"
    },
    {
        "NLSTATEMENT": "Aberdeen won the cup in the 2013 final.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WonCup(aberdeen, twentythirteen)",
        "CORRECT": "WonCup(aberdeen, twentythirteen)",
        "PREDICATES": "Different(x, y)\nWonCup(x, y)"
    },
    {
        "NLSTATEMENT": "Aberdeen and Rangers are different teams.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)",
        "CORRECT": "Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)",
        "PREDICATES": "Different(x, y)\nWonCup(x, y)"
    },
    {
        "NLSTATEMENT": "Different teams cannot win the same cup in a given year's final.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y ∀z (Different(x, y)  ∧ WonCupx, z)  → ¬WonCup(y, z)",
        "CORRECT": "∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))",
        "PREDICATES": "Different(x, y)\nWonCup(x, y)"
    },
    {
        "NLSTATEMENT": "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Manhattan(x) ∧ ∃x  Working(x))",
        "CORRECT": "∃x (Manhattan(x) ∧ Working(x))",
        "PREDICATES": "Car(x)\nWorking(x)\nManhattan(x)\nChild(x)\nPets(x)"
    },
    {
        "NLSTATEMENT": "All young working professionals who have regular 9-5 jobs also have pets.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Working(x) → Pets(x))",
        "CORRECT": "∀x (Working(x) → Pets(x))",
        "PREDICATES": "Car(x)\nWorking(x)\nManhattan(x)\nChild(x)\nPets(x)"
    },
    {
        "NLSTATEMENT": "People who do not have at least one child are people who own a sports car.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Child(x) → ∀x  ¬Car(x))",
        "CORRECT": "∀x (Child(x) → ¬Car(x))",
        "PREDICATES": "Car(x)\nWorking(x)\nManhattan(x)\nChild(x)\nPets(x)"
    },
    {
        "NLSTATEMENT": "All event-related designs are brain image acquisition.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "CORRECT": "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "All brain image acquisition is preceded by data processing.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "CORRECT": "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "Nothing preceded by data processing acquires data.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))",
        "CORRECT": "∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "All brain image acquisition is preceded by data processing.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BrainImageAcquisition(x) → ∀x  PrecededByDataProcessing(x))",
        "CORRECT": "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "All ships involved in WWII are currently decommissioned or in a museum.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (InWWII(x) → (Decommissioned(x) ∨ ∀x  InMuseum(x)))",
        "CORRECT": "∀x (InWWII(x) → (Decommissioned(x) ∨ InMuseum(x)))",
        "PREDICATES": "USNavyShip(x)\nDecommissioned(x)\nInMuseum(x)\nInWWII(x)"
    },
    {
        "NLSTATEMENT": "If chopsticks are made from metals, then they are not made from plastics. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (MadeFromMetals(x) → ∀x  ¬MadeFromPlastics(x))",
        "CORRECT": "∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))",
        "PREDICATES": "MadeFromMetals(x)\nEcoFriendly(x)\nReusable(x)\nMadeFromTrees(x)\nDisposableChopsticks(x)\nMadeFromPlastics(x)"
    },
    {
        "NLSTATEMENT": "Either disposable chopsticks or reusable chopsticks. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ",
        "CORRECT": "∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ",
        "PREDICATES": "MadeFromMetals(x)\nEcoFriendly(x)\nReusable(x)\nMadeFromTrees(x)\nDisposableChopsticks(x)\nMadeFromPlastics(x)"
    },
    {
        "NLSTATEMENT": "If chopsticks are made from metals, then they are not made from plastics. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))",
        "CORRECT": "∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))",
        "PREDICATES": "MadeFromMetals(x)\nEcoFriendly(x)\nReusable(x)\nMadeFromTrees(x)\nDisposableChopsticks(x)\nMadeFromPlastics(x)"
    },
    {
        "NLSTATEMENT": "If something is a sloth, then it is lazy.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Sloth(x) → Lazy(x))",
        "CORRECT": "∀x (Sloth(x) → Lazy(x))",
        "PREDICATES": "Sloth(x)\nAnimal(x)\nEnergetic(x)\nLazy(x)\nUnproductive(x)"
    },
    {
        "NLSTATEMENT": "Sid is not either an energetic person or a sloth.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬Energetic(sid) ∨ Sloth(sid)",
        "CORRECT": "¬Energetic(sid) ∨ Sloth(sid)",
        "PREDICATES": "Sloth(x)\nAnimal(x)\nEnergetic(x)\nLazy(x)\nUnproductive(x)"
    },
    {
        "NLSTATEMENT": "Anything that is lazy is unproductive.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Lazy(x) → Unproductive(x))",
        "CORRECT": "∀x (Lazy(x) → Unproductive(x))",
        "PREDICATES": "Sloth(x)\nAnimal(x)\nEnergetic(x)\nLazy(x)\nUnproductive(x)"
    },
    {
        "NLSTATEMENT": "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y))",
        "CORRECT": "∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y))",
        "PREDICATES": "European(x)\nHigherRank(x, y)\nSoccerClub(x)\nAttend(x, y)"
    },
    {
        "NLSTATEMENT": "Cris Carter had 13 touchdown receptions.",
        "ERRORTYPE": "no_error",
        "SKETCH": "TouchDownReceptionTime(cris_Carter, t13)",
        "CORRECT": "TouchDownReceptionTime(cris_Carter, t13)",
        "PREDICATES": "NFLTeamYear(x, y)\nPlayFor(x, y)\nCoach(x, y)\nPosition(x, y)\nIsFootballCoach(x)\nPlayInNFL(x)\nTouchDownReceptionTime(x, y)\nIsFootballClub(x)\nInTeam(x, y)"
    },
    {
        "NLSTATEMENT": "Minnesota Vikings was in the National Football League in 1997.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "NFLTeamYear(minnesota_Vikings, y1997)",
        "CORRECT": "NFLTeamYear(minnesota_Vikings, y1997)",
        "PREDICATES": "NFLTeamYear(x, y)\nPlayFor(x, y)\nCoach(x, y)\nPosition(x, y)\nIsFootballCoach(x)\nPlayInNFL(x)\nTouchDownReceptionTime(x, y)\nIsFootballClub(x)\nInTeam(x, y)"
    },
    {
        "NLSTATEMENT": "Minnesota Vikings is a football club.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IsFootballClub(minnesota_Vikings)",
        "CORRECT": "IsFootballClub(minnesota_Vikings)",
        "PREDICATES": "NFLTeamYear(x, y)\nPlayFor(x, y)\nCoach(x, y)\nPosition(x, y)\nIsFootballCoach(x)\nPlayInNFL(x)\nTouchDownReceptionTime(x, y)\nIsFootballClub(x)\nInTeam(x, y)"
    },
    {
        "NLSTATEMENT": "Nothing that barks is lovely. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Bark(x) → ¬Lovely(x))",
        "CORRECT": "∀x (Bark(x) → ¬Lovely(x))",
        "PREDICATES": "Dog(x)\nGhost(x)\nCat(x)\nCute(x)\nLovely(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "Ghosts do not exist.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (¬Ghostx)",
        "CORRECT": "∀x (¬Ghost(x))",
        "PREDICATES": "Dog(x)\nGhost(x)\nCat(x)\nCute(x)\nLovely(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "If something is a dog, then it barks.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Dog(x) → Bark(x))",
        "CORRECT": "∀x (Dog(x) → Bark(x))",
        "PREDICATES": "Dog(x)\nGhost(x)\nCat(x)\nCute(x)\nLovely(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "If place A is northwest of place B, then place B is southeast of place A.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "∀x  (NorthwestOf(x, y) → SoutheastOf(y, x))",
        "CORRECT": "∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))",
        "PREDICATES": "LargeComplex(x)\nIn(x, y)\nNorthwestOf(x, y)\nSoutheastOf(x, y)\nGeologicalStructures(x)\nOffshore(x)"
    },
    {
        "NLSTATEMENT": "If place A is northwest of place B, then place B is southeast of place A.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (NorthwestOf(x, y) → SoutheastOf(y, x))",
        "CORRECT": "∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))",
        "PREDICATES": "LargeComplex(x)\nIn(x, y)\nNorthwestOf(x, y)\nSoutheastOf(x, y)\nGeologicalStructures(x)\nOffshore(x)"
    },
    {
        "NLSTATEMENT": "Baku is northwest of Shafaq-Asiman.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "NorthwestOf(baku, shafaq-asiman)",
        "CORRECT": "NorthwestOf(baku, shafaq-asiman)",
        "PREDICATES": "LargeComplex(x)\nIn(x, y)\nNorthwestOf(x, y)\nSoutheastOf(x, y)\nGeologicalStructures(x)\nOffshore(x)"
    },
    {
        "NLSTATEMENT": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)",
        "CORRECT": "Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Selymbria is a colony of the city-state Megara.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Colony(selymbia, megara) ∧( CityState(mega)ra)",
        "CORRECT": "Colony(selymbia, megara) ∧ CityState(megara)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Herodicus was born in the city of Selymbria.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Born(herodicus, selymbia) ∧ City(selymbia)",
        "CORRECT": "Born(herodicus, selymbia) ∧ City(selymbia)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Herodicus was born in the city of Selymbria.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Born(herodicus, selymbia) ∧ City(selymbia)",
        "CORRECT": "Born(herodicus, selymbia) ∧ City(selymbia)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Selymbria is a colony of the city-state Megara.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Colony(selymbia, meg(ara) ∧ CityState()megara)",
        "CORRECT": "Colony(selymbia, megara) ∧ CityState(megara)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "No kid loves the Opera.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Kid(x) → ¬OperaLove(r(x)))",
        "CORRECT": "∀x (Kid(x) → ¬OperaLover(x))",
        "PREDICATES": "Kid(x)\nScientist(x)\nOperaLover(x)\nAdult(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Some students are kids.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Student(x) ∧ Kid(x))",
        "CORRECT": "∃x (Student(x) ∧ Kid(x))",
        "PREDICATES": "Kid(x)\nScientist(x)\nOperaLover(x)\nAdult(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "If someone is a scientist, then they are an adult.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Scientist(x) → Ad(ult()x))",
        "CORRECT": "∀x (Scientist(x) → Adult(x))",
        "PREDICATES": "Kid(x)\nScientist(x)\nOperaLover(x)\nAdult(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Some football referees become referee observers.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (FootballReferee(x) ∧ RefereeObserver(x))",
        "CORRECT": "∃x (FootballReferee(x) ∧ RefereeObserver(x))",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "After being injured, Brian Winter retired in 2012.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Injured(brianwinter) ∧ Retired(brianwinter)",
        "CORRECT": "Injured(brianwinter) ∧ Retired(brianwinter)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "Brian Winter was appointed as a referee observer after his retirement.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "RefereeObserver(brianwinter)",
        "CORRECT": "RefereeObserver(brianwinter)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)",
        "CORRECT": "Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "People are either interested in puzzles or bad at chess.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Puzzles(x) ∨ BadChess(x))",
        "CORRECT": "∀x (Puzzles(x) ∨ BadChess(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(BadChess(erica) ∨ Crea(tive(erica)) → (Plans(erica) ⊕ Creati)ve(erica))",
        "CORRECT": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "A person is either a planner or a creative person.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Plansx) ∨ Creative(x)",
        "CORRECT": "∀x (Plans(x) ∨ Creative(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "People are either interested in puzzles or bad at chess.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Puzzles(x) ∨ BadChess(x))",
        "CORRECT": "∀x (Puzzles(x) ∨ BadChess(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "People are either interested in puzzles or bad at chess.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Puzzles(x) ∨ BadChess(x))",
        "CORRECT": "∀x (Puzzles(x) ∨ BadChess(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(BadChess(erica) ∨ Creative(erica)) → Plans(erica ⊕ Creative(erica))",
        "CORRECT": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If a person is bad at chess, then they don't play a lot of chess.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "CORRECT": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If a person is bad at chess, then they don't play a lot of chess.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "CORRECT": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If a person is bad at chess, then they don't play a lot of chess.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "CORRECT": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "CORRECT": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "Soccer players have a right foot and a left foot.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "CORRECT": "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "PREDICATES": "Efficient(x, y)\nSoccerPlayer(x)\nHasRightFoot(x)\nScoreManyGoals(x, y)\nTop(x)\nHasLeftFoot(x)"
    },
    {
        "NLSTATEMENT": "Cristiano Ronaldo is a soccer player.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SoccerPlayer(ronaldo)",
        "CORRECT": "SoccerPlayer(ronaldo)",
        "PREDICATES": "Efficient(x, y)\nSoccerPlayer(x)\nHasRightFoot(x)\nScoreManyGoals(x, y)\nTop(x)\nHasLeftFoot(x)"
    },
    {
        "NLSTATEMENT": "The National Lobster Hatchery is a hatchery located in Padstow England.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)",
        "CORRECT": "Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)",
        "PREDICATES": "Hatchery(x)\nOpenToVisitors(x)\nLocatedIn(x, y)\nReleasesAnimalsToWild(x)\nForProfit(x)\nForConservation(x)"
    },
    {
        "NLSTATEMENT": "The National Lobster Hatchery is open to visitors.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "OpenToVisitorsnationallobsterhatchery",
        "CORRECT": "OpenToVisitors(nationallobsterhatchery)",
        "PREDICATES": "Hatchery(x)\nOpenToVisitors(x)\nLocatedIn(x, y)\nReleasesAnimalsToWild(x)\nForProfit(x)\nForConservation(x)"
    },
    {
        "NLSTATEMENT": "If a hatchery is for conservation, it might release animals into the wild.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))",
        "CORRECT": "∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))",
        "PREDICATES": "Hatchery(x)\nOpenToVisitors(x)\nLocatedIn(x, y)\nReleasesAnimalsToWild(x)\nForProfit(x)\nForConservation(x)"
    },
    {
        "NLSTATEMENT": "The Premier Division in 2009–10 was won by the same team that won in 2005-06. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))",
        "CORRECT": "∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))",
        "PREDICATES": "Welsh(x)\nBasedInPonciau(x)\nWonPremierDivisionDuring(x, y)\nFootballClub(x)\nPromoted(x)\nRhosaelwydfc(x)"
    },
    {
        "NLSTATEMENT": "The Premier Division was won in 2005–06 by a team from Ponciau. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (BasedInPonciau(x) ∧ WonPremierDivisionDur(ing(x,) y2005))",
        "CORRECT": "∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))",
        "PREDICATES": "Welsh(x)\nBasedInPonciau(x)\nWonPremierDivisionDuring(x, y)\nFootballClub(x)\nPromoted(x)\nRhosaelwydfc(x)"
    },
    {
        "NLSTATEMENT": "PyTorch is either Windows and software, or neither Windows nor software.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))",
        "CORRECT": "(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "All OS are software.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (OS(x) → Software(x))",
        "CORRECT": "∀x (OS(x) → Software(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "All Mac are OS.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Mac(x) → OS(x))",
        "CORRECT": "∀x (Mac(x) → OS(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "All software has code.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Software(x) → Code(x))",
        "CORRECT": "∀x (Software(x) → Code(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "Roads made of concrete last longer than roads made with asphalt.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (Road(x) ∧ ∀x  MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))",
        "CORRECT": "∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))",
        "PREDICATES": "MadeOfAsphalt(x)\nMadeOfConcrete(x)\nPrefers(x, y)\nRoad(x)\nLastLonger(x, y)\nSmoother(x, y)"
    },
    {
        "NLSTATEMENT": "Roads made of asphalt are smoother than roads made of concrete.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "CORRECT": "∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "PREDICATES": "MadeOfAsphalt(x)\nMadeOfConcrete(x)\nPrefers(x, y)\nRoad(x)\nLastLonger(x, y)\nSmoother(x, y)"
    },
    {
        "NLSTATEMENT": "Roads made of concrete last longer than roads made with asphalt.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))",
        "CORRECT": "∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))",
        "PREDICATES": "MadeOfAsphalt(x)\nMadeOfConcrete(x)\nPrefers(x, y)\nRoad(x)\nLastLonger(x, y)\nSmoother(x, y)"
    },
    {
        "NLSTATEMENT": "Camp Davern was established in the year 1946.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "EstablishedIn(campdavern, year1946)",
        "CORRECT": "EstablishedIn(campdavern, year1946)",
        "PREDICATES": "TraditionalSummerCamp(x)\nOperatedByYMCAUntil(x, y)\nOneOf(x, y)\nEstablishedIn(x, y)\nForBoysAndGirls(x)"
    },
    {
        "NLSTATEMENT": "Camp Davern is one of Ontario's oldest summer camps.",
        "ERRORTYPE": "no_error",
        "SKETCH": "OneOf(campdavern, ontariosoldestsummercamps)",
        "CORRECT": "OneOf(campdavern, ontariosoldestsummercamps)",
        "PREDICATES": "TraditionalSummerCamp(x)\nOperatedByYMCAUntil(x, y)\nOneOf(x, y)\nEstablishedIn(x, y)\nForBoysAndGirls(x)"
    },
    {
        "NLSTATEMENT": "Camp Davern was established in the year 1946.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(EstablishedIn(c)ampdavern, year1946)",
        "CORRECT": "EstablishedIn(campdavern, year1946)",
        "PREDICATES": "TraditionalSummerCamp(x)\nOperatedByYMCAUntil(x, y)\nOneOf(x, y)\nEstablishedIn(x, y)\nForBoysAndGirls(x)"
    },
    {
        "NLSTATEMENT": "People either work in the entertainment industry or are highly acclaimed in their profession.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Entertainment(x) ∨ Acclaimed(x))",
        "CORRECT": "∀x (Entertainment(x) ∨ Acclaimed(x))",
        "PREDICATES": "PublishJournals(x)\nEntertainment(x)\nNovelist(x)\nGlowing(x)\nAcclaimed(x)\nTenured(x)"
    },
    {
        "NLSTATEMENT": "If people publish journals, then they do not work in the entertainment industry.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PublishJournals(x) → ¬Entertainment(x))",
        "CORRECT": "∀x (PublishJournals(x) → ¬Entertainment(x))",
        "PREDICATES": "PublishJournals(x)\nEntertainment(x)\nNovelist(x)\nGlowing(x)\nAcclaimed(x)\nTenured(x)"
    },
    {
        "NLSTATEMENT": "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Acclaimed(x) → ∀x  Tenured(x))",
        "CORRECT": "∀x (Acclaimed(x) → Tenured(x))",
        "PREDICATES": "PublishJournals(x)\nEntertainment(x)\nNovelist(x)\nGlowing(x)\nAcclaimed(x)\nTenured(x)"
    },
    {
        "NLSTATEMENT": "Attolia and Sounis are countries near the Mede Empire.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)",
        "CORRECT": "Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "The fictional Mede Empire is where Thick as Thieves is set.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Fictional(medeempire) ∧ SetIn(thickastheives, medeempire)",
        "CORRECT": "Fictional(medeempire) ∧ SetIn(thickastheives, medeempire)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "Attolia and Sounis are countries near the Mede Empire.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)",
        "CORRECT": "Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "Thick as Thieves was sold both as a hardcover and an e-book.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)",
        "CORRECT": "SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "Neofonie is a German producer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "German(neofonie) ∧ Producer(neofonie)",
        "CORRECT": "German(neofonie) ∧ Producer(neofonie)",
        "PREDICATES": "German(x)\nAnnounce(x, y)\nSpeak(x, y)\nWeTab(x)\nMeeGoBased(x)\nTabletComputer(x)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Neofonie is a German producer.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "German(neofonie) ∧ Producer(neofonie)",
        "CORRECT": "German(neofonie) ∧ Producer(neofonie)",
        "PREDICATES": "German(x)\nAnnounce(x, y)\nSpeak(x, y)\nWeTab(x)\nMeeGoBased(x)\nTabletComputer(x)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "All employees working in software engineering are from China. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (SoftwareEngineering(x) → ∀x  FromChina(x))",
        "CORRECT": "∀x (SoftwareEngineering(x) → FromChina(x))",
        "PREDICATES": "WorkInCompany(x)\nFromChina(x)\nSoftwareEngineering(x)\nBusinessAnalysis(x)\nGoodAtMath(x)"
    },
    {
        "NLSTATEMENT": "All employees working in business analysis are working in this company. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BusinessAnalysis(x) → WorkInCompany(x))",
        "CORRECT": "∀x (BusinessAnalysis(x) → WorkInCompany(x))",
        "PREDICATES": "WorkInCompany(x)\nFromChina(x)\nSoftwareEngineering(x)\nBusinessAnalysis(x)\nGoodAtMath(x)"
    },
    {
        "NLSTATEMENT": "All employees working in software engineering are from China. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SoftwareEngineering(x) → FromChina(x))",
        "CORRECT": "∀x (SoftwareEngineering(x) → FromChina(x))",
        "PREDICATES": "WorkInCompany(x)\nFromChina(x)\nSoftwareEngineering(x)\nBusinessAnalysis(x)\nGoodAtMath(x)"
    },
    {
        "NLSTATEMENT": "At the end of the party, strawberries had the lowest remaining weight.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LowestAmount(strawberries)",
        "CORRECT": "LowestAmount(strawberries)",
        "PREDICATES": "Lower(x, y)\nParty(x)\nEat(x, y)\nMostPopular(x)\nLowestAmount(x)\nSameWeight(x)"
    },
    {
        "NLSTATEMENT": "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (LowestAmount(x) → MostPopular(x)) ",
        "CORRECT": "∀x (LowestAmount(x) → MostPopular(x)) ",
        "PREDICATES": "Lower(x, y)\nParty(x)\nEat(x, y)\nMostPopular(x)\nLowestAmount(x)\nSameWeight(x)"
    },
    {
        "NLSTATEMENT": "Benjamin only ate oranges and grapes at the party.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eatblueberry, benjamin ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)",
        "CORRECT": "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)",
        "PREDICATES": "Lower(x, y)\nParty(x)\nEat(x, y)\nMostPopular(x)\nLowestAmount(x)\nSameWeight(x)"
    },
    {
        "NLSTATEMENT": "Students either attend the conference in person or remotely. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Attend(x) → ∀x  InPerson(x) ⊕ Remotely(x))",
        "CORRECT": "∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))",
        "PREDICATES": "Registered(x)\nRemotely(x)\nChina(x)\nInPerson(x)\nAttend(x)"
    },
    {
        "NLSTATEMENT": "Jack attends the conference and he is a student from China.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "China(jack) ∧ Attend(jack)",
        "CORRECT": "China(jack) ∧ Attend(jack)",
        "PREDICATES": "Registered(x)\nRemotely(x)\nChina(x)\nInPerson(x)\nAttend(x)"
    },
    {
        "NLSTATEMENT": "Students either attend the conference in person or remotely. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Attend(x) → InPerson(x) ⊕ Remotelyx)",
        "CORRECT": "∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))",
        "PREDICATES": "Registered(x)\nRemotely(x)\nChina(x)\nInPerson(x)\nAttend(x)"
    },
    {
        "NLSTATEMENT": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))",
        "CORRECT": "∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))",
        "PREDICATES": "PoliticalStrategist(x)\nEmigratedTo(x, y)\nZionistLeader(x)\nElectedTo(x, y)\nIsraeliCitizen(x)\nIsraeli(x)\nParentOf(x, y)\nZionstLeader(x)\nBornInIsrael(x)"
    },
    {
        "NLSTATEMENT": "David Ha'ivri is a political strategist. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "P(oliticalStrat)egist(davidhaivri)",
        "CORRECT": "PoliticalStrategist(davidhaivri)",
        "PREDICATES": "PoliticalStrategist(x)\nEmigratedTo(x, y)\nZionistLeader(x)\nElectedTo(x, y)\nIsraeliCitizen(x)\nIsraeli(x)\nParentOf(x, y)\nZionstLeader(x)\nBornInIsrael(x)"
    },
    {
        "NLSTATEMENT": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))",
        "CORRECT": "∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))",
        "PREDICATES": "PoliticalStrategist(x)\nEmigratedTo(x, y)\nZionistLeader(x)\nElectedTo(x, y)\nIsraeliCitizen(x)\nIsraeli(x)\nParentOf(x, y)\nZionstLeader(x)\nBornInIsrael(x)"
    },
    {
        "NLSTATEMENT": "Flu and influenza are the same disease.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Have(x, flu) ↔ Have(x, influenza))",
        "CORRECT": "∀x (Have(x, flu) ↔ Have(x, influenza))",
        "PREDICATES": "Have(x, y)"
    },
    {
        "NLSTATEMENT": "Any lawyer is familiar with laws.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Lawyer(x → FamiliarWithLaws(x))",
        "CORRECT": "∀x (Lawyer(x) → FamiliarWithLaws(x))",
        "PREDICATES": "British(x)\nFamiliarWithLaws(x)\nLawyer(x)\nWhig(x)\nPolitician(x)\nSpeakFrench(x)\nSatInHouseOfCommons(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "James Cocks was a British lawyer.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Bri(tish(james) ∧ Lawyer(jam)es)",
        "CORRECT": "British(james) ∧ Lawyer(james)",
        "PREDICATES": "British(x)\nFamiliarWithLaws(x)\nLawyer(x)\nWhig(x)\nPolitician(x)\nSpeakFrench(x)\nSatInHouseOfCommons(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "James Cocks was a British lawyer.",
        "ERRORTYPE": "no_error",
        "SKETCH": "British(james) ∧ Lawyer(james)",
        "CORRECT": "British(james) ∧ Lawyer(james)",
        "PREDICATES": "British(x)\nFamiliarWithLaws(x)\nLawyer(x)\nWhig(x)\nPolitician(x)\nSpeakFrench(x)\nSatInHouseOfCommons(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Science fiction novels are not about mythological creatures",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (ScienceFictionx) ∧ Mythological(y ∧ Creature(y) → ¬About(x, y))",
        "CORRECT": "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "PREDICATES": "ScienceFiction(x)\nMythological(x)\nCreature(x)\nAbout(x, y)\nFantasy(x)\nNovel(x)"
    },
    {
        "NLSTATEMENT": "Science fiction novels are not about mythological creatures",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (ScienceFiction(x) ∧ ∀x  Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "CORRECT": "∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))",
        "PREDICATES": "ScienceFiction(x)\nMythological(x)\nCreature(x)\nAbout(x, y)\nFantasy(x)\nNovel(x)"
    },
    {
        "NLSTATEMENT": "Beasts of Prey Is about a creature known as the Shetani.",
        "ERRORTYPE": "no_error",
        "SKETCH": "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "CORRECT": "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "PREDICATES": "ScienceFiction(x)\nMythological(x)\nCreature(x)\nAbout(x, y)\nFantasy(x)\nNovel(x)"
    },
    {
        "NLSTATEMENT": "Jack Odell is an English toy inventor.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "English(jackOdell) ∧ ToyInvertor(jackOdell)",
        "CORRECT": "English(jackOdell) ∧ ToyInvertor(jackOdell)",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Odell(x) ∧ SpelledODell(x))",
        "CORRECT": "∃x (Odell(x) ∧ SpelledODell(x))",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Odell is an English surname originating in Odell, Bedfordshire.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Odell(x) → Surname(()x))",
        "CORRECT": "∀x (Odell(x) → Surname(x))",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x Odell(x ∧ SpelledODell(x))",
        "CORRECT": "∃x (Odell(x) ∧ SpelledODell(x))",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Mary is late for work.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LateForWork(mary)",
        "CORRECT": "LateForWork(mary)",
        "PREDICATES": "Car(x)\nTrain(x)\nLateForWork(x)\nMeetJam(x)\nLoseTime(x)"
    },
    {
        "NLSTATEMENT": "If you go somewhere by train, you will not lose time.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Train(x) → ¬LoseTime(x))",
        "CORRECT": "∀x (Train(x) → ¬LoseTime(x))",
        "PREDICATES": "Car(x)\nTrain(x)\nLateForWork(x)\nMeetJam(x)\nLoseTime(x)"
    },
    {
        "NLSTATEMENT": "If you lose time, you will be late for work.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (LoseTime(x) ↔ ∀x  LateForWork(x))",
        "CORRECT": "∀x (LoseTime(x) ↔ LateForWork(x))",
        "PREDICATES": "Car(x)\nTrain(x)\nLateForWork(x)\nMeetJam(x)\nLoseTime(x)"
    },
    {
        "NLSTATEMENT": "If a person is uncomfortable, the person is unhappy.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Uncomfortable(x) → ¬Happy(x))",
        "CORRECT": "∀x (Uncomfortable(x) → ¬Happy(x))",
        "PREDICATES": "Hungry(x)\nUncomfortable(x)\nHappy(x)"
    },
    {
        "NLSTATEMENT": "Mary is not a lawyer or a tipped employee.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Lawyermary ⊕ Tipped(mary)",
        "CORRECT": "¬Lawyer(mary) ⊕ Tipped(mary)",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (WhiteCo(llar(x) → GetMinWage(x)))",
        "CORRECT": "∀x (WhiteCollar(x) → GetMinWage(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "Tipped employees do not get a guaranteed minimum wage.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Tippedx) → ¬GetMinWage(x)",
        "CORRECT": "∀x (Tipped(x) → ¬GetMinWage(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "Mary is not a lawyer or a tipped employee.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Lawyer(mary) ⊕ Tipped(mary)",
        "CORRECT": "¬Lawyer(mary) ⊕ Tipped(mary)",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "All lawyers are white-collar workers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Lawyer(x) → WhiteCollar(x))",
        "CORRECT": "∀x (Lawyer(x) → WhiteCollar(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "All lawyers are white-collar workers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Lawyer(x) → WhiteCollar(x))",
        "CORRECT": "∀x (Lawyer(x) → WhiteCollar(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "People born and living in New York City are New Yorkers.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BornIn(x, newyorkcity) ∧ ∀x  LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "CORRECT": "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "PREDICATES": "IsNewYorker(x)\nIsChessPlayer(x)\nBornIn(x, y)\nIsChestPlayer(x)\nIsGrandMaster(x)\nLivesIn(x, y)"
    },
    {
        "NLSTATEMENT": "Asa Hoffmann was born in New York City.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "BornIn(asaHoffmann, newyorkcity)",
        "CORRECT": "BornIn(asaHoffmann, newyorkcity)",
        "PREDICATES": "IsNewYorker(x)\nIsChessPlayer(x)\nBornIn(x, y)\nIsChestPlayer(x)\nIsGrandMaster(x)\nLivesIn(x, y)"
    },
    {
        "NLSTATEMENT": "Some chess players are grandmasters.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (IsChestPlayer(x) ∧ IsGra(ndMa)ster(x))",
        "CORRECT": "∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))",
        "PREDICATES": "IsNewYorker(x)\nIsChessPlayer(x)\nBornIn(x, y)\nIsChestPlayer(x)\nIsGrandMaster(x)\nLivesIn(x, y)"
    },
    {
        "NLSTATEMENT": "Philip closed his bank account.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "CloseBankAccount(philip)",
        "CORRECT": "CloseBankAccount(philip)",
        "PREDICATES": "RequestDocuments(x)\nGetVisa(x)\nCloseBankAccount(x)\nFinancialGuarantees(x)\nApplyVisa(x)"
    },
    {
        "NLSTATEMENT": "Do not close your bank account if you request documents from the bank.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (RequestDocuments(x) → ¬CloseBankAccount(x))",
        "CORRECT": "∀x (RequestDocuments(x) → ¬CloseBankAccount(x))",
        "PREDICATES": "RequestDocuments(x)\nGetVisa(x)\nCloseBankAccount(x)\nFinancialGuarantees(x)\nApplyVisa(x)"
    },
    {
        "NLSTATEMENT": "Some of those who apply for a Schengen Visa get it.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (ApplyVisa(x) → GetVisax)",
        "CORRECT": "∃x (ApplyVisa(x) → GetVisa(x))",
        "PREDICATES": "RequestDocuments(x)\nGetVisa(x)\nCloseBankAccount(x)\nFinancialGuarantees(x)\nApplyVisa(x)"
    },
    {
        "NLSTATEMENT": "Some fears lead to anxiety.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (F(ear(x) ∧ Anxiety(x)))",
        "CORRECT": "∃x (Fear(x) ∧ Anxiety(x))",
        "PREDICATES": "Fear(x)\nTerror(x)\nAnxiety(x)"
    },
    {
        "NLSTATEMENT": "NY, PA, OH, MI are states in the US.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)",
        "CORRECT": "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)",
        "PREDICATES": "Erie(x)\nGreatLake(x)\nMichigan(x)\nFormAtEndOf(x, y)\nIn(x, y)\nMajorSettlementOf(x, y)\nOntario(x)\nSuperior(x)\nHuron(x)\nState(x, y)"
    },
    {
        "NLSTATEMENT": "The US is in North America.",
        "ERRORTYPE": "no_error",
        "SKETCH": "In(us, northamerica)",
        "CORRECT": "In(us, northamerica)",
        "PREDICATES": "Erie(x)\nGreatLake(x)\nMichigan(x)\nFormAtEndOf(x, y)\nIn(x, y)\nMajorSettlementOf(x, y)\nOntario(x)\nSuperior(x)\nHuron(x)\nState(x, y)"
    },
    {
        "NLSTATEMENT": "All defenders are soccer players.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Defender(x) → ∀x  SoccerPlayer(x))",
        "CORRECT": "∀x (Defender(x) → SoccerPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nCenterBack(x)\nDefender(x)\nSoccerPlayer(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "No soccer players are professional basketball players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x SoccerPlayer(x → ¬ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nCenterBack(x)\nDefender(x)\nSoccerPlayer(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All defenders are soccer players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Defender(x() → SoccerPlaye)r(x))",
        "CORRECT": "∀x (Defender(x) → SoccerPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nCenterBack(x)\nDefender(x)\nSoccerPlayer(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "Naive cynicism was proposed by Justin Kruger and a colleague.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Proposed(justinKruger, naiveCynicism) ∧ ProposedcolleagueOfJustinKruger, naiveCynicism ",
        "CORRECT": "Proposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) ",
        "PREDICATES": "PhilosophyOfMind(x)\nColleague(x, y)\nProposed(x, y)"
    },
    {
        "NLSTATEMENT": "Naive cynicism is a philosophy of mind.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "PhilosophyOfMind(naiveCynicism)",
        "CORRECT": "PhilosophyOfMind(naiveCynicism)",
        "PREDICATES": "PhilosophyOfMind(x)\nColleague(x, y)\nProposed(x, y)"
    },
    {
        "NLSTATEMENT": "Naive cynicism is a philosophy of mind.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PhilosophyOfMind(naiveCy(ni)cism)",
        "CORRECT": "PhilosophyOfMind(naiveCynicism)",
        "PREDICATES": "PhilosophyOfMind(x)\nColleague(x, y)\nProposed(x, y)"
    },
    {
        "NLSTATEMENT": "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "ContributedTo(marvinMinsky, ai)",
        "CORRECT": "ContributedTo(marvinMinsky, ai)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "John McCarthy had a central role in creating and shaping the field of artificial inteligence. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "ContributedTojohnMccarthy, ai",
        "CORRECT": "ContributedTo(johnMccarthy, ai)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "Donald Knuth made major contributions to the analysis of algorithms.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "ContributedTo(donaldKnuth, algorithms)",
        "CORRECT": "ContributedTo(donaldKnuth, algorithms)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAward(ed(richardHamming) ∧ TuringAward)ed(johnMccarthy)",
        "CORRECT": "TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "No easy Leetcode problems have an AC rate lower than 20 percent. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Easy(x) → ¬LowerAC(x))",
        "CORRECT": "∀x (Easy(x) → ¬LowerAC(x))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))",
        "CORRECT": "¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "All Leetcode problems recommended to novices are easy.                                                                                                       ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Recommended(x) → Easy(x))",
        "CORRECT": "∀x (Recommended(x) → Easy(x))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "All hard Leetcode problems are starred by more than 1 thousand users. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Hard(x) → Starred(x))",
        "CORRECT": "∀x (Hard(x) → Starred(x))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)",
        "CORRECT": "Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)",
        "PREDICATES": "Wrote(x, y)\nRecordedBy(x, y)\nLeadSingleOf(x, y)\nLeadSingle(x)\nExtendedPlay(x)\nMember(x, y)\nBoyBand(x)\nContains(x, y)\nSouthKorean(x)\nHasMusicVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "There is a music video for Show Your Love.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "HasMusicVideo(showyourlove)",
        "CORRECT": "HasMusicVideo(showyourlove)",
        "PREDICATES": "Wrote(x, y)\nRecordedBy(x, y)\nLeadSingleOf(x, y)\nLeadSingle(x)\nExtendedPlay(x)\nMember(x, y)\nBoyBand(x)\nContains(x, y)\nSouthKorean(x)\nHasMusicVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "The lead single of the extended play Inside is Show Your Love.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)",
        "CORRECT": "ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)",
        "PREDICATES": "Wrote(x, y)\nRecordedBy(x, y)\nLeadSingleOf(x, y)\nLeadSingle(x)\nExtendedPlay(x)\nMember(x, y)\nBoyBand(x)\nContains(x, y)\nSouthKorean(x)\nHasMusicVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All tables are round.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Table(x) → Round(x))",
        "CORRECT": "∀x (Table(x) → Round(x))",
        "PREDICATES": "Table(x)\nFurniture(x)\nRound(x)"
    },
    {
        "NLSTATEMENT": "All juvenile delinquents are maladjusted individuals.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (JuvenileDelinquent(x) → MaladjustedIndividual(x))",
        "CORRECT": "∀x (JuvenileDelinquent(x) → MaladjustedIndividual(x))",
        "PREDICATES": "ProductOfBrokenHome(x)\nMaladjustedIndividual(x)\nJuvenileDelinquent(x)"
    },
    {
        "NLSTATEMENT": "No extracting information from BOLD signals is without statistical pattern analysis. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))",
        "CORRECT": "∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "No extracting information from BOLD signals is without statistical pattern analysis. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))",
        "CORRECT": "∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "All brain decoding is extracting information from BOLD signals.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))",
        "CORRECT": "∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)",
        "CORRECT": "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "No extracting information from BOLD signals is without statistical pattern analysis. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))",
        "CORRECT": "∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Writing a novel is without statistical pattern analysis.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (WritingANovel(x) → ∀x  WithoutStatisticalPatternAnalysis(x)) ",
        "CORRECT": "∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Broccoli and asparagus are both vegetables.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Vegetable(broccoli) ∧ Vegetable(asparagus)",
        "CORRECT": "Vegetable(broccoli) ∧ Vegetable(asparagus)",
        "PREDICATES": "FirstDinnerParty(x, y)\nAtLuisParty(x)\nVegetable(x)\nRoomFor(x, y)"
    },
    {
        "NLSTATEMENT": "Gustave has room for both broccoli and asparagus.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "CORRECT": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "PREDICATES": "FirstDinnerParty(x, y)\nAtLuisParty(x)\nVegetable(x)\nRoomFor(x, y)"
    },
    {
        "NLSTATEMENT": "Gustave has room for both broccoli and asparagus.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "RoomFor(gustave, broccoli) ∧ RoomForgustave, asparagus",
        "CORRECT": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "PREDICATES": "FirstDinnerParty(x, y)\nAtLuisParty(x)\nVegetable(x)\nRoomFor(x, y)"
    },
    {
        "NLSTATEMENT": "Some singles of Imagine Dragons have been on Billboard Hot 100.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))",
        "CORRECT": "∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))",
        "PREDICATES": "BillboardHot100(x)\nSinger(x)\nPopularSingle(x, y)\nMusician(x)\nLeadSinger(x, y)\nSongWriter(x)\nRockBand(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "The lead singer of Imagine Dragons is Dan.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LeadSinger(imagineDragon, dan)",
        "CORRECT": "LeadSinger(imagineDragon, dan)",
        "PREDICATES": "BillboardHot100(x)\nSinger(x)\nPopularSingle(x, y)\nMusician(x)\nLeadSinger(x, y)\nSongWriter(x)\nRockBand(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "All singers are musicians.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Singer(x → Musician(x))",
        "CORRECT": "∀x (Singer(x) → Musician(x))",
        "PREDICATES": "BillboardHot100(x)\nSinger(x)\nPopularSingle(x, y)\nMusician(x)\nLeadSinger(x, y)\nSongWriter(x)\nRockBand(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Some sandwiches are bread.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x Sandwich(x ∧ Bread(x))",
        "CORRECT": "∃x (Sandwich(x) ∧ Bread(x))",
        "PREDICATES": "Edible(x)\nBread(x)\nPoisonous(x)\nFood(x)\nSandwich(x)"
    },
    {
        "NLSTATEMENT": "All food is edible. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Food(x) →( )Edible(x))",
        "CORRECT": "∀x (Food(x) → Edible(x))",
        "PREDICATES": "Edible(x)\nBread(x)\nPoisonous(x)\nFood(x)\nSandwich(x)"
    },
    {
        "NLSTATEMENT": "No edible things are poisonous.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Edible(x) → ¬Poisonous(x))",
        "CORRECT": "∀x (Edible(x) → ¬Poisonous(x))",
        "PREDICATES": "Edible(x)\nBread(x)\nPoisonous(x)\nFood(x)\nSandwich(x)"
    },
    {
        "NLSTATEMENT": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.",
        "ERRORTYPE": "no_error",
        "SKETCH": "CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)",
        "CORRECT": "CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)",
        "PREDICATES": "Cover(x, y)\nCommonUtilities(x)"
    },
    {
        "NLSTATEMENT": "Many apartment rents cover the cost of water and electricity.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Cover(x, water) ∧ Cover(x, electricity))",
        "CORRECT": "∃x (Cover(x, water) ∧ Cover(x, electricity))",
        "PREDICATES": "Cover(x, y)\nCommonUtilities(x)"
    },
    {
        "NLSTATEMENT": "The rent of the apartment where Ava lives does not cover any utility expenses.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (¬Cover(ava, x))",
        "CORRECT": "∀x (¬Cover(ava, x))",
        "PREDICATES": "Cover(x, y)\nCommonUtilities(x)"
    },
    {
        "NLSTATEMENT": "No products are perfect. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Productx) → ¬Perfect(x)",
        "CORRECT": "∀x (Product(x) → ¬Perfect(x))",
        "PREDICATES": "Product(x)\nClothes(x)\nSkirt(x)\nDress(x)\nPerfect(x)"
    },
    {
        "NLSTATEMENT": "No products are perfect. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Product(x) → ¬Perfect(x))",
        "CORRECT": "∀x (Product(x) → ¬Perfect(x))",
        "PREDICATES": "Product(x)\nClothes(x)\nSkirt(x)\nDress(x)\nPerfect(x)"
    },
    {
        "NLSTATEMENT": "All clothes are products. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Clothes(x) → Product(x))",
        "CORRECT": "∀x (Clothes(x) → Product(x))",
        "PREDICATES": "Product(x)\nClothes(x)\nSkirt(x)\nDress(x)\nPerfect(x)"
    },
    {
        "NLSTATEMENT": "All pets are animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Pet(x) → ∀x  Animal(x))",
        "CORRECT": "∀x (Pet(x) → Animal(x))",
        "PREDICATES": "Liked(x, y)\nHasPet(x)\nDog(x)\nPet(x)\nCares(x, y)\nCat(x)\nAnimal(x)\nNaughty(x)"
    },
    {
        "NLSTATEMENT": "All pets are animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Pet(x) → ∀x  Animal(x))",
        "CORRECT": "∀x (Pet(x) → Animal(x))",
        "PREDICATES": "Liked(x, y)\nHasPet(x)\nDog(x)\nPet(x)\nCares(x, y)\nCat(x)\nAnimal(x)\nNaughty(x)"
    },
    {
        "NLSTATEMENT": "All pets are animals.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Pet(x) → Animal(x))",
        "CORRECT": "∀x (Pet(x) → Animal(x))",
        "PREDICATES": "Liked(x, y)\nHasPet(x)\nDog(x)\nPet(x)\nCares(x, y)\nCat(x)\nAnimal(x)\nNaughty(x)"
    },
    {
        "NLSTATEMENT": "Surprises are either fun or dreadful.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Surprise(x) → ∀x  (Fun(x) ⊕ Dreadful(x)))",
        "CORRECT": "∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x)))",
        "PREDICATES": "Fun(x)\nSurprise(x)\nScare(x)\nDreadful(x)"
    },
    {
        "NLSTATEMENT": "All books written by Cixin Liu have sold more than 1 million copies. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "CORRECT": "∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "PREDICATES": "WrittenBy(x, y)\nSoldMoreThan(x, y)\nBook(x)\nWon(x, y)\nInfluencedBy(x, y)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "All books written by Cixin Liu have sold more than 1 million copies. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Book(x) ∧ ∀x  WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "CORRECT": "∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "PREDICATES": "WrittenBy(x, y)\nSoldMoreThan(x, y)\nBook(x)\nWon(x, y)\nInfluencedBy(x, y)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "Some books that have won the Hugo Award were written by Cixin Liu.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))",
        "CORRECT": "∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))",
        "PREDICATES": "WrittenBy(x, y)\nSoldMoreThan(x, y)\nBook(x)\nWon(x, y)\nInfluencedBy(x, y)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "All students studying in the morning are good at time management. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x StudyMorning(x → GoodAtTimeManagement(x))",
        "CORRECT": "∀x (StudyMorning(x) → GoodAtTimeManagement(x))",
        "PREDICATES": "StudyMorning(x)\nGetUpEarly(x)\nComputerScience(x)\nPopular(x)\nGoodAtTimeManagement(x)"
    },
    {
        "NLSTATEMENT": "All students good at time management are popular among students. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (GoodAtTimeManagement(x) → Popular(x))",
        "CORRECT": "∀x (GoodAtTimeManagement(x) → Popular(x))",
        "PREDICATES": "StudyMorning(x)\nGetUpEarly(x)\nComputerScience(x)\nPopular(x)\nGoodAtTimeManagement(x)"
    },
    {
        "NLSTATEMENT": "James is not popular among students. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Popular(james)",
        "CORRECT": "¬Popular(james)",
        "PREDICATES": "StudyMorning(x)\nGetUpEarly(x)\nComputerScience(x)\nPopular(x)\nGoodAtTimeManagement(x)"
    },
    {
        "NLSTATEMENT": "If there is a dog on the roof something went wrong.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  ((Dog(x) ∧ ∃y  OnRoof(x)) → WentWrong(y))",
        "CORRECT": "∀x ∃y ((Dog(x) ∧ OnRoof(x)) → WentWrong(y))",
        "PREDICATES": "Dog(x)\nWentWrong(x)\nOnRoof(x)"
    },
    {
        "NLSTATEMENT": "Several species of Elephantopus are native to the southeastern United States.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))",
        "CORRECT": "∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))",
        "PREDICATES": "WidespreadOver(x, y)\nElephantopus(x)\nGenus(x, y)\nTraditionalMedicine(x)\nBelongTo(x, y)\nElephantopusScaber(x)\nNativeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, austral(ia) ∧ WidespreadOver)(x, americas))",
        "CORRECT": "∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))",
        "PREDICATES": "WidespreadOver(x, y)\nElephantopus(x)\nGenus(x, y)\nTraditionalMedicine(x)\nBelongTo(x, y)\nElephantopusScaber(x)\nNativeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Several species of Elephantopus are native to the southeastern United States.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Elephantopus(x) ∧ ∃x  NativeTo(x, southeasternunitedstates))",
        "CORRECT": "∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))",
        "PREDICATES": "WidespreadOver(x, y)\nElephantopus(x)\nGenus(x, y)\nTraditionalMedicine(x)\nBelongTo(x, y)\nElephantopusScaber(x)\nNativeTo(x, y)"
    },
    {
        "NLSTATEMENT": "No buildings open to students are established after 1800. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "CORRECT": "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "CORRECT": "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "CORRECT": "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "Harkness is either a building operated by Yale Housing staff or located on York Street. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "OperatedByYaleHou(singStaff)s(harkness) ⊕ InYorkStreet(harkness)",
        "CORRECT": "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(∀x (CreepyHauntedHouse(x) → MansionHou)se(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "The Scream is a creepy haunted house or a terrifying Halloween scare.",
        "ERRORTYPE": "no_error",
        "SKETCH": "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)",
        "CORRECT": "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Cree)pyHauntedHouse(x) → MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (CreepyHauntedHouse(x) → ∀x  MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (CreepyHauntedHouse(x) → ∀x  MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x CreepyHauntedHouse(x → MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (UrbanArea(x) → ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "The Scream is a creepy haunted house or a terrifying Halloween scare.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)",
        "CORRECT": "CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There is a national park in Vietnam classified as a UNESCO World Heritage Site.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NationalPark(x) ∧ ∃x  Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))",
        "CORRECT": "∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))",
        "PREDICATES": "NatureReserve(x)\nUNESCOWorldHeritageSite(x)\nMangedby(x, y)\nLocatedin(x, y)\nNationalPark(x)"
    },
    {
        "NLSTATEMENT": "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ ∀x  Mangedby(x, peoplesCommittee))",
        "CORRECT": "∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))",
        "PREDICATES": "NatureReserve(x)\nUNESCOWorldHeritageSite(x)\nMangedby(x, y)\nLocatedin(x, y)\nNationalPark(x)"
    },
    {
        "NLSTATEMENT": "Phuoc Binh is not managed by the Ministry of Agriculture.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Mangedby(phuocBinh, ministryofAgriculture)",
        "CORRECT": "¬Mangedby(phuocBinh, ministryofAgriculture)",
        "PREDICATES": "NatureReserve(x)\nUNESCOWorldHeritageSite(x)\nMangedby(x, y)\nLocatedin(x, y)\nNationalPark(x)"
    },
    {
        "NLSTATEMENT": "Greyhound racing is a competitive sport where spectators bet on greyhounds.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃y ∀x (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y))",
        "CORRECT": "∀x ∃y (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y))",
        "PREDICATES": "GreyhoundRacing(x)\nPursue(x, y)\nBanned(x)\nGreyHound(x)\nCompetitiveSport(x)\nSpectaorsBetOn(x, y)\nGreyhound(x)\nHare(x)\nSmallGame(x)\nSpectatorsBetOn(x, y)\nCoursing(x)"
    },
    {
        "NLSTATEMENT": "Coursing involves spectators betting on a hare being pursued by greyhounds.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃y ∀x ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y))",
        "CORRECT": "∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y))",
        "PREDICATES": "GreyhoundRacing(x)\nPursue(x, y)\nBanned(x)\nGreyHound(x)\nCompetitiveSport(x)\nSpectaorsBetOn(x, y)\nGreyhound(x)\nHare(x)\nSmallGame(x)\nSpectatorsBetOn(x, y)\nCoursing(x)"
    },
    {
        "NLSTATEMENT": "In one game, Henry first receives one yellow card, then he receives one red card.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "CORRECT": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "PREDICATES": "Eject(x)\nSoccerPlayer(x)\nOneRed(x)\nTwoYellow(x)"
    },
    {
        "NLSTATEMENT": "In one game, Henry first receives one yellow card, then he receives one red card.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "CORRECT": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "PREDICATES": "Eject(x)\nSoccerPlayer(x)\nOneRed(x)\nTwoYellow(x)"
    },
    {
        "NLSTATEMENT": "Some living things are trees.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Living(x) ∧ Tree(x))",
        "CORRECT": "∃x (Living(x) ∧ Tree(x))",
        "PREDICATES": "Plant(x)\nLiving(x)\nTree(x)"
    },
    {
        "NLSTATEMENT": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)",
        "CORRECT": "Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)",
        "PREDICATES": "GivenName(x)\nPhysician(x)\nNotablePeople(x)\nBarrister(x)\nDagfinn(x)\nNorwegian(x)"
    },
    {
        "NLSTATEMENT": "Dagfinn Dahl is a Norwegian barrister.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)",
        "CORRECT": "Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)",
        "PREDICATES": "GivenName(x)\nPhysician(x)\nNotablePeople(x)\nBarrister(x)\nDagfinn(x)\nNorwegian(x)"
    },
    {
        "NLSTATEMENT": "Dagfinn Dahl is a Norwegian barrister.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)",
        "CORRECT": "Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)",
        "PREDICATES": "GivenName(x)\nPhysician(x)\nNotablePeople(x)\nBarrister(x)\nDagfinn(x)\nNorwegian(x)"
    },
    {
        "NLSTATEMENT": "If entertainment is interesting, it will be popular.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))",
        "CORRECT": "∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))",
        "PREDICATES": "WellKnown(x)\nPopular(x)\nInteresting(x)\nEntertainment(x)"
    },
    {
        "NLSTATEMENT": "If BERT is a giant language model, then GPT3 is also a giant language model. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt3) ∧ Giant(gpt3))",
        "CORRECT": "(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt3) ∧ Giant(gpt3))",
        "PREDICATES": "LanguageModel(x)\nUsedBySomeResearchers(x)\nGoodPerformance(x)\nGiant(x)\nPopular(x)"
    },
    {
        "NLSTATEMENT": "For two different teams, either one team wins or the other team wins.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "CORRECT": "∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "PREDICATES": "WonGame(x, y)\nJoined(x, y)\nScottish(x)\nDifferent(x, y)\nPartOf(x, y)"
    },
    {
        "NLSTATEMENT": "St Johnstone is a Scottish team.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Scottish(johnstone)",
        "CORRECT": "Scottish(johnstone)",
        "PREDICATES": "WonGame(x, y)\nJoined(x, y)\nScottish(x)\nDifferent(x, y)\nPartOf(x, y)"
    },
    {
        "NLSTATEMENT": "St Johnstone and Minsk are different teams.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Different(misnk, johnstone) ∧ Different(johnstone, minsk)",
        "CORRECT": "Different(misnk, johnstone) ∧ Different(johnstone, minsk)",
        "PREDICATES": "WonGame(x, y)\nJoined(x, y)\nScottish(x)\nDifferent(x, y)\nPartOf(x, y)"
    },
    {
        "NLSTATEMENT": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Boeing737(t10) ⊕ Delta(t10)",
        "CORRECT": "Boeing737(t10) ⊕ Delta(t10)",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "No Boeing-737 plane is equipped with more than 300 seats. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Boeing737x) → ¬Seats300(x)",
        "CORRECT": "∀x (Boeing737(x) → ¬Seats300(x))",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Boeing737(t10) ⊕ Delta(t10)",
        "CORRECT": "Boeing737(t10) ⊕ Delta(t10)",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "All planes with a capacity of 100 passengers are produced before 2010. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Passengers100(x) → ProducedBefore2010x)",
        "CORRECT": "∀x (Passengers100(x) → ProducedBefore2010(x))",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "The SAT test is intended to assess student's readiness for college.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Test(sat(, read)iness)",
        "CORRECT": "Test(sat, readiness)",
        "PREDICATES": "Year(x)\nBefore2016(x)\nSince2016(x)\nOwn(x, y)\nAlignHighSchool(x)\nTest(x, y)"
    },
    {
        "NLSTATEMENT": "The SAT was originally designed not to be aligned with high school curricula. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) ",
        "CORRECT": "∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) ",
        "PREDICATES": "Year(x)\nBefore2016(x)\nSince2016(x)\nOwn(x, y)\nAlignHighSchool(x)\nTest(x, y)"
    },
    {
        "NLSTATEMENT": "The SAT test is intended to assess student's readiness for college.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Test(sat, readiness)",
        "CORRECT": "Test(sat, readiness)",
        "PREDICATES": "Year(x)\nBefore2016(x)\nSince2016(x)\nOwn(x, y)\nAlignHighSchool(x)\nTest(x, y)"
    },
    {
        "NLSTATEMENT": "All players in the Big 3 are professionals who have a high win ratio.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (ProfessionalTennisPlayer(x) ∧ (HighWinRatio(x) → I)nBig3(x))",
        "CORRECT": "∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))",
        "PREDICATES": "BornIn(x, y)\nProfessionalTennisPlayer(x)\nInBig3(x)\nHighWinRatio(x)"
    },
    {
        "NLSTATEMENT": "Rafa Nadal is a professional tennis player.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "ProfessionalTennisPlayer(rafaNadal)",
        "CORRECT": "ProfessionalTennisPlayer(rafaNadal)",
        "PREDICATES": "BornIn(x, y)\nProfessionalTennisPlayer(x)\nInBig3(x)\nHighWinRatio(x)"
    },
    {
        "NLSTATEMENT": "All players in the Big 3 are professionals who have a high win ratio.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Profe(s)sionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))",
        "CORRECT": "∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))",
        "PREDICATES": "BornIn(x, y)\nProfessionalTennisPlayer(x)\nInBig3(x)\nHighWinRatio(x)"
    },
    {
        "NLSTATEMENT": "No cookie is healthy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Cookie(x) → ∀x  ¬Healthy(x))",
        "CORRECT": "∀x (Cookie(x) → ¬Healthy(x))",
        "PREDICATES": "Cookie(x)\nOreo(x)\nHealthy(x)"
    },
    {
        "NLSTATEMENT": "If Jack is a human or a flower, then Jack is a human and a flower.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)",
        "CORRECT": "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "If Jack is a human or a flower, then Jack is a human and a flower.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)",
        "CORRECT": "Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "All pupils are human.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Pupil(x) → Human(x))",
        "CORRECT": "∀x (Pupil(x) → Human(x))",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "All pupils are human.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Pupil(x) → Human(x))",
        "CORRECT": "∀x (Pupil(x) → Human(x))",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "All clothes are wearable. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Clothes(x) → ∀x  Wearable(x))",
        "CORRECT": "∀x (Clothes(x) → Wearable(x))",
        "PREDICATES": "Clothes(x)\nSlipper(x)\nWearable(x)\nFood(x)\nAirTight(x)\nShoes(x)"
    },
    {
        "NLSTATEMENT": "No wearable things are airtight.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Wearable(x) → ∀x  ¬AirTight(x))",
        "CORRECT": "∀x (Wearable(x) → ¬AirTight(x))",
        "PREDICATES": "Clothes(x)\nSlipper(x)\nWearable(x)\nFood(x)\nAirTight(x)\nShoes(x)"
    },
    {
        "NLSTATEMENT": "A thing is either food or clothes.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Food(x) ⊕ Clothesx)",
        "CORRECT": "∀x (Food(x) ⊕ Clothes(x))",
        "PREDICATES": "Clothes(x)\nSlipper(x)\nWearable(x)\nFood(x)\nAirTight(x)\nShoes(x)"
    },
    {
        "NLSTATEMENT": "Carlos Reyes is a welterweight.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "IsWelterWeight(carlosReyes)",
        "CORRECT": "IsWelterWeight(carlosReyes)",
        "PREDICATES": "DoesOlympicSport(x)\nGoesToOlympicGames(x)\nIsHeavyWeight(x)\nIsOlympian(x)\nIsWelterWeight(x)"
    },
    {
        "NLSTATEMENT": "Carlos Reyes went to the Olympics.",
        "ERRORTYPE": "no_error",
        "SKETCH": "GoesToOlympicGames(carlosReyes)",
        "CORRECT": "GoesToOlympicGames(carlosReyes)",
        "PREDICATES": "DoesOlympicSport(x)\nGoesToOlympicGames(x)\nIsHeavyWeight(x)\nIsOlympian(x)\nIsWelterWeight(x)"
    },
    {
        "NLSTATEMENT": "Carlos Reyes went to the Olympics.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "GoesToOlympicGames(carlosReyes)",
        "CORRECT": "GoesToOlympicGames(carlosReyes)",
        "PREDICATES": "DoesOlympicSport(x)\nGoesToOlympicGames(x)\nIsHeavyWeight(x)\nIsOlympian(x)\nIsWelterWeight(x)"
    },
    {
        "NLSTATEMENT": "All young teenage girls who attend college are big fans of pop bands and singers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (CollegeTeen(x) → Ambitious(x))",
        "CORRECT": "∀x (CollegeTeen(x) → Ambitious(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Fans(x) → Decor(x))",
        "CORRECT": "∀x (Fans(x) → Decor(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "All young teenage girls who attend college are big fans of pop bands and singers.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (CollegeTeen(x) → Ambitious(x))",
        "CORRECT": "∀x (CollegeTeen(x) → Ambitious(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Decor(x) → ¬MoveOut(x))",
        "CORRECT": "∀x (Decor(x) → ¬MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Ambitious(x) → MoveOut(x))",
        "CORRECT": "∀x (Ambitious(x) → MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Ambitious(sam) → Fans(sam)",
        "CORRECT": "Ambitious(sam) → Fans(sam)",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Ambitious(x) → MoveOut(x))",
        "CORRECT": "∀x (Ambitious(x) → MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "All young teenage girls who attend college are big fans of pop bands and singers.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (CollegeTeen(x) → ∀x  Ambitious(x))",
        "CORRECT": "∀x (CollegeTeen(x) → Ambitious(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Ambitious(sam) → Fans(sam)",
        "CORRECT": "Ambitious(sam) → Fans(sam)",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "Bob loves shrieking and swearing.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Shriek(bob) ∧ Swear(bob)",
        "CORRECT": "Shriek(bob) ∧ Swear(bob)",
        "PREDICATES": "Swear(x)\nPunished(x)\nGentleman(x)\nNice(x)\nShriek(x)\nTalk(x, y)\nStudent(x)\nMan(x)\nTeacher(x)\nSuit(x)"
    },
    {
        "NLSTATEMENT": "A student who loves shrieking will be punished.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Student(x) ∧ Shriek(x) → Punished(x))",
        "CORRECT": "∀x (Student(x) ∧ Shriek(x) → Punished(x))",
        "PREDICATES": "Swear(x)\nPunished(x)\nGentleman(x)\nNice(x)\nShriek(x)\nTalk(x, y)\nStudent(x)\nMan(x)\nTeacher(x)\nSuit(x)"
    },
    {
        "NLSTATEMENT": "All gentlemen are in a suit.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Gentleman(x) → Suit(x))",
        "CORRECT": "∀x (Gentleman(x) → Suit(x))",
        "PREDICATES": "Swear(x)\nPunished(x)\nGentleman(x)\nNice(x)\nShriek(x)\nTalk(x, y)\nStudent(x)\nMan(x)\nTeacher(x)\nSuit(x)"
    },
    {
        "NLSTATEMENT": "People who can catch balls are good wide receivers. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))",
        "CORRECT": "∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))",
        "PREDICATES": "Good(x, y)\nIn(x, y)\nCanCatch(x, y)\nCanCatchWith(x, y)\nProfessional(x)\nWideReciever(x)\nFootball(x)\nBall(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Quincy McDuffie is an American professional wide receiver in Canadian Football.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ Inquincymcduffie, canadianfootball",
        "CORRECT": "American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)",
        "PREDICATES": "Good(x, y)\nIn(x, y)\nCanCatch(x, y)\nCanCatchWith(x, y)\nProfessional(x)\nWideReciever(x)\nFootball(x)\nBall(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Good wide receivers can catch with both their left and right hand.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Good(x, widereciever) → CanCatchWithx, lefthand) ∧ CanCatchWith(x, righthand)",
        "CORRECT": "∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))",
        "PREDICATES": "Good(x, y)\nIn(x, y)\nCanCatch(x, y)\nCanCatchWith(x, y)\nProfessional(x)\nWideReciever(x)\nFootball(x)\nBall(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "France is a European country.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Locate(france, europe)",
        "CORRECT": "Locate(france, europe)",
        "PREDICATES": "Precede(x, y)\nLocate(x, y)\nSituate(x, y)\nServe(x, y)\nRailwayStation(x)"
    },
    {
        "NLSTATEMENT": "Boves is served by regional TER Hauts-de-France trains.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Serve(hautsDeFrance, boves)",
        "CORRECT": "Serve(hautsDeFrance, boves)",
        "PREDICATES": "Precede(x, y)\nLocate(x, y)\nSituate(x, y)\nServe(x, y)\nRailwayStation(x)"
    },
    {
        "NLSTATEMENT": "The preceding station of Dommartin is Boves.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Precede(dommartin, boves)",
        "CORRECT": "Precede(dommartin, boves)",
        "PREDICATES": "Precede(x, y)\nLocate(x, y)\nSituate(x, y)\nServe(x, y)\nRailwayStation(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith was also known as Ted Smith.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "KnownAs(edwinsmith, tedsmith)",
        "CORRECT": "KnownAs(edwinsmith, tedsmith)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)",
        "CORRECT": "Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
        "ERRORTYPE": "no_error",
        "SKETCH": "WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)",
        "CORRECT": "WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)",
        "CORRECT": "Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "A werewolf is a human that can turn into a wolf.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "CORRECT": "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "PREDICATES": "Human(x)\nScratchedBy(x, y)\nBittenBy(x, y)\nAttackedBy(x, y)\nWerewolf(x)\nCanTurnInto(x, y)"
    },
    {
        "NLSTATEMENT": "If someone has been scratched or bitten, they have been attacked.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "∀x  (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)",
        "CORRECT": "∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)",
        "PREDICATES": "Human(x)\nScratchedBy(x, y)\nBittenBy(x, y)\nAttackedBy(x, y)\nWerewolf(x)\nCanTurnInto(x, y)"
    },
    {
        "NLSTATEMENT": "A werewolf is a human that can turn into a wolf.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "CORRECT": "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "PREDICATES": "Human(x)\nScratchedBy(x, y)\nBittenBy(x, y)\nAttackedBy(x, y)\nWerewolf(x)\nCanTurnInto(x, y)"
    },
    {
        "NLSTATEMENT": "Musoke fought Yakovlev at UFC Fight Night.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Event(uFCFightNight) → Fight(musoke, yakovlev)",
        "CORRECT": "Event(uFCFightNight) → Fight(musoke, yakovlev)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "Jung was injured at UFC Fight Night.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Event(uFCFightNight) → Injured(jung)",
        "CORRECT": "Event(uFCFightNight) → Injured(jung)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "Jung was injured at UFC Fight Night.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Event(uFCFightNight) → Injured(jung)",
        "CORRECT": "Event(uFCFightNight) → Injured(jung)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "Jung was injured at UFC Fight Night.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Event(uFCFightNight) → Injured(jung)",
        "CORRECT": "Event(uFCFightNight) → Injured(jung)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "If coke is not apple juice, then coke is not edible.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬AppleJuice(coke) → ¬Edible(coke)",
        "CORRECT": "¬AppleJuice(coke) → ¬Edible(coke)",
        "PREDICATES": "Juice(x)\nOrangeJuice(x)\nEdible(x)\nAppleJuice(x)\nSweet(x)\nDrink(x)"
    },
    {
        "NLSTATEMENT": "All apple juice is sweet.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (AppleJuice(x) → Sweet(x))",
        "CORRECT": "∀x (AppleJuice(x) → Sweet(x))",
        "PREDICATES": "Juice(x)\nOrangeJuice(x)\nEdible(x)\nAppleJuice(x)\nSweet(x)\nDrink(x)"
    },
    {
        "NLSTATEMENT": "A juice is either an orange juice or an apple juice.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (OrangeJuice(x) ∨ ∀x  AppleJuice(x))",
        "CORRECT": "∀x (OrangeJuice(x) ∨ AppleJuice(x))",
        "PREDICATES": "Juice(x)\nOrangeJuice(x)\nEdible(x)\nAppleJuice(x)\nSweet(x)\nDrink(x)"
    },
    {
        "NLSTATEMENT": "Spanish Nationalists killed anyone who they opposed and were popular.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x))",
        "CORRECT": "∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x))",
        "PREDICATES": "SupportPopulists(x)\nKilled(x, y)\nTalentedPoet(x)\nPopular(x)\nOpposed(x, y)"
    },
    {
        "NLSTATEMENT": "The Spanish Nationalists opposed anyone who supported the Popular Front",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (SupportPopulists(x) → Opposed(nationalists, x))",
        "CORRECT": "∀x (SupportPopulists(x) → Opposed(nationalists, x))",
        "PREDICATES": "SupportPopulists(x)\nKilled(x, y)\nTalentedPoet(x)\nPopular(x)\nOpposed(x, y)"
    },
    {
        "NLSTATEMENT": "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))",
        "CORRECT": "(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))",
        "PREDICATES": "Dentist(x)\nBusyParents(x)\nConsistent(x)\nCocaCola(x)\nErratic(x)\nKombucha(x)"
    },
    {
        "NLSTATEMENT": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (CocaCola(x) → BusyParents(x))",
        "CORRECT": "∀x (CocaCola(x) → BusyParents(x))",
        "PREDICATES": "Dentist(x)\nBusyParents(x)\nConsistent(x)\nCocaCola(x)\nErratic(x)\nKombucha(x)"
    },
    {
        "NLSTATEMENT": "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Erratic(x) → ¬Consistentx)",
        "CORRECT": "∀x (Erratic(x) → ¬Consistent(x))",
        "PREDICATES": "Dentist(x)\nBusyParents(x)\nConsistent(x)\nCocaCola(x)\nErratic(x)\nKombucha(x)"
    },
    {
        "NLSTATEMENT": "James subscribes to AMC A List.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SubscribedTo(ja(mes, amcal)ist)",
        "CORRECT": "SubscribedTo(james, amcalist)",
        "PREDICATES": "NoFees(x)\nPrefer(x, y)\nCinemaEveryWeek(x)\nWatchTVIn(x, y)\nSubscribedTo(x, y)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "James subscribes to AMC A List.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SubscribedTo(james, amcalist)",
        "CORRECT": "SubscribedTo(james, amcalist)",
        "PREDICATES": "NoFees(x)\nPrefer(x, y)\nCinemaEveryWeek(x)\nWatchTVIn(x, y)\nSubscribedTo(x, y)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Customers who prefer TV series will not watch TV series in cinemas.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Prefer(x, tvseries) → (¬WatchTVIn(x, cinem)as))",
        "CORRECT": "∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))",
        "PREDICATES": "NoFees(x)\nPrefer(x, y)\nCinemaEveryWeek(x)\nWatchTVIn(x, y)\nSubscribedTo(x, y)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Bulbophyllum attenuatum is in the genus bulbophyllum.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "InGenus(bulbophyllumattenuatum, bulbophyllum)",
        "CORRECT": "InGenus(bulbophyllumattenuatum, bulbophyllum)",
        "PREDICATES": "Orchid(x)\nInGenus(x, y)"
    },
    {
        "NLSTATEMENT": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)",
        "CORRECT": "FederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)",
        "PREDICATES": "LargestAreaIn(x)\nLargestPopulationIn(x)\nFederalDistrictOfRussia(x)\nEstablishedIn(x, y)\nAdministrativeCenterOf(x, y)"
    },
    {
        "NLSTATEMENT": "The Far Eastern federal district has the largest area among all federal districts in Russia.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)",
        "CORRECT": "FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)",
        "PREDICATES": "LargestAreaIn(x)\nLargestPopulationIn(x)\nFederalDistrictOfRussia(x)\nEstablishedIn(x, y)\nAdministrativeCenterOf(x, y)"
    },
    {
        "NLSTATEMENT": "Vladivostok is the administrative center of the Far Eastern federal district.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "AdministrativeCenterOfvladivostok, fareastern",
        "CORRECT": "AdministrativeCenterOf(vladivostok, fareastern)",
        "PREDICATES": "LargestAreaIn(x)\nLargestPopulationIn(x)\nFederalDistrictOfRussia(x)\nEstablishedIn(x, y)\nAdministrativeCenterOf(x, y)"
    },
    {
        "NLSTATEMENT": "All cancers are malignant tumors.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Cancer(x) → MalignantTumor(x))",
        "CORRECT": "∀x (Cancer(x) → MalignantTumor(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "All colorectal cancer is cancer.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ColorectalCancer(x) → Cancer(x))",
        "CORRECT": "∀x (ColorectalCancer(x) → Cancer(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "Having a cold can be treated at home.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (HavingACold(x) → CanBeTreatedAtHome(x))",
        "CORRECT": "∀x (HavingACold(x) → CanBeTreatedAtHome(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "No malignant tumor can be treated at home.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "CORRECT": "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "Having a cold can be treated at home.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (HavingACold(x) → CanBeTreatedAtHome(x))",
        "CORRECT": "∀x (HavingACold(x) → CanBeTreatedAtHome(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "No malignant tumor can be treated at home.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "CORRECT": "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "I should not worry about things outside of my control.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (OutsideControl(x) → ∀x  ¬ShouldWorry(x))",
        "CORRECT": "∀x (OutsideControl(x) → ¬ShouldWorry(x))",
        "PREDICATES": "ShouldWorry(x)\nOutsideControl(x)\nTraffic(x)"
    },
    {
        "NLSTATEMENT": "Roversi is an Italian surname.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))",
        "CORRECT": "∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))",
        "PREDICATES": "Photographer(x)\nUseAsSurname(x, y)\nProfessional(x)\nUseItalianSurname(x)\nAmateur(x)"
    },
    {
        "NLSTATEMENT": "Paolo Roversi is a photographer.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Photographer(paolo)",
        "CORRECT": "Photographer(paolo)",
        "PREDICATES": "Photographer(x)\nUseAsSurname(x, y)\nProfessional(x)\nUseItalianSurname(x)\nAmateur(x)"
    },
    {
        "NLSTATEMENT": "Alba Roversi uses Roversi as a surname.",
        "ERRORTYPE": "no_error",
        "SKETCH": "UseAsSurname(alba, roversi)",
        "CORRECT": "UseAsSurname(alba, roversi)",
        "PREDICATES": "Photographer(x)\nUseAsSurname(x, y)\nProfessional(x)\nUseItalianSurname(x)\nAmateur(x)"
    },
    {
        "NLSTATEMENT": "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "British-IraqiArchitect(zahaHadid)",
        "CORRECT": "British-IraqiArchitect(zahaHadid)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "VisitingprofessorzahaHadid, yaleSchoolofArchitecture",
        "CORRECT": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)",
        "CORRECT": "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "British-IraqiArchitect(zahaHadid)",
        "CORRECT": "British-IraqiArchitect(zahaHadid)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ",
        "CORRECT": " ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (InvasiveNeuroimagingTechnique(x) ∨ ∀x  NoninvasiveNeuroimagingTechnique(x)) ",
        "CORRECT": "∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) ",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ",
        "CORRECT": " ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "All measurements of brain activity are used by neuroscience researchers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (MeasurementOfBrainActivityx) → UsedByNeuroscienceResearchers(x)",
        "CORRECT": " ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "All those providing a tutorial session at the conference are invited to join the club. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Tutorial(x) → Invited(x))",
        "CORRECT": "∀x (Tutorial(x) → Invited(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "Either present their work at the conference or provide a tutorial session at the conference. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ( Present(x) ∨ Tutorial(x))",
        "CORRECT": "∀x ( Present(x) ∨ Tutorial(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All provided with delicious meals are happy to communicate with each other during the dinner. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Meals(x) → HappyCommunicate(x))",
        "CORRECT": "∀x (Meals(x) → HappyCommunicate(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All invited to join the club are provided with delicious meals. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Invited(x) → ∀x  Meals(x))",
        "CORRECT": "∀x (Invited(x) → Meals(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All provided with delicious meals are invited to take a photo with the audience. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Meals(x) → InvitedTakePhoto(x))",
        "CORRECT": "∀x (Meals(x) → InvitedTakePhoto(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "The USS Salem is a museum ship.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "MuseumShip(usssale(m))",
        "CORRECT": "MuseumShip(usssalem)",
        "PREDICATES": "HeavyCruiser(x)\nMuseumShip(x)\nLastHeavyCruiserToEnterService(x)\nBuiltFor(x, y)\nServedIn(x, y)\nOpenToPublic(x)"
    },
    {
        "NLSTATEMENT": "Museum ships are open to the public.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (MuseumShip(x) → ∀x  OpenToPublic(x))",
        "CORRECT": "∀x (MuseumShip(x) → OpenToPublic(x))",
        "PREDICATES": "HeavyCruiser(x)\nMuseumShip(x)\nLastHeavyCruiserToEnterService(x)\nBuiltFor(x, y)\nServedIn(x, y)\nOpenToPublic(x)"
    },
    {
        "NLSTATEMENT": "The USS Salem is a heavy cruiser built for the United States navy.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)",
        "CORRECT": "HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)",
        "PREDICATES": "HeavyCruiser(x)\nMuseumShip(x)\nLastHeavyCruiserToEnterService(x)\nBuiltFor(x, y)\nServedIn(x, y)\nOpenToPublic(x)"
    },
    {
        "NLSTATEMENT": "Some ships that are quiet and good at sea have powerful steam turbine engines.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))",
        "CORRECT": "∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))",
        "PREDICATES": "Stabilizers(x)\nNorweigian(x)\nSteamTurbine(x)\nGoodSea(x)\nOnlyOnShips(x)\nCargoVessel(x)\nQuiet(x)\nPassenger(x)\nTSLeda(x)"
    },
    {
        "NLSTATEMENT": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))",
        "CORRECT": "∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))",
        "PREDICATES": "Stabilizers(x)\nNorweigian(x)\nSteamTurbine(x)\nGoodSea(x)\nOnlyOnShips(x)\nCargoVessel(x)\nQuiet(x)\nPassenger(x)\nTSLeda(x)"
    },
    {
        "NLSTATEMENT": " To be a good passenger and cargo vessel, ships must be quiet and good at sea.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Passenger(x) ∧ CargoVessel(x) → Qu(iet(x) ∧ GoodSea(x)))",
        "CORRECT": "∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))",
        "PREDICATES": "Stabilizers(x)\nNorweigian(x)\nSteamTurbine(x)\nGoodSea(x)\nOnlyOnShips(x)\nCargoVessel(x)\nQuiet(x)\nPassenger(x)\nTSLeda(x)"
    },
    {
        "NLSTATEMENT": "Rosa was born in Santiago. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Born(rosa, santiago)",
        "CORRECT": "Born(rosa, santiago)",
        "PREDICATES": "ConstructionSite(x)\nDaughter(x, y)\nBuildingContractor(x)\nLargestCity(x, y)\nBorn(x, y)\nWife(x, y)\nChilean(x)\nOversee(x, y)\nCapital(x, y)"
    },
    {
        "NLSTATEMENT": "Rosa was born in Santiago. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Born(rosa, santiago)",
        "CORRECT": "Born(rosa, santiago)",
        "PREDICATES": "ConstructionSite(x)\nDaughter(x, y)\nBuildingContractor(x)\nLargestCity(x, y)\nBorn(x, y)\nWife(x, y)\nChilean(x)\nOversee(x, y)\nCapital(x, y)"
    },
    {
        "NLSTATEMENT": "A building contractor is responsible for the day-to-day oversight of a construction site. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y()))",
        "CORRECT": "∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))",
        "PREDICATES": "ConstructionSite(x)\nDaughter(x, y)\nBuildingContractor(x)\nLargestCity(x, y)\nBorn(x, y)\nWife(x, y)\nChilean(x)\nOversee(x, y)\nCapital(x, y)"
    },
    {
        "NLSTATEMENT": "Tyga is a rapper.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "IsRapper(tyga)",
        "CORRECT": "IsRapper(tyga)",
        "PREDICATES": "ReleasedAlbum(x, y)\nIsOperaSinger(x)\nIsRapper(x)\nIsRapAlbum(x)"
    },
    {
        "NLSTATEMENT": "Rappers are not opera singers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (IsRapper(x) → ¬IsOperaSi(nger(x)))",
        "CORRECT": "∀x (IsRapper(x) → ¬IsOperaSinger(x))",
        "PREDICATES": "ReleasedAlbum(x, y)\nIsOperaSinger(x)\nIsRapper(x)\nIsRapAlbum(x)"
    },
    {
        "NLSTATEMENT": "Tyga is a rapper.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IsRapper(tyga)",
        "CORRECT": "IsRapper(tyga)",
        "PREDICATES": "ReleasedAlbum(x, y)\nIsOperaSinger(x)\nIsRapper(x)\nIsRapAlbum(x)"
    },
    {
        "NLSTATEMENT": "Deborah Wallace co-produced Gasland.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Co-Produced(deborahwallace, gasland)",
        "CORRECT": "Co-Produced(deborahwallace, gasland)",
        "PREDICATES": "Actress(x)\nPlaywright(x)\nFrom(x, y)\nProduced(x, y)\nBornIn(x, y)\nPlay(x)\nBasedOn(x, y)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Deborah Wallace co-produced Gasland.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Co-Produced(deborahwallace, gasland)",
        "CORRECT": "Co-Produced(deborahwallace, gasland)",
        "PREDICATES": "Actress(x)\nPlaywright(x)\nFrom(x, y)\nProduced(x, y)\nBornIn(x, y)\nPlay(x)\nBasedOn(x, y)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Deborah Wallace is a Scottish born actress, playwright and producer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "BornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)",
        "CORRECT": "BornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)",
        "PREDICATES": "Actress(x)\nPlaywright(x)\nFrom(x, y)\nProduced(x, y)\nBornIn(x, y)\nPlay(x)\nBasedOn(x, y)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Everything that eats a lot needs a large territory.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (EatsALot(x) → ∀x  NeedsLargeTerritory(x))",
        "CORRECT": "∀x (EatsALot(x) → NeedsLargeTerritory(x))",
        "PREDICATES": "EatsALot(x)\nBear(x)\nNeedsLargeTerritory(x)\nBigAnimal(x)\nTravelFar(x)"
    },
    {
        "NLSTATEMENT": "If an animal needs a large territory, then it travels far.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NeedsLargeTerritory(x) → ∀x  TravelFar(x))",
        "CORRECT": "∀x (NeedsLargeTerritory(x) → TravelFar(x))",
        "PREDICATES": "EatsALot(x)\nBear(x)\nNeedsLargeTerritory(x)\nBigAnimal(x)\nTravelFar(x)"
    },
    {
        "NLSTATEMENT": "If an animal needs a large territory, then it travels far.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NeedsLargeTerritory(x) → ∀x  TravelFar(x))",
        "CORRECT": "∀x (NeedsLargeTerritory(x) → TravelFar(x))",
        "PREDICATES": "EatsALot(x)\nBear(x)\nNeedsLargeTerritory(x)\nBigAnimal(x)\nTravelFar(x)"
    },
    {
        "NLSTATEMENT": "If someone is evil, then they are ugly.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Evil(x) → Ugly(x))",
        "CORRECT": "∀x (Evil(x) → Ugly(x))",
        "PREDICATES": "BreakLaw(x)\nKind(x)\nCriminal(x)\nUgly(x)\nColdBlood(x)\nEvil(x)"
    },
    {
        "NLSTATEMENT": "People are either kind or evil.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Kind(x) (⊕) Evil(x))",
        "CORRECT": "∀x (Kind(x) ⊕ Evil(x))",
        "PREDICATES": "BreakLaw(x)\nKind(x)\nCriminal(x)\nUgly(x)\nColdBlood(x)\nEvil(x)"
    },
    {
        "NLSTATEMENT": "People are either kind or evil.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Kind(x) ⊕ Evil(x))",
        "CORRECT": "∀x (Kind(x) ⊕ Evil(x))",
        "PREDICATES": "BreakLaw(x)\nKind(x)\nCriminal(x)\nUgly(x)\nColdBlood(x)\nEvil(x)"
    },
    {
        "NLSTATEMENT": "French bands write songs in French or in English.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (Band(x) ∧ France((x) ∧ Make(x, y) → Fre)nchSong(y) ⊕ EnglishSong(y))",
        "CORRECT": "∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))",
        "PREDICATES": "EnglishSong(x)\nMake(x, y)\nFrance(x)\nSynthPop(x)\nFrenchSong(x)\nBand(x)\nPopRock(x)\nIndiePop(x)"
    },
    {
        "NLSTATEMENT": "Aside from indie pop, pop rock and synth-pop are two other genres of music.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))",
        "CORRECT": "∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))",
        "PREDICATES": "EnglishSong(x)\nMake(x, y)\nFrance(x)\nSynthPop(x)\nFrenchSong(x)\nBand(x)\nPopRock(x)\nIndiePop(x)"
    }
]