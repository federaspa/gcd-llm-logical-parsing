[
    {
        "NLSTATEMENT": "People either regularly drink coffee or joke about being addicted to caffeine.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Drinks(x) ⊕ Jokes(x))",
        "CORRECT": "∀x (Drinks(x) ⊕ Jokes(x))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))",
        "CORRECT": "¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "People either regularly drink coffee or joke about being addicted to caffeine.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (D(rinks(x)) ⊕ Jokes(x))",
        "CORRECT": "∀x (Drinks(x) ⊕ Jokes(x))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "People either regularly drink coffee or joke about being addicted to caffeine.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Drinks(x) ⊕ Jokes(x()))",
        "CORRECT": "∀x (Drinks(x) ⊕ Jokes(x))",
        "PREDICATES": "Dependent(x)\nUnaware(x)\nJokes(x)\nStudent(x)\nDrinks(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)",
        "CORRECT": "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)",
        "PREDICATES": "Publish(x, y)\nBook(x)\nChoralConductor(x)\nCzech(x)\nLove(x, y)\nAuthor(x, y)\nSpecialize(x, y)\nMusician(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)",
        "CORRECT": "Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)",
        "PREDICATES": "Publish(x, y)\nBook(x)\nChoralConductor(x)\nCzech(x)\nLove(x, y)\nAuthor(x, y)\nSpecialize(x, y)\nMusician(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "CORRECT": "Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)",
        "PREDICATES": "Publish(x, y)\nBook(x)\nChoralConductor(x)\nCzech(x)\nLove(x, y)\nAuthor(x, y)\nSpecialize(x, y)\nMusician(x)"
    },
    {
        "NLSTATEMENT": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ",
        "CORRECT": " Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ",
        "PREDICATES": "Eel(x)\nAnimal(x)\nFish(x)\nPlant(x)\nBreathe(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "No fish are plants. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Fish (x)→ ¬ Plant (x))",
        "CORRECT": "∀x  (Fish (x)→ ¬ Plant (x))",
        "PREDICATES": "Eel(x)\nAnimal(x)\nFish(x)\nPlant(x)\nBreathe(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ",
        "CORRECT": " Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ",
        "PREDICATES": "Eel(x)\nAnimal(x)\nFish(x)\nPlant(x)\nBreathe(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "The Emmet Building is another name for the Blake McFall Company Building.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Emmet(x) ↔ Bl(ake(x)))",
        "CORRECT": "∀x (Emmet(x) ↔ Blake(x))",
        "PREDICATES": "Historic(x, y)\nBlake(x)\nFiveStory(x)\nWork(x, y)\nLocate(x, y)\nConstruct(x, y)\nBuilding(x)\nEmmet(x)"
    },
    {
        "NLSTATEMENT": "The Emmet Building is a five-story building in Portland, Oregon.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))",
        "CORRECT": "∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))",
        "PREDICATES": "Historic(x, y)\nBlake(x)\nFiveStory(x)\nWork(x, y)\nLocate(x, y)\nConstruct(x, y)\nBuilding(x)\nEmmet(x)"
    },
    {
        "NLSTATEMENT": "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Blake(x) → Building(x))",
        "CORRECT": "∀x (Blake(x) → Building(x))",
        "PREDICATES": "Historic(x, y)\nBlake(x)\nFiveStory(x)\nWork(x, y)\nLocate(x, y)\nConstruct(x, y)\nBuilding(x)\nEmmet(x)"
    },
    {
        "NLSTATEMENT": "William Dickinson supported the Portland Whigs.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Supported(williamdickinson, portlandwhigs)",
        "CORRECT": "Supported(williamdickinson, portlandwhigs)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "William Dickinson supported the Portland Whigs.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Supported(williamdickinson, portlandwhigs)",
        "CORRECT": "Supported(williamdickinson, portlandwhigs)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "William Dickinson supported the Portland Whigs.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Supported(williamdickinson, portlandwhigs)",
        "CORRECT": "Supported(williamdickinson, portlandwhigs)",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "People who supported the Portland Whigs did not get a seat in the Parliament.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))",
        "CORRECT": "∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))",
        "PREDICATES": "University(x)\nBritishPolitician(x)\nHighschool(x)\nLocatedIn(x, y)\nAttended(x, y)\nSeatInParliament(x)\nSatInHouseOfCommons(x)\nSupported(x, y)"
    },
    {
        "NLSTATEMENT": "Katya knows LanguageA. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Communicate(katya, danil)",
        "CORRECT": "¬Communicate(katya, danil)",
        "PREDICATES": "Know(x, y)\nCommunicate(x, y)\nUniversalLanguage(x)"
    },
    {
        "NLSTATEMENT": "All customers who subscribe to HBO services prefer TV series to movies. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (H(BO(x) → Pre)ferTVSeries(x))",
        "CORRECT": "∀x (HBO(x) → PreferTVSeries(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Customers either subscribe to AMC service or HBO service. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (AMC(x) ∨ HBO(x))",
        "CORRECT": "∀x (AMC(x) ∨ HBO(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Customers either subscribe to AMC service or HBO service. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (AMC(x) ∨ HBOx)",
        "CORRECT": "∀x (AMC(x) ∨ HBO(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "All customers who subscribe to HBO services prefer TV series to movies. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (HBO(x) → PreferTVSeries(x))",
        "CORRECT": "∀x (HBO(x) → PreferTVSeries(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Customers either subscribe to AMC service or HBO service. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (AMC(x) ∨ HBO(x))",
        "CORRECT": "∀x (AMC(x) ∨ HBO(x))",
        "PREDICATES": "AMC(x)\nWatchTVInCinema(x)\nCinemaEveryWeek(x)\nHBO(x)\nPreferTVSeries(x)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)",
        "CORRECT": "¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)",
        "PREDICATES": "LaLiga(x)\nMorePointsInGameBetween(x, y)\nHigherRank(x, y)\nMorePoints(x, y)"
    },
    {
        "NLSTATEMENT": "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → ∀x  HigherRank(x, y))",
        "CORRECT": "∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y))",
        "PREDICATES": "LaLiga(x)\nMorePointsInGameBetween(x, y)\nHigherRank(x, y)\nMorePoints(x, y)"
    },
    {
        "NLSTATEMENT": "All citizens of Lawton Park use the zip code 98199. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Citizenofx, lawtonPark) → Usezipcode(x, number98199)",
        "CORRECT": "∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "Lawton Park is a neighbourhood in Seattle. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Neighbourhoodin(lawtonPark, seattle)",
        "CORRECT": "Neighbourhoodin(lawtonPark, seattle)",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "Daniel uses the zip code 98199. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Usezipcode(daniel, number98199)",
        "CORRECT": "Usezipcode(daniel, number98199)",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "Tom is a citizen of Lawton Park.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Citizenof(tom, lawtonPark)",
        "CORRECT": "Citizenof(tom, lawtonPark)",
        "PREDICATES": "Usezipcode(x, y)\nNeighbourhoodin(x, y)\nCitizenof(x, y)"
    },
    {
        "NLSTATEMENT": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
        "ERRORTYPE": "no_error",
        "SKETCH": "IsLegislator(tiffanyTAlston)",
        "CORRECT": "IsLegislator(tiffanyTAlston)",
        "PREDICATES": "Suspended(x)\nIsLegislator(x)\nStealsFunds(x)"
    },
    {
        "NLSTATEMENT": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IsLegislator(tiffanyTAlston)",
        "CORRECT": "IsLegislator(tiffanyTAlston)",
        "PREDICATES": "Suspended(x)\nIsLegislator(x)\nStealsFunds(x)"
    },
    {
        "NLSTATEMENT": "If a legislator is found guilty of stealing government funds, they will be suspended from office.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))",
        "CORRECT": "∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))",
        "PREDICATES": "Suspended(x)\nIsLegislator(x)\nStealsFunds(x)"
    },
    {
        "NLSTATEMENT": "It stings to step on a stonefish.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "CORRECT": "∀x (StepOn(stonefish, x) → Sting(stonefish, x))",
        "PREDICATES": "Sting(x, y)\nCauseDeath(x)\nUseAntivenom(x)\nTreated(x)\nFish(x)\nStepOn(x, y)\nApplyHeat(x)"
    },
    {
        "NLSTATEMENT": "Stonefish is a fish.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Fish(stonefish)",
        "CORRECT": "Fish(stonefish)",
        "PREDICATES": "Sting(x, y)\nCauseDeath(x)\nUseAntivenom(x)\nTreated(x)\nFish(x)\nStepOn(x, y)\nApplyHeat(x)"
    },
    {
        "NLSTATEMENT": "Some fish may sting.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "∃x  (Fish(x) → Sting(x,y))",
        "CORRECT": "∃x ∃y (Fish(x) → Sting(x,y))",
        "PREDICATES": "Sting(x, y)\nCauseDeath(x)\nUseAntivenom(x)\nTreated(x)\nFish(x)\nStepOn(x, y)\nApplyHeat(x)"
    },
    {
        "NLSTATEMENT": "L-2021 is either in the library or has a type-c port.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Library(l2021) ⊕ TypeC(l2021) ",
        "CORRECT": "Library(l2021) ⊕ TypeC(l2021) ",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "If the monitor has a type-c port, then it is not produced by AOC.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (TypeC(x) → ¬AOC(x))",
        "CORRECT": "∀x (TypeC(x) → ¬AOC(x))",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "All monitors in the library are produced by AOC. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Library(x) → AOC(x))",
        "CORRECT": "∀x (Library(x) → AOC(x))",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "L-2021 is either in the library or has a type-c port.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Library(l2021) ⊕ TypeC(l2021) ",
        "CORRECT": "Library(l2021) ⊕ TypeC(l2021) ",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "L-2021 is either in the library or has a type-c port.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Library(l2021) ⊕ TypeC(l2021) ",
        "CORRECT": "Library(l2021) ⊕ TypeC(l2021) ",
        "PREDICATES": "LG(x)\nAOC(x)\nTypeC(x)\nLibrary(x)"
    },
    {
        "NLSTATEMENT": "All people who are vegetarian are conscious of the environment or their health.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Vegetarian(x) → Consciousx)",
        "CORRECT": "∀x (Vegetarian(x) → Conscious(x))",
        "PREDICATES": "Busy(x)\nVegetarian(x)\nFastFood(x)\nHamburgers(x)\nMeat(x)\nConscious(x)"
    },
    {
        "NLSTATEMENT": "If people are conscious about the environment or their health, then they do not go to fast food places often.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Conscious(x) → ∀x  ¬FastFood(x))",
        "CORRECT": "∀x (Conscious(x) → ¬FastFood(x))",
        "PREDICATES": "Busy(x)\nVegetarian(x)\nFastFood(x)\nHamburgers(x)\nMeat(x)\nConscious(x)"
    },
    {
        "NLSTATEMENT": "All people who are vegetarian are conscious of the environment or their health.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Vegetarian(x) → Conscious(x))",
        "CORRECT": "∀x (Vegetarian(x) → Conscious(x))",
        "PREDICATES": "Busy(x)\nVegetarian(x)\nFastFood(x)\nHamburgers(x)\nMeat(x)\nConscious(x)"
    },
    {
        "NLSTATEMENT": "Sam is doing a project.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Project(x) ∧ Do(sam, x))",
        "CORRECT": "∃x (Project(x) ∧ Do(sam, x))",
        "PREDICATES": "Use(x, y)\nPlay(x, y)\nProject(x)\nWrittenIn(x, y)\nBe(x, y)\nDo(x, y)\nSong(x)"
    },
    {
        "NLSTATEMENT": "Sam is using a Mac.",
        "ERRORTYPE": "no_error",
        "SKETCH": " Use(sam, mac)",
        "CORRECT": " Use(sam, mac)",
        "PREDICATES": "Use(x, y)\nPlay(x, y)\nProject(x)\nWrittenIn(x, y)\nBe(x, y)\nDo(x, y)\nSong(x)"
    },
    {
        "NLSTATEMENT": "If Sam does a project written in Python, he will not use a Mac.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "CORRECT": " ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "PREDICATES": "Use(x, y)\nPlay(x, y)\nProject(x)\nWrittenIn(x, y)\nBe(x, y)\nDo(x, y)\nSong(x)"
    },
    {
        "NLSTATEMENT": "Some pets are rabbits.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Pet(x) ∧ Reptile(x))",
        "CORRECT": "∃x (Pet(x) ∧ Reptile(x))",
        "PREDICATES": "HasFur(x)\nReptile(x)\nPet(x)\nRabbit(x)"
    },
    {
        "NLSTATEMENT": "All video applications are software.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (App(x) → ∀x  Software(x))",
        "CORRECT": "∀x (App(x) → Software(x))",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "TikTok is not good.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Goodtiktok",
        "CORRECT": "¬Good(tiktok)",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "If something is interesting, then it is good.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Interesting(x) → Good(x))",
        "CORRECT": "∀x (Interesting(x) → Good(x))",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "All entertainments are interesting.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Entertainment(x) → Interesting(x))",
        "CORRECT": "∀x (Entertainment(x) → Interesting(x))",
        "PREDICATES": "Program(x)\nGood(x)\nApp(x)\nInstagram(x)\nInteresting(x)\nYoutube(x)\nEntertainment(x)\nSoftware(x)"
    },
    {
        "NLSTATEMENT": "Ordinary is located northwest of Sandy Hook.",
        "ERRORTYPE": "no_error",
        "SKETCH": "NorthwestOf(ordinary, sandyhook)",
        "CORRECT": "NorthwestOf(ordinary, sandyhook)",
        "PREDICATES": "UnincorporatedCommunity(x)\nOn(x, y)\nIn(x, y)\nNorthwestOf(x, y)"
    },
    {
        "NLSTATEMENT": "Located within Elliot County, Ordinary is on Kentucky Route 32.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Inordinary, elliotcounty ∧ On(ordinary, kentuckyroute32)",
        "CORRECT": "In(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)",
        "PREDICATES": "UnincorporatedCommunity(x)\nOn(x, y)\nIn(x, y)\nNorthwestOf(x, y)"
    },
    {
        "NLSTATEMENT": "If Susan is a Harvard student, then she is a young adult.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Har(v)ardStudent(susan) → YoungAdult(susan)",
        "CORRECT": "HarvardStudent(susan) → YoungAdult(susan)",
        "PREDICATES": "YoungAdult(x)\nYaleStudent(x)\nCollegeStudent(x)\nDiligent(x)\nHarvardStudent(x)\nGoOnDiet(x)"
    },
    {
        "NLSTATEMENT": "If Susan is a Yale student, then she does not go on a diet.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "YaleStudent(susan) → ¬GoOnDiet(susan)",
        "CORRECT": "YaleStudent(susan) → ¬GoOnDiet(susan)",
        "PREDICATES": "YoungAdult(x)\nYaleStudent(x)\nCollegeStudent(x)\nDiligent(x)\nHarvardStudent(x)\nGoOnDiet(x)"
    },
    {
        "NLSTATEMENT": "Someone is either a Yale student or a Harvard student.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "CORRECT": "∀x (YaleStudent(x) ∨ HarvardStudent(x))",
        "PREDICATES": "YoungAdult(x)\nYaleStudent(x)\nCollegeStudent(x)\nDiligent(x)\nHarvardStudent(x)\nGoOnDiet(x)"
    },
    {
        "NLSTATEMENT": "Vic DiCara plays guitar and bass.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "CORRECT": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "PREDICATES": "Band(x, y)\nPlay(x, y)\nMusic(x, y)"
    },
    {
        "NLSTATEMENT": "Vic DiCara plays guitar and bass.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "CORRECT": "Play(vicdicara, guitar) ∧ Play(vicdicara, bass)",
        "PREDICATES": "Band(x, y)\nPlay(x, y)\nMusic(x, y)"
    },
    {
        "NLSTATEMENT": "Amy is good at sports or Amy is an Olympic gold medal winner.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "GoodAtSports(amy() ∨ OlympicGoldMedalWinner(amy))",
        "CORRECT": "GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)",
        "PREDICATES": "Athlete(x)\nScientist(x)\nNobelLaureate(x)\nOlympicGoldMedalWinner(x)\nGoodAtSports(x)"
    },
    {
        "NLSTATEMENT": "No scientists are good at sports.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Scientist(x) → ¬GoodAtSports(x))",
        "CORRECT": "∀x (Scientist(x) → ¬GoodAtSports(x))",
        "PREDICATES": "Athlete(x)\nScientist(x)\nNobelLaureate(x)\nOlympicGoldMedalWinner(x)\nGoodAtSports(x)"
    },
    {
        "NLSTATEMENT": "No scientists are good at sports.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Scientist(x) → ¬GoodAtSports(x))",
        "CORRECT": "∀x (Scientist(x) → ¬GoodAtSports(x))",
        "PREDICATES": "Athlete(x)\nScientist(x)\nNobelLaureate(x)\nOlympicGoldMedalWinner(x)\nGoodAtSports(x)"
    },
    {
        "NLSTATEMENT": "All apples are fruits with the color red.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Apple(x) → Red(Fru)it(x))",
        "CORRECT": "∀x (Apple(x) → RedFruit(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "All apples are fruits with the color red.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Apple(x) → RedFruit(x))",
        "CORRECT": "∀x (Apple(x) → RedFruit(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "All fruits containing a large amount of vitamin C are beneficial to people. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (VC(x) → Benefit(x))",
        "CORRECT": "∀x (VC(x) → Benefit(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)",
        "CORRECT": "¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "No fruits that are beneficial to people are on a warning list.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Benefit(x) → ¬WarningList(x))",
        "CORRECT": "∀x (Benefit(x) → ¬WarningList(x))",
        "PREDICATES": "Apple(x)\nVC(x)\nBenefit(x)\nWarningList(x)\nRedFruit(x)"
    },
    {
        "NLSTATEMENT": "People will either take a bus or drive to their destination. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Bus(x) ∨ ∀x  Drive(x))",
        "CORRECT": "∀x (Bus(x) ∨ Drive(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "No students drive to their destination. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Studen(t(x) → ¬Drive(x)))",
        "CORRECT": "∀x (Student(x) → ¬Drive(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "If a person has a high income, then he/she will not take a bus to their destination.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (HighIncome(x) → ¬Bus(x))",
        "CORRECT": "∀x (HighIncome(x) → ¬Bus(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "People will either take a bus or drive to their destination. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Bus(x) ∨ ∀x  Drive(x))",
        "CORRECT": "∀x (Bus(x) ∨ Drive(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "James has a car or works at Meta.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "HaveCars(james) ∨ Meta(james)",
        "CORRECT": "HaveCars(james) ∨ Meta(james)",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "Everyone working at Meta has a high income. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Meta(x) (→ )HighIncome(x))",
        "CORRECT": "∀x (Meta(x) → HighIncome(x))",
        "PREDICATES": "HighIncome(x)\nMeta(x)\nHaveCars(x)\nBus(x)\nStudent(x)\nDrive(x)"
    },
    {
        "NLSTATEMENT": "All students not in summer camp do not have class during the weekend. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (SummerCamp(x) → ∀x  NoClass(x))",
        "CORRECT": "∀x (SummerCamp(x) → NoClass(x))",
        "PREDICATES": "Nature(x)\nMovies(x)\nNoClass(x)\nSummerCamp(x)\nPark(x)\nFreeTime(x)"
    },
    {
        "NLSTATEMENT": "All students who go to the movies enjoy nature. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Movies(x) → Nature(x))",
        "CORRECT": "∀x (Movies(x) → Nature(x))",
        "PREDICATES": "Nature(x)\nMovies(x)\nNoClass(x)\nSummerCamp(x)\nPark(x)\nFreeTime(x)"
    },
    {
        "NLSTATEMENT": "All certified public accountants have good business sense.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CertifiedPublicAccoutant(x) → GoodBusinessSense(x))",
        "CORRECT": "∀x (CertifiedPublicAccoutant(x) → GoodBusinessSense(x))",
        "PREDICATES": "GoodBusinessSense(x)\nTelevisionStar(x)\nCertifiedPublicAccoutant(x)"
    },
    {
        "NLSTATEMENT": "All students that enjoy conducting experiments are good at planning. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Experiment(x) → ∀x  Planning(x))",
        "CORRECT": "∀x (Experiment(x) → Planning(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "All students good at chemistry enjoy conducting experiments. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Chemistry(x) → Experiment(x))",
        "CORRECT": "∀x (Chemistry(x) → Experiment(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "No student good at planning is awarded the Dean's List. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Planning(x) → ¬Awardx)",
        "CORRECT": "∀x (Planning(x) → ¬Award(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "Some students good at math are good at chemistry.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Math(x) ∧ ∃x  Chemistry(x))",
        "CORRECT": "∃x (Math(x) ∧ Chemistry(x))",
        "PREDICATES": "Math(x)\nPlanning(x)\nExperiment(x)\nChemistry(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "2Sum is recommended to novices. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Recommended(twosum) ",
        "CORRECT": "Recommended(twosum) ",
        "PREDICATES": "Easy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "Leetcode problems that are starred by more than 1 thousand users are hard.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Starred(x) → ∀x  Hard(x))",
        "CORRECT": "∀x (Starred(x) → Hard(x))",
        "PREDICATES": "Easy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "A Leetode problem is either easy or hard.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Easy(x) ⊕ Hard(x))",
        "CORRECT": "∀x (Easy(x) ⊕ Hard(x))",
        "PREDICATES": "Easy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "Sarah never borrows a car to go camping.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))",
        "CORRECT": "∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))",
        "PREDICATES": "Spend(x, y)\nBorrow(x, y)\nRent(x, y)\nDriveTo(x, y)\nOwn(x, y)\nGoesTo(x, y)\nCamping(x, y)"
    },
    {
        "NLSTATEMENT": "No preteens and other young children are getting married or have friends who are getting married.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x PreTeen(x) → ¬GettingMarried(x)",
        "CORRECT": "∀x PreTeen(x) → ¬GettingMarried(x)",
        "PREDICATES": "Celebrating(x)\nOutgoing(x)\nGettingMarried(x)\nWeddings(x)\nLargeGathering(x)\nPreTeen(x)"
    },
    {
        "NLSTATEMENT": "No preteens and other young children are getting married or have friends who are getting married.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x PreTeen(x) → ¬GettingMarried(x)",
        "CORRECT": "∀x PreTeen(x) → ¬GettingMarried(x)",
        "PREDICATES": "Celebrating(x)\nOutgoing(x)\nGettingMarried(x)\nWeddings(x)\nLargeGathering(x)\nPreTeen(x)"
    },
    {
        "NLSTATEMENT": "All people who are outgoing and very spirited are fond of large organized group functions.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x Outgoing(x) → LargeGathering(x)",
        "CORRECT": "∀x Outgoing(x) → LargeGathering(x)",
        "PREDICATES": "Celebrating(x)\nOutgoing(x)\nGettingMarried(x)\nWeddings(x)\nLargeGathering(x)\nPreTeen(x)"
    },
    {
        "NLSTATEMENT": "A U.S government official is either conservative or a Republican.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "CORRECT": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "A U.S government official is either conservative or a Republican.",
        "ERRORTYPE": "no_error",
        "SKETCH": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "CORRECT": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either Republicans or Democrats. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Republicans(x) ∨ Democrats(x))",
        "CORRECT": " ∀x (Republicans(x) ∨ Democrats(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "All Republicans are anti-abortion.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Republicans(x) → Anti-abortion(x))",
        "CORRECT": "∀x (Republicans(x) → Anti-abortion(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Either conservative or liberal. ",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Conservative(x) ∨ Liberal(x))",
        "CORRECT": " ∀x (Conservative(x) ∨ Liberal(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "A U.S government official is either conservative or a Republican.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "CORRECT": " Conservative(USGovernmentOfficial) ⊕ Republicans(USGovernmentOfficial)",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "No Democrats are conservative.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (Democratsx) → ¬Conservative(x)",
        "CORRECT": " ∀x (Democrats(x) → ¬Conservative(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "No Democrats are conservative.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Democrats(x) → ¬Conservative(x))",
        "CORRECT": " ∀x (Democrats(x) → ¬Conservative(x))",
        "PREDICATES": "abortion(x)\nConservative(x)\nLiberal(x)\nDemocrats(x)\nRepublicans(x)"
    },
    {
        "NLSTATEMENT": "Some Republicans are not conservatives.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Republican(x) ∧ ∃x  ¬Conservative(x))",
        "CORRECT": "∃x (Republican(x) ∧ ¬Conservative(x))",
        "PREDICATES": "Republican(x)\nConservative(x)\nAdvocateOfHighTariff(x)"
    },
    {
        "NLSTATEMENT": "All Knicks players are NBA players. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (KnicksPlayer(x) → NBAPlayer(x))",
        "CORRECT": "∀x (KnicksPlayer(x) → NBAPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nAthlete(x)\nKnicksPlayer(x)\nNBAPlayer(x)\nSlowRunner(x)"
    },
    {
        "NLSTATEMENT": "No athletes are slow runners. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Athlete(x) → ¬SlowRunner(x))",
        "CORRECT": "∀x (Athlete(x) → ¬SlowRunner(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nAthlete(x)\nKnicksPlayer(x)\nNBAPlayer(x)\nSlowRunner(x)"
    },
    {
        "NLSTATEMENT": "No athletes are slow runners. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Athlete(x) → ¬SlowRunner(x))",
        "CORRECT": "∀x (Athlete(x) → ¬SlowRunner(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nAthlete(x)\nKnicksPlayer(x)\nNBAPlayer(x)\nSlowRunner(x)"
    },
    {
        "NLSTATEMENT": "All pirates are bad.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Pirate(x) → Bad(x))",
        "CORRECT": "∀x (Pirate(x) → Bad(x))",
        "PREDICATES": "LoveAnimals(x)\nToddler(x)\nKid(x)\nBad(x)\nPirate(x)"
    },
    {
        "NLSTATEMENT": "If Nancy is not a pirate, then Nancy loves animals.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Pirate(n(ancy)) → LoveAnimals(nancy)",
        "CORRECT": "¬Pirate(nancy) → LoveAnimals(nancy)",
        "PREDICATES": "LoveAnimals(x)\nToddler(x)\nKid(x)\nBad(x)\nPirate(x)"
    },
    {
        "NLSTATEMENT": "All toddlers are kids.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Toddler(x) → Kidx)",
        "CORRECT": "∀x (Toddler(x) → Kid(x))",
        "PREDICATES": "LoveAnimals(x)\nToddler(x)\nKid(x)\nBad(x)\nPirate(x)"
    },
    {
        "NLSTATEMENT": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)",
        "CORRECT": "DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)",
        "PREDICATES": "FromCountry(x, y)\nIsFilm(x)\nDirectedBy(x, y)\nNomination(x, y)\nIsDocumentary(x)\nFilmmaker(x)\nFromCity(x, y)\nCityCountry(x, y)"
    },
    {
        "NLSTATEMENT": "The documentary is a type of films.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (IsDocumentary(x) → IsFilm(x))",
        "CORRECT": "∀x (IsDocumentary(x) → IsFilm(x))",
        "PREDICATES": "FromCountry(x, y)\nIsFilm(x)\nDirectedBy(x, y)\nNomination(x, y)\nIsDocumentary(x)\nFilmmaker(x)\nFromCity(x, y)\nCityCountry(x, y)"
    },
    {
        "NLSTATEMENT": "The documentary is a type of films.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (IsDocumentary(x) → IsFilm((x)))",
        "CORRECT": "∀x (IsDocumentary(x) → IsFilm(x))",
        "PREDICATES": "FromCountry(x, y)\nIsFilm(x)\nDirectedBy(x, y)\nNomination(x, y)\nIsDocumentary(x)\nFilmmaker(x)\nFromCity(x, y)\nCityCountry(x, y)"
    },
    {
        "NLSTATEMENT": "All bears in zoos are not wild. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Bear(x) (∧ InZoo(x)) → ¬Wild(x)))",
        "CORRECT": "∀x ((Bear(x) ∧ InZoo(x)) → ¬Wild(x))",
        "PREDICATES": "Bear(x)\nWild(x)\nInZoo(x)"
    },
    {
        "NLSTATEMENT": "Leaders are either a king or a queen.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Leader(x) → King(x) ⊕ Queen(x))",
        "CORRECT": "∀x (Leader(x) → King(x) ⊕ Queen(x))",
        "PREDICATES": "Leader(x)\nFemale(x)\nMale(x)\nKing(x)\nInMonarchy(x)\nQueen(x)"
    },
    {
        "NLSTATEMENT": "Queens are female.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Queen(x) → ∀x  Female(x))",
        "CORRECT": "∀x (Queen(x) → Female(x))",
        "PREDICATES": "Leader(x)\nFemale(x)\nMale(x)\nKing(x)\nInMonarchy(x)\nQueen(x)"
    },
    {
        "NLSTATEMENT": "Kings are male. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (King(x) → Male(x))",
        "CORRECT": "∀x (King(x) → Male(x))",
        "PREDICATES": "Leader(x)\nFemale(x)\nMale(x)\nKing(x)\nInMonarchy(x)\nQueen(x)"
    },
    {
        "NLSTATEMENT": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(WorkHo(me(clay) ∧ Matcha(c)lay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))",
        "CORRECT": "(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))",
        "PREDICATES": "Late(x)\nJobs(x)\nWorkHome(x)\nCalifornia(x)\nCelebrities(x)\nMatcha(x)"
    },
    {
        "NLSTATEMENT": "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Jobs(x) → Celebrities(x))",
        "CORRECT": "∀x (Jobs(x) → Celebrities(x))",
        "PREDICATES": "Late(x)\nJobs(x)\nWorkHome(x)\nCalifornia(x)\nCelebrities(x)\nMatcha(x)"
    },
    {
        "NLSTATEMENT": "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (California(x) → Matcha(x))",
        "CORRECT": "∀x (California(x) → Matcha(x))",
        "PREDICATES": "Late(x)\nJobs(x)\nWorkHome(x)\nCalifornia(x)\nCelebrities(x)\nMatcha(x)"
    },
    {
        "NLSTATEMENT": "Thomas Barber played in the Football League for Aston Villa.",
        "ERRORTYPE": "no_error",
        "SKETCH": "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
        "CORRECT": "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)",
        "PREDICATES": "ProfessionalFootballer(x)\nPlayedInTheFootballLeagueFor(x, y)\nPlayedAs(x, y)\nScoredTheWinningGoalIn(x, y)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Thomas Barber played as a half back and inside left.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAsthomasBarber, anInsideLeft",
        "CORRECT": "PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)",
        "PREDICATES": "ProfessionalFootballer(x)\nPlayedInTheFootballLeagueFor(x, y)\nPlayedAs(x, y)\nScoredTheWinningGoalIn(x, y)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Thomas Barber played as a half back and inside left.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAsthomasBarber, anInsideLeft",
        "CORRECT": "PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)",
        "PREDICATES": "ProfessionalFootballer(x)\nPlayedInTheFootballLeagueFor(x, y)\nPlayedAs(x, y)\nScoredTheWinningGoalIn(x, y)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "If people play the instrument in the concert, then he is good at playing this kind of instrument.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀y ∀x (Pla(yInCon)cert(y, x) → GoodAt(y, x))",
        "CORRECT": "∀y ∀x (PlayInConcert(y, x) → GoodAt(y, x))",
        "PREDICATES": "Play(x, y)\nPlayInConcert(x, y)\nPlayerInConcert(x)\nGoodAt(x, y)"
    },
    {
        "NLSTATEMENT": "Peter plays piano, violin, and saxophone.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Play(peter, piano) ∧Play(peter, violin)",
        "CORRECT": "Play(peter, piano) ∧Play(peter, violin)",
        "PREDICATES": "Play(x, y)\nPlayInConcert(x, y)\nPlayerInConcert(x)\nGoodAt(x, y)"
    },
    {
        "NLSTATEMENT": "Oliver plays a different musical instrument from Peter in the concert.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬PlayInConcert(oliver, piano)",
        "CORRECT": "¬PlayInConcert(oliver, piano)",
        "PREDICATES": "Play(x, y)\nPlayInConcert(x, y)\nPlayerInConcert(x)\nGoodAt(x, y)"
    },
    {
        "NLSTATEMENT": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))",
        "CORRECT": "(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))",
        "PREDICATES": "CanSwim(x)\nTravelsOnLand(x)\nSplashes(x)\nCanWalk(x)\nGoesUnderwater(x)\nEnjoysWater(x)\nEnjoysBasking(x)"
    },
    {
        "NLSTATEMENT": "If something can go underwater, then it enjoys water.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (GoesUnderwater(x) → ∀x  EnjoysWater(x))",
        "CORRECT": "∀x (GoesUnderwater(x) → EnjoysWater(x))",
        "PREDICATES": "CanSwim(x)\nTravelsOnLand(x)\nSplashes(x)\nCanWalk(x)\nGoesUnderwater(x)\nEnjoysWater(x)\nEnjoysBasking(x)"
    },
    {
        "NLSTATEMENT": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))",
        "CORRECT": "(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))",
        "PREDICATES": "CanSwim(x)\nTravelsOnLand(x)\nSplashes(x)\nCanWalk(x)\nGoesUnderwater(x)\nEnjoysWater(x)\nEnjoysBasking(x)"
    },
    {
        "NLSTATEMENT": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
        "ERRORTYPE": "no_error",
        "SKETCH": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "CORRECT": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCellscancerBiology",
        "CORRECT": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "CORRECT": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "P values are thresholds for belief, not metrics of effect. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))",
        "CORRECT": " ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))",
        "PREDICATES": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(x)\nThresholdsForBelief(x)\nPValue(x, y)\nMetricsOfEffect(x)\nPValue(x)"
    },
    {
        "NLSTATEMENT": "All dispensable things are environment-friendly. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Dispensable(x) → EnvironmentFriendly(x))",
        "CORRECT": "∀x (Dispensable(x) → EnvironmentFriendly(x))",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All environment-friendly things are good.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (EnvironmentFriendly(x) → Good(x))",
        "CORRECT": "∀x (EnvironmentFriendly(x) → Good(x))",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "All environment-friendly things are good.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (EnvironmentFriendly(x) → Good(x))",
        "CORRECT": "∀x (EnvironmentFriendly(x) → Good(x))",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "A worksheet is either paper or is environment-friendly.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)",
        "CORRECT": "Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)",
        "PREDICATES": "Woodware(x)\nGood(x)\nBad(x)\nDispensable(x)\nEnvironmentFriendly(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "No reptile has fur.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Reptile(x) → ¬HasFur(x))",
        "CORRECT": "∀x (Reptile(x) → ¬HasFur(x))",
        "PREDICATES": "HasFur(x)\nSnake(x)\nReptile(x)"
    },
    {
        "NLSTATEMENT": "All buildings in Manhattans are high. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Located(manhattans, x) → High(x))",
        "CORRECT": "∀x (Located(manhattans, x) → High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nBloombergLogo(x)\nLocated(x, y)"
    },
    {
        "NLSTATEMENT": "All buildings in Manhattans are high. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Located(manhattans, x) → ∀x  High(x))",
        "CORRECT": "∀x (Located(manhattans, x) → High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nBloombergLogo(x)\nLocated(x, y)"
    },
    {
        "NLSTATEMENT": "Tower A is managed by the Yale Housing.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "YaleHousing(tower-a)",
        "CORRECT": "YaleHousing(tower-a)",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nBloombergLogo(x)\nLocated(x, y)"
    },
    {
        "NLSTATEMENT": "Either an animal is a bird or it eats other animals.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Bird(x) ∨ EatOtherAnimals(x))",
        "CORRECT": "∀x (Bird(x) ∨ EatOtherAnimals(x))",
        "PREDICATES": "Carnivore(x)\nReptile(x)\nLizard(x)\nBird(x)\nColdBlooded(x)\nEatOtherAnimals(x)"
    },
    {
        "NLSTATEMENT": "Either an animal is a bird or it eats other animals.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Bird(x) ∨ EatOtherAnimals(x))",
        "CORRECT": "∀x (Bird(x) ∨ EatOtherAnimals(x))",
        "PREDICATES": "Carnivore(x)\nReptile(x)\nLizard(x)\nBird(x)\nColdBlooded(x)\nEatOtherAnimals(x)"
    },
    {
        "NLSTATEMENT": "All reptiles are cold-blooded.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Reptile(x) → ColdBlooded(x))",
        "CORRECT": "∀x (Reptile(x) → ColdBlooded(x))",
        "PREDICATES": "Carnivore(x)\nReptile(x)\nLizard(x)\nBird(x)\nColdBlooded(x)\nEatOtherAnimals(x)"
    },
    {
        "NLSTATEMENT": "Ambiortus is a prehistoric bird genus.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Prehistoric(ambiortus) ∧ BirdGenusambiortus",
        "CORRECT": "Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "Ambiorus Dementjevi is the only known species of Ambiortus.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Species(x, ambiortus) → ∀x  AmbiortusDementjevi(x))",
        "CORRECT": "∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "Yevgeny Kurochkin was the discoverer of Ambiortus.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Discoveredyevgenykurochkin, ambiortus",
        "CORRECT": "Discovered(yevgenykurochkin, ambiortus)",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "Yevgeny Kurochkin was the discoverer of Ambiortus.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Discovered(yevgenykurochkin, ambiortus)",
        "CORRECT": "Discovered(yevgenykurochkin, ambiortus)",
        "PREDICATES": "Prehistoric(x)\nBirdGenus(x)\nSpecies(x, y)\nLived(x, y)\nDiscovered(x, y)\nAmbiortusDementjevi(x)"
    },
    {
        "NLSTATEMENT": "Everyone that can throw a football can throw a football with a spiral.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "CORRECT": "∀x (ThrowFootball(x) → ThrowFootballSpiral(x))",
        "PREDICATES": "InShape(x)\nThrowFootball(x)\nThrowFootballSpiral(x)\nTall(x)\nPlayFootball(x)\nBasketballPlayer(x)\nUseFootball(x)"
    },
    {
        "NLSTATEMENT": "Every basketball player is tall.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BasketballPlayer(x) → ∀x  Tall(x))",
        "CORRECT": "∀x (BasketballPlayer(x) → Tall(x))",
        "PREDICATES": "InShape(x)\nThrowFootball(x)\nThrowFootballSpiral(x)\nTall(x)\nPlayFootball(x)\nBasketballPlayer(x)\nUseFootball(x)"
    },
    {
        "NLSTATEMENT": "Everyone that uses a football can throw a football.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (UseFootball(x) → ThrowFootball(x))",
        "CORRECT": "∀x (UseFootball(x) → ThrowFootball(x))",
        "PREDICATES": "InShape(x)\nThrowFootball(x)\nThrowFootballSpiral(x)\nTall(x)\nPlayFootball(x)\nBasketballPlayer(x)\nUseFootball(x)"
    },
    {
        "NLSTATEMENT": "Fort Carillon was located in New France.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LocatedIn(fortcarillon, newfrance)",
        "CORRECT": "LocatedIn(fortcarillon, newfrance)",
        "PREDICATES": "LocatedIn(x, y)\nCurrentName(x, y)\nBuilt(x, y)"
    },
    {
        "NLSTATEMENT": "New France is not in Europe.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬LocatedIn(newfrance, europe)",
        "CORRECT": "¬LocatedIn(newfrance, europe)",
        "PREDICATES": "LocatedIn(x, y)\nCurrentName(x, y)\nBuilt(x, y)"
    },
    {
        "NLSTATEMENT": "New France is not in Europe.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬LocatedIn(newfrance, europe)",
        "CORRECT": "¬LocatedIn(newfrance, europe)",
        "PREDICATES": "LocatedIn(x, y)\nCurrentName(x, y)\nBuilt(x, y)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.",
        "ERRORTYPE": "no_error",
        "SKETCH": "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)",
        "CORRECT": "(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All videos are visual. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Video(x) → Visual(x))",
        "CORRECT": "∀x (Video(x) → Visual(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All videos are visual. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Video(x) → Visual(x))",
        "CORRECT": "∀x (Video(x) → Visual(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All movies are videos.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Movie(x) → Video(x))",
        "CORRECT": "∀x (Movie(x) → Video(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All sci-fi movies are movies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (ScifiMoviex) → Movie(x)",
        "CORRECT": "∀x (ScifiMovie(x) → Movie(x))",
        "PREDICATES": "Visual(x)\nScifiMovie(x)\nFolkSong(x)\nMovie(x)\nVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All extroverts are overtly expressive.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Extroverts(x) → OvertlyExpressive(x))",
        "CORRECT": "∀x (Extroverts(x) → OvertlyExpressive(x))",
        "PREDICATES": "Extroverts(x)\nOvertlyExpressive(x)\nLikeToTalkToStrangers(x)\nShyAndReticentPerson(x)\nIntroverts(x)"
    },
    {
        "NLSTATEMENT": "People are either extroverts or introverts.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (Extroverts(x) ∨ Introverts(x)) ",
        "CORRECT": " ∀x (Extroverts(x) ∨ Introverts(x)) ",
        "PREDICATES": "Extroverts(x)\nOvertlyExpressive(x)\nLikeToTalkToStrangers(x)\nShyAndReticentPerson(x)\nIntroverts(x)"
    },
    {
        "NLSTATEMENT": "If someone is an introvert, then they are shy and reticent. ",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Introverts(x) → ShyAndReticentPerson(x))",
        "CORRECT": " ∀x (Introverts(x) → ShyAndReticentPerson(x))",
        "PREDICATES": "Extroverts(x)\nOvertlyExpressive(x)\nLikeToTalkToStrangers(x)\nShyAndReticentPerson(x)\nIntroverts(x)"
    },
    {
        "NLSTATEMENT": "No low-scoring players are top players in the league.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (LowScore(x) → ¬TopPlayer(x))",
        "CORRECT": "∀x (LowScore(x) → ¬TopPlayer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ThreePointer(x) → TwoPointer(x))",
        "CORRECT": "∀x (ThreePointer(x) → TwoPointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "CORRECT": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "CORRECT": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (TopPlayer(x) ∨ ThreePointer(x))",
        "CORRECT": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (TwoPointer(x) → ¬BadMid(x()))",
        "CORRECT": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "CORRECT": "∀x (TopPlayer(x) ∨ ThreePointer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No low-scoring players are top players in the league.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (LowScore(x) → ∀x  ¬TopPlayer(x))",
        "CORRECT": "∀x (LowScore(x) → ¬TopPlayer(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "No players who are solid at shooting 2-pointers are bad at mid-range shots.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (TwoPointer(x) → ¬BadMid(x))",
        "CORRECT": "∀x (TwoPointer(x) → ¬BadMid(x))",
        "PREDICATES": "TopPlayer(x)\nTwoPointer(x)\nThreePointer(x)\nLowScore(x)\nBadMid(x)"
    },
    {
        "NLSTATEMENT": "Mushrooms are fungi.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Mushroomx) → Fungi(x)",
        "CORRECT": "∀x (Mushroom(x) → Fungi(x))",
        "PREDICATES": "Plant(x)\nMushroom(x)\nFungi(x)"
    },
    {
        "NLSTATEMENT": "And some streets are roads.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Street(x) ∧ Road(x))",
        "CORRECT": "∃x (Street(x) ∧ Road(x))",
        "PREDICATES": "Street(x)\nRoad(x)\nClean(x)"
    },
    {
        "NLSTATEMENT": "People on long flights are uncomfortable unless they're in first class",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))",
        "CORRECT": "∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))",
        "PREDICATES": "Uncomfortable(x)\nInFirstClass(x)\nOn(x, y)\nTravelingTo(x, y)\nTravelingFrom(x, y)\nOnLongFlight(x)"
    },
    {
        "NLSTATEMENT": "If a musician is not famous, that musician will not make a lot of money.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))",
        "CORRECT": "∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))",
        "PREDICATES": "Famous(x)\nSinger(x)\nBusy(x)\nMusician(x)\nWriter(x)\nMakeMoney(x)"
    },
    {
        "NLSTATEMENT": "Singh Kaur is a musician and famous.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Musician(singhKaur) ∧ Famous(singhKaur)",
        "CORRECT": "Musician(singhKaur) ∧ Famous(singhKaur)",
        "PREDICATES": "Famous(x)\nSinger(x)\nBusy(x)\nMusician(x)\nWriter(x)\nMakeMoney(x)"
    },
    {
        "NLSTATEMENT": "Musicians have very busy lives.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Musicianx) → Busy(x)",
        "CORRECT": "∀x (Musician(x) → Busy(x))",
        "PREDICATES": "Famous(x)\nSinger(x)\nBusy(x)\nMusician(x)\nWriter(x)\nMakeMoney(x)"
    },
    {
        "NLSTATEMENT": "Each building is tall. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Building(x) → ¬Tall(x))",
        "CORRECT": "∀x (Building(x) → ¬Tall(x))",
        "PREDICATES": "Building(x)\nTall(x)\nHasHeight(x)"
    },
    {
        "NLSTATEMENT": "Garfield hates Odie.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Hate(garfield, odie)",
        "CORRECT": "Hate(garfield, odie)",
        "PREDICATES": "ShareHome(x, y)\nLikeLasagna(x)\nBeFat(x)\nHate(x, y)\nBeOrange(x)\nBeChildish(x)\nCat(x)\nMainCharacterGarfield(x)\nPet(x, y)\nBePossessive(x)"
    },
    {
        "NLSTATEMENT": "Hulu is a goat or a human.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Goat(hulu) ∨ Human(hulu)",
        "CORRECT": "Goat(hulu) ∨ Human(hulu)",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "All goats are animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Goat(x) → ∀x  Animal(x))",
        "CORRECT": "∀x (Goat(x) → Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "A thing is either plant or animal.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Plant(x) ∨ ∀x  Animal(x))",
        "CORRECT": "∀x (Plant(x) ∨ Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "No dirt is an animal.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Dirt(x) → ¬Animal(x))",
        "CORRECT": "∀x (Dirt(x) → ¬Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "A thing is either plant or animal.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Plant(x) ∨ Animal(x))",
        "CORRECT": "∀x (Plant(x) ∨ Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "All goats are animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Goat(x) → ∀x  Animal(x))",
        "CORRECT": "∀x (Goat(x) → Animal(x))",
        "PREDICATES": "Human(x)\nDirt(x)\nEat(x)\nAnimal(x)\nGoat(x)\nPlant(x)"
    },
    {
        "NLSTATEMENT": "The Controlled Substances Act was an act passed in 1971.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstance(sAct))",
        "CORRECT": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "PREDICATES": "PassedIn(x, y)\nHarmful(x)\nPreventsHarm(x)\nBeneficial(x)\nDrugs(x)\nChemicalEndangerment(x)\nAct(x)\nExposedToControlledSubstance(x, y)\nControlledSubstances(x)"
    },
    {
        "NLSTATEMENT": "The Controlled Substances Act was an act passed in 1971.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "CORRECT": "PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)",
        "PREDICATES": "PassedIn(x, y)\nHarmful(x)\nPreventsHarm(x)\nBeneficial(x)\nDrugs(x)\nChemicalEndangerment(x)\nAct(x)\nExposedToControlledSubstance(x, y)\nControlledSubstances(x)"
    },
    {
        "NLSTATEMENT": "A controlled substance is a drug.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ControlledSubstances(x) → Drugs(x))",
        "CORRECT": "∀x (ControlledSubstances(x) → Drugs(x))",
        "PREDICATES": "PassedIn(x, y)\nHarmful(x)\nPreventsHarm(x)\nBeneficial(x)\nDrugs(x)\nChemicalEndangerment(x)\nAct(x)\nExposedToControlledSubstance(x, y)\nControlledSubstances(x)"
    },
    {
        "NLSTATEMENT": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOt(hers(markZuckerberg) → ¬Risk-ave)rse(markZuckerberg)",
        "CORRECT": " ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)",
        "PREDICATES": "WorkAtCorporateJobs(x)\nEntrepreneurs(x)\naverse(x)\nHateWorkingForOthers(x)\nStartingANewCompany(x)"
    },
    {
        "NLSTATEMENT": "No people who work at corporate jobs are starting a new company.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))",
        "CORRECT": "∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))",
        "PREDICATES": "WorkAtCorporateJobs(x)\nEntrepreneurs(x)\naverse(x)\nHateWorkingForOthers(x)\nStartingANewCompany(x)"
    },
    {
        "NLSTATEMENT": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)",
        "CORRECT": " ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)",
        "PREDICATES": "WorkAtCorporateJobs(x)\nEntrepreneurs(x)\naverse(x)\nHateWorkingForOthers(x)\nStartingANewCompany(x)"
    },
    {
        "NLSTATEMENT": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)",
        "CORRECT": "(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)",
        "PREDICATES": "Cook(x)\nRun(x)\nSmokey(x)\nKitchen(x)\nUp(x)\nDown(x)"
    },
    {
        "NLSTATEMENT": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)",
        "CORRECT": "(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)",
        "PREDICATES": "Cook(x)\nRun(x)\nSmokey(x)\nKitchen(x)\nUp(x)\nDown(x)"
    },
    {
        "NLSTATEMENT": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)",
        "CORRECT": "(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)",
        "PREDICATES": "Cook(x)\nRun(x)\nSmokey(x)\nKitchen(x)\nUp(x)\nDown(x)"
    },
    {
        "NLSTATEMENT": "If place A is located in place B and place B is located in place C, then place A is located in place C.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ∀z ∀y ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))",
        "CORRECT": "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))",
        "PREDICATES": "Locate(x, y)\nHighlyDeveloped(x)"
    },
    {
        "NLSTATEMENT": "New York City is Located in the United States of America.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Locate(nyc, usa)",
        "CORRECT": "Locate(nyc, usa)",
        "PREDICATES": "Locate(x, y)\nHighlyDeveloped(x)"
    },
    {
        "NLSTATEMENT": "United States of America is part of North America.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Locate(usa, northAmerica)",
        "CORRECT": "Locate(usa, northAmerica)",
        "PREDICATES": "Locate(x, y)\nHighlyDeveloped(x)"
    },
    {
        "NLSTATEMENT": "Callus 4 is a poem that was written by the ancient Roman writer Catullus.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)",
        "CORRECT": "Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)",
        "PREDICATES": "Poem(x)\nWrittenBy(x, y)\nAgingAnalogy(x)\nWaves(x)\nRoman(x)\nRetirementShip(x)\nLambic(x)"
    },
    {
        "NLSTATEMENT": "Callus 4 is a story about the retirement of a well-traveled ship.",
        "ERRORTYPE": "no_error",
        "SKETCH": "RetirementShip(callus4)",
        "CORRECT": "RetirementShip(callus4)",
        "PREDICATES": "Poem(x)\nWrittenBy(x, y)\nAgingAnalogy(x)\nWaves(x)\nRoman(x)\nRetirementShip(x)\nLambic(x)"
    },
    {
        "NLSTATEMENT": "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Poem(callus4) → Lambic(callus4) ∧ Waves(callus4)",
        "CORRECT": "Poem(callus4) → Lambic(callus4) ∧ Waves(callus4)",
        "PREDICATES": "Poem(x)\nWrittenBy(x, y)\nAgingAnalogy(x)\nWaves(x)\nRoman(x)\nRetirementShip(x)\nLambic(x)"
    },
    {
        "NLSTATEMENT": "In 2016, a new television series named Westworld debuted on HBO.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Debut(westworld, yea(r20)16)",
        "CORRECT": "Debut(westworld, year2016)",
        "PREDICATES": "TVSeries(x)\nScienceFictionThriller(x)\nDebut(x, y)\nDirect(x, y)\nAdapt(x, y)\nWrite(x, y)\nAbout(x, y)\nProduce(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Westworld is an American science fiction-thriller TV series.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)",
        "CORRECT": "TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)",
        "PREDICATES": "TVSeries(x)\nScienceFictionThriller(x)\nDebut(x, y)\nDirect(x, y)\nAdapt(x, y)\nWrite(x, y)\nAbout(x, y)\nProduce(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "CORRECT": "Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)",
        "PREDICATES": "Country(x)\nWon(x, y)\nFewerGoldMedalsThan(x, y)\nPlaced(x, y)\nSecondToBe(x, y)\nHeldIn(x, y)"
    },
    {
        "NLSTATEMENT": "87 countries won at least one medal during the 2008 Games.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Country(x) ∧ ∃x  Won(x, medal))",
        "CORRECT": "∃x (Country(x) ∧ Won(x, medal))",
        "PREDICATES": "Country(x)\nWon(x, y)\nFewerGoldMedalsThan(x, y)\nPlaced(x, y)\nSecondToBe(x, y)\nHeldIn(x, y)"
    },
    {
        "NLSTATEMENT": "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Placedrussia, thirdingoldmedals",
        "CORRECT": "Placed(russia, thirdingoldmedals)",
        "PREDICATES": "Country(x)\nWon(x, y)\nFewerGoldMedalsThan(x, y)\nPlaced(x, y)\nSecondToBe(x, y)\nHeldIn(x, y)"
    },
    {
        "NLSTATEMENT": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.",
        "ERRORTYPE": "no_error",
        "SKETCH": "DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)",
        "CORRECT": "DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)",
        "PREDICATES": "DistrictIn(x, y)\nCity(x)"
    },
    {
        "NLSTATEMENT": "Yangshuo is not a district in Guilin. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬DistrictIn(yangshuo, guilin)",
        "CORRECT": "¬DistrictIn(yangshuo, guilin)",
        "PREDICATES": "DistrictIn(x, y)\nCity(x)"
    },
    {
        "NLSTATEMENT": "Yangshuo is not a district in Guilin. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬DistrictIn(yangshuo, guilin)",
        "CORRECT": "¬DistrictIn(yangshuo, guilin)",
        "PREDICATES": "DistrictIn(x, y)\nCity(x)"
    },
    {
        "NLSTATEMENT": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Takeout(x) → Garden(x))",
        "CORRECT": "∀x (Takeout(x) → Garden(x))",
        "PREDICATES": "Homecooked(x)\nGoingOut(x)\nProfessional(x)\nSpace(x)\nGarden(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x( (Takeout(x) → Gar)den(x))",
        "CORRECT": "∀x (Takeout(x) → Garden(x))",
        "PREDICATES": "Homecooked(x)\nGoingOut(x)\nProfessional(x)\nSpace(x)\nGarden(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "If people are young working professionals who live in large cities, then they do not have ample space.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Professional(x) → ¬Space(x))",
        "CORRECT": "∀x (Professional(x) → ¬Space(x))",
        "PREDICATES": "Homecooked(x)\nGoingOut(x)\nProfessional(x)\nSpace(x)\nGarden(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "All devices that connect to the company's wifi are easy to operate. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Wifi(x) → EasyToOperate(x))",
        "CORRECT": "∀x (Wifi(x) → EasyToOperate(x))",
        "PREDICATES": "Controlled(x)\nCompany(x)\nWifi(x)\nGoogleHome(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to employees are connected to the company's wifi. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Employee(x) → Wifi(x))",
        "CORRECT": "∀x (Employee(x) → Wifi(x))",
        "PREDICATES": "Controlled(x)\nCompany(x)\nWifi(x)\nGoogleHome(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "IPod1 belongs to employees. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Employee(iPod1)",
        "CORRECT": "Employee(iPod1)",
        "PREDICATES": "Controlled(x)\nCompany(x)\nWifi(x)\nGoogleHome(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "No touring musicians are permanent members of an orchestra.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Orchestra(x) → ¬Touring(x))",
        "CORRECT": "∀x (Orchestra(x) → ¬Touring(x))",
        "PREDICATES": "Capable(x)\nUnique(x)\nTouring(x)\nInteresting(x)\nOrchestra(x)"
    },
    {
        "NLSTATEMENT": "Musicians are either permanent members of an orchestra or have a unique musical voice or style.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Orchestra(x) ⊕ Unique(x))",
        "CORRECT": "∀x (Orchestra(x) ⊕ Unique(x))",
        "PREDICATES": "Capable(x)\nUnique(x)\nTouring(x)\nInteresting(x)\nOrchestra(x)"
    },
    {
        "NLSTATEMENT": "No touring musicians are permanent members of an orchestra.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Orchestra(x) → ¬Touring(x))",
        "CORRECT": "∀x (Orchestra(x) → ¬Touring(x))",
        "PREDICATES": "Capable(x)\nUnique(x)\nTouring(x)\nInteresting(x)\nOrchestra(x)"
    },
    {
        "NLSTATEMENT": "If someone flies, then they are cool.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Fly(x) → ∀x  Cool(x))",
        "CORRECT": "∀x (Fly(x) → Cool(x))",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "If someone flies, then they are cool.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Fly(x) → Cool(x))",
        "CORRECT": "∀x (Fly(x) → Cool(x))",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "Potter is a wizard and flies.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Wizard(potter) ∧ Fly(potter)",
        "CORRECT": "Wizard(potter) ∧ Fly(potter)",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "Every person that knows magic can fly.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (KnowMagic(x) → Fly(x))",
        "CORRECT": "∀x (KnowMagic(x) → Fly(x))",
        "PREDICATES": "Wizard(x)\nCool(x)\nKnowMagic(x)\nFly(x)\nAngry(x)\nYell(x)"
    },
    {
        "NLSTATEMENT": "All produced in China are labeled. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (China(x) → Labeledx)",
        "CORRECT": "∀x (China(x) → Labeled(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "G-910 is either displayed on the homepage or cheaper.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(DisplayedInHomepag(e(g910) ⊕ Cheap)er(g910))",
        "CORRECT": "¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "All produced in the US are sold in the US. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (US(x) → SoldInUS(x))",
        "CORRECT": "∀x (US(x) → SoldInUS(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "All produced in China are labeled. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (China(x) → Labeled(x))",
        "CORRECT": "∀x (China(x) → Labeled(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "All produced in China are labeled. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (China(x) → ∀x  Labeled(x))",
        "CORRECT": "∀x (China(x) → Labeled(x))",
        "PREDICATES": "SoldInUS(x)\nSoldInWalmart(x)\nLabeled(x)\nChina(x)\nCheaper(x)\nReturnedByCustomer(x)\nUS(x)\nDisplayedInHomepage(x)"
    },
    {
        "NLSTATEMENT": "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → ¬DailyMail(marcy ∨ ¬Amazon(marcy))",
        "CORRECT": "¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → (¬DailyMail(marcy) ∨ ¬Amazon(marcy))",
        "PREDICATES": "Environmental(x)\nDailyMail(x)\nAmazon(x)\nSaveMoney(x)\nNeighborhood(x)\nSolar(x)"
    },
    {
        "NLSTATEMENT": "People either order a lot of Amazon packages or are environmentally conscious.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Amazon(x) ⊕ Environmental((x)))",
        "CORRECT": "∀x (Amazon(x) ⊕ Environmental(x))",
        "PREDICATES": "Environmental(x)\nDailyMail(x)\nAmazon(x)\nSaveMoney(x)\nNeighborhood(x)\nSolar(x)"
    },
    {
        "NLSTATEMENT": "In Indonesia, the prosecutor only personally investigates cases of some special crimes.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∃y (Country(indonesia) ∧ ∃x  Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))",
        "CORRECT": "∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))",
        "PREDICATES": "Satisfactory(x)\nInvestigatePersonally(x, y)\nEvidence(x)\nCountry(x)\nCrime(x)\nProsecutor(x)\nPoliceCompInves(x)\nHandToProsecutor(x, y)\nUnsatisfactory(x)\nProsecuteTheOffender(x, y)"
    },
    {
        "NLSTATEMENT": "Indonesia is a country.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Countryindonesia",
        "CORRECT": "Country(indonesia)",
        "PREDICATES": "Satisfactory(x)\nInvestigatePersonally(x, y)\nEvidence(x)\nCountry(x)\nCrime(x)\nProsecutor(x)\nPoliceCompInves(x)\nHandToProsecutor(x, y)\nUnsatisfactory(x)\nProsecuteTheOffender(x, y)"
    },
    {
        "NLSTATEMENT": "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ∀y  ProsecuteTheOffender(x, y))",
        "CORRECT": "∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))",
        "PREDICATES": "Satisfactory(x)\nInvestigatePersonally(x, y)\nEvidence(x)\nCountry(x)\nCrime(x)\nProsecutor(x)\nPoliceCompInves(x)\nHandToProsecutor(x, y)\nUnsatisfactory(x)\nProsecuteTheOffender(x, y)"
    },
    {
        "NLSTATEMENT": "Moonwatch is not a digital watch or an automatic.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬DigitalWatch(moonwatch) ⊕ AutomaticWatchmoonwatch",
        "CORRECT": "¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "No watch that is battery-powered is automatic.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BatteryPoweredWatch(x) → ∀x  ¬AutomaticWatch(x))",
        "CORRECT": "∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "All digital watches are battery-powered.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (DigitalWatch(x) → ∀x  BatteryPoweredWatch(x))",
        "CORRECT": "∀x (DigitalWatch(x) → BatteryPoweredWatch(x))",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "All smart watches are digital.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SmartWatch(x) → DigitalWatch(x))",
        "CORRECT": "∀x (SmartWatch(x) → DigitalWatch(x))",
        "PREDICATES": "AutomaticWatch(x)\nMechanicalWatch(x)\nDigitalWatch(x)\nBatteryPoweredWatch(x)\nSmartWatch(x)"
    },
    {
        "NLSTATEMENT": "If exports fall sharply, the national currency cannot be in this country.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ExportFall(x) → ¬StongCurr(x))",
        "CORRECT": "∀x (ExportFall(x) → ¬StongCurr(x))",
        "PREDICATES": "ExRate(x)\nStongCurr(x)\nExportFall(x)\nEffMonPolicy(x)\nEmbargo(x)\nInfControl(x)"
    },
    {
        "NLSTATEMENT": "All videos aired on Video Gag are in French.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (VideoGag(x) (→ )AirsWeekly(x) ∧ French(x))",
        "CORRECT": "∀x (VideoGag(x) → AirsWeekly(x) ∧ French(x))",
        "PREDICATES": "VideoGag(x)\nAirsWeekly(x)\nFrench(x)\nFunnyVideos(x)\nChannelTF1(x)\nFrenchTelevision(x)"
    },
    {
        "NLSTATEMENT": "Video Gag is a French television series that airs weekly.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (VideoGag(x) → FrenchT(elevisi)on(x) ∧ AirsWeekly(x))",
        "CORRECT": "∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))",
        "PREDICATES": "VideoGag(x)\nAirsWeekly(x)\nFrench(x)\nFunnyVideos(x)\nChannelTF1(x)\nFrenchTelevision(x)"
    },
    {
        "NLSTATEMENT": "All phones are things.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Phone(x) → Thing(x))",
        "CORRECT": "∀x (Phone(x) → Thing(x))",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "Jack is either an engineer or a worker.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Engineer(jack) ⊕ Worker(jack) ",
        "CORRECT": "Engineer(jack) ⊕ Worker(jack) ",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "All iPhones are cellphones. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Iphonex) → Cellphone(x)",
        "CORRECT": "∀x (Iphone(x) → Cellphone(x))",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "Jack is either an engineer or a worker.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Engineer(jack) ⊕ Worker(jack) ",
        "CORRECT": "Engineer(jack) ⊕ Worker(jack) ",
        "PREDICATES": "Thing(x)\nEngineer(x)\nHuman(x)\nPhone(x)\nIphone(x)\nWorker(x)\nCellphone(x)"
    },
    {
        "NLSTATEMENT": "Some phones are iPhones.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Phone(x) ∧ IPhone(x))",
        "CORRECT": "∃x (Phone(x) ∧ IPhone(x))",
        "PREDICATES": "Electronic(x)\nPhone(x)\nIPhone(x)"
    },
    {
        "NLSTATEMENT": "Metropolitan Museum of Art is a museum in NYC.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "CORRECT": "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "PREDICATES": "InNYC(x)\nInclude(x, y)\nMuseum(x)"
    },
    {
        "NLSTATEMENT": "Metropolitan Museum of Art is a museum in NYC.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "CORRECT": "Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)",
        "PREDICATES": "InNYC(x)\nInclude(x, y)\nMuseum(x)"
    },
    {
        "NLSTATEMENT": "Museum of Modern Art (MoMA) is a museum if NYC. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Museum(museumofModernArt) ∧ InNYC(museumofModernArt)",
        "CORRECT": "Museum(museumofModernArt) ∧ InNYC(museumofModernArt)",
        "PREDICATES": "InNYC(x)\nInclude(x, y)\nMuseum(x)"
    },
    {
        "NLSTATEMENT": "A person either likes eating cheese or is a francophile.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Spanish(x) ∨ Francophile(x))",
        "CORRECT": "∀x (Spanish(x) ∨ Francophile(x))",
        "PREDICATES": "Spanish(x)\nFrancophile(x)\nSpainFav(x)\nFrench(x)\nCheese(x)"
    },
    {
        "NLSTATEMENT": "No francophiles are people who like Spain as their favorite country.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Francophile(x) → ¬SpainFav(x))",
        "CORRECT": "∀x (Francophile(x) → ¬SpainFav(x))",
        "PREDICATES": "Spanish(x)\nFrancophile(x)\nSpainFav(x)\nFrench(x)\nCheese(x)"
    },
    {
        "NLSTATEMENT": "Benji is not a person who likes eating cheese and a person who studies Spanish.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(Cheese(benji) ∧ Spanish(benji))",
        "CORRECT": "¬(Cheese(benji) ∧ Spanish(benji))",
        "PREDICATES": "Spanish(x)\nFrancophile(x)\nSpainFav(x)\nFrench(x)\nCheese(x)"
    },
    {
        "NLSTATEMENT": "Gasteren is village located in the province of Drenthe.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)",
        "CORRECT": "Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)",
        "PREDICATES": "City(x)\nProvince(x)\nPopulation155(x)\nLocatedIn(x, y)\nDutch(x)\nVillage(x)"
    },
    {
        "NLSTATEMENT": "The population of a village in Drenthe was 155 people.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))",
        "CORRECT": "∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))",
        "PREDICATES": "City(x)\nProvince(x)\nPopulation155(x)\nLocatedIn(x, y)\nDutch(x)\nVillage(x)"
    },
    {
        "NLSTATEMENT": "Drenthe is a Dutch province. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Province(drenthe) ∧ Dutch(drenthe)",
        "CORRECT": "Province(drenthe) ∧ Dutch(drenthe)",
        "PREDICATES": "City(x)\nProvince(x)\nPopulation155(x)\nLocatedIn(x, y)\nDutch(x)\nVillage(x)"
    },
    {
        "NLSTATEMENT": "Mammals are animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Mammal(x) → ∀x  Animal(x))",
        "CORRECT": "∀x (Mammal(x) → Animal(x))",
        "PREDICATES": "Hyrax(x)\nVertebrate(x)\nMammal(x)\nPlatypuses(x)\nAnimal(x)\nGrebes(x)\nLayEgg(x)\nInvertebrate(x)\nEchidnas(x)"
    },
    {
        "NLSTATEMENT": "Grebes lay eggs.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Grebes(x) → LayEgg(x))",
        "CORRECT": "∀x (Grebes(x) → LayEgg(x))",
        "PREDICATES": "Hyrax(x)\nVertebrate(x)\nMammal(x)\nPlatypuses(x)\nAnimal(x)\nGrebes(x)\nLayEgg(x)\nInvertebrate(x)\nEchidnas(x)"
    },
    {
        "NLSTATEMENT": "No mammals are invertebrates.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Mammal(x) → ¬Invertebrate(x))",
        "CORRECT": "∀x (Mammal(x) → ¬Invertebrate(x))",
        "PREDICATES": "Hyrax(x)\nVertebrate(x)\nMammal(x)\nPlatypuses(x)\nAnimal(x)\nGrebes(x)\nLayEgg(x)\nInvertebrate(x)\nEchidnas(x)"
    },
    {
        "NLSTATEMENT": "The Omega Three band made a nationwide tour in 2007.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "MadeNationWideTour2007(theOmegaThreeBand) ",
        "CORRECT": "MadeNationWideTour2007(theOmegaThreeBand) ",
        "PREDICATES": "CompetedOnAustralianIdol(x)\nMadeNationWideTour2007(x)\nSinger(x)\nFinished7th(x)\nIsMember(x, y)\nBornIn(x, y)\nSongWriter(x)\nAustralianCitizen(x)"
    },
    {
        "NLSTATEMENT": "Bobby Flynn is a singer-songwriter. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)",
        "CORRECT": "Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)",
        "PREDICATES": "CompetedOnAustralianIdol(x)\nMadeNationWideTour2007(x)\nSinger(x)\nFinished7th(x)\nIsMember(x, y)\nBornIn(x, y)\nSongWriter(x)\nAustralianCitizen(x)"
    },
    {
        "NLSTATEMENT": "Bobby Flynn finished 7th while competing on Australian Idol.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)",
        "CORRECT": "Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)",
        "PREDICATES": "CompetedOnAustralianIdol(x)\nMadeNationWideTour2007(x)\nSinger(x)\nFinished7th(x)\nIsMember(x, y)\nBornIn(x, y)\nSongWriter(x)\nAustralianCitizen(x)"
    },
    {
        "NLSTATEMENT": "All proteins are organic compounds.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Protein(x) → OrganicCompound(x))",
        "CORRECT": "∀x (Protein(x) → OrganicCompound(x))",
        "PREDICATES": "Protein(x)\nOrganicCompound(x)\nEnzyme(x)"
    },
    {
        "NLSTATEMENT": "One American screenwriter and producer is Maggie Friedman.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Americanmaggiefriedman ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)",
        "CORRECT": "American(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)",
        "PREDICATES": "By(x, y)\nExecutiveProducerOf(x, y)\nLifetimeTelevisionSeries(x)\nProducer(x)\nDrama(x)\nShowRunnerOf(x, y)\nSeries(x)\nProduced(x, y)\nDeveloped(x, y)\nScreenwriter(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Maggie Friedman produced and developed Eastwick.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "CORRECT": "Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)",
        "PREDICATES": "By(x, y)\nExecutiveProducerOf(x, y)\nLifetimeTelevisionSeries(x)\nProducer(x)\nDrama(x)\nShowRunnerOf(x, y)\nSeries(x)\nProduced(x, y)\nDeveloped(x, y)\nScreenwriter(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Eastwick is a series by ABC.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Series(eastwick) ∧ By(eastwick, abc)",
        "CORRECT": "Series(eastwick) ∧ By(eastwick, abc)",
        "PREDICATES": "By(x, y)\nExecutiveProducerOf(x, y)\nLifetimeTelevisionSeries(x)\nProducer(x)\nDrama(x)\nShowRunnerOf(x, y)\nSeries(x)\nProduced(x, y)\nDeveloped(x, y)\nScreenwriter(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Evangelos Eleftheriou worked for IBM in Zurich.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)",
        "CORRECT": "WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)",
        "PREDICATES": "Company(x)\nElectricalEngineer(x)\nWorkedIn(x, y)\nWorkedFor(x, y)\nGreek(x)\nHasOfficeIn(x, y)"
    },
    {
        "NLSTATEMENT": "Evangelos Eleftheriou worked for IBM in Zurich.",
        "ERRORTYPE": "no_error",
        "SKETCH": "WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)",
        "CORRECT": "WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)",
        "PREDICATES": "Company(x)\nElectricalEngineer(x)\nWorkedIn(x, y)\nWorkedFor(x, y)\nGreek(x)\nHasOfficeIn(x, y)"
    },
    {
        "NLSTATEMENT": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Song(hooray) ∧ HitEurope(hooray)",
        "CORRECT": "Song(hooray) ∧ HitEurope(hooray)",
        "PREDICATES": "By(x, y)\nHitEurope(x)\nSong(x)\nPeaksBelowN1(x)\nN1GermanSingle(x)"
    },
    {
        "NLSTATEMENT": "A song that peaks below #1 on the german charts is also a song that is not the #1 single",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (PeaksBelowN1(x) ↔ ¬(N1GermanSin)gle(x))",
        "CORRECT": "∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))",
        "PREDICATES": "By(x, y)\nHitEurope(x)\nSong(x)\nPeaksBelowN1(x)\nN1GermanSingle(x)"
    },
    {
        "NLSTATEMENT": "A song that peaks below #1 on the german charts is also a song that is not the #1 single",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))",
        "CORRECT": "∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))",
        "PREDICATES": "By(x, y)\nHitEurope(x)\nSong(x)\nPeaksBelowN1(x)\nN1GermanSingle(x)"
    },
    {
        "NLSTATEMENT": "Some people who aren’t chefs can cook.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x ((¬Chef(x)) ∧ Cook(x))",
        "CORRECT": "∃x (¬Chef(x) ∧ Cook(x))",
        "PREDICATES": "MakeMuffins(x)\nCook(x)\nMakeCookies(x)\nBaker(x)\nMakeGoodBreakfast(x)\nMakeScrambledEggs(x)\nChef(x)\nMakePasta(x)"
    },
    {
        "NLSTATEMENT": "If someone can make cookies and muffins, they are a baker.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "CORRECT": "∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))",
        "PREDICATES": "MakeMuffins(x)\nCook(x)\nMakeCookies(x)\nBaker(x)\nMakeGoodBreakfast(x)\nMakeScrambledEggs(x)\nChef(x)\nMakePasta(x)"
    },
    {
        "NLSTATEMENT": "ETS also develops K-12 statewide assessments used for accountability testing in many states.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))",
        "CORRECT": "∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))",
        "PREDICATES": "Develops(x, y)\nFor(x, y)\nAdministers(x, y)\nAssociatedWith(x, y)\nIn(x, y)\nUsedFor(x, y)\nGRE(x)\nStandardizedTest(x)\nTOEFL(x)\nInternationalTest(x)\nSubjectTests(x)\nStateWideAssesment(x)\nTOEIC(x)"
    },
    {
        "NLSTATEMENT": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "CORRECT": "∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))",
        "PREDICATES": "Develops(x, y)\nFor(x, y)\nAdministers(x, y)\nAssociatedWith(x, y)\nIn(x, y)\nUsedFor(x, y)\nGRE(x)\nStandardizedTest(x)\nTOEFL(x)\nInternationalTest(x)\nSubjectTests(x)\nStateWideAssesment(x)\nTOEIC(x)"
    },
    {
        "NLSTATEMENT": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "CORRECT": "∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))",
        "PREDICATES": "Develops(x, y)\nFor(x, y)\nAdministers(x, y)\nAssociatedWith(x, y)\nIn(x, y)\nUsedFor(x, y)\nGRE(x)\nStandardizedTest(x)\nTOEFL(x)\nInternationalTest(x)\nSubjectTests(x)\nStateWideAssesment(x)\nTOEIC(x)"
    },
    {
        "NLSTATEMENT": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Travel(x) → ∀x  Europe(x))",
        "CORRECT": "∀x (Travel(x) → Europe(x))",
        "PREDICATES": "Gelato(x)\nEurope(x)\nResist(x)\nItaly(x)\nRegret(x)\nTravel(x)"
    },
    {
        "NLSTATEMENT": "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (¬Resist(x))",
        "CORRECT": "∀x (¬Resist(x))",
        "PREDICATES": "Gelato(x)\nEurope(x)\nResist(x)\nItaly(x)\nRegret(x)\nTravel(x)"
    },
    {
        "NLSTATEMENT": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Gelato(x) → Italy(x))",
        "CORRECT": "∀x (Gelato(x) → Italy(x))",
        "PREDICATES": "Gelato(x)\nEurope(x)\nResist(x)\nItaly(x)\nRegret(x)\nTravel(x)"
    },
    {
        "NLSTATEMENT": "Everyone who wants to study abroad needs to have a student visa.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (StudyAbroad(x) → StudentVisa(x))",
        "CORRECT": "∀x (StudyAbroad(x) → StudentVisa(x))",
        "PREDICATES": "WorkFullTime(x)\nFullTimeAcademic(x)\nPhdGraduate(x)\nStudyAbroad(x)\nStudentVisa(x)"
    },
    {
        "NLSTATEMENT": "All PhD graduates can work full time. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (PhdGrad(uate(x) → Wor)kFullTime(x))",
        "CORRECT": "∀x (PhdGraduate(x) → WorkFullTime(x))",
        "PREDICATES": "WorkFullTime(x)\nFullTimeAcademic(x)\nPhdGraduate(x)\nStudyAbroad(x)\nStudentVisa(x)"
    },
    {
        "NLSTATEMENT": "If Tom does not want to study abroad, he is full-time enrolled in an educational program.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬StudyAbroad(tom) → FullTimeAcademic(tom)",
        "CORRECT": "¬StudyAbroad(tom) → FullTimeAcademic(tom)",
        "PREDICATES": "WorkFullTime(x)\nFullTimeAcademic(x)\nPhdGraduate(x)\nStudyAbroad(x)\nStudentVisa(x)"
    },
    {
        "NLSTATEMENT": "In accrual accounting, revenues are recognized when they are realized.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))",
        "CORRECT": "∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))",
        "PREDICATES": "UsesGAAP(x)\nRecognizedWhen(x, y)\nUsesAccruralAccounting(x)\nWorksFor(x, y)\nUsesCashAccounting(x)\nUsesInstallmentMethod(x)\nDevelopedBy(x, y)"
    },
    {
        "NLSTATEMENT": "In cash accounting, revenues are recognized when cash is received.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))",
        "CORRECT": "∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))",
        "PREDICATES": "UsesGAAP(x)\nRecognizedWhen(x, y)\nUsesAccruralAccounting(x)\nWorksFor(x, y)\nUsesCashAccounting(x)\nUsesInstallmentMethod(x)\nDevelopedBy(x, y)"
    },
    {
        "NLSTATEMENT": "Sally works for the US Securities and Exchange Commission.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "WorksFor(sally, ussecurities(andexchange)commission)",
        "CORRECT": "WorksFor(sally, ussecuritiesandexchangecommission)",
        "PREDICATES": "UsesGAAP(x)\nRecognizedWhen(x, y)\nUsesAccruralAccounting(x)\nWorksFor(x, y)\nUsesCashAccounting(x)\nUsesInstallmentMethod(x)\nDevelopedBy(x, y)"
    },
    {
        "NLSTATEMENT": "All people who are respected by others are people who contribute to the country. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(∀x (Respected(x) → Contrib)uteToCountry(x))",
        "CORRECT": "∀x (Respected(x) → ContributeToCountry(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "All people who once stayed in prison for some time have a bad record in the local state. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Prison(x) → BadRecord(x))",
        "CORRECT": "∀x (Prison(x) → BadRecord(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "If a person is respected by others, then he/she contributes to the country. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Respected(x) → ContributeToCountry(x))",
        "CORRECT": "∀x (Respected(x) → ContributeToCountry(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "All people who once were sentenced for thief stayed in prison for some time. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Thief(x) → Prison(x))",
        "CORRECT": "∀x (Thief(x) → Prison(x))",
        "PREDICATES": "Prison(x)\nThief(x)\nHaveVisitWithoutAnyFees(x)\nArmy(x)\nContributeToCountry(x)\nRespected(x)\nBadRecord(x)"
    },
    {
        "NLSTATEMENT": "The Croton River watershed is the drainage basin of the Croton River.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "DrainageBasinOfcrotonriverwatershed, crotonriver",
        "CORRECT": "DrainageBasinOf(crotonriverwatershed, crotonriver)",
        "PREDICATES": "DrainageBasinOf(x, y)\nIn(x, y)\nFrom(x, y)\nFlowsTo(x, y)\nWater(x)"
    },
    {
        "NLSTATEMENT": "Water from the Croton River watershed flows to the Bronx.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Water(x) ∧ ∃x  From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))",
        "CORRECT": "∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))",
        "PREDICATES": "DrainageBasinOf(x, y)\nIn(x, y)\nFrom(x, y)\nFlowsTo(x, y)\nWater(x)"
    },
    {
        "NLSTATEMENT": "The Croton River watershed is the drainage basin of the Croton River.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "DrainageBasinOf(crotonriverwatershed, crotonriver)",
        "CORRECT": "DrainageBasinOf(crotonriverwatershed, crotonriver)",
        "PREDICATES": "DrainageBasinOf(x, y)\nIn(x, y)\nFrom(x, y)\nFlowsTo(x, y)\nWater(x)"
    },
    {
        "NLSTATEMENT": "All nuclear-powered submarines are warships.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (NuclearPoweredSubmarine(x) → ∀x  Warship(x))",
        "CORRECT": "∀x (NuclearPoweredSubmarine(x) → Warship(x))",
        "PREDICATES": "NuclearPoweredSubmarine(x)\nWarship(x)\nCommercialVessel(x)"
    },
    {
        "NLSTATEMENT": "Trouble at the Henhouse won the Album of the Year award.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "AlbumAward(trouble_at_the_Henhouse, the_Albu(m_of_t)he_Year)",
        "CORRECT": "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)",
        "PREDICATES": "AlbumAward(x, y)\nAlbumByBand(x, y)\nRockBand(x, y)\nSongInAlbum(x, y)\nGenre(x, y)\nRockBandAward(x, y)\nSongInFilm(x)"
    },
    {
        "NLSTATEMENT": "Trouble at the Henhouse won the Album of the Year award.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)",
        "CORRECT": "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)",
        "PREDICATES": "AlbumAward(x, y)\nAlbumByBand(x, y)\nRockBand(x, y)\nSongInAlbum(x, y)\nGenre(x, y)\nRockBandAward(x, y)\nSongInFilm(x)"
    },
    {
        "NLSTATEMENT": "Trouble at the Henhouse is an album by The Tragically Hip.",
        "ERRORTYPE": "no_error",
        "SKETCH": "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
        "CORRECT": "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)",
        "PREDICATES": "AlbumAward(x, y)\nAlbumByBand(x, y)\nRockBand(x, y)\nSongInAlbum(x, y)\nGenre(x, y)\nRockBandAward(x, y)\nSongInFilm(x)"
    },
    {
        "NLSTATEMENT": "Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)",
        "CORRECT": " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)",
        "PREDICATES": "TechnicalSourcer(x)\nWorksAtMeta(x)\nGraduatedFromStanfordUniversity(x)\nDoctorPracticingInternalMedicine(x, y)\nStudiedBioengineering(x, y)\nSoftwareEngineer(x)\nWorksAt(x, y)"
    },
    {
        "NLSTATEMENT": "Daniel is a software engineer and he works at Palantir Technologies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTech(nologie)s)",
        "CORRECT": "SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)",
        "PREDICATES": "TechnicalSourcer(x)\nWorksAtMeta(x)\nGraduatedFromStanfordUniversity(x)\nDoctorPracticingInternalMedicine(x, y)\nStudiedBioengineering(x, y)\nSoftwareEngineer(x)\nWorksAt(x, y)"
    },
    {
        "NLSTATEMENT": "Daniel is a software engineer and he works at Palantir Technologies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SoftwareEngineer(daniel) ∧ WorksAtdaniel, palantirTechnologies",
        "CORRECT": "SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)",
        "PREDICATES": "TechnicalSourcer(x)\nWorksAtMeta(x)\nGraduatedFromStanfordUniversity(x)\nDoctorPracticingInternalMedicine(x, y)\nStudiedBioengineering(x, y)\nSoftwareEngineer(x)\nWorksAt(x, y)"
    },
    {
        "NLSTATEMENT": "All American Airlines jets are commerical aircraft. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (AmericanAirlinesAircraft(x) → CommercialAircraft(x))",
        "CORRECT": "∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "All commerical aircraft are produced by either Boeing or Airbus.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (CommercialAircraftx) → ProducedBy(x, boeing ⊕ ProducedBy(x, airbus))",
        "CORRECT": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "All commerical aircraft are produced by either Boeing or Airbus.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "CORRECT": "∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "All American Airlines jets are commerical aircraft. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))",
        "CORRECT": "∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))",
        "PREDICATES": "ProducedBy(x, y)\nCommercialAircraft(x)\nMoreinRevenue(x, y)\nAmericanAirlinesAircraft(x)"
    },
    {
        "NLSTATEMENT": "People died in the December 1999 earthquake in Luzon.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Earthquake(x) ∧ ∃x  StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "CORRECT": "∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "PREDICATES": "Killed(x)\nStruckIn(x, y)\nIsland(x)\nEarthquake(x)\nIn(x, y)\nStruck(x, y)"
    },
    {
        "NLSTATEMENT": "People died in the December 1999 earthquake in Luzon.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "CORRECT": "∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "PREDICATES": "Killed(x)\nStruckIn(x, y)\nIsland(x)\nEarthquake(x)\nIn(x, y)\nStruck(x, y)"
    },
    {
        "NLSTATEMENT": "People died in the December 1999 earthquake in Luzon.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Earthquake(x) ∧ ∃x  StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "CORRECT": "∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))",
        "PREDICATES": "Killed(x)\nStruckIn(x, y)\nIsland(x)\nEarthquake(x)\nIn(x, y)\nStruck(x, y)"
    },
    {
        "NLSTATEMENT": "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Gambling(x) → Casinos(x))",
        "CORRECT": "∀x (Gambling(x) → Casinos(x))",
        "PREDICATES": "DisposableIncome(x)\nNewspapers(x)\nCasinos(x)\nInvests(x)\nLasVegas(x)\nGambling(x)"
    },
    {
        "NLSTATEMENT": "People either invest in the public stock market regularly or enjoy gambling regularly.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Invests(x) ∨ Gambling(x))",
        "CORRECT": "∀x (Invests(x) ∨ Gambling(x))",
        "PREDICATES": "DisposableIncome(x)\nNewspapers(x)\nCasinos(x)\nInvests(x)\nLasVegas(x)\nGambling(x)"
    },
    {
        "NLSTATEMENT": "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Casinos(x) → DisposableIncome(x))",
        "CORRECT": "∀x (Casinos(x) → DisposableIncome(x))",
        "PREDICATES": "DisposableIncome(x)\nNewspapers(x)\nCasinos(x)\nInvests(x)\nLasVegas(x)\nGambling(x)"
    },
    {
        "NLSTATEMENT": "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x))",
        "CORRECT": "∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x))",
        "PREDICATES": "LearningPiano(x)\nFindCoordinationChallenging(x)\nStartCoordination(x)\nStrikeRightNotes(x)\nGetRhythmRight(x)\nGoodAtCoordination(x)\nStudent(x)\nPutEmotion(x)"
    },
    {
        "NLSTATEMENT": "All students learning piano can strike the right notes. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))",
        "CORRECT": "∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))",
        "PREDICATES": "LearningPiano(x)\nFindCoordinationChallenging(x)\nStartCoordination(x)\nStrikeRightNotes(x)\nGetRhythmRight(x)\nGoodAtCoordination(x)\nStudent(x)\nPutEmotion(x)"
    },
    {
        "NLSTATEMENT": "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
        "CORRECT": "¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)",
        "PREDICATES": "ParticipatedIn(x, y)\nFormerSwimmer(x)\nRepresented(x, y)\nRecieved(x, y)\nRelaySwimmer(x)\nFormerWorldRecordHolder(x)\nHomeCountry(x, y)"
    },
    {
        "NLSTATEMENT": "Barbara Ann Marshall participated in the 1972 Summer Olympics.",
        "ERRORTYPE": "no_error",
        "SKETCH": "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "CORRECT": "ParticipatedIn(barbaraannmarshall, summer1972olympics)",
        "PREDICATES": "ParticipatedIn(x, y)\nFormerSwimmer(x)\nRepresented(x, y)\nRecieved(x, y)\nRelaySwimmer(x)\nFormerWorldRecordHolder(x)\nHomeCountry(x, y)"
    },
    {
        "NLSTATEMENT": "All players must reach the yellow stage before they can reach the green stage.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Player(x) → YellowToGreen(x))",
        "CORRECT": "∀x (Player(x) → YellowToGreen(x))",
        "PREDICATES": "YellowToGreen(x)\nStartRed(x)\nRedToYellow(x)\nRedToGreen(x)\nPlayer(x)"
    },
    {
        "NLSTATEMENT": "All players must proceed one stage at a time.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Player(x) → ∀x  ¬RedToGreen(x))",
        "CORRECT": "∀x (Player(x) → ¬RedToGreen(x))",
        "PREDICATES": "YellowToGreen(x)\nStartRed(x)\nRedToYellow(x)\nRedToGreen(x)\nPlayer(x)"
    },
    {
        "NLSTATEMENT": "A game is played with three stages: red stage, yellow stage, and green stage.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∃x (Player(x))",
        "CORRECT": "∃x (Player(x))",
        "PREDICATES": "YellowToGreen(x)\nStartRed(x)\nRedToYellow(x)\nRedToGreen(x)\nPlayer(x)"
    },
    {
        "NLSTATEMENT": "If a person values physical touch as an especially important love language, then they are good with pets.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Physicalx) → GoodWithPets(x)",
        "CORRECT": "∀x (Physical(x) → GoodWithPets(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Physical(x) ∨ ∀x  Words(x))",
        "CORRECT": "∀x (Physical(x) ∨ Words(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "Adam is either a person who values physical touch as an especially important love language or a person who loves animals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Physical(adam) ⊕ LoveAnimals(adam)",
        "CORRECT": "Physical(adam) ⊕ LoveAnimals(adam)",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Physical(x) ∨ Words(x))",
        "CORRECT": "∀x (Physical(x) ∨ Words(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "People are either scared of animals or love animals.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ScaredOfAnimals(x) ∨ ∀x  LoveAnimals(x))",
        "CORRECT": "∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))",
        "PREDICATES": "LoveAnimals(x)\nGoodWithPets(x)\nScaredOfAnimals(x)\nPhysical(x)\nWords(x)"
    },
    {
        "NLSTATEMENT": "If something is an iguana, then it is a reptile.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Iguana(x) → ∀x  Reptile(x))",
        "CORRECT": "∀x (Iguana(x) → Reptile(x))",
        "PREDICATES": "Winged(x)\nBird(x)\nReptile(x)\nIguana(x)\nFly(x)"
    },
    {
        "NLSTATEMENT": "No animal with wings is a reptile.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Winged(x) → ¬Reptile(x))",
        "CORRECT": "∀x (Winged(x) → ¬Reptile(x))",
        "PREDICATES": "Winged(x)\nBird(x)\nReptile(x)\nIguana(x)\nFly(x)"
    },
    {
        "NLSTATEMENT": "All birds have wings.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Bird(x) → Wi)nged(x))",
        "CORRECT": "∀x (Bird(x) → Winged(x))",
        "PREDICATES": "Winged(x)\nBird(x)\nReptile(x)\nIguana(x)\nFly(x)"
    },
    {
        "NLSTATEMENT": "Andy Chang directed EndGame.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Directed(andyChang, endGame)",
        "CORRECT": "Directed(andyChang, endGame)",
        "PREDICATES": "Set(x, y)\nDirected(x, y)\nReleased(x, y)\nFrom(x, y)\nMovie(x)\nFilmedOutside(x, y)\nFilmedIn(x, y)"
    },
    {
        "NLSTATEMENT": "EndGame is a movie released in 2006.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Movie(endGame) ∧ Released(endGame, year2006)",
        "CORRECT": "Movie(endGame) ∧ Released(endGame, year2006)",
        "PREDICATES": "Set(x, y)\nDirected(x, y)\nReleased(x, y)\nFrom(x, y)\nMovie(x)\nFilmedOutside(x, y)\nFilmedIn(x, y)"
    },
    {
        "NLSTATEMENT": "EndGame was set in Washington.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Set(endGame, washington)",
        "CORRECT": "Set(endGame, washington)",
        "PREDICATES": "Set(x, y)\nDirected(x, y)\nReleased(x, y)\nFrom(x, y)\nMovie(x)\nFilmedOutside(x, y)\nFilmedIn(x, y)"
    },
    {
        "NLSTATEMENT": "If the number x is larger than number y, then y is not larger than x.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Larger(x, y) ↔ ¬Larger(y, x))",
        "CORRECT": "∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))",
        "PREDICATES": "EqualDouble(x, y)\nPositive(x)\nLarger(x, y)\nRealNum(x)\nEqualAddOne(x, y)"
    },
    {
        "NLSTATEMENT": "If a number is positive, then the double of it is also positive.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))",
        "CORRECT": "∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))",
        "PREDICATES": "EqualDouble(x, y)\nPositive(x)\nLarger(x, y)\nRealNum(x)\nEqualAddOne(x, y)"
    },
    {
        "NLSTATEMENT": "Two is positive.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Positive(two)",
        "CORRECT": "Positive(two)",
        "PREDICATES": "EqualDouble(x, y)\nPositive(x)\nLarger(x, y)\nRealNum(x)\nEqualAddOne(x, y)"
    },
    {
        "NLSTATEMENT": "A dog never tells the truth.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Dog(x) → NeverTellsTruth(x))",
        "CORRECT": "∀x (Dog(x) → NeverTellsTruth(x))",
        "PREDICATES": "Dog(x)\nNeverTellsTruth(x)\nPokerPlayer(x)"
    },
    {
        "NLSTATEMENT": "All Chinese are Asian.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ( Chinese(x)→  Asian(x))",
        "CORRECT": "∀x ( Chinese(x)→  Asian(x))",
        "PREDICATES": "Human(x)\nSpanish(x)\nChinese(x)\nBritish(x)\nIndian(x)\nAsian(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "All Asians are human. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ( Asian(x)→  Human(x))",
        "CORRECT": "∀x ( Asian(x)→  Human(x))",
        "PREDICATES": "Human(x)\nSpanish(x)\nChinese(x)\nBritish(x)\nIndian(x)\nAsian(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "All Asians are human. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ( Asian(x)→ ∀x   Human(x))",
        "CORRECT": "∀x ( Asian(x)→  Human(x))",
        "PREDICATES": "Human(x)\nSpanish(x)\nChinese(x)\nBritish(x)\nIndian(x)\nAsian(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "No people who never admit a mistake are good teachers.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (NeverAdmitMistakes(x) → ¬GoodTeacher(x))",
        "CORRECT": "∀x (NeverAdmitMistakes(x) → ¬GoodTeacher(x))",
        "PREDICATES": "NeverAdmitMistakes(x)\nGoodTeacher(x)\nWellInformed(x)"
    },
    {
        "NLSTATEMENT": "Mort is not a periodical, auction catalogue, bibliography, or background material.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(Periodi(cal(mort) ∨ )Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "CORRECT": "¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))",
        "PREDICATES": "Periodical(x)\nStamp(x)\nAuction(x)\nBook(x)\nBackground(x)\nPhilatelicLit(x)\nBibliography(x)"
    },
    {
        "NLSTATEMENT": "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (PhilatelicLit(x) → (Stamp(x) ∨ ∀x  Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "CORRECT": "∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))",
        "PREDICATES": "Periodical(x)\nStamp(x)\nAuction(x)\nBook(x)\nBackground(x)\nPhilatelicLit(x)\nBibliography(x)"
    },
    {
        "NLSTATEMENT": "Mort is not a Stamp catalogue.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Stamp(mort)",
        "CORRECT": "¬Stamp(mort)",
        "PREDICATES": "Periodical(x)\nStamp(x)\nAuction(x)\nBook(x)\nBackground(x)\nPhilatelicLit(x)\nBibliography(x)"
    },
    {
        "NLSTATEMENT": "Adventures of Rusty is a drama film and children's film.",
        "ERRORTYPE": "no_error",
        "SKETCH": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "CORRECT": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Tintin was produced by Paramount.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Produced(paramount, tintin)",
        "CORRECT": "Produced(paramount, tintin)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Adventures of Rusty is a drama film and children's film.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "CORRECT": "DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "Tintin is an adventure film.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "AdventureFilm(tintin)",
        "CORRECT": "AdventureFilm(tintin)",
        "PREDICATES": "ChildrensFilm(x)\nProduced(x, y)\nAdventureFilm(x)\nDramaFilm(x)"
    },
    {
        "NLSTATEMENT": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.",
        "ERRORTYPE": "no_error",
        "SKETCH": "GraduallyRoseTo(dengxiaoping, supremepower)",
        "CORRECT": "GraduallyRoseTo(dengxiaoping, supremepower)",
        "PREDICATES": "VicePremier(x)\nInstrumentalIn(x, y)\nParamountLeaderOf(x, y)\nPartysSecretaryGeneral(x)\nDisastrous(x)\nPresidedOver(x, y)\nUnder(x, y)\nLaunchedBy(x, y)\nPraisedFor(x, y)\nFollowing(x, y)\nDiedIn(x, y)\nGraduallyRoseTo(x, y)"
    },
    {
        "NLSTATEMENT": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "GraduallyRoseTo(dengxiaoping, supremepower)",
        "CORRECT": "GraduallyRoseTo(dengxiaoping, supremepower)",
        "PREDICATES": "VicePremier(x)\nInstrumentalIn(x, y)\nParamountLeaderOf(x, y)\nPartysSecretaryGeneral(x)\nDisastrous(x)\nPresidedOver(x, y)\nUnder(x, y)\nLaunchedBy(x, y)\nPraisedFor(x, y)\nFollowing(x, y)\nDiedIn(x, y)\nGraduallyRoseTo(x, y)"
    },
    {
        "NLSTATEMENT": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "ParamountLeaderOf(dengxiaoping, prc)",
        "CORRECT": "ParamountLeaderOf(dengxiaoping, prc)",
        "PREDICATES": "VicePremier(x)\nInstrumentalIn(x, y)\nParamountLeaderOf(x, y)\nPartysSecretaryGeneral(x)\nDisastrous(x)\nPresidedOver(x, y)\nUnder(x, y)\nLaunchedBy(x, y)\nPraisedFor(x, y)\nFollowing(x, y)\nDiedIn(x, y)\nGraduallyRoseTo(x, y)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x Science-fiction(x ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "No facts are proven to be false.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x Fact(x → ¬ProvedToBeFalse(x)) ",
        "CORRECT": " ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x Science-fiction(x ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All imaginative processes are produced in human brains.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "CORRECT": "∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All imaginative processes are produced in human brains.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (ImaginativeProcessx) → ProducedInHumanBrains(x)",
        "CORRECT": "∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All science-fiction is from an imaginative process.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (Science-fiction(x) → ImaginativeProcess(x)) ",
        "CORRECT": " ∀x (Science-fiction(x) → ImaginativeProcess(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All science-fiction is from an imaginative process.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (Science-fiction(x) → ImaginativeProcess(x)) ",
        "CORRECT": " ∀x (Science-fiction(x) → ImaginativeProcess(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "All science-fiction is from an imaginative process.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Science-fiction(x) → ∀x  ImaginativeProcess(x)) ",
        "CORRECT": " ∀x (Science-fiction(x) → ImaginativeProcess(x)) ",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "Either science-fiction or fact. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "CORRECT": " ∀x (Science-fiction(x) ∨ Fact(x))",
        "PREDICATES": "Fact(x)\nImaginativeProcess(x)\nProvedToBeFalse(x)\nfiction(x)\nProducedInHumanBrains(x)"
    },
    {
        "NLSTATEMENT": "If a superhero is American, he speaks English.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Superhero(x) ∧ ∀x  American(x) → Speak(x, english)) ",
        "CORRECT": " ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) ",
        "PREDICATES": "Superhero(x)\nSpeak(x, y)\nComeFrom(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "An American superhero comes from either DC universe or Marvel universe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Superherox) ∧ American(x → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) ",
        "CORRECT": "∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) ",
        "PREDICATES": "Superhero(x)\nSpeak(x, y)\nComeFrom(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Captain America does not come from DC universe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ¬ComeFromcaptain america, dc universe ",
        "CORRECT": " ¬ComeFrom(captain america, dc universe) ",
        "PREDICATES": "Superhero(x)\nSpeak(x, y)\nComeFrom(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Robert Zimmer was born in 1953.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "BornIn(robertZimmer, year1953)",
        "CORRECT": "BornIn(robertZimmer, year1953)",
        "PREDICATES": "IsEssayist(x)\nIsGerman(x)\nIsWriter(x)\nBornIn(x, y)\nBornInGermany(x)"
    },
    {
        "NLSTATEMENT": "Every person born in Germany is German.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (BornInGermanyx) → IsGerman(x)",
        "CORRECT": "∀x (BornInGermany(x) → IsGerman(x))",
        "PREDICATES": "IsEssayist(x)\nIsGerman(x)\nIsWriter(x)\nBornIn(x, y)\nBornInGermany(x)"
    },
    {
        "NLSTATEMENT": "Every person born in Germany is German.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BornInGermany(x) → IsGerman(x))",
        "CORRECT": "∀x (BornInGermany(x) → IsGerman(x))",
        "PREDICATES": "IsEssayist(x)\nIsGerman(x)\nIsWriter(x)\nBornIn(x, y)\nBornInGermany(x)"
    },
    {
        "NLSTATEMENT": "John has a high salary.",
        "ERRORTYPE": "no_error",
        "SKETCH": "HighSalary(john)",
        "CORRECT": "HighSalary(john)",
        "PREDICATES": "HighCreditScore(x)\nRepay(x)\nMortgage(x)\nHighSalary(x)"
    },
    {
        "NLSTATEMENT": "Some PhD students have high IQs.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (PhDStudent(x) ∧ High(IQ(x)))",
        "CORRECT": "∃x (PhDStudent(x) ∧ HighIQ(x))",
        "PREDICATES": "GraduateStudent(x)\nMemberOfUniversity(x)\nHighIQ(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "If John is not a PhD student, then he is not a member of the university.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬PhDStudent(john) → ¬MemberOfUniversity(john)",
        "CORRECT": "¬PhDStudent(john) → ¬MemberOfUniversity(john)",
        "PREDICATES": "GraduateStudent(x)\nMemberOfUniversity(x)\nHighIQ(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All graduate students are students.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (GraduateStudent(x) → Student(x))",
        "CORRECT": "∀x (GraduateStudent(x) → Student(x))",
        "PREDICATES": "GraduateStudent(x)\nMemberOfUniversity(x)\nHighIQ(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Belgium, France and Germany are European countries.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)",
        "CORRECT": "EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)",
        "PREDICATES": "See(x, y)\nTouristAttraction(x)\nEuropeanCountry(x)\nSpeak(x, y)\nLiveIn(x, y)\nCapitalOf(x, y)\nLocatedIn(x, y)\nGoTo(x, y)"
    },
    {
        "NLSTATEMENT": "Paris is the capital of France.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "CapitalOf(paris, france)",
        "CORRECT": "CapitalOf(paris, france)",
        "PREDICATES": "See(x, y)\nTouristAttraction(x)\nEuropeanCountry(x)\nSpeak(x, y)\nLiveIn(x, y)\nCapitalOf(x, y)\nLocatedIn(x, y)\nGoTo(x, y)"
    },
    {
        "NLSTATEMENT": "John speaks French.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Speak(john, french)",
        "CORRECT": "Speak(john, french)",
        "PREDICATES": "See(x, y)\nTouristAttraction(x)\nEuropeanCountry(x)\nSpeak(x, y)\nLiveIn(x, y)\nCapitalOf(x, y)\nLocatedIn(x, y)\nGoTo(x, y)"
    },
    {
        "NLSTATEMENT": "All sports cars are loud.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Spor(tsCar(x) → )LoudCar(x))",
        "CORRECT": "∀x (SportsCar(x) → LoudCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "If a car is a Ferrari, then it is a sports car.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Ferrari(x) → ∀x  SportsCar(x))",
        "CORRECT": "∀x (Ferrari(x) → SportsCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "No loud cars are electric.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (LoudCar(x) → ¬ElectricCar(x))",
        "CORRECT": "∀x (LoudCar(x) → ¬ElectricCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "All sports cars are loud.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SportsCar(x) → LoudCar(x))",
        "CORRECT": "∀x (SportsCar(x) → LoudCar(x))",
        "PREDICATES": "MadeInMaranello(x)\nFerrari(x)\nLoudCar(x)\nSportsCar(x)\nElectricCar(x)"
    },
    {
        "NLSTATEMENT": "Piper is a kitten or a cute animal.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Kitten(piper) ∨ CuteAnimal(piper)",
        "CORRECT": "Kitten(piper) ∨ CuteAnimal(piper)",
        "PREDICATES": "Flower(x)\nGrownInGarden(x)\nKitten(x)\nPlant(x)\nCuteAnimal(x)"
    },
    {
        "NLSTATEMENT": "If something is grown in a garden, then it is a flower.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((GrownInGarden(x) → Flower(x)))",
        "CORRECT": "∀x (GrownInGarden(x) → Flower(x))",
        "PREDICATES": "Flower(x)\nGrownInGarden(x)\nKitten(x)\nPlant(x)\nCuteAnimal(x)"
    },
    {
        "NLSTATEMENT": "Every kitten is a cute animal.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Kitten(x) → CuteAnimal(x))",
        "CORRECT": "∀x (Kitten(x) → CuteAnimal(x))",
        "PREDICATES": "Flower(x)\nGrownInGarden(x)\nKitten(x)\nPlant(x)\nCuteAnimal(x)"
    },
    {
        "NLSTATEMENT": "Guam sent an athlete to the Calgary Winter Olympics.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "BeHeldwinterolympics, calgary → SendAthletes(guam)",
        "CORRECT": "BeHeld(winterolympics, calgary) → SendAthletes(guam)",
        "PREDICATES": "SendAthletes(x)\nParticipatedIn(x, y)\nYear(x)\nBeHeld(x, y)\nBeFrom(x, y)"
    },
    {
        "NLSTATEMENT": "In 1988, the Winter Olympics were held in Calgary.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Year(y1988) → BeHeld(winterolympics, calgary)",
        "CORRECT": "Year(y1988) → BeHeld(winterolympics, calgary)",
        "PREDICATES": "SendAthletes(x)\nParticipatedIn(x, y)\nYear(x)\nBeHeld(x, y)\nBeFrom(x, y)"
    },
    {
        "NLSTATEMENT": "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "CORRECT": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "CORRECT": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "The magazine World Medicine was edited by Michael O'Donnell.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "CORRECT": "Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "One of the word-setters of My Word! was Michael O'Donnell.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WordSetter(michael)",
        "CORRECT": "WordSetter(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "Michael O'Donnell is a British physician, journalist, author and broadcaster.",
        "ERRORTYPE": "no_error",
        "SKETCH": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "CORRECT": "British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)",
        "PREDICATES": "Journalist(x)\nEditedBy(x, y)\nWordSetter(x)\nSon(x, y)\nBritish(x)\nAuthor(x)\nMagazine(x)\nPhysician(x)\nBornIn(x, y)\nBroadcaster(x)\nGeneralPractitioner(x)"
    },
    {
        "NLSTATEMENT": "Some reading is homework.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (IsReading(x) ∧ Homework(x))",
        "CORRECT": "∃x (IsReading(x) ∧ Homework(x))",
        "PREDICATES": "Homework(x)\nIsReading(x)\nIsFun(x)"
    },
    {
        "NLSTATEMENT": "If violence is good, it is justified.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x ((Violence(x) ∧ Good(x)) → Justified(x))",
        "CORRECT": "∀x ((Violence(x) ∧ Good(x)) → Justified(x))",
        "PREDICATES": "Violence(x)\nLawful(x)\nGood(x)\nJustified(x)"
    },
    {
        "NLSTATEMENT": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(Ranchmanny) ∧ Cramped(manny) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))",
        "CORRECT": "(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))",
        "PREDICATES": "DisposableIncome(x)\nCompete(x)\nInvested(x)\nRanch(x)\nRegularlyRide(x)\nCramped(x)"
    },
    {
        "NLSTATEMENT": "If people compete in horse dressage shows, then they have a lot of disposable income.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Compete(x) → ∀x  DisposableIncome(x))",
        "CORRECT": "∀x (Compete(x) → DisposableIncome(x))",
        "PREDICATES": "DisposableIncome(x)\nCompete(x)\nInvested(x)\nRanch(x)\nRegularlyRide(x)\nCramped(x)"
    },
    {
        "NLSTATEMENT": "All people who have a horse ranch regularly ride horses for pleasure and sport.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Ranch(x) → RegularlyRide(x))",
        "CORRECT": "∀x (Ranch(x) → RegularlyRide(x))",
        "PREDICATES": "DisposableIncome(x)\nCompete(x)\nInvested(x)\nRanch(x)\nRegularlyRide(x)\nCramped(x)"
    },
    {
        "NLSTATEMENT": "Cannons can be deployed on artillery fortifications. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ArtilleryFortification(x) → DeployCannons(x))",
        "CORRECT": "∀x (ArtilleryFortification(x) → DeployCannons(x))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "A roundel is not higher than adjacent walls. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (Roundel(x) ∧ ∀x  AdjacentWall(y) → ¬Higher(x, y))",
        "CORRECT": "∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "Roundels are the oldest artillery fortifications.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))",
        "CORRECT": "∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "Battery towers are an artillery fortification.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (BatteryTower(x) → ArtilleryFort(ification)(x))",
        "CORRECT": "∀x (BatteryTower(x) → ArtilleryFortification(x))",
        "PREDICATES": "BatteryTower(x)\nAdjacentWall(x)\nRoundel(x)\nOlder(x, y)\nArtilleryFortification(x)\nRounded(x)\nDeployCannons(x)\nHigher(x, y)"
    },
    {
        "NLSTATEMENT": "Some papers are tissues.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Paper(x) ∧ Tissue(x))",
        "CORRECT": "∃x (Paper(x) ∧ Tissue(x))",
        "PREDICATES": "Soft(x)\nTissue(x)\nPaper(x)"
    },
    {
        "NLSTATEMENT": "Volunteers work regularly or on an as-needed basis.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))",
        "CORRECT": "∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))",
        "PREDICATES": "WorkRegularly(x)\nGetIntangibleBenefits(x)\nWorkInGroup(x)\nEnvironmental(x)\nTrained(x)\nWorkAsNeeded(x)\nVolunteer(x)\nWorkIndividually(x)\nContributeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Some volunteers are trained.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Volunteer(x) → Trained(x))",
        "CORRECT": "∃x (Volunteer(x) → Trained(x))",
        "PREDICATES": "WorkRegularly(x)\nGetIntangibleBenefits(x)\nWorkInGroup(x)\nEnvironmental(x)\nTrained(x)\nWorkAsNeeded(x)\nVolunteer(x)\nWorkIndividually(x)\nContributeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Volunteers work regularly or on an as-needed basis.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))",
        "CORRECT": "∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))",
        "PREDICATES": "WorkRegularly(x)\nGetIntangibleBenefits(x)\nWorkInGroup(x)\nEnvironmental(x)\nTrained(x)\nWorkAsNeeded(x)\nVolunteer(x)\nWorkIndividually(x)\nContributeTo(x, y)"
    },
    {
        "NLSTATEMENT": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (NoShopping(x) → Flannel(x))",
        "CORRECT": "∀x (NoShopping(x) → Flannel(x))",
        "PREDICATES": "Impulsive(x)\nNoSurprises(x)\nConsistent(x)\nNoShopping(x)\nOld(x)\nFlannel(x)"
    },
    {
        "NLSTATEMENT": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (NoShopping(x) → Flannel(x))",
        "CORRECT": "∀x (NoShopping(x) → Flannel(x))",
        "PREDICATES": "Impulsive(x)\nNoSurprises(x)\nConsistent(x)\nNoShopping(x)\nOld(x)\nFlannel(x)"
    },
    {
        "NLSTATEMENT": "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Flannel(x) → Consistent(x))",
        "CORRECT": "∀x (Flannel(x) → Consistent(x))",
        "PREDICATES": "Impulsive(x)\nNoSurprises(x)\nConsistent(x)\nNoShopping(x)\nOld(x)\nFlannel(x)"
    },
    {
        "NLSTATEMENT": "Adam broke his favorite car.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Owns(adam, x) ∧ Favorite(adam, x) → Broke(adam, x))",
        "CORRECT": "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))",
        "PREDICATES": "Broke(x, y)\nFavorite(x, y)\nOwns(x, y)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Adam broke his favorite car.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))",
        "CORRECT": "∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))",
        "PREDICATES": "Broke(x, y)\nFavorite(x, y)\nOwns(x, y)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "All buildings in Manhattan are higher than 400 meters. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Manhattan(x) → ∀x  High(x))",
        "CORRECT": "∀x (Manhattan(x) → High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "All buildings managed by Yale Housing are in New Haven. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (YaleHousing(x) → ∀x  NewHaven(x))",
        "CORRECT": "∀x (YaleHousing(x) → NewHaven(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "All buildings in Manhattan are higher than 400 meters. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Manhattanx) → High(x)",
        "CORRECT": "∀x (Manhattan(x) → High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "No buildings in New Haven are higher than 400 meters. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (NewHaven(x) → ¬High(x))",
        "CORRECT": "∀x (NewHaven(x) → ¬High(x))",
        "PREDICATES": "High(x)\nBloomberg(x)\nYaleHousing(x)\nManhattan(x)\nNewHaven(x)\nBloombergLogo(x)"
    },
    {
        "NLSTATEMENT": "No fish are birds.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Fish(x) → ¬Bird(x))",
        "CORRECT": "∀x (Fish(x) → ¬Bird(x))",
        "PREDICATES": "Osprey(x)\nFish(x)\nBird(x)\nGoldfish(x)\nCarp(x)"
    },
    {
        "NLSTATEMENT": "All goldfish are carp.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Goldfish(x) → Carp(x))",
        "CORRECT": "∀x (Goldfish(x) → Carp(x))",
        "PREDICATES": "Osprey(x)\nFish(x)\nBird(x)\nGoldfish(x)\nCarp(x)"
    },
    {
        "NLSTATEMENT": "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)",
        "CORRECT": "Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)",
        "PREDICATES": "Osprey(x)\nFish(x)\nBird(x)\nGoldfish(x)\nCarp(x)"
    },
    {
        "NLSTATEMENT": "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (WantToGo(x) → (Californiax) ∨ Florida(x) ∧ (NeverGo(x)))",
        "CORRECT": "∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))",
        "PREDICATES": "WantToGo(x)\nLosAngeles(x)\nMiami(x)\nFloridaCityVisited(x, y)\nCaliforniaCityVisited(x, y)\nOrlando(x)\nFlorida(x)\nSanDiego(x)\nCalifornia(x)\nSanFrancisco(x)\nNeverGo(x)"
    },
    {
        "NLSTATEMENT": "Mrs. Smith has been to one city in Florida.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "FloridaCityVisitedmrs.smith, one",
        "CORRECT": "FloridaCityVisited(mrs.smith, one)",
        "PREDICATES": "WantToGo(x)\nLosAngeles(x)\nMiami(x)\nFloridaCityVisited(x, y)\nCaliforniaCityVisited(x, y)\nOrlando(x)\nFlorida(x)\nSanDiego(x)\nCalifornia(x)\nSanFrancisco(x)\nNeverGo(x)"
    },
    {
        "NLSTATEMENT": "Mrs. Smith has been to one city in Florida.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "FloridaCityVisited(mrs.smith, one)",
        "CORRECT": "FloridaCityVisited(mrs.smith, one)",
        "PREDICATES": "WantToGo(x)\nLosAngeles(x)\nMiami(x)\nFloridaCityVisited(x, y)\nCaliforniaCityVisited(x, y)\nOrlando(x)\nFlorida(x)\nSanDiego(x)\nCalifornia(x)\nSanFrancisco(x)\nNeverGo(x)"
    },
    {
        "NLSTATEMENT": "Everything is either big or small.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Bigx) ⊕ Small(x)",
        "CORRECT": "∀x (Big(x) ⊕ Small(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "Everything is either big or small.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Big(x) ⊕ Small(x))",
        "CORRECT": "∀x (Big(x) ⊕ Small(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "Everything is either big or small.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Big(x) ⊕ Small(x))",
        "CORRECT": "∀x (Big(x) ⊕ Small(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All small things are light. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Small(x) → Light(x))",
        "CORRECT": "∀x (Small(x) → Light(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All big things are heavy. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Big(x) →( Heav)y(x))",
        "CORRECT": "∀x (Big(x) → Heavy(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "All heavy things are still.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Heavy(x) → Still(x))",
        "CORRECT": "∀x (Heavy(x) → Still(x))",
        "PREDICATES": "Kinetic(x)\nHeavy(x)\nLight(x)\nSmall(x)\nChanging(x)\nStill(x)\nUnstable(x)\nBig(x)"
    },
    {
        "NLSTATEMENT": "DI Ray was created and written by Maya Sondhi.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Create(maya, diRay) ∧ Write(maya, diRay)",
        "CORRECT": "Create(maya, diRay) ∧ Write(maya, diRay)",
        "PREDICATES": "British(x)\nTelevisionSeries(x)\nWrite(x, y)\nCreate(x, y)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "Maya Sondhi and Jed Mercurio are both British.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "British(maya) ∧ British(jed) ",
        "CORRECT": "British(maya) ∧ British(jed) ",
        "PREDICATES": "British(x)\nTelevisionSeries(x)\nWrite(x, y)\nCreate(x, y)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "All women are human.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Woman(x → Human(x))",
        "CORRECT": "∀x (Woman(x) → Human(x))",
        "PREDICATES": "Human(x)\nGentleman(x)\nLawyer(x)\nMan(x)\nWoman(x)\nSheep(x)"
    },
    {
        "NLSTATEMENT": "If Mike is not both a human and a sheep, then Mike is either a man or a human.",
        "ERRORTYPE": "no_error",
        "SKETCH": "(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)",
        "CORRECT": "(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)",
        "PREDICATES": "Human(x)\nGentleman(x)\nLawyer(x)\nMan(x)\nWoman(x)\nSheep(x)"
    },
    {
        "NLSTATEMENT": "All women are human.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(∀x) (Woman(x) → Human(x))",
        "CORRECT": "∀x (Woman(x) → Human(x))",
        "PREDICATES": "Human(x)\nGentleman(x)\nLawyer(x)\nMan(x)\nWoman(x)\nSheep(x)"
    },
    {
        "NLSTATEMENT": "No soccer players are professional basketball players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬((∃x (SoccerPlayer(x) ∧ ProfessionalBasketballP)layer(x)))",
        "CORRECT": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "No soccer players are professional basketball players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayerx))",
        "CORRECT": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "Stephen Curry is an NBA player.",
        "ERRORTYPE": "no_error",
        "SKETCH": "NBAPlayer(stephencurry)",
        "CORRECT": "NBAPlayer(stephencurry)",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "4k monitors are more expensive than 1080 monitors and 2k monitors.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))",
        "CORRECT": "∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))",
        "PREDICATES": "Product(x)\nOneOEightO(x)\nTwoK(x)\nBuy(x, y)\nFourK(x)\nHaveEnoughMoneyFor(x, y)\nMonitor(x)\nMoreExpensive(x, y)\nPerson(x)"
    },
    {
        "NLSTATEMENT": "Monitors are products.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Monitor(x) → ∀x  Product(x))",
        "CORRECT": "∀x (Monitor(x) → Product(x))",
        "PREDICATES": "Product(x)\nOneOEightO(x)\nTwoK(x)\nBuy(x, y)\nFourK(x)\nHaveEnoughMoneyFor(x, y)\nMonitor(x)\nMoreExpensive(x, y)\nPerson(x)"
    },
    {
        "NLSTATEMENT": "All artificial satellites are important scientific achievements.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))",
        "CORRECT": "∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))",
        "PREDICATES": "ImportantScientificAchievement(x)\nUSInvention(x)\nArtificialSatellite(x)"
    },
    {
        "NLSTATEMENT": "Some cats are not pets.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Cat(x) ∧ ∃x  ¬Pet(x))",
        "CORRECT": "∃x (Cat(x) ∧ ¬Pet(x))",
        "PREDICATES": "Cat(x)\nMammal(x)\nPet(x)"
    },
    {
        "NLSTATEMENT": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))",
        "CORRECT": "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))",
        "PREDICATES": "CaffeineAddict(x)\nBusy(x)\nCoffeeShop(x)\nKitchenAppliance(x)\nMakeFood(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours",
        "ERRORTYPE": "no_error",
        "SKETCH": "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))",
        "CORRECT": "(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))",
        "PREDICATES": "CaffeineAddict(x)\nBusy(x)\nCoffeeShop(x)\nKitchenAppliance(x)\nMakeFood(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "People either visit a coffee shop at least three times a week or order takeout at least once a day.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (CoffeeShop(x) ∨ ∀x  Takeout(x))",
        "CORRECT": "∀x (CoffeeShop(x) ∨ Takeout(x))",
        "PREDICATES": "CaffeineAddict(x)\nBusy(x)\nCoffeeShop(x)\nKitchenAppliance(x)\nMakeFood(x)\nTakeout(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer((x)))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (NBAPlayer((x) → ProfessionalBasket)ballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "No professional basketball players are soccer players.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "CORRECT": "¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nDefender(x)\nSoccerPlayer(x)\nCenterback(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "Some teachers working at a pool are not nice.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))",
        "CORRECT": "∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))",
        "PREDICATES": "Nice(x)\nTeacherWorkingAtPool(x)\nPoolManager(x)\nWorkAtPool(x)\nLifeguard(x)"
    },
    {
        "NLSTATEMENT": "All teachers working at pools are pool managers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀(x (TeacherWorkingAtPool(x) → PoolManag)er(x))",
        "CORRECT": "∀x (TeacherWorkingAtPool(x) → PoolManager(x))",
        "PREDICATES": "Nice(x)\nTeacherWorkingAtPool(x)\nPoolManager(x)\nWorkAtPool(x)\nLifeguard(x)"
    },
    {
        "NLSTATEMENT": "If someone is a lifeguard, then they work at a pool.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Lifeguard(x) → ∀x  WorkAtPool(x))",
        "CORRECT": "∀x (Lifeguard(x) → WorkAtPool(x))",
        "PREDICATES": "Nice(x)\nTeacherWorkingAtPool(x)\nPoolManager(x)\nWorkAtPool(x)\nLifeguard(x)"
    },
    {
        "NLSTATEMENT": "Not all art pieces require talent.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (ArtPiece(x) ∧ ¬RequiresTalent(x))",
        "CORRECT": "∃x (ArtPiece(x) ∧ ¬RequiresTalent(x))",
        "PREDICATES": "RequiresPractice(x)\nArtPiece(x)\nRequiresTalent(x)"
    },
    {
        "NLSTATEMENT": "People born in Athens, Ohio are Americans.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BornIn(x, athensOhio) → American(x))",
        "CORRECT": "∀x (BornIn(x, athensOhio) → American(x))",
        "PREDICATES": "Lithographer(x)\nPainter(x)\nBornIn(x, y)\nMarriedTo(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Bernarda Bryson Shahn was married to Ben Shahn.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "MarriedTo(bernardaBrysonShahn, benShahn)",
        "CORRECT": "MarriedTo(bernardaBrysonShahn, benShahn)",
        "PREDICATES": "Lithographer(x)\nPainter(x)\nBornIn(x, y)\nMarriedTo(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Bernarda Bryson Shahn was a painter and lithographer.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ",
        "CORRECT": "Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ",
        "PREDICATES": "Lithographer(x)\nPainter(x)\nBornIn(x, y)\nMarriedTo(x, y)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Pet(emma ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))",
        "CORRECT": "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))",
        "PREDICATES": "Roommate(x)\nApartment(x)\nIphone(x)\nPet(x)\nTech(x)\nHouse(x)"
    },
    {
        "NLSTATEMENT": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(Pet(emma) ∧ Apartment(emma)) → ((Petemma) ∧ Apartment(emma) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))",
        "CORRECT": "¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))",
        "PREDICATES": "Roommate(x)\nApartment(x)\nIphone(x)\nPet(x)\nTech(x)\nHouse(x)"
    },
    {
        "NLSTATEMENT": "Every teacher has students.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Teacher(x) → HasStudents(x))",
        "CORRECT": "∀x (Teacher(x) → HasStudents(x))",
        "PREDICATES": "JobAtSchool(x)\nPaidBySchool(x)\nOnPayroll(x)\nHasStudents(x)\nTeacher(x)\nFacultyMember(x)"
    },
    {
        "NLSTATEMENT": "One can either be a faculty member or a teacher.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (FacultyMember(x) ∨ ∀x  Teacher(x))",
        "CORRECT": "∀x (FacultyMember(x) ∨ Teacher(x))",
        "PREDICATES": "JobAtSchool(x)\nPaidBySchool(x)\nOnPayroll(x)\nHasStudents(x)\nTeacher(x)\nFacultyMember(x)"
    },
    {
        "NLSTATEMENT": "Every teacher has students.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Teacher(x) → HasStudents(x))",
        "CORRECT": "∀x (Teacher(x) → HasStudents(x))",
        "PREDICATES": "JobAtSchool(x)\nPaidBySchool(x)\nOnPayroll(x)\nHasStudents(x)\nTeacher(x)\nFacultyMember(x)"
    },
    {
        "NLSTATEMENT": "If Jane saves enough money for the summer, she will fly to Germany.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "EnoughMoney(jane) → FlyTo(jane, germany)",
        "CORRECT": "EnoughMoney(jane) → FlyTo(jane, germany)",
        "PREDICATES": "Kangaroo(x)\nLiveIn(x, y)\nMaySee(x, y, z)\nAnimal(x)\nGoTo(x, y)\nFlyTo(x, y)\nEnoughMoney(x)"
    },
    {
        "NLSTATEMENT": "If a class has prerequisites the student must take the prerequisites to take the class.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (Prereq(x, y) ∧ Taken(x) ↔ CanTake(y))",
        "CORRECT": "∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "If a class has prerequisites the student must take the prerequisites to take the class.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))",
        "CORRECT": "∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "Intro Geology has no prerequisites.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((¬Prer)eq(x, introgeology))",
        "CORRECT": "∀x (¬Prereq(x, introgeology))",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)",
        "CORRECT": "(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)",
        "PREDICATES": "Prereq(x, y)\nCanTake(x)\nTaken(x)"
    },
    {
        "NLSTATEMENT": "The Chronicles of Narnia consists of 7 distinct works.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SevenDistinctWorks(chroniclesofNa(rni)a)",
        "CORRECT": "SevenDistinctWorks(chroniclesofNarnia)",
        "PREDICATES": "Heptalogy(x)\nSevenDistinctWorks(x)"
    },
    {
        "NLSTATEMENT": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (SevenDistinctWorks(x) → Heptalogy((x)))",
        "CORRECT": "∀x (SevenDistinctWorks(x) → Heptalogy(x))",
        "PREDICATES": "Heptalogy(x)\nSevenDistinctWorks(x)"
    },
    {
        "NLSTATEMENT": "The Harry Potter series consists of 7 distinct works.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SevenDistinctWorks(harryPotter)",
        "CORRECT": "SevenDistinctWorks(harryPotter)",
        "PREDICATES": "Heptalogy(x)\nSevenDistinctWorks(x)"
    },
    {
        "NLSTATEMENT": "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (HistoryRenaissance(x) ∨ NotAcademics(x))",
        "CORRECT": "∀x (HistoryRenaissance(x) ∨ NotAcademics(x))",
        "PREDICATES": "NotAcademics(x)\nRenaissanceFair(x)\nIndustry(x)\nHistoryRenaissance(x)\nHistoryProf(x)\nDressingUp(x)"
    },
    {
        "NLSTATEMENT": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))",
        "CORRECT": "¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))",
        "PREDICATES": "NotAcademics(x)\nRenaissanceFair(x)\nIndustry(x)\nHistoryRenaissance(x)\nHistoryProf(x)\nDressingUp(x)"
    },
    {
        "NLSTATEMENT": "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Indu(stry(x) → NotAcademi)cs(x))",
        "CORRECT": "∀x (Industry(x) → NotAcademics(x))",
        "PREDICATES": "NotAcademics(x)\nRenaissanceFair(x)\nIndustry(x)\nHistoryRenaissance(x)\nHistoryProf(x)\nDressingUp(x)"
    },
    {
        "NLSTATEMENT": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ForFamilyUse(x) → ∀x  IntendedToBeDrivenAtModerateSpeeds(x))",
        "CORRECT": "∀x (ForFamilyUse(x) → IntendedToBeDrivenAtModerateSpeeds(x))",
        "PREDICATES": "SportsCar(x)\nIntendedToBeDrivenAtModerateSpeeds(x)\nForFamilyUse(x)"
    },
    {
        "NLSTATEMENT": "If people come to work every day with a positive attitude, then they work well in teams in their workplace.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (PositiveAttitude(x) → WorkTeams(x))",
        "CORRECT": "∀x (PositiveAttitude(x) → WorkTeams(x))",
        "PREDICATES": "Tired(x)\nWorkTeams(x)\nPositiveAttitude(x)\nBossPromotions(x)\nNegativeFeedback(x)\nColleagues(x)"
    },
    {
        "NLSTATEMENT": "If people work well in teams in their workplace, then they get along with all their colleagues at their work.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (WorkTeams(x) → Colleagues(x))",
        "CORRECT": "∀x (WorkTeams(x) → Colleagues(x))",
        "PREDICATES": "Tired(x)\nWorkTeams(x)\nPositiveAttitude(x)\nBossPromotions(x)\nNegativeFeedback(x)\nColleagues(x)"
    },
    {
        "NLSTATEMENT": "People either come into work every day with a positive attitude or are always tired every morning.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (PositiveAttitude(x) ⊕ Tired(x)) ∧ ((Tired(x) → ∀x  BossPromotions(x)))",
        "CORRECT": "∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ ((Tired(x) → BossPromotions(x)))",
        "PREDICATES": "Tired(x)\nWorkTeams(x)\nPositiveAttitude(x)\nBossPromotions(x)\nNegativeFeedback(x)\nColleagues(x)"
    },
    {
        "NLSTATEMENT": "Drishti is open-source.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Open(So)urce(drishti)",
        "CORRECT": "OpenSource(drishti)",
        "PREDICATES": "ModifyFree(x)\nOpenSource(x)"
    },
    {
        "NLSTATEMENT": "Wang's English score is better than Zhang's.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Betterwang, zhang",
        "CORRECT": "Better(wang, zhang)",
        "PREDICATES": "LowerThan90(x)\nGrade(x)\nGetGrade(x, y)\nBetter(x, y)\nRange90to95(x)\nGreaterThan95(x)"
    },
    {
        "NLSTATEMENT": "Wang's English score is better than Zhang's.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Better(wang, zhang)",
        "CORRECT": "Better(wang, zhang)",
        "PREDICATES": "LowerThan90(x)\nGrade(x)\nGetGrade(x, y)\nBetter(x, y)\nRange90to95(x)\nGreaterThan95(x)"
    },
    {
        "NLSTATEMENT": "Wu's English score is lower than 90.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "LowerThan90(wu)",
        "CORRECT": "LowerThan90(wu)",
        "PREDICATES": "LowerThan90(x)\nGrade(x)\nGetGrade(x, y)\nBetter(x, y)\nRange90to95(x)\nGreaterThan95(x)"
    },
    {
        "NLSTATEMENT": "The time is either the day or the night.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Day(x) ∨ ∀x  Night(x))",
        "CORRECT": "∀x (Day(x) ∨ Night(x))",
        "PREDICATES": "PrefersCoolAt(x, y)\nNight(x)\nPrefersWarmAt(x, y)\nDay(x)\nWorkingDuring(x, y)\nSleepingDuring(x, y)"
    },
    {
        "NLSTATEMENT": "Both Columbia University and New York University are located in Manhattan.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "ManhattancolumbiaUniversity ∧ Manhattan(nyc)",
        "CORRECT": "Manhattan(columbiaUniversity) ∧ Manhattan(nyc)",
        "PREDICATES": "Manhattan(x)\nHaveAlbum(x)\nSpeech(x, y)\nIvyLeague(x)"
    },
    {
        "NLSTATEMENT": "Columbia University is one of the Ivy League schools.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "IvyLeague(columbiaUniversity)",
        "CORRECT": "IvyLeague(columbiaUniversity)",
        "PREDICATES": "Manhattan(x)\nHaveAlbum(x)\nSpeech(x, y)\nIvyLeague(x)"
    },
    {
        "NLSTATEMENT": "There are no customers who do not choose any plans. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (¬NoPlan(x))",
        "CORRECT": "∀x (¬NoPlan(x))",
        "PREDICATES": "PlanA(x)\nStudyAtSchool(x)\nNoPlan(x)\nPlanB(x)\nOlderThan80(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "Customers are either older than 80 or are currently studying at school. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (OlderThan80(x) ∨ StudyAtSchool(x))",
        "CORRECT": "∀x (OlderThan80(x) ∨ StudyAtSchool(x))",
        "PREDICATES": "PlanA(x)\nStudyAtSchool(x)\nNoPlan(x)\nPlanB(x)\nOlderThan80(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "There are no customers who do not choose any plans. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (¬NoPlan(x))",
        "CORRECT": "∀x (¬NoPlan(x))",
        "PREDICATES": "PlanA(x)\nStudyAtSchool(x)\nNoPlan(x)\nPlanB(x)\nOlderThan80(x)\nAward(x)"
    },
    {
        "NLSTATEMENT": "Detroit City fell during a race.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Racing(detroitcity) ∧ Falls(detroitcity)",
        "CORRECT": "Racing(detroitcity) ∧ Falls(detroitcity)",
        "PREDICATES": "Horse(x)\nDead(x)\nRacehorse(x)\nRacing(x)\nFalls(x)"
    },
    {
        "NLSTATEMENT": "If a horse falls during a race, then it dies.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))",
        "CORRECT": "∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))",
        "PREDICATES": "Horse(x)\nDead(x)\nRacehorse(x)\nRacing(x)\nFalls(x)"
    },
    {
        "NLSTATEMENT": "Detroit City is a horse.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Horse(detroitcity)",
        "CORRECT": "Horse(detroitcity)",
        "PREDICATES": "Horse(x)\nDead(x)\nRacehorse(x)\nRacing(x)\nFalls(x)"
    },
    {
        "NLSTATEMENT": "An artist is good at painting or music.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music))",
        "CORRECT": "∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music))",
        "PREDICATES": "Architect(x)\nSpeak(x, y)\nArtist(x)\nGoodAt(x, y)\nIllustrator(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Frederick Monhoff was an architect, artist, and illustrator.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrat(or(mo)nhoff)",
        "CORRECT": "Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)",
        "PREDICATES": "Architect(x)\nSpeak(x, y)\nArtist(x)\nGoodAt(x, y)\nIllustrator(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Fiedler was a Czech mathematician.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)",
        "CORRECT": "Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)",
        "PREDICATES": "KnownFor(x, y)\nMathematician(x)\nHonoredBy(x, y)\nTheSecondSmallestEigenvalueOf(x, y)\nCzech(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
        "CORRECT": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
        "PREDICATES": "KnownFor(x, y)\nMathematician(x)\nHonoredBy(x, y)\nTheSecondSmallestEigenvalueOf(x, y)\nCzech(x)"
    },
    {
        "NLSTATEMENT": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "KnownFor(miroslavfiedler, contributionsToLinearAl(gebraAndGraphTheory))",
        "CORRECT": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)",
        "PREDICATES": "KnownFor(x, y)\nMathematician(x)\nHonoredBy(x, y)\nTheSecondSmallestEigenvalueOf(x, y)\nCzech(x)"
    },
    {
        "NLSTATEMENT": "A phone is not a computer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Phone(x) → ∀x  ¬Computer(x))",
        "CORRECT": "∀x (Phone(x) → ¬Computer(x))",
        "PREDICATES": "Laptop(x)\nCanPlayGames(x)\nComputer(x)\nPhone(x)"
    },
    {
        "NLSTATEMENT": "You can play games on a computer.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Computer(x) → CanPlayGames(x))",
        "CORRECT": "∀x (Computer(x) → CanPlayGames(x))",
        "PREDICATES": "Laptop(x)\nCanPlayGames(x)\nComputer(x)\nPhone(x)"
    },
    {
        "NLSTATEMENT": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "AmericanPoliticianwalterbrown ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "CORRECT": "AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "PREDICATES": "Married(x, y)\nIn(x, y)\nLawyer(x)\nGraduatedWith(x, y)\nPracticedLawTogether(x, y)\nServedAs(x, y)\nGraduated(x, y)\nAmericanPolitician(x)"
    },
    {
        "NLSTATEMENT": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "CORRECT": "AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)",
        "PREDICATES": "Married(x, y)\nIn(x, y)\nLawyer(x)\nGraduatedWith(x, y)\nPracticedLawTogether(x, y)\nServedAs(x, y)\nGraduated(x, y)\nAmericanPolitician(x)"
    },
    {
        "NLSTATEMENT": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Inwalterbrown, toledo ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)",
        "CORRECT": "In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)",
        "PREDICATES": "Married(x, y)\nIn(x, y)\nLawyer(x)\nGraduatedWith(x, y)\nPracticedLawTogether(x, y)\nServedAs(x, y)\nGraduated(x, y)\nAmericanPolitician(x)"
    },
    {
        "NLSTATEMENT": "All products commonly used in China are sold in JD.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Co(mmonlyUsedChina(x) → So)ldJD(x))",
        "CORRECT": "∀x (CommonlyUsedChina(x) → SoldJD(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "All products favored by young people are commonly used in China. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))",
        "CORRECT": "∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "All products commonly used in China are sold in JD.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (CommonlyUsedChina(x) → ∀x  SoldJD(x))",
        "CORRECT": "∀x (CommonlyUsedChina(x) → SoldJD(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "All products commonly used in China are sold in JD.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (CommonlyUsedChina(x) → ∀x  SoldJD(x))",
        "CORRECT": "∀x (CommonlyUsedChina(x) → SoldJD(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "All products shipped from China are made in China. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ShipChina(x) → MadeInChina(x))",
        "CORRECT": "∀x (ShipChina(x) → MadeInChina(x))",
        "PREDICATES": "FavoredByYoungPeople(x)\nShipChina(x)\nCommonlyUsedChina(x)\nSoldJD(x)\nMadeInChina(x)"
    },
    {
        "NLSTATEMENT": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)",
        "CORRECT": "OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "John Nash designed Oxford Circus.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Design(johnNash, oxfordCircus)",
        "CORRECT": "Design(johnNash, oxfordCircus)",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "Oxford Street is in London.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (OxfordStreet(x) → London(x))",
        "CORRECT": "∀x (OxfordStreet(x) → London(x))",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "John Nash is an architect in British.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "British(johnNash) ∧ Architect(johnNash)",
        "CORRECT": "British(johnNash) ∧ Architect(johnNash)",
        "PREDICATES": "Architect(x)\nBritish(x)\nLondon(x)\nRegentStreet(x)\nCentralLine(x)\nOxfordStreet(x)\nDesign(x, y)"
    },
    {
        "NLSTATEMENT": "A thing is either alive or dead.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Alive(x) ⊕ Dead(x))",
        "CORRECT": "∀x (Alive(x) ⊕ Dead(x))",
        "PREDICATES": "Dog(x)\nDead(x)\nCat(x)\nGhost(x)\nAlive(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "A thing is either alive or dead.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Alivex) ⊕ Dead(x)",
        "CORRECT": "∀x (Alive(x) ⊕ Dead(x))",
        "PREDICATES": "Dog(x)\nDead(x)\nCat(x)\nGhost(x)\nAlive(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "Ghosts do not exist.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (¬Ghost(x))",
        "CORRECT": "∀x (¬Ghost(x))",
        "PREDICATES": "Dog(x)\nDead(x)\nCat(x)\nGhost(x)\nAlive(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "All animals that are tigers are cats.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Tiger(x) → ∀x  Cat(x))",
        "CORRECT": "∀x (Tiger(x) → Cat(x))",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "Everything that is a husky is a dog.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Husky(x) → Dog(x))",
        "CORRECT": "∀x (Husky(x) → Dog(x))",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "All Bengal tigers are tigers.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BengalTiger(x) → Tiger(x))",
        "CORRECT": "∀x (BengalTiger(x) → Tiger(x))",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "Fido is either a Bengal tiger or a cat.",
        "ERRORTYPE": "no_error",
        "SKETCH": "BengalTiger(fido) ∨ Cat(fido)",
        "CORRECT": "BengalTiger(fido) ∨ Cat(fido)",
        "PREDICATES": "Tiger(x)\nDog(x)\nCat(x)\nHusky(x)\nBengalTiger(x)"
    },
    {
        "NLSTATEMENT": "LA is a city in California(CA).",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "CityInState(la, ca)",
        "CORRECT": "CityInState(la, ca)",
        "PREDICATES": "SummerOlympicsCountry(x, y)\nCityInCountry(x, y)\nCityInState(x, y)\nSummerOlympicsState(x, y)\nSummerOlympicsCity(x, y)\nStateInCountry(x, y)\nInSummerOlympics(x, y)"
    },
    {
        "NLSTATEMENT": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "∀x ∀y  (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "CORRECT": "∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))",
        "PREDICATES": "SummerOlympicsCountry(x, y)\nCityInCountry(x, y)\nCityInState(x, y)\nSummerOlympicsState(x, y)\nSummerOlympicsCity(x, y)\nStateInCountry(x, y)\nInSummerOlympics(x, y)"
    },
    {
        "NLSTATEMENT": "Atlanta is a US city.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "CityInCountry(atlanta, us)",
        "CORRECT": "CityInCountry(atlanta, us)",
        "PREDICATES": "SummerOlympicsCountry(x, y)\nCityInCountry(x, y)\nCityInState(x, y)\nSummerOlympicsState(x, y)\nSummerOlympicsCity(x, y)\nStateInCountry(x, y)\nInSummerOlympics(x, y)"
    },
    {
        "NLSTATEMENT": "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Larger(taigaVole, microtusVole)",
        "CORRECT": "Larger(taigaVole, microtusVole)",
        "PREDICATES": "Vole(x)\nLiveInColdPlace(x)\nCatLikePlayingWith(x)\nLarger(x, y)\nFind(x, y)\nLive(x, y)"
    },
    {
        "NLSTATEMENT": "Cats like playing with all voles.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Vole(x) → CatLikePlayingWith(x))",
        "CORRECT": "∀x (Vole(x) → CatLikePlayingWith(x))",
        "PREDICATES": "Vole(x)\nLiveInColdPlace(x)\nCatLikePlayingWith(x)\nLarger(x, y)\nFind(x, y)\nLive(x, y)"
    },
    {
        "NLSTATEMENT": "Either breast cancer or non-breast cancer. ",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ",
        "CORRECT": " ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ",
        "PREDICATES": "WithoutTumor(x)\nBreastCancer(x)\nATypeOfCancer(x)\nWomen(x)\nMen(x)"
    },
    {
        "NLSTATEMENT": "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)",
        "CORRECT": " ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)",
        "PREDICATES": "WithoutTumor(x)\nBreastCancer(x)\nATypeOfCancer(x)\nWomen(x)\nMen(x)"
    },
    {
        "NLSTATEMENT": "No men have breast cancer.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (Menx) → ¬BreastCancer(x)",
        "CORRECT": " ∀x (Men(x) → ¬BreastCancer(x))",
        "PREDICATES": "WithoutTumor(x)\nBreastCancer(x)\nATypeOfCancer(x)\nWomen(x)\nMen(x)"
    },
    {
        "NLSTATEMENT": "LG34 is equipped in the lab.  ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "La(b()lg-34)",
        "CORRECT": "Lab(lg-34)",
        "PREDICATES": "Lab(x)\nA1080p(x)\nAOC(x)\nCheaper(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "Some monitors equipped in the lab are produced by the company named AOC. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Lab(x) ∧ AOC(x))",
        "CORRECT": "∃x (Lab(x) ∧ AOC(x))",
        "PREDICATES": "Lab(x)\nA1080p(x)\nAOC(x)\nCheaper(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "If the monitor is cheaper than its original prices, then its resolution is 1080p. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Cheaper(x) → A1080p(x))",
        "CORRECT": "∀x (Cheaper(x) → A1080p(x))",
        "PREDICATES": "Lab(x)\nA1080p(x)\nAOC(x)\nCheaper(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "All fruits sold in Boston are shipped from Columbia. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SoldBoston(x) → ShippedFromColumbia(x))",
        "CORRECT": "∀x (SoldBoston(x) → ShippedFromColumbia(x))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "Avocadoe are a kind of fruit sold in New York or New York. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "SoldNewYork(avocado) ∨ SoldBoston(avocado)",
        "CORRECT": "SoldNewYork(avocado) ∨ SoldBoston(avocado)",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "Some fruits sold in New Haven are shipped from Mexico.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x (SoldNewHavenx) ∧ ShippedFromMexico(x)",
        "CORRECT": "∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))",
        "CORRECT": "¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))",
        "PREDICATES": "SoldNewYork(x)\nShippedFromColumbia(x)\nSoldNewHaven(x)\nSoldBoston(x)\nShippedFromMexico(x)"
    },
    {
        "NLSTATEMENT": "Some monitors equipped in the library are produced by AOC. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Library(x) ∧ AOC(x))",
        "CORRECT": "∃x (Library(x) ∧ AOC(x))",
        "PREDICATES": "Cheap(x)\nA1080p(x)\nAOC(x)\nLibrary(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "All monitors cheaper than 800 dollars are with a resolution of 1080p. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Cheap(x) → A1080p(x))",
        "CORRECT": "∀x (Cheap(x) → A1080p(x))",
        "PREDICATES": "Cheap(x)\nA1080p(x)\nAOC(x)\nLibrary(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "If a monitor has a resolution of 1080p, then it does not support the type-c port. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (A1080p(x) → ¬TypeC(x))",
        "CORRECT": "∀x (A1080p(x) → ¬TypeC(x))",
        "PREDICATES": "Cheap(x)\nA1080p(x)\nAOC(x)\nLibrary(x)\nTypeC(x)"
    },
    {
        "NLSTATEMENT": "Sūduva Marijampolė is a soccer team.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "SoccerTeam(suduva)",
        "CORRECT": "SoccerTeam(suduva)",
        "PREDICATES": "Hold(x, y)\nSoccerTeam(x)"
    },
    {
        "NLSTATEMENT": "Hambleton District is in North Yorkshire.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Hambleton(x) → NorthYorkshire(x))",
        "CORRECT": "∀x (Hambleton(x) → NorthYorkshire(x))",
        "PREDICATES": "Village(x)\nNorthYorkshire(x)\nAinderbyQuernhow(x)\nCivilParish(x)\nEngland(x)\nHambleton(x)"
    },
    {
        "NLSTATEMENT": "Ainderby Quernhow is a village and civil parish in the Hambleton District.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x))",
        "CORRECT": "∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x))",
        "PREDICATES": "Village(x)\nNorthYorkshire(x)\nAinderbyQuernhow(x)\nCivilParish(x)\nEngland(x)\nHambleton(x)"
    },
    {
        "NLSTATEMENT": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "CORRECT": "Author(douglasAdams) ∧ Book(theSalmonOfDoubt)",
        "PREDICATES": "AboutTechnology(x)\nAuthor(x)\nBook(x)\nCreateInnovativeIdea(x)\nAboutLifeExperience(x)\nContainInnovativeIdea(x)\nWriter(x)"
    },
    {
        "NLSTATEMENT": "All authors are writers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Author(x) → Writerx)",
        "CORRECT": "∀x (Author(x) → Writer(x))",
        "PREDICATES": "AboutTechnology(x)\nAuthor(x)\nBook(x)\nCreateInnovativeIdea(x)\nAboutLifeExperience(x)\nContainInnovativeIdea(x)\nWriter(x)"
    },
    {
        "NLSTATEMENT": "All authors are writers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Author(x) → Writer(x))",
        "CORRECT": "∀x (Author(x) → Writer(x))",
        "PREDICATES": "AboutTechnology(x)\nAuthor(x)\nBook(x)\nCreateInnovativeIdea(x)\nAboutLifeExperience(x)\nContainInnovativeIdea(x)\nWriter(x)"
    },
    {
        "NLSTATEMENT": "All sustainable fashion brands are eco-friendly brands.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "CORRECT": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "All eco-friendly brands can help slow down global warming. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (Eco-fr(iendlyBrand(x) → HelpSlowDownGlobalWarm)ing(x))",
        "CORRECT": " ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "No disposable products can help slow down global warming. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "CORRECT": "∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "All sustainable fashion brands are eco-friendly brands.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x SustainableFashionBrand(x → Eco-friendlyBrand(x))",
        "CORRECT": " ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "No disposable products can help slow down global warming. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "CORRECT": "∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "No disposable products can help slow down global warming. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (DisposableProducts(x) → ∀x  ¬HelpSlowDownGlobalWarming(x))",
        "CORRECT": "∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))",
        "PREDICATES": "FastFashionProducts(x)\nfriendlyBrand(x)\nSustainableFashionBrand(x)\nHelpSlowDownGlobalWarming(x)\nDisposableProducts(x)"
    },
    {
        "NLSTATEMENT": "Roy Richardson was a cricketer for Sint Maartener, a consituent country.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Cricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)",
        "CORRECT": "Cricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)",
        "PREDICATES": "Dismissed(x, y)\nOld(x)\nBatsman(x)\nPlayedFor(x, y)\nConstituentCountry(x)\nMediumPaceBowler(x)\nCricketeer(x)\nDebutedIn(x, y)\nRightHanded(x)"
    },
    {
        "NLSTATEMENT": "Sherville Huggins dismissed Roy Richardson.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Dismissed(shervillehuggins, royrichardson)",
        "CORRECT": "Dismissed(shervillehuggins, royrichardson)",
        "PREDICATES": "Dismissed(x, y)\nOld(x)\nBatsman(x)\nPlayedFor(x, y)\nConstituentCountry(x)\nMediumPaceBowler(x)\nCricketeer(x)\nDebutedIn(x, y)\nRightHanded(x)"
    },
    {
        "NLSTATEMENT": "To get a job at Google, you need to have a lot of work experience or a good education.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Employed(x, google) → WorkExp(x) ∨ ∀x  GoodEduc(x))",
        "CORRECT": "∀x (Employed(x, google) → WorkExp(x) ∨ GoodEduc(x))",
        "PREDICATES": "Yale(x)\nCV(x, y)\nEmployed(x, y)\nWorkExp(x)\nGoodEduc(x)"
    },
    {
        "NLSTATEMENT": "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "GraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ∧ Student(joe))",
        "CORRECT": "GraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ∧ Student(joe))",
        "PREDICATES": "TakingClass(x)\nDoctor(x)\nGraduateStudent(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All graduate students are people taking classes. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (GraduateStudent(x) → TakingClass(x))",
        "CORRECT": "∀x (GraduateStudent(x) → TakingClass(x))",
        "PREDICATES": "TakingClass(x)\nDoctor(x)\nGraduateStudent(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "All graduate students are people taking classes. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (GraduateStudent(x) → TakingClass(x))",
        "CORRECT": "∀x (GraduateStudent(x) → TakingClass(x))",
        "PREDICATES": "TakingClass(x)\nDoctor(x)\nGraduateStudent(x)\nPhDStudent(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Hugh Vanstone is one of the world's leading lighting designers. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "WorldLeadingLightningDesigner(hughVanstone)",
        "CORRECT": "WorldLeadingLightningDesigner(hughVanstone)",
        "PREDICATES": "AttendedSchoolWhereFrom(x)\nLitOver160Productions(x)\nWorldLeadingLightningDesigner(x)\nFromUK(x)"
    },
    {
        "NLSTATEMENT": "Hugh Vanstone is one of the world's leading lighting designers. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "WorldLeadingLightningDesigner(hughVanstone)",
        "CORRECT": "WorldLeadingLightningDesigner(hughVanstone)",
        "PREDICATES": "AttendedSchoolWhereFrom(x)\nLitOver160Productions(x)\nWorldLeadingLightningDesigner(x)\nFromUK(x)"
    },
    {
        "NLSTATEMENT": "Hugh Vanstone attended school where he is from. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "AttendedSchoolWhereFrom(hughVanstone)",
        "CORRECT": "AttendedSchoolWhereFrom(hughVanstone)",
        "PREDICATES": "AttendedSchoolWhereFrom(x)\nLitOver160Productions(x)\nWorldLeadingLightningDesigner(x)\nFromUK(x)"
    },
    {
        "NLSTATEMENT": "No man can run faster than Bolt. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Man(x) → ¬FasterThanBolt(x))",
        "CORRECT": "∀x (Man(x) → ¬FasterThanBolt(x))",
        "PREDICATES": "Man(x)\nFasterThanBolt(x)"
    },
    {
        "NLSTATEMENT": "Knuth has been called the \"father of the analysis of algorithms\".",
        "ERRORTYPE": "no_error",
        "SKETCH": "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)",
        "CORRECT": "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)",
        "PREDICATES": "BeCalled(x, y)\nAmericanComputerScientist(x)\nProfessorStanford(x)\nMathematician(x)"
    },
    {
        "NLSTATEMENT": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "CORRECT": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "PREDICATES": "BeCalled(x, y)\nAmericanComputerScientist(x)\nProfessorStanford(x)\nMathematician(x)"
    },
    {
        "NLSTATEMENT": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "CORRECT": "AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)",
        "PREDICATES": "BeCalled(x, y)\nAmericanComputerScientist(x)\nProfessorStanford(x)\nMathematician(x)"
    },
    {
        "NLSTATEMENT": "There are no moths within the Chrysomelidae family.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))",
        "CORRECT": "∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))",
        "PREDICATES": "Moth(x)\nSpecies(x)\nIn(x, y)\nFleaBeetle(x)\nFamily(x)"
    },
    {
        "NLSTATEMENT": "There are no moths within the Chrysomelidae family.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))",
        "CORRECT": "∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))",
        "PREDICATES": "Moth(x)\nSpecies(x)\nIn(x, y)\nFleaBeetle(x)\nFamily(x)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli worked for airforces.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))",
        "CORRECT": "∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli worked for airforces.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))",
        "CORRECT": "∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "MilaneseCoachbuilderCompa(ny(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giusep)pecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)",
        "CORRECT": "MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli is a company that specialized in using aluminum.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SpecializedIn(carrozzeriacolli, usingaluminum)",
        "CORRECT": "SpecializedIn(carrozzeriacolli, usingaluminum)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)",
        "CORRECT": "MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)",
        "PREDICATES": "Made(x, y)\nBuiltBy(x, y)\nWorkedFor(x, y)\nMilaneseCoachbuilderCompany(x)\nRacingCar(x)\nEstablishedIn(x, y)\nAirforce(x)\nRacingcar(x)\nFirstAutomobilesBy(x, y)\nEstablishedBy(x, y)\nSpecializedIn(x, y)\nUsed(x, y)"
    },
    {
        "NLSTATEMENT": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "GoToTheCi(nema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(to)day))",
        "CORRECT": "GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))",
        "PREDICATES": "GoToTheCinema(x, y)\nMonth(x)\nMovie(x)\nBadWeather(x)"
    },
    {
        "NLSTATEMENT": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))",
        "CORRECT": "GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))",
        "PREDICATES": "GoToTheCinema(x, y)\nMonth(x)\nMovie(x)\nBadWeather(x)"
    },
    {
        "NLSTATEMENT": "Quiksilver sells sportswear, clothing, footwear, and accessories.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))",
        "CORRECT": "∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))",
        "PREDICATES": "Clothing(x)\nFootwear(x)\nJoeOwns(x)\nAccessory(x)\nQuiksilverSells(x)\nSportswear(x)"
    },
    {
        "NLSTATEMENT": "Quiksilver sells sportswear, clothing, footwear, and accessories.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))",
        "CORRECT": "∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))",
        "PREDICATES": "Clothing(x)\nFootwear(x)\nJoeOwns(x)\nAccessory(x)\nQuiksilverSells(x)\nSportswear(x)"
    },
    {
        "NLSTATEMENT": "Joe owns an item fron Quiksilver.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (QuiksilverSells(x) → JoeOwns(x))",
        "CORRECT": "∃x (QuiksilverSells(x) → JoeOwns(x))",
        "PREDICATES": "Clothing(x)\nFootwear(x)\nJoeOwns(x)\nAccessory(x)\nQuiksilverSells(x)\nSportswear(x)"
    },
    {
        "NLSTATEMENT": "All video games in the FIFA series support the PS4 platform. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x FIFA(x → SupportPS4(x))",
        "CORRECT": "∀x (FIFA(x) → SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "No video games released by Nintendo support the PS4 platform.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "CORRECT": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "No video games released by Nintendo support the PS4 platform.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "CORRECT": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "No video games released by Nintendo support the PS4 platform.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "CORRECT": "∀x (Nintendo(x) → ¬SupportPS4(x))",
        "PREDICATES": "Pokemon(x)\nSupportPS4(x)\nSoccerOnline(x)\nFIFA(x)\nNintendo(x)"
    },
    {
        "NLSTATEMENT": "No payment cards issued by Russian banks can be used with ApplePay.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (RussianBank(x) → ∀x  ¬ApplePay(x))",
        "CORRECT": "∀x (RussianBank(x) → ¬ApplePay(x))",
        "PREDICATES": "Mir(x)\nSocialRussia(x)\nApplePay(x)\nInternational(x)\nRussianBank(x)"
    },
    {
        "NLSTATEMENT": "Bank of America payment cards can be used with ApplePay.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "ApplePay(boapaymentcards)",
        "CORRECT": "ApplePay(boapaymentcards)",
        "PREDICATES": "Mir(x)\nSocialRussia(x)\nApplePay(x)\nInternational(x)\nRussianBank(x)"
    },
    {
        "NLSTATEMENT": "Social payments in Russia can only be transferred to MIR payment cards.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (SocialRussia(x) → Mir(x))",
        "CORRECT": "∀x (SocialRussia(x) → Mir(x))",
        "PREDICATES": "Mir(x)\nSocialRussia(x)\nApplePay(x)\nInternational(x)\nRussianBank(x)"
    },
    {
        "NLSTATEMENT": "The Astro is a van produced by Chevrolet. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Chevrolet(astro) ∧ Van(astro)",
        "CORRECT": "Chevrolet(astro) ∧ Van(astro)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "The Astro is a van produced by Chevrolet. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Chevrolet((astro) ∧ Van()astro)",
        "CORRECT": "Chevrolet(astro) ∧ Van(astro)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "The Lumina APV is produced by Chevrolet. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Chevrolet(luminaAPV)",
        "CORRECT": "Chevrolet(luminaAPV)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "The Astro is a van produced by Chevrolet. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Chevrolet(astro) ∧ Van(astro)",
        "CORRECT": "Chevrolet(astro) ∧ Van(astro)",
        "PREDICATES": "Car(x)\nVan(x)\nChevrolet(x)"
    },
    {
        "NLSTATEMENT": "Everyone who works in person is a commuter.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (InPersonx) → Commuter(x)",
        "CORRECT": "∀x (InPerson(x) → Commuter(x))",
        "PREDICATES": "Commuter(x)\nFromHome(x)\nRelaxed(x)\nInPerson(x)\nHomeOffice(x)"
    },
    {
        "NLSTATEMENT": "George is either a commuter or has a home office setup.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Commuter(george) ⊕ HomeOffice(george)",
        "CORRECT": "Commuter(george) ⊕ HomeOffice(george)",
        "PREDICATES": "Commuter(x)\nFromHome(x)\nRelaxed(x)\nInPerson(x)\nHomeOffice(x)"
    },
    {
        "NLSTATEMENT": "George is either a commuter or has a home office setup.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Commuter(george) ⊕ HomeOffice(george)",
        "CORRECT": "Commuter(george) ⊕ HomeOffice(george)",
        "PREDICATES": "Commuter(x)\nFromHome(x)\nRelaxed(x)\nInPerson(x)\nHomeOffice(x)"
    },
    {
        "NLSTATEMENT": "Jason Kramer hosted a show on a public radio station.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "HostShowOnP(ublicRadioStation(jasonKra)mer)",
        "CORRECT": "HostShowOnPublicRadioStation(jasonKramer)",
        "PREDICATES": "HostShowOnPublicRadioStation(x)\nMusicSupervisor(x)\nRadioPersonality(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Joe Rogan is a radio personality.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "RadioPersonality(joeRogan)",
        "CORRECT": "RadioPersonality(joeRogan)",
        "PREDICATES": "HostShowOnPublicRadioStation(x)\nMusicSupervisor(x)\nRadioPersonality(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Jason Kramer hosted a show on a public radio station.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "HostShowOnPublicRadioStation(jasonKramer)",
        "CORRECT": "HostShowOnPublicRadioStation(jasonKramer)",
        "PREDICATES": "HostShowOnPublicRadioStation(x)\nMusicSupervisor(x)\nRadioPersonality(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Jamaica Blue is sold in Walmart or favored by local residents.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Walmart(jamaicablue) ∨ Favored(jamaicablue)",
        "CORRECT": "Walmart(jamaicablue) ∨ Favored(jamaicablue)",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "No coffee sold in Walmart is produced in France. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Walmart(x) → ¬France(x))",
        "CORRECT": "∀x (Walmart(x) → ¬France(x))",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "Civet Coffee is not produced in Columbia and is cheap.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))",
        "CORRECT": "¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "Jamaica Blue is sold in Walmart or favored by local residents.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Walmart(jamaicablue) ∨ Favored(jamaicablue)",
        "CORRECT": "Walmart(jamaicablue) ∨ Favored(jamaicablue)",
        "PREDICATES": "Company(x)\nHighPrice(x)\nFrance(x)\nColumbia(x)\nWalmart(x)\nFavored(x)"
    },
    {
        "NLSTATEMENT": "Poland is in Europe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Poland(x) → Europex)",
        "CORRECT": "∀x (Poland(x) → Europe(x))",
        "PREDICATES": "Europe(x)\nGalicia(x)\nRochelleLive(x)\nDominiqueLive(x)\nAlfonsoLive(x)\nSpain(x)\nPoland(x)"
    },
    {
        "NLSTATEMENT": "Dominique does not live in Europe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (DominiqueLive(x) → ¬Europe((x)))",
        "CORRECT": "∀x (DominiqueLive(x) → ¬Europe(x))",
        "PREDICATES": "Europe(x)\nGalicia(x)\nRochelleLive(x)\nDominiqueLive(x)\nAlfonsoLive(x)\nSpain(x)\nPoland(x)"
    },
    {
        "NLSTATEMENT": "Poland is in Europe.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Po)land(x) → Europe(x))",
        "CORRECT": "∀x (Poland(x) → Europe(x))",
        "PREDICATES": "Europe(x)\nGalicia(x)\nRochelleLive(x)\nDominiqueLive(x)\nAlfonsoLive(x)\nSpain(x)\nPoland(x)"
    },
    {
        "NLSTATEMENT": "Ralph Hammerthaler was born in 1965. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "BornIn1965(ralphHammerthaler)",
        "CORRECT": "BornIn1965(ralphHammerthaler)",
        "PREDICATES": "LocatedIn(x, y)\nWriter(x)\nBornIn1965(x)\nBornIn(x, y)"
    },
    {
        "NLSTATEMENT": "Ralph Hammerthaler is a German writer.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Writer(ralphHammerthaler)",
        "CORRECT": "Writer(ralphHammerthaler)",
        "PREDICATES": "LocatedIn(x, y)\nWriter(x)\nBornIn1965(x)\nBornIn(x, y)"
    },
    {
        "NLSTATEMENT": "Some books that have won Hugo Awards are written by Tomas.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "CORRECT": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "PREDICATES": "SoldOneMillion(x)\nWinningHugoAward(x)\nWrittenByTomas(x)\nInspiredFromShakespeare(x)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "I(nspiredFromShakespeare(y2001) ⊕ Sold)OneMillion(y2001) ",
        "CORRECT": "InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ",
        "PREDICATES": "SoldOneMillion(x)\nWinningHugoAward(x)\nWrittenByTomas(x)\nInspiredFromShakespeare(x)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "Some books that have won Hugo Awards are written by Tomas.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "CORRECT": "∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))",
        "PREDICATES": "SoldOneMillion(x)\nWinningHugoAward(x)\nWrittenByTomas(x)\nInspiredFromShakespeare(x)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "All fruits are edible.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Fruit(x) → Edible(x))",
        "CORRECT": "∀x (Fruit(x) → Edible(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All edible things are food. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Edible(x) → Food(x))",
        "CORRECT": "∀x (Edible(x) → Food(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All meadows are grass.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Meadow(x) → Grass(x))",
        "CORRECT": "∀x (Meadow(x) → Grass(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "All fruits are edible.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Fruit(x) → Edible(x))",
        "CORRECT": "∀x (Fruit(x) → Edible(x))",
        "PREDICATES": "Edible(x)\nGrass(x)\nFood(x)\nFruit(x)\nMeadow(x)\nLemon(x)"
    },
    {
        "NLSTATEMENT": "If a team wins the NBA finals, then they will have more income.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))",
        "CORRECT": "∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))",
        "PREDICATES": "Attending(x, y)\nTeam(x)\nHasMoreThan(x, y)\nWon(x, y)\nMoreIncome(x)\nFrom(x, y)\nLost(x, y)\nteam(x)"
    },
    {
        "NLSTATEMENT": "Boston Celtics are a team that lost the NBA finals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)",
        "CORRECT": "Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)",
        "PREDICATES": "Attending(x, y)\nTeam(x)\nHasMoreThan(x, y)\nWon(x, y)\nMoreIncome(x)\nFrom(x, y)\nLost(x, y)\nteam(x)"
    },
    {
        "NLSTATEMENT": "If a team wins or loses at the NBA finals, then they are attending the finals.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))",
        "CORRECT": "∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))",
        "PREDICATES": "Attending(x, y)\nTeam(x)\nHasMoreThan(x, y)\nWon(x, y)\nMoreIncome(x)\nFrom(x, y)\nLost(x, y)\nteam(x)"
    },
    {
        "NLSTATEMENT": "Maya is a volleyball player.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "VolleyballPlayer(maya)",
        "CORRECT": "VolleyballPlayer(maya)",
        "PREDICATES": "WillPlayViolin(x)\nVolleyballPlayer(x)\nCanInjureFingures(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to employees are available to connect to the company's wifi. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Employee(x) → ∀x  Wifi(x))",
        "CORRECT": "∀x (Employee(x) → Wifi(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to the company are connected to Google Home. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (InCompany(x) → GoogleHome(x))",
        "CORRECT": "∀x (InCompany(x) → GoogleHome(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices connected to Google Home are controlled by managers. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (GoogleHome(x) → ∀x  ControlledByManager(x))",
        "CORRECT": "∀x (GoogleHome(x) → ControlledByManager(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "All devices belonging to the company are connected to Google Home. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (InCompanyx) → GoogleHome(x)",
        "CORRECT": "∀x (InCompany(x) → GoogleHome(x))",
        "PREDICATES": "ProducedAfter2020(x)\nWifi(x)\nGoogleHome(x)\nControlledByManager(x)\nInCompany(x)\nCompanyLogo(x)\nEmployee(x)\nEasyToOperate(x)"
    },
    {
        "NLSTATEMENT": "No delicate mechanisms are suitable toys for children.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x( (DelicateMechanism(x) → ¬SuitableToyForChil)dren(x))",
        "CORRECT": "∀x (DelicateMechanism(x) → ¬SuitableToyForChildren(x))",
        "PREDICATES": "CDPlayer(x)\nSuitableToyForChildren(x)\nDelicateMechanism(x)"
    },
    {
        "NLSTATEMENT": "All mammals are living beings.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Mammal(x) → ∀x  LivingBeing(x)) ",
        "CORRECT": "∀x (Mammal(x) → LivingBeing(x)) ",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "Some baby elephants are sleepy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BabyElephant(x) ∧ ∃x  Sleepy(x))",
        "CORRECT": "∃x (BabyElephant(x) ∧ Sleepy(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "All elephants are mammals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Elephant(x) → Mammal(x))",
        "CORRECT": "∀x (Elephant(x) → Mammal(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "All elephants are mammals.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Elephant(x) → Mammal(x))",
        "CORRECT": "∀x (Elephant(x) → Mammal(x))",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "All mammals are living beings.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Mammal(x) → ∀x  LivingBeing(x)) ",
        "CORRECT": "∀x (Mammal(x) → LivingBeing(x)) ",
        "PREDICATES": "BabyElephant(x)\nLivingBeing(x)\nMammal(x)\nSleepy(x)\nElephant(x)"
    },
    {
        "NLSTATEMENT": "All kids are students.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Kid(x) → ∀x  Student(x))",
        "CORRECT": "∀x (Kid(x) → Student(x))",
        "PREDICATES": "WorkAtSchool(x)\nKid(x)\nStudent(x)\nDoesHomework(x)\nFaculty(x)"
    },
    {
        "NLSTATEMENT": "All students do homework.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Studentx) → DoesHomework(x)",
        "CORRECT": "∀x (Student(x) → DoesHomework(x))",
        "PREDICATES": "WorkAtSchool(x)\nKid(x)\nStudent(x)\nDoesHomework(x)\nFaculty(x)"
    },
    {
        "NLSTATEMENT": "If Jill works at a school or is a teacher, then Jill works at a school.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)",
        "CORRECT": "WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)",
        "PREDICATES": "WorkAtSchool(x)\nKid(x)\nStudent(x)\nDoesHomework(x)\nFaculty(x)"
    },
    {
        "NLSTATEMENT": "If the song Max listens to is rap, then the song is from Kanye West. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (MaxListensToRap(x) → SongsFro(mKanyeWe)st(x))",
        "CORRECT": "∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))",
        "PREDICATES": "MaxListensToRap(x)\nSongsFromKanyeWest(x)\nNeedToBeWrittenWithWords(x)\nMaxListensToClassicalMusic(x)\nSongsFrom12thCentury(x)\nSongsFullOfLyrics(x)"
    },
    {
        "NLSTATEMENT": "Either Max listens to classical music or Max listens to rap. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))",
        "CORRECT": "∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))",
        "PREDICATES": "MaxListensToRap(x)\nSongsFromKanyeWest(x)\nNeedToBeWrittenWithWords(x)\nMaxListensToClassicalMusic(x)\nSongsFrom12thCentury(x)\nSongsFullOfLyrics(x)"
    },
    {
        "NLSTATEMENT": "If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)",
        "CORRECT": "MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)",
        "PREDICATES": "MaxListensToRap(x)\nSongsFromKanyeWest(x)\nNeedToBeWrittenWithWords(x)\nMaxListensToClassicalMusic(x)\nSongsFrom12thCentury(x)\nSongsFullOfLyrics(x)"
    },
    {
        "NLSTATEMENT": "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Peak(x, y) → Popular(x))",
        "CORRECT": "∀x ∀y (Peak(x, y) → Popular(x))",
        "PREDICATES": "Peak(x, y)\nPopular(x)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Peak(yourWoman, uKSinglesChart)",
        "CORRECT": "Peak(yourWoman, uKSinglesChart)",
        "PREDICATES": "Peak(x, y)\nPopular(x)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "If a song peaked at No.1 at a cetain place, then it was extremely popular.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (Peak(x, y) → ∀x  Popular(x))",
        "CORRECT": "∀x ∀y (Peak(x, y) → Popular(x))",
        "PREDICATES": "Peak(x, y)\nPopular(x)\nProduce(x, y)"
    },
    {
        "NLSTATEMENT": "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Indoors(x) → ¬Gym(x))",
        "CORRECT": "∀x (Indoors(x) → ¬Gym(x))",
        "PREDICATES": "Limp(x)\nTired(x)\nSpry(x)\nGym(x)\nIndoors(x)\nMedical(x)"
    },
    {
        "NLSTATEMENT": "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(Limp(Mark) ⊕ SpryMark) → Limp(Mark) ∨ Tired(Mark)",
        "CORRECT": "(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)",
        "PREDICATES": "Limp(x)\nTired(x)\nSpry(x)\nGym(x)\nIndoors(x)\nMedical(x)"
    },
    {
        "NLSTATEMENT": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Medical(x) → ∀x  ¬Spry(x))",
        "CORRECT": "∀x (Medical(x) → ¬Spry(x))",
        "PREDICATES": "Limp(x)\nTired(x)\nSpry(x)\nGym(x)\nIndoors(x)\nMedical(x)"
    },
    {
        "NLSTATEMENT": "Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScorerealMadrid, atleticoMadrid ∧ During(regularTime)",
        "CORRECT": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)",
        "PREDICATES": "PlayPenalty(x, y)\nPlayExtra(x, y)\nDuring(x)\nSoccerTeam(x)\nSameScore(x, y)"
    },
    {
        "NLSTATEMENT": "Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)",
        "CORRECT": "SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)",
        "PREDICATES": "PlayPenalty(x, y)\nPlayExtra(x, y)\nDuring(x)\nSoccerTeam(x)\nSameScore(x, y)"
    },
    {
        "NLSTATEMENT": "Electric dance music bands are bands.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (ElectronicDanceMusicBand(x) → Bandx)",
        "CORRECT": "∀x (ElectronicDanceMusicBand(x) → Band(x))",
        "PREDICATES": "Single(x)\nFormed(x, y)\nElectronicDanceMusicBand(x)\nReleased(x, y)\nClubSingle(x)\nBand(x)\nFormerMemberOf(x, y)\nBasedOn(x, y)"
    },
    {
        "NLSTATEMENT": "Electric dance music bands are bands.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ElectronicDanceMusicBand(x) → Band(x))",
        "CORRECT": "∀x (ElectronicDanceMusicBand(x) → Band(x))",
        "PREDICATES": "Single(x)\nFormed(x, y)\nElectronicDanceMusicBand(x)\nReleased(x, y)\nClubSingle(x)\nBand(x)\nFormerMemberOf(x, y)\nBasedOn(x, y)"
    },
    {
        "NLSTATEMENT": "Steve Hillage and Miquette Giraudy are former members of the band Gong.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)",
        "CORRECT": "FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)",
        "PREDICATES": "Single(x)\nFormed(x, y)\nElectronicDanceMusicBand(x)\nReleased(x, y)\nClubSingle(x)\nBand(x)\nFormerMemberOf(x, y)\nBasedOn(x, y)"
    },
    {
        "NLSTATEMENT": "Extractive models are a kind of summarization models.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Model(x ∧ Extractive(x) → Summarization(x))",
        "CORRECT": "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "PREDICATES": "Summarization(x)\nOnlyUseInputDocument(x)\nModel(x)\nFaithful(x)\nExtractive(x)"
    },
    {
        "NLSTATEMENT": "Extractive models are a kind of summarization models.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "CORRECT": "∀x (Model(x) ∧ Extractive(x) → Summarization(x))",
        "PREDICATES": "Summarization(x)\nOnlyUseInputDocument(x)\nModel(x)\nFaithful(x)\nExtractive(x)"
    },
    {
        "NLSTATEMENT": "If people study hard, then they grew up with parents who worked as doctors.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x S(tudy()x) → ParentDoctors(x)",
        "CORRECT": "∀x Study(x) → ParentDoctors(x)",
        "PREDICATES": "ParentDoctors(x)\nIndustry(x)\nStudyingToBeDoctor(x)\nHealthcare(x)\nStudy(x)\nCoding(x)"
    },
    {
        "NLSTATEMENT": "If people practice coding questions, then they are not studying to go to medical school to become a doctor.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x Coding(x) → ¬StudyingToBeDoctor(x)",
        "CORRECT": "∀x Coding(x) → ¬StudyingToBeDoctor(x)",
        "PREDICATES": "ParentDoctors(x)\nIndustry(x)\nStudyingToBeDoctor(x)\nHealthcare(x)\nStudy(x)\nCoding(x)"
    },
    {
        "NLSTATEMENT": "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x Healthcare(x) → StudyingToBeDoctor(x)",
        "CORRECT": "∀x Healthcare(x) → StudyingToBeDoctor(x)",
        "PREDICATES": "ParentDoctors(x)\nIndustry(x)\nStudyingToBeDoctor(x)\nHealthcare(x)\nStudy(x)\nCoding(x)"
    },
    {
        "NLSTATEMENT": "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x Miserly(x) ∨ Frivolous(x)",
        "CORRECT": "∀x Miserly(x) ∨ Frivolous(x)",
        "PREDICATES": "Frivolous(x)\nMiserly(x)\nLuxury(x)\nSpa(x)\nShopping(x)"
    },
    {
        "NLSTATEMENT": "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " Spa(x) → ¬Miserly(x)",
        "CORRECT": "∀x Spa(x) → ¬Miserly(x)",
        "PREDICATES": "Frivolous(x)\nMiserly(x)\nLuxury(x)\nSpa(x)\nShopping(x)"
    },
    {
        "NLSTATEMENT": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬Miserly(Jess) → ¬Luxury(Jess)",
        "CORRECT": "¬Miserly(Jess) → ¬Luxury(Jess)",
        "PREDICATES": "Frivolous(x)\nMiserly(x)\nLuxury(x)\nSpa(x)\nShopping(x)"
    },
    {
        "NLSTATEMENT": "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)",
        "CORRECT": "Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)",
        "PREDICATES": "By(x, y)\nAlbum(x)\nSingle(x)\nSoldOver(x, y)\nAlbumsReleased(x, y)\nFrom(x, y)\nIsAlbumOf(x, y)\nCertifiedGold(x)"
    },
    {
        "NLSTATEMENT": "The indie pop band Phoenix has released 6 albums. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "AlbumsReleased(phoenix, l6)",
        "CORRECT": "AlbumsReleased(phoenix, l6)",
        "PREDICATES": "By(x, y)\nAlbum(x)\nSingle(x)\nSoldOver(x, y)\nAlbumsReleased(x, y)\nFrom(x, y)\nIsAlbumOf(x, y)\nCertifiedGold(x)"
    },
    {
        "NLSTATEMENT": "Thor will break a bridge when he is happy.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Happy(thor) → BreakBridge(thor)",
        "CORRECT": "Happy(thor) → BreakBridge(thor)",
        "PREDICATES": "Wake(x)\nSuperhero(x)\nDestroyer(x)\nGod(x)\nCivilian(x)\nBreakBridge(x)\nHappy(x)\nWearUniform(x)\nAngry(x)"
    },
    {
        "NLSTATEMENT": "The Hulk is a destroyer.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Dest(royer(hu)lk)",
        "CORRECT": "Destroyer(hulk)",
        "PREDICATES": "Wake(x)\nSuperhero(x)\nDestroyer(x)\nGod(x)\nCivilian(x)\nBreakBridge(x)\nHappy(x)\nWearUniform(x)\nAngry(x)"
    },
    {
        "NLSTATEMENT": "The Hulk is a destroyer.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Destroyer(hulk)",
        "CORRECT": "Destroyer(hulk)",
        "PREDICATES": "Wake(x)\nSuperhero(x)\nDestroyer(x)\nGod(x)\nCivilian(x)\nBreakBridge(x)\nHappy(x)\nWearUniform(x)\nAngry(x)"
    },
    {
        "NLSTATEMENT": "Diethylcarbamazine is not ivermectin.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))",
        "CORRECT": "∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))",
        "PREDICATES": "Treats(x, y)\nIvermectin(x)\nMedication(x)\nDiethylcarbamazine(x)\nRiverBlindness(x)\nPreferredTreatment(x, y)\nDiscoveredIn(x, y)"
    },
    {
        "NLSTATEMENT": "Diethylcarbamazine can be used to treat river blindness.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∀y (Diethylcarbamazine(x) ∧ ∀x  RiverBlindness(y) → Treats(x, y))",
        "CORRECT": "∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "PREDICATES": "Treats(x, y)\nIvermectin(x)\nMedication(x)\nDiethylcarbamazine(x)\nRiverBlindness(x)\nPreferredTreatment(x, y)\nDiscoveredIn(x, y)"
    },
    {
        "NLSTATEMENT": "Diethylcarbamazine can be used to treat river blindness.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "CORRECT": "∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))",
        "PREDICATES": "Treats(x, y)\nIvermectin(x)\nMedication(x)\nDiethylcarbamazine(x)\nRiverBlindness(x)\nPreferredTreatment(x, y)\nDiscoveredIn(x, y)"
    },
    {
        "NLSTATEMENT": "All implementing machine learning algorithms are to learn and classify multivariate data.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        "CORRECT": " ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ",
        "PREDICATES": "LearnAndClassifyMultivariateData(x)\nImplementingMachineLearningAlgorithms(x)\nMultivoxelPatternAnalysis(x)\nUsesGeneralizedLinearModel(x)\nUnivariateAnalysis(x)"
    },
    {
        "NLSTATEMENT": "All univariate analyses use a generalized linear model. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (UnivariateAnalysis(x) → ∀x  UsesGeneralizedLinearModel(x)) ",
        "CORRECT": "∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) ",
        "PREDICATES": "LearnAndClassifyMultivariateData(x)\nImplementingMachineLearningAlgorithms(x)\nMultivoxelPatternAnalysis(x)\nUsesGeneralizedLinearModel(x)\nUnivariateAnalysis(x)"
    },
    {
        "NLSTATEMENT": "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.",
        "ERRORTYPE": "no_error",
        "SKETCH": " ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)",
        "CORRECT": " ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)",
        "PREDICATES": "LearnAndClassifyMultivariateData(x)\nImplementingMachineLearningAlgorithms(x)\nMultivoxelPatternAnalysis(x)\nUsesGeneralizedLinearModel(x)\nUnivariateAnalysis(x)"
    },
    {
        "NLSTATEMENT": "All Leukemia is blood cancer. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Leukemia(x) → BloodCancer(x))",
        "CORRECT": "∀x (Leukemia(x) → BloodCancer(x))",
        "PREDICATES": "BloodCancer(x)\nLabTestsOrImagingRequired(x)\nLeukemia(x)\nRareDiseases(x)\nMild(x)\nRequiresAMedicalDiagnosis(x)"
    },
    {
        "NLSTATEMENT": "All blood cancers are rare diseases.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BloodCancer(x) → RareDiseases(x))",
        "CORRECT": "∀x (BloodCancer(x) → RareDiseases(x))",
        "PREDICATES": "BloodCancer(x)\nLabTestsOrImagingRequired(x)\nLeukemia(x)\nRareDiseases(x)\nMild(x)\nRequiresAMedicalDiagnosis(x)"
    },
    {
        "NLSTATEMENT": "All blood cancers are rare diseases.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BloodCancer(x) → RareDiseases(x))",
        "CORRECT": "∀x (BloodCancer(x) → RareDiseases(x))",
        "PREDICATES": "BloodCancer(x)\nLabTestsOrImagingRequired(x)\nLeukemia(x)\nRareDiseases(x)\nMild(x)\nRequiresAMedicalDiagnosis(x)"
    },
    {
        "NLSTATEMENT": "No precious metals aren't scarce.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (PreciousMetals(x) → ¬NotScarce(x))",
        "CORRECT": "∀x (PreciousMetals(x) → ¬NotScarce(x))",
        "PREDICATES": "EssentialForElectricVehicles(x)\nBeUsedForBatteries(x)\nrareEarthMetals(x)\nNotScarce(x)\nPreciousMetals(x)\nRareEarthMetals(x)"
    },
    {
        "NLSTATEMENT": "Either non-rare earth metals or rare earth metals. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "  (Non-rareEarthMetals(x) ∨ ∀x  RareEarthMetals(x)) ",
        "CORRECT": " ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) ",
        "PREDICATES": "EssentialForElectricVehicles(x)\nBeUsedForBatteries(x)\nrareEarthMetals(x)\nNotScarce(x)\nPreciousMetals(x)\nRareEarthMetals(x)"
    },
    {
        "NLSTATEMENT": "All non-rare earth metals are not scarce.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (Non-rareEarthMetals(x) → NotScarcex) ",
        "CORRECT": " ∀x (Non-rareEarthMetals(x) → NotScarce(x)) ",
        "PREDICATES": "EssentialForElectricVehicles(x)\nBeUsedForBatteries(x)\nrareEarthMetals(x)\nNotScarce(x)\nPreciousMetals(x)\nRareEarthMetals(x)"
    },
    {
        "NLSTATEMENT": "If people grew up with childhood pets, then they own at least one pet.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ChildhoodPet(x) → OwnPet(x))",
        "CORRECT": "∀x (ChildhoodPet(x) → OwnPet(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(Hi(reCleaning(jac)k) ⊕ OwnPet(jack))",
        "CORRECT": "¬(HireCleaning(jack) ⊕ OwnPet(jack))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "If people grew up with childhood pets, then they own at least one pet.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (ChildhoodPet(x) → OwnPet(x))",
        "CORRECT": "∀x (ChildhoodPet(x) → OwnPet(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "If people live in the suburbs, then they have tidy houses.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Suburbs(x) → ∀x  ChildhoodPet(x))",
        "CORRECT": "∀x (Suburbs(x) → ChildhoodPet(x))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(HireCleaningjack) ⊕ OwnPet(jack)",
        "CORRECT": "¬(HireCleaning(jack) ⊕ OwnPet(jack))",
        "PREDICATES": "OwnPet(x)\nTidyHouse(x)\nSuburbs(x)\nHireCleaning(x)\nChildhoodPet(x)"
    },
    {
        "NLSTATEMENT": "A bottle is either standing upright or toppled over. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Upright(bottle) ⊕ ToppledOver(bottle)",
        "CORRECT": "Upright(bottle) ⊕ ToppledOver(bottle)",
        "PREDICATES": "ToppledOver(x)\nUpright(x)"
    },
    {
        "NLSTATEMENT": "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (YoungChildren(x) ⊕ Committments(x))",
        "CORRECT": "∀x (YoungChildren(x) ⊕ Committments(x))",
        "PREDICATES": "BusyMorning(x)\nCommittments(x)\nHardworking(x)\nOrganized(x)\nCereal(x)\nYoungChildren(x)"
    },
    {
        "NLSTATEMENT": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))",
        "CORRECT": "(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))",
        "PREDICATES": "BusyMorning(x)\nCommittments(x)\nHardworking(x)\nOrganized(x)\nCereal(x)\nYoungChildren(x)"
    },
    {
        "NLSTATEMENT": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Committments(x) → Hardworking(x))",
        "CORRECT": "∀x (Committments(x) → Hardworking(x))",
        "PREDICATES": "BusyMorning(x)\nCommittments(x)\nHardworking(x)\nOrganized(x)\nCereal(x)\nYoungChildren(x)"
    },
    {
        "NLSTATEMENT": "Ableton makes music software.",
        "ERRORTYPE": "no_error",
        "SKETCH": "MakesMusicSoftware(ableton)",
        "CORRECT": "MakesMusicSoftware(ableton)",
        "PREDICATES": "OfficeIn(x, y)\nIsMultinationalCompany(x)\nSameCountry(x, y)\nMakesMusicSoftware(x)"
    },
    {
        "NLSTATEMENT": "USA and Germany are different countries.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬SameCountry(germany, usa)",
        "CORRECT": "¬SameCountry(germany, usa)",
        "PREDICATES": "OfficeIn(x, y)\nIsMultinationalCompany(x)\nSameCountry(x, y)\nMakesMusicSoftware(x)"
    },
    {
        "NLSTATEMENT": "USA and Germany are different countries.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬SameCountrygermany, usa",
        "CORRECT": "¬SameCountry(germany, usa)",
        "PREDICATES": "OfficeIn(x, y)\nIsMultinationalCompany(x)\nSameCountry(x, y)\nMakesMusicSoftware(x)"
    },
    {
        "NLSTATEMENT": "Every swimmer can go underwater.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Swimmer(x) → ∀x  GoesUnderwater(x))",
        "CORRECT": "∀x (Swimmer(x) → GoesUnderwater(x))",
        "PREDICATES": "Swimmer(x)\nPenguin(x)\nNonFlyingBirdAntartica(x)\nGoesUnderwater(x)\nEatsFishCaughtThemselves(x)"
    },
    {
        "NLSTATEMENT": "Every swimmer can go underwater.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Swimmer(x) → GoesUnderwater(x))",
        "CORRECT": "∀x (Swimmer(x) → GoesUnderwater(x))",
        "PREDICATES": "Swimmer(x)\nPenguin(x)\nNonFlyingBirdAntartica(x)\nGoesUnderwater(x)\nEatsFishCaughtThemselves(x)"
    },
    {
        "NLSTATEMENT": "Every swimmer can go underwater.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Swimmer(x) → GoesUnderwater(x))",
        "CORRECT": "∀x (Swimmer(x) → GoesUnderwater(x))",
        "PREDICATES": "Swimmer(x)\nPenguin(x)\nNonFlyingBirdAntartica(x)\nGoesUnderwater(x)\nEatsFishCaughtThemselves(x)"
    },
    {
        "NLSTATEMENT": "All researchers are professors.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Researcher(x → Professor(x))",
        "CORRECT": "∀x (Researcher(x) → Professor(x))",
        "PREDICATES": "Researcher(x)\nStudent(x)\nStudy(x)\nTeacher(x)\nProfessor(x)"
    },
    {
        "NLSTATEMENT": "No teachers are students.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Teacher(x) → ¬Student(x))",
        "CORRECT": "∀x (Teacher(x) → ¬Student(x))",
        "PREDICATES": "Researcher(x)\nStudent(x)\nStudy(x)\nTeacher(x)\nProfessor(x)"
    },
    {
        "NLSTATEMENT": "If Leon is not studying, then Leon is a teacher.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Study((leon) → Teacher)(leon)",
        "CORRECT": "¬Study(leon) → Teacher(leon)",
        "PREDICATES": "Researcher(x)\nStudent(x)\nStudy(x)\nTeacher(x)\nProfessor(x)"
    },
    {
        "NLSTATEMENT": "A cutman is responsible for preventing and treating physical damage to a fighter.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x Cutman(x → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))",
        "CORRECT": "∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))",
        "PREDICATES": "Cutman(x)\nTreat(x, y)\nHandle(x, y)\nPrevent(x, y)\nAppear(x, y)"
    },
    {
        "NLSTATEMENT": "A cutman is responsible for preventing and treating physical damage to a fighter.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))",
        "CORRECT": "∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))",
        "PREDICATES": "Cutman(x)\nTreat(x, y)\nHandle(x, y)\nPrevent(x, y)\nAppear(x, y)"
    },
    {
        "NLSTATEMENT": "A cutman is responsible for preventing and treating physical damage to a fighter.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x,( physic)alDamage))",
        "CORRECT": "∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))",
        "PREDICATES": "Cutman(x)\nTreat(x, y)\nHandle(x, y)\nPrevent(x, y)\nAppear(x, y)"
    },
    {
        "NLSTATEMENT": "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)",
        "CORRECT": "PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)",
        "PREDICATES": "History(x)\nScientist(x)\nWorldsBestKnown(x)\nPortrait(x)\nStillLife(x)\nPaintedBy(x, y)\nLandscape(x)\nPainter(x)\nAnimal(x)\nPainting(x)"
    },
    {
        "NLSTATEMENT": "Leonardo da Vinci was a scientist and painter.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci)",
        "CORRECT": "Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci)",
        "PREDICATES": "History(x)\nScientist(x)\nWorldsBestKnown(x)\nPortrait(x)\nStillLife(x)\nPaintedBy(x, y)\nLandscape(x)\nPainter(x)\nAnimal(x)\nPainting(x)"
    },
    {
        "NLSTATEMENT": "The Mona Lisa is a portrait painted by Leonardo da Vinci.",
        "ERRORTYPE": "no_error",
        "SKETCH": "PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)",
        "CORRECT": "PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)",
        "PREDICATES": "History(x)\nScientist(x)\nWorldsBestKnown(x)\nPortrait(x)\nStillLife(x)\nPaintedBy(x, y)\nLandscape(x)\nPainter(x)\nAnimal(x)\nPainting(x)"
    },
    {
        "NLSTATEMENT": "Nadal is a World Tour player or a Grand Slam champion",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "CORRECT": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "All Grand Slam champions are World Tour players.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "CORRECT": "∀x (GrandSlamChampion(x) → WorldTourPlayer(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "No professional tennis umpires are professional tennis players.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "CORRECT": "∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "Nadal is a World Tour player or a Grand Slam champion",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "CORRECT": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "Nadal is a World Tour player or a Grand Slam champion",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "CORRECT": "WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "All Grand Slam umpires are professional tennis umpires.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (GrandSlamUmpire(x) → ∀x  ProfessionalTennisUmpire(x))",
        "CORRECT": "∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))",
        "PREDICATES": "WorldTourPlayer(x)\nProfessionalTennisPlayer(x)\nGrandSlamUmpire(x)\nProfessionalTennisUmpire(x)\nGrandSlamChampion(x)"
    },
    {
        "NLSTATEMENT": "Sanctioned buisnesses are limited.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "CORRECT": "∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))",
        "PREDICATES": "Buisness(x)\nSanctioned(x)\nLimited(x)\nFree(x)"
    },
    {
        "NLSTATEMENT": "Unsanctioned buisnesses are free.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Buisness(x) ∧ ¬Sanctioned(x) → ∀x  Free(x))",
        "CORRECT": "∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))",
        "PREDICATES": "Buisness(x)\nSanctioned(x)\nLimited(x)\nFree(x)"
    },
    {
        "NLSTATEMENT": "Buisnesses are either sanctioned or unsanctioned.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "CORRECT": "∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))",
        "PREDICATES": "Buisness(x)\nSanctioned(x)\nLimited(x)\nFree(x)"
    },
    {
        "NLSTATEMENT": "When something is depressing, it is sad.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Depressing(x) → ∀x  Sad(x))",
        "CORRECT": "∀x (Depressing(x) → Sad(x))",
        "PREDICATES": "V(x)\nSad(x)\nDepressing(x)"
    },
    {
        "NLSTATEMENT": "A paalstab is not an axe, but rather a digging shovel.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingSho(vel()x))",
        "CORRECT": "∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))",
        "PREDICATES": "Palstave(x)\nMould(x)\nFoundIn(x, y)\nPopularized(x, y)\nDiggingShovel(x)\nArcheologist(x)\nAxe(x)\nFrom(x, y)\nPaalstab(x)\nCastIn(x, y)"
    },
    {
        "NLSTATEMENT": "John Evans is an archeologist who popularized the term \"palstave\".",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)",
        "CORRECT": "Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)",
        "PREDICATES": "Palstave(x)\nMould(x)\nFoundIn(x, y)\nPopularized(x, y)\nDiggingShovel(x)\nArcheologist(x)\nAxe(x)\nFrom(x, y)\nPaalstab(x)\nCastIn(x, y)"
    },
    {
        "NLSTATEMENT": "Palstaves are a type of early bronze axe.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))",
        "CORRECT": "∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))",
        "PREDICATES": "Palstave(x)\nMould(x)\nFoundIn(x, y)\nPopularized(x, y)\nDiggingShovel(x)\nArcheologist(x)\nAxe(x)\nFrom(x, y)\nPaalstab(x)\nCastIn(x, y)"
    },
    {
        "NLSTATEMENT": "Koei Tecmo is a Japanese video game and anime holding company.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "CORRECT": "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "PREDICATES": "DisbandedIn(x, y)\nDisbanded(x)\nCompany(x)\nJapanese(x)\nSurvived(x)\nVideoGameHoldingCompany(x)\nRenamed(x)\nAnimeHoldingCompany(x)\nHoldingCompany(x)\nHolds(x, y)"
    },
    {
        "NLSTATEMENT": "Holding companies hold several companies.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "CORRECT": "∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))",
        "PREDICATES": "DisbandedIn(x, y)\nDisbanded(x)\nCompany(x)\nJapanese(x)\nSurvived(x)\nVideoGameHoldingCompany(x)\nRenamed(x)\nAnimeHoldingCompany(x)\nHoldingCompany(x)\nHolds(x, y)"
    },
    {
        "NLSTATEMENT": "Koei Tecmo is a Japanese video game and anime holding company.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "CORRECT": "Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)",
        "PREDICATES": "DisbandedIn(x, y)\nDisbanded(x)\nCompany(x)\nJapanese(x)\nSurvived(x)\nVideoGameHoldingCompany(x)\nRenamed(x)\nAnimeHoldingCompany(x)\nHoldingCompany(x)\nHolds(x, y)"
    },
    {
        "NLSTATEMENT": "Only the Playstation Camera is compatible with more than one system.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)",
        "CORRECT": "¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)",
        "PREDICATES": "Compatible(x, y)\nAccessory(x, y)"
    },
    {
        "NLSTATEMENT": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Accessory(pseyetoy, ps2)",
        "CORRECT": "Accessory(pseyetoy, ps2)",
        "PREDICATES": "Compatible(x, y)\nAccessory(x, y)"
    },
    {
        "NLSTATEMENT": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Accessory(pseyetoy, ps2)",
        "CORRECT": "Accessory(pseyetoy, ps2)",
        "PREDICATES": "Compatible(x, y)\nAccessory(x, y)"
    },
    {
        "NLSTATEMENT": "If a European plays football, they play what Americans call soccer.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))",
        "CORRECT": "∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))",
        "PREDICATES": "European(x)\nPlaysAmericanSoccer(x)\nFootballPlayer(x)"
    },
    {
        "NLSTATEMENT": "Some games published before 2010 support the Linux OS system. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃x ((PublishedBefore2010(x) ∧ SupportLin(uxSystem()x)))",
        "CORRECT": "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "PREDICATES": "SoldMillion(x)\nPublishedBefore2010(x)\nPopular(x)\nBestSeller(x)\nDevelopedByParadox(x)\nSupportLinuxSystem(x)"
    },
    {
        "NLSTATEMENT": "Some games published before 2010 support the Linux OS system. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "CORRECT": "∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))",
        "PREDICATES": "SoldMillion(x)\nPublishedBefore2010(x)\nPopular(x)\nBestSeller(x)\nDevelopedByParadox(x)\nSupportLinuxSystem(x)"
    },
    {
        "NLSTATEMENT": "If the game has sold more than 1 million copies, then it is on the Best Seller list. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (SoldMillion(x) → BestSeller(x))",
        "CORRECT": "∀x (SoldMillion(x) → BestSeller(x))",
        "PREDICATES": "SoldMillion(x)\nPublishedBefore2010(x)\nPopular(x)\nBestSeller(x)\nDevelopedByParadox(x)\nSupportLinuxSystem(x)"
    },
    {
        "NLSTATEMENT": "There is an Indian.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "∃x  (From(x, y) ∧ India(y))",
        "CORRECT": "∃x ∃y (From(x, y) ∧ India(y))",
        "PREDICATES": "India(x)\nSpeak(x, y)\nChina(x)\nFrom(x, y)\nBRICS(x)\nEmergingEconomy(x)"
    },
    {
        "NLSTATEMENT": "All people from India speak Hindi or English.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))",
        "CORRECT": "∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))",
        "PREDICATES": "India(x)\nSpeak(x, y)\nChina(x)\nFrom(x, y)\nBRICS(x)\nEmergingEconomy(x)"
    },
    {
        "NLSTATEMENT": "India is one of BRICS and its economy is emerging.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (India(x) → BRICS(x) ∧ ∀x  EmergingEconomy(x))",
        "CORRECT": "∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))",
        "PREDICATES": "India(x)\nSpeak(x, y)\nChina(x)\nFrom(x, y)\nBRICS(x)\nEmergingEconomy(x)"
    },
    {
        "NLSTATEMENT": "Daveed Diggs is an actor and film producer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)",
        "CORRECT": "Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)",
        "PREDICATES": "Film(x)\nPlayed(x, y)\nPlayedIn(x, y)\nPlayedTwoRoles(x)\nWonBestActorAward(x)\nMusical(x)\nActor(x)\nFilmProducer(x)"
    },
    {
        "NLSTATEMENT": "The actor playing Thomas Jefferson won the best actor award.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Actor(x) ∧ Playedx, thomasJefferson) → WonBestActorAward(x)",
        "CORRECT": "∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))",
        "PREDICATES": "Film(x)\nPlayed(x, y)\nPlayedIn(x, y)\nPlayedTwoRoles(x)\nWonBestActorAward(x)\nMusical(x)\nActor(x)\nFilmProducer(x)"
    },
    {
        "NLSTATEMENT": "Daveed Diggs played two roles in the musical Hamilton.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)",
        "CORRECT": "PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)",
        "PREDICATES": "Film(x)\nPlayed(x, y)\nPlayedIn(x, y)\nPlayedTwoRoles(x)\nWonBestActorAward(x)\nMusical(x)\nActor(x)\nFilmProducer(x)"
    },
    {
        "NLSTATEMENT": "Ernest Pohl scored more than 180 goals in the Polish First Division. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)",
        "CORRECT": "ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)",
        "PREDICATES": "FootballPlayer(x)\nNamedAfter(x, y)\nIn(x, y)\nPolishFootballPlayer(x)\nFrom(x, y)\nScoredMoreThan180Goals(x)"
    },
    {
        "NLSTATEMENT": "Ernest Pohl was a Polish football player. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "PolishFootballPlayer(ernestpohl)",
        "CORRECT": "PolishFootballPlayer(ernestpohl)",
        "PREDICATES": "FootballPlayer(x)\nNamedAfter(x, y)\nIn(x, y)\nPolishFootballPlayer(x)\nFrom(x, y)\nScoredMoreThan180Goals(x)"
    },
    {
        "NLSTATEMENT": "Ann J. Land ran unopposed for the Philadephia City Council in 1980.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)",
        "CORRECT": "Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)",
        "PREDICATES": "Challenger(x)\nDefeated(x, y)\nElected(x)\nYear(x)\nDemocraticParty(x)\nPhiladephiaCouncil(x)\nRunFor(x)"
    },
    {
        "NLSTATEMENT": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)",
        "CORRECT": "Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)",
        "PREDICATES": "Challenger(x)\nDefeated(x, y)\nElected(x)\nYear(x)\nDemocraticParty(x)\nPhiladephiaCouncil(x)\nRunFor(x)"
    },
    {
        "NLSTATEMENT": "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (RunForx) ∧ PhiladephiaCouncil(x → Elected(x))",
        "CORRECT": "∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))",
        "PREDICATES": "Challenger(x)\nDefeated(x, y)\nElected(x)\nYear(x)\nDemocraticParty(x)\nPhiladephiaCouncil(x)\nRunFor(x)"
    },
    {
        "NLSTATEMENT": "Different teams cannot win the same cup in a given year's final.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))",
        "CORRECT": "∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))",
        "PREDICATES": "Different(x, y)\nWonCup(x, y)"
    },
    {
        "NLSTATEMENT": "Aberdeen and Rangers are different teams.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)",
        "CORRECT": "Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)",
        "PREDICATES": "Different(x, y)\nWonCup(x, y)"
    },
    {
        "NLSTATEMENT": "Rangers won the cup in 2014 final.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "WonCup(rangers, twentyfourteen)",
        "CORRECT": "WonCup(rangers, twentyfourteen)",
        "PREDICATES": "Different(x, y)\nWonCup(x, y)"
    },
    {
        "NLSTATEMENT": "Mary either does not own a sports car or, if they do, then they do not have at least one child.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(Car(mary) ⊕ Child(mary))",
        "CORRECT": "¬(Car(mary) ⊕ Child(mary))",
        "PREDICATES": "Car(x)\nWorking(x)\nManhattan(x)\nChild(x)\nPets(x)"
    },
    {
        "NLSTATEMENT": "All people who have pets are people who have at least one child.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Pets(x) → Child(x))",
        "CORRECT": "∀x (Pets(x) → Child(x))",
        "PREDICATES": "Car(x)\nWorking(x)\nManhattan(x)\nChild(x)\nPets(x)"
    },
    {
        "NLSTATEMENT": "All young working professionals who have regular 9-5 jobs also have pets.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Working(x) → Pets(x))",
        "CORRECT": "∀x (Working(x) → Pets(x))",
        "PREDICATES": "Car(x)\nWorking(x)\nManhattan(x)\nChild(x)\nPets(x)"
    },
    {
        "NLSTATEMENT": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))",
        "CORRECT": "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "All event-related designs are brain image acquisition.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "CORRECT": "∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))",
        "CORRECT": "(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "All brain image acquisition is preceded by data processing.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "CORRECT": "∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))",
        "PREDICATES": "AcquiringData(x)\nrelatedDesign(x)\nPrecededByDataProcessing(x)\nBrainImageAcquisition(x)\nBlockDesign(x)"
    },
    {
        "NLSTATEMENT": "All ships involved in WWII are currently decommissioned or in a museum.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (InWWII(x) → (Decommissioned(x) ∨ InMuseum(x)))",
        "CORRECT": "∀x (InWWII(x) → (Decommissioned(x) ∨ InMuseum(x)))",
        "PREDICATES": "USNavyShip(x)\nDecommissioned(x)\nInMuseum(x)\nInWWII(x)"
    },
    {
        "NLSTATEMENT": "All reusable chopsticks are made from metal.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Reusable(x) → MadeFromMetals(x))",
        "CORRECT": "∀x (Reusable(x) → MadeFromMetals(x))",
        "PREDICATES": "MadeFromMetals(x)\nEcoFriendly(x)\nReusable(x)\nMadeFromTrees(x)\nDisposableChopsticks(x)\nMadeFromPlastics(x)"
    },
    {
        "NLSTATEMENT": "Either disposable chopsticks or reusable chopsticks. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ",
        "CORRECT": "∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ",
        "PREDICATES": "MadeFromMetals(x)\nEcoFriendly(x)\nReusable(x)\nMadeFromTrees(x)\nDisposableChopsticks(x)\nMadeFromPlastics(x)"
    },
    {
        "NLSTATEMENT": "All disposable chopsticks are made from trees.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (DisposableChopsticks(x) → ∀x  MadeFromTrees(x))",
        "CORRECT": "∀x (DisposableChopsticks(x) → MadeFromTrees(x))",
        "PREDICATES": "MadeFromMetals(x)\nEcoFriendly(x)\nReusable(x)\nMadeFromTrees(x)\nDisposableChopsticks(x)\nMadeFromPlastics(x)"
    },
    {
        "NLSTATEMENT": "Sid is not either an energetic person or a sloth.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Energetic(sid) ∨ (Sl)oth(sid)",
        "CORRECT": "¬Energetic(sid) ∨ Sloth(sid)",
        "PREDICATES": "Sloth(x)\nAnimal(x)\nEnergetic(x)\nLazy(x)\nUnproductive(x)"
    },
    {
        "NLSTATEMENT": "Sid is not either an energetic person or a sloth.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Energeticsid ∨ Sloth(sid)",
        "CORRECT": "¬Energetic(sid) ∨ Sloth(sid)",
        "PREDICATES": "Sloth(x)\nAnimal(x)\nEnergetic(x)\nLazy(x)\nUnproductive(x)"
    },
    {
        "NLSTATEMENT": "Sid is not either an energetic person or a sloth.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬Energeticsid ∨ Sloth(sid)",
        "CORRECT": "¬Energetic(sid) ∨ Sloth(sid)",
        "PREDICATES": "Sloth(x)\nAnimal(x)\nEnergetic(x)\nLazy(x)\nUnproductive(x)"
    },
    {
        "NLSTATEMENT": "Manchester United is eligible to attend UEL next season.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Attend(manchesterunited, uel)",
        "CORRECT": "Attend(manchesterunited, uel)",
        "PREDICATES": "European(x)\nHigherRank(x, y)\nSoccerClub(x)\nAttend(x, y)"
    },
    {
        "NLSTATEMENT": "Minnesota Vikings was in the National Football League in 1997.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "NFLTeamYear(minnesota_Vikings, y1997)",
        "CORRECT": "NFLTeamYear(minnesota_Vikings, y1997)",
        "PREDICATES": "NFLTeamYear(x, y)\nPlayFor(x, y)\nCoach(x, y)\nPosition(x, y)\nIsFootballCoach(x)\nPlayInNFL(x)\nTouchDownReceptionTime(x, y)\nIsFootballClub(x)\nInTeam(x, y)"
    },
    {
        "NLSTATEMENT": "Minnesota Vikings is a football club.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "IsFootballClub(minnesota_Vikings)",
        "CORRECT": "IsFootballClub(minnesota_Vikings)",
        "PREDICATES": "NFLTeamYear(x, y)\nPlayFor(x, y)\nCoach(x, y)\nPosition(x, y)\nIsFootballCoach(x)\nPlayInNFL(x)\nTouchDownReceptionTime(x, y)\nIsFootballClub(x)\nInTeam(x, y)"
    },
    {
        "NLSTATEMENT": "If a person coach a football club, the person is a football coach.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (Coach(x, y) ∧ IsFootballCluby) → IsFootballCoach(x)",
        "CORRECT": "∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))",
        "PREDICATES": "NFLTeamYear(x, y)\nPlayFor(x, y)\nCoach(x, y)\nPosition(x, y)\nIsFootballCoach(x)\nPlayInNFL(x)\nTouchDownReceptionTime(x, y)\nIsFootballClub(x)\nInTeam(x, y)"
    },
    {
        "NLSTATEMENT": "Nothing that barks is lovely. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Bark(x) → ¬Lovely(x))",
        "CORRECT": "∀x (Bark(x) → ¬Lovely(x))",
        "PREDICATES": "Dog(x)\nGhost(x)\nCat(x)\nCute(x)\nLovely(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "Nothing that barks is lovely. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Bark(x) → ¬Lovely(x))",
        "CORRECT": "∀x (Bark(x) → ¬Lovely(x))",
        "PREDICATES": "Dog(x)\nGhost(x)\nCat(x)\nCute(x)\nLovely(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "An animal is either a cat or a dog.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Cat(x) ∨ Dog(x))",
        "CORRECT": "∀x (Cat(x) ∨ Dog(x))",
        "PREDICATES": "Dog(x)\nGhost(x)\nCat(x)\nCute(x)\nLovely(x)\nBark(x)"
    },
    {
        "NLSTATEMENT": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshoreshafaq-asiman ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)",
        "CORRECT": "LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)",
        "PREDICATES": "LargeComplex(x)\nIn(x, y)\nNorthwestOf(x, y)\nSoutheastOf(x, y)\nGeologicalStructures(x)\nOffshore(x)"
    },
    {
        "NLSTATEMENT": "Baku is northwest of Shafaq-Asiman.",
        "ERRORTYPE": "no_error",
        "SKETCH": "NorthwestOf(baku, shafaq-asiman)",
        "CORRECT": "NorthwestOf(baku, shafaq-asiman)",
        "PREDICATES": "LargeComplex(x)\nIn(x, y)\nNorthwestOf(x, y)\nSoutheastOf(x, y)\nGeologicalStructures(x)\nOffshore(x)"
    },
    {
        "NLSTATEMENT": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.",
        "ERRORTYPE": "no_error",
        "SKETCH": "LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)",
        "CORRECT": "LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)",
        "PREDICATES": "LargeComplex(x)\nIn(x, y)\nNorthwestOf(x, y)\nSoutheastOf(x, y)\nGeologicalStructures(x)\nOffshore(x)"
    },
    {
        "NLSTATEMENT": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)",
        "CORRECT": "Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Some of theories of Herodicus are considered to be the foundation of sports medicine.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Theory(x) ∧ ∃x  From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))",
        "CORRECT": "∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Massages were recommended by Herodicus.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Recommended(herodicus, massages)",
        "CORRECT": "Recommended(herodicus, massages)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Selymbria is a colony of the city-state Megara.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Colony(selymbia, megara) ∧ CityState(megara)",
        "CORRECT": "Colony(selymbia, megara) ∧ CityState(megara)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)",
        "CORRECT": "Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)",
        "PREDICATES": "GymnasticMaster(x)\nCity(x)\nFoundationOf(x, y)\nSophist(x)\nDietician(x)\nColony(x, y)\nPhysician(x)\nBorn(x, y)\nCityState(x)\nRecommended(x, y)\nTheory(x)\nGreek(x)\nFrom(x, y)\nTutored(x, y)"
    },
    {
        "NLSTATEMENT": "No kid loves the Opera.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Kid(x) → ¬OperaLover(x))",
        "CORRECT": "∀x (Kid(x) → ¬OperaLover(x))",
        "PREDICATES": "Kid(x)\nScientist(x)\nOperaLover(x)\nAdult(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Billy is a kid.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Kid(billy)",
        "CORRECT": "Kid(billy)",
        "PREDICATES": "Kid(x)\nScientist(x)\nOperaLover(x)\nAdult(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "Billy is a kid.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Kid(bi(ll)y)",
        "CORRECT": "Kid(billy)",
        "PREDICATES": "Kid(x)\nScientist(x)\nOperaLover(x)\nAdult(x)\nStudent(x)"
    },
    {
        "NLSTATEMENT": "After being injured, Brian Winter retired in 2012.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Injured(brianwinter) ∧ Retired(brianwinter)",
        "CORRECT": "Injured(brianwinter) ∧ Retired(brianwinter)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "Brian Winter is a Scottish football referee.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Scottish(brianwinter) ∧ FootballReferee(brianwinter)",
        "CORRECT": "Scottish(brianwinter) ∧ FootballReferee(brianwinter)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)",
        "CORRECT": "Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)",
        "CORRECT": "Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)",
        "PREDICATES": "Retired(x)\nRefereeObserver(x)\nInjured(x)\nFootballPlayer(x)\nSon(x, y)\nFootballReferee(x)\nScottish(x)\nPlaysFor(x, y)"
    },
    {
        "NLSTATEMENT": "If a person is bad at chess, then they don't play a lot of chess.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BadChess(x) → ∀x  ¬PlaysLots(x))",
        "CORRECT": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "People are either interested in puzzles or bad at chess.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Puzzles(x) ∨ ∀x  BadChess(x))",
        "CORRECT": "∀x (Puzzles(x) ∨ BadChess(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "People are either interested in puzzles or bad at chess.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Puzzles(x) ∨ BadChess(x))",
        "CORRECT": "∀x (Puzzles(x) ∨ BadChess(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "Erica is someone who plays a lot of chess.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "PlaysLots(erica)",
        "CORRECT": "PlaysLots(erica)",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "CORRECT": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "A person is either a planner or a creative person.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Plans(x) ∨ Creative(x))",
        "CORRECT": "∀x (Plans(x) ∨ Creative(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "People are either interested in puzzles or bad at chess.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Puzzles(x) ∨ ∀x  BadChess(x))",
        "CORRECT": "∀x (Puzzles(x) ∨ BadChess(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "A person is either a planner or a creative person.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Plans(x) ∨ ∀x  Creative(x))",
        "CORRECT": "∀x (Plans(x) ∨ Creative(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If a person is bad at chess, then they don't play a lot of chess.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (BadChess(x) → ∀x  ¬PlaysLots(x))",
        "CORRECT": "∀x (BadChess(x) → ¬PlaysLots(x))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "CORRECT": "¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))",
        "PREDICATES": "PlaysLots(x)\nPlans(x)\nPuzzles(x)\nBadChess(x)\nCreative(x)"
    },
    {
        "NLSTATEMENT": "Soccer players have a right foot and a left foot.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "CORRECT": "∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))",
        "PREDICATES": "Efficient(x, y)\nSoccerPlayer(x)\nHasRightFoot(x)\nScoreManyGoals(x, y)\nTop(x)\nHasLeftFoot(x)"
    },
    {
        "NLSTATEMENT": "Cristiano Ronaldo is a soccer player.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "SoccerPlayer(ronaldo)",
        "CORRECT": "SoccerPlayer(ronaldo)",
        "PREDICATES": "Efficient(x, y)\nSoccerPlayer(x)\nHasRightFoot(x)\nScoreManyGoals(x, y)\nTop(x)\nHasLeftFoot(x)"
    },
    {
        "NLSTATEMENT": "If a hatchery is for conservation, it might release animals into the wild.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))",
        "CORRECT": "∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))",
        "PREDICATES": "Hatchery(x)\nOpenToVisitors(x)\nLocatedIn(x, y)\nReleasesAnimalsToWild(x)\nForProfit(x)\nForConservation(x)"
    },
    {
        "NLSTATEMENT": "The National Lobster Hatchery is not for profit.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬ForProfit(nat(ionallobst)erhatchery)",
        "CORRECT": "¬ForProfit(nationallobsterhatchery)",
        "PREDICATES": "Hatchery(x)\nOpenToVisitors(x)\nLocatedIn(x, y)\nReleasesAnimalsToWild(x)\nForProfit(x)\nForConservation(x)"
    },
    {
        "NLSTATEMENT": "The National Lobster Hatchery is open to visitors.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "OpenToVisitorsnationallobsterhatchery",
        "CORRECT": "OpenToVisitors(nationallobsterhatchery)",
        "PREDICATES": "Hatchery(x)\nOpenToVisitors(x)\nLocatedIn(x, y)\nReleasesAnimalsToWild(x)\nForProfit(x)\nForConservation(x)"
    },
    {
        "NLSTATEMENT": "Rhos Aelwyd F.C. is the only club based in Ponciau. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (BasedInPonciau(x) ↔ R(hosa)elwydfc(x))",
        "CORRECT": "∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))",
        "PREDICATES": "Welsh(x)\nBasedInPonciau(x)\nWonPremierDivisionDuring(x, y)\nFootballClub(x)\nPromoted(x)\nRhosaelwydfc(x)"
    },
    {
        "NLSTATEMENT": "The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (WonPremierDivisionDuring(x, y2009) → ∀x  Promoted(x))",
        "CORRECT": "∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))",
        "PREDICATES": "Welsh(x)\nBasedInPonciau(x)\nWonPremierDivisionDuring(x, y)\nFootballClub(x)\nPromoted(x)\nRhosaelwydfc(x)"
    },
    {
        "NLSTATEMENT": "All Mac are OS.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Mac(x) → ∀x  OS(x))",
        "CORRECT": "∀x (Mac(x) → OS(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "An OS is either Mac or Windows.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x( )(Mac(x) ∨ Windows(x))",
        "CORRECT": "∀x (Mac(x) ∨ Windows(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "All Windows are convenient.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Windows(x) → Convenient(x))",
        "CORRECT": "∀x (Windows(x) → Convenient(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "If something is convenient, then it is popular.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Convenient(x) → Popular(x))",
        "CORRECT": "∀x (Convenient(x) → Popular(x))",
        "PREDICATES": "Convenient(x)\nOS(x)\nWindows(x)\nMac(x)\nPopular(x)\nSoftware(x)\nCode(x)"
    },
    {
        "NLSTATEMENT": "Roads made of asphalt are smoother than roads made of concrete.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "CORRECT": "∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "PREDICATES": "MadeOfAsphalt(x)\nMadeOfConcrete(x)\nPrefers(x, y)\nRoad(x)\nLastLonger(x, y)\nSmoother(x, y)"
    },
    {
        "NLSTATEMENT": "Roads made of asphalt are smoother than roads made of concrete.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  (Road(x) ∧ ∀y  MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "CORRECT": "∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "PREDICATES": "MadeOfAsphalt(x)\nMadeOfConcrete(x)\nPrefers(x, y)\nRoad(x)\nLastLonger(x, y)\nSmoother(x, y)"
    },
    {
        "NLSTATEMENT": "Roads made of asphalt are smoother than roads made of concrete.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "CORRECT": "∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))",
        "PREDICATES": "MadeOfAsphalt(x)\nMadeOfConcrete(x)\nPrefers(x, y)\nRoad(x)\nLastLonger(x, y)\nSmoother(x, y)"
    },
    {
        "NLSTATEMENT": "Camp Davern was established in the year 1946.",
        "ERRORTYPE": "no_error",
        "SKETCH": "EstablishedIn(campdavern, year1946)",
        "CORRECT": "EstablishedIn(campdavern, year1946)",
        "PREDICATES": "TraditionalSummerCamp(x)\nOperatedByYMCAUntil(x, y)\nOneOf(x, y)\nEstablishedIn(x, y)\nForBoysAndGirls(x)"
    },
    {
        "NLSTATEMENT": "Camp Davern is one of Ontario's oldest summer camps.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "OneOf(campdavern, ontariosoldestsummercamps)",
        "CORRECT": "OneOf(campdavern, ontariosoldestsummercamps)",
        "PREDICATES": "TraditionalSummerCamp(x)\nOperatedByYMCAUntil(x, y)\nOneOf(x, y)\nEstablishedIn(x, y)\nForBoysAndGirls(x)"
    },
    {
        "NLSTATEMENT": "Camp Davern was established in the year 1946.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "EstablishedIn(campdavern, year1946)",
        "CORRECT": "EstablishedIn(campdavern, year1946)",
        "PREDICATES": "TraditionalSummerCamp(x)\nOperatedByYMCAUntil(x, y)\nOneOf(x, y)\nEstablishedIn(x, y)\nForBoysAndGirls(x)"
    },
    {
        "NLSTATEMENT": "People either work in the entertainment industry or are highly acclaimed in their profession.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Entertainment(x) ∨ ∀x  Acclaimed(x))",
        "CORRECT": "∀x (Entertainment(x) ∨ Acclaimed(x))",
        "PREDICATES": "PublishJournals(x)\nEntertainment(x)\nNovelist(x)\nGlowing(x)\nAcclaimed(x)\nTenured(x)"
    },
    {
        "NLSTATEMENT": "People either work in the entertainment industry or are highly acclaimed in their profession.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Entertainment(x) ∨ Acclaimed(x))",
        "CORRECT": "∀x (Entertainment(x) ∨ Acclaimed(x))",
        "PREDICATES": "PublishJournals(x)\nEntertainment(x)\nNovelist(x)\nGlowing(x)\nAcclaimed(x)\nTenured(x)"
    },
    {
        "NLSTATEMENT": "People either work in the entertainment industry or are highly acclaimed in their profession.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Entertainment(x) ∨ Acclaimed(x))",
        "CORRECT": "∀x (Entertainment(x) ∨ Acclaimed(x))",
        "PREDICATES": "PublishJournals(x)\nEntertainment(x)\nNovelist(x)\nGlowing(x)\nAcclaimed(x)\nTenured(x)"
    },
    {
        "NLSTATEMENT": "Attolia and Sounis are countries near the Mede Empire.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)",
        "CORRECT": "Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "The Mede Empire plots to swallow up some nearby countries.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Country(x) ∧ Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))",
        "CORRECT": "∃x (Country(x) ∧ Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "Thick as Thieves was sold both as a hardcover and an e-book.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)",
        "CORRECT": "SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "Thick as Thieves was published by Greenwillow Books.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "PublishedBy(thickastheives, greenwillowbooks)",
        "CORRECT": "PublishedBy(thickastheives, greenwillowbooks)",
        "PREDICATES": "Nearby(x, y)\nYoungAdultFantasyNovel(x)\nWrittenBy(x, y)\nCountry(x)\nPlotsToSwallowUp(x, y)\nPublishedBy(x, y)\nSoldAs(x, y)\nWorkedWith(x, y)\nSetIn(x, y)\nFictional(x)"
    },
    {
        "NLSTATEMENT": "Neofonie is a German producer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "German(neofonie) ∧ Producer(neofonie)",
        "CORRECT": "German(neofonie) ∧ Producer(neofonie)",
        "PREDICATES": "German(x)\nAnnounce(x, y)\nSpeak(x, y)\nWeTab(x)\nMeeGoBased(x)\nTabletComputer(x)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "WeTab was announced by Neofonie.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (WeTab(x) → Announce(neofonie, x))",
        "CORRECT": "∀x (WeTab(x) → Announce(neofonie, x))",
        "PREDICATES": "German(x)\nAnnounce(x, y)\nSpeak(x, y)\nWeTab(x)\nMeeGoBased(x)\nTabletComputer(x)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "No employees working in this company are from China. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (WorkInCompany(x) → ∀x  ¬FromChina(x))",
        "CORRECT": "∀x (WorkInCompany(x) → ¬FromChina(x))",
        "PREDICATES": "WorkInCompany(x)\nFromChina(x)\nSoftwareEngineering(x)\nBusinessAnalysis(x)\nGoodAtMath(x)"
    },
    {
        "NLSTATEMENT": "All employees working in software engineering are from China. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (SoftwareEngineering(x) → FromChinax)",
        "CORRECT": "∀x (SoftwareEngineering(x) → FromChina(x))",
        "PREDICATES": "WorkInCompany(x)\nFromChina(x)\nSoftwareEngineering(x)\nBusinessAnalysis(x)\nGoodAtMath(x)"
    },
    {
        "NLSTATEMENT": "All employees working in business analysis are working in this company. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (BusinessAnalysis(x) → WorkInCompany(x))",
        "CORRECT": "∀x (BusinessAnalysis(x) → WorkInCompany(x))",
        "PREDICATES": "WorkInCompany(x)\nFromChina(x)\nSoftwareEngineering(x)\nBusinessAnalysis(x)\nGoodAtMath(x)"
    },
    {
        "NLSTATEMENT": "Benjamin only ate oranges and grapes at the party.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eatblueberry, benjamin ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)",
        "CORRECT": "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)",
        "PREDICATES": "Lower(x, y)\nParty(x)\nEat(x, y)\nMostPopular(x)\nLowestAmount(x)\nSameWeight(x)"
    },
    {
        "NLSTATEMENT": "At the end of the party, the amount of leftover blueberries was lower than that of cherries.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Lower(blueberry, cherry)",
        "CORRECT": "Lower(blueberry, cherry)",
        "PREDICATES": "Lower(x, y)\nParty(x)\nEat(x, y)\nMostPopular(x)\nLowestAmount(x)\nSameWeight(x)"
    },
    {
        "NLSTATEMENT": "Benjamin only ate oranges and grapes at the party.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)",
        "CORRECT": "Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)",
        "PREDICATES": "Lower(x, y)\nParty(x)\nEat(x, y)\nMostPopular(x)\nLowestAmount(x)\nSameWeight(x)"
    },
    {
        "NLSTATEMENT": "Students either attend the conference in person or remotely. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Attend(x) → InPerson(x) ⊕ Remotely(x))",
        "CORRECT": "∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))",
        "PREDICATES": "Registered(x)\nRemotely(x)\nChina(x)\nInPerson(x)\nAttend(x)"
    },
    {
        "NLSTATEMENT": "All students who attend in person have registered for the conference. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Attend(x) → ∀x  Registered(x))",
        "CORRECT": "∀x (Attend(x) → Registered(x))",
        "PREDICATES": "Registered(x)\nRemotely(x)\nChina(x)\nInPerson(x)\nAttend(x)"
    },
    {
        "NLSTATEMENT": "Jack attends the conference and he is a student from China.",
        "ERRORTYPE": "no_error",
        "SKETCH": "China(jack) ∧ Attend(jack)",
        "CORRECT": "China(jack) ∧ Attend(jack)",
        "PREDICATES": "Registered(x)\nRemotely(x)\nChina(x)\nInPerson(x)\nAttend(x)"
    },
    {
        "NLSTATEMENT": "David Ha'ivri is a Zionist leader. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "ZionstLeader(davidhaivri)",
        "CORRECT": "ZionstLeader(davidhaivri)",
        "PREDICATES": "PoliticalStrategist(x)\nEmigratedTo(x, y)\nZionistLeader(x)\nElectedTo(x, y)\nIsraeliCitizen(x)\nIsraeli(x)\nParentOf(x, y)\nZionstLeader(x)\nBornInIsrael(x)"
    },
    {
        "NLSTATEMENT": "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃y ∀x (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))",
        "CORRECT": "∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))",
        "PREDICATES": "PoliticalStrategist(x)\nEmigratedTo(x, y)\nZionistLeader(x)\nElectedTo(x, y)\nIsraeliCitizen(x)\nIsraeli(x)\nParentOf(x, y)\nZionstLeader(x)\nBornInIsrael(x)"
    },
    {
        "NLSTATEMENT": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (EmigratedTo(davidhaivri, america) ∧ ∃x  BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))",
        "CORRECT": "∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))",
        "PREDICATES": "PoliticalStrategist(x)\nEmigratedTo(x, y)\nZionistLeader(x)\nElectedTo(x, y)\nIsraeliCitizen(x)\nIsraeli(x)\nParentOf(x, y)\nZionstLeader(x)\nBornInIsrael(x)"
    },
    {
        "NLSTATEMENT": "Susan doesn't have influenza.",
        "ERRORTYPE": "no_error",
        "SKETCH": "¬Have(susan, influenza)",
        "CORRECT": "¬Have(susan, influenza)",
        "PREDICATES": "Have(x, y)"
    },
    {
        "NLSTATEMENT": "A British is a European.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (British(x) → Europ(ean(x)))",
        "CORRECT": "∀x (British(x) → European(x))",
        "PREDICATES": "British(x)\nFamiliarWithLaws(x)\nLawyer(x)\nWhig(x)\nPolitician(x)\nSpeakFrench(x)\nSatInHouseOfCommons(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Some Whigs speak French.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Whig(x) ∧ SpeakFrench(x))",
        "CORRECT": "∃x (Whig(x) ∧ SpeakFrench(x))",
        "PREDICATES": "British(x)\nFamiliarWithLaws(x)\nLawyer(x)\nWhig(x)\nPolitician(x)\nSpeakFrench(x)\nSatInHouseOfCommons(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Any lawyer is familiar with laws.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Lawyer(x) → ∀x  FamiliarWithLaws(x))",
        "CORRECT": "∀x (Lawyer(x) → FamiliarWithLaws(x))",
        "PREDICATES": "British(x)\nFamiliarWithLaws(x)\nLawyer(x)\nWhig(x)\nPolitician(x)\nSpeakFrench(x)\nSatInHouseOfCommons(x)\nEuropean(x)"
    },
    {
        "NLSTATEMENT": "Shetanis are mythological.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Mythological(shetani)",
        "CORRECT": "Mythological(shetani)",
        "PREDICATES": "ScienceFiction(x)\nMythological(x)\nCreature(x)\nAbout(x, y)\nFantasy(x)\nNovel(x)"
    },
    {
        "NLSTATEMENT": "Beasts of Prey is either a fantasy novel or a science fiction novel.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Novel(beastsofpre(y) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(bea)stsofprey)",
        "CORRECT": "Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)",
        "PREDICATES": "ScienceFiction(x)\nMythological(x)\nCreature(x)\nAbout(x, y)\nFantasy(x)\nNovel(x)"
    },
    {
        "NLSTATEMENT": "Beasts of Prey Is about a creature known as the Shetani.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "CORRECT": "About(beastsofprey, shetani) ∧ Creature(shetani)",
        "PREDICATES": "ScienceFiction(x)\nMythological(x)\nCreature(x)\nAbout(x, y)\nFantasy(x)\nNovel(x)"
    },
    {
        "NLSTATEMENT": "Odell is an English surname originating in Odell, Bedfordshire.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Odell(x) → Surname(x))",
        "CORRECT": "∀x (Odell(x) → Surname(x))",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Amy Odell is a British singer-songwriter.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriteramyOdell",
        "CORRECT": "British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Jack Odell is an English toy inventor.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "English(jackOdell) ∧ ToyInvertor(jackOdell)",
        "CORRECT": "English(jackOdell) ∧ ToyInvertor(jackOdell)",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Jack Odell is an English toy inventor.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "English(jackOdell) ∧ ToyInvertor(jackOdell)",
        "CORRECT": "English(jackOdell) ∧ ToyInvertor(jackOdell)",
        "PREDICATES": "ToyInvertor(x)\nSinger(x)\nBritish(x)\nOdell(x)\nNotablePeople(x)\nSpelledODell(x)\nSurname(x)\nSongWriter(x)\nEnglish(x)"
    },
    {
        "NLSTATEMENT": "Mary can get from New Haven to New York City either by train or car.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Train(mary) ⊕ Car(mary)",
        "CORRECT": "Train(mary) ⊕ Car(mary)",
        "PREDICATES": "Car(x)\nTrain(x)\nLateForWork(x)\nMeetJam(x)\nLoseTime(x)"
    },
    {
        "NLSTATEMENT": "If you go somewhere by car and meet traffic jam, you will lose time.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ((Car(x) ∧ MeetJam(x)) → LoseTime(x))",
        "CORRECT": "∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))",
        "PREDICATES": "Car(x)\nTrain(x)\nLateForWork(x)\nMeetJam(x)\nLoseTime(x)"
    },
    {
        "NLSTATEMENT": "If you go somewhere by train, you will not lose time.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Train(x) → ¬LoseTime(x()))",
        "CORRECT": "∀x (Train(x) → ¬LoseTime(x))",
        "PREDICATES": "Car(x)\nTrain(x)\nLateForWork(x)\nMeetJam(x)\nLoseTime(x)"
    },
    {
        "NLSTATEMENT": "If a person is hungry, the person is uncomfortable.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Hungry(x) → Uncomfortable(x))",
        "CORRECT": "∀x (Hungry(x) → Uncomfortable(x))",
        "PREDICATES": "Hungry(x)\nUncomfortable(x)\nHappy(x)"
    },
    {
        "NLSTATEMENT": "All lawyers are white-collar workers.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Lawyer(x) → ∀x  WhiteCollar(x))",
        "CORRECT": "∀x (Lawyer(x) → WhiteCollar(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "Mary is not a lawyer or a tipped employee.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "¬Lawyer(mary) ⊕ Tipped(mary)",
        "CORRECT": "¬Lawyer(mary) ⊕ Tipped(mary)",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (WhiteCollar(x) → GetMinWage(x))",
        "CORRECT": "∀x (WhiteCollar(x) → GetMinWage(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "Every advocate is a lawyer.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Advocate(x) → Lawyer(x))",
        "CORRECT": "∀x (Advocate(x) → Lawyer(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "Tipped employees do not get a guaranteed minimum wage.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Tipped(x) → ¬GetMinWage(x))",
        "CORRECT": "∀x (Tipped(x) → ¬GetMinWage(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "Every advocate is a lawyer.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Advocate(x() → Lawyer()x))",
        "CORRECT": "∀x (Advocate(x) → Lawyer(x))",
        "PREDICATES": "Advocate(x)\nTipped(x)\nLawyer(x)\nGetMinWage(x)\nWhiteCollar(x)"
    },
    {
        "NLSTATEMENT": "People liviing in Manhattan live in New York City.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))",
        "CORRECT": "∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))",
        "PREDICATES": "IsNewYorker(x)\nIsChessPlayer(x)\nBornIn(x, y)\nIsChestPlayer(x)\nIsGrandMaster(x)\nLivesIn(x, y)"
    },
    {
        "NLSTATEMENT": "Asa Hoffman lives in Manhattan.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LivesIn(asaHoffmann, manhattan)",
        "CORRECT": "LivesIn(asaHoffmann, manhattan)",
        "PREDICATES": "IsNewYorker(x)\nIsChessPlayer(x)\nBornIn(x, y)\nIsChestPlayer(x)\nIsGrandMaster(x)\nLivesIn(x, y)"
    },
    {
        "NLSTATEMENT": "People born and living in New York City are New Yorkers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "CORRECT": "∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))",
        "PREDICATES": "IsNewYorker(x)\nIsChessPlayer(x)\nBornIn(x, y)\nIsChestPlayer(x)\nIsGrandMaster(x)\nLivesIn(x, y)"
    },
    {
        "NLSTATEMENT": "Philip closed his bank account.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "CloseBankAccount(philip)",
        "CORRECT": "CloseBankAccount(philip)",
        "PREDICATES": "RequestDocuments(x)\nGetVisa(x)\nCloseBankAccount(x)\nFinancialGuarantees(x)\nApplyVisa(x)"
    },
    {
        "NLSTATEMENT": "Do not close your bank account if you request documents from the bank.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (RequestDocuments(x) → ∀x  ¬CloseBankAccount(x))",
        "CORRECT": "∀x (RequestDocuments(x) → ¬CloseBankAccount(x))",
        "PREDICATES": "RequestDocuments(x)\nGetVisa(x)\nCloseBankAccount(x)\nFinancialGuarantees(x)\nApplyVisa(x)"
    },
    {
        "NLSTATEMENT": "If you need to provide financial guarantees, you must request documents from the bank.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (FinancialGuarantees(x) → RequestDocuments(x))",
        "CORRECT": "∀x (FinancialGuarantees(x) → RequestDocuments(x))",
        "PREDICATES": "RequestDocuments(x)\nGetVisa(x)\nCloseBankAccount(x)\nFinancialGuarantees(x)\nApplyVisa(x)"
    },
    {
        "NLSTATEMENT": "Some anxiety leads to terror.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Anxiety(x) ∧ Terror(x))",
        "CORRECT": "∃x (Anxiety(x) ∧ Terror(x))",
        "PREDICATES": "Fear(x)\nTerror(x)\nAnxiety(x)"
    },
    {
        "NLSTATEMENT": "All states are in their country.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ∀y (Statex, y) → In(x, y)",
        "CORRECT": "∀x ∀y (State(x, y) → In(x, y))",
        "PREDICATES": "Erie(x)\nGreatLake(x)\nMichigan(x)\nFormAtEndOf(x, y)\nIn(x, y)\nMajorSettlementOf(x, y)\nOntario(x)\nSuperior(x)\nHuron(x)\nState(x, y)"
    },
    {
        "NLSTATEMENT": "NY, PA, OH, MI are states in the US.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)",
        "CORRECT": "State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)",
        "PREDICATES": "Erie(x)\nGreatLake(x)\nMichigan(x)\nFormAtEndOf(x, y)\nIn(x, y)\nMajorSettlementOf(x, y)\nOntario(x)\nSuperior(x)\nHuron(x)\nState(x, y)"
    },
    {
        "NLSTATEMENT": "All defenders are soccer players.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Defender(x) → SoccerPlayer(x))",
        "CORRECT": "∀x (Defender(x) → SoccerPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nCenterBack(x)\nDefender(x)\nSoccerPlayer(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All defenders are soccer players.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Defender(x) → SoccerPlayer((x)))",
        "CORRECT": "∀x (Defender(x) → SoccerPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nCenterBack(x)\nDefender(x)\nSoccerPlayer(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "All NBA players are professional basketball players.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "CORRECT": "∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))",
        "PREDICATES": "ProfessionalBasketballPlayer(x)\nCenterBack(x)\nDefender(x)\nSoccerPlayer(x)\nNBAPlayer(x)"
    },
    {
        "NLSTATEMENT": "Thomas Gilovich is a colleague of Justin Kruger. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Colleague(thomasGilovich, justinKruger)",
        "CORRECT": "Colleague(thomasGilovich, justinKruger)",
        "PREDICATES": "PhilosophyOfMind(x)\nColleague(x, y)\nProposed(x, y)"
    },
    {
        "NLSTATEMENT": "Thomas Gilovich is a colleague of Justin Kruger. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Colleague(thomasGilovich, justinKruger)",
        "CORRECT": "Colleague(thomasGilovich, justinKruger)",
        "PREDICATES": "PhilosophyOfMind(x)\nColleague(x, y)\nProposed(x, y)"
    },
    {
        "NLSTATEMENT": "Naive cynicism is a philosophy of mind.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "PhilosophyOfMind(naiveCynicism)",
        "CORRECT": "PhilosophyOfMind(naiveCynicism)",
        "PREDICATES": "PhilosophyOfMind(x)\nColleague(x, y)\nProposed(x, y)"
    },
    {
        "NLSTATEMENT": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)",
        "CORRECT": "TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "Richard Hamming did research on numerical methods.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "ContributedTo(richardHam(ming, numericalMe)thods)",
        "CORRECT": "ContributedTo(richardHamming, numericalMethods)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "",
        "CORRECT": "",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "TuringAw(arded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwa)rded(richardHamming) ∧ TuringAwarded(johnMccarthy)",
        "CORRECT": "TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)",
        "PREDICATES": "TuringAwarded(x)\nContributedTo(x, y)"
    },
    {
        "NLSTATEMENT": "All Leetcode problems recommended to novices are easy.                                                                                                       ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Recommended(x) → Easyx)",
        "CORRECT": "∀x (Recommended(x) → Easy(x))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))",
        "CORRECT": "¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "No easy Leetcode problems have an AC rate lower than 20 percent. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Easy(x) → ¬LowerAC(x))",
        "CORRECT": "∀x (Easy(x) → ¬LowerAC(x))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "No easy Leetcode problems have an AC rate lower than 20 percent. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Easy(x) → ¬LowerAC(x))",
        "CORRECT": "∀x (Easy(x) → ¬LowerAC(x))",
        "PREDICATES": "PublishedAfter2022(x)\nEasy(x)\nRecommended(x)\nHard(x)\nStarred(x)\nLowerAC(x)"
    },
    {
        "NLSTATEMENT": "BtoB 4u member Hyunsik wrote Show Your Love.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)",
        "CORRECT": "Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)",
        "PREDICATES": "Wrote(x, y)\nRecordedBy(x, y)\nLeadSingleOf(x, y)\nLeadSingle(x)\nExtendedPlay(x)\nMember(x, y)\nBoyBand(x)\nContains(x, y)\nSouthKorean(x)\nHasMusicVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)",
        "CORRECT": "Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)",
        "PREDICATES": "Wrote(x, y)\nRecordedBy(x, y)\nLeadSingleOf(x, y)\nLeadSingle(x)\nExtendedPlay(x)\nMember(x, y)\nBoyBand(x)\nContains(x, y)\nSouthKorean(x)\nHasMusicVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "BtoB 4u member Hyunsik wrote Show Your Love.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)",
        "CORRECT": "Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)",
        "PREDICATES": "Wrote(x, y)\nRecordedBy(x, y)\nLeadSingleOf(x, y)\nLeadSingle(x)\nExtendedPlay(x)\nMember(x, y)\nBoyBand(x)\nContains(x, y)\nSouthKorean(x)\nHasMusicVideo(x)\nSong(x)"
    },
    {
        "NLSTATEMENT": "All tables are round.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Table(x) → ∀x  Round(x))",
        "CORRECT": "∀x (Table(x) → Round(x))",
        "PREDICATES": "Table(x)\nFurniture(x)\nRound(x)"
    },
    {
        "NLSTATEMENT": "Some juvenile delinquents are products of broken homes.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃x (JuvenileDelinquent(x)  ∧ ProductOfBrokenHome(x))",
        "CORRECT": "∃x (JuvenileDelinquent(x)  ∧ ProductOfBrokenHome(x))",
        "PREDICATES": "ProductOfBrokenHome(x)\nMaladjustedIndividual(x)\nJuvenileDelinquent(x)"
    },
    {
        "NLSTATEMENT": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)",
        "CORRECT": "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Writing a novel is without statistical pattern analysis.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x WritingANovel(x → WithoutStatisticalPatternAnalysis(x)) ",
        "CORRECT": "∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Either brain reading or brain decoding. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x BrainReading(x ∨ BrainDecoding(x)) ",
        "CORRECT": "∀x (BrainReading(x) ∨ BrainDecoding(x)) ",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Writing a novel is without statistical pattern analysis.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ",
        "CORRECT": "∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Writing a novel is without statistical pattern analysis.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (WritingANovel(x) → ∀x  WithoutStatisticalPatternAnalysis(x)) ",
        "CORRECT": "∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "All brain decoding is extracting information from BOLD signals.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (BrainDecoding(x) → ExtractingInformationFromBOLDS(ignals(x)))",
        "CORRECT": "∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))",
        "PREDICATES": "BrainDecoding(x)\nWithoutStatisticalPatternAnalysis(x)\nWritingANovel(x)\nBrainReading(x)\nExtractingInformationFromBOLDSignals(x)"
    },
    {
        "NLSTATEMENT": "Gustave has room for both broccoli and asparagus.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "CORRECT": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "PREDICATES": "FirstDinnerParty(x, y)\nAtLuisParty(x)\nVegetable(x)\nRoomFor(x, y)"
    },
    {
        "NLSTATEMENT": "Broccoli and asparagus are both vegetables.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Vegetable(broccoli) ∧ Vegetable(asparagus)",
        "CORRECT": "Vegetable(broccoli) ∧ Vegetable(asparagus)",
        "PREDICATES": "FirstDinnerParty(x, y)\nAtLuisParty(x)\nVegetable(x)\nRoomFor(x, y)"
    },
    {
        "NLSTATEMENT": "Gustave has room for both broccoli and asparagus.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "CORRECT": "RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)",
        "PREDICATES": "FirstDinnerParty(x, y)\nAtLuisParty(x)\nVegetable(x)\nRoomFor(x, y)"
    },
    {
        "NLSTATEMENT": "Some singles of Imagine Dragons have been on Billboard Hot 100.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))",
        "CORRECT": "∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))",
        "PREDICATES": "BillboardHot100(x)\nSinger(x)\nPopularSingle(x, y)\nMusician(x)\nLeadSinger(x, y)\nSongWriter(x)\nRockBand(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "Dan is also a songwriter.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SongWriter(dan)",
        "CORRECT": "SongWriter(dan)",
        "PREDICATES": "BillboardHot100(x)\nSinger(x)\nPopularSingle(x, y)\nMusician(x)\nLeadSinger(x, y)\nSongWriter(x)\nRockBand(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "The lead singer of Imagine Dragons is Dan.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "LeadSinger(imagineDragon, dan)",
        "CORRECT": "LeadSinger(imagineDragon, dan)",
        "PREDICATES": "BillboardHot100(x)\nSinger(x)\nPopularSingle(x, y)\nMusician(x)\nLeadSinger(x, y)\nSongWriter(x)\nRockBand(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "No edible things are poisonous.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Edible(x) → ¬Poisonous(x))",
        "CORRECT": "∀x (Edible(x) → ¬Poisonous(x))",
        "PREDICATES": "Edible(x)\nBread(x)\nPoisonous(x)\nFood(x)\nSandwich(x)"
    },
    {
        "NLSTATEMENT": "Some sandwiches are bread.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Sandwich(x) ∧ ∃x  Bread(x))",
        "CORRECT": "∃x (Sandwich(x) ∧ Bread(x))",
        "PREDICATES": "Edible(x)\nBread(x)\nPoisonous(x)\nFood(x)\nSandwich(x)"
    },
    {
        "NLSTATEMENT": "Deodorant is poisonous.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Poisonous(deodorant)",
        "CORRECT": "Poisonous(deodorant)",
        "PREDICATES": "Edible(x)\nBread(x)\nPoisonous(x)\nFood(x)\nSandwich(x)"
    },
    {
        "NLSTATEMENT": "Noah lives in an apartment where the rent does not cover heating.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬Cover(noah, heating)",
        "CORRECT": "¬Cover(noah, heating)",
        "PREDICATES": "Cover(x, y)\nCommonUtilities(x)"
    },
    {
        "NLSTATEMENT": "Susan lives in an apartment where the rent covers all utilities.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Cover(susan, x))",
        "CORRECT": "∀x (Cover(susan, x))",
        "PREDICATES": "Cover(x, y)\nCommonUtilities(x)"
    },
    {
        "NLSTATEMENT": "The rent of the apartment where Ava lives does not cover any utility expenses.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (¬Cover(ava, x))",
        "CORRECT": "∀x (¬Cover(ava, x))",
        "PREDICATES": "Cover(x, y)\nCommonUtilities(x)"
    },
    {
        "NLSTATEMENT": "All dresses are clothes.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Dress(x) → Clothes(x))",
        "CORRECT": "∀x (Dress(x) → Clothes(x))",
        "PREDICATES": "Product(x)\nClothes(x)\nSkirt(x)\nDress(x)\nPerfect(x)"
    },
    {
        "NLSTATEMENT": "All clothes are products. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Clothes(x) → Product(x))",
        "CORRECT": "∀x (Clothes(x) → Product(x))",
        "PREDICATES": "Product(x)\nClothes(x)\nSkirt(x)\nDress(x)\nPerfect(x)"
    },
    {
        "NLSTATEMENT": "All skirts are dresses. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Skirt(x) → ∀x  Dress(x))",
        "CORRECT": "∀x (Skirt(x) → Dress(x))",
        "PREDICATES": "Product(x)\nClothes(x)\nSkirt(x)\nDress(x)\nPerfect(x)"
    },
    {
        "NLSTATEMENT": "Pets who are naughty are not liked as much. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x  (Pet(x) ∧ ∀y  Naughty(x) → ¬Liked(x, y))",
        "CORRECT": "∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))",
        "PREDICATES": "Liked(x, y)\nHasPet(x)\nDog(x)\nPet(x)\nCares(x, y)\nCat(x)\nAnimal(x)\nNaughty(x)"
    },
    {
        "NLSTATEMENT": "Pets can be either a dog or a cat.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Pet(x) → ∀x  Dog(x) ⊕ Cat(x))",
        "CORRECT": "∀x (Pet(x) → Dog(x) ⊕ Cat(x))",
        "PREDICATES": "Liked(x, y)\nHasPet(x)\nDog(x)\nPet(x)\nCares(x, y)\nCat(x)\nAnimal(x)\nNaughty(x)"
    },
    {
        "NLSTATEMENT": "All pets are animals.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Pet(x) → Animal(x))",
        "CORRECT": "∀x (Pet(x) → Animal(x))",
        "PREDICATES": "Liked(x, y)\nHasPet(x)\nDog(x)\nPet(x)\nCares(x, y)\nCat(x)\nAnimal(x)\nNaughty(x)"
    },
    {
        "NLSTATEMENT": "Surprises are either fun or dreadful.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Surprise(x) → ∀x  (Fun(x) ⊕ Dreadful(x)))",
        "CORRECT": "∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x)))",
        "PREDICATES": "Fun(x)\nSurprise(x)\nScare(x)\nDreadful(x)"
    },
    {
        "NLSTATEMENT": "The book the Three Body Problem has sold more than 1 million copies.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)",
        "CORRECT": "Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)",
        "PREDICATES": "WrittenBy(x, y)\nSoldMoreThan(x, y)\nBook(x)\nWon(x, y)\nInfluencedBy(x, y)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "All books written by Cixin Liu have sold more than 1 million copies. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "CORRECT": "∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))",
        "PREDICATES": "WrittenBy(x, y)\nSoldMoreThan(x, y)\nBook(x)\nWon(x, y)\nInfluencedBy(x, y)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "The Three Body Problem is about the future.",
        "ERRORTYPE": "no_error",
        "SKETCH": "AboutFuture(threebodyproblem)",
        "CORRECT": "AboutFuture(threebodyproblem)",
        "PREDICATES": "WrittenBy(x, y)\nSoldMoreThan(x, y)\nBook(x)\nWon(x, y)\nInfluencedBy(x, y)\nAboutFuture(x)"
    },
    {
        "NLSTATEMENT": "All students good at time management are popular among students. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Good(AtTimeManagement(x) →) Popular(x))",
        "CORRECT": "∀x (GoodAtTimeManagement(x) → Popular(x))",
        "PREDICATES": "StudyMorning(x)\nGetUpEarly(x)\nComputerScience(x)\nPopular(x)\nGoodAtTimeManagement(x)"
    },
    {
        "NLSTATEMENT": "Some students who major in computer science get up early. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∃(x (Compu)terScience(x) ∧ GetUpEarly(x))",
        "CORRECT": "∃x (ComputerScience(x) ∧ GetUpEarly(x))",
        "PREDICATES": "StudyMorning(x)\nGetUpEarly(x)\nComputerScience(x)\nPopular(x)\nGoodAtTimeManagement(x)"
    },
    {
        "NLSTATEMENT": "James is not popular among students. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬Popular(james)",
        "CORRECT": "¬Popular(james)",
        "PREDICATES": "StudyMorning(x)\nGetUpEarly(x)\nComputerScience(x)\nPopular(x)\nGoodAtTimeManagement(x)"
    },
    {
        "NLSTATEMENT": "If there is a dog on the roof something went wrong.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "∀x  ((Dog(x) ∧ OnRoof(x)) → WentWrong(y))",
        "CORRECT": "∀x ∃y ((Dog(x) ∧ OnRoof(x)) → WentWrong(y))",
        "PREDICATES": "Dog(x)\nWentWrong(x)\nOnRoof(x)"
    },
    {
        "NLSTATEMENT": "Elephantopus is a genus of perennial plants in the daisy family.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Elephantopus(x) → ∀x  Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))",
        "CORRECT": "∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))",
        "PREDICATES": "WidespreadOver(x, y)\nElephantopus(x)\nGenus(x, y)\nTraditionalMedicine(x)\nBelongTo(x, y)\nElephantopusScaber(x)\nNativeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Several species of Elephantopus are native to the southeastern United States.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))",
        "CORRECT": "∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))",
        "PREDICATES": "WidespreadOver(x, y)\nElephantopus(x)\nGenus(x, y)\nTraditionalMedicine(x)\nBelongTo(x, y)\nElephantopusScaber(x)\nNativeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Elephantopus scaber is a traditional medicine.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (ElephantopusScaber(x) → TraditionalMedicine(x))",
        "CORRECT": "∀x (ElephantopusScaber(x) → TraditionalMedicine(x))",
        "PREDICATES": "WidespreadOver(x, y)\nElephantopus(x)\nGenus(x, y)\nTraditionalMedicine(x)\nBelongTo(x, y)\nElephantopusScaber(x)\nNativeTo(x, y)"
    },
    {
        "NLSTATEMENT": "Harkness is either a building operated by Yale Housing staff or located on York Street. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)",
        "CORRECT": "OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "All buildings operated by Yale Housing staff are managed by Yale Housing. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "CORRECT": "∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "All buildings managed by Yale Housing are dormitories. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ManagedByYaleHousing(x) → ∀x  YaleDormitory(x))",
        "CORRECT": "∀x (ManagedByYaleHousing(x) → YaleDormitory(x))",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "No buildings open to students are established after 1800. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (OpenToStudents(x) → ¬EstablishedAfter1800x)",
        "CORRECT": "∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))",
        "PREDICATES": "EstablishedAfter1800(x)\nYaleDormitory(x)\nInYorkStreet(x)\nOperatedByYaleHousingStaffs(x)\nManagedByYaleHousing(x)\nOpenToStudents(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (UrbanArea(x) → ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every terrifying Halloween scare comes from a creepy haunted house.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (TerrifyingHalloweenScarex) → CreepyHauntedHouse(x)",
        "CORRECT": "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "There are no mansion houses in an urban area.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (UrbanArea(x) → ∀x  ¬MansionHouse(x))",
        "CORRECT": "∀x (UrbanArea(x) → ¬MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every creepy haunted house is in a mansion house.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "CORRECT": "∀x (CreepyHauntedHouse(x) → MansionHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every terrifying Halloween scare comes from a creepy haunted house.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (TerrifyingHalloweenScare(x) → ∀x  CreepyHauntedHouse(x))",
        "CORRECT": "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Every terrifying Halloween scare comes from a creepy haunted house.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (TerrifyingHalloweenScare(x) → ∀x  CreepyHauntedHouse(x))",
        "CORRECT": "∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))",
        "PREDICATES": "MansionHouse(x)\nCreepyHauntedHouse(x)\nSkyscraper(x)\nTerrifyingHalloweenScare(x)\nUrbanArea(x)"
    },
    {
        "NLSTATEMENT": "Any national park in Vietnam is classified as a nature reserve. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))",
        "CORRECT": "∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))",
        "PREDICATES": "NatureReserve(x)\nUNESCOWorldHeritageSite(x)\nMangedby(x, y)\nLocatedin(x, y)\nNationalPark(x)"
    },
    {
        "NLSTATEMENT": "Any national park in Vietnam is classified as a nature reserve. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))",
        "CORRECT": "∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))",
        "PREDICATES": "NatureReserve(x)\nUNESCOWorldHeritageSite(x)\nMangedby(x, y)\nLocatedin(x, y)\nNationalPark(x)"
    },
    {
        "NLSTATEMENT": "Phuoc Binh national park is a national park in Vietnam. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)",
        "CORRECT": "NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)",
        "PREDICATES": "NatureReserve(x)\nUNESCOWorldHeritageSite(x)\nMangedby(x, y)\nLocatedin(x, y)\nNationalPark(x)"
    },
    {
        "NLSTATEMENT": "Some competitive sports where spectators bet on things are banned.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x))",
        "CORRECT": "∃x ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x))",
        "PREDICATES": "GreyhoundRacing(x)\nPursue(x, y)\nBanned(x)\nGreyHound(x)\nCompetitiveSport(x)\nSpectaorsBetOn(x, y)\nGreyhound(x)\nHare(x)\nSmallGame(x)\nSpectatorsBetOn(x, y)\nCoursing(x)"
    },
    {
        "NLSTATEMENT": "Hares are small game.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Hare(x) → SmallGamex)",
        "CORRECT": "∀x (Hare(x) → SmallGame(x))",
        "PREDICATES": "GreyhoundRacing(x)\nPursue(x, y)\nBanned(x)\nGreyHound(x)\nCompetitiveSport(x)\nSpectaorsBetOn(x, y)\nGreyhound(x)\nHare(x)\nSmallGame(x)\nSpectatorsBetOn(x, y)\nCoursing(x)"
    },
    {
        "NLSTATEMENT": "In one game, Henry first receives one yellow card, then he receives one red card.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "CORRECT": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "PREDICATES": "Eject(x)\nSoccerPlayer(x)\nOneRed(x)\nTwoYellow(x)"
    },
    {
        "NLSTATEMENT": "In one game, Henry first receives one yellow card, then he receives one red card.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "CORRECT": "¬TwoYellow(henry) ∧ OneRed(henry)",
        "PREDICATES": "Eject(x)\nSoccerPlayer(x)\nOneRed(x)\nTwoYellow(x)"
    },
    {
        "NLSTATEMENT": "All trees are plants. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Tree(x) → Plant(x))",
        "CORRECT": "∀x (Tree(x) → Plant(x))",
        "PREDICATES": "Plant(x)\nLiving(x)\nTree(x)"
    },
    {
        "NLSTATEMENT": "Dagfinn is a given name.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Dagfinn(x) → GivenName(x))",
        "CORRECT": "∀x (Dagfinn(x) → GivenName(x))",
        "PREDICATES": "GivenName(x)\nPhysician(x)\nNotablePeople(x)\nBarrister(x)\nDagfinn(x)\nNorwegian(x)"
    },
    {
        "NLSTATEMENT": "Dagfinn is a given name.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Dagfinn(x) → ∀x  GivenName(x))",
        "CORRECT": "∀x (Dagfinn(x) → GivenName(x))",
        "PREDICATES": "GivenName(x)\nPhysician(x)\nNotablePeople(x)\nBarrister(x)\nDagfinn(x)\nNorwegian(x)"
    },
    {
        "NLSTATEMENT": "Dagfinn Dahl is a Norwegian barrister.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Norwegian(dagfinnDahl) ∧ BarristerdagfinnDahl",
        "CORRECT": "Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)",
        "PREDICATES": "GivenName(x)\nPhysician(x)\nNotablePeople(x)\nBarrister(x)\nDagfinn(x)\nNorwegian(x)"
    },
    {
        "NLSTATEMENT": "All popular things are well-known.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Popular(x) → ∀x  WellKnown(x))",
        "CORRECT": "∀x (Popular(x) → WellKnown(x))",
        "PREDICATES": "WellKnown(x)\nPopular(x)\nInteresting(x)\nEntertainment(x)"
    },
    {
        "NLSTATEMENT": "All language models with good performance are used by some researchers.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ((LanguageModel(x) ∧ ∀x  GoodPerformance(x)) → UsedBySomeResearchers(x))",
        "CORRECT": "∀x ((LanguageModel(x) ∧ GoodPerformance(x)) → UsedBySomeResearchers(x))",
        "PREDICATES": "LanguageModel(x)\nUsedBySomeResearchers(x)\nGoodPerformance(x)\nGiant(x)\nPopular(x)"
    },
    {
        "NLSTATEMENT": "For two different teams, either one team wins or the other team wins.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀y ∀x (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "CORRECT": "∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))",
        "PREDICATES": "WonGame(x, y)\nJoined(x, y)\nScottish(x)\nDifferent(x, y)\nPartOf(x, y)"
    },
    {
        "NLSTATEMENT": "St Johnstone is a Scottish team.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Scott(ish(johns)tone)",
        "CORRECT": "Scottish(johnstone)",
        "PREDICATES": "WonGame(x, y)\nJoined(x, y)\nScottish(x)\nDifferent(x, y)\nPartOf(x, y)"
    },
    {
        "NLSTATEMENT": "Minsk won against St Johnstone.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "WonGame(minsk, johnstone)",
        "CORRECT": "WonGame(minsk, johnstone)",
        "PREDICATES": "WonGame(x, y)\nJoined(x, y)\nScottish(x)\nDifferent(x, y)\nPartOf(x, y)"
    },
    {
        "NLSTATEMENT": "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Boeing737(jake32) ⊕ Delta(jake32) ",
        "CORRECT": "Boeing737(jake32) ⊕ Delta(jake32) ",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Boeing737(jake32) ⊕ Delta(jake32) ",
        "CORRECT": "Boeing737(jake32) ⊕ Delta(jake32) ",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Boeing737(t10) ⊕ Delta(t10)",
        "CORRECT": "Boeing737(t10) ⊕ Delta(t10)",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "Jake32 is either a Boeing-737 plane or a plane in Delta. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "Boeing737(jake32) ⊕ Delta(jake32) ",
        "CORRECT": "Boeing737(jake32) ⊕ Delta(jake32) ",
        "PREDICATES": "Delta(x)\nProducedBefore2010(x)\nPassengers100(x)\nSeats300(x)\nShortDistance(x)\nBoeing737(x)"
    },
    {
        "NLSTATEMENT": "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) ",
        "CORRECT": "∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) ",
        "PREDICATES": "Year(x)\nBefore2016(x)\nSince2016(x)\nOwn(x, y)\nAlignHighSchool(x)\nTest(x, y)"
    },
    {
        "NLSTATEMENT": "The SAT test is wholly owned and developed by the College Board.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Own(sat, collegeBoard) ∧ ¬Own(sat, others)",
        "CORRECT": "Own(sat, collegeBoard) ∧ ¬Own(sat, others)",
        "PREDICATES": "Year(x)\nBefore2016(x)\nSince2016(x)\nOwn(x, y)\nAlignHighSchool(x)\nTest(x, y)"
    },
    {
        "NLSTATEMENT": "The SAT test is intended to assess student's readiness for college.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Test(sat, readiness)",
        "CORRECT": "Test(sat, readiness)",
        "PREDICATES": "Year(x)\nBefore2016(x)\nSince2016(x)\nOwn(x, y)\nAlignHighSchool(x)\nTest(x, y)"
    },
    {
        "NLSTATEMENT": "Nadal's win ratio is higher than 80%.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "HighWinRatio(rafaNadal)",
        "CORRECT": "HighWinRatio(rafaNadal)",
        "PREDICATES": "BornIn(x, y)\nProfessionalTennisPlayer(x)\nInBig3(x)\nHighWinRatio(x)"
    },
    {
        "NLSTATEMENT": "Rafa Nadal is a professional tennis player.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "ProfessionalTennisPlayerrafaNadal",
        "CORRECT": "ProfessionalTennisPlayer(rafaNadal)",
        "PREDICATES": "BornIn(x, y)\nProfessionalTennisPlayer(x)\nInBig3(x)\nHighWinRatio(x)"
    },
    {
        "NLSTATEMENT": "All players in the Big 3 are professionals who have a high win ratio.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))",
        "CORRECT": "∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))",
        "PREDICATES": "BornIn(x, y)\nProfessionalTennisPlayer(x)\nInBig3(x)\nHighWinRatio(x)"
    },
    {
        "NLSTATEMENT": "No cookie is healthy.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Cookie(x) → ∀x  ¬Healthy(x))",
        "CORRECT": "∀x (Cookie(x) → ¬Healthy(x))",
        "PREDICATES": "Cookie(x)\nOreo(x)\nHealthy(x)"
    },
    {
        "NLSTATEMENT": "All pupils are human.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Pupil(x) → Human(x))",
        "CORRECT": "∀x (Pupil(x) → Human(x))",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "All pupils are human.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Pupil(x) → Human(x))",
        "CORRECT": "∀x (Pupil(x) → Human(x))",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "All flowers are plants.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Flower(x) → Plant(x))",
        "CORRECT": "∀x (Flower(x) → Plant(x))",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "All pupils are human.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Pupil(x) → Human(x))",
        "CORRECT": "∀x (Pupil(x) → Human(x))",
        "PREDICATES": "Flower(x)\nHuman(x)\nAnimal(x)\nPlant(x)\nPupil(x)"
    },
    {
        "NLSTATEMENT": "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "¬(AirTightwatch) ∧ Clothes(watch) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))",
        "CORRECT": "¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))",
        "PREDICATES": "Clothes(x)\nSlipper(x)\nWearable(x)\nFood(x)\nAirTight(x)\nShoes(x)"
    },
    {
        "NLSTATEMENT": "A thing is either food or clothes.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Food(x) ⊕ Clothes(x))",
        "CORRECT": "∀x (Food(x) ⊕ Clothes(x))",
        "PREDICATES": "Clothes(x)\nSlipper(x)\nWearable(x)\nFood(x)\nAirTight(x)\nShoes(x)"
    },
    {
        "NLSTATEMENT": "No shoes are food. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Shoes(x) → ∀x  ¬Food(x))",
        "CORRECT": "∀x (Shoes(x) → ¬Food(x))",
        "PREDICATES": "Clothes(x)\nSlipper(x)\nWearable(x)\nFood(x)\nAirTight(x)\nShoes(x)"
    },
    {
        "NLSTATEMENT": "Carlos Reyes is a welterweight.",
        "ERRORTYPE": "no_error",
        "SKETCH": "IsWelterWeight(carlosReyes)",
        "CORRECT": "IsWelterWeight(carlosReyes)",
        "PREDICATES": "DoesOlympicSport(x)\nGoesToOlympicGames(x)\nIsHeavyWeight(x)\nIsOlympian(x)\nIsWelterWeight(x)"
    },
    {
        "NLSTATEMENT": "Heavy weights are not welterweights.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (IsWelterWeight(x) → ¬IsHeavyWeight(x))",
        "CORRECT": "∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))",
        "PREDICATES": "DoesOlympicSport(x)\nGoesToOlympicGames(x)\nIsHeavyWeight(x)\nIsOlympian(x)\nIsWelterWeight(x)"
    },
    {
        "NLSTATEMENT": "Heavy weights are not welterweights.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (IsWelterWeight(x) → ∀x  ¬IsHeavyWeight(x))",
        "CORRECT": "∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))",
        "PREDICATES": "DoesOlympicSport(x)\nGoesToOlympicGames(x)\nIsHeavyWeight(x)\nIsOlympian(x)\nIsWelterWeight(x)"
    },
    {
        "NLSTATEMENT": "All young teenage girls who attend college are big fans of pop bands and singers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (CollegeTeen(x) → Ambitious(x))",
        "CORRECT": "∀x (CollegeTeen(x) → Ambitious(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Fans(x) → ∀x  Decor(x))",
        "CORRECT": "∀x (Fans(x) → Decor(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Fans(x) → Decor(x))",
        "CORRECT": "∀x (Fans(x) → Decor(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Fans(x) → Decor(x))",
        "CORRECT": "∀x (Fans(x) → Decor(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Ambitious(x) → MoveOut(x))",
        "CORRECT": "∀x (Ambitious(x) → MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Decor(x) → ¬MoveOut(x))",
        "CORRECT": "∀x (Decor(x) → ¬MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Decor(x) → ¬MoveOut(x))",
        "CORRECT": "∀x (Decor(x) → ¬MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Fans(x) → ∀x  Decor(x))",
        "CORRECT": "∀x (Fans(x) → Decor(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Decor(x) → ¬MoveOut(x))",
        "CORRECT": "∀x (Decor(x) → ¬MoveOut(x))",
        "PREDICATES": "MoveOut(x)\nDecor(x)\nFans(x)\nCollegeTeen(x)\nAmbitious(x)"
    },
    {
        "NLSTATEMENT": "If someone is a teacher, then Bob will talk to him.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Teacher(x) → Talk(bob, x))",
        "CORRECT": "∀x (Teacher(x) → Talk(bob, x))",
        "PREDICATES": "Swear(x)\nPunished(x)\nGentleman(x)\nNice(x)\nShriek(x)\nTalk(x, y)\nStudent(x)\nMan(x)\nTeacher(x)\nSuit(x)"
    },
    {
        "NLSTATEMENT": "If someone is not a gentlemen, then he is not nice.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (¬Gentleman(x) → ¬Nicex)",
        "CORRECT": "∀x (¬Gentleman(x) → ¬Nice(x))",
        "PREDICATES": "Swear(x)\nPunished(x)\nGentleman(x)\nNice(x)\nShriek(x)\nTalk(x, y)\nStudent(x)\nMan(x)\nTeacher(x)\nSuit(x)"
    },
    {
        "NLSTATEMENT": "If someone is not a gentlemen, then he is not nice.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (¬Gentleman(x) → ∀x  ¬Nice(x))",
        "CORRECT": "∀x (¬Gentleman(x) → ¬Nice(x))",
        "PREDICATES": "Swear(x)\nPunished(x)\nGentleman(x)\nNice(x)\nShriek(x)\nTalk(x, y)\nStudent(x)\nMan(x)\nTeacher(x)\nSuit(x)"
    },
    {
        "NLSTATEMENT": "Quincy McDuffie is an American professional wide receiver in Canadian Football.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcdu(ff)ie, canadianfootball)",
        "CORRECT": "American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)",
        "PREDICATES": "Good(x, y)\nIn(x, y)\nCanCatch(x, y)\nCanCatchWith(x, y)\nProfessional(x)\nWideReciever(x)\nFootball(x)\nBall(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "All footballs are balls.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Football(x) → Ball(x))",
        "CORRECT": "∀x (Football(x) → Ball(x))",
        "PREDICATES": "Good(x, y)\nIn(x, y)\nCanCatch(x, y)\nCanCatchWith(x, y)\nProfessional(x)\nWideReciever(x)\nFootball(x)\nBall(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "All footballs are balls.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Football(x) → Ball(x))",
        "CORRECT": "∀x (Football(x) → Ball(x))",
        "PREDICATES": "Good(x, y)\nIn(x, y)\nCanCatch(x, y)\nCanCatchWith(x, y)\nProfessional(x)\nWideReciever(x)\nFootball(x)\nBall(x)\nAmerican(x)"
    },
    {
        "NLSTATEMENT": "If A precedes B and B preceds C, than A preceds C.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))",
        "CORRECT": "∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))",
        "PREDICATES": "Precede(x, y)\nLocate(x, y)\nSituate(x, y)\nServe(x, y)\nRailwayStation(x)"
    },
    {
        "NLSTATEMENT": "If A precedes B and B preceds C, than A preceds C.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))",
        "CORRECT": "∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))",
        "PREDICATES": "Precede(x, y)\nLocate(x, y)\nSituate(x, y)\nServe(x, y)\nRailwayStation(x)"
    },
    {
        "NLSTATEMENT": "Dommartin is situated on the Paris–Lille railway. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Situate(dommartin, pairsLille)",
        "CORRECT": "Situate(dommartin, pairsLille)",
        "PREDICATES": "Precede(x, y)\nLocate(x, y)\nSituate(x, y)\nServe(x, y)\nRailwayStation(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedInedwinsmith, italy ∧ ServedIn(edwinsmith, egypt)",
        "CORRECT": "Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)",
        "CORRECT": "WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith was a New Zealand Rower from Auckland.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)",
        "CORRECT": "From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "Edwin Smith was a New Zealand Rower from Auckland.",
        "ERRORTYPE": "no_error",
        "SKETCH": "From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)",
        "CORRECT": "From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)",
        "PREDICATES": "ServedIn(x, y)\nSheetmetalWorker(x)\nKnownAs(x, y)\nRower(x)\nWentTo(x, y)\nLocatedIn(x, y)\nFrom(x, y)\nServedWith(x, y)\nOwned(x, y)\nSergeant(x)\nRan(x, y)\nBuisness(x)"
    },
    {
        "NLSTATEMENT": "A werewolf has been scratched or bitten by another werewolf.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃y ∀x (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "CORRECT": "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "PREDICATES": "Human(x)\nScratchedBy(x, y)\nBittenBy(x, y)\nAttackedBy(x, y)\nWerewolf(x)\nCanTurnInto(x, y)"
    },
    {
        "NLSTATEMENT": "A werewolf has been scratched or bitten by another werewolf.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∃y ∀x (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "CORRECT": "∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))",
        "PREDICATES": "Human(x)\nScratchedBy(x, y)\nBittenBy(x, y)\nAttackedBy(x, y)\nWerewolf(x)\nCanTurnInto(x, y)"
    },
    {
        "NLSTATEMENT": "A werewolf is a human that can turn into a wolf.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Human(x) ∧ CanTurnInto(x, wolf) → ∀x  Werewolf(x))",
        "CORRECT": "∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))",
        "PREDICATES": "Human(x)\nScratchedBy(x, y)\nBittenBy(x, y)\nAttackedBy(x, y)\nWerewolf(x)\nCanTurnInto(x, y)"
    },
    {
        "NLSTATEMENT": "Jung was injured at UFC Fight Night.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Event(uFCFightNight) → Injured(jung)",
        "CORRECT": "Event(uFCFightNight) → Injured(jung)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)",
        "CORRECT": "Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "Musoke fought Yakovlev at UFC Fight Night.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Event(uFCFightNight) → Fight(musoke, yakovlev)",
        "CORRECT": "Event(uFCFightNight) → Fight(musoke, yakovlev)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "UFC Fight Night was a mixed martial arts event and was held in Sweden.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)",
        "CORRECT": "Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)",
        "PREDICATES": "Event(x)\nInjured(x)\nFight(x, y)\nMixedMartial(x)\nScheduledToFight(x, y)\nFightInUFC(x)\nSweden(x)"
    },
    {
        "NLSTATEMENT": "All drinks are edible. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Drink(x) → Edible(x))",
        "CORRECT": "∀x (Drink(x) → Edible(x))",
        "PREDICATES": "Juice(x)\nOrangeJuice(x)\nEdible(x)\nAppleJuice(x)\nSweet(x)\nDrink(x)"
    },
    {
        "NLSTATEMENT": "All drinks are edible. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Drink(x) → ∀x  Edible(x))",
        "CORRECT": "∀x (Drink(x) → Edible(x))",
        "PREDICATES": "Juice(x)\nOrangeJuice(x)\nEdible(x)\nAppleJuice(x)\nSweet(x)\nDrink(x)"
    },
    {
        "NLSTATEMENT": "All juices are drinks. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x ((Juice(x)) → Drink(x))",
        "CORRECT": "∀x (Juice(x) → Drink(x))",
        "PREDICATES": "Juice(x)\nOrangeJuice(x)\nEdible(x)\nAppleJuice(x)\nSweet(x)\nDrink(x)"
    },
    {
        "NLSTATEMENT": "Talented poets are popular.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (TalentedPoet(x) → Popular(x))",
        "CORRECT": "∀x (TalentedPoet(x) → Popular(x))",
        "PREDICATES": "SupportPopulists(x)\nKilled(x, y)\nTalentedPoet(x)\nPopular(x)\nOpposed(x, y)"
    },
    {
        "NLSTATEMENT": "Talented poets are popular.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (TalentedPoet(x) → Popular(x))",
        "CORRECT": "∀x (TalentedPoet(x) → Popular(x))",
        "PREDICATES": "SupportPopulists(x)\nKilled(x, y)\nTalentedPoet(x)\nPopular(x)\nOpposed(x, y)"
    },
    {
        "NLSTATEMENT": "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (CocaCola(x) → Dentist(x))",
        "CORRECT": "∀x (CocaCola(x) → Dentist(x))",
        "PREDICATES": "Dentist(x)\nBusyParents(x)\nConsistent(x)\nCocaCola(x)\nErratic(x)\nKombucha(x)"
    },
    {
        "NLSTATEMENT": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (CocaCola(x) → BusyParentsx)",
        "CORRECT": "∀x (CocaCola(x) → BusyParents(x))",
        "PREDICATES": "Dentist(x)\nBusyParents(x)\nConsistent(x)\nCocaCola(x)\nErratic(x)\nKombucha(x)"
    },
    {
        "NLSTATEMENT": "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Kombucha(x) ∨ ∀x  CocaCola(x))",
        "CORRECT": "∀x (Kombucha(x) ∨ CocaCola(x))",
        "PREDICATES": "Dentist(x)\nBusyParents(x)\nConsistent(x)\nCocaCola(x)\nErratic(x)\nKombucha(x)"
    },
    {
        "NLSTATEMENT": "James subscribes to AMC A List.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "SubscribedTo(james, amcalist)",
        "CORRECT": "SubscribedTo(james, amcalist)",
        "PREDICATES": "NoFees(x)\nPrefer(x, y)\nCinemaEveryWeek(x)\nWatchTVIn(x, y)\nSubscribedTo(x, y)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (SubscribedTo(x, amcalist) → ∀x  ThreeMovies(x) ∧ NoFees(x))",
        "CORRECT": "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "PREDICATES": "NoFees(x)\nPrefer(x, y)\nCinemaEveryWeek(x)\nWatchTVIn(x, y)\nSubscribedTo(x, y)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "CORRECT": "∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))",
        "PREDICATES": "NoFees(x)\nPrefer(x, y)\nCinemaEveryWeek(x)\nWatchTVIn(x, y)\nSubscribedTo(x, y)\nThreeMovies(x)"
    },
    {
        "NLSTATEMENT": "Bulbophyllum attenuatum is in the genus bulbophyllum.",
        "ERRORTYPE": "no_error",
        "SKETCH": "InGenus(bulbophyllumattenuatum, bulbophyllum)",
        "CORRECT": "InGenus(bulbophyllumattenuatum, bulbophyllum)",
        "PREDICATES": "Orchid(x)\nInGenus(x, y)"
    },
    {
        "NLSTATEMENT": "Yekaterinburg is the administrative center of the Ural federal district.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "AdministrativeCenterOf(yekaterinburg, ural)",
        "CORRECT": "AdministrativeCenterOf(yekaterinburg, ural)",
        "PREDICATES": "LargestAreaIn(x)\nLargestPopulationIn(x)\nFederalDistrictOfRussia(x)\nEstablishedIn(x, y)\nAdministrativeCenterOf(x, y)"
    },
    {
        "NLSTATEMENT": "The Central federal district has the largest population among all federal districts in Russia.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "FederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) ",
        "CORRECT": "FederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) ",
        "PREDICATES": "LargestAreaIn(x)\nLargestPopulationIn(x)\nFederalDistrictOfRussia(x)\nEstablishedIn(x, y)\nAdministrativeCenterOf(x, y)"
    },
    {
        "NLSTATEMENT": "The Far Eastern federal district has the largest area among all federal districts in Russia.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)",
        "CORRECT": "FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)",
        "PREDICATES": "LargestAreaIn(x)\nLargestPopulationIn(x)\nFederalDistrictOfRussia(x)\nEstablishedIn(x, y)\nAdministrativeCenterOf(x, y)"
    },
    {
        "NLSTATEMENT": "All cancers are malignant tumors.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Cancer(x) → MalignantTumor(x))",
        "CORRECT": "∀x (Cancer(x) → MalignantTumor(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "All colorectal cancer is cancer.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (ColorectalCancer(x) → ∀x  Cancer(x))",
        "CORRECT": "∀x (ColorectalCancer(x) → Cancer(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "No malignant tumor can be treated at home.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHomex)",
        "CORRECT": "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "Breast cancer is neither having a cold nor a malignant tumor (exclusive).",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))",
        "CORRECT": "¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "No malignant tumor can be treated at home.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (MalignantTumor(x) → ∀x  ¬CanBeTreatedAtHome(x))",
        "CORRECT": "∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "All colorectal cancer is cancer.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (ColorectalCancer(x) → Cancer(x))",
        "CORRECT": "∀x (ColorectalCancer(x) → Cancer(x))",
        "PREDICATES": "Cancer(x)\nCanBeTreatedAtHome(x)\nMalignantTumor(x)\nHavingACold(x)\nColorectalCancer(x)"
    },
    {
        "NLSTATEMENT": "I should not worry about things outside of my control.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (OutsideControl(x) → ¬ShouldWorryx)",
        "CORRECT": "∀x (OutsideControl(x) → ¬ShouldWorry(x))",
        "PREDICATES": "ShouldWorry(x)\nOutsideControl(x)\nTraffic(x)"
    },
    {
        "NLSTATEMENT": "Roberto Roversi uses Roversi as a surname.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "UseAsSurname(roberto, roversi)",
        "CORRECT": "UseAsSurname(roberto, roversi)",
        "PREDICATES": "Photographer(x)\nUseAsSurname(x, y)\nProfessional(x)\nUseItalianSurname(x)\nAmateur(x)"
    },
    {
        "NLSTATEMENT": "Roberto Roversi uses Roversi as a surname.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "UseAsSurname(roberto, roversi)",
        "CORRECT": "UseAsSurname(roberto, roversi)",
        "PREDICATES": "Photographer(x)\nUseAsSurname(x, y)\nProfessional(x)\nUseItalianSurname(x)\nAmateur(x)"
    },
    {
        "NLSTATEMENT": "Paolo Roversi uses Roversi as a surname.",
        "ERRORTYPE": "no_error",
        "SKETCH": "UseAsSurname(paolo, roversi)",
        "CORRECT": "UseAsSurname(paolo, roversi)",
        "PREDICATES": "Photographer(x)\nUseAsSurname(x, y)\nProfessional(x)\nUseItalianSurname(x)\nAmateur(x)"
    },
    {
        "NLSTATEMENT": "Zaha Hadid is a British-Iraqi architect, artist and designer.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "(British-IraqiArchitect(zaha)Hadid)",
        "CORRECT": "British-IraqiArchitect(zahaHadid)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "ERRORTYPE": "no_error",
        "SKETCH": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "CORRECT": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "CORRECT": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)",
        "CORRECT": "AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)",
        "PREDICATES": "IraqiArchitect(x)\nVisitingprofessor(x, y)\nBornIn(x, y)\nAspiringArchitectureStudent(x)\nPlansToApplyTo(x, y)"
    },
    {
        "NLSTATEMENT": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechniquex) ",
        "CORRECT": "∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) ",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "All noninvasive neuroimaging techniques provide a spatial resolution of brains.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": " ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) ",
        "CORRECT": " ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) ",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "All measurements of brain activity are used by neuroscience researchers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": " ∀x (MeasurementOfBrainActivity((x) → UsedByNeuro)scienceResearchers(x))",
        "CORRECT": " ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "  (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ",
        "CORRECT": " ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ",
        "PREDICATES": "UsedByNeuroscienceResearchers(x)\nMeasurementOfBrainActivity(x)\nNoninvasiveNeuroimagingTechnique(x)\nInvasiveNeuroimagingTechnique(x)\nProvidesSpatialResolutionOfBrains(x)"
    },
    {
        "NLSTATEMENT": "All who present their work at the conference will attend in person. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Present(x) → ∀x  InPerson(x))",
        "CORRECT": "∀x (Present(x) → InPerson(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All invited to join the club are provided with delicious meals. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Invited(x) → ∀x  Meals(x))",
        "CORRECT": "∀x (Invited(x) → Meals(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All those providing a tutorial session at the conference are invited to join the club. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Tutorial(x) → ∀x  Invited(x))",
        "CORRECT": "∀x (Tutorial(x) → Invited(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All provided with delicious meals are happy to communicate with each other during the dinner. ",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Meals(x) → HappyCommunicate(x))",
        "CORRECT": "∀x (Meals(x) → HappyCommunicate(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "All those providing a tutorial session at the conference are invited to join the club. ",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x (Tutorial(x) → Invitedx)",
        "CORRECT": "∀x (Tutorial(x) → Invited(x))",
        "PREDICATES": "Invited(x)\nSouvenirs(x)\nHappyCommunicate(x)\nMeals(x)\nInvitedTakePhoto(x)\nPresent(x)\nInPerson(x)\nTutorial(x)"
    },
    {
        "NLSTATEMENT": "The USS Salem is a museum ship.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "MuseumShipusssalem",
        "CORRECT": "MuseumShip(usssalem)",
        "PREDICATES": "HeavyCruiser(x)\nMuseumShip(x)\nLastHeavyCruiserToEnterService(x)\nBuiltFor(x, y)\nServedIn(x, y)\nOpenToPublic(x)"
    },
    {
        "NLSTATEMENT": "The last heavy cruiser to enter service was the USS Salem.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "LastHeavyCruiserToEnterService(usss(a)lem)",
        "CORRECT": "LastHeavyCruiserToEnterService(usssalem)",
        "PREDICATES": "HeavyCruiser(x)\nMuseumShip(x)\nLastHeavyCruiserToEnterService(x)\nBuiltFor(x, y)\nServedIn(x, y)\nOpenToPublic(x)"
    },
    {
        "NLSTATEMENT": "The USS Salem is a museum ship.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "MuseumShip(usssalem)",
        "CORRECT": "MuseumShip(usssalem)",
        "PREDICATES": "HeavyCruiser(x)\nMuseumShip(x)\nLastHeavyCruiserToEnterService(x)\nBuiltFor(x, y)\nServedIn(x, y)\nOpenToPublic(x)"
    },
    {
        "NLSTATEMENT": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))",
        "CORRECT": "∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))",
        "PREDICATES": "Stabilizers(x)\nNorweigian(x)\nSteamTurbine(x)\nGoodSea(x)\nOnlyOnShips(x)\nCargoVessel(x)\nQuiet(x)\nPassenger(x)\nTSLeda(x)"
    },
    {
        "NLSTATEMENT": "TS Leda was the first Norweigian vessel that was built with stabilizers.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))",
        "CORRECT": "∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))",
        "PREDICATES": "Stabilizers(x)\nNorweigian(x)\nSteamTurbine(x)\nGoodSea(x)\nOnlyOnShips(x)\nCargoVessel(x)\nQuiet(x)\nPassenger(x)\nTSLeda(x)"
    },
    {
        "NLSTATEMENT": "TS Leda was a good passenger and cargo vessel.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))",
        "CORRECT": "∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))",
        "PREDICATES": "Stabilizers(x)\nNorweigian(x)\nSteamTurbine(x)\nGoodSea(x)\nOnlyOnShips(x)\nCargoVessel(x)\nQuiet(x)\nPassenger(x)\nTSLeda(x)"
    },
    {
        "NLSTATEMENT": "Jose has a Chilean wife, Carmen.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "Wife(jose, carmen) ∧ Chilean(carmen)",
        "CORRECT": "Wife(jose, carmen) ∧ Chilean(carmen)",
        "PREDICATES": "ConstructionSite(x)\nDaughter(x, y)\nBuildingContractor(x)\nLargestCity(x, y)\nBorn(x, y)\nWife(x, y)\nChilean(x)\nOversee(x, y)\nCapital(x, y)"
    },
    {
        "NLSTATEMENT": "A building contractor is responsible for the day-to-day oversight of a construction site. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " ∃y (BuildingContractor(x) ∧ ∀x  ConstructionSite(y) → Oversee(x, y))",
        "CORRECT": "∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))",
        "PREDICATES": "ConstructionSite(x)\nDaughter(x, y)\nBuildingContractor(x)\nLargestCity(x, y)\nBorn(x, y)\nWife(x, y)\nChilean(x)\nOversee(x, y)\nCapital(x, y)"
    },
    {
        "NLSTATEMENT": "Jose has a Chilean wife, Carmen.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Wife(jose, carmen) ∧ Chilean(carmen)",
        "CORRECT": "Wife(jose, carmen) ∧ Chilean(carmen)",
        "PREDICATES": "ConstructionSite(x)\nDaughter(x, y)\nBuildingContractor(x)\nLargestCity(x, y)\nBorn(x, y)\nWife(x, y)\nChilean(x)\nOversee(x, y)\nCapital(x, y)"
    },
    {
        "NLSTATEMENT": "Rappers release rap albums.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "ReleasedAlbumtyga, wellDone3",
        "CORRECT": "ReleasedAlbum(tyga, wellDone3)",
        "PREDICATES": "ReleasedAlbum(x, y)\nIsOperaSinger(x)\nIsRapper(x)\nIsRapAlbum(x)"
    },
    {
        "NLSTATEMENT": "Rappers are not opera singers.",
        "ERRORTYPE": "parentheses_manipulation",
        "SKETCH": "∀x IsRapper(x → ¬IsOperaSinger(x))",
        "CORRECT": "∀x (IsRapper(x) → ¬IsOperaSinger(x))",
        "PREDICATES": "ReleasedAlbum(x, y)\nIsOperaSinger(x)\nIsRapper(x)\nIsRapAlbum(x)"
    },
    {
        "NLSTATEMENT": "Rappers are not opera singers.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (IsRapper(x) → ¬IsOperaSinger(x))",
        "CORRECT": "∀x (IsRapper(x) → ¬IsOperaSinger(x))",
        "PREDICATES": "ReleasedAlbum(x, y)\nIsOperaSinger(x)\nIsRapper(x)\nIsRapAlbum(x)"
    },
    {
        "NLSTATEMENT": "Psyche is a play based on the life of James Miranda Barry.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Play(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)",
        "CORRECT": "Play(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)",
        "PREDICATES": "Actress(x)\nPlaywright(x)\nFrom(x, y)\nProduced(x, y)\nBornIn(x, y)\nPlay(x)\nBasedOn(x, y)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Deborah Wallace co-produced Gasland.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": "Co-Produced(deborahwallace, gasland)",
        "CORRECT": "Co-Produced(deborahwallace, gasland)",
        "PREDICATES": "Actress(x)\nPlaywright(x)\nFrom(x, y)\nProduced(x, y)\nBornIn(x, y)\nPlay(x)\nBasedOn(x, y)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Deborah Wallace co-produced Gasland.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "Co-Produced(deborahwallace, gasland)",
        "CORRECT": "Co-Produced(deborahwallace, gasland)",
        "PREDICATES": "Actress(x)\nPlaywright(x)\nFrom(x, y)\nProduced(x, y)\nBornIn(x, y)\nPlay(x)\nBasedOn(x, y)\nProducer(x)"
    },
    {
        "NLSTATEMENT": "Larry is a big animal.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "BigAnimal(larry)",
        "CORRECT": "BigAnimal(larry)",
        "PREDICATES": "EatsALot(x)\nBear(x)\nNeedsLargeTerritory(x)\nBigAnimal(x)\nTravelFar(x)"
    },
    {
        "NLSTATEMENT": "Everything that eats a lot needs a large territory.",
        "ERRORTYPE": "variable_scope_alteration",
        "SKETCH": "∀x (EatsALot(x) → NeedsLargeTerritory(x))",
        "CORRECT": "∀x (EatsALot(x) → NeedsLargeTerritory(x))",
        "PREDICATES": "EatsALot(x)\nBear(x)\nNeedsLargeTerritory(x)\nBigAnimal(x)\nTravelFar(x)"
    },
    {
        "NLSTATEMENT": "All bears are big animals.",
        "ERRORTYPE": "quantifier_removal",
        "SKETCH": " (Bear(x) → BigAnimal(x))",
        "CORRECT": "∀x (Bear(x) → BigAnimal(x))",
        "PREDICATES": "EatsALot(x)\nBear(x)\nNeedsLargeTerritory(x)\nBigAnimal(x)\nTravelFar(x)"
    },
    {
        "NLSTATEMENT": "No criminal is kind. ",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (Criminal(x) → ∀x  ¬Kind(x))",
        "CORRECT": "∀x (Criminal(x) → ¬Kind(x))",
        "PREDICATES": "BreakLaw(x)\nKind(x)\nCriminal(x)\nUgly(x)\nColdBlood(x)\nEvil(x)"
    },
    {
        "NLSTATEMENT": "People are either kind or evil.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": "∀x (Kind(x) ⊕ Evil(x))",
        "CORRECT": "∀x (Kind(x) ⊕ Evil(x))",
        "PREDICATES": "BreakLaw(x)\nKind(x)\nCriminal(x)\nUgly(x)\nColdBlood(x)\nEvil(x)"
    },
    {
        "NLSTATEMENT": "If someone is evil, then they are ugly.",
        "ERRORTYPE": "no_error",
        "SKETCH": "∀x (Evil(x) → Ugly(x))",
        "CORRECT": "∀x (Evil(x) → Ugly(x))",
        "PREDICATES": "BreakLaw(x)\nKind(x)\nCriminal(x)\nUgly(x)\nColdBlood(x)\nEvil(x)"
    },
    {
        "NLSTATEMENT": "Phoneix's music is classified under the indie pop genre.",
        "ERRORTYPE": "no_error",
        "SKETCH": "IndiePop(phoenix)",
        "CORRECT": "IndiePop(phoenix)",
        "PREDICATES": "EnglishSong(x)\nMake(x, y)\nFrance(x)\nSynthPop(x)\nFrenchSong(x)\nBand(x)\nPopRock(x)\nIndiePop(x)"
    },
    {
        "NLSTATEMENT": "Aside from indie pop, pop rock and synth-pop are two other genres of music.",
        "ERRORTYPE": "quantifier_misplacement",
        "SKETCH": " (IndiePop(x) → ∀x  ¬PopRock(x) ∧ ¬SynthPop(x))",
        "CORRECT": "∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))",
        "PREDICATES": "EnglishSong(x)\nMake(x, y)\nFrance(x)\nSynthPop(x)\nFrenchSong(x)\nBand(x)\nPopRock(x)\nIndiePop(x)"
    }
]