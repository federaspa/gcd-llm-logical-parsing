[
  {
    "id": 1014,
    "flag": "success",
    "assumptions": [
      "all x.(((InThisClub(x) & PerformOftenIn(x,SchoolTalentShow)) -> Attend(x,SchoolEvent)) & VeryEngagedWith(x,SchoolEvent))",
      "all x.(((InThisClub(x) -> PerformOftenIn(x,SchoolTalentShow)) & -(InActive(x) & Disinterested(x) & MemberOf(x,Community))) | (-(InThisClub(x) -> PerformOftenIn(x,SchoolTalentShow)) & InActive(x) & Disinterested(x) & MemberOf(x,Community)))",
      "all x.((InThisClub(x) & Chaperone(x,HighSchoolDance)) -> -(Studen(x) & AttendSchool(x)))",
      "all x.((InThisClub(x) & InActive(x) & Disinterested(x) & MemberOf(x,Community)) -> Chaperone(x,HighSchoolDances))",
      "all x.(InThisClub(x) & ((YoungChildren(x) & -(Teenager(x)) | (-(YoungChildren(x) & Teenager(x))))) & WishToFurther(x,academicCareer)) -> (Student(x) & AttendSchool(x))",
      "(InThisClub(Bonnie) & -((Attend(x,SchoolEvent) & VeryEngagedWith(Bonnie,SchoolEvent) & -(Studen(Bonne) & AttendSchool(Bonnie))) | (-(Attend(x,SchoolEvent) & VeryEngagedWith(Bonnie,SchoolEvent)) & Studen(Bonne) & AttendSchool(Bonnie))))"
    ],
    "goal": "(InThisClub(Bonnie) & Perform(Bonnie,SchoolTalentShow))"
  },
  {
    "id": 1015,
    "flag": "success",
    "assumptions": [
      "all x.(((InThisClub(x) & PerformOftenIn(x,SchoolTalentShow)) -> Attend(x,SchoolEvent)) & VeryEngagedWith(x,SchoolEvent))",
      "all x.(((InThisClub(x) -> PerformOftenIn(x,SchoolTalentShow)) & -(InActive(x) & Disinterested(x) & MemberOf(x,Community))) | (-(InThisClub(x) -> PerformOftenIn(x,SchoolTalentShow)) & InActive(x) & Disinterested(x) & MemberOf(x,Community)))",
      "all x.((InThisClub(x) & Chaperone(x,HighSchoolDance)) -> -(Studen(x) & AttendSchool(x)))",
      "all x.((InThisClub(x) & InActive(x) & Disinterested(x) & MemberOf(x,Community)) -> Chaperone(x,HighSchoolDances))",
      "all x.(InThisClub(x) & ((YoungChildren(x) & -(Teenager(x)) | (-(YoungChildren(x) & Teenager(x))))) & WishToFurther(x,academicCareer)) -> (Student(x) & AttendSchool(x))",
      "(InThisClub(Bonnie) & -((Attend(x,SchoolEvent) & VeryEngagedWith(Bonnie,SchoolEvent) & -(Studen(Bonne) & AttendSchool(Bonnie))) | (-(Attend(x,SchoolEvent) & VeryEngagedWith(Bonnie,SchoolEvent)) & Studen(Bonne) & AttendSchool(Bonnie))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1016,
    "flag": "success",
    "assumptions": [
      "all x.(((InThisClub(x) & PerformOftenIn(x,SchoolTalentShow)) -> Attend(x,SchoolEvent)) & VeryEngagedWith(x,SchoolEvent))",
      "all x.(((InThisClub(x) -> PerformOftenIn(x,SchoolTalentShow)) & -(InActive(x) & Disinterested(x) & MemberOf(x,Community))) | (-(InThisClub(x) -> PerformOftenIn(x,SchoolTalentShow)) & InActive(x) & Disinterested(x) & MemberOf(x,Community)))",
      "all x.((InThisClub(x) & Chaperone(x,HighSchoolDance)) -> -(Studen(x) & AttendSchool(x)))",
      "all x.((InThisClub(x) & InActive(x) & Disinterested(x) & MemberOf(x,Community)) -> Chaperone(x,HighSchoolDances))",
      "all x.(InThisClub(x) & ((YoungChildren(x) & -(Teenager(x)) | (-(YoungChildren(x) & Teenager(x))))) & WishToFurther(x,academicCareer)) -> (Student(x) & AttendSchool(x))",
      "(InThisClub(Bonnie) & -((Attend(x,SchoolEvent) & VeryEngagedWith(Bonnie,SchoolEvent) & -(Studen(Bonne) & AttendSchool(Bonnie))) | (-(Attend(x,SchoolEvent) & VeryEngagedWith(Bonnie,SchoolEvent)) & Studen(Bonne) & AttendSchool(Bonnie))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1208,
    "flag": "success",
    "assumptions": [
      "all x.((Employee(x) & Schedule(x,Meeting,Customers)) -> AppearIn(x,Company))",
      "all x.((Employee(x) & HasLunch(x,Company)) -> Schedule(x,Meeting,Customers))",
      "all x.(Employee(x) -> ((HasLunch(x,Company) & -HasLunch(x,Home)) | (-HasLunch(x,Company) & HasLunch(x,Home))))",
      "all x.((Employee(x) & HasLunch(x,Home)) -> Work(x,Home))",
      "all x.((Employee(x) & -In(x,Homecountry)) -> Work(x,Home))",
      "all x.(Manager(x) -> -Work(x,Home))",
      "-((Manager(James) & -AppearIn(James,Company)) | (-Manager(James) & AppearIn(James,Company)))"
    ],
    "goal": "HasLunch(James,Company)"
  },
  {
    "id": 1209,
    "flag": "success",
    "assumptions": [
      "all x.((Employee(x) & Schedule(x,Meeting,Customers)) -> AppearIn(x,Company))",
      "all x.((Employee(x) & HasLunch(x,Company)) -> Schedule(x,Meeting,Customers))",
      "all x.(Employee(x) -> ((HasLunch(x,Company) & -HasLunch(x,Home)) | (-HasLunch(x,Company) & HasLunch(x,Home))))",
      "all x.((Employee(x) & HasLunch(x,Home)) -> Work(x,Home))",
      "all x.((Employee(x) & -In(x,Homecountry)) -> Work(x,Home))",
      "all x.(Manager(x) -> -Work(x,Home))",
      "-((Manager(James) & -AppearIn(James,Company)) | (-Manager(James) & AppearIn(James,Company)))"
    ],
    "goal": "-HasLunch(James,Company)"
  },
  {
    "id": 1210,
    "flag": "success",
    "assumptions": [
      "all x.((Employee(x) & Schedule(x,Meeting,Customers)) -> AppearIn(x,Company))",
      "all x.((Employee(x) & HasLunch(x,Company)) -> Schedule(x,Meeting,Customers))",
      "all x.(Employee(x) -> ((HasLunch(x,Company) & -HasLunch(x,Home)) | (-HasLunch(x,Company) & HasLunch(x,Home))))",
      "all x.((Employee(x) & HasLunch(x,Home)) -> Work(x,Home))",
      "all x.((Employee(x) & -In(x,Homecountry)) -> Work(x,Home))",
      "all x.(Manager(x) -> -Work(x,Home))",
      "-((Manager(James) & -AppearIn(James,Company)) | (-Manager(James) & AppearIn(James,Company)))"
    ],
    "goal": "(Manager(James) -> -Work(James,Home))"
  },
  {
    "id": 563,
    "flag": "success",
    "assumptions": [
      "exists x.(OccurIn(MonkeypoxVirus,x) & Get(x,MonkeypoxVirus))",
      "exists x.(Animal(x) & OccurIn(MonkeypoxVirus,x))",
      "all x.(Human(x) -> Mammal(x))",
      "all x.(Mammal(x) -> Animal(x))",
      "exists x.(SymptonOf(x,MonkeypoxVirus) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))",
      "all x.((Human(x) & Get(x,Flu)) -> Feel(x,Tired))"
    ],
    "goal": "exists x.Animal(x)"
  },
  {
    "id": 564,
    "flag": "success",
    "assumptions": [
      "exists x.(OccurIn(MonkeypoxVirus,x) & Get(x,MonkeypoxVirus))",
      "exists x.(Animal(x) & OccurIn(MonkeypoxVirus,x))",
      "all x.(Human(x) -> Mammal(x))",
      "all x.(Mammal(x) -> Animal(x))",
      "exists x.(SymptonOf(x,MonkeypoxVirus) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))",
      "all x.((Human(x) & Get(x,Flu)) -> Feel(x,Tired))"
    ],
    "goal": "all x.(Human(x) -> -Get(x,Flu))"
  },
  {
    "id": 565,
    "flag": "success",
    "assumptions": [
      "exists x.(OccurIn(MonkeypoxVirus,x) & Get(x,MonkeypoxVirus))",
      "exists x.(Animal(x) & OccurIn(MonkeypoxVirus,x))",
      "all x.(Human(x) -> Mammal(x))",
      "all x.(Mammal(x) -> Animal(x))",
      "exists x.(SymptonOf(x,MonkeypoxVirus) & (Fever(x) | Headache(x) | MusclePain(x) | Tired(x)))",
      "all x.((Human(x) & Get(x,Flu)) -> Feel(x,Tired))"
    ],
    "goal": "exists x.(SymptonOf(x,MonkeypoxVirus) & Coughing(x))"
  },
  {
    "id": 0,
    "flag": "success",
    "assumptions": [
      "all x.(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RiograndeWildTurkey(x) | OcellatedWildTurkey(x)))",
      "-EasternWildTurkey(Tom)",
      "-OsceolaWildTurkey(Tom)",
      "-GouldsWildTurkey(Tom)",
      "-(MerriamsWildTurkey(Tom) | RiograndeWildTurkey(Tom))",
      "WildTurkey(Tom)"
    ],
    "goal": "OcellatedWildTurkey(Tom)"
  },
  {
    "id": 1,
    "flag": "success",
    "assumptions": [
      "all x.(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RiograndeWildTurkey(x) | OcellatedWildTurkey(x)))",
      "-EasternWildTurkey(Tom)",
      "-OsceolaWildTurkey(Tom)",
      "-GouldsWildTurkey(Tom)",
      "-(MerriamsWildTurkey(Tom) | RiograndeWildTurkey(Tom))",
      "WildTurkey(Tom)"
    ],
    "goal": "EasternWildTurkey(Tom)"
  },
  {
    "id": 2,
    "flag": "success",
    "assumptions": [
      "all x.(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RiograndeWildTurkey(x) | OcellatedWildTurkey(x)))",
      "-EasternWildTurkey(Tom)",
      "-OsceolaWildTurkey(Tom)",
      "-GouldsWildTurkey(Tom)",
      "-(MerriamsWildTurkey(Tom) | RiograndeWildTurkey(Tom))",
      "WildTurkey(Tom)"
    ],
    "goal": "WildTurkey(Joey)"
  },
  {
    "id": 57,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Game(x) & InTop10(x) & Created(y,x)) -> Japanese(y))",
      "[[ERROR]]",
      "exists y.(GreaterThan(y,OneMillion) & CopiesSold(TheLegendofZelda,y))"
    ],
    "goal": "Top10(Thelegendofzelda)"
  },
  {
    "id": 58,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Game(x) & InTop10(x) & Created(y,x)) -> Japanese(y))",
      "[[ERROR]]",
      "exists y.(GreaterThan(y,OneMillion) & CopiesSold(TheLegendofZelda,y))"
    ],
    "goal": "exists x.(Created(x,Fifa22) & Japanese(x) & VideoGameCompany(x))"
  },
  {
    "id": 59,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Game(x) & InTop10(x) & Created(y,x)) -> Japanese(y))",
      "[[ERROR]]",
      "exists y.(GreaterThan(y,OneMillion) & CopiesSold(TheLegendofZelda,y))"
    ],
    "goal": "-Top10(Thelegendofzelda)"
  },
  {
    "id": 726,
    "flag": "success",
    "assumptions": [
      "all x.(Square(x) -> FourSided(x))",
      "all x.(FourSided(x) -> Shape(x))"
    ],
    "goal": "all x.(Square(x) -> Shape(x))"
  },
  {
    "id": 1361,
    "flag": "success",
    "assumptions": [
      "all x.((Rabbit(x) & CanBeSpottedNear(x,Campus)) -> Cute(x))",
      "exists x.(Turtle(x) & CanBeSpottedNear(x,Campus))",
      "all x.(CanBeSpottedNear(x,Campus) -> ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x))))",
      "all x.(Skittish(x) -> -Calm(x))",
      "all x.((Squirrel(x) & CanBeSpottedNear(x,Campus)) -> Skittish(x))",
      "(CanBeSpottedNear(Rockie,Campus) & Calm(Rockie))"
    ],
    "goal": "Turtle(Rockie)"
  },
  {
    "id": 1362,
    "flag": "success",
    "assumptions": [
      "all x.((Rabbit(x) & CanBeSpottedNear(x,Campus)) -> Cute(x))",
      "exists x.(Turtle(x) & CanBeSpottedNear(x,Campus))",
      "all x.(CanBeSpottedNear(x,Campus) -> ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x))))",
      "all x.(Skittish(x) -> -Calm(x))",
      "all x.((Squirrel(x) & CanBeSpottedNear(x,Campus)) -> Skittish(x))",
      "(CanBeSpottedNear(Rockie,Campus) & Calm(Rockie))"
    ],
    "goal": "-Turtle(Rockie)"
  },
  {
    "id": 1363,
    "flag": "success",
    "assumptions": [
      "all x.((Rabbit(x) & CanBeSpottedNear(x,Campus)) -> Cute(x))",
      "exists x.(Turtle(x) & CanBeSpottedNear(x,Campus))",
      "all x.(CanBeSpottedNear(x,Campus) -> ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x))))",
      "all x.(Skittish(x) -> -Calm(x))",
      "all x.((Squirrel(x) & CanBeSpottedNear(x,Campus)) -> Skittish(x))",
      "(CanBeSpottedNear(Rockie,Campus) & Calm(Rockie))"
    ],
    "goal": "(Turtle(Rockie) | Cute(Rockie))"
  },
  {
    "id": 1364,
    "flag": "success",
    "assumptions": [
      "all x.((Rabbit(x) & CanBeSpottedNear(x,Campus)) -> Cute(x))",
      "exists x.(Turtle(x) & CanBeSpottedNear(x,Campus))",
      "all x.(CanBeSpottedNear(x,Campus) -> ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x))))",
      "all x.(Skittish(x) -> -Calm(x))",
      "all x.((Squirrel(x) & CanBeSpottedNear(x,Campus)) -> Skittish(x))",
      "(CanBeSpottedNear(Rockie,Campus) & Calm(Rockie))"
    ],
    "goal": "(((-(Turtle(Rockie) & Squirrel(Rockie)) -> Cute(Rockie)) & -Skittish(Rockie)) | (-(-(Turtle(Rockie) & Squirrel(Rockie)) -> Cute(Rockie)) & Skittish(Rockie)))"
  },
  {
    "id": 1365,
    "flag": "success",
    "assumptions": [
      "all x.((Rabbit(x) & CanBeSpottedNear(x,Campus)) -> Cute(x))",
      "exists x.(Turtle(x) & CanBeSpottedNear(x,Campus))",
      "all x.(CanBeSpottedNear(x,Campus) -> ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x))))",
      "all x.(Skittish(x) -> -Calm(x))",
      "all x.((Squirrel(x) & CanBeSpottedNear(x,Campus)) -> Skittish(x))",
      "(CanBeSpottedNear(Rockie,Campus) & Calm(Rockie))"
    ],
    "goal": "(((Cute(Rockie) & Calm(Rockie)) -> Turtle(Rockie)) & Skittish(Rockie))"
  },
  {
    "id": 530,
    "flag": "success",
    "assumptions": [
      "(NetflixShow(StrangerThings) & Popular(StrangerThings))",
      "all x.((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen,x))",
      "all x.((NetflixShow(x) & BingeWatch(Karen,x)) <-> Download(Karen,x))",
      "-Download(Karen,BlackMirror)",
      "NetflixShow(BlackMirror)",
      "all x.((NetflixShow(x) & BingeWatch(Karen,x)) -> ShareWith(Karen,x,Lisa))"
    ],
    "goal": "ShareWith(Karen,StrangerThings,Lisa)"
  },
  {
    "id": 531,
    "flag": "success",
    "assumptions": [
      "(NetflixShow(StrangerThings) & Popular(StrangerThings))",
      "all x.((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen,x))",
      "all x.((NetflixShow(x) & BingeWatch(Karen,x)) <-> Download(Karen,x))",
      "-Download(Karen,BlackMirror)",
      "NetflixShow(BlackMirror)",
      "all x.((NetflixShow(x) & BingeWatch(Karen,x)) -> ShareWith(Karen,x,Lisa))"
    ],
    "goal": "Popular(BlackMirror)"
  },
  {
    "id": 532,
    "flag": "success",
    "assumptions": [
      "(NetflixShow(StrangerThings) & Popular(StrangerThings))",
      "all x.((NetflixShow(x) & Popular(x)) -> BingeWatch(Karen,x))",
      "all x.((NetflixShow(x) & BingeWatch(Karen,x)) <-> Download(Karen,x))",
      "-Download(Karen,BlackMirror)",
      "NetflixShow(BlackMirror)",
      "all x.((NetflixShow(x) & BingeWatch(Karen,x)) -> ShareWith(Karen,x,Lisa))"
    ],
    "goal": "ShareWith(Karen,BlackMirror,Lisa)"
  },
  {
    "id": 657,
    "flag": "success",
    "assumptions": [
      "CapitalOf(Beijing,PeoplesRepublicOfChina)",
      "exists x.(CapitalOf(Beijing,x) -> WorldsMostPopulousNation(x))",
      "LocatedIn(Beijing,NorthernChina)",
      "(Hosted(Beijing,2008SummerOlympics) & Hosted(Beijing,2008SummerParalympicGames))",
      "(Hosted(Beijing,SummerOlympics) & Hosted(Beijing,WinterOlympics) & Hosted(Beijing,SummerParalympicGames) & Hosted(Beijing,WinterParalympicGames))",
      "exists x.(University(x) & InBeijing(x) & ConsistentlyRankAmongTheBestIn(x,TheWorld))"
    ],
    "goal": "(Hosted(Beijing,SummerOlympics) & Hosted(Beijing,WinterOlympics))"
  },
  {
    "id": 658,
    "flag": "success",
    "assumptions": [
      "CapitalOf(Beijing,PeoplesRepublicOfChina)",
      "exists x.(CapitalOf(Beijing,x) -> WorldsMostPopulousNation(x))",
      "LocatedIn(Beijing,NorthernChina)",
      "(Hosted(Beijing,2008SummerOlympics) & Hosted(Beijing,2008SummerParalympicGames))",
      "(Hosted(Beijing,SummerOlympics) & Hosted(Beijing,WinterOlympics) & Hosted(Beijing,SummerParalympicGames) & Hosted(Beijing,WinterParalympicGames))",
      "exists x.(University(x) & InBeijing(x) & ConsistentlyRankAmongTheBestIn(x,TheWorld))"
    ],
    "goal": "LocatedIn(Beijing,SouthernChina)"
  },
  {
    "id": 659,
    "flag": "success",
    "assumptions": [
      "CapitalOf(Beijing,PeoplesRepublicOfChina)",
      "exists x.(CapitalOf(Beijing,x) -> WorldsMostPopulousNation(x))",
      "LocatedIn(Beijing,NorthernChina)",
      "(Hosted(Beijing,2008SummerOlympics) & Hosted(Beijing,2008SummerParalympicGames))",
      "(Hosted(Beijing,SummerOlympics) & Hosted(Beijing,WinterOlympics) & Hosted(Beijing,SummerParalympicGames) & Hosted(Beijing,WinterParalympicGames))",
      "exists x.(University(x) & InBeijing(x) & ConsistentlyRankAmongTheBestIn(x,TheWorld))"
    ],
    "goal": "SecondLargestChineseCity(Beijing)"
  },
  {
    "id": 1301,
    "flag": "success",
    "assumptions": [
      "all x.(Alien(x) -> Extraterrestrial(x))",
      "all x.(From(x,Mars) -> Alien(x))",
      "all x.(Extraterrestrial(x) -> -Human(x))",
      "all x.((HighlyIntelligentBeing(x) & From(x,Earth)) -> Human(x))",
      "HighlyIntelligentBeing(Marvin)",
      "-((From(Marvin,Earth) & -From(Marvin,Mars)) | (-From(Marvin,Earth) & From(Marvin,Mars)))",
      "(-From(Marvin,Earth) -> Extraterrestrial(Marvin))"
    ],
    "goal": "Alien(Marvin)"
  },
  {
    "id": 1302,
    "flag": "success",
    "assumptions": [
      "all x.(Alien(x) -> Extraterrestrial(x))",
      "all x.(From(x,Mars) -> Alien(x))",
      "all x.(Extraterrestrial(x) -> -Human(x))",
      "all x.((HighlyIntelligentBeing(x) & From(x,Earth)) -> Human(x))",
      "HighlyIntelligentBeing(Marvin)",
      "-((From(Marvin,Earth) & -From(Marvin,Mars)) | (-From(Marvin,Earth) & From(Marvin,Mars)))",
      "(-From(Marvin,Earth) -> Extraterrestrial(Marvin))"
    ],
    "goal": "(-Human(Marvin) & -From(Marvin,Mars))"
  },
  {
    "id": 1303,
    "flag": "success",
    "assumptions": [
      "all x.(Alien(x) -> Extraterrestrial(x))",
      "all x.(From(x,Mars) -> Alien(x))",
      "all x.(Extraterrestrial(x) -> -Human(x))",
      "all x.((HighlyIntelligentBeing(x) & From(x,Earth)) -> Human(x))",
      "HighlyIntelligentBeing(Marvin)",
      "-((From(Marvin,Earth) & -From(Marvin,Mars)) | (-From(Marvin,Earth) & From(Marvin,Mars)))",
      "(-From(Marvin,Earth) -> Extraterrestrial(Marvin))"
    ],
    "goal": "(-From(Marvin,Mars) -> Human(Marvin))"
  },
  {
    "id": 893,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,Mixer) -> (GrandSlam(x) & Champion(x))) | (OscarNominated(x) & Actor(x)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((At(x,Mixer) & Professional(x) & TennisPlayer(x)) -> Athlete(x))",
      "all x.((At(x,Mixer) & Celebrity(x)) -> WellPaid(x))",
      "all x.((At(x,Mixer) & Athlete(x)) -> Famous(x))",
      "all x.((At(x,Mixer) & WellPaid(x)) -> LiveIn(x,TaxHaven))",
      "(At(Djokovic,Mixer) & ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)))"
    ],
    "goal": "(GrandSlam(Djokovic) & Champion(Djokovic))"
  },
  {
    "id": 894,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,Mixer) -> (GrandSlam(x) & Champion(x))) | (OscarNominated(x) & Actor(x)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((At(x,Mixer) & Professional(x) & TennisPlayer(x)) -> Athlete(x))",
      "all x.((At(x,Mixer) & Celebrity(x)) -> WellPaid(x))",
      "all x.((At(x,Mixer) & Athlete(x)) -> Famous(x))",
      "all x.((At(x,Mixer) & WellPaid(x)) -> LiveIn(x,TaxHaven))",
      "(At(Djokovic,Mixer) & ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)))"
    ],
    "goal": "LiveIn(Djokovic,TaxHaven)"
  },
  {
    "id": 895,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,Mixer) -> (GrandSlam(x) & Champion(x))) | (OscarNominated(x) & Actor(x)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((At(x,Mixer) & Professional(x) & TennisPlayer(x)) -> Athlete(x))",
      "all x.((At(x,Mixer) & Celebrity(x)) -> WellPaid(x))",
      "all x.((At(x,Mixer) & Athlete(x)) -> Famous(x))",
      "all x.((At(x,Mixer) & WellPaid(x)) -> LiveIn(x,TaxHaven))",
      "(At(Djokovic,Mixer) & ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)))"
    ],
    "goal": "-LiveIn(Djokovic,TaxHaven)"
  },
  {
    "id": 289,
    "flag": "success",
    "assumptions": [
      "(ProfessionalWrestlingStable(DiamondMine) & In(DiamondMine,WWE))",
      "Leads(RoderickStrong,DiamondMine)",
      "(Includes(DiamondMine,CreedBrothers) & Includes(DiamondMine,IvyNile))",
      "Feuds(Imperium,DiamondMine)"
    ],
    "goal": "exists x.(Leads(Roderickstrong,x) & ProfessionalWrestlingStable(x))"
  },
  {
    "id": 290,
    "flag": "success",
    "assumptions": [
      "(ProfessionalWrestlingStable(DiamondMine) & In(DiamondMine,WWE))",
      "Leads(RoderickStrong,DiamondMine)",
      "(Includes(DiamondMine,CreedBrothers) & Includes(DiamondMine,IvyNile))",
      "Feuds(Imperium,DiamondMine)"
    ],
    "goal": "Leads(Roderickstrong,Creedbrothers)"
  },
  {
    "id": 291,
    "flag": "success",
    "assumptions": [
      "(ProfessionalWrestlingStable(DiamondMine) & In(DiamondMine,WWE))",
      "Leads(RoderickStrong,DiamondMine)",
      "(Includes(DiamondMine,CreedBrothers) & Includes(DiamondMine,IvyNile))",
      "Feuds(Imperium,DiamondMine)"
    ],
    "goal": "all x.((ProfessionalWrestlingStable(x) & Includes(x,Ivynile)) -> -Feuds(Imperium,x))"
  },
  {
    "id": 621,
    "flag": "success",
    "assumptions": [
      "MusicPiece(Symphony9)",
      "[[ERROR]]",
      "Writtenby(Symphony9,Beethoven)",
      "Premiered(ViennaMusicSociety,Symphony9)",
      "Orchestra(ViennaMusicSociety)",
      "Lead(Beethoven,ViennaMusicSociety)",
      "[[ERROR]]"
    ],
    "goal": "Composer(Beethoven)"
  },
  {
    "id": 622,
    "flag": "success",
    "assumptions": [
      "MusicPiece(Symphony9)",
      "[[ERROR]]",
      "Writtenby(Symphony9,Beethoven)",
      "Premiered(ViennaMusicSociety,Symphony9)",
      "Orchestra(ViennaMusicSociety)",
      "Lead(Beethoven,ViennaMusicSociety)",
      "[[ERROR]]"
    ],
    "goal": "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))"
  },
  {
    "id": 623,
    "flag": "success",
    "assumptions": [
      "MusicPiece(Symphony9)",
      "[[ERROR]]",
      "Writtenby(Symphony9,Beethoven)",
      "Premiered(ViennaMusicSociety,Symphony9)",
      "Orchestra(ViennaMusicSociety)",
      "Lead(Beethoven,ViennaMusicSociety)",
      "[[ERROR]]"
    ],
    "goal": "-Conductor(Beethoven)"
  },
  {
    "id": 927,
    "flag": "success",
    "assumptions": [
      "all x.((Adore(Max,x) & ZahaHadid(x) & DesignStyle(x)) -> InterestingGeometry(x))",
      "all x.((Adore(Max,x) & BrutalistBuilding(x)) -> -InterestingGeometry(x))",
      "[[ERROR]]",
      "all x.((Adore(Max,x) & KellyWearstler(x) & DesignStyle(x)) -> Evocative(x))",
      "all x.((Adore(Max,x) & KellyWearstler(x) & DesignStyle(x)) -> Dreamy(x))",
      "exists x.(((Adore(Max,x) & Design(x) & ByMax(x) & InterestingGeometry(x)) -> BrutalistBuilding(x)) & Evocative(x))"
    ],
    "goal": "exists x.(Design(x) & ByMax(x) & BrutalistBuilding(x))"
  },
  {
    "id": 928,
    "flag": "success",
    "assumptions": [
      "all x.((Adore(Max,x) & ZahaHadid(x) & DesignStyle(x)) -> InterestingGeometry(x))",
      "all x.((Adore(Max,x) & BrutalistBuilding(x)) -> -InterestingGeometry(x))",
      "[[ERROR]]",
      "all x.((Adore(Max,x) & KellyWearstler(x) & DesignStyle(x)) -> Evocative(x))",
      "all x.((Adore(Max,x) & KellyWearstler(x) & DesignStyle(x)) -> Dreamy(x))",
      "exists x.(((Adore(Max,x) & Design(x) & ByMax(x) & InterestingGeometry(x)) -> BrutalistBuilding(x)) & Evocative(x))"
    ],
    "goal": "exists x.(Design(x) & ByMax(x) & Evocative(x) & Dreamy(x))"
  },
  {
    "id": 929,
    "flag": "success",
    "assumptions": [
      "all x.((Adore(Max,x) & ZahaHadid(x) & DesignStyle(x)) -> InterestingGeometry(x))",
      "all x.((Adore(Max,x) & BrutalistBuilding(x)) -> -InterestingGeometry(x))",
      "[[ERROR]]",
      "all x.((Adore(Max,x) & KellyWearstler(x) & DesignStyle(x)) -> Evocative(x))",
      "all x.((Adore(Max,x) & KellyWearstler(x) & DesignStyle(x)) -> Dreamy(x))",
      "exists x.(((Adore(Max,x) & Design(x) & ByMax(x) & InterestingGeometry(x)) -> BrutalistBuilding(x)) & Evocative(x))"
    ],
    "goal": "exists x.(Design(x) & ByMax(x) & ((Evocative(x) & -Dreamy(x)) | (-Evocative(x) & Dreamy(x))))"
  },
  {
    "id": 1029,
    "flag": "success",
    "assumptions": [
      "all x.(RankedHighlyBy(x,WomensTennisAssociation) -> MostActivePlayerIn(x,MajorTennis))",
      "all x.((LostTo(x,Świątek) & At(x,RolandGarros2022)) -> RankedHighlyBy(x,WomensTennisAssociation))",
      "all x.(((FemaleTennisPlayer(x) & At(x,RolandGarros2022)) -> LostTo(x,Świątek)) & At(x,RolandGarros2022))",
      "all x.((((TennisPlayer(x) & At(x,RolandGarros2022)) -> (Female(x) & TennisPlayer(x))) & -(Male(x) & TennisPlayer(x))) | (-((TennisPlayer(x) & At(x,RolandGarros2022)) -> (Female(x) & TennisPlayer(x))) & Male(x) & TennisPlayer(x)))",
      "all x.(((Male(x) & TennisPlayer(x) & At(x,RolandGarros2022)) -> LostTo(x,Świątek)) & At(x,RolandGarros2022))",
      "((RankedHighlyBy(CocoGauff,WomensTennisAssociation) | (LostTo(CocoGauff,Świątek) & LostAt(CocoGauff,RolandGarros2022))) -> -(Male(CocoGauff) & TennisPlayer(CocoGauff) & AtRolandGarros2022(CocoGauff)))",
      "(TennisPlayer(CocoGauff) & At(CocoGauff,RolandGarros2022))"
    ],
    "goal": "MostActivePlayerIn(CocoGauff,MajorTennis)"
  },
  {
    "id": 1030,
    "flag": "success",
    "assumptions": [
      "all x.(RankedHighlyBy(x,WomensTennisAssociation) -> MostActivePlayerIn(x,MajorTennis))",
      "all x.((LostTo(x,Świątek) & At(x,RolandGarros2022)) -> RankedHighlyBy(x,WomensTennisAssociation))",
      "all x.(((FemaleTennisPlayer(x) & At(x,RolandGarros2022)) -> LostTo(x,Świątek)) & At(x,RolandGarros2022))",
      "all x.((((TennisPlayer(x) & At(x,RolandGarros2022)) -> (Female(x) & TennisPlayer(x))) & -(Male(x) & TennisPlayer(x))) | (-((TennisPlayer(x) & At(x,RolandGarros2022)) -> (Female(x) & TennisPlayer(x))) & Male(x) & TennisPlayer(x)))",
      "all x.(((Male(x) & TennisPlayer(x) & At(x,RolandGarros2022)) -> LostTo(x,Świątek)) & At(x,RolandGarros2022))",
      "((RankedHighlyBy(CocoGauff,WomensTennisAssociation) | (LostTo(CocoGauff,Świątek) & LostAt(CocoGauff,RolandGarros2022))) -> -(Male(CocoGauff) & TennisPlayer(CocoGauff) & AtRolandGarros2022(CocoGauff)))",
      "(TennisPlayer(CocoGauff) & At(CocoGauff,RolandGarros2022))"
    ],
    "goal": "(LostTo(CocoGauff,Świątek) & At(CocoGauff,RolandGarros2022))"
  },
  {
    "id": 1031,
    "flag": "success",
    "assumptions": [
      "all x.(RankedHighlyBy(x,WomensTennisAssociation) -> MostActivePlayerIn(x,MajorTennis))",
      "all x.((LostTo(x,Świątek) & At(x,RolandGarros2022)) -> RankedHighlyBy(x,WomensTennisAssociation))",
      "all x.(((FemaleTennisPlayer(x) & At(x,RolandGarros2022)) -> LostTo(x,Świątek)) & At(x,RolandGarros2022))",
      "all x.((((TennisPlayer(x) & At(x,RolandGarros2022)) -> (Female(x) & TennisPlayer(x))) & -(Male(x) & TennisPlayer(x))) | (-((TennisPlayer(x) & At(x,RolandGarros2022)) -> (Female(x) & TennisPlayer(x))) & Male(x) & TennisPlayer(x)))",
      "all x.(((Male(x) & TennisPlayer(x) & At(x,RolandGarros2022)) -> LostTo(x,Świątek)) & At(x,RolandGarros2022))",
      "((RankedHighlyBy(CocoGauff,WomensTennisAssociation) | (LostTo(CocoGauff,Świątek) & LostAt(CocoGauff,RolandGarros2022))) -> -(Male(CocoGauff) & TennisPlayer(CocoGauff) & AtRolandGarros2022(CocoGauff)))",
      "(TennisPlayer(CocoGauff) & At(CocoGauff,RolandGarros2022))"
    ],
    "goal": "(-(LostTo(CocoGauff,Świątek) & At(CocoGauff,RolandGarros2022)) | -MostActivePlayerIn(CocoGauff,MajorTennis))"
  },
  {
    "id": 700,
    "flag": "success",
    "assumptions": [
      "all x.(Cat(x) -> Mammal(x))",
      "exists x.(Pet(x) & -Mammal(x))"
    ],
    "goal": "all x.(Pet(x) -> -Cat(x))"
  },
  {
    "id": 456,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Want(x,Longvacation) -> Favorite(x,Summer))",
      "Favorite(Emma,Summer)",
      "[[ERROR]]",
      "Want(James,LongVacation)"
    ],
    "goal": "Favorite(James,Summer)"
  },
  {
    "id": 457,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Want(x,Longvacation) -> Favorite(x,Summer))",
      "Favorite(Emma,Summer)",
      "[[ERROR]]",
      "Want(James,LongVacation)"
    ],
    "goal": "Favorite(Mia,Spring)"
  },
  {
    "id": 904,
    "flag": "success",
    "assumptions": [
      "all x.(DigitalMedia(x) -> -AnalogMedia(x))",
      "all x.(PrintedText(x) -> AnalogMedia(x))",
      "all x.(StreamingService(x) -> DigitalMedia(x))",
      "all x.(HardcoverBook(x) -> PrintedText(x))",
      "(StreamingService(1984) -> HardcoverBook(1984))"
    ],
    "goal": "PrintedText(Y1984)"
  },
  {
    "id": 905,
    "flag": "success",
    "assumptions": [
      "all x.(DigitalMedia(x) -> -AnalogMedia(x))",
      "all x.(PrintedText(x) -> AnalogMedia(x))",
      "all x.(StreamingService(x) -> DigitalMedia(x))",
      "all x.(HardcoverBook(x) -> PrintedText(x))",
      "(StreamingService(1984) -> HardcoverBook(1984))"
    ],
    "goal": "StreamingService(Y1984)"
  },
  {
    "id": 906,
    "flag": "success",
    "assumptions": [
      "all x.(DigitalMedia(x) -> -AnalogMedia(x))",
      "all x.(PrintedText(x) -> AnalogMedia(x))",
      "all x.(StreamingService(x) -> DigitalMedia(x))",
      "all x.(HardcoverBook(x) -> PrintedText(x))",
      "(StreamingService(1984) -> HardcoverBook(1984))"
    ],
    "goal": "-StreamingService(Y1984)"
  },
  {
    "id": 608,
    "flag": "success",
    "assumptions": [
      "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))",
      "all x.(RomanceLanguage(x) -> MemberOf(x,LanguageFamily))",
      "all x y z.((MemberOf(x,z) & MemberOf(y,z)) -> (Related(x,y) & Related(y,x)))",
      "(RomanceLanguage(French) & RomanceLanguage(Spanish))",
      "Related(German,Spanish)",
      "all x.(Language(x) -> -Related(Basque,x))"
    ],
    "goal": "RomanceLanguage(Basque)"
  },
  {
    "id": 609,
    "flag": "success",
    "assumptions": [
      "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))",
      "all x.(RomanceLanguage(x) -> MemberOf(x,LanguageFamily))",
      "all x y z.((MemberOf(x,z) & MemberOf(y,z)) -> (Related(x,y) & Related(y,x)))",
      "(RomanceLanguage(French) & RomanceLanguage(Spanish))",
      "Related(German,Spanish)",
      "all x.(Language(x) -> -Related(Basque,x))"
    ],
    "goal": "RomanceLanguage(German)"
  },
  {
    "id": 610,
    "flag": "success",
    "assumptions": [
      "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))",
      "all x.(RomanceLanguage(x) -> MemberOf(x,LanguageFamily))",
      "all x y z.((MemberOf(x,z) & MemberOf(y,z)) -> (Related(x,y) & Related(y,x)))",
      "(RomanceLanguage(French) & RomanceLanguage(Spanish))",
      "Related(German,Spanish)",
      "all x.(Language(x) -> -Related(Basque,x))"
    ],
    "goal": "IndoEuropeanLanguage(French)"
  },
  {
    "id": 240,
    "flag": "success",
    "assumptions": [
      "Striker(RobertLewandowski)",
      "all x.(Striker(x) -> SoccerPlayer(x))",
      "Left(RobertLewandowski,BayernMunchen)",
      "all x y.(Left(x,y) -> -PlaysFor(x,y))"
    ],
    "goal": "SoccerPlayer(RobertLewandowski)"
  },
  {
    "id": 241,
    "flag": "success",
    "assumptions": [
      "Striker(RobertLewandowski)",
      "all x.(Striker(x) -> SoccerPlayer(x))",
      "Left(RobertLewandowski,BayernMunchen)",
      "all x y.(Left(x,y) -> -PlaysFor(x,y))"
    ],
    "goal": "PlaysFor(RobertLewandowski,BayernMunchen)"
  },
  {
    "id": 242,
    "flag": "success",
    "assumptions": [
      "Striker(RobertLewandowski)",
      "all x.(Striker(x) -> SoccerPlayer(x))",
      "Left(RobertLewandowski,BayernMunchen)",
      "all x y.(Left(x,y) -> -PlaysFor(x,y))"
    ],
    "goal": "SoccerStar(RobertLewandowski)"
  },
  {
    "id": 4,
    "flag": "success",
    "assumptions": [
      "(City(Billings) & In(Billings,Montana))",
      "(City(Butte) & In(Butte,Montana) & City(Helena) & In(Helena,Montana) & City(Missoula) & In(Missoula,Montana))",
      "exists x.(City(Whitesulphursprings) & In(Whitesulphursprings,x) & City(Butte) & In(Butte,x))",
      "(City(Pierre) & -In(Pierre,Montana))",
      "all x.((City(x) & City(Butte) & In(x,Butte)) -> -In(x,Pierre))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(In(Butte,x) & In(StPierre,x))"
  },
  {
    "id": 5,
    "flag": "success",
    "assumptions": [
      "(City(Billings) & In(Billings,Montana))",
      "(City(Butte) & In(Butte,Montana) & City(Helena) & In(Helena,Montana) & City(Missoula) & In(Missoula,Montana))",
      "exists x.(City(Whitesulphursprings) & In(Whitesulphursprings,x) & City(Butte) & In(Butte,x))",
      "(City(Pierre) & -In(Pierre,Montana))",
      "all x.((City(x) & City(Butte) & In(x,Butte)) -> -In(x,Pierre))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(City(Pierre) & In(Pierre,x) & City(Bismarck) & In(Bismarck,x))"
  },
  {
    "id": 6,
    "flag": "success",
    "assumptions": [
      "(City(Billings) & In(Billings,Montana))",
      "(City(Butte) & In(Butte,Montana) & City(Helena) & In(Helena,Montana) & City(Missoula) & In(Missoula,Montana))",
      "exists x.(City(Whitesulphursprings) & In(Whitesulphursprings,x) & City(Butte) & In(Butte,x))",
      "(City(Pierre) & -In(Pierre,Montana))",
      "all x.((City(x) & City(Butte) & In(x,Butte)) -> -In(x,Pierre))",
      "[[ERROR]]"
    ],
    "goal": "(City(Missoula) & In(Missoula,Montana))"
  },
  {
    "id": 548,
    "flag": "success",
    "assumptions": [
      "all x.((((InternationalStudent(x) & In(x,UnitedStates)) -> F1Visa(x)) & -J1Visa(x)) | (-((InternationalStudent(x) & In(x,UnitedStates)) -> F1Visa(x)) & J1Visa(x)))",
      "all x.(((In(x) & In(x,UnitedStates) & F1Visa(x) & WantToWorkIn(x,UnitedStates)) -> Apply(x,Cpt)) | Apply(x,Opt))",
      "InternationalStudent(Mike)",
      "(WantToWorkIn(x,UnitedStates) -> Apply(Mike,Cpt))"
    ],
    "goal": "F1Visa(Mike)"
  },
  {
    "id": 549,
    "flag": "success",
    "assumptions": [
      "all x.((((InternationalStudent(x) & In(x,UnitedStates)) -> F1Visa(x)) & -J1Visa(x)) | (-((InternationalStudent(x) & In(x,UnitedStates)) -> F1Visa(x)) & J1Visa(x)))",
      "all x.(((In(x) & In(x,UnitedStates) & F1Visa(x) & WantToWorkIn(x,UnitedStates)) -> Apply(x,Cpt)) | Apply(x,Opt))",
      "InternationalStudent(Mike)",
      "(WantToWorkIn(x,UnitedStates) -> Apply(Mike,Cpt))"
    ],
    "goal": "J1Visa(Mike)"
  },
  {
    "id": 1271,
    "flag": "success",
    "assumptions": [
      "all x.(BrownSwissCattle(x) -> Cow(x))",
      "exists x.(Pet(x) & BrownSwissCattle(x))",
      "all x.(Cow(x) -> DomesticatedAnimal(x))",
      "all x.(Aligator(x) -> -DomesticatedAnimal(x))",
      "Aligator(Ted)"
    ],
    "goal": "Pet(Ted)"
  },
  {
    "id": 1272,
    "flag": "success",
    "assumptions": [
      "all x.(BrownSwissCattle(x) -> Cow(x))",
      "exists x.(Pet(x) & BrownSwissCattle(x))",
      "all x.(Cow(x) -> DomesticatedAnimal(x))",
      "all x.(Aligator(x) -> -DomesticatedAnimal(x))",
      "Aligator(Ted)"
    ],
    "goal": "(Pet(Ted) & BrownSwissCattle(Ted))"
  },
  {
    "id": 1273,
    "flag": "success",
    "assumptions": [
      "all x.(BrownSwissCattle(x) -> Cow(x))",
      "exists x.(Pet(x) & BrownSwissCattle(x))",
      "all x.(Cow(x) -> DomesticatedAnimal(x))",
      "all x.(Aligator(x) -> -DomesticatedAnimal(x))",
      "Aligator(Ted)"
    ],
    "goal": "(BrownSwissCattle(Ted) -> -Pet(Ted))"
  },
  {
    "id": 663,
    "flag": "success",
    "assumptions": [
      "PrivateIvyLeagueResearchUniversity(YaleUniversity)",
      "(MovedTo(YaleUniversity,NewHaven) & MovedIn(YaleUniversity,Year1716))",
      "ValuedAt(YaleUniversitysEndowment,42point3billion)",
      "[[ERROR]]"
    ],
    "goal": "exists x.(PrivateIvyLeagueResearchUniversity(x) & MovedTo(x,NewHaven))"
  },
  {
    "id": 664,
    "flag": "success",
    "assumptions": [
      "PrivateIvyLeagueResearchUniversity(YaleUniversity)",
      "(MovedTo(YaleUniversity,NewHaven) & MovedIn(YaleUniversity,Year1716))",
      "ValuedAt(YaleUniversitysEndowment,42point3billion)",
      "[[ERROR]]"
    ],
    "goal": "LargestUniversityEndowmentOf(Yale,AnyEducationalInstitution)"
  },
  {
    "id": 665,
    "flag": "success",
    "assumptions": [
      "PrivateIvyLeagueResearchUniversity(YaleUniversity)",
      "(MovedTo(YaleUniversity,NewHaven) & MovedIn(YaleUniversity,Year1716))",
      "ValuedAt(YaleUniversitysEndowment,42point3billion)",
      "[[ERROR]]"
    ],
    "goal": "(ResidentialCollege(PiersonCollege) & At(PiersonCollege,Yale))"
  },
  {
    "id": 360,
    "flag": "success",
    "assumptions": [
      "exists x.(BritishSitcom(Badults) & Series(Badults) & MemberOf(x,Pappys) & Starring(Badults,x))",
      "(PilotedIn(Badults,July2013) & PilotedOn(Badults,BBCThree))",
      "(WorkingTitle(TheSecretDudeSociety,Badults) & UsedFor(TheSecretDudeSociety,Badults))",
      "ScriptEditorFor(AndrewCollins,Badults)"
    ],
    "goal": "exists x.(ScriptEditorFor(AndrewCollins,x) & Series(x) & WorkingTitle(TheSecretDudeSociety,x))"
  },
  {
    "id": 361,
    "flag": "success",
    "assumptions": [
      "exists x.(BritishSitcom(Badults) & Series(Badults) & MemberOf(x,Pappys) & Starring(Badults,x))",
      "(PilotedIn(Badults,July2013) & PilotedOn(Badults,BBCThree))",
      "(WorkingTitle(TheSecretDudeSociety,Badults) & UsedFor(TheSecretDudeSociety,Badults))",
      "ScriptEditorFor(AndrewCollins,Badults)"
    ],
    "goal": "all x y.((MemberOf(x,Pappys) & Starring(y,x)) -> -(PilotedOn(y,BBCTwo) | PilotedOn(y,BBCThree)))"
  },
  {
    "id": 819,
    "flag": "success",
    "assumptions": [
      "all x.(GrowthStock(x) -> BoughtToEarnProfitFrom(x,RapidPriceAppreciation))",
      "all x.(BoughtToEarnProfitFrom(x,EarnProfit,RapidPriceAppreciation) -> -SuitableFor(x,RetirementFund))",
      "exists x.(Stock(x) & GrowthStock(x))",
      "all x.(MatureStock(x) -> SuitableFor(x,RetirementFund))",
      "MatureStock(KO)"
    ],
    "goal": "Stock(KO)"
  },
  {
    "id": 820,
    "flag": "success",
    "assumptions": [
      "all x.(GrowthStock(x) -> BoughtToEarnProfitFrom(x,RapidPriceAppreciation))",
      "all x.(BoughtToEarnProfitFrom(x,EarnProfit,RapidPriceAppreciation) -> -SuitableFor(x,RetirementFund))",
      "exists x.(Stock(x) & GrowthStock(x))",
      "all x.(MatureStock(x) -> SuitableFor(x,RetirementFund))",
      "MatureStock(KO)"
    ],
    "goal": "-GrowthStock(KO)"
  },
  {
    "id": 821,
    "flag": "success",
    "assumptions": [
      "all x.(GrowthStock(x) -> BoughtToEarnProfitFrom(x,RapidPriceAppreciation))",
      "all x.(BoughtToEarnProfitFrom(x,EarnProfit,RapidPriceAppreciation) -> -SuitableFor(x,RetirementFund))",
      "exists x.(Stock(x) & GrowthStock(x))",
      "all x.(MatureStock(x) -> SuitableFor(x,RetirementFund))",
      "MatureStock(KO)"
    ],
    "goal": "(((GrowthStock(KO) | BoughtToEarnProfitFrom(KO,EarnProfit,RapidPriceAppreciation)) -> -Stock(KO)) & -BoughtToEarnProfitFrom(KO,RapidPriceAppreciation))"
  },
  {
    "id": 253,
    "flag": "success",
    "assumptions": [
      "all x.(VehicleRegistrationPlateIn(x,Istanbul) -> BeginWith(x,Num34))",
      "all x.(-BeginWith(x,Num34) -> -FromIstanbul(x))",
      "exists x.(Owns(Joe,x) & VehicleRegistrationPlateIn(x,Istanbul))",
      "exists x.(Owns(Tom,x) & BeginWith(x,Num35))",
      "all x.(BeginWith(x,Num35) -> -BeginWith(x,Num34))"
    ],
    "goal": "exists x.(Owns(Joe,x) & BeginWith(x,Num34))"
  },
  {
    "id": 254,
    "flag": "success",
    "assumptions": [
      "all x.(VehicleRegistrationPlateIn(x,Istanbul) -> BeginWith(x,Num34))",
      "all x.(-BeginWith(x,Num34) -> -FromIstanbul(x))",
      "exists x.(Owns(Joe,x) & VehicleRegistrationPlateIn(x,Istanbul))",
      "exists x.(Owns(Tom,x) & BeginWith(x,Num35))",
      "all x.(BeginWith(x,Num35) -> -BeginWith(x,Num34))"
    ],
    "goal": "exists x.(Owns(Tom,x) & VehicleRegistrationPlateIn(x,Istanbul))"
  },
  {
    "id": 979,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,MarysSchool) & WorkIn(x,StudentJob,Campus)) -> NeedToEarnMoneyToHelpPayFor(x,CollegeTuition))",
      "all x.((At(x,MarysSchool) & OrderFrequently(x,Takeout)) -> WorkIn(x,StudentJob,Campus))",
      "all x.(At(x,MarysSchool) & (OrderFrequently(x,Takeout) | Enjoy(x,DiningHallMeal)))",
      "all x.((At(x,MarysSchool) & Enjoy(x,DiningHallMeal)) -> -PickyEater(x))",
      "all x.(((At(x,MarysSchool) & Enjoy(x,DiningHall)) -> Spend(x,ALotOfTime,Eating)) & Spend(x,ALotOfTime,CatchingUpWithFriends,DiningHall))",
      "At(Hannah,MarysSchool)",
      "[[ERROR]]"
    ],
    "goal": "NeedToEarnMoneyToHelpPayFor(Hannah,CollegeTuition)"
  },
  {
    "id": 980,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,MarysSchool) & WorkIn(x,StudentJob,Campus)) -> NeedToEarnMoneyToHelpPayFor(x,CollegeTuition))",
      "all x.((At(x,MarysSchool) & OrderFrequently(x,Takeout)) -> WorkIn(x,StudentJob,Campus))",
      "all x.(At(x,MarysSchool) & (OrderFrequently(x,Takeout) | Enjoy(x,DiningHallMeal)))",
      "all x.((At(x,MarysSchool) & Enjoy(x,DiningHallMeal)) -> -PickyEater(x))",
      "all x.(((At(x,MarysSchool) & Enjoy(x,DiningHall)) -> Spend(x,ALotOfTime,Eating)) & Spend(x,ALotOfTime,CatchingUpWithFriends,DiningHall))",
      "At(Hannah,MarysSchool)",
      "[[ERROR]]"
    ],
    "goal": "-(PickyEater(Hannah) & Spend(Hannah,ALotOfTime,Eating) & Spend(Hannah,ALotOfTime,CatchingUpWithFriends,DiningHall))"
  },
  {
    "id": 981,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,MarysSchool) & WorkIn(x,StudentJob,Campus)) -> NeedToEarnMoneyToHelpPayFor(x,CollegeTuition))",
      "all x.((At(x,MarysSchool) & OrderFrequently(x,Takeout)) -> WorkIn(x,StudentJob,Campus))",
      "all x.(At(x,MarysSchool) & (OrderFrequently(x,Takeout) | Enjoy(x,DiningHallMeal)))",
      "all x.((At(x,MarysSchool) & Enjoy(x,DiningHallMeal)) -> -PickyEater(x))",
      "all x.(((At(x,MarysSchool) & Enjoy(x,DiningHall)) -> Spend(x,ALotOfTime,Eating)) & Spend(x,ALotOfTime,CatchingUpWithFriends,DiningHall))",
      "At(Hannah,MarysSchool)",
      "[[ERROR]]"
    ],
    "goal": "((PickyEater(Hannah) & -(Spend(Hannah,ALotOfTime,Eating) & Spend(Hannah,ALotOfTime,CatchingUpWithFriends,DiningHall))) | (-PickyEater(Hannah) & Spend(Hannah,ALotOfTime,Eating) & Spend(Hannah,ALotOfTime,CatchingUpWithFriends,DiningHall)))"
  },
  {
    "id": 805,
    "flag": "success",
    "assumptions": [
      "all x.(BakedSweet(x) -> -Spicy(x))",
      "all x.(Cupcake(x) -> BakedSweet(x))",
      "all x.(MalaHotpot(x) -> Spicy(x))",
      "all x.((Product(x) & From(x,BakedByMelissa)) -> Cupcake(x))",
      "(Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili) | -BakedSweet(DriedThaiChili))"
    ],
    "goal": "(Product(DriedThaiChili) & From(DriedThaiChili,BakedByMelissa))"
  },
  {
    "id": 806,
    "flag": "success",
    "assumptions": [
      "all x.(BakedSweet(x) -> -Spicy(x))",
      "all x.(Cupcake(x) -> BakedSweet(x))",
      "all x.(MalaHotpot(x) -> Spicy(x))",
      "all x.((Product(x) & From(x,BakedByMelissa)) -> Cupcake(x))",
      "(Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili) | -BakedSweet(DriedThaiChili))"
    ],
    "goal": "-(Product(DriedThaiChili) & From(DriedThaiChili,BakedByMelissa))"
  },
  {
    "id": 807,
    "flag": "success",
    "assumptions": [
      "all x.(BakedSweet(x) -> -Spicy(x))",
      "all x.(Cupcake(x) -> BakedSweet(x))",
      "all x.(MalaHotpot(x) -> Spicy(x))",
      "all x.((Product(x) & From(x,BakedByMelissa)) -> Cupcake(x))",
      "(Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili) | -BakedSweet(DriedThaiChili))"
    ],
    "goal": "MalaHotpot(DriedThaiChili)"
  },
  {
    "id": 808,
    "flag": "success",
    "assumptions": [
      "all x.(BakedSweet(x) -> -Spicy(x))",
      "all x.(Cupcake(x) -> BakedSweet(x))",
      "all x.(MalaHotpot(x) -> Spicy(x))",
      "all x.((Product(x) & From(x,BakedByMelissa)) -> Cupcake(x))",
      "(Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili) | -BakedSweet(DriedThaiChili))"
    ],
    "goal": "(-(Product(DriedThaiChili) & From(DriedThaiChili,BakedByMelissa)) & -BakedSweet(DriedThaiChili))"
  },
  {
    "id": 809,
    "flag": "success",
    "assumptions": [
      "all x.(BakedSweet(x) -> -Spicy(x))",
      "all x.(Cupcake(x) -> BakedSweet(x))",
      "all x.(MalaHotpot(x) -> Spicy(x))",
      "all x.((Product(x) & From(x,BakedByMelissa)) -> Cupcake(x))",
      "(Spicy(DriedThaiChili) | MalaHotpot(DriedThaiChili) | -BakedSweet(DriedThaiChili))"
    ],
    "goal": "(Cupcake(DriedThaiChili) & Product(DriedThaiChili) & From(DriedThaiChili,BakedByMelissa))"
  },
  {
    "id": 754,
    "flag": "success",
    "assumptions": [
      "all x.exists y.((ListedIn(x,YelpRecommendation) -> NegativeReview(y)) & -Receive(x,y))",
      "all x y.((HaveRating(x,y) & GreaterThan(y,4)) -> ListedIn(x,YelpRecommendation))",
      "exists x y.((-Provide(x,TakeOutService) -> NegativeReview(y)) & Receive(x,y))",
      "all x y.((PopularAmong(x,LocalResidents) -> HaveRating(x,y)) & GreaterThan(y,4))",
      "all x.((HaveRating(HamdenPlazaSubway,x) & GreaterThan(x,4) & -PopularAmong(HamdenPlazaSubway,LocalResidents)) | (-(HaveRating(HamdenPlazaSubway,x) & GreaterThan(x,4)) & PopularAmong(HamdenPlazaSubway,LocalResidents)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 755,
    "flag": "success",
    "assumptions": [
      "all x.exists y.((ListedIn(x,YelpRecommendation) -> NegativeReview(y)) & -Receive(x,y))",
      "all x y.((HaveRating(x,y) & GreaterThan(y,4)) -> ListedIn(x,YelpRecommendation))",
      "exists x y.((-Provide(x,TakeOutService) -> NegativeReview(y)) & Receive(x,y))",
      "all x y.((PopularAmong(x,LocalResidents) -> HaveRating(x,y)) & GreaterThan(y,4))",
      "all x.((HaveRating(HamdenPlazaSubway,x) & GreaterThan(x,4) & -PopularAmong(HamdenPlazaSubway,LocalResidents)) | (-(HaveRating(HamdenPlazaSubway,x) & GreaterThan(x,4)) & PopularAmong(HamdenPlazaSubway,LocalResidents)))"
    ],
    "goal": "exists x.(Provide(HamdenPlazaSubway,TakeOutService) | (NegativeReview(x) & -Receive(HamdenPlazaSubway,x)))"
  },
  {
    "id": 756,
    "flag": "success",
    "assumptions": [
      "all x.exists y.((ListedIn(x,YelpRecommendation) -> NegativeReview(y)) & -Receive(x,y))",
      "all x y.((HaveRating(x,y) & GreaterThan(y,4)) -> ListedIn(x,YelpRecommendation))",
      "exists x y.((-Provide(x,TakeOutService) -> NegativeReview(y)) & Receive(x,y))",
      "all x y.((PopularAmong(x,LocalResidents) -> HaveRating(x,y)) & GreaterThan(y,4))",
      "all x.((HaveRating(HamdenPlazaSubway,x) & GreaterThan(x,4) & -PopularAmong(HamdenPlazaSubway,LocalResidents)) | (-(HaveRating(HamdenPlazaSubway,x) & GreaterThan(x,4)) & PopularAmong(HamdenPlazaSubway,LocalResidents)))"
    ],
    "goal": "-Provide(HamdenPlazaSubway,TakeOutService)"
  },
  {
    "id": 688,
    "flag": "success",
    "assumptions": [
      "all x y.((SuperheroMovie(x) & In(y,x) & GoodGuy(y)) -> Wins(y))",
      "SuperheroMovie(TheSurprisingAdventuresofSirDigbyChickenCaesar)",
      "[[ERROR]]",
      "Fight(SirDigby,SirDigbysNemesis)",
      "all x y.((SuperheroMovie(x) & NamedAfter(x,y)) -> GoodGuy(y))",
      "NamedAfter(TheSurprisingAdventuresofSirDigbyChickenCaesar,SirDigby)",
      "all x y.((Fights(x,y) & Win(x)) -> -Win(y))",
      "all x y.((SuperheroMovie(x) & NamedAfter(x,y)) -> In(y,x))"
    ],
    "goal": "-Win(SirDigbysNemesis)"
  },
  {
    "id": 171,
    "flag": "success",
    "assumptions": [
      "all x.(Book(x) -> Contains(x,Knowledge))",
      "all x y.(ReadBook(x,y) -> Gains(x,Knowledge))",
      "all x.(Gains(x,Knowledge) -> Smarter(x))",
      "(ReadBook(Harry,Walden) & Book(Walden))"
    ],
    "goal": "Gains(Harry,Knowledge)"
  },
  {
    "id": 172,
    "flag": "success",
    "assumptions": [
      "all x.(Book(x) -> Contains(x,Knowledge))",
      "all x y.(ReadBook(x,y) -> Gains(x,Knowledge))",
      "all x.(Gains(x,Knowledge) -> Smarter(x))",
      "(ReadBook(Harry,Walden) & Book(Walden))"
    ],
    "goal": "Smarter(Harry)"
  },
  {
    "id": 173,
    "flag": "success",
    "assumptions": [
      "all x.(Book(x) -> Contains(x,Knowledge))",
      "all x y.(ReadBook(x,y) -> Gains(x,Knowledge))",
      "all x.(Gains(x,Knowledge) -> Smarter(x))",
      "(ReadBook(Harry,Walden) & Book(Walden))"
    ],
    "goal": "all x.(Smarter(x) -> GainKnowledge(x))"
  },
  {
    "id": 546,
    "flag": "success",
    "assumptions": [
      "all x.(((NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & -LanguageUnderstandingTask(x)) | (-(NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & LanguageUnderstandingTask(x)))",
      "all x.((NaturalLanguageProcessingTasks(x) & OutputSequence(x,Text)) -> LanguageGenerationTask(x))",
      "NaturalLanguageProcessingTask(MachineTranslation)",
      "OutputSequence(MachineTranslation,Text)"
    ],
    "goal": "LanguageGenerationTask(MachineTranslation)"
  },
  {
    "id": 547,
    "flag": "success",
    "assumptions": [
      "all x.(((NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & -LanguageUnderstandingTask(x)) | (-(NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & LanguageUnderstandingTask(x)))",
      "all x.((NaturalLanguageProcessingTasks(x) & OutputSequence(x,Text)) -> LanguageGenerationTask(x))",
      "NaturalLanguageProcessingTask(MachineTranslation)",
      "OutputSequence(MachineTranslation,Text)"
    ],
    "goal": "LanguageUnderstandingTask(MachineTranslation)"
  },
  {
    "id": 476,
    "flag": "success",
    "assumptions": [
      "exists x.(ManagedBuilding(x) & AllowPet(x))",
      "all x y.((ManagedBuilding(x) & RentApartmentIn(y,x)) -> DepositRequired(y))",
      "[[ERROR]]",
      "(Cat(Fluffy) & BelongTo(Fluffy,Tom))",
      "all x.(Cat(x) -> Pet(x))",
      "ManagedBuilding(OliveGarden)",
      "MonthlyRentAt(USD2000,OliveGarden)",
      "MoreThan(USD2000,USD1500)",
      "all x y.((ManagedBuilding(x) & AllowedToMoveInWith(Tom,x,Fluffy) & SecurityDeposit(y) & -MoreThan(y,USD1500)) -> RentApartmentIn(Tom,x))",
      "all x y z.((ManagedBuilding(x) & AllowPet(x) & Pet(z)) -> AllowedToMoveInWith(y,x,z))"
    ],
    "goal": "RentApartmentIn(Tom,OliveGarden)"
  },
  {
    "id": 477,
    "flag": "success",
    "assumptions": [
      "exists x.(ManagedBuilding(x) & AllowPet(x))",
      "all x y.((ManagedBuilding(x) & RentApartmentIn(y,x)) -> DepositRequired(y))",
      "[[ERROR]]",
      "(Cat(Fluffy) & BelongTo(Fluffy,Tom))",
      "all x.(Cat(x) -> Pet(x))",
      "ManagedBuilding(OliveGarden)",
      "MonthlyRentAt(USD2000,OliveGarden)",
      "MoreThan(USD2000,USD1500)",
      "all x y.((ManagedBuilding(x) & AllowedToMoveInWith(Tom,x,Fluffy) & SecurityDeposit(y) & -MoreThan(y,USD1500)) -> RentApartmentIn(Tom,x))",
      "all x y z.((ManagedBuilding(x) & AllowPet(x) & Pet(z)) -> AllowedToMoveInWith(y,x,z))"
    ],
    "goal": "AllowedToMoveInWith(Tom,OliveGarden,Fluffy)"
  },
  {
    "id": 478,
    "flag": "success",
    "assumptions": [
      "exists x.(ManagedBuilding(x) & AllowPet(x))",
      "all x y.((ManagedBuilding(x) & RentApartmentIn(y,x)) -> DepositRequired(y))",
      "[[ERROR]]",
      "(Cat(Fluffy) & BelongTo(Fluffy,Tom))",
      "all x.(Cat(x) -> Pet(x))",
      "ManagedBuilding(OliveGarden)",
      "MonthlyRentAt(USD2000,OliveGarden)",
      "MoreThan(USD2000,USD1500)",
      "all x y.((ManagedBuilding(x) & AllowedToMoveInWith(Tom,x,Fluffy) & SecurityDeposit(y) & -MoreThan(y,USD1500)) -> RentApartmentIn(Tom,x))",
      "all x y z.((ManagedBuilding(x) & AllowPet(x) & Pet(z)) -> AllowedToMoveInWith(y,x,z))"
    ],
    "goal": "all x.(((SecurityDeposit(x,OliveGarden) -> MoreThan(x,USD2000)) & -Equal(x,USD2000)) | (-(SecurityDeposit(x,OliveGarden) -> MoreThan(x,USD2000)) & Equal(x,USD2000)))"
  },
  {
    "id": 933,
    "flag": "success",
    "assumptions": [
      "all x.(BusinessOrganization(x) -> LegalEntity(x))",
      "all x.(Company(x) -> BusinessOrganization(x))",
      "all x.(PrivateCompany(x) -> Company(x))",
      "all x.(LegalEntity(x) -> CreatedUnderLaw(x))",
      "all x.(LegalEntity(x) -> LegalObligation(x))",
      "(CreatedUnderLaw(HarvardWeeklyBookClub) -> -PrivateCompany(HarvardWeeklyBookClub))"
    ],
    "goal": "LegalObligation(HarvardWeeklyBookClub)"
  },
  {
    "id": 934,
    "flag": "success",
    "assumptions": [
      "all x.(BusinessOrganization(x) -> LegalEntity(x))",
      "all x.(Company(x) -> BusinessOrganization(x))",
      "all x.(PrivateCompany(x) -> Company(x))",
      "all x.(LegalEntity(x) -> CreatedUnderLaw(x))",
      "all x.(LegalEntity(x) -> LegalObligation(x))",
      "(CreatedUnderLaw(HarvardWeeklyBookClub) -> -PrivateCompany(HarvardWeeklyBookClub))"
    ],
    "goal": "(LegalObligation(HarvardWeeklyBookClub) & PrivateCompany(HarvardWeeklyBookClub))"
  },
  {
    "id": 935,
    "flag": "success",
    "assumptions": [
      "all x.(BusinessOrganization(x) -> LegalEntity(x))",
      "all x.(Company(x) -> BusinessOrganization(x))",
      "all x.(PrivateCompany(x) -> Company(x))",
      "all x.(LegalEntity(x) -> CreatedUnderLaw(x))",
      "all x.(LegalEntity(x) -> LegalObligation(x))",
      "(CreatedUnderLaw(HarvardWeeklyBookClub) -> -PrivateCompany(HarvardWeeklyBookClub))"
    ],
    "goal": "(((PrivateCompany(HarvardWeeklyBookClub) -> LegalObligation(HarvardWeeklyBookClub)) & -CreatedUnderLaw(HarvardWeeklyBookClub)) | (-(PrivateCompany(HarvardWeeklyBookClub) -> LegalObligation(HarvardWeeklyBookClub)) & CreatedUnderLaw(HarvardWeeklyBookClub)))"
  },
  {
    "id": 1366,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1367,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1368,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1011,
    "flag": "success",
    "assumptions": [
      "all x.(BornIn(x,MultipleBirth) -> SpendTimePlayingWith(x,Sibling))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(LiveAt(x,Home) -> -LiveWith(x,Strangers))",
      "all x.(SpendTimeplayingWith(x,Sibling) -> LiveAt(x,Home))",
      "-((BornIn(Luke,MultipleBirth) & -LiveWith(Luke,Strangers)) | (-BornIn(Luke,MultipleBirth) & LiveWith(Luke,Strangers)))"
    ],
    "goal": "SpendTime(Luke,PlayingWith,Siblings)"
  },
  {
    "id": 1012,
    "flag": "success",
    "assumptions": [
      "all x.(BornIn(x,MultipleBirth) -> SpendTimePlayingWith(x,Sibling))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(LiveAt(x,Home) -> -LiveWith(x,Strangers))",
      "all x.(SpendTimeplayingWith(x,Sibling) -> LiveAt(x,Home))",
      "-((BornIn(Luke,MultipleBirth) & -LiveWith(Luke,Strangers)) | (-BornIn(Luke,MultipleBirth) & LiveWith(Luke,Strangers)))"
    ],
    "goal": "ComplainAboutOften(Luke,AnnoyingSiblings)"
  },
  {
    "id": 1013,
    "flag": "success",
    "assumptions": [
      "all x.(BornIn(x,MultipleBirth) -> SpendTimePlayingWith(x,Sibling))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(LiveAt(x,Home) -> -LiveWith(x,Strangers))",
      "all x.(SpendTimeplayingWith(x,Sibling) -> LiveAt(x,Home))",
      "-((BornIn(Luke,MultipleBirth) & -LiveWith(Luke,Strangers)) | (-BornIn(Luke,MultipleBirth) & LiveWith(Luke,Strangers)))"
    ],
    "goal": "-(BornIn(Luke,MultipleBirth) | ComplainAbout(Luke,Often,AnnoyingSiblings))"
  },
  {
    "id": 560,
    "flag": "success",
    "assumptions": [
      "(Cost(GRE,205) & Cheaper(205,300))",
      "all x.((ApplicantOf(x,Gre) & Prove(x,EconomicHardship)) -> ProvideTo(Ets,FinancialAid,x))",
      "all x.((LivingIn(x,SingleParentFamily) | AvailableTo(FewResources,x)) -> Prove(x,EconomicHardship))",
      "LivingIn(Tom,SingleParentFamily)",
      "(OutOfWork(Tom) & AvailableTo(FewResources,Tom))",
      "ApplicantOf(Tom,Gre)"
    ],
    "goal": "ProvidesFinancialAidTo(ETS,Tom)"
  },
  {
    "id": 561,
    "flag": "success",
    "assumptions": [
      "(Cost(GRE,205) & Cheaper(205,300))",
      "all x.((ApplicantOf(x,Gre) & Prove(x,EconomicHardship)) -> ProvideTo(Ets,FinancialAid,x))",
      "all x.((LivingIn(x,SingleParentFamily) | AvailableTo(FewResources,x)) -> Prove(x,EconomicHardship))",
      "LivingIn(Tom,SingleParentFamily)",
      "(OutOfWork(Tom) & AvailableTo(FewResources,Tom))",
      "ApplicantOf(Tom,Gre)"
    ],
    "goal": "(Cost(GRE,x) & Cheaper(x,300))"
  },
  {
    "id": 562,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 958,
    "flag": "success",
    "assumptions": [
      "all x.(Spill(x,ALotOfFood,Clothing) -> -NotablyTidy(x))",
      "all x.((ClumsyFoodie(x) & GoOutFrequentlyToFindToTry(x,NewFoodRestaurant)) -> SpillOn(x,ALotOfFood,Clothing))",
      "all x.(Cleanly(x) -> NotablyTidy(x))",
      "all x.((Value(x,Order) & Value(x,Spotlessness)) -> Cleanly(x))",
      "[[ERROR]]",
      "-((Spill(Peter,ALotOfFood,Clothing) & -Cleanly(Peter)) | (-Spill(Peter,ALotOfFood,Clothing) & Cleanly(Peter)))"
    ],
    "goal": "NotablyTidy(Peter)"
  },
  {
    "id": 959,
    "flag": "success",
    "assumptions": [
      "all x.(Spill(x,ALotOfFood,Clothing) -> -NotablyTidy(x))",
      "all x.((ClumsyFoodie(x) & GoOutFrequentlyToFindToTry(x,NewFoodRestaurant)) -> SpillOn(x,ALotOfFood,Clothing))",
      "all x.(Cleanly(x) -> NotablyTidy(x))",
      "all x.((Value(x,Order) & Value(x,Spotlessness)) -> Cleanly(x))",
      "[[ERROR]]",
      "-((Spill(Peter,ALotOfFood,Clothing) & -Cleanly(Peter)) | (-Spill(Peter,ALotOfFood,Clothing) & Cleanly(Peter)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 960,
    "flag": "success",
    "assumptions": [
      "all x.(Spill(x,ALotOfFood,Clothing) -> -NotablyTidy(x))",
      "all x.((ClumsyFoodie(x) & GoOutFrequentlyToFindToTry(x,NewFoodRestaurant)) -> SpillOn(x,ALotOfFood,Clothing))",
      "all x.(Cleanly(x) -> NotablyTidy(x))",
      "all x.((Value(x,Order) & Value(x,Spotlessness)) -> Cleanly(x))",
      "[[ERROR]]",
      "-((Spill(Peter,ALotOfFood,Clothing) & -Cleanly(Peter)) | (-Spill(Peter,ALotOfFood,Clothing) & Cleanly(Peter)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 706,
    "flag": "success",
    "assumptions": [
      "all x.(FirTree(x) -> Evergreen(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 370,
    "flag": "success",
    "assumptions": [
      "(MountainRange(ThePicurisMountains) & ((In(ThePicurisMountains,NewMexico) & -In(ThePicurisMountains,Texas)) | (-In(ThePicurisMountains,NewMexico) & In(ThePicurisMountains,Texas))))",
      "Visited(JuanDeOnate,ThePicurisMountains)",
      "(In(HardingPegmatiteMine,ThePicurisMountains) & Mine(HardingPegmatiteMine) & Donated(HardingPegmatiteMine))",
      "all x y.((Mine(x) & Donated(x) & In(x,y) & MountainRange(y)) -> -In(y,Texas))"
    ],
    "goal": "exists x.(Visited(JuanDeOnate,x) & MountainRange(x) & In(x,NewMexico))"
  },
  {
    "id": 371,
    "flag": "success",
    "assumptions": [
      "(MountainRange(ThePicurisMountains) & ((In(ThePicurisMountains,NewMexico) & -In(ThePicurisMountains,Texas)) | (-In(ThePicurisMountains,NewMexico) & In(ThePicurisMountains,Texas))))",
      "Visited(JuanDeOnate,ThePicurisMountains)",
      "(In(HardingPegmatiteMine,ThePicurisMountains) & Mine(HardingPegmatiteMine) & Donated(HardingPegmatiteMine))",
      "all x y.((Mine(x) & Donated(x) & In(x,y) & MountainRange(y)) -> -In(y,Texas))"
    ],
    "goal": "exists x.(Visited(JuanDeOnate,x) & MountainRange(x) & In(x,Texas))"
  },
  {
    "id": 372,
    "flag": "success",
    "assumptions": [
      "(MountainRange(ThePicurisMountains) & ((In(ThePicurisMountains,NewMexico) & -In(ThePicurisMountains,Texas)) | (-In(ThePicurisMountains,NewMexico) & In(ThePicurisMountains,Texas))))",
      "Visited(JuanDeOnate,ThePicurisMountains)",
      "(In(HardingPegmatiteMine,ThePicurisMountains) & Mine(HardingPegmatiteMine) & Donated(HardingPegmatiteMine))",
      "all x y.((Mine(x) & Donated(x) & In(x,y) & MountainRange(y)) -> -In(y,Texas))"
    ],
    "goal": "all x.(In(HardingPegmatiteMine,x) -> -(MountainRange(x) & In(x,NewMexico)))"
  },
  {
    "id": 527,
    "flag": "success",
    "assumptions": [
      "all x y.((Man(x) & Man(y) & Taller(x,y)) -> CanBlock(x,y))",
      "[[ERROR]]",
      "all x y z.((Taller(x,y) & Taller(y,z)) -> Taller(x,z))",
      "(Man(Peter) & Taller(Peter,Michael))",
      "all x.(-JumpWhenShooting(x) -> CanBlock(Michael,x))",
      "-CanBlock(Michael,Windy)",
      "all x.(JumpWhenShooting(x) -> GreatShooter(x))"
    ],
    "goal": "exists x.(Man(x) & SameClass(x,Michael) & -Taller(Peter,x))"
  },
  {
    "id": 528,
    "flag": "success",
    "assumptions": [
      "all x y.((Man(x) & Man(y) & Taller(x,y)) -> CanBlock(x,y))",
      "[[ERROR]]",
      "all x y z.((Taller(x,y) & Taller(y,z)) -> Taller(x,z))",
      "(Man(Peter) & Taller(Peter,Michael))",
      "all x.(-JumpWhenShooting(x) -> CanBlock(Michael,x))",
      "-CanBlock(Michael,Windy)",
      "all x.(JumpWhenShooting(x) -> GreatShooter(x))"
    ],
    "goal": "GreatShooter(Windy)"
  },
  {
    "id": 529,
    "flag": "success",
    "assumptions": [
      "all x y.((Man(x) & Man(y) & Taller(x,y)) -> CanBlock(x,y))",
      "[[ERROR]]",
      "all x y z.((Taller(x,y) & Taller(y,z)) -> Taller(x,z))",
      "(Man(Peter) & Taller(Peter,Michael))",
      "all x.(-JumpWhenShooting(x) -> CanBlock(Michael,x))",
      "-CanBlock(Michael,Windy)",
      "all x.(JumpWhenShooting(x) -> GreatShooter(x))"
    ],
    "goal": "CanBlock(Peter,Windy)"
  },
  {
    "id": 439,
    "flag": "success",
    "assumptions": [
      "(Cove(BarutinCove) & NamedAfter(BarutinCove,BarutinSettlement) & LocatedIn(BarutinSettlement,Bulgaria))",
      "LocatedIn(BarutinCove,SnowIsland)",
      "(LocatedIn(SnowIsland,SouthShetlandIslands) & LocatedIn(GreenwichIsland,SouthShetlandIslands) & LocatedIn(DeceptionIsland,SouthShetlandIslands))",
      "LocatedIn(SouthShetlandIslands,Antarctica)",
      "all x y z.((LocatedIn(x,y) & LocatedIn(y,z)) -> LocatedIn(x,z))"
    ],
    "goal": "all x.(LocatedIn(x,Antarctica) -> NamedAfter(BarutinCove,x))"
  },
  {
    "id": 440,
    "flag": "success",
    "assumptions": [
      "(Cove(BarutinCove) & NamedAfter(BarutinCove,BarutinSettlement) & LocatedIn(BarutinSettlement,Bulgaria))",
      "LocatedIn(BarutinCove,SnowIsland)",
      "(LocatedIn(SnowIsland,SouthShetlandIslands) & LocatedIn(GreenwichIsland,SouthShetlandIslands) & LocatedIn(DeceptionIsland,SouthShetlandIslands))",
      "LocatedIn(SouthShetlandIslands,Antarctica)",
      "all x y z.((LocatedIn(x,y) & LocatedIn(y,z)) -> LocatedIn(x,z))"
    ],
    "goal": "exists x y.(Cove(x) & LocatedIn(x,Antarctica) & NameAfter(x,y) & LocatedIn(y,Bulgaria))"
  },
  {
    "id": 441,
    "flag": "success",
    "assumptions": [
      "(Cove(BarutinCove) & NamedAfter(BarutinCove,BarutinSettlement) & LocatedIn(BarutinSettlement,Bulgaria))",
      "LocatedIn(BarutinCove,SnowIsland)",
      "(LocatedIn(SnowIsland,SouthShetlandIslands) & LocatedIn(GreenwichIsland,SouthShetlandIslands) & LocatedIn(DeceptionIsland,SouthShetlandIslands))",
      "LocatedIn(SouthShetlandIslands,Antarctica)",
      "all x y z.((LocatedIn(x,y) & LocatedIn(y,z)) -> LocatedIn(x,z))"
    ],
    "goal": "-LocatedIn(BarutinCove,Antarctica)"
  },
  {
    "id": 739,
    "flag": "success",
    "assumptions": [
      "exists x.(Affection(x) & Love(x))",
      "exists x.(Love(x) & Positive(x))"
    ],
    "goal": "exists x.(Affection(x) & Positive(x))"
  },
  {
    "id": 786,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((SingleSeat(x) & ElectricCar(x)) -> OneSeater(x))",
      "all x.(((SoloEV(x) & Car(x)) -> SingleSeat(x)) & ElectricCar(x))",
      "(-TeslaModel3(JohnsCar) -> -(TeslaModel3(JohnsCar) | (SingleSeat(x) & ElectricCar(JohnsCar))))"
    ],
    "goal": "TeslaModel3(JohnsCar)"
  },
  {
    "id": 787,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((SingleSeat(x) & ElectricCar(x)) -> OneSeater(x))",
      "all x.(((SoloEV(x) & Car(x)) -> SingleSeat(x)) & ElectricCar(x))",
      "(-TeslaModel3(JohnsCar) -> -(TeslaModel3(JohnsCar) | (SingleSeat(x) & ElectricCar(JohnsCar))))"
    ],
    "goal": "(SoloEV(JohnsCar) & Car(JohnsCar))"
  },
  {
    "id": 788,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((SingleSeat(x) & ElectricCar(x)) -> OneSeater(x))",
      "all x.(((SoloEV(x) & Car(x)) -> SingleSeat(x)) & ElectricCar(x))",
      "(-TeslaModel3(JohnsCar) -> -(TeslaModel3(JohnsCar) | (SingleSeat(x) & ElectricCar(JohnsCar))))"
    ],
    "goal": "-(SoloEV(JohnsCar) & Car(JohnsCar))"
  },
  {
    "id": 1348,
    "flag": "success",
    "assumptions": [
      "all x.((PetersPet(x) & Mammal(x)) -> Animal(x))",
      "all x.(Monkey(x) -> Mammal(x))",
      "all x.(((PetersPet(x) -> Monkey(x)) & -Bird(x)) | (-(PetersPet(x) -> Monkey(x)) & Bird(x)))",
      "all x.(Bird(x) -> CanFly(x))",
      "all x.((PetersPet(x) & Animal(x)) -> Breathe(x))",
      "[[ERROR]]",
      "PeterSPet(Rock)",
      "(CanFly(Rock) | Bird(Rock) | -Breathe(Rock))"
    ],
    "goal": "Monkey(Rock)"
  },
  {
    "id": 1349,
    "flag": "success",
    "assumptions": [
      "all x.((PetersPet(x) & Mammal(x)) -> Animal(x))",
      "all x.(Monkey(x) -> Mammal(x))",
      "all x.(((PetersPet(x) -> Monkey(x)) & -Bird(x)) | (-(PetersPet(x) -> Monkey(x)) & Bird(x)))",
      "all x.(Bird(x) -> CanFly(x))",
      "all x.((PetersPet(x) & Animal(x)) -> Breathe(x))",
      "[[ERROR]]",
      "PeterSPet(Rock)",
      "(CanFly(Rock) | Bird(Rock) | -Breathe(Rock))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1350,
    "flag": "success",
    "assumptions": [
      "all x.((PetersPet(x) & Mammal(x)) -> Animal(x))",
      "all x.(Monkey(x) -> Mammal(x))",
      "all x.(((PetersPet(x) -> Monkey(x)) & -Bird(x)) | (-(PetersPet(x) -> Monkey(x)) & Bird(x)))",
      "all x.(Bird(x) -> CanFly(x))",
      "all x.((PetersPet(x) & Animal(x)) -> Breathe(x))",
      "[[ERROR]]",
      "PeterSPet(Rock)",
      "(CanFly(Rock) | Bird(Rock) | -Breathe(Rock))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 846,
    "flag": "success",
    "assumptions": [
      "all x.(Make(x,WeddingPlan) -> Engaged(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Have(x,WellAttendedWedding) & Have(x,LargerFamily))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "Have(John,LargeFamily)"
  },
  {
    "id": 847,
    "flag": "success",
    "assumptions": [
      "all x.(Make(x,WeddingPlan) -> Engaged(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Have(x,WellAttendedWedding) & Have(x,LargerFamily))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "-Have(John,LargerFamily)"
  },
  {
    "id": 848,
    "flag": "success",
    "assumptions": [
      "all x.(Make(x,WeddingPlan) -> Engaged(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Have(x,WellAttendedWedding) & Have(x,LargerFamily))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "Engaged(John)"
  },
  {
    "id": 849,
    "flag": "success",
    "assumptions": [
      "all x.(Make(x,WeddingPlan) -> Engaged(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Have(x,WellAttendedWedding) & Have(x,LargerFamily))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 74,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "-Have(Platypus,Teeth)",
      "Mammal(Platypus)",
      "Have(Humans,Teeth)"
    ],
    "goal": "(Mammal(Platypus) & -Have(Platypus,Teeth))"
  },
  {
    "id": 75,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "-Have(Platypus,Teeth)",
      "Mammal(Platypus)",
      "Have(Humans,Teeth)"
    ],
    "goal": "Reptile(Platypus)"
  },
  {
    "id": 76,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "-Have(Platypus,Teeth)",
      "Mammal(Platypus)",
      "Have(Humans,Teeth)"
    ],
    "goal": "Mammal(Humans)"
  },
  {
    "id": 578,
    "flag": "success",
    "assumptions": [
      "all x.(Plunger(x) -> Suck(x))",
      "all x.(Vacuum(x) -> Suck(x))",
      "all x.(Vampire(x) -> Suck(x))",
      "Vacuum(Space)",
      "(HouseholdAppliance(Duster) & -Suck(Duster))"
    ],
    "goal": "Suck(Space)"
  },
  {
    "id": 579,
    "flag": "success",
    "assumptions": [
      "all x.(Plunger(x) -> Suck(x))",
      "all x.(Vacuum(x) -> Suck(x))",
      "all x.(Vampire(x) -> Suck(x))",
      "Vacuum(Space)",
      "(HouseholdAppliance(Duster) & -Suck(Duster))"
    ],
    "goal": "Vampire(Space)"
  },
  {
    "id": 580,
    "flag": "success",
    "assumptions": [
      "all x.(Plunger(x) -> Suck(x))",
      "all x.(Vacuum(x) -> Suck(x))",
      "all x.(Vampire(x) -> Suck(x))",
      "Vacuum(Space)",
      "(HouseholdAppliance(Duster) & -Suck(Duster))"
    ],
    "goal": "all x.(HouseHoldApp(x) -> Suck(x))"
  },
  {
    "id": 388,
    "flag": "success",
    "assumptions": [
      "all x.((MachineLearningAlgorithm(x) -> SupervisedLearningAlgorithm(x)) | UnsupervisedLearningAlgorithm(x) | ReinforcementLearningAlgorithm(x))",
      "all x.(UnsupervisedLearningAlgorithm(x) -> -Require(x,LabeledData))",
      "all x.(TrainedWith(StateOfTheArtTextSummarizationModel,x) -> MachineLearningAlgorithm(x))",
      "all x.(ReinforcementLearningAlgorithm(x) -> -TrainedWith(StateOfTheArtTextSummarizationModel,x))",
      "all x.((MachineLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel,x)) -> Require(x,LabeledData))"
    ],
    "goal": "exists x.(SupervisedLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel,x))"
  },
  {
    "id": 389,
    "flag": "success",
    "assumptions": [
      "all x.((MachineLearningAlgorithm(x) -> SupervisedLearningAlgorithm(x)) | UnsupervisedLearningAlgorithm(x) | ReinforcementLearningAlgorithm(x))",
      "all x.(UnsupervisedLearningAlgorithm(x) -> -Require(x,LabeledData))",
      "all x.(TrainedWith(StateOfTheArtTextSummarizationModel,x) -> MachineLearningAlgorithm(x))",
      "all x.(ReinforcementLearningAlgorithm(x) -> -TrainedWith(StateOfTheArtTextSummarizationModel,x))",
      "all x.((MachineLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel,x)) -> Require(x,LabeledData))"
    ],
    "goal": "exists x.(UnsupervisedLearningAlgorithm(x) & TrainedWith(StateOfTheArtTextSummarizationModel,x))"
  },
  {
    "id": 1327,
    "flag": "success",
    "assumptions": [
      "all x.((Film(x) & Rated(x,AdultsOnly)) -> CanWatchWithout(Children,x,GuidanceFromParents))",
      "all x.((Film(x) & Contain(x,ExcessiveEroticContent) & Contain(x,ExcessiveViolentContent)) -> -CanWatchWithout(Children,x,GuidanceFromParents))",
      "all x.((Film(x) & Rated(x,GeneralAudience)) -> AppropriateFor(x,PeopleOfAllAges))",
      "all x.((Film(x) & FamilyFriendly(x) & Animated(x)) -> Rated(x,GeneralAudience))",
      "all x.(((Film(x) & InfrozenSeries(x)) -> FamilyFriendly(x)) & Animated(x))",
      "Film(HachiAdogsTale)",
      "((FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale) & -Rated(HachiAdogsTale,AdultsOnly)) | (-(FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale)) & Rated(HachiAdogsTale,AdultsOnly)))"
    ],
    "goal": "Rated(x,GeneralAudience)"
  },
  {
    "id": 1328,
    "flag": "success",
    "assumptions": [
      "all x.((Film(x) & Rated(x,AdultsOnly)) -> CanWatchWithout(Children,x,GuidanceFromParents))",
      "all x.((Film(x) & Contain(x,ExcessiveEroticContent) & Contain(x,ExcessiveViolentContent)) -> -CanWatchWithout(Children,x,GuidanceFromParents))",
      "all x.((Film(x) & Rated(x,GeneralAudience)) -> AppropriateFor(x,PeopleOfAllAges))",
      "all x.((Film(x) & FamilyFriendly(x) & Animated(x)) -> Rated(x,GeneralAudience))",
      "all x.(((Film(x) & InfrozenSeries(x)) -> FamilyFriendly(x)) & Animated(x))",
      "Film(HachiAdogsTale)",
      "((FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale) & -Rated(HachiAdogsTale,AdultsOnly)) | (-(FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale)) & Rated(HachiAdogsTale,AdultsOnly)))"
    ],
    "goal": "((Contain(x,ExcessiveEroticContent) & Contain(x,ExcessiveViolentContent)) | InfrozenSeries(ExcessiveViolentContent))"
  },
  {
    "id": 1329,
    "flag": "success",
    "assumptions": [
      "all x.((Film(x) & Rated(x,AdultsOnly)) -> CanWatchWithout(Children,x,GuidanceFromParents))",
      "all x.((Film(x) & Contain(x,ExcessiveEroticContent) & Contain(x,ExcessiveViolentContent)) -> -CanWatchWithout(Children,x,GuidanceFromParents))",
      "all x.((Film(x) & Rated(x,GeneralAudience)) -> AppropriateFor(x,PeopleOfAllAges))",
      "all x.((Film(x) & FamilyFriendly(x) & Animated(x)) -> Rated(x,GeneralAudience))",
      "all x.(((Film(x) & InfrozenSeries(x)) -> FamilyFriendly(x)) & Animated(x))",
      "Film(HachiAdogsTale)",
      "((FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale) & -Rated(HachiAdogsTale,AdultsOnly)) | (-(FamilyFriendly(HachiAdogsTale) & Animated(HachiAdogsTale)) & Rated(HachiAdogsTale,AdultsOnly)))"
    ],
    "goal": "-((Contain(x,ExcessiveEroticContent) & Contain(x,ExcessiveViolentContent) & -InfrozenSeries(ExcessiveViolentContent)) | (-(Contain(x,ExcessiveEroticContent) & Contain(x,ExcessiveViolentContent)) & InfrozenSeries(ExcessiveViolentContent)))"
  },
  {
    "id": 133,
    "flag": "success",
    "assumptions": [
      "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
      "exists x y.(HeckCattle(x) & BreedingBack(x) & Auroch(y) & Resemble(x,y))",
      "all x.(HeckCattle(x) -> Animal(x))",
      "all x.(Auroch(x) -> Animal(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 134,
    "flag": "success",
    "assumptions": [
      "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
      "exists x y.(HeckCattle(x) & BreedingBack(x) & Auroch(y) & Resemble(x,y))",
      "all x.(HeckCattle(x) -> Animal(x))",
      "all x.(Auroch(x) -> Animal(x))",
      "[[ERROR]]"
    ],
    "goal": "all x.(Auroch(x) -> Dead(x))"
  },
  {
    "id": 1410,
    "flag": "success",
    "assumptions": [
      "all x.(CanRegisterToVoteIn(x,UnitedStates) -> CanParticipateIn(x,2024UnitedStatesElection))",
      "all x.(Have(x,UnitedStates) -> CanRegisterToVoteIn(x,UnitedStates))",
      "all x.(Have(x,UnitedStatesCitizenship) | Have(x,TaiwaneseCitizenship))",
      "all x.((Russian(x) & FederationOfficial(x)) -> -Have(x,TaiwaneseCitizenship))",
      "(-Have(Vladimir,TaiwaneseCitizenship) & -ManagerAt(Vladimir,Gazprom))",
      "((Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina,UnitedStates))"
    ],
    "goal": "(Russian(Vladimir) & FederationOfficial(Vladimir))"
  },
  {
    "id": 1411,
    "flag": "success",
    "assumptions": [
      "all x.(CanRegisterToVoteIn(x,UnitedStates) -> CanParticipateIn(x,2024UnitedStatesElection))",
      "all x.(Have(x,UnitedStates) -> CanRegisterToVoteIn(x,UnitedStates))",
      "all x.(Have(x,UnitedStatesCitizenship) | Have(x,TaiwaneseCitizenship))",
      "all x.((Russian(x) & FederationOfficial(x)) -> -Have(x,TaiwaneseCitizenship))",
      "(-Have(Vladimir,TaiwaneseCitizenship) & -ManagerAt(Vladimir,Gazprom))",
      "((Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina,UnitedStates))"
    ],
    "goal": "-(Russian(Vladimir) & FederationOfficial(Vladimir))"
  },
  {
    "id": 1412,
    "flag": "success",
    "assumptions": [
      "all x.(CanRegisterToVoteIn(x,UnitedStates) -> CanParticipateIn(x,2024UnitedStatesElection))",
      "all x.(Have(x,UnitedStates) -> CanRegisterToVoteIn(x,UnitedStates))",
      "all x.(Have(x,UnitedStatesCitizenship) | Have(x,TaiwaneseCitizenship))",
      "all x.((Russian(x) & FederationOfficial(x)) -> -Have(x,TaiwaneseCitizenship))",
      "(-Have(Vladimir,TaiwaneseCitizenship) & -ManagerAt(Vladimir,Gazprom))",
      "((Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina,UnitedStates))"
    ],
    "goal": "(CanParticipateIn(Ekaterina,2024UnitedStatesElection) | ManagerAt(Ekaterina,Gazprom))"
  },
  {
    "id": 1413,
    "flag": "success",
    "assumptions": [
      "all x.(CanRegisterToVoteIn(x,UnitedStates) -> CanParticipateIn(x,2024UnitedStatesElection))",
      "all x.(Have(x,UnitedStates) -> CanRegisterToVoteIn(x,UnitedStates))",
      "all x.(Have(x,UnitedStatesCitizenship) | Have(x,TaiwaneseCitizenship))",
      "all x.((Russian(x) & FederationOfficial(x)) -> -Have(x,TaiwaneseCitizenship))",
      "(-Have(Vladimir,TaiwaneseCitizenship) & -ManagerAt(Vladimir,Gazprom))",
      "((Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina,UnitedStates))"
    ],
    "goal": "((CanParticipateIn(Ekaterina,2024UnitedStatesElection) & -ManagerAt(Vladimir,Gazprom)) | (-CanParticipateIn(Ekaterina,2024UnitedStatesElection) & ManagerAt(Vladimir,Gazprom)))"
  },
  {
    "id": 1414,
    "flag": "success",
    "assumptions": [
      "all x.(CanRegisterToVoteIn(x,UnitedStates) -> CanParticipateIn(x,2024UnitedStatesElection))",
      "all x.(Have(x,UnitedStates) -> CanRegisterToVoteIn(x,UnitedStates))",
      "all x.(Have(x,UnitedStatesCitizenship) | Have(x,TaiwaneseCitizenship))",
      "all x.((Russian(x) & FederationOfficial(x)) -> -Have(x,TaiwaneseCitizenship))",
      "(-Have(Vladimir,TaiwaneseCitizenship) & -ManagerAt(Vladimir,Gazprom))",
      "((Russian(Ekaterina) & FederationOfficial(Ekaterina)) | CanRegisterToVoteIn(Ekaterina,UnitedStates))"
    ],
    "goal": "(CanRegisterToVoteIn(Ekaterina,UnitedStates) & CanParticipateIn(Vladimir,2024UnitedStatesElection))"
  },
  {
    "id": 243,
    "flag": "success",
    "assumptions": [
      "(PublishingHouse(NewVesselPress) & SpecializesInTranslatingIntoEnglish(NewVesselPress,ForeignLiterature))",
      "all x.((Book(x) & PublishedBy(x,NewVesselPress)) -> In(x,English))",
      "(Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles,NewVesselPress))",
      "TranslatedFrom(NeapolitanChronicles,Italian)",
      "(Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies,NewVesselPress))"
    ],
    "goal": "(Book(NeapolitanChronicles) & In(NeapolitanChronicles,English))"
  },
  {
    "id": 244,
    "flag": "success",
    "assumptions": [
      "(PublishingHouse(NewVesselPress) & SpecializesInTranslatingIntoEnglish(NewVesselPress,ForeignLiterature))",
      "all x.((Book(x) & PublishedBy(x,NewVesselPress)) -> In(x,English))",
      "(Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles,NewVesselPress))",
      "TranslatedFrom(NeapolitanChronicles,Italian)",
      "(Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies,NewVesselPress))"
    ],
    "goal": "PublishedBy(HarryPotter,NewVesselPress)"
  },
  {
    "id": 245,
    "flag": "success",
    "assumptions": [
      "(PublishingHouse(NewVesselPress) & SpecializesInTranslatingIntoEnglish(NewVesselPress,ForeignLiterature))",
      "all x.((Book(x) & PublishedBy(x,NewVesselPress)) -> In(x,English))",
      "(Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles,NewVesselPress))",
      "TranslatedFrom(NeapolitanChronicles,Italian)",
      "(Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies,NewVesselPress))"
    ],
    "goal": "TranslatedFrom(PalaceOfFlies,Italian)"
  },
  {
    "id": 964,
    "flag": "success",
    "assumptions": [
      "all x.((Hydrocarbon(x) -> Orgranic(x)) & Compound(x))",
      "all x.(Alkane(x) -> Hydrocarbon(x))",
      "all x.(((Orgranic(x) & Compound(x)) -> Chemical(x)) & Compound(x))",
      "all x.((Orgranic(x) & Compound(x)) -> Contain(x,Carbon))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "Contain(Mixture,Carbon)"
  },
  {
    "id": 965,
    "flag": "success",
    "assumptions": [
      "all x.((Hydrocarbon(x) -> Orgranic(x)) & Compound(x))",
      "all x.(Alkane(x) -> Hydrocarbon(x))",
      "all x.(((Orgranic(x) & Compound(x)) -> Chemical(x)) & Compound(x))",
      "all x.((Orgranic(x) & Compound(x)) -> Contain(x,Carbon))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "(Alkane(Mixture) & Contain(Mixture,Carbon))"
  },
  {
    "id": 966,
    "flag": "success",
    "assumptions": [
      "all x.((Hydrocarbon(x) -> Orgranic(x)) & Compound(x))",
      "all x.(Alkane(x) -> Hydrocarbon(x))",
      "all x.(((Orgranic(x) & Compound(x)) -> Chemical(x)) & Compound(x))",
      "all x.((Orgranic(x) & Compound(x)) -> Contain(x,Carbon))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 702,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> Mortal(x))",
      "all x.(Greek(x) -> Human(x))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1244,
    "flag": "success",
    "assumptions": [
      "all x.((Student(x) & WorkIn(x,Library)) -> -From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & Have(x,PartTimeJob) & OfferedBy(y,University)) -> WorkIn(x,Library))",
      "all x.((Student(x) & Take(x,DatabaseCourse)) -> From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & InstructedBy(x,ProfessorDavid)) -> Take(x,DatabaseCourse))",
      "all x.((Student(x) & WorkIn(x,Lab)) -> InstructedBy(x,ProfessorDavid))",
      "(Student(James) & WorkIn(James,Lab))",
      "-exists x.(PartTimeJob(x) & Have(James,x) & OfferedBy(x,ComputerScienceDepartment) & -WorkIn(James,Lab))"
    ],
    "goal": "exists y.(PartTimeJob(y) & Have(James,y) & OfferedBy(y,University))"
  },
  {
    "id": 1245,
    "flag": "success",
    "assumptions": [
      "all x.((Student(x) & WorkIn(x,Library)) -> -From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & Have(x,PartTimeJob) & OfferedBy(y,University)) -> WorkIn(x,Library))",
      "all x.((Student(x) & Take(x,DatabaseCourse)) -> From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & InstructedBy(x,ProfessorDavid)) -> Take(x,DatabaseCourse))",
      "all x.((Student(x) & WorkIn(x,Lab)) -> InstructedBy(x,ProfessorDavid))",
      "(Student(James) & WorkIn(James,Lab))",
      "-exists x.(PartTimeJob(x) & Have(James,x) & OfferedBy(x,ComputerScienceDepartment) & -WorkIn(James,Lab))"
    ],
    "goal": "-exists y.(PartTimeJob(y) & Have(James,y) & OfferedBy(y,University))"
  },
  {
    "id": 1246,
    "flag": "success",
    "assumptions": [
      "all x.((Student(x) & WorkIn(x,Library)) -> -From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & Have(x,PartTimeJob) & OfferedBy(y,University)) -> WorkIn(x,Library))",
      "all x.((Student(x) & Take(x,DatabaseCourse)) -> From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & InstructedBy(x,ProfessorDavid)) -> Take(x,DatabaseCourse))",
      "all x.((Student(x) & WorkIn(x,Lab)) -> InstructedBy(x,ProfessorDavid))",
      "(Student(James) & WorkIn(James,Lab))",
      "-exists x.(PartTimeJob(x) & Have(James,x) & OfferedBy(x,ComputerScienceDepartment) & -WorkIn(James,Lab))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1247,
    "flag": "success",
    "assumptions": [
      "all x.((Student(x) & WorkIn(x,Library)) -> -From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & Have(x,PartTimeJob) & OfferedBy(y,University)) -> WorkIn(x,Library))",
      "all x.((Student(x) & Take(x,DatabaseCourse)) -> From(x,ComputerScienceDepartment))",
      "all x.((Student(x) & InstructedBy(x,ProfessorDavid)) -> Take(x,DatabaseCourse))",
      "all x.((Student(x) & WorkIn(x,Lab)) -> InstructedBy(x,ProfessorDavid))",
      "(Student(James) & WorkIn(James,Lab))",
      "-exists x.(PartTimeJob(x) & Have(James,x) & OfferedBy(x,ComputerScienceDepartment) & -WorkIn(James,Lab))"
    ],
    "goal": "Take(James,DatabaseCourse)"
  },
  {
    "id": 618,
    "flag": "success",
    "assumptions": [
      "(LikeMusic(George) -> WantToCompose(George))",
      "(AccesstoProgram(George) -> CanCompose(George))",
      "((WantToCompose(George) & CanCompose(George)) -> WillCompose(George))"
    ],
    "goal": "((LikeMusic(George) & AccesstoProgram(George)) -> WillCompose(George))"
  },
  {
    "id": 619,
    "flag": "success",
    "assumptions": [
      "(LikeMusic(George) -> WantToCompose(George))",
      "(AccesstoProgram(George) -> CanCompose(George))",
      "((WantToCompose(George) & CanCompose(George)) -> WillCompose(George))"
    ],
    "goal": "(-WantToCompose(George) -> -WillCompose(George))"
  },
  {
    "id": 736,
    "flag": "success",
    "assumptions": [
      "all x.(Hawk(x) -> -Swim(x))",
      "[[ERROR]]"
    ],
    "goal": "all x.(Bird(x) -> Swim(x))"
  },
  {
    "id": 802,
    "flag": "success",
    "assumptions": [
      "exists x.(Show(x) & AiringAtOn(x,8PMMonday) & GivenOutOn(x,Rose,TV))",
      "all x.((Show(x) & GivenOutOnAt(Rose,TV,x)) -> TheBachelor(x))",
      "all x.(TheBachelor(x) -> Portray(x,LifeOfRealPeople))",
      "all x.(Portray(x,LiveOfRealPeople) -> RealityTVShow(x))",
      "Show(BreakingBad)",
      "-RealityTVShow(BreakingBad)"
    ],
    "goal": "all x.(MondayAt8PM(x) & On(BreakingBad,x))"
  },
  {
    "id": 803,
    "flag": "success",
    "assumptions": [
      "exists x.(Show(x) & AiringAtOn(x,8PMMonday) & GivenOutOn(x,Rose,TV))",
      "all x.((Show(x) & GivenOutOnAt(Rose,TV,x)) -> TheBachelor(x))",
      "all x.(TheBachelor(x) -> Portray(x,LifeOfRealPeople))",
      "all x.(Portray(x,LiveOfRealPeople) -> RealityTVShow(x))",
      "Show(BreakingBad)",
      "-RealityTVShow(BreakingBad)"
    ],
    "goal": "all x y.(MondayAt8PM(x) & Rose(y) & GivenOutOn(y,Tv) & On(Tv,x) & From(y,BreakingBad))"
  },
  {
    "id": 804,
    "flag": "success",
    "assumptions": [
      "exists x.(Show(x) & AiringAtOn(x,8PMMonday) & GivenOutOn(x,Rose,TV))",
      "all x.((Show(x) & GivenOutOnAt(Rose,TV,x)) -> TheBachelor(x))",
      "all x.(TheBachelor(x) -> Portray(x,LifeOfRealPeople))",
      "all x.(Portray(x,LiveOfRealPeople) -> RealityTVShow(x))",
      "Show(BreakingBad)",
      "-RealityTVShow(BreakingBad)"
    ],
    "goal": "all x y.((Rose(y) & GivenOutOn(y,Tv) & On(Tv,x) & From(y,BreakingBad)) -> MondayAt8PM(x))"
  },
  {
    "id": 323,
    "flag": "success",
    "assumptions": [
      "(German(HeinrichSchmidt) & Politician(HeinrichSchmidt))",
      "(Member(HeinrichSchmidt,PrussianStateParliament) & Member(HeinrichSchmidt,NaziReichstag))"
    ],
    "goal": "(German(HeinrichSchmidt) | Russian(HeinrichSchmidt))"
  },
  {
    "id": 324,
    "flag": "success",
    "assumptions": [
      "(German(HeinrichSchmidt) & Politician(HeinrichSchmidt))",
      "(Member(HeinrichSchmidt,PrussianStateParliament) & Member(HeinrichSchmidt,NaziReichstag))"
    ],
    "goal": "exists x.(German(x) & Politician(x) & Member(x,PrussianStateParliament) & Member(x,NaziReichstag))"
  },
  {
    "id": 325,
    "flag": "success",
    "assumptions": [
      "(German(HeinrichSchmidt) & Politician(HeinrichSchmidt))",
      "(Member(HeinrichSchmidt,PrussianStateParliament) & Member(HeinrichSchmidt,NaziReichstag))"
    ],
    "goal": "all x.(Politician(x) -> -Member(x,NaziReichstag))"
  },
  {
    "id": 1032,
    "flag": "success",
    "assumptions": [
      "all x.(DeadlyDiseases(x) -> ComeWith(x,LowSurvivalRate))",
      "all x.(SevereCancer(x) -> DeadlyDiseases(x))",
      "all x.(BileDuctCancer(x) -> SevereCancer(x))",
      "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))",
      "all x.(MildFlu(x) -> -ComeWith(x,LowSurvivalRate))",
      "-(BileDuctCancer(ColorectalCancer) & ComeWith(ColorectalCancer,LowSurvivalRate))"
    ],
    "goal": "SevereCancer(ColorectalCancer)"
  },
  {
    "id": 1033,
    "flag": "success",
    "assumptions": [
      "all x.(DeadlyDiseases(x) -> ComeWith(x,LowSurvivalRate))",
      "all x.(SevereCancer(x) -> DeadlyDiseases(x))",
      "all x.(BileDuctCancer(x) -> SevereCancer(x))",
      "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))",
      "all x.(MildFlu(x) -> -ComeWith(x,LowSurvivalRate))",
      "-(BileDuctCancer(ColorectalCancer) & ComeWith(ColorectalCancer,LowSurvivalRate))"
    ],
    "goal": "(-(BileDuctCancer(ColorectalCancer) | Cholangiocarcinoma(ColorectalCancer)) | (BileDuctCancer(ColorectalCancer) & MildFlu(ColorectalCancer)))"
  },
  {
    "id": 1034,
    "flag": "success",
    "assumptions": [
      "all x.(DeadlyDiseases(x) -> ComeWith(x,LowSurvivalRate))",
      "all x.(SevereCancer(x) -> DeadlyDiseases(x))",
      "all x.(BileDuctCancer(x) -> SevereCancer(x))",
      "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))",
      "all x.(MildFlu(x) -> -ComeWith(x,LowSurvivalRate))",
      "-(BileDuctCancer(ColorectalCancer) & ComeWith(ColorectalCancer,LowSurvivalRate))"
    ],
    "goal": "(Cholangiocarcinoma(ColorectalCancer) & (MildFlu(ColorectalCancer) | BileDuctCancer(ColorectalCancer)))"
  },
  {
    "id": 941,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 942,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 943,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 147,
    "flag": "success",
    "assumptions": [
      "SportingEvent(Olympics)",
      "LastSummerOlympics(Tokyo)",
      "MostMedals(UnitedStates,Tokyo)"
    ],
    "goal": "SportingEvent(Champs)"
  },
  {
    "id": 148,
    "flag": "success",
    "assumptions": [
      "SportingEvent(Olympics)",
      "LastSummerOlympics(Tokyo)",
      "MostMedals(UnitedStates,Tokyo)"
    ],
    "goal": "-LastSummerOlympics(Tokyo)"
  },
  {
    "id": 149,
    "flag": "success",
    "assumptions": [
      "SportingEvent(Olympics)",
      "LastSummerOlympics(Tokyo)",
      "MostMedals(UnitedStates,Tokyo)"
    ],
    "goal": "exists x.(LastSummerOlympics(x) & MostMedals(UnitedStates,x))"
  },
  {
    "id": 703,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 442,
    "flag": "success",
    "assumptions": [
      "FlyTo(Susan,LgaAirport)",
      "all x y.((FlyFrom(x,y) & -FlyTo(x,y)) | (-FlyFrom(x,y) & FlyTo(x,y)))",
      "FlyFrom(John,LgaAirport)"
    ],
    "goal": "FlyFrom(Susan,LgaAirport)"
  },
  {
    "id": 443,
    "flag": "success",
    "assumptions": [
      "FlyTo(Susan,LgaAirport)",
      "all x y.((FlyFrom(x,y) & -FlyTo(x,y)) | (-FlyFrom(x,y) & FlyTo(x,y)))",
      "FlyFrom(John,LgaAirport)"
    ],
    "goal": "FlyTo(John,LgaAirport)"
  },
  {
    "id": 1268,
    "flag": "success",
    "assumptions": [
      "all x.(NiceTo(x,Animal) -> -MeanTo(x,Animal))",
      "exists x.(Grumpy(x) & MeanTo(x,Animal))",
      "all x.(AnimalLover(x) -> NiceTo(x,Animal))",
      "all x.(PetOwner(x) -> AnimalLover(x))",
      "PetOwner(Tom)"
    ],
    "goal": "Grumpy(Tom)"
  },
  {
    "id": 1269,
    "flag": "success",
    "assumptions": [
      "all x.(NiceTo(x,Animal) -> -MeanTo(x,Animal))",
      "exists x.(Grumpy(x) & MeanTo(x,Animal))",
      "all x.(AnimalLover(x) -> NiceTo(x,Animal))",
      "all x.(PetOwner(x) -> AnimalLover(x))",
      "PetOwner(Tom)"
    ],
    "goal": "-(Grumpy(Tom) & MeanTo(Tom,Animal))"
  },
  {
    "id": 1270,
    "flag": "success",
    "assumptions": [
      "all x.(NiceTo(x,Animal) -> -MeanTo(x,Animal))",
      "exists x.(Grumpy(x) & MeanTo(x,Animal))",
      "all x.(AnimalLover(x) -> NiceTo(x,Animal))",
      "all x.(PetOwner(x) -> AnimalLover(x))",
      "PetOwner(Tom)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 189,
    "flag": "success",
    "assumptions": [
      "all x.(Podcast(x) -> -Novel(x))",
      "[[ERROR]]",
      "all x y.((Novel(x) & WrittenBy(x,y)) -> WritesNovel(y))",
      "(American(Dani_Shapiro) & Writer(Dani_Shapiro))",
      "WrittenBy(Family_History,Dani_Shapiro)",
      "(Novel(Family_History) & WrittenIn(Family_History,Yr2003))",
      "(Podcast(Family_Secrets) & CreatedBy(Family_Secrets,Dani_Shapiro))",
      "(City(Boston) & American(Boston))"
    ],
    "goal": "WritesNovel(Dani_Shapiro)"
  },
  {
    "id": 190,
    "flag": "success",
    "assumptions": [
      "all x.(Podcast(x) -> -Novel(x))",
      "[[ERROR]]",
      "all x y.((Novel(x) & WrittenBy(x,y)) -> WritesNovel(y))",
      "(American(Dani_Shapiro) & Writer(Dani_Shapiro))",
      "WrittenBy(Family_History,Dani_Shapiro)",
      "(Novel(Family_History) & WrittenIn(Family_History,Yr2003))",
      "(Podcast(Family_Secrets) & CreatedBy(Family_Secrets,Dani_Shapiro))",
      "(City(Boston) & American(Boston))"
    ],
    "goal": "IsNovel(Family_Secrets)"
  },
  {
    "id": 191,
    "flag": "success",
    "assumptions": [
      "all x.(Podcast(x) -> -Novel(x))",
      "[[ERROR]]",
      "all x y.((Novel(x) & WrittenBy(x,y)) -> WritesNovel(y))",
      "(American(Dani_Shapiro) & Writer(Dani_Shapiro))",
      "WrittenBy(Family_History,Dani_Shapiro)",
      "(Novel(Family_History) & WrittenIn(Family_History,Yr2003))",
      "(Podcast(Family_Secrets) & CreatedBy(Family_Secrets,Dani_Shapiro))",
      "(City(Boston) & American(Boston))"
    ],
    "goal": "BornIn(Dani_Shapiro,Boston)"
  },
  {
    "id": 1313,
    "flag": "success",
    "assumptions": [
      "exists x.(Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
      "all x.((Professional(x) & BasketballPlayer(x)) -> CanDo(x,JumpShot))",
      "all x.(CanDo(x,JumpShot) -> LeapStraightIntoAir(x))",
      "all x.(LeapStraightIntoAir(x) -> Activate(x,LegMuscle))",
      "-Activate(Yuri,LegMuscle)"
    ],
    "goal": "AmericanNational(Yuri)"
  },
  {
    "id": 1314,
    "flag": "success",
    "assumptions": [
      "exists x.(Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
      "all x.((Professional(x) & BasketballPlayer(x)) -> CanDo(x,JumpShot))",
      "all x.(CanDo(x,JumpShot) -> LeapStraightIntoAir(x))",
      "all x.(LeapStraightIntoAir(x) -> Activate(x,LegMuscle))",
      "-Activate(Yuri,LegMuscle)"
    ],
    "goal": "-(AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri))"
  },
  {
    "id": 1315,
    "flag": "success",
    "assumptions": [
      "exists x.(Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
      "all x.((Professional(x) & BasketballPlayer(x)) -> CanDo(x,JumpShot))",
      "all x.(CanDo(x,JumpShot) -> LeapStraightIntoAir(x))",
      "all x.(LeapStraightIntoAir(x) -> Activate(x,LegMuscle))",
      "-Activate(Yuri,LegMuscle)"
    ],
    "goal": "(AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri))"
  },
  {
    "id": 1316,
    "flag": "success",
    "assumptions": [
      "exists x.(Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
      "all x.((Professional(x) & BasketballPlayer(x)) -> CanDo(x,JumpShot))",
      "all x.(CanDo(x,JumpShot) -> LeapStraightIntoAir(x))",
      "all x.(LeapStraightIntoAir(x) -> Activate(x,LegMuscle))",
      "-Activate(Yuri,LegMuscle)"
    ],
    "goal": "(-LeapStraightIntoAir(Yuri) -> (AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri)))"
  },
  {
    "id": 1317,
    "flag": "success",
    "assumptions": [
      "exists x.(Professional(x) & BasketballPlayer(x) & -AmericanNational(x))",
      "all x.((Professional(x) & BasketballPlayer(x)) -> CanDo(x,JumpShot))",
      "all x.(CanDo(x,JumpShot) -> LeapStraightIntoAir(x))",
      "all x.(LeapStraightIntoAir(x) -> Activate(x,LegMuscle))",
      "-Activate(Yuri,LegMuscle)"
    ],
    "goal": "(-(AmericanNational(Yuri) & Professional(Yuri) & BasketballPlayer(Yuri)) -> (Professional(Yuri) & BasketballPlayer(Yuri)))"
  },
  {
    "id": 724,
    "flag": "success",
    "assumptions": [
      "all x.(((Event(x) -> Happy(x)) & -Sad(x)) | (-(Event(x) -> Happy(x)) & Sad(x)))",
      "exists x.(Event(x) & Happy(x))"
    ],
    "goal": "all x.(Event(x) -> Sad(x))"
  },
  {
    "id": 411,
    "flag": "success",
    "assumptions": [
      "WinnerOf(Steinhauer,DuMaurierClassic,Year1992)",
      "Participate(DuMaurierClassic,Steinhauer,Year1992)",
      "[[ERROR]]",
      "(From(Descampe,Belgium) & OnLeaderBoardOf(Descampe,DuMaurierClassic))",
      "all x.(LeaderBoard(Maurier,x) -> Participate(Maurier,x))"
    ],
    "goal": "-WinnerOf(Steinhauer,DuMaurierClassic,Year1992)"
  },
  {
    "id": 412,
    "flag": "success",
    "assumptions": [
      "WinnerOf(Steinhauer,DuMaurierClassic,Year1992)",
      "Participate(DuMaurierClassic,Steinhauer,Year1992)",
      "[[ERROR]]",
      "(From(Descampe,Belgium) & OnLeaderBoardOf(Descampe,DuMaurierClassic))",
      "all x.(LeaderBoard(Maurier,x) -> Participate(Maurier,x))"
    ],
    "goal": "SixWayTie(Descampe)"
  },
  {
    "id": 1324,
    "flag": "success",
    "assumptions": [
      "all x.((Animal(x) & Bark(x)) -> -Like(Jane,x))",
      "all x.((Dog(x) -> Animal(x)) & Bark(x))",
      "all x.((Animal(x) & Jump(x)) -> Like(Jane,x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "Animal(Kiki)",
      "[[ERROR]]"
    ],
    "goal": "Terricolous(Kiki)"
  },
  {
    "id": 1325,
    "flag": "success",
    "assumptions": [
      "all x.((Animal(x) & Bark(x)) -> -Like(Jane,x))",
      "all x.((Dog(x) -> Animal(x)) & Bark(x))",
      "all x.((Animal(x) & Jump(x)) -> Like(Jane,x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "Animal(Kiki)",
      "[[ERROR]]"
    ],
    "goal": "(Bark(Kiki) & Dog(Kiki))"
  },
  {
    "id": 1326,
    "flag": "success",
    "assumptions": [
      "all x.((Animal(x) & Bark(x)) -> -Like(Jane,x))",
      "all x.((Dog(x) -> Animal(x)) & Bark(x))",
      "all x.((Animal(x) & Jump(x)) -> Like(Jane,x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "Animal(Kiki)",
      "[[ERROR]]"
    ],
    "goal": "(-Bark(Kiki) & -Dog(Kiki))"
  },
  {
    "id": 304,
    "flag": "success",
    "assumptions": [
      "(BornIn(Ailton,Year1995) & CommonlyKnownAs(Ailton,Ailton))",
      "(FootballPlayer(Ailton) & LoanedTo(Ailton,Braga))",
      "(Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva,Nautico))",
      "(FootballClub(Nautico) & FootballClub(Braga))",
      "FootballClub(Fluminense)"
    ],
    "goal": "all x.(PlayFor(x,Nautico) -> -Brazilian(x))"
  },
  {
    "id": 305,
    "flag": "success",
    "assumptions": [
      "(BornIn(Ailton,Year1995) & CommonlyKnownAs(Ailton,Ailton))",
      "(FootballPlayer(Ailton) & LoanedTo(Ailton,Braga))",
      "(Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva,Nautico))",
      "(FootballClub(Nautico) & FootballClub(Braga))",
      "FootballClub(Fluminense)"
    ],
    "goal": "all x.(FootballClub(x) -> -PlayFor(AiltonSilva,x))"
  },
  {
    "id": 306,
    "flag": "success",
    "assumptions": [
      "(BornIn(Ailton,Year1995) & CommonlyKnownAs(Ailton,Ailton))",
      "(FootballPlayer(Ailton) & LoanedTo(Ailton,Braga))",
      "(Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva,Nautico))",
      "(FootballClub(Nautico) & FootballClub(Braga))",
      "FootballClub(Fluminense)"
    ],
    "goal": "all x.(FootballClub(x) -> -LoanedTo(Ailton,x))"
  },
  {
    "id": 307,
    "flag": "success",
    "assumptions": [
      "(BornIn(Ailton,Year1995) & CommonlyKnownAs(Ailton,Ailton))",
      "(FootballPlayer(Ailton) & LoanedTo(Ailton,Braga))",
      "(Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva,Nautico))",
      "(FootballClub(Nautico) & FootballClub(Braga))",
      "FootballClub(Fluminense)"
    ],
    "goal": "PlayFor(AiltonSilva,Fluminense)"
  },
  {
    "id": 308,
    "flag": "success",
    "assumptions": [
      "(BornIn(Ailton,Year1995) & CommonlyKnownAs(Ailton,Ailton))",
      "(FootballPlayer(Ailton) & LoanedTo(Ailton,Braga))",
      "(Brazilian(AiltonSilva) & Footballplayer(AiltonSilva) & PlayFor(AiltonSilva,Nautico))",
      "(FootballClub(Nautico) & FootballClub(Braga))",
      "FootballClub(Fluminense)"
    ],
    "goal": "exists x.(FootballClub(x) & LoanedTo(AiltonSilva,x))"
  }
]