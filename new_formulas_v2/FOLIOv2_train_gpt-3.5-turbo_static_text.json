[
  {
    "id": 1126,
    "flag": "success",
    "assumptions": [
      "all x.(DrinkRegularly(x,Coffee) -> IsDependentOn(x,Caffeine))",
      "all x.(DrinkRegularly(x,Coffee) | -WantToBeAddictedTo(x,Caffeine))",
      "all x.(-WantToBeAddictedTo(x,Caffeine) -> -AwareThatDrug(x,Caffeine))",
      "-((Student(Rina) & --AwareThatDrug(Rina,Caffeine)) | (-Student(Rina) & -AwareThatDrug(Rina,Caffeine)))",
      "-((IsDependentOn(Rina,Caffeine) & -Student(Rina)) | (-IsDependentOn(Rina,Caffeine) & Student(Rina)))"
    ],
    "goal": "(-WantToBeAddictedTo(Rina,Caffeine) | -AwareThatDrug(Rina,Caffeine))"
  },
  {
    "id": 1127,
    "flag": "success",
    "assumptions": [
      "all x.(DrinkRegularly(x,Coffee) -> IsDependentOn(x,Caffeine))",
      "all x.(DrinkRegularly(x,Coffee) | -WantToBeAddictedTo(x,Caffeine))",
      "all x.(-WantToBeAddictedTo(x,Caffeine) -> -AwareThatDrug(x,Caffeine))",
      "-((Student(Rina) & --AwareThatDrug(Rina,Caffeine)) | (-Student(Rina) & -AwareThatDrug(Rina,Caffeine)))",
      "-((IsDependentOn(Rina,Caffeine) & -Student(Rina)) | (-IsDependentOn(Rina,Caffeine) & Student(Rina)))"
    ],
    "goal": "((-WantToBeAddictedTo(Rina,Caffeine) & --AwareThatDrug(Rina,Caffeine)) | (--WantToBeAddictedTo(Rina,Caffeine) & -AwareThatDrug(Rina,Caffeine)))"
  },
  {
    "id": 1128,
    "flag": "success",
    "assumptions": [
      "all x.(DrinkRegularly(x,Coffee) -> IsDependentOn(x,Caffeine))",
      "all x.(DrinkRegularly(x,Coffee) | -WantToBeAddictedTo(x,Caffeine))",
      "all x.(-WantToBeAddictedTo(x,Caffeine) -> -AwareThatDrug(x,Caffeine))",
      "-((Student(Rina) & --AwareThatDrug(Rina,Caffeine)) | (-Student(Rina) & -AwareThatDrug(Rina,Caffeine)))",
      "-((IsDependentOn(Rina,Caffeine) & -Student(Rina)) | (-IsDependentOn(Rina,Caffeine) & Student(Rina)))"
    ],
    "goal": "((DrinkRegularly(Rina,Coffee) & -IsUnawareThatCaffeineIsADrug(Rina)) | (-DrinkRegularly(Rina,Coffee) & IsUnawareThatCaffeineIsADrug(Rina)))"
  },
  {
    "id": 1129,
    "flag": "success",
    "assumptions": [
      "all x.(DrinkRegularly(x,Coffee) -> IsDependentOn(x,Caffeine))",
      "all x.(DrinkRegularly(x,Coffee) | -WantToBeAddictedTo(x,Caffeine))",
      "all x.(-WantToBeAddictedTo(x,Caffeine) -> -AwareThatDrug(x,Caffeine))",
      "-((Student(Rina) & --AwareThatDrug(Rina,Caffeine)) | (-Student(Rina) & -AwareThatDrug(Rina,Caffeine)))",
      "-((IsDependentOn(Rina,Caffeine) & -Student(Rina)) | (-IsDependentOn(Rina,Caffeine) & Student(Rina)))"
    ],
    "goal": "(((DoNotWantToBeAddictedToCaffeine(Rina) & --AwareThatDrug(Rina,Caffeine)) | (-DoNotWantToBeAddictedToCaffeine(Rina) & -AwareThatDrug(Rina,Caffeine))) -> -(-WantToBeAddictedTo(Rina,Caffeine) & DrinkRegularly(Rina,Coffee)))"
  },
  {
    "id": 20,
    "flag": "success",
    "assumptions": [
      "(Czech(Miroslav) & ChoralConductor(Miroslav) & SpecializeInPerformanceOf(Miroslav,RenaissanceMusic) & SpecializeInPerformanceOf(Miroslav,BaroqueMusic))",
      "all x.(ChoralConductor(x) -> Musician(x))",
      "[[ERROR]]",
      "PublishedBook(Miroslav,MethodOfStudyingGregorianChant,Yr1946)"
    ],
    "goal": "Love(Miroslav,Music)"
  },
  {
    "id": 21,
    "flag": "success",
    "assumptions": [
      "(Czech(Miroslav) & ChoralConductor(Miroslav) & SpecializeInPerformanceOf(Miroslav,RenaissanceMusic) & SpecializeInPerformanceOf(Miroslav,BaroqueMusic))",
      "all x.(ChoralConductor(x) -> Musician(x))",
      "[[ERROR]]",
      "PublishedBook(Miroslav,MethodOfStudyingGregorianChant,Yr1946)"
    ],
    "goal": "exists x y.(Czech(x) & PublishedBook(x,y,Year1946))"
  },
  {
    "id": 22,
    "flag": "success",
    "assumptions": [
      "(Czech(Miroslav) & ChoralConductor(Miroslav) & SpecializeInPerformanceOf(Miroslav,RenaissanceMusic) & SpecializeInPerformanceOf(Miroslav,BaroqueMusic))",
      "all x.(ChoralConductor(x) -> Musician(x))",
      "[[ERROR]]",
      "PublishedBook(Miroslav,MethodOfStudyingGregorianChant,Yr1946)"
    ],
    "goal": "all x.(ChoralConductor(x) -> -SpecializeInPerformanceOf(x,RenaissanceMusic))"
  },
  {
    "id": 1336,
    "flag": "success",
    "assumptions": [
      "all x.(Eel(x) -> Fish(x))",
      "all x.(Fish(x) -> -Plant(x))",
      "all x.(((DisplayedIn(x,Collection) -> Plant(x)) & -Animal(x)) | (-(DisplayedIn(x,Collection) -> Plant(x)) & Animal(x)))",
      "all x.(Multicellular(x) -> -Bacteria(x))",
      "all x.((DisplayedIn(x,Collection) & Animal(x)) -> Multicellular(x))",
      "DisplayedIn(SeaEel,Collection)",
      "(Eel(SeaEel) | Animal(SeaEel) | -Plant(SeaEel))"
    ],
    "goal": "Eel(SeaEel)"
  },
  {
    "id": 1337,
    "flag": "success",
    "assumptions": [
      "all x.(Eel(x) -> Fish(x))",
      "all x.(Fish(x) -> -Plant(x))",
      "all x.(((DisplayedIn(x,Collection) -> Plant(x)) & -Animal(x)) | (-(DisplayedIn(x,Collection) -> Plant(x)) & Animal(x)))",
      "all x.(Multicellular(x) -> -Bacteria(x))",
      "all x.((DisplayedIn(x,Collection) & Animal(x)) -> Multicellular(x))",
      "DisplayedIn(SeaEel,Collection)",
      "(Eel(SeaEel) | Animal(SeaEel) | -Plant(SeaEel))"
    ],
    "goal": "Bacteria(SeaEel)"
  },
  {
    "id": 1338,
    "flag": "success",
    "assumptions": [
      "all x.(Eel(x) -> Fish(x))",
      "all x.(Fish(x) -> -Plant(x))",
      "all x.(((DisplayedIn(x,Collection) -> Plant(x)) & -Animal(x)) | (-(DisplayedIn(x,Collection) -> Plant(x)) & Animal(x)))",
      "all x.(Multicellular(x) -> -Bacteria(x))",
      "all x.((DisplayedIn(x,Collection) & Animal(x)) -> Multicellular(x))",
      "DisplayedIn(SeaEel,Collection)",
      "(Eel(SeaEel) | Animal(SeaEel) | -Plant(SeaEel))"
    ],
    "goal": "(Multicellular(SeaEel) | Bacteria(SeaEel))"
  },
  {
    "id": 392,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 393,
    "flag": "success",
    "assumptions": [
      "(Building(BlakeMcFallCompanyBuilding) & AddedToIn(BlakeMcFallCompanyBuilding,TheNationalRegisterOfHistoricPlaces,Year1990))",
      "[[ERROR]]",
      "BuiltIn(EmmetBuilding,Year1915)",
      "[[ERROR]]",
      "WorkAt(John,EmmetBuilding)"
    ],
    "goal": "LocatedIn(BlakeMcFallCompanyBuilding,Portland)"
  },
  {
    "id": 394,
    "flag": "success",
    "assumptions": [
      "(Building(BlakeMcFallCompanyBuilding) & AddedToIn(BlakeMcFallCompanyBuilding,TheNationalRegisterOfHistoricPlaces,Year1990))",
      "[[ERROR]]",
      "BuiltIn(EmmetBuilding,Year1915)",
      "[[ERROR]]",
      "WorkAt(John,EmmetBuilding)"
    ],
    "goal": "StartCurrentJobIn(John,Year1990)"
  },
  {
    "id": 636,
    "flag": "success",
    "assumptions": [
      "(British(WilliamDickinson) & Politician(WilliamDickinson) & SatIn(WilliamDickinson,HouseOfCommons))",
      "(Attended(WilliamDickinson,WestminsterSchool) & Highschool(WestminsterSchool) & Attended(WilliamDickinson,UniversityOfEdinburgh))",
      "(University(UniversityOfEdinburgh) & LocatedIn(UniversityOfEdinburgh,UnitedKingdom))",
      "Supported(WilliamDickinson,PortlandWhigs)",
      "all x.(Supported(x,PortlandWhigs) -> -SatIn(x,Parliament))"
    ],
    "goal": "SatIn(WilliamDickinson,Parliament)"
  },
  {
    "id": 637,
    "flag": "success",
    "assumptions": [
      "(British(WilliamDickinson) & Politician(WilliamDickinson) & SatIn(WilliamDickinson,HouseOfCommons))",
      "(Attended(WilliamDickinson,WestminsterSchool) & Highschool(WestminsterSchool) & Attended(WilliamDickinson,UniversityOfEdinburgh))",
      "(University(UniversityOfEdinburgh) & LocatedIn(UniversityOfEdinburgh,UnitedKingdom))",
      "Supported(WilliamDickinson,PortlandWhigs)",
      "all x.(Supported(x,PortlandWhigs) -> -SatIn(x,Parliament))"
    ],
    "goal": "exists x y.(Attended(WilliamDickinson,x) & Highschool(x) & LocatedIn(x,UnitedKingdom) & Attended(WilliamDickinson,y) & University(y) & LocatedIn(y,UnitedKingdom))"
  },
  {
    "id": 638,
    "flag": "success",
    "assumptions": [
      "(British(WilliamDickinson) & Politician(WilliamDickinson) & SatIn(WilliamDickinson,HouseOfCommons))",
      "(Attended(WilliamDickinson,WestminsterSchool) & Highschool(WestminsterSchool) & Attended(WilliamDickinson,UniversityOfEdinburgh))",
      "(University(UniversityOfEdinburgh) & LocatedIn(UniversityOfEdinburgh,UnitedKingdom))",
      "Supported(WilliamDickinson,PortlandWhigs)",
      "all x.(Supported(x,PortlandWhigs) -> -SatIn(x,Parliament))"
    ],
    "goal": "exists x.(Attended(WilliamDickinson,x) & University(x) & LocatedIn(x,UnitedKingdom))"
  },
  {
    "id": 639,
    "flag": "success",
    "assumptions": [
      "(British(WilliamDickinson) & Politician(WilliamDickinson) & SatIn(WilliamDickinson,HouseOfCommons))",
      "(Attended(WilliamDickinson,WestminsterSchool) & Highschool(WestminsterSchool) & Attended(WilliamDickinson,UniversityOfEdinburgh))",
      "(University(UniversityOfEdinburgh) & LocatedIn(UniversityOfEdinburgh,UnitedKingdom))",
      "Supported(WilliamDickinson,PortlandWhigs)",
      "all x.(Supported(x,PortlandWhigs) -> -SatIn(x,Parliament))"
    ],
    "goal": "SatIn(WilliamDickinson,HouseOfCommons)"
  },
  {
    "id": 690,
    "flag": "success",
    "assumptions": [
      "UniversalLanguage(LanguageA)",
      "[[ERROR]]",
      "-CanCommunicateWith(Katya,Danil)",
      "Know(Katya,LanguageA)"
    ],
    "goal": "Know(Danil,LanguageA)"
  },
  {
    "id": 1192,
    "flag": "success",
    "assumptions": [
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,AMCAList)) -> EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
      "[[ERROR]]",
      "all x.(Customer(x) & In(x,JameSFamily) & (SubscribedTo(x,AMCAList) | SubscribedTo(x,HBO)))",
      "all x.((Customer(x) & In(x,JameSFamily) & Prefer(x,TVSeries)) -> -WatchIn(x,TV,Cinema))",
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,HBO)) -> Prefer(x,TVSeries))",
      "[[ERROR]]"
    ],
    "goal": "GoToEveryWeek(Lily,Cinema)"
  },
  {
    "id": 1193,
    "flag": "success",
    "assumptions": [
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,AMCAList)) -> EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
      "[[ERROR]]",
      "all x.(Customer(x) & In(x,JameSFamily) & (SubscribedTo(x,AMCAList) | SubscribedTo(x,HBO)))",
      "all x.((Customer(x) & In(x,JameSFamily) & Prefer(x,TVSeries)) -> -WatchIn(x,TV,Cinema))",
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,HBO)) -> Prefer(x,TVSeries))",
      "[[ERROR]]"
    ],
    "goal": "-GoToEveryWeek(Lily,Cinema)"
  },
  {
    "id": 1194,
    "flag": "success",
    "assumptions": [
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,AMCAList)) -> EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
      "[[ERROR]]",
      "all x.(Customer(x) & In(x,JameSFamily) & (SubscribedTo(x,AMCAList) | SubscribedTo(x,HBO)))",
      "all x.((Customer(x) & In(x,JameSFamily) & Prefer(x,TVSeries)) -> -WatchIn(x,TV,Cinema))",
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,HBO)) -> Prefer(x,TVSeries))",
      "[[ERROR]]"
    ],
    "goal": "(GoToEveryWeek(Lily,Cinema) | EligibleForThreeFreeMoviesWithoutAdditionalFees(Lily))"
  },
  {
    "id": 1195,
    "flag": "success",
    "assumptions": [
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,AMCAList)) -> EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
      "[[ERROR]]",
      "all x.(Customer(x) & In(x,JameSFamily) & (SubscribedTo(x,AMCAList) | SubscribedTo(x,HBO)))",
      "all x.((Customer(x) & In(x,JameSFamily) & Prefer(x,TVSeries)) -> -WatchIn(x,TV,Cinema))",
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,HBO)) -> Prefer(x,TVSeries))",
      "[[ERROR]]"
    ],
    "goal": "((GoToEveryWeek(Lily,Cinema) & SubscribedTo(Lily,HBO)) -> ((EligibleForThreeFreeMoviesEveryWeek(Lily) & -Prefer(Lily,TVSeries)) | (-EligibleForThreeFreeMoviesEveryWeek(Lily) & Prefer(Lily,TVSeries))))"
  },
  {
    "id": 1196,
    "flag": "success",
    "assumptions": [
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,AMCAList)) -> EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))",
      "[[ERROR]]",
      "all x.(Customer(x) & In(x,JameSFamily) & (SubscribedTo(x,AMCAList) | SubscribedTo(x,HBO)))",
      "all x.((Customer(x) & In(x,JameSFamily) & Prefer(x,TVSeries)) -> -WatchIn(x,TV,Cinema))",
      "all x.((Customer(x) & In(x,JameSFamily) & SubscribedTo(x,HBO)) -> Prefer(x,TVSeries))",
      "[[ERROR]]"
    ],
    "goal": "((EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(Lily) & WatchIn(Lily,TV,Cinema)) -> (GoToEveryWeek(Lily,Cinema) & Prefer(Lily,TVSeries)))"
  },
  {
    "id": 550,
    "flag": "success",
    "assumptions": [
      "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x,y)) -> RankHigherThan(x,y))",
      "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x,y) & -MorePoints(y,x) & MorePoints(x,y)) -> RankHigherThan(x,y))",
      "(LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona))",
      "MorePoints(RealMadrid,Barcelona)",
      "(-MorePointsInGameBetween(RealMadrid,Barcelona) & -MorePointsInGameBetween(Barcelona,RealMadrid))"
    ],
    "goal": "RankHigherThan(RealMadrid,Barcelona)"
  },
  {
    "id": 551,
    "flag": "success",
    "assumptions": [
      "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x,y)) -> RankHigherThan(x,y))",
      "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x,y) & -MorePoints(y,x) & MorePoints(x,y)) -> RankHigherThan(x,y))",
      "(LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona))",
      "MorePoints(RealMadrid,Barcelona)",
      "(-MorePointsInGameBetween(RealMadrid,Barcelona) & -MorePointsInGameBetween(Barcelona,RealMadrid))"
    ],
    "goal": "RankHigherThan(Barcelona,RealMadrid)"
  },
  {
    "id": 249,
    "flag": "success",
    "assumptions": [
      "NeighbourhoodIn(LawtonPark,Seattle)",
      "all x.(Residentof(x,LawtonPark) -> UseZipCode(x,Num98199))",
      "ResidentOf(Tom,LawtonPark)",
      "UseZipCode(Daniel,Num98199)"
    ],
    "goal": "UseZipCode(Tom,Num98199)"
  },
  {
    "id": 250,
    "flag": "success",
    "assumptions": [
      "NeighbourhoodIn(LawtonPark,Seattle)",
      "all x.(Residentof(x,LawtonPark) -> UseZipCode(x,Num98199))",
      "ResidentOf(Tom,LawtonPark)",
      "UseZipCode(Daniel,Num98199)"
    ],
    "goal": "-UseZipCode(Tom,Num98199)"
  },
  {
    "id": 251,
    "flag": "success",
    "assumptions": [
      "NeighbourhoodIn(LawtonPark,Seattle)",
      "all x.(Residentof(x,LawtonPark) -> UseZipCode(x,Num98199))",
      "ResidentOf(Tom,LawtonPark)",
      "UseZipCode(Daniel,Num98199)"
    ],
    "goal": "ResidentOf(Tom,Washington)"
  },
  {
    "id": 252,
    "flag": "success",
    "assumptions": [
      "NeighbourhoodIn(LawtonPark,Seattle)",
      "all x.(Residentof(x,LawtonPark) -> UseZipCode(x,Num98199))",
      "ResidentOf(Tom,LawtonPark)",
      "UseZipCode(Daniel,Num98199)"
    ],
    "goal": "ResidentOf(Daniel,LawtonPark)"
  },
  {
    "id": 261,
    "flag": "success",
    "assumptions": [
      "all x.((Legislator(x) & StealsFunds(x)) -> Suspended(x))",
      "Legislator(TiffanyTAlston)",
      "(StealsFunds(TiffanyTAlston) & StealsFundsInYr(TiffanyTAlston,Yr2012))"
    ],
    "goal": "Suspended(TiffanyTAlston)"
  },
  {
    "id": 262,
    "flag": "success",
    "assumptions": [
      "all x.((Legislator(x) & StealsFunds(x)) -> Suspended(x))",
      "Legislator(TiffanyTAlston)",
      "(StealsFunds(TiffanyTAlston) & StealsFundsInYr(TiffanyTAlston,Yr2012))"
    ],
    "goal": "-Suspended(TiffanyTAlston)"
  },
  {
    "id": 263,
    "flag": "success",
    "assumptions": [
      "all x.((Legislator(x) & StealsFunds(x)) -> Suspended(x))",
      "Legislator(TiffanyTAlston)",
      "(StealsFunds(TiffanyTAlston) & StealsFundsInYr(TiffanyTAlston,Yr2012))"
    ],
    "goal": "Prison(TiffanyTAlston)"
  },
  {
    "id": 491,
    "flag": "success",
    "assumptions": [
      "exists x y.(Fish(x) -> Sting(x,y))",
      "Fish(Stonefish)",
      "all x.(SteppedOnBy(Stonefish,x) -> Sting(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & -Treated(x)) -> CauseDeathTo(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & (ApplyHeatTo(x) | UseAntivenomOn(x))) -> Treated(x))"
    ],
    "goal": "all x.((Sting(Stonefish,x) & -UseAntivenomOn(x)) -> CauseDeathTo(Stonefish,x))"
  },
  {
    "id": 492,
    "flag": "success",
    "assumptions": [
      "exists x y.(Fish(x) -> Sting(x,y))",
      "Fish(Stonefish)",
      "all x.(SteppedOnBy(Stonefish,x) -> Sting(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & -Treated(x)) -> CauseDeathTo(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & (ApplyHeatTo(x) | UseAntivenomOn(x))) -> Treated(x))"
    ],
    "goal": "exists x y.((Fish(x) & Sting(x,y) & -Treated(y)) -> CauseDeathTo(x,y))"
  },
  {
    "id": 493,
    "flag": "success",
    "assumptions": [
      "exists x y.(Fish(x) -> Sting(x,y))",
      "Fish(Stonefish)",
      "all x.(SteppedOnBy(Stonefish,x) -> Sting(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & -Treated(x)) -> CauseDeathTo(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & (ApplyHeatTo(x) | UseAntivenomOn(x))) -> Treated(x))"
    ],
    "goal": "all x.((SteppedOnBy(Stonefish,x) & ApplyHeatTo(x)) -> CauseDeathTo(Stonefish,x))"
  },
  {
    "id": 1173,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1174,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1175,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1176,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1177,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1005,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1006,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1007,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 518,
    "flag": "success",
    "assumptions": [
      "exists x.(Project(x) & Do(Sam,x))",
      "all x.(Project(x) -> ((WrittenIn(x,Cplusplus) & -WrittenIn(x,Python)) | (-WrittenIn(x,Cplusplus) & WrittenIn(x,Python))))",
      "all x.((Project(x) & WrittenIn(x,Python) & Do(Sam,x)) -> -Use(Sam,Mac))",
      "Use(Sam,Mac)",
      "exists x.((Use(Sam,Mac) & Song(x)) -> Play(Sam,x))",
      "all x.((Song(x) & Play(Sam,x)) -> Titled(x,Perfect))"
    ],
    "goal": "all x.(Project(x) & Do(Sam,x) & WrittenIn(x,Cplusplus))"
  },
  {
    "id": 519,
    "flag": "success",
    "assumptions": [
      "exists x.(Project(x) & Do(Sam,x))",
      "all x.(Project(x) -> ((WrittenIn(x,Cplusplus) & -WrittenIn(x,Python)) | (-WrittenIn(x,Cplusplus) & WrittenIn(x,Python))))",
      "all x.((Project(x) & WrittenIn(x,Python) & Do(Sam,x)) -> -Use(Sam,Mac))",
      "Use(Sam,Mac)",
      "exists x.((Use(Sam,Mac) & Song(x)) -> Play(Sam,x))",
      "all x.((Song(x) & Play(Sam,x)) -> Titled(x,Perfect))"
    ],
    "goal": "all x.(Song(x) & Play(Sam,x) & Titled(x,Perfect))"
  },
  {
    "id": 520,
    "flag": "success",
    "assumptions": [
      "exists x.(Project(x) & Do(Sam,x))",
      "all x.(Project(x) -> ((WrittenIn(x,Cplusplus) & -WrittenIn(x,Python)) | (-WrittenIn(x,Cplusplus) & WrittenIn(x,Python))))",
      "all x.((Project(x) & WrittenIn(x,Python) & Do(Sam,x)) -> -Use(Sam,Mac))",
      "Use(Sam,Mac)",
      "exists x.((Use(Sam,Mac) & Song(x)) -> Play(Sam,x))",
      "all x.((Song(x) & Play(Sam,x)) -> Titled(x,Perfect))"
    ],
    "goal": "all x.(Titled(x,Perfect) -> Play(Sam,x))"
  },
  {
    "id": 698,
    "flag": "success",
    "assumptions": [
      "all x.(Rabbit(x) -> Have(x,Fur))",
      "exists x.(Pet(x) & Rabbit(x))"
    ],
    "goal": "exists x y.(Pet(x) & Pet(y) & -Have(x,Fur) & -Have(y,Fur))"
  },
  {
    "id": 1385,
    "flag": "success",
    "assumptions": [
      "all x.((SocialMedia(x) & Application(x) & Contain(x,ChatFeature)) -> Software(x))",
      "all x.((SocialMedia(x) & Application(x) & AllowToSendTo(x,User,Message)) -> Contain(x,ChatFeature))",
      "all x.(((SocialMedia(x) & Application(x)) -> Contain(x,ChatFeature)) | Contain(x,VideoFeature))",
      "all x.((SocialMedia(x) & Application(x) & Contain(x,VideoFeature)) -> Allow(x,User,UploadVideo))",
      "all x.((SocialMedia(x) & Application(x) & Software(x)) -> ComputerProgram(x))",
      "all x.((SocialMedia(x) & Application(x) & Have(x,HighEngagementMetric)) -> Addictive(x))",
      "all x.((SocialMedia(x) & Application(x) & Addictive(x)) -> -IdealFor(x,Preteen))",
      "(SocialMedia(TikTok) & Application(TikTok) & -IdealFor(TikTok,Preteen))"
    ],
    "goal": "ComputerProgram(TikTok)"
  },
  {
    "id": 1386,
    "flag": "success",
    "assumptions": [
      "all x.((SocialMedia(x) & Application(x) & Contain(x,ChatFeature)) -> Software(x))",
      "all x.((SocialMedia(x) & Application(x) & AllowToSendTo(x,User,Message)) -> Contain(x,ChatFeature))",
      "all x.(((SocialMedia(x) & Application(x)) -> Contain(x,ChatFeature)) | Contain(x,VideoFeature))",
      "all x.((SocialMedia(x) & Application(x) & Contain(x,VideoFeature)) -> Allow(x,User,UploadVideo))",
      "all x.((SocialMedia(x) & Application(x) & Software(x)) -> ComputerProgram(x))",
      "all x.((SocialMedia(x) & Application(x) & Have(x,HighEngagementMetric)) -> Addictive(x))",
      "all x.((SocialMedia(x) & Application(x) & Addictive(x)) -> -IdealFor(x,Preteen))",
      "(SocialMedia(TikTok) & Application(TikTok) & -IdealFor(TikTok,Preteen))"
    ],
    "goal": "((IdealFor(TikTok,Preteen) & -ComputerProgram(TikTok)) | (-IdealFor(TikTok,Preteen) & ComputerProgram(TikTok)))"
  },
  {
    "id": 1387,
    "flag": "success",
    "assumptions": [
      "all x.((SocialMedia(x) & Application(x) & Contain(x,ChatFeature)) -> Software(x))",
      "all x.((SocialMedia(x) & Application(x) & AllowToSendTo(x,User,Message)) -> Contain(x,ChatFeature))",
      "all x.(((SocialMedia(x) & Application(x)) -> Contain(x,ChatFeature)) | Contain(x,VideoFeature))",
      "all x.((SocialMedia(x) & Application(x) & Contain(x,VideoFeature)) -> Allow(x,User,UploadVideo))",
      "all x.((SocialMedia(x) & Application(x) & Software(x)) -> ComputerProgram(x))",
      "all x.((SocialMedia(x) & Application(x) & Have(x,HighEngagementMetric)) -> Addictive(x))",
      "all x.((SocialMedia(x) & Application(x) & Addictive(x)) -> -IdealFor(x,Preteen))",
      "(SocialMedia(TikTok) & Application(TikTok) & -IdealFor(TikTok,Preteen))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1388,
    "flag": "success",
    "assumptions": [
      "all x.((SocialMedia(x) & Application(x) & Contain(x,ChatFeature)) -> Software(x))",
      "all x.((SocialMedia(x) & Application(x) & AllowToSendTo(x,User,Message)) -> Contain(x,ChatFeature))",
      "all x.(((SocialMedia(x) & Application(x)) -> Contain(x,ChatFeature)) | Contain(x,VideoFeature))",
      "all x.((SocialMedia(x) & Application(x) & Contain(x,VideoFeature)) -> Allow(x,User,UploadVideo))",
      "all x.((SocialMedia(x) & Application(x) & Software(x)) -> ComputerProgram(x))",
      "all x.((SocialMedia(x) & Application(x) & Have(x,HighEngagementMetric)) -> Addictive(x))",
      "all x.((SocialMedia(x) & Application(x) & Addictive(x)) -> -IdealFor(x,Preteen))",
      "(SocialMedia(TikTok) & Application(TikTok) & -IdealFor(TikTok,Preteen))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 316,
    "flag": "success",
    "assumptions": [
      "UnincorporatedCommunity(Ordinary)",
      "(LocatedIn(Ordinary,ElliotCounty) & On(Ordinary,KentuckyRoute32))",
      "LocatedNorthwestOf(Ordinary,SandyHook)"
    ],
    "goal": "all x.(On(x,KentuckyRoute32) -> -UnincorporatedCommunity(x))"
  },
  {
    "id": 317,
    "flag": "success",
    "assumptions": [
      "UnincorporatedCommunity(Ordinary)",
      "(LocatedIn(Ordinary,ElliotCounty) & On(Ordinary,KentuckyRoute32))",
      "LocatedNorthwestOf(Ordinary,SandyHook)"
    ],
    "goal": "exists x.(UnincorporatedCommunity(x) & LocatedIn(x,ElliotCounty))"
  },
  {
    "id": 921,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,Event) & YoungAdult(x)) -> Like(x,Independence))",
      "all x.((At(x,Event) & CollegeStudent(x)) -> YoungAdult(x))",
      "all x.((At(x,Event) & YaleStudent(x)) -> CollegeStudent(x))",
      "all x.(At(x,Event) -> ((YaleStudent(x) & -HarvardStudent(x)) | (-YaleStudent(x) & HarvardStudent(x))))",
      "all x.((At(x,Event) & HarvardStudent(x)) -> Diligent(x))",
      "(At(Susan,Event) & (HarvardStudent(Susan) -> YoungAdult(Susan)))",
      "(YaleStudent(Susan) -> -Like(Susan,Independence))"
    ],
    "goal": "CollegeStudent(Susan)"
  },
  {
    "id": 922,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,Event) & YoungAdult(x)) -> Like(x,Independence))",
      "all x.((At(x,Event) & CollegeStudent(x)) -> YoungAdult(x))",
      "all x.((At(x,Event) & YaleStudent(x)) -> CollegeStudent(x))",
      "all x.(At(x,Event) -> ((YaleStudent(x) & -HarvardStudent(x)) | (-YaleStudent(x) & HarvardStudent(x))))",
      "all x.((At(x,Event) & HarvardStudent(x)) -> Diligent(x))",
      "(At(Susan,Event) & (HarvardStudent(Susan) -> YoungAdult(Susan)))",
      "(YaleStudent(Susan) -> -Like(Susan,Independence))"
    ],
    "goal": "(Like(Susan,Independence) & Diligent(Susan))"
  },
  {
    "id": 923,
    "flag": "success",
    "assumptions": [
      "all x.((At(x,Event) & YoungAdult(x)) -> Like(x,Independence))",
      "all x.((At(x,Event) & CollegeStudent(x)) -> YoungAdult(x))",
      "all x.((At(x,Event) & YaleStudent(x)) -> CollegeStudent(x))",
      "all x.(At(x,Event) -> ((YaleStudent(x) & -HarvardStudent(x)) | (-YaleStudent(x) & HarvardStudent(x))))",
      "all x.((At(x,Event) & HarvardStudent(x)) -> Diligent(x))",
      "(At(Susan,Event) & (HarvardStudent(Susan) -> YoungAdult(Susan)))",
      "(YaleStudent(Susan) -> -Like(Susan,Independence))"
    ],
    "goal": "-(Like(Susan,Independence) & Diligent(Susan))"
  },
  {
    "id": 430,
    "flag": "success",
    "assumptions": [
      "(Play(VicDicara,Guitar) & Play(VicDicara,Bass))",
      "[[ERROR]]",
      "Band(VicDicara,InsideOut)"
    ],
    "goal": "Music(InsideOut,Punk)"
  },
  {
    "id": 431,
    "flag": "success",
    "assumptions": [
      "(Play(VicDicara,Guitar) & Play(VicDicara,Bass))",
      "[[ERROR]]",
      "Band(VicDicara,InsideOut)"
    ],
    "goal": "exists x.(Band(x,InsideOut) & Play(x,Bass))"
  },
  {
    "id": 913,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalAthlete(x) -> SpendOn(x,MostOfTheirTime,Sports))",
      "all x.(OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))",
      "all x.(FullTimeScientist(x) -> -SpendOn(x,MostOfTheirTime,Sports))",
      "all x.(NobelPhysicsLaureate(x) -> FullTimeScientist(x))",
      "(SpendOn(Amy,MostOfTheirTime,Sports) | OlympicGoldMedalWinner(Amy))",
      "(-NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy))"
    ],
    "goal": "ProfessionalAthlete(Amy)"
  },
  {
    "id": 914,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalAthlete(x) -> SpendOn(x,MostOfTheirTime,Sports))",
      "all x.(OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))",
      "all x.(FullTimeScientist(x) -> -SpendOn(x,MostOfTheirTime,Sports))",
      "all x.(NobelPhysicsLaureate(x) -> FullTimeScientist(x))",
      "(SpendOn(Amy,MostOfTheirTime,Sports) | OlympicGoldMedalWinner(Amy))",
      "(-NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy))"
    ],
    "goal": "-(FullTimeScientist(Amy) | OlympicGoldMedalWinner(Amy))"
  },
  {
    "id": 915,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalAthlete(x) -> SpendOn(x,MostOfTheirTime,Sports))",
      "all x.(OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))",
      "all x.(FullTimeScientist(x) -> -SpendOn(x,MostOfTheirTime,Sports))",
      "all x.(NobelPhysicsLaureate(x) -> FullTimeScientist(x))",
      "(SpendOn(Amy,MostOfTheirTime,Sports) | OlympicGoldMedalWinner(Amy))",
      "(-NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy))"
    ],
    "goal": "(-OlympicGoldMedalWinner(Amy) -> NobelPhysicsLaureate(Amy))"
  },
  {
    "id": 1142,
    "flag": "success",
    "assumptions": [
      "all x.((GrownIn(x,BenSYard) & RedFruit(x)) -> Contain(x,VitaminC))",
      "all x.((GrownIn(x,BenSYard) & Is(x,Apple)) -> RedFruit(x))",
      "all x.((GrownIn(x,BenSYard) & Contain(x,VitaminC)) -> Healthy(x))",
      "all x.((GrownIn(x,BenSYard) & Healthy(x)) -> -On(x,WarningList))",
      "GrownIn(Cherry,BenSYard)",
      "(-(Healthy(Cherry) & Is(Cherry,Apple)) -> RedFruit(Cherry))"
    ],
    "goal": "Is(Cherry,Apple)"
  },
  {
    "id": 1143,
    "flag": "success",
    "assumptions": [
      "all x.((GrownIn(x,BenSYard) & RedFruit(x)) -> Contain(x,VitaminC))",
      "all x.((GrownIn(x,BenSYard) & Is(x,Apple)) -> RedFruit(x))",
      "all x.((GrownIn(x,BenSYard) & Contain(x,VitaminC)) -> Healthy(x))",
      "all x.((GrownIn(x,BenSYard) & Healthy(x)) -> -On(x,WarningList))",
      "GrownIn(Cherry,BenSYard)",
      "(-(Healthy(Cherry) & Is(Cherry,Apple)) -> RedFruit(Cherry))"
    ],
    "goal": "((Contain(Cherry,VitaminC) & -On(Cherry,WarningList)) | (-Contain(Cherry,VitaminC) & On(Cherry,WarningList)))"
  },
  {
    "id": 1144,
    "flag": "success",
    "assumptions": [
      "all x.((GrownIn(x,BenSYard) & RedFruit(x)) -> Contain(x,VitaminC))",
      "all x.((GrownIn(x,BenSYard) & Is(x,Apple)) -> RedFruit(x))",
      "all x.((GrownIn(x,BenSYard) & Contain(x,VitaminC)) -> Healthy(x))",
      "all x.((GrownIn(x,BenSYard) & Healthy(x)) -> -On(x,WarningList))",
      "GrownIn(Cherry,BenSYard)",
      "(-(Healthy(Cherry) & Is(Cherry,Apple)) -> RedFruit(Cherry))"
    ],
    "goal": "((On(Cherry,WarningList) & -RedFruit(Cherry)) | (-On(Cherry,WarningList) & RedFruit(Cherry)))"
  },
  {
    "id": 1145,
    "flag": "success",
    "assumptions": [
      "all x.((GrownIn(x,BenSYard) & RedFruit(x)) -> Contain(x,VitaminC))",
      "all x.((GrownIn(x,BenSYard) & Is(x,Apple)) -> RedFruit(x))",
      "all x.((GrownIn(x,BenSYard) & Contain(x,VitaminC)) -> Healthy(x))",
      "all x.((GrownIn(x,BenSYard) & Healthy(x)) -> -On(x,WarningList))",
      "GrownIn(Cherry,BenSYard)",
      "(-(Healthy(Cherry) & Is(Cherry,Apple)) -> RedFruit(Cherry))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1146,
    "flag": "success",
    "assumptions": [
      "all x.((GrownIn(x,BenSYard) & RedFruit(x)) -> Contain(x,VitaminC))",
      "all x.((GrownIn(x,BenSYard) & Is(x,Apple)) -> RedFruit(x))",
      "all x.((GrownIn(x,BenSYard) & Contain(x,VitaminC)) -> Healthy(x))",
      "all x.((GrownIn(x,BenSYard) & Healthy(x)) -> -On(x,WarningList))",
      "GrownIn(Cherry,BenSYard)",
      "(-(Healthy(Cherry) & Is(Cherry,Apple)) -> RedFruit(Cherry))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1202,
    "flag": "success",
    "assumptions": [
      "all x.(WorkAt(x,Meta) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -MeansToDestination(x,Bus))",
      "all x.((MeansToDestination(x,Bus) & -MeansToDestination(x,Drive)) | (-MeansToDestination(x,Bus) & MeansToDestination(x,Drive)))",
      "all x.(HaveCar(x) -> MeansToDestination(x,Drive))",
      "all x.(Student(x) -> -MeansToDestination(x,Drive))",
      "(HaveCar(James) | WorkAt(James,Meta))"
    ],
    "goal": "HighIncome(James)"
  },
  {
    "id": 1203,
    "flag": "success",
    "assumptions": [
      "all x.(WorkAt(x,Meta) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -MeansToDestination(x,Bus))",
      "all x.((MeansToDestination(x,Bus) & -MeansToDestination(x,Drive)) | (-MeansToDestination(x,Bus) & MeansToDestination(x,Drive)))",
      "all x.(HaveCar(x) -> MeansToDestination(x,Drive))",
      "all x.(Student(x) -> -MeansToDestination(x,Drive))",
      "(HaveCar(James) | WorkAt(James,Meta))"
    ],
    "goal": "-HighIncome(James)"
  },
  {
    "id": 1204,
    "flag": "success",
    "assumptions": [
      "all x.(WorkAt(x,Meta) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -MeansToDestination(x,Bus))",
      "all x.((MeansToDestination(x,Bus) & -MeansToDestination(x,Drive)) | (-MeansToDestination(x,Bus) & MeansToDestination(x,Drive)))",
      "all x.(HaveCar(x) -> MeansToDestination(x,Drive))",
      "all x.(Student(x) -> -MeansToDestination(x,Drive))",
      "(HaveCar(James) | WorkAt(James,Meta))"
    ],
    "goal": "Student(James)"
  },
  {
    "id": 1205,
    "flag": "success",
    "assumptions": [
      "all x.(WorkAt(x,Meta) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -MeansToDestination(x,Bus))",
      "all x.((MeansToDestination(x,Bus) & -MeansToDestination(x,Drive)) | (-MeansToDestination(x,Bus) & MeansToDestination(x,Drive)))",
      "all x.(HaveCar(x) -> MeansToDestination(x,Drive))",
      "all x.(Student(x) -> -MeansToDestination(x,Drive))",
      "(HaveCar(James) | WorkAt(James,Meta))"
    ],
    "goal": "(MeansToDestination(x,Drive) | Student(James))"
  },
  {
    "id": 1206,
    "flag": "success",
    "assumptions": [
      "all x.(WorkAt(x,Meta) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -MeansToDestination(x,Bus))",
      "all x.((MeansToDestination(x,Bus) & -MeansToDestination(x,Drive)) | (-MeansToDestination(x,Bus) & MeansToDestination(x,Drive)))",
      "all x.(HaveCar(x) -> MeansToDestination(x,Drive))",
      "all x.(Student(x) -> -MeansToDestination(x,Drive))",
      "(HaveCar(James) | WorkAt(James,Meta))"
    ],
    "goal": "((MeansToDestination(x,Drive) & -Student(James)) | (-MeansToDestination(x,Drive) & Student(James)))"
  },
  {
    "id": 1207,
    "flag": "success",
    "assumptions": [
      "all x.(WorkAt(x,Meta) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -MeansToDestination(x,Bus))",
      "all x.((MeansToDestination(x,Bus) & -MeansToDestination(x,Drive)) | (-MeansToDestination(x,Bus) & MeansToDestination(x,Drive)))",
      "all x.(HaveCar(x) -> MeansToDestination(x,Drive))",
      "all x.(Student(x) -> -MeansToDestination(x,Drive))",
      "(HaveCar(James) | WorkAt(James,Meta))"
    ],
    "goal": "(((MeansToDestination(x,Drive) & -Student(James)) | (-MeansToDestination(x,Drive) & Student(James))) -> (HighIncome(James) & Student(James)))"
  },
  {
    "id": 1197,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BusinessConference) -> ((Investor(x) & -Entrepreneur(x)) | (-Investor(x) & Entrepreneur(x))))",
      "all x.((At(x,BusinessConference) & Enjoy(x,OpportunityOfStartingOwnBusiness)) -> -Prefer(x,PlannedEconomy))",
      "all x.((At(x,BusinessConference) & Entrepreneur(x)) -> Enjoy(x,OpportunityOfStartingOwnBusiness))",
      "all x.((At(x,BusinessConference) & Enjoy(x,StateOwnershipOfMeansOfProduction)) -> Prefer(x,PlannedEconomy))",
      "all x.((At(x,BusinessConference) & ArdentCommunist(x)) -> Prefer(x,StateOwnershipOfMeansOfProduction))",
      "(At(Ho,BusinessConference) & Prefer(Ho,StateOwnershipOfMeansOfProduction))"
    ],
    "goal": "-ArdentCommunist(Ho)"
  },
  {
    "id": 1198,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BusinessConference) -> ((Investor(x) & -Entrepreneur(x)) | (-Investor(x) & Entrepreneur(x))))",
      "all x.((At(x,BusinessConference) & Enjoy(x,OpportunityOfStartingOwnBusiness)) -> -Prefer(x,PlannedEconomy))",
      "all x.((At(x,BusinessConference) & Entrepreneur(x)) -> Enjoy(x,OpportunityOfStartingOwnBusiness))",
      "all x.((At(x,BusinessConference) & Enjoy(x,StateOwnershipOfMeansOfProduction)) -> Prefer(x,PlannedEconomy))",
      "all x.((At(x,BusinessConference) & ArdentCommunist(x)) -> Prefer(x,StateOwnershipOfMeansOfProduction))",
      "(At(Ho,BusinessConference) & Prefer(Ho,StateOwnershipOfMeansOfProduction))"
    ],
    "goal": "(Investor(Ho) | -ArdentCommunist(Ho))"
  },
  {
    "id": 708,
    "flag": "success",
    "assumptions": [
      "all x.(TelevisionStar(x) -> -CertifiedPublicAccoutant(x))",
      "all x.(CertifiedPublicAccoutant(x) -> Have(x,GoodBusinessSense))"
    ],
    "goal": "all x.(TelevisionStar(x) -> Have(x,GoodBusinessSense))"
  },
  {
    "id": 1169,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((StudentInTheClass(x) & GoodAt(x,Chemistry)) -> Enjoy(x,ConductingExperiment))",
      "all x.((StudentInTheClass(x) & Enjoy(x,ConductingExperiment)) -> GoodAt(x,Planning))",
      "all x.((StudentInTheClass(x) & GoodAt(x,Planning)) -> -Failed(x,TheClass))",
      "(StudentInTheClass(James) & -((GoodAt(James,Chemistry) & -Failed(James,TheClass)) | (-GoodAt(James,Chemistry) & Failed(James,TheClass))))"
    ],
    "goal": "GoodAt(James,Planning)"
  },
  {
    "id": 1170,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((StudentInTheClass(x) & GoodAt(x,Chemistry)) -> Enjoy(x,ConductingExperiment))",
      "all x.((StudentInTheClass(x) & Enjoy(x,ConductingExperiment)) -> GoodAt(x,Planning))",
      "all x.((StudentInTheClass(x) & GoodAt(x,Planning)) -> -Failed(x,TheClass))",
      "(StudentInTheClass(James) & -((GoodAt(James,Chemistry) & -Failed(James,TheClass)) | (-GoodAt(James,Chemistry) & Failed(James,TheClass))))"
    ],
    "goal": "(GoodAt(James,Chemistry) & GoodAt(James,Math))"
  },
  {
    "id": 1171,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((StudentInTheClass(x) & GoodAt(x,Chemistry)) -> Enjoy(x,ConductingExperiment))",
      "all x.((StudentInTheClass(x) & Enjoy(x,ConductingExperiment)) -> GoodAt(x,Planning))",
      "all x.((StudentInTheClass(x) & GoodAt(x,Planning)) -> -Failed(x,TheClass))",
      "(StudentInTheClass(James) & -((GoodAt(James,Chemistry) & -Failed(James,TheClass)) | (-GoodAt(James,Chemistry) & Failed(James,TheClass))))"
    ],
    "goal": "(Failed(James,James) & GoodAt(James,Math))"
  },
  {
    "id": 1172,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((StudentInTheClass(x) & GoodAt(x,Chemistry)) -> Enjoy(x,ConductingExperiment))",
      "all x.((StudentInTheClass(x) & Enjoy(x,ConductingExperiment)) -> GoodAt(x,Planning))",
      "all x.((StudentInTheClass(x) & GoodAt(x,Planning)) -> -Failed(x,TheClass))",
      "(StudentInTheClass(James) & -((GoodAt(James,Chemistry) & -Failed(James,TheClass)) | (-GoodAt(James,Chemistry) & Failed(James,TheClass))))"
    ],
    "goal": "((GoodAt(James,Chemistry) | Failed(James,TheClass)) -> ((GoodAt(James,Planning) & -GoodAt(James,Math)) | (-GoodAt(James,Planning) & GoodAt(James,Math))))"
  },
  {
    "id": 69,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((Easy(x) & -Hard(x)) | (-Easy(x) & Hard(x)))",
      "[[ERROR]]",
      "Recommended(Twosum)",
      "Starred(Foursum)"
    ],
    "goal": "Easy(Twosum)"
  },
  {
    "id": 70,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((Easy(x) & -Hard(x)) | (-Easy(x) & Hard(x)))",
      "[[ERROR]]",
      "Recommended(Twosum)",
      "Starred(Foursum)"
    ],
    "goal": "Recommended(Foursum)"
  },
  {
    "id": 71,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((Easy(x) & -Hard(x)) | (-Easy(x) & Hard(x)))",
      "[[ERROR]]",
      "Recommended(Twosum)",
      "Starred(Foursum)"
    ],
    "goal": "exists y.(GreaterThan(y,Percent20) & ACRate(2Sum,y))"
  },
  {
    "id": 687,
    "flag": "success",
    "assumptions": [
      "all x.(Rent(x,Car) -> Spend(x,Money))",
      "(GoTo(Sarah,Vermont) -> DriveTo(Sarah,Vermont))",
      "all x y.((((-Own(x,Car) & DriveTo(x,y)) -> Borrow(x,Car)) & -Rent(x,Car)) | (-((-Own(x,Car) & DriveTo(x,y)) -> Borrow(x,Car)) & Rent(x,Car)))",
      "-Own(Sarah,Car)",
      "all x.(Camping(Sarah,x) -> -Borrow(Sarah,Car))",
      "Camping(Sarah,Vermont)",
      "all x y.(Camping(x,y) -> GoTo(x,y))"
    ],
    "goal": "Spend(Sarah,Money)"
  },
  {
    "id": 1008,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Outgoing(x) & Sprited(x)) -> FondOf(x,LargeGroupFunction))",
      "[[ERROR]]"
    ],
    "goal": "(Outgoing(Carol) & Sprited(Carol))"
  },
  {
    "id": 1009,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Outgoing(x) & Sprited(x)) -> FondOf(x,LargeGroupFunction))",
      "[[ERROR]]"
    ],
    "goal": "(PreTeen(Carol) | YoungChild(Carol))"
  },
  {
    "id": 1010,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Outgoing(x) & Sprited(x)) -> FondOf(x,LargeGroupFunction))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1068,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "SatinFinish(RougeDiorColoredLipBalm999)"
  },
  {
    "id": 1069,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "(Refillable(RougeDiorColoredLipBalm999) & RosewoodInDescription(RougeDiorColoredLipBalm999))"
  },
  {
    "id": 1070,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "((Refillable(RougeDiorColoredLipBalm999) & -RosewoodInDescription(RougeDiorColoredLipBalm999)) | (-Refillable(RougeDiorColoredLipBalm999) & RosewoodInDescription(RougeDiorColoredLipBalm999)))"
  },
  {
    "id": 1071,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "-((Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & VelvetFinish(RougeDiorColoredLipBalm999) & Refillable(RougeDiorColoredLipBalm999)) -> (-Refillable(RougeDiorColoredLipBalm999) & -RosewoodInDescription(RougeDiorColoredLipBalm999)))"
  },
  {
    "id": 1072,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1073,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "(((-RosewoodInDescription(RougeEDiorColoredLipBalm999) & -Refillable(RougeDiorColoredLipBalm999)) | (--RosewoodInDescription(RougeEDiorColoredLipBalm999) & Refillable(RougeDiorColoredLipBalm999))) -> RosewoodInDescription(RougeDiorColoredLipBalm999))"
  },
  {
    "id": 1074,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "(((RosewoodInDescription(RougeDiorColoredLipBalm999) & -Refillable(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & Refillable(RougeDiorColoredLipBalm999))) -> -(SatinFinish(RougeDiorColoredLipBalm999) | RosewoodInDescription(RougeDiorColoredLipBalm999)))"
  },
  {
    "id": 1075,
    "flag": "success",
    "assumptions": [
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & VelvetFinish(x)) -> Refillable(x))",
      "[[ERROR]]",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition) & SatinFinish(x)) -> -RosewoodInDescription(x))",
      "all x.((Lipstick(x) & In(x,RougeDiorSet) & In(x,LunarNewYearLimitedEdition)) -> ((RosewoodInDescription(x) & --RosewoodInDescription(x)) | (-RosewoodInDescription(x) & -RosewoodInDescription(x))))",
      "(Lipstick(RougeDiorColoredLipBalm999) & In(RougeDiorColoredLipBalm999,RougeDiorSet) & In(RougeDiorColoredLipBalm999,LunarNewYearLimitedEdition) & ((RosewoodInDescription(RougeDiorColoredLipBalm999) & -VelvetFinish(RougeDiorColoredLipBalm999)) | (-RosewoodInDescription(RougeDiorColoredLipBalm999) & VelvetFinish(RougeDiorColoredLipBalm999))))"
    ],
    "goal": "((Refillable(RougeDiorColoredLipBalm999) | RosewoodInDescription(RougeDiorColoredLipBalm999)) -> ((Refillable(RougeEDiorColoredLipBalm999) & -RosewoodInDescription(RougeDiorColoredLipBalm999)) | (-Refillable(RougeEDiorColoredLipBalm999) & RosewoodInDescription(RougeDiorColoredLipBalm999))))"
  },
  {
    "id": 709,
    "flag": "success",
    "assumptions": [
      "all x.(SenateRepublican(x) -> ElectedOfficial(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 881,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(KnicksPlayer(x) -> NBAPlayer(x))",
      "-((ProfessionalBasketballPlayer(Jim) & -NeverExercises(Jim)) | (-ProfessionalBasketballPlayer(Jim) & NeverExercises(Jim)))"
    ],
    "goal": "KnicksPlayer(Jim)"
  },
  {
    "id": 882,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(KnicksPlayer(x) -> NBAPlayer(x))",
      "-((ProfessionalBasketballPlayer(Jim) & -NeverExercises(Jim)) | (-ProfessionalBasketballPlayer(Jim) & NeverExercises(Jim)))"
    ],
    "goal": "-KnicksPlayer(Jim)"
  },
  {
    "id": 883,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(KnicksPlayer(x) -> NBAPlayer(x))",
      "-((ProfessionalBasketballPlayer(Jim) & -NeverExercises(Jim)) | (-ProfessionalBasketballPlayer(Jim) & NeverExercises(Jim)))"
    ],
    "goal": "Athlete(Jim)"
  },
  {
    "id": 910,
    "flag": "success",
    "assumptions": [
      "all x.(Kid(x) -> Young(x))",
      "all x.(Toddler(x) -> Kid(x))",
      "all x.(Young(x) -> -Elderly(x))",
      "all x.(Pirate(x) -> Seafarer(x))",
      "(-Pirate(Nancy) -> Young(Nancy))",
      "(-Toddler(Nancy) -> Seafarer(Nancy))"
    ],
    "goal": "Pirate(Nancy)"
  },
  {
    "id": 911,
    "flag": "success",
    "assumptions": [
      "all x.(Kid(x) -> Young(x))",
      "all x.(Toddler(x) -> Kid(x))",
      "all x.(Young(x) -> -Elderly(x))",
      "all x.(Pirate(x) -> Seafarer(x))",
      "(-Pirate(Nancy) -> Young(Nancy))",
      "(-Toddler(Nancy) -> Seafarer(Nancy))"
    ],
    "goal": "-((Pirate(Nancy) & -Toddler(Nancy)) | (-Pirate(Nancy) & Toddler(Nancy)))"
  },
  {
    "id": 912,
    "flag": "success",
    "assumptions": [
      "all x.(Kid(x) -> Young(x))",
      "all x.(Toddler(x) -> Kid(x))",
      "all x.(Young(x) -> -Elderly(x))",
      "all x.(Pirate(x) -> Seafarer(x))",
      "(-Pirate(Nancy) -> Young(Nancy))",
      "(-Toddler(Nancy) -> Seafarer(Nancy))"
    ],
    "goal": "((-((Pirate(Nancy) & -Toddler(Nancy)) | (-Pirate(Nancy) & Toddler(Nancy))) -> Young(Nancy)) & Kid(Nancy))"
  },
  {
    "id": 201,
    "flag": "success",
    "assumptions": [
      "(DirectedBy(AfterTiller,LanaWilson) & DirectedBy(TheDeparture,LanaWilson) & DirectedBy(MissAmericana,LanaWilson))",
      "all x y.(DirectedBy(x,y) -> Filmmaker(y))",
      "Documentary(AfterTiller)",
      "all x.(Documentary(x) -> Film(x))",
      "From(LanaWilson,Kirkland)",
      "In(Kirkland,UnitedStates)",
      "all x y z.((From(x,y) & In(y,z)) -> From(x,z))",
      "Nomination(AfterTiller,TheIndependentSpiritAwardForBestDocumentary)"
    ],
    "goal": "(From(LanaWilson,UnitedStates) & Filmmaker(LanaWilson))"
  },
  {
    "id": 202,
    "flag": "success",
    "assumptions": [
      "(DirectedBy(AfterTiller,LanaWilson) & DirectedBy(TheDeparture,LanaWilson) & DirectedBy(MissAmericana,LanaWilson))",
      "all x y.(DirectedBy(x,y) -> Filmmaker(y))",
      "Documentary(AfterTiller)",
      "all x.(Documentary(x) -> Film(x))",
      "From(LanaWilson,Kirkland)",
      "In(Kirkland,UnitedStates)",
      "all x y z.((From(x,y) & In(y,z)) -> From(x,z))",
      "Nomination(AfterTiller,TheIndependentSpiritAwardForBestDocumentary)"
    ],
    "goal": "-exists x.(Filmmaker(x) & From(x,Kirkland) & DirectedBy(MissAmericana,x))"
  },
  {
    "id": 203,
    "flag": "success",
    "assumptions": [
      "(DirectedBy(AfterTiller,LanaWilson) & DirectedBy(TheDeparture,LanaWilson) & DirectedBy(MissAmericana,LanaWilson))",
      "all x y.(DirectedBy(x,y) -> Filmmaker(y))",
      "Documentary(AfterTiller)",
      "all x.(Documentary(x) -> Film(x))",
      "From(LanaWilson,Kirkland)",
      "In(Kirkland,UnitedStates)",
      "all x y z.((From(x,y) & In(y,z)) -> From(x,z))",
      "Nomination(AfterTiller,TheIndependentSpiritAwardForBestDocumentary)"
    ],
    "goal": "FilmmakerAward(LanaWilson,TheIndependentSpiritAwardForBestDocumentary)"
  },
  {
    "id": 725,
    "flag": "success",
    "assumptions": [
      "all x.((Bear(x) & In(x,Zoo)) -> -Wild(x))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(Bear(x) & -Wild(x))"
  },
  {
    "id": 165,
    "flag": "success",
    "assumptions": [
      "all x.(Leader(x) -> HavePower(x))",
      "all x.(Leader(x) -> ((King(x) & -Queen(x)) | (-King(x) & Queen(x))))",
      "all x.(Queen(x) -> Female(x))",
      "all x.(King(x) -> Male(x))",
      "Queen(Elizabeth)",
      "Leader(Elizabeth)"
    ],
    "goal": "King(Elizabeth)"
  },
  {
    "id": 166,
    "flag": "success",
    "assumptions": [
      "all x.(Leader(x) -> HavePower(x))",
      "all x.(Leader(x) -> ((King(x) & -Queen(x)) | (-King(x) & Queen(x))))",
      "all x.(Queen(x) -> Female(x))",
      "all x.(King(x) -> Male(x))",
      "Queen(Elizabeth)",
      "Leader(Elizabeth)"
    ],
    "goal": "HavePower(Elizabeth)"
  },
  {
    "id": 167,
    "flag": "success",
    "assumptions": [
      "all x.(Leader(x) -> HavePower(x))",
      "all x.(Leader(x) -> ((King(x) & -Queen(x)) | (-King(x) & Queen(x))))",
      "all x.(Queen(x) -> Female(x))",
      "all x.(King(x) -> Male(x))",
      "Queen(Elizabeth)",
      "Leader(Elizabeth)"
    ],
    "goal": "Leader(Elizabeth)"
  },
  {
    "id": 976,
    "flag": "success",
    "assumptions": [
      "all x.((GoTo(x,ClaysSchool) & MakeWith(x,TheirOwnMatchTea,CeremonialGradePowder)) -> -(WakeUpLate(x) & StartPastNoonRegularly(x,Schedule)))",
      "all x.((GoTo(x,ClaysSchool) & LiveIn(x,California) & AttendRegularly(x,YogaClass)) -> MakeWith(x,OwnMatch,CeremonialGradePowder))",
      "all x.((GoTo(x,ClaysSchool) & WorkInAs(x,EntertainmentIndustry,HighProfileCelebrity)) -> (WakeUpLate(x) & StartPastNoonRegularly(x,Schedule)))",
      "all x.((GoTo(x,ClaysSchool) & -(Have(x,y) & Regular(y) & NineToFiveJob(y))) -> WorkInAs(x,EntertainmentIndustry,HighProfileCelebrity))",
      "all x.((GoTo(x,ClaysSchool) & Prefer(x,WorkingAtHome,GoingToTheOffice)) -> -(Have(x,y) & Regular(y) & NineToFiveJob(y)))",
      "(GoTo(Bunny,ClaysSchool) & -((Prefer(Bunny,WorkingAtHome,GoingToTheOffice) & -MakeWith(Bunny,TheirOwnMatchTea,CeremonialGradePowder)) | (-Prefer(Bunny,WorkingAtHome,GoingToTheOffice) & MakeWith(Bunny,TheirOwnMatchTea,CeremonialGradePowder))))"
    ],
    "goal": "(Have(Bunny,y) & Regular(y) & NineToFiveJob(y))"
  },
  {
    "id": 977,
    "flag": "success",
    "assumptions": [
      "all x.((GoTo(x,ClaysSchool) & MakeWith(x,TheirOwnMatchTea,CeremonialGradePowder)) -> -(WakeUpLate(x) & StartPastNoonRegularly(x,Schedule)))",
      "all x.((GoTo(x,ClaysSchool) & LiveIn(x,California) & AttendRegularly(x,YogaClass)) -> MakeWith(x,OwnMatch,CeremonialGradePowder))",
      "all x.((GoTo(x,ClaysSchool) & WorkInAs(x,EntertainmentIndustry,HighProfileCelebrity)) -> (WakeUpLate(x) & StartPastNoonRegularly(x,Schedule)))",
      "all x.((GoTo(x,ClaysSchool) & -(Have(x,y) & Regular(y) & NineToFiveJob(y))) -> WorkInAs(x,EntertainmentIndustry,HighProfileCelebrity))",
      "all x.((GoTo(x,ClaysSchool) & Prefer(x,WorkingAtHome,GoingToTheOffice)) -> -(Have(x,y) & Regular(y) & NineToFiveJob(y)))",
      "(GoTo(Bunny,ClaysSchool) & -((Prefer(Bunny,WorkingAtHome,GoingToTheOffice) & -MakeWith(Bunny,TheirOwnMatchTea,CeremonialGradePowder)) | (-Prefer(Bunny,WorkingAtHome,GoingToTheOffice) & MakeWith(Bunny,TheirOwnMatchTea,CeremonialGradePowder))))"
    ],
    "goal": "(LiveIn(Bunny,California) & AttendRegularly(Bunny,YogaClass))"
  },
  {
    "id": 978,
    "flag": "success",
    "assumptions": [
      "all x.((GoTo(x,ClaysSchool) & MakeWith(x,TheirOwnMatchTea,CeremonialGradePowder)) -> -(WakeUpLate(x) & StartPastNoonRegularly(x,Schedule)))",
      "all x.((GoTo(x,ClaysSchool) & LiveIn(x,California) & AttendRegularly(x,YogaClass)) -> MakeWith(x,OwnMatch,CeremonialGradePowder))",
      "all x.((GoTo(x,ClaysSchool) & WorkInAs(x,EntertainmentIndustry,HighProfileCelebrity)) -> (WakeUpLate(x) & StartPastNoonRegularly(x,Schedule)))",
      "all x.((GoTo(x,ClaysSchool) & -(Have(x,y) & Regular(y) & NineToFiveJob(y))) -> WorkInAs(x,EntertainmentIndustry,HighProfileCelebrity))",
      "all x.((GoTo(x,ClaysSchool) & Prefer(x,WorkingAtHome,GoingToTheOffice)) -> -(Have(x,y) & Regular(y) & NineToFiveJob(y)))",
      "(GoTo(Bunny,ClaysSchool) & -((Prefer(Bunny,WorkingAtHome,GoingToTheOffice) & -MakeWith(Bunny,TheirOwnMatchTea,CeremonialGradePowder)) | (-Prefer(Bunny,WorkingAtHome,GoingToTheOffice) & MakeWith(Bunny,TheirOwnMatchTea,CeremonialGradePowder))))"
    ],
    "goal": "-(Prefer(Bunny,WorkingAtHome,GoingToTheOffice) | (LiveIn(Bunny,California) & AttendRegularly(Bunny,YogaClass)))"
  },
  {
    "id": 54,
    "flag": "success",
    "assumptions": [
      "(English(ThomasBarber) & ProfessionalFootballer(ThomasBarber))",
      "(PlayedFor(ThomasBarber,AstonVilla) & PlayedIn(AstonVilla,TheFootballLeague))",
      "(PlayedAs(ThomasBarber,HalfBack) & PlayedAs(ThomasBarber,InsideLeft))",
      "ScoredTheWinningGoalIn(ThomasBarber,Facupfinal1913)"
    ],
    "goal": "(PlayedFor(ThomasBarber,BoltonWanderers) & PlayedIn(BoltonWanderers,TheFootballLeague))"
  },
  {
    "id": 55,
    "flag": "success",
    "assumptions": [
      "(English(ThomasBarber) & ProfessionalFootballer(ThomasBarber))",
      "(PlayedFor(ThomasBarber,AstonVilla) & PlayedIn(AstonVilla,TheFootballLeague))",
      "(PlayedAs(ThomasBarber,HalfBack) & PlayedAs(ThomasBarber,InsideLeft))",
      "ScoredTheWinningGoalIn(ThomasBarber,Facupfinal1913)"
    ],
    "goal": "PlayedAs(ThomasBarber,InsideLeft)"
  },
  {
    "id": 56,
    "flag": "success",
    "assumptions": [
      "(English(ThomasBarber) & ProfessionalFootballer(ThomasBarber))",
      "(PlayedFor(ThomasBarber,AstonVilla) & PlayedIn(AstonVilla,TheFootballLeague))",
      "(PlayedAs(ThomasBarber,HalfBack) & PlayedAs(ThomasBarber,InsideLeft))",
      "ScoredTheWinningGoalIn(ThomasBarber,Facupfinal1913)"
    ],
    "goal": "exists x.(English(x) & ProfessionalFootballer(x) & ScoredTheWinningGoalIn(x,Facupfinal1913))"
  },
  {
    "id": 464,
    "flag": "success",
    "assumptions": [
      "all x y.(PlayIn(y,x,Concert) -> GoodAtPlaying(y,x))",
      "(Play(Peter,Piano) & Play(Peter,Violin) & Play(Peter,Saxophone))",
      "PlayIn(Peter,Piano,Concert)",
      "exists x y.(PlayIn(Peter,x,Concert) & PlayIn(Oliver,y,Concert))",
      "all x.(PlayIn(Oliver,x,Concert) -> -PlayIn(Peter,y,Concert))"
    ],
    "goal": "PlayIn(Oliver,Piano,Concert)"
  },
  {
    "id": 465,
    "flag": "success",
    "assumptions": [
      "all x y.(PlayIn(y,x,Concert) -> GoodAtPlaying(y,x))",
      "(Play(Peter,Piano) & Play(Peter,Violin) & Play(Peter,Saxophone))",
      "PlayIn(Peter,Piano,Concert)",
      "exists x y.(PlayIn(Peter,x,Concert) & PlayIn(Oliver,y,Concert))",
      "all x.(PlayIn(Oliver,x,Concert) -> -PlayIn(Peter,y,Concert))"
    ],
    "goal": "PlayIn(Oliver,Violin,Concert)"
  },
  {
    "id": 466,
    "flag": "success",
    "assumptions": [
      "all x y.(PlayIn(y,x,Concert) -> GoodAtPlaying(y,x))",
      "(Play(Peter,Piano) & Play(Peter,Violin) & Play(Peter,Saxophone))",
      "PlayIn(Peter,Piano,Concert)",
      "exists x y.(PlayIn(Peter,x,Concert) & PlayIn(Oliver,y,Concert))",
      "all x.(PlayIn(Oliver,x,Concert) -> -PlayIn(Peter,y,Concert))"
    ],
    "goal": "GoodAtPlaying(Peter,Piano)"
  },
  {
    "id": 1307,
    "flag": "success",
    "assumptions": [
      "all x.(CanControl(x,Breath) -> FunctionalBrainStem(x))",
      "all x.((Human(x) & CanSwim(x)) -> CanControl(x,Breath))",
      "all x.(Human(x) -> (CanSwim(x) | CanWalk(x)))",
      "all x.((Human(x) & CanWalk(x)) -> CanStandOnTheGround(x,Themselves))",
      "all x.((Human(x) & FunctionalBrainStem(x)) -> CanControl(x,Balance))",
      "[[ERROR]]",
      "(Human(George) & Human(Archie))",
      "(CanControl(George,Balance) & CanSwim(George))",
      "-((CanWalk(Archie) & -FunctionalBrainStem(x)) | (-CanWalk(Archie) & FunctionalBrainStem(x)))"
    ],
    "goal": "FunctionalLegMuscle(Archie)"
  },
  {
    "id": 1308,
    "flag": "success",
    "assumptions": [
      "all x.(CanControl(x,Breath) -> FunctionalBrainStem(x))",
      "all x.((Human(x) & CanSwim(x)) -> CanControl(x,Breath))",
      "all x.(Human(x) -> (CanSwim(x) | CanWalk(x)))",
      "all x.((Human(x) & CanWalk(x)) -> CanStandOnTheGround(x,Themselves))",
      "all x.((Human(x) & FunctionalBrainStem(x)) -> CanControl(x,Balance))",
      "[[ERROR]]",
      "(Human(George) & Human(Archie))",
      "(CanControl(George,Balance) & CanSwim(George))",
      "-((CanWalk(Archie) & -FunctionalBrainStem(x)) | (-CanWalk(Archie) & FunctionalBrainStem(x)))"
    ],
    "goal": "(FunctionalLegMuscle(Archie) & CanControl(Archie,Balance))"
  },
  {
    "id": 1309,
    "flag": "success",
    "assumptions": [
      "all x.(CanControl(x,Breath) -> FunctionalBrainStem(x))",
      "all x.((Human(x) & CanSwim(x)) -> CanControl(x,Breath))",
      "all x.(Human(x) -> (CanSwim(x) | CanWalk(x)))",
      "all x.((Human(x) & CanWalk(x)) -> CanStandOnTheGround(x,Themselves))",
      "all x.((Human(x) & FunctionalBrainStem(x)) -> CanControl(x,Balance))",
      "[[ERROR]]",
      "(Human(George) & Human(Archie))",
      "(CanControl(George,Balance) & CanSwim(George))",
      "-((CanWalk(Archie) & -FunctionalBrainStem(x)) | (-CanWalk(Archie) & FunctionalBrainStem(x)))"
    ],
    "goal": "(-CanControl(Archie,Balance) & -FunctionalLegMuscle(x))"
  },
  {
    "id": 668,
    "flag": "success",
    "assumptions": [
      "(Finding(CancerBiology,GeneticAlteration) & Confer(GeneticAlteration,SelectiveAdvantage,ToCancerCell))",
      "exists x y.(CancerResearcher(x) & Ranked(x,ImportanceOfSubstitutionsToCancerGrowth) & PValue(y) & RankedBy(ImportanceOfSubstitutionsToCancerGrowth,y))",
      "all x.((PValue(x) -> ThresholdForBelief(x)) & -MetricOfEffect(x))"
    ],
    "goal": "exists x y.(CancerResearcher(x) & Use(x,CancerEffectSize) & UsedToDetermine(CancerEffectSize,RelativeImportanceOfGeneteticAlterations))"
  },
  {
    "id": 669,
    "flag": "success",
    "assumptions": [
      "(Finding(CancerBiology,GeneticAlteration) & Confer(GeneticAlteration,SelectiveAdvantage,ToCancerCell))",
      "exists x y.(CancerResearcher(x) & Ranked(x,ImportanceOfSubstitutionsToCancerGrowth) & PValue(y) & RankedBy(ImportanceOfSubstitutionsToCancerGrowth,y))",
      "all x.((PValue(x) -> ThresholdForBelief(x)) & -MetricOfEffect(x))"
    ],
    "goal": "SelectionIntensitySomaticVariants(PValue)"
  },
  {
    "id": 670,
    "flag": "success",
    "assumptions": [
      "(Finding(CancerBiology,GeneticAlteration) & Confer(GeneticAlteration,SelectiveAdvantage,ToCancerCell))",
      "exists x y.(CancerResearcher(x) & Ranked(x,ImportanceOfSubstitutionsToCancerGrowth) & PValue(y) & RankedBy(ImportanceOfSubstitutionsToCancerGrowth,y))",
      "all x.((PValue(x) -> ThresholdForBelief(x)) & -MetricOfEffect(x))"
    ],
    "goal": "Preferred(CancerResearchers,CancerEffectSize)"
  },
  {
    "id": 671,
    "flag": "success",
    "assumptions": [
      "(Finding(CancerBiology,GeneticAlteration) & Confer(GeneticAlteration,SelectiveAdvantage,ToCancerCell))",
      "exists x y.(CancerResearcher(x) & Ranked(x,ImportanceOfSubstitutionsToCancerGrowth) & PValue(y) & RankedBy(ImportanceOfSubstitutionsToCancerGrowth,y))",
      "all x.((PValue(x) -> ThresholdForBelief(x)) & -MetricOfEffect(x))"
    ],
    "goal": "all x.(PValue(x) -> -MetricsOfEffect(x))"
  },
  {
    "id": 1402,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1403,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1404,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1405,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 697,
    "flag": "success",
    "assumptions": [
      "all x.(Reptile(x) -> -Have(x,Fur))",
      "all x.(Snake(x) -> Reptile(x))"
    ],
    "goal": "exists x.(Snake(x) & Have(x,Fur))"
  },
  {
    "id": 177,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 178,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 179,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1304,
    "flag": "success",
    "assumptions": [
      "all x.(Bird(x) -> -Ectothermic(x))",
      "all x.(Penguin(x) -> Bird(x))",
      "all x.((Animal(x) -> Ectothermic(x)) | Endothermic(x))",
      "all x.(Endothermic(x) -> ProduceWithIn(x,Heat,Body))",
      "(Animal(Ron) & Animal(Henry))",
      "(-Bird(Ron) & -ProduceWithIn(Ron,Heat,Body))",
      "(-Cat(Henry) & -ProduceWithIn(Henry,Heat,Body))"
    ],
    "goal": "Cat(Ron)"
  },
  {
    "id": 1305,
    "flag": "success",
    "assumptions": [
      "all x.(Bird(x) -> -Ectothermic(x))",
      "all x.(Penguin(x) -> Bird(x))",
      "all x.((Animal(x) -> Ectothermic(x)) | Endothermic(x))",
      "all x.(Endothermic(x) -> ProduceWithIn(x,Heat,Body))",
      "(Animal(Ron) & Animal(Henry))",
      "(-Bird(Ron) & -ProduceWithIn(Ron,Heat,Body))",
      "(-Cat(Henry) & -ProduceWithIn(Henry,Heat,Body))"
    ],
    "goal": "((Penguin(Henry) & -Endothermic(Henry)) | (-Penguin(Henry) & Endothermic(Henry)))"
  },
  {
    "id": 1306,
    "flag": "success",
    "assumptions": [
      "all x.(Bird(x) -> -Ectothermic(x))",
      "all x.(Penguin(x) -> Bird(x))",
      "all x.((Animal(x) -> Ectothermic(x)) | Endothermic(x))",
      "all x.(Endothermic(x) -> ProduceWithIn(x,Heat,Body))",
      "(Animal(Ron) & Animal(Henry))",
      "(-Bird(Ron) & -ProduceWithIn(Ron,Heat,Body))",
      "(-Cat(Henry) & -ProduceWithIn(Henry,Heat,Body))"
    ],
    "goal": "-((Penguin(Ron) & -Endothermic(Henry)) | (-Penguin(Ron) & Endothermic(Henry)))"
  },
  {
    "id": 221,
    "flag": "success",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(KnownSpeciesOf(x,Ambiortus) -> IsSpecies(x,Ambiortus))",
      "LiveIn(AmbiortusDementjevi,Mongolia)",
      "Discover(Yevgenykurochkin,Ambiortus)"
    ],
    "goal": "exists x.(Discover(Yevgenykurochkin,x) & BirdGenus(x))"
  },
  {
    "id": 222,
    "flag": "success",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(KnownSpeciesOf(x,Ambiortus) -> IsSpecies(x,Ambiortus))",
      "LiveIn(AmbiortusDementjevi,Mongolia)",
      "Discover(Yevgenykurochkin,Ambiortus)"
    ],
    "goal": "exists x.(KnownSpeciesOf(x,Ambiortus) & -LiveIn(x,Mongolia))"
  },
  {
    "id": 223,
    "flag": "success",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(KnownSpeciesOf(x,Ambiortus) -> IsSpecies(x,Ambiortus))",
      "LiveIn(AmbiortusDementjevi,Mongolia)",
      "Discover(Yevgenykurochkin,Ambiortus)"
    ],
    "goal": "LiveIn(Yevgenykurochkin,Mongolia)"
  },
  {
    "id": 224,
    "flag": "success",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(KnownSpeciesOf(x,Ambiortus) -> IsSpecies(x,Ambiortus))",
      "LiveIn(AmbiortusDementjevi,Mongolia)",
      "Discover(Yevgenykurochkin,Ambiortus)"
    ],
    "goal": "all x.(SpeciesOf(x,Ambiortus) -> LiveIn(x,Mongolia))"
  },
  {
    "id": 1289,
    "flag": "success",
    "assumptions": [
      "all x.(Know(x,BreathFirstSearch) -> Know(x,HowToUseQueue))",
      "all x.((Seasoned(x) & SoftwareEngineerInterviewer(x) & At(x,Google)) -> Know(x,BreathFirstSearch))",
      "all x.((Seasoned(x) & SoftwareEngineerInterviewer(x) & At(x,Google)) | Have(x,HumanRights))",
      "all x.(Have(x,HumanRights) -> EntitledTo(x,RightToLifeAndLiberty))",
      "all x.(Know(x,HowToUseQueue) -> Know(x,FirstInFirstOutDataStructure))",
      "all x.(EntitledTo(x,RightToLifeAndLiberty) -> -DeprivedOfWithout(x,Rights,DueProcessOfLaw))",
      "(EntitledTo(Jack,RightToLifeAndLiberty) | Have(Jack,HumanRights) | Know(Jack,FirstInFirstOutDataStructure))"
    ],
    "goal": "(Seasoned(Jack) & SoftwareEngineerInterviewer(Jack) & At(Jack,Google))"
  },
  {
    "id": 1290,
    "flag": "success",
    "assumptions": [
      "all x.(Know(x,BreathFirstSearch) -> Know(x,HowToUseQueue))",
      "all x.((Seasoned(x) & SoftwareEngineerInterviewer(x) & At(x,Google)) -> Know(x,BreathFirstSearch))",
      "all x.((Seasoned(x) & SoftwareEngineerInterviewer(x) & At(x,Google)) | Have(x,HumanRights))",
      "all x.(Have(x,HumanRights) -> EntitledTo(x,RightToLifeAndLiberty))",
      "all x.(Know(x,HowToUseQueue) -> Know(x,FirstInFirstOutDataStructure))",
      "all x.(EntitledTo(x,RightToLifeAndLiberty) -> -DeprivedOfWithout(x,Rights,DueProcessOfLaw))",
      "(EntitledTo(Jack,RightToLifeAndLiberty) | Have(Jack,HumanRights) | Know(Jack,FirstInFirstOutDataStructure))"
    ],
    "goal": "-DeprivedOfWithout(Jack,Rights,DueProcessOfLaw)"
  },
  {
    "id": 1291,
    "flag": "success",
    "assumptions": [
      "all x.(Know(x,BreathFirstSearch) -> Know(x,HowToUseQueue))",
      "all x.((Seasoned(x) & SoftwareEngineerInterviewer(x) & At(x,Google)) -> Know(x,BreathFirstSearch))",
      "all x.((Seasoned(x) & SoftwareEngineerInterviewer(x) & At(x,Google)) | Have(x,HumanRights))",
      "all x.(Have(x,HumanRights) -> EntitledTo(x,RightToLifeAndLiberty))",
      "all x.(Know(x,HowToUseQueue) -> Know(x,FirstInFirstOutDataStructure))",
      "all x.(EntitledTo(x,RightToLifeAndLiberty) -> -DeprivedOfWithout(x,Rights,DueProcessOfLaw))",
      "(EntitledTo(Jack,RightToLifeAndLiberty) | Have(Jack,HumanRights) | Know(Jack,FirstInFirstOutDataStructure))"
    ],
    "goal": "DeprivedOfWithout(Jack,Rights,DueProcessOfLaw)"
  },
  {
    "id": 7,
    "flag": "success",
    "assumptions": [
      "RenamedAs(FortCarillon,FortTiconderoga)",
      "Built(PierredeRigauddeVaudreuil,FortCarillon)",
      "LocatedIn(FortCarillon,NewFrance)",
      "-LocatedIn(NewFrance,Europe)"
    ],
    "goal": "exists x.(Built(PierredeRigauddeVaudreuil,x) & LocatedIn(x,NewFrance))"
  },
  {
    "id": 8,
    "flag": "success",
    "assumptions": [
      "RenamedAs(FortCarillon,FortTiconderoga)",
      "Built(PierredeRigauddeVaudreuil,FortCarillon)",
      "LocatedIn(FortCarillon,NewFrance)",
      "-LocatedIn(NewFrance,Europe)"
    ],
    "goal": "exists x.(Built(PierredeRigauddeVaudreuil,x) & LocatedIn(x,NewEngland))"
  },
  {
    "id": 9,
    "flag": "success",
    "assumptions": [
      "RenamedAs(FortCarillon,FortTiconderoga)",
      "Built(PierredeRigauddeVaudreuil,FortCarillon)",
      "LocatedIn(FortCarillon,NewFrance)",
      "-LocatedIn(NewFrance,Europe)"
    ],
    "goal": "LocatedIn(FortCarillon,Europe)"
  },
  {
    "id": 840,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalSoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "all x.(ProfessionalCenterback(x) -> ProfessionalSoccerDefender(x))",
      "(((NBAPlayer(Stephencurry) & -ProfessionalSoccerPlayer(Stephencurry)) | (-NBAPlayer(Stephencurry) & ProfessionalSoccerPlayer(Stephencurry))) -> ProfessionalBasketballPlayer(Stephencurry))"
    ],
    "goal": "NBAPlayer(StephenCurry)"
  },
  {
    "id": 841,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalSoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "all x.(ProfessionalCenterback(x) -> ProfessionalSoccerDefender(x))",
      "(((NBAPlayer(Stephencurry) & -ProfessionalSoccerPlayer(Stephencurry)) | (-NBAPlayer(Stephencurry) & ProfessionalSoccerPlayer(Stephencurry))) -> ProfessionalBasketballPlayer(Stephencurry))"
    ],
    "goal": "ProfessionalCenterback(StephenCurry)"
  },
  {
    "id": 842,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalSoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "all x.(ProfessionalCenterback(x) -> ProfessionalSoccerDefender(x))",
      "(((NBAPlayer(Stephencurry) & -ProfessionalSoccerPlayer(Stephencurry)) | (-NBAPlayer(Stephencurry) & ProfessionalSoccerPlayer(Stephencurry))) -> ProfessionalBasketballPlayer(Stephencurry))"
    ],
    "goal": "-ProfessionalCenterback(StephenCurry)"
  },
  {
    "id": 1415,
    "flag": "success",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "(-FolkSong(Mac) & -ScifiMovie(Mac))"
    ],
    "goal": "FolkSong(Inception)"
  },
  {
    "id": 1416,
    "flag": "success",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "(-FolkSong(Mac) & -ScifiMovie(Mac))"
    ],
    "goal": "-FolkSong(Inception)"
  },
  {
    "id": 1417,
    "flag": "success",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "(-FolkSong(Mac) & -ScifiMovie(Mac))"
    ],
    "goal": "((Video(Inception) & -FolkSong(Inception)) | (-Video(Inception) & FolkSong(Inception)))"
  },
  {
    "id": 1418,
    "flag": "success",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "(-FolkSong(Mac) & -ScifiMovie(Mac))"
    ],
    "goal": "Video(Mac)"
  },
  {
    "id": 1060,
    "flag": "success",
    "assumptions": [
      "all x.(InductiveReasoning(x) -> DeriveFrom(GeneralPrinciple,Observations))",
      "[[ERROR]]",
      "all x.(DeductiveReasoning(x) -> (BasedOn(x,Fact) | BasedOn(x,Rule)))",
      "all x.((BasedOn(x,Fact) | BasedOn(x,Rule)) -> -UsedFor(x,StatisticalGeneralization))",
      "-(InductiveReasoning(ModusPonens) & UsedFor(ModusPonens,StatisticalGeneralization))",
      "ArgumentForm(ModusPonens)"
    ],
    "goal": "(BasedOn(x,Fact) | BasedOn(x,Rule))"
  },
  {
    "id": 1061,
    "flag": "success",
    "assumptions": [
      "all x.(InductiveReasoning(x) -> DeriveFrom(GeneralPrinciple,Observations))",
      "[[ERROR]]",
      "all x.(DeductiveReasoning(x) -> (BasedOn(x,Fact) | BasedOn(x,Rule)))",
      "all x.((BasedOn(x,Fact) | BasedOn(x,Rule)) -> -UsedFor(x,StatisticalGeneralization))",
      "-(InductiveReasoning(ModusPonens) & UsedFor(ModusPonens,StatisticalGeneralization))",
      "ArgumentForm(ModusPonens)"
    ],
    "goal": "(DeriveFrom(GeneralPrinciple,Observations) & UsedFor(x,StatisticalGeneralization))"
  },
  {
    "id": 1062,
    "flag": "success",
    "assumptions": [
      "all x.(InductiveReasoning(x) -> DeriveFrom(GeneralPrinciple,Observations))",
      "[[ERROR]]",
      "all x.(DeductiveReasoning(x) -> (BasedOn(x,Fact) | BasedOn(x,Rule)))",
      "all x.((BasedOn(x,Fact) | BasedOn(x,Rule)) -> -UsedFor(x,StatisticalGeneralization))",
      "-(InductiveReasoning(ModusPonens) & UsedFor(ModusPonens,StatisticalGeneralization))",
      "ArgumentForm(ModusPonens)"
    ],
    "goal": "(-((Derive(GeneralPrinciple,Observations) & -UsedFor(x,StatisticalGeneralization)) | (-Derive(GeneralPrinciple,Observations) & UsedFor(x,StatisticalGeneralization))) -> (-InductiveReasoning(ModusPonens) & -UsedFor(ModusPonens,StatisticalGeneralization)))"
  },
  {
    "id": 1133,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "StruggleAt(Jack,HalfCourtShot)"
  },
  {
    "id": 1134,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "BadAt(Jack,MidRangeShot)"
  },
  {
    "id": 1135,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "(GoodAt(Jack,Twos) | BadAt(Jack,MidRangeShot))"
  },
  {
    "id": 1136,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "((GoodAt(Jack,Twos) & -BadAt(Jack,MidRangeShot)) | (-GoodAt(Jack,Twos) & BadAt(Jack,MidRangeShot)))"
  },
  {
    "id": 1137,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1138,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "((TrickShotArtist(Jack) & -BadAt(Jack,MidRangeShots)) | (-TrickShotArtist(Jack) & BadAt(Jack,MidRangeShots)))"
  },
  {
    "id": 1139,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "((GoodAt(Jack,Threes) & -BadAt(Jack,MidRangeShot)) | (-GoodAt(Jack,Threes) & BadAt(Jack,MidRangeShot)))"
  },
  {
    "id": 1140,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "(((BadAt(Jack,MidRangeShot) & GoodAt(Jack,Twos)) -> -GoodAt(Jack,Twos)) & GoodAt(Jack,Threes))"
  },
  {
    "id": 1141,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,YaleSVarsityTeam) & TrickShotArtist(x)) -> -StruggleAt(x,HalfCourtShot))",
      "all x.(In(x,YaleSVarsityTeam) -> (StruggleAt(x,HalfCourtShot) | GoodAt(x,Threes)))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Threes)) -> GoodAt(x,Twos))",
      "all x.((In(x,YaleSVarsityTeam) & GoodAt(x,Twos)) -> BadAt(x,MidRangeShot))",
      "(In(Jack,YaleSVarsityTeam) & ((TrickShotArtist(Jack) & -GoodAt(Jack,Threes)) | (-TrickShotArtist(Jack) & GoodAt(Jack,Threes))))"
    ],
    "goal": "(((GoodAt(Jack,Twos) | GoodAt(Jack,Threes)) -> BadAt(Jack,HalfCourtShot)) & BadAt(Jack,MidRangeShot))"
  },
  {
    "id": 715,
    "flag": "success",
    "assumptions": [
      "all x.(Plant(x) -> -Fungi(x))",
      "all x.(Mushroom(x) -> Fungi(x))"
    ],
    "goal": "all x.(Plant(x) -> -Mushroom(x))"
  },
  {
    "id": 735,
    "flag": "success",
    "assumptions": [
      "all x.(Road(x) -> -Dustless(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 628,
    "flag": "success",
    "assumptions": [
      "LocatedOn(NewYorkCity,EastCoast)",
      "LocatedOn(Seattle,WestCoast)",
      "all x y z.((TravelingFrom(x,y) & LocatedOn(y,Eastcoast) & TravelingTo(x,z) & LocatedOn(z,Westcoast)) -> OnLongFlight(x))",
      "all x.((InBuisnessClass(x) & TravelingTo(x,Seattle) & TravelingFrom(x,NewYorkCity)) -> -InFirstClass(x))",
      "all x.((OnLongFlight(x) & -InFirstClass(x)) -> Uncomfortable(x))"
    ],
    "goal": "exists x.(TravelingTo(x,Seattle) & TravelingFrom(x,NewYorkCity) & Uncomfortable(x))"
  },
  {
    "id": 355,
    "flag": "success",
    "assumptions": [
      "all x.(Musician(x) -> Have(x,BusyLife))",
      "(Musician(SinghKaur) & Famous(SinghKaur))",
      "all x.((Musician(x) & -Famous(x)) -> -MakeALotOfMoney(x))",
      "exists x.(Musician(x) & (Singer(x) | Writer(x)))"
    ],
    "goal": "MakeALotOfMoney(SinghKaur)"
  },
  {
    "id": 356,
    "flag": "success",
    "assumptions": [
      "all x.(Musician(x) -> Have(x,BusyLife))",
      "(Musician(SinghKaur) & Famous(SinghKaur))",
      "all x.((Musician(x) & -Famous(x)) -> -MakeALotOfMoney(x))",
      "exists x.(Musician(x) & (Singer(x) | Writer(x)))"
    ],
    "goal": "Writer(SinghKaur)"
  },
  {
    "id": 357,
    "flag": "success",
    "assumptions": [
      "all x.(Musician(x) -> Have(x,BusyLife))",
      "(Musician(SinghKaur) & Famous(SinghKaur))",
      "all x.((Musician(x) & -Famous(x)) -> -MakeALotOfMoney(x))",
      "exists x.(Musician(x) & (Singer(x) | Writer(x)))"
    ],
    "goal": "Have(SinghKaur,BusyLife)"
  },
  {
    "id": 728,
    "flag": "success",
    "assumptions": [
      "all x.(Building(x) -> Tall(x))",
      "all x.(Tall(x) -> Height(x))"
    ],
    "goal": "all x.(Building(x) -> Magnificent(x))"
  },
  {
    "id": 375,
    "flag": "success",
    "assumptions": [
      "(Cat(Garfield) & MainCharacterOf(Garfield,FilmGarfield) & Orange(Garfield) & Fat(Garfield) & Like(Garfield,Lasagna))",
      "(PetOf(Garfield,Jon) & PetOf(Odie,Jon) & ShareHomeWith(Garfield,Odie))",
      "Hate(Garfield,Odie)",
      "all x y.exists z.(((PetOf(x,z) & PetOf(y,z) & Hate(x,y)) -> Childish(x)) & Possessive(x))"
    ],
    "goal": "exists x.(MainCharacterOf(x,Garfield) & Childish(x) & Possessive(x))"
  },
  {
    "id": 1372,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> CapableOf(x,AbstractThought))",
      "all x.(Plant(x) -> -CapableOf(x,AbstractThought))",
      "all x.((((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & -Animal(x)) | (-((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & Animal(x)))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "(Goat(Hulu) | HumanBeing(Hulu))",
      "[[ERROR]]"
    ],
    "goal": "CapableOf(Hulu,AbstractThought)"
  },
  {
    "id": 1373,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> CapableOf(x,AbstractThought))",
      "all x.(Plant(x) -> -CapableOf(x,AbstractThought))",
      "all x.((((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & -Animal(x)) | (-((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & Animal(x)))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "(Goat(Hulu) | HumanBeing(Hulu))",
      "[[ERROR]]"
    ],
    "goal": "-CapableOf(Hulu,AbstractThought)"
  },
  {
    "id": 1374,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> CapableOf(x,AbstractThought))",
      "all x.(Plant(x) -> -CapableOf(x,AbstractThought))",
      "all x.((((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & -Animal(x)) | (-((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & Animal(x)))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "(Goat(Hulu) | HumanBeing(Hulu))",
      "[[ERROR]]"
    ],
    "goal": "Dirt(Hulu)"
  },
  {
    "id": 1375,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> CapableOf(x,AbstractThought))",
      "all x.(Plant(x) -> -CapableOf(x,AbstractThought))",
      "all x.((((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & -Animal(x)) | (-((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & Animal(x)))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "(Goat(Hulu) | HumanBeing(Hulu))",
      "[[ERROR]]"
    ],
    "goal": "(Animal(Hulu) | Dirt(Hulu))"
  },
  {
    "id": 1376,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> CapableOf(x,AbstractThought))",
      "all x.(Plant(x) -> -CapableOf(x,AbstractThought))",
      "all x.((((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & -Animal(x)) | (-((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & Animal(x)))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "(Goat(Hulu) | HumanBeing(Hulu))",
      "[[ERROR]]"
    ],
    "goal": "((Animal(Hulu) & -Dirt(Hulu)) | (-Animal(Hulu) & Dirt(Hulu)))"
  },
  {
    "id": 1377,
    "flag": "success",
    "assumptions": [
      "all x.(Human(x) -> CapableOf(x,AbstractThought))",
      "all x.(Plant(x) -> -CapableOf(x,AbstractThought))",
      "all x.((((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & -Animal(x)) | (-((MulticellularCreature(x) & (Autotrophic(x) | DigestFoodInternally(x))) -> Plant(x)) & Animal(x)))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "(Goat(Hulu) | HumanBeing(Hulu))",
      "[[ERROR]]"
    ],
    "goal": "((((Animal(Hulu) & -Dirt(Hulu)) | (-Animal(Hulu) & Dirt(Hulu))) -> CapableOf(Hulu,AbstractThought)) & Dirt(Hulu))"
  },
  {
    "id": 135,
    "flag": "success",
    "assumptions": [
      "all x.(ControlledSubstances(x) -> Drugs(x))",
      "[[ERROR]]",
      "all x y.((Child(x) & ControlledSubstances(y) & ExposedTo(x,y)) -> InChemicalEndangerment(x))",
      "all x.(InChemicalEndangerment(x) -> Harmful(x))",
      "(PassedIn(ControlledSubstancesAct,Yr1971) & Act(ControlledSubstancesAct))",
      "[[ERROR]]"
    ],
    "goal": "PreventsHarm(ControlledSubstancesAct)"
  },
  {
    "id": 136,
    "flag": "success",
    "assumptions": [
      "all x.(ControlledSubstances(x) -> Drugs(x))",
      "[[ERROR]]",
      "all x y.((Child(x) & ControlledSubstances(y) & ExposedTo(x,y)) -> InChemicalEndangerment(x))",
      "all x.(InChemicalEndangerment(x) -> Harmful(x))",
      "(PassedIn(ControlledSubstancesAct,Yr1971) & Act(ControlledSubstancesAct))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 137,
    "flag": "success",
    "assumptions": [
      "all x.(ControlledSubstances(x) -> Drugs(x))",
      "[[ERROR]]",
      "all x y.((Child(x) & ControlledSubstances(y) & ExposedTo(x,y)) -> InChemicalEndangerment(x))",
      "all x.(InChemicalEndangerment(x) -> Harmful(x))",
      "(PassedIn(ControlledSubstancesAct,Yr1971) & Act(ControlledSubstancesAct))",
      "[[ERROR]]"
    ],
    "goal": "all x.((Child(x) & InChemicalEndangerment(x)) -> Harmful(x))"
  },
  {
    "id": 816,
    "flag": "success",
    "assumptions": [
      "all x.(Have(x,CorporateJob) -> -Take(x,FinancialRisk))",
      "all x.(Entrepreneur(x) -> Take(x,FinancialRisk))",
      "all x.(RiskAverse(x) -> Have(x,CorporateJob))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "Entrepreneur(MarkZuckerberg)"
  },
  {
    "id": 817,
    "flag": "success",
    "assumptions": [
      "all x.(Have(x,CorporateJob) -> -Take(x,FinancialRisk))",
      "all x.(Entrepreneur(x) -> Take(x,FinancialRisk))",
      "all x.(RiskAverse(x) -> Have(x,CorporateJob))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "RiskAverse(MarkZuckerberg)"
  },
  {
    "id": 818,
    "flag": "success",
    "assumptions": [
      "all x.(Have(x,CorporateJob) -> -Take(x,FinancialRisk))",
      "all x.(Entrepreneur(x) -> Take(x,FinancialRisk))",
      "all x.(RiskAverse(x) -> Have(x,CorporateJob))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "-RiskAverse(MarkZuckerberg)"
  },
  {
    "id": 569,
    "flag": "success",
    "assumptions": [
      "exists x.(Wildfeed(x) & Unannounced(x) & Program(x))",
      "all x.((Wildfeed(x) -> SportingEvent(x)) | News(x) | SyndicatedShow(x))",
      "all x.(Prerecorded(x) -> CopyrightViolation(x))",
      "all x.(Program(x) -> Prerecorded(x))"
    ],
    "goal": "exists x.(Wildfeed(x) & CopyrightViolation(x))"
  },
  {
    "id": 570,
    "flag": "success",
    "assumptions": [
      "exists x.(Wildfeed(x) & Unannounced(x) & Program(x))",
      "all x.((Wildfeed(x) -> SportingEvent(x)) | News(x) | SyndicatedShow(x))",
      "all x.(Prerecorded(x) -> CopyrightViolation(x))",
      "all x.(Program(x) -> Prerecorded(x))"
    ],
    "goal": "exists x.(Wildfeed(x) & Prerecorded(x))"
  },
  {
    "id": 571,
    "flag": "success",
    "assumptions": [
      "exists x.(Wildfeed(x) & Unannounced(x) & Program(x))",
      "all x.((Wildfeed(x) -> SportingEvent(x)) | News(x) | SyndicatedShow(x))",
      "all x.(Prerecorded(x) -> CopyrightViolation(x))",
      "all x.(Program(x) -> Prerecorded(x))"
    ],
    "goal": "exists x.(SyndicatedShows(x) & CopyrightViolation(x))"
  },
  {
    "id": 376,
    "flag": "success",
    "assumptions": [
      "LocatedIn(NewYorkCity,UnitedStatesOfAmerica)",
      "LocatedIn(Usa,NorthAmerica)",
      "LocatedIn(NorthAmerica,WesternHemisphere)",
      "HighlyDeveloped(NewYorkCity)",
      "all x y z.((LocatedIn(x,y) & LocatedIn(y,z)) -> LocatedIn(x,z))"
    ],
    "goal": "exists x.(HighlyDeveloped(x) & LocatedIn(x,WesternHemisphere))"
  },
  {
    "id": 377,
    "flag": "success",
    "assumptions": [
      "LocatedIn(NewYorkCity,UnitedStatesOfAmerica)",
      "LocatedIn(Usa,NorthAmerica)",
      "LocatedIn(NorthAmerica,WesternHemisphere)",
      "HighlyDeveloped(NewYorkCity)",
      "all x y z.((LocatedIn(x,y) & LocatedIn(y,z)) -> LocatedIn(x,z))"
    ],
    "goal": "-LocatedIn(UnitedStatesOfAmerica,WestHemisphere)"
  },
  {
    "id": 378,
    "flag": "success",
    "assumptions": [
      "LocatedIn(NewYorkCity,UnitedStatesOfAmerica)",
      "LocatedIn(Usa,NorthAmerica)",
      "LocatedIn(NorthAmerica,WesternHemisphere)",
      "HighlyDeveloped(NewYorkCity)",
      "all x y z.((LocatedIn(x,y) & LocatedIn(y,z)) -> LocatedIn(x,z))"
    ],
    "goal": "LocatedIn(NewYorkCity,NewYork)"
  },
  {
    "id": 427,
    "flag": "success",
    "assumptions": [
      "(Poem(Catullus) & WrittenBy(Catullus,Catullus) & AncientRomanWriter(Catullus))",
      "(Story(Catullus4) & About(Catullus4,RetirementOfAWellTraveledShip))",
      "(Poem(Catullus4) & StrongAgingAnalogy(Catullus4))",
      "(Poem(Catullus4) & WrittenIn(Catullus4,IambicTrimeter) & Convey(Catullus4,ASenseOfSpeedOverTheWaves))"
    ],
    "goal": "exists x y.(Poem(x) & WrittenBy(x,y) & AncietRomanWriter(y) & StrongAgingAnalogy(x))"
  },
  {
    "id": 428,
    "flag": "success",
    "assumptions": [
      "(Poem(Catullus) & WrittenBy(Catullus,Catullus) & AncientRomanWriter(Catullus))",
      "(Story(Catullus4) & About(Catullus4,RetirementOfAWellTraveledShip))",
      "(Poem(Catullus4) & StrongAgingAnalogy(Catullus4))",
      "(Poem(Catullus4) & WrittenIn(Catullus4,IambicTrimeter) & Convey(Catullus4,ASenseOfSpeedOverTheWaves))"
    ],
    "goal": "exists x y.(Poem(x) & WrittenBy(x,y) & AncientRomanWriter(y) & WrittenIn(x,IambicTrimeter))"
  },
  {
    "id": 429,
    "flag": "success",
    "assumptions": [
      "(Poem(Catullus) & WrittenBy(Catullus,Catullus) & AncientRomanWriter(Catullus))",
      "(Story(Catullus4) & About(Catullus4,RetirementOfAWellTraveledShip))",
      "(Poem(Catullus4) & StrongAgingAnalogy(Catullus4))",
      "(Poem(Catullus4) & WrittenIn(Catullus4,IambicTrimeter) & Convey(Catullus4,ASenseOfSpeedOverTheWaves))"
    ],
    "goal": "(Poem(Catullus4) & WrittenIn(Catullus4,IambicTrimeter) & StrongAgingAnalogy(Catullus4))"
  },
  {
    "id": 666,
    "flag": "success",
    "assumptions": [
      "(American(Westworld) & ScienceFictionThriller(Westworld))",
      "(Debut(Westworld,Year2016) & TvSeries(Westworld))",
      "(Adapted(Westworld,WestworldTheFilm) & Produce(WestworldTheFilm,Year1973) & Wrote(Michael,WestworldTheFilm) & Directed(Michael,WestworldTheFilm))",
      "(Film(WestworldTheFilm) & About(WestworldTheFilm,MalfunctioningRobots))"
    ],
    "goal": "exists x.(Film(x) & Directed(Michael,x) & About(x,MalfunctioningRobots))"
  },
  {
    "id": 667,
    "flag": "success",
    "assumptions": [
      "(American(Westworld) & ScienceFictionThriller(Westworld))",
      "(Debut(Westworld,Year2016) & TvSeries(Westworld))",
      "(Adapted(Westworld,WestworldTheFilm) & Produce(WestworldTheFilm,Year1973) & Wrote(Michael,WestworldTheFilm) & Directed(Michael,WestworldTheFilm))",
      "(Film(WestworldTheFilm) & About(WestworldTheFilm,MalfunctioningRobots))"
    ],
    "goal": "exists x.(TVSeries(x) & American(x) & Debut(x,Year2016))"
  },
  {
    "id": 655,
    "flag": "success",
    "assumptions": [
      "HeldIn(2008SummerOlympics,BeijingChina)",
      "(SecondSummerOlympicsGames(2008SummerOlympics) & BeHeldIn(2008SummerOlympics,CommunistState))",
      "Won(China,TheMostGoldMedals)",
      "(PlacedSecondInGoldMedalsIn(UnitedStates,2008SummerOlympics) & Won(UnitedStates,HighestNumberOfMedals))",
      "PlacedThirdInGoldMedalsIn(Russia,2008SummerOlympics)",
      "all x y.((Placed(x,ThirdInGoldMedals) & Won(y,MostGoldMedals)) -> FewerGoldMedalsThan(x,y))"
    ],
    "goal": "-FewerGoldMedalsThan(Russia,China)"
  },
  {
    "id": 656,
    "flag": "success",
    "assumptions": [
      "HeldIn(2008SummerOlympics,BeijingChina)",
      "(SecondSummerOlympicsGames(2008SummerOlympics) & BeHeldIn(2008SummerOlympics,CommunistState))",
      "Won(China,TheMostGoldMedals)",
      "(PlacedSecondInGoldMedalsIn(UnitedStates,2008SummerOlympics) & Won(UnitedStates,HighestNumberOfMedals))",
      "PlacedThirdInGoldMedalsIn(Russia,2008SummerOlympics)",
      "all x y.((Placed(x,ThirdInGoldMedals) & Won(y,MostGoldMedals)) -> FewerGoldMedalsThan(x,y))"
    ],
    "goal": "FewerGoldMedalsThan(Russia,China)"
  },
  {
    "id": 77,
    "flag": "success",
    "assumptions": [
      "(DistrictIn(Xiufeng,Guilin) & DistrictIn(Xiangshan,Guilin) & DistrictIn(Diecai,Guilin) & DistrictIn(Qixing,Guilin) & City(Guilin))",
      "-DistrictIn(Yangshuo,Guilin)"
    ],
    "goal": "exists x.(DistrictIn(Xiangshan,x) & DistrictIn(Diecai,x) & City(x))"
  },
  {
    "id": 78,
    "flag": "success",
    "assumptions": [
      "(DistrictIn(Xiufeng,Guilin) & DistrictIn(Xiangshan,Guilin) & DistrictIn(Diecai,Guilin) & DistrictIn(Qixing,Guilin) & City(Guilin))",
      "-DistrictIn(Yangshuo,Guilin)"
    ],
    "goal": "DistrictIn(Xiufeng,Guilin)"
  },
  {
    "id": 79,
    "flag": "success",
    "assumptions": [
      "(DistrictIn(Xiufeng,Guilin) & DistrictIn(Xiangshan,Guilin) & DistrictIn(Diecai,Guilin) & DistrictIn(Qixing,Guilin) & City(Guilin))",
      "-DistrictIn(Yangshuo,Guilin)"
    ],
    "goal": "DistrictIn(Kowloon,HongKong)"
  },
  {
    "id": 999,
    "flag": "success",
    "assumptions": [
      "all x.((MichaelsNeightbor(x) & GrowIn(x,Vegetable,Garden)) -> Have(x,AmpleSpace))",
      "all x.((MichaelsNeightbor(x) & YoungWorkingProfession(x) & LiveIn(x,LargeCity)) -> -Have(x,AmpleSpace))",
      "all x.((MichaelsNeightbor(x) & OrderOften(x,Takeout)) -> Grow(x,Vegetable,Garden))",
      "all x.((MichaelsNeightbor(x) & EnjoyGoingOutOftenToWith(x,Restaurant,Friend)) -> OrderOften(x,Takeout))",
      "all x.((MichaelsNeightbor(x) & ToutOver(x,HomecookedMeals,FastFood)) -> EnjoyGoingOutOftenToWith(x,Restaurant,Friend))",
      "(MichaelsNeightbor(Peter) & (GrowIn(Peter,Vegetable,Garden) | ToutOver(Peter,HomecookedMeals,FastFood)))"
    ],
    "goal": "EnjoyGoingOutOftenTo(Peter,Restaurant,Friend)"
  },
  {
    "id": 1000,
    "flag": "success",
    "assumptions": [
      "all x.((MichaelsNeightbor(x) & GrowIn(x,Vegetable,Garden)) -> Have(x,AmpleSpace))",
      "all x.((MichaelsNeightbor(x) & YoungWorkingProfession(x) & LiveIn(x,LargeCity)) -> -Have(x,AmpleSpace))",
      "all x.((MichaelsNeightbor(x) & OrderOften(x,Takeout)) -> Grow(x,Vegetable,Garden))",
      "all x.((MichaelsNeightbor(x) & EnjoyGoingOutOftenToWith(x,Restaurant,Friend)) -> OrderOften(x,Takeout))",
      "all x.((MichaelsNeightbor(x) & ToutOver(x,HomecookedMeals,FastFood)) -> EnjoyGoingOutOftenToWith(x,Restaurant,Friend))",
      "(MichaelsNeightbor(Peter) & (GrowIn(Peter,Vegetable,Garden) | ToutOver(Peter,HomecookedMeals,FastFood)))"
    ],
    "goal": "(YoungWorkingProfession(Peter) & LiveIn(Peter,LargeCity))"
  },
  {
    "id": 1001,
    "flag": "success",
    "assumptions": [
      "all x.((MichaelsNeightbor(x) & GrowIn(x,Vegetable,Garden)) -> Have(x,AmpleSpace))",
      "all x.((MichaelsNeightbor(x) & YoungWorkingProfession(x) & LiveIn(x,LargeCity)) -> -Have(x,AmpleSpace))",
      "all x.((MichaelsNeightbor(x) & OrderOften(x,Takeout)) -> Grow(x,Vegetable,Garden))",
      "all x.((MichaelsNeightbor(x) & EnjoyGoingOutOftenToWith(x,Restaurant,Friend)) -> OrderOften(x,Takeout))",
      "all x.((MichaelsNeightbor(x) & ToutOver(x,HomecookedMeals,FastFood)) -> EnjoyGoingOutOftenToWith(x,Restaurant,Friend))",
      "(MichaelsNeightbor(Peter) & (GrowIn(Peter,Vegetable,Garden) | ToutOver(Peter,HomecookedMeals,FastFood)))"
    ],
    "goal": "(GrowIn(Peter,Vegetable,Garden) | (YoungWorkingProfession(Peter) & LiveIn(Peter,LargeCity)))"
  },
  {
    "id": 183,
    "flag": "success",
    "assumptions": [
      "all x.(OwnedBy(x,Company) -> ConnectedTo(x,GoogleHome))",
      "all x.(OwnedBy(x,Employee) -> ConnectedTo(x,CompanyWiFi))",
      "all x.(ConnectedTo(x,GoogleHome) -> ControlledBy(x,Managers))",
      "all x.(ConnectedTo(x,CompanyWiFi) -> EasyToOperate(x))",
      "OwnedBy(ModelXX,Employee)"
    ],
    "goal": "EasyToOperate(ModelXX)"
  },
  {
    "id": 184,
    "flag": "success",
    "assumptions": [
      "all x.(OwnedBy(x,Company) -> ConnectedTo(x,GoogleHome))",
      "all x.(OwnedBy(x,Employee) -> ConnectedTo(x,CompanyWiFi))",
      "all x.(ConnectedTo(x,GoogleHome) -> ControlledBy(x,Managers))",
      "all x.(ConnectedTo(x,CompanyWiFi) -> EasyToOperate(x))",
      "OwnedBy(ModelXX,Employee)"
    ],
    "goal": "ControlledBy(ModelXX,Managers)"
  },
  {
    "id": 185,
    "flag": "success",
    "assumptions": [
      "all x.(OwnedBy(x,Company) -> ConnectedTo(x,GoogleHome))",
      "all x.(OwnedBy(x,Employee) -> ConnectedTo(x,CompanyWiFi))",
      "all x.(ConnectedTo(x,GoogleHome) -> ControlledBy(x,Managers))",
      "all x.(ConnectedTo(x,CompanyWiFi) -> EasyToOperate(x))",
      "OwnedBy(ModelXX,Employee)"
    ],
    "goal": "ConnectedTo(ModelXX,GoogleHome)"
  },
  {
    "id": 1130,
    "flag": "success",
    "assumptions": [
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & TouringMusician(x)) -> -PermanentMemberOf(x,TheOrchestra))",
      "all x.(PerformAt(x,NewHavenSymphonyOrchestra) -> (PermanentMemberOf(x,TheOrchestra) | HaveTemporaryRoleAt(x,TheOrchestra)))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & TouringMusicians(x)) -> HaveTemporaryRoleAt(x,TheOrchestra))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & HaveTemporaryRoleAt(x,TheOrchestra)) -> InterestingSoloist(x))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & InterestingSoloist(x)) -> CapableOfAttractingAudiences(x))",
      "PerformAt(Ryan,NewHavenSymphonyOrchestra)",
      "((InterestingSoloist(Ryan) & HaveTemporaryRoleAt(Ryan,TheOrchestra)) -> -((TouringMusician(Ryan) & -CapableOfAttractingAudiences(Ryan)) | (-TouringMusician(Ryan) & CapableOfAttractingAudiences(Ryan))))"
    ],
    "goal": "InterestingSoloist(Ryan)"
  },
  {
    "id": 1131,
    "flag": "success",
    "assumptions": [
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & TouringMusician(x)) -> -PermanentMemberOf(x,TheOrchestra))",
      "all x.(PerformAt(x,NewHavenSymphonyOrchestra) -> (PermanentMemberOf(x,TheOrchestra) | HaveTemporaryRoleAt(x,TheOrchestra)))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & TouringMusicians(x)) -> HaveTemporaryRoleAt(x,TheOrchestra))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & HaveTemporaryRoleAt(x,TheOrchestra)) -> InterestingSoloist(x))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & InterestingSoloist(x)) -> CapableOfAttractingAudiences(x))",
      "PerformAt(Ryan,NewHavenSymphonyOrchestra)",
      "((InterestingSoloist(Ryan) & HaveTemporaryRoleAt(Ryan,TheOrchestra)) -> -((TouringMusician(Ryan) & -CapableOfAttractingAudiences(Ryan)) | (-TouringMusician(Ryan) & CapableOfAttractingAudiences(Ryan))))"
    ],
    "goal": "((PermanentMemberOf(Ryan,Orchestra) & -TouringMusician(Ryan)) | (-PermanentMemberOf(Ryan,Orchestra) & TouringMusician(Ryan)))"
  },
  {
    "id": 1132,
    "flag": "success",
    "assumptions": [
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & TouringMusician(x)) -> -PermanentMemberOf(x,TheOrchestra))",
      "all x.(PerformAt(x,NewHavenSymphonyOrchestra) -> (PermanentMemberOf(x,TheOrchestra) | HaveTemporaryRoleAt(x,TheOrchestra)))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & TouringMusicians(x)) -> HaveTemporaryRoleAt(x,TheOrchestra))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & HaveTemporaryRoleAt(x,TheOrchestra)) -> InterestingSoloist(x))",
      "all x.((PerformAt(x,NewHavenSymphonyOrchestra) & InterestingSoloist(x)) -> CapableOfAttractingAudiences(x))",
      "PerformAt(Ryan,NewHavenSymphonyOrchestra)",
      "((InterestingSoloist(Ryan) & HaveTemporaryRoleAt(Ryan,TheOrchestra)) -> -((TouringMusician(Ryan) & -CapableOfAttractingAudiences(Ryan)) | (-TouringMusician(Ryan) & CapableOfAttractingAudiences(Ryan))))"
    ],
    "goal": "((PermanentMemberOf(Ryan,Orchestra) & -HaveTemporaryRoleAt(Ryan,Orchestra)) | (-PermanentMemberOf(Ryan,Orchestra) & HaveTemporaryRoleAt(Ryan,Orchestra)))"
  },
  {
    "id": 1406,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,Potterville) & Yell(x)) -> -Cool(x))",
      "all x.((In(x,Potterville) & Angry(x)) -> Yell(x))",
      "all x.((In(x,Potterville) & Fly(x)) -> Cool(x))",
      "all x.((In(x,Potterville) & Know(x,Magic)) -> Fly(x))",
      "all x.((In(x,Potterville) & Wizard(x)) -> Know(x,Magic))",
      "(In(Harry,Potterville) & ((Yell(Harry) & -Fly(Harry)) | (-Yell(Harry) & Fly(Harry))))",
      "(Wizard(Potter) & Fly(Potter))"
    ],
    "goal": "Cool(Harry)"
  },
  {
    "id": 1407,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,Potterville) & Yell(x)) -> -Cool(x))",
      "all x.((In(x,Potterville) & Angry(x)) -> Yell(x))",
      "all x.((In(x,Potterville) & Fly(x)) -> Cool(x))",
      "all x.((In(x,Potterville) & Know(x,Magic)) -> Fly(x))",
      "all x.((In(x,Potterville) & Wizard(x)) -> Know(x,Magic))",
      "(In(Harry,Potterville) & ((Yell(Harry) & -Fly(Harry)) | (-Yell(Harry) & Fly(Harry))))",
      "(Wizard(Potter) & Fly(Potter))"
    ],
    "goal": "-Cool(Harry)"
  },
  {
    "id": 1408,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,Potterville) & Yell(x)) -> -Cool(x))",
      "all x.((In(x,Potterville) & Angry(x)) -> Yell(x))",
      "all x.((In(x,Potterville) & Fly(x)) -> Cool(x))",
      "all x.((In(x,Potterville) & Know(x,Magic)) -> Fly(x))",
      "all x.((In(x,Potterville) & Wizard(x)) -> Know(x,Magic))",
      "(In(Harry,Potterville) & ((Yell(Harry) & -Fly(Harry)) | (-Yell(Harry) & Fly(Harry))))",
      "(Wizard(Potter) & Fly(Potter))"
    ],
    "goal": "(Wizard(Harry) | Angry(Harry))"
  },
  {
    "id": 1409,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,Potterville) & Yell(x)) -> -Cool(x))",
      "all x.((In(x,Potterville) & Angry(x)) -> Yell(x))",
      "all x.((In(x,Potterville) & Fly(x)) -> Cool(x))",
      "all x.((In(x,Potterville) & Know(x,Magic)) -> Fly(x))",
      "all x.((In(x,Potterville) & Wizard(x)) -> Know(x,Magic))",
      "(In(Harry,Potterville) & ((Yell(Harry) & -Fly(Harry)) | (-Yell(Harry) & Fly(Harry))))",
      "(Wizard(Potter) & Fly(Potter))"
    ],
    "goal": "(-Wizard(Harry) & -Angry(Harry))"
  },
  {
    "id": 1248,
    "flag": "success",
    "assumptions": [
      "all x.((ThisBrand(x) & Product(x)) -> ((ProducedIn(x,China) & -ProducedIn(x,US)) | (-ProducedIn(x,China) & ProducedIn(x,US))))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,China)) -> Labeled(x))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,Us)) -> SoldIn(x,Us))",
      "all x.((ThisBrand(x) & Product(x) & Labeled(x)) -> Cheaper(x))",
      "all x.((ThisBrand(x) & Product(x) & SoldIn(x,Us)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & DisplayedIn(x,Homepage)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & ReturnedBy(x,Customer)) -> -SoldIn(x,Walmart))",
      "(Product(G910) & ThisBrand(G910) & -((DisplayedIn(G910,Homepage) & -Cheaper(G910)) | (-DisplayedIn(G910,Homepage) & Cheaper(G910))))"
    ],
    "goal": "DisplayedIn(G910,Homepage)"
  },
  {
    "id": 1249,
    "flag": "success",
    "assumptions": [
      "all x.((ThisBrand(x) & Product(x)) -> ((ProducedIn(x,China) & -ProducedIn(x,US)) | (-ProducedIn(x,China) & ProducedIn(x,US))))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,China)) -> Labeled(x))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,Us)) -> SoldIn(x,Us))",
      "all x.((ThisBrand(x) & Product(x) & Labeled(x)) -> Cheaper(x))",
      "all x.((ThisBrand(x) & Product(x) & SoldIn(x,Us)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & DisplayedIn(x,Homepage)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & ReturnedBy(x,Customer)) -> -SoldIn(x,Walmart))",
      "(Product(G910) & ThisBrand(G910) & -((DisplayedIn(G910,Homepage) & -Cheaper(G910)) | (-DisplayedIn(G910,Homepage) & Cheaper(G910))))"
    ],
    "goal": "-DisplayedIn(G910,Homepage)"
  },
  {
    "id": 1250,
    "flag": "success",
    "assumptions": [
      "all x.((ThisBrand(x) & Product(x)) -> ((ProducedIn(x,China) & -ProducedIn(x,US)) | (-ProducedIn(x,China) & ProducedIn(x,US))))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,China)) -> Labeled(x))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,Us)) -> SoldIn(x,Us))",
      "all x.((ThisBrand(x) & Product(x) & Labeled(x)) -> Cheaper(x))",
      "all x.((ThisBrand(x) & Product(x) & SoldIn(x,Us)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & DisplayedIn(x,Homepage)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & ReturnedBy(x,Customer)) -> -SoldIn(x,Walmart))",
      "(Product(G910) & ThisBrand(G910) & -((DisplayedIn(G910,Homepage) & -Cheaper(G910)) | (-DisplayedIn(G910,Homepage) & Cheaper(G910))))"
    ],
    "goal": "(ThisBrand(G910) & ReturnedBy(G910,Customer))"
  },
  {
    "id": 1251,
    "flag": "success",
    "assumptions": [
      "all x.((ThisBrand(x) & Product(x)) -> ((ProducedIn(x,China) & -ProducedIn(x,US)) | (-ProducedIn(x,China) & ProducedIn(x,US))))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,China)) -> Labeled(x))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,Us)) -> SoldIn(x,Us))",
      "all x.((ThisBrand(x) & Product(x) & Labeled(x)) -> Cheaper(x))",
      "all x.((ThisBrand(x) & Product(x) & SoldIn(x,Us)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & DisplayedIn(x,Homepage)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & ReturnedBy(x,Customer)) -> -SoldIn(x,Walmart))",
      "(Product(G910) & ThisBrand(G910) & -((DisplayedIn(G910,Homepage) & -Cheaper(G910)) | (-DisplayedIn(G910,Homepage) & Cheaper(G910))))"
    ],
    "goal": "(ThisBrand(G910) & (ReturnedBy(G910,Customer) | SoldIn(G910,Walmart)))"
  },
  {
    "id": 1252,
    "flag": "success",
    "assumptions": [
      "all x.((ThisBrand(x) & Product(x)) -> ((ProducedIn(x,China) & -ProducedIn(x,US)) | (-ProducedIn(x,China) & ProducedIn(x,US))))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,China)) -> Labeled(x))",
      "all x.((ThisBrand(x) & Product(x) & ProducedIn(x,Us)) -> SoldIn(x,Us))",
      "all x.((ThisBrand(x) & Product(x) & Labeled(x)) -> Cheaper(x))",
      "all x.((ThisBrand(x) & Product(x) & SoldIn(x,Us)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & DisplayedIn(x,Homepage)) -> SoldIn(x,Walmart))",
      "all x.((ThisBrand(x) & Product(x) & ReturnedBy(x,Customer)) -> -SoldIn(x,Walmart))",
      "(Product(G910) & ThisBrand(G910) & -((DisplayedIn(G910,Homepage) & -Cheaper(G910)) | (-DisplayedIn(G910,Homepage) & Cheaper(G910))))"
    ],
    "goal": "((ReturnedBy(G910,Customer) & -SoldIn(G910,Walmart)) | (-ReturnedBy(G910,Customer) & SoldIn(G910,Walmart)))"
  },
  {
    "id": 939,
    "flag": "success",
    "assumptions": [
      "all x.((BelieveIn(x,SantaClaus) & -ThinkMadeUp(x,SantaClaus)) | (-BelieveIn(x,SantaClaus) & ThinkMadeUp(x,SantaClaus)))",
      "all x.(BelieveIn(x,SantaClaus) -> Expect(x,Present,ChristmasMorning))",
      "all x.(ThinkMadeUp(x,SantaClaus) -> WouldBeSurprisedToSeeIn(x,SantaClaus,House))",
      "all x.(Expect(x,Present,Christmas) -> ExcitedFor(x,Christmas))",
      "all x.(WouldBeSurprisedToSeeIn(x,SantaClaus,House) -> -LeaveOut(x,Cookies))",
      "-(Expect(Marcy,Present,Christmas) & ExcitedFor(Marcy,Christmas) & BelieveIn(Marcy,SantaClaus))"
    ],
    "goal": "((BelieveIn(Marcy,SantaClaus) & -LeaveOut(Marcy,Cookies)) | (-BelieveIn(Marcy,SantaClaus) & LeaveOut(Marcy,Cookies)))"
  },
  {
    "id": 940,
    "flag": "success",
    "assumptions": [
      "all x.((BelieveIn(x,SantaClaus) & -ThinkMadeUp(x,SantaClaus)) | (-BelieveIn(x,SantaClaus) & ThinkMadeUp(x,SantaClaus)))",
      "all x.(BelieveIn(x,SantaClaus) -> Expect(x,Present,ChristmasMorning))",
      "all x.(ThinkMadeUp(x,SantaClaus) -> WouldBeSurprisedToSeeIn(x,SantaClaus,House))",
      "all x.(Expect(x,Present,Christmas) -> ExcitedFor(x,Christmas))",
      "all x.(WouldBeSurprisedToSeeIn(x,SantaClaus,House) -> -LeaveOut(x,Cookies))",
      "-(Expect(Marcy,Present,Christmas) & ExcitedFor(Marcy,Christmas) & BelieveIn(Marcy,SantaClaus))"
    ],
    "goal": "(-(LeaveOut(Marcy,Cookies) & ThinkMadeUp(Marcy,SantaClaus)) | BelieveIn(Marcy,SantaClaus))"
  },
  {
    "id": 494,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 495,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 496,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 896,
    "flag": "success",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "-((DigitalWatch(Moonwatch) & -AutomaticWatch(Moonwatch)) | (-DigitalWatch(Moonwatch) & AutomaticWatch(Moonwatch)))"
    ],
    "goal": "MechanicalWatch(MoonWatch)"
  },
  {
    "id": 897,
    "flag": "success",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "-((DigitalWatch(Moonwatch) & -AutomaticWatch(Moonwatch)) | (-DigitalWatch(Moonwatch) & AutomaticWatch(Moonwatch)))"
    ],
    "goal": "(SmartWatch(Moonwatch) & MechanicalWatch(Moonwatch))"
  },
  {
    "id": 898,
    "flag": "success",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "-((DigitalWatch(Moonwatch) & -AutomaticWatch(Moonwatch)) | (-DigitalWatch(Moonwatch) & AutomaticWatch(Moonwatch)))"
    ],
    "goal": "((SmartWatch(Moonwatch) & MechanicalWatch(Moonwatch)) -> -MechanicalWatch(Moonwatch))"
  },
  {
    "id": 899,
    "flag": "success",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "-((DigitalWatch(Moonwatch) & -AutomaticWatch(Moonwatch)) | (-DigitalWatch(Moonwatch) & AutomaticWatch(Moonwatch)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 686,
    "flag": "success",
    "assumptions": [
      "all x.((Person(x) & Can(x,DistinguishTheTasteOfDifferentCondiments)) -> Can(x,UseDifferentCondimentsToCook))",
      "all x.((Person(x) & Has(x,TalentOfCooking)) -> Can(x,DistinguishTheTasteOfDifferentCondiments))",
      "all x y.((CanMake(x,y) & Meal(y) & Delicious(y) & Person(x)) -> Has(x,TalentOfCooking))",
      "all x y.((Meal(y) & PopularAt(y,Party)) -> Delicious(y))",
      "exists x.(Person(John) & MakeMeal(John,x) & Meal(x) & PopularAt(x,Party))"
    ],
    "goal": "-Can(John,UseDifferentCondimentsToCook)"
  },
  {
    "id": 696,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 419,
    "flag": "success",
    "assumptions": [
      "(FrenchTelevision(VideoGag) & AirWeekly(VideoGag))",
      "AirOn(VideoGag,FrenchBroadcastChannelTF1)",
      "[[ERROR]]",
      "all x.((Video(x) & AirOn(VideoGag,x)) -> In(x,French))"
    ],
    "goal": "exists x.(SendIn(Viewers,x,FrenchBroadcastChannelTF1) & French(x))"
  },
  {
    "id": 420,
    "flag": "success",
    "assumptions": [
      "(FrenchTelevision(VideoGag) & AirWeekly(VideoGag))",
      "AirOn(VideoGag,FrenchBroadcastChannelTF1)",
      "[[ERROR]]",
      "all x.((Video(x) & AirOn(VideoGag,x)) -> In(x,French))"
    ],
    "goal": "exists x.(SendIn(Viewers,x,FrenchBroadcastChannelTF1) & English(x))"
  },
  {
    "id": 1381,
    "flag": "success",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Employee(x) -> WageEarner(x))",
      "all x.(WageEarner(x) -> Human(x))",
      "((Employee(Jack) & -WageEarner(Jack)) | (-Employee(Jack) & WageEarner(Jack)))",
      "((Human(Jack) & -Phone(Jack)) | (-Human(Jack) & Phone(Jack)))"
    ],
    "goal": "Thing(Jack)"
  },
  {
    "id": 1382,
    "flag": "success",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Employee(x) -> WageEarner(x))",
      "all x.(WageEarner(x) -> Human(x))",
      "((Employee(Jack) & -WageEarner(Jack)) | (-Employee(Jack) & WageEarner(Jack)))",
      "((Human(Jack) & -Phone(Jack)) | (-Human(Jack) & Phone(Jack)))"
    ],
    "goal": "-Thing(Jack)"
  },
  {
    "id": 1383,
    "flag": "success",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Employee(x) -> WageEarner(x))",
      "all x.(WageEarner(x) -> Human(x))",
      "((Employee(Jack) & -WageEarner(Jack)) | (-Employee(Jack) & WageEarner(Jack)))",
      "((Human(Jack) & -Phone(Jack)) | (-Human(Jack) & Phone(Jack)))"
    ],
    "goal": "(Thing(Jack) & Iphone(Jack))"
  },
  {
    "id": 1384,
    "flag": "success",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Employee(x) -> WageEarner(x))",
      "all x.(WageEarner(x) -> Human(x))",
      "((Employee(Jack) & -WageEarner(Jack)) | (-Employee(Jack) & WageEarner(Jack)))",
      "((Human(Jack) & -Phone(Jack)) | (-Human(Jack) & Phone(Jack)))"
    ],
    "goal": "-(Thing(Jack) & Iphone(Jack))"
  },
  {
    "id": 733,
    "flag": "success",
    "assumptions": [
      "all x.(IPhone(x) -> Electronic(x))",
      "[[ERROR]]"
    ],
    "goal": "all x.(Phone(x) -> -Electronic(x))"
  },
  {
    "id": 110,
    "flag": "success",
    "assumptions": [
      "(Museum(MetropolitanMuseumOfArt) & In(MetropolitanMuseumOfArt,NYC))",
      "(Museum(WhitneyMuseumOfAmericanArt) & In(MetropolitanMuseumOfArt,NYC))",
      "(Museum(MuseumOfModernArt) & In(MuseumOfModernArt,NYC))",
      "(Include(MetropolitanMuseumOfArt,ByzantineArt) & Include(MetropolitanMuseumOfArt,IslamicArt))",
      "Include(WhitneyMuseumOfAmericanArt,AmericanArt)"
    ],
    "goal": "exists x.(Museum(x) & In(x,NYC) & Include(x,ByzantineArt) & Include(x,IslamicArt))"
  },
  {
    "id": 111,
    "flag": "success",
    "assumptions": [
      "(Museum(MetropolitanMuseumOfArt) & In(MetropolitanMuseumOfArt,NYC))",
      "(Museum(WhitneyMuseumOfAmericanArt) & In(MetropolitanMuseumOfArt,NYC))",
      "(Museum(MuseumOfModernArt) & In(MuseumOfModernArt,NYC))",
      "(Include(MetropolitanMuseumOfArt,ByzantineArt) & Include(MetropolitanMuseumOfArt,IslamicArt))",
      "Include(WhitneyMuseumOfAmericanArt,AmericanArt)"
    ],
    "goal": "exists x.(Museum(x) & In(x,NYC) & Include(x,AmericanArt))"
  },
  {
    "id": 112,
    "flag": "success",
    "assumptions": [
      "(Museum(MetropolitanMuseumOfArt) & In(MetropolitanMuseumOfArt,NYC))",
      "(Museum(WhitneyMuseumOfAmericanArt) & In(MetropolitanMuseumOfArt,NYC))",
      "(Museum(MuseumOfModernArt) & In(MuseumOfModernArt,NYC))",
      "(Include(MetropolitanMuseumOfArt,ByzantineArt) & Include(MetropolitanMuseumOfArt,IslamicArt))",
      "Include(WhitneyMuseumOfAmericanArt,AmericanArt)"
    ],
    "goal": "exists x.(Museum(x) & In(x,NYC) & Include(x,GreekArt))"
  },
  {
    "id": 1117,
    "flag": "success",
    "assumptions": [
      "exists x.(InBenjiSFamily(x) -> (LikeEating(x,Cheese) | Francophile(x)))",
      "all x.((InBenjiSFamily(x) & Francophile(x)) -> -Favor(x,Spain))",
      "exists x.(InBenjiSFamily(x) & (Favor(x,Spain) | LikeEating(x,Cheese)))",
      "(InBenjiSFamily(Fabien) & -(LikeEating(Fabien,Cheese) & Study(Fabien,Spanish)))",
      "Study(Fabien,Spanish)"
    ],
    "goal": "LikeEating(Fabien,Cheese)"
  },
  {
    "id": 1118,
    "flag": "success",
    "assumptions": [
      "exists x.(InBenjiSFamily(x) -> (LikeEating(x,Cheese) | Francophile(x)))",
      "all x.((InBenjiSFamily(x) & Francophile(x)) -> -Favor(x,Spain))",
      "exists x.(InBenjiSFamily(x) & (Favor(x,Spain) | LikeEating(x,Cheese)))",
      "(InBenjiSFamily(Fabien) & -(LikeEating(Fabien,Cheese) & Study(Fabien,Spanish)))",
      "Study(Fabien,Spanish)"
    ],
    "goal": "(((LikeEating(Fabien,Cheese) & -Francophile(Fabien)) | (-LikeEating(Fabien,Cheese) & Francophile(Fabien))) -> -(Study(Fabien,Spanish) | Francophile(Fabien)))"
  },
  {
    "id": 1119,
    "flag": "success",
    "assumptions": [
      "exists x.(InBenjiSFamily(x) -> (LikeEating(x,Cheese) | Francophile(x)))",
      "all x.((InBenjiSFamily(x) & Francophile(x)) -> -Favor(x,Spain))",
      "exists x.(InBenjiSFamily(x) & (Favor(x,Spain) | LikeEating(x,Cheese)))",
      "(InBenjiSFamily(Fabien) & -(LikeEating(Fabien,Cheese) & Study(Fabien,Spanish)))",
      "Study(Fabien,Spanish)"
    ],
    "goal": "((Favor(Fabien,Spain) | Francophile(Fabien)) -> ((Study(Fabien,Spanish) & -Favor(Fabien,Spain)) | (-Study(Fabien,Spanish) & Favor(Fabien,Spain))))"
  },
  {
    "id": 83,
    "flag": "success",
    "assumptions": [
      "(Village(Gasteren) & Province(Drenthe) & In(Gasteren,Drenthe))",
      "(Province(Drenthe) & In(Drenthe,Netherlands))",
      "all x.(City(x) -> -Village(x))",
      "exists x.(Population(x,Num155) & Village(x) & In(x,Drenthe))"
    ],
    "goal": "(Village(Gasteren) & In(Gasteren,Netherlands))"
  },
  {
    "id": 84,
    "flag": "success",
    "assumptions": [
      "(Village(Gasteren) & Province(Drenthe) & In(Gasteren,Drenthe))",
      "(Province(Drenthe) & In(Drenthe,Netherlands))",
      "all x.(City(x) -> -Village(x))",
      "exists x.(Population(x,Num155) & Village(x) & In(x,Drenthe))"
    ],
    "goal": "City(Gasteren)"
  },
  {
    "id": 85,
    "flag": "success",
    "assumptions": [
      "(Village(Gasteren) & Province(Drenthe) & In(Gasteren,Drenthe))",
      "(Province(Drenthe) & In(Drenthe,Netherlands))",
      "all x.(City(x) -> -Village(x))",
      "exists x.(Population(x,Num155) & Village(x) & In(x,Drenthe))"
    ],
    "goal": "Population(Gasteren,Num155)"
  },
  {
    "id": 599,
    "flag": "success",
    "assumptions": [
      "all x.((Mammal(x) & LayEgg(x)) -> ((Platypus(x) & -Echidna(x)) | (-Platypus(x) & Echidna(x))))",
      "all x.(Platypuses(x) -> -Hyrax(x))",
      "all x.(Echidnas(x) -> -Hyrax(x))",
      "all x.(Mammal(x) -> -Invertebrate(x))",
      "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))",
      "all x.(Mammal(x) -> Animal(x))",
      "all x.(Hyrax(x) -> Mammal(x))",
      "all x.(Grebes(x) -> LayEgg(x))",
      "all x.(Grebes(x) -> (-Platypuses(x) & -Echidnas(x)))"
    ],
    "goal": "exists x.(Hyrax(x) & LayEgg(x))"
  },
  {
    "id": 600,
    "flag": "success",
    "assumptions": [
      "all x.((Mammal(x) & LayEgg(x)) -> ((Platypus(x) & -Echidna(x)) | (-Platypus(x) & Echidna(x))))",
      "all x.(Platypuses(x) -> -Hyrax(x))",
      "all x.(Echidnas(x) -> -Hyrax(x))",
      "all x.(Mammal(x) -> -Invertebrate(x))",
      "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))",
      "all x.(Mammal(x) -> Animal(x))",
      "all x.(Hyrax(x) -> Mammal(x))",
      "all x.(Grebes(x) -> LayEgg(x))",
      "all x.(Grebes(x) -> (-Platypuses(x) & -Echidnas(x)))"
    ],
    "goal": "all x.(Grebes(x) -> -Mammal(x))"
  },
  {
    "id": 601,
    "flag": "success",
    "assumptions": [
      "all x.((Mammal(x) & LayEgg(x)) -> ((Platypus(x) & -Echidna(x)) | (-Platypus(x) & Echidna(x))))",
      "all x.(Platypuses(x) -> -Hyrax(x))",
      "all x.(Echidnas(x) -> -Hyrax(x))",
      "all x.(Mammal(x) -> -Invertebrate(x))",
      "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))",
      "all x.(Mammal(x) -> Animal(x))",
      "all x.(Hyrax(x) -> Mammal(x))",
      "all x.(Grebes(x) -> LayEgg(x))",
      "all x.(Grebes(x) -> (-Platypuses(x) & -Echidnas(x)))"
    ],
    "goal": "all x.(Platypuses(x) -> Vertebrate(x))"
  },
  {
    "id": 270,
    "flag": "success",
    "assumptions": [
      "(Singer(BobbyFlynn) & SongWriter(BobbyFlynn))",
      "(FinishesIn(BobbyFlynn,Number7) & CompetesOnAustralianIdol(BobbyFlynn))",
      "all x.(CompetesOnAustralianIdol(x) -> AustralianCitizen(x))",
      "NationWideTourIn(TheOmegaThreeBand,Year2007)",
      "Member(BobbyFlynn,TheOmegaThreeBand)",
      "BornIn(BobbyFlynn,Queensland)"
    ],
    "goal": "AustralianCitizen(BobbyFlynn)"
  },
  {
    "id": 271,
    "flag": "success",
    "assumptions": [
      "(Singer(BobbyFlynn) & SongWriter(BobbyFlynn))",
      "(FinishesIn(BobbyFlynn,Number7) & CompetesOnAustralianIdol(BobbyFlynn))",
      "all x.(CompetesOnAustralianIdol(x) -> AustralianCitizen(x))",
      "NationWideTourIn(TheOmegaThreeBand,Year2007)",
      "Member(BobbyFlynn,TheOmegaThreeBand)",
      "BornIn(BobbyFlynn,Queensland)"
    ],
    "goal": "FlewToIn(BobbyFlynn,America,Year2007)"
  },
  {
    "id": 272,
    "flag": "success",
    "assumptions": [
      "(Singer(BobbyFlynn) & SongWriter(BobbyFlynn))",
      "(FinishesIn(BobbyFlynn,Number7) & CompetesOnAustralianIdol(BobbyFlynn))",
      "all x.(CompetesOnAustralianIdol(x) -> AustralianCitizen(x))",
      "NationWideTourIn(TheOmegaThreeBand,Year2007)",
      "Member(BobbyFlynn,TheOmegaThreeBand)",
      "BornIn(BobbyFlynn,Queensland)"
    ],
    "goal": "BornIn(BobbyFlynn,Queens)"
  },
  {
    "id": 713,
    "flag": "success",
    "assumptions": [
      "all x.(Protein(x) -> OrganicCompound(x))",
      "all x.(Enzyme(x) -> OrganicCompound(x))"
    ],
    "goal": "all x.(Enzyme(x) -> Protein(x))"
  },
  {
    "id": 295,
    "flag": "success",
    "assumptions": [
      "(American(MaggieFriedman) & Screenwriter(MaggieFriedman) & Producer(MaggieFriedman))",
      "(ShowRunnerOf(MaggieFriedman,WitchesOfEastEnd) & ExecutiveProducerOf(MaggieFriedman,WitchesOfEastEnd) & LifetimeTelevisionSeries(MaggieFriedman))",
      "(FantasyDrama(WitchesOfEastEnd) & Series(WitchesOfEastEnd))",
      "(Produces(MaggieFriedman,Eastwick) & Develops(MaggieFriedman,Eastwick))",
      "(Series(Eastwick) & AiredOn(Eastwick,ABC))"
    ],
    "goal": "exists x y.(Series(x) & AiredOn(x,ABC) & Develops(y,x) & ShowRunnerOf(y,WitchesOfEastEnd))"
  },
  {
    "id": 296,
    "flag": "success",
    "assumptions": [
      "(American(MaggieFriedman) & Screenwriter(MaggieFriedman) & Producer(MaggieFriedman))",
      "(ShowRunnerOf(MaggieFriedman,WitchesOfEastEnd) & ExecutiveProducerOf(MaggieFriedman,WitchesOfEastEnd) & LifetimeTelevisionSeries(MaggieFriedman))",
      "(FantasyDrama(WitchesOfEastEnd) & Series(WitchesOfEastEnd))",
      "(Produces(MaggieFriedman,Eastwick) & Develops(MaggieFriedman,Eastwick))",
      "(Series(Eastwick) & AiredOn(Eastwick,ABC))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 297,
    "flag": "success",
    "assumptions": [
      "(American(MaggieFriedman) & Screenwriter(MaggieFriedman) & Producer(MaggieFriedman))",
      "(ShowRunnerOf(MaggieFriedman,WitchesOfEastEnd) & ExecutiveProducerOf(MaggieFriedman,WitchesOfEastEnd) & LifetimeTelevisionSeries(MaggieFriedman))",
      "(FantasyDrama(WitchesOfEastEnd) & Series(WitchesOfEastEnd))",
      "(Produces(MaggieFriedman,Eastwick) & Develops(MaggieFriedman,Eastwick))",
      "(Series(Eastwick) & AiredOn(Eastwick,ABC))"
    ],
    "goal": "Develops(MaggieFriedman,WitchesOfEastEnd)"
  },
  {
    "id": 358,
    "flag": "success",
    "assumptions": [
      "(Greek(EvangelosEleftheriou) & ElectricalEngineer(EvangelosEleftheriou))",
      "WorkForIn(EvangelosEleftheriou,IBM,Zurich)",
      "all x x z.((Company(x) & WorkForIn(y,x,z)) -> HaveOfficeIn(x,z))",
      "Company(Ibm)"
    ],
    "goal": "(HaveOfficeIn(Ibm,London) | HaveOfficeIn(Ibm,Zurich))"
  },
  {
    "id": 359,
    "flag": "success",
    "assumptions": [
      "(Greek(EvangelosEleftheriou) & ElectricalEngineer(EvangelosEleftheriou))",
      "WorkForIn(EvangelosEleftheriou,IBM,Zurich)",
      "all x x z.((Company(x) & WorkForIn(y,x,z)) -> HaveOfficeIn(x,z))",
      "Company(Ibm)"
    ],
    "goal": "all x.(Greek(x) -> -WorkFor(x,Ibm))"
  },
  {
    "id": 432,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "(Song(HoorayHoorayItsAHoliHoliday) & HitAllOverEurope(HoorayHoorayItsAHoliHoliday))",
      "(Song(HoorayHoorayItsAHoliHoliday) & -Number1GermanSingle(HoorayHoorayItsAHoliHoliday))",
      "all x.(PeakBelowOn(x,Number1,GermanChart) -> -Number1GermanSingle(x))"
    ],
    "goal": "(Song(HoorayHoorayItsAHoliHoliday) & Number1GermanSingle(HoorayHoorayItsAHoliHoliday))"
  },
  {
    "id": 433,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "(Song(HoorayHoorayItsAHoliHoliday) & HitAllOverEurope(HoorayHoorayItsAHoliHoliday))",
      "(Song(HoorayHoorayItsAHoliHoliday) & -Number1GermanSingle(HoorayHoorayItsAHoliHoliday))",
      "all x.(PeakBelowOn(x,Number1,GermanChart) -> -Number1GermanSingle(x))"
    ],
    "goal": "PeaksBelowOn(HoorayHoorayItsAHoliHoliday,Number1,GermanChart)"
  },
  {
    "id": 434,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "(Song(HoorayHoorayItsAHoliHoliday) & HitAllOverEurope(HoorayHoorayItsAHoliHoliday))",
      "(Song(HoorayHoorayItsAHoliHoliday) & -Number1GermanSingle(HoorayHoorayItsAHoliHoliday))",
      "all x.(PeakBelowOn(x,Number1,GermanChart) -> -Number1GermanSingle(x))"
    ],
    "goal": "PeaksAtOn(HoorayHoorayItsAHoliHoliday,Number3,GermanChart)"
  },
  {
    "id": 692,
    "flag": "success",
    "assumptions": [
      "all x.(Chef(x) -> Can(x,Cook))",
      "exists x.(-Chef(x) & Can(x,Cook))",
      "all x.(Can(x,Cook) -> (CanMake(x,ScrambledEggs) & CanMake(x,Pasta)))",
      "all x.((CanMake(x,Cookies) & CanMake(x,Muffins)) -> Baker(x))",
      "all x.((Baker(x) & CanMake(x,ScrambledEggs)) -> CanMake(x,GoodBreakfast))",
      "[[ERROR]]"
    ],
    "goal": "CanMake(Luke,GoodBreakfast)"
  },
  {
    "id": 693,
    "flag": "success",
    "assumptions": [
      "all x.(Chef(x) -> Can(x,Cook))",
      "exists x.(-Chef(x) & Can(x,Cook))",
      "all x.(Can(x,Cook) -> (CanMake(x,ScrambledEggs) & CanMake(x,Pasta)))",
      "all x.((CanMake(x,Cookies) & CanMake(x,Muffins)) -> Baker(x))",
      "all x.((Baker(x) & CanMake(x,ScrambledEggs)) -> CanMake(x,GoodBreakfast))",
      "[[ERROR]]"
    ],
    "goal": "Chef(Luke)"
  },
  {
    "id": 557,
    "flag": "success",
    "assumptions": [
      "exists x y.(Develop(ETS,x) & Develop(ETS,y) & StandardizedTest(x) & StandardizedTest(y) & In(x,UnitedState) & In(y,UnitedState) & For(x,K12AndHigherEducation) & For(y,K12AndHigherEducation))",
      "exists x.(Administer(ETS,x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))",
      "exists x.(Develop(ETS,x) & AssociatedWith(x,EntryToUSEducationInstitution))",
      "exists x.(Develop(ETS,x) & StateWideAssesment(x) & UsedFor(x,AccountabilityTesting))"
    ],
    "goal": "exists x y.(Develop(ETS,x) & StateWideAssesment(x) & Develop(ETS,y) & AssociatedWith(y,EntryToUSEducationInstitution))"
  },
  {
    "id": 558,
    "flag": "success",
    "assumptions": [
      "exists x y.(Develop(ETS,x) & Develop(ETS,y) & StandardizedTest(x) & StandardizedTest(y) & In(x,UnitedState) & In(y,UnitedState) & For(x,K12AndHigherEducation) & For(y,K12AndHigherEducation))",
      "exists x.(Administer(ETS,x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))",
      "exists x.(Develop(ETS,x) & AssociatedWith(x,EntryToUSEducationInstitution))",
      "exists x.(Develop(ETS,x) & StateWideAssesment(x) & UsedFor(x,AccountabilityTesting))"
    ],
    "goal": "all x.(Administer(ETS,x) -> -InternationalTest(x))"
  },
  {
    "id": 559,
    "flag": "success",
    "assumptions": [
      "exists x y.(Develop(ETS,x) & Develop(ETS,y) & StandardizedTest(x) & StandardizedTest(y) & In(x,UnitedState) & In(y,UnitedState) & For(x,K12AndHigherEducation) & For(y,K12AndHigherEducation))",
      "exists x.(Administer(ETS,x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))",
      "exists x.(Develop(ETS,x) & AssociatedWith(x,EntryToUSEducationInstitution))",
      "exists x.(Develop(ETS,x) & StateWideAssesment(x) & UsedFor(x,AccountabilityTesting))"
    ],
    "goal": "exists x.(Administer(ETS,x) & InChina(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))"
  },
  {
    "id": 993,
    "flag": "success",
    "assumptions": [
      "all x.((Hodophiles(x) & EnjoyEating(x,Gelato)) -> Enjoy(x,VacationToItaly))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Hodophiles(x) & TakeIn(x,StudyAbroadSemester,Europe)) -> -Regret(x,CollegeExperience))",
      "all x.((Hodophiles(x) & LoveToTravelOften(x)) -> TakeIn(x,StudyAbroadSemester,Europe))",
      "(Hodophiles(Robert) & -((EnjoyEating(Robert,Gelato) & -LoveToTravelOften(Robert)) | (-EnjoyEating(Robert,Gelato) & LoveToTravelOften(Robert))))"
    ],
    "goal": "exists y.(Resist(Robert,y) & Hallmark(y) & Delectabl(y) & Dessert(y) & FamousIn(y,Italy))"
  },
  {
    "id": 994,
    "flag": "success",
    "assumptions": [
      "all x.((Hodophiles(x) & EnjoyEating(x,Gelato)) -> Enjoy(x,VacationToItaly))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Hodophiles(x) & TakeIn(x,StudyAbroadSemester,Europe)) -> -Regret(x,CollegeExperience))",
      "all x.((Hodophiles(x) & LoveToTravelOften(x)) -> TakeIn(x,StudyAbroadSemester,Europe))",
      "(Hodophiles(Robert) & -((EnjoyEating(Robert,Gelato) & -LoveToTravelOften(Robert)) | (-EnjoyEating(Robert,Gelato) & LoveToTravelOften(Robert))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 995,
    "flag": "success",
    "assumptions": [
      "all x.((Hodophiles(x) & EnjoyEating(x,Gelato)) -> Enjoy(x,VacationToItaly))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Hodophiles(x) & TakeIn(x,StudyAbroadSemester,Europe)) -> -Regret(x,CollegeExperience))",
      "all x.((Hodophiles(x) & LoveToTravelOften(x)) -> TakeIn(x,StudyAbroadSemester,Europe))",
      "(Hodophiles(Robert) & -((EnjoyEating(Robert,Gelato) & -LoveToTravelOften(Robert)) | (-EnjoyEating(Robert,Gelato) & LoveToTravelOften(Robert))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 776,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 777,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 778,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 395,
    "flag": "success",
    "assumptions": [
      "(Speedway(Islip) & SmallestRaceTrack(Islip))",
      "exists x y.(DemolitionDerby(x) & SmallestRaceTrack(y) & On(x,y))",
      "((Demolished(Islip) & -StillUsed(Islip)) | (-Demolished(Islip) & StillUsed(Islip)))",
      "all x.((Speedway(x) & StillUsed(x)) -> Have(Races,HeldAt,x))",
      "-Have(Races,HeldAt,Islip)"
    ],
    "goal": "exists x y.(DemolitionDerby(x) & On(x,y) & Demolished(y))"
  },
  {
    "id": 396,
    "flag": "success",
    "assumptions": [
      "(Speedway(Islip) & SmallestRaceTrack(Islip))",
      "exists x y.(DemolitionDerby(x) & SmallestRaceTrack(y) & On(x,y))",
      "((Demolished(Islip) & -StillUsed(Islip)) | (-Demolished(Islip) & StillUsed(Islip)))",
      "all x.((Speedway(x) & StillUsed(x)) -> Have(Races,HeldAt,x))",
      "-Have(Races,HeldAt,Islip)"
    ],
    "goal": "Demolished(Islip)"
  },
  {
    "id": 397,
    "flag": "success",
    "assumptions": [
      "(Speedway(Islip) & SmallestRaceTrack(Islip))",
      "exists x y.(DemolitionDerby(x) & SmallestRaceTrack(y) & On(x,y))",
      "((Demolished(Islip) & -StillUsed(Islip)) | (-Demolished(Islip) & StillUsed(Islip)))",
      "all x.((Speedway(x) & StillUsed(x)) -> Have(Races,HeldAt,x))",
      "-Have(Races,HeldAt,Islip)"
    ],
    "goal": "StillUsed(Islip)"
  },
  {
    "id": 1211,
    "flag": "success",
    "assumptions": [
      "all x.(Taxpayer(x) -> ContributeTo(x,Country))",
      "all x.(WorkFor(x,GovernmentAgency) -> Taxpayer(x))",
      "all x.(ServesIn(x,TheArmy) -> WorkFor(x,GovernmentAgency))",
      "all x.(SentencedForMurder(x) -> Imprisoned(x))",
      "[[ERROR]]",
      "((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))",
      "((Has(James,CriminalRecord) & -Taxpayer(James)) | (-Has(James,CriminalRecord) & Taxpayer(James)))"
    ],
    "goal": "ContributeToCountry(James)"
  },
  {
    "id": 1212,
    "flag": "success",
    "assumptions": [
      "all x.(Taxpayer(x) -> ContributeTo(x,Country))",
      "all x.(WorkFor(x,GovernmentAgency) -> Taxpayer(x))",
      "all x.(ServesIn(x,TheArmy) -> WorkFor(x,GovernmentAgency))",
      "all x.(SentencedForMurder(x) -> Imprisoned(x))",
      "[[ERROR]]",
      "((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))",
      "((Has(James,CriminalRecord) & -Taxpayer(James)) | (-Has(James,CriminalRecord) & Taxpayer(James)))"
    ],
    "goal": "-ContributeTo(James,Country)"
  },
  {
    "id": 1213,
    "flag": "success",
    "assumptions": [
      "all x.(Taxpayer(x) -> ContributeTo(x,Country))",
      "all x.(WorkFor(x,GovernmentAgency) -> Taxpayer(x))",
      "all x.(ServesIn(x,TheArmy) -> WorkFor(x,GovernmentAgency))",
      "all x.(SentencedForMurder(x) -> Imprisoned(x))",
      "[[ERROR]]",
      "((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))",
      "((Has(James,CriminalRecord) & -Taxpayer(James)) | (-Has(James,CriminalRecord) & Taxpayer(James)))"
    ],
    "goal": "(ContributeTo(James,Country) & ServesIn(James,Army))"
  },
  {
    "id": 1214,
    "flag": "success",
    "assumptions": [
      "all x.(Taxpayer(x) -> ContributeTo(x,Country))",
      "all x.(WorkFor(x,GovernmentAgency) -> Taxpayer(x))",
      "all x.(ServesIn(x,TheArmy) -> WorkFor(x,GovernmentAgency))",
      "all x.(SentencedForMurder(x) -> Imprisoned(x))",
      "[[ERROR]]",
      "((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))",
      "((Has(James,CriminalRecord) & -Taxpayer(James)) | (-Has(James,CriminalRecord) & Taxpayer(James)))"
    ],
    "goal": "-(ContributeTo(James,Country) & ServesIn(James,Army))"
  },
  {
    "id": 32,
    "flag": "success",
    "assumptions": [
      "DrainageBasinOf(CrotonRiverWatershed,CrotonRiver)",
      "In(CrotonRiver,SouthwesternNewYork)",
      "all x.((Water(x) & In(x,CrotonRiverWatershed)) -> FlowsTo(x,Bronx))",
      "In(Bronx,NewYork)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 33,
    "flag": "success",
    "assumptions": [
      "DrainageBasinOf(CrotonRiverWatershed,CrotonRiver)",
      "In(CrotonRiver,SouthwesternNewYork)",
      "all x.((Water(x) & In(x,CrotonRiverWatershed)) -> FlowsTo(x,Bronx))",
      "In(Bronx,NewYork)"
    ],
    "goal": "In(CrotonRiverWatershed,Bronx)"
  },
  {
    "id": 34,
    "flag": "success",
    "assumptions": [
      "DrainageBasinOf(CrotonRiverWatershed,CrotonRiver)",
      "In(CrotonRiver,SouthwesternNewYork)",
      "all x.((Water(x) & In(x,CrotonRiverWatershed)) -> FlowsTo(x,Bronx))",
      "In(Bronx,NewYork)"
    ],
    "goal": "all x.((Water(x) & From(x,CrotonRiver)) -> FlowsTo(x,Bronx))"
  },
  {
    "id": 705,
    "flag": "success",
    "assumptions": [
      "all x.(NuclearPoweredSubmarine(x) -> Warship(x))",
      "all x.(NuclearPoweredSubmarine(x) -> -CommercialVessel(x))"
    ],
    "goal": "all x.(Warship(x) -> -CommercialVessel(x))"
  },
  {
    "id": 198,
    "flag": "success",
    "assumptions": [
      "all x y z.((AlbumByBand(x,y) & RockBand(y,z)) -> Genre(x,Rock))",
      "all x y z.((AlbumByBand(x,y) & AlbumAward(x,z)) -> RockBandAward(y,z))",
      "AlbumByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)",
      "RockBand(The_Tragically_Hip,Canada)",
      "SongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)",
      "AlbumAward(Trouble_at_the_Henhouse,The_Album_of_the_Year)",
      "exists x.(SongInFilm(x) & SongInAlbum(x,Trouble_at_the_Henhouse))"
    ],
    "goal": "Genre(TroubleAtTheHenhouse,Rock)"
  },
  {
    "id": 199,
    "flag": "success",
    "assumptions": [
      "all x y z.((AlbumByBand(x,y) & RockBand(y,z)) -> Genre(x,Rock))",
      "all x y z.((AlbumByBand(x,y) & AlbumAward(x,z)) -> RockBandAward(y,z))",
      "AlbumByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)",
      "RockBand(The_Tragically_Hip,Canada)",
      "SongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)",
      "AlbumAward(Trouble_at_the_Henhouse,The_Album_of_the_Year)",
      "exists x.(SongInFilm(x) & SongInAlbum(x,Trouble_at_the_Henhouse))"
    ],
    "goal": "-exists x.(RockBand(x,Canada) & Award(x,TheAlbumOfTheYear))"
  },
  {
    "id": 200,
    "flag": "success",
    "assumptions": [
      "all x y z.((AlbumByBand(x,y) & RockBand(y,z)) -> Genre(x,Rock))",
      "all x y z.((AlbumByBand(x,y) & AlbumAward(x,z)) -> RockBandAward(y,z))",
      "AlbumByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)",
      "RockBand(The_Tragically_Hip,Canada)",
      "SongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)",
      "AlbumAward(Trouble_at_the_Henhouse,The_Album_of_the_Year)",
      "exists x.(SongInFilm(x) & SongInAlbum(x,Trouble_at_the_Henhouse))"
    ],
    "goal": "SongInFilm(ButtsWigglin)"
  },
  {
    "id": 676,
    "flag": "success",
    "assumptions": [
      "(SoftwareEngineer(Daniel) & WorksAt(Daniel,PalantirTechnologies))",
      "(Studied(Daniel,Bioengineering) & UndergraduateAt(Daniel,RiceUniversity))",
      "(WorksAtMeta(DanielsOlderSister) & TechnicalSourcer(DanielsOlderSister))",
      "(GraduatedFromStanfordUniversity(DanielsOlderSister) & GraduatedFromStanfordUniversity(DanielsDad))",
      "(Doctor(DanielsDad) & Practicing(DanielsDad,InternalMedicine) & PracticingAt(DanielsDad,VeteransHospital) & In(VeteransHospital,Minneapolis))"
    ],
    "goal": "(AppliedTo(Daniel,StanfordUniversity) & -GotInto(Daniel,StanfordUniversity) & Alumni(Daniel,StanfordUniversity))"
  },
  {
    "id": 677,
    "flag": "success",
    "assumptions": [
      "(SoftwareEngineer(Daniel) & WorksAt(Daniel,PalantirTechnologies))",
      "(Studied(Daniel,Bioengineering) & UndergraduateAt(Daniel,RiceUniversity))",
      "(WorksAtMeta(DanielsOlderSister) & TechnicalSourcer(DanielsOlderSister))",
      "(GraduatedFromStanfordUniversity(DanielsOlderSister) & GraduatedFromStanfordUniversity(DanielsDad))",
      "(Doctor(DanielsDad) & Practicing(DanielsDad,InternalMedicine) & PracticingAt(DanielsDad,VeteransHospital) & In(VeteransHospital,Minneapolis))"
    ],
    "goal": "(Studied(Daniel,Bioengineering) & UndergraduateAt(Daniel,RiceUniversity))"
  },
  {
    "id": 678,
    "flag": "success",
    "assumptions": [
      "(SoftwareEngineer(Daniel) & WorksAt(Daniel,PalantirTechnologies))",
      "(Studied(Daniel,Bioengineering) & UndergraduateAt(Daniel,RiceUniversity))",
      "(WorksAtMeta(DanielsOlderSister) & TechnicalSourcer(DanielsOlderSister))",
      "(GraduatedFromStanfordUniversity(DanielsOlderSister) & GraduatedFromStanfordUniversity(DanielsDad))",
      "(Doctor(DanielsDad) & Practicing(DanielsDad,InternalMedicine) & PracticingAt(DanielsDad,VeteransHospital) & In(VeteransHospital,Minneapolis))"
    ],
    "goal": "(GrewUpIn(Daniel,Minneapolis) & GrewUpIn(Daniel,Minneapolis))"
  },
  {
    "id": 326,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(AmericanAirlinesAircraft(x) -> WorldMajorLargePassengerAircraftManufacturer(x))",
      "MoreInRevenue(Airbus,Boeing)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 327,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(AmericanAirlinesAircraft(x) -> WorldMajorLargePassengerAircraftManufacturer(x))",
      "MoreInRevenue(Airbus,Boeing)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 328,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(AmericanAirlinesAircraft(x) -> WorldMajorLargePassengerAircraftManufacturer(x))",
      "MoreInRevenue(Airbus,Boeing)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 329,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(AmericanAirlinesAircraft(x) -> WorldMajorLargePassengerAircraftManufacturer(x))",
      "MoreInRevenue(Airbus,Boeing)"
    ],
    "goal": "exists x.(WorldMajorLargePassengerAircraftManufacturer(x) & ProducedBy(x,Airbus) & ProducedBy(x,Boeing))"
  },
  {
    "id": 255,
    "flag": "success",
    "assumptions": [
      "(Island(Luzon) & In(Luzon,Philippines))",
      "exists x.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,Luzon))",
      "exists x.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,Luzon) & Deadly(x))"
    ],
    "goal": "(Island(Leyte) & In(Leyte,Philippines))"
  },
  {
    "id": 256,
    "flag": "success",
    "assumptions": [
      "(Island(Luzon) & In(Luzon,Philippines))",
      "exists x.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,Luzon))",
      "exists x.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,Luzon) & Deadly(x))"
    ],
    "goal": "all x y.((Earthquake(x) & StrikeInCity(x,y) & In(y,Philippines)) -> -Deadly(x))"
  },
  {
    "id": 257,
    "flag": "success",
    "assumptions": [
      "(Island(Luzon) & In(Luzon,Philippines))",
      "exists x.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,Luzon))",
      "exists x.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,Luzon) & Deadly(x))"
    ],
    "goal": "exists x y.(Earthquake(x) & StrikeInYr(x,Year1999) & StrikeInMo(x,December) & StrikeInCity(x,y) & In(y,Philippines))"
  },
  {
    "id": 961,
    "flag": "success",
    "assumptions": [
      "all x.((Like(x,FinancialRisk) -> InvestInRegularly(x,PublicStockMarket)) | EnjoyRegularly(x,Gambling))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "InvestInRegularly(Matt,PublicStockMarket)",
      "Like(Matt,FinancialRisk)"
    ],
    "goal": "Newspapers(Matt)"
  },
  {
    "id": 962,
    "flag": "success",
    "assumptions": [
      "all x.((Like(x,FinancialRisk) -> InvestInRegularly(x,PublicStockMarket)) | EnjoyRegularly(x,Gambling))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "InvestInRegularly(Matt,PublicStockMarket)",
      "Like(Matt,FinancialRisk)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 963,
    "flag": "success",
    "assumptions": [
      "all x.((Like(x,FinancialRisk) -> InvestInRegularly(x,PublicStockMarket)) | EnjoyRegularly(x,Gambling))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "InvestInRegularly(Matt,PublicStockMarket)",
      "Like(Matt,FinancialRisk)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 683,
    "flag": "success",
    "assumptions": [
      "all x.((Student(x) & LearningPiano(x)) -> Can(x,Strike,RightNote))",
      "all x.((Student(x) & Can(x,Strike,RightNote)) -> Can(x,GetTheRhythmRight))",
      "all x.((Student(x) & Can(x,GetTheRhythmRight)) -> Start(x,WorkingOnCoordinationBetweenTheLeftAndRightHands))",
      "all x.((((Student(x) & Start(x,WorkingOnCoordinationBetweenTheLeftAndRightHands)) -> Become(x,GoodAtCoordination)) & -Find(x,CoordinationChallenging)) | (-((Student(x) & Start(x,WorkingOnCoordinationBetweenTheLeftAndRightHands)) -> Become(x,GoodAtCoordination)) & Find(x,CoordinationChallenging)))",
      "((Can(John,GetTheRhythmRight) & Can(John,GetTheRhythmRight) & Become(John,GoodAtCoordination)) -> PutEmotionInto(John,HisPlaying))",
      "(Student(John) & LearningPiano(John))",
      "-Find(John,CoordinationChallenging)"
    ],
    "goal": "Can(John,GetTheRhythmRight)"
  },
  {
    "id": 684,
    "flag": "success",
    "assumptions": [
      "all x.((Student(x) & LearningPiano(x)) -> Can(x,Strike,RightNote))",
      "all x.((Student(x) & Can(x,Strike,RightNote)) -> Can(x,GetTheRhythmRight))",
      "all x.((Student(x) & Can(x,GetTheRhythmRight)) -> Start(x,WorkingOnCoordinationBetweenTheLeftAndRightHands))",
      "all x.((((Student(x) & Start(x,WorkingOnCoordinationBetweenTheLeftAndRightHands)) -> Become(x,GoodAtCoordination)) & -Find(x,CoordinationChallenging)) | (-((Student(x) & Start(x,WorkingOnCoordinationBetweenTheLeftAndRightHands)) -> Become(x,GoodAtCoordination)) & Find(x,CoordinationChallenging)))",
      "((Can(John,GetTheRhythmRight) & Can(John,GetTheRhythmRight) & Become(John,GoodAtCoordination)) -> PutEmotionInto(John,HisPlaying))",
      "(Student(John) & LearningPiano(John))",
      "-Find(John,CoordinationChallenging)"
    ],
    "goal": "PutEmotionInto(John,HisPlaying)"
  },
  {
    "id": 650,
    "flag": "success",
    "assumptions": [
      "(FormerSwimmer(BarbaraAnnMarshall) & FormerWorldRecordHolder(BarbaraAnnMarshall))",
      "ParticipatedIn(BarbaraAnnMarshall,1972SummerOlympics)",
      "HomeCountry(BarbaraAnnMarshall,UnitedStates)",
      "all x.exists y.((ParticipatedIn(x,1972SummerOlympics) & HomeCountry(x,y)) -> Represented(x,y))",
      "ParticipatedIn(BarbaraAnnMarshall,PreliminaryHeatFreestyleRelay)",
      "-ParticipatedIn(BarbaraAnnMarshall,FinalHeatFreestyleRelay)",
      "[[ERROR]]"
    ],
    "goal": "-Recieved(BarbaraAnnMarshall,Medal)"
  },
  {
    "id": 651,
    "flag": "success",
    "assumptions": [
      "(FormerSwimmer(BarbaraAnnMarshall) & FormerWorldRecordHolder(BarbaraAnnMarshall))",
      "ParticipatedIn(BarbaraAnnMarshall,1972SummerOlympics)",
      "HomeCountry(BarbaraAnnMarshall,UnitedStates)",
      "all x.exists y.((ParticipatedIn(x,1972SummerOlympics) & HomeCountry(x,y)) -> Represented(x,y))",
      "ParticipatedIn(BarbaraAnnMarshall,PreliminaryHeatFreestyleRelay)",
      "-ParticipatedIn(BarbaraAnnMarshall,FinalHeatFreestyleRelay)",
      "[[ERROR]]"
    ],
    "goal": "Represented(BarbaraAnnMarshall,UnitedStates)"
  },
  {
    "id": 572,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Player(x) -> StartRed(x))",
      "all x.((Player(x) & -ReachYellow(x)) -> -ReachGreen(x))",
      "all x.((Player(x) & StartRed(x)) -> ReachYellow(x))",
      "all x.((Player(x) & StartRed(x) & -ReachYellow(x)) -> -ReachGreen(x))"
    ],
    "goal": "exists x.(Player(x) & RedToGreen(x))"
  },
  {
    "id": 573,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Player(x) -> StartRed(x))",
      "all x.((Player(x) & -ReachYellow(x)) -> -ReachGreen(x))",
      "all x.((Player(x) & StartRed(x)) -> ReachYellow(x))",
      "all x.((Player(x) & StartRed(x) & -ReachYellow(x)) -> -ReachGreen(x))"
    ],
    "goal": "exists x.(Player(x) & RedToYellow(x))"
  },
  {
    "id": 574,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(Player(x) -> StartRed(x))",
      "all x.((Player(x) & -ReachYellow(x)) -> -ReachGreen(x))",
      "all x.((Player(x) & StartRed(x)) -> ReachYellow(x))",
      "all x.((Player(x) & StartRed(x) & -ReachYellow(x)) -> -ReachGreen(x))"
    ],
    "goal": "exists x.(Player(x) & CompleteGame(x))"
  },
  {
    "id": 1090,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((GoodWith(x,Pet) & In(x,LoveCity)) -> -ScaredOf(x,Animal))",
      "all x.(In(x,LoveCity) -> (ScaredOf(x,Animal) | Loves(x,Animal)))",
      "(((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & -Loves(Adam,Animal)) | (-ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & Loves(Adam,Animal))) & In(Adam,LoveCity))"
    ],
    "goal": "ScaredOf(Adam,Animal)"
  },
  {
    "id": 1091,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((GoodWith(x,Pet) & In(x,LoveCity)) -> -ScaredOf(x,Animal))",
      "all x.(In(x,LoveCity) -> (ScaredOf(x,Animal) | Loves(x,Animal)))",
      "(((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & -Loves(Adam,Animal)) | (-ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & Loves(Adam,Animal))) & In(Adam,LoveCity))"
    ],
    "goal": "ConsidersMostImportantLoveLanguage(Adam,WordOfAffirmation)"
  },
  {
    "id": 1092,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((GoodWith(x,Pet) & In(x,LoveCity)) -> -ScaredOf(x,Animal))",
      "all x.(In(x,LoveCity) -> (ScaredOf(x,Animal) | Loves(x,Animal)))",
      "(((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & -Loves(Adam,Animal)) | (-ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & Loves(Adam,Animal))) & In(Adam,LoveCity))"
    ],
    "goal": "(ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & ConsidersMostImportantLoveLanguage(Adam,WordOfAffirmation))"
  },
  {
    "id": 1093,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((GoodWith(x,Pet) & In(x,LoveCity)) -> -ScaredOf(x,Animal))",
      "all x.(In(x,LoveCity) -> (ScaredOf(x,Animal) | Loves(x,Animal)))",
      "(((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & -Loves(Adam,Animal)) | (-ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & Loves(Adam,Animal))) & In(Adam,LoveCity))"
    ],
    "goal": "((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & -ConsidersMostImportantLoveLanguage(Adam,WordOfAffirmation)) | (-ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & ConsidersMostImportantLoveLanguage(Adam,WordOfAffirmation)))"
  },
  {
    "id": 1094,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((GoodWith(x,Pet) & In(x,LoveCity)) -> -ScaredOf(x,Animal))",
      "all x.(In(x,LoveCity) -> (ScaredOf(x,Animal) | Loves(x,Animal)))",
      "(((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & -Loves(Adam,Animal)) | (-ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch) & Loves(Adam,Animal))) & In(Adam,LoveCity))"
    ],
    "goal": "((ConsidersMostImportantLoveLanguage(Adam,PhysicalTouch,MostImportantLoveLanguage) | GoodWith(x,Pet)) -> ConsidersMostImportantLoveLanguage(Adam,WordOfAffirmation))"
  },
  {
    "id": 1277,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Animal(x) & Fly(x) & Bird(x))",
      "all x.(Iguana(x) -> Reptile(x))",
      "-((Iguana(John) & -Bird(John)) | (-Iguana(John) & Bird(John)))",
      "Animal(John)"
    ],
    "goal": "Reptile(John)"
  },
  {
    "id": 1278,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Animal(x) & Fly(x) & Bird(x))",
      "all x.(Iguana(x) -> Reptile(x))",
      "-((Iguana(John) & -Bird(John)) | (-Iguana(John) & Bird(John)))",
      "Animal(John)"
    ],
    "goal": "-(Iguana(John) & Fly(John))"
  },
  {
    "id": 1279,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "exists x.(Animal(x) & Fly(x) & Bird(x))",
      "all x.(Iguana(x) -> Reptile(x))",
      "-((Iguana(John) & -Bird(John)) | (-Iguana(John) & Bird(John)))",
      "Animal(John)"
    ],
    "goal": "(Animal(John) & Fly(John) & Bird(John))"
  },
  {
    "id": 86,
    "flag": "success",
    "assumptions": [
      "(Movie(EndGame) & Released(EndGame,Yr2006))",
      "SetIn(EndGame,Washington)",
      "-FilmedIn(EndGame,Washington)",
      "[[ERROR]]",
      "Directed(AndyChang,EndGame)",
      "From(AndyChang,HongKong)"
    ],
    "goal": "FilmedIn(EndGame,NewYork)"
  },
  {
    "id": 87,
    "flag": "success",
    "assumptions": [
      "(Movie(EndGame) & Released(EndGame,Yr2006))",
      "SetIn(EndGame,Washington)",
      "-FilmedIn(EndGame,Washington)",
      "[[ERROR]]",
      "Directed(AndyChang,EndGame)",
      "From(AndyChang,HongKong)"
    ],
    "goal": "all x.-(Directed(x,EndGame) & From(x,HongKong))"
  },
  {
    "id": 88,
    "flag": "success",
    "assumptions": [
      "(Movie(EndGame) & Released(EndGame,Yr2006))",
      "SetIn(EndGame,Washington)",
      "-FilmedIn(EndGame,Washington)",
      "[[ERROR]]",
      "Directed(AndyChang,EndGame)",
      "From(AndyChang,HongKong)"
    ],
    "goal": "all x.(Directed(AndyChang,x) -> -FilmedIn(x,Washington))"
  },
  {
    "id": 17,
    "flag": "success",
    "assumptions": [
      "(RealNum(Num6) & RealNum(Num7) & RealNum(Num8))",
      "all x y.((RealNum(x) & RealNum(y) & IsSuccessorOf(x,y)) -> Larger(x,y))",
      "all x y.(Larger(x,y) -> -Larger(y,x))",
      "exists y.(IsSuccessorOf(y,Num6) & Equals(Num7,y))",
      "exists y.(IsSuccessorOf(y,Num7) & Equals(Num8,y))",
      "Positive(Num2)",
      "all x y.((Positive(x) & IsDouble(y,x)) -> Positive(y))",
      "IsDouble(Num8,Num4)",
      "IsDouble(Num4,Num2)"
    ],
    "goal": "Larger(Eight,Seven)"
  },
  {
    "id": 18,
    "flag": "success",
    "assumptions": [
      "(RealNum(Num6) & RealNum(Num7) & RealNum(Num8))",
      "all x y.((RealNum(x) & RealNum(y) & IsSuccessorOf(x,y)) -> Larger(x,y))",
      "all x y.(Larger(x,y) -> -Larger(y,x))",
      "exists y.(IsSuccessorOf(y,Num6) & Equals(Num7,y))",
      "exists y.(IsSuccessorOf(y,Num7) & Equals(Num8,y))",
      "Positive(Num2)",
      "all x y.((Positive(x) & IsDouble(y,x)) -> Positive(y))",
      "IsDouble(Num8,Num4)",
      "IsDouble(Num4,Num2)"
    ],
    "goal": "Positive(Eight)"
  },
  {
    "id": 19,
    "flag": "success",
    "assumptions": [
      "(RealNum(Num6) & RealNum(Num7) & RealNum(Num8))",
      "all x y.((RealNum(x) & RealNum(y) & IsSuccessorOf(x,y)) -> Larger(x,y))",
      "all x y.(Larger(x,y) -> -Larger(y,x))",
      "exists y.(IsSuccessorOf(y,Num6) & Equals(Num7,y))",
      "exists y.(IsSuccessorOf(y,Num7) & Equals(Num8,y))",
      "Positive(Num2)",
      "all x y.((Positive(x) & IsDouble(y,x)) -> Positive(y))",
      "IsDouble(Num8,Num4)",
      "IsDouble(Num4,Num2)"
    ],
    "goal": "Larger(Six,Seven)"
  },
  {
    "id": 737,
    "flag": "success",
    "assumptions": [
      "all x.(Dog(x) -> Sleep(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1378,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1379,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1380,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 712,
    "flag": "success",
    "assumptions": [
      "all x.(-Admit(x,Mistake) -> -GoodTeacher(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 72,
    "flag": "success",
    "assumptions": [
      "all x.(PhilatelicLit(x) -> (Stamp(x) | Periodical(x) | Auction(x) | Book(x) | Bibliography(x) | Background(x)))",
      "-Stamp(Mort)",
      "-(Periodical(Mort) | Auction(Mort) | Bibliography(Mort) | Background(Mort))",
      "PhilatelicLit(Mort)"
    ],
    "goal": "Background(Mort)"
  },
  {
    "id": 73,
    "flag": "success",
    "assumptions": [
      "all x.(PhilatelicLit(x) -> (Stamp(x) | Periodical(x) | Auction(x) | Book(x) | Bibliography(x) | Background(x)))",
      "-Stamp(Mort)",
      "-(Periodical(Mort) | Auction(Mort) | Bibliography(Mort) | Background(Mort))",
      "PhilatelicLit(Mort)"
    ],
    "goal": "PhilatelicLit(Eragon)"
  },
  {
    "id": 279,
    "flag": "success",
    "assumptions": [
      "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))",
      "Produces(ColumbiaPictures,AdventuresOfRusty)",
      "Produces(Paramount,Tintin)",
      "AdventureFilm(Tintin)"
    ],
    "goal": "exists x.(DramaFilm(x) & Produces(ColumbiaPictures,x))"
  },
  {
    "id": 280,
    "flag": "success",
    "assumptions": [
      "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))",
      "Produces(ColumbiaPictures,AdventuresOfRusty)",
      "Produces(Paramount,Tintin)",
      "AdventureFilm(Tintin)"
    ],
    "goal": "exists x.(AdventureFilm(x) & Produces(ColumbiaPictures,x))"
  },
  {
    "id": 281,
    "flag": "success",
    "assumptions": [
      "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))",
      "Produces(ColumbiaPictures,AdventuresOfRusty)",
      "Produces(Paramount,Tintin)",
      "AdventureFilm(Tintin)"
    ],
    "goal": "exists x.(ChildrensFilm(x) & Produces(Paramount,x))"
  },
  {
    "id": 282,
    "flag": "success",
    "assumptions": [
      "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))",
      "Produces(ColumbiaPictures,AdventuresOfRusty)",
      "Produces(Paramount,Tintin)",
      "AdventureFilm(Tintin)"
    ],
    "goal": "exists x.(AdventureFilm(x) & Produces(Paramount,x))"
  },
  {
    "id": 660,
    "flag": "success",
    "assumptions": [
      "ParamountLeaderOf(DengXiaoping,PeoplesRepublicOfChina)",
      "(PraisedFor(DengXiaoping,ReaffirmationOfReformProgram) & PraisedFor(DengXiaoping,ReversionOfHongKong) & PraisedFor(DengXiaoping,ReturnOfMacau))",
      "(PartysSecretaryGeneral(DengXiaoping) & Under(DengXiaoping,Mao) & VicePremierInThe1950s(DengXiaoping) & PresidedOver(DengXiaoping,AntiRightistCampaign) & LaunchedBy(AntiRightistCampaign,Mao))",
      "(InstrumentalIn(DengXiaoping,ChinasEconomicReconstruction) & Following(ChinasEconomicReconstruction,GreatLeapForward) & Disastrous(GreatLeapForward))",
      "DiedIn(Mao,Year1976)",
      "GraduallyRoseTo(DengXiaoping,SupremePower)"
    ],
    "goal": "exists x.(ParamountLeaderOf(x,Prc) & VicePremier(x))"
  },
  {
    "id": 661,
    "flag": "success",
    "assumptions": [
      "ParamountLeaderOf(DengXiaoping,PeoplesRepublicOfChina)",
      "(PraisedFor(DengXiaoping,ReaffirmationOfReformProgram) & PraisedFor(DengXiaoping,ReversionOfHongKong) & PraisedFor(DengXiaoping,ReturnOfMacau))",
      "(PartysSecretaryGeneral(DengXiaoping) & Under(DengXiaoping,Mao) & VicePremierInThe1950s(DengXiaoping) & PresidedOver(DengXiaoping,AntiRightistCampaign) & LaunchedBy(AntiRightistCampaign,Mao))",
      "(InstrumentalIn(DengXiaoping,ChinasEconomicReconstruction) & Following(ChinasEconomicReconstruction,GreatLeapForward) & Disastrous(GreatLeapForward))",
      "DiedIn(Mao,Year1976)",
      "GraduallyRoseTo(DengXiaoping,SupremePower)"
    ],
    "goal": "exists x y.(PresidedOver(Dengxiaoping,x) & Under(Dengxiaoping,y) & LaunchedBy(x,y))"
  },
  {
    "id": 662,
    "flag": "success",
    "assumptions": [
      "ParamountLeaderOf(DengXiaoping,PeoplesRepublicOfChina)",
      "(PraisedFor(DengXiaoping,ReaffirmationOfReformProgram) & PraisedFor(DengXiaoping,ReversionOfHongKong) & PraisedFor(DengXiaoping,ReturnOfMacau))",
      "(PartysSecretaryGeneral(DengXiaoping) & Under(DengXiaoping,Mao) & VicePremierInThe1950s(DengXiaoping) & PresidedOver(DengXiaoping,AntiRightistCampaign) & LaunchedBy(AntiRightistCampaign,Mao))",
      "(InstrumentalIn(DengXiaoping,ChinasEconomicReconstruction) & Following(ChinasEconomicReconstruction,GreatLeapForward) & Disastrous(GreatLeapForward))",
      "DiedIn(Mao,Year1976)",
      "GraduallyRoseTo(DengXiaoping,SupremePower)"
    ],
    "goal": "exists x.(InstrumentalIn(x,Chinaseconomicreconstruction) & GraduallyRoseTo(x,Supremepower))"
  },
  {
    "id": 1047,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "RealisticFiction(Dune)"
  },
  {
    "id": 1048,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "(ResultOf(Dune,CreativeProcess) & ImaginativeProcess(Dune))"
  },
  {
    "id": 1049,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "((ResultOf(Dune,CreativeProcess) & -ImaginativeProcess(Dune)) | (-ResultOf(Dune,CreativeProcess) & ImaginativeProcess(Dune)))"
  },
  {
    "id": 1050,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1051,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "(Knows(Dan,Dune) & ((ResultOf(Dune,CreativeProcess) & -ScienceFiction(Dune)) | (-ResultOf(Dune,CreativeProcess) & ScienceFiction(Dune))))"
  },
  {
    "id": 1052,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "((ResultOf(Dune,CreativeProcess) & ImaginativeProcess(Dune)) -> (-ResultOf(Dune,CreativeProcess) & -ScienceFiction(Dune)))"
  },
  {
    "id": 1053,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "((Knows(Dan,Dune) & -((Fact(Dune) & -ResultOf(Dune,CreativeProcess)) | (-Fact(Dune) & ResultOf(Dune,CreativeProcess)))) -> (ResultOf(Dune,CreativeProcess) & ScienceFiction(Dune)))"
  },
  {
    "id": 1054,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "((Knows(Dan,Dune) & ScienceFiction(Dune)) -> -(ResultOf(Dune,CreativeProcess) & ScienceFiction(Dune)))"
  },
  {
    "id": 1055,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "((Knows(Dan,Dune) & -(ResultOf(Dune,CreativeProcess) & ScienceFiction(Dune))) -> -(ImaginativeProcess(Dune) | ProvedToBe(Dune,False)))"
  },
  {
    "id": 1056,
    "flag": "success",
    "assumptions": [
      "all x.((Knows(Dan,x) & ImaginativeProcess(x)) -> ResultOf(x,CreativeProcess))",
      "all x.((Knows(Dan,x) & ScienceFiction(x)) -> ImaginativeProcess(x))",
      "all x.(Knows(Dan,x) -> ((ScienceFiction(x) & -RealisticFiction(x)) | (-ScienceFiction(x) & RealisticFiction(x))))",
      "all x.((Knows(Dan,x) & Fact(x)) -> -ProvedToBe(x,False))",
      "[[ERROR]]"
    ],
    "goal": "((Knows(Dan,Dune) & -(ImaginativeProcess(Dune) & ScienceFiction(Dune))) -> -(ResultOf(Dune,CreativeProcess) | ImaginativeProcess(Dune)))"
  },
  {
    "id": 521,
    "flag": "success",
    "assumptions": [
      "all x.((((Superhero(x) & American(x)) -> ComeFrom(x,DCUniverse)) & -ComeFrom(x,MarvelUniverse)) | (-((Superhero(x) & American(x)) -> ComeFrom(x,DCUniverse)) & ComeFrom(x,MarvelUniverse)))",
      "(American(CaptainAmerica) & TopTenFavorite(CaptainAmerica) & Superhero(CaptainAmerica))",
      "-ComeFrom(CaptainAmerica,DCUniverse)",
      "all x.((American(x) & TopTenFavorite(x) & Superhero(x)) -> Speak(x,English))",
      "exists x.(Superhero(x) -> (Speak(x,English) & Speak(x,Spanish)))"
    ],
    "goal": "-Speak(CaptainAmerica,English)"
  },
  {
    "id": 522,
    "flag": "success",
    "assumptions": [
      "all x.((((Superhero(x) & American(x)) -> ComeFrom(x,DCUniverse)) & -ComeFrom(x,MarvelUniverse)) | (-((Superhero(x) & American(x)) -> ComeFrom(x,DCUniverse)) & ComeFrom(x,MarvelUniverse)))",
      "(American(CaptainAmerica) & TopTenFavorite(CaptainAmerica) & Superhero(CaptainAmerica))",
      "-ComeFrom(CaptainAmerica,DCUniverse)",
      "all x.((American(x) & TopTenFavorite(x) & Superhero(x)) -> Speak(x,English))",
      "exists x.(Superhero(x) -> (Speak(x,English) & Speak(x,Spanish)))"
    ],
    "goal": "ComeFrom(CaptainAmerica,MarvelUniverse)"
  },
  {
    "id": 523,
    "flag": "success",
    "assumptions": [
      "all x.((((Superhero(x) & American(x)) -> ComeFrom(x,DCUniverse)) & -ComeFrom(x,MarvelUniverse)) | (-((Superhero(x) & American(x)) -> ComeFrom(x,DCUniverse)) & ComeFrom(x,MarvelUniverse)))",
      "(American(CaptainAmerica) & TopTenFavorite(CaptainAmerica) & Superhero(CaptainAmerica))",
      "-ComeFrom(CaptainAmerica,DCUniverse)",
      "all x.((American(x) & TopTenFavorite(x) & Superhero(x)) -> Speak(x,English))",
      "exists x.(Superhero(x) -> (Speak(x,English) & Speak(x,Spanish)))"
    ],
    "goal": "Speak(CaptainAmerica,Spanish)"
  },
  {
    "id": 228,
    "flag": "success",
    "assumptions": [
      "(BornIn(RobertZimmer,Germany) & Philosopher(RobertZimmer))",
      "Essayist(RobertZimmer)",
      "BornIn(RobertZimmer,Yr1953)",
      "all x.(Essayist(x) -> Writer(x))"
    ],
    "goal": "BornIn(RobertZimmer,Germany)"
  },
  {
    "id": 229,
    "flag": "success",
    "assumptions": [
      "(BornIn(RobertZimmer,Germany) & Philosopher(RobertZimmer))",
      "Essayist(RobertZimmer)",
      "BornIn(RobertZimmer,Yr1953)",
      "all x.(Essayist(x) -> Writer(x))"
    ],
    "goal": "-Writer(RobertZimmer)"
  },
  {
    "id": 230,
    "flag": "success",
    "assumptions": [
      "(BornIn(RobertZimmer,Germany) & Philosopher(RobertZimmer))",
      "Essayist(RobertZimmer)",
      "BornIn(RobertZimmer,Yr1953)",
      "all x.(Essayist(x) -> Writer(x))"
    ],
    "goal": "Biographer(RobertZimmer)"
  },
  {
    "id": 694,
    "flag": "success",
    "assumptions": [
      "all x.(RepayOnTime(x) -> Has(x,HighCreditScore))",
      "exists x.((Has(x,HighCreditScore) & Has(x,HighSalary)) -> ApprovedFor(x,Mortgage))",
      "Has(John,HighSalary)"
    ],
    "goal": "(RepayOnTime(John) -> ApprovedFor(John,Mortgage))"
  },
  {
    "id": 907,
    "flag": "success",
    "assumptions": [
      "all x.(Student(x) -> MemberOf(x,University))",
      "all x.(GraduateStudent(x) -> Student(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "exists x.(PhDStudent(x) & TeachingFellow(x))",
      "(-PhDStudent(John) -> -MemberOf(John,University))",
      "(((TeachingFellow(John) -> PhDStudent(John)) & -GraduateStudent(John)) | (-(TeachingFellow(John) -> PhDStudent(John)) & GraduateStudent(John)))"
    ],
    "goal": "TF(John)"
  },
  {
    "id": 908,
    "flag": "success",
    "assumptions": [
      "all x.(Student(x) -> MemberOf(x,University))",
      "all x.(GraduateStudent(x) -> Student(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "exists x.(PhDStudent(x) & TeachingFellow(x))",
      "(-PhDStudent(John) -> -MemberOf(John,University))",
      "(((TeachingFellow(John) -> PhDStudent(John)) & -GraduateStudent(John)) | (-(TeachingFellow(John) -> PhDStudent(John)) & GraduateStudent(John)))"
    ],
    "goal": "-TF(John)"
  },
  {
    "id": 909,
    "flag": "success",
    "assumptions": [
      "all x.(Student(x) -> MemberOf(x,University))",
      "all x.(GraduateStudent(x) -> Student(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "exists x.(PhDStudent(x) & TeachingFellow(x))",
      "(-PhDStudent(John) -> -MemberOf(John,University))",
      "(((TeachingFellow(John) -> PhDStudent(John)) & -GraduateStudent(John)) | (-(TeachingFellow(John) -> PhDStudent(John)) & GraduateStudent(John)))"
    ],
    "goal": "PhDStudent(John)"
  },
  {
    "id": 473,
    "flag": "success",
    "assumptions": [
      "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))",
      "CapitalOf(Paris,France)",
      "(TouristAttraction(EiffelTower) & LocatedIn(EiffelTower,Paris))",
      "exists x.(LiveIn(x,Belgium) -> Speak(x,French))",
      "exists x.(GoTo(John,Europe) -> (See(John,x) & TouristAttraction(x)))",
      "Speak(John,French)"
    ],
    "goal": "(GoTo(John,Europe) -> See(John,EiffelTower))"
  },
  {
    "id": 474,
    "flag": "success",
    "assumptions": [
      "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))",
      "CapitalOf(Paris,France)",
      "(TouristAttraction(EiffelTower) & LocatedIn(EiffelTower,Paris))",
      "exists x.(LiveIn(x,Belgium) -> Speak(x,French))",
      "exists x.(GoTo(John,Europe) -> (See(John,x) & TouristAttraction(x)))",
      "Speak(John,French)"
    ],
    "goal": "exists x.(CapitalOf(x,France) & LocatedIn(EiffelTower,x))"
  },
  {
    "id": 475,
    "flag": "success",
    "assumptions": [
      "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))",
      "CapitalOf(Paris,France)",
      "(TouristAttraction(EiffelTower) & LocatedIn(EiffelTower,Paris))",
      "exists x.(LiveIn(x,Belgium) -> Speak(x,French))",
      "exists x.(GoTo(John,Europe) -> (See(John,x) & TouristAttraction(x)))",
      "Speak(John,French)"
    ],
    "goal": "LiveIn(John,Belgium)"
  },
  {
    "id": 900,
    "flag": "success",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Ferrari(x))",
      "((Car(ToyotaPrius) & MadeIn(ToyotaPrius,Maranello)) | LoudCar(ToyotaPrius))"
    ],
    "goal": "ElectricCar(ToyotaPrius)"
  },
  {
    "id": 901,
    "flag": "success",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Ferrari(x))",
      "((Car(ToyotaPrius) & MadeIn(ToyotaPrius,Maranello)) | LoudCar(ToyotaPrius))"
    ],
    "goal": "-ElectricCar(ToyotaPrius)"
  },
  {
    "id": 902,
    "flag": "success",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Ferrari(x))",
      "((Car(ToyotaPrius) & MadeIn(ToyotaPrius,Maranello)) | LoudCar(ToyotaPrius))"
    ],
    "goal": "MadeIn(ToyotaPrius,Maranello)"
  },
  {
    "id": 903,
    "flag": "success",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Ferrari(x))",
      "((Car(ToyotaPrius) & MadeIn(ToyotaPrius,Maranello)) | LoudCar(ToyotaPrius))"
    ],
    "goal": "((Ferrari(ToyotaPrius) | LoudCar(ToyotaPrius)) -> ElectricCar(ToyotaPrius))"
  },
  {
    "id": 1283,
    "flag": "success",
    "assumptions": [
      "all x.(Plant(x) -> -CuteAnimal(x))",
      "all x.(Flower(x) -> Plant(x))",
      "all x.(Kitten(x) -> CuteAnimal(x))",
      "all x.(GrownIn(x,Garden) -> Flower(x))",
      "(Kitten(Piper) | CuteAnimal(Piper))"
    ],
    "goal": "GrownIn(Piper,Garden)"
  },
  {
    "id": 1284,
    "flag": "success",
    "assumptions": [
      "all x.(Plant(x) -> -CuteAnimal(x))",
      "all x.(Flower(x) -> Plant(x))",
      "all x.(Kitten(x) -> CuteAnimal(x))",
      "all x.(GrownIn(x,Garden) -> Flower(x))",
      "(Kitten(Piper) | CuteAnimal(Piper))"
    ],
    "goal": "-GrownIn(Piper,Garden)"
  },
  {
    "id": 1285,
    "flag": "success",
    "assumptions": [
      "all x.(Plant(x) -> -CuteAnimal(x))",
      "all x.(Flower(x) -> Plant(x))",
      "all x.(Kitten(x) -> CuteAnimal(x))",
      "all x.(GrownIn(x,Garden) -> Flower(x))",
      "(Kitten(Piper) | CuteAnimal(Piper))"
    ],
    "goal": "Kitten(Piper)"
  },
  {
    "id": 435,
    "flag": "success",
    "assumptions": [
      "exists x.Send(Guam,Athlete,CalgaryWinterOlympics)",
      "all x.((Athlete(x) & SendTo(Guam,x,CalgaryWinterOlympics)) -> ParticipatedIn(x,WinterOlympics,Year1988))",
      "[[ERROR]]"
    ],
    "goal": "ParticipatedIn(JuddBankert,WinterOlympics,Year1988)"
  },
  {
    "id": 436,
    "flag": "success",
    "assumptions": [
      "exists x.Send(Guam,Athlete,CalgaryWinterOlympics)",
      "all x.((Athlete(x) & SendTo(Guam,x,CalgaryWinterOlympics)) -> ParticipatedIn(x,WinterOlympics,Year1988))",
      "[[ERROR]]"
    ],
    "goal": "exists x.ParticipatedIn(Guam,SummerOlympics,x)"
  },
  {
    "id": 208,
    "flag": "success",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(WorldMedicine) & EditedBy(WorldMedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": "exists x y.(SonOf(x,y) & GeneralPractitioner(y) & WordSetter(x))"
  },
  {
    "id": 209,
    "flag": "success",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(WorldMedicine) & EditedBy(WorldMedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": "-Magazine(Worldmedicine)"
  },
  {
    "id": 210,
    "flag": "success",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(WorldMedicine) & EditedBy(WorldMedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": "all x.(British(x) -> -Author(x))"
  },
  {
    "id": 211,
    "flag": "success",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(WorldMedicine) & EditedBy(WorldMedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": "all x.(Journalist(x) -> -BornIn(x,Yorkshire))"
  },
  {
    "id": 212,
    "flag": "success",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(WorldMedicine) & EditedBy(WorldMedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": "exists x y.(Son(x,y) & GeneralPractitioner(y) & -Author(x))"
  },
  {
    "id": 699,
    "flag": "success",
    "assumptions": [
      "all x.(Homework(x) -> -Fun(x))",
      "exists x.(Reading(x) & Homework(x))"
    ],
    "goal": "exists x.(Reading(x) & Fun(x))"
  },
  {
    "id": 742,
    "flag": "success",
    "assumptions": [
      "all x y.((((HandbrakeOf(x,y) & Car(y)) -> Up(x)) & -Down(x)) | (-((HandbrakeOf(x,y) & Car(y)) -> Up(x)) & Down(x)))",
      "all x y.((HandbrakeOf(x,y) & Parked(y) & Car(y)) -> Down(x))"
    ],
    "goal": "exists x y.(HandbrakeOf(x,y) & Parked(y) & Car(y) & Up(x))"
  },
  {
    "id": 1020,
    "flag": "success",
    "assumptions": [
      "all x.((InThisMidwestTown(x) & Have(x,HorseRanch)) -> RegularlyRideHorseForPleasure(x))",
      "all x.((InThisMidwestTown(x) & Have(x,DisposableIncome)) -> Have(x,HorseRank))",
      "all x.((InThisMidwestTown(x) & CompeteIn(x,HorseDressageShow)) -> Have(x,DisposableIncome))",
      "all x.((InThisMidwestTown(x) & CompeteIn(x,HorseDressageShow)) -> InvestedIn(x,EquestrianGearAndEquipment))",
      "all x.((InThisMidwestTown(x) & RegularlyRideHorseForPleasure(x)) -> -LiveIn(x,CrampedBuilding))",
      "(InThisMidwestTown(Manny) & -((Have(Manny,HorseRanch) & -LiveIn(Manny,CrampedBuilding)) | (-Have(Manny,HorseRanch) & LiveIn(Manny,CrampedBuilding))))"
    ],
    "goal": "RegularlyRideHorsesForPleasure(Manny)"
  },
  {
    "id": 1021,
    "flag": "success",
    "assumptions": [
      "all x.((InThisMidwestTown(x) & Have(x,HorseRanch)) -> RegularlyRideHorseForPleasure(x))",
      "all x.((InThisMidwestTown(x) & Have(x,DisposableIncome)) -> Have(x,HorseRank))",
      "all x.((InThisMidwestTown(x) & CompeteIn(x,HorseDressageShow)) -> Have(x,DisposableIncome))",
      "all x.((InThisMidwestTown(x) & CompeteIn(x,HorseDressageShow)) -> InvestedIn(x,EquestrianGearAndEquipment))",
      "all x.((InThisMidwestTown(x) & RegularlyRideHorseForPleasure(x)) -> -LiveIn(x,CrampedBuilding))",
      "(InThisMidwestTown(Manny) & -((Have(Manny,HorseRanch) & -LiveIn(Manny,CrampedBuilding)) | (-Have(Manny,HorseRanch) & LiveIn(Manny,CrampedBuilding))))"
    ],
    "goal": "(CompeteIn(Manny,HorseDressageShow) & InvestedIn(Manny,EquestrianGearAndEquipment))"
  },
  {
    "id": 1022,
    "flag": "success",
    "assumptions": [
      "all x.((InThisMidwestTown(x) & Have(x,HorseRanch)) -> RegularlyRideHorseForPleasure(x))",
      "all x.((InThisMidwestTown(x) & Have(x,DisposableIncome)) -> Have(x,HorseRank))",
      "all x.((InThisMidwestTown(x) & CompeteIn(x,HorseDressageShow)) -> Have(x,DisposableIncome))",
      "all x.((InThisMidwestTown(x) & CompeteIn(x,HorseDressageShow)) -> InvestedIn(x,EquestrianGearAndEquipment))",
      "all x.((InThisMidwestTown(x) & RegularlyRideHorseForPleasure(x)) -> -LiveIn(x,CrampedBuilding))",
      "(InThisMidwestTown(Manny) & -((Have(Manny,HorseRanch) & -LiveIn(Manny,CrampedBuilding)) | (-Have(Manny,HorseRanch) & LiveIn(Manny,CrampedBuilding))))"
    ],
    "goal": "(-((HaveAHorseRanch(Manny) & -CompeteIn(Manny,HorseDressageShow)) | (-HaveAHorseRanch(Manny) & CompeteIn(Manny,HorseDressageShow))) -> -InvestedIn(Manny,EquestrianGearAndEquipment))"
  },
  {
    "id": 158,
    "flag": "success",
    "assumptions": [
      "all x.(Roundel(x) -> (Rounded(x) & ArtilleryFortification(x)))",
      "all x y.((Roundel(x) & AdjacentWalls(x,y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "all x.(BatteryTower(x) -> ArtilleryFortification(x))"
    ],
    "goal": "all x.(BatteryTower(x) -> DeployCannons(x))"
  },
  {
    "id": 159,
    "flag": "success",
    "assumptions": [
      "all x.(Roundel(x) -> (Rounded(x) & ArtilleryFortification(x)))",
      "all x y.((Roundel(x) & AdjacentWalls(x,y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "all x.(BatteryTower(x) -> ArtilleryFortification(x))"
    ],
    "goal": "all x y.((Roundel(x) & BatteryTower(y)) -> Older(x,y))"
  },
  {
    "id": 160,
    "flag": "success",
    "assumptions": [
      "all x.(Roundel(x) -> (Rounded(x) & ArtilleryFortification(x)))",
      "all x y.((Roundel(x) & AdjacentWalls(x,y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "all x.(BatteryTower(x) -> ArtilleryFortification(x))"
    ],
    "goal": "all x y.((BatteryTower(x) & AdjacentWall(x,y)) -> Higher(x,y))"
  },
  {
    "id": 161,
    "flag": "success",
    "assumptions": [
      "all x.(Roundel(x) -> (Rounded(x) & ArtilleryFortification(x)))",
      "all x y.((Roundel(x) & AdjacentWalls(x,y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "all x.(BatteryTower(x) -> ArtilleryFortification(x))"
    ],
    "goal": "all x.(Roundel(x) -> DeployCannons(x))"
  },
  {
    "id": 732,
    "flag": "success",
    "assumptions": [
      "all x.(Tissue(x) -> Soft(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 485,
    "flag": "success",
    "assumptions": [
      "all x.(Volunteer(x) -> Receive(x,IntangibleBenefit))",
      "all x.(((Volunteer(x) -> WorkRegularly(x)) & -WorkAsNeeded(x)) | (-(Volunteer(x) -> WorkRegularly(x)) & WorkAsNeeded(x)))",
      "exists x.(Volunteer(x) -> Trained(x))",
      "all x.(Volunteer(x) -> (WorkInGroup(x) | WorkIndividually(x)))",
      "all x.((Volunteer(x) & Environmental(x)) -> (ContributeTo(x,EnvironmentalManagement) | ContributeTo(x,EnvironmentalConservation)))",
      "exists x.(((Volunteer(x) & ContributeTo(x,NaturalDisasterResponse)) -> WorkInGroup(x)) & WorkAsNeeded(x))"
    ],
    "goal": "all x.((Volunteer(x) & ContributeTo(x,NaturalDisasterResponse)) -> Receive(x,IntangibleBenefit))"
  },
  {
    "id": 486,
    "flag": "success",
    "assumptions": [
      "all x.(Volunteer(x) -> Receive(x,IntangibleBenefit))",
      "all x.(((Volunteer(x) -> WorkRegularly(x)) & -WorkAsNeeded(x)) | (-(Volunteer(x) -> WorkRegularly(x)) & WorkAsNeeded(x)))",
      "exists x.(Volunteer(x) -> Trained(x))",
      "all x.(Volunteer(x) -> (WorkInGroup(x) | WorkIndividually(x)))",
      "all x.((Volunteer(x) & Environmental(x)) -> (ContributeTo(x,EnvironmentalManagement) | ContributeTo(x,EnvironmentalConservation)))",
      "exists x.(((Volunteer(x) & ContributeTo(x,NaturalDisasterResponse)) -> WorkInGroup(x)) & WorkAsNeeded(x))"
    ],
    "goal": "all x.((Volunteer(x) & Environmental(x)) -> WorkInGroup(x))"
  },
  {
    "id": 487,
    "flag": "success",
    "assumptions": [
      "all x.(Volunteer(x) -> Receive(x,IntangibleBenefit))",
      "all x.(((Volunteer(x) -> WorkRegularly(x)) & -WorkAsNeeded(x)) | (-(Volunteer(x) -> WorkRegularly(x)) & WorkAsNeeded(x)))",
      "exists x.(Volunteer(x) -> Trained(x))",
      "all x.(Volunteer(x) -> (WorkInGroup(x) | WorkIndividually(x)))",
      "all x.((Volunteer(x) & Environmental(x)) -> (ContributeTo(x,EnvironmentalManagement) | ContributeTo(x,EnvironmentalConservation)))",
      "exists x.(((Volunteer(x) & ContributeTo(x,NaturalDisasterResponse)) -> WorkInGroup(x)) & WorkAsNeeded(x))"
    ],
    "goal": "all x.(Volunteer(x) -> Trained(x))"
  },
  {
    "id": 1002,
    "flag": "success",
    "assumptions": [
      "all x.((InThisTechCompany(x) & Consistent(x) & StickTo(x,TheirRegularRoutine)) -> -Like(x,Surprise))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((InThisTechCompany(x) & Old(x) & LiveIn(x,StableHome)) -> -Like(x,Surprise))",
      "all x.((InThisTechCompany(x) & Have(x,HighEnergy) & Impulsive(x)) -> -Like(x,Surprise))",
      "InThisTechCompany(Mike)",
      "[[ERROR]]"
    ],
    "goal": "(Old(Mike) & LiveIn(Mike,StableHome))"
  },
  {
    "id": 1003,
    "flag": "success",
    "assumptions": [
      "all x.((InThisTechCompany(x) & Consistent(x) & StickTo(x,TheirRegularRoutine)) -> -Like(x,Surprise))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((InThisTechCompany(x) & Old(x) & LiveIn(x,StableHome)) -> -Like(x,Surprise))",
      "all x.((InThisTechCompany(x) & Have(x,HighEnergy) & Impulsive(x)) -> -Like(x,Surprise))",
      "InThisTechCompany(Mike)",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1004,
    "flag": "success",
    "assumptions": [
      "all x.((InThisTechCompany(x) & Consistent(x) & StickTo(x,TheirRegularRoutine)) -> -Like(x,Surprise))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((InThisTechCompany(x) & Old(x) & LiveIn(x,StableHome)) -> -Like(x,Surprise))",
      "all x.((InThisTechCompany(x) & Have(x,HighEnergy) & Impulsive(x)) -> -Like(x,Surprise))",
      "InThisTechCompany(Mike)",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 615,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "exists x.(Car(x) & Favorite(Adam,x))",
      "all x.((Car(x) & Owns(Adam,x) & Favorite(Adam,x)) -> European(x))",
      "all x.((Car(x) & Owns(Adam,x) & Favorite(Adam,x)) -> Broke(Adam,x))"
    ],
    "goal": "exists x.(Japanese(x) & Owns(Adam,x))"
  },
  {
    "id": 616,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "exists x.(Car(x) & Favorite(Adam,x))",
      "all x.((Car(x) & Owns(Adam,x) & Favorite(Adam,x)) -> European(x))",
      "all x.((Car(x) & Owns(Adam,x) & Favorite(Adam,x)) -> Broke(Adam,x))"
    ],
    "goal": "exists x.(European(x) & Broke(Adam,x))"
  },
  {
    "id": 1235,
    "flag": "success",
    "assumptions": [
      "all x.((Buildings(x) & In(x,NewHaven)) -> -HigherThan(x,Num400))",
      "all x.((Buildings(x) & ManagedBy(x,YaleHousing)) -> In(x,NewHaven))",
      "all x.((Buildings(x) & Skyscraper(x) & In(x,Manhattan)) -> HigherThan(x,Num400))",
      "all x.(((Buildings(x) & OwnedBy(x,Bloomberg)) -> Skyscraper(x)) & In(x,Manhattan))",
      "all x.((Buildings(x) & HasLogo(x,Bloomberg)) -> OwnedBy(x,Bloomberg))",
      "(Buildings(TowerA) & -InNewHaven(TowerA) & -ManhattanSkyscraper(TowerA))",
      "(Buildings(TowerB) & HasLogo(TowerB,Bloomberg) & Skyscraper(TowerB) & In(TowerB,Manhattan))"
    ],
    "goal": "HigherThan(TowerA,Num400)"
  },
  {
    "id": 1236,
    "flag": "success",
    "assumptions": [
      "all x.((Buildings(x) & In(x,NewHaven)) -> -HigherThan(x,Num400))",
      "all x.((Buildings(x) & ManagedBy(x,YaleHousing)) -> In(x,NewHaven))",
      "all x.((Buildings(x) & Skyscraper(x) & In(x,Manhattan)) -> HigherThan(x,Num400))",
      "all x.(((Buildings(x) & OwnedBy(x,Bloomberg)) -> Skyscraper(x)) & In(x,Manhattan))",
      "all x.((Buildings(x) & HasLogo(x,Bloomberg)) -> OwnedBy(x,Bloomberg))",
      "(Buildings(TowerA) & -InNewHaven(TowerA) & -ManhattanSkyscraper(TowerA))",
      "(Buildings(TowerB) & HasLogo(TowerB,Bloomberg) & Skyscraper(TowerB) & In(TowerB,Manhattan))"
    ],
    "goal": "-HigherThan(TowerA,Num400)"
  },
  {
    "id": 1237,
    "flag": "success",
    "assumptions": [
      "all x.((Buildings(x) & In(x,NewHaven)) -> -HigherThan(x,Num400))",
      "all x.((Buildings(x) & ManagedBy(x,YaleHousing)) -> In(x,NewHaven))",
      "all x.((Buildings(x) & Skyscraper(x) & In(x,Manhattan)) -> HigherThan(x,Num400))",
      "all x.(((Buildings(x) & OwnedBy(x,Bloomberg)) -> Skyscraper(x)) & In(x,Manhattan))",
      "all x.((Buildings(x) & HasLogo(x,Bloomberg)) -> OwnedBy(x,Bloomberg))",
      "(Buildings(TowerA) & -InNewHaven(TowerA) & -ManhattanSkyscraper(TowerA))",
      "(Buildings(TowerB) & HasLogo(TowerB,Bloomberg) & Skyscraper(TowerB) & In(TowerB,Manhattan))"
    ],
    "goal": "(HasLogo(TowerB,Bloomberg) | ManagedBy(x,YaleHousing))"
  },
  {
    "id": 1238,
    "flag": "success",
    "assumptions": [
      "all x.((Buildings(x) & In(x,NewHaven)) -> -HigherThan(x,Num400))",
      "all x.((Buildings(x) & ManagedBy(x,YaleHousing)) -> In(x,NewHaven))",
      "all x.((Buildings(x) & Skyscraper(x) & In(x,Manhattan)) -> HigherThan(x,Num400))",
      "all x.(((Buildings(x) & OwnedBy(x,Bloomberg)) -> Skyscraper(x)) & In(x,Manhattan))",
      "all x.((Buildings(x) & HasLogo(x,Bloomberg)) -> OwnedBy(x,Bloomberg))",
      "(Buildings(TowerA) & -InNewHaven(TowerA) & -ManhattanSkyscraper(TowerA))",
      "(Buildings(TowerB) & HasLogo(TowerB,Bloomberg) & Skyscraper(TowerB) & In(TowerB,Manhattan))"
    ],
    "goal": "(-HasLogo(TowerB,Bloomberg) & -ManagedBy(x,YaleHousing))"
  },
  {
    "id": 1261,
    "flag": "success",
    "assumptions": [
      "all x.(Fish(x) -> -Bird(x))",
      "all x.(Osprey(x) -> Bird(x))",
      "all x.(Carp(x) -> Fish(x))",
      "all x.(Goldfish(x) -> Carp(x))",
      "(((Osprey(Bubbles) & -Goldfish(Bubbles)) | (-Osprey(Bubbles) & Goldfish(Bubbles))) -> -Fish(Bubbles))"
    ],
    "goal": "Osprey(Bubbles)"
  },
  {
    "id": 1262,
    "flag": "success",
    "assumptions": [
      "all x.(Fish(x) -> -Bird(x))",
      "all x.(Osprey(x) -> Bird(x))",
      "all x.(Carp(x) -> Fish(x))",
      "all x.(Goldfish(x) -> Carp(x))",
      "(((Osprey(Bubbles) & -Goldfish(Bubbles)) | (-Osprey(Bubbles) & Goldfish(Bubbles))) -> -Fish(Bubbles))"
    ],
    "goal": "Goldfish(Bubbles)"
  },
  {
    "id": 1263,
    "flag": "success",
    "assumptions": [
      "all x.(Fish(x) -> -Bird(x))",
      "all x.(Osprey(x) -> Bird(x))",
      "all x.(Carp(x) -> Fish(x))",
      "all x.(Goldfish(x) -> Carp(x))",
      "(((Osprey(Bubbles) & -Goldfish(Bubbles)) | (-Osprey(Bubbles) & Goldfish(Bubbles))) -> -Fish(Bubbles))"
    ],
    "goal": "-Goldfish(Bubbles)"
  },
  {
    "id": 453,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 454,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 455,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1424,
    "flag": "success",
    "assumptions": [
      "all x.(In(x,SizeTown) -> (Big(x) | Small(x)))",
      "all x.((Big(x) & In(x,SizeTown)) -> Heavy(x))",
      "all x.((Small(x) & In(x,SizeTown)) -> Light(x))",
      "all x.((Heavy(x) & In(x,SizeTown)) -> Still(x))",
      "all x.((Light(x) & In(x,SizeTown)) -> Unstable(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Changing(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Unpredictable(x))",
      "(In(Bird,SizeTown) & -(Heavy(Bird) & Still(Bird)))"
    ],
    "goal": "Still(Bird)"
  },
  {
    "id": 1425,
    "flag": "success",
    "assumptions": [
      "all x.(In(x,SizeTown) -> (Big(x) | Small(x)))",
      "all x.((Big(x) & In(x,SizeTown)) -> Heavy(x))",
      "all x.((Small(x) & In(x,SizeTown)) -> Light(x))",
      "all x.((Heavy(x) & In(x,SizeTown)) -> Still(x))",
      "all x.((Light(x) & In(x,SizeTown)) -> Unstable(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Changing(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Unpredictable(x))",
      "(In(Bird,SizeTown) & -(Heavy(Bird) & Still(Bird)))"
    ],
    "goal": "-Still(Bird)"
  },
  {
    "id": 1426,
    "flag": "success",
    "assumptions": [
      "all x.(In(x,SizeTown) -> (Big(x) | Small(x)))",
      "all x.((Big(x) & In(x,SizeTown)) -> Heavy(x))",
      "all x.((Small(x) & In(x,SizeTown)) -> Light(x))",
      "all x.((Heavy(x) & In(x,SizeTown)) -> Still(x))",
      "all x.((Light(x) & In(x,SizeTown)) -> Unstable(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Changing(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Unpredictable(x))",
      "(In(Bird,SizeTown) & -(Heavy(Bird) & Still(Bird)))"
    ],
    "goal": "(Unpredictable(Bird) & Changing(Bird))"
  },
  {
    "id": 1427,
    "flag": "success",
    "assumptions": [
      "all x.(In(x,SizeTown) -> (Big(x) | Small(x)))",
      "all x.((Big(x) & In(x,SizeTown)) -> Heavy(x))",
      "all x.((Small(x) & In(x,SizeTown)) -> Light(x))",
      "all x.((Heavy(x) & In(x,SizeTown)) -> Still(x))",
      "all x.((Light(x) & In(x,SizeTown)) -> Unstable(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Changing(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Unpredictable(x))",
      "(In(Bird,SizeTown) & -(Heavy(Bird) & Still(Bird)))"
    ],
    "goal": "(Unpredictable(Bird) | Changing(Bird))"
  },
  {
    "id": 1428,
    "flag": "success",
    "assumptions": [
      "all x.(In(x,SizeTown) -> (Big(x) | Small(x)))",
      "all x.((Big(x) & In(x,SizeTown)) -> Heavy(x))",
      "all x.((Small(x) & In(x,SizeTown)) -> Light(x))",
      "all x.((Heavy(x) & In(x,SizeTown)) -> Still(x))",
      "all x.((Light(x) & In(x,SizeTown)) -> Unstable(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Changing(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Unpredictable(x))",
      "(In(Bird,SizeTown) & -(Heavy(Bird) & Still(Bird)))"
    ],
    "goal": "((Unpredictable(Bird) & -Changing(Bird)) | (-Unpredictable(Bird) & Changing(Bird)))"
  },
  {
    "id": 1429,
    "flag": "success",
    "assumptions": [
      "all x.(In(x,SizeTown) -> (Big(x) | Small(x)))",
      "all x.((Big(x) & In(x,SizeTown)) -> Heavy(x))",
      "all x.((Small(x) & In(x,SizeTown)) -> Light(x))",
      "all x.((Heavy(x) & In(x,SizeTown)) -> Still(x))",
      "all x.((Light(x) & In(x,SizeTown)) -> Unstable(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Changing(x))",
      "all x.((Unstable(x) & In(x,SizeTown)) -> Unpredictable(x))",
      "(In(Bird,SizeTown) & -(Heavy(Bird) & Still(Bird)))"
    ],
    "goal": "((((Small(Bird) | Still(Bird)) -> Unpredictable(Bird)) & -Changing(Bird)) | (-((Small(Bird) | Still(Bird)) -> Unpredictable(Bird)) & Changing(Bird)))"
  },
  {
    "id": 287,
    "flag": "success",
    "assumptions": [
      "(TelevisionSeries(DIRay) & PoliceProcedural(DIRay))",
      "(Creates(Maya,DIRay) & Writes(Maya,DIRay))",
      "Produces(Jed,DIRay)",
      "(British(Maya) & British(Jed))"
    ],
    "goal": "exists x.(British(x) & Creates(x,DIRay))"
  },
  {
    "id": 288,
    "flag": "success",
    "assumptions": [
      "(TelevisionSeries(DIRay) & PoliceProcedural(DIRay))",
      "(Creates(Maya,DIRay) & Writes(Maya,DIRay))",
      "Produces(Jed,DIRay)",
      "(British(Maya) & British(Jed))"
    ],
    "goal": "exists x y.(British(x) & TelevisionSeries(y) & Produces(x,y))"
  },
  {
    "id": 1342,
    "flag": "success",
    "assumptions": [
      "all x.(Take(x,BarExam) -> CanRead(x))",
      "all x.(Lawyer(x) -> Take(x,BarExam))",
      "all x.(Take(x,BarExam) -> KnowledgeableAbout(x,CriminalProceeder))",
      "all x.(GetOn(x,ScoreOf180,LSAT) -> CanRead(x))",
      "all x.(Elephant(x) -> -CanRead(x))",
      "(((-(CanRead(Mike) & Elephant(Mike)) -> Take(Mike,BarExam)) & -CanRead(Mike)) | (-(-(CanRead(Mike) & Elephant(Mike)) -> Take(Mike,BarExam)) & CanRead(Mike)))"
    ],
    "goal": "GetOn(Mike,180,LSAT)"
  },
  {
    "id": 1343,
    "flag": "success",
    "assumptions": [
      "all x.(Take(x,BarExam) -> CanRead(x))",
      "all x.(Lawyer(x) -> Take(x,BarExam))",
      "all x.(Take(x,BarExam) -> KnowledgeableAbout(x,CriminalProceeder))",
      "all x.(GetOn(x,ScoreOf180,LSAT) -> CanRead(x))",
      "all x.(Elephant(x) -> -CanRead(x))",
      "(((-(CanRead(Mike) & Elephant(Mike)) -> Take(Mike,BarExam)) & -CanRead(Mike)) | (-(-(CanRead(Mike) & Elephant(Mike)) -> Take(Mike,BarExam)) & CanRead(Mike)))"
    ],
    "goal": "(-Take(Mike,BarExam) & -(KnowledgeableAbout(Mike,CriminalProcedures) & GetOn(Mike,180,LSAT)))"
  },
  {
    "id": 1344,
    "flag": "success",
    "assumptions": [
      "all x.(Take(x,BarExam) -> CanRead(x))",
      "all x.(Lawyer(x) -> Take(x,BarExam))",
      "all x.(Take(x,BarExam) -> KnowledgeableAbout(x,CriminalProceeder))",
      "all x.(GetOn(x,ScoreOf180,LSAT) -> CanRead(x))",
      "all x.(Elephant(x) -> -CanRead(x))",
      "(((-(CanRead(Mike) & Elephant(Mike)) -> Take(Mike,BarExam)) & -CanRead(Mike)) | (-(-(CanRead(Mike) & Elephant(Mike)) -> Take(Mike,BarExam)) & CanRead(Mike)))"
    ],
    "goal": "Take(Mike,BarExam)"
  },
  {
    "id": 834,
    "flag": "success",
    "assumptions": [
      "exists x.(ProfessionalSoccerDefender(x) & ProfessionalCenterback(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "[[ERROR]]",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "NBAPlayer(Stephencurry)"
    ],
    "goal": "ProfessionalCenterback(StephenCurry)"
  },
  {
    "id": 835,
    "flag": "success",
    "assumptions": [
      "exists x.(ProfessionalSoccerDefender(x) & ProfessionalCenterback(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "[[ERROR]]",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "NBAPlayer(Stephencurry)"
    ],
    "goal": "-(ProfessionalCenterback(StephenCurry) & ProfessionalSoccerDefender(StephenCurry))"
  },
  {
    "id": 836,
    "flag": "success",
    "assumptions": [
      "exists x.(ProfessionalSoccerDefender(x) & ProfessionalCenterback(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "[[ERROR]]",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "NBAPlayer(Stephencurry)"
    ],
    "goal": "(-(Centerback(StephenCurry) & SoccerDefender(StephenCurry)) -> -(SoccerPlayer(StephenCurry) | ProfessionalBasketballPlayer(StephenCurry)))"
  },
  {
    "id": 537,
    "flag": "success",
    "assumptions": [
      "all x y.((Person(x) & Product(y) & -HaveEnoughMoneyFor(x,y)) -> -Buy(x,y))",
      "all x.(Monitor(x) -> Product(x))",
      "all x y z.(((Monitor(x) & Monitor(y) & Monitor(z) & FourK(x) & OneOEightO(y) & TwoK(z)) -> MoreExpensive(x,y)) & MoreExpensive(x,z))",
      "Person(John)",
      "all x.((Monitor(x) & TwoK(x)) -> -HaveEnoughMoneyFor(John,x))"
    ],
    "goal": "all x.((Monitor(x) & OneOEightO(x)) -> -Buy(John,x))"
  },
  {
    "id": 538,
    "flag": "success",
    "assumptions": [
      "all x y.((Person(x) & Product(y) & -HaveEnoughMoneyFor(x,y)) -> -Buy(x,y))",
      "all x.(Monitor(x) -> Product(x))",
      "all x y z.(((Monitor(x) & Monitor(y) & Monitor(z) & FourK(x) & OneOEightO(y) & TwoK(z)) -> MoreExpensive(x,y)) & MoreExpensive(x,z))",
      "Person(John)",
      "all x.((Monitor(x) & TwoK(x)) -> -HaveEnoughMoneyFor(John,x))"
    ],
    "goal": "all x.((Monitor(x) & TwoK(x)) -> -Buy(John,x))"
  },
  {
    "id": 707,
    "flag": "success",
    "assumptions": [
      "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))",
      "exists x.(ArtificialSatellite(x) & -USInvention(x))"
    ],
    "goal": "all x.(ImportantScientificAchievement(x) & USInvention(x))"
  },
  {
    "id": 701,
    "flag": "success",
    "assumptions": [
      "exists x.(Cat(x) & -Pet(x))",
      "all x.(Cat(x) -> Mammal(x))"
    ],
    "goal": "exists x y.(Mammal(x) & Mammal(y) & -Pet(x) & -Pet(y))"
  },
  {
    "id": 967,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,ThisNeighborhood) & VisitRegularly(x,CoffeeShop)) -> AddictedTo(x,Coffee))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((In(x,ThisNeighborhood) & BusyWith(x,12HourWorkHour)) -> MakeAtUsing(x,Home,OwnFood,Recipe))",
      "(In(Sam,ThisNeighborhood) & -((AddictedTo(Sam,Coffee) & -BusyWith(Sam,12HourWorkHour)) | (-AddictedTo(Sam,Coffee) & BusyWith(Sam,12HourWorkHour))))"
    ],
    "goal": "(InThisNeighborhood(Sam) & AddictedTo(Sam,Coffee))"
  },
  {
    "id": 968,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,ThisNeighborhood) & VisitRegularly(x,CoffeeShop)) -> AddictedTo(x,Coffee))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((In(x,ThisNeighborhood) & BusyWith(x,12HourWorkHour)) -> MakeAtUsing(x,Home,OwnFood,Recipe))",
      "(In(Sam,ThisNeighborhood) & -((AddictedTo(Sam,Coffee) & -BusyWith(Sam,12HourWorkHour)) | (-AddictedTo(Sam,Coffee) & BusyWith(Sam,12HourWorkHour))))"
    ],
    "goal": "exists y.(CoffeemakerAndBlender(y) & Own(Sam,y))"
  },
  {
    "id": 969,
    "flag": "success",
    "assumptions": [
      "all x.((In(x,ThisNeighborhood) & VisitRegularly(x,CoffeeShop)) -> AddictedTo(x,Coffee))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((In(x,ThisNeighborhood) & BusyWith(x,12HourWorkHour)) -> MakeAtUsing(x,Home,OwnFood,Recipe))",
      "(In(Sam,ThisNeighborhood) & -((AddictedTo(Sam,Coffee) & -BusyWith(Sam,12HourWorkHour)) | (-AddictedTo(Sam,Coffee) & BusyWith(Sam,12HourWorkHour))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 837,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalBasketballPlayer(x) -> -ProfessionalSoccerPlayer(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "all x.(ProfessionalCenterback(x) -> ProfessionalSoccerDefender(x))",
      "-((NBAPlayer(Rogerfederer) & -ProfessionalSoccerDefender(Rogerfederer)) | (-NBAPlayer(Rogerfederer) & ProfessionalSoccerDefender(Rogerfederer)))"
    ],
    "goal": "ProfessionalCenterback(RogerFederer)"
  },
  {
    "id": 838,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalBasketballPlayer(x) -> -ProfessionalSoccerPlayer(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "all x.(ProfessionalCenterback(x) -> ProfessionalSoccerDefender(x))",
      "-((NBAPlayer(Rogerfederer) & -ProfessionalSoccerDefender(Rogerfederer)) | (-NBAPlayer(Rogerfederer) & ProfessionalSoccerDefender(Rogerfederer)))"
    ],
    "goal": "-ProfessionalCenterback(RogerFederer)"
  },
  {
    "id": 839,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalBasketballPlayer(x) -> -ProfessionalSoccerPlayer(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(ProfessionalSoccerDefender(x) -> ProfessionalSoccerPlayer(x))",
      "all x.(ProfessionalCenterback(x) -> ProfessionalSoccerDefender(x))",
      "-((NBAPlayer(Rogerfederer) & -ProfessionalSoccerDefender(Rogerfederer)) | (-NBAPlayer(Rogerfederer) & ProfessionalSoccerDefender(Rogerfederer)))"
    ],
    "goal": "ProfessionalSoccerPlayer(RogerFederer)"
  },
  {
    "id": 1274,
    "flag": "success",
    "assumptions": [
      "exists x.(Teacher(x) & WorkAt(x,Pool) & -Nice(x))",
      "all x.((Teacher(x) & WorkAt(x,Pool)) -> PoolManager(x))",
      "all x.(PoolManager(x) -> Lifeguard(x))",
      "all x.(Lifeguard(x) -> WorkAt(x,Pool))",
      "-WorkAt(Mary,Pool)"
    ],
    "goal": "Nice(Mary)"
  },
  {
    "id": 1275,
    "flag": "success",
    "assumptions": [
      "exists x.(Teacher(x) & WorkAt(x,Pool) & -Nice(x))",
      "all x.((Teacher(x) & WorkAt(x,Pool)) -> PoolManager(x))",
      "all x.(PoolManager(x) -> Lifeguard(x))",
      "all x.(Lifeguard(x) -> WorkAt(x,Pool))",
      "-WorkAt(Mary,Pool)"
    ],
    "goal": "-(Nice(Mary) & Teacher(Mary) & WorkAt(Mary,Pool))"
  },
  {
    "id": 1276,
    "flag": "success",
    "assumptions": [
      "exists x.(Teacher(x) & WorkAt(x,Pool) & -Nice(x))",
      "all x.((Teacher(x) & WorkAt(x,Pool)) -> PoolManager(x))",
      "all x.(PoolManager(x) -> Lifeguard(x))",
      "all x.(Lifeguard(x) -> WorkAt(x,Pool))",
      "-WorkAt(Mary,Pool)"
    ],
    "goal": "(Nice(Mary) & Teacher(Mary) & WorkAt(Mary,Pool))"
  },
  {
    "id": 746,
    "flag": "success",
    "assumptions": [
      "exists x.(ArtPiece(x) & -Require(x,Talent))",
      "all x.(Require(x,Talent) -> Require(x,Practice))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 267,
    "flag": "success",
    "assumptions": [
      "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))",
      "BornIn(BernardaBrysonShahn,AthensOhio)",
      "MarriedTo(BernardaBrysonShahn,BenShahn)",
      "all x.(BornIn(x,AthensOhio) -> American(x))"
    ],
    "goal": "BornIn(BernardaBrysonShahn,Greece)"
  },
  {
    "id": 268,
    "flag": "success",
    "assumptions": [
      "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))",
      "BornIn(BernardaBrysonShahn,AthensOhio)",
      "MarriedTo(BernardaBrysonShahn,BenShahn)",
      "all x.(BornIn(x,AthensOhio) -> American(x))"
    ],
    "goal": "American(BernardaBrysonShahn)"
  },
  {
    "id": 269,
    "flag": "success",
    "assumptions": [
      "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))",
      "BornIn(BernardaBrysonShahn,AthensOhio)",
      "MarriedTo(BernardaBrysonShahn,BenShahn)",
      "all x.(BornIn(x,AthensOhio) -> American(x))"
    ],
    "goal": "Divorced(BernardaBrysonShahn)"
  },
  {
    "id": 982,
    "flag": "success",
    "assumptions": [
      "all x.((InEmmasFamily(x) & UpgradeToEveryYear(x,NewestIphoneModel)) -> -SavingMoneyForOn(x,DownPayment,NewHouse))",
      "all x.((InEmmasFamily(x) & EnjoyReading(x,TechSpec) & KeepUpdatedOn(x,LatestTechnology)) -> UpgradeToEveryYear(x,NewestIphoneModel))",
      "all x.(InEmmasFamily(x) & (SavingMoneyForOn(x,DownPayment,NewHouse) | LiveIn(x,Apartment,BigMetropolitanCity)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "InEmmasFamily(Emily)",
      "[[ERROR]]"
    ],
    "goal": "exists y.(LiveWith(Emily,y) & Roommate(y))"
  },
  {
    "id": 983,
    "flag": "success",
    "assumptions": [
      "all x.((InEmmasFamily(x) & UpgradeToEveryYear(x,NewestIphoneModel)) -> -SavingMoneyForOn(x,DownPayment,NewHouse))",
      "all x.((InEmmasFamily(x) & EnjoyReading(x,TechSpec) & KeepUpdatedOn(x,LatestTechnology)) -> UpgradeToEveryYear(x,NewestIphoneModel))",
      "all x.(InEmmasFamily(x) & (SavingMoneyForOn(x,DownPayment,NewHouse) | LiveIn(x,Apartment,BigMetropolitanCity)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "InEmmasFamily(Emily)",
      "[[ERROR]]"
    ],
    "goal": "(EnjoyReading(Emily,TechSpec) & KeepUpdatedOn(Emily,LatestTechnology))"
  },
  {
    "id": 1298,
    "flag": "success",
    "assumptions": [
      "all x.(OnPayroll(x) -> PaidBy(x,School))",
      "all x.(HaveJobAt(x,School) -> OnPayroll(x))",
      "all x.(FacultyMember(x) -> HaveJobAt(x,School))",
      "all x.((Teach(x,Student) -> FacultyMember(x)) | Teacher(x))",
      "all x.(Teacher(x) -> Have(x,Student))",
      "(Teacher(Nancy) -> OnPayroll(Nancy))",
      "(-Teacher(Nancy) -> -OnPayroll(Nancy))",
      "Teach(Nancy,Student)"
    ],
    "goal": "FacultyMember(Nancy)"
  },
  {
    "id": 1299,
    "flag": "success",
    "assumptions": [
      "all x.(OnPayroll(x) -> PaidBy(x,School))",
      "all x.(HaveJobAt(x,School) -> OnPayroll(x))",
      "all x.(FacultyMember(x) -> HaveJobAt(x,School))",
      "all x.((Teach(x,Student) -> FacultyMember(x)) | Teacher(x))",
      "all x.(Teacher(x) -> Have(x,Student))",
      "(Teacher(Nancy) -> OnPayroll(Nancy))",
      "(-Teacher(Nancy) -> -OnPayroll(Nancy))",
      "Teach(Nancy,Student)"
    ],
    "goal": "(PaidBy(Nancy,School) & Have(Nancy,Student))"
  },
  {
    "id": 1300,
    "flag": "success",
    "assumptions": [
      "all x.(OnPayroll(x) -> PaidBy(x,School))",
      "all x.(HaveJobAt(x,School) -> OnPayroll(x))",
      "all x.(FacultyMember(x) -> HaveJobAt(x,School))",
      "all x.((Teach(x,Student) -> FacultyMember(x)) | Teacher(x))",
      "all x.(Teacher(x) -> Have(x,Student))",
      "(Teacher(Nancy) -> OnPayroll(Nancy))",
      "(-Teacher(Nancy) -> -OnPayroll(Nancy))",
      "Teach(Nancy,Student)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 691,
    "flag": "success",
    "assumptions": [
      "all x.(Kangaroo(x) -> Animal(x))",
      "all x.(Kangaroo(x) -> -LiveIn(x,Germany))",
      "(SavesFor(Jane,EnoughMoney,TheSummer) -> FlyTo(Jane,Germany))",
      "(FlyTo(Jane,Germany) -> GoTo(Jane,Berlinzoo))",
      "all x.exists y.((GoTo(x,Berlinzoo) & LiveIn(x,Germany) & Animal(y)) -> WillSee(y,x,Berlinzoo))"
    ],
    "goal": "exists x.((SavesFor(Jane,EnoughMoney,TheSummer) & Kangaroo(x)) -> WillSee(x,Jane,Berlinzoo))"
  },
  {
    "id": 611,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 612,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 613,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 614,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 107,
    "flag": "success",
    "assumptions": [
      "all x.(SevenDistinctWorks(x) -> Heptalogy(x))",
      "SevenDistinctWorks(HarryPotter)",
      "SevenDistinctWorks(ChroniclesOfNarnia)"
    ],
    "goal": "Heptalogy(HarryPotter)"
  },
  {
    "id": 108,
    "flag": "success",
    "assumptions": [
      "all x.(SevenDistinctWorks(x) -> Heptalogy(x))",
      "SevenDistinctWorks(HarryPotter)",
      "SevenDistinctWorks(ChroniclesOfNarnia)"
    ],
    "goal": "-Heptalogy(ChroniclesOfNarnia)"
  },
  {
    "id": 109,
    "flag": "success",
    "assumptions": [
      "all x.(SevenDistinctWorks(x) -> Heptalogy(x))",
      "SevenDistinctWorks(HarryPotter)",
      "SevenDistinctWorks(ChroniclesOfNarnia)"
    ],
    "goal": "Heptalogy(LordOfRings)"
  },
  {
    "id": 1017,
    "flag": "success",
    "assumptions": [
      "all x.((AttendRegularly(x,RenaissanceFair) -> Enjoy(x,DressingUp,OldFashionedClothing)) & Enjoy(x,DressingUp,HistoricalPeriodClothing))",
      "all x.(FascinatedBy(x,HistoryOfRenaissance) -> AttendRegularly(x,RenaissanceFair))",
      "all x.((FascinatedBy(x,HistoryOfRenaissance) & -(ContemporaryAcademic(x) & Enjoy(x,Learning))) | (-FascinatedBy(x,HistoryOfRenaissance) & ContemporaryAcademic(x) & Enjoy(x,Learning)))",
      "all x.(((FocusedOn(x,FuturisticSubject) & FocusedOn(x,VocationalSubject)) -> ContemporaryAcademic(x)) & Enjoy(x,Learning))",
      "all x.((Professor(x) & Take(x,HistoricalApproach)) -> -(ContemporaryAcademic(x) & Enjoy(x,Learning)))",
      "(-(FocusedOn(Clyde,FuturisticSubject) & FocusedOn(Clyde,VocationalSubject)) -> -((FocusedOn(Clyde,FuturisticSubject) & FocusedOn(Clyde,VocationalSubject)) | (Enjoy(Clyde,DressingUp,OldFashionedClothing) & Enjoy(Clyde,DressingUp,HistoricalPeriodClothing))))"
    ],
    "goal": "AttendRegularly(Clyde,RenaissanceFair)"
  },
  {
    "id": 1018,
    "flag": "success",
    "assumptions": [
      "all x.((AttendRegularly(x,RenaissanceFair) -> Enjoy(x,DressingUp,OldFashionedClothing)) & Enjoy(x,DressingUp,HistoricalPeriodClothing))",
      "all x.(FascinatedBy(x,HistoryOfRenaissance) -> AttendRegularly(x,RenaissanceFair))",
      "all x.((FascinatedBy(x,HistoryOfRenaissance) & -(ContemporaryAcademic(x) & Enjoy(x,Learning))) | (-FascinatedBy(x,HistoryOfRenaissance) & ContemporaryAcademic(x) & Enjoy(x,Learning)))",
      "all x.(((FocusedOn(x,FuturisticSubject) & FocusedOn(x,VocationalSubject)) -> ContemporaryAcademic(x)) & Enjoy(x,Learning))",
      "all x.((Professor(x) & Take(x,HistoricalApproach)) -> -(ContemporaryAcademic(x) & Enjoy(x,Learning)))",
      "(-(FocusedOn(Clyde,FuturisticSubject) & FocusedOn(Clyde,VocationalSubject)) -> -((FocusedOn(Clyde,FuturisticSubject) & FocusedOn(Clyde,VocationalSubject)) | (Enjoy(Clyde,DressingUp,OldFashionedClothing) & Enjoy(Clyde,DressingUp,HistoricalPeriodClothing))))"
    ],
    "goal": "(Professor(Clyde) & Take(Clyde,HistoricalApproach))"
  },
  {
    "id": 1019,
    "flag": "success",
    "assumptions": [
      "all x.((AttendRegularly(x,RenaissanceFair) -> Enjoy(x,DressingUp,OldFashionedClothing)) & Enjoy(x,DressingUp,HistoricalPeriodClothing))",
      "all x.(FascinatedBy(x,HistoryOfRenaissance) -> AttendRegularly(x,RenaissanceFair))",
      "all x.((FascinatedBy(x,HistoryOfRenaissance) & -(ContemporaryAcademic(x) & Enjoy(x,Learning))) | (-FascinatedBy(x,HistoryOfRenaissance) & ContemporaryAcademic(x) & Enjoy(x,Learning)))",
      "all x.(((FocusedOn(x,FuturisticSubject) & FocusedOn(x,VocationalSubject)) -> ContemporaryAcademic(x)) & Enjoy(x,Learning))",
      "all x.((Professor(x) & Take(x,HistoricalApproach)) -> -(ContemporaryAcademic(x) & Enjoy(x,Learning)))",
      "(-(FocusedOn(Clyde,FuturisticSubject) & FocusedOn(Clyde,VocationalSubject)) -> -((FocusedOn(Clyde,FuturisticSubject) & FocusedOn(Clyde,VocationalSubject)) | (Enjoy(Clyde,DressingUp,OldFashionedClothing) & Enjoy(Clyde,DressingUp,HistoricalPeriodClothing))))"
    ],
    "goal": "((Professor(Clyde) & Take(Clyde,HistoricalApproach)) | (ContemporaryAcademic(Clyde) & Enjoy(Clyde,Learning)))"
  },
  {
    "id": 714,
    "flag": "success",
    "assumptions": [
      "all x.(SportsCar(x) -> -IntendedToBeDrivenAt(x,ModerateSpeed))",
      "all x.(DesignedFor(x,FamilyUse) -> IntendedToBeDrivenAt(x,ModerateSpeed))"
    ],
    "goal": "all x.(SportsCar(x) -> -For(x,FamilyUse))"
  },
  {
    "id": 944,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(ComeToWorkWithEveryDay(x,PositiveAttitude) -> WorkWellInTeamsIn(x,WorkPlace))",
      "all x.((ComeToWorkWithEveryDay(x,PositiveAttitude) & -AlwaysTiredInMorning(x)) | (-ComeToWorkWithEveryDay(x,PositiveAttitude) & AlwaysTiredInMorning(x)))",
      "all x.(AlwaysTiredInMorning(x) -> CriticizedBy(x,Boss))",
      "all x.(CriticizedBy(x,Boss) -> -ReceiveFromAtWork(x,PositiveFeedback,Team))",
      "-((WorkWellInTeamsIn(Kat,WorkPlace) & -Tired(Kat)) | (-WorkWellInTeamsIn(Kat,WorkPlace) & Tired(Kat)))"
    ],
    "goal": "ComeToWorkWithEveryDay(Kat,PositiveAttitude)"
  },
  {
    "id": 945,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(ComeToWorkWithEveryDay(x,PositiveAttitude) -> WorkWellInTeamsIn(x,WorkPlace))",
      "all x.((ComeToWorkWithEveryDay(x,PositiveAttitude) & -AlwaysTiredInMorning(x)) | (-ComeToWorkWithEveryDay(x,PositiveAttitude) & AlwaysTiredInMorning(x)))",
      "all x.(AlwaysTiredInMorning(x) -> CriticizedBy(x,Boss))",
      "all x.(CriticizedBy(x,Boss) -> -ReceiveFromAtWork(x,PositiveFeedback,Team))",
      "-((WorkWellInTeamsIn(Kat,WorkPlace) & -Tired(Kat)) | (-WorkWellInTeamsIn(Kat,WorkPlace) & Tired(Kat)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 946,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(ComeToWorkWithEveryDay(x,PositiveAttitude) -> WorkWellInTeamsIn(x,WorkPlace))",
      "all x.((ComeToWorkWithEveryDay(x,PositiveAttitude) & -AlwaysTiredInMorning(x)) | (-ComeToWorkWithEveryDay(x,PositiveAttitude) & AlwaysTiredInMorning(x)))",
      "all x.(AlwaysTiredInMorning(x) -> CriticizedBy(x,Boss))",
      "all x.(CriticizedBy(x,Boss) -> -ReceiveFromAtWork(x,PositiveFeedback,Team))",
      "-((WorkWellInTeamsIn(Kat,WorkPlace) & -Tired(Kat)) | (-WorkWellInTeamsIn(Kat,WorkPlace) & Tired(Kat)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 720,
    "flag": "success",
    "assumptions": [
      "OpenSourceSoftware(Drishti)",
      "all x.(OpenSourceSoftware(x) -> FreeToModify(x))"
    ],
    "goal": "FreeToModify(Drishti)"
  },
  {
    "id": 461,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.(((Student(x) & GetGradeIn(x,APlus,EnglishClass)) -> EnglishClassScore(x,y)) & GreaterThan95(y))",
      "all x y.(((Student(x) & GetGradeIn(x,a,EnglishClass)) -> EnglishClassScore(x,y)) & GreaterThan90(y) & LowerThan95(y))",
      "(Student(Zhang) & GetGradeIn(Zhang,a,EnglishClass))",
      "all x y.(Student(Zhang) & Student(Wang) & EnglishScore(Zhang,x) & EnglishScore(Wang,y) & Better(y,x))",
      "all x.(Student(Wu) & EnglishScore(Wu,x) & LowerThan90(x))",
      "all x y.(((Student(x) & EnglishScore(x,y) & LowerThan90(y)) -> -GreaterThan95(y)) & -GreaterThan90(y) & LowerThan95(y))"
    ],
    "goal": "all x.(EnglishScore(Zhang,x) & LowerThan95(x))"
  },
  {
    "id": 462,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.(((Student(x) & GetGradeIn(x,APlus,EnglishClass)) -> EnglishClassScore(x,y)) & GreaterThan95(y))",
      "all x y.(((Student(x) & GetGradeIn(x,a,EnglishClass)) -> EnglishClassScore(x,y)) & GreaterThan90(y) & LowerThan95(y))",
      "(Student(Zhang) & GetGradeIn(Zhang,a,EnglishClass))",
      "all x y.(Student(Zhang) & Student(Wang) & EnglishScore(Zhang,x) & EnglishScore(Wang,y) & Better(y,x))",
      "all x.(Student(Wu) & EnglishScore(Wu,x) & LowerThan90(x))",
      "all x y.(((Student(x) & EnglishScore(x,y) & LowerThan90(y)) -> -GreaterThan95(y)) & -GreaterThan90(y) & LowerThan95(y))"
    ],
    "goal": "GetGradeIn(Wang,APlus,EnglishClass)"
  },
  {
    "id": 463,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.(((Student(x) & GetGradeIn(x,APlus,EnglishClass)) -> EnglishClassScore(x,y)) & GreaterThan95(y))",
      "all x y.(((Student(x) & GetGradeIn(x,a,EnglishClass)) -> EnglishClassScore(x,y)) & GreaterThan90(y) & LowerThan95(y))",
      "(Student(Zhang) & GetGradeIn(Zhang,a,EnglishClass))",
      "all x y.(Student(Zhang) & Student(Wang) & EnglishScore(Zhang,x) & EnglishScore(Wang,y) & Better(y,x))",
      "all x.(Student(Wu) & EnglishScore(Wu,x) & LowerThan90(x))",
      "all x y.(((Student(x) & EnglishScore(x,y) & LowerThan90(y)) -> -GreaterThan95(y)) & -GreaterThan90(y) & LowerThan95(y))"
    ],
    "goal": "(-GetGradeIn(Wu,APlus,EnglishClass) & -GetGradeIn(Wu,a,EnglishClass))"
  },
  {
    "id": 617,
    "flag": "success",
    "assumptions": [
      "all x.(Day(x) -> -Prefer(Olivia,WarmTemperature,x))",
      "all x.(Sleep(Olivia,x) -> Prefer(Olivia,CoolTemperature,x))",
      "all x.(Night(x) -> Sleep(Olivia,x))",
      "all x.(Day(x) -> Work(Olivia,x))",
      "((Work(Olivia) & -Sleep(Olivia)) | (-Work(Olivia) & Sleep(Olivia)))",
      "all x.((Day(x) & -Night(x)) | (-Day(x) & Night(x)))",
      "all x.((Prefer(Olivia,WarmTemperature,x) & -Prefer(Olivia,CoolTemperature,x)) | (-Prefer(Olivia,WarmTemperature,x) & Prefer(Olivia,CoolTemperature,x)))"
    ],
    "goal": "all x.Prefer(Olivia,CoolTemperature,x)"
  },
  {
    "id": 592,
    "flag": "success",
    "assumptions": [
      "GUI(Tora)",
      "all x.(GUI(x) -> Software(x))",
      "all x.(((Software(x) -> Free(x)) & -Paid(x)) | (-(Software(x) -> Free(x)) & Paid(x)))",
      "all x.((Paid(x) & Software(x)) -> -UnderGNULicense(x))",
      "UnderGNULicense(Tora)"
    ],
    "goal": "(Paid(Tora) & Software(Tora))"
  },
  {
    "id": 593,
    "flag": "success",
    "assumptions": [
      "GUI(Tora)",
      "all x.(GUI(x) -> Software(x))",
      "all x.(((Software(x) -> Free(x)) & -Paid(x)) | (-(Software(x) -> Free(x)) & Paid(x)))",
      "all x.((Paid(x) & Software(x)) -> -UnderGNULicense(x))",
      "UnderGNULicense(Tora)"
    ],
    "goal": "(Free(Tora) & Software(Tora))"
  },
  {
    "id": 1199,
    "flag": "success",
    "assumptions": [
      "all x.(Customer(x) -> (Choose(x,PrimeVideoPlan) | Choose(x,HBOMaxPlan)))",
      "all x.((Customer(x) & Choose(x,HBOMaxPlan)) -> RewardWith(x,GiftCard))",
      "[[ERROR]]",
      "all x.((Customer(x) & RewardWith(x,GiftCard)) -> -OlderThan(x,Num80))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "Choose(James,NoPlan)"
  },
  {
    "id": 1200,
    "flag": "success",
    "assumptions": [
      "all x.(Customer(x) -> (Choose(x,PrimeVideoPlan) | Choose(x,HBOMaxPlan)))",
      "all x.((Customer(x) & Choose(x,HBOMaxPlan)) -> RewardWith(x,GiftCard))",
      "[[ERROR]]",
      "all x.((Customer(x) & RewardWith(x,GiftCard)) -> -OlderThan(x,Num80))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "(Choose(James,PlanA) | Choose(James,NoPlan))"
  },
  {
    "id": 1201,
    "flag": "success",
    "assumptions": [
      "all x.(Customer(x) -> (Choose(x,PrimeVideoPlan) | Choose(x,HBOMaxPlan)))",
      "all x.((Customer(x) & Choose(x,HBOMaxPlan)) -> RewardWith(x,GiftCard))",
      "[[ERROR]]",
      "all x.((Customer(x) & RewardWith(x,GiftCard)) -> -OlderThan(x,Num80))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "((((Choose(James,PlanA) | Choose(James,NoPlan)) -> RewardWith(James,GiftCard)) & -Choose(James,PlanB)) | (-((Choose(James,PlanA) | Choose(James,NoPlan)) -> RewardWith(James,GiftCard)) & Choose(James,PlanB)))"
  },
  {
    "id": 497,
    "flag": "success",
    "assumptions": [
      "Horse(Detroitcity)",
      "exists x.(Horse(x) & Racehorse(x))",
      "all x.((Horse(x) & InRace(x) & Falls(x)) -> PoseRiskTo(x,Rider))",
      "(InRace(Detroitcity) & Fall(Detroitcity))",
      "all x.((Horse(x) & InRace(x)) -> Racehorse(x))"
    ],
    "goal": "MultipleRace(Detroitcity)"
  },
  {
    "id": 498,
    "flag": "success",
    "assumptions": [
      "Horse(Detroitcity)",
      "exists x.(Horse(x) & Racehorse(x))",
      "all x.((Horse(x) & InRace(x) & Falls(x)) -> PoseRiskTo(x,Rider))",
      "(InRace(Detroitcity) & Fall(Detroitcity))",
      "all x.((Horse(x) & InRace(x)) -> Racehorse(x))"
    ],
    "goal": "PoseRiskTo(Detroitcity,Rider)"
  },
  {
    "id": 499,
    "flag": "success",
    "assumptions": [
      "Horse(Detroitcity)",
      "exists x.(Horse(x) & Racehorse(x))",
      "all x.((Horse(x) & InRace(x) & Falls(x)) -> PoseRiskTo(x,Rider))",
      "(InRace(Detroitcity) & Fall(Detroitcity))",
      "all x.((Horse(x) & InRace(x)) -> Racehorse(x))"
    ],
    "goal": "Racehorse(Detroitcity)"
  },
  {
    "id": 339,
    "flag": "success",
    "assumptions": [
      "(Architect(Monhoff) & Artist(Monhoff) & Illustrator(Monhoff))",
      "American(Monhoff)",
      "all x.((Artist(x) -> GoodAt(x,PhysicalArt)) | GoodAt(x,ConceptualArt))",
      "all x.(American(x) -> AmericanCitizen(x))"
    ],
    "goal": "GoodAt(Monhoff,PhysicalArt)"
  },
  {
    "id": 340,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 51,
    "flag": "success",
    "assumptions": [
      "(Czech(MiroslavFiedler) & Mathematician(MiroslavFiedler))",
      "KnownFor(MiroslavFiedler,ContributionsToLinearAlgebraAndGraphTheory)",
      "HonoredBy(MiroslavFiedler,FiedlerEigenvalue)",
      "TheSecondSmallestEigenvalueOf(FiedlerEigenvalue,TheGraphLaplacian)"
    ],
    "goal": "exists x.(TheSecondSmallestEigenvalueOf(x,TheGraphLaplacian) & HonoredBy(MiroslavFiedler,x))"
  },
  {
    "id": 52,
    "flag": "success",
    "assumptions": [
      "(Czech(MiroslavFiedler) & Mathematician(MiroslavFiedler))",
      "KnownFor(MiroslavFiedler,ContributionsToLinearAlgebraAndGraphTheory)",
      "HonoredBy(MiroslavFiedler,FiedlerEigenvalue)",
      "TheSecondSmallestEigenvalueOf(FiedlerEigenvalue,TheGraphLaplacian)"
    ],
    "goal": "(French(MiroslavFiedler) & Mathematician(MiroslavFiedler))"
  },
  {
    "id": 53,
    "flag": "success",
    "assumptions": [
      "(Czech(MiroslavFiedler) & Mathematician(MiroslavFiedler))",
      "KnownFor(MiroslavFiedler,ContributionsToLinearAlgebraAndGraphTheory)",
      "HonoredBy(MiroslavFiedler,FiedlerEigenvalue)",
      "TheSecondSmallestEigenvalueOf(FiedlerEigenvalue,TheGraphLaplacian)"
    ],
    "goal": "exists x.(Czech(x) & Mathematician(x) & KnownFor(x,ContributionsToLinearAlgebraAndGraphTheory))"
  },
  {
    "id": 444,
    "flag": "success",
    "assumptions": [
      "all x.(Laptop(x) -> Computer(x))",
      "all x.(Computer(x) -> CanPlayGameOn(x))",
      "all x.(Phone(x) -> -Computer(x))"
    ],
    "goal": "all x.(Laptop(x) -> CanPlayGameOn(x))"
  },
  {
    "id": 445,
    "flag": "success",
    "assumptions": [
      "all x.(Laptop(x) -> Computer(x))",
      "all x.(Computer(x) -> CanPlayGameOn(x))",
      "all x.(Phone(x) -> -Computer(x))"
    ],
    "goal": "all x.(Phone(x) -> -CanPlayGameOn(x))"
  },
  {
    "id": 29,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 30,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 31,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1147,
    "flag": "success",
    "assumptions": [
      "all x.((Product(x) & DesignedBy(x,Apple)) -> SoldIn(x,AppleStore))",
      "all x.((Product(x) & With(x,AppleLogo)) -> DesignedBy(x,Apple))",
      "all x.(Macbook(x) -> With(x,AppleLogo))",
      "all x.((Product(x) & With(x,AppleM2Chip)) -> Macbook(x))",
      "-(SoldIn(ThinkpadX1,AppleStore) & Macbook(ThinkpadX1))"
    ],
    "goal": "With(ThinkpadX1,AppleM2Chip)"
  },
  {
    "id": 1148,
    "flag": "success",
    "assumptions": [
      "all x.((Product(x) & DesignedBy(x,Apple)) -> SoldIn(x,AppleStore))",
      "all x.((Product(x) & With(x,AppleLogo)) -> DesignedBy(x,Apple))",
      "all x.(Macbook(x) -> With(x,AppleLogo))",
      "all x.((Product(x) & With(x,AppleM2Chip)) -> Macbook(x))",
      "-(SoldIn(ThinkpadX1,AppleStore) & Macbook(ThinkpadX1))"
    ],
    "goal": "SoldIn(ThinkpadX1,AppleStore)"
  },
  {
    "id": 1149,
    "flag": "success",
    "assumptions": [
      "all x.((Product(x) & DesignedBy(x,Apple)) -> SoldIn(x,AppleStore))",
      "all x.((Product(x) & With(x,AppleLogo)) -> DesignedBy(x,Apple))",
      "all x.(Macbook(x) -> With(x,AppleLogo))",
      "all x.((Product(x) & With(x,AppleM2Chip)) -> Macbook(x))",
      "-(SoldIn(ThinkpadX1,AppleStore) & Macbook(ThinkpadX1))"
    ],
    "goal": "(With(ThinkpadX1,AppleM2Chip) & Macbook(ThinkpadX1))"
  },
  {
    "id": 1150,
    "flag": "success",
    "assumptions": [
      "all x.((Product(x) & DesignedBy(x,Apple)) -> SoldIn(x,AppleStore))",
      "all x.((Product(x) & With(x,AppleLogo)) -> DesignedBy(x,Apple))",
      "all x.(Macbook(x) -> With(x,AppleLogo))",
      "all x.((Product(x) & With(x,AppleM2Chip)) -> Macbook(x))",
      "-(SoldIn(ThinkpadX1,AppleStore) & Macbook(ThinkpadX1))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1151,
    "flag": "success",
    "assumptions": [
      "all x.((Product(x) & DesignedBy(x,Apple)) -> SoldIn(x,AppleStore))",
      "all x.((Product(x) & With(x,AppleLogo)) -> DesignedBy(x,Apple))",
      "all x.(Macbook(x) -> With(x,AppleLogo))",
      "all x.((Product(x) & With(x,AppleM2Chip)) -> Macbook(x))",
      "-(SoldIn(ThinkpadX1,AppleStore) & Macbook(ThinkpadX1))"
    ],
    "goal": "((With(ThinkpadX1,AppleM2Chip) & Macbook(ThinkpadX1)) -> -(With(ThinkpadX1,AppleM2Chip) | SoldIn(ThinkpadX1,AppleStore)))"
  },
  {
    "id": 585,
    "flag": "success",
    "assumptions": [
      "(RoadJunction(OxfordCircus) & Connect(OxfordCircus,OxfordSt,RegentSt))",
      "(In(OxfordSt,London) & In(RegentSt,London))",
      "(Designed(Nash,Construction) & On(Construction,RegentSt))",
      "Designed(Nash,OxfordCircus)",
      "(Architect(Nash) & British(Nash))",
      "(EntraceTo(OxfordCircus,TubeStation) & PartOf(TubeStation,Centralline) & In(TubeStation,1900))"
    ],
    "goal": "In(OxfordCircus,London)"
  },
  {
    "id": 586,
    "flag": "success",
    "assumptions": [
      "(RoadJunction(OxfordCircus) & Connect(OxfordCircus,OxfordSt,RegentSt))",
      "(In(OxfordSt,London) & In(RegentSt,London))",
      "(Designed(Nash,Construction) & On(Construction,RegentSt))",
      "Designed(Nash,OxfordCircus)",
      "(Architect(Nash) & British(Nash))",
      "(EntraceTo(OxfordCircus,TubeStation) & PartOf(TubeStation,Centralline) & In(TubeStation,1900))"
    ],
    "goal": "exists x.(British(x) & Architect(x) & Design(x,OxfordCircus))"
  },
  {
    "id": 587,
    "flag": "success",
    "assumptions": [
      "(RoadJunction(OxfordCircus) & Connect(OxfordCircus,OxfordSt,RegentSt))",
      "(In(OxfordSt,London) & In(RegentSt,London))",
      "(Designed(Nash,Construction) & On(Construction,RegentSt))",
      "Designed(Nash,OxfordCircus)",
      "(Architect(Nash) & British(Nash))",
      "(EntraceTo(OxfordCircus,TubeStation) & PartOf(TubeStation,Centralline) & In(TubeStation,1900))"
    ],
    "goal": "all x.(PartOf(x,CentralLine) -> Design(JohnNash,x))"
  },
  {
    "id": 588,
    "flag": "success",
    "assumptions": [
      "(RoadJunction(OxfordCircus) & Connect(OxfordCircus,OxfordSt,RegentSt))",
      "(In(OxfordSt,London) & In(RegentSt,London))",
      "(Designed(Nash,Construction) & On(Construction,RegentSt))",
      "Designed(Nash,OxfordCircus)",
      "(Architect(Nash) & British(Nash))",
      "(EntraceTo(OxfordCircus,TubeStation) & PartOf(TubeStation,Centralline) & In(TubeStation,1900))"
    ],
    "goal": "-In(RegentStreet,London)"
  },
  {
    "id": 1369,
    "flag": "success",
    "assumptions": [
      "all x.((((Pet(x) & In(x,MyHouse)) -> Cat(x)) & -Dog(x)) | (-((Pet(x) & In(x,MyHouse)) -> Cat(x)) & Dog(x)))",
      "all x.((Dog(x) & In(x,MyHouse)) -> Bark(x))",
      "all x.-Ghost(x)",
      "all x.((Bark(x) & Pet(x) & In(x,MyHouse)) -> -Dead(x))",
      "all x.((((Pet(x) & In(x,MyHouse)) -> Dead(x)) & -Alive(x)) | (-((Pet(x) & In(x,MyHouse)) -> Dead(x)) & Alive(x)))",
      "(Pet(Jojo) & InMyHouse(Jojo) & -Alive(Jojo))"
    ],
    "goal": "Ghost(Jojo)"
  },
  {
    "id": 1370,
    "flag": "success",
    "assumptions": [
      "all x.((((Pet(x) & In(x,MyHouse)) -> Cat(x)) & -Dog(x)) | (-((Pet(x) & In(x,MyHouse)) -> Cat(x)) & Dog(x)))",
      "all x.((Dog(x) & In(x,MyHouse)) -> Bark(x))",
      "all x.-Ghost(x)",
      "all x.((Bark(x) & Pet(x) & In(x,MyHouse)) -> -Dead(x))",
      "all x.((((Pet(x) & In(x,MyHouse)) -> Dead(x)) & -Alive(x)) | (-((Pet(x) & In(x,MyHouse)) -> Dead(x)) & Alive(x)))",
      "(Pet(Jojo) & InMyHouse(Jojo) & -Alive(Jojo))"
    ],
    "goal": "(Cat(Jojo) | Ghost(Jojo))"
  },
  {
    "id": 1371,
    "flag": "success",
    "assumptions": [
      "all x.((((Pet(x) & In(x,MyHouse)) -> Cat(x)) & -Dog(x)) | (-((Pet(x) & In(x,MyHouse)) -> Cat(x)) & Dog(x)))",
      "all x.((Dog(x) & In(x,MyHouse)) -> Bark(x))",
      "all x.-Ghost(x)",
      "all x.((Bark(x) & Pet(x) & In(x,MyHouse)) -> -Dead(x))",
      "all x.((((Pet(x) & In(x,MyHouse)) -> Dead(x)) & -Alive(x)) | (-((Pet(x) & In(x,MyHouse)) -> Dead(x)) & Alive(x)))",
      "(Pet(Jojo) & InMyHouse(Jojo) & -Alive(Jojo))"
    ],
    "goal": "((((Cat(Jojo) | Ghost(Jojo)) -> Bark(Jojo)) & -Dog(Jojo)) | (-((Cat(Jojo) | Ghost(Jojo)) -> Bark(Jojo)) & Dog(Jojo)))"
  },
  {
    "id": 1264,
    "flag": "success",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "((BengalTiger(Fido) & -Cat(Fido)) | (-BengalTiger(Fido) & Cat(Fido)))"
    ],
    "goal": "Husky(Fido)"
  },
  {
    "id": 1265,
    "flag": "success",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "((BengalTiger(Fido) & -Cat(Fido)) | (-BengalTiger(Fido) & Cat(Fido)))"
    ],
    "goal": "-Husky(Fido)"
  },
  {
    "id": 1266,
    "flag": "success",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "((BengalTiger(Fido) & -Cat(Fido)) | (-BengalTiger(Fido) & Cat(Fido)))"
    ],
    "goal": "BengalTiger(Fido)"
  },
  {
    "id": 1267,
    "flag": "success",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "((BengalTiger(Fido) & -Cat(Fido)) | (-BengalTiger(Fido) & Cat(Fido)))"
    ],
    "goal": "(-Dog(Fido) & -Husky(Fido))"
  },
  {
    "id": 195,
    "flag": "success",
    "assumptions": [
      "all x y.((SummerOlympicsIn(x,y) & In(x,UnitedStates)) -> SummerOlympicsIn(x,UnitedStates))",
      "all x y.((In(x,y) & In(y,UnitedStates)) -> In(x,UnitedStates))",
      "all x y z.((In(x,z) & State(z) & SummerOlympicsIn(x,y)) -> SummerOlympicsIn(z,y))",
      "SummerOlympicsIn(LosAngeles,Yr2028)",
      "In(LosAngeles,California)",
      "In(Atlanta,UnitedStates)",
      "In(California,UnitedStates)",
      "In(Atlanta,Georgia)",
      "(-InSummerOlympicsIn(Boxing,Yr2028) & -InSummerOlympicsIn(Modern_pentathlon,Yr2028) & -InSummerOlympicsIn(Weightlifting,Yr2028))",
      "SummerOlympicsIn(Atlanta,Yr1996)"
    ],
    "goal": "SummerOlympicsIn(UnitedStates,Yr2028)"
  },
  {
    "id": 196,
    "flag": "success",
    "assumptions": [
      "all x y.((SummerOlympicsIn(x,y) & In(x,UnitedStates)) -> SummerOlympicsIn(x,UnitedStates))",
      "all x y.((In(x,y) & In(y,UnitedStates)) -> In(x,UnitedStates))",
      "all x y z.((In(x,z) & State(z) & SummerOlympicsIn(x,y)) -> SummerOlympicsIn(z,y))",
      "SummerOlympicsIn(LosAngeles,Yr2028)",
      "In(LosAngeles,California)",
      "In(Atlanta,UnitedStates)",
      "In(California,UnitedStates)",
      "In(Atlanta,Georgia)",
      "(-InSummerOlympicsIn(Boxing,Yr2028) & -InSummerOlympicsIn(Modern_pentathlon,Yr2028) & -InSummerOlympicsIn(Weightlifting,Yr2028))",
      "SummerOlympicsIn(Atlanta,Yr1996)"
    ],
    "goal": "-SummerOlympicsIn(Georgia,Yr1996)"
  },
  {
    "id": 197,
    "flag": "success",
    "assumptions": [
      "all x y.((SummerOlympicsIn(x,y) & In(x,UnitedStates)) -> SummerOlympicsIn(x,UnitedStates))",
      "all x y.((In(x,y) & In(y,UnitedStates)) -> In(x,UnitedStates))",
      "all x y z.((In(x,z) & State(z) & SummerOlympicsIn(x,y)) -> SummerOlympicsIn(z,y))",
      "SummerOlympicsIn(LosAngeles,Yr2028)",
      "In(LosAngeles,California)",
      "In(Atlanta,UnitedStates)",
      "In(California,UnitedStates)",
      "In(Atlanta,Georgia)",
      "(-InSummerOlympicsIn(Boxing,Yr2028) & -InSummerOlympicsIn(Modern_pentathlon,Yr2028) & -InSummerOlympicsIn(Weightlifting,Yr2028))",
      "SummerOlympicsIn(Atlanta,Yr1996)"
    ],
    "goal": "InSummerOlympicsIn(Skateboarding,Yr2028)"
  },
  {
    "id": 23,
    "flag": "success",
    "assumptions": [
      "(Vole(TaigaVole) & LiveIn(TaigaVole,NorthAmerica))",
      "LikePlayingWith(Cat,TaigaVole)",
      "LiveIn(TaigaVole,BorealTaigaZone)",
      "all x.((LiveIn(x,NorthAmerica) & LiveIn(x,BorealTaigaZone)) -> LiveIn(x,ColdPlace))"
    ],
    "goal": "LikePlayingWith(Cat,TaigaVole)"
  },
  {
    "id": 24,
    "flag": "success",
    "assumptions": [
      "(Vole(TaigaVole) & LiveIn(TaigaVole,NorthAmerica))",
      "LikePlayingWith(Cat,TaigaVole)",
      "LiveIn(TaigaVole,BorealTaigaZone)",
      "all x.((LiveIn(x,NorthAmerica) & LiveIn(x,BorealTaigaZone)) -> LiveIn(x,ColdPlace))"
    ],
    "goal": "-LiveIn(TaigaVole,ColdPlace)"
  },
  {
    "id": 1041,
    "flag": "success",
    "assumptions": [
      "all x.(Disease(x) -> (Affects(x,Female) | Affects(x,Male)))",
      "all x.(Affect(x,Female) -> -ProstateCancer(x))",
      "all x.(ProstateCancer(x) | NonProstateCancer(x))",
      "all x.(Cancer(x) -> -Without(x,Mutation))",
      "all x.(NonProstateCancer(x) -> Cancer(x))",
      "((Cancer(Adenocarcinoma) | Without(Adenocarcinoma,Mutation)) -> (Affect(Adenocarcinoma,Female) | Without(Adenocarcinoma,Mutation)))"
    ],
    "goal": "ProstateCancer(Adenocarcinoma)"
  },
  {
    "id": 1042,
    "flag": "success",
    "assumptions": [
      "all x.(Disease(x) -> (Affects(x,Female) | Affects(x,Male)))",
      "all x.(Affect(x,Female) -> -ProstateCancer(x))",
      "all x.(ProstateCancer(x) | NonProstateCancer(x))",
      "all x.(Cancer(x) -> -Without(x,Mutation))",
      "all x.(NonProstateCancer(x) -> Cancer(x))",
      "((Cancer(Adenocarcinoma) | Without(Adenocarcinoma,Mutation)) -> (Affect(Adenocarcinoma,Female) | Without(Adenocarcinoma,Mutation)))"
    ],
    "goal": "Affect(Adenocarcinoma,Men)"
  },
  {
    "id": 1043,
    "flag": "success",
    "assumptions": [
      "all x.(Disease(x) -> (Affects(x,Female) | Affects(x,Male)))",
      "all x.(Affect(x,Female) -> -ProstateCancer(x))",
      "all x.(ProstateCancer(x) | NonProstateCancer(x))",
      "all x.(Cancer(x) -> -Without(x,Mutation))",
      "all x.(NonProstateCancer(x) -> Cancer(x))",
      "((Cancer(Adenocarcinoma) | Without(Adenocarcinoma,Mutation)) -> (Affect(Adenocarcinoma,Female) | Without(Adenocarcinoma,Mutation)))"
    ],
    "goal": "((Affect(Adenocarcinoma,Men) | Without(Adenocarcinoma,Mutation)) -> (NonProstateCancer(Adenocarcinoma) & Without(Adenocarcinoma,Mutation)))"
  },
  {
    "id": 174,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 175,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 176,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1155,
    "flag": "success",
    "assumptions": [
      "all x.((Fruit(x) & SoldAt(x,NicasMarket)) -> ShippedFrom(x,Colombia))",
      "[[ERROR]]",
      "all x.((Fruit(x) & ShippedFrom(x,Colombia)) -> -SoldAt(x,LocalFarmersMarket))",
      "(Fruit(Avocado) & (SoldAt(Avocado,LocalFarmersMarket) | SoldAt(Avocado,NicasMarket)))",
      "-((ShippedFrom(Avocado,Colombia) & -SoldIn(Avocado,NewHaven)) | (-ShippedFrom(Avocado,Colombia) & SoldIn(Avocado,NewHaven)))"
    ],
    "goal": "(Fruit(Avocado) & SoldAt(Avocado,LocalFarmersMarket))"
  },
  {
    "id": 1156,
    "flag": "success",
    "assumptions": [
      "all x.((Fruit(x) & SoldAt(x,NicasMarket)) -> ShippedFrom(x,Colombia))",
      "[[ERROR]]",
      "all x.((Fruit(x) & ShippedFrom(x,Colombia)) -> -SoldAt(x,LocalFarmersMarket))",
      "(Fruit(Avocado) & (SoldAt(Avocado,LocalFarmersMarket) | SoldAt(Avocado,NicasMarket)))",
      "-((ShippedFrom(Avocado,Colombia) & -SoldIn(Avocado,NewHaven)) | (-ShippedFrom(Avocado,Colombia) & SoldIn(Avocado,NewHaven)))"
    ],
    "goal": "((SoldAt(Avocado,LocalFarmersMarket) & -SoldIn(Avocado,NewHaven)) | (-SoldAt(Avocado,LocalFarmersMarket) & SoldIn(Avocado,NewHaven)))"
  },
  {
    "id": 1157,
    "flag": "success",
    "assumptions": [
      "all x.((Fruit(x) & SoldAt(x,NicasMarket)) -> ShippedFrom(x,Colombia))",
      "[[ERROR]]",
      "all x.((Fruit(x) & ShippedFrom(x,Colombia)) -> -SoldAt(x,LocalFarmersMarket))",
      "(Fruit(Avocado) & (SoldAt(Avocado,LocalFarmersMarket) | SoldAt(Avocado,NicasMarket)))",
      "-((ShippedFrom(Avocado,Colombia) & -SoldIn(Avocado,NewHaven)) | (-ShippedFrom(Avocado,Colombia) & SoldIn(Avocado,NewHaven)))"
    ],
    "goal": "((SoldIn(Avocado,NewHaven) & -SoldAt(x,NicasMarket)) | (-SoldIn(Avocado,NewHaven) & SoldAt(x,NicasMarket)))"
  },
  {
    "id": 1158,
    "flag": "success",
    "assumptions": [
      "all x.((Fruit(x) & SoldAt(x,NicasMarket)) -> ShippedFrom(x,Colombia))",
      "[[ERROR]]",
      "all x.((Fruit(x) & ShippedFrom(x,Colombia)) -> -SoldAt(x,LocalFarmersMarket))",
      "(Fruit(Avocado) & (SoldAt(Avocado,LocalFarmersMarket) | SoldAt(Avocado,NicasMarket)))",
      "-((ShippedFrom(Avocado,Colombia) & -SoldIn(Avocado,NewHaven)) | (-ShippedFrom(Avocado,Colombia) & SoldIn(Avocado,NewHaven)))"
    ],
    "goal": "((-(SoldAt(Avocado,LocalFarmersMarket) & ShippedFrom(Avocado,Colombia)) -> -SoldAt(Avocado,LocalFarmersMarket)) & -SoldIn(Avocado,NewHaven))"
  },
  {
    "id": 1178,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1179,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1180,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 10,
    "flag": "success",
    "assumptions": [
      "Holds(Suduva,TheLithuanianSuperCup)",
      "SoccerTeam(Suduva)"
    ],
    "goal": "exists x.(SoccerTeam(x) & Holds(x,TheLithuanianSuperCup))"
  },
  {
    "id": 285,
    "flag": "success",
    "assumptions": [
      "(Village(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow,HambletonDistrict))",
      "In(HambletonDistrict,NorthYorkshire)",
      "In(NorthYorkshire,England)",
      "all x y z.((In(x,y) & In(y,z)) -> In(x,z))"
    ],
    "goal": "exists x.(Village(x) & In(x,England))"
  },
  {
    "id": 286,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 138,
    "flag": "success",
    "assumptions": [
      "(Author(DouglasAdams) & Author(DouglasAdams,TheSalmonOfDoubt) & Book(TheSalmonOfDoubt))",
      "(About(TheSalmonOfDoubt,LifeExperience) & About(TheSalmonOfDoubt,Technology))",
      "all x.(Author(x) -> Writer(x))",
      "all x.(Writer(x) -> Create(x,InnovativeIdea))",
      "[[ERROR]]"
    ],
    "goal": "Writer(DouglasAdams)"
  },
  {
    "id": 139,
    "flag": "success",
    "assumptions": [
      "(Author(DouglasAdams) & Author(DouglasAdams,TheSalmonOfDoubt) & Book(TheSalmonOfDoubt))",
      "(About(TheSalmonOfDoubt,LifeExperience) & About(TheSalmonOfDoubt,Technology))",
      "all x.(Author(x) -> Writer(x))",
      "all x.(Writer(x) -> Create(x,InnovativeIdea))",
      "[[ERROR]]"
    ],
    "goal": "Create(DouglasAdams,InnovativeIdea)"
  },
  {
    "id": 140,
    "flag": "success",
    "assumptions": [
      "(Author(DouglasAdams) & Author(DouglasAdams,TheSalmonOfDoubt) & Book(TheSalmonOfDoubt))",
      "(About(TheSalmonOfDoubt,LifeExperience) & About(TheSalmonOfDoubt,Technology))",
      "all x.(Author(x) -> Writer(x))",
      "all x.(Writer(x) -> Create(x,InnovativeIdea))",
      "[[ERROR]]"
    ],
    "goal": "-Contain(TheSalmonOfDoubt,InnovativeIdea)"
  },
  {
    "id": 822,
    "flag": "success",
    "assumptions": [
      "all x.((Disposable(x) & Product(x)) -> -HelpSlowDown(x,GlobalWarming))",
      "all x.((EcoFriendly(x) & Brand(x)) -> Help(x,SlowDownGlobalWarming))",
      "all x.(((Sustainable(x) & FashionBrand(x)) -> EcoFriendly(x)) & Brand(x))",
      "all x.(((FastFashion(x) & Product(x)) -> Disposable(x)) & Product(x))",
      "((-HelpSlowDown(Reformation,GlobalWarming) -> (EcoFriendly(Reformation) & Brand(Reformation))) | (Sustainable(Reformation) & FashionBrand(Reformation)))"
    ],
    "goal": "(EcoFriendly(Reformation) & Brand(Reformation))"
  },
  {
    "id": 823,
    "flag": "success",
    "assumptions": [
      "all x.((Disposable(x) & Product(x)) -> -HelpSlowDown(x,GlobalWarming))",
      "all x.((EcoFriendly(x) & Brand(x)) -> Help(x,SlowDownGlobalWarming))",
      "all x.(((Sustainable(x) & FashionBrand(x)) -> EcoFriendly(x)) & Brand(x))",
      "all x.(((FastFashion(x) & Product(x)) -> Disposable(x)) & Product(x))",
      "((-HelpSlowDown(Reformation,GlobalWarming) -> (EcoFriendly(Reformation) & Brand(Reformation))) | (Sustainable(Reformation) & FashionBrand(Reformation)))"
    ],
    "goal": "(FastFashion(Reformation) & Product(Reformation))"
  },
  {
    "id": 824,
    "flag": "success",
    "assumptions": [
      "all x.((Disposable(x) & Product(x)) -> -HelpSlowDown(x,GlobalWarming))",
      "all x.((EcoFriendly(x) & Brand(x)) -> Help(x,SlowDownGlobalWarming))",
      "all x.(((Sustainable(x) & FashionBrand(x)) -> EcoFriendly(x)) & Brand(x))",
      "all x.(((FastFashion(x) & Product(x)) -> Disposable(x)) & Product(x))",
      "((-HelpSlowDown(Reformation,GlobalWarming) -> (EcoFriendly(Reformation) & Brand(Reformation))) | (Sustainable(Reformation) & FashionBrand(Reformation)))"
    ],
    "goal": "-(FastFashion(Reformation) & Product(Reformation))"
  },
  {
    "id": 825,
    "flag": "success",
    "assumptions": [
      "all x.((Disposable(x) & Product(x)) -> -HelpSlowDown(x,GlobalWarming))",
      "all x.((EcoFriendly(x) & Brand(x)) -> Help(x,SlowDownGlobalWarming))",
      "all x.(((Sustainable(x) & FashionBrand(x)) -> EcoFriendly(x)) & Brand(x))",
      "all x.(((FastFashion(x) & Product(x)) -> Disposable(x)) & Product(x))",
      "((-HelpSlowDown(Reformation,GlobalWarming) -> (EcoFriendly(Reformation) & Brand(Reformation))) | (Sustainable(Reformation) & FashionBrand(Reformation)))"
    ],
    "goal": "(-(FastFashion(Reformation) & Product(Reformation)) | -(Disposable(x) & Product(x)))"
  },
  {
    "id": 826,
    "flag": "success",
    "assumptions": [
      "all x.((Disposable(x) & Product(x)) -> -HelpSlowDown(x,GlobalWarming))",
      "all x.((EcoFriendly(x) & Brand(x)) -> Help(x,SlowDownGlobalWarming))",
      "all x.(((Sustainable(x) & FashionBrand(x)) -> EcoFriendly(x)) & Brand(x))",
      "all x.(((FastFashion(x) & Product(x)) -> Disposable(x)) & Product(x))",
      "((-HelpSlowDown(Reformation,GlobalWarming) -> (EcoFriendly(Reformation) & Brand(Reformation))) | (Sustainable(Reformation) & FashionBrand(Reformation)))"
    ],
    "goal": "((Disposable(Reformation) & Product(Reformation)) -> (FastFashion(Reformation) & Product(Reformation)))"
  },
  {
    "id": 827,
    "flag": "success",
    "assumptions": [
      "all x.((Disposable(x) & Product(x)) -> -HelpSlowDown(x,GlobalWarming))",
      "all x.((EcoFriendly(x) & Brand(x)) -> Help(x,SlowDownGlobalWarming))",
      "all x.(((Sustainable(x) & FashionBrand(x)) -> EcoFriendly(x)) & Brand(x))",
      "all x.(((FastFashion(x) & Product(x)) -> Disposable(x)) & Product(x))",
      "((-HelpSlowDown(Reformation,GlobalWarming) -> (EcoFriendly(Reformation) & Brand(Reformation))) | (Sustainable(Reformation) & FashionBrand(Reformation)))"
    ],
    "goal": "((FastFashion(Reformation) & Product(Reformation)) | -HelpSlowDown(Reformation,GlobalWarming))"
  },
  {
    "id": 283,
    "flag": "success",
    "assumptions": [
      "(Cricketeer(RoyRichardson) & PlaysFor(RoyRichardson,SintMaarten) & ConstituentCountry(SintMaarten))",
      "(RightHanded(RoyRichardson) & Batsman(RoyRichardson) & MediumPaceBowler(RoyRichardson))",
      "OldAtDebut(RoyRichardson)",
      "Dismisses(ShervilleHuggins,RoyRichardson)"
    ],
    "goal": "all x y.((ConsituentCountry(y) & PlayedFor(x,y)) -> -Dismissed(Shervillehuggins,x))"
  },
  {
    "id": 284,
    "flag": "success",
    "assumptions": [
      "(Cricketeer(RoyRichardson) & PlaysFor(RoyRichardson,SintMaarten) & ConstituentCountry(SintMaarten))",
      "(RightHanded(RoyRichardson) & Batsman(RoyRichardson) & MediumPaceBowler(RoyRichardson))",
      "OldAtDebut(RoyRichardson)",
      "Dismisses(ShervilleHuggins,RoyRichardson)"
    ],
    "goal": "all x.((RightHanded(x) & MediumPaceBowler(x)) -> -PlayedFor(x,SintMaarten))"
  },
  {
    "id": 695,
    "flag": "success",
    "assumptions": [
      "all x.((GetAJobAt(x,Google) -> Have(x,ALotOfWorkExperience)) | Have(x,GoodEducation))",
      "all x.(GetAJobAt(x,Google) -> Submitted(x,Resume,Google))",
      "Have(John,ALotOfWorkExperience)",
      "(Submitted(John,Resume,Google) & GetAJobAt(John,Google))"
    ],
    "goal": "YaleGraduate(John)"
  },
  {
    "id": 884,
    "flag": "success",
    "assumptions": [
      "all x.(IPhone(x) -> -StandaloneDesktop(x))",
      "all x.((AppleMade(x) & Cellphone(x)) -> IPhone(x))",
      "all x.(((Phone(x) & With(x,A15BionicChip)) -> AppleMade(x)) & Cellphone(x))",
      "all x.(((Phone(x) & EquippedWith(x,FourCoreGPU) & MadeBy(x,Apple)) -> Phone(x)) & With(x,A15BionicChip))",
      "(((Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip) & -(Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeBy(UnannouncedHuaweiPhone,Apple))) | (-(Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip)) & Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeBy(UnannouncedHuaweiPhone,Apple))) -> -(Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip) & StandaloneDesktop(UnannouncedHuaweiPhone)))"
    ],
    "goal": "(AppleMade(UnannouncedHuaweiPhone) & Cellphone(UnannouncedHuaweiPhone))"
  },
  {
    "id": 885,
    "flag": "success",
    "assumptions": [
      "all x.(IPhone(x) -> -StandaloneDesktop(x))",
      "all x.((AppleMade(x) & Cellphone(x)) -> IPhone(x))",
      "all x.(((Phone(x) & With(x,A15BionicChip)) -> AppleMade(x)) & Cellphone(x))",
      "all x.(((Phone(x) & EquippedWith(x,FourCoreGPU) & MadeBy(x,Apple)) -> Phone(x)) & With(x,A15BionicChip))",
      "(((Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip) & -(Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeBy(UnannouncedHuaweiPhone,Apple))) | (-(Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip)) & Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeBy(UnannouncedHuaweiPhone,Apple))) -> -(Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip) & StandaloneDesktop(UnannouncedHuaweiPhone)))"
    ],
    "goal": "(Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeByApple(UnannouncedHuaweiPhone))"
  },
  {
    "id": 886,
    "flag": "success",
    "assumptions": [
      "all x.(IPhone(x) -> -StandaloneDesktop(x))",
      "all x.((AppleMade(x) & Cellphone(x)) -> IPhone(x))",
      "all x.(((Phone(x) & With(x,A15BionicChip)) -> AppleMade(x)) & Cellphone(x))",
      "all x.(((Phone(x) & EquippedWith(x,FourCoreGPU) & MadeBy(x,Apple)) -> Phone(x)) & With(x,A15BionicChip))",
      "(((Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip) & -(Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeBy(UnannouncedHuaweiPhone,Apple))) | (-(Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip)) & Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeBy(UnannouncedHuaweiPhone,Apple))) -> -(Phone(UnannouncedHuaweiPhone) & With(UnannouncedHuaweiPhone,A15BionicChip) & StandaloneDesktop(UnannouncedHuaweiPhone)))"
    ],
    "goal": "-(Phone(UnannouncedHuaweiPhone) & EquippedWith(UnannouncedHuaweiPhone,FourCoreGPU) & MadeByApple(UnannouncedHuaweiPhone))"
  },
  {
    "id": 92,
    "flag": "success",
    "assumptions": [
      "WorldLeadingLightingDesigner(HughVanstone)",
      "From(HughVanstone,UnitedKingdom)",
      "exists x.(GreaterThan(x,Num160) & LitProductions(HughVanstone,x))",
      "exists x.(Hometown(HughVanstone,x) & AttendedSchoolIn(HughVanstone,x))"
    ],
    "goal": "(WorldLeadingLightingDesigner(HughVanstone) & From(HughVanstone,UnitedKingdom))"
  },
  {
    "id": 93,
    "flag": "success",
    "assumptions": [
      "WorldLeadingLightingDesigner(HughVanstone)",
      "From(HughVanstone,UnitedKingdom)",
      "exists x.(GreaterThan(x,Num160) & LitProductions(HughVanstone,x))",
      "exists x.(Hometown(HughVanstone,x) & AttendedSchoolIn(HughVanstone,x))"
    ],
    "goal": "exists x.(GreaterThan(x,Num170) & LitProductions(HughVanstone,x))"
  },
  {
    "id": 94,
    "flag": "success",
    "assumptions": [
      "WorldLeadingLightingDesigner(HughVanstone)",
      "From(HughVanstone,UnitedKingdom)",
      "exists x.(GreaterThan(x,Num160) & LitProductions(HughVanstone,x))",
      "exists x.(Hometown(HughVanstone,x) & AttendedSchoolIn(HughVanstone,x))"
    ],
    "goal": "AttendedSchoolIn(HughVanstone,UnitedStates)"
  },
  {
    "id": 448,
    "flag": "success",
    "assumptions": [
      "all x.(Man(x) -> -RunFasterThan(XmBolt))",
      "-Man(Superman)"
    ],
    "goal": "RunFasterThan(Superman,Bolt)"
  },
  {
    "id": 379,
    "flag": "success",
    "assumptions": [
      "(American(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAt(DonaldErvinKnuth,Stanford))",
      "Called(DonaldErvinKnuth,FatherOfTheAnalysisOfAlgorithms)"
    ],
    "goal": "exists x.(American(x) & ComputerScientist(x) & Called(x,FatherOfTheAnalysisOfAlgorithms))"
  },
  {
    "id": 380,
    "flag": "success",
    "assumptions": [
      "(American(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAt(DonaldErvinKnuth,Stanford))",
      "Called(DonaldErvinKnuth,FatherOfTheAnalysisOfAlgorithms)"
    ],
    "goal": "exists x.(Mathematician(x) & Called(x,FatherOfTheAnalysisOfAlgorithms))"
  },
  {
    "id": 381,
    "flag": "success",
    "assumptions": [
      "(American(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAt(DonaldErvinKnuth,Stanford))",
      "Called(DonaldErvinKnuth,FatherOfTheAnalysisOfAlgorithms)"
    ],
    "goal": "WellKnownFigureIn(DonaldErvinKnuth,ArtificialIntelligence)"
  },
  {
    "id": 362,
    "flag": "success",
    "assumptions": [
      "all x.(NeocrepidoderaCorpulenta(x) -> (FleaBeetle(x) | Moth(x)))",
      "all x.(NeocrepidoderaCorpulenta(x) -> In(x,ChrysomelidaeFamily))",
      "all x.(In(x,ChrysomelidaeFamily) -> -Moth(x))",
      "exists x.NeocrepidoderaCorpulenta(x)"
    ],
    "goal": "exists x.(FleaBeetle(x) & In(x,ChrysomelidaeFamily))"
  },
  {
    "id": 363,
    "flag": "success",
    "assumptions": [
      "all x.(NeocrepidoderaCorpulenta(x) -> (FleaBeetle(x) | Moth(x)))",
      "all x.(NeocrepidoderaCorpulenta(x) -> In(x,ChrysomelidaeFamily))",
      "all x.(In(x,ChrysomelidaeFamily) -> -Moth(x))",
      "exists x.NeocrepidoderaCorpulenta(x)"
    ],
    "goal": "all x.(FleaBeetle(x) -> -In(x,ChrysomelidaeFamily))"
  },
  {
    "id": 640,
    "flag": "success",
    "assumptions": [
      "(Milanese(CarrozzeriaColli) & CoachBuilder(CarrozzeriaColli) & Company(CarrozzeriaColli) & EstablishedBy(CarrozzeriaColli,GiuseppeColli) & EstablishedIn(CarrozzeriaColli,1931))",
      "(Company(CarrozzeriaColli) & SpecializesIn(CarrozzeriaColli,UsingAluminum))",
      "all x.((BuiltBy(x,CarrozzeriaColli) & FirstAutomobile(x)) -> RacingCar(x))",
      "exists x.(BuiltBy(x,CarrozzeriaColli) & RacingCar(x) & Used(x,Fiat1100mechanicals) & Used(x,Chassis))",
      "exists x.(Airforce(x) & WorkedFor(CarrozzeriaColli,x))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(CarBody(x) & Made(x,CarrozzeriaColli) & MadeIn(x,1931))"
  },
  {
    "id": 641,
    "flag": "success",
    "assumptions": [
      "(Milanese(CarrozzeriaColli) & CoachBuilder(CarrozzeriaColli) & Company(CarrozzeriaColli) & EstablishedBy(CarrozzeriaColli,GiuseppeColli) & EstablishedIn(CarrozzeriaColli,1931))",
      "(Company(CarrozzeriaColli) & SpecializesIn(CarrozzeriaColli,UsingAluminum))",
      "all x.((BuiltBy(x,CarrozzeriaColli) & FirstAutomobile(x)) -> RacingCar(x))",
      "exists x.(BuiltBy(x,CarrozzeriaColli) & RacingCar(x) & Used(x,Fiat1100mechanicals) & Used(x,Chassis))",
      "exists x.(Airforce(x) & WorkedFor(CarrozzeriaColli,x))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(Airplane(x) & Made(x,CarrozzeriaColli) & MadeDuring(x,WorldWarII))"
  },
  {
    "id": 642,
    "flag": "success",
    "assumptions": [
      "(Milanese(CarrozzeriaColli) & CoachBuilder(CarrozzeriaColli) & Company(CarrozzeriaColli) & EstablishedBy(CarrozzeriaColli,GiuseppeColli) & EstablishedIn(CarrozzeriaColli,1931))",
      "(Company(CarrozzeriaColli) & SpecializesIn(CarrozzeriaColli,UsingAluminum))",
      "all x.((BuiltBy(x,CarrozzeriaColli) & FirstAutomobile(x)) -> RacingCar(x))",
      "exists x.(BuiltBy(x,CarrozzeriaColli) & RacingCar(x) & Used(x,Fiat1100mechanicals) & Used(x,Chassis))",
      "exists x.(Airforce(x) & WorkedFor(CarrozzeriaColli,x))",
      "[[ERROR]]"
    ],
    "goal": "exists x y.(Company(x) & EstablishedBy(x,GiuseppeColli) & CarBody(y) & Made(y,x))"
  },
  {
    "id": 643,
    "flag": "success",
    "assumptions": [
      "(Milanese(CarrozzeriaColli) & CoachBuilder(CarrozzeriaColli) & Company(CarrozzeriaColli) & EstablishedBy(CarrozzeriaColli,GiuseppeColli) & EstablishedIn(CarrozzeriaColli,1931))",
      "(Company(CarrozzeriaColli) & SpecializesIn(CarrozzeriaColli,UsingAluminum))",
      "all x.((BuiltBy(x,CarrozzeriaColli) & FirstAutomobile(x)) -> RacingCar(x))",
      "exists x.(BuiltBy(x,CarrozzeriaColli) & RacingCar(x) & Used(x,Fiat1100mechanicals) & Used(x,Chassis))",
      "exists x.(Airforce(x) & WorkedFor(CarrozzeriaColli,x))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(Milanese(x) & CoachBuilder(x) & Company(x) & EstablishedBy(x,GiuseppeColli) & SpecializesIn(x,UsingAluminum))"
  },
  {
    "id": 644,
    "flag": "success",
    "assumptions": [
      "(Milanese(CarrozzeriaColli) & CoachBuilder(CarrozzeriaColli) & Company(CarrozzeriaColli) & EstablishedBy(CarrozzeriaColli,GiuseppeColli) & EstablishedIn(CarrozzeriaColli,1931))",
      "(Company(CarrozzeriaColli) & SpecializesIn(CarrozzeriaColli,UsingAluminum))",
      "all x.((BuiltBy(x,CarrozzeriaColli) & FirstAutomobile(x)) -> RacingCar(x))",
      "exists x.(BuiltBy(x,CarrozzeriaColli) & RacingCar(x) & Used(x,Fiat1100mechanicals) & Used(x,Chassis))",
      "exists x.(Airforce(x) & WorkedFor(CarrozzeriaColli,x))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(BuiltBy(x,CarrozzeriaColli) & FirstAutomobil(x) & Used(x,Fiat1100mechanicals) & Used(x,Chassis))"
  },
  {
    "id": 386,
    "flag": "success",
    "assumptions": [
      "(((GoTo(John,TheCinema) & GoTo(John,Today)) <-> GoTo(Jack,TheCinema)) & GoTo(Jack,Today))",
      "((GoTo(John,TheCinema) & GoTo(John,Today)) <-> (On(Ironman) & -Bad(Weather,Today)))",
      "exists x.((Day(x) & March(x)) -> -Bad(Weather,x))",
      "On(Ironman)",
      "(Day(PresentMoment) & March(PresentMoment))"
    ],
    "goal": "(GoTo(John,TheCinema) & GoTo(John,Today))"
  },
  {
    "id": 387,
    "flag": "success",
    "assumptions": [
      "(((GoTo(John,TheCinema) & GoTo(John,Today)) <-> GoTo(Jack,TheCinema)) & GoTo(Jack,Today))",
      "((GoTo(John,TheCinema) & GoTo(John,Today)) <-> (On(Ironman) & -Bad(Weather,Today)))",
      "exists x.((Day(x) & March(x)) -> -Bad(Weather,x))",
      "On(Ironman)",
      "(Day(PresentMoment) & March(PresentMoment))"
    ],
    "goal": "-Bad(Weather,Today)"
  },
  {
    "id": 246,
    "flag": "success",
    "assumptions": [
      "all x.(Sells(Quiksilver,x) -> (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x)))",
      "Clothing(Flannel)",
      "exists x.(Sells(Quiksilver,x) & Owns(Joe,x))"
    ],
    "goal": "Sells(Quiksilver,Beer)"
  },
  {
    "id": 247,
    "flag": "success",
    "assumptions": [
      "all x.(Sells(Quiksilver,x) -> (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x)))",
      "Clothing(Flannel)",
      "exists x.(Sells(Quiksilver,x) & Owns(Joe,x))"
    ],
    "goal": "Owns(Joe,Flannel)"
  },
  {
    "id": 248,
    "flag": "success",
    "assumptions": [
      "all x.(Sells(Quiksilver,x) -> (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x)))",
      "Clothing(Flannel)",
      "exists x.(Sells(Quiksilver,x) & Owns(Joe,x))"
    ],
    "goal": "exists x.((Owns(Joe,x) & Sportswear(x)) | Clothing(x) | Footwear(x) | Accessory(x))"
  },
  {
    "id": 760,
    "flag": "success",
    "assumptions": [
      "all x.((VideoGame(x) & ReleasedBy(x,Nintendo)) -> -Support(x,PS4))",
      "all x.((VideoGame(x) & In(x,PokemonSeries)) -> ReleasedBy(x,Nintendo))",
      "all x.((VideoGame(x) & In(x,FIFASeries)) -> Support(x,PS4))",
      "all x.((VideoGame(x) & Simulate(x,OnlineSoccer) & Use(x,LicensedPlayer)) -> In(x,FIFASeries))",
      "((VideoGame(BeLionel) & In(BeLionel,PokemonSeries)) | (Simulate(BeLionel,OnlineSoccer) & Use(BeLionel,LicensedPlayer)))"
    ],
    "goal": "(VideoGame(BeLionel) & PokemonSeries(BeLionel))"
  },
  {
    "id": 761,
    "flag": "success",
    "assumptions": [
      "all x.((VideoGame(x) & ReleasedBy(x,Nintendo)) -> -Support(x,PS4))",
      "all x.((VideoGame(x) & In(x,PokemonSeries)) -> ReleasedBy(x,Nintendo))",
      "all x.((VideoGame(x) & In(x,FIFASeries)) -> Support(x,PS4))",
      "all x.((VideoGame(x) & Simulate(x,OnlineSoccer) & Use(x,LicensedPlayer)) -> In(x,FIFASeries))",
      "((VideoGame(BeLionel) & In(BeLionel,PokemonSeries)) | (Simulate(BeLionel,OnlineSoccer) & Use(BeLionel,LicensedPlayer)))"
    ],
    "goal": "(VideoGame(BeLionel) & -((FIFASeries(BeLionel) & -Support(BeLionel,PS4)) | (-FIFASeries(BeLionel) & Support(BeLionel,PS4))))"
  },
  {
    "id": 762,
    "flag": "success",
    "assumptions": [
      "all x.((VideoGame(x) & ReleasedBy(x,Nintendo)) -> -Support(x,PS4))",
      "all x.((VideoGame(x) & In(x,PokemonSeries)) -> ReleasedBy(x,Nintendo))",
      "all x.((VideoGame(x) & In(x,FIFASeries)) -> Support(x,PS4))",
      "all x.((VideoGame(x) & Simulate(x,OnlineSoccer) & Use(x,LicensedPlayer)) -> In(x,FIFASeries))",
      "((VideoGame(BeLionel) & In(BeLionel,PokemonSeries)) | (Simulate(BeLionel,OnlineSoccer) & Use(BeLionel,LicensedPlayer)))"
    ],
    "goal": "((VideoGame(BeLionel) & FIFASeries(BeLionel) & -Support(BeLionel,PS4)) | (-(VideoGame(BeLionel) & FIFASeries(BeLionel)) & Support(BeLionel,PS4)))"
  },
  {
    "id": 763,
    "flag": "success",
    "assumptions": [
      "all x.((VideoGame(x) & ReleasedBy(x,Nintendo)) -> -Support(x,PS4))",
      "all x.((VideoGame(x) & In(x,PokemonSeries)) -> ReleasedBy(x,Nintendo))",
      "all x.((VideoGame(x) & In(x,FIFASeries)) -> Support(x,PS4))",
      "all x.((VideoGame(x) & Simulate(x,OnlineSoccer) & Use(x,LicensedPlayer)) -> In(x,FIFASeries))",
      "((VideoGame(BeLionel) & In(BeLionel,PokemonSeries)) | (Simulate(BeLionel,OnlineSoccer) & Use(BeLionel,LicensedPlayer)))"
    ],
    "goal": "(VideoGame(BeLionel) & -(FIFASeries(BeLionel) | Support(BeLionel,PS4)))"
  },
  {
    "id": 773,
    "flag": "success",
    "assumptions": [
      "all x y.((PaymentCard(x) & RussianBank(y) & IssuedBy(x,y)) -> -UsedWith(x,ApplePay))",
      "all x y.(((PaymentCard(x) & MIR(x)) -> RussianBank(y)) & IssuedBy(x,y))",
      "exists x.((PaymentCard(x) & International(x)) -> UsedWith(x,ApplePay))",
      "all x y.(((SocialPayment(x) & TransferredTo(x,y)) -> PaymentCard(y)) & MIR(y))",
      "(PaymentCard(BankOfAmerica) & UsedWith(BankOfAmerica,ApplePay))"
    ],
    "goal": "(PaymentCard(BankOfAmerica) & International(BankOfAmerica))"
  },
  {
    "id": 774,
    "flag": "success",
    "assumptions": [
      "all x y.((PaymentCard(x) & RussianBank(y) & IssuedBy(x,y)) -> -UsedWith(x,ApplePay))",
      "all x y.(((PaymentCard(x) & MIR(x)) -> RussianBank(y)) & IssuedBy(x,y))",
      "exists x.((PaymentCard(x) & International(x)) -> UsedWith(x,ApplePay))",
      "all x y.(((SocialPayment(x) & TransferredTo(x,y)) -> PaymentCard(y)) & MIR(y))",
      "(PaymentCard(BankOfAmerica) & UsedWith(BankOfAmerica,ApplePay))"
    ],
    "goal": "all x.(PaymentCard(BankOfAmerica) & International(BankOfAmerica) & SocialPayment(x) & TransferredTo(x,BankOfAmerica))"
  },
  {
    "id": 775,
    "flag": "success",
    "assumptions": [
      "all x y.((PaymentCard(x) & RussianBank(y) & IssuedBy(x,y)) -> -UsedWith(x,ApplePay))",
      "all x y.(((PaymentCard(x) & MIR(x)) -> RussianBank(y)) & IssuedBy(x,y))",
      "exists x.((PaymentCard(x) & International(x)) -> UsedWith(x,ApplePay))",
      "all x y.(((SocialPayment(x) & TransferredTo(x,y)) -> PaymentCard(y)) & MIR(y))",
      "(PaymentCard(BankOfAmerica) & UsedWith(BankOfAmerica,ApplePay))"
    ],
    "goal": "all x.((PaymentCard(BandOfAmerica) & International(BandOfAmerica) & SocialPayment(x) & TransferredTo(x,BandOfAmerica)) -> International(BandOfAmerica))"
  },
  {
    "id": 150,
    "flag": "success",
    "assumptions": [
      "ProducedBy(LuminaAPV,Chevrolet)",
      "(ProducedBy(Astro,Chevrolet) & Van(Astro))",
      "all x.((Vehicle(x) & ProducedBy(x,Chevrolet) & InThisBatch(x)) -> ((Car(x) & -Van(x)) | (-Car(x) & Van(x))))"
    ],
    "goal": "Van(LuminaAPV)"
  },
  {
    "id": 151,
    "flag": "success",
    "assumptions": [
      "ProducedBy(LuminaAPV,Chevrolet)",
      "(ProducedBy(Astro,Chevrolet) & Van(Astro))",
      "all x.((Vehicle(x) & ProducedBy(x,Chevrolet) & InThisBatch(x)) -> ((Car(x) & -Van(x)) | (-Car(x) & Van(x))))"
    ],
    "goal": "((Car(LuminaAPV) & -Van(LuminaAPV)) | (-Car(LuminaAPV) & Van(LuminaAPV)))"
  },
  {
    "id": 152,
    "flag": "success",
    "assumptions": [
      "ProducedBy(LuminaAPV,Chevrolet)",
      "(ProducedBy(Astro,Chevrolet) & Van(Astro))",
      "all x.((Vehicle(x) & ProducedBy(x,Chevrolet) & InThisBatch(x)) -> ((Car(x) & -Van(x)) | (-Car(x) & Van(x))))"
    ],
    "goal": "Van(Astro)"
  },
  {
    "id": 153,
    "flag": "success",
    "assumptions": [
      "ProducedBy(LuminaAPV,Chevrolet)",
      "(ProducedBy(Astro,Chevrolet) & Van(Astro))",
      "all x.((Vehicle(x) & ProducedBy(x,Chevrolet) & InThisBatch(x)) -> ((Car(x) & -Van(x)) | (-Car(x) & Van(x))))"
    ],
    "goal": "Car(Astro)"
  },
  {
    "id": 1123,
    "flag": "success",
    "assumptions": [
      "all x.(WorkIn(x,Office) -> Commuter(x))",
      "all x.((WorkIn(x,Office) & -WorkFrom(x,Home)) | (-WorkIn(x,Office) & WorkFrom(x,Home)))",
      "all x.(WorkFrom(x,Home) -> Have(x,RelaxedSchedule))",
      "((Commuter(George) & -Have(George,HomeOffice)) | (-Commuter(George) & Have(George,HomeOffice)))",
      "((((WorkFrom(George,Home) & -Have(George,HomeOffice)) | (-WorkFrom(George,Home) & Have(George,HomeOffice))) -> -WorkFrom(George,Home)) & Commuter(George))"
    ],
    "goal": "WorkFrom(George,Home)"
  },
  {
    "id": 1124,
    "flag": "success",
    "assumptions": [
      "all x.(WorkIn(x,Office) -> Commuter(x))",
      "all x.((WorkIn(x,Office) & -WorkFrom(x,Home)) | (-WorkIn(x,Office) & WorkFrom(x,Home)))",
      "all x.(WorkFrom(x,Home) -> Have(x,RelaxedSchedule))",
      "((Commuter(George) & -Have(George,HomeOffice)) | (-Commuter(George) & Have(George,HomeOffice)))",
      "((((WorkFrom(George,Home) & -Have(George,HomeOffice)) | (-WorkFrom(George,Home) & Have(George,HomeOffice))) -> -WorkFrom(George,Home)) & Commuter(George))"
    ],
    "goal": "(-(WorkFrom(George,Home) & WorkIn(George,Office)) -> -(Commuter(George) | Have(George,RelaxedSchedule)))"
  },
  {
    "id": 1125,
    "flag": "success",
    "assumptions": [
      "all x.(WorkIn(x,Office) -> Commuter(x))",
      "all x.((WorkIn(x,Office) & -WorkFrom(x,Home)) | (-WorkIn(x,Office) & WorkFrom(x,Home)))",
      "all x.(WorkFrom(x,Home) -> Have(x,RelaxedSchedule))",
      "((Commuter(George) & -Have(George,HomeOffice)) | (-Commuter(George) & Have(George,HomeOffice)))",
      "((((WorkFrom(George,Home) & -Have(George,HomeOffice)) | (-WorkFrom(George,Home) & Have(George,HomeOffice))) -> -WorkFrom(George,Home)) & Commuter(George))"
    ],
    "goal": "((WorkFrom(George,Home) & -Have(George,RelaxedSchedule)) | (-WorkFrom(George,Home) & Have(George,RelaxedSchedule)))"
  },
  {
    "id": 80,
    "flag": "success",
    "assumptions": [
      "(MusicSupervisor(JasonKramer) & American(JasonKramer))",
      "[[ERROR]]",
      "all x y.((HostShowOn(x,y) & PublicRadioStation(x)) -> RadioPersonality(x))",
      "RadioPersonality(JoeRogan)",
      "exists x.(HostShowOn(JasonKramer,x) & PublicRadioStation(x))"
    ],
    "goal": "American(JoeRogan)"
  },
  {
    "id": 81,
    "flag": "success",
    "assumptions": [
      "(MusicSupervisor(JasonKramer) & American(JasonKramer))",
      "[[ERROR]]",
      "all x y.((HostShowOn(x,y) & PublicRadioStation(x)) -> RadioPersonality(x))",
      "RadioPersonality(JoeRogan)",
      "exists x.(HostShowOn(JasonKramer,x) & PublicRadioStation(x))"
    ],
    "goal": "MusicSupervisor(JasonKramer)"
  },
  {
    "id": 82,
    "flag": "success",
    "assumptions": [
      "(MusicSupervisor(JasonKramer) & American(JasonKramer))",
      "[[ERROR]]",
      "all x y.((HostShowOn(x,y) & PublicRadioStation(x)) -> RadioPersonality(x))",
      "RadioPersonality(JoeRogan)",
      "exists x.(HostShowOn(JasonKramer,x) & PublicRadioStation(x))"
    ],
    "goal": "RadioPersonality(JasonKramer)"
  },
  {
    "id": 1223,
    "flag": "success",
    "assumptions": [
      "all x.((Bag(x) & Hermès(x)) -> -MadeIn(x,Italy))",
      "all x.((Bag(x) & Birkin(x)) -> Hermès(x))",
      "all x.(Ferrari(x) -> MadeIn(x,Italy))",
      "all x.((Car(x) & Car(x,FerrariV12Engine)) -> Ferrrari(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Car(x,FerrariV12Engine))",
      "-(Ferrari(LamborghiniSUV) & MadeIn(LamborghiniSUV,Maranello))",
      "((Bag(Kelly) & Hermès(Kelly)) | (Bag(Kelly) & Car(Kelly) & Car(Kelly,FerrariV12Engine)))"
    ],
    "goal": "MadeIn(LamborghiniSUV,Italy)"
  },
  {
    "id": 1224,
    "flag": "success",
    "assumptions": [
      "all x.((Bag(x) & Hermès(x)) -> -MadeIn(x,Italy))",
      "all x.((Bag(x) & Birkin(x)) -> Hermès(x))",
      "all x.(Ferrari(x) -> MadeIn(x,Italy))",
      "all x.((Car(x) & Car(x,FerrariV12Engine)) -> Ferrrari(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Car(x,FerrariV12Engine))",
      "-(Ferrari(LamborghiniSUV) & MadeIn(LamborghiniSUV,Maranello))",
      "((Bag(Kelly) & Hermès(Kelly)) | (Bag(Kelly) & Car(Kelly) & Car(Kelly,FerrariV12Engine)))"
    ],
    "goal": "-MadeIn(LamborghiniSUV,Italy)"
  },
  {
    "id": 1225,
    "flag": "success",
    "assumptions": [
      "all x.((Bag(x) & Hermès(x)) -> -MadeIn(x,Italy))",
      "all x.((Bag(x) & Birkin(x)) -> Hermès(x))",
      "all x.(Ferrari(x) -> MadeIn(x,Italy))",
      "all x.((Car(x) & Car(x,FerrariV12Engine)) -> Ferrrari(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Car(x,FerrariV12Engine))",
      "-(Ferrari(LamborghiniSUV) & MadeIn(LamborghiniSUV,Maranello))",
      "((Bag(Kelly) & Hermès(Kelly)) | (Bag(Kelly) & Car(Kelly) & Car(Kelly,FerrariV12Engine)))"
    ],
    "goal": "(Bag(Kelly) & MadeIn(Kelly,Maranello) & Birkin(Kelly))"
  },
  {
    "id": 1226,
    "flag": "success",
    "assumptions": [
      "all x.((Bag(x) & Hermès(x)) -> -MadeIn(x,Italy))",
      "all x.((Bag(x) & Birkin(x)) -> Hermès(x))",
      "all x.(Ferrari(x) -> MadeIn(x,Italy))",
      "all x.((Car(x) & Car(x,FerrariV12Engine)) -> Ferrrari(x))",
      "all x.((Car(x) & MadeIn(x,Maranello)) -> Car(x,FerrariV12Engine))",
      "-(Ferrari(LamborghiniSUV) & MadeIn(LamborghiniSUV,Maranello))",
      "((Bag(Kelly) & Hermès(Kelly)) | (Bag(Kelly) & Car(Kelly) & Car(Kelly,FerrariV12Engine)))"
    ],
    "goal": "(Bag(Kelly) & -(MadeIn(Kelly,Maranello) & Birkin(Kelly)))"
  },
  {
    "id": 596,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(LiveIn(x,Spain) -> LiveIn(x,Europe))",
      "all x.(LiveIn(x,Poland) -> LiveIn(x,Europe))",
      "LiveIn(Rochelle,Europe)",
      "-LiveIn(Dominique,Europe)",
      "exists y.(LiveIn(Alfonso,y) & Place(y) & Named(y,Galicia))"
    ],
    "goal": "exists y.(LiveIn(Rochelle,y) & Place(y) & Named(y,Galicia))"
  },
  {
    "id": 597,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(LiveIn(x,Spain) -> LiveIn(x,Europe))",
      "all x.(LiveIn(x,Poland) -> LiveIn(x,Europe))",
      "LiveIn(Rochelle,Europe)",
      "-LiveIn(Dominique,Europe)",
      "exists y.(LiveIn(Alfonso,y) & Place(y) & Named(y,Galicia))"
    ],
    "goal": "all x.(Live(Dominique,x) -> -In(x,Spain))"
  },
  {
    "id": 598,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(LiveIn(x,Spain) -> LiveIn(x,Europe))",
      "all x.(LiveIn(x,Poland) -> LiveIn(x,Europe))",
      "LiveIn(Rochelle,Europe)",
      "-LiveIn(Dominique,Europe)",
      "exists y.(LiveIn(Alfonso,y) & Place(y) & Named(y,Galicia))"
    ],
    "goal": "all x.(Live(Alfonso,x) -> In(x,Europe))"
  },
  {
    "id": 321,
    "flag": "success",
    "assumptions": [
      "BornIn(RalphHammerthaler,WasserburgamInn)",
      "LocatedIn(WasserbAmInn,Germany)",
      "LocatedIn(Germany,Europe)",
      "(Writer(RalphHammerthaler) & German(RalphHammerthaler))",
      "BornIn1965(RalphHammerthaler)"
    ],
    "goal": "(Writer(RalphHammerthaler) & BornIn(RalphHammerthaler,Asia))"
  },
  {
    "id": 322,
    "flag": "success",
    "assumptions": [
      "BornIn(RalphHammerthaler,WasserburgamInn)",
      "LocatedIn(WasserbAmInn,Germany)",
      "LocatedIn(Germany,Europe)",
      "(Writer(RalphHammerthaler) & German(RalphHammerthaler))",
      "BornIn1965(RalphHammerthaler)"
    ],
    "goal": "LivesIn(RalphHammerthaler,Germany)"
  },
  {
    "id": 1166,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Book(x) & WrittenBy(x,Tolkien)) -> ReadBy(x,Tomas))",
      "[[ERROR]]",
      "exists y.((MoreThan(y,Num1000) & SoldCopies(Hamlet,y) & -WrittenBy(Hamlet,NeilGaiman)) | (-(MoreThan(y,Num1000) & SoldCopies(Hamlet,y)) & WrittenBy(Hamlet,NeilGaiman)))"
    ],
    "goal": "Win(Hamlet,HugoAward)"
  },
  {
    "id": 1167,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Book(x) & WrittenBy(x,Tolkien)) -> ReadBy(x,Tomas))",
      "[[ERROR]]",
      "exists y.((MoreThan(y,Num1000) & SoldCopies(Hamlet,y) & -WrittenBy(Hamlet,NeilGaiman)) | (-(MoreThan(y,Num1000) & SoldCopies(Hamlet,y)) & WrittenBy(Hamlet,NeilGaiman)))"
    ],
    "goal": "(Win(Hamlet,HugoAward) & WrittenBy(Hamlet,Tolkien))"
  },
  {
    "id": 1168,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Book(x) & WrittenBy(x,Tolkien)) -> ReadBy(x,Tomas))",
      "[[ERROR]]",
      "exists y.((MoreThan(y,Num1000) & SoldCopies(Hamlet,y) & -WrittenBy(Hamlet,NeilGaiman)) | (-(MoreThan(y,Num1000) & SoldCopies(Hamlet,y)) & WrittenBy(Hamlet,NeilGaiman)))"
    ],
    "goal": "(-((Win(Hamlet,HugoAward) & -WrittenBy(Hamlet,Tolkien)) | (-Win(Hamlet,HugoAward) & WrittenBy(Hamlet,Tolkien))) -> (-Win(Hamlet,HugoAward) & -WrittenBy(Hamlet,NeilGaiman)))"
  },
  {
    "id": 1393,
    "flag": "success",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "(Grass(Banana) | Fruit(Banana))"
    ],
    "goal": "Food(Grape)"
  },
  {
    "id": 1394,
    "flag": "success",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "(Grass(Banana) | Fruit(Banana))"
    ],
    "goal": "-Food(Grape)"
  },
  {
    "id": 1395,
    "flag": "success",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "(Grass(Banana) | Fruit(Banana))"
    ],
    "goal": "(Lemon(Banana) & Meadow(Banana))"
  },
  {
    "id": 1396,
    "flag": "success",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "(Grass(Banana) | Fruit(Banana))"
    ],
    "goal": "-(Lemon(Banana) & Meadow(Banana))"
  },
  {
    "id": 60,
    "flag": "success",
    "assumptions": [
      "(Team(GoldenStateWarriors) & From(GoldenStateWarriors,SanFrancisco))",
      "Won(GoldenStateWarriors,NbaFinals)",
      "all x.((Team(x) & Attending(x,NbaFinals)) -> WonManyGames(x))",
      "(Team(BostonCeltics) & Lost(BostonCeltics,NbaFinals))",
      "all x.((Team(x) & Won(x,NbaFinals)) -> MoreIncome(x))",
      "all x.((Won(x,NbaFinals) | Lost(x,NbaFinals)) -> Attending(x,NbaFinals))"
    ],
    "goal": "From(BostonCeltics,SanFrancisco)"
  },
  {
    "id": 61,
    "flag": "success",
    "assumptions": [
      "(Team(GoldenStateWarriors) & From(GoldenStateWarriors,SanFrancisco))",
      "Won(GoldenStateWarriors,NbaFinals)",
      "all x.((Team(x) & Attending(x,NbaFinals)) -> WonManyGames(x))",
      "(Team(BostonCeltics) & Lost(BostonCeltics,NbaFinals))",
      "all x.((Team(x) & Won(x,NbaFinals)) -> MoreIncome(x))",
      "all x.((Won(x,NbaFinals) | Lost(x,NbaFinals)) -> Attending(x,NbaFinals))"
    ],
    "goal": "HasMoreThanThirtyYearsOfHistory(BostonCeltics)"
  },
  {
    "id": 62,
    "flag": "success",
    "assumptions": [
      "(Team(GoldenStateWarriors) & From(GoldenStateWarriors,SanFrancisco))",
      "Won(GoldenStateWarriors,NbaFinals)",
      "all x.((Team(x) & Attending(x,NbaFinals)) -> WonManyGames(x))",
      "(Team(BostonCeltics) & Lost(BostonCeltics,NbaFinals))",
      "all x.((Team(x) & Won(x,NbaFinals)) -> MoreIncome(x))",
      "all x.((Won(x,NbaFinals) | Lost(x,NbaFinals)) -> Attending(x,NbaFinals))"
    ],
    "goal": "MoreIncome(GoldenStateWarriors)"
  },
  {
    "id": 620,
    "flag": "success",
    "assumptions": [
      "(Play(Maya,Violin) -> -CanInjure(Maya,Fingers))",
      "all x.(VolleyballPlayer(x) -> (CanInjure(Ankles) & CanInjure(Fingers) & CanInjure(Shoulder)))",
      "VolleyballPlayer(Maya)"
    ],
    "goal": "-Play(Maya,Violin)"
  },
  {
    "id": 1215,
    "flag": "success",
    "assumptions": [
      "all x.((Devices(x) & BelongTo(x,Company)) -> ConnectTo(x,GoogleHome))",
      "all x.((Devices(x) & With(x,Company)) -> BelongTo(x,Company))",
      "[[ERROR]]",
      "all x.((Devices(x) & BelongTo(x,Employee)) -> CanBeConnectedTo(x,Wifi))",
      "all x.((Devices(x) & ConnectTo(x,GoogleHome)) -> ControlledBy(x,Manager))",
      "all x.((Devices(x) & CanBeConnectedTo(x,Wifi)) -> EasyToOperate(x))",
      "all x.((Devices(x) & EasyToOperate(x)) -> ProducedAfterNewCTOAppointed(x,Company))",
      "(Devices(ModelXX) & -ProducedAfterNewCTOAppointed(ModelXX,Company))"
    ],
    "goal": "ControlledBy(x,Manager)"
  },
  {
    "id": 1216,
    "flag": "success",
    "assumptions": [
      "all x.((Devices(x) & BelongTo(x,Company)) -> ConnectTo(x,GoogleHome))",
      "all x.((Devices(x) & With(x,Company)) -> BelongTo(x,Company))",
      "[[ERROR]]",
      "all x.((Devices(x) & BelongTo(x,Employee)) -> CanBeConnectedTo(x,Wifi))",
      "all x.((Devices(x) & ConnectTo(x,GoogleHome)) -> ControlledBy(x,Manager))",
      "all x.((Devices(x) & CanBeConnectedTo(x,Wifi)) -> EasyToOperate(x))",
      "all x.((Devices(x) & EasyToOperate(x)) -> ProducedAfterNewCTOAppointed(x,Company))",
      "(Devices(ModelXX) & -ProducedAfterNewCTOAppointed(ModelXX,Company))"
    ],
    "goal": "((ProducedAfterNewCTOAppointed(ModelXX,TheCompany) & -ControlledBy(x,Manager)) | (-ProducedAfterNewCTOAppointed(ModelXX,TheCompany) & ControlledBy(x,Manager)))"
  },
  {
    "id": 1217,
    "flag": "success",
    "assumptions": [
      "all x.((Devices(x) & BelongTo(x,Company)) -> ConnectTo(x,GoogleHome))",
      "all x.((Devices(x) & With(x,Company)) -> BelongTo(x,Company))",
      "[[ERROR]]",
      "all x.((Devices(x) & BelongTo(x,Employee)) -> CanBeConnectedTo(x,Wifi))",
      "all x.((Devices(x) & ConnectTo(x,GoogleHome)) -> ControlledBy(x,Manager))",
      "all x.((Devices(x) & CanBeConnectedTo(x,Wifi)) -> EasyToOperate(x))",
      "all x.((Devices(x) & EasyToOperate(x)) -> ProducedAfterNewCTOAppointed(x,Company))",
      "(Devices(ModelXX) & -ProducedAfterNewCTOAppointed(ModelXX,Company))"
    ],
    "goal": "(-With(ModelXX,CompanyLogo) & -ControlledBy(x,Manager))"
  },
  {
    "id": 1218,
    "flag": "success",
    "assumptions": [
      "all x.((Devices(x) & BelongTo(x,Company)) -> ConnectTo(x,GoogleHome))",
      "all x.((Devices(x) & With(x,Company)) -> BelongTo(x,Company))",
      "[[ERROR]]",
      "all x.((Devices(x) & BelongTo(x,Employee)) -> CanBeConnectedTo(x,Wifi))",
      "all x.((Devices(x) & ConnectTo(x,GoogleHome)) -> ControlledBy(x,Manager))",
      "all x.((Devices(x) & CanBeConnectedTo(x,Wifi)) -> EasyToOperate(x))",
      "all x.((Devices(x) & EasyToOperate(x)) -> ProducedAfterNewCTOAppointed(x,Company))",
      "(Devices(ModelXX) & -ProducedAfterNewCTOAppointed(ModelXX,Company))"
    ],
    "goal": "((With(ModelXX,CompanyLogo) & -ControlledBy(x,Manager)) | (-With(ModelXX,CompanyLogo) & ControlledBy(x,Manager)))"
  },
  {
    "id": 710,
    "flag": "success",
    "assumptions": [
      "all x.(CDPlayer(x) -> DelicateMechanism(x))",
      "all x.(DelicateMechanism(x) -> -(Toy(x) & SuitableFor(x,Children)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 916,
    "flag": "success",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) & Mammal(Jumbo)))",
      "(((Sleepy(Jumbo) -> BabyElephant(Jumbo)) & -Mammal(Jumbo)) | (-(Sleepy(Jumbo) -> BabyElephant(Jumbo)) & Mammal(Jumbo)))"
    ],
    "goal": "Sleepy(Jumbo)"
  },
  {
    "id": 917,
    "flag": "success",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) & Mammal(Jumbo)))",
      "(((Sleepy(Jumbo) -> BabyElephant(Jumbo)) & -Mammal(Jumbo)) | (-(Sleepy(Jumbo) -> BabyElephant(Jumbo)) & Mammal(Jumbo)))"
    ],
    "goal": "-Sleepy(Jumbo)"
  },
  {
    "id": 918,
    "flag": "success",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) & Mammal(Jumbo)))",
      "(((Sleepy(Jumbo) -> BabyElephant(Jumbo)) & -Mammal(Jumbo)) | (-(Sleepy(Jumbo) -> BabyElephant(Jumbo)) & Mammal(Jumbo)))"
    ],
    "goal": "LivingBeing(Jumbo)"
  },
  {
    "id": 919,
    "flag": "success",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) & Mammal(Jumbo)))",
      "(((Sleepy(Jumbo) -> BabyElephant(Jumbo)) & -Mammal(Jumbo)) | (-(Sleepy(Jumbo) -> BabyElephant(Jumbo)) & Mammal(Jumbo)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 920,
    "flag": "success",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) & Mammal(Jumbo)))",
      "(((Sleepy(Jumbo) -> BabyElephant(Jumbo)) & -Mammal(Jumbo)) | (-(Sleepy(Jumbo) -> BabyElephant(Jumbo)) & Mammal(Jumbo)))"
    ],
    "goal": "-((Sleepy(Jumbo) & -Elephant(Jumbo)) | (-Sleepy(Jumbo) & Elephant(Jumbo)))"
  },
  {
    "id": 1286,
    "flag": "success",
    "assumptions": [
      "all x.((Planet(x) & In(x,SolarSystem)) -> -RelyOnToGenerate(x,NuclearFusion,Light))",
      "all x.((Star(x) & In(x,SolarSystem)) -> RelyOnToGenerate(x,NuclearFusion,Light))",
      "all x.((CelestialBody(x) & In(x,SolarSystem) & GreaterThan(x,SolarMass,0point08)) -> Star(x))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1287,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1288,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 936,
    "flag": "success",
    "assumptions": [
      "all x.(MaxListenTo(x) -> ((ClassicalMusic(x) & -Rap(x)) | (-ClassicalMusic(x) & Rap(x))))",
      "all x.(((MaxListenTo(x) & ClassicalMusic(x)) -> Song(x)) & From(x,12thCentury))",
      "all x.(((MaxListenTo(x) & Rap(x)) -> Song(x)) & By(x,KanyeWest))",
      "all x.(((Song(x) & By(x,KanyeWest)) -> Song(x)) & FullOfLyrics(x))",
      "all x.((Song(x) & FullOfLyrics(x)) -> NeedToBeWrittenWith(x,Words))",
      "-(ClassicalMusic(AsItWasByHarryStyles) & Song(AsItWasByHarryStyles) & From(AsItWasByHarryStyles,12thCentury))",
      "MaxListenTo(AsItWasByHarryStyles)"
    ],
    "goal": "NeedToBeWrittenWith(AsItWasByHarryStyles,Words)"
  },
  {
    "id": 937,
    "flag": "success",
    "assumptions": [
      "all x.(MaxListenTo(x) -> ((ClassicalMusic(x) & -Rap(x)) | (-ClassicalMusic(x) & Rap(x))))",
      "all x.(((MaxListenTo(x) & ClassicalMusic(x)) -> Song(x)) & From(x,12thCentury))",
      "all x.(((MaxListenTo(x) & Rap(x)) -> Song(x)) & By(x,KanyeWest))",
      "all x.(((Song(x) & By(x,KanyeWest)) -> Song(x)) & FullOfLyrics(x))",
      "all x.((Song(x) & FullOfLyrics(x)) -> NeedToBeWrittenWith(x,Words))",
      "-(ClassicalMusic(AsItWasByHarryStyles) & Song(AsItWasByHarryStyles) & From(AsItWasByHarryStyles,12thCentury))",
      "MaxListenTo(AsItWasByHarryStyles)"
    ],
    "goal": "(Song(AsItWasByHarryStyles) & From(AsItWasByHarryStyles,12thCentury))"
  },
  {
    "id": 938,
    "flag": "success",
    "assumptions": [
      "all x.(MaxListenTo(x) -> ((ClassicalMusic(x) & -Rap(x)) | (-ClassicalMusic(x) & Rap(x))))",
      "all x.(((MaxListenTo(x) & ClassicalMusic(x)) -> Song(x)) & From(x,12thCentury))",
      "all x.(((MaxListenTo(x) & Rap(x)) -> Song(x)) & By(x,KanyeWest))",
      "all x.(((Song(x) & By(x,KanyeWest)) -> Song(x)) & FullOfLyrics(x))",
      "all x.((Song(x) & FullOfLyrics(x)) -> NeedToBeWrittenWith(x,Words))",
      "-(ClassicalMusic(AsItWasByHarryStyles) & Song(AsItWasByHarryStyles) & From(AsItWasByHarryStyles,12thCentury))",
      "MaxListenTo(AsItWasByHarryStyles)"
    ],
    "goal": "-(Song(AsItWasByHarryStyles) & By(AsItWasByHarryStyles,KanyeWest) & NeedToBeWrittenWith(AsItWasByHarryStyles,Words))"
  },
  {
    "id": 113,
    "flag": "success",
    "assumptions": [
      "(Produce(WhiteTown,YourWoman) & OnePersonBand(WhiteTown))",
      "Peak(YourWoman,UKSinglesChart)",
      "[[ERROR]]",
      "(Peak(YourWoman,Iceland) & Peak(YourWoman,Israel) & Peak(YourWoman,Spain))"
    ],
    "goal": "Popular(YourWoman)"
  },
  {
    "id": 114,
    "flag": "success",
    "assumptions": [
      "(Produce(WhiteTown,YourWoman) & OnePersonBand(WhiteTown))",
      "Peak(YourWoman,UKSinglesChart)",
      "[[ERROR]]",
      "(Peak(YourWoman,Iceland) & Peak(YourWoman,Israel) & Peak(YourWoman,Spain))"
    ],
    "goal": "all x.(Produce(WhiteTown,x) -> -Popular(x))"
  },
  {
    "id": 115,
    "flag": "success",
    "assumptions": [
      "(Produce(WhiteTown,YourWoman) & OnePersonBand(WhiteTown))",
      "Peak(YourWoman,UKSinglesChart)",
      "[[ERROR]]",
      "(Peak(YourWoman,Iceland) & Peak(YourWoman,Israel) & Peak(YourWoman,Spain))"
    ],
    "goal": "Successful(WhiteTown)"
  },
  {
    "id": 996,
    "flag": "success",
    "assumptions": [
      "all x.((Function(x) & RepresentOn(x,StraightLine,CoordinatePlane)) -> LinearFunction(x))",
      "all x.(LinearFunction(x) -> -NonConvexFunction(x))",
      "all x.(((Function(x) -> NonConvexFunction(x)) & -ConvexFunction(x)) | (-(Function(x) -> NonConvexFunction(x)) & ConvexFunction(x)))",
      "all x.(QuasiConvexFunction(x) -> RealValuedFunction(x))",
      "all x.(ConvexFunction(x) -> QuasiConvexFunction(x))",
      "Function(MaximumOfQuasiConvexFunction)",
      "((Function(MaximumOfQuasiConvexFunction) & RepresentOn(MaximumOfQuasiConvexFunction,StraightLine,CoordinatePlane)) | ConvexFunction(MaximumOfQuasiConvexFunction) | -NonConvexFunction(MaximumOfQuasiConvexFunction))"
    ],
    "goal": "(Function(MaximumOfQuasiConvexFunction) & RepresentOn(MaximumOfQuasiConvexFunction,StraightLine,CoordinatePlane))"
  },
  {
    "id": 997,
    "flag": "success",
    "assumptions": [
      "all x.((Function(x) & RepresentOn(x,StraightLine,CoordinatePlane)) -> LinearFunction(x))",
      "all x.(LinearFunction(x) -> -NonConvexFunction(x))",
      "all x.(((Function(x) -> NonConvexFunction(x)) & -ConvexFunction(x)) | (-(Function(x) -> NonConvexFunction(x)) & ConvexFunction(x)))",
      "all x.(QuasiConvexFunction(x) -> RealValuedFunction(x))",
      "all x.(ConvexFunction(x) -> QuasiConvexFunction(x))",
      "Function(MaximumOfQuasiConvexFunction)",
      "((Function(MaximumOfQuasiConvexFunction) & RepresentOn(MaximumOfQuasiConvexFunction,StraightLine,CoordinatePlane)) | ConvexFunction(MaximumOfQuasiConvexFunction) | -NonConvexFunction(MaximumOfQuasiConvexFunction))"
    ],
    "goal": "-RealValuedFunction(MaximumOfQuasiConvexFunction)"
  },
  {
    "id": 998,
    "flag": "success",
    "assumptions": [
      "all x.((Function(x) & RepresentOn(x,StraightLine,CoordinatePlane)) -> LinearFunction(x))",
      "all x.(LinearFunction(x) -> -NonConvexFunction(x))",
      "all x.(((Function(x) -> NonConvexFunction(x)) & -ConvexFunction(x)) | (-(Function(x) -> NonConvexFunction(x)) & ConvexFunction(x)))",
      "all x.(QuasiConvexFunction(x) -> RealValuedFunction(x))",
      "all x.(ConvexFunction(x) -> QuasiConvexFunction(x))",
      "Function(MaximumOfQuasiConvexFunction)",
      "((Function(MaximumOfQuasiConvexFunction) & RepresentOn(MaximumOfQuasiConvexFunction,StraightLine,CoordinatePlane)) | ConvexFunction(MaximumOfQuasiConvexFunction) | -NonConvexFunction(MaximumOfQuasiConvexFunction))"
    ],
    "goal": "(QuasiConvexFunction(MaximumOfQuasiConvexFunction) | -RealValuedFunction(MaximumOfQuasiConvexFunction))"
  },
  {
    "id": 540,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameScore(x,y) & During(RegularTime) & During(ExtraTime)) -> PlayPenalty(x,y))",
      "(SoccerTeam(RealMadrid) & SoccerTeam(AtleticoMadrid) & SameScore(RealMadrid,AtleticoMadrid) & During(RegularTime))",
      "(SoccerTeam(RealMadrid) & SoccerTeam(AtleticoMadrid) & SameScore(RealMadrid,AtleticoMadrid) & During(ExtraTime))"
    ],
    "goal": "PlayPenalty(RealMadrid,AtleticoMadrid)"
  },
  {
    "id": 541,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameScore(x,y) & During(RegularTime) & During(ExtraTime)) -> PlayPenalty(x,y))",
      "(SoccerTeam(RealMadrid) & SoccerTeam(AtleticoMadrid) & SameScore(RealMadrid,AtleticoMadrid) & During(RegularTime))",
      "(SoccerTeam(RealMadrid) & SoccerTeam(AtleticoMadrid) & SameScore(RealMadrid,AtleticoMadrid) & During(ExtraTime))"
    ],
    "goal": "-PlayPenalty(RealMadrid,AtleticoMadrid)"
  },
  {
    "id": 35,
    "flag": "success",
    "assumptions": [
      "(BasedIn(System7,Uk) & ElectronicDanceMusicBand(System7))",
      "(Form(Stevehillage,System7) & Form(Miquettegiraudy,System7))",
      "(FormerMemberOf(Stevehillage,Gong) & FormerMemberOf(Miquettegiraudy,Gong))",
      "all x.(ElectronicDanceMusicBand(x) -> Band(x))",
      "exists x.(ClubSingle(x) & Release(System7,x))",
      "all x.(ClubSingle(x) -> -Single(x))"
    ],
    "goal": "exists x.(Form(x,System7) & FormerMemberOf(x,Gong))"
  },
  {
    "id": 36,
    "flag": "success",
    "assumptions": [
      "(BasedIn(System7,Uk) & ElectronicDanceMusicBand(System7))",
      "(Form(Stevehillage,System7) & Form(Miquettegiraudy,System7))",
      "(FormerMemberOf(Stevehillage,Gong) & FormerMemberOf(Miquettegiraudy,Gong))",
      "all x.(ElectronicDanceMusicBand(x) -> Band(x))",
      "exists x.(ClubSingle(x) & Release(System7,x))",
      "all x.(ClubSingle(x) -> -Single(x))"
    ],
    "goal": "exists x.(Single(x) & Release(System7,x))"
  },
  {
    "id": 37,
    "flag": "success",
    "assumptions": [
      "(BasedIn(System7,Uk) & ElectronicDanceMusicBand(System7))",
      "(Form(Stevehillage,System7) & Form(Miquettegiraudy,System7))",
      "(FormerMemberOf(Stevehillage,Gong) & FormerMemberOf(Miquettegiraudy,Gong))",
      "all x.(ElectronicDanceMusicBand(x) -> Band(x))",
      "exists x.(ClubSingle(x) & Release(System7,x))",
      "all x.(ClubSingle(x) -> -Single(x))"
    ],
    "goal": "-Band(System7)"
  },
  {
    "id": 542,
    "flag": "success",
    "assumptions": [
      "all x.((Model(x) & Summarization(x) & OnlyUseInputDocument(x)) -> Faithful(x))",
      "all x.(((Model(x) & Extractive(x)) -> Model(x)) & Summarization(x))",
      "all x.((Model(x) & Extractive(x)) -> OnlyUseInputDocument(x))"
    ],
    "goal": "all x.((Model(x) & Extractive(x)) -> Faithful(x))"
  },
  {
    "id": 543,
    "flag": "success",
    "assumptions": [
      "all x.((Model(x) & Summarization(x) & OnlyUseInputDocument(x)) -> Faithful(x))",
      "all x.(((Model(x) & Extractive(x)) -> Model(x)) & Summarization(x))",
      "all x.((Model(x) & Extractive(x)) -> OnlyUseInputDocument(x))"
    ],
    "goal": "exists x.(Model(x) & Extractive(x) & -Faithful(x))"
  },
  {
    "id": 984,
    "flag": "success",
    "assumptions": [
      "all x.((RobinsFriends(x) & Practice(x,CodingQuestion)) -> -StudyingToGoToToBecome(x,MedicalSchool,Doctor))",
      "all x.((RobinsFriends(x) & WantToWorkIn(x,SoftwareEngineeringIndustry)) -> PracticeCodingQuestions(x))",
      "all x.((RobinsFriends(x) & Enjoy(x,HealthcareField) & WantToHelp(x,PeopleWithMedicalIssue)) -> StudyingToGoToToBecome(x,MedicalSchool,Doctor))",
      "[[ERROR]]",
      "[[ERROR]]",
      "RobinsFriends(Mark)",
      "[[ERROR]]"
    ],
    "goal": "(RobinsFriends(Mark) & StudyHard(Mark))"
  },
  {
    "id": 985,
    "flag": "success",
    "assumptions": [
      "all x.((RobinsFriends(x) & Practice(x,CodingQuestion)) -> -StudyingToGoToToBecome(x,MedicalSchool,Doctor))",
      "all x.((RobinsFriends(x) & WantToWorkIn(x,SoftwareEngineeringIndustry)) -> PracticeCodingQuestions(x))",
      "all x.((RobinsFriends(x) & Enjoy(x,HealthcareField) & WantToHelp(x,PeopleWithMedicalIssue)) -> StudyingToGoToToBecome(x,MedicalSchool,Doctor))",
      "[[ERROR]]",
      "[[ERROR]]",
      "RobinsFriends(Mark)",
      "[[ERROR]]"
    ],
    "goal": "(RobinsFriends(Mark) & Practice(Mark,CodingQuestion) & WantToWorkIn(Mark,SoftwareEngineeringIndustry))"
  },
  {
    "id": 986,
    "flag": "success",
    "assumptions": [
      "all x.((RobinsFriends(x) & Practice(x,CodingQuestion)) -> -StudyingToGoToToBecome(x,MedicalSchool,Doctor))",
      "all x.((RobinsFriends(x) & WantToWorkIn(x,SoftwareEngineeringIndustry)) -> PracticeCodingQuestions(x))",
      "all x.((RobinsFriends(x) & Enjoy(x,HealthcareField) & WantToHelp(x,PeopleWithMedicalIssue)) -> StudyingToGoToToBecome(x,MedicalSchool,Doctor))",
      "[[ERROR]]",
      "[[ERROR]]",
      "RobinsFriends(Mark)",
      "[[ERROR]]"
    ],
    "goal": "(RobinsFriends(Mark) & -(Practice(Mark,CodingQuestion) | WantToWorkIn(Mark,SoftwareEngineeringIndustry)))"
  },
  {
    "id": 1023,
    "flag": "success",
    "assumptions": [
      "all x.((WorkAt(x,JesssCompany) & GoToSpafrequently(x)) -> -(Miserly(x) & NeedToSave(x,ALargePortionOfIncome)))",
      "all x.(((WorkAt(x,JesssCompany) -> Miserly(x)) & NeedToSave(x,ALargePortionOfIncome) & -SpendFrivolously(x,ALotOfMoney)) | (-((WorkAt(x,JesssCompany) -> Miserly(x)) & NeedToSave(x,ALargePortionOfIncome)) & SpendFrivolously(x,ALotOfMoney)))",
      "all x.(((WorkAt(x,JesssCompany) & SpendFrivolously(x,ALotOfMoney)) -> Value(x,QualityManufacturing)) & Value(x,LuxuryItem))",
      "all x.((WorkAt(x,JesssCompany) & Value(x,QualityManufacturing) & Value(x,LuxuryItem)) -> Enjoy(x,Shopping,MaterialisticItem))",
      "WorkAt(Thomas,JesssCompany)",
      "(-(Miserly(Thomas) & NeedToSave(Thomas,ALargePortionOfIncome)) -> -(Value(Thomas,QualityManufacturing) & Value(Thomas,LuxuryItem)))",
      "((Value(Thomas,QualityManufacturing) & Value(Thomas,LuxuryItem)) | -(Miserly(x) & NeedToSave(x,ALargePortionOfIncome)))"
    ],
    "goal": "SpendFrivolously(Thomas,ALotOfMoney)"
  },
  {
    "id": 1024,
    "flag": "success",
    "assumptions": [
      "all x.((WorkAt(x,JesssCompany) & GoToSpafrequently(x)) -> -(Miserly(x) & NeedToSave(x,ALargePortionOfIncome)))",
      "all x.(((WorkAt(x,JesssCompany) -> Miserly(x)) & NeedToSave(x,ALargePortionOfIncome) & -SpendFrivolously(x,ALotOfMoney)) | (-((WorkAt(x,JesssCompany) -> Miserly(x)) & NeedToSave(x,ALargePortionOfIncome)) & SpendFrivolously(x,ALotOfMoney)))",
      "all x.(((WorkAt(x,JesssCompany) & SpendFrivolously(x,ALotOfMoney)) -> Value(x,QualityManufacturing)) & Value(x,LuxuryItem))",
      "all x.((WorkAt(x,JesssCompany) & Value(x,QualityManufacturing) & Value(x,LuxuryItem)) -> Enjoy(x,Shopping,MaterialisticItem))",
      "WorkAt(Thomas,JesssCompany)",
      "(-(Miserly(Thomas) & NeedToSave(Thomas,ALargePortionOfIncome)) -> -(Value(Thomas,QualityManufacturing) & Value(Thomas,LuxuryItem)))",
      "((Value(Thomas,QualityManufacturing) & Value(Thomas,LuxuryItem)) | -(Miserly(x) & NeedToSave(x,ALargePortionOfIncome)))"
    ],
    "goal": "((Enjoy(Thomas,Shopping,MaterialisticItem) & -GoToSpaFrequently(Thomas)) | (-Enjoy(Thomas,Shopping,MaterialisticItem) & GoToSpaFrequently(Thomas)))"
  },
  {
    "id": 1025,
    "flag": "success",
    "assumptions": [
      "all x.((WorkAt(x,JesssCompany) & GoToSpafrequently(x)) -> -(Miserly(x) & NeedToSave(x,ALargePortionOfIncome)))",
      "all x.(((WorkAt(x,JesssCompany) -> Miserly(x)) & NeedToSave(x,ALargePortionOfIncome) & -SpendFrivolously(x,ALotOfMoney)) | (-((WorkAt(x,JesssCompany) -> Miserly(x)) & NeedToSave(x,ALargePortionOfIncome)) & SpendFrivolously(x,ALotOfMoney)))",
      "all x.(((WorkAt(x,JesssCompany) & SpendFrivolously(x,ALotOfMoney)) -> Value(x,QualityManufacturing)) & Value(x,LuxuryItem))",
      "all x.((WorkAt(x,JesssCompany) & Value(x,QualityManufacturing) & Value(x,LuxuryItem)) -> Enjoy(x,Shopping,MaterialisticItem))",
      "WorkAt(Thomas,JesssCompany)",
      "(-(Miserly(Thomas) & NeedToSave(Thomas,ALargePortionOfIncome)) -> -(Value(Thomas,QualityManufacturing) & Value(Thomas,LuxuryItem)))",
      "((Value(Thomas,QualityManufacturing) & Value(Thomas,LuxuryItem)) | -(Miserly(x) & NeedToSave(x,ALargePortionOfIncome)))"
    ],
    "goal": "(((Enjoy(Thomas,Shopping,MaterialisticItem) & -GoToSpaFrequently(Thomas)) | (-Enjoy(Thomas,Shopping,MaterialisticItem) & GoToSpaFrequently(Thomas))) -> -((Value(x,QualityManufacturing) & Value(x,LuxuryItem)) | GoToSpaFrequently(Thomas)))"
  },
  {
    "id": 624,
    "flag": "success",
    "assumptions": [
      "AlbumsReleased(Phoenix,6)",
      "(Album(Wolfgangamadeusphoenix) & IsAlbumOf(Wolfgangamadeusphoenix,Phoenix) & SoldOver(Wolfgangamadeusphoenix,500,000))",
      "all x.(((Album(x) | Single(x)) & SoldOver(x,500,000)) -> CertifiedGold(x))",
      "(Single(1901) & From(1901,Wolfgangamadeusphoenix) & By(1901,Phoenix))",
      "SoldOver(L1901,400,000)"
    ],
    "goal": "CertifiedGold(WolfgangamAdeusPhoenix)"
  },
  {
    "id": 625,
    "flag": "success",
    "assumptions": [
      "AlbumsReleased(Phoenix,6)",
      "(Album(Wolfgangamadeusphoenix) & IsAlbumOf(Wolfgangamadeusphoenix,Phoenix) & SoldOver(Wolfgangamadeusphoenix,500,000))",
      "all x.(((Album(x) | Single(x)) & SoldOver(x,500,000)) -> CertifiedGold(x))",
      "(Single(1901) & From(1901,Wolfgangamadeusphoenix) & By(1901,Phoenix))",
      "SoldOver(L1901,400,000)"
    ],
    "goal": "CertifiedGold(1901)"
  },
  {
    "id": 11,
    "flag": "success",
    "assumptions": [
      "((Superhero(PeterParker) & -Civilian(PeterParker)) | (-Superhero(PeterParker) & Civilian(PeterParker)))",
      "Destroyer(TheHulk)",
      "(Angry(TheHulk) -> WakesUp(TheHulk))",
      "(WakesUp(TheHulk) -> Breaks(TheHulk,Bridge))",
      "God(Thor)",
      "(Happy(Thor) -> Breaks(Thor,Bridge))",
      "all x.(God(x) -> -Destroyer(x))",
      "(Superhero(Peter) -> Wears(Peter,Uniform))",
      "all x.((Destroyer(x) & Breaks(x,Bridge)) -> -Civilian(Peter))",
      "(Happy(Thor) -> Angry(TheHulk))"
    ],
    "goal": "(-WakesUp(TheHulk) -> -Happy(Thor))"
  },
  {
    "id": 12,
    "flag": "success",
    "assumptions": [
      "((Superhero(PeterParker) & -Civilian(PeterParker)) | (-Superhero(PeterParker) & Civilian(PeterParker)))",
      "Destroyer(TheHulk)",
      "(Angry(TheHulk) -> WakesUp(TheHulk))",
      "(WakesUp(TheHulk) -> Breaks(TheHulk,Bridge))",
      "God(Thor)",
      "(Happy(Thor) -> Breaks(Thor,Bridge))",
      "all x.(God(x) -> -Destroyer(x))",
      "(Superhero(Peter) -> Wears(Peter,Uniform))",
      "all x.((Destroyer(x) & Breaks(x,Bridge)) -> -Civilian(Peter))",
      "(Happy(Thor) -> Angry(TheHulk))"
    ],
    "goal": "(Happy(Thor) -> Wears(PeterParker,Uniform))"
  },
  {
    "id": 13,
    "flag": "success",
    "assumptions": [
      "((Superhero(PeterParker) & -Civilian(PeterParker)) | (-Superhero(PeterParker) & Civilian(PeterParker)))",
      "Destroyer(TheHulk)",
      "(Angry(TheHulk) -> WakesUp(TheHulk))",
      "(WakesUp(TheHulk) -> Breaks(TheHulk,Bridge))",
      "God(Thor)",
      "(Happy(Thor) -> Breaks(Thor,Bridge))",
      "all x.(God(x) -> -Destroyer(x))",
      "(Superhero(Peter) -> Wears(Peter,Uniform))",
      "all x.((Destroyer(x) & Breaks(x,Bridge)) -> -Civilian(Peter))",
      "(Happy(Thor) -> Angry(TheHulk))"
    ],
    "goal": "(-Happy(Thor) -> -Breaks(Thor,Bridge))"
  },
  {
    "id": 258,
    "flag": "success",
    "assumptions": [
      "(Medication(Diethylcarbamazine) & DiscoversIn(Diethylcarbamazine,Yr1947))",
      "Treats(Diethylcarbamazine,RiverBlindness)",
      "PreferredTreatmentFor(RiverBlindness,Ivermectin)",
      "-Is(Diethylcarbamazine,Ivermectin)"
    ],
    "goal": "-PreferredTreatmentFor(RiverBlindness,Diethylcarbamazine)"
  },
  {
    "id": 259,
    "flag": "success",
    "assumptions": [
      "(Medication(Diethylcarbamazine) & DiscoversIn(Diethylcarbamazine,Yr1947))",
      "Treats(Diethylcarbamazine,RiverBlindness)",
      "PreferredTreatmentFor(RiverBlindness,Ivermectin)",
      "-Is(Diethylcarbamazine,Ivermectin)"
    ],
    "goal": "Treats(Diethylcarbamazine,RiverBlindness)"
  },
  {
    "id": 260,
    "flag": "success",
    "assumptions": [
      "(Medication(Diethylcarbamazine) & DiscoversIn(Diethylcarbamazine,Yr1947))",
      "Treats(Diethylcarbamazine,RiverBlindness)",
      "PreferredTreatmentFor(RiverBlindness,Ivermectin)",
      "-Is(Diethylcarbamazine,Ivermectin)"
    ],
    "goal": "Treats(Diethylcarbamazine,Filariasis)"
  },
  {
    "id": 1057,
    "flag": "success",
    "assumptions": [
      "all x.(PrimeNumber(x) -> NaturalNumber(x))",
      "all x.(Integer(x) -> RealNumber(x))",
      "all x.(RealNumber(x) -> ComplexNumber(x))",
      "(PrimeNumber(One) | NaturalNumber(One))",
      "(-ComplexNumber(One) -> (PrimeNumber(One) & Integer(One)))"
    ],
    "goal": "RealNumber(One)"
  },
  {
    "id": 1058,
    "flag": "success",
    "assumptions": [
      "all x.(PrimeNumber(x) -> NaturalNumber(x))",
      "all x.(Integer(x) -> RealNumber(x))",
      "all x.(RealNumber(x) -> ComplexNumber(x))",
      "(PrimeNumber(One) | NaturalNumber(One))",
      "(-ComplexNumber(One) -> (PrimeNumber(One) & Integer(One)))"
    ],
    "goal": "(PrimeNumber(One) & NaturalNumber(One))"
  },
  {
    "id": 1059,
    "flag": "success",
    "assumptions": [
      "all x.(PrimeNumber(x) -> NaturalNumber(x))",
      "all x.(Integer(x) -> RealNumber(x))",
      "all x.(RealNumber(x) -> ComplexNumber(x))",
      "(PrimeNumber(One) | NaturalNumber(One))",
      "(-ComplexNumber(One) -> (PrimeNumber(One) & Integer(One)))"
    ],
    "goal": "((PrimeNumber(One) & -NaturalNumber(One)) | (-PrimeNumber(One) & NaturalNumber(One)))"
  },
  {
    "id": 1035,
    "flag": "success",
    "assumptions": [
      "all x.(((Disease(x) & Require(x,MedicalDiagnosis)) -> Require(LabTest,x)) | Require(Imaging,x))",
      "all x.(RareDisease(x) -> Require(x,MedicalDiagnosis))",
      "all x.((Disease(x) & Mild(x)) -> -(RequiredFor(LabTest,x) | RequiredFor(Imaging,x)))",
      "all x.(BloodCancer(x) -> RareDiseases(x))",
      "all x.((Disease(x) & Leukemia(x)) -> BloodCancer(x))",
      "(Disease(BladderCancer) & (BloodCancer(BladderCancer) | Leukemia(BladderCancer)))"
    ],
    "goal": "Mild(BladderCancer)"
  },
  {
    "id": 1036,
    "flag": "success",
    "assumptions": [
      "all x.(((Disease(x) & Require(x,MedicalDiagnosis)) -> Require(LabTest,x)) | Require(Imaging,x))",
      "all x.(RareDisease(x) -> Require(x,MedicalDiagnosis))",
      "all x.((Disease(x) & Mild(x)) -> -(RequiredFor(LabTest,x) | RequiredFor(Imaging,x)))",
      "all x.(BloodCancer(x) -> RareDiseases(x))",
      "all x.((Disease(x) & Leukemia(x)) -> BloodCancer(x))",
      "(Disease(BladderCancer) & (BloodCancer(BladderCancer) | Leukemia(BladderCancer)))"
    ],
    "goal": "Leukemia(BladderCancer)"
  },
  {
    "id": 1037,
    "flag": "success",
    "assumptions": [
      "all x.(((Disease(x) & Require(x,MedicalDiagnosis)) -> Require(LabTest,x)) | Require(Imaging,x))",
      "all x.(RareDisease(x) -> Require(x,MedicalDiagnosis))",
      "all x.((Disease(x) & Mild(x)) -> -(RequiredFor(LabTest,x) | RequiredFor(Imaging,x)))",
      "all x.(BloodCancer(x) -> RareDiseases(x))",
      "all x.((Disease(x) & Leukemia(x)) -> BloodCancer(x))",
      "(Disease(BladderCancer) & (BloodCancer(BladderCancer) | Leukemia(BladderCancer)))"
    ],
    "goal": "((RareDisease(BladderCancer) & -Mild(BladderCancer)) | (-RareDisease(BladderCancer) & Mild(BladderCancer)))"
  },
  {
    "id": 1044,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(-RareEarthElement(x) -> -ScarceIn(x,China))",
      "all x.((-RareEarthElement(x) & -RareEarthElement(x)) | (--RareEarthElement(x) & RareEarthElement(x)))",
      "all x.(RareEarthElement(x) -> UsedIn(x,Industry))",
      "all x.(RareEarthElement(x) -> EssentialFor(x,Electronics))",
      "-((-RareEarthElement(Lithium) & -EssentialFor(Lithium,Electronics)) | (--RareEarthElement(Lithium) & EssentialFor(Lithium,Electronics)))"
    ],
    "goal": "RareEarthElement(Lithium)"
  },
  {
    "id": 1045,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(-RareEarthElement(x) -> -ScarceIn(x,China))",
      "all x.((-RareEarthElement(x) & -RareEarthElement(x)) | (--RareEarthElement(x) & RareEarthElement(x)))",
      "all x.(RareEarthElement(x) -> UsedIn(x,Industry))",
      "all x.(RareEarthElement(x) -> EssentialFor(x,Electronics))",
      "-((-RareEarthElement(Lithium) & -EssentialFor(Lithium,Electronics)) | (--RareEarthElement(Lithium) & EssentialFor(Lithium,Electronics)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1046,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(-RareEarthElement(x) -> -ScarceIn(x,China))",
      "all x.((-RareEarthElement(x) & -RareEarthElement(x)) | (--RareEarthElement(x) & RareEarthElement(x)))",
      "all x.(RareEarthElement(x) -> UsedIn(x,Industry))",
      "all x.(RareEarthElement(x) -> EssentialFor(x,Electronics))",
      "-((-RareEarthElement(Lithium) & -EssentialFor(Lithium,Electronics)) | (--RareEarthElement(Lithium) & EssentialFor(Lithium,Electronics)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 858,
    "flag": "success",
    "assumptions": [
      "all x.(-CleanOften(x,Home) -> -Have(x,TidyHouse))",
      "all x.(-Prioritize(x,Cleaning) -> -CleanOften(x,Home))",
      "all x.((Hire(x,Maid) | Hire(x,CleaningService)) -> Have(x,TidyHouse))",
      "all x.(-CareAbout(x,Cleanliness) -> -Prioritize(x,Cleaning))",
      "[[ERROR]]"
    ],
    "goal": "-CareAbout(Jack,Cleanliness)"
  },
  {
    "id": 859,
    "flag": "success",
    "assumptions": [
      "all x.(-CleanOften(x,Home) -> -Have(x,TidyHouse))",
      "all x.(-Prioritize(x,Cleaning) -> -CleanOften(x,Home))",
      "all x.((Hire(x,Maid) | Hire(x,CleaningService)) -> Have(x,TidyHouse))",
      "all x.(-CareAbout(x,Cleanliness) -> -Prioritize(x,Cleaning))",
      "[[ERROR]]"
    ],
    "goal": "CareAbout(Jack,Cleanliness)"
  },
  {
    "id": 860,
    "flag": "success",
    "assumptions": [
      "all x.(-CleanOften(x,Home) -> -Have(x,TidyHouse))",
      "all x.(-Prioritize(x,Cleaning) -> -CleanOften(x,Home))",
      "all x.((Hire(x,Maid) | Hire(x,CleaningService)) -> Have(x,TidyHouse))",
      "all x.(-CareAbout(x,Cleanliness) -> -Prioritize(x,Cleaning))",
      "[[ERROR]]"
    ],
    "goal": "Have(Jack,TidyHouse)"
  },
  {
    "id": 861,
    "flag": "success",
    "assumptions": [
      "all x.(-CleanOften(x,Home) -> -Have(x,TidyHouse))",
      "all x.(-Prioritize(x,Cleaning) -> -CleanOften(x,Home))",
      "all x.((Hire(x,Maid) | Hire(x,CleaningService)) -> Have(x,TidyHouse))",
      "all x.(-CareAbout(x,Cleanliness) -> -Prioritize(x,Cleaning))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 862,
    "flag": "success",
    "assumptions": [
      "all x.(-CleanOften(x,Home) -> -Have(x,TidyHouse))",
      "all x.(-Prioritize(x,Cleaning) -> -CleanOften(x,Home))",
      "all x.((Hire(x,Maid) | Hire(x,CleaningService)) -> Have(x,TidyHouse))",
      "all x.(-CareAbout(x,Cleanliness) -> -Prioritize(x,Cleaning))",
      "[[ERROR]]"
    ],
    "goal": "(-Prioritize(Jack,Cleaning) | -CareAbout(Jack,Cleanliness))"
  },
  {
    "id": 722,
    "flag": "success",
    "assumptions": [
      "(-Falling(Bottle) -> ((Upright(Bottle) & -ToppledOver(Bottle)) | (-Upright(Bottle) & ToppledOver(Bottle))))",
      "(-Falling(Bottle) -> -Upright(Bottle))"
    ],
    "goal": "(-Falling(Bottle) -> ToppleOver(Bottle))"
  },
  {
    "id": 952,
    "flag": "success",
    "assumptions": [
      "all x.(ChooseWhatToDoWith(x,Time) -> FlexibleSchedule(x))",
      "all x.(Have(x,LotsOfFreetime) -> ChooseWhatToDoWith(x,Time))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Hardworking(x) & HaveFor(x,HighAmbition,Future) & HaveFor(x,Goal,Future)) -> -ShortSighted(x))",
      "-((Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future) & -FlexibleSchedule(John)) | (-(Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future)) & FlexibleSchedule(John)))"
    ],
    "goal": "Organized(John)"
  },
  {
    "id": 953,
    "flag": "success",
    "assumptions": [
      "all x.(ChooseWhatToDoWith(x,Time) -> FlexibleSchedule(x))",
      "all x.(Have(x,LotsOfFreetime) -> ChooseWhatToDoWith(x,Time))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Hardworking(x) & HaveFor(x,HighAmbition,Future) & HaveFor(x,Goal,Future)) -> -ShortSighted(x))",
      "-((Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future) & -FlexibleSchedule(John)) | (-(Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future)) & FlexibleSchedule(John)))"
    ],
    "goal": "ChooseWhatToDoWith(John,Time)"
  },
  {
    "id": 954,
    "flag": "success",
    "assumptions": [
      "all x.(ChooseWhatToDoWith(x,Time) -> FlexibleSchedule(x))",
      "all x.(Have(x,LotsOfFreetime) -> ChooseWhatToDoWith(x,Time))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.((Hardworking(x) & HaveFor(x,HighAmbition,Future) & HaveFor(x,Goal,Future)) -> -ShortSighted(x))",
      "-((Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future) & -FlexibleSchedule(John)) | (-(Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future)) & FlexibleSchedule(John)))"
    ],
    "goal": "((Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future) & -ShortSighted(John)) | (-(Hardworking(John) & HaveFor(John,HighAmbition,Future) & HaveFor(John,Goal,Future)) & ShortSighted(John)))"
  },
  {
    "id": 237,
    "flag": "success",
    "assumptions": [
      "OfficeIn(Ableton,Germany)",
      "OfficeIn(Ableton,UnitedStates)",
      "-SameCountry(Germany,UnitedStates)",
      "all x y z.((OfficeIn(x,y) & OfficeIn(x,z) & -SameCountry(y,z)) -> MultinationalCompany(x))",
      "MakesMusicSoftware(Ableton)"
    ],
    "goal": "MultinationalCompany(Ableton)"
  },
  {
    "id": 238,
    "flag": "success",
    "assumptions": [
      "OfficeIn(Ableton,Germany)",
      "OfficeIn(Ableton,UnitedStates)",
      "-SameCountry(Germany,UnitedStates)",
      "all x y z.((OfficeIn(x,y) & OfficeIn(x,z) & -SameCountry(y,z)) -> MultinationalCompany(x))",
      "MakesMusicSoftware(Ableton)"
    ],
    "goal": "MakesAISoftware(Ableton)"
  },
  {
    "id": 239,
    "flag": "success",
    "assumptions": [
      "OfficeIn(Ableton,Germany)",
      "OfficeIn(Ableton,UnitedStates)",
      "-SameCountry(Germany,UnitedStates)",
      "all x y z.((OfficeIn(x,y) & OfficeIn(x,z) & -SameCountry(y,z)) -> MultinationalCompany(x))",
      "MakesMusicSoftware(Ableton)"
    ],
    "goal": "-OfficeIn(Ableton,Germany)"
  },
  {
    "id": 1295,
    "flag": "success",
    "assumptions": [
      "all x.(FlyOver(x,VastDistance) -> GlideInAir(x))",
      "all x.((Flightless(x) & Bird(x)) -> -FlyOver(x,VastDistance))",
      "all x.((Penguin(x) -> Flightless(x)) & Bird(x))",
      "all x.((NonFlying(x) & Bird(x) & In(x,Antarctica)) -> Penguin(x))",
      "(Penguin(Fido) | FlyOver(Fido,VastDistance))"
    ],
    "goal": "(Flightless(Fido) & Bird(Fido))"
  },
  {
    "id": 1296,
    "flag": "success",
    "assumptions": [
      "all x.(FlyOver(x,VastDistance) -> GlideInAir(x))",
      "all x.((Flightless(x) & Bird(x)) -> -FlyOver(x,VastDistance))",
      "all x.((Penguin(x) -> Flightless(x)) & Bird(x))",
      "all x.((NonFlying(x) & Bird(x) & In(x,Antarctica)) -> Penguin(x))",
      "(Penguin(Fido) | FlyOver(Fido,VastDistance))"
    ],
    "goal": "(-(NonFlying(Fido) & Bird(Fido) & In(Fido,Antarctica)) & -GlideInAir(Fido))"
  },
  {
    "id": 1297,
    "flag": "success",
    "assumptions": [
      "all x.(FlyOver(x,VastDistance) -> GlideInAir(x))",
      "all x.((Flightless(x) & Bird(x)) -> -FlyOver(x,VastDistance))",
      "all x.((Penguin(x) -> Flightless(x)) & Bird(x))",
      "all x.((NonFlying(x) & Bird(x) & In(x,Antarctica)) -> Penguin(x))",
      "(Penguin(Fido) | FlyOver(Fido,VastDistance))"
    ],
    "goal": "(((FlyOver(Fido,VastDistance) & --FlyOver(Fido,VastDistance)) | (-FlyOver(Fido,VastDistance) & -FlyOver(Fido,VastDistance))) -> (NonFlying(Fido) & Bird(Fido) & In(Fido,Antarctica)))"
  },
  {
    "id": 1354,
    "flag": "success",
    "assumptions": [
      "all x.(MemberOf(x,UniversityFaculty) -> Professor(x))",
      "all x.(PrincipalInvestigator(x) -> MemberOf(x,UniversityFaculty))",
      "all x.(Professor(x) -> -UndergraduateStudent(x))",
      "all x.(Pursuing(x,Bachelor) -> UndergraduateStudent(x))",
      "-((Pursuing(Leon,Bachelor) & -PrincipalInvestigator(Leon)) | (-Pursuing(Leon,Bachelor) & PrincipalInvestigator(Leon)))",
      "(-Pursuing(Leon,Bachelor) -> Professor(Leon))"
    ],
    "goal": "MemberOf(Leon,UniversityFaculty)"
  },
  {
    "id": 1355,
    "flag": "success",
    "assumptions": [
      "all x.(MemberOf(x,UniversityFaculty) -> Professor(x))",
      "all x.(PrincipalInvestigator(x) -> MemberOf(x,UniversityFaculty))",
      "all x.(Professor(x) -> -UndergraduateStudent(x))",
      "all x.(Pursuing(x,Bachelor) -> UndergraduateStudent(x))",
      "-((Pursuing(Leon,Bachelor) & -PrincipalInvestigator(Leon)) | (-Pursuing(Leon,Bachelor) & PrincipalInvestigator(Leon)))",
      "(-Pursuing(Leon,Bachelor) -> Professor(Leon))"
    ],
    "goal": "(-UndergraduateStudent(Leon) & -PrincipalInvestigator(Leon))"
  },
  {
    "id": 1356,
    "flag": "success",
    "assumptions": [
      "all x.(MemberOf(x,UniversityFaculty) -> Professor(x))",
      "all x.(PrincipalInvestigator(x) -> MemberOf(x,UniversityFaculty))",
      "all x.(Professor(x) -> -UndergraduateStudent(x))",
      "all x.(Pursuing(x,Bachelor) -> UndergraduateStudent(x))",
      "-((Pursuing(Leon,Bachelor) & -PrincipalInvestigator(Leon)) | (-Pursuing(Leon,Bachelor) & PrincipalInvestigator(Leon)))",
      "(-Pursuing(Leon,Bachelor) -> Professor(Leon))"
    ],
    "goal": "(-PrincipalInvestigator(Leon) -> UndergraduateStudent(Leon))"
  },
  {
    "id": 344,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 345,
    "flag": "success",
    "assumptions": [
      "all x.((Cutman(x) -> Prevent(x,PhysicalDamageToAFighter)) & Treat(x,PhysicalDamageToAFighter))",
      "all x.((Cutman(x) -> AppearIn(x,BoxingMatch)) | AppearIn(x,KickboxingMatch) | AppearIn(x,MixedMartialArtsMatchBout))",
      "all x.((Cutman(x) -> Handle(x,Swelling)) & Handle(x,Nosebleed) & Handle(x,Laceration))",
      "Cutman(Jack)"
    ],
    "goal": "all x.(-Cutman(x) -> -Handle(x,Nosebleed))"
  },
  {
    "id": 346,
    "flag": "success",
    "assumptions": [
      "all x.((Cutman(x) -> Prevent(x,PhysicalDamageToAFighter)) & Treat(x,PhysicalDamageToAFighter))",
      "all x.((Cutman(x) -> AppearIn(x,BoxingMatch)) | AppearIn(x,KickboxingMatch) | AppearIn(x,MixedMartialArtsMatchBout))",
      "all x.((Cutman(x) -> Handle(x,Swelling)) & Handle(x,Nosebleed) & Handle(x,Laceration))",
      "Cutman(Jack)"
    ],
    "goal": "Treat(Jack,PhysicalDamageToAFighter)"
  },
  {
    "id": 488,
    "flag": "success",
    "assumptions": [
      "(Painting(MonaLisa) & TheWorldsBestKnown(MonaLisa))",
      "(PaintedBy(MonaLisa,LeonardodaVinci) & Portrait(MonaLisa))",
      "(Scientist(LeonardodaVinci) & Painter(LeonardodaVinci))",
      "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))"
    ],
    "goal": "exists x y.(Painting(x) & TheWorldsBestKnown(x) & PaintedBy(x,y) & Scientist(y))"
  },
  {
    "id": 489,
    "flag": "success",
    "assumptions": [
      "(Painting(MonaLisa) & TheWorldsBestKnown(MonaLisa))",
      "(PaintedBy(MonaLisa,LeonardodaVinci) & Portrait(MonaLisa))",
      "(Scientist(LeonardodaVinci) & Painter(LeonardodaVinci))",
      "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))"
    ],
    "goal": "exists x.(PaintedBy(x,LeonardodaVinci) & Landscape(x))"
  },
  {
    "id": 490,
    "flag": "success",
    "assumptions": [
      "(Painting(MonaLisa) & TheWorldsBestKnown(MonaLisa))",
      "(PaintedBy(MonaLisa,LeonardodaVinci) & Portrait(MonaLisa))",
      "(Scientist(LeonardodaVinci) & Painter(LeonardodaVinci))",
      "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))"
    ],
    "goal": "all x.(WorldsBestKnown(x) -> -Portrait(x))"
  },
  {
    "id": 887,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))"
    ],
    "goal": "GrandSlamUmpire(Nadal)"
  },
  {
    "id": 888,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))"
    ],
    "goal": "-GrandSlamUmpire(Nadal)"
  },
  {
    "id": 889,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))"
    ],
    "goal": "GrandSlamChampion(Nadal)"
  },
  {
    "id": 890,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))"
    ],
    "goal": "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))"
  },
  {
    "id": 891,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))"
    ],
    "goal": "(ProfessionalTennisUmpire(Nadal) -> GrandSlamUmpire(Nadal))"
  },
  {
    "id": 892,
    "flag": "success",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))"
    ],
    "goal": "((GrandSlamUmpire(Nadal) | ProfessionalTennisPlayer(Nadal)) -> GrandSlamUmpire(Nadal))"
  },
  {
    "id": 367,
    "flag": "success",
    "assumptions": [
      "all x.(((Buisness(x) -> Sanctioned(x)) & --Sanctioned(x)) | (-(Buisness(x) -> Sanctioned(x)) & -Sanctioned(x)))",
      "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))",
      "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))",
      "(Buisness(CrudeOilDataExchange) & -Free(CrudeOilDataExchange))"
    ],
    "goal": "Sanctioned(CrudeOilDataExchange)"
  },
  {
    "id": 368,
    "flag": "success",
    "assumptions": [
      "all x.(((Buisness(x) -> Sanctioned(x)) & --Sanctioned(x)) | (-(Buisness(x) -> Sanctioned(x)) & -Sanctioned(x)))",
      "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))",
      "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))",
      "(Buisness(CrudeOilDataExchange) & -Free(CrudeOilDataExchange))"
    ],
    "goal": "-Sanctioned(CrudeOilDataExchange)"
  },
  {
    "id": 369,
    "flag": "success",
    "assumptions": [
      "all x.(((Buisness(x) -> Sanctioned(x)) & --Sanctioned(x)) | (-(Buisness(x) -> Sanctioned(x)) & -Sanctioned(x)))",
      "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))",
      "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))",
      "(Buisness(CrudeOilDataExchange) & -Free(CrudeOilDataExchange))"
    ],
    "goal": "Limited(CrudeOilDataExchange)"
  },
  {
    "id": 745,
    "flag": "success",
    "assumptions": [
      "all x.(Depressing(x) -> Sad(x))",
      "Depressing(v)"
    ],
    "goal": "Invigorating(v)"
  },
  {
    "id": 313,
    "flag": "success",
    "assumptions": [
      "(EarlyBronzeAge(Palstave) & Axe(Palstave))",
      "[[ERROR]]",
      "(Archeologist(JohnEvans) & Popularize(JohnEvans,TermPalstave))",
      "(-Axe(Paalstab) & DiggingShovel(Paalstab))"
    ],
    "goal": "Popularized(JohnEvans,TermPalstave)"
  },
  {
    "id": 314,
    "flag": "success",
    "assumptions": [
      "(EarlyBronzeAge(Palstave) & Axe(Palstave))",
      "[[ERROR]]",
      "(Archeologist(JohnEvans) & Popularize(JohnEvans,TermPalstave))",
      "(-Axe(Paalstab) & DiggingShovel(Paalstab))"
    ],
    "goal": "exists x.(Axe(x) & FoundIn(x,WesternEurope))"
  },
  {
    "id": 315,
    "flag": "success",
    "assumptions": [
      "(EarlyBronzeAge(Palstave) & Axe(Palstave))",
      "[[ERROR]]",
      "(Archeologist(JohnEvans) & Popularize(JohnEvans,TermPalstave))",
      "(-Axe(Paalstab) & DiggingShovel(Paalstab))"
    ],
    "goal": "all x y.(Archeologist(x) -> -Popularize(x,y))"
  },
  {
    "id": 273,
    "flag": "success",
    "assumptions": [
      "(Japanese(Koeitecmo) & VideoGameHoldingCompany(Koeitecmo) & AnimeHoldingCompany(Koeitecmo) & HoldingCompany(x))",
      "[[ERROR]]",
      "(DisbandsIn(Tecmo,Japan) & Survives(Koei) & Renames(Koei))",
      "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))"
    ],
    "goal": "exists x.(Company(x) & Holds(Koeitecmo,x))"
  },
  {
    "id": 274,
    "flag": "success",
    "assumptions": [
      "(Japanese(Koeitecmo) & VideoGameHoldingCompany(Koeitecmo) & AnimeHoldingCompany(Koeitecmo) & HoldingCompany(x))",
      "[[ERROR]]",
      "(DisbandsIn(Tecmo,Japan) & Survives(Koei) & Renames(Koei))",
      "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))"
    ],
    "goal": "exists x.(Company(x) & Holds(Tecmo,x))"
  },
  {
    "id": 275,
    "flag": "success",
    "assumptions": [
      "(Japanese(Koeitecmo) & VideoGameHoldingCompany(Koeitecmo) & AnimeHoldingCompany(Koeitecmo) & HoldingCompany(x))",
      "[[ERROR]]",
      "(DisbandsIn(Tecmo,Japan) & Survives(Koei) & Renames(Koei))",
      "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))"
    ],
    "goal": "AnimeHoldingCompany(Koeitecmo)"
  },
  {
    "id": 566,
    "flag": "success",
    "assumptions": [
      "(System(PlayStation2) & CameraAccessoryFor(PlayStationEyeToy,PlayStation2))",
      "(System(PlayStation3) & CameraAccessoryFor(PlayStationEye,PlayStation3))",
      "(System(PlayStation4) & System(PlayStation5) & CameraAccessoryFor(PlayStationCamera,PlayStation4) & CameraAccessoryFor(PlayStationCamera,PlayStation5))",
      "all x y.((CameraAccessoryFor(x,y) & System(y)) -> CompatibleWith(x,y))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "(Compatible(PlayStationEye,PlayStation2) & Compatible(PlayStationEye,PlayStation3))"
  },
  {
    "id": 567,
    "flag": "success",
    "assumptions": [
      "(System(PlayStation2) & CameraAccessoryFor(PlayStationEyeToy,PlayStation2))",
      "(System(PlayStation3) & CameraAccessoryFor(PlayStationEye,PlayStation3))",
      "(System(PlayStation4) & System(PlayStation5) & CameraAccessoryFor(PlayStationCamera,PlayStation4) & CameraAccessoryFor(PlayStationCamera,PlayStation5))",
      "all x y.((CameraAccessoryFor(x,y) & System(y)) -> CompatibleWith(x,y))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "Compatible(PlayStationEyeToy,PlayStation2)"
  },
  {
    "id": 568,
    "flag": "success",
    "assumptions": [
      "(System(PlayStation2) & CameraAccessoryFor(PlayStationEyeToy,PlayStation2))",
      "(System(PlayStation3) & CameraAccessoryFor(PlayStationEye,PlayStation3))",
      "(System(PlayStation4) & System(PlayStation5) & CameraAccessoryFor(PlayStationCamera,PlayStation4) & CameraAccessoryFor(PlayStationCamera,PlayStation5))",
      "all x y.((CameraAccessoryFor(x,y) & System(y)) -> CompatibleWith(x,y))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "(Compatible(PlayStationCamera,PlayStation2) & Compatible(PlayStationCamera,PlayStation3) & Compatible(PlayStationCamera,PlayStation4) & Compatible(PlayStationCamera,PlayStation5))"
  },
  {
    "id": 718,
    "flag": "success",
    "assumptions": [
      "(FootballPlayer(AdamBuska) & European(AdamBuska))",
      "[[ERROR]]"
    ],
    "goal": "exists y.(Call(American,y,Soccer) & Play(AdamBuska,y))"
  },
  {
    "id": 1152,
    "flag": "success",
    "assumptions": [
      "all x.(ATop3BestSellingVideoGame(x) -> Multiplatform(x))",
      "all x.(SoldMoreThan100MillionCopies(x) -> ATop3BestSellingVideoGame(x))",
      "exists x.(SupportsWindows(x) & AGameDevelopedByNintendo(x))",
      "all x.(Multiplatform(x) -> CanBePlayedOnAWideRangeOfDevices(x))",
      "-(DevelopedByNintendo(PokemonDiamond) | CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
    ],
    "goal": "(Game(PokemonDiamond) & SupportsWindows(PokemonDiamond))"
  },
  {
    "id": 1153,
    "flag": "success",
    "assumptions": [
      "all x.(ATop3BestSellingVideoGame(x) -> Multiplatform(x))",
      "all x.(SoldMoreThan100MillionCopies(x) -> ATop3BestSellingVideoGame(x))",
      "exists x.(SupportsWindows(x) & AGameDevelopedByNintendo(x))",
      "all x.(Multiplatform(x) -> CanBePlayedOnAWideRangeOfDevices(x))",
      "-(DevelopedByNintendo(PokemonDiamond) | CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
    ],
    "goal": "(Game(PokemonDiamond) & SupportsWindows(PokemonDiamond) & Game(PokemonDiamond) & SoldMoreThan100MillionCopies(PokemonDiamond))"
  },
  {
    "id": 1154,
    "flag": "success",
    "assumptions": [
      "all x.(ATop3BestSellingVideoGame(x) -> Multiplatform(x))",
      "all x.(SoldMoreThan100MillionCopies(x) -> ATop3BestSellingVideoGame(x))",
      "exists x.(SupportsWindows(x) & AGameDevelopedByNintendo(x))",
      "all x.(Multiplatform(x) -> CanBePlayedOnAWideRangeOfDevices(x))",
      "-(DevelopedByNintendo(PokemonDiamond) | CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 589,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(From(x,China) -> From(x,Bric))",
      "(BRIC(India) & Emerging(India))",
      "all x.(From(x,India) -> From(x,Bric))",
      "all x.(From(x,China) -> Chinese(x))",
      "all x.(From(x,India) -> Indian(x))",
      "exists x.From(x,India)"
    ],
    "goal": "all x.(From(x,CountryOfBRICS) -> -IndianPeople(x))"
  },
  {
    "id": 590,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(From(x,China) -> From(x,Bric))",
      "(BRIC(India) & Emerging(India))",
      "all x.(From(x,India) -> From(x,Bric))",
      "all x.(From(x,China) -> Chinese(x))",
      "all x.(From(x,India) -> Indian(x))",
      "exists x.From(x,India)"
    ],
    "goal": "EmergingEconomy(India)"
  },
  {
    "id": 591,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(From(x,China) -> From(x,Bric))",
      "(BRIC(India) & Emerging(India))",
      "all x.(From(x,India) -> From(x,Bric))",
      "all x.(From(x,China) -> Chinese(x))",
      "all x.(From(x,India) -> Indian(x))",
      "exists x.From(x,India)"
    ],
    "goal": "exists x.(IndianPeople(x) & From(x,CountryOfBRICS))"
  },
  {
    "id": 264,
    "flag": "success",
    "assumptions": [
      "(Actor(DaveedDiggs) & FilmProducer(DaveedDiggs))",
      "[[ERROR]]",
      "exists x y.(Actor(x) & PlaysIn(x,y,Hamilton) & Wins(x,BestActorAward))",
      "exists x.(Actor(x) & PlaysIn(x,ThomasJefferson,Hamilton) & Wins(x,BestActorAward))",
      "Plays(DaveedDiggs,ThomasJefferson)",
      "all x.((Musical(x) & OnBroadway(x)) -> -Film(x))"
    ],
    "goal": "Film(Hamilton)"
  },
  {
    "id": 265,
    "flag": "success",
    "assumptions": [
      "(Actor(DaveedDiggs) & FilmProducer(DaveedDiggs))",
      "[[ERROR]]",
      "exists x y.(Actor(x) & PlaysIn(x,y,Hamilton) & Wins(x,BestActorAward))",
      "exists x.(Actor(x) & PlaysIn(x,ThomasJefferson,Hamilton) & Wins(x,BestActorAward))",
      "Plays(DaveedDiggs,ThomasJefferson)",
      "all x.((Musical(x) & OnBroadway(x)) -> -Film(x))"
    ],
    "goal": "Wins(DaveedDiggs,BestActorAward)"
  },
  {
    "id": 266,
    "flag": "success",
    "assumptions": [
      "(Actor(DaveedDiggs) & FilmProducer(DaveedDiggs))",
      "[[ERROR]]",
      "exists x y.(Actor(x) & PlaysIn(x,y,Hamilton) & Wins(x,BestActorAward))",
      "exists x.(Actor(x) & PlaysIn(x,ThomasJefferson,Hamilton) & Wins(x,BestActorAward))",
      "Plays(DaveedDiggs,ThomasJefferson)",
      "all x.((Musical(x) & OnBroadway(x)) -> -Film(x))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 626,
    "flag": "success",
    "assumptions": [
      "(Polish(ErnestPohl) & FootballPlayer(ErnestPohl))",
      "exists x.(FootballPlayer(x) & In(x,PolishFirstDivision) & ScoredOver(x,180Goals))",
      "(In(ErnestPohl,PolishFirstDivision) & ScoredOver(ErnestPohl,180Goals))",
      "exists x y.(GornikZabrzes(x) & Stadium(x) & NamedAfter(x,y) & SoccerPlayer(y) & From(y,RudaŚląska))",
      "[[ERROR]]"
    ],
    "goal": "-ScoredOver(ErnestPohl,180Goals)"
  },
  {
    "id": 627,
    "flag": "success",
    "assumptions": [
      "(Polish(ErnestPohl) & FootballPlayer(ErnestPohl))",
      "exists x.(FootballPlayer(x) & In(x,PolishFirstDivision) & ScoredOver(x,180Goals))",
      "(In(ErnestPohl,PolishFirstDivision) & ScoredOver(ErnestPohl,180Goals))",
      "exists x y.(GornikZabrzes(x) & Stadium(x) & NamedAfter(x,y) & SoccerPlayer(y) & From(y,RudaŚląska))",
      "[[ERROR]]"
    ],
    "goal": "all x.((GornikZabrzes(x) & Stadium(x)) -> NamedAfter(x,ErnestPohl))"
  },
  {
    "id": 416,
    "flag": "success",
    "assumptions": [
      "(MemberOf(AnnJLand,PhiladelphiaCityCouncil) & MemberOf(AnnJLand,DemocraticParty))",
      "RunUnopposedFor(Ann,PhiladelphiaCityCouncil,Year1980)",
      "all x y.(RunUnopposedFor(x,PhiladelphiaCityCouncil,y) -> ElectedTo(x,PhiladelphiaCityCouncil,y))",
      "PoliticalChallenger(MichaelNutter)",
      "(Defeat(AnnJLand,MichaelNutter) & RunFor(AnnJLand,PhiladelphiaCityCouncil,Year1987))"
    ],
    "goal": "ElectedTo(Ann,PhiladelphiaCityCouncil,Year1980)"
  },
  {
    "id": 417,
    "flag": "success",
    "assumptions": [
      "(MemberOf(AnnJLand,PhiladelphiaCityCouncil) & MemberOf(AnnJLand,DemocraticParty))",
      "RunUnopposedFor(Ann,PhiladelphiaCityCouncil,Year1980)",
      "all x y.(RunUnopposedFor(x,PhiladelphiaCityCouncil,y) -> ElectedTo(x,PhiladelphiaCityCouncil,y))",
      "PoliticalChallenger(MichaelNutter)",
      "(Defeat(AnnJLand,MichaelNutter) & RunFor(AnnJLand,PhiladelphiaCityCouncil,Year1987))"
    ],
    "goal": "ElectedTo(Ann,PhiladelphiaCityCouncil,Year1987)"
  },
  {
    "id": 418,
    "flag": "success",
    "assumptions": [
      "(MemberOf(AnnJLand,PhiladelphiaCityCouncil) & MemberOf(AnnJLand,DemocraticParty))",
      "RunUnopposedFor(Ann,PhiladelphiaCityCouncil,Year1980)",
      "all x y.(RunUnopposedFor(x,PhiladelphiaCityCouncil,y) -> ElectedTo(x,PhiladelphiaCityCouncil,y))",
      "PoliticalChallenger(MichaelNutter)",
      "(Defeat(AnnJLand,MichaelNutter) & RunFor(AnnJLand,PhiladelphiaCityCouncil,Year1987))"
    ],
    "goal": "exists x.(MemberOf(x,DemocraticParty) & ElectedTo(x,PhiladelphiaCouncil,Year1980))"
  },
  {
    "id": 336,
    "flag": "success",
    "assumptions": [
      "WonCup(Aberdeen,Year2013Final)",
      "WonCup(Rangers,Year2014Final)",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "WonCup(Rangers,Year2015Final)"
  },
  {
    "id": 337,
    "flag": "success",
    "assumptions": [
      "WonCup(Aberdeen,Year2013Final)",
      "WonCup(Rangers,Year2014Final)",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "WonCup(Rangers,Year2013Final)"
  },
  {
    "id": 338,
    "flag": "success",
    "assumptions": [
      "WonCup(Aberdeen,Year2013Final)",
      "WonCup(Rangers,Year2014Final)",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "exists x.WonCup(Aberdeen,x)"
  },
  {
    "id": 843,
    "flag": "success",
    "assumptions": [
      "all x.((YoungWorkingProfessional(x) & Have(x,Regular9To5Job)) -> Have(x,StableJob))",
      "exists x.(LiveIn(x,Manhattan) & YoungWorkingProfessional(x) & Have(x,Regular9To5Job))",
      "all x.(Have(x,StableJob) -> WorkRegularly(x))",
      "all x.(WorkRegularly(x) -> -DisobeyFrequently(x,Boss))",
      "-((DisobeyFrequently(Mary,Boss) & -WorkRegularly(Mary)) | (-DisobeyFrequently(Mary,Boss) & WorkRegularly(Mary)))"
    ],
    "goal": "LiveIn(Mary,Manhattan)"
  },
  {
    "id": 844,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 845,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1080,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1081,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1082,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1083,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 721,
    "flag": "success",
    "assumptions": [
      "(USNavyShip(TheUSSLyon) & InvolvedIn(TheUSSLyon,WWII))",
      "all x.(InvolvedIn(x,WWII) -> (CurrentlyDecommissioned(x) | In(x,Museum)))"
    ],
    "goal": "CurrentlyDecommissioned(TheUSSLyon)"
  },
  {
    "id": 924,
    "flag": "success",
    "assumptions": [
      "all x.(Disposable(x) -> DesignedToBeOnlyUsedOnce(x))",
      "exists x.EcoFriendly(x)",
      "all x.(((UsedIn(x,TomsHouse) -> Disposable(x)) & -Reusable(x)) | (-(UsedIn(x,TomsHouse) -> Disposable(x)) & Reusable(x)))",
      "all x.(MadeFrom(x,Metal) -> -MadeFrom(x,Plastic))",
      "all x.(Reusable(x) -> MadeFrom(x,Metal))",
      "-((MadeFrom(ChopsticksUsedInTomsHouse,Metal) & -MadeFrom(ChopsticksUsedInTomsHouse,Plastic)) | (-MadeFrom(ChopsticksUsedInTomsHouse,Metal) & MadeFrom(ChopsticksUsedInTomsHouse,Plastic)))"
    ],
    "goal": "EcoFriendly(Chopsticks)"
  },
  {
    "id": 925,
    "flag": "success",
    "assumptions": [
      "all x.(Disposable(x) -> DesignedToBeOnlyUsedOnce(x))",
      "exists x.EcoFriendly(x)",
      "all x.(((UsedIn(x,TomsHouse) -> Disposable(x)) & -Reusable(x)) | (-(UsedIn(x,TomsHouse) -> Disposable(x)) & Reusable(x)))",
      "all x.(MadeFrom(x,Metal) -> -MadeFrom(x,Plastic))",
      "all x.(Reusable(x) -> MadeFrom(x,Metal))",
      "-((MadeFrom(ChopsticksUsedInTomsHouse,Metal) & -MadeFrom(ChopsticksUsedInTomsHouse,Plastic)) | (-MadeFrom(ChopsticksUsedInTomsHouse,Metal) & MadeFrom(ChopsticksUsedInTomsHouse,Plastic)))"
    ],
    "goal": "(EcoFriendly(Chopsticks) | DesignedToBeOnlyUsedOnce(Chopsticks))"
  },
  {
    "id": 926,
    "flag": "success",
    "assumptions": [
      "all x.(Disposable(x) -> DesignedToBeOnlyUsedOnce(x))",
      "exists x.EcoFriendly(x)",
      "all x.(((UsedIn(x,TomsHouse) -> Disposable(x)) & -Reusable(x)) | (-(UsedIn(x,TomsHouse) -> Disposable(x)) & Reusable(x)))",
      "all x.(MadeFrom(x,Metal) -> -MadeFrom(x,Plastic))",
      "all x.(Reusable(x) -> MadeFrom(x,Metal))",
      "-((MadeFrom(ChopsticksUsedInTomsHouse,Metal) & -MadeFrom(ChopsticksUsedInTomsHouse,Plastic)) | (-MadeFrom(ChopsticksUsedInTomsHouse,Metal) & MadeFrom(ChopsticksUsedInTomsHouse,Plastic)))"
    ],
    "goal": "(((MadeFrom(Chopsticks,Plastic) | DesignedBeOnlyUsedOnce(Chopsticks)) -> MadeFrom(Chopsticks,Plastic)) & EcoFriendly(Chopsticks))"
  },
  {
    "id": 1280,
    "flag": "success",
    "assumptions": [
      "all x.(Lazy(x) -> Unproductive(x))",
      "all x.(Unproductive(x) -> -Energetic(x))",
      "all x.(Sloth(x) -> Lazy(x))",
      "exists x.(Animal(x) & Sloth(x))",
      "[[ERROR]]"
    ],
    "goal": "Animal(Sid)"
  },
  {
    "id": 1281,
    "flag": "success",
    "assumptions": [
      "all x.(Lazy(x) -> Unproductive(x))",
      "all x.(Unproductive(x) -> -Energetic(x))",
      "all x.(Sloth(x) -> Lazy(x))",
      "exists x.(Animal(x) & Sloth(x))",
      "[[ERROR]]"
    ],
    "goal": "(Energetic(Sid) & Animal(Sid))"
  },
  {
    "id": 1282,
    "flag": "success",
    "assumptions": [
      "all x.(Lazy(x) -> Unproductive(x))",
      "all x.(Unproductive(x) -> -Energetic(x))",
      "all x.(Sloth(x) -> Lazy(x))",
      "exists x.(Animal(x) & Sloth(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 539,
    "flag": "success",
    "assumptions": [
      "all x.((EuropeanSoccerClub(x) -> Attend(x,Ucl)) | Attend(x,Uel) | Attend(x,Uecl))",
      "all x y.((EuropeanSoccerClub(x) & EuropeanSoccerClub(y) & Attend(x,Ucl) & Attend(y,Uel)) -> HigherRank(x,y))",
      "all x y.((EuropeanSoccerClub(x) & EuropeanSoccerClub(y) & Attend(x,Uel) & Attend(y,Uecl)) -> HigherRank(x,y))",
      "(EuropeanSoccerClub(ManchesterUnited) & EuropeanSoccerClub(ManchesterCity))",
      "Attend(Manchesterunited,Uel)",
      "Attend(Manchestercity,Ucl)"
    ],
    "goal": "HigherRank(ManchesterCity,ManchesterUnited)"
  },
  {
    "id": 192,
    "flag": "success",
    "assumptions": [
      "all x y.((Coach(x,y) & FootballClub(y)) -> FootballCoach(x))",
      "all w x y z.((PlayPositionFor(x,w,y,z) & InNFL(y,z)) -> PlayInNFL(x))",
      "FootballClub(MinnesotaVikings)",
      "Coach(DennisGreen,MinnesotaVikings)",
      "ReceiveTD(CrisCarter,Num13)",
      "InNFL(MinnesotaVikings,Yr1997)",
      "PlayPositionFor(JohnRandle,DefensiveTackle,MinnesotaVikings,Yr1997)"
    ],
    "goal": "FootballCoach(DennisGreen)"
  },
  {
    "id": 193,
    "flag": "success",
    "assumptions": [
      "all x y.((Coach(x,y) & FootballClub(y)) -> FootballCoach(x))",
      "all w x y z.((PlayPositionFor(x,w,y,z) & InNFL(y,z)) -> PlayInNFL(x))",
      "FootballClub(MinnesotaVikings)",
      "Coach(DennisGreen,MinnesotaVikings)",
      "ReceiveTD(CrisCarter,Num13)",
      "InNFL(MinnesotaVikings,Yr1997)",
      "PlayPositionFor(JohnRandle,DefensiveTackle,MinnesotaVikings,Yr1997)"
    ],
    "goal": "-PlayInNFL(JohnRandle)"
  },
  {
    "id": 194,
    "flag": "success",
    "assumptions": [
      "all x y.((Coach(x,y) & FootballClub(y)) -> FootballCoach(x))",
      "all w x y z.((PlayPositionFor(x,w,y,z) & InNFL(y,z)) -> PlayInNFL(x))",
      "FootballClub(MinnesotaVikings)",
      "Coach(DennisGreen,MinnesotaVikings)",
      "ReceiveTD(CrisCarter,Num13)",
      "InNFL(MinnesotaVikings,Yr1997)",
      "PlayPositionFor(JohnRandle,DefensiveTackle,MinnesotaVikings,Yr1997)"
    ],
    "goal": "PlayPositionFor(CrisCarter,Wr,MinnesotaVikings,Year1997)"
  },
  {
    "id": 1333,
    "flag": "success",
    "assumptions": [
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & UsedFor(x,Lecture)) -> BookedDuring(x,Day))",
      "all x.(ClassroomIn(x,WilliamLHarknessHall) & -PrivateStudySpot(x))",
      "all x.(ClassroomIn(x,WilliamLHarknessHall) & (UsedFor(x,Lecture) | UsedFor(x,OfficeHours)))",
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & BookedIn(x,Evening)) -> -FreelyUsableAtNight(x))",
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & UsedFor(x,OfficeHours)) -> BookedIn(x,Evening))",
      "(ClassroomIn(116,WilliamLHarknessHall) & -((UsedFor(116,Lecture) & -UsedFor(116,OfficeHours)) | (-UsedFor(116,Lecture) & UsedFor(116,OfficeHours))))"
    ],
    "goal": "PrivateStudySpot(Room116)"
  },
  {
    "id": 1334,
    "flag": "success",
    "assumptions": [
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & UsedFor(x,Lecture)) -> BookedDuring(x,Day))",
      "all x.(ClassroomIn(x,WilliamLHarknessHall) & -PrivateStudySpot(x))",
      "all x.(ClassroomIn(x,WilliamLHarknessHall) & (UsedFor(x,Lecture) | UsedFor(x,OfficeHours)))",
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & BookedIn(x,Evening)) -> -FreelyUsableAtNight(x))",
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & UsedFor(x,OfficeHours)) -> BookedIn(x,Evening))",
      "(ClassroomIn(116,WilliamLHarknessHall) & -((UsedFor(116,Lecture) & -UsedFor(116,OfficeHours)) | (-UsedFor(116,Lecture) & UsedFor(116,OfficeHours))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1335,
    "flag": "success",
    "assumptions": [
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & UsedFor(x,Lecture)) -> BookedDuring(x,Day))",
      "all x.(ClassroomIn(x,WilliamLHarknessHall) & -PrivateStudySpot(x))",
      "all x.(ClassroomIn(x,WilliamLHarknessHall) & (UsedFor(x,Lecture) | UsedFor(x,OfficeHours)))",
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & BookedIn(x,Evening)) -> -FreelyUsableAtNight(x))",
      "all x.((ClassroomIn(x,WilliamLHarknessHall) & UsedFor(x,OfficeHours)) -> BookedIn(x,Evening))",
      "(ClassroomIn(116,WilliamLHarknessHall) & -((UsedFor(116,Lecture) & -UsedFor(116,OfficeHours)) | (-UsedFor(116,Lecture) & UsedFor(116,OfficeHours))))"
    ],
    "goal": "(-(PrivateStudySpot(Room116) & FreelyUsableAtNight(Room116)) -> (UsedFor(Room116,Lecture) | BookedIn(Room116,Evening)))"
  },
  {
    "id": 298,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 299,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 300,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 213,
    "flag": "success",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & Gymnast(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutor(Herodicus,Hippocrates)",
      "Recommend(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": "Tutor(Herodicus,Hippocrates)"
  },
  {
    "id": 214,
    "flag": "success",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & Gymnast(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutor(Herodicus,Hippocrates)",
      "Recommend(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": "Tutor(Hippocrates,Herodicus)"
  },
  {
    "id": 215,
    "flag": "success",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & Gymnast(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutor(Herodicus,Hippocrates)",
      "Recommend(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": "exists x.(Born(Herodicus,x) & CityState(x))"
  },
  {
    "id": 216,
    "flag": "success",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & Gymnast(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutor(Herodicus,Hippocrates)",
      "Recommend(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": "-Recommend(Herodicus,Massages)"
  },
  {
    "id": 217,
    "flag": "success",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & Gymnast(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutor(Herodicus,Hippocrates)",
      "Recommend(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": "exists x y.(Born(Herodicus,x) & Colony(x,y) & CityState(y))"
  },
  {
    "id": 1258,
    "flag": "success",
    "assumptions": [
      "all x.((Kid(x) & In(x,OurFamily)) -> -Love(x,Opera))",
      "all x.((Adult(x) & In(x,OurFamily)) -> Love(x,Opera))",
      "all x.((Scientist(x) & In(x,OurFamily)) -> Adult(x))",
      "exists x.(Student(x) & In(x,OurFamily) & Kid(x))",
      "(Kid(Billy) & In(Billy,OurFamily))"
    ],
    "goal": "Student(Billy)"
  },
  {
    "id": 1259,
    "flag": "success",
    "assumptions": [
      "all x.((Kid(x) & In(x,OurFamily)) -> -Love(x,Opera))",
      "all x.((Adult(x) & In(x,OurFamily)) -> Love(x,Opera))",
      "all x.((Scientist(x) & In(x,OurFamily)) -> Adult(x))",
      "exists x.(Student(x) & In(x,OurFamily) & Kid(x))",
      "(Kid(Billy) & In(Billy,OurFamily))"
    ],
    "goal": "(Student(Billy) & Scientist(Billy))"
  },
  {
    "id": 1260,
    "flag": "success",
    "assumptions": [
      "all x.((Kid(x) & In(x,OurFamily)) -> -Love(x,Opera))",
      "all x.((Adult(x) & In(x,OurFamily)) -> Love(x,Opera))",
      "all x.((Scientist(x) & In(x,OurFamily)) -> Adult(x))",
      "exists x.(Student(x) & In(x,OurFamily) & Kid(x))",
      "(Kid(Billy) & In(Billy,OurFamily))"
    ],
    "goal": "((Student(Billy) | Scientist(Billy)) -> (Student(Billy) & Kid(Billy)))"
  },
  {
    "id": 204,
    "flag": "success",
    "assumptions": [
      "(Scottish(BrianWinter) & FootballReferee(BrianWinter))",
      "(Retired(BrianWinter) & Retired(BrianWinter,Yr2012))",
      "RefereeObserver(BrianWinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "(SonOf(AndyWinter,BrianWinter) & FootballPlayer(AndyWinter) & PlaysFor(AndyWinter,HamiltonAcademical))"
    ],
    "goal": "exists x y.(SonOf(x,y) & RefereeObserver(y) & FootballPlayer(x))"
  },
  {
    "id": 205,
    "flag": "success",
    "assumptions": [
      "(Scottish(BrianWinter) & FootballReferee(BrianWinter))",
      "(Retired(BrianWinter) & Retired(BrianWinter,Yr2012))",
      "RefereeObserver(BrianWinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "(SonOf(AndyWinter,BrianWinter) & FootballPlayer(AndyWinter) & PlaysFor(AndyWinter,HamiltonAcademical))"
    ],
    "goal": "-RefereeObserver(Brianwinter)"
  },
  {
    "id": 206,
    "flag": "success",
    "assumptions": [
      "(Scottish(BrianWinter) & FootballReferee(BrianWinter))",
      "(Retired(BrianWinter) & Retired(BrianWinter,Yr2012))",
      "RefereeObserver(BrianWinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "(SonOf(AndyWinter,BrianWinter) & FootballPlayer(AndyWinter) & PlaysFor(AndyWinter,HamiltonAcademical))"
    ],
    "goal": "Retired(Brianwinter)"
  },
  {
    "id": 207,
    "flag": "success",
    "assumptions": [
      "(Scottish(BrianWinter) & FootballReferee(BrianWinter))",
      "(Retired(BrianWinter) & Retired(BrianWinter,Yr2012))",
      "RefereeObserver(BrianWinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "(SonOf(AndyWinter,BrianWinter) & FootballPlayer(AndyWinter) & PlaysFor(AndyWinter,HamiltonAcademical))"
    ],
    "goal": "Referee(Andywinter)"
  },
  {
    "id": 1100,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "Planner(Erica)"
  },
  {
    "id": 1101,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "(InterestedIn(Erica,Puzzle) & Creative(Erica))"
  },
  {
    "id": 1102,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "((InterestedIn(Erica,Puzzle) & -Creative(Erica)) | (-InterestedIn(Erica,Puzzle) & Creative(Erica)))"
  },
  {
    "id": 1103,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1104,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1105,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1106,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "(((PlaysOften(Erica,Chess) & -InterestedIn(Erica,Puzzle)) | (-PlaysOften(Erica,Chess) & InterestedIn(Erica,Puzzle))) -> -(InterestedIn(Erica,Puzzle) | PlaysOften(Erica,Chess)))"
  },
  {
    "id": 1107,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1108,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "((Planner(Erica) | InterestedIn(Erica,Puzzle)) -> Creative(Erica))"
  },
  {
    "id": 1109,
    "flag": "success",
    "assumptions": [
      "all x.(At(x,BoardGameNight) -> (InterestedIn(x,Puzzle) | BadAt(x,Chess)))",
      "all x.((At(x,BoardGameNight) & BadAt(x,Chess)) -> -PlaysOften(x,Chess))",
      "exists x.(At(x,BoardGameNight) & (Planner(x) | Creative(x)))",
      "(At(Erica,BoardGameNight) & PlaysOften(Erica,Chess))",
      "((At(Erica,BoardGameNight) & -(BadAt(Erica,Chess) | Creative(Erica))) -> -((Planner(Erica) & -Creative(Erica)) | (-Planner(Erica) & Creative(Erica))))"
    ],
    "goal": "(((BadAt(Erica,Chess) & -InterestedIn(Erica,Puzzle)) | (-BadAt(Erica,Chess) & InterestedIn(Erica,Puzzle))) -> -(PlaysOften(Erica,Chess) & Creative(Erica)))"
  },
  {
    "id": 373,
    "flag": "success",
    "assumptions": [
      "all x.((SoccerPlayer(x) -> Have(x,LeftFoot)) & Have(x,RightFoot))",
      "all x.((SoccerPlayer(x) & UseEfficiently(x,LeftFoot) & UseEfficiently(x,RightFoot)) -> TopSoccerPlayer(x))",
      "all x.((SoccerPlayer(x) & ScoreUsing(x,ManyGoals,LeftFoot)) -> UseEfficiently(x,LeftFoot))",
      "all x.((SoccerPlayer(x) & ScoreUsing(x,ManyGoals,RightFoot)) -> UseEfficiently(x,RightFoot))",
      "SoccerPlayer(Ronaldo)",
      "UseEfficiently(Ronaldo,RightFoot)",
      "ScoreUsing(Ronaldo,ManyGoals,LeftFoot)"
    ],
    "goal": "TopSoccerPlayer(Ronaldo)"
  },
  {
    "id": 374,
    "flag": "success",
    "assumptions": [
      "all x.((SoccerPlayer(x) -> Have(x,LeftFoot)) & Have(x,RightFoot))",
      "all x.((SoccerPlayer(x) & UseEfficiently(x,LeftFoot) & UseEfficiently(x,RightFoot)) -> TopSoccerPlayer(x))",
      "all x.((SoccerPlayer(x) & ScoreUsing(x,ManyGoals,LeftFoot)) -> UseEfficiently(x,LeftFoot))",
      "all x.((SoccerPlayer(x) & ScoreUsing(x,ManyGoals,RightFoot)) -> UseEfficiently(x,RightFoot))",
      "SoccerPlayer(Ronaldo)",
      "UseEfficiently(Ronaldo,RightFoot)",
      "ScoreUsing(Ronaldo,ManyGoals,LeftFoot)"
    ],
    "goal": "-TopSoccerPlayer(Ronaldo)"
  },
  {
    "id": 509,
    "flag": "success",
    "assumptions": [
      "(Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery,PadstowEngland))",
      "OpenToVisitor(NationalLobsterHatchery)",
      "all x.(((Hatchery(x) -> ForConservation(x)) & -ForProfit(x)) | (-(Hatchery(x) -> ForConservation(x)) & ForProfit(x)))",
      "exists x.(Hatchery(x) & ForConservation(x) & ReleaseAnimalToWild(x))",
      "-ForProfit(NationalLobsterHatchery)"
    ],
    "goal": "ForConservation(NationalLobsterhatchery)"
  },
  {
    "id": 510,
    "flag": "success",
    "assumptions": [
      "(Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery,PadstowEngland))",
      "OpenToVisitor(NationalLobsterHatchery)",
      "all x.(((Hatchery(x) -> ForConservation(x)) & -ForProfit(x)) | (-(Hatchery(x) -> ForConservation(x)) & ForProfit(x)))",
      "exists x.(Hatchery(x) & ForConservation(x) & ReleaseAnimalToWild(x))",
      "-ForProfit(NationalLobsterHatchery)"
    ],
    "goal": "all x.(Hatchery(x) -> OpenToVisitors(x))"
  },
  {
    "id": 511,
    "flag": "success",
    "assumptions": [
      "(Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery,PadstowEngland))",
      "OpenToVisitor(NationalLobsterHatchery)",
      "all x.(((Hatchery(x) -> ForConservation(x)) & -ForProfit(x)) | (-(Hatchery(x) -> ForConservation(x)) & ForProfit(x)))",
      "exists x.(Hatchery(x) & ForConservation(x) & ReleaseAnimalToWild(x))",
      "-ForProfit(NationalLobsterHatchery)"
    ],
    "goal": "ReleaseAnimalToWild(NationalLobsterhatchery)"
  },
  {
    "id": 632,
    "flag": "success",
    "assumptions": [
      "all x.((Rhosaelwydfc(x) -> FootballClub(x)) & Welsh(x))",
      "all x.((FootballClub(x) & LocatedIn(x,Ponciau)) <-> Rhosaelwydfc(x))",
      "exists x.(LocatedIn(x,Ponciau) & WonPremierDivisionDuring(x,Year2005MonthJune))",
      "all x.(WonPremierDivisionDuring(x,Year2009MonthOctober) -> PromotedTo(x,CymruAlliance))",
      "all x.(WonPremierDivisionDuring(x,Year2009MonthOctober) <-> WonPremierDivisionDuring(x,Y2005MonthJune))"
    ],
    "goal": "exists x.(Rhosaelwydfc(x) & WonPremierDivisionDuring(x,Year2005MonthJune))"
  },
  {
    "id": 633,
    "flag": "success",
    "assumptions": [
      "all x.((Rhosaelwydfc(x) -> FootballClub(x)) & Welsh(x))",
      "all x.((FootballClub(x) & LocatedIn(x,Ponciau)) <-> Rhosaelwydfc(x))",
      "exists x.(LocatedIn(x,Ponciau) & WonPremierDivisionDuring(x,Year2005MonthJune))",
      "all x.(WonPremierDivisionDuring(x,Year2009MonthOctober) -> PromotedTo(x,CymruAlliance))",
      "all x.(WonPremierDivisionDuring(x,Year2009MonthOctober) <-> WonPremierDivisionDuring(x,Y2005MonthJune))"
    ],
    "goal": "exists x.(Rhosaelwydfc(x) & PromotedTo(x,CymruAlliance))"
  },
  {
    "id": 1357,
    "flag": "success",
    "assumptions": [
      "all x.((UsedIn(x,LabComputer) & UnixOperatingSystem(x)) -> Software(x))",
      "all x.((UsedIn(x,LabComputer) & MacOS(x)) -> UnixOperatingSystem(x))",
      "all x.(((UsedIn(x,LabComputer) -> MacOS(x)) & -Linux(x)) | (-(UsedIn(x,LabComputer) -> MacOS(x)) & Linux(x)))",
      "all x.((UsedIn(x,LabComputer) & Linux(x)) -> Convenient(x))",
      "all x.((UsedIn(x,LabComputer) & Software(x)) -> WrittenWithCode(x))",
      "all x.((UsedIn(x,LabComputer) & Convenient(x)) -> Popular(x))",
      "[[ERROR]]",
      "(UsedIn(Pytorch,LabComputer) & -((Linux(Pytorch) & -Software(Pytorch)) | (-Linux(Pytorch) & Software(Pytorch))))"
    ],
    "goal": "Popular(Burger)"
  },
  {
    "id": 1358,
    "flag": "success",
    "assumptions": [
      "all x.((UsedIn(x,LabComputer) & UnixOperatingSystem(x)) -> Software(x))",
      "all x.((UsedIn(x,LabComputer) & MacOS(x)) -> UnixOperatingSystem(x))",
      "all x.(((UsedIn(x,LabComputer) -> MacOS(x)) & -Linux(x)) | (-(UsedIn(x,LabComputer) -> MacOS(x)) & Linux(x)))",
      "all x.((UsedIn(x,LabComputer) & Linux(x)) -> Convenient(x))",
      "all x.((UsedIn(x,LabComputer) & Software(x)) -> WrittenWithCode(x))",
      "all x.((UsedIn(x,LabComputer) & Convenient(x)) -> Popular(x))",
      "[[ERROR]]",
      "(UsedIn(Pytorch,LabComputer) & -((Linux(Pytorch) & -Software(Pytorch)) | (-Linux(Pytorch) & Software(Pytorch))))"
    ],
    "goal": "-Popular(Burger)"
  },
  {
    "id": 1359,
    "flag": "success",
    "assumptions": [
      "all x.((UsedIn(x,LabComputer) & UnixOperatingSystem(x)) -> Software(x))",
      "all x.((UsedIn(x,LabComputer) & MacOS(x)) -> UnixOperatingSystem(x))",
      "all x.(((UsedIn(x,LabComputer) -> MacOS(x)) & -Linux(x)) | (-(UsedIn(x,LabComputer) -> MacOS(x)) & Linux(x)))",
      "all x.((UsedIn(x,LabComputer) & Linux(x)) -> Convenient(x))",
      "all x.((UsedIn(x,LabComputer) & Software(x)) -> WrittenWithCode(x))",
      "all x.((UsedIn(x,LabComputer) & Convenient(x)) -> Popular(x))",
      "[[ERROR]]",
      "(UsedIn(Pytorch,LabComputer) & -((Linux(Pytorch) & -Software(Pytorch)) | (-Linux(Pytorch) & Software(Pytorch))))"
    ],
    "goal": "(Popular(Pytorch) & WrittenWithCode(Pytorch))"
  },
  {
    "id": 1360,
    "flag": "success",
    "assumptions": [
      "all x.((UsedIn(x,LabComputer) & UnixOperatingSystem(x)) -> Software(x))",
      "all x.((UsedIn(x,LabComputer) & MacOS(x)) -> UnixOperatingSystem(x))",
      "all x.(((UsedIn(x,LabComputer) -> MacOS(x)) & -Linux(x)) | (-(UsedIn(x,LabComputer) -> MacOS(x)) & Linux(x)))",
      "all x.((UsedIn(x,LabComputer) & Linux(x)) -> Convenient(x))",
      "all x.((UsedIn(x,LabComputer) & Software(x)) -> WrittenWithCode(x))",
      "all x.((UsedIn(x,LabComputer) & Convenient(x)) -> Popular(x))",
      "[[ERROR]]",
      "(UsedIn(Pytorch,LabComputer) & -((Linux(Pytorch) & -Software(Pytorch)) | (-Linux(Pytorch) & Software(Pytorch))))"
    ],
    "goal": "-(Popular(Pytorch) & WrittenWithCode(Pytorch))"
  },
  {
    "id": 352,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Road(x) & MadeOf(x,Concrete) & Road(y) & MadeOf(y,Asphalt)) -> LastLonger(x,y))",
      "all x y.((Road(x) & MadeOf(x,Asphalt) & Road(y) & MadeOf(y,Concrete)) -> Smoother(x,y))",
      "all x y z.((Road(x) & Road(y) & Smoother(x,y)) -> Prefer(z,x))",
      "(Road(FirstRoad) & MadeOf(SecondRoad,Concrete) & Road(FirstRoad) & MadeOf(SecondRoad,Asphalt))"
    ],
    "goal": "LastLonger(FirstRoad,SecondRoad)"
  },
  {
    "id": 353,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Road(x) & MadeOf(x,Concrete) & Road(y) & MadeOf(y,Asphalt)) -> LastLonger(x,y))",
      "all x y.((Road(x) & MadeOf(x,Asphalt) & Road(y) & MadeOf(y,Concrete)) -> Smoother(x,y))",
      "all x y z.((Road(x) & Road(y) & Smoother(x,y)) -> Prefer(z,x))",
      "(Road(FirstRoad) & MadeOf(SecondRoad,Concrete) & Road(FirstRoad) & MadeOf(SecondRoad,Asphalt))"
    ],
    "goal": "-Smoother(FirstRoad,SecondRoad)"
  },
  {
    "id": 354,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Road(x) & MadeOf(x,Concrete) & Road(y) & MadeOf(y,Asphalt)) -> LastLonger(x,y))",
      "all x y.((Road(x) & MadeOf(x,Asphalt) & Road(y) & MadeOf(y,Concrete)) -> Smoother(x,y))",
      "all x y z.((Road(x) & Road(y) & Smoother(x,y)) -> Prefer(z,x))",
      "(Road(FirstRoad) & MadeOf(SecondRoad,Concrete) & Road(FirstRoad) & MadeOf(SecondRoad,Asphalt))"
    ],
    "goal": "Prefer(John,SecondRoad)"
  },
  {
    "id": 225,
    "flag": "success",
    "assumptions": [
      "(TraditionalSummerCamp(CampDavern) & ForBoysAndGirls(CampDavern))",
      "EstablishedIn(CampDavern,Year1946)",
      "OperatedUntil(YMCA,CampDavern,Year2015)",
      "Old(CampDavern)"
    ],
    "goal": "exists x.(Old(x) & TraditionalSummerCamp(x) & ForBoysAndGirls(x))"
  },
  {
    "id": 226,
    "flag": "success",
    "assumptions": [
      "(TraditionalSummerCamp(CampDavern) & ForBoysAndGirls(CampDavern))",
      "EstablishedIn(CampDavern,Year1946)",
      "OperatedUntil(YMCA,CampDavern,Year2015)",
      "Old(CampDavern)"
    ],
    "goal": "exists x.(TraditionalSummerCamp(x) & ForBoysAndGirls(x) & OperatedUntil(YMCA,x,Year2015))"
  },
  {
    "id": 227,
    "flag": "success",
    "assumptions": [
      "(TraditionalSummerCamp(CampDavern) & ForBoysAndGirls(CampDavern))",
      "EstablishedIn(CampDavern,Year1946)",
      "OperatedUntil(YMCA,CampDavern,Year2015)",
      "Old(CampDavern)"
    ],
    "goal": "EstablishedIn(Campdavern,Year1989)"
  },
  {
    "id": 990,
    "flag": "success",
    "assumptions": [
      "all x.((EmilysFriend(x) & Publish(x,Journal)) -> -WorkIn(x,EntertainmentIndustry))",
      "all x.((EmilysFriend(x) & AwardWinningNovelist(x)) -> Publish(x,Journal))",
      "all x.((EmilysFriend(x) -> WorkIn(x,EntertainmentIndustry)) | HighlyAcclaimedIn(x,TheirProfession))",
      "[[ERROR]]",
      "all x.(((EmilysFriend(x) & HighlyAcclaimedIn(x,TheirProfession)) -> ReceiveFrom(x,GlowingFeedback,Colleague)) & ReceiveFrom(x,GlowingRecommendation,Colleague))",
      "EmilysFriends(Taylor)",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 991,
    "flag": "success",
    "assumptions": [
      "all x.((EmilysFriend(x) & Publish(x,Journal)) -> -WorkIn(x,EntertainmentIndustry))",
      "all x.((EmilysFriend(x) & AwardWinningNovelist(x)) -> Publish(x,Journal))",
      "all x.((EmilysFriend(x) -> WorkIn(x,EntertainmentIndustry)) | HighlyAcclaimedIn(x,TheirProfession))",
      "[[ERROR]]",
      "all x.(((EmilysFriend(x) & HighlyAcclaimedIn(x,TheirProfession)) -> ReceiveFrom(x,GlowingFeedback,Colleague)) & ReceiveFrom(x,GlowingRecommendation,Colleague))",
      "EmilysFriends(Taylor)",
      "[[ERROR]]"
    ],
    "goal": "(EmilysFriends(Taylor) & Receive(Taylor,GlowingFeedback,Colleague) & Receive(Taylor,GlowingRecommendation,Colleague) & AwardWinningNovelist(Taylor))"
  },
  {
    "id": 992,
    "flag": "success",
    "assumptions": [
      "all x.((EmilysFriend(x) & Publish(x,Journal)) -> -WorkIn(x,EntertainmentIndustry))",
      "all x.((EmilysFriend(x) & AwardWinningNovelist(x)) -> Publish(x,Journal))",
      "all x.((EmilysFriend(x) -> WorkIn(x,EntertainmentIndustry)) | HighlyAcclaimedIn(x,TheirProfession))",
      "[[ERROR]]",
      "all x.(((EmilysFriend(x) & HighlyAcclaimedIn(x,TheirProfession)) -> ReceiveFrom(x,GlowingFeedback,Colleague)) & ReceiveFrom(x,GlowingRecommendation,Colleague))",
      "EmilysFriends(Taylor)",
      "[[ERROR]]"
    ],
    "goal": "(EmilysFriends(Taylor) & -(Publish(Taylor,Journal) & AwardWinningNovelist(Taylor)))"
  },
  {
    "id": 25,
    "flag": "success",
    "assumptions": [
      "(YoungAdultFantasy(ThickAsTheives) & Novel(ThickAsTheives) & WrittenBy(ThickAsTheives,MeganWhalenTurner))",
      "PublishedBy(ThickAsTheives,GreenWillowBooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(MedeEmpire) & SetIn(ThickAsTheives,MedeEmpire))",
      "[[ERROR]]",
      "(Country(Attolia) & Near(Attolia,MedeEmpire) & Country(Sounis) & Near(Sounis,MedeEmpire))",
      "(SoldAs(ThickAsTheives,HardCover) & SoldAs(ThickAsTheives,SoftCover))"
    ],
    "goal": "WorkedWith(WhalenTurner,GreenWillowbooks)"
  },
  {
    "id": 26,
    "flag": "success",
    "assumptions": [
      "(YoungAdultFantasy(ThickAsTheives) & Novel(ThickAsTheives) & WrittenBy(ThickAsTheives,MeganWhalenTurner))",
      "PublishedBy(ThickAsTheives,GreenWillowBooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(MedeEmpire) & SetIn(ThickAsTheives,MedeEmpire))",
      "[[ERROR]]",
      "(Country(Attolia) & Near(Attolia,MedeEmpire) & Country(Sounis) & Near(Sounis,MedeEmpire))",
      "(SoldAs(ThickAsTheives,HardCover) & SoldAs(ThickAsTheives,SoftCover))"
    ],
    "goal": "PlotsToSwallowUp(MedeEmpire,Attolia)"
  },
  {
    "id": 27,
    "flag": "success",
    "assumptions": [
      "(YoungAdultFantasy(ThickAsTheives) & Novel(ThickAsTheives) & WrittenBy(ThickAsTheives,MeganWhalenTurner))",
      "PublishedBy(ThickAsTheives,GreenWillowBooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(MedeEmpire) & SetIn(ThickAsTheives,MedeEmpire))",
      "[[ERROR]]",
      "(Country(Attolia) & Near(Attolia,MedeEmpire) & Country(Sounis) & Near(Sounis,MedeEmpire))",
      "(SoldAs(ThickAsTheives,HardCover) & SoldAs(ThickAsTheives,SoftCover))"
    ],
    "goal": "-SetIn(ThickAsTheives,MedeEmpire)"
  },
  {
    "id": 28,
    "flag": "success",
    "assumptions": [
      "(YoungAdultFantasy(ThickAsTheives) & Novel(ThickAsTheives) & WrittenBy(ThickAsTheives,MeganWhalenTurner))",
      "PublishedBy(ThickAsTheives,GreenWillowBooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(MedeEmpire) & SetIn(ThickAsTheives,MedeEmpire))",
      "[[ERROR]]",
      "(Country(Attolia) & Near(Attolia,MedeEmpire) & Country(Sounis) & Near(Sounis,MedeEmpire))",
      "(SoldAs(ThickAsTheives,HardCover) & SoldAs(ThickAsTheives,SoftCover))"
    ],
    "goal": "-WorkedWith(Megan,GreenWillowbooks)"
  },
  {
    "id": 350,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 351,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1181,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((EmployeeIn(x,JamesSTown) & WorkIn(x,BusinessAnalysis)) -> WorkFor(x,ThisCompany))",
      "all x.((EmployeeIn(x,JamesSTown) & WorkFor(x,ThisCompany)) -> -From(x,China))",
      "all x.((EmployeeIn(x,JamesSTown) & WorkIn(x,SoftwareEngineering)) -> From(x,China))",
      "(EmployeeIn(Leif,JamesSTown) & WorkIn(Leif,SoftwareEngineering))"
    ],
    "goal": "(EmployeesInJamesSTown(Leif) & GoodAt(Leif,Math))"
  },
  {
    "id": 1182,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((EmployeeIn(x,JamesSTown) & WorkIn(x,BusinessAnalysis)) -> WorkFor(x,ThisCompany))",
      "all x.((EmployeeIn(x,JamesSTown) & WorkFor(x,ThisCompany)) -> -From(x,China))",
      "all x.((EmployeeIn(x,JamesSTown) & WorkIn(x,SoftwareEngineering)) -> From(x,China))",
      "(EmployeeIn(Leif,JamesSTown) & WorkIn(Leif,SoftwareEngineering))"
    ],
    "goal": "-(GoodAt(Leif,Math) & WorkIn(Leif,BusinessAnalysis))"
  },
  {
    "id": 1183,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((EmployeeIn(x,JamesSTown) & WorkIn(x,BusinessAnalysis)) -> WorkFor(x,ThisCompany))",
      "all x.((EmployeeIn(x,JamesSTown) & WorkFor(x,ThisCompany)) -> -From(x,China))",
      "all x.((EmployeeIn(x,JamesSTown) & WorkIn(x,SoftwareEngineering)) -> From(x,China))",
      "(EmployeeIn(Leif,JamesSTown) & WorkIn(Leif,SoftwareEngineering))"
    ],
    "goal": "(-(GoodAt(Leif,Math) & WorkIn(Leif,BusinessAnalysis)) -> (-WorkFor(x,ThisCompany) & -WorkIn(x,SoftwareEngineering)))"
  },
  {
    "id": 450,
    "flag": "success",
    "assumptions": [
      "(Provide(Party,Strawberry) & Provide(Party,Orange) & Provide(Party,Blueberry) & Provide(Party,Grape) & Provide(Party,Cherry))",
      "all x.(LowestWeightRemainingAt(x,EndOfParty) -> MostPopular(x))",
      "LowestWeightRemainingAt(Strawberries,EndOfParty)",
      "LowerWeightAt(Blueberry,Cherry,EndOfParty)",
      "(Eat(Benjamin,Orange) & Eat(Benjamin,Grape) & -Eat(Benjamin,Blueberry) & -Eat(Benjamin,Cherry) & -Eat(Benjamin,Strawberry))"
    ],
    "goal": "MostPopular(Blueberry)"
  },
  {
    "id": 451,
    "flag": "success",
    "assumptions": [
      "(Provide(Party,Strawberry) & Provide(Party,Orange) & Provide(Party,Blueberry) & Provide(Party,Grape) & Provide(Party,Cherry))",
      "all x.(LowestWeightRemainingAt(x,EndOfParty) -> MostPopular(x))",
      "LowestWeightRemainingAt(Strawberries,EndOfParty)",
      "LowerWeightAt(Blueberry,Cherry,EndOfParty)",
      "(Eat(Benjamin,Orange) & Eat(Benjamin,Grape) & -Eat(Benjamin,Blueberry) & -Eat(Benjamin,Cherry) & -Eat(Benjamin,Strawberry))"
    ],
    "goal": "MostPopular(Cherry)"
  },
  {
    "id": 452,
    "flag": "success",
    "assumptions": [
      "(Provide(Party,Strawberry) & Provide(Party,Orange) & Provide(Party,Blueberry) & Provide(Party,Grape) & Provide(Party,Cherry))",
      "all x.(LowestWeightRemainingAt(x,EndOfParty) -> MostPopular(x))",
      "LowestWeightRemainingAt(Strawberries,EndOfParty)",
      "LowerWeightAt(Blueberry,Cherry,EndOfParty)",
      "(Eat(Benjamin,Orange) & Eat(Benjamin,Grape) & -Eat(Benjamin,Blueberry) & -Eat(Benjamin,Cherry) & -Eat(Benjamin,Strawberry))"
    ],
    "goal": "Eat(Blueberry,Benjamin)"
  },
  {
    "id": 186,
    "flag": "success",
    "assumptions": [
      "all x.(AttendInPerson(x) -> Registered(x))",
      "all x.(Attend(x) -> ((Attend(x) & -Attend(x)) | (-Attend(x) & Attend(x))))",
      "all x.((Attend(x) & FromChina(x)) -> -Attend(x))",
      "(Attend(James) & -Attend(James))",
      "(FromChina(Jack) & Attend(Jack))"
    ],
    "goal": "(Attend(James) & -Attend(James))"
  },
  {
    "id": 187,
    "flag": "success",
    "assumptions": [
      "all x.(AttendInPerson(x) -> Registered(x))",
      "all x.(Attend(x) -> ((Attend(x) & -Attend(x)) | (-Attend(x) & Attend(x))))",
      "all x.((Attend(x) & FromChina(x)) -> -Attend(x))",
      "(Attend(James) & -Attend(James))",
      "(FromChina(Jack) & Attend(Jack))"
    ],
    "goal": "(Attend(Jack) & Attend(Jack))"
  },
  {
    "id": 188,
    "flag": "success",
    "assumptions": [
      "all x.(AttendInPerson(x) -> Registered(x))",
      "all x.(Attend(x) -> ((Attend(x) & -Attend(x)) | (-Attend(x) & Attend(x))))",
      "all x.((Attend(x) & FromChina(x)) -> -Attend(x))",
      "(Attend(James) & -Attend(James))",
      "(FromChina(Jack) & Attend(Jack))"
    ],
    "goal": "Registered(Jack)"
  },
  {
    "id": 629,
    "flag": "success",
    "assumptions": [
      "PoliticalStrategist(DavidHaivri)",
      "all x.exists y.((BornInIsrael(x) & ParentOf(y,x) & Israeli(y)) -> Israeli(x))",
      "exists x.(EmigratedTo(DavidHaivri,America) & BornInIsrael(DavidHaivri) & ParentOf(DavidHaivri,x) & Israeli(x))",
      "exists x.(ZionistLeader(x) & ElectedTo(x,ShomronMunicipalCouncil))",
      "ZionstLeader(DavidHaivri)"
    ],
    "goal": "IsraeliCitizen(DavidHaivri)"
  },
  {
    "id": 630,
    "flag": "success",
    "assumptions": [
      "PoliticalStrategist(DavidHaivri)",
      "all x.exists y.((BornInIsrael(x) & ParentOf(y,x) & Israeli(y)) -> Israeli(x))",
      "exists x.(EmigratedTo(DavidHaivri,America) & BornInIsrael(DavidHaivri) & ParentOf(DavidHaivri,x) & Israeli(x))",
      "exists x.(ZionistLeader(x) & ElectedTo(x,ShomronMunicipalCouncil))",
      "ZionstLeader(DavidHaivri)"
    ],
    "goal": "American(DavidHaivri)"
  },
  {
    "id": 631,
    "flag": "success",
    "assumptions": [
      "PoliticalStrategist(DavidHaivri)",
      "all x.exists y.((BornInIsrael(x) & ParentOf(y,x) & Israeli(y)) -> Israeli(x))",
      "exists x.(EmigratedTo(DavidHaivri,America) & BornInIsrael(DavidHaivri) & ParentOf(DavidHaivri,x) & Israeli(x))",
      "exists x.(ZionistLeader(x) & ElectedTo(x,ShomronMunicipalCouncil))",
      "ZionstLeader(DavidHaivri)"
    ],
    "goal": "ElectedTo(DavidHaivri,ShomronMunicipalCouncil)"
  },
  {
    "id": 3,
    "flag": "success",
    "assumptions": [
      "Has(Mary,Flu)",
      "all x.(Has(x,Flu) -> Has(x,Influenza))",
      "-Has(Susan,Influenza)"
    ],
    "goal": "((Has(Mary,Influenza) & -Has(Susan,Influenza)) | (-Has(Mary,Influenza) & Has(Susan,Influenza)))"
  },
  {
    "id": 120,
    "flag": "success",
    "assumptions": [
      "(British(James) & Lawyer(James))",
      "(Whig(James) & Politician(James) & SatInHouseOfCommons(James))",
      "all x.(British(x) -> European(x))",
      "all x.(Lawyer(x) -> FamiliarWithLaws(x))",
      "[[ERROR]]"
    ],
    "goal": "all x.(Lawyer(x) -> -SatInHouseOfCommons(x))"
  },
  {
    "id": 121,
    "flag": "success",
    "assumptions": [
      "(British(James) & Lawyer(James))",
      "(Whig(James) & Politician(James) & SatInHouseOfCommons(James))",
      "all x.(British(x) -> European(x))",
      "all x.(Lawyer(x) -> FamiliarWithLaws(x))",
      "[[ERROR]]"
    ],
    "goal": "exists x.(European(x) & FamiliarWithLaws(x))"
  },
  {
    "id": 122,
    "flag": "success",
    "assumptions": [
      "(British(James) & Lawyer(James))",
      "(Whig(James) & Politician(James) & SatInHouseOfCommons(James))",
      "all x.(British(x) -> European(x))",
      "all x.(Lawyer(x) -> FamiliarWithLaws(x))",
      "[[ERROR]]"
    ],
    "goal": "SpeakFrench(James)"
  },
  {
    "id": 364,
    "flag": "success",
    "assumptions": [
      "(Novel(BeastsOfPrey) -> (Fantasy(BeastsOfPrey) | ScienceFiction(BeastsOfPrey)))",
      "all x y.((ScienceFiction(x) & Mythological(y) & Creature(y)) -> -About(x,y))",
      "(About(BeastsOfPrey,Shetani) & Creature(Shetani))",
      "Mythological(Shetani)"
    ],
    "goal": "(Fantasy(BeastsOfpPrey) & Novel(BeastsOfPrey))"
  },
  {
    "id": 365,
    "flag": "success",
    "assumptions": [
      "(Novel(BeastsOfPrey) -> (Fantasy(BeastsOfPrey) | ScienceFiction(BeastsOfPrey)))",
      "all x y.((ScienceFiction(x) & Mythological(y) & Creature(y)) -> -About(x,y))",
      "(About(BeastsOfPrey,Shetani) & Creature(Shetani))",
      "Mythological(Shetani)"
    ],
    "goal": "(-ScienceFiction(Beastsofprey) & Novel(BeastsOfPrey))"
  },
  {
    "id": 366,
    "flag": "success",
    "assumptions": [
      "(Novel(BeastsOfPrey) -> (Fantasy(BeastsOfPrey) | ScienceFiction(BeastsOfPrey)))",
      "all x y.((ScienceFiction(x) & Mythological(y) & Creature(y)) -> -About(x,y))",
      "(About(BeastsOfPrey,Shetani) & Creature(Shetani))",
      "Mythological(Shetani)"
    ],
    "goal": "((Mythological(Shetani) & -Creature(Shetani)) | (-Mythological(Shetani) & Creature(Shetani)))"
  },
  {
    "id": 47,
    "flag": "success",
    "assumptions": [
      "(Surname(NameODell) & From(NameODell,ODellBedfordshire))",
      "[[ERROR]]",
      "(Named(AmyODell,NameODell) & NotablePerson(AmyODell) & Named(JackODell,NameODell) & NotablePerson(JackODell) & Named(MatsODell,NameODell) & NotablePerson(MatsODell))",
      "(British(AmyODell) & Singer(AmyODell) & SongWriter(AmyODell))",
      "(English(JackODell) & ToyInventor(JackODell))"
    ],
    "goal": "NotablePerson(JackODell)"
  },
  {
    "id": 48,
    "flag": "success",
    "assumptions": [
      "(Surname(NameODell) & From(NameODell,ODellBedfordshire))",
      "[[ERROR]]",
      "(Named(AmyODell,NameODell) & NotablePerson(AmyODell) & Named(JackODell,NameODell) & NotablePerson(JackODell) & Named(MatsODell,NameODell) & NotablePerson(MatsODell))",
      "(British(AmyODell) & Singer(AmyODell) & SongWriter(AmyODell))",
      "(English(JackODell) & ToyInventor(JackODell))"
    ],
    "goal": "Named(AmyODell,NameODell)"
  },
  {
    "id": 49,
    "flag": "success",
    "assumptions": [
      "(Surname(NameODell) & From(NameODell,ODellBedfordshire))",
      "[[ERROR]]",
      "(Named(AmyODell,NameODell) & NotablePerson(AmyODell) & Named(JackODell,NameODell) & NotablePerson(JackODell) & Named(MatsODell,NameODell) & NotablePerson(MatsODell))",
      "(British(AmyODell) & Singer(AmyODell) & SongWriter(AmyODell))",
      "(English(JackODell) & ToyInventor(JackODell))"
    ],
    "goal": "(English(AmyODell) & ToyInventor(AmyODell))"
  },
  {
    "id": 50,
    "flag": "success",
    "assumptions": [
      "(Surname(NameODell) & From(NameODell,ODellBedfordshire))",
      "[[ERROR]]",
      "(Named(AmyODell,NameODell) & NotablePerson(AmyODell) & Named(JackODell,NameODell) & NotablePerson(JackODell) & Named(MatsODell,NameODell) & NotablePerson(MatsODell))",
      "(British(AmyODell) & Singer(AmyODell) & SongWriter(AmyODell))",
      "(English(JackODell) & ToyInventor(JackODell))"
    ],
    "goal": "(Named(AmyODell,NameODell) & Named(AmyODell,NameODell))"
  },
  {
    "id": 479,
    "flag": "success",
    "assumptions": [
      "all x.(GoByTrain(x) -> -LoseTime(x))",
      "all x.((GoByCar(x) & Meet(x,TrafficJam)) -> LoseTime(x))",
      "all x.(LoseTime(x) -> LateForWork(x))",
      "(FromAndTo(NewHaven,NewYork) & ((GoByTrain(Mary) & -GoByCar(Mary)) | (-GoByTrain(Mary) & GoByCar(Mary))))",
      "LateForWork(Mary)"
    ],
    "goal": "(FromAndTo(NewHaven,NewYork) & GoByTrain(Mary))"
  },
  {
    "id": 480,
    "flag": "success",
    "assumptions": [
      "all x.(GoByTrain(x) -> -LoseTime(x))",
      "all x.((GoByCar(x) & Meet(x,TrafficJam)) -> LoseTime(x))",
      "all x.(LoseTime(x) -> LateForWork(x))",
      "(FromAndTo(NewHaven,NewYork) & ((GoByTrain(Mary) & -GoByCar(Mary)) | (-GoByTrain(Mary) & GoByCar(Mary))))",
      "LateForWork(Mary)"
    ],
    "goal": "(FromAndTo(NewHaven,NewYork) & GoByCar(Mary))"
  },
  {
    "id": 481,
    "flag": "success",
    "assumptions": [
      "all x.(GoByTrain(x) -> -LoseTime(x))",
      "all x.((GoByCar(x) & Meet(x,TrafficJam)) -> LoseTime(x))",
      "all x.(LoseTime(x) -> LateForWork(x))",
      "(FromAndTo(NewHaven,NewYork) & ((GoByTrain(Mary) & -GoByCar(Mary)) | (-GoByTrain(Mary) & GoByCar(Mary))))",
      "LateForWork(Mary)"
    ],
    "goal": "Meet(Mary,TrafficJam)"
  },
  {
    "id": 741,
    "flag": "success",
    "assumptions": [
      "all x.(Hungry(x) -> Uncomfortable(x))",
      "all x.(Uncomfortable(x) -> -Happy(x))"
    ],
    "goal": "all x.(-Hungry(x) -> -Happy(x))"
  },
  {
    "id": 764,
    "flag": "success",
    "assumptions": [
      "all x.(TippedEmployee(x) -> -EntitledTo(x,FederalMinimumWage))",
      "all x.(WhiteCollarWorker(x) -> EntitledTo(x,FederalMinimumWage))",
      "all x.(Lawyer(x) -> WhiteCollarWorker(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "-((Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary)))"
    ],
    "goal": "WhiteCollarWorker(Mary)"
  },
  {
    "id": 765,
    "flag": "success",
    "assumptions": [
      "all x.(TippedEmployee(x) -> -EntitledTo(x,FederalMinimumWage))",
      "all x.(WhiteCollarWorker(x) -> EntitledTo(x,FederalMinimumWage))",
      "all x.(Lawyer(x) -> WhiteCollarWorker(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "-((Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary)))"
    ],
    "goal": "Advocate(Mary)"
  },
  {
    "id": 766,
    "flag": "success",
    "assumptions": [
      "all x.(TippedEmployee(x) -> -EntitledTo(x,FederalMinimumWage))",
      "all x.(WhiteCollarWorker(x) -> EntitledTo(x,FederalMinimumWage))",
      "all x.(Lawyer(x) -> WhiteCollarWorker(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "-((Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary)))"
    ],
    "goal": "-Advocate(Mary)"
  },
  {
    "id": 767,
    "flag": "success",
    "assumptions": [
      "all x.(TippedEmployee(x) -> -EntitledTo(x,FederalMinimumWage))",
      "all x.(WhiteCollarWorker(x) -> EntitledTo(x,FederalMinimumWage))",
      "all x.(Lawyer(x) -> WhiteCollarWorker(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "-((Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary)))"
    ],
    "goal": "((Advocate(Mary) & -TippedEmployee(Mary)) | (-Advocate(Mary) & TippedEmployee(Mary)))"
  },
  {
    "id": 768,
    "flag": "success",
    "assumptions": [
      "all x.(TippedEmployee(x) -> -EntitledTo(x,FederalMinimumWage))",
      "all x.(WhiteCollarWorker(x) -> EntitledTo(x,FederalMinimumWage))",
      "all x.(Lawyer(x) -> WhiteCollarWorker(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "-((Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary)))"
    ],
    "goal": "(-(Advocate(Mary) & EntitledTo(Mary,FederalMinimumWage)) -> -TippedEmployee(Mary))"
  },
  {
    "id": 769,
    "flag": "success",
    "assumptions": [
      "all x.(TippedEmployee(x) -> -EntitledTo(x,FederalMinimumWage))",
      "all x.(WhiteCollarWorker(x) -> EntitledTo(x,FederalMinimumWage))",
      "all x.(Lawyer(x) -> WhiteCollarWorker(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "-((Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary)))"
    ],
    "goal": "(((Advocate(Mary) & -TippedEmployee(Mary)) | (-Advocate(Mary) & TippedEmployee(Mary))) -> Advocate(Mary))"
  },
  {
    "id": 231,
    "flag": "success",
    "assumptions": [
      "BornIn(AsaHoffmann,NewYorkCity)",
      "LiveIn(AsaHoffmann,Manhattan)",
      "ChessPlayer(AsaHoffmann)",
      "[[ERROR]]",
      "all x.((BornIn(x,NewYorkCity) & LiveIn(x,NewYorkCity)) -> NewYorker(x))",
      "all x.(LiveIn(x,Manhattan) -> LiveIn(x,NewYorkCity))"
    ],
    "goal": "NewYorker(AsaHoffmann)"
  },
  {
    "id": 232,
    "flag": "success",
    "assumptions": [
      "BornIn(AsaHoffmann,NewYorkCity)",
      "LiveIn(AsaHoffmann,Manhattan)",
      "ChessPlayer(AsaHoffmann)",
      "[[ERROR]]",
      "all x.((BornIn(x,NewYorkCity) & LiveIn(x,NewYorkCity)) -> NewYorker(x))",
      "all x.(LiveIn(x,Manhattan) -> LiveIn(x,NewYorkCity))"
    ],
    "goal": "GrandMaster(AsaHoffmann)"
  },
  {
    "id": 233,
    "flag": "success",
    "assumptions": [
      "BornIn(AsaHoffmann,NewYorkCity)",
      "LiveIn(AsaHoffmann,Manhattan)",
      "ChessPlayer(AsaHoffmann)",
      "[[ERROR]]",
      "all x.((BornIn(x,NewYorkCity) & LiveIn(x,NewYorkCity)) -> NewYorker(x))",
      "all x.(LiveIn(x,Manhattan) -> LiveIn(x,NewYorkCity))"
    ],
    "goal": "-LiveIn(AsaHoffmann,NewYorkCity)"
  },
  {
    "id": 779,
    "flag": "success",
    "assumptions": [
      "exists x.(Apply(x,SchengenVisa) -> Get(x,SchengenVisa))",
      "all x.(Apply(x,SchengenVisa) -> Provide(x,FinancialGuarantees))",
      "all x.(Provide(x,FinancialGuarantees) -> Request(x,DocumentsFromBank))",
      "all x.(Request(x,DocumentsFromBank) -> -Close(x,BankAccount))",
      "Close(Philip,BankAccount)"
    ],
    "goal": "Get(Philip,SchengenVisa)"
  },
  {
    "id": 780,
    "flag": "success",
    "assumptions": [
      "exists x.(Apply(x,SchengenVisa) -> Get(x,SchengenVisa))",
      "all x.(Apply(x,SchengenVisa) -> Provide(x,FinancialGuarantees))",
      "all x.(Provide(x,FinancialGuarantees) -> Request(x,DocumentsFromBank))",
      "all x.(Request(x,DocumentsFromBank) -> -Close(x,BankAccount))",
      "Close(Philip,BankAccount)"
    ],
    "goal": "(Apply(Philip,SchengenVisa) & Get(Philip,SchengenVisa))"
  },
  {
    "id": 781,
    "flag": "success",
    "assumptions": [
      "exists x.(Apply(x,SchengenVisa) -> Get(x,SchengenVisa))",
      "all x.(Apply(x,SchengenVisa) -> Provide(x,FinancialGuarantees))",
      "all x.(Provide(x,FinancialGuarantees) -> Request(x,DocumentsFromBank))",
      "all x.(Request(x,DocumentsFromBank) -> -Close(x,BankAccount))",
      "Close(Philip,BankAccount)"
    ],
    "goal": "((-Request(Philip,DocumentsFromBank) & -Get(x,SchengenVisa)) -> Apply(x,SchengenVisa))"
  },
  {
    "id": 740,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "exists x y.(Anxiety(x) & Terror(y) & LeadTo(x,y))"
    ],
    "goal": "all x y.(Fear(x) -> -(Terror(y) & LeadTo(x,y)))"
  },
  {
    "id": 594,
    "flag": "success",
    "assumptions": [
      "all x.(((((((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & -Erie(x)) | (-(((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & Erie(x))) & -Ontario(x)) | (-(((((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & -Erie(x)) | (-(((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & Erie(x))) & Ontario(x)))",
      "all x.(((Erie(x) & MajorSettlement(x)) -> In(x,NY)) | In(x,PA) | In(x,OH) | In(x,MI))",
      "(StateOf(NY,US) & StateOf(PA,US) & StateOf(OH,US) & StateOf(MI,US))",
      "StateOf(ON,Canada)",
      "exists x.(Huron(x) & MajorSettlement(x) & In(x,ON))",
      "all x y.(StateOf(x,y) -> In(x,y))",
      "In(Us,NorthAmerica)",
      "all x.(GreatLake(x) -> FormAtEndOf(x,LastGlacialPeriod))"
    ],
    "goal": "exists x y.(Erie(y) & MajorSettlementOf(x,y))"
  },
  {
    "id": 595,
    "flag": "success",
    "assumptions": [
      "all x.(((((((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & -Erie(x)) | (-(((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & Erie(x))) & -Ontario(x)) | (-(((((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & -Erie(x)) | (-(((((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & -Huron(x)) | (-(((GreatLake(x) -> Superior(x)) & -Michigan(x)) | (-(GreatLake(x) -> Superior(x)) & Michigan(x))) & Huron(x))) & Erie(x))) & Ontario(x)))",
      "all x.(((Erie(x) & MajorSettlement(x)) -> In(x,NY)) | In(x,PA) | In(x,OH) | In(x,MI))",
      "(StateOf(NY,US) & StateOf(PA,US) & StateOf(OH,US) & StateOf(MI,US))",
      "StateOf(ON,Canada)",
      "exists x.(Huron(x) & MajorSettlement(x) & In(x,ON))",
      "all x y.(StateOf(x,y) -> In(x,y))",
      "In(Us,NorthAmerica)",
      "all x.(GreatLake(x) -> FormAtEndOf(x,LastGlacialPeriod))"
    ],
    "goal": "exists x.(GreatLake(x) & -FormAtEndOf(x,LastGlacialPeriod))"
  },
  {
    "id": 831,
    "flag": "success",
    "assumptions": [
      "all x.((Professional(x) & Defender(x)) -> (Professional(x) & SoccerPlayer(x)))",
      "all x.((Professional(x) & SoccerPlayer(x)) -> -(Professional(x) & BasketballPlayer(x)))",
      "[[ERROR]]",
      "all x.(NBAPlayer(x) -> (Professional(x) & BasketballPlayer(x)))",
      "NBAPlayer(StephenCurry)"
    ],
    "goal": "(Professional(StephenCurry) & BasketballPlayer(StephenCurry))"
  },
  {
    "id": 832,
    "flag": "success",
    "assumptions": [
      "all x.((Professional(x) & Defender(x)) -> (Professional(x) & SoccerPlayer(x)))",
      "all x.((Professional(x) & SoccerPlayer(x)) -> -(Professional(x) & BasketballPlayer(x)))",
      "[[ERROR]]",
      "all x.(NBAPlayer(x) -> (Professional(x) & BasketballPlayer(x)))",
      "NBAPlayer(StephenCurry)"
    ],
    "goal": "(Professional(StephenCurry) & CenterBack(StephenCurry))"
  },
  {
    "id": 833,
    "flag": "success",
    "assumptions": [
      "all x.((Professional(x) & Defender(x)) -> (Professional(x) & SoccerPlayer(x)))",
      "all x.((Professional(x) & SoccerPlayer(x)) -> -(Professional(x) & BasketballPlayer(x)))",
      "[[ERROR]]",
      "all x.(NBAPlayer(x) -> (Professional(x) & BasketballPlayer(x)))",
      "NBAPlayer(StephenCurry)"
    ],
    "goal": "-(Professional(StephenCurry) & CenterBack(StephenCurry))"
  },
  {
    "id": 89,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "Colleagues(ThomasGilovich,JustinKruger)",
      "PhilosophyOfMind(NaiveCynicism)"
    ],
    "goal": "Proposed(ThomasGilovich,NaiveCynicism)"
  },
  {
    "id": 90,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "Colleagues(ThomasGilovich,JustinKruger)",
      "PhilosophyOfMind(NaiveCynicism)"
    ],
    "goal": "exists x.(Proposed(JustinKruger,x) & PhilosophyOfMind(x))"
  },
  {
    "id": 91,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "Colleagues(ThomasGilovich,JustinKruger)",
      "PhilosophyOfMind(NaiveCynicism)"
    ],
    "goal": "exists x.(WorkedOn(ThomasGilovich,x) & PhilosophyOfMind(x))"
  },
  {
    "id": 382,
    "flag": "success",
    "assumptions": [
      "(AwardedTo(TuringAward,DonaldKnuth) & AwardedTo(TuringAward,MarvinMinsky) & AwardedTo(TuringAward,RichardHamming) & AwardedTo(TuringAward,JohnMccarthy))",
      "ContributedTo(DonaldKnuth,AnalysisOfAlgorithms)",
      "ContributedTo(MarvinMinsky,ArtificialIntelligence)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "ContributedTo(JohnMccarthy,ArtificialIntelligence)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 383,
    "flag": "success",
    "assumptions": [
      "(AwardedTo(TuringAward,DonaldKnuth) & AwardedTo(TuringAward,MarvinMinsky) & AwardedTo(TuringAward,RichardHamming) & AwardedTo(TuringAward,JohnMccarthy))",
      "ContributedTo(DonaldKnuth,AnalysisOfAlgorithms)",
      "ContributedTo(MarvinMinsky,ArtificialIntelligence)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "ContributedTo(JohnMccarthy,ArtificialIntelligence)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 384,
    "flag": "success",
    "assumptions": [
      "(AwardedTo(TuringAward,DonaldKnuth) & AwardedTo(TuringAward,MarvinMinsky) & AwardedTo(TuringAward,RichardHamming) & AwardedTo(TuringAward,JohnMccarthy))",
      "ContributedTo(DonaldKnuth,AnalysisOfAlgorithms)",
      "ContributedTo(MarvinMinsky,ArtificialIntelligence)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "ContributedTo(JohnMccarthy,ArtificialIntelligence)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 385,
    "flag": "success",
    "assumptions": [
      "(AwardedTo(TuringAward,DonaldKnuth) & AwardedTo(TuringAward,MarvinMinsky) & AwardedTo(TuringAward,RichardHamming) & AwardedTo(TuringAward,JohnMccarthy))",
      "ContributedTo(DonaldKnuth,AnalysisOfAlgorithms)",
      "ContributedTo(MarvinMinsky,ArtificialIntelligence)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "ContributedTo(JohnMccarthy,ArtificialIntelligence)"
    ],
    "goal": "all x.(AwardedTo(TuringAward,x) -> -ContributedTo(x,NumericalMethods))"
  },
  {
    "id": 1219,
    "flag": "success",
    "assumptions": [
      "all x.((LeetcodeProblems(x) & Easy(x)) -> -HaveAnACRateLowerThan(x,Percent20))",
      "all x.((LeetcodeProblems(x) & RecommendedTo(x,Novices)) -> Easy(x))",
      "all x.(((LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & -StarredByMoreThan(x,Num1000)) | (-(LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & StarredByMoreThan(x,Num1000)))",
      "all x.((LeetcodeProblems(x) & Hard(x)) -> StarredByMoreThan(x,Num1000))",
      "all x.((LeetcodeProblems(x) & PublishedAfter(x,Yr2022)) -> -StarredByMoreThan(x,Num1000))",
      "(-(RecommendedTo(Twosum,Novices) & Hard(Twosum)) & LeetcodeProblems(Twosum))",
      "(-((StarredByMoreThan(Foursum,Num1000) & -PublishedAfter(Foursum,Yr2022)) | (-StarredByMoreThan(Foursum,Num1000) & PublishedAfter(Foursum,Yr2022))) & LeetcodeProblems(Twosum))"
    ],
    "goal": "(LeetcodeProblems(Twosum) & Easy(Twosum))"
  },
  {
    "id": 1220,
    "flag": "success",
    "assumptions": [
      "all x.((LeetcodeProblems(x) & Easy(x)) -> -HaveAnACRateLowerThan(x,Percent20))",
      "all x.((LeetcodeProblems(x) & RecommendedTo(x,Novices)) -> Easy(x))",
      "all x.(((LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & -StarredByMoreThan(x,Num1000)) | (-(LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & StarredByMoreThan(x,Num1000)))",
      "all x.((LeetcodeProblems(x) & Hard(x)) -> StarredByMoreThan(x,Num1000))",
      "all x.((LeetcodeProblems(x) & PublishedAfter(x,Yr2022)) -> -StarredByMoreThan(x,Num1000))",
      "(-(RecommendedTo(Twosum,Novices) & Hard(Twosum)) & LeetcodeProblems(Twosum))",
      "(-((StarredByMoreThan(Foursum,Num1000) & -PublishedAfter(Foursum,Yr2022)) | (-StarredByMoreThan(Foursum,Num1000) & PublishedAfter(Foursum,Yr2022))) & LeetcodeProblems(Twosum))"
    ],
    "goal": "-(LeetcodeProblems(Twosum) & Easy(Twosum))"
  },
  {
    "id": 1221,
    "flag": "success",
    "assumptions": [
      "all x.((LeetcodeProblems(x) & Easy(x)) -> -HaveAnACRateLowerThan(x,Percent20))",
      "all x.((LeetcodeProblems(x) & RecommendedTo(x,Novices)) -> Easy(x))",
      "all x.(((LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & -StarredByMoreThan(x,Num1000)) | (-(LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & StarredByMoreThan(x,Num1000)))",
      "all x.((LeetcodeProblems(x) & Hard(x)) -> StarredByMoreThan(x,Num1000))",
      "all x.((LeetcodeProblems(x) & PublishedAfter(x,Yr2022)) -> -StarredByMoreThan(x,Num1000))",
      "(-(RecommendedTo(Twosum,Novices) & Hard(Twosum)) & LeetcodeProblems(Twosum))",
      "(-((StarredByMoreThan(Foursum,Num1000) & -PublishedAfter(Foursum,Yr2022)) | (-StarredByMoreThan(Foursum,Num1000) & PublishedAfter(Foursum,Yr2022))) & LeetcodeProblems(Twosum))"
    ],
    "goal": "(RecommendedTo(Foursum,Novices) | Hard(Foursum))"
  },
  {
    "id": 1222,
    "flag": "success",
    "assumptions": [
      "all x.((LeetcodeProblems(x) & Easy(x)) -> -HaveAnACRateLowerThan(x,Percent20))",
      "all x.((LeetcodeProblems(x) & RecommendedTo(x,Novices)) -> Easy(x))",
      "all x.(((LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & -StarredByMoreThan(x,Num1000)) | (-(LeetcodeProblems(x) -> HaveAnACRateLowerThan(x,Percent20)) & StarredByMoreThan(x,Num1000)))",
      "all x.((LeetcodeProblems(x) & Hard(x)) -> StarredByMoreThan(x,Num1000))",
      "all x.((LeetcodeProblems(x) & PublishedAfter(x,Yr2022)) -> -StarredByMoreThan(x,Num1000))",
      "(-(RecommendedTo(Twosum,Novices) & Hard(Twosum)) & LeetcodeProblems(Twosum))",
      "(-((StarredByMoreThan(Foursum,Num1000) & -PublishedAfter(Foursum,Yr2022)) | (-StarredByMoreThan(Foursum,Num1000) & PublishedAfter(Foursum,Yr2022))) & LeetcodeProblems(Twosum))"
    ],
    "goal": "(-RecommendedTo(Foursum,Novices) & -Hard(Foursum))"
  },
  {
    "id": 318,
    "flag": "success",
    "assumptions": [
      "(Song(ShowYourLove) & RecordedBy(ShowYourLove,BToB4u) & SouthKorean(BToB4u) & BoyBand(BToB4u))",
      "(ExtendedPlay(Inside) & LeadSingleOf(ShowYourLove,Inside))",
      "Contains(ShowYourLove,HopefulMessage)",
      "(Member(Hyunsik,Btob4u) & Wrote(Hyunsik,ShowYourLove))",
      "Have(ShowYourLove,MusicVideo)"
    ],
    "goal": "all x y.(Wrote(x,ShowYourLove) -> -(BoyBand(y) & MemberOf(x,y)))"
  },
  {
    "id": 319,
    "flag": "success",
    "assumptions": [
      "(Song(ShowYourLove) & RecordedBy(ShowYourLove,BToB4u) & SouthKorean(BToB4u) & BoyBand(BToB4u))",
      "(ExtendedPlay(Inside) & LeadSingleOf(ShowYourLove,Inside))",
      "Contains(ShowYourLove,HopefulMessage)",
      "(Member(Hyunsik,Btob4u) & Wrote(Hyunsik,ShowYourLove))",
      "Have(ShowYourLove,MusicVideo)"
    ],
    "goal": "exists x.(LeadSingleOf(x,Inside) & Contains(x,HopefulMessage))"
  },
  {
    "id": 320,
    "flag": "success",
    "assumptions": [
      "(Song(ShowYourLove) & RecordedBy(ShowYourLove,BToB4u) & SouthKorean(BToB4u) & BoyBand(BToB4u))",
      "(ExtendedPlay(Inside) & LeadSingleOf(ShowYourLove,Inside))",
      "Contains(ShowYourLove,HopefulMessage)",
      "(Member(Hyunsik,Btob4u) & Wrote(Hyunsik,ShowYourLove))",
      "Have(ShowYourLove,MusicVideo)"
    ],
    "goal": "Korean(Hyunsik)"
  },
  {
    "id": 734,
    "flag": "success",
    "assumptions": [
      "all x.(Table(x) -> Round(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 711,
    "flag": "success",
    "assumptions": [
      "all x.(JuvenileDelinquent(x) -> Commited(x,Crime))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1084,
    "flag": "success",
    "assumptions": [
      "all x.(MindReading(x) & ((BrainReading(x) & -BrainDecoding(x)) | (-BrainReading(x) & BrainDecoding(x))))",
      "all x.((MindReading(x) & BrainDecoding(x)) -> ExtractingFrom(x,Information,BOLDSignals))",
      "all x.((MindReading(x) & ExtractingFrom(x,Information,BOLDSignals)) -> Uses(x,StatisticalPatternAnalysis))",
      "all x.(NovelWriting(x) -> -Uses(x,StatisticalPatternAnalysis))",
      "((MindReading(MultivoxelPatternAnalysis) & -Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & BrainReading(MultivoxelPatternAnalysis)) -> (-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -BrainDecoding(MultivoxelPatternAnalysis)))",
      "MindReading(MultivoxelPatternAnalysis)"
    ],
    "goal": "(MindReading(MultivoxelPatternAnalysis) & BrainDecoding(MultivoxelPatternAnalysis))"
  },
  {
    "id": 1085,
    "flag": "success",
    "assumptions": [
      "all x.(MindReading(x) & ((BrainReading(x) & -BrainDecoding(x)) | (-BrainReading(x) & BrainDecoding(x))))",
      "all x.((MindReading(x) & BrainDecoding(x)) -> ExtractingFrom(x,Information,BOLDSignals))",
      "all x.((MindReading(x) & ExtractingFrom(x,Information,BOLDSignals)) -> Uses(x,StatisticalPatternAnalysis))",
      "all x.(NovelWriting(x) -> -Uses(x,StatisticalPatternAnalysis))",
      "((MindReading(MultivoxelPatternAnalysis) & -Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & BrainReading(MultivoxelPatternAnalysis)) -> (-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -BrainDecoding(MultivoxelPatternAnalysis)))",
      "MindReading(MultivoxelPatternAnalysis)"
    ],
    "goal": "(MindReading(MultivoxelPatternAnalysis) & NovelWriting(MultivoxelPatternAnalysis))"
  },
  {
    "id": 1086,
    "flag": "success",
    "assumptions": [
      "all x.(MindReading(x) & ((BrainReading(x) & -BrainDecoding(x)) | (-BrainReading(x) & BrainDecoding(x))))",
      "all x.((MindReading(x) & BrainDecoding(x)) -> ExtractingFrom(x,Information,BOLDSignals))",
      "all x.((MindReading(x) & ExtractingFrom(x,Information,BOLDSignals)) -> Uses(x,StatisticalPatternAnalysis))",
      "all x.(NovelWriting(x) -> -Uses(x,StatisticalPatternAnalysis))",
      "((MindReading(MultivoxelPatternAnalysis) & -Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & BrainReading(MultivoxelPatternAnalysis)) -> (-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -BrainDecoding(MultivoxelPatternAnalysis)))",
      "MindReading(MultivoxelPatternAnalysis)"
    ],
    "goal": "-(Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & NovelWriting(MultivoxelPatternAnalysis))"
  },
  {
    "id": 1087,
    "flag": "success",
    "assumptions": [
      "all x.(MindReading(x) & ((BrainReading(x) & -BrainDecoding(x)) | (-BrainReading(x) & BrainDecoding(x))))",
      "all x.((MindReading(x) & BrainDecoding(x)) -> ExtractingFrom(x,Information,BOLDSignals))",
      "all x.((MindReading(x) & ExtractingFrom(x,Information,BOLDSignals)) -> Uses(x,StatisticalPatternAnalysis))",
      "all x.(NovelWriting(x) -> -Uses(x,StatisticalPatternAnalysis))",
      "((MindReading(MultivoxelPatternAnalysis) & -Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & BrainReading(MultivoxelPatternAnalysis)) -> (-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -BrainDecoding(MultivoxelPatternAnalysis)))",
      "MindReading(MultivoxelPatternAnalysis)"
    ],
    "goal": "-(Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) | NovelWriting(MultivoxelPatternAnalysis))"
  },
  {
    "id": 1088,
    "flag": "success",
    "assumptions": [
      "all x.(MindReading(x) & ((BrainReading(x) & -BrainDecoding(x)) | (-BrainReading(x) & BrainDecoding(x))))",
      "all x.((MindReading(x) & BrainDecoding(x)) -> ExtractingFrom(x,Information,BOLDSignals))",
      "all x.((MindReading(x) & ExtractingFrom(x,Information,BOLDSignals)) -> Uses(x,StatisticalPatternAnalysis))",
      "all x.(NovelWriting(x) -> -Uses(x,StatisticalPatternAnalysis))",
      "((MindReading(MultivoxelPatternAnalysis) & -Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & BrainReading(MultivoxelPatternAnalysis)) -> (-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -BrainDecoding(MultivoxelPatternAnalysis)))",
      "MindReading(MultivoxelPatternAnalysis)"
    ],
    "goal": "((-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -Writing(MultivoxelPatternAnalysis,ANovel)) | (--Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & Writing(MultivoxelPatternAnalysis,ANovel)))"
  },
  {
    "id": 1089,
    "flag": "success",
    "assumptions": [
      "all x.(MindReading(x) & ((BrainReading(x) & -BrainDecoding(x)) | (-BrainReading(x) & BrainDecoding(x))))",
      "all x.((MindReading(x) & BrainDecoding(x)) -> ExtractingFrom(x,Information,BOLDSignals))",
      "all x.((MindReading(x) & ExtractingFrom(x,Information,BOLDSignals)) -> Uses(x,StatisticalPatternAnalysis))",
      "all x.(NovelWriting(x) -> -Uses(x,StatisticalPatternAnalysis))",
      "((MindReading(MultivoxelPatternAnalysis) & -Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & BrainReading(MultivoxelPatternAnalysis)) -> (-Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) & -BrainDecoding(MultivoxelPatternAnalysis)))",
      "MindReading(MultivoxelPatternAnalysis)"
    ],
    "goal": "((MindReading(MultivoxelPatternAnalysis) & NovelWriting(MultivoxelPatternAnalysis)) -> (Uses(MultivoxelPatternAnalysis,StatisticalPatternAnalysis) | -NovelWriting(MultivoxelPatternAnalysis)))"
  },
  {
    "id": 605,
    "flag": "success",
    "assumptions": [
      "all x.(RoomFor(x,Dessert) -> RoomFor(x,Broccoli))",
      "all x.(AtLuisParty(x) -> RoomFor(x,Dessert))",
      "-RoomFor(Mauricia,Broccoli)",
      "(AtLuisParty(Allison) & FirstDinnerPartyFor(Luisparty,Allison))",
      "(RoomFor(Gustave,Broccoli) & RoomFor(Gustave,Asparagus))",
      "(Vegetable(Broccoli) & Vegetable(Asparagus))"
    ],
    "goal": "RoomFor(Allison,Broccoli)"
  },
  {
    "id": 606,
    "flag": "success",
    "assumptions": [
      "all x.(RoomFor(x,Dessert) -> RoomFor(x,Broccoli))",
      "all x.(AtLuisParty(x) -> RoomFor(x,Dessert))",
      "-RoomFor(Mauricia,Broccoli)",
      "(AtLuisParty(Allison) & FirstDinnerPartyFor(Luisparty,Allison))",
      "(RoomFor(Gustave,Broccoli) & RoomFor(Gustave,Asparagus))",
      "(Vegetable(Broccoli) & Vegetable(Asparagus))"
    ],
    "goal": "AtLuisParty(Mauricia)"
  },
  {
    "id": 607,
    "flag": "success",
    "assumptions": [
      "all x.(RoomFor(x,Dessert) -> RoomFor(x,Broccoli))",
      "all x.(AtLuisParty(x) -> RoomFor(x,Dessert))",
      "-RoomFor(Mauricia,Broccoli)",
      "(AtLuisParty(Allison) & FirstDinnerPartyFor(Luisparty,Allison))",
      "(RoomFor(Gustave,Broccoli) & RoomFor(Gustave,Asparagus))",
      "(Vegetable(Broccoli) & Vegetable(Asparagus))"
    ],
    "goal": "RoomFor(Gustave,Dessert)"
  },
  {
    "id": 123,
    "flag": "success",
    "assumptions": [
      "(American(ImagineDragon) & RockBand(ImagineDragon))",
      "LeadSinger(ImagineDragon,Dan)",
      "SongWriter(Dan)",
      "all x y.(LeadSinger(x,y) -> Singer(y))",
      "all x.(Singer(x) -> Musician(x))",
      "PopularSingle(ImagineDragon,Demons)",
      "[[ERROR]]"
    ],
    "goal": "exists x y.(RockBand(x) & LeadSinger(x,y) & SongWriter(y))"
  },
  {
    "id": 124,
    "flag": "success",
    "assumptions": [
      "(American(ImagineDragon) & RockBand(ImagineDragon))",
      "LeadSinger(ImagineDragon,Dan)",
      "SongWriter(Dan)",
      "all x y.(LeadSinger(x,y) -> Singer(y))",
      "all x.(Singer(x) -> Musician(x))",
      "PopularSingle(ImagineDragon,Demons)",
      "[[ERROR]]"
    ],
    "goal": "-Musician(Dan)"
  },
  {
    "id": 125,
    "flag": "success",
    "assumptions": [
      "(American(ImagineDragon) & RockBand(ImagineDragon))",
      "LeadSinger(ImagineDragon,Dan)",
      "SongWriter(Dan)",
      "all x y.(LeadSinger(x,y) -> Singer(y))",
      "all x.(Singer(x) -> Musician(x))",
      "PopularSingle(ImagineDragon,Demons)",
      "[[ERROR]]"
    ],
    "goal": "BillboardHot100(Demons)"
  },
  {
    "id": 1310,
    "flag": "success",
    "assumptions": [
      "all x.(Philosopher(x) -> Reason(x))",
      "exists x.(Sophist(x) & Reason(x))",
      "all x.(Reason(x) -> CanDistinguishFrom(x,Truth,Falsehood))",
      "all x.(CanDistinguishFrom(x,Truth,Falsehood) -> -MorallyPerfect(x))",
      "MorallyPerfect(TheisticGod)"
    ],
    "goal": "Sophist(TheisticGod)"
  },
  {
    "id": 1311,
    "flag": "success",
    "assumptions": [
      "all x.(Philosopher(x) -> Reason(x))",
      "exists x.(Sophist(x) & Reason(x))",
      "all x.(Reason(x) -> CanDistinguishFrom(x,Truth,Falsehood))",
      "all x.(CanDistinguishFrom(x,Truth,Falsehood) -> -MorallyPerfect(x))",
      "MorallyPerfect(TheisticGod)"
    ],
    "goal": "(Sophist(TheisticGod) & Philosopher(TheisticGod))"
  },
  {
    "id": 1312,
    "flag": "success",
    "assumptions": [
      "all x.(Philosopher(x) -> Reason(x))",
      "exists x.(Sophist(x) & Reason(x))",
      "all x.(Reason(x) -> CanDistinguishFrom(x,Truth,Falsehood))",
      "all x.(CanDistinguishFrom(x,Truth,Falsehood) -> -MorallyPerfect(x))",
      "MorallyPerfect(TheisticGod)"
    ],
    "goal": "(Philosopher(TheisticGod) -> -Sophist(TheisticGod))"
  },
  {
    "id": 458,
    "flag": "success",
    "assumptions": [
      "(CommonUtilities(Water) & CommonUtilities(Electricity) & CommonUtilities(Gas) & CommonUtilities(Heating))",
      "exists x.(Apartment(x) & Cover(x,Water) & Cover(x,Electricity))",
      "all x.(Apartment(x) & LiveIn(Susan,x) & Cover(x,Water) & Cover(x,Electricity) & Cover(x,Gas) & Cover(x,Heating))",
      "all x.(Apartment(x) & LiveIn(Ava,x) & -Cover(x,Water) & -Cover(x,Electricity) & -Cover(x,Gas) & -Cover(x,Heating))",
      "all x.(Apartment(x) & LiveIn(Noah,x) & -Cover(x,Heating))"
    ],
    "goal": "all x.(Apartment(x) & LiveIn(Noah,x) & -Cover(x,Water))"
  },
  {
    "id": 459,
    "flag": "success",
    "assumptions": [
      "(CommonUtilities(Water) & CommonUtilities(Electricity) & CommonUtilities(Gas) & CommonUtilities(Heating))",
      "exists x.(Apartment(x) & Cover(x,Water) & Cover(x,Electricity))",
      "all x.(Apartment(x) & LiveIn(Susan,x) & Cover(x,Water) & Cover(x,Electricity) & Cover(x,Gas) & Cover(x,Heating))",
      "all x.(Apartment(x) & LiveIn(Ava,x) & -Cover(x,Water) & -Cover(x,Electricity) & -Cover(x,Gas) & -Cover(x,Heating))",
      "all x.(Apartment(x) & LiveIn(Noah,x) & -Cover(x,Heating))"
    ],
    "goal": "(-Cover(Noah,Heating) & -Cover(Ava,Heating))"
  },
  {
    "id": 460,
    "flag": "success",
    "assumptions": [
      "(CommonUtilities(Water) & CommonUtilities(Electricity) & CommonUtilities(Gas) & CommonUtilities(Heating))",
      "exists x.(Apartment(x) & Cover(x,Water) & Cover(x,Electricity))",
      "all x.(Apartment(x) & LiveIn(Susan,x) & Cover(x,Water) & Cover(x,Electricity) & Cover(x,Gas) & Cover(x,Heating))",
      "all x.(Apartment(x) & LiveIn(Ava,x) & -Cover(x,Water) & -Cover(x,Electricity) & -Cover(x,Gas) & -Cover(x,Heating))",
      "all x.(Apartment(x) & LiveIn(Noah,x) & -Cover(x,Heating))"
    ],
    "goal": "all x.(Apartment(x) & LiveIn(Susan,x) & Cover(x,Water))"
  },
  {
    "id": 799,
    "flag": "success",
    "assumptions": [
      "all x.(Clothes(x) -> Product(x))",
      "all x.(Product(x) -> -Perfect(x))",
      "all x.(Dress(x) -> Clothes(x))",
      "all x.(Skirt(x) -> Dress(x))",
      "((Clothes(FabricBundle) -> Perfect(FabricBundle)) & Dress(FabricBundle))"
    ],
    "goal": "Perfect(Fabricbundle)"
  },
  {
    "id": 800,
    "flag": "success",
    "assumptions": [
      "all x.(Clothes(x) -> Product(x))",
      "all x.(Product(x) -> -Perfect(x))",
      "all x.(Dress(x) -> Clothes(x))",
      "all x.(Skirt(x) -> Dress(x))",
      "((Clothes(FabricBundle) -> Perfect(FabricBundle)) & Dress(FabricBundle))"
    ],
    "goal": "Skirt(Fabricbundle)"
  },
  {
    "id": 801,
    "flag": "success",
    "assumptions": [
      "all x.(Clothes(x) -> Product(x))",
      "all x.(Product(x) -> -Perfect(x))",
      "all x.(Dress(x) -> Clothes(x))",
      "all x.(Skirt(x) -> Dress(x))",
      "((Clothes(FabricBundle) -> Perfect(FabricBundle)) & Dress(FabricBundle))"
    ],
    "goal": "-Skirt(Fabricbundle)"
  },
  {
    "id": 168,
    "flag": "success",
    "assumptions": [
      "all x.(Pet(x) -> Animal(x))",
      "all x.(Pet(x) -> ((Dog(x) & -Cat(x)) | (-Dog(x) & Cat(x))))",
      "all x y.((Pet(y) & OwnedBy(x,y)) -> Cares(x,y))",
      "[[ERROR]]",
      "all x y.((Pet(x) & Naughty(x) & OwnedBy(x,y)) -> -Liked(x,y))",
      "(OwnedBy(Leo,Charlie) & Pet(Leo) & Dog(Leo) & Naughty(Leo))"
    ],
    "goal": "Animal(Leo)"
  },
  {
    "id": 169,
    "flag": "success",
    "assumptions": [
      "all x.(Pet(x) -> Animal(x))",
      "all x.(Pet(x) -> ((Dog(x) & -Cat(x)) | (-Dog(x) & Cat(x))))",
      "all x y.((Pet(y) & OwnedBy(x,y)) -> Cares(x,y))",
      "[[ERROR]]",
      "all x y.((Pet(x) & Naughty(x) & OwnedBy(x,y)) -> -Liked(x,y))",
      "(OwnedBy(Leo,Charlie) & Pet(Leo) & Dog(Leo) & Naughty(Leo))"
    ],
    "goal": "(-Liked(Leo,Charlie) & -Cares(Charlie,Leo))"
  },
  {
    "id": 170,
    "flag": "success",
    "assumptions": [
      "all x.(Pet(x) -> Animal(x))",
      "all x.(Pet(x) -> ((Dog(x) & -Cat(x)) | (-Dog(x) & Cat(x))))",
      "all x y.((Pet(y) & OwnedBy(x,y)) -> Cares(x,y))",
      "[[ERROR]]",
      "all x y.((Pet(x) & Naughty(x) & OwnedBy(x,y)) -> -Liked(x,y))",
      "(OwnedBy(Leo,Charlie) & Pet(Leo) & Dog(Leo) & Naughty(Leo))"
    ],
    "goal": "all x.(Dog(x) -> -Naughty(x))"
  },
  {
    "id": 723,
    "flag": "success",
    "assumptions": [
      "all x.(Surprise(x) -> ((Fun(x) & -Dreadful(x)) | (-Fun(x) & Dreadful(x))))",
      "all x.(Scare(x) -> Surprise(x))"
    ],
    "goal": "all x.(Scare(x) -> Fun(x))"
  },
  {
    "id": 66,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "exists x.(Won(x,HugoAward) & Book(x) & WrittenBy(x,CixinLiu))",
      "all x.((Book(x) & AboutFuture(x)) -> FowardLooking(x))",
      "[[ERROR]]",
      "AboutFuture(ThreeBodyProblem)"
    ],
    "goal": "Won(ThreeBodyProblem,HugoAward)"
  },
  {
    "id": 67,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "exists x.(Won(x,HugoAward) & Book(x) & WrittenBy(x,CixinLiu))",
      "all x.((Book(x) & AboutFuture(x)) -> FowardLooking(x))",
      "[[ERROR]]",
      "AboutFuture(ThreeBodyProblem)"
    ],
    "goal": "AboutFuture(ThreeBodyProblem)"
  },
  {
    "id": 68,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "exists x.(Won(x,HugoAward) & Book(x) & WrittenBy(x,CixinLiu))",
      "all x.((Book(x) & AboutFuture(x)) -> FowardLooking(x))",
      "[[ERROR]]",
      "AboutFuture(ThreeBodyProblem)"
    ],
    "goal": "WrittenBy(ThreeBodyProblem,CixinLiu)"
  },
  {
    "id": 1184,
    "flag": "success",
    "assumptions": [
      "exists x.(LateNightPerson(x) & EarlyMorningPerson(x))",
      "all x.(EarlyMorningPerson(x) -> Have(x,EarlyMorningHabit))",
      "all x.(Have(x,EarlyMorningHabit) -> GetUpEarly(x))",
      "all x.(GetUpEarly(x) -> CatchTheSunrise(x))",
      "-CatchTheSunrise(James)"
    ],
    "goal": "LateNightPerson(James)"
  },
  {
    "id": 1185,
    "flag": "success",
    "assumptions": [
      "exists x.(LateNightPerson(x) & EarlyMorningPerson(x))",
      "all x.(EarlyMorningPerson(x) -> Have(x,EarlyMorningHabit))",
      "all x.(Have(x,EarlyMorningHabit) -> GetUpEarly(x))",
      "all x.(GetUpEarly(x) -> CatchTheSunrise(x))",
      "-CatchTheSunrise(James)"
    ],
    "goal": "(LateNightPerson(James) & EarlyMorningPerson(James))"
  },
  {
    "id": 1186,
    "flag": "success",
    "assumptions": [
      "exists x.(LateNightPerson(x) & EarlyMorningPerson(x))",
      "all x.(EarlyMorningPerson(x) -> Have(x,EarlyMorningHabit))",
      "all x.(Have(x,EarlyMorningHabit) -> GetUpEarly(x))",
      "all x.(GetUpEarly(x) -> CatchTheSunrise(x))",
      "-CatchTheSunrise(James)"
    ],
    "goal": "(EarlyMorningPerson(James) -> LateNightPerson(James))"
  },
  {
    "id": 716,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.exists y.((Dog(x) & OnRoof(x)) -> GoWrong(y))"
    ],
    "goal": "exists x.GoWrong(x)"
  },
  {
    "id": 41,
    "flag": "success",
    "assumptions": [
      "all x.(Elephantopus(x) -> (Genus(x,Perennialplants) & BelongTo(x,Daisyfamily)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))"
    ],
    "goal": "exists x y.(Elephantopus(x) & In(x,Africa) & Elephantopus(y) & In(y,Africa))"
  },
  {
    "id": 42,
    "flag": "success",
    "assumptions": [
      "all x.(Elephantopus(x) -> (Genus(x,Perennialplants) & BelongTo(x,Daisyfamily)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))"
    ],
    "goal": "all x.(Elephantopus(x) -> -NativeTo(x,Southeasternunitedstates))"
  },
  {
    "id": 43,
    "flag": "success",
    "assumptions": [
      "all x.(Elephantopus(x) -> (Genus(x,Perennialplants) & BelongTo(x,Daisyfamily)))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))"
    ],
    "goal": "all x.(Elephantopus(x) -> TraditionalMedicine(x))"
  },
  {
    "id": 1231,
    "flag": "success",
    "assumptions": [
      "all x.(YaleDormitory(x) -> LocatedOn(x,YaleCampus))",
      "all x.((YaleBuildings(x) & ManagedBy(x,YaleHousing)) -> YaleDormitory(x))",
      "all x.((YaleBuildings(x) & OperatedBy(x,YaleHousing)) -> ManagedBy(x,YaleHousing))",
      "[[ERROR]]",
      "all x.((YaleBuildings(x) & LocatedOn(x,YaleCampus)) -> OpenToStudents(x))",
      "(YaleBuildings(Harkness) & ((OperatedBy(x,Harkness) & -LocatedOn(Harkness,YaleCampus)) | (-OperatedBy(x,Harkness) & LocatedOn(Harkness,YaleCampus))))"
    ],
    "goal": "YaleDormitory(Harkness)"
  },
  {
    "id": 1232,
    "flag": "success",
    "assumptions": [
      "all x.(YaleDormitory(x) -> LocatedOn(x,YaleCampus))",
      "all x.((YaleBuildings(x) & ManagedBy(x,YaleHousing)) -> YaleDormitory(x))",
      "all x.((YaleBuildings(x) & OperatedBy(x,YaleHousing)) -> ManagedBy(x,YaleHousing))",
      "[[ERROR]]",
      "all x.((YaleBuildings(x) & LocatedOn(x,YaleCampus)) -> OpenToStudents(x))",
      "(YaleBuildings(Harkness) & ((OperatedBy(x,Harkness) & -LocatedOn(Harkness,YaleCampus)) | (-OperatedBy(x,Harkness) & LocatedOn(Harkness,YaleCampus))))"
    ],
    "goal": "-YaleDormitory(Harkness)"
  },
  {
    "id": 1233,
    "flag": "success",
    "assumptions": [
      "all x.(YaleDormitory(x) -> LocatedOn(x,YaleCampus))",
      "all x.((YaleBuildings(x) & ManagedBy(x,YaleHousing)) -> YaleDormitory(x))",
      "all x.((YaleBuildings(x) & OperatedBy(x,YaleHousing)) -> ManagedBy(x,YaleHousing))",
      "[[ERROR]]",
      "all x.((YaleBuildings(x) & LocatedOn(x,YaleCampus)) -> OpenToStudents(x))",
      "(YaleBuildings(Harkness) & ((OperatedBy(x,Harkness) & -LocatedOn(Harkness,YaleCampus)) | (-OperatedBy(x,Harkness) & LocatedOn(Harkness,YaleCampus))))"
    ],
    "goal": "exists y.(Before(y,Year1701) & Established(x,y))"
  },
  {
    "id": 1234,
    "flag": "success",
    "assumptions": [
      "all x.(YaleDormitory(x) -> LocatedOn(x,YaleCampus))",
      "all x.((YaleBuildings(x) & ManagedBy(x,YaleHousing)) -> YaleDormitory(x))",
      "all x.((YaleBuildings(x) & OperatedBy(x,YaleHousing)) -> ManagedBy(x,YaleHousing))",
      "[[ERROR]]",
      "all x.((YaleBuildings(x) & LocatedOn(x,YaleCampus)) -> OpenToStudents(x))",
      "(YaleBuildings(Harkness) & ((OperatedBy(x,Harkness) & -LocatedOn(Harkness,YaleCampus)) | (-OperatedBy(x,Harkness) & LocatedOn(Harkness,YaleCampus))))"
    ],
    "goal": "-exists y.(Before(y,Year1701) & Established(x,y))"
  },
  {
    "id": 789,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "Skyscraper(LaLaurieHouse)"
  },
  {
    "id": 790,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "-Skyscraper(LaLaurieHouse)"
  },
  {
    "id": 791,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "(TerrifyingBuilding(LaLaurieHouse) & OnHalloween(LaLaurieHouse))"
  },
  {
    "id": 792,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "((Skyscraper(LaLaurieHouse) & -MansionHouse(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & MansionHouse(LaLaurieHouse)))"
  },
  {
    "id": 793,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "((Skyscraper(LaLaurieHouse) & -UrbanArea(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & UrbanArea(LaLaurieHouse)))"
  },
  {
    "id": 794,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "((Skyscraper(LaLaurieHouse) & -CreepyHauntedHouse(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & CreepyHauntedHouse(LaLaurieHouse)))"
  },
  {
    "id": 795,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "(-(MansionHouse(LaLaurieHouse) & InUrbanArea(LaLaurieHouse)) -> ((Skyscraper(LaLaurieHouse) & -InUrbanArea(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & InUrbanArea(LaLaurieHouse))))"
  },
  {
    "id": 796,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "(((Skyscraper(LaLaurieHouse) & -MansionHouse(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & MansionHouse(LaLaurieHouse))) -> InUrbanArea(LaLaurieHouse))"
  },
  {
    "id": 797,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "(((Skyscraper(LaLaurieHouse) & -MansionHouse(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & MansionHouse(LaLaurieHouse))) -> -((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse)))"
  },
  {
    "id": 798,
    "flag": "success",
    "assumptions": [
      "all x.(InUrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> InUrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.((TerrifyingBuilding(x) & OnHalloween(x)) -> CreepyHauntedHouse(x))",
      "((CreepyHauntedHouse(LaLaurieHouse) | TerrifyingBuilding(LaLaurieHouse)) & OnHalloween(LaLaurieHouse))"
    ],
    "goal": "(((Skyscraper(LaLaurieHouse) & -CreepyHauntedHouse(LaLaurieHouse)) | (-Skyscraper(LaLaurieHouse) & CreepyHauntedHouse(LaLaurieHouse))) -> -MansionHouse(LaLaurieHouse))"
  },
  {
    "id": 330,
    "flag": "success",
    "assumptions": [
      "(NationalPark(PhuocBinh) & Locatedin(PhuocBinh,Vietnam))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> NatureReserve(x))",
      "exists x.(NationalPark(x) & Locatedin(x,Vietnam) & UNESCOWorldHeritageSite(x))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> ((Mangedby(x,MinistryofAgriculture) & -Managedby(x,PeoplesCommittee)) | (-Mangedby(x,MinistryofAgriculture) & Managedby(x,PeoplesCommittee))))",
      "-Mangedby(PhuocBinh,MinistryofAgriculture)"
    ],
    "goal": "exists x.(NatureReserve(x) & LocatedIn(x,Vietnam))"
  },
  {
    "id": 331,
    "flag": "success",
    "assumptions": [
      "(NationalPark(PhuocBinh) & Locatedin(PhuocBinh,Vietnam))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> NatureReserve(x))",
      "exists x.(NationalPark(x) & Locatedin(x,Vietnam) & UNESCOWorldHeritageSite(x))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> ((Mangedby(x,MinistryofAgriculture) & -Managedby(x,PeoplesCommittee)) | (-Mangedby(x,MinistryofAgriculture) & Managedby(x,PeoplesCommittee))))",
      "-Mangedby(PhuocBinh,MinistryofAgriculture)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 332,
    "flag": "success",
    "assumptions": [
      "(NationalPark(PhuocBinh) & Locatedin(PhuocBinh,Vietnam))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> NatureReserve(x))",
      "exists x.(NationalPark(x) & Locatedin(x,Vietnam) & UNESCOWorldHeritageSite(x))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> ((Mangedby(x,MinistryofAgriculture) & -Managedby(x,PeoplesCommittee)) | (-Mangedby(x,MinistryofAgriculture) & Managedby(x,PeoplesCommittee))))",
      "-Mangedby(PhuocBinh,MinistryofAgriculture)"
    ],
    "goal": "Mangedby(PhuocBinh,PeoplesCommittee)"
  },
  {
    "id": 402,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(GreyhoundRacing(x) -> Coursing(x))",
      "exists x y.(CompetitiveSport(x) & BetOn(Spectators,y,x) & Banned(x))",
      "all x.exists y z.((Coursing(x) -> Hare(y)) & BetOn(Spectators,y,x) & GreyHound(z) & PursuedBy(y,z))",
      "exists x.all y.((Hare(x) & BetOn(Spectators,x,y)) -> SmallGame(y))",
      "all x.exists y.((CompetitiveSport(x) & SmallGame(y) & BetOn(Spectators,y,x)) -> Banned(x))"
    ],
    "goal": "all x.(Coursing(x) & -Banned(x))"
  },
  {
    "id": 403,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(GreyhoundRacing(x) -> Coursing(x))",
      "exists x y.(CompetitiveSport(x) & BetOn(Spectators,y,x) & Banned(x))",
      "all x.exists y z.((Coursing(x) -> Hare(y)) & BetOn(Spectators,y,x) & GreyHound(z) & PursuedBy(y,z))",
      "exists x.all y.((Hare(x) & BetOn(Spectators,x,y)) -> SmallGame(y))",
      "all x.exists y.((CompetitiveSport(x) & SmallGame(y) & BetOn(Spectators,y,x)) -> Banned(x))"
    ],
    "goal": "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))"
  },
  {
    "id": 544,
    "flag": "success",
    "assumptions": [
      "all x.((SoccerPlayer(x) & Receive(x,TwoYellowCard)) -> EjectFromRestOfGame(x))",
      "[[ERROR]]",
      "SoccerPlayer(Henry)",
      "(Receive(Henry,OneYellowCard) & Receive(x,OneRedCard))"
    ],
    "goal": "EjectFromRestOfGame(Henry)"
  },
  {
    "id": 545,
    "flag": "success",
    "assumptions": [
      "all x.((SoccerPlayer(x) & Receive(x,TwoYellowCard)) -> EjectFromRestOfGame(x))",
      "[[ERROR]]",
      "SoccerPlayer(Henry)",
      "(Receive(Henry,OneYellowCard) & Receive(x,OneRedCard))"
    ],
    "goal": "-EjectFromRestOfGame(Henry)"
  },
  {
    "id": 731,
    "flag": "success",
    "assumptions": [
      "all x.(Tree(x) -> Plant(x))",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 44,
    "flag": "success",
    "assumptions": [
      "(GivenName(NameDagfinn) & Named(DagfinnAarskog,NameDagfinn) & NotablePerson(DagfinnAarskog) & Named(DagfinnBakke,NameDagfinn) & NotablePerson(DagfinnBakke) & Named(DagfinnDahl,NameDagfinn) & NotablePerson(DagfinnDahl))",
      "(Norwegian(DagfinnAarskog) & Physician(DagfinnAarskog))",
      "(Norwegian(DagfinnDahl) & Barrister(DagfinnDahl))"
    ],
    "goal": "NotablePerson(DagfinnAarskog)"
  },
  {
    "id": 45,
    "flag": "success",
    "assumptions": [
      "(GivenName(NameDagfinn) & Named(DagfinnAarskog,NameDagfinn) & NotablePerson(DagfinnAarskog) & Named(DagfinnBakke,NameDagfinn) & NotablePerson(DagfinnBakke) & Named(DagfinnDahl,NameDagfinn) & NotablePerson(DagfinnDahl))",
      "(Norwegian(DagfinnAarskog) & Physician(DagfinnAarskog))",
      "(Norwegian(DagfinnDahl) & Barrister(DagfinnDahl))"
    ],
    "goal": "Named(DagfinnAarskog,NameDagfinn)"
  },
  {
    "id": 46,
    "flag": "success",
    "assumptions": [
      "(GivenName(NameDagfinn) & Named(DagfinnAarskog,NameDagfinn) & NotablePerson(DagfinnAarskog) & Named(DagfinnBakke,NameDagfinn) & NotablePerson(DagfinnBakke) & Named(DagfinnDahl,NameDagfinn) & NotablePerson(DagfinnDahl))",
      "(Norwegian(DagfinnAarskog) & Physician(DagfinnAarskog))",
      "(Norwegian(DagfinnDahl) & Barrister(DagfinnDahl))"
    ],
    "goal": "(Norwegian(DagfinnDahl) & Physician(DagfinnDahl))"
  },
  {
    "id": 744,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": "all x.((Movie(x) & Popular(x)) -> Attract(x,Attention))"
  },
  {
    "id": 682,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 333,
    "flag": "success",
    "assumptions": [
      "(Scottish(StJohnstone) & Team(StJohnstone))",
      "(PartOf(StJohnstone,ScottishPremiership) & League(ScottishPremiership))",
      "all x y.((Team(x) & League(y) & PartOf(x,y)) -> Joined(x,y))",
      "[[ERROR]]",
      "[[ERROR]]",
      "WonAgainst(Minsk,StJohnstone)"
    ],
    "goal": "exists x.(Scottish(x) & Joined(x,ScottishPremiership))"
  },
  {
    "id": 334,
    "flag": "success",
    "assumptions": [
      "(Scottish(StJohnstone) & Team(StJohnstone))",
      "(PartOf(StJohnstone,ScottishPremiership) & League(ScottishPremiership))",
      "all x y.((Team(x) & League(y) & PartOf(x,y)) -> Joined(x,y))",
      "[[ERROR]]",
      "[[ERROR]]",
      "WonAgainst(Minsk,StJohnstone)"
    ],
    "goal": "WonGame(StJohnstone,Minsk)"
  },
  {
    "id": 335,
    "flag": "success",
    "assumptions": [
      "(Scottish(StJohnstone) & Team(StJohnstone))",
      "(PartOf(StJohnstone,ScottishPremiership) & League(ScottishPremiership))",
      "all x y.((Team(x) & League(y) & PartOf(x,y)) -> Joined(x,y))",
      "[[ERROR]]",
      "[[ERROR]]",
      "WonAgainst(Minsk,StJohnstone)"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1227,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((Plane(x) & AcquiredBy(x,Delta)) -> Boeing737(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "((Boeing737(Jake32) & Plane(Jake32) & -(AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32))) | (-(Boeing737(Jake32) & Plane(Jake32)) & AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32)))",
      "-((Boeing737(T10) & Plane(T10) & -(AcquiredByDeltaInThisBatch(T10) & Plane(T10))) | (-(Boeing737(T10) & Plane(T10)) & AcquiredByDeltaInThisBatch(T10) & Plane(T10)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1228,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((Plane(x) & AcquiredBy(x,Delta)) -> Boeing737(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "((Boeing737(Jake32) & Plane(Jake32) & -(AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32))) | (-(Boeing737(Jake32) & Plane(Jake32)) & AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32)))",
      "-((Boeing737(T10) & Plane(T10) & -(AcquiredByDeltaInThisBatch(T10) & Plane(T10))) | (-(Boeing737(T10) & Plane(T10)) & AcquiredByDeltaInThisBatch(T10) & Plane(T10)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1229,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((Plane(x) & AcquiredBy(x,Delta)) -> Boeing737(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "((Boeing737(Jake32) & Plane(Jake32) & -(AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32))) | (-(Boeing737(Jake32) & Plane(Jake32)) & AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32)))",
      "-((Boeing737(T10) & Plane(T10) & -(AcquiredByDeltaInThisBatch(T10) & Plane(T10))) | (-(Boeing737(T10) & Plane(T10)) & AcquiredByDeltaInThisBatch(T10) & Plane(T10)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1230,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.((Plane(x) & AcquiredBy(x,Delta)) -> Boeing737(x))",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "((Boeing737(Jake32) & Plane(Jake32) & -(AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32))) | (-(Boeing737(Jake32) & Plane(Jake32)) & AcquiredByDeltaInThisBatch(Jake32) & Plane(Jake32)))",
      "-((Boeing737(T10) & Plane(T10) & -(AcquiredByDeltaInThisBatch(T10) & Plane(T10))) | (-(Boeing737(T10) & Plane(T10)) & AcquiredByDeltaInThisBatch(T10) & Plane(T10)))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 555,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "IntendedToAssess(SAT,StudentsReadinessForCollege)",
      "OriginallyDesignedToBeAlignedWith(SAT,HighSchoolCurricula)",
      "AdjustmentMadeIn(SAT,2016,ToAlignWithHighSchoolCurriculum)"
    ],
    "goal": "(OwnedBy(SAT,CollegeBoard) & OwnedBy(SAT,OtherThirdParties))"
  },
  {
    "id": 556,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "IntendedToAssess(SAT,StudentsReadinessForCollege)",
      "OriginallyDesignedToBeAlignedWith(SAT,HighSchoolCurricula)",
      "AdjustmentMadeIn(SAT,2016,ToAlignWithHighSchoolCurriculum)"
    ],
    "goal": "IntendedToAssess(SAT,StudentsMathSkill)"
  },
  {
    "id": 98,
    "flag": "success",
    "assumptions": [
      "BornIn(RafaNadal,Mallorca)",
      "ProfessionalTennisPlayer(RafaNadal)",
      "HighWinRatio(RafaNadal)",
      "all x.((ProfessionalTennisPlayer(x) & HighWinRatio(x)) -> InBig3(x))"
    ],
    "goal": "-BornIn(RafaNadal,Mallorca)"
  },
  {
    "id": 99,
    "flag": "success",
    "assumptions": [
      "BornIn(RafaNadal,Mallorca)",
      "ProfessionalTennisPlayer(RafaNadal)",
      "HighWinRatio(RafaNadal)",
      "all x.((ProfessionalTennisPlayer(x) & HighWinRatio(x)) -> InBig3(x))"
    ],
    "goal": "InBig3(RafaNadal)"
  },
  {
    "id": 100,
    "flag": "success",
    "assumptions": [
      "BornIn(RafaNadal,Mallorca)",
      "ProfessionalTennisPlayer(RafaNadal)",
      "HighWinRatio(RafaNadal)",
      "all x.((ProfessionalTennisPlayer(x) & HighWinRatio(x)) -> InBig3(x))"
    ],
    "goal": "GreatestOfAllTime(RafaNadal)"
  },
  {
    "id": 730,
    "flag": "success",
    "assumptions": [
      "all x.(SandwichCookie(x) -> -Healthy(x))",
      "all x.(Oreo(x) -> SandwichCookie(x))"
    ],
    "goal": "all x.(SandwichCookie(x) -> Delicious(x))"
  },
  {
    "id": 782,
    "flag": "success",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "-((Human(Bailey) & -Flower(Bailey)) | (-Human(Bailey) & Flower(Bailey)))"
    ],
    "goal": "Pupil(Bailey)"
  },
  {
    "id": 783,
    "flag": "success",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "-((Human(Bailey) & -Flower(Bailey)) | (-Human(Bailey) & Flower(Bailey)))"
    ],
    "goal": "-Pupil(Bailey)"
  },
  {
    "id": 784,
    "flag": "success",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "-((Human(Bailey) & -Flower(Bailey)) | (-Human(Bailey) & Flower(Bailey)))"
    ],
    "goal": "Plant(Bailey)"
  },
  {
    "id": 785,
    "flag": "success",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "-((Human(Bailey) & -Flower(Bailey)) | (-Human(Bailey) & Flower(Bailey)))"
    ],
    "goal": "(Human(Bailey) -> -Pupil(Bailey))"
  },
  {
    "id": 1321,
    "flag": "success",
    "assumptions": [
      "all x.(Shoe(x) -> -Food(x))",
      "all x.(Slipper(x) -> Shoe(x))",
      "all x.(((DonatedTo(x,HomelessCharity) -> Food(x)) & -Clothes(x)) | (-(DonatedTo(x,HomelessCharity) -> Food(x)) & Clothes(x)))",
      "all x.(Wearable(x) -> -Edible(x))",
      "all x.(Clothes(x) -> Wearable(x))",
      "DonatedTo(Watch,HomelessCharify)",
      "(-(Edible(Watch) & Clothes(Watch)) -> -((Edible(Watch) & -Clothes(Watch)) | (-Edible(Watch) & Clothes(Watch))))"
    ],
    "goal": "Wearable(Watch)"
  },
  {
    "id": 1322,
    "flag": "success",
    "assumptions": [
      "all x.(Shoe(x) -> -Food(x))",
      "all x.(Slipper(x) -> Shoe(x))",
      "all x.(((DonatedTo(x,HomelessCharity) -> Food(x)) & -Clothes(x)) | (-(DonatedTo(x,HomelessCharity) -> Food(x)) & Clothes(x)))",
      "all x.(Wearable(x) -> -Edible(x))",
      "all x.(Clothes(x) -> Wearable(x))",
      "DonatedTo(Watch,HomelessCharify)",
      "(-(Edible(Watch) & Clothes(Watch)) -> -((Edible(Watch) & -Clothes(Watch)) | (-Edible(Watch) & Clothes(Watch))))"
    ],
    "goal": "Slipper(Watch)"
  },
  {
    "id": 1323,
    "flag": "success",
    "assumptions": [
      "all x.(Shoe(x) -> -Food(x))",
      "all x.(Slipper(x) -> Shoe(x))",
      "all x.(((DonatedTo(x,HomelessCharity) -> Food(x)) & -Clothes(x)) | (-(DonatedTo(x,HomelessCharity) -> Food(x)) & Clothes(x)))",
      "all x.(Wearable(x) -> -Edible(x))",
      "all x.(Clothes(x) -> Wearable(x))",
      "DonatedTo(Watch,HomelessCharify)",
      "(-(Edible(Watch) & Clothes(Watch)) -> -((Edible(Watch) & -Clothes(Watch)) | (-Edible(Watch) & Clothes(Watch))))"
    ],
    "goal": "(-Edible(Watch) & -Slipper(Watch))"
  },
  {
    "id": 101,
    "flag": "success",
    "assumptions": [
      "all x.((DoesOlympicSport(x) & GoesToOlympicGames(x)) -> Olympian(x))",
      "DoesOlympicSport(CarlosReyes)",
      "GoesToOlympicGames(CarlosReyes)",
      "WelterWeight(CarlosReyes)",
      "all x.(WelterWeight(x) -> -HeavyWeight(x))"
    ],
    "goal": "Olympian(CarlosReyes)"
  },
  {
    "id": 102,
    "flag": "success",
    "assumptions": [
      "all x.((DoesOlympicSport(x) & GoesToOlympicGames(x)) -> Olympian(x))",
      "DoesOlympicSport(CarlosReyes)",
      "GoesToOlympicGames(CarlosReyes)",
      "WelterWeight(CarlosReyes)",
      "all x.(WelterWeight(x) -> -HeavyWeight(x))"
    ],
    "goal": "HeavyWeight(CarlosReyes)"
  },
  {
    "id": 103,
    "flag": "success",
    "assumptions": [
      "all x.((DoesOlympicSport(x) & GoesToOlympicGames(x)) -> Olympian(x))",
      "DoesOlympicSport(CarlosReyes)",
      "GoesToOlympicGames(CarlosReyes)",
      "WelterWeight(CarlosReyes)",
      "all x.(WelterWeight(x) -> -HeavyWeight(x))"
    ],
    "goal": "WonOlympicMedal(CarlosReyes)"
  },
  {
    "id": 863,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "(Attend(Sam,Festival) & YoungTeenageGirl(Sam))"
  },
  {
    "id": 864,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "-(Attend(Sam,Festival) & YoungTeenageGirl(Sam))"
  },
  {
    "id": 865,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "BigFanOfMusic(Sam)"
  },
  {
    "id": 866,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "-(Ambitious(Sam) | (Attend(Sam,Festival) & YoungTeenageGirl(Sam)))"
  },
  {
    "id": 867,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "(Ambitious(Sam) & Attend(Sam,Festival) & YoungTeenageGirl(Sam))"
  },
  {
    "id": 868,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "(Ambitious(Sam) & Attend(Sam,Festival) & YoungTeenageGirl(Sam))"
  },
  {
    "id": 869,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "((Attend(Sam,Festival) & YoungTeenageGirl(Sam)) -> -(Ambitious(Sam) | (BigFanOfPopBand(Sam) & BigFanOfPopSinger(Sam))))"
  },
  {
    "id": 870,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "((Ambitious(Sam) & Attend(Sam,Festival) & YoungTeenageGirl(Sam)) -> -(Ambitious(Sam) | (Attend(Sam,Festival) & YoungTeenageGirl(Sam))))"
  },
  {
    "id": 871,
    "flag": "success",
    "assumptions": [
      "all x.(HaveIn(x,ALotOfMusicDecoration,Room) -> -MoveOutEasily(x))",
      "all x.(Ambitious(x) -> MoveOutEasily(x))",
      "all x.(BigFanOfMusic(x) -> MusicDecorations(x,Room))",
      "all x.(((AttendFrequently(x,MusicFestival) & YoungTeenageGirl(x)) -> BigFanOfPopBand(x)) & BigFanOfPopSinger(x))",
      "((Ambitious(Sam) -> BBigFanOfPopBand(Sam)) & BigFanOfPopSinger(Sam))"
    ],
    "goal": "((Ambitious(Sam) -> Attend(Sam,Festival)) & YoungTeenageGirl(Sam))"
  },
  {
    "id": 524,
    "flag": "success",
    "assumptions": [
      "(CargoShip(Britta) & Ship(Britta) & BuiltFor(Britta,Norwegians))",
      "ImpressedIntoServiceBy(Britta,Germany)",
      "all x y.((Ship(x) & ImpressedIntoServiceBy(x,y)) -> SeizedBy(x,y))",
      "SoldTo(Britta,Hongkong)"
    ],
    "goal": "exists x.(CargoShip(x) & SeizedBy(x,Germany) & SoldTo(x,Hongkong))"
  },
  {
    "id": 525,
    "flag": "success",
    "assumptions": [
      "(CargoShip(Britta) & Ship(Britta) & BuiltFor(Britta,Norwegians))",
      "ImpressedIntoServiceBy(Britta,Germany)",
      "all x y.((Ship(x) & ImpressedIntoServiceBy(x,y)) -> SeizedBy(x,y))",
      "SoldTo(Britta,Hongkong)"
    ],
    "goal": "all x y.(SoldTo(x,Hongkong) -> -SeizedBy(x,y))"
  },
  {
    "id": 526,
    "flag": "success",
    "assumptions": [
      "(CargoShip(Britta) & Ship(Britta) & BuiltFor(Britta,Norwegians))",
      "ImpressedIntoServiceBy(Britta,Germany)",
      "all x y.((Ship(x) & ImpressedIntoServiceBy(x,y)) -> SeizedBy(x,y))",
      "SoldTo(Britta,Hongkong)"
    ],
    "goal": "SeizedBy(Britta,Hongkong)"
  },
  {
    "id": 141,
    "flag": "success",
    "assumptions": [
      "(American(QuincyMcduffie) & Professional(QuincyMcduffie) & WideReciever(QuincyMcduffie) & PlaysIn(QuincyMcduffie,CFL))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(GoodWideReceiver(x) -> Professional(x))",
      "all x.(GoodWideReceiver(x) -> (CanCatchWith(x,Lefthand) & CanCatchWith(x,Righthand)))",
      "all x.(Football(x) -> Ball(x))"
    ],
    "goal": "GoodWideReceiver(QuincyMcduffie)"
  },
  {
    "id": 142,
    "flag": "success",
    "assumptions": [
      "(American(QuincyMcduffie) & Professional(QuincyMcduffie) & WideReciever(QuincyMcduffie) & PlaysIn(QuincyMcduffie,CFL))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(GoodWideReceiver(x) -> Professional(x))",
      "all x.(GoodWideReceiver(x) -> (CanCatchWith(x,Lefthand) & CanCatchWith(x,Righthand)))",
      "all x.(Football(x) -> Ball(x))"
    ],
    "goal": "all x.(Ball(x) -> CanCatch(Quincymcduffie,x))"
  },
  {
    "id": 143,
    "flag": "success",
    "assumptions": [
      "(American(QuincyMcduffie) & Professional(QuincyMcduffie) & WideReciever(QuincyMcduffie) & PlaysIn(QuincyMcduffie,CFL))",
      "[[ERROR]]",
      "[[ERROR]]",
      "all x.(GoodWideReceiver(x) -> Professional(x))",
      "all x.(GoodWideReceiver(x) -> (CanCatchWith(x,Lefthand) & CanCatchWith(x,Righthand)))",
      "all x.(Football(x) -> Ball(x))"
    ],
    "goal": "all x.((Professional(x) & WideReciever(x)) -> Good(x,Catchingballs))"
  },
  {
    "id": 14,
    "flag": "success",
    "assumptions": [
      "(RailwayStation(Boves) & In(Boves,France))",
      "Precede(Longueau,Boves)",
      "Precede(Boves,Dommartin)",
      "In(France,Europe)",
      "SituatedOn(Dommartin,PairsLille)",
      "[[ERROR]]",
      "Serve(Boves,HautsDeFrance)",
      "all x y z.((In(x,y) & In(y,z)) -> In(x,z))",
      "all x y z.((Precede(x,y) & Precede(y,z)) -> Precede(x,z))"
    ],
    "goal": "SituatedOn(Longueau,PairsLille)"
  },
  {
    "id": 15,
    "flag": "success",
    "assumptions": [
      "(RailwayStation(Boves) & In(Boves,France))",
      "Precede(Longueau,Boves)",
      "Precede(Boves,Dommartin)",
      "In(France,Europe)",
      "SituatedOn(Dommartin,PairsLille)",
      "[[ERROR]]",
      "Serve(Boves,HautsDeFrance)",
      "all x y z.((In(x,y) & In(y,z)) -> In(x,z))",
      "all x y z.((Precede(x,y) & Precede(y,z)) -> Precede(x,z))"
    ],
    "goal": "-In(Boves,Europe)"
  },
  {
    "id": 16,
    "flag": "success",
    "assumptions": [
      "(RailwayStation(Boves) & In(Boves,France))",
      "Precede(Longueau,Boves)",
      "Precede(Boves,Dommartin)",
      "In(France,Europe)",
      "SituatedOn(Dommartin,PairsLille)",
      "[[ERROR]]",
      "Serve(Boves,HautsDeFrance)",
      "all x y z.((In(x,y) & In(y,z)) -> In(x,z))",
      "all x y z.((Precede(x,y) & Precede(y,z)) -> Precede(x,z))"
    ],
    "goal": "Serve(Longueau,HautsDeFrance)"
  },
  {
    "id": 309,
    "flag": "success",
    "assumptions": [
      "(From(EdwinSmith,NewZealand) & Rower(EdwinSmith) & From(EdwinSmith,Auckland))",
      "[[ERROR]]",
      "(GoTo(EdwinSmith,RoseRoadPrimarySchool) & LocatedIn(RoseRoadPrimarySchool,GreyLynn))",
      "(Sergeant(EdwinSmith) & ServeWith(EdwinSmith,NewZealand24thBattalion) & ServeIn(EdwinSmith,Italy) & ServeIn(EdwinSmith,Egypt))",
      "(Buisness(BroadwaySheetmetals) & Run(EdwinSmith,BroadwaySheetmetals) & Own(EdwinSmith,BroadwaySheetmetals) & SheetmetalWorker(Edwinsmith))"
    ],
    "goal": "Sergeant(TedSmith)"
  },
  {
    "id": 310,
    "flag": "success",
    "assumptions": [
      "(From(EdwinSmith,NewZealand) & Rower(EdwinSmith) & From(EdwinSmith,Auckland))",
      "[[ERROR]]",
      "(GoTo(EdwinSmith,RoseRoadPrimarySchool) & LocatedIn(RoseRoadPrimarySchool,GreyLynn))",
      "(Sergeant(EdwinSmith) & ServeWith(EdwinSmith,NewZealand24thBattalion) & ServeIn(EdwinSmith,Italy) & ServeIn(EdwinSmith,Egypt))",
      "(Buisness(BroadwaySheetmetals) & Run(EdwinSmith,BroadwaySheetmetals) & Own(EdwinSmith,BroadwaySheetmetals) & SheetmetalWorker(Edwinsmith))"
    ],
    "goal": "all x y.((Rower(x) & Buisness(y)) -> -Own(x,y))"
  },
  {
    "id": 311,
    "flag": "success",
    "assumptions": [
      "(From(EdwinSmith,NewZealand) & Rower(EdwinSmith) & From(EdwinSmith,Auckland))",
      "[[ERROR]]",
      "(GoTo(EdwinSmith,RoseRoadPrimarySchool) & LocatedIn(RoseRoadPrimarySchool,GreyLynn))",
      "(Sergeant(EdwinSmith) & ServeWith(EdwinSmith,NewZealand24thBattalion) & ServeIn(EdwinSmith,Italy) & ServeIn(EdwinSmith,Egypt))",
      "(Buisness(BroadwaySheetmetals) & Run(EdwinSmith,BroadwaySheetmetals) & Own(EdwinSmith,BroadwaySheetmetals) & SheetmetalWorker(Edwinsmith))"
    ],
    "goal": "all x.(Sergeant(x) -> -From(x,Auckland))"
  },
  {
    "id": 312,
    "flag": "success",
    "assumptions": [
      "(From(EdwinSmith,NewZealand) & Rower(EdwinSmith) & From(EdwinSmith,Auckland))",
      "[[ERROR]]",
      "(GoTo(EdwinSmith,RoseRoadPrimarySchool) & LocatedIn(RoseRoadPrimarySchool,GreyLynn))",
      "(Sergeant(EdwinSmith) & ServeWith(EdwinSmith,NewZealand24thBattalion) & ServeIn(EdwinSmith,Italy) & ServeIn(EdwinSmith,Egypt))",
      "(Buisness(BroadwaySheetmetals) & Run(EdwinSmith,BroadwaySheetmetals) & Own(EdwinSmith,BroadwaySheetmetals) & SheetmetalWorker(Edwinsmith))"
    ],
    "goal": "all x y.((Buisness(x) & Own(y,x)) -> -ServeIn(y,Egypt))"
  },
  {
    "id": 503,
    "flag": "success",
    "assumptions": [
      "all x.((Human(x) & CanTurnInto(x,Wolf)) -> Werewolf(x))",
      "all x.exists y.((Werewolf(x) -> (BittenBy(x,y) | ScratchedBy(x,y))) & Werewolf(y))",
      "all x.exists y.((BittenBy(x,y) | ScratchedBy(x,y)) -> AttackedBy(x,y))"
    ],
    "goal": "all x.(Human(x) -> Werewolf(x))"
  },
  {
    "id": 504,
    "flag": "success",
    "assumptions": [
      "all x.((Human(x) & CanTurnInto(x,Wolf)) -> Werewolf(x))",
      "all x.exists y.((Werewolf(x) -> (BittenBy(x,y) | ScratchedBy(x,y))) & Werewolf(y))",
      "all x.exists y.((BittenBy(x,y) | ScratchedBy(x,y)) -> AttackedBy(x,y))"
    ],
    "goal": "all x.(Werewolf(x) -> Wolf(x))"
  },
  {
    "id": 505,
    "flag": "success",
    "assumptions": [
      "all x.((Human(x) & CanTurnInto(x,Wolf)) -> Werewolf(x))",
      "all x.exists y.((Werewolf(x) -> (BittenBy(x,y) | ScratchedBy(x,y))) & Werewolf(y))",
      "all x.exists y.((BittenBy(x,y) | ScratchedBy(x,y)) -> AttackedBy(x,y))"
    ],
    "goal": "all x.exists y.(Werewolf(x) -> ScratchedBy(y,x))"
  },
  {
    "id": 407,
    "flag": "success",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & HeldIn(UFCFightNight,Sweden))",
      "ScheduledToFight(Sadollah,Musoke,UFCFightNight)",
      "Fight(Sadollah,Akiyama,UFCFightNight)",
      "Fight(Musoke,Yakovlev,UFCFightNight)",
      "InjuredAt(Jung,UFCFightNight)",
      "all x.(InjuredAt(x,UFCFightNight) -> -FightIn(x,UFCFightNight))"
    ],
    "goal": "Fight(Jung,Sadollah,UFCFightNight)"
  },
  {
    "id": 408,
    "flag": "success",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & HeldIn(UFCFightNight,Sweden))",
      "ScheduledToFight(Sadollah,Musoke,UFCFightNight)",
      "Fight(Sadollah,Akiyama,UFCFightNight)",
      "Fight(Musoke,Yakovlev,UFCFightNight)",
      "InjuredAt(Jung,UFCFightNight)",
      "all x.(InjuredAt(x,UFCFightNight) -> -FightIn(x,UFCFightNight))"
    ],
    "goal": "(Event(UFCFightNight) & -FightIn(Jung,UFCFightNight))"
  },
  {
    "id": 409,
    "flag": "success",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & HeldIn(UFCFightNight,Sweden))",
      "ScheduledToFight(Sadollah,Musoke,UFCFightNight)",
      "Fight(Sadollah,Akiyama,UFCFightNight)",
      "Fight(Musoke,Yakovlev,UFCFightNight)",
      "InjuredAt(Jung,UFCFightNight)",
      "all x.(InjuredAt(x,UFCFightNight) -> -FightIn(x,UFCFightNight))"
    ],
    "goal": "Fight(Sadollah,Musoke,UFCFightNight)"
  },
  {
    "id": 410,
    "flag": "success",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & HeldIn(UFCFightNight,Sweden))",
      "ScheduledToFight(Sadollah,Musoke,UFCFightNight)",
      "Fight(Sadollah,Akiyama,UFCFightNight)",
      "Fight(Musoke,Yakovlev,UFCFightNight)",
      "InjuredAt(Jung,UFCFightNight)",
      "all x.(InjuredAt(x,UFCFightNight) -> -FightIn(x,UFCFightNight))"
    ],
    "goal": "Fight(Nelson,Story,UFCFightNight)"
  },
  {
    "id": 1351,
    "flag": "success",
    "assumptions": [
      "all x.((OnCounter(x) & Drink(x)) -> Edible(x))",
      "all x.((OnCounter(x) & Juice(x)) -> Drink(x))",
      "all x.(OrangeJuice(x) -> Juice(x))",
      "all x.(((OnCounter(x) -> OrangeJuice(x)) & -AppleJuice(x)) | (-(OnCounter(x) -> OrangeJuice(x)) & AppleJuice(x)))",
      "all x.((OnCounter(x) & AppleJuice(x)) -> Sweet(x))",
      "(OnCounter(Coke) & (AppleJuice(Coke) -> Drink(Coke)))",
      "(-AppleJuice(Coke) -> -Edible(Coke))"
    ],
    "goal": "OrangeJuice(Coke)"
  },
  {
    "id": 1352,
    "flag": "success",
    "assumptions": [
      "all x.((OnCounter(x) & Drink(x)) -> Edible(x))",
      "all x.((OnCounter(x) & Juice(x)) -> Drink(x))",
      "all x.(OrangeJuice(x) -> Juice(x))",
      "all x.(((OnCounter(x) -> OrangeJuice(x)) & -AppleJuice(x)) | (-(OnCounter(x) -> OrangeJuice(x)) & AppleJuice(x)))",
      "all x.((OnCounter(x) & AppleJuice(x)) -> Sweet(x))",
      "(OnCounter(Coke) & (AppleJuice(Coke) -> Drink(Coke)))",
      "(-AppleJuice(Coke) -> -Edible(Coke))"
    ],
    "goal": "(Edible(Coke) & Sweet(Coke))"
  },
  {
    "id": 1353,
    "flag": "success",
    "assumptions": [
      "all x.((OnCounter(x) & Drink(x)) -> Edible(x))",
      "all x.((OnCounter(x) & Juice(x)) -> Drink(x))",
      "all x.(OrangeJuice(x) -> Juice(x))",
      "all x.(((OnCounter(x) -> OrangeJuice(x)) & -AppleJuice(x)) | (-(OnCounter(x) -> OrangeJuice(x)) & AppleJuice(x)))",
      "all x.((OnCounter(x) & AppleJuice(x)) -> Sweet(x))",
      "(OnCounter(Coke) & (AppleJuice(Coke) -> Drink(Coke)))",
      "(-AppleJuice(Coke) -> -Edible(Coke))"
    ],
    "goal": "-(Edible(Coke) & Sweet(Coke))"
  },
  {
    "id": 118,
    "flag": "success",
    "assumptions": [
      "(TalentedPoet(Lorca) & Support(Lorca,Populists))",
      "all x.(Support(x,Populists) -> Opposed(Nationalists,x))",
      "all x.(TalentedPoet(x) -> Popular(x))",
      "all x.((Opposed(Nationalists,x) & Popular(x)) -> Killed(Nationalists,x))",
      "(Support(Daniel,Populists) & -Popular(Daniel))"
    ],
    "goal": "-Killed(Nationalists,Daniel)"
  },
  {
    "id": 119,
    "flag": "success",
    "assumptions": [
      "(TalentedPoet(Lorca) & Support(Lorca,Populists))",
      "all x.(Support(x,Populists) -> Opposed(Nationalists,x))",
      "all x.(TalentedPoet(x) -> Popular(x))",
      "all x.((Opposed(Nationalists,x) & Popular(x)) -> Killed(Nationalists,x))",
      "(Support(Daniel,Populists) & -Popular(Daniel))"
    ],
    "goal": "Killed(Nationalists,Lorca)"
  },
  {
    "id": 973,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "In(Damon,FrannysFamily)",
      "[[ERROR]]"
    ],
    "goal": "HaveToVisitFrequently(Damon,Dentist)"
  },
  {
    "id": 974,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "In(Damon,FrannysFamily)",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 975,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "[[ERROR]]",
      "In(Damon,FrannysFamily)",
      "[[ERROR]]"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 63,
    "flag": "success",
    "assumptions": [
      "all x.(SubscribedTo(x,AMCAList) -> EligibleForThreeFreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(Prefer(x,TVSeries) -> -WatchTVIn(x,Cinemas))",
      "WatchTVIn(James,Cinemas)",
      "SubscribedTo(James,AMCAList)",
      "Prefer(Peter,TVSeries)"
    ],
    "goal": "-EligibleForThreeFreeMovies(James)"
  },
  {
    "id": 64,
    "flag": "success",
    "assumptions": [
      "all x.(SubscribedTo(x,AMCAList) -> EligibleForThreeFreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(Prefer(x,TVSeries) -> -WatchTVIn(x,Cinemas))",
      "WatchTVIn(James,Cinemas)",
      "SubscribedTo(James,AMCAList)",
      "Prefer(Peter,TVSeries)"
    ],
    "goal": "CinemaEveryWeek(James)"
  },
  {
    "id": 65,
    "flag": "success",
    "assumptions": [
      "all x.(SubscribedTo(x,AMCAList) -> EligibleForThreeFreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(Prefer(x,TVSeries) -> -WatchTVIn(x,Cinemas))",
      "WatchTVIn(James,Cinemas)",
      "SubscribedTo(James,AMCAList)",
      "Prefer(Peter,TVSeries)"
    ],
    "goal": "-WatchTVIn(Peter,Cinemas)"
  },
  {
    "id": 719,
    "flag": "success",
    "assumptions": [
      "GenusBulbophyllum(BulbophyllumAttenuatum)",
      "all x.(GenusBulbophyllum(x) -> Orchid(x))"
    ],
    "goal": "-Orchid(BulbophyllumAttenuatum)"
  },
  {
    "id": 467,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "LargestPopulation(Central)",
      "AdministrativeCenterOf(Moscow,Central)",
      "AdministrativeCenterOf(Yekaterinburg,Ural)",
      "AdministrativeCenterOf(Vladivostok,FarEastern)",
      "LargestArea(FarEastern)",
      "exists x.(FederalDistrictOf(x,Russia) & EstablishedIn(x,2000))"
    ],
    "goal": "exists x.(AdministrativeCenterOf(Vladivostok,x) & LargestArea(x))"
  },
  {
    "id": 468,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "LargestPopulation(Central)",
      "AdministrativeCenterOf(Moscow,Central)",
      "AdministrativeCenterOf(Yekaterinburg,Ural)",
      "AdministrativeCenterOf(Vladivostok,FarEastern)",
      "LargestArea(FarEastern)",
      "exists x.(FederalDistrictOf(x,Russia) & EstablishedIn(x,2000))"
    ],
    "goal": "exists x.(AdministrativeCenterOf(Moscow,x) & LargestPopulationIn(x))"
  },
  {
    "id": 469,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "LargestPopulation(Central)",
      "AdministrativeCenterOf(Moscow,Central)",
      "AdministrativeCenterOf(Yekaterinburg,Ural)",
      "AdministrativeCenterOf(Vladivostok,FarEastern)",
      "LargestArea(FarEastern)",
      "exists x.(FederalDistrictOf(x,Russia) & EstablishedIn(x,2000))"
    ],
    "goal": "EstablishedIn(Northwestern,2000)"
  },
  {
    "id": 810,
    "flag": "success",
    "assumptions": [
      "all x.(Cancer(x) -> Have(x,Mutation))",
      "all x.(Have(x,Mutation) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(Cold(x) -> CanBeTreatedAtHome(x))",
      "-((Cold(Arthritis) & -Have(Arthritis,Mutation)) | (-Cold(Arthritis) & Have(Arthritis,Mutation)))"
    ],
    "goal": "CanBeTreatedAtHome(Arthritis)"
  },
  {
    "id": 811,
    "flag": "success",
    "assumptions": [
      "all x.(Cancer(x) -> Have(x,Mutation))",
      "all x.(Have(x,Mutation) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(Cold(x) -> CanBeTreatedAtHome(x))",
      "-((Cold(Arthritis) & -Have(Arthritis,Mutation)) | (-Cold(Arthritis) & Have(Arthritis,Mutation)))"
    ],
    "goal": "ColorectalCancer(Arthritis)"
  },
  {
    "id": 812,
    "flag": "success",
    "assumptions": [
      "all x.(Cancer(x) -> Have(x,Mutation))",
      "all x.(Have(x,Mutation) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(Cold(x) -> CanBeTreatedAtHome(x))",
      "-((Cold(Arthritis) & -Have(Arthritis,Mutation)) | (-Cold(Arthritis) & Have(Arthritis,Mutation)))"
    ],
    "goal": "-ColorectalCancer(Arthritis)"
  },
  {
    "id": 813,
    "flag": "success",
    "assumptions": [
      "all x.(Cancer(x) -> Have(x,Mutation))",
      "all x.(Have(x,Mutation) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(Cold(x) -> CanBeTreatedAtHome(x))",
      "-((Cold(Arthritis) & -Have(Arthritis,Mutation)) | (-Cold(Arthritis) & Have(Arthritis,Mutation)))"
    ],
    "goal": "(ColorectalCancer(Arthritis) | Have(Arthritis,Mutation))"
  },
  {
    "id": 814,
    "flag": "success",
    "assumptions": [
      "all x.(Cancer(x) -> Have(x,Mutation))",
      "all x.(Have(x,Mutation) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(Cold(x) -> CanBeTreatedAtHome(x))",
      "-((Cold(Arthritis) & -Have(Arthritis,Mutation)) | (-Cold(Arthritis) & Have(Arthritis,Mutation)))"
    ],
    "goal": "(ColorectalCancer(Arthritis) & Cancer(Arthritis))"
  },
  {
    "id": 815,
    "flag": "success",
    "assumptions": [
      "all x.(Cancer(x) -> Have(x,Mutation))",
      "all x.(Have(x,Mutation) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(Cold(x) -> CanBeTreatedAtHome(x))",
      "-((Cold(Arthritis) & -Have(Arthritis,Mutation)) | (-Cold(Arthritis) & Have(Arthritis,Mutation)))"
    ],
    "goal": "(-ColorectalCancer(Arthritis) -> Have(Arthritis,Mutation))"
  },
  {
    "id": 747,
    "flag": "success",
    "assumptions": [
      "all x.(OutsideOfControl(x) -> -ShouldWorry(Jerry,x))",
      "all x.(Traffic(x) -> OutsideControl(x))"
    ],
    "goal": "-ShouldWorry(Jerry,Traffic)"
  },
  {
    "id": 341,
    "flag": "success",
    "assumptions": [
      "(ItalianName(Roversi) & Surname(Roversi))",
      "UseAsSurname(AlbaRoversi,Roversi)",
      "UseAsSurname(PaoloRoversi,Roversi)",
      "UseAsSurname(RobertoRoversi,Roversi)",
      "Photographer(PaoloRoversi)",
      "all x.(((Photographer(x) -> Professional(x)) & -Amateur(x)) | (-(Photographer(x) -> Professional(x)) & Amateur(x)))"
    ],
    "goal": "exists x.(ItalianName(x) & Surname(x) & UseAsSurname(AlbaRoversi,x))"
  },
  {
    "id": 342,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 343,
    "flag": "success",
    "assumptions": [
      "(ItalianName(Roversi) & Surname(Roversi))",
      "UseAsSurname(AlbaRoversi,Roversi)",
      "UseAsSurname(PaoloRoversi,Roversi)",
      "UseAsSurname(RobertoRoversi,Roversi)",
      "Photographer(PaoloRoversi)",
      "all x.(((Photographer(x) -> Professional(x)) & -Amateur(x)) | (-(Photographer(x) -> Professional(x)) & Amateur(x)))"
    ],
    "goal": "(Amateur(PaoloRoversi) & Photographer(PaoloRoversi))"
  },
  {
    "id": 672,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 673,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 674,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 675,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1076,
    "flag": "success",
    "assumptions": [
      "all x.(NeuroimagingTechnique(x) -> ((Invasive(x) & -Noninvasive(x)) | (-Invasive(x) & Noninvasive(x))))",
      "all x.(Noninvasive(x) -> Provides(x,SpatialResolutionOfBrains))",
      "all x.(Provides(x,SpatialResolutionOfBrains) -> Measure(x,BrainActivity))",
      "all x.(Measure(x,BrainActivity) -> UsedBy(x,NeuroscienceResearchers))",
      "((Measure(FMRI,BrainActivity) & -Noninvasive(FMRI)) | (-Measure(FMRI,BrainActivity) & Noninvasive(FMRI)))",
      "NeuroimagingTechnique(FMRI)"
    ],
    "goal": "Provides(FMRI,SpatialResolutionOfBrains)"
  },
  {
    "id": 1077,
    "flag": "success",
    "assumptions": [
      "all x.(NeuroimagingTechnique(x) -> ((Invasive(x) & -Noninvasive(x)) | (-Invasive(x) & Noninvasive(x))))",
      "all x.(Noninvasive(x) -> Provides(x,SpatialResolutionOfBrains))",
      "all x.(Provides(x,SpatialResolutionOfBrains) -> Measure(x,BrainActivity))",
      "all x.(Measure(x,BrainActivity) -> UsedBy(x,NeuroscienceResearchers))",
      "((Measure(FMRI,BrainActivity) & -Noninvasive(FMRI)) | (-Measure(FMRI,BrainActivity) & Noninvasive(FMRI)))",
      "NeuroimagingTechnique(FMRI)"
    ],
    "goal": "(Invasive(FMRI) & UsedBy(FMRI,NeuroscienceResearchers))"
  },
  {
    "id": 1078,
    "flag": "success",
    "assumptions": [
      "all x.(NeuroimagingTechnique(x) -> ((Invasive(x) & -Noninvasive(x)) | (-Invasive(x) & Noninvasive(x))))",
      "all x.(Noninvasive(x) -> Provides(x,SpatialResolutionOfBrains))",
      "all x.(Provides(x,SpatialResolutionOfBrains) -> Measure(x,BrainActivity))",
      "all x.(Measure(x,BrainActivity) -> UsedBy(x,NeuroscienceResearchers))",
      "((Measure(FMRI,BrainActivity) & -Noninvasive(FMRI)) | (-Measure(FMRI,BrainActivity) & Noninvasive(FMRI)))",
      "NeuroimagingTechnique(FMRI)"
    ],
    "goal": "((Invasive(FMRI) & -UsedBy(FMRI,NeuroscienceResearchers)) | (-Invasive(FMRI) & UsedBy(FMRI,NeuroscienceResearchers)))"
  },
  {
    "id": 1079,
    "flag": "success",
    "assumptions": [
      "all x.(NeuroimagingTechnique(x) -> ((Invasive(x) & -Noninvasive(x)) | (-Invasive(x) & Noninvasive(x))))",
      "all x.(Noninvasive(x) -> Provides(x,SpatialResolutionOfBrains))",
      "all x.(Provides(x,SpatialResolutionOfBrains) -> Measure(x,BrainActivity))",
      "all x.(Measure(x,BrainActivity) -> UsedBy(x,NeuroscienceResearchers))",
      "((Measure(FMRI,BrainActivity) & -Noninvasive(FMRI)) | (-Measure(FMRI,BrainActivity) & Noninvasive(FMRI)))",
      "NeuroimagingTechnique(FMRI)"
    ],
    "goal": "(-(Invasive(FMRI) & UsedBy(FMRI,NeuroscienceResearchers)) -> -(Noninvasive(FMRI) | Provides(FMRI,SpatialResolutionOfBrains)))"
  },
  {
    "id": 1253,
    "flag": "success",
    "assumptions": [
      "all x.((PresentWorkAt(x,Conference) & -ProvideAt(x,TutorialSession,Conference)) | (-PresentWorkAt(x,Conference) & ProvideAt(x,TutorialSession,Conference)))",
      "all x.(PresentWorkAt(x,Conference) -> AttendInPerson(x,Conference))",
      "all x.(ProvideSessionAt(x,Tutorial,Conference) -> InvitedToJoin(x,Club))",
      "all x.(AttendInPerson(x,Conference) -> ProvidedWith(x,Souvenir))",
      "all x.(InvitedToJoin(x,Club) -> ProvidedWith(x,DeliciousMeal))",
      "[[ERROR]]",
      "all x.(ProvidedWith(x,DeliciousMeal) -> InvitedToTakePhotoWith(x,Audience))",
      "-(AttendInPerson(James,Conference) & ProvidedWith(x,Souvenir))"
    ],
    "goal": "ProvidedWith(James,Souvenir)"
  },
  {
    "id": 1254,
    "flag": "success",
    "assumptions": [
      "all x.((PresentWorkAt(x,Conference) & -ProvideAt(x,TutorialSession,Conference)) | (-PresentWorkAt(x,Conference) & ProvideAt(x,TutorialSession,Conference)))",
      "all x.(PresentWorkAt(x,Conference) -> AttendInPerson(x,Conference))",
      "all x.(ProvideSessionAt(x,Tutorial,Conference) -> InvitedToJoin(x,Club))",
      "all x.(AttendInPerson(x,Conference) -> ProvidedWith(x,Souvenir))",
      "all x.(InvitedToJoin(x,Club) -> ProvidedWith(x,DeliciousMeal))",
      "[[ERROR]]",
      "all x.(ProvidedWith(x,DeliciousMeal) -> InvitedToTakePhotoWith(x,Audience))",
      "-(AttendInPerson(James,Conference) & ProvidedWith(x,Souvenir))"
    ],
    "goal": "-ProvidedWith(x,Souvenir)"
  },
  {
    "id": 1255,
    "flag": "success",
    "assumptions": [
      "all x.((PresentWorkAt(x,Conference) & -ProvideAt(x,TutorialSession,Conference)) | (-PresentWorkAt(x,Conference) & ProvideAt(x,TutorialSession,Conference)))",
      "all x.(PresentWorkAt(x,Conference) -> AttendInPerson(x,Conference))",
      "all x.(ProvideSessionAt(x,Tutorial,Conference) -> InvitedToJoin(x,Club))",
      "all x.(AttendInPerson(x,Conference) -> ProvidedWith(x,Souvenir))",
      "all x.(InvitedToJoin(x,Club) -> ProvidedWith(x,DeliciousMeal))",
      "[[ERROR]]",
      "all x.(ProvidedWith(x,DeliciousMeal) -> InvitedToTakePhotoWith(x,Audience))",
      "-(AttendInPerson(James,Conference) & ProvidedWith(x,Souvenir))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1256,
    "flag": "success",
    "assumptions": [
      "all x.((PresentWorkAt(x,Conference) & -ProvideAt(x,TutorialSession,Conference)) | (-PresentWorkAt(x,Conference) & ProvideAt(x,TutorialSession,Conference)))",
      "all x.(PresentWorkAt(x,Conference) -> AttendInPerson(x,Conference))",
      "all x.(ProvideSessionAt(x,Tutorial,Conference) -> InvitedToJoin(x,Club))",
      "all x.(AttendInPerson(x,Conference) -> ProvidedWith(x,Souvenir))",
      "all x.(InvitedToJoin(x,Club) -> ProvidedWith(x,DeliciousMeal))",
      "[[ERROR]]",
      "all x.(ProvidedWith(x,DeliciousMeal) -> InvitedToTakePhotoWith(x,Audience))",
      "-(AttendInPerson(James,Conference) & ProvidedWith(x,Souvenir))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 1257,
    "flag": "success",
    "assumptions": [
      "all x.((PresentWorkAt(x,Conference) & -ProvideAt(x,TutorialSession,Conference)) | (-PresentWorkAt(x,Conference) & ProvideAt(x,TutorialSession,Conference)))",
      "all x.(PresentWorkAt(x,Conference) -> AttendInPerson(x,Conference))",
      "all x.(ProvideSessionAt(x,Tutorial,Conference) -> InvitedToJoin(x,Club))",
      "all x.(AttendInPerson(x,Conference) -> ProvidedWith(x,Souvenir))",
      "all x.(InvitedToJoin(x,Club) -> ProvidedWith(x,DeliciousMeal))",
      "[[ERROR]]",
      "all x.(ProvidedWith(x,DeliciousMeal) -> InvitedToTakePhotoWith(x,Audience))",
      "-(AttendInPerson(James,Conference) & ProvidedWith(x,Souvenir))"
    ],
    "goal": "[[ERROR]]"
  },
  {
    "id": 38,
    "flag": "success",
    "assumptions": [
      "(HeavyCruiser(Usssalem) & BuiltFor(Usssalem,Unitedstatesnavy))",
      "LastHeavyCruiserToEnterService(Usssalem)",
      "MuseumShip(Usssalem)",
      "all x.(MuseumShip(x) -> OpenToPublic(x))",
      "(ServedIn(Usssalem,Atlantic) & ServedIn(Usssalem,Mediterranean))"
    ],
    "goal": "OpenToPublic(Usssalem)"
  },
  {
    "id": 39,
    "flag": "success",
    "assumptions": [
      "(HeavyCruiser(Usssalem) & BuiltFor(Usssalem,Unitedstatesnavy))",
      "LastHeavyCruiserToEnterService(Usssalem)",
      "MuseumShip(Usssalem)",
      "all x.(MuseumShip(x) -> OpenToPublic(x))",
      "(ServedIn(Usssalem,Atlantic) & ServedIn(Usssalem,Mediterranean))"
    ],
    "goal": "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedIn(x,Mediterranean))"
  },
  {
    "id": 40,
    "flag": "success",
    "assumptions": [
      "(HeavyCruiser(Usssalem) & BuiltFor(Usssalem,Unitedstatesnavy))",
      "LastHeavyCruiserToEnterService(Usssalem)",
      "MuseumShip(Usssalem)",
      "all x.(MuseumShip(x) -> OpenToPublic(x))",
      "(ServedIn(Usssalem,Atlantic) & ServedIn(Usssalem,Mediterranean))"
    ],
    "goal": "-LastHeavyCruiserToEnterService(Usssalem)"
  },
  {
    "id": 413,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(TSLeda(x) -> (Norweigian(x) & Vessel(x) & Stabilizers(x)))",
      "all x.((Stabilizers(x) -> MechanicalDevice(x)) & OnlyOnShips(x) & PowerfulSteamTurbine(x))",
      "all x.((Passenger(x) & Vessel(x) & Cargo(x) & Vessel(x)) -> (Quiet(x) & GoodAt(x,Sea)))",
      "exists x.(Quiet(x) & GoodAt(x,Sea) & PowerfulSteamTurbine(x))",
      "all x.(Ship(x) -> Vessel(x))"
    ],
    "goal": "all x.((TSLeda(x) -> Quiet(x)) & GoodAt(x,Sea))"
  },
  {
    "id": 414,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(TSLeda(x) -> (Norweigian(x) & Vessel(x) & Stabilizers(x)))",
      "all x.((Stabilizers(x) -> MechanicalDevice(x)) & OnlyOnShips(x) & PowerfulSteamTurbine(x))",
      "all x.((Passenger(x) & Vessel(x) & Cargo(x) & Vessel(x)) -> (Quiet(x) & GoodAt(x,Sea)))",
      "exists x.(Quiet(x) & GoodAt(x,Sea) & PowerfulSteamTurbine(x))",
      "all x.(Ship(x) -> Vessel(x))"
    ],
    "goal": "all x.(TSLeda(x) -> PowerfulSteamTurbine(x))"
  },
  {
    "id": 415,
    "flag": "success",
    "assumptions": [
      "[[ERROR]]",
      "all x.(TSLeda(x) -> (Norweigian(x) & Vessel(x) & Stabilizers(x)))",
      "all x.((Stabilizers(x) -> MechanicalDevice(x)) & OnlyOnShips(x) & PowerfulSteamTurbine(x))",
      "all x.((Passenger(x) & Vessel(x) & Cargo(x) & Vessel(x)) -> (Quiet(x) & GoodAt(x,Sea)))",
      "exists x.(Quiet(x) & GoodAt(x,Sea) & PowerfulSteamTurbine(x))",
      "all x.(Ship(x) -> Vessel(x))"
    ],
    "goal": "all x.(TSLeda(x) -> -(Norweigian(x) & Vessel(x)))"
  },
  {
    "id": 552,
    "flag": "success",
    "assumptions": [
      "BornIn(Rosa,Santiago)",
      "(CapitalOf(Santiago,Chile) & LargestCityOf(Santiago,Chile))",
      "(DaughterOf(Rosa,Jose) & BuildingContractor(Jose) & Catalan(Jose))",
      "(WifeOf(Jose,Carmen) & Chilean(Carmen))",
      "(ParentOf(Jose,Rosa) & ParentOf(Carmen,Rosa))",
      "all x.(Catalan(x) -> -Chilean(x))",
      "all x.exists y.((BuildingContractor(x) -> ConstructionSite(y)) & Oversee(x,y))"
    ],
    "goal": "exists x.(BornIn(Rosa,x) & LargestCityOf(x,Chile))"
  },
  {
    "id": 553,
    "flag": "success",
    "assumptions": [
      "BornIn(Rosa,Santiago)",
      "(CapitalOf(Santiago,Chile) & LargestCityOf(Santiago,Chile))",
      "(DaughterOf(Rosa,Jose) & BuildingContractor(Jose) & Catalan(Jose))",
      "(WifeOf(Jose,Carmen) & Chilean(Carmen))",
      "(ParentOf(Jose,Rosa) & ParentOf(Carmen,Rosa))",
      "all x.(Catalan(x) -> -Chilean(x))",
      "all x.exists y.((BuildingContractor(x) -> ConstructionSite(y)) & Oversee(x,y))"
    ],
    "goal": "(-Chilean(Jose) & -Chilean(Carmen))"
  },
  {
    "id": 554,
    "flag": "success",
    "assumptions": [
      "BornIn(Rosa,Santiago)",
      "(CapitalOf(Santiago,Chile) & LargestCityOf(Santiago,Chile))",
      "(DaughterOf(Rosa,Jose) & BuildingContractor(Jose) & Catalan(Jose))",
      "(WifeOf(Jose,Carmen) & Chilean(Carmen))",
      "(ParentOf(Jose,Rosa) & ParentOf(Carmen,Rosa))",
      "all x.(Catalan(x) -> -Chilean(x))",
      "all x.exists y.((BuildingContractor(x) -> ConstructionSite(y)) & Oversee(x,y))"
    ],
    "goal": "exists x.(DaughterOf(Rosa,x) & Oversee(x,Traffic))"
  },
  {
    "id": 104,
    "flag": "success",
    "assumptions": [
      "IsRapper(Tyga)",
      "all x y.((IsRapper(x) & ReleasedAlbum(x,y)) -> IsRapAlbum(y))",
      "ReleasedAlbum(Tyga,WellDone3)",
      "all x.(IsRapper(x) -> -IsOperaSinger(x))"
    ],
    "goal": "IsRapAlbum(WellDone3)"
  },
  {
    "id": 105,
    "flag": "success",
    "assumptions": [
      "IsRapper(Tyga)",
      "all x y.((IsRapper(x) & ReleasedAlbum(x,y)) -> IsRapAlbum(y))",
      "ReleasedAlbum(Tyga,WellDone3)",
      "all x.(IsRapper(x) -> -IsOperaSinger(x))"
    ],
    "goal": "IsOperaSinger(Tyga)"
  },
  {
    "id": 106,
    "flag": "success",
    "assumptions": [
      "IsRapper(Tyga)",
      "all x y.((IsRapper(x) & ReleasedAlbum(x,y)) -> IsRapAlbum(y))",
      "ReleasedAlbum(Tyga,WellDone3)",
      "all x.(IsRapper(x) -> -IsOperaSinger(x))"
    ],
    "goal": "IsWorthListening(WellDone3)"
  },
  {
    "id": 292,
    "flag": "success",
    "assumptions": [
      "(BornIn(DeborahWallace,Scotland) & Actress(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))",
      "(Play(Psyche) & BasedOn(Psyche,LifeOfJamesMirandaBarry))",
      "(Play(Homesick) & WrittenBy(Homesick,DeborahWallace) & Play(Psyche) & WrittenBy(Psyche,DeborahWallace) & Play(TheVoid) & WrittenBy(TheVoid,DeborahWallace))",
      "CoProduce(DeborahWallace,Gasland)"
    ],
    "goal": "exists x.(CoProduces(x,Gasland) & WrittenBy(Homesick,x))"
  },
  {
    "id": 293,
    "flag": "success",
    "assumptions": [
      "(BornIn(DeborahWallace,Scotland) & Actress(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))",
      "(Play(Psyche) & BasedOn(Psyche,LifeOfJamesMirandaBarry))",
      "(Play(Homesick) & WrittenBy(Homesick,DeborahWallace) & Play(Psyche) & WrittenBy(Psyche,DeborahWallace) & Play(TheVoid) & WrittenBy(TheVoid,DeborahWallace))",
      "CoProduce(DeborahWallace,Gasland)"
    ],
    "goal": "all x.((Play(x) & WrittenBy(x,Deborahwallace)) -> -BasedOn(x,Lifeofjamesmirandabarry))"
  },
  {
    "id": 294,
    "flag": "success",
    "assumptions": [
      "(BornIn(DeborahWallace,Scotland) & Actress(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))",
      "(Play(Psyche) & BasedOn(Psyche,LifeOfJamesMirandaBarry))",
      "(Play(Homesick) & WrittenBy(Homesick,DeborahWallace) & Play(Psyche) & WrittenBy(Psyche,DeborahWallace) & Play(TheVoid) & WrittenBy(TheVoid,DeborahWallace))",
      "CoProduce(DeborahWallace,Gasland)"
    ],
    "goal": "Play(Gasland)"
  },
  {
    "id": 1292,
    "flag": "success",
    "assumptions": [
      "all x.((Animal(x) & Need(x,LargeTerritory)) -> TravelFar(x))",
      "all x.(EatALot(x) -> Need(x,LargeTerritory))",
      "all x.((Big(x) & Animal(x)) -> EatALot(x))",
      "all x.((Bear(x) -> Big(x)) & Animal(x))",
      "(Big(Larry) & Animal(Larry))"
    ],
    "goal": "Bear(Larry)"
  },
  {
    "id": 1293,
    "flag": "success",
    "assumptions": [
      "all x.((Animal(x) & Need(x,LargeTerritory)) -> TravelFar(x))",
      "all x.(EatALot(x) -> Need(x,LargeTerritory))",
      "all x.((Big(x) & Animal(x)) -> EatALot(x))",
      "all x.((Bear(x) -> Big(x)) & Animal(x))",
      "(Big(Larry) & Animal(Larry))"
    ],
    "goal": "(-Bear(Larry) & -TravelFar(Larry))"
  },
  {
    "id": 1294,
    "flag": "success",
    "assumptions": [
      "all x.((Animal(x) & Need(x,LargeTerritory)) -> TravelFar(x))",
      "all x.(EatALot(x) -> Need(x,LargeTerritory))",
      "all x.((Big(x) & Animal(x)) -> EatALot(x))",
      "all x.((Bear(x) -> Big(x)) & Animal(x))",
      "(Big(Larry) & Animal(Larry))"
    ],
    "goal": "(((TravelFar(Larry) & -Need(Larry,LargeTerritory)) | (-TravelFar(Larry) & Need(Larry,LargeTerritory))) -> Bear(Larry))"
  },
  {
    "id": 1330,
    "flag": "success",
    "assumptions": [
      "all x.((ConvictedCriminal(x) & Innocent(x)) -> -TrulyGuilty(x))",
      "all x.((ConvictedCriminal(x) & -CommitCrime(x)) -> Innocent(x))",
      "all x.(ConvictedCriminal(x) & (TrulyGuilty(x) | FoundGuilty(x)))",
      "all x.((ConvictedCriminal(x) & FoundGuilty(x)) -> SentencedToPunishment(x))",
      "all x.((ConvictedCriminal(x) & FoundGuilty(x)) -> CanArgueAgainst(x,Punishment))",
      "(ConvictedCriminal(Garry) & -(FoundGuilty(Garry) | SentencedToPunishment(Garry)))"
    ],
    "goal": "SentencedToPunishment(Garry)"
  },
  {
    "id": 1331,
    "flag": "success",
    "assumptions": [
      "all x.((ConvictedCriminal(x) & Innocent(x)) -> -TrulyGuilty(x))",
      "all x.((ConvictedCriminal(x) & -CommitCrime(x)) -> Innocent(x))",
      "all x.(ConvictedCriminal(x) & (TrulyGuilty(x) | FoundGuilty(x)))",
      "all x.((ConvictedCriminal(x) & FoundGuilty(x)) -> SentencedToPunishment(x))",
      "all x.((ConvictedCriminal(x) & FoundGuilty(x)) -> CanArgueAgainst(x,Punishment))",
      "(ConvictedCriminal(Garry) & -(FoundGuilty(Garry) | SentencedToPunishment(Garry)))"
    ],
    "goal": "(-CommitCrime(Garry) & CanArgueAgainst(Garry,Punishment))"
  },
  {
    "id": 1332,
    "flag": "success",
    "assumptions": [
      "all x.((ConvictedCriminal(x) & Innocent(x)) -> -TrulyGuilty(x))",
      "all x.((ConvictedCriminal(x) & -CommitCrime(x)) -> Innocent(x))",
      "all x.(ConvictedCriminal(x) & (TrulyGuilty(x) | FoundGuilty(x)))",
      "all x.((ConvictedCriminal(x) & FoundGuilty(x)) -> SentencedToPunishment(x))",
      "all x.((ConvictedCriminal(x) & FoundGuilty(x)) -> CanArgueAgainst(x,Punishment))",
      "(ConvictedCriminal(Garry) & -(FoundGuilty(Garry) | SentencedToPunishment(Garry)))"
    ],
    "goal": "-(Innocent(Garry) & -CommitCrime(Garry))"
  },
  {
    "id": 400,
    "flag": "success",
    "assumptions": [
      "IndiePop(Phoenix)",
      "(Band(Phoenix) & From(Phoenix,France))",
      "all x.exists y.((((Band(x) & From(x,France) & Write(x,y) & Song(y)) -> InFrench(y)) & -InEnglish(y)) | (-((Band(x) & From(x,France) & Write(x,y) & Song(y)) -> InFrench(y)) & InEnglish(y)))",
      "all x.((IndiePop(x) -> -PopRock(x)) & -SynthPop(x))",
      "all x.((Song(x) & By(Phoenix,x)) -> -InFrench(x))"
    ],
    "goal": "PopRock(Phoenix)"
  },
  {
    "id": 401,
    "flag": "success",
    "assumptions": [
      "IndiePop(Phoenix)",
      "(Band(Phoenix) & From(Phoenix,France))",
      "all x.exists y.((((Band(x) & From(x,France) & Write(x,y) & Song(y)) -> InFrench(y)) & -InEnglish(y)) | (-((Band(x) & From(x,France) & Write(x,y) & Song(y)) -> InFrench(y)) & InEnglish(y)))",
      "all x.((IndiePop(x) -> -PopRock(x)) & -SynthPop(x))",
      "all x.((Song(x) & By(Phoenix,x)) -> -InFrench(x))"
    ],
    "goal": "exists x.((Write(Phoenix,y) & Song(x)) -> InFrench(x))"
  }
]