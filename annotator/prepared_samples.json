[
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SiblingOfSameAge(x, y)",
        "ComplainAboutAnnoyingSiblings(x)",
        "SpendTimeWithSiblings(x)",
        "LiveAtHomeRegularly(x)",
        "StrongBondsWithFamilyMembers(x)"
      ],
      "fol_consts": [
        "Luke"
      ],
      "fol_rules": [
        "∀x (Twin(x) ⊕ Triplet(x)) → SpendTimeWithSiblings(x)",
        "∀x,y (SiblingOfSameAge(x, y) → Twin(x) ∨ Triplet(y))",
        "∀x (ComplainAboutAnnoyingSiblings(x) → SiblingOfSameAge(x, y))",
        "∀x (~LiveAtHomeRegularly(x)) → ~StrongBondsWithFamilyMembers(x)",
        "∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSiblings(Luke)",
      "perplexity": [
        1.2269138097763062,
        1.0757089853286743
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x,y (SiblingOfSameAge(x, y) → Twin(x) ∨ Triplet(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Siblings(x, y)",
        "Hangout(x, y)",
        "Play(x, y)",
        "Complain(x)",
        "Developstrongbondswithfamily(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Twinsortriplets(x) → ∃y (Siblings(x, y)) ∧ Hangout(x, y) ⊕ Play(x, y))",
        "∀x (Sameage(y1, y2) ∨ Sameage(y2, x) ∨ Sameage(x, y3) → Twinsortriplets(x))",
        "∀x (Complain(often, siblingsannoying) → ∃y (Siblings(x, y)))",
        "¬Liveathomeoften(x) → ¬Developstrongbondswithfamily(x)",
        "Hangoutfrequently(siblingplayingtime) → ¬(Liveathomeoften(x))"
      ],
      "fol_conc": "(Twinsortriplets(luketwinstriplet) ∧ Developstrongbondswithfamily(luke) ⊕ ¬Developstrongbondswithfamily(luke)) → Complain(often, siblingsannoying)",
      "perplexity": 2.0700769424438477,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AreTwinsOrTriplets(x)",
        "HaveSameAgeSiblings(x, y)",
        "ComplainAboutAnnoyingSiblings(x)",
        "DoNotLiveHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)",
        "HaveSameAgeSiblings(y)",
        "AreTwinsOrTriplets(z)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (AreTwinsOrTriplets(x) → HaveSameAgeSiblings(x, y))",
        "∀x (HaveSameAgeSiblings(x, y) → AreTwinsOrTriplets(z))",
        "∀x (ComplainAboutAnnoyingSiblings(x) → HaveSameAgeSiblings(y))",
        "∀x (DoNotLiveHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x))",
        "∀y (HaveSameAgeSiblings(y, y) → DevelopStrongBondsWithFamilyMembers(z))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSiblings(luke)",
      "perplexity": 2.8583669662475586,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HaveSameAgeSiblings/1, HaveSameAgeSiblings/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HaveSameAgeSiblings/1, HaveSameAgeSiblings/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 41
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cows(x)",
        "Pets(x)",
        "Bovines(x)",
        "Domesticated(x)"
      ],
      "fol_consts": [
        "ted",
        "alligator"
      ],
      "fol_rules": [
        "∀x (Cows(x) → Bovines(x))",
        "∃x (Pets(x) ∧ Cows(x))",
        "∀x (Bovines(x) → Domesticated(x))",
        "¬∃x (Domesticated(x) ∧ Alligators(x))"
      ],
      "fol_conc": "(Ted → Cows(ted)) ⊕ ¬Pets(ted)",
      "perplexity": [
        1.2484641075134277,
        1.1561964750289917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Ted → Cows(ted)) ⊕ ¬Pets(ted)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Pet(x)",
        "Bovine(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Is(x, cow) → Is(x, bovine))",
        "∃x (Pet(x) ∧ Bovine(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))"
      ],
      "fol_conc": "¬(Is(ted, cow) ∨ Pet(cow))",
      "perplexity": 1.4094665050506592,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bovine/1, Bovine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bovine/1, Bovine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cows(x)",
        "Pets(x)",
        "Bovines(x)",
        "Domesticated(x)",
        "Alligators(x)",
        "Pets(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "(∀x (Cows(x)) → Bovines(x))",
        "∃x (Pets(x) ∧ Cows(x))",
        "(Bovines(x) → Domesticated(x))",
        "¬(Domesticated(x) ∧ Alligators(x))"
      ],
      "fol_conc": "Cows(ted) → ¬Pets(ted)",
      "perplexity": 2.1449155807495117,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 42
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BreedBack(x, y)",
        "AnimalType(y)",
        "Extinct(z)"
      ],
      "fol_consts": [
        "heck_cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∃y (BreedBack(heck_cattle, aurochs))",
        "∀x (AnimalType(x) → AnimalType(heck_cattle))",
        "∀x (Extinct(auroch))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.5808722972869873,
        1.4495298862457275
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Bredback(x)",
        "Resembles(y, z)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Animal(x) → ∃y ((Bredback(hekk)) ∧ Resemble(heck, auroch)))",
        "∀x (Is(a, yaurosh)) → ¬Animal(yaurosh)"
      ],
      "fol_conc": "Not(animal)",
      "perplexity": 2.9162724018096924,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BreedingBack(x)",
        "Resemble(x, y)",
        "Animal(z)",
        "Animal(w)",
        "BreedingBack(x)",
        "Animal(z)",
        "Animal(y)",
        "BreedingBack(x)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BreedingBack(x, y)) ∧ Resemble(x, y)",
        "Resemble(auroch, heckcattl)",
        "Animal(z)"
      ],
      "fol_conc": "Animal(aurocs)",
      "perplexity": 6.186699390411377,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 43
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomer(x, y)",
        "AppearsInCompanyToday(x)",
        "HasLunchAtHome(x)",
        "WorksRemotelyFromHome(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x)) → SchedulesMeetingWithCustomer(x, y)",
        "(HasLunchInCompany(james)) ⊕ HasLunchAtHome",
        "(¬(HasLunchInTheOffice)) ∨ ¬Manager",
        "HasLunchAtHome(james)→ WorksRemotelyFromHome(james)",
        "∀x ((InOtherCountry(x))) → (WorksRemoteFromHome(x))",
        "(¬(Manager(james))) ⊕ AppearsInCompanyToday",
        "(Manager(james)) ∧ AppearsInTheOffice"
      ],
      "fol_conc": "HasLunchAtCompany(james)",
      "perplexity": [
        1.6723607778549194,
        1.5078364610671997
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(HasLunchInCompany(james)) ⊕ HasLunchAtHome"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedules(x, y)",
        "Meets(y, z)",
        "Lunch(x, w)",
        "Company(z)",
        "Remote(x)",
        "Manager(x)",
        "Appears(x, w)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) → ∃y ((Schedules(x, y)) ∧ Appears(y, z)))",
        "∀x (Lunch(x, w) → Schedules(x, y))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Remote(x) ∨ ¬Appears(home, x))",
        "∃x ((Manager(y) ∧ Appears(z)) ⊕ (¬Manager(w) ∨ ¬Appear(v)))"
      ],
      "fol_conc": "Lunch(james, company)",
      "perplexity": 1.8867417573928833,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomers(x, y)",
        "HasLunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "AppearInCompanyToday(y)",
        "IsManager(x)",
        "Employee(x)",
        "HasLunchAtHome(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x)) → ∃y ((ScheduleMeetingWithCustomers(x, y))) → AppearInCompanyToday(y)",
        "∀x ((HasLunchAtHome(x) → WorkRemotelyFromHome(x)))",
        "∀x ((WorkRemotelyFromHome(x) → Employee(x)))",
        "∀x (IsManager(x) ⊕ HasLunchAtHome(x))"
      ],
      "fol_conc": "(Employee(james) ∧ ScheduleMeetingWithCustomers(james, company))",
      "perplexity": 3.739215135574341,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 44
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "HaveTeeth(x)",
        "Mammal(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) → HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.1797159910202026,
        1.0401310920715332
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Is(x)",
        "Mammal(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Has(platypus, teeth))",
        "¬Has(platypus, teeth)",
        "∀y ((Mammal(y) ∧ Has(y, teeth))) → Is(humans)"
      ],
      "fol_conc": "Is(platypus)",
      "perplexity": 2.2630465030670166,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HaveTeeth(x)",
        "AreMammals(y, x)",
        "AreMammals(z)",
        "HaveTeeth(w)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (AreMammals(humans)) → ∀y ((AreMammals(x) → HaveTeeth(y)))",
        "(∃w (AreMammals(platypus) ∧ ¬HaveTeeth(w)))",
        "∃z (AreMammals(z, platypus))"
      ],
      "fol_conc": "¬AreMammals(platypus)",
      "perplexity": 4.313832759857178,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: AreMammals/2, AreMammals/1.\n\n\nFatal error:  The following symbols are used with multiple arities: AreMammals/2, AreMammals/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 45
  },
  {
    "id": 179,
    "nl_problem": {
      "context": [
        "All horses have hooves.",
        "No humans have hooves."
      ],
      "question": "Some humans are horses.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Horse(x)",
        "Hooves(x)",
        "Human(y)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Horse(x) → Hooves(x))",
        "∀y (Human(y) → ¬Hooves(y))"
      ],
      "fol_conc": "∃z (Human(z) ∧ Horse(z))",
      "perplexity": [
        1.1672672033309937,
        1.103865623474121
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Horses(x)",
        "Hooves(x)"
      ],
      "fol_consts": [
        "human",
        "horse"
      ],
      "fol_rules": [
        "∀x (Horses(x) → Hooves(x))",
        "∃y (Human(y) ∧ ¬Hooves(y))"
      ],
      "fol_conc": "∃z (Human(z) ⊕ Horse(z))",
      "perplexity": 1.7986485958099365,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasHooves(x)",
        "IsHuman(y)"
      ],
      "fol_consts": [
        "horse",
        "human"
      ],
      "fol_rules": [
        "∀x (IsHuman(horse)) → HasHooves(horse)",
        "¬HasHooves(human)"
      ],
      "fol_conc": "∃y (IsHuman(y) ∧ IsHuman(x))",
      "perplexity": 3.447566032409668,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 46
  },
  {
    "id": 102,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke spends a lot of time hanging out and playing with his siblings.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "TwinOrTriplet(x)",
        "SameAgeSibling(x, y)",
        "ComplainsOftenAboutAnnoyingSiblings(x)",
        "DoesNotLiveAtHomeRegularly(x)",
        "SpendsLotOfTimeWithSibling(x, y)",
        "DevelopStrongBondsFamilyMembers(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (TwinOrTriplet(x) → SpendsLotOfTimeWithSibling(x,y))",
        "(∃y SameAgeSibling(x, y)) ⊕ TwinOrTriplet(x)",
        "∀x (ComplainsOftenAboutAnnoyingSiblings(x) → ∃(SameAgeSibling(y1, y2)))",
        "∀x (DoesNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsFamilyMembers(x))",
        "∀x,y,z ((SpendsLotOfTimeWithSibling(x,y) → DoesNotLiveAtHomeRegularly(z))"
      ],
      "fol_conc": "TwinOrTriplet(luke) ∨ DevelopStrongBondsFamilyMembers(luke)",
      "perplexity": [
        1.4208558797836304,
        1.1745187044143677
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (ComplainsOftenAboutAnnoyingSiblings(x) → ∃(SameAgeSibling(y1, y2)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Hangout(x, siblings)",
        "Play(x, siblings)",
        "Complain(x)",
        "Regularly(x, home)",
        "Develops(x)",
        "Siblings(x, siblingage)",
        "Twin(x)",
        "Triplet(x)",
        "Sameage(y, z)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Is(x, twin) ∨ Is(x, triplet)) → Hangout(x, siblings)",
        "∃y (Siblings(x, siblingage) → Sameage(y, y))",
        "Complain(x) → Siblings(x, sameage)",
        "Regularly(x, home) ⊕ Develops(x)"
      ],
      "fol_conc": "Hangout(lukem, siblings)",
      "perplexity": 2.3107151985168457,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Sameage/2, Sameage/0, Siblings/2, Siblings/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Sameage/2, Sameage/0, Siblings/2, Siblings/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "TwinsOrTriplets(x)",
        "HangsOutAndPlaysWithSiblings(x, y)",
        "HasSiblingsOfSameAge(x)",
        "ComplainAboutAnnoyingSibling(x)",
        "DoesNotLiveAtHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)",
        "HasSiblingsOfSameAge(x)"
      ],
      "fol_consts": [
        "Luke"
      ],
      "fol_rules": [
        "∀x (TwinsOrTriplets(x) → ∃y (HangsOutAndPlaysWithSiblings(y, x)))",
        "∀x ((HasSiblingsOfSameAge(x)) → TwinsOrTriplets(x))",
        "∀x (ComplainAboutAnnoyingSibling(x) → HasSiblingsOfSameAge(x))",
        "∀x (DoesNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x))",
        "∀x (HangsOutAndPlaysWithSiblings(x, y) → DoesNotLiveAtHomeRegularly(y))"
      ],
      "fol_conc": "HangsOutAndPlaysWithSiblings(Luke, Luke)",
      "perplexity": 1.8125624656677246,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 47
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "TurkeyType(x)",
        "EasternWildTurkey",
        "OsceolaWildTurkey",
        "GouldsWildTurkey",
        "MerriamsWildTurkey",
        "RiosGrandeWildTurkey",
        "OcellatedWildTurkey"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (TurkeyType(x) ∧ TurkeyType(EasternWildTurkey) ⊕ TurkeyType(OsceolaWildTurkey))",
        "¬TurkeyType(tom, EasternWildTurkey)",
        "¬TurkeyType(tom, OsceolaWildTurkey)",
        "¬TurkeyType(tom, GouldsWildTurkey) ∧ ¬TurkeyType(tom, MerriamsWildTurkey)",
        "¬TurkeyType(tom, RiosGrandeWildTurkey)"
      ],
      "fol_conc": "",
      "perplexity": [
        1.4506170749664307,
        1.1378172636032104
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Wildturkey(y)"
      ],
      "fol_consts": [
        "tom",
        "easternwildturkey"
      ],
      "fol_rules": [
        "∃x (Wildturkey(tom))",
        "¬(Is(tom, easternwildturkey) ∧ Is(tom, osceolawildturkey))",
        "¬(Is(tom, gouldswildturkey) ∨ Is(tom, merriamswildturkey) ∨ Is(tom, riegraewildturkey))"
      ],
      "fol_conc": "(∀y (Wildturkey(y))) → Is(tom, easternwildturkey)",
      "perplexity": 1.6988955736160278,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsWildTurkey(x)",
        "IsWildTurkey(x, y)"
      ],
      "fol_consts": [
        "tom",
        "eastern",
        "osceola",
        "goulds",
        "merriams",
        "rio",
        "ocellated"
      ],
      "fol_rules": [
        "(∃x (IsWildTurkey(tom)))",
        "(¬(IsWildTurkey(tom, eastern)))",
        "(¬(IsWildTurkey(tom, osceola)))",
        "(¬((IsWildTurkey(tom, goulds) ∨ IsWildTurkey(tom, merriams) ∧ IsWildTurkey(tom, rio))))"
      ],
      "fol_conc": "∃y (IsWildTurkey(y, eastern) ∧ IsWildTurkey(tom, y))",
      "perplexity": 2.033862829208374,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsWildTurkey/1, IsWildTurkey/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsWildTurkey/1, IsWildTurkey/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 48
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Mammal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Wings(x)",
        "Breathes(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathes(x))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.6859349012374878,
        1.0583140850067139
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Flies(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "rock",
        "fly"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Flies(x))",
        "∀x (Flies(x) → Has(x, wings))",
        "∃x ((¬Is(rock, fly)) ∧ ¬Is(rock, bird) → ¬Flies(rock) ∧ ¬Breathes(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.3854994773864746,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bird/1, Bird/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bird/1, Bird/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsA(x, y)",
        "Fly(x)",
        "Breathes(x)",
        "Fly(x)",
        "Breathes(x)",
        "IsA(fly, z)"
      ],
      "fol_consts": [
        "rock",
        "fly"
      ],
      "fol_rules": [
        "∀x (IsA(rock, x))",
        "∃y (IsA(m, y) ∧ IsA(y, fly))"
      ],
      "fol_conc": "∃z ((IsA(x, z) ∨ IsA(z, m)) ∧ Fly(x) ∧ Breathes(x))",
      "perplexity": 2.650411605834961,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fly/1, Fly/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fly/1, Fly/0"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 49
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Seasons(x)",
        "FavoriteSeason(Emma, x)",
        "FavoriteSeason(Mia, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "James"
      ],
      "fol_rules": [
        "∀x (Seasons(spring) ∨ Seasons(summer))",
        " FavoriteSeason(Emma, summer)",
        "FavoriteSeason(Mia,y) → ¬Favorite Season(x Emma)"
      ],
      "fol_conc": "favoriteSeason(james,sommer):James loves sommer the most.",
      "perplexity": [
        2.8868229389190674,
        1.8325409889221191
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteSeason(Mia,y) → ¬Favorite Season(x Emma)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Favorite(x, y)",
        "Student(x)",
        "Love(y, z)",
        "Vacation(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x))",
        "∃y ∃z ((Student(y) → Love(z, summer)))",
        "(Favorite(emma, x) ∧ Favorite(mia, y) ⊕ ¬Equal(x, y))",
        "Vacation(james)",
        "∀x ∀y (Season(x) ⊕ Season(y))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 2.4553370475769043,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Seasons(x)",
        "FavoriteSeason(x, y)",
        "LoveMost(y)",
        "WantLongVacation(x)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "(∀x (Seasons(spring)) ∧ Seasons(summer) ∧ Seasons(fall) ∧ Seasons(winter))",
        "(∀x ((LoveMost(x, summer)) → WantLongVacation(y)))"
      ],
      "fol_conc": "FavoriteSeason(james, summer)",
      "perplexity": 2.850581169128418,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 50
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x, y)",
        "BornIn(x, z)",
        "American(city)",
        "WrittenBy(y, z)"
      ],
      "fol_consts": [
        "daniShapiro",
        "familyHistory",
        "familySecrets"
      ],
      "fol_rules": [
        "Podcast ≠ Novel(familySecrets)",
        "BG1: ∀x (BornIn(x, AmericanCity) → American(AmericanCity))",
        "BG2: ∃y ((Novel(y,y) ⊕ WrittenBy(daniShapiro, familyHistory)) → NovelWriter(y))",
        "Dani Shapiro is an AnAmericanWriter",
        "BostonIsAnAmericanCity"
      ],
      "fol_conc": "BornIn(DaniShapiro, Boston)",
      "perplexity": [
        2.4367899894714355,
        1.2102612257003784
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Podcast ≠ Novel(familySecrets)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Born(y, z)",
        "Writer(z)",
        "Novel(x)",
        "Podcast(z)",
        "Created(podcast, person)"
      ],
      "fol_consts": [
        "dani",
        "shapiro"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Is(x, novel))",
        "∃z ((Born(dani, z) ∧ Is(americancity, x)) → Is(z, american))",
        "∀y (Novel(y) ∧ Writer(shapiro, y) → Is(shapiro, novelist))",
        "Is(shapiro, dani)",
        "(Writer(shapiro, familyhistory) ∧ Novel(familyhistory) ∧ Writtenin2003(familyhistory))"
      ],
      "fol_conc": "Born(dani, boston)",
      "perplexity": 1.8343496322631836,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Novel/1, Novel/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Novel/1, Novel/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsNot(x, y)",
        "BornIn(x, y)",
        "WrittenBy(x, y)",
        "NovelWriter(x)",
        "WrittenBy(y, z)",
        "NovelWriter(z)",
        "NovelWriter(y)",
        "WrittenBy(z, w)",
        "A Novel(y)",
        "IsNot(x, y)",
        "IsNot(x, z)",
        "A Novel(y)",
        "BornIn(w, v)",
        "WrittenBy(y, w)",
        "IsNot(x, y)",
        "A Novel(u)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "boston"
      ],
      "fol_rules": [
        "(∃z (NovelWriter(z))) ∧ ¬(IsNot(dani_shapiro, z))",
        "(BornIn(x, y)) → IsNot(x, novel)",
        "(∀y (A Novel(y) ∧ WrittenBy(w, y) → NovelWriter(w)))",
        "(NovelWriter(dani_shapiro))",
        "((WrittenBy(dani_shapiro, family_history)) ∨ ¬(IsNot(family_history, novel)))",
        "(A Novel(family_history))",
        "(BornIn(x, y) → IsNot(y, boston))",
        "(∀x (NovelWriter(w) → WrittenBy(dani_shapiro, x)))"
      ],
      "fol_conc": "BornIn(dani_shapiro, family_history)",
      "perplexity": 3.9445881843566895,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀y (A Novel(y) ∧ WrittenBy(w, y) → NovelWriter(w)))"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 51
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "AnalogText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984",
        "hardcoverBook(1984)"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬AnalogText(x))",
        "∀x (PrintedText(x) → AnalogText(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": [
        1.547386884689331,
        1.1075043678283691
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Media(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(y)",
        "Hardcover(z)",
        "Digital(w)",
        "Book(u)"
      ],
      "fol_consts": [
        "book",
        "service"
      ],
      "fol_rules": [
        "∀x (Media(x) → ¬Analog(x))",
        "∀y (Printed(y) → Analog(y))",
        "∀z (Streaming(z) → Digital(z))",
        "∃u (Book(u) ∧ Hardcover(u))",
        "(Digital(service1984)) → (Media(service1984) ∧ Book(service1984))"
      ],
      "fol_conc": "(Streaming(book1984))",
      "perplexity": 2.186185598373413,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "nineteen84"
      ],
      "fol_rules": [
        "∀x (Digital(x) → ¬Analog(x))",
        "∀x ((HardcoverBook(x) → Analog(x)))",
        "∀x ((StreamingService(x) → Digital(x)))"
      ],
      "fol_conc": "StreamingService(nineteen84)",
      "perplexity": 1.4436042308807373,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 52
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorksRegularlyOftenAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyingOrganizingSpacesInHome(x)",
        "VisitStoreRegularly(x, y)",
        "GoesToBedLateAndWakesUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "officeSupply"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x)): All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksRegularlyOftenAtHome(x) → TidyingOrganizingSpacesInHome(x)) : All people who work regularly and often at home spend free time tidying and organizing the spaces in their homes.",
        "VisitStoreRegularly(remy, officeSupply)",
        "∃x ((TidyingOrganizingSpacesInHome(x) → ¬GoesToBedLateAndWakesUpAfterNoon(x))) : If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(∃x (TidyingOrganizingSpacesInHome(remy) ∧ GoesToBedLateAndWakesUpAfterNoon(x))) ⊕ ¬((TidyingOrganizingSpacesInHome(remy)) ∨ (GoesToBedLateAndWakesUpAfterNoon(x))): Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "fol_conc": "VisitStoreRegularly(remy, officeSupply)",
      "perplexity": [
        1.2690494060516357,
        1.0767649412155151
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Works(x, z)",
        "Home(y)",
        "Regularly(x)",
        "Often(x)",
        "Fullystocked(z)",
        "Impressive(w)",
        "Tidy(x)",
        "Organize(x)",
        "Visit(z)",
        "Goeslate(x)",
        "Wakeupafternoon(x)",
        "Remygoeshomeoffice(x)"
      ],
      "fol_consts": [
        "remy",
        "largedesktopmonitor",
        "homeoffice"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Regularly(worksat, home))",
        "∀x (Fullystocked(x) ∧ Impressive(y) → Owns(x, largedesktopmonitor))",
        "∀x (Regularly(w, z) ∨ Often(w, z)) → Tidy(oftenw, x)",
        "∀x (Regularly(workathome, y)) → Visit(z)",
        "∀x (Tidy(x) → ¬Goeslate(y) ∧ Wakeupafternoon(y))",
        "Remygoeshomeoffice(r) → Remybothgoestolateandwakeupafternoontheirhomeorremydoesenottolatesnororganizesherhomeandvisitsstoreoften(r)"
      ],
      "fol_conc": "Regularly(visit, officeupply)",
      "perplexity": 2.593095541000366,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHomeRegularlyAndOften(x)",
        "HomeOffice(x)",
        "TidyOrganizeSpacesInHomeFreeTime(x)",
        "VisitOfficeSupplyStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "(∀x (Own(x, y) → WorkAtHomeRegularlyAndOften(x)))",
        "(∀x (HomeOffice(x) → Own(x, y)))",
        "(∀x ((WorkAtHomeRegularlyAndOften(x) ∧ TidyOrganizeSpacesInHomeFreeTime(x))) ⊕ ¬(TidyOrganizeSpacesInHomeFreeTime(x)))",
        "((∀x (VisitOfficeSupplyStore(x) → WorkAtHomeRegularlyAndOften(x))))",
        "(TidyOrganizeSpacesInHomeFreeTime(y) ∧ ¬WorkAtHomeRegularlyAndOften(x)) ⊕ TidyOrganizeSpacesInHomeFreeTime(z)",
        "((Own(remy, y) → WorkAtHomeRegularlyAndOften(remy)))",
        "(TidyOrganizeSpacesInHomeFreeTime(remy) ∧ ¬WorkAtHomeRegularlyAndOften(y)) ⊕ (¬TidyOrganizeSpacesInHomeFreeTime(z) ∨ VisitOfficeSupplyStore(w))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(r) → WorkAtHomeRegularlyAndOften(remy)",
      "perplexity": 1.8778806924819946,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 53
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "IsMachineLearningAlgorithm(x)",
        "CategoryOf(x, y)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "state-of-the-art text summarization model"
      ],
      "fol_rules": [
        "∀x (IsMachineLearningAlgorithm(x) → ∃y CategoryOf(x,y))",
        "∀x CategoryOf(x, 'unsupervised learning') ⊕ RequiresLabelledData(x)",
        "CategoryOf('state-of-the-art text summarization model', y)",
        "'reinforcement learning' ≠ x ⊓ (IsMachineLearningAlgorithm(y) → ∃z CategoryOf(z,x))",
        "(∀x IsSupervisedLearningAlgorithm(x) → RequiresLabelledData(state-of-the-art-text-summarization-model))"
      ],
      "fol_conc": "'supervised learning' ∈ {y | IsMachineLearningAlgorithm('state-of-the-art text summarization model'), CategoryOf(y,x)}",
      "perplexity": [
        1.141473412513733,
        1.9452635049819946
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "'reinforcement learning' ≠ x ⊓ (IsMachineLearningAlgorithm(y) → ∃z CategoryOf(z,x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Requires(y)",
        "Stateofart(x)",
        "Trained(x, y)"
      ],
      "fol_consts": [
        "supervised",
        "unsupervised",
        "reinforcement"
      ],
      "fol_rules": [
        "∀x (Machinelearning(algorithm) → Category(algorithm, supervised)) ∨ Category(algorithm, unsupervised) ∨ Category(algorithm, reinforcement)",
        "Unsupervised(x) ∧ ¬Requires(y)",
        "Stateofart(textsummarizationmodel) ∧ Trained(stateofarttextsummarizationmodel, machinelearningalgorithms)",
        "∀x (Category(x, reinforcement) → ¬Trained(model, x))",
        "(Machinelearningtrainsummaryrequireslabelleddata(x) ∧ Category(algorithm, supervised))"
      ],
      "fol_conc": "Stateofart(textsummarizationmodel) → Trained(stateofarttextsummarizationmodel, machinelearningalgorithms)",
      "perplexity": 2.4101879596710205,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/1, Unsupervised/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/1, Unsupervised/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CategoryAs(x, y)",
        "RequiresLabelledData(x)",
        "TrainWithMLAlgorithm(y)",
        "NotUsedToTrain(x)",
        "TrainWithMLAlgorithm(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml",
        "supervised",
        "unsupervised",
        "reinforcement"
      ],
      "fol_rules": [
        "∀x (CategoryAs(ml, supervised)) ⊕ ∀x (CategoryAs(ml, unsupervised)) ⊕ ∀x (CategoryAs(ml, reinforcement))",
        "∀y (RequiresLabelledData(y) → CategoryAs(machinelearningalgorithm, y))",
        "TrainWithMLAlgorithm(stateofarttextsummarizationmodel)",
        "NotUsedToTrain(reinforcement)",
        "TrainWithMLAlgorithm(stateofthearttextsummarizationmodel)",
        "∀x (RequiresLabelledData(x) → TrainWithMLAlgorithm(textsummarisationalgorithm))"
      ],
      "fol_conc": "CategoryAs(supervised, stateofthearttextsummary) ∧ RequiresLabelledData(supervised)",
      "perplexity": 2.6320624351501465,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 54
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Person(x) → (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))"
      ],
      "fol_conc": "¬LivesInTaxHaven(djokovic)",
      "perplexity": [
        1.0717785358428955,
        1.0335109233856201
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Champion(x)",
        "Oscar(x)",
        "Celebrity(x)",
        "Player(x, y)",
        "Tennis(y)",
        "Wellpaid(x)",
        "Athlete(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Champion(x) ⊕ Oscar(x))",
        "∀x ((Player(x, y) ∧ Tennis(y)) → Champion(x))",
        "∀x (Oscar(x) → Celebrity(x))",
        "∀y (Tennis(y) → Athlete(y))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x ((Athlete(x) ∧ Famous(x)))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic) → Wellpaid(djokovic))"
      ],
      "fol_conc": "¬Taxhaven(djokovic)",
      "perplexity": 1.4503347873687744,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "Celebrity(x)",
        "ProfessionalTennisPlayer(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x ((ProfessionalTennisPlayer(x) ∧ GrandSlamChampion(x))) → Athlete(x)",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → ¬LiveInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": 1.3659298419952393,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 55
  },
  {
    "id": 200,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva foes not play for a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "BornIn(x, y)",
        "LoanedOutTo(x, z)",
        "PlaysForClub(x, z)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico"
      ],
      "fol_rules": [
        "Player(ailton)",
        "BornIn(ailton, 1995)",
        "Player(ailton) → LoanedOutTo(ailton, braga)",
        "Brazilian(ailton)",
        "PlaysForClub(ailton, nautico)"
      ],
      "fol_conc": "¬PlaysForClub(ailton, z)",
      "perplexity": [
        1.7153165340423584,
        1.0750975608825684
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(y, x)",
        "Player(x)",
        "Loanedoutto(x, z)",
        "Brazillian(x)",
        "Footballclub(z)",
        "Playfor(x, w)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∃y (Known(ailton, y))",
        "∀x (Player(x) ∧ Loanedoutto(x, braga))",
        "∀w ((Footballclub(w) ∨ Playfor(silva, w))) ⊕ Brazillian(silva)",
        "(Playfor(silva, nautico) ∧ Footballclub(nautico) ∧ Player(silva)) → (Loanedoutto(x, braga) ∨ Footballclub(braga))"
      ],
      "fol_conc": "¬Player(silva)",
      "perplexity": 2.114076852798462,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "IsKnownAs(y, z)",
        "FootballPlayer(z)",
        "LoanedOutTo(w, x)",
        "Brazilian(z)",
        "PlaysFor(y, w)",
        "Club(y)"
      ],
      "fol_consts": [
        "ailtonSilva",
        "1995",
        "braga",
        "nautico",
        "braga",
        "braga"
      ],
      "fol_rules": [
        "BornIn(ailtonSilva, 1995)",
        "IsKnownAs(ailtonSilva, ailtonSilva)",
        "FootballPlayer(ailtonSilva) ∧ LoanedOutTo(braga, ailtonSilva)",
        "Brazilian(ailtonSilva) ∧ PlaysFor(nautico, ailtonSilva)",
        "Club(nautico)",
        "Club(braga)"
      ],
      "fol_conc": "¬PlaysFor(ailtonSilva, x)",
      "perplexity": 2.13320255279541,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 56
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicEvent(x)",
        "WorldChampionships(x)",
        "Sport(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "UnitedStatesWonMostMedalsInTokyo",
        "LastOlympicGames"
      ],
      "fol_rules": [
        "∀x (SportingEvent(x) → OlympicEvent(x))",
        "LastOlympicGames(tokyo)",
        "UnitedStatesWonMostMedalsInTokyo(LastOlympicGames)"
      ],
      "fol_conc": "∃x (WorldChampionships(x) ∧ SportingEvent(x))",
      "perplexity": [
        1.8208757638931274,
        1.2544565200805664
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LastOlympicGames/1, LastOlympicGames/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LastOlympicGames/1, LastOlympicGames/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(y, z)",
        "Won(z, x)"
      ],
      "fol_consts": [
        "olympics",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "∀x (Sporting(olympics))",
        "∃y ∀z ((Last(tokyo, y)) → Sporting(y))",
        "Won(unitedstates, tokyo)"
      ],
      "fol_conc": "∃w (Sporting(worldchampionships))",
      "perplexity": 2.155946731567383,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "WonMostMedalsInCity(y, z)"
      ],
      "fol_consts": [
        "olympic games",
        "tokyo",
        "united states"
      ],
      "fol_rules": [
        "(∀x (SportingEvent(x)))",
        "(∃z (SportingEvent(z) ∧ WonMostMedalsInCity(united states, tokyo)))"
      ],
      "fol_conc": "(∃y (SportingEvent(y)))",
      "perplexity": 1.8392326831817627,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 57
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Hawk(x)",
        "Land(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Land(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": [
        1.339328408241272,
        1.0951099395751953
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(y)",
        "Lands(z)"
      ],
      "fol_consts": [
        "hawk",
        "bird"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃y (Bird(y) ∧ Hawk(y))"
      ],
      "fol_conc": "∀z (Bird(z) → Lands(z))",
      "perplexity": 2.4610588550567627,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Hawk(x)",
        "Lands(x)",
        "Bird(y)",
        "Lands(y)",
        "Hawk(z)"
      ],
      "fol_consts": [
        "hawk1"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃y (Bird(y) ∧ Hawk(y))"
      ],
      "fol_conc": "¬(∀z (Bird(z) → Lands(z)))",
      "perplexity": 2.3190512657165527,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 58
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "LovesAnimals(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (LovesAnimals(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → LovesAnimals(x))"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.1172765493392944,
        1.046775460243225
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x, y)",
        "Animal(y)",
        "Lover(x)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x) → ¬(Mean(x, y)))",
        "∃x (Grumpy(x) → Mean(x, y))",
        "∀x (Lover(x) → Nice(x))",
        "∀x (Owns(x, y) → Lover(y))"
      ],
      "fol_conc": "(¬(Grumpy(tom) ∧ ¬Mean(tom, tom)))",
      "perplexity": 1.465647578239441,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "LoveAnimals(x)",
        "OwnPet(x)",
        "NiceToAnimals(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬(MeanToAnimals(x)))",
        "∃x (MeanToAnimals(x) ∧ ¬(NiceToAnimals(x)))",
        "∀x (LoveAnimals(x) → NiceToAnimals(x))",
        "∀x ((OwnPet(x) → LoveAnimals(x)))",
        "OwnPet(tom)"
      ],
      "fol_conc": "(¬MeanToAnimals(tom)) ∧ ¬(NiceToAnimals(tom))",
      "perplexity": 3.6626734733581543,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 59
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SuperheroMovie(x)",
        "GoodGuysWinInSuperheroMovies",
        "Fight(x,y,z)",
        "BadGuy(y) ∨ GoodGuy(z)",
        "NamedAfterCharacter(x, y, z)"
      ],
      "fol_consts": [
        "sir_digby",
        "nemesis",
        "surprising_adventures_of_sir_digby_chicken_caesar"
      ],
      "fol_rules": [
        "∀x (SuperheroMovie(x) → GoodGuysWinInSuperheroMovies)",
        "(Fight(sir_digby, nemesis, x)) ⊕ ¬(BadGuy(nemesis) ∨ GoodGuy(sir_digby))",
        "NamedAfterCharacter(surprising_adventures_of_sir_digby_chicken_caesar, sir_digby, SuperheroMovie(x)"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9417173862457275,
        1.2082852125167847
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (SuperheroMovie(x) → GoodGuysWinInSuperheroMovies)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Goodguy(y, x)",
        "Badguy(z, w)",
        "Fights(w, y)",
        "Namedafter(v, u)",
        "Appears(u, v)",
        "Wins(a, b)"
      ],
      "fol_consts": [
        "sirdigby",
        "chickencaesar"
      ],
      "fol_rules": [
        "∀x (Superhero(x) → ∃y (Goodguy(y, x)) ⊕ ∃z (Badguy(z, w)))",
        "Superhero(chickencaesar)",
        "Fights(sirdigby, y)",
        "Namedafter(y, sirdigby)",
        "∀u ((Namedafter(u, v)) → Goodguy(v, u) ∧ Appears(u, v))",
        "Wins(x, y) ⊕ Wins(z, w)"
      ],
      "fol_conc": "∃z (Fights(sirdigby, z) ∧ Badguy(y, z) ∧ Wins(sirdigby, z))",
      "perplexity": 2.2413289546966553,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GoodGuy(x)",
        "Fight(x, y)",
        "Fight(y, x)",
        "GoodGuy(x)",
        "NamedAfter(x, y)",
        "AppearsIn(x, y)"
      ],
      "fol_consts": [
        "sirDigbyChickencaeasar",
        "digbychickencaesar"
      ],
      "fol_rules": [
        "∀x (Fight(x, y)) → ∃z (GoodGuy(z) ⊕ GoodGuy(y))",
        "(NamedAfter(sirDigbyChickencaeasar, digbychickencaesar)) → GoodGuy(digbychickencaesar)",
        "(NamedAfter(sirDigbyChickencaeasar, digbychickencaesar)) → (AppearsIn(sirDigbyChickencaeasar, digbychickencaesar))",
        "∀x (GoodGuy(x) ∧ Fight(digbychickencaesar, x)) → GoodGuy(x)",
        "Fight(sirDigbyChickencaeasar, y) ∨ Fight(y, sirDigbyChickencaeasar)"
      ],
      "fol_conc": "¬(∀x (GoodGuy(digbychickencaesar) ⊕ Fight(digbychickencaesar, x)))",
      "perplexity": 2.4642491340637207,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 60
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SiblingOfSameAge(x, y)",
        "ComplainAboutAnnoyingSiblings(x)",
        "SpendTimeWithSiblings(x)",
        "LiveAtHomeRegularly(x)",
        "StrongBondsWithFamilyMembers(x)"
      ],
      "fol_consts": [
        "Luke"
      ],
      "fol_rules": [
        "∀x (Twin(x) ⊕ Triplet(x)) → SpendTimeWithSiblings(x)",
        "∀x,y (SiblingOfSameAge(x, y) → Twin(x) ∨ Triplet(y))",
        "∀x (ComplainAboutAnnoyingSiblings(x) → SiblingOfSameAge(x, y))",
        "∀x (~LiveAtHomeRegularly(x)) → ~StrongBondsWithFamilyMembers(x)",
        "∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSiblings(Luke)",
      "perplexity": [
        1.2269138097763062,
        1.0757089853286743
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x,y (SiblingOfSameAge(x, y) → Twin(x) ∨ Triplet(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Siblings(x, y)",
        "Hangout(x, y)",
        "Play(x, y)",
        "Complain(x)",
        "Developstrongbondswithfamily(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Twinsortriplets(x) → ∃y (Siblings(x, y)) ∧ Hangout(x, y) ⊕ Play(x, y))",
        "∀x (Sameage(y1, y2) ∨ Sameage(y2, x) ∨ Sameage(x, y3) → Twinsortriplets(x))",
        "∀x (Complain(often, siblingsannoying) → ∃y (Siblings(x, y)))",
        "¬Liveathomeoften(x) → ¬Developstrongbondswithfamily(x)",
        "Hangoutfrequently(siblingplayingtime) → ¬(Liveathomeoften(x))"
      ],
      "fol_conc": "(Twinsortriplets(luketwinstriplet) ∧ Developstrongbondswithfamily(luke) ⊕ ¬Developstrongbondswithfamily(luke)) → Complain(often, siblingsannoying)",
      "perplexity": 2.0700769424438477,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AreTwinsOrTriplets(x)",
        "HaveSameAgeSiblings(x, y)",
        "ComplainAboutAnnoyingSiblings(x)",
        "DoNotLiveHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)",
        "HaveSameAgeSiblings(y)",
        "AreTwinsOrTriplets(z)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (AreTwinsOrTriplets(x) → HaveSameAgeSiblings(x, y))",
        "∀x (HaveSameAgeSiblings(x, y) → AreTwinsOrTriplets(z))",
        "∀x (ComplainAboutAnnoyingSiblings(x) → HaveSameAgeSiblings(y))",
        "∀x (DoNotLiveHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x))",
        "∀y (HaveSameAgeSiblings(y, y) → DevelopStrongBondsWithFamilyMembers(z))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSiblings(luke)",
      "perplexity": 2.8583669662475586,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HaveSameAgeSiblings/1, HaveSameAgeSiblings/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HaveSameAgeSiblings/1, HaveSameAgeSiblings/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 41
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cows(x)",
        "Pets(x)",
        "Bovines(x)",
        "Domesticated(x)"
      ],
      "fol_consts": [
        "ted",
        "alligator"
      ],
      "fol_rules": [
        "∀x (Cows(x) → Bovines(x))",
        "∃x (Pets(x) ∧ Cows(x))",
        "∀x (Bovines(x) → Domesticated(x))",
        "¬∃x (Domesticated(x) ∧ Alligators(x))"
      ],
      "fol_conc": "(Ted → Cows(ted)) ⊕ ¬Pets(ted)",
      "perplexity": [
        1.2484641075134277,
        1.1561964750289917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Ted → Cows(ted)) ⊕ ¬Pets(ted)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Pet(x)",
        "Bovine(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Is(x, cow) → Is(x, bovine))",
        "∃x (Pet(x) ∧ Bovine(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))"
      ],
      "fol_conc": "¬(Is(ted, cow) ∨ Pet(cow))",
      "perplexity": 1.4094665050506592,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bovine/1, Bovine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bovine/1, Bovine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cows(x)",
        "Pets(x)",
        "Bovines(x)",
        "Domesticated(x)",
        "Alligators(x)",
        "Pets(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "(∀x (Cows(x)) → Bovines(x))",
        "∃x (Pets(x) ∧ Cows(x))",
        "(Bovines(x) → Domesticated(x))",
        "¬(Domesticated(x) ∧ Alligators(x))"
      ],
      "fol_conc": "Cows(ted) → ¬Pets(ted)",
      "perplexity": 2.1449155807495117,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 42
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BreedBack(x, y)",
        "AnimalType(y)",
        "Extinct(z)"
      ],
      "fol_consts": [
        "heck_cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∃y (BreedBack(heck_cattle, aurochs))",
        "∀x (AnimalType(x) → AnimalType(heck_cattle))",
        "∀x (Extinct(auroch))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.5808722972869873,
        1.4495298862457275
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Bredback(x)",
        "Resembles(y, z)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Animal(x) → ∃y ((Bredback(hekk)) ∧ Resemble(heck, auroch)))",
        "∀x (Is(a, yaurosh)) → ¬Animal(yaurosh)"
      ],
      "fol_conc": "Not(animal)",
      "perplexity": 2.9162724018096924,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BreedingBack(x)",
        "Resemble(x, y)",
        "Animal(z)",
        "Animal(w)",
        "BreedingBack(x)",
        "Animal(z)",
        "Animal(y)",
        "BreedingBack(x)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BreedingBack(x, y)) ∧ Resemble(x, y)",
        "Resemble(auroch, heckcattl)",
        "Animal(z)"
      ],
      "fol_conc": "Animal(aurocs)",
      "perplexity": 6.186699390411377,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 43
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomer(x, y)",
        "AppearsInCompanyToday(x)",
        "HasLunchAtHome(x)",
        "WorksRemotelyFromHome(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x)) → SchedulesMeetingWithCustomer(x, y)",
        "(HasLunchInCompany(james)) ⊕ HasLunchAtHome",
        "(¬(HasLunchInTheOffice)) ∨ ¬Manager",
        "HasLunchAtHome(james)→ WorksRemotelyFromHome(james)",
        "∀x ((InOtherCountry(x))) → (WorksRemoteFromHome(x))",
        "(¬(Manager(james))) ⊕ AppearsInCompanyToday",
        "(Manager(james)) ∧ AppearsInTheOffice"
      ],
      "fol_conc": "HasLunchAtCompany(james)",
      "perplexity": [
        1.6723607778549194,
        1.5078364610671997
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(HasLunchInCompany(james)) ⊕ HasLunchAtHome"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedules(x, y)",
        "Meets(y, z)",
        "Lunch(x, w)",
        "Company(z)",
        "Remote(x)",
        "Manager(x)",
        "Appears(x, w)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) → ∃y ((Schedules(x, y)) ∧ Appears(y, z)))",
        "∀x (Lunch(x, w) → Schedules(x, y))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Remote(x) ∨ ¬Appears(home, x))",
        "∃x ((Manager(y) ∧ Appears(z)) ⊕ (¬Manager(w) ∨ ¬Appear(v)))"
      ],
      "fol_conc": "Lunch(james, company)",
      "perplexity": 1.8867417573928833,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomers(x, y)",
        "HasLunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "AppearInCompanyToday(y)",
        "IsManager(x)",
        "Employee(x)",
        "HasLunchAtHome(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x)) → ∃y ((ScheduleMeetingWithCustomers(x, y))) → AppearInCompanyToday(y)",
        "∀x ((HasLunchAtHome(x) → WorkRemotelyFromHome(x)))",
        "∀x ((WorkRemotelyFromHome(x) → Employee(x)))",
        "∀x (IsManager(x) ⊕ HasLunchAtHome(x))"
      ],
      "fol_conc": "(Employee(james) ∧ ScheduleMeetingWithCustomers(james, company))",
      "perplexity": 3.739215135574341,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 44
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "HaveTeeth(x)",
        "Mammal(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) → HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.1797159910202026,
        1.0401310920715332
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Is(x)",
        "Mammal(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Has(platypus, teeth))",
        "¬Has(platypus, teeth)",
        "∀y ((Mammal(y) ∧ Has(y, teeth))) → Is(humans)"
      ],
      "fol_conc": "Is(platypus)",
      "perplexity": 2.2630465030670166,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HaveTeeth(x)",
        "AreMammals(y, x)",
        "AreMammals(z)",
        "HaveTeeth(w)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (AreMammals(humans)) → ∀y ((AreMammals(x) → HaveTeeth(y)))",
        "(∃w (AreMammals(platypus) ∧ ¬HaveTeeth(w)))",
        "∃z (AreMammals(z, platypus))"
      ],
      "fol_conc": "¬AreMammals(platypus)",
      "perplexity": 4.313832759857178,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: AreMammals/2, AreMammals/1.\n\n\nFatal error:  The following symbols are used with multiple arities: AreMammals/2, AreMammals/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 45
  },
  {
    "id": 179,
    "nl_problem": {
      "context": [
        "All horses have hooves.",
        "No humans have hooves."
      ],
      "question": "Some humans are horses.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Horse(x)",
        "Hooves(x)",
        "Human(y)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Horse(x) → Hooves(x))",
        "∀y (Human(y) → ¬Hooves(y))"
      ],
      "fol_conc": "∃z (Human(z) ∧ Horse(z))",
      "perplexity": [
        1.1672672033309937,
        1.103865623474121
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Horses(x)",
        "Hooves(x)"
      ],
      "fol_consts": [
        "human",
        "horse"
      ],
      "fol_rules": [
        "∀x (Horses(x) → Hooves(x))",
        "∃y (Human(y) ∧ ¬Hooves(y))"
      ],
      "fol_conc": "∃z (Human(z) ⊕ Horse(z))",
      "perplexity": 1.7986485958099365,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasHooves(x)",
        "IsHuman(y)"
      ],
      "fol_consts": [
        "horse",
        "human"
      ],
      "fol_rules": [
        "∀x (IsHuman(horse)) → HasHooves(horse)",
        "¬HasHooves(human)"
      ],
      "fol_conc": "∃y (IsHuman(y) ∧ IsHuman(x))",
      "perplexity": 3.447566032409668,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 46
  },
  {
    "id": 102,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke spends a lot of time hanging out and playing with his siblings.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "TwinOrTriplet(x)",
        "SameAgeSibling(x, y)",
        "ComplainsOftenAboutAnnoyingSiblings(x)",
        "DoesNotLiveAtHomeRegularly(x)",
        "SpendsLotOfTimeWithSibling(x, y)",
        "DevelopStrongBondsFamilyMembers(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (TwinOrTriplet(x) → SpendsLotOfTimeWithSibling(x,y))",
        "(∃y SameAgeSibling(x, y)) ⊕ TwinOrTriplet(x)",
        "∀x (ComplainsOftenAboutAnnoyingSiblings(x) → ∃(SameAgeSibling(y1, y2)))",
        "∀x (DoesNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsFamilyMembers(x))",
        "∀x,y,z ((SpendsLotOfTimeWithSibling(x,y) → DoesNotLiveAtHomeRegularly(z))"
      ],
      "fol_conc": "TwinOrTriplet(luke) ∨ DevelopStrongBondsFamilyMembers(luke)",
      "perplexity": [
        1.4208558797836304,
        1.1745187044143677
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (ComplainsOftenAboutAnnoyingSiblings(x) → ∃(SameAgeSibling(y1, y2)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Hangout(x, siblings)",
        "Play(x, siblings)",
        "Complain(x)",
        "Regularly(x, home)",
        "Develops(x)",
        "Siblings(x, siblingage)",
        "Twin(x)",
        "Triplet(x)",
        "Sameage(y, z)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Is(x, twin) ∨ Is(x, triplet)) → Hangout(x, siblings)",
        "∃y (Siblings(x, siblingage) → Sameage(y, y))",
        "Complain(x) → Siblings(x, sameage)",
        "Regularly(x, home) ⊕ Develops(x)"
      ],
      "fol_conc": "Hangout(lukem, siblings)",
      "perplexity": 2.3107151985168457,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Sameage/2, Sameage/0, Siblings/2, Siblings/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Sameage/2, Sameage/0, Siblings/2, Siblings/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "TwinsOrTriplets(x)",
        "HangsOutAndPlaysWithSiblings(x, y)",
        "HasSiblingsOfSameAge(x)",
        "ComplainAboutAnnoyingSibling(x)",
        "DoesNotLiveAtHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)",
        "HasSiblingsOfSameAge(x)"
      ],
      "fol_consts": [
        "Luke"
      ],
      "fol_rules": [
        "∀x (TwinsOrTriplets(x) → ∃y (HangsOutAndPlaysWithSiblings(y, x)))",
        "∀x ((HasSiblingsOfSameAge(x)) → TwinsOrTriplets(x))",
        "∀x (ComplainAboutAnnoyingSibling(x) → HasSiblingsOfSameAge(x))",
        "∀x (DoesNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x))",
        "∀x (HangsOutAndPlaysWithSiblings(x, y) → DoesNotLiveAtHomeRegularly(y))"
      ],
      "fol_conc": "HangsOutAndPlaysWithSiblings(Luke, Luke)",
      "perplexity": 1.8125624656677246,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 47
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "TurkeyType(x)",
        "EasternWildTurkey",
        "OsceolaWildTurkey",
        "GouldsWildTurkey",
        "MerriamsWildTurkey",
        "RiosGrandeWildTurkey",
        "OcellatedWildTurkey"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (TurkeyType(x) ∧ TurkeyType(EasternWildTurkey) ⊕ TurkeyType(OsceolaWildTurkey))",
        "¬TurkeyType(tom, EasternWildTurkey)",
        "¬TurkeyType(tom, OsceolaWildTurkey)",
        "¬TurkeyType(tom, GouldsWildTurkey) ∧ ¬TurkeyType(tom, MerriamsWildTurkey)",
        "¬TurkeyType(tom, RiosGrandeWildTurkey)"
      ],
      "fol_conc": "",
      "perplexity": [
        1.4506170749664307,
        1.1378172636032104
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Wildturkey(y)"
      ],
      "fol_consts": [
        "tom",
        "easternwildturkey"
      ],
      "fol_rules": [
        "∃x (Wildturkey(tom))",
        "¬(Is(tom, easternwildturkey) ∧ Is(tom, osceolawildturkey))",
        "¬(Is(tom, gouldswildturkey) ∨ Is(tom, merriamswildturkey) ∨ Is(tom, riegraewildturkey))"
      ],
      "fol_conc": "(∀y (Wildturkey(y))) → Is(tom, easternwildturkey)",
      "perplexity": 1.6988955736160278,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsWildTurkey(x)",
        "IsWildTurkey(x, y)"
      ],
      "fol_consts": [
        "tom",
        "eastern",
        "osceola",
        "goulds",
        "merriams",
        "rio",
        "ocellated"
      ],
      "fol_rules": [
        "(∃x (IsWildTurkey(tom)))",
        "(¬(IsWildTurkey(tom, eastern)))",
        "(¬(IsWildTurkey(tom, osceola)))",
        "(¬((IsWildTurkey(tom, goulds) ∨ IsWildTurkey(tom, merriams) ∧ IsWildTurkey(tom, rio))))"
      ],
      "fol_conc": "∃y (IsWildTurkey(y, eastern) ∧ IsWildTurkey(tom, y))",
      "perplexity": 2.033862829208374,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsWildTurkey/1, IsWildTurkey/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsWildTurkey/1, IsWildTurkey/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 48
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Mammal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Wings(x)",
        "Breathes(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathes(x))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.6859349012374878,
        1.0583140850067139
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Flies(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "rock",
        "fly"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Flies(x))",
        "∀x (Flies(x) → Has(x, wings))",
        "∃x ((¬Is(rock, fly)) ∧ ¬Is(rock, bird) → ¬Flies(rock) ∧ ¬Breathes(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.3854994773864746,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bird/1, Bird/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bird/1, Bird/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsA(x, y)",
        "Fly(x)",
        "Breathes(x)",
        "Fly(x)",
        "Breathes(x)",
        "IsA(fly, z)"
      ],
      "fol_consts": [
        "rock",
        "fly"
      ],
      "fol_rules": [
        "∀x (IsA(rock, x))",
        "∃y (IsA(m, y) ∧ IsA(y, fly))"
      ],
      "fol_conc": "∃z ((IsA(x, z) ∨ IsA(z, m)) ∧ Fly(x) ∧ Breathes(x))",
      "perplexity": 2.650411605834961,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fly/1, Fly/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fly/1, Fly/0"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 49
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Seasons(x)",
        "FavoriteSeason(Emma, x)",
        "FavoriteSeason(Mia, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "James"
      ],
      "fol_rules": [
        "∀x (Seasons(spring) ∨ Seasons(summer))",
        " FavoriteSeason(Emma, summer)",
        "FavoriteSeason(Mia,y) → ¬Favorite Season(x Emma)"
      ],
      "fol_conc": "favoriteSeason(james,sommer):James loves sommer the most.",
      "perplexity": [
        2.8868229389190674,
        1.8325409889221191
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteSeason(Mia,y) → ¬Favorite Season(x Emma)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Favorite(x, y)",
        "Student(x)",
        "Love(y, z)",
        "Vacation(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x))",
        "∃y ∃z ((Student(y) → Love(z, summer)))",
        "(Favorite(emma, x) ∧ Favorite(mia, y) ⊕ ¬Equal(x, y))",
        "Vacation(james)",
        "∀x ∀y (Season(x) ⊕ Season(y))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 2.4553370475769043,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Seasons(x)",
        "FavoriteSeason(x, y)",
        "LoveMost(y)",
        "WantLongVacation(x)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "(∀x (Seasons(spring)) ∧ Seasons(summer) ∧ Seasons(fall) ∧ Seasons(winter))",
        "(∀x ((LoveMost(x, summer)) → WantLongVacation(y)))"
      ],
      "fol_conc": "FavoriteSeason(james, summer)",
      "perplexity": 2.850581169128418,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 50
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x, y)",
        "BornIn(x, z)",
        "American(city)",
        "WrittenBy(y, z)"
      ],
      "fol_consts": [
        "daniShapiro",
        "familyHistory",
        "familySecrets"
      ],
      "fol_rules": [
        "Podcast ≠ Novel(familySecrets)",
        "BG1: ∀x (BornIn(x, AmericanCity) → American(AmericanCity))",
        "BG2: ∃y ((Novel(y,y) ⊕ WrittenBy(daniShapiro, familyHistory)) → NovelWriter(y))",
        "Dani Shapiro is an AnAmericanWriter",
        "BostonIsAnAmericanCity"
      ],
      "fol_conc": "BornIn(DaniShapiro, Boston)",
      "perplexity": [
        2.4367899894714355,
        1.2102612257003784
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Podcast ≠ Novel(familySecrets)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Born(y, z)",
        "Writer(z)",
        "Novel(x)",
        "Podcast(z)",
        "Created(podcast, person)"
      ],
      "fol_consts": [
        "dani",
        "shapiro"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Is(x, novel))",
        "∃z ((Born(dani, z) ∧ Is(americancity, x)) → Is(z, american))",
        "∀y (Novel(y) ∧ Writer(shapiro, y) → Is(shapiro, novelist))",
        "Is(shapiro, dani)",
        "(Writer(shapiro, familyhistory) ∧ Novel(familyhistory) ∧ Writtenin2003(familyhistory))"
      ],
      "fol_conc": "Born(dani, boston)",
      "perplexity": 1.8343496322631836,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Novel/1, Novel/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Novel/1, Novel/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsNot(x, y)",
        "BornIn(x, y)",
        "WrittenBy(x, y)",
        "NovelWriter(x)",
        "WrittenBy(y, z)",
        "NovelWriter(z)",
        "NovelWriter(y)",
        "WrittenBy(z, w)",
        "A Novel(y)",
        "IsNot(x, y)",
        "IsNot(x, z)",
        "A Novel(y)",
        "BornIn(w, v)",
        "WrittenBy(y, w)",
        "IsNot(x, y)",
        "A Novel(u)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "boston"
      ],
      "fol_rules": [
        "(∃z (NovelWriter(z))) ∧ ¬(IsNot(dani_shapiro, z))",
        "(BornIn(x, y)) → IsNot(x, novel)",
        "(∀y (A Novel(y) ∧ WrittenBy(w, y) → NovelWriter(w)))",
        "(NovelWriter(dani_shapiro))",
        "((WrittenBy(dani_shapiro, family_history)) ∨ ¬(IsNot(family_history, novel)))",
        "(A Novel(family_history))",
        "(BornIn(x, y) → IsNot(y, boston))",
        "(∀x (NovelWriter(w) → WrittenBy(dani_shapiro, x)))"
      ],
      "fol_conc": "BornIn(dani_shapiro, family_history)",
      "perplexity": 3.9445881843566895,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀y (A Novel(y) ∧ WrittenBy(w, y) → NovelWriter(w)))"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 51
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "AnalogText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984",
        "hardcoverBook(1984)"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬AnalogText(x))",
        "∀x (PrintedText(x) → AnalogText(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": [
        1.547386884689331,
        1.1075043678283691
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Media(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(y)",
        "Hardcover(z)",
        "Digital(w)",
        "Book(u)"
      ],
      "fol_consts": [
        "book",
        "service"
      ],
      "fol_rules": [
        "∀x (Media(x) → ¬Analog(x))",
        "∀y (Printed(y) → Analog(y))",
        "∀z (Streaming(z) → Digital(z))",
        "∃u (Book(u) ∧ Hardcover(u))",
        "(Digital(service1984)) → (Media(service1984) ∧ Book(service1984))"
      ],
      "fol_conc": "(Streaming(book1984))",
      "perplexity": 2.186185598373413,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "nineteen84"
      ],
      "fol_rules": [
        "∀x (Digital(x) → ¬Analog(x))",
        "∀x ((HardcoverBook(x) → Analog(x)))",
        "∀x ((StreamingService(x) → Digital(x)))"
      ],
      "fol_conc": "StreamingService(nineteen84)",
      "perplexity": 1.4436042308807373,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 52
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorksRegularlyOftenAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyingOrganizingSpacesInHome(x)",
        "VisitStoreRegularly(x, y)",
        "GoesToBedLateAndWakesUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "officeSupply"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x)): All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksRegularlyOftenAtHome(x) → TidyingOrganizingSpacesInHome(x)) : All people who work regularly and often at home spend free time tidying and organizing the spaces in their homes.",
        "VisitStoreRegularly(remy, officeSupply)",
        "∃x ((TidyingOrganizingSpacesInHome(x) → ¬GoesToBedLateAndWakesUpAfterNoon(x))) : If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(∃x (TidyingOrganizingSpacesInHome(remy) ∧ GoesToBedLateAndWakesUpAfterNoon(x))) ⊕ ¬((TidyingOrganizingSpacesInHome(remy)) ∨ (GoesToBedLateAndWakesUpAfterNoon(x))): Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "fol_conc": "VisitStoreRegularly(remy, officeSupply)",
      "perplexity": [
        1.2690494060516357,
        1.0767649412155151
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Works(x, z)",
        "Home(y)",
        "Regularly(x)",
        "Often(x)",
        "Fullystocked(z)",
        "Impressive(w)",
        "Tidy(x)",
        "Organize(x)",
        "Visit(z)",
        "Goeslate(x)",
        "Wakeupafternoon(x)",
        "Remygoeshomeoffice(x)"
      ],
      "fol_consts": [
        "remy",
        "largedesktopmonitor",
        "homeoffice"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Regularly(worksat, home))",
        "∀x (Fullystocked(x) ∧ Impressive(y) → Owns(x, largedesktopmonitor))",
        "∀x (Regularly(w, z) ∨ Often(w, z)) → Tidy(oftenw, x)",
        "∀x (Regularly(workathome, y)) → Visit(z)",
        "∀x (Tidy(x) → ¬Goeslate(y) ∧ Wakeupafternoon(y))",
        "Remygoeshomeoffice(r) → Remybothgoestolateandwakeupafternoontheirhomeorremydoesenottolatesnororganizesherhomeandvisitsstoreoften(r)"
      ],
      "fol_conc": "Regularly(visit, officeupply)",
      "perplexity": 2.593095541000366,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHomeRegularlyAndOften(x)",
        "HomeOffice(x)",
        "TidyOrganizeSpacesInHomeFreeTime(x)",
        "VisitOfficeSupplyStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "(∀x (Own(x, y) → WorkAtHomeRegularlyAndOften(x)))",
        "(∀x (HomeOffice(x) → Own(x, y)))",
        "(∀x ((WorkAtHomeRegularlyAndOften(x) ∧ TidyOrganizeSpacesInHomeFreeTime(x))) ⊕ ¬(TidyOrganizeSpacesInHomeFreeTime(x)))",
        "((∀x (VisitOfficeSupplyStore(x) → WorkAtHomeRegularlyAndOften(x))))",
        "(TidyOrganizeSpacesInHomeFreeTime(y) ∧ ¬WorkAtHomeRegularlyAndOften(x)) ⊕ TidyOrganizeSpacesInHomeFreeTime(z)",
        "((Own(remy, y) → WorkAtHomeRegularlyAndOften(remy)))",
        "(TidyOrganizeSpacesInHomeFreeTime(remy) ∧ ¬WorkAtHomeRegularlyAndOften(y)) ⊕ (¬TidyOrganizeSpacesInHomeFreeTime(z) ∨ VisitOfficeSupplyStore(w))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(r) → WorkAtHomeRegularlyAndOften(remy)",
      "perplexity": 1.8778806924819946,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 53
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "IsMachineLearningAlgorithm(x)",
        "CategoryOf(x, y)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "state-of-the-art text summarization model"
      ],
      "fol_rules": [
        "∀x (IsMachineLearningAlgorithm(x) → ∃y CategoryOf(x,y))",
        "∀x CategoryOf(x, 'unsupervised learning') ⊕ RequiresLabelledData(x)",
        "CategoryOf('state-of-the-art text summarization model', y)",
        "'reinforcement learning' ≠ x ⊓ (IsMachineLearningAlgorithm(y) → ∃z CategoryOf(z,x))",
        "(∀x IsSupervisedLearningAlgorithm(x) → RequiresLabelledData(state-of-the-art-text-summarization-model))"
      ],
      "fol_conc": "'supervised learning' ∈ {y | IsMachineLearningAlgorithm('state-of-the-art text summarization model'), CategoryOf(y,x)}",
      "perplexity": [
        1.141473412513733,
        1.9452635049819946
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "'reinforcement learning' ≠ x ⊓ (IsMachineLearningAlgorithm(y) → ∃z CategoryOf(z,x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Requires(y)",
        "Stateofart(x)",
        "Trained(x, y)"
      ],
      "fol_consts": [
        "supervised",
        "unsupervised",
        "reinforcement"
      ],
      "fol_rules": [
        "∀x (Machinelearning(algorithm) → Category(algorithm, supervised)) ∨ Category(algorithm, unsupervised) ∨ Category(algorithm, reinforcement)",
        "Unsupervised(x) ∧ ¬Requires(y)",
        "Stateofart(textsummarizationmodel) ∧ Trained(stateofarttextsummarizationmodel, machinelearningalgorithms)",
        "∀x (Category(x, reinforcement) → ¬Trained(model, x))",
        "(Machinelearningtrainsummaryrequireslabelleddata(x) ∧ Category(algorithm, supervised))"
      ],
      "fol_conc": "Stateofart(textsummarizationmodel) → Trained(stateofarttextsummarizationmodel, machinelearningalgorithms)",
      "perplexity": 2.4101879596710205,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/1, Unsupervised/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/1, Unsupervised/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CategoryAs(x, y)",
        "RequiresLabelledData(x)",
        "TrainWithMLAlgorithm(y)",
        "NotUsedToTrain(x)",
        "TrainWithMLAlgorithm(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml",
        "supervised",
        "unsupervised",
        "reinforcement"
      ],
      "fol_rules": [
        "∀x (CategoryAs(ml, supervised)) ⊕ ∀x (CategoryAs(ml, unsupervised)) ⊕ ∀x (CategoryAs(ml, reinforcement))",
        "∀y (RequiresLabelledData(y) → CategoryAs(machinelearningalgorithm, y))",
        "TrainWithMLAlgorithm(stateofarttextsummarizationmodel)",
        "NotUsedToTrain(reinforcement)",
        "TrainWithMLAlgorithm(stateofthearttextsummarizationmodel)",
        "∀x (RequiresLabelledData(x) → TrainWithMLAlgorithm(textsummarisationalgorithm))"
      ],
      "fol_conc": "CategoryAs(supervised, stateofthearttextsummary) ∧ RequiresLabelledData(supervised)",
      "perplexity": 2.6320624351501465,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 54
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Person(x) → (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))"
      ],
      "fol_conc": "¬LivesInTaxHaven(djokovic)",
      "perplexity": [
        1.0717785358428955,
        1.0335109233856201
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Champion(x)",
        "Oscar(x)",
        "Celebrity(x)",
        "Player(x, y)",
        "Tennis(y)",
        "Wellpaid(x)",
        "Athlete(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Champion(x) ⊕ Oscar(x))",
        "∀x ((Player(x, y) ∧ Tennis(y)) → Champion(x))",
        "∀x (Oscar(x) → Celebrity(x))",
        "∀y (Tennis(y) → Athlete(y))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x ((Athlete(x) ∧ Famous(x)))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic) → Wellpaid(djokovic))"
      ],
      "fol_conc": "¬Taxhaven(djokovic)",
      "perplexity": 1.4503347873687744,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "Celebrity(x)",
        "ProfessionalTennisPlayer(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x ((ProfessionalTennisPlayer(x) ∧ GrandSlamChampion(x))) → Athlete(x)",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → ¬LiveInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": 1.3659298419952393,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 55
  },
  {
    "id": 200,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva foes not play for a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "BornIn(x, y)",
        "LoanedOutTo(x, z)",
        "PlaysForClub(x, z)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico"
      ],
      "fol_rules": [
        "Player(ailton)",
        "BornIn(ailton, 1995)",
        "Player(ailton) → LoanedOutTo(ailton, braga)",
        "Brazilian(ailton)",
        "PlaysForClub(ailton, nautico)"
      ],
      "fol_conc": "¬PlaysForClub(ailton, z)",
      "perplexity": [
        1.7153165340423584,
        1.0750975608825684
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(y, x)",
        "Player(x)",
        "Loanedoutto(x, z)",
        "Brazillian(x)",
        "Footballclub(z)",
        "Playfor(x, w)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∃y (Known(ailton, y))",
        "∀x (Player(x) ∧ Loanedoutto(x, braga))",
        "∀w ((Footballclub(w) ∨ Playfor(silva, w))) ⊕ Brazillian(silva)",
        "(Playfor(silva, nautico) ∧ Footballclub(nautico) ∧ Player(silva)) → (Loanedoutto(x, braga) ∨ Footballclub(braga))"
      ],
      "fol_conc": "¬Player(silva)",
      "perplexity": 2.114076852798462,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "IsKnownAs(y, z)",
        "FootballPlayer(z)",
        "LoanedOutTo(w, x)",
        "Brazilian(z)",
        "PlaysFor(y, w)",
        "Club(y)"
      ],
      "fol_consts": [
        "ailtonSilva",
        "1995",
        "braga",
        "nautico",
        "braga",
        "braga"
      ],
      "fol_rules": [
        "BornIn(ailtonSilva, 1995)",
        "IsKnownAs(ailtonSilva, ailtonSilva)",
        "FootballPlayer(ailtonSilva) ∧ LoanedOutTo(braga, ailtonSilva)",
        "Brazilian(ailtonSilva) ∧ PlaysFor(nautico, ailtonSilva)",
        "Club(nautico)",
        "Club(braga)"
      ],
      "fol_conc": "¬PlaysFor(ailtonSilva, x)",
      "perplexity": 2.13320255279541,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 56
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicEvent(x)",
        "WorldChampionships(x)",
        "Sport(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "UnitedStatesWonMostMedalsInTokyo",
        "LastOlympicGames"
      ],
      "fol_rules": [
        "∀x (SportingEvent(x) → OlympicEvent(x))",
        "LastOlympicGames(tokyo)",
        "UnitedStatesWonMostMedalsInTokyo(LastOlympicGames)"
      ],
      "fol_conc": "∃x (WorldChampionships(x) ∧ SportingEvent(x))",
      "perplexity": [
        1.8208757638931274,
        1.2544565200805664
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LastOlympicGames/1, LastOlympicGames/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LastOlympicGames/1, LastOlympicGames/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(y, z)",
        "Won(z, x)"
      ],
      "fol_consts": [
        "olympics",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "∀x (Sporting(olympics))",
        "∃y ∀z ((Last(tokyo, y)) → Sporting(y))",
        "Won(unitedstates, tokyo)"
      ],
      "fol_conc": "∃w (Sporting(worldchampionships))",
      "perplexity": 2.155946731567383,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "WonMostMedalsInCity(y, z)"
      ],
      "fol_consts": [
        "olympic games",
        "tokyo",
        "united states"
      ],
      "fol_rules": [
        "(∀x (SportingEvent(x)))",
        "(∃z (SportingEvent(z) ∧ WonMostMedalsInCity(united states, tokyo)))"
      ],
      "fol_conc": "(∃y (SportingEvent(y)))",
      "perplexity": 1.8392326831817627,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 57
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Hawk(x)",
        "Land(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Land(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": [
        1.339328408241272,
        1.0951099395751953
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(y)",
        "Lands(z)"
      ],
      "fol_consts": [
        "hawk",
        "bird"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃y (Bird(y) ∧ Hawk(y))"
      ],
      "fol_conc": "∀z (Bird(z) → Lands(z))",
      "perplexity": 2.4610588550567627,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Hawk(x)",
        "Lands(x)",
        "Bird(y)",
        "Lands(y)",
        "Hawk(z)"
      ],
      "fol_consts": [
        "hawk1"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃y (Bird(y) ∧ Hawk(y))"
      ],
      "fol_conc": "¬(∀z (Bird(z) → Lands(z)))",
      "perplexity": 2.3190512657165527,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 58
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "LovesAnimals(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (LovesAnimals(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → LovesAnimals(x))"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.1172765493392944,
        1.046775460243225
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x, y)",
        "Animal(y)",
        "Lover(x)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x) → ¬(Mean(x, y)))",
        "∃x (Grumpy(x) → Mean(x, y))",
        "∀x (Lover(x) → Nice(x))",
        "∀x (Owns(x, y) → Lover(y))"
      ],
      "fol_conc": "(¬(Grumpy(tom) ∧ ¬Mean(tom, tom)))",
      "perplexity": 1.465647578239441,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "LoveAnimals(x)",
        "OwnPet(x)",
        "NiceToAnimals(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬(MeanToAnimals(x)))",
        "∃x (MeanToAnimals(x) ∧ ¬(NiceToAnimals(x)))",
        "∀x (LoveAnimals(x) → NiceToAnimals(x))",
        "∀x ((OwnPet(x) → LoveAnimals(x)))",
        "OwnPet(tom)"
      ],
      "fol_conc": "(¬MeanToAnimals(tom)) ∧ ¬(NiceToAnimals(tom))",
      "perplexity": 3.6626734733581543,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 59
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SuperheroMovie(x)",
        "GoodGuysWinInSuperheroMovies",
        "Fight(x,y,z)",
        "BadGuy(y) ∨ GoodGuy(z)",
        "NamedAfterCharacter(x, y, z)"
      ],
      "fol_consts": [
        "sir_digby",
        "nemesis",
        "surprising_adventures_of_sir_digby_chicken_caesar"
      ],
      "fol_rules": [
        "∀x (SuperheroMovie(x) → GoodGuysWinInSuperheroMovies)",
        "(Fight(sir_digby, nemesis, x)) ⊕ ¬(BadGuy(nemesis) ∨ GoodGuy(sir_digby))",
        "NamedAfterCharacter(surprising_adventures_of_sir_digby_chicken_caesar, sir_digby, SuperheroMovie(x)"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9417173862457275,
        1.2082852125167847
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (SuperheroMovie(x) → GoodGuysWinInSuperheroMovies)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Goodguy(y, x)",
        "Badguy(z, w)",
        "Fights(w, y)",
        "Namedafter(v, u)",
        "Appears(u, v)",
        "Wins(a, b)"
      ],
      "fol_consts": [
        "sirdigby",
        "chickencaesar"
      ],
      "fol_rules": [
        "∀x (Superhero(x) → ∃y (Goodguy(y, x)) ⊕ ∃z (Badguy(z, w)))",
        "Superhero(chickencaesar)",
        "Fights(sirdigby, y)",
        "Namedafter(y, sirdigby)",
        "∀u ((Namedafter(u, v)) → Goodguy(v, u) ∧ Appears(u, v))",
        "Wins(x, y) ⊕ Wins(z, w)"
      ],
      "fol_conc": "∃z (Fights(sirdigby, z) ∧ Badguy(y, z) ∧ Wins(sirdigby, z))",
      "perplexity": 2.2413289546966553,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GoodGuy(x)",
        "Fight(x, y)",
        "Fight(y, x)",
        "GoodGuy(x)",
        "NamedAfter(x, y)",
        "AppearsIn(x, y)"
      ],
      "fol_consts": [
        "sirDigbyChickencaeasar",
        "digbychickencaesar"
      ],
      "fol_rules": [
        "∀x (Fight(x, y)) → ∃z (GoodGuy(z) ⊕ GoodGuy(y))",
        "(NamedAfter(sirDigbyChickencaeasar, digbychickencaesar)) → GoodGuy(digbychickencaesar)",
        "(NamedAfter(sirDigbyChickencaeasar, digbychickencaesar)) → (AppearsIn(sirDigbyChickencaeasar, digbychickencaesar))",
        "∀x (GoodGuy(x) ∧ Fight(digbychickencaesar, x)) → GoodGuy(x)",
        "Fight(sirDigbyChickencaeasar, y) ∨ Fight(y, sirDigbyChickencaeasar)"
      ],
      "fol_conc": "¬(∀x (GoodGuy(digbychickencaesar) ⊕ Fight(digbychickencaesar, x)))",
      "perplexity": 2.4642491340637207,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 60
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SiblingOfSameAge(x, y)",
        "ComplainAboutAnnoyingSiblings(x)",
        "SpendTimeWithSiblings(x)",
        "LiveAtHomeRegularly(x)",
        "StrongBondsWithFamilyMembers(x)"
      ],
      "fol_consts": [
        "Luke"
      ],
      "fol_rules": [
        "∀x (Twin(x) ⊕ Triplet(x)) → SpendTimeWithSiblings(x)",
        "∀x,y (SiblingOfSameAge(x, y) → Twin(x) ∨ Triplet(y))",
        "∀x (ComplainAboutAnnoyingSiblings(x) → SiblingOfSameAge(x, y))",
        "∀x (~LiveAtHomeRegularly(x)) → ~StrongBondsWithFamilyMembers(x)",
        "∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSiblings(Luke)",
      "perplexity": [
        1.2269138097763062,
        1.0757089853286743
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x,y (SiblingOfSameAge(x, y) → Twin(x) ∨ Triplet(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Siblings(x, y)",
        "Hangout(x, y)",
        "Play(x, y)",
        "Complain(x)",
        "Developstrongbondswithfamily(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Twinsortriplets(x) → ∃y (Siblings(x, y)) ∧ Hangout(x, y) ⊕ Play(x, y))",
        "∀x (Sameage(y1, y2) ∨ Sameage(y2, x) ∨ Sameage(x, y3) → Twinsortriplets(x))",
        "∀x (Complain(often, siblingsannoying) → ∃y (Siblings(x, y)))",
        "¬Liveathomeoften(x) → ¬Developstrongbondswithfamily(x)",
        "Hangoutfrequently(siblingplayingtime) → ¬(Liveathomeoften(x))"
      ],
      "fol_conc": "(Twinsortriplets(luketwinstriplet) ∧ Developstrongbondswithfamily(luke) ⊕ ¬Developstrongbondswithfamily(luke)) → Complain(often, siblingsannoying)",
      "perplexity": 2.0700769424438477,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AreTwinsOrTriplets(x)",
        "HaveSameAgeSiblings(x, y)",
        "ComplainAboutAnnoyingSiblings(x)",
        "DoNotLiveHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)",
        "HaveSameAgeSiblings(y)",
        "AreTwinsOrTriplets(z)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (AreTwinsOrTriplets(x) → HaveSameAgeSiblings(x, y))",
        "∀x (HaveSameAgeSiblings(x, y) → AreTwinsOrTriplets(z))",
        "∀x (ComplainAboutAnnoyingSiblings(x) → HaveSameAgeSiblings(y))",
        "∀x (DoNotLiveHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x))",
        "∀y (HaveSameAgeSiblings(y, y) → DevelopStrongBondsWithFamilyMembers(z))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSiblings(luke)",
      "perplexity": 2.8583669662475586,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HaveSameAgeSiblings/1, HaveSameAgeSiblings/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HaveSameAgeSiblings/1, HaveSameAgeSiblings/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 41
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cows(x)",
        "Pets(x)",
        "Bovines(x)",
        "Domesticated(x)"
      ],
      "fol_consts": [
        "ted",
        "alligator"
      ],
      "fol_rules": [
        "∀x (Cows(x) → Bovines(x))",
        "∃x (Pets(x) ∧ Cows(x))",
        "∀x (Bovines(x) → Domesticated(x))",
        "¬∃x (Domesticated(x) ∧ Alligators(x))"
      ],
      "fol_conc": "(Ted → Cows(ted)) ⊕ ¬Pets(ted)",
      "perplexity": [
        1.2484641075134277,
        1.1561964750289917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Ted → Cows(ted)) ⊕ ¬Pets(ted)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Pet(x)",
        "Bovine(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Is(x, cow) → Is(x, bovine))",
        "∃x (Pet(x) ∧ Bovine(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))"
      ],
      "fol_conc": "¬(Is(ted, cow) ∨ Pet(cow))",
      "perplexity": 1.4094665050506592,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bovine/1, Bovine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bovine/1, Bovine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cows(x)",
        "Pets(x)",
        "Bovines(x)",
        "Domesticated(x)",
        "Alligators(x)",
        "Pets(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "(∀x (Cows(x)) → Bovines(x))",
        "∃x (Pets(x) ∧ Cows(x))",
        "(Bovines(x) → Domesticated(x))",
        "¬(Domesticated(x) ∧ Alligators(x))"
      ],
      "fol_conc": "Cows(ted) → ¬Pets(ted)",
      "perplexity": 2.1449155807495117,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 42
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BreedBack(x, y)",
        "AnimalType(y)",
        "Extinct(z)"
      ],
      "fol_consts": [
        "heck_cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∃y (BreedBack(heck_cattle, aurochs))",
        "∀x (AnimalType(x) → AnimalType(heck_cattle))",
        "∀x (Extinct(auroch))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.5808722972869873,
        1.4495298862457275
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Bredback(x)",
        "Resembles(y, z)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Animal(x) → ∃y ((Bredback(hekk)) ∧ Resemble(heck, auroch)))",
        "∀x (Is(a, yaurosh)) → ¬Animal(yaurosh)"
      ],
      "fol_conc": "Not(animal)",
      "perplexity": 2.9162724018096924,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BreedingBack(x)",
        "Resemble(x, y)",
        "Animal(z)",
        "Animal(w)",
        "BreedingBack(x)",
        "Animal(z)",
        "Animal(y)",
        "BreedingBack(x)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BreedingBack(x, y)) ∧ Resemble(x, y)",
        "Resemble(auroch, heckcattl)",
        "Animal(z)"
      ],
      "fol_conc": "Animal(aurocs)",
      "perplexity": 6.186699390411377,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 43
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomer(x, y)",
        "AppearsInCompanyToday(x)",
        "HasLunchAtHome(x)",
        "WorksRemotelyFromHome(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x)) → SchedulesMeetingWithCustomer(x, y)",
        "(HasLunchInCompany(james)) ⊕ HasLunchAtHome",
        "(¬(HasLunchInTheOffice)) ∨ ¬Manager",
        "HasLunchAtHome(james)→ WorksRemotelyFromHome(james)",
        "∀x ((InOtherCountry(x))) → (WorksRemoteFromHome(x))",
        "(¬(Manager(james))) ⊕ AppearsInCompanyToday",
        "(Manager(james)) ∧ AppearsInTheOffice"
      ],
      "fol_conc": "HasLunchAtCompany(james)",
      "perplexity": [
        1.6723607778549194,
        1.5078364610671997
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(HasLunchInCompany(james)) ⊕ HasLunchAtHome"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedules(x, y)",
        "Meets(y, z)",
        "Lunch(x, w)",
        "Company(z)",
        "Remote(x)",
        "Manager(x)",
        "Appears(x, w)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) → ∃y ((Schedules(x, y)) ∧ Appears(y, z)))",
        "∀x (Lunch(x, w) → Schedules(x, y))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Remote(x) ∨ ¬Appears(home, x))",
        "∃x ((Manager(y) ∧ Appears(z)) ⊕ (¬Manager(w) ∨ ¬Appear(v)))"
      ],
      "fol_conc": "Lunch(james, company)",
      "perplexity": 1.8867417573928833,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomers(x, y)",
        "HasLunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "AppearInCompanyToday(y)",
        "IsManager(x)",
        "Employee(x)",
        "HasLunchAtHome(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x)) → ∃y ((ScheduleMeetingWithCustomers(x, y))) → AppearInCompanyToday(y)",
        "∀x ((HasLunchAtHome(x) → WorkRemotelyFromHome(x)))",
        "∀x ((WorkRemotelyFromHome(x) → Employee(x)))",
        "∀x (IsManager(x) ⊕ HasLunchAtHome(x))"
      ],
      "fol_conc": "(Employee(james) ∧ ScheduleMeetingWithCustomers(james, company))",
      "perplexity": 3.739215135574341,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 44
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "HaveTeeth(x)",
        "Mammal(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) → HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.1797159910202026,
        1.0401310920715332
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Is(x)",
        "Mammal(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Has(platypus, teeth))",
        "¬Has(platypus, teeth)",
        "∀y ((Mammal(y) ∧ Has(y, teeth))) → Is(humans)"
      ],
      "fol_conc": "Is(platypus)",
      "perplexity": 2.2630465030670166,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HaveTeeth(x)",
        "AreMammals(y, x)",
        "AreMammals(z)",
        "HaveTeeth(w)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (AreMammals(humans)) → ∀y ((AreMammals(x) → HaveTeeth(y)))",
        "(∃w (AreMammals(platypus) ∧ ¬HaveTeeth(w)))",
        "∃z (AreMammals(z, platypus))"
      ],
      "fol_conc": "¬AreMammals(platypus)",
      "perplexity": 4.313832759857178,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: AreMammals/2, AreMammals/1.\n\n\nFatal error:  The following symbols are used with multiple arities: AreMammals/2, AreMammals/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 45
  },
  {
    "id": 179,
    "nl_problem": {
      "context": [
        "All horses have hooves.",
        "No humans have hooves."
      ],
      "question": "Some humans are horses.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Horse(x)",
        "Hooves(x)",
        "Human(y)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Horse(x) → Hooves(x))",
        "∀y (Human(y) → ¬Hooves(y))"
      ],
      "fol_conc": "∃z (Human(z) ∧ Horse(z))",
      "perplexity": [
        1.1672672033309937,
        1.103865623474121
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Horses(x)",
        "Hooves(x)"
      ],
      "fol_consts": [
        "human",
        "horse"
      ],
      "fol_rules": [
        "∀x (Horses(x) → Hooves(x))",
        "∃y (Human(y) ∧ ¬Hooves(y))"
      ],
      "fol_conc": "∃z (Human(z) ⊕ Horse(z))",
      "perplexity": 1.7986485958099365,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasHooves(x)",
        "IsHuman(y)"
      ],
      "fol_consts": [
        "horse",
        "human"
      ],
      "fol_rules": [
        "∀x (IsHuman(horse)) → HasHooves(horse)",
        "¬HasHooves(human)"
      ],
      "fol_conc": "∃y (IsHuman(y) ∧ IsHuman(x))",
      "perplexity": 3.447566032409668,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 46
  },
  {
    "id": 102,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke spends a lot of time hanging out and playing with his siblings.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "TwinOrTriplet(x)",
        "SameAgeSibling(x, y)",
        "ComplainsOftenAboutAnnoyingSiblings(x)",
        "DoesNotLiveAtHomeRegularly(x)",
        "SpendsLotOfTimeWithSibling(x, y)",
        "DevelopStrongBondsFamilyMembers(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (TwinOrTriplet(x) → SpendsLotOfTimeWithSibling(x,y))",
        "(∃y SameAgeSibling(x, y)) ⊕ TwinOrTriplet(x)",
        "∀x (ComplainsOftenAboutAnnoyingSiblings(x) → ∃(SameAgeSibling(y1, y2)))",
        "∀x (DoesNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsFamilyMembers(x))",
        "∀x,y,z ((SpendsLotOfTimeWithSibling(x,y) → DoesNotLiveAtHomeRegularly(z))"
      ],
      "fol_conc": "TwinOrTriplet(luke) ∨ DevelopStrongBondsFamilyMembers(luke)",
      "perplexity": [
        1.4208558797836304,
        1.1745187044143677
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (ComplainsOftenAboutAnnoyingSiblings(x) → ∃(SameAgeSibling(y1, y2)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Hangout(x, siblings)",
        "Play(x, siblings)",
        "Complain(x)",
        "Regularly(x, home)",
        "Develops(x)",
        "Siblings(x, siblingage)",
        "Twin(x)",
        "Triplet(x)",
        "Sameage(y, z)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Is(x, twin) ∨ Is(x, triplet)) → Hangout(x, siblings)",
        "∃y (Siblings(x, siblingage) → Sameage(y, y))",
        "Complain(x) → Siblings(x, sameage)",
        "Regularly(x, home) ⊕ Develops(x)"
      ],
      "fol_conc": "Hangout(lukem, siblings)",
      "perplexity": 2.3107151985168457,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Sameage/2, Sameage/0, Siblings/2, Siblings/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Sameage/2, Sameage/0, Siblings/2, Siblings/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "TwinsOrTriplets(x)",
        "HangsOutAndPlaysWithSiblings(x, y)",
        "HasSiblingsOfSameAge(x)",
        "ComplainAboutAnnoyingSibling(x)",
        "DoesNotLiveAtHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)",
        "HasSiblingsOfSameAge(x)"
      ],
      "fol_consts": [
        "Luke"
      ],
      "fol_rules": [
        "∀x (TwinsOrTriplets(x) → ∃y (HangsOutAndPlaysWithSiblings(y, x)))",
        "∀x ((HasSiblingsOfSameAge(x)) → TwinsOrTriplets(x))",
        "∀x (ComplainAboutAnnoyingSibling(x) → HasSiblingsOfSameAge(x))",
        "∀x (DoesNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x))",
        "∀x (HangsOutAndPlaysWithSiblings(x, y) → DoesNotLiveAtHomeRegularly(y))"
      ],
      "fol_conc": "HangsOutAndPlaysWithSiblings(Luke, Luke)",
      "perplexity": 1.8125624656677246,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 47
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "TurkeyType(x)",
        "EasternWildTurkey",
        "OsceolaWildTurkey",
        "GouldsWildTurkey",
        "MerriamsWildTurkey",
        "RiosGrandeWildTurkey",
        "OcellatedWildTurkey"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (TurkeyType(x) ∧ TurkeyType(EasternWildTurkey) ⊕ TurkeyType(OsceolaWildTurkey))",
        "¬TurkeyType(tom, EasternWildTurkey)",
        "¬TurkeyType(tom, OsceolaWildTurkey)",
        "¬TurkeyType(tom, GouldsWildTurkey) ∧ ¬TurkeyType(tom, MerriamsWildTurkey)",
        "¬TurkeyType(tom, RiosGrandeWildTurkey)"
      ],
      "fol_conc": "",
      "perplexity": [
        1.4506170749664307,
        1.1378172636032104
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Wildturkey(y)"
      ],
      "fol_consts": [
        "tom",
        "easternwildturkey"
      ],
      "fol_rules": [
        "∃x (Wildturkey(tom))",
        "¬(Is(tom, easternwildturkey) ∧ Is(tom, osceolawildturkey))",
        "¬(Is(tom, gouldswildturkey) ∨ Is(tom, merriamswildturkey) ∨ Is(tom, riegraewildturkey))"
      ],
      "fol_conc": "(∀y (Wildturkey(y))) → Is(tom, easternwildturkey)",
      "perplexity": 1.6988955736160278,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsWildTurkey(x)",
        "IsWildTurkey(x, y)"
      ],
      "fol_consts": [
        "tom",
        "eastern",
        "osceola",
        "goulds",
        "merriams",
        "rio",
        "ocellated"
      ],
      "fol_rules": [
        "(∃x (IsWildTurkey(tom)))",
        "(¬(IsWildTurkey(tom, eastern)))",
        "(¬(IsWildTurkey(tom, osceola)))",
        "(¬((IsWildTurkey(tom, goulds) ∨ IsWildTurkey(tom, merriams) ∧ IsWildTurkey(tom, rio))))"
      ],
      "fol_conc": "∃y (IsWildTurkey(y, eastern) ∧ IsWildTurkey(tom, y))",
      "perplexity": 2.033862829208374,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsWildTurkey/1, IsWildTurkey/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsWildTurkey/1, IsWildTurkey/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 48
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Mammal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Wings(x)",
        "Breathes(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathes(x))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.6859349012374878,
        1.0583140850067139
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Flies(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "rock",
        "fly"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Flies(x))",
        "∀x (Flies(x) → Has(x, wings))",
        "∃x ((¬Is(rock, fly)) ∧ ¬Is(rock, bird) → ¬Flies(rock) ∧ ¬Breathes(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.3854994773864746,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bird/1, Bird/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bird/1, Bird/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsA(x, y)",
        "Fly(x)",
        "Breathes(x)",
        "Fly(x)",
        "Breathes(x)",
        "IsA(fly, z)"
      ],
      "fol_consts": [
        "rock",
        "fly"
      ],
      "fol_rules": [
        "∀x (IsA(rock, x))",
        "∃y (IsA(m, y) ∧ IsA(y, fly))"
      ],
      "fol_conc": "∃z ((IsA(x, z) ∨ IsA(z, m)) ∧ Fly(x) ∧ Breathes(x))",
      "perplexity": 2.650411605834961,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fly/1, Fly/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fly/1, Fly/0"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 49
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Seasons(x)",
        "FavoriteSeason(Emma, x)",
        "FavoriteSeason(Mia, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "James"
      ],
      "fol_rules": [
        "∀x (Seasons(spring) ∨ Seasons(summer))",
        " FavoriteSeason(Emma, summer)",
        "FavoriteSeason(Mia,y) → ¬Favorite Season(x Emma)"
      ],
      "fol_conc": "favoriteSeason(james,sommer):James loves sommer the most.",
      "perplexity": [
        2.8868229389190674,
        1.8325409889221191
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteSeason(Mia,y) → ¬Favorite Season(x Emma)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Favorite(x, y)",
        "Student(x)",
        "Love(y, z)",
        "Vacation(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x))",
        "∃y ∃z ((Student(y) → Love(z, summer)))",
        "(Favorite(emma, x) ∧ Favorite(mia, y) ⊕ ¬Equal(x, y))",
        "Vacation(james)",
        "∀x ∀y (Season(x) ⊕ Season(y))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 2.4553370475769043,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Seasons(x)",
        "FavoriteSeason(x, y)",
        "LoveMost(y)",
        "WantLongVacation(x)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "(∀x (Seasons(spring)) ∧ Seasons(summer) ∧ Seasons(fall) ∧ Seasons(winter))",
        "(∀x ((LoveMost(x, summer)) → WantLongVacation(y)))"
      ],
      "fol_conc": "FavoriteSeason(james, summer)",
      "perplexity": 2.850581169128418,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 50
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x, y)",
        "BornIn(x, z)",
        "American(city)",
        "WrittenBy(y, z)"
      ],
      "fol_consts": [
        "daniShapiro",
        "familyHistory",
        "familySecrets"
      ],
      "fol_rules": [
        "Podcast ≠ Novel(familySecrets)",
        "BG1: ∀x (BornIn(x, AmericanCity) → American(AmericanCity))",
        "BG2: ∃y ((Novel(y,y) ⊕ WrittenBy(daniShapiro, familyHistory)) → NovelWriter(y))",
        "Dani Shapiro is an AnAmericanWriter",
        "BostonIsAnAmericanCity"
      ],
      "fol_conc": "BornIn(DaniShapiro, Boston)",
      "perplexity": [
        2.4367899894714355,
        1.2102612257003784
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Podcast ≠ Novel(familySecrets)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Born(y, z)",
        "Writer(z)",
        "Novel(x)",
        "Podcast(z)",
        "Created(podcast, person)"
      ],
      "fol_consts": [
        "dani",
        "shapiro"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Is(x, novel))",
        "∃z ((Born(dani, z) ∧ Is(americancity, x)) → Is(z, american))",
        "∀y (Novel(y) ∧ Writer(shapiro, y) → Is(shapiro, novelist))",
        "Is(shapiro, dani)",
        "(Writer(shapiro, familyhistory) ∧ Novel(familyhistory) ∧ Writtenin2003(familyhistory))"
      ],
      "fol_conc": "Born(dani, boston)",
      "perplexity": 1.8343496322631836,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Novel/1, Novel/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Novel/1, Novel/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsNot(x, y)",
        "BornIn(x, y)",
        "WrittenBy(x, y)",
        "NovelWriter(x)",
        "WrittenBy(y, z)",
        "NovelWriter(z)",
        "NovelWriter(y)",
        "WrittenBy(z, w)",
        "A Novel(y)",
        "IsNot(x, y)",
        "IsNot(x, z)",
        "A Novel(y)",
        "BornIn(w, v)",
        "WrittenBy(y, w)",
        "IsNot(x, y)",
        "A Novel(u)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "boston"
      ],
      "fol_rules": [
        "(∃z (NovelWriter(z))) ∧ ¬(IsNot(dani_shapiro, z))",
        "(BornIn(x, y)) → IsNot(x, novel)",
        "(∀y (A Novel(y) ∧ WrittenBy(w, y) → NovelWriter(w)))",
        "(NovelWriter(dani_shapiro))",
        "((WrittenBy(dani_shapiro, family_history)) ∨ ¬(IsNot(family_history, novel)))",
        "(A Novel(family_history))",
        "(BornIn(x, y) → IsNot(y, boston))",
        "(∀x (NovelWriter(w) → WrittenBy(dani_shapiro, x)))"
      ],
      "fol_conc": "BornIn(dani_shapiro, family_history)",
      "perplexity": 3.9445881843566895,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀y (A Novel(y) ∧ WrittenBy(w, y) → NovelWriter(w)))"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 51
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "AnalogText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984",
        "hardcoverBook(1984)"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬AnalogText(x))",
        "∀x (PrintedText(x) → AnalogText(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": [
        1.547386884689331,
        1.1075043678283691
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Media(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(y)",
        "Hardcover(z)",
        "Digital(w)",
        "Book(u)"
      ],
      "fol_consts": [
        "book",
        "service"
      ],
      "fol_rules": [
        "∀x (Media(x) → ¬Analog(x))",
        "∀y (Printed(y) → Analog(y))",
        "∀z (Streaming(z) → Digital(z))",
        "∃u (Book(u) ∧ Hardcover(u))",
        "(Digital(service1984)) → (Media(service1984) ∧ Book(service1984))"
      ],
      "fol_conc": "(Streaming(book1984))",
      "perplexity": 2.186185598373413,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "nineteen84"
      ],
      "fol_rules": [
        "∀x (Digital(x) → ¬Analog(x))",
        "∀x ((HardcoverBook(x) → Analog(x)))",
        "∀x ((StreamingService(x) → Digital(x)))"
      ],
      "fol_conc": "StreamingService(nineteen84)",
      "perplexity": 1.4436042308807373,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 52
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorksRegularlyOftenAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyingOrganizingSpacesInHome(x)",
        "VisitStoreRegularly(x, y)",
        "GoesToBedLateAndWakesUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "officeSupply"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x)): All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksRegularlyOftenAtHome(x) → TidyingOrganizingSpacesInHome(x)) : All people who work regularly and often at home spend free time tidying and organizing the spaces in their homes.",
        "VisitStoreRegularly(remy, officeSupply)",
        "∃x ((TidyingOrganizingSpacesInHome(x) → ¬GoesToBedLateAndWakesUpAfterNoon(x))) : If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(∃x (TidyingOrganizingSpacesInHome(remy) ∧ GoesToBedLateAndWakesUpAfterNoon(x))) ⊕ ¬((TidyingOrganizingSpacesInHome(remy)) ∨ (GoesToBedLateAndWakesUpAfterNoon(x))): Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "fol_conc": "VisitStoreRegularly(remy, officeSupply)",
      "perplexity": [
        1.2690494060516357,
        1.0767649412155151
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Works(x, z)",
        "Home(y)",
        "Regularly(x)",
        "Often(x)",
        "Fullystocked(z)",
        "Impressive(w)",
        "Tidy(x)",
        "Organize(x)",
        "Visit(z)",
        "Goeslate(x)",
        "Wakeupafternoon(x)",
        "Remygoeshomeoffice(x)"
      ],
      "fol_consts": [
        "remy",
        "largedesktopmonitor",
        "homeoffice"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Regularly(worksat, home))",
        "∀x (Fullystocked(x) ∧ Impressive(y) → Owns(x, largedesktopmonitor))",
        "∀x (Regularly(w, z) ∨ Often(w, z)) → Tidy(oftenw, x)",
        "∀x (Regularly(workathome, y)) → Visit(z)",
        "∀x (Tidy(x) → ¬Goeslate(y) ∧ Wakeupafternoon(y))",
        "Remygoeshomeoffice(r) → Remybothgoestolateandwakeupafternoontheirhomeorremydoesenottolatesnororganizesherhomeandvisitsstoreoften(r)"
      ],
      "fol_conc": "Regularly(visit, officeupply)",
      "perplexity": 2.593095541000366,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHomeRegularlyAndOften(x)",
        "HomeOffice(x)",
        "TidyOrganizeSpacesInHomeFreeTime(x)",
        "VisitOfficeSupplyStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "(∀x (Own(x, y) → WorkAtHomeRegularlyAndOften(x)))",
        "(∀x (HomeOffice(x) → Own(x, y)))",
        "(∀x ((WorkAtHomeRegularlyAndOften(x) ∧ TidyOrganizeSpacesInHomeFreeTime(x))) ⊕ ¬(TidyOrganizeSpacesInHomeFreeTime(x)))",
        "((∀x (VisitOfficeSupplyStore(x) → WorkAtHomeRegularlyAndOften(x))))",
        "(TidyOrganizeSpacesInHomeFreeTime(y) ∧ ¬WorkAtHomeRegularlyAndOften(x)) ⊕ TidyOrganizeSpacesInHomeFreeTime(z)",
        "((Own(remy, y) → WorkAtHomeRegularlyAndOften(remy)))",
        "(TidyOrganizeSpacesInHomeFreeTime(remy) ∧ ¬WorkAtHomeRegularlyAndOften(y)) ⊕ (¬TidyOrganizeSpacesInHomeFreeTime(z) ∨ VisitOfficeSupplyStore(w))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(r) → WorkAtHomeRegularlyAndOften(remy)",
      "perplexity": 1.8778806924819946,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 53
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "IsMachineLearningAlgorithm(x)",
        "CategoryOf(x, y)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "state-of-the-art text summarization model"
      ],
      "fol_rules": [
        "∀x (IsMachineLearningAlgorithm(x) → ∃y CategoryOf(x,y))",
        "∀x CategoryOf(x, 'unsupervised learning') ⊕ RequiresLabelledData(x)",
        "CategoryOf('state-of-the-art text summarization model', y)",
        "'reinforcement learning' ≠ x ⊓ (IsMachineLearningAlgorithm(y) → ∃z CategoryOf(z,x))",
        "(∀x IsSupervisedLearningAlgorithm(x) → RequiresLabelledData(state-of-the-art-text-summarization-model))"
      ],
      "fol_conc": "'supervised learning' ∈ {y | IsMachineLearningAlgorithm('state-of-the-art text summarization model'), CategoryOf(y,x)}",
      "perplexity": [
        1.141473412513733,
        1.9452635049819946
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "'reinforcement learning' ≠ x ⊓ (IsMachineLearningAlgorithm(y) → ∃z CategoryOf(z,x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Requires(y)",
        "Stateofart(x)",
        "Trained(x, y)"
      ],
      "fol_consts": [
        "supervised",
        "unsupervised",
        "reinforcement"
      ],
      "fol_rules": [
        "∀x (Machinelearning(algorithm) → Category(algorithm, supervised)) ∨ Category(algorithm, unsupervised) ∨ Category(algorithm, reinforcement)",
        "Unsupervised(x) ∧ ¬Requires(y)",
        "Stateofart(textsummarizationmodel) ∧ Trained(stateofarttextsummarizationmodel, machinelearningalgorithms)",
        "∀x (Category(x, reinforcement) → ¬Trained(model, x))",
        "(Machinelearningtrainsummaryrequireslabelleddata(x) ∧ Category(algorithm, supervised))"
      ],
      "fol_conc": "Stateofart(textsummarizationmodel) → Trained(stateofarttextsummarizationmodel, machinelearningalgorithms)",
      "perplexity": 2.4101879596710205,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/1, Unsupervised/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/1, Unsupervised/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CategoryAs(x, y)",
        "RequiresLabelledData(x)",
        "TrainWithMLAlgorithm(y)",
        "NotUsedToTrain(x)",
        "TrainWithMLAlgorithm(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml",
        "supervised",
        "unsupervised",
        "reinforcement"
      ],
      "fol_rules": [
        "∀x (CategoryAs(ml, supervised)) ⊕ ∀x (CategoryAs(ml, unsupervised)) ⊕ ∀x (CategoryAs(ml, reinforcement))",
        "∀y (RequiresLabelledData(y) → CategoryAs(machinelearningalgorithm, y))",
        "TrainWithMLAlgorithm(stateofarttextsummarizationmodel)",
        "NotUsedToTrain(reinforcement)",
        "TrainWithMLAlgorithm(stateofthearttextsummarizationmodel)",
        "∀x (RequiresLabelledData(x) → TrainWithMLAlgorithm(textsummarisationalgorithm))"
      ],
      "fol_conc": "CategoryAs(supervised, stateofthearttextsummary) ∧ RequiresLabelledData(supervised)",
      "perplexity": 2.6320624351501465,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 54
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Person(x) → (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))"
      ],
      "fol_conc": "¬LivesInTaxHaven(djokovic)",
      "perplexity": [
        1.0717785358428955,
        1.0335109233856201
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Champion(x)",
        "Oscar(x)",
        "Celebrity(x)",
        "Player(x, y)",
        "Tennis(y)",
        "Wellpaid(x)",
        "Athlete(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Champion(x) ⊕ Oscar(x))",
        "∀x ((Player(x, y) ∧ Tennis(y)) → Champion(x))",
        "∀x (Oscar(x) → Celebrity(x))",
        "∀y (Tennis(y) → Athlete(y))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x ((Athlete(x) ∧ Famous(x)))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic) → Wellpaid(djokovic))"
      ],
      "fol_conc": "¬Taxhaven(djokovic)",
      "perplexity": 1.4503347873687744,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "Celebrity(x)",
        "ProfessionalTennisPlayer(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x ((ProfessionalTennisPlayer(x) ∧ GrandSlamChampion(x))) → Athlete(x)",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → ¬LiveInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": 1.3659298419952393,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 55
  },
  {
    "id": 200,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva foes not play for a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "BornIn(x, y)",
        "LoanedOutTo(x, z)",
        "PlaysForClub(x, z)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico"
      ],
      "fol_rules": [
        "Player(ailton)",
        "BornIn(ailton, 1995)",
        "Player(ailton) → LoanedOutTo(ailton, braga)",
        "Brazilian(ailton)",
        "PlaysForClub(ailton, nautico)"
      ],
      "fol_conc": "¬PlaysForClub(ailton, z)",
      "perplexity": [
        1.7153165340423584,
        1.0750975608825684
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(y, x)",
        "Player(x)",
        "Loanedoutto(x, z)",
        "Brazillian(x)",
        "Footballclub(z)",
        "Playfor(x, w)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∃y (Known(ailton, y))",
        "∀x (Player(x) ∧ Loanedoutto(x, braga))",
        "∀w ((Footballclub(w) ∨ Playfor(silva, w))) ⊕ Brazillian(silva)",
        "(Playfor(silva, nautico) ∧ Footballclub(nautico) ∧ Player(silva)) → (Loanedoutto(x, braga) ∨ Footballclub(braga))"
      ],
      "fol_conc": "¬Player(silva)",
      "perplexity": 2.114076852798462,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "IsKnownAs(y, z)",
        "FootballPlayer(z)",
        "LoanedOutTo(w, x)",
        "Brazilian(z)",
        "PlaysFor(y, w)",
        "Club(y)"
      ],
      "fol_consts": [
        "ailtonSilva",
        "1995",
        "braga",
        "nautico",
        "braga",
        "braga"
      ],
      "fol_rules": [
        "BornIn(ailtonSilva, 1995)",
        "IsKnownAs(ailtonSilva, ailtonSilva)",
        "FootballPlayer(ailtonSilva) ∧ LoanedOutTo(braga, ailtonSilva)",
        "Brazilian(ailtonSilva) ∧ PlaysFor(nautico, ailtonSilva)",
        "Club(nautico)",
        "Club(braga)"
      ],
      "fol_conc": "¬PlaysFor(ailtonSilva, x)",
      "perplexity": 2.13320255279541,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 56
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicEvent(x)",
        "WorldChampionships(x)",
        "Sport(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "UnitedStatesWonMostMedalsInTokyo",
        "LastOlympicGames"
      ],
      "fol_rules": [
        "∀x (SportingEvent(x) → OlympicEvent(x))",
        "LastOlympicGames(tokyo)",
        "UnitedStatesWonMostMedalsInTokyo(LastOlympicGames)"
      ],
      "fol_conc": "∃x (WorldChampionships(x) ∧ SportingEvent(x))",
      "perplexity": [
        1.8208757638931274,
        1.2544565200805664
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LastOlympicGames/1, LastOlympicGames/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LastOlympicGames/1, LastOlympicGames/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(y, z)",
        "Won(z, x)"
      ],
      "fol_consts": [
        "olympics",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "∀x (Sporting(olympics))",
        "∃y ∀z ((Last(tokyo, y)) → Sporting(y))",
        "Won(unitedstates, tokyo)"
      ],
      "fol_conc": "∃w (Sporting(worldchampionships))",
      "perplexity": 2.155946731567383,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "WonMostMedalsInCity(y, z)"
      ],
      "fol_consts": [
        "olympic games",
        "tokyo",
        "united states"
      ],
      "fol_rules": [
        "(∀x (SportingEvent(x)))",
        "(∃z (SportingEvent(z) ∧ WonMostMedalsInCity(united states, tokyo)))"
      ],
      "fol_conc": "(∃y (SportingEvent(y)))",
      "perplexity": 1.8392326831817627,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 57
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Hawk(x)",
        "Land(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Land(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": [
        1.339328408241272,
        1.0951099395751953
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(y)",
        "Lands(z)"
      ],
      "fol_consts": [
        "hawk",
        "bird"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃y (Bird(y) ∧ Hawk(y))"
      ],
      "fol_conc": "∀z (Bird(z) → Lands(z))",
      "perplexity": 2.4610588550567627,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Hawk(x)",
        "Lands(x)",
        "Bird(y)",
        "Lands(y)",
        "Hawk(z)"
      ],
      "fol_consts": [
        "hawk1"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃y (Bird(y) ∧ Hawk(y))"
      ],
      "fol_conc": "¬(∀z (Bird(z) → Lands(z)))",
      "perplexity": 2.3190512657165527,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 58
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "LovesAnimals(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (LovesAnimals(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → LovesAnimals(x))"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.1172765493392944,
        1.046775460243225
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x, y)",
        "Animal(y)",
        "Lover(x)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x) → ¬(Mean(x, y)))",
        "∃x (Grumpy(x) → Mean(x, y))",
        "∀x (Lover(x) → Nice(x))",
        "∀x (Owns(x, y) → Lover(y))"
      ],
      "fol_conc": "(¬(Grumpy(tom) ∧ ¬Mean(tom, tom)))",
      "perplexity": 1.465647578239441,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "LoveAnimals(x)",
        "OwnPet(x)",
        "NiceToAnimals(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬(MeanToAnimals(x)))",
        "∃x (MeanToAnimals(x) ∧ ¬(NiceToAnimals(x)))",
        "∀x (LoveAnimals(x) → NiceToAnimals(x))",
        "∀x ((OwnPet(x) → LoveAnimals(x)))",
        "OwnPet(tom)"
      ],
      "fol_conc": "(¬MeanToAnimals(tom)) ∧ ¬(NiceToAnimals(tom))",
      "perplexity": 3.6626734733581543,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 59
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SuperheroMovie(x)",
        "GoodGuysWinInSuperheroMovies",
        "Fight(x,y,z)",
        "BadGuy(y) ∨ GoodGuy(z)",
        "NamedAfterCharacter(x, y, z)"
      ],
      "fol_consts": [
        "sir_digby",
        "nemesis",
        "surprising_adventures_of_sir_digby_chicken_caesar"
      ],
      "fol_rules": [
        "∀x (SuperheroMovie(x) → GoodGuysWinInSuperheroMovies)",
        "(Fight(sir_digby, nemesis, x)) ⊕ ¬(BadGuy(nemesis) ∨ GoodGuy(sir_digby))",
        "NamedAfterCharacter(surprising_adventures_of_sir_digby_chicken_caesar, sir_digby, SuperheroMovie(x)"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9417173862457275,
        1.2082852125167847
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (SuperheroMovie(x) → GoodGuysWinInSuperheroMovies)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Goodguy(y, x)",
        "Badguy(z, w)",
        "Fights(w, y)",
        "Namedafter(v, u)",
        "Appears(u, v)",
        "Wins(a, b)"
      ],
      "fol_consts": [
        "sirdigby",
        "chickencaesar"
      ],
      "fol_rules": [
        "∀x (Superhero(x) → ∃y (Goodguy(y, x)) ⊕ ∃z (Badguy(z, w)))",
        "Superhero(chickencaesar)",
        "Fights(sirdigby, y)",
        "Namedafter(y, sirdigby)",
        "∀u ((Namedafter(u, v)) → Goodguy(v, u) ∧ Appears(u, v))",
        "Wins(x, y) ⊕ Wins(z, w)"
      ],
      "fol_conc": "∃z (Fights(sirdigby, z) ∧ Badguy(y, z) ∧ Wins(sirdigby, z))",
      "perplexity": 2.2413289546966553,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GoodGuy(x)",
        "Fight(x, y)",
        "Fight(y, x)",
        "GoodGuy(x)",
        "NamedAfter(x, y)",
        "AppearsIn(x, y)"
      ],
      "fol_consts": [
        "sirDigbyChickencaeasar",
        "digbychickencaesar"
      ],
      "fol_rules": [
        "∀x (Fight(x, y)) → ∃z (GoodGuy(z) ⊕ GoodGuy(y))",
        "(NamedAfter(sirDigbyChickencaeasar, digbychickencaesar)) → GoodGuy(digbychickencaesar)",
        "(NamedAfter(sirDigbyChickencaeasar, digbychickencaesar)) → (AppearsIn(sirDigbyChickencaeasar, digbychickencaesar))",
        "∀x (GoodGuy(x) ∧ Fight(digbychickencaesar, x)) → GoodGuy(x)",
        "Fight(sirDigbyChickencaeasar, y) ∨ Fight(y, sirDigbyChickencaeasar)"
      ],
      "fol_conc": "¬(∀x (GoodGuy(digbychickencaesar) ⊕ Fight(digbychickencaesar, x)))",
      "perplexity": 2.4642491340637207,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 60
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Person(x)",
        "HasChild(x, y)",
        "TravelsToParisForHoneymoon(x)",
        "OccursInJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (HasChild(x, y) → Wedding(x))",
        "∀x ((TravelsToParisForHoneymoon(x)) ∧ Wedding(x)) :  All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (Wedding(x) → OccursInJuly(x)):All weddings that occur in July belong to people who travel to Paris for their honeymoon. ",
        "∃x (WellAttended(x):Some weddings in July are well-attended",
        "¼(HasChild(john) ∧ TravelsToParisForHoneymoon(john)) : If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "(HasChild(john) → (¬TravelsToParisForHoneymoon(john) ∨ ¬(OccursInJuly(john)))):If  John has at least one child ,then if he did not attend well attended then   John travels to Paris for their honeymoon."
      ],
      "fol_conc": "∀x (HasChild(x))",
      "perplexity": [
        1.6660041809082031,
        1.1691635847091675
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((TravelsToParisForHoneymoon(x)) ∧ Wedding(x)) :  All people who travel to Paris for their honeymoon are people who have a wedding."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Is(x, z)"
      ],
      "fol_consts": [
        "john",
        "child",
        "wedding",
        "paris",
        "honeymoon",
        "july",
        "attended"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Has(x, child))",
        "∀x (Honeymoon(x) ∧ Wedding(x) → Is(x, wedding))",
        "∃y ∃z ((Written(y, z) ∧ Written(z, x)) → Wedding(x))",
        "∃x (Attended(x) → Written(july, x))",
        "(Has(john, child) → ¬(Honeymoon(rina) ∨ Has(rina, wedding)))",
        "¬(Wedding(well) ∧ Is(well, attended)) → (∃z (Is(z, june) ∧ Wedding(z)) ⊕ ∃x (Honeymoon(x) ∧ Written(july, x)))"
      ],
      "fol_conc": "Has(john, child)",
      "perplexity": 2.1681532859802246,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WeddingForHoneymoon(x)",
        "HasChild(y, x)"
      ],
      "fol_consts": [
        "john",
        "july",
        "paris"
      ],
      "fol_rules": [
        "(∀x (HasChild(x)) → WeddingForHoneymoon(peoplewhohaveachildwithweddingofpersonwhotravelsforhoneymownotheirselfandnohavingawedidngtfohersonwotraevsfpornhoenomnieweedyowmnyneiyojhefroaetelohaeilhnseewdoaloonwnon))",
        "(∀x (WeddingForHoneymoon(x) → HasChild(y)))",
        "((HasChild(john) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself)) ⊕ ∃x (WeddingForHoneymoon(x) → HasChild(y)))",
        "∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself)) ⊕ (¬(WeddingForHoneymoon(x) → HasChild(y)))",
        "∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → (∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → ¬(∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself))))",
        "((HasChild(joh) ⊕ HasChild(wn)))"
      ],
      "fol_conc": "(∀y ((HasChild(won)) ∧ WeddingForHoneymoon(parisforhoneymownofjhnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → HasChild(john))",
      "perplexity": 3.8197269439697266,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 101
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourist(x)",
        "FavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourist(x) → FavoriteAnimal(max, x))",
        "(AnimalFromAustralia(x) ∧ LoveToSleep(x)) ⊕ ¬(AnimalFromAustralia(x) ∨ LoveToSleep(x))"
      ],
      "fol_conc": "FavoriteAnimal(max, AnimalFromAustralia(x))",
      "perplexity": [
        1.3536055088043213,
        1.5918196439743042
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteAnimal(max, AnimalFromAustralia(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, z)",
        "From(x, y)",
        "Veryfluffy(z)",
        "Love(z, w)",
        "Fluffy(z)",
        "Sleepy(z)"
      ],
      "fol_consts": [
        "max",
        "animals",
        "tourists",
        "australia",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(x, z))",
        "∀x (∃y (From(y, x) ∧ Loved(tourists, y)))",
        "∀x ∀z ((From(x, z) ∧ Loved(tourists, x)) → From(australia, z))",
        "∀x ∀y ((Favorite(z, x) ∧ Veryfluffy(y)) → Fluffy(y))",
        "∀x (Fluffy(y) → Sleepy(y))",
        "¬(Veryfluffy(x) ∧ Not(quokka)) ∨ ∃z (From(z, quokka) ∧ Fluffy(x))"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 2.0115559101104736,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Loved(x, y)",
        "FavoriteAnimal(z)",
        "Loved(x, z)",
        "FavouriteAnimalsAreVeryFluffy(animals)",
        "Loved(bytourists)",
        "Loved(tosleepx)",
        "FavoriteAnimal(sleepingz)",
        "Loved(ausquokkaq, s)",
        "FavoriteAnimal(z)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "bytheaustraliacountry",
        "kakuaussieanimalnameforshorty",
        "ausuofallanimalsinthiscountryforyou",
        "sleezingzislikekoalawhichlovesleepingandtheyareveryfluffy",
        "qoockaazuisquokka",
        "sleepingozone"
      ],
      "fol_rules": [
        "(Loved(x, y) → FavoriteAnimal(z))",
        "(∀x (Loved(bytourists)))",
        "(¬(FavouriteAnimalsAreVeryFluffy(ausanimalsqzuaussiesatthistouristyplaceforquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)) ⊕ Loved(x, bytourists))",
        "(∀x (Loved(bytheaussieanfromthatnatsionalparkwheretheqoockaslive)))",
        "FavouriteAnimalsAreVeryFluffy(ausquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)",
        "(∀x (Loved(bytourists) ∧ FavoriteAnimal(z)) → Loved(tosleepz, z))",
        "¬(FavoriteAnimal(sleepingqoockaazuisquokka)) ∨ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)",
        "(∃x (Loved(tosleepz, z) ∧ FavoriteAnimal(sleepingqoockaazuisquokka)) → Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere))",
        "Loved(tosleepz, z)"
      ],
      "fol_conc": "(∃x (FavoriteAnimal(z) ∧ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)))",
      "perplexity": 5.720861911773682,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loved/2, Loved/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loved/2, Loved/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 102
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Rose(x)",
        "GivenOutOnTV(x, y)",
        "OnTheBachelor(x)",
        "PortraysPeopleOfRealLife(x)",
        "IsRealityTvShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eightpm",
        "portrait",
        "rises"
      ],
      "fol_rules": [
        "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])",
        "∀x ((PortraysPeopleOfRealLife(x) ∨ ¬IsRealityTvShow[portrait])) (∀y (Portrait[y] ⇒ IsRealityTVShw[x])]",
        "∃x (¬IsRealityTivsHow[x])"
      ],
      "fol_conc": "∃x ((GivenOutOnTv[rise, monday] ⊕ 8pm) ∧ Portrayt[portrait] ⊗ IsRealityTVShow[x]) ⇒ (BreakingBavd[x] ∧ GivenOutOnTvs[rises, Monday] ⊕ 8pM)",
      "perplexity": [
        2.5405304431915283,
        1.2964909076690674
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Given(x, y)",
        "On(x, z, w)",
        "Is(a, b)"
      ],
      "fol_consts": [
        "roses",
        "thebachelor",
        "tv",
        "breakingingbad",
        "monday",
        "bachelorette",
        "rose",
        "realitytvs",
        "badgesontherose",
        "eighthpmmonday",
        "realpeopleshows",
        "badshowsontherealpeople"
      ],
      "fol_rules": [
        "∃x (On(x, monday, ighthpmmonday) ∧ Given(x, tv))",
        "∀x (Given(x, tv) → On(x, thebachelor))",
        "∀x (∃y (Is(y, x) ∧ Is(a, b) ∧ Realpeopleshows(y, a))) → Realitytvs(y)",
        "¬Badgesontherealpeopleshows(badshowsontherealpeople, badshowsontherealtv)",
        "Given(rose, tv) ∧ On(rose, monday, ighthpmmonday) → ∃x (Song(x) ∧ Badgesontherose(x))",
        "∀a (∃b (Is(b, a) ∧ ¬Be(b, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "Badshowsontherealpeopleshows(breakingingbad, rose)",
      "perplexity": 2.244359016418457,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: On/2, On/3.\n\n\nFatal error:  The following symbols are used with multiple arities: On/2, On/3"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GivenOut(x, y)",
        "OnTV(y)",
        "OnTV(n)",
        "Bachelor(z)",
        "Portrays(t, u)",
        "Bachelor(u)"
      ],
      "fol_consts": [
        "roses",
        "roses",
        "badger"
      ],
      "fol_rules": [
        "(∃y (GivenOut(roses, y)) ∧ OnTV(y))",
        "(OnTV(r) → ∀z (Bachelor(z) ⊕ Portrays(t, u)))",
        "((Portrays(l, t) ∨ Portrays(k, l)) ∧ ∀x ((Bachelor(x) → (Bachelor(u)))))",
        "(∃t (∀l (((GivenOut(roses, r) ∧ OnTV(y) ⊕ GivenOut(z))) ∨ ¬OnTV(w))))",
        "(¬Portrays(l, k)) ∧ ∀x ((Portrays(k, u)) → (Bachelor(u) ∨ Portrays(m, l)))",
        "∀y (((Bachelor(x) ∧ OnTV(y)))) ⊕ Bachelor(z)",
        "((GivenOut(badger, r)) ⊕ ∃t (∀l ((Portrays(l, t)) ∧ GivenOut(roses, y)) ∨ Portrays(k, l)))"
      ],
      "fol_conc": "∃x (Bachelor(x) ∧ OnTV(y))",
      "perplexity": 11.6235933303833,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GivenOut/1, GivenOut/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GivenOut/1, GivenOut/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 103
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "e1",
        "m"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "(From(marvin, m) ∧ From(marvin, e1)) ⊕ ¬(From(marvin, mars))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.242605447769165,
        1.9152517318725586
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "(From(mars, x) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x ((Earth(x)) → Human(x))",
        "(Marvin(mars) ∧ ¬From(mars, marvin) ⊕ (From(earth, marvin)))",
        "(¬From(earth, marvin) → Extraterrestrial(marvin))"
      ],
      "fol_conc": "((Marvin(mars) ∧ From(earth, marvin)) → Human(marvin))",
      "perplexity": 1.8097050189971924,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 104
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Test(x)",
        "CostTest(x, y)",
        "ProvidesFinancialAid(x, z)",
        "HasEconomicHardship(z)",
        "FamilyType(x)",
        "IsSingleParent(fam_x) ",
        "DadIsUnemployed(y, num_years_unemployed_y)"
      ],
      "fol_consts": [
        "gre",
        "usd_205",
        "ects"
      ],
      "fol_rules": [
        "∃x (Test(x) ∧ CostTest(gre, usd_205))",
        "∀z ((ProvidesFinancialAid(ets,z)) → HasEconomicHardship(z))",
        "∃x (HasEconomicHardship(x) ∧ (∃y (FamilyType(y) ∧ IsSingleParent(eats))) ∧ DadIsUnemployed(eats, 1))",
        "∀z ((ProvidersFinancialAid(ets,z)) → HasEconomicHardship(z)) : ETS provides financial aid to those applicants who have economic hardship.",
        "¬∃x (CostTest(gre, usd_300)): Cost is less than $300"
      ],
      "fol_conc": "∃y (Test(y) ∧ (∧ x ∈ domain of y:   ( CostTest(x,y)<usd_300)))",
      "perplexity": [
        2.3889622688293457,
        1.2990751266479492
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z ((ProvidersFinancialAid(ets,z)) → HasEconomicHardship(z)) : ETS provides financial aid to those applicants who have economic hardship."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(y, x)",
        "Is(x, y)",
        "Lives(x, z)",
        "Has(z, w)"
      ],
      "fol_consts": [
        "tom",
        "gretest",
        "singleparentfamily",
        "daddidnotworkformorethanayear"
      ],
      "fol_rules": [
        "∀x (Costs(gretest, urs205))",
        "∃y ((Is(y, grepest) ∧ Provides(ests, y)) → ¬(Is(x, greapest)))",
        "(Has(singleparentfamily, tom) ∧ Has(daddidnotworkformorethanayear, daddidntworkforyears)) ∧ (Has(daddidnotworkformorethanayear, dad) ∨ Is(grepest, singleparentfamily))"
      ],
      "fol_conc": "(∀x (Costs(x, us300)))",
      "perplexity": 2.7407050132751465,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GRETest(x)",
        "ETSProvidesFinancialAid(y, x)",
        "ETSProvidesFinancialAid(x)",
        "HasEconomicHardship(z, y)",
        " GRECostBelowThreshold(u)",
        "HasEconomicHardship(m, n)",
        " GRECostBelowThreshold(t)"
      ],
      "fol_consts": [
        "us205",
        "us205",
        "us205",
        "us205",
        "us205"
      ],
      "fol_rules": [
        "(ETSProvidesFinancialAid(u) ∧ GRETest(x)) → (GRETest(y))",
        "(HasEconomicHardship(z, x))",
        "GRETest(us205)",
        "ETSProvidesFinancialAid(us205)",
        "GRETest(g)",
        "GRETest(h)"
      ],
      "fol_conc": "(ETSProvidesFinancialAid(u) ∧ GRETest(x))",
      "perplexity": 18.64544677734375,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 105
  },
  {
    "id": 135,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space sucks.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Space",
        "Vacuum",
        "Vampire",
        "Plunger",
        "Duster",
        "Appliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Suck(x))",
        "∀x, y (Vampires(x) → Suck(y)) ⊕ ∃y (Plungers(y) ∨ Vacuums(y))",
        "∀x (Apliances(x) ∧ ¬Suck(x))",
        "Space ⊕ ∃y (Vacuum(y)) ⊕ (∀z (Vampire(z) → Suck(z))) ",
        "∀x ((Apliances(x) ∧ ¬Suck(x)) ⊕ Suck(x))"
      ],
      "fol_conc": "Space ∨ ∃y (Vacuums(y))",
      "perplexity": [
        2.334848165512085,
        1.2568644285202026
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (Vampires(x) → Suck(y)) ⊕ ∃y (Plungers(y) ∨ Vacuums(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Space(y)"
      ],
      "fol_consts": [
        "plunger",
        "vacuum",
        "vampire",
        "space"
      ],
      "fol_rules": [
        "∀x (Plungers(x) → Suck(x))",
        "∀x (Vacuums(x) → Suck(x))",
        "∀x (Vampires(x) → Suck(x))",
        "(Space(y) ∧ Vacuums(y))",
        "Duster(x)",
        "(¬Sucker(x) ∧ Duster(x)) ⊕ True(vacuum, sucks)"
      ],
      "fol_conc": "Suck(space)",
      "perplexity": 2.2184486389160156,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Space/1, Space/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Space/1, Space/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x, y)",
        "IsVacuum(z)",
        "IsVacuum(w)"
      ],
      "fol_consts": [
        "plunger",
        "vacuum",
        "vampire"
      ],
      "fol_rules": [
        "(¬(Suck(plungers)) ∧ Suck(vacs)) → (¬(Suck(space)))",
        "(∃x ((IsVacuum(x) ∨ IsVacuum(y))))",
        "(¬((Suck(duster)) ⊕ ¬(Suck(appliance))))",
        "Suck(spaces, vacs)",
        "(Suck(sucks, plunger))",
        "(∀z (Suck(z)))"
      ],
      "fol_conc": "(((IsVacuum(space) ∧ Suck(vacuums)) → ∃x ((¬((Suck(plungers)))) ∨ ¬(Suck(appliance)))))",
      "perplexity": 7.789027690887451,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Suck/2, Suck/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Suck/2, Suck/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 106
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(B, y)(x,y)"
      ],
      "fol_consts": [
        "melissa"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → Spicy(x))",
        "∃x (Cupcake(x) ∧ Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "ProductOf(melissa, Cupcake)(x)",
        "(∃y(DriedThaiChili(y)) ∧ (Spicy(y) ⊕ Bakery(y))) → ((DriedThaiChili(y) ∧ Hotpot(y)) ∨ Spicy(y))",
        "Dried Thai Chili (x )∧ ProductOf(melissa,Cupake(x))⊕ ¬(Cupcake(x )∧Productof(Melissa,cupke(x)]"
      ],
      "fol_conc": "DriedThaiChili(x) ⊕ ¬Cupcake(x)",
      "perplexity": [
        1.5218502283096313,
        1.5990744829177856
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "ProductOf(melissa, Cupcake)(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymellasa"
      ],
      "fol_rules": [
        "(¬Bakery(y)) → Spicy(y)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymellasa) → Cupcake(x))",
        "(Spicy(z) ⊕ (Bakery(z))) → ((Hotpot(z) ∨ Spicy(z)))",
        "∃y (Driedthai(y) ∧ Product(driedthai, y) ∧ Bakery(y))"
      ],
      "fol_conc": "(Product(driedthai, bakedbymellasa) ∧ Cupcake(driedthai)) ∧ Product(driedthai, bakedbymellasa)",
      "perplexity": 1.7343655824661255,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(y)",
        "Cupcake(y)"
      ],
      "fol_consts": [
        "driedThaiChili",
        "driedThaiChili"
      ],
      "fol_rules": [
        "(∀y (Bakery(y)))",
        "(¬(∃x (Spicy(x))))",
        "(∀z (∃w ((Cupcake(w) ∧ Bakery(z)) ⊕ Bakery(c))))",
        "(∀u ∀v (((Spicy(u) ∨ Bakery(v)) → ∃q ∃s ((((Spicy(q))) ∨ (Bakery(s))) ∨ (Bakery(t))) → ((Cupcake(w) ∧ Bakery(z)) ⊕ Cupcake(e)))))",
        "(∀e (∃d (((Spicy(d)) ⊕ Spicy(c)) ∨ Bakery(f))))",
        "((Spicy(r)) ∨ Bakery(u))"
      ],
      "fol_conc": "Cupcake(driedThaiChili) ∧ Bakery(e)",
      "perplexity": 12.43946361541748,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 107
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "WorkIn(x, y)",
        "NeedToEarnMoney(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallsMealsAndRecipes(x)",
        "NotPickyEater(x)",
        "SpendTimeInCampusDiningHalls(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkInStudentJobsOnCampus(x) → NeedToEarnMoney(x))",
        "∀x (OrderTakeoutFrequently(x) → WorkInStudentJobsOnCampus(x))",
        "∀x (WorkInStudentJobsOnCampus(x) ⊕ OrderTakeoutFrequently(x))",
        "∀x ((EnjoyDiningHallsMealsAndRecipes(x)) → ¬NotPickyEater(x))",
        "∀x ((EnjoyDiningHallsMealsAndRecipes(x)) → SpendTimeInCampusDiningHalls(x, x))",
        "(WorkInStudentJobsOnCampus(mary) ∧ NeedToEarnMoney(mary)) ⊕ ¬(NotPickyEater(mary) ∨ NeedToEarnMoney(mary))"
      ],
      "fol_conc": "EnjoyDiningHallsMealsAndRecipes(mary) ⊕ NotPickyEater(mary)",
      "perplexity": [
        1.2260255813598633,
        1.1331846714019775
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Earns(x, y)",
        "Order(sx, ty)",
        "Dininghall(sx, ty)",
        "Needs(x, y)",
        "Pickyeater(x)",
        "Time(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Workoncampus(x) → Earns(x, money))",
        "(Person(x) ∧ Order(sx, ty) ⊕ Enjoy(dininghall, sx)) → Student(x)",
        "∀x (Order(sx, ty) → (Student(x) ⊕ Enjoy(dininghall, sx)))",
        "∃y ((Dininghall(y, x) ∧ Pickyeater(y)) → ∃z (Enjoy(z, y)))",
        "(Person(x) ∧ Dininghall(x, y) ∧ Enjoy(z, x) → Time(x, dininghall))",
        "Mary(mary) ∧ Workoncampus(mary) ∧ Earns(mary, money) → ¬Pickyeater(mary)",
        "Mary(mary) ∧ Worksstudentjob(mary) ∧ Earns(mary, money) → ¬Needs(mary, money)"
      ],
      "fol_conc": "(Enjoy(dininghall, mary) ⊕ Pickyeater(mary)) ∨ (Enjoy(dininghall, mary) ∧ Pickyeater(mary) → Time(mary, dininghall))",
      "perplexity": 1.843845009803772,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NeedsMoney(x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y, x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(z)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)",
        "NeedsMoney(t)",
        "NeedsMoney(y)",
        "NeedsMoney(e, x)",
        "NeedsMoney(f)",
        "NeedsMoney(z)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y)",
        "NeedsMoney(t)",
        "NeedsMoney(s)",
        "NeedsMoney(l)",
        "NeedsMoney(a, x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)"
      ],
      "fol_consts": [
        "mary",
        "campustudyingestudentsjobs-on-campusneedsmoneytotehlpayforcollege tuition "
      ],
      "fol_rules": [
        "(NeedsMoney(t)) → (WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(mary) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "∃x (NeedsMoney(x))",
        "(NeedsMoney(e)) → ¬WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(i)"
      ],
      "fol_conc": "((NeedsMoney(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))) ⊕ (NeedsMoney(e, l))",
      "perplexity": 10.329919815063477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NeedsMoney/2, NeedsMoney/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NeedsMoney/2, NeedsMoney/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 108
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) ⊕ Deadly(x))",
        "BileDuctCancer(B): Bile duct cancer is a severe cancer.",
        "Cholangiocarcinoma(C) ≡ BileDuctCancer(C)",
        "¬(ColorectalCancer(C) ∧ SurvivalRateLow(C)) : No colorectal cancer and its survival rates are low.",
        "∀x (MildFlu(x) → ¬SurvivalRateLow(x)) : No one with mild flu has a low survival rate.",
        "∃x (SevereCancer(x) ∧ ¬SurvivalRateLow(x)) : There exists a colorectal cancer that has no low survival rate."
      ],
      "fol_conc": "∀x ((Deadly(C) → SurvivalRateLow(C)), SevereCancer(C): C: Colorectal Cancer, (MildFlu(x) ⊕ Deadly(x)), (ColorectalCancer(C) ∧ ¬SurvivalRateLow(C)) : If there exists a colorectal cancer with no low survival rate then it is not deadly disease.",
      "perplexity": [
        1.6133474111557007,
        1.536275863647461
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BileDuctCancer(B): Bile duct cancer is a severe cancer."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Low(s, y)",
        "Severe(x)",
        "Bile(x)"
      ],
      "fol_consts": [
        "bile",
        "flu",
        "cancer"
      ],
      "fol_rules": [
        "(∀x (Deadly(x) → Low(s, x)))",
        "((∃x (Severe(x)) ∧ Deadly(x)) ⊕ Deadly(x))",
        "Bile(bile) ∨ Severe(cancer)",
        "¬(Mild(flu) ∧ Low(s, flu))"
      ],
      "fol_conc": "(Severe(cancer) → Colorectal(cancer))",
      "perplexity": 2.5043067932128906,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsDeadly(x)",
        "SurvivalRateLow(x, y)",
        "SevereCancer(y)"
      ],
      "fol_consts": [
        "flu",
        "_",
        "flu"
      ],
      "fol_rules": [
        "(∀x (IsDeadly(x) → SurvivalRateLow(x)))",
        "(¬(SevereCancer(flu)) ⊕ IsDeadly(d))",
        "SevereCancer(b)",
        "((SevereCancer(y) ∧ IsDeadly(flu)) ⊕ SevereCancer(c))"
      ],
      "fol_conc": "(¬(IsDeadly(flu))) ⊕ (SurvivalRateLow(x, flu))",
      "perplexity": 14.3790283203125,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SurvivalRateLow/1, SurvivalRateLow/2.\n\n\nFatal error:  The following symbols are used with multiple arities: SurvivalRateLow/1, SurvivalRateLow/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 109
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GRETest(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "HasEconomicHardship(x)",
        "LivesInFamily(x, z)",
        "IsOutOfWork(z)"
      ],
      "fol_consts": [
        "tom",
        "ETS"
      ],
      "fol_rules": [
        "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)",
        "∀x (GRETest(x) ∧ ProvidesFinancialAid(ETS, x) → HasEconomicHardship(x))",
        "∀y (HasEconomicHardship(y) → ∃z ((LivesInFamily(z, y) ∨ ¬ LivesInFamily(z, ETS)) ∧ (IsOutOfWork(z)))",
        "IsOutOfWork(tom's dad)",
        "LivesInFamily(tom's dad, tom)",
        "∀x (HasEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ⇒ HasEconomicHardship(tom) ∴ ∃y ((GRETest(y) ∧ ProvidesFinancialAid(ETS, y)) ∨ GRETest(ets))"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9536328315734863,
        1.1783725023269653
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, z)",
        "Economic(x, y)",
        "Difficult(y)",
        "Lives(x, z)",
        "Father(x, y)",
        "Outofwork(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "us205",
        "year1",
        "singleparentfamily"
      ],
      "fol_rules": [
        "∃x (Costs(x, us205))",
        "(Provides(ets, x) ∧ Economic(x, z) ∧ Difficult(z) → Provides(ets, tom))",
        "∀y ((Economic(y) ⊕ Difficulty(y)) → ∃z (Difficult(z)))",
        "(Lives(tom, singleparentfamily) ∧ Father(tom, y) ∧ Outofwork(y, year1))",
        "(Outofwork(x, year1) → Provides(ets, tom))",
        "∀x ((Provides(ets, x) ∧ Costs(x, us205) → Play(sam, nope)))"
      ],
      "fol_conc": "(Provides(ets, tom) ∧ Costs(tom, us205))",
      "perplexity": 2.1026229858398438,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAid(sx, x)"
      ],
      "fol_consts": [
        "ets",
        "grec"
      ],
      "fol_rules": [
        "$205(x)",
        "(∃y (ProvidesFinancialAid(ets, grc) ∧ ProvidesFinancialAid(greclandhardshipx)))",
        "(¬ProvidesFinancialAid(economicgriardifficulty))",
        "($205(y))"
      ],
      "fol_conc": "(∃y (Costs(ets, grc) ∧ ProvidesFinancialAid(samhardscapitalresourcestom)))",
      "perplexity": 12.56561279296875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 110
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "PopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympicsAndParalympics(x)",
        "RankedAmongTheBest(x)",
        "University(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(beijing, china) ⊕ ¬Capital(beijing, asia-pacific)) → PopulousNationalCapitalCity(beijing)",
        "∃x (LocatedIn(x, northern-china)) ∧ LocatedIn(beijing, northern-china) ⊕ ∃x (LocatedIn(x, southern-china)) → LocatedIn(beijing, southern-china)",
        "∀y ((LocatedIn(y, china)) ⊕ (HostedOlympicsAndParalympics(beijing) → RankedAmongTheBest(china)))",
        "∃x ∃u (University(x, u) ∧ LocatedIn(u, asia-pacific)) ∧ ∀x ∃z ((LocatedIn(z, north-america)) ∧ University(x, z) ∧ ¬RankedAmongTheBest(north-america)) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ∧ Capital(beijing, china) ⊕ ∀y ((Capital(y, china)) → ¬(LocatedIn(y, southern-china)))) → True",
        "∃x (University(x, southern-china) ∧ RankedAmongTheBest(southern-china)) ⊕ ∀y ((LocatedIn(y, china)) → ∄z (((Capital(z, china))) ∧ LocatedIn(z, south-america) ∧ ¬(RankedAmongTheBest(china)))) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, china) → ¬(Capital(y, south-america))) ∧ ∃z ((University(z, y) ∧ RankedAmongTheBest(south-america)))) → True",
        "∃x (LocatedIn(x, china) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, southern-china)) → ¬(Capital(y, china))) → False",
        "∃x (LocatedIn(x, china) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, southern-china)) → ¬(Capital(y, china))) → True",
        "∃x ∃z (University(x, z) ∧ LocatedIn(z, asia-pacific) ⊕ ∀y ((LocatedIn(y, south-america)) → ¬(University(y, y)))) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, china) → ¬(Capital(y, south-america))) → ∄z (((University(z, y))) ∧ RankedAmongTheBest(south-america)))) → False"
      ],
      "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))",
      "perplexity": [
        2.466643810272217,
        1.0918185710906982
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ∃u (University(x, u) ∧ LocatedIn(u, asia-pacific)) ∧ ∀x ∃z ((LocatedIn(z, north-america)) ∧ University(x, z) ∧ ¬RankedAmongTheBest(north-america)) → False"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(n, x)",
        "Located(x, z)",
        "Hosted(s, e)",
        "Olympics(s, t)",
        "Paralympics(s, t)",
        "Ranked(b, u)",
        "Asiapacific(u)",
        "World(u)",
        "Southern(z)",
        "China(y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(Mostpopulous(beijing, beijing))",
        "(Located(beijing, northern))",
        "(Hosted(berlin, summer2008)) ⊕ (Hosted(berlin, paralympics2008))",
        "(Hosted(summer2008) ∧ Hosted(paralympics2008)) → (Olympics(summer2008, t) ∧ Olympics(paralympics2008, t))",
        "(∃u ((Ranked(u, beijing) ∧ Asiapacific(u)) ∨ Ranked(u, world)))",
        "(∀z ((Asiapacific(z) ∧ World(z)) → Located(beijing, z)))",
        "(Located(x, southern) ∧ China(y) ⊕ (China(y) ∧ Capital(x, y)))"
      ],
      "fol_conc": "(Located(beijing, southern)) ⊕ (Located(beijing, northern))",
      "perplexity": 2.0923571586608887,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Hosted/1, Hosted/2, World/1, World/0, China/1, China/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Hosted/1, Hosted/2, World/1, World/0, China/1, China/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulousNCity(y)",
        "LocatedIn(z, x)",
        "LocatedIn(x, z)",
        "Capital(f, c)",
        "NotSouthernChina(c)",
        "NotSouthernChina(h)"
      ],
      "fol_consts": [
        "beijing"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(MostPopulousNCity(beijing))",
        "(LocatedIn(n) ↔ LocatedIn(b))",
        "((Capital(x, beijing) ∧ Capital(y, china))) ↔ (NotSouthernChina(z))"
      ],
      "fol_conc": "(∃z ((LocatedIn(beijing, z)))) ⊕ NotSouthernChina(beijing)",
      "perplexity": 13.552657127380371,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LocatedIn/1, LocatedIn/2.\n\n\nFatal error:  The following symbols are used with multiple arities: LocatedIn/1, LocatedIn/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 111
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "LabelledData(x)",
        "TrainedWithML(x)",
        "NotRL(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml"
      ],
      "fol_rules": [
        "∀x ((Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x)) → Supervised(x))",
        "∃x (Unsupervised(x) ∧ ¬LabelledData(x))",
        " ∀x ((TrainedWithML(x) ∧ Reinforcement(x)) → NotRL(x))",
        " ∀x (RequiresLabelledData(x) → Supervised(x))"
      ],
      "fol_conc": "Supervised(ml)",
      "perplexity": [
        1.3340004682540894,
        1.293811559677124
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Supervised(y)",
        "Unsupervised(y)",
        "Reinforcement(y)",
        "Requireslabelleddata(x)",
        "Stateofthearttextsummarizationmodel(x)"
      ],
      "fol_consts": [
        "ml",
        "summodel"
      ],
      "fol_rules": [
        "∀x ∀y (Category(x, y) → (Supervised(y) ⊕ Unsupervised(y) ⊕ Reinforcement(y)))",
        "¬Unsupervised(learning) → ¬Requireslabelleddata(x)",
        "(Stateofthearttextsummarizationmodel(ml) ∧ Category(ml, learning)) → ∃x (Machinelearningsumalgorithm(x))",
        "∀x ∀y ((Category(x, y) ∧ Reinforcement(y) ∧ Stateofthearttextsummarizationmodel(x)) → ¬Requireslabelleddata(x))",
        "(Requireslabelleddata(summodel) ∧ Category(summodel, mlalgorithms)) → Requireslabelleddata(ml)",
        "Supervised(learning) ⊕ Unsupervised(learning) ⊕ Reinforcement(learning) → Supervised(learningsumalgorithm)"
      ],
      "fol_conc": "Supervised(learningsumalgorithm)",
      "perplexity": 1.7255868911743164,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorize(x, y)",
        "Unsupervised(y)",
        "RequiresLabelledData(y)",
        "TrainedWithMLAlgorithm(z)",
        "RequiresLabelledData(e)"
      ],
      "fol_consts": [
        "machineLearningAlgorithms",
        "machineLearningAlgorithms"
      ],
      "fol_rules": [
        "(∀x (Categorize(x, machineLearningAlgorithms) → (∃y ((Unsupervised(y)) ⊕ RequiresLabelledData(e)))) ∧ Categorize(machineLearningAlgorithms, y))",
        "(RequiresLabelledData(z) ∨ Unsupervised(w))",
        "(∀x (TrainedWithMLAlgorithm(x)))",
        "(RequiresLabelledData(v))"
      ],
      "fol_conc": "Categorize(machineLearningAlgorithms, y) → Categorize(y, machineLearningAlgorithms)",
      "perplexity": 13.304852485656738,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 112
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Beethoven",
        "LeadThe(x, y)",
        "Orchestra(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Beethoven = x)",
        "∀x ((Composer(x) ∨ MusicPiece(x)) → Composer(x))",
        "Beethoven = symphony9"
      ],
      "fol_conc": "Composer(Beethoven)",
      "perplexity": [
        2.2153477668762207,
        1.4665547609329224
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (MusicPiece(x) ∧ Beethoven = x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Composers(x)",
        "Write(x, z)",
        "Beethoven(x)",
        "Premiered(y, x)",
        "Vienna(x)",
        "Orchestra(x)",
        "Leads(x, y)",
        "Conductor(y)",
        "Music(x)"
      ],
      "fol_consts": [
        "no9",
        "beethoven"
      ],
      "fol_rules": [
        "Is(no9, music)",
        "Composers(beethoven)",
        "(Beethoven(x) ∧ Write(x, no9))",
        "(Vienna(x) ∧ Premiered(x, no9))",
        "(Orchestra(y) → Leads(y, x))",
        "(∀x (Leads(x, y) → Conductor(x)))"
      ],
      "fol_conc": "Composers(beethoven)",
      "perplexity": 2.018230438232422,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Be(x, y)",
        "WriteComposers(y)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "vienna music society"
      ],
      "fol_rules": [
        "(∃x (Be(beethoven, x))) ∧ (∀y ((WriteComposers(y) → ∃z (Be(x, z)))))",
        "((¬WriteComposers(beethoven)) ⊕ WriteComposers(vienna music society))",
        "(∃x (Be(beethoven, x))) ∧ Be(beethoven, vienna music society)",
        "(Be(e) → ¬WriteComposers(beethoven))"
      ],
      "fol_conc": "WriteComposers(vienna music society)",
      "perplexity": 14.420961380004883,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 113
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "Population(x)",
        "Location(x)",
        "Hosted(x, z)",
        "RankedInTopX(x)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "Capital(beijing, china) ⊕ ¬Capital(beijing, y)",
        "∃x (Population(x) ∧ Capital(x, china))",
        "Location(beijing)",
        "∀y ((Hosted(y, olympics)) → Hosted(y, paralympic))",
        "∃x (Hosted(x, summer) ∧ x ≠ winter)",
        "∀y ((RankedInTopX(y)) → RankedInTopY(y))",
        "∃x (RankedInTop91(x) ∧ x ≠ asia-pacific)"
      ],
      "fol_conc": "Hosted(beijing, olympics) → Hosted(beijing, winter)",
      "perplexity": [
        2.3307886123657227,
        1.183642029762268
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Hosted(x, summer) ∧ x ≠ winter)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(nationalcapcityy)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(Capital(beijing, china) ∧ Mostpopulous(nationalcapcityy))",
        "(Locationx(x) ∧ Capital(x, y) → Northernx(y))",
        "(Hosted(games, x) ∧ Games(x) → Beijing(x))",
        "(∃x (Games(x) ⊕ Wintergames(x))) ∧ (∃x (Summergames(x) ⊕ Wintergames(x)))",
        "∀x ((Universities(x) ∧ Bestin(asiaapacificy) ∧ Bestinxworldy(y)) → Consistentlybest(universitiesx, asiaapacificy, worldxy))",
        "(Universities(beijing) ∧ Asiaapacificy(asiaapacificy) ∧ Worldsy(worldsx) → Consistentlybest(universitysbeijing, asiapoypacificky, worldsby))"
      ],
      "fol_conc": "∃x (Games(x) ⊕ Wintergames(x))",
      "perplexity": 2.7762157917022705,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulousNationalCity(y)",
        "LocatedIn(z)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(x))",
        "¬(Capital(beijing, china))",
        "(MostPopulousNationalCity(beijing))",
        "(LocatedIn(china) ∧ LocatedIn(n) ∨ ¬(LocatedIn(z)))",
        "(Capital(h) → ∃g (Capital(g) ∧ Capital(beijing)))",
        "¬(Capital(x, china) → Capital(y, china))",
        "∀z ((MostPopulousNationalCity(beijing)) ∧ LocatedIn(china) ∧ LocatedIn(n) ∨ ¬((LocatedIn(z))))",
        "(Capital(g) ∧ Capital(beijing) ⊕ (Capital(h)))",
        "¬(Capital(x, china))",
        "∀z ((MostPopulousNationalCity(beijing)) → ∃x ((Capital(y) ∧ LocatedIn(n) ∨ ¬((LocatedIn(z)))) ⊕ Capital(g)))",
        "(LocatedIn(china) ∧ (Capital(h)) → Capital(x, china))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(beijing)) ∧ ∃z ((Capital(y)) ∨ ¬((LocatedIn(z))))",
        "(∀x (((LocatedIn(china) ∧ LocatedIn(n))) → Capital(g)) ⊕ (Capital(h)))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(x) ∧ MostPopulousNationalCity(y) ∨ ¬((Capital(z))))",
        "(∀x ((LocatedIn(china)) → ∃g (((Capital(g)) ⊕ (LocatedIn(n))) ∨ Capital(h))))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(x, china) ∧ MostPopulousNationalCity(y))",
        "(∀x ((LocatedIn(china)) → ∃g (((Capital(g)) ⊕ (LocatedIn(n))) ∨ Capital(h))))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(beijing) ∧ MostPopulousNationalCity(y))"
      ],
      "fol_conc": "(∀x ((LocatedIn(china, n)) → ∃y (((Capital(x))) ∨ (Capital(h)))) ⊕ ¬((MostPopulousNationalCity(beijing)) ∨ ¬(Capital(beijing) ∧ MostPopulousNationalCity(y))))",
      "perplexity": 7.120315074920654,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Capital/2, Capital/1, LocatedIn/1, LocatedIn/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Capital/2, Capital/1, LocatedIn/1, LocatedIn/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 114
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "black_mirror",
        "karen",
        "lisa"
      ],
      "fol_rules": [
        "Show(black_mirror) → Popular(black_mirror)",
        "∀x (Popular(x) ⊕ ¬Show(x))",
        "∀x ((Download(x, black_mirror)) ↔ BingeWatch(karen, x))",
        "¬(Download(black_mirror, karen))",
        "Show(black_mIRROR) → Popular(black_mirror)",
        "(BingeWatch(karen, black_mirror) → Share(black_mirror, karen, lisa))"
      ],
      "fol_conc": "Share(black_mirror, karen, lisa)",
      "perplexity": [
        1.528734803199768,
        1.2277930974960327
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "blackmirror",
        "karen",
        "lisa",
        "netflixshow"
      ],
      "fol_rules": [
        "∀x (Is(strangerthings, x) → Popular(x))",
        "∀x ((Is(x, netflixshow) ∧ Popular(x)) → Karen(x))",
        "∃y ((Karen(y) ∧ Is(y, x)) → Download(y))",
        "(¬Download(karen) ∧ Is(blackmirror, netflixshow))",
        "Is(blackmirror, netflixshow)",
        "∀x (Karen(x) → (∃y (Is(y, x) ∧ Share(y, lisa))) ⊕ Karen(x))"
      ],
      "fol_conc": "(Share(karen, blackmirror) ⊕ ¬Download(karen))",
      "perplexity": 1.9135971069335938,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Karen/1, Karen/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Karen/1, Karen/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular Netflix show(x)",
        "Binge-watch(a, x)",
        "Netflix shows (x)"
      ],
      "fol_consts": [
        "stranger things",
        "karen",
        "black mirror ",
        "lisa"
      ],
      "fol_rules": [
        "(∃a ∃b ((Netflix shows (b)) ∧ Popular Netflix show(b))) → Binge-watch(karen, b)",
        "(Binge-watch(a, x) ⊕ Is(x, y))",
        "(Is(y, a) ↔ ¬(¬Binge-watch(h, h) ∨ (Is(f, c))))",
        "∀b ∃a ((Netflix shows (c)) ∧ Binge-watch(karen, b)) → (∃x ∀y (Netflix shows (f)))",
        "(Is(b, a))",
        "(Binge-watch(a, x) ⊕ Is(x, y))"
      ],
      "fol_conc": "∀b ∃a ((¬(Binge-watch(karen, b)) ∧ Binge-watch(h, h))) → (Is(b, a))",
      "perplexity": 7.2810139656066895,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall b.(some a.(((not (Binge-watch(Karen, b))) & (Binge-watch(h, h))) -> (Is(b, a))))\n                           ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 115
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "University(x)",
        "PrivateIvyLeagueResearchUniversity(x)",
        "MovedToNewHavenInYear(x, y)",
        "EndowmentValue(x, v)",
        "ConstituentCollegeSchoolsCount(x, c)",
        "ResidentialCollegesList(x, lc)",
        "NameOfResidentialCollegeInList(x, n) (x ∈ lc)"
      ],
      "fol_consts": [
        "yale",
        "benedictar franklin"
      ],
      "fol_rules": [
        "∀x (University(x) → PrivateIvyLeagueResearchUniversity(x))",
        "∃y (∀z ((MovedToNewHavenInYear(z, 1716)) ∧ z = yale)",
        "EndowmentValue(yale, 42.3)",
        "ConstituentCollegeSchoolsCount(yale, 27)",
        "ResidentialCollegesList(yale, (BenedictarFranklin ∈ {berkeley college, branford college, davenport college, eza stiles college, grace hopper college, jonathan edwards college, morse college, pauli murray college, pierson college, saybrook college, silliman college, timothy dwight college, trumbull college}))",
        "∃x (NameOfResidentialCollegeInList(yale, x) ∧ BenedictarFranklin = x)",
        "∀y ((University(y) → ResidentialCollegesList(y, lc)) ∧ NameOfResidentialCollegeInList(y, pierson))",
        "¬(NameOfResidentialCollegeInList(yale, y))) (pierson ∈ lc)"
      ],
      "fol_conc": "∀y ((University(y) → ResidentialCollegesList(y, lc)) ∧ NameOfResidual CollegeInList(y, pierson)",
      "perplexity": [
        1.6852858066558838,
        1.236964225769043
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (∀z ((MovedToNewHavenInYear(z, 1716)) ∧ z = yale)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "University(x, y)",
        "Is(y, x)",
        "Moved(x, year)",
        "Endowment(x, money)",
        "Organized(x, num)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "billion",
        "benjaminfranklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "gracehopper",
        "jonathanedwards",
        "morse",
        "paulimurray",
        "pierson",
        "saybrook",
        "silliman",
        "timothydwight",
        "trumbull"
      ],
      "fol_rules": [
        "University(yale, private) ∧ University(yale, ivyleague) ∧ University(yale, research)",
        "University(yale, moved, ets1)",
        "Endowment(yale, billion3)",
        "Organized(yale, num27)",
        "∃x (List(x, college))",
        "∀x (∃z (Member(z, x, y) ∧ List(z, residential))) → University(yale, hascollege)",
        "(∃y (University(yale, moved, year) ∧ Is(newhaven, y))) ∧ ∀x (Is(x, university) ∧ Has(endowment, billion3)) → ∃x (Endowment(x, money))",
        "∀x (∃z (Member(z, x, residential) ∧ List(z, college)) ∧ University(yale, hascollege))",
        "Pierson(restauranty) ∧ Member(presidention, restauranty)",
        "University(pierson, residential)"
      ],
      "fol_conc": "University(pierson, residential)",
      "perplexity": 2.2457728385925293,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(y, x)",
        "MovedTo(z, y)",
        "$(x)",
        "$(y)"
      ],
      "fol_consts": [
        "new haven ",
        "yale university ",
        "'new haven', 1716]",
        "yale university "
      ],
      "fol_rules": [
        "(IvyLeague(yale university , 'new haven', 1716]) ∧ Private(new haven ) → MovedTo('new haven', 1716]))",
        "$(y) ∨ $(z) ⊕ (x)",
        "$(y)"
      ],
      "fol_conc": "(IvyLeague(yale university , y)) ∨ (∃z (MovedTo(z, 'new haven', 1716]))) → IvyLeague(new haven )",
      "perplexity": 26.051971435546875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "$(y) ∨ $(z) ⊕ (x)"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 116
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeeting(x, y)",
        "AppearsInCompanyToday(x)",
        "HasLunch(x, y)",
        "RemoteWorkFromHome(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x ((SchedulesMeeting(x, Customer) ∧ AppearsInCompanyToday(x)) → Employee(x)",
        "∀x (Employee(x) → HasLunch(x, Company))",
        "(HasLunch(x, Home) ⊕ HasLunch(x, Company))",
        "RemoteWorkFromHome(Home)",
        "∀x (((Employee(x) ∧ ¬IsInOtherCountry(x))) → RemoteWorkFromHome(x)) ",
        "∀x (∧¬RemoteWorkFromHome(Manager(x)))",
        "∃x (Manager(x)",
        "James ∈ Manager(x)"
      ],
      "fol_conc": "∀x ((James ∈ Manager(x) ∨ ¬IsInOtherCountry(James)) → (((RemoteWorkFromHome(Home) ∧ RemoteWorkFromHome(x)) ⊕ ¬((HasLunch(x, Home) ∧ RemoteWorkFromHome(x)))))",
      "perplexity": [
        1.5669989585876465,
        1.3821276426315308
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((SchedulesMeeting(x, Customer) ∧ AppearsInCompanyToday(x)) → Employee(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedules(x, y)",
        "Appears(x, today)",
        "Has(x, lunch)",
        "Meets(x, customer)",
        "Work(x)",
        "Remotes(x, home)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "(∀x (Schedules(x, y) ∧ Meets(y, customer))) → Appears(x, today)",
        "(∃x (Has(x, lunch) ⊕ Has(x, home)))",
        "((¬Is(x, manager)) ⊕ Is(x, manager)) → ¬(Remotes(x, home))",
        "∀x (¬Is(x, employee) ∨ Remotes(x, home))",
        "∀x ((Not(x, manager) ∧ Appears(x, today)) ∨ ∃y (Schedules(y, x) ⊕ Is(y, remote)))",
        "(If(remotesfromhome, thenjameshaslunchathomeandworkshomeworkeremotelyorbothneitherhaslunchathomeremoteornorhomeworkernoremanner))"
      ],
      "fol_conc": "Remotes(james, home) ∨ ¬Remotes(james, home)",
      "perplexity": 2.5769717693328857,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomer(y, x)",
        "SchedulesMeetingWithCustomer(z)"
      ],
      "fol_consts": [
        "james",
        "home",
        "today",
        "othercountry"
      ],
      "fol_rules": [
        "(∀x (SchedulesMeetingWithCustomer(x) → Employee(x)) ∧ ∀y (∃z ((SchedulesMeetingWithCustomer(y, z) ⊕ SchedulesMeetingWithCustomer(z)))) ∨ ∃w (((Employee(w)) ∧ SchedulesMeetingWithCustomer(wothercounry, w))) ↔ (SchedulesMeetingWithCustomer(x) → Employee(wheermeyx)))",
        "∀y ((SchedulesMeetingWithCustomer(y) ⊕ SchedulesMeetingWithCustomer(z)) ∧ SchedulesMeetingWithCustomer(wothercounry, w) ↔ ∃w (SchedulesMeetingWithCustomer(x)))",
        "∀x ((Employee(wheermeyyceps) ⊕ Employee(yesamejamesmangergg)) ∨ ∀z (((SchedulesMeetingWithCustomer(z)))) ↔ (∃t (¬(SchedulesMeetingWithCustomer(t))) ∧ SchedulesMeetingWithCustomer(wheermeyx, wheermeyyceps) ↔ ∀w ((Employee(yesamejamesmangerggg)) → SchedulesMeetingWithCustomer(x))))",
        "∃t (¬(SchedulesMeetingWithCustomer(t))) ∧ SchedulesMeetingWithCustomer(wheermeyx, wheirmeyeohercounry) ↔ ∀w ((Employee(yesamejamesmangergg)) → (∃y (((SchedulesMeetingWithCustomer(z)))) ↔ SchedulesMeetingWithCustomer(x)))",
        "(∀z (SchedulesMeetingWithCustomer(t) ↔ Employee(wheermeyx, wheirmeyeohercounry)) ∧ ∀y (((SchedulesMeetingWithCustomer(y)))) ↔ SchedulesMeetingWithCustomer(wothercooyntneyrrtytwwihtcuatmerswheyem) ↔ ∃z ((Employee(z))) ∨ (∀x (SchedulesMeetingWithCustomer(x)) → SchedulesMeetingWithCustomer(y, z)) ⊕ ∀y (((SchedulesMeetingWithCustomer(t)))))"
      ],
      "fol_conc": "((∀w ∃z ((Employee(z) ∧ SchedulesMeetingWithCustomer(wheermeyx))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ∨ ∀y (((SchedulesMeetingWithCustomer(y, z) ∧ Employee(zwheeemrmangergggrrtyyyeisjameeyysam))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀z (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, z))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(y) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(ywheeermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))))",
      "perplexity": 6.81448221206665,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∀w ∃z ((Employee(z) ∧ SchedulesMeetingWithCustomer(wheermeyx))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ∨ ∀y (((SchedulesMeetingWithCustomer(y, z) ∧ Employee(zwheeemrmangergggrrtyyyeisjameeyysam))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀z (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, z))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(y) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(ywheeermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 117
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "Person(x, y)",
        "Contains(x, y)",
        "Reads(x, y)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y ((Contains(x, 'Tons') ∨ Contains(x, 'Knowledge')) ⊕ Contains(x, 0))",
        "∀x (Person(x, 'Tons') ∧ Book(y) ∧ Reads(x, y))",
        "∀x ((Book(y) → Person(x, x)) ∧ x ≠ 1 ⊕ ∀y (z ∈ {0, z}))",
        "∃y (Person(harry, y) ∧ Book(z) ∧ Reads(harry, z))"
      ],
      "fol_conc": "Person(harry, x) → (∀x (z ∈ {0, x})) ⊕ ∀y ((∃x (Book(y) ∧ Reads(x, y)) → ∃t t < y)",
      "perplexity": [
        2.174751043319702,
        1.1641608476638794
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Book(x) → ∃y ((Contains(x, 'Tons') ∨ Contains(x, 'Knowledge')) ⊕ Contains(x, 0))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Knowledge(x)",
        "Book(x, y)",
        "Reads(x, z)",
        "Gains(z, x)",
        "Smarter(z)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau",
        "henry"
      ],
      "fol_rules": [
        "(∀x (Book(x, y) → Knowledge(y)))",
        "(∀z ((Reads(harry, z)) ∧ Book(z, walden)) → Gains(z, harry))",
        "(∀w ((Gains(w, x)) → Smarter(w)))"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 1.9907431602478027,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 118
  },
  {
    "id": 84,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "ListedIn(x, y)",
        "ReceivesNegativeReview(x, y)",
        "Rating(x) > 9",
        "ProvidesTakeOut(x)",
        "HasHighRating(y)",
        "LocalResident(x, y)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "ListedIn(subway, _) ⊕ ReceivesNegativeReview(_, suby)",
        "∀x ((Rating(x) > 9 → ListedIn(x, _))",
        "∃x (∼ProvidesTakeOut(x) ∧ ReceivesNegativeReview(_, x})",
        " ∀x (HasHighRating(x) → Rating(x) > 9)",
        "∃y ((Subway ⊕ LocalResident(s, y)) ∧ Rated(y) > 9 ∨ HasHighRating(y))"
      ],
      "fol_conc": "(~ProvidesTakeOut(subby) ∧ ReceivesNegativeReview(_, subuy)) → (Rated(subby) ⊕ ~HasHighRating(subby))",
      "perplexity": [
        1.5665364265441895,
        1.2569317817687988
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((Rating(x) > 9 → ListedIn(x, _))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Reviews(x, y)",
        "Listed(y)",
        "Rating(x)",
        "Provides(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "(Listed(yelp) → ¬(Reviews(r, y)))",
        "(∃x (Rating(x) ∧ Rating(x) ∧ ∃x ∀x ∀x ∃x ((∃x ∃y ∃x ∀x ((∃x ∀x ∃x ∃x (∀x (∃x ∃x ∃x ∃y (Rating(x) ∧ Rating(y))))) ∧ ((¬Listed(yelp) ∧ ¬(Reviews(r, y)))) ∨ Listed(yelp))))) ∧ Listed(yelp))",
        "∀r (∃s (Provides(s) ∧ Provides(s) → Reviews(r, s)) → Reviews(r, r))",
        "(∃x ((Rating(x) ∧ Rating(x) ∧ ∃x ∀y (Listed(y) ∧ Popular(y))) ∧ ¬(Listing(x)))) ∨ Listed(subway)",
        "Reviews(s, t) ∧ Provides(t, s) ∧ Reviews(r, r) → (∃s (Rating(s) ∧ Listing(s)) ∧ Rating(t) ∧ Listing(t) ∧ ((∀x ∃y ∃t ∃r (Listing(x) ∧ Popular(y))) ∧ ¬(Providing(t, s))))"
      ],
      "fol_conc": "(Reviews(subway, t) ∧ Provides(subway, s)) → (∃s (Rating(s) ∧ Listing(s)) ∧ Rating(t) ∧ ((∀x ∃y ∃t ∃r (Listing(x) ∧ Popular(y))) ∧ ¬(Providing(t, s))))",
      "perplexity": 3.2019519805908203,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Provides/1, Provides/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Provides/1, Provides/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ListedIn(x, y)",
        "ReceiveManyNegativeReviews(y)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "(ListedIn(x, y)) → ¬(ReceiveManyNegativeReviews(y))",
        "∀x (ReceiveManyNegativeReviews(y) ∧ ListedIn(x,  If receives bad review items & takes out from  - Then has rating above nine And doesn't do business . ) ∨ ¬(ListedIn(t, y)))",
        "∀x (¬ReceiveManyNegativeReviews(y) ∧ ListedIn(x, t) → ∃y ((ReceiveManyNegativeReviews(y) ⊕ ReceiveManyNegativeReviews(f))))",
        "ListedIn(subway, y) ∨ ∀x (¬ReceiveManyNegativeReviews(y))",
        "(ListedIn(x, t)) → ¬(ReceiveManyNegativeReviews(t))"
      ],
      "fol_conc": "(ReceiveManyNegativeReviews(subway) ∧ ListedIn(subway, y) ⊕ (ReceiveManyNegativeReviews(y)))",
      "perplexity": 25.02362823486328,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (ReceiveManyNegativeReviews(y) ∧ ListedIn(x,  If receives bad review items & takes out from  - Then has rating above nine And doesn't do business . ) ∨ ¬(ListedIn(t, y)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 119
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "FliesTo(x, y)",
        "Departure(x)",
        "Arrival(x)",
        "SameAirport(x, y)"
      ],
      "fol_consts": [
        "susan",
        "lga"
      ],
      "fol_rules": [
        "∀x ∃y (FliesTo(x, y) → ((Departure(y)) ⊕ (Arrival(y))))",
        "∀x ∃y ∃z (FliesTo(x, y) ∧ FlivesTo(z, x) → SameAirport(y, z))",
        "FliesFrom(john, lga)",
        "FliesTo(susan, lga) → FliesFrom(susan, lga)"
      ],
      "fol_conc": "FliesTo(susan, lga)",
      "perplexity": [
        2.4218344688415527,
        1.4011445045471191
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Arrives(x, y)"
      ],
      "fol_consts": [
        "susan",
        "lga"
      ],
      "fol_rules": [
        "(∃x (Flies(susan, x)))",
        "((Flies(x, lga)) ∧ ∃y ((Flies(y, lga)) ∨ ¬(Arrives(x, y))))",
        "((¬(Flies(john, lga) ∧ Arrives(john, lga))) ∧ Flies(lga, john))"
      ],
      "fol_conc": "(∃x (Flies(susan, x) ∧ Arrives(x, lga)))",
      "perplexity": 2.0642526149749756,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(n, m)"
      ],
      "fol_consts": [
        "susan",
        "susan",
        "susan",
        "susan",
        "susan"
      ],
      "fol_rules": [
        "(∃x (Flies(susan, x)))",
        "(¬(SameAirport(x, y)) ⊕ SameAirport(y, z) → ¬((SameAirport(z, x))))",
        "(∀z ((Flies(j, l)) ∧ Flies(l, j)) ∨ ∃y (((Flies(y, g) ∧ SameAirport(g, w))) ∨ (¬(SameAirport(w, y)) ⊕ SameAirport(x, z))))",
        "(SameAirport(z, x))"
      ],
      "fol_conc": "(∀z ((Flies(susan, l) ∧ SameAirport(l, g))) ∨ ∃y (((Flies(y, w)) → ¬(SameAirport(w, y)))))",
      "perplexity": 11.710014343261719,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 120
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Person(x)",
        "HasChild(x, y)",
        "TravelsToParisForHoneymoon(x)",
        "OccursInJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (HasChild(x, y) → Wedding(x))",
        "∀x ((TravelsToParisForHoneymoon(x)) ∧ Wedding(x)) :  All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (Wedding(x) → OccursInJuly(x)):All weddings that occur in July belong to people who travel to Paris for their honeymoon. ",
        "∃x (WellAttended(x):Some weddings in July are well-attended",
        "¼(HasChild(john) ∧ TravelsToParisForHoneymoon(john)) : If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "(HasChild(john) → (¬TravelsToParisForHoneymoon(john) ∨ ¬(OccursInJuly(john)))):If  John has at least one child ,then if he did not attend well attended then   John travels to Paris for their honeymoon."
      ],
      "fol_conc": "∀x (HasChild(x))",
      "perplexity": [
        1.6660041809082031,
        1.1691635847091675
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((TravelsToParisForHoneymoon(x)) ∧ Wedding(x)) :  All people who travel to Paris for their honeymoon are people who have a wedding."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Is(x, z)"
      ],
      "fol_consts": [
        "john",
        "child",
        "wedding",
        "paris",
        "honeymoon",
        "july",
        "attended"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Has(x, child))",
        "∀x (Honeymoon(x) ∧ Wedding(x) → Is(x, wedding))",
        "∃y ∃z ((Written(y, z) ∧ Written(z, x)) → Wedding(x))",
        "∃x (Attended(x) → Written(july, x))",
        "(Has(john, child) → ¬(Honeymoon(rina) ∨ Has(rina, wedding)))",
        "¬(Wedding(well) ∧ Is(well, attended)) → (∃z (Is(z, june) ∧ Wedding(z)) ⊕ ∃x (Honeymoon(x) ∧ Written(july, x)))"
      ],
      "fol_conc": "Has(john, child)",
      "perplexity": 2.1681532859802246,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WeddingForHoneymoon(x)",
        "HasChild(y, x)"
      ],
      "fol_consts": [
        "john",
        "july",
        "paris"
      ],
      "fol_rules": [
        "(∀x (HasChild(x)) → WeddingForHoneymoon(peoplewhohaveachildwithweddingofpersonwhotravelsforhoneymownotheirselfandnohavingawedidngtfohersonwotraevsfpornhoenomnieweedyowmnyneiyojhefroaetelohaeilhnseewdoaloonwnon))",
        "(∀x (WeddingForHoneymoon(x) → HasChild(y)))",
        "((HasChild(john) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself)) ⊕ ∃x (WeddingForHoneymoon(x) → HasChild(y)))",
        "∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself)) ⊕ (¬(WeddingForHoneymoon(x) → HasChild(y)))",
        "∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → (∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → ¬(∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself))))",
        "((HasChild(joh) ⊕ HasChild(wn)))"
      ],
      "fol_conc": "(∀y ((HasChild(won)) ∧ WeddingForHoneymoon(parisforhoneymownofjhnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → HasChild(john))",
      "perplexity": 3.8197269439697266,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 101
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourist(x)",
        "FavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourist(x) → FavoriteAnimal(max, x))",
        "(AnimalFromAustralia(x) ∧ LoveToSleep(x)) ⊕ ¬(AnimalFromAustralia(x) ∨ LoveToSleep(x))"
      ],
      "fol_conc": "FavoriteAnimal(max, AnimalFromAustralia(x))",
      "perplexity": [
        1.3536055088043213,
        1.5918196439743042
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteAnimal(max, AnimalFromAustralia(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, z)",
        "From(x, y)",
        "Veryfluffy(z)",
        "Love(z, w)",
        "Fluffy(z)",
        "Sleepy(z)"
      ],
      "fol_consts": [
        "max",
        "animals",
        "tourists",
        "australia",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(x, z))",
        "∀x (∃y (From(y, x) ∧ Loved(tourists, y)))",
        "∀x ∀z ((From(x, z) ∧ Loved(tourists, x)) → From(australia, z))",
        "∀x ∀y ((Favorite(z, x) ∧ Veryfluffy(y)) → Fluffy(y))",
        "∀x (Fluffy(y) → Sleepy(y))",
        "¬(Veryfluffy(x) ∧ Not(quokka)) ∨ ∃z (From(z, quokka) ∧ Fluffy(x))"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 2.0115559101104736,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Loved(x, y)",
        "FavoriteAnimal(z)",
        "Loved(x, z)",
        "FavouriteAnimalsAreVeryFluffy(animals)",
        "Loved(bytourists)",
        "Loved(tosleepx)",
        "FavoriteAnimal(sleepingz)",
        "Loved(ausquokkaq, s)",
        "FavoriteAnimal(z)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "bytheaustraliacountry",
        "kakuaussieanimalnameforshorty",
        "ausuofallanimalsinthiscountryforyou",
        "sleezingzislikekoalawhichlovesleepingandtheyareveryfluffy",
        "qoockaazuisquokka",
        "sleepingozone"
      ],
      "fol_rules": [
        "(Loved(x, y) → FavoriteAnimal(z))",
        "(∀x (Loved(bytourists)))",
        "(¬(FavouriteAnimalsAreVeryFluffy(ausanimalsqzuaussiesatthistouristyplaceforquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)) ⊕ Loved(x, bytourists))",
        "(∀x (Loved(bytheaussieanfromthatnatsionalparkwheretheqoockaslive)))",
        "FavouriteAnimalsAreVeryFluffy(ausquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)",
        "(∀x (Loved(bytourists) ∧ FavoriteAnimal(z)) → Loved(tosleepz, z))",
        "¬(FavoriteAnimal(sleepingqoockaazuisquokka)) ∨ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)",
        "(∃x (Loved(tosleepz, z) ∧ FavoriteAnimal(sleepingqoockaazuisquokka)) → Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere))",
        "Loved(tosleepz, z)"
      ],
      "fol_conc": "(∃x (FavoriteAnimal(z) ∧ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)))",
      "perplexity": 5.720861911773682,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loved/2, Loved/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loved/2, Loved/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 102
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Rose(x)",
        "GivenOutOnTV(x, y)",
        "OnTheBachelor(x)",
        "PortraysPeopleOfRealLife(x)",
        "IsRealityTvShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eightpm",
        "portrait",
        "rises"
      ],
      "fol_rules": [
        "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])",
        "∀x ((PortraysPeopleOfRealLife(x) ∨ ¬IsRealityTvShow[portrait])) (∀y (Portrait[y] ⇒ IsRealityTVShw[x])]",
        "∃x (¬IsRealityTivsHow[x])"
      ],
      "fol_conc": "∃x ((GivenOutOnTv[rise, monday] ⊕ 8pm) ∧ Portrayt[portrait] ⊗ IsRealityTVShow[x]) ⇒ (BreakingBavd[x] ∧ GivenOutOnTvs[rises, Monday] ⊕ 8pM)",
      "perplexity": [
        2.5405304431915283,
        1.2964909076690674
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Given(x, y)",
        "On(x, z, w)",
        "Is(a, b)"
      ],
      "fol_consts": [
        "roses",
        "thebachelor",
        "tv",
        "breakingingbad",
        "monday",
        "bachelorette",
        "rose",
        "realitytvs",
        "badgesontherose",
        "eighthpmmonday",
        "realpeopleshows",
        "badshowsontherealpeople"
      ],
      "fol_rules": [
        "∃x (On(x, monday, ighthpmmonday) ∧ Given(x, tv))",
        "∀x (Given(x, tv) → On(x, thebachelor))",
        "∀x (∃y (Is(y, x) ∧ Is(a, b) ∧ Realpeopleshows(y, a))) → Realitytvs(y)",
        "¬Badgesontherealpeopleshows(badshowsontherealpeople, badshowsontherealtv)",
        "Given(rose, tv) ∧ On(rose, monday, ighthpmmonday) → ∃x (Song(x) ∧ Badgesontherose(x))",
        "∀a (∃b (Is(b, a) ∧ ¬Be(b, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "Badshowsontherealpeopleshows(breakingingbad, rose)",
      "perplexity": 2.244359016418457,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: On/2, On/3.\n\n\nFatal error:  The following symbols are used with multiple arities: On/2, On/3"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GivenOut(x, y)",
        "OnTV(y)",
        "OnTV(n)",
        "Bachelor(z)",
        "Portrays(t, u)",
        "Bachelor(u)"
      ],
      "fol_consts": [
        "roses",
        "roses",
        "badger"
      ],
      "fol_rules": [
        "(∃y (GivenOut(roses, y)) ∧ OnTV(y))",
        "(OnTV(r) → ∀z (Bachelor(z) ⊕ Portrays(t, u)))",
        "((Portrays(l, t) ∨ Portrays(k, l)) ∧ ∀x ((Bachelor(x) → (Bachelor(u)))))",
        "(∃t (∀l (((GivenOut(roses, r) ∧ OnTV(y) ⊕ GivenOut(z))) ∨ ¬OnTV(w))))",
        "(¬Portrays(l, k)) ∧ ∀x ((Portrays(k, u)) → (Bachelor(u) ∨ Portrays(m, l)))",
        "∀y (((Bachelor(x) ∧ OnTV(y)))) ⊕ Bachelor(z)",
        "((GivenOut(badger, r)) ⊕ ∃t (∀l ((Portrays(l, t)) ∧ GivenOut(roses, y)) ∨ Portrays(k, l)))"
      ],
      "fol_conc": "∃x (Bachelor(x) ∧ OnTV(y))",
      "perplexity": 11.6235933303833,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GivenOut/1, GivenOut/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GivenOut/1, GivenOut/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 103
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "e1",
        "m"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "(From(marvin, m) ∧ From(marvin, e1)) ⊕ ¬(From(marvin, mars))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.242605447769165,
        1.9152517318725586
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "(From(mars, x) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x ((Earth(x)) → Human(x))",
        "(Marvin(mars) ∧ ¬From(mars, marvin) ⊕ (From(earth, marvin)))",
        "(¬From(earth, marvin) → Extraterrestrial(marvin))"
      ],
      "fol_conc": "((Marvin(mars) ∧ From(earth, marvin)) → Human(marvin))",
      "perplexity": 1.8097050189971924,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 104
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Test(x)",
        "CostTest(x, y)",
        "ProvidesFinancialAid(x, z)",
        "HasEconomicHardship(z)",
        "FamilyType(x)",
        "IsSingleParent(fam_x) ",
        "DadIsUnemployed(y, num_years_unemployed_y)"
      ],
      "fol_consts": [
        "gre",
        "usd_205",
        "ects"
      ],
      "fol_rules": [
        "∃x (Test(x) ∧ CostTest(gre, usd_205))",
        "∀z ((ProvidesFinancialAid(ets,z)) → HasEconomicHardship(z))",
        "∃x (HasEconomicHardship(x) ∧ (∃y (FamilyType(y) ∧ IsSingleParent(eats))) ∧ DadIsUnemployed(eats, 1))",
        "∀z ((ProvidersFinancialAid(ets,z)) → HasEconomicHardship(z)) : ETS provides financial aid to those applicants who have economic hardship.",
        "¬∃x (CostTest(gre, usd_300)): Cost is less than $300"
      ],
      "fol_conc": "∃y (Test(y) ∧ (∧ x ∈ domain of y:   ( CostTest(x,y)<usd_300)))",
      "perplexity": [
        2.3889622688293457,
        1.2990751266479492
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z ((ProvidersFinancialAid(ets,z)) → HasEconomicHardship(z)) : ETS provides financial aid to those applicants who have economic hardship."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(y, x)",
        "Is(x, y)",
        "Lives(x, z)",
        "Has(z, w)"
      ],
      "fol_consts": [
        "tom",
        "gretest",
        "singleparentfamily",
        "daddidnotworkformorethanayear"
      ],
      "fol_rules": [
        "∀x (Costs(gretest, urs205))",
        "∃y ((Is(y, grepest) ∧ Provides(ests, y)) → ¬(Is(x, greapest)))",
        "(Has(singleparentfamily, tom) ∧ Has(daddidnotworkformorethanayear, daddidntworkforyears)) ∧ (Has(daddidnotworkformorethanayear, dad) ∨ Is(grepest, singleparentfamily))"
      ],
      "fol_conc": "(∀x (Costs(x, us300)))",
      "perplexity": 2.7407050132751465,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GRETest(x)",
        "ETSProvidesFinancialAid(y, x)",
        "ETSProvidesFinancialAid(x)",
        "HasEconomicHardship(z, y)",
        " GRECostBelowThreshold(u)",
        "HasEconomicHardship(m, n)",
        " GRECostBelowThreshold(t)"
      ],
      "fol_consts": [
        "us205",
        "us205",
        "us205",
        "us205",
        "us205"
      ],
      "fol_rules": [
        "(ETSProvidesFinancialAid(u) ∧ GRETest(x)) → (GRETest(y))",
        "(HasEconomicHardship(z, x))",
        "GRETest(us205)",
        "ETSProvidesFinancialAid(us205)",
        "GRETest(g)",
        "GRETest(h)"
      ],
      "fol_conc": "(ETSProvidesFinancialAid(u) ∧ GRETest(x))",
      "perplexity": 18.64544677734375,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 105
  },
  {
    "id": 135,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space sucks.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Space",
        "Vacuum",
        "Vampire",
        "Plunger",
        "Duster",
        "Appliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Suck(x))",
        "∀x, y (Vampires(x) → Suck(y)) ⊕ ∃y (Plungers(y) ∨ Vacuums(y))",
        "∀x (Apliances(x) ∧ ¬Suck(x))",
        "Space ⊕ ∃y (Vacuum(y)) ⊕ (∀z (Vampire(z) → Suck(z))) ",
        "∀x ((Apliances(x) ∧ ¬Suck(x)) ⊕ Suck(x))"
      ],
      "fol_conc": "Space ∨ ∃y (Vacuums(y))",
      "perplexity": [
        2.334848165512085,
        1.2568644285202026
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (Vampires(x) → Suck(y)) ⊕ ∃y (Plungers(y) ∨ Vacuums(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Space(y)"
      ],
      "fol_consts": [
        "plunger",
        "vacuum",
        "vampire",
        "space"
      ],
      "fol_rules": [
        "∀x (Plungers(x) → Suck(x))",
        "∀x (Vacuums(x) → Suck(x))",
        "∀x (Vampires(x) → Suck(x))",
        "(Space(y) ∧ Vacuums(y))",
        "Duster(x)",
        "(¬Sucker(x) ∧ Duster(x)) ⊕ True(vacuum, sucks)"
      ],
      "fol_conc": "Suck(space)",
      "perplexity": 2.2184486389160156,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Space/1, Space/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Space/1, Space/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x, y)",
        "IsVacuum(z)",
        "IsVacuum(w)"
      ],
      "fol_consts": [
        "plunger",
        "vacuum",
        "vampire"
      ],
      "fol_rules": [
        "(¬(Suck(plungers)) ∧ Suck(vacs)) → (¬(Suck(space)))",
        "(∃x ((IsVacuum(x) ∨ IsVacuum(y))))",
        "(¬((Suck(duster)) ⊕ ¬(Suck(appliance))))",
        "Suck(spaces, vacs)",
        "(Suck(sucks, plunger))",
        "(∀z (Suck(z)))"
      ],
      "fol_conc": "(((IsVacuum(space) ∧ Suck(vacuums)) → ∃x ((¬((Suck(plungers)))) ∨ ¬(Suck(appliance)))))",
      "perplexity": 7.789027690887451,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Suck/2, Suck/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Suck/2, Suck/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 106
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(B, y)(x,y)"
      ],
      "fol_consts": [
        "melissa"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → Spicy(x))",
        "∃x (Cupcake(x) ∧ Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "ProductOf(melissa, Cupcake)(x)",
        "(∃y(DriedThaiChili(y)) ∧ (Spicy(y) ⊕ Bakery(y))) → ((DriedThaiChili(y) ∧ Hotpot(y)) ∨ Spicy(y))",
        "Dried Thai Chili (x )∧ ProductOf(melissa,Cupake(x))⊕ ¬(Cupcake(x )∧Productof(Melissa,cupke(x)]"
      ],
      "fol_conc": "DriedThaiChili(x) ⊕ ¬Cupcake(x)",
      "perplexity": [
        1.5218502283096313,
        1.5990744829177856
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "ProductOf(melissa, Cupcake)(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymellasa"
      ],
      "fol_rules": [
        "(¬Bakery(y)) → Spicy(y)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymellasa) → Cupcake(x))",
        "(Spicy(z) ⊕ (Bakery(z))) → ((Hotpot(z) ∨ Spicy(z)))",
        "∃y (Driedthai(y) ∧ Product(driedthai, y) ∧ Bakery(y))"
      ],
      "fol_conc": "(Product(driedthai, bakedbymellasa) ∧ Cupcake(driedthai)) ∧ Product(driedthai, bakedbymellasa)",
      "perplexity": 1.7343655824661255,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(y)",
        "Cupcake(y)"
      ],
      "fol_consts": [
        "driedThaiChili",
        "driedThaiChili"
      ],
      "fol_rules": [
        "(∀y (Bakery(y)))",
        "(¬(∃x (Spicy(x))))",
        "(∀z (∃w ((Cupcake(w) ∧ Bakery(z)) ⊕ Bakery(c))))",
        "(∀u ∀v (((Spicy(u) ∨ Bakery(v)) → ∃q ∃s ((((Spicy(q))) ∨ (Bakery(s))) ∨ (Bakery(t))) → ((Cupcake(w) ∧ Bakery(z)) ⊕ Cupcake(e)))))",
        "(∀e (∃d (((Spicy(d)) ⊕ Spicy(c)) ∨ Bakery(f))))",
        "((Spicy(r)) ∨ Bakery(u))"
      ],
      "fol_conc": "Cupcake(driedThaiChili) ∧ Bakery(e)",
      "perplexity": 12.43946361541748,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 107
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "WorkIn(x, y)",
        "NeedToEarnMoney(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallsMealsAndRecipes(x)",
        "NotPickyEater(x)",
        "SpendTimeInCampusDiningHalls(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkInStudentJobsOnCampus(x) → NeedToEarnMoney(x))",
        "∀x (OrderTakeoutFrequently(x) → WorkInStudentJobsOnCampus(x))",
        "∀x (WorkInStudentJobsOnCampus(x) ⊕ OrderTakeoutFrequently(x))",
        "∀x ((EnjoyDiningHallsMealsAndRecipes(x)) → ¬NotPickyEater(x))",
        "∀x ((EnjoyDiningHallsMealsAndRecipes(x)) → SpendTimeInCampusDiningHalls(x, x))",
        "(WorkInStudentJobsOnCampus(mary) ∧ NeedToEarnMoney(mary)) ⊕ ¬(NotPickyEater(mary) ∨ NeedToEarnMoney(mary))"
      ],
      "fol_conc": "EnjoyDiningHallsMealsAndRecipes(mary) ⊕ NotPickyEater(mary)",
      "perplexity": [
        1.2260255813598633,
        1.1331846714019775
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Earns(x, y)",
        "Order(sx, ty)",
        "Dininghall(sx, ty)",
        "Needs(x, y)",
        "Pickyeater(x)",
        "Time(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Workoncampus(x) → Earns(x, money))",
        "(Person(x) ∧ Order(sx, ty) ⊕ Enjoy(dininghall, sx)) → Student(x)",
        "∀x (Order(sx, ty) → (Student(x) ⊕ Enjoy(dininghall, sx)))",
        "∃y ((Dininghall(y, x) ∧ Pickyeater(y)) → ∃z (Enjoy(z, y)))",
        "(Person(x) ∧ Dininghall(x, y) ∧ Enjoy(z, x) → Time(x, dininghall))",
        "Mary(mary) ∧ Workoncampus(mary) ∧ Earns(mary, money) → ¬Pickyeater(mary)",
        "Mary(mary) ∧ Worksstudentjob(mary) ∧ Earns(mary, money) → ¬Needs(mary, money)"
      ],
      "fol_conc": "(Enjoy(dininghall, mary) ⊕ Pickyeater(mary)) ∨ (Enjoy(dininghall, mary) ∧ Pickyeater(mary) → Time(mary, dininghall))",
      "perplexity": 1.843845009803772,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NeedsMoney(x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y, x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(z)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)",
        "NeedsMoney(t)",
        "NeedsMoney(y)",
        "NeedsMoney(e, x)",
        "NeedsMoney(f)",
        "NeedsMoney(z)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y)",
        "NeedsMoney(t)",
        "NeedsMoney(s)",
        "NeedsMoney(l)",
        "NeedsMoney(a, x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)"
      ],
      "fol_consts": [
        "mary",
        "campustudyingestudentsjobs-on-campusneedsmoneytotehlpayforcollege tuition "
      ],
      "fol_rules": [
        "(NeedsMoney(t)) → (WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(mary) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "∃x (NeedsMoney(x))",
        "(NeedsMoney(e)) → ¬WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(i)"
      ],
      "fol_conc": "((NeedsMoney(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))) ⊕ (NeedsMoney(e, l))",
      "perplexity": 10.329919815063477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NeedsMoney/2, NeedsMoney/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NeedsMoney/2, NeedsMoney/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 108
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) ⊕ Deadly(x))",
        "BileDuctCancer(B): Bile duct cancer is a severe cancer.",
        "Cholangiocarcinoma(C) ≡ BileDuctCancer(C)",
        "¬(ColorectalCancer(C) ∧ SurvivalRateLow(C)) : No colorectal cancer and its survival rates are low.",
        "∀x (MildFlu(x) → ¬SurvivalRateLow(x)) : No one with mild flu has a low survival rate.",
        "∃x (SevereCancer(x) ∧ ¬SurvivalRateLow(x)) : There exists a colorectal cancer that has no low survival rate."
      ],
      "fol_conc": "∀x ((Deadly(C) → SurvivalRateLow(C)), SevereCancer(C): C: Colorectal Cancer, (MildFlu(x) ⊕ Deadly(x)), (ColorectalCancer(C) ∧ ¬SurvivalRateLow(C)) : If there exists a colorectal cancer with no low survival rate then it is not deadly disease.",
      "perplexity": [
        1.6133474111557007,
        1.536275863647461
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BileDuctCancer(B): Bile duct cancer is a severe cancer."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Low(s, y)",
        "Severe(x)",
        "Bile(x)"
      ],
      "fol_consts": [
        "bile",
        "flu",
        "cancer"
      ],
      "fol_rules": [
        "(∀x (Deadly(x) → Low(s, x)))",
        "((∃x (Severe(x)) ∧ Deadly(x)) ⊕ Deadly(x))",
        "Bile(bile) ∨ Severe(cancer)",
        "¬(Mild(flu) ∧ Low(s, flu))"
      ],
      "fol_conc": "(Severe(cancer) → Colorectal(cancer))",
      "perplexity": 2.5043067932128906,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsDeadly(x)",
        "SurvivalRateLow(x, y)",
        "SevereCancer(y)"
      ],
      "fol_consts": [
        "flu",
        "_",
        "flu"
      ],
      "fol_rules": [
        "(∀x (IsDeadly(x) → SurvivalRateLow(x)))",
        "(¬(SevereCancer(flu)) ⊕ IsDeadly(d))",
        "SevereCancer(b)",
        "((SevereCancer(y) ∧ IsDeadly(flu)) ⊕ SevereCancer(c))"
      ],
      "fol_conc": "(¬(IsDeadly(flu))) ⊕ (SurvivalRateLow(x, flu))",
      "perplexity": 14.3790283203125,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SurvivalRateLow/1, SurvivalRateLow/2.\n\n\nFatal error:  The following symbols are used with multiple arities: SurvivalRateLow/1, SurvivalRateLow/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 109
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GRETest(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "HasEconomicHardship(x)",
        "LivesInFamily(x, z)",
        "IsOutOfWork(z)"
      ],
      "fol_consts": [
        "tom",
        "ETS"
      ],
      "fol_rules": [
        "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)",
        "∀x (GRETest(x) ∧ ProvidesFinancialAid(ETS, x) → HasEconomicHardship(x))",
        "∀y (HasEconomicHardship(y) → ∃z ((LivesInFamily(z, y) ∨ ¬ LivesInFamily(z, ETS)) ∧ (IsOutOfWork(z)))",
        "IsOutOfWork(tom's dad)",
        "LivesInFamily(tom's dad, tom)",
        "∀x (HasEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ⇒ HasEconomicHardship(tom) ∴ ∃y ((GRETest(y) ∧ ProvidesFinancialAid(ETS, y)) ∨ GRETest(ets))"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9536328315734863,
        1.1783725023269653
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, z)",
        "Economic(x, y)",
        "Difficult(y)",
        "Lives(x, z)",
        "Father(x, y)",
        "Outofwork(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "us205",
        "year1",
        "singleparentfamily"
      ],
      "fol_rules": [
        "∃x (Costs(x, us205))",
        "(Provides(ets, x) ∧ Economic(x, z) ∧ Difficult(z) → Provides(ets, tom))",
        "∀y ((Economic(y) ⊕ Difficulty(y)) → ∃z (Difficult(z)))",
        "(Lives(tom, singleparentfamily) ∧ Father(tom, y) ∧ Outofwork(y, year1))",
        "(Outofwork(x, year1) → Provides(ets, tom))",
        "∀x ((Provides(ets, x) ∧ Costs(x, us205) → Play(sam, nope)))"
      ],
      "fol_conc": "(Provides(ets, tom) ∧ Costs(tom, us205))",
      "perplexity": 2.1026229858398438,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAid(sx, x)"
      ],
      "fol_consts": [
        "ets",
        "grec"
      ],
      "fol_rules": [
        "$205(x)",
        "(∃y (ProvidesFinancialAid(ets, grc) ∧ ProvidesFinancialAid(greclandhardshipx)))",
        "(¬ProvidesFinancialAid(economicgriardifficulty))",
        "($205(y))"
      ],
      "fol_conc": "(∃y (Costs(ets, grc) ∧ ProvidesFinancialAid(samhardscapitalresourcestom)))",
      "perplexity": 12.56561279296875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 110
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "PopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympicsAndParalympics(x)",
        "RankedAmongTheBest(x)",
        "University(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(beijing, china) ⊕ ¬Capital(beijing, asia-pacific)) → PopulousNationalCapitalCity(beijing)",
        "∃x (LocatedIn(x, northern-china)) ∧ LocatedIn(beijing, northern-china) ⊕ ∃x (LocatedIn(x, southern-china)) → LocatedIn(beijing, southern-china)",
        "∀y ((LocatedIn(y, china)) ⊕ (HostedOlympicsAndParalympics(beijing) → RankedAmongTheBest(china)))",
        "∃x ∃u (University(x, u) ∧ LocatedIn(u, asia-pacific)) ∧ ∀x ∃z ((LocatedIn(z, north-america)) ∧ University(x, z) ∧ ¬RankedAmongTheBest(north-america)) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ∧ Capital(beijing, china) ⊕ ∀y ((Capital(y, china)) → ¬(LocatedIn(y, southern-china)))) → True",
        "∃x (University(x, southern-china) ∧ RankedAmongTheBest(southern-china)) ⊕ ∀y ((LocatedIn(y, china)) → ∄z (((Capital(z, china))) ∧ LocatedIn(z, south-america) ∧ ¬(RankedAmongTheBest(china)))) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, china) → ¬(Capital(y, south-america))) ∧ ∃z ((University(z, y) ∧ RankedAmongTheBest(south-america)))) → True",
        "∃x (LocatedIn(x, china) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, southern-china)) → ¬(Capital(y, china))) → False",
        "∃x (LocatedIn(x, china) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, southern-china)) → ¬(Capital(y, china))) → True",
        "∃x ∃z (University(x, z) ∧ LocatedIn(z, asia-pacific) ⊕ ∀y ((LocatedIn(y, south-america)) → ¬(University(y, y)))) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, china) → ¬(Capital(y, south-america))) → ∄z (((University(z, y))) ∧ RankedAmongTheBest(south-america)))) → False"
      ],
      "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))",
      "perplexity": [
        2.466643810272217,
        1.0918185710906982
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ∃u (University(x, u) ∧ LocatedIn(u, asia-pacific)) ∧ ∀x ∃z ((LocatedIn(z, north-america)) ∧ University(x, z) ∧ ¬RankedAmongTheBest(north-america)) → False"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(n, x)",
        "Located(x, z)",
        "Hosted(s, e)",
        "Olympics(s, t)",
        "Paralympics(s, t)",
        "Ranked(b, u)",
        "Asiapacific(u)",
        "World(u)",
        "Southern(z)",
        "China(y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(Mostpopulous(beijing, beijing))",
        "(Located(beijing, northern))",
        "(Hosted(berlin, summer2008)) ⊕ (Hosted(berlin, paralympics2008))",
        "(Hosted(summer2008) ∧ Hosted(paralympics2008)) → (Olympics(summer2008, t) ∧ Olympics(paralympics2008, t))",
        "(∃u ((Ranked(u, beijing) ∧ Asiapacific(u)) ∨ Ranked(u, world)))",
        "(∀z ((Asiapacific(z) ∧ World(z)) → Located(beijing, z)))",
        "(Located(x, southern) ∧ China(y) ⊕ (China(y) ∧ Capital(x, y)))"
      ],
      "fol_conc": "(Located(beijing, southern)) ⊕ (Located(beijing, northern))",
      "perplexity": 2.0923571586608887,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Hosted/1, Hosted/2, World/1, World/0, China/1, China/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Hosted/1, Hosted/2, World/1, World/0, China/1, China/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulousNCity(y)",
        "LocatedIn(z, x)",
        "LocatedIn(x, z)",
        "Capital(f, c)",
        "NotSouthernChina(c)",
        "NotSouthernChina(h)"
      ],
      "fol_consts": [
        "beijing"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(MostPopulousNCity(beijing))",
        "(LocatedIn(n) ↔ LocatedIn(b))",
        "((Capital(x, beijing) ∧ Capital(y, china))) ↔ (NotSouthernChina(z))"
      ],
      "fol_conc": "(∃z ((LocatedIn(beijing, z)))) ⊕ NotSouthernChina(beijing)",
      "perplexity": 13.552657127380371,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LocatedIn/1, LocatedIn/2.\n\n\nFatal error:  The following symbols are used with multiple arities: LocatedIn/1, LocatedIn/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 111
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "LabelledData(x)",
        "TrainedWithML(x)",
        "NotRL(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml"
      ],
      "fol_rules": [
        "∀x ((Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x)) → Supervised(x))",
        "∃x (Unsupervised(x) ∧ ¬LabelledData(x))",
        " ∀x ((TrainedWithML(x) ∧ Reinforcement(x)) → NotRL(x))",
        " ∀x (RequiresLabelledData(x) → Supervised(x))"
      ],
      "fol_conc": "Supervised(ml)",
      "perplexity": [
        1.3340004682540894,
        1.293811559677124
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Supervised(y)",
        "Unsupervised(y)",
        "Reinforcement(y)",
        "Requireslabelleddata(x)",
        "Stateofthearttextsummarizationmodel(x)"
      ],
      "fol_consts": [
        "ml",
        "summodel"
      ],
      "fol_rules": [
        "∀x ∀y (Category(x, y) → (Supervised(y) ⊕ Unsupervised(y) ⊕ Reinforcement(y)))",
        "¬Unsupervised(learning) → ¬Requireslabelleddata(x)",
        "(Stateofthearttextsummarizationmodel(ml) ∧ Category(ml, learning)) → ∃x (Machinelearningsumalgorithm(x))",
        "∀x ∀y ((Category(x, y) ∧ Reinforcement(y) ∧ Stateofthearttextsummarizationmodel(x)) → ¬Requireslabelleddata(x))",
        "(Requireslabelleddata(summodel) ∧ Category(summodel, mlalgorithms)) → Requireslabelleddata(ml)",
        "Supervised(learning) ⊕ Unsupervised(learning) ⊕ Reinforcement(learning) → Supervised(learningsumalgorithm)"
      ],
      "fol_conc": "Supervised(learningsumalgorithm)",
      "perplexity": 1.7255868911743164,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorize(x, y)",
        "Unsupervised(y)",
        "RequiresLabelledData(y)",
        "TrainedWithMLAlgorithm(z)",
        "RequiresLabelledData(e)"
      ],
      "fol_consts": [
        "machineLearningAlgorithms",
        "machineLearningAlgorithms"
      ],
      "fol_rules": [
        "(∀x (Categorize(x, machineLearningAlgorithms) → (∃y ((Unsupervised(y)) ⊕ RequiresLabelledData(e)))) ∧ Categorize(machineLearningAlgorithms, y))",
        "(RequiresLabelledData(z) ∨ Unsupervised(w))",
        "(∀x (TrainedWithMLAlgorithm(x)))",
        "(RequiresLabelledData(v))"
      ],
      "fol_conc": "Categorize(machineLearningAlgorithms, y) → Categorize(y, machineLearningAlgorithms)",
      "perplexity": 13.304852485656738,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 112
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Beethoven",
        "LeadThe(x, y)",
        "Orchestra(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Beethoven = x)",
        "∀x ((Composer(x) ∨ MusicPiece(x)) → Composer(x))",
        "Beethoven = symphony9"
      ],
      "fol_conc": "Composer(Beethoven)",
      "perplexity": [
        2.2153477668762207,
        1.4665547609329224
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (MusicPiece(x) ∧ Beethoven = x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Composers(x)",
        "Write(x, z)",
        "Beethoven(x)",
        "Premiered(y, x)",
        "Vienna(x)",
        "Orchestra(x)",
        "Leads(x, y)",
        "Conductor(y)",
        "Music(x)"
      ],
      "fol_consts": [
        "no9",
        "beethoven"
      ],
      "fol_rules": [
        "Is(no9, music)",
        "Composers(beethoven)",
        "(Beethoven(x) ∧ Write(x, no9))",
        "(Vienna(x) ∧ Premiered(x, no9))",
        "(Orchestra(y) → Leads(y, x))",
        "(∀x (Leads(x, y) → Conductor(x)))"
      ],
      "fol_conc": "Composers(beethoven)",
      "perplexity": 2.018230438232422,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Be(x, y)",
        "WriteComposers(y)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "vienna music society"
      ],
      "fol_rules": [
        "(∃x (Be(beethoven, x))) ∧ (∀y ((WriteComposers(y) → ∃z (Be(x, z)))))",
        "((¬WriteComposers(beethoven)) ⊕ WriteComposers(vienna music society))",
        "(∃x (Be(beethoven, x))) ∧ Be(beethoven, vienna music society)",
        "(Be(e) → ¬WriteComposers(beethoven))"
      ],
      "fol_conc": "WriteComposers(vienna music society)",
      "perplexity": 14.420961380004883,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 113
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "Population(x)",
        "Location(x)",
        "Hosted(x, z)",
        "RankedInTopX(x)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "Capital(beijing, china) ⊕ ¬Capital(beijing, y)",
        "∃x (Population(x) ∧ Capital(x, china))",
        "Location(beijing)",
        "∀y ((Hosted(y, olympics)) → Hosted(y, paralympic))",
        "∃x (Hosted(x, summer) ∧ x ≠ winter)",
        "∀y ((RankedInTopX(y)) → RankedInTopY(y))",
        "∃x (RankedInTop91(x) ∧ x ≠ asia-pacific)"
      ],
      "fol_conc": "Hosted(beijing, olympics) → Hosted(beijing, winter)",
      "perplexity": [
        2.3307886123657227,
        1.183642029762268
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Hosted(x, summer) ∧ x ≠ winter)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(nationalcapcityy)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(Capital(beijing, china) ∧ Mostpopulous(nationalcapcityy))",
        "(Locationx(x) ∧ Capital(x, y) → Northernx(y))",
        "(Hosted(games, x) ∧ Games(x) → Beijing(x))",
        "(∃x (Games(x) ⊕ Wintergames(x))) ∧ (∃x (Summergames(x) ⊕ Wintergames(x)))",
        "∀x ((Universities(x) ∧ Bestin(asiaapacificy) ∧ Bestinxworldy(y)) → Consistentlybest(universitiesx, asiaapacificy, worldxy))",
        "(Universities(beijing) ∧ Asiaapacificy(asiaapacificy) ∧ Worldsy(worldsx) → Consistentlybest(universitysbeijing, asiapoypacificky, worldsby))"
      ],
      "fol_conc": "∃x (Games(x) ⊕ Wintergames(x))",
      "perplexity": 2.7762157917022705,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulousNationalCity(y)",
        "LocatedIn(z)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(x))",
        "¬(Capital(beijing, china))",
        "(MostPopulousNationalCity(beijing))",
        "(LocatedIn(china) ∧ LocatedIn(n) ∨ ¬(LocatedIn(z)))",
        "(Capital(h) → ∃g (Capital(g) ∧ Capital(beijing)))",
        "¬(Capital(x, china) → Capital(y, china))",
        "∀z ((MostPopulousNationalCity(beijing)) ∧ LocatedIn(china) ∧ LocatedIn(n) ∨ ¬((LocatedIn(z))))",
        "(Capital(g) ∧ Capital(beijing) ⊕ (Capital(h)))",
        "¬(Capital(x, china))",
        "∀z ((MostPopulousNationalCity(beijing)) → ∃x ((Capital(y) ∧ LocatedIn(n) ∨ ¬((LocatedIn(z)))) ⊕ Capital(g)))",
        "(LocatedIn(china) ∧ (Capital(h)) → Capital(x, china))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(beijing)) ∧ ∃z ((Capital(y)) ∨ ¬((LocatedIn(z))))",
        "(∀x (((LocatedIn(china) ∧ LocatedIn(n))) → Capital(g)) ⊕ (Capital(h)))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(x) ∧ MostPopulousNationalCity(y) ∨ ¬((Capital(z))))",
        "(∀x ((LocatedIn(china)) → ∃g (((Capital(g)) ⊕ (LocatedIn(n))) ∨ Capital(h))))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(x, china) ∧ MostPopulousNationalCity(y))",
        "(∀x ((LocatedIn(china)) → ∃g (((Capital(g)) ⊕ (LocatedIn(n))) ∨ Capital(h))))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(beijing) ∧ MostPopulousNationalCity(y))"
      ],
      "fol_conc": "(∀x ((LocatedIn(china, n)) → ∃y (((Capital(x))) ∨ (Capital(h)))) ⊕ ¬((MostPopulousNationalCity(beijing)) ∨ ¬(Capital(beijing) ∧ MostPopulousNationalCity(y))))",
      "perplexity": 7.120315074920654,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Capital/2, Capital/1, LocatedIn/1, LocatedIn/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Capital/2, Capital/1, LocatedIn/1, LocatedIn/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 114
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "black_mirror",
        "karen",
        "lisa"
      ],
      "fol_rules": [
        "Show(black_mirror) → Popular(black_mirror)",
        "∀x (Popular(x) ⊕ ¬Show(x))",
        "∀x ((Download(x, black_mirror)) ↔ BingeWatch(karen, x))",
        "¬(Download(black_mirror, karen))",
        "Show(black_mIRROR) → Popular(black_mirror)",
        "(BingeWatch(karen, black_mirror) → Share(black_mirror, karen, lisa))"
      ],
      "fol_conc": "Share(black_mirror, karen, lisa)",
      "perplexity": [
        1.528734803199768,
        1.2277930974960327
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "blackmirror",
        "karen",
        "lisa",
        "netflixshow"
      ],
      "fol_rules": [
        "∀x (Is(strangerthings, x) → Popular(x))",
        "∀x ((Is(x, netflixshow) ∧ Popular(x)) → Karen(x))",
        "∃y ((Karen(y) ∧ Is(y, x)) → Download(y))",
        "(¬Download(karen) ∧ Is(blackmirror, netflixshow))",
        "Is(blackmirror, netflixshow)",
        "∀x (Karen(x) → (∃y (Is(y, x) ∧ Share(y, lisa))) ⊕ Karen(x))"
      ],
      "fol_conc": "(Share(karen, blackmirror) ⊕ ¬Download(karen))",
      "perplexity": 1.9135971069335938,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Karen/1, Karen/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Karen/1, Karen/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular Netflix show(x)",
        "Binge-watch(a, x)",
        "Netflix shows (x)"
      ],
      "fol_consts": [
        "stranger things",
        "karen",
        "black mirror ",
        "lisa"
      ],
      "fol_rules": [
        "(∃a ∃b ((Netflix shows (b)) ∧ Popular Netflix show(b))) → Binge-watch(karen, b)",
        "(Binge-watch(a, x) ⊕ Is(x, y))",
        "(Is(y, a) ↔ ¬(¬Binge-watch(h, h) ∨ (Is(f, c))))",
        "∀b ∃a ((Netflix shows (c)) ∧ Binge-watch(karen, b)) → (∃x ∀y (Netflix shows (f)))",
        "(Is(b, a))",
        "(Binge-watch(a, x) ⊕ Is(x, y))"
      ],
      "fol_conc": "∀b ∃a ((¬(Binge-watch(karen, b)) ∧ Binge-watch(h, h))) → (Is(b, a))",
      "perplexity": 7.2810139656066895,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall b.(some a.(((not (Binge-watch(Karen, b))) & (Binge-watch(h, h))) -> (Is(b, a))))\n                           ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 115
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "University(x)",
        "PrivateIvyLeagueResearchUniversity(x)",
        "MovedToNewHavenInYear(x, y)",
        "EndowmentValue(x, v)",
        "ConstituentCollegeSchoolsCount(x, c)",
        "ResidentialCollegesList(x, lc)",
        "NameOfResidentialCollegeInList(x, n) (x ∈ lc)"
      ],
      "fol_consts": [
        "yale",
        "benedictar franklin"
      ],
      "fol_rules": [
        "∀x (University(x) → PrivateIvyLeagueResearchUniversity(x))",
        "∃y (∀z ((MovedToNewHavenInYear(z, 1716)) ∧ z = yale)",
        "EndowmentValue(yale, 42.3)",
        "ConstituentCollegeSchoolsCount(yale, 27)",
        "ResidentialCollegesList(yale, (BenedictarFranklin ∈ {berkeley college, branford college, davenport college, eza stiles college, grace hopper college, jonathan edwards college, morse college, pauli murray college, pierson college, saybrook college, silliman college, timothy dwight college, trumbull college}))",
        "∃x (NameOfResidentialCollegeInList(yale, x) ∧ BenedictarFranklin = x)",
        "∀y ((University(y) → ResidentialCollegesList(y, lc)) ∧ NameOfResidentialCollegeInList(y, pierson))",
        "¬(NameOfResidentialCollegeInList(yale, y))) (pierson ∈ lc)"
      ],
      "fol_conc": "∀y ((University(y) → ResidentialCollegesList(y, lc)) ∧ NameOfResidual CollegeInList(y, pierson)",
      "perplexity": [
        1.6852858066558838,
        1.236964225769043
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (∀z ((MovedToNewHavenInYear(z, 1716)) ∧ z = yale)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "University(x, y)",
        "Is(y, x)",
        "Moved(x, year)",
        "Endowment(x, money)",
        "Organized(x, num)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "billion",
        "benjaminfranklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "gracehopper",
        "jonathanedwards",
        "morse",
        "paulimurray",
        "pierson",
        "saybrook",
        "silliman",
        "timothydwight",
        "trumbull"
      ],
      "fol_rules": [
        "University(yale, private) ∧ University(yale, ivyleague) ∧ University(yale, research)",
        "University(yale, moved, ets1)",
        "Endowment(yale, billion3)",
        "Organized(yale, num27)",
        "∃x (List(x, college))",
        "∀x (∃z (Member(z, x, y) ∧ List(z, residential))) → University(yale, hascollege)",
        "(∃y (University(yale, moved, year) ∧ Is(newhaven, y))) ∧ ∀x (Is(x, university) ∧ Has(endowment, billion3)) → ∃x (Endowment(x, money))",
        "∀x (∃z (Member(z, x, residential) ∧ List(z, college)) ∧ University(yale, hascollege))",
        "Pierson(restauranty) ∧ Member(presidention, restauranty)",
        "University(pierson, residential)"
      ],
      "fol_conc": "University(pierson, residential)",
      "perplexity": 2.2457728385925293,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(y, x)",
        "MovedTo(z, y)",
        "$(x)",
        "$(y)"
      ],
      "fol_consts": [
        "new haven ",
        "yale university ",
        "'new haven', 1716]",
        "yale university "
      ],
      "fol_rules": [
        "(IvyLeague(yale university , 'new haven', 1716]) ∧ Private(new haven ) → MovedTo('new haven', 1716]))",
        "$(y) ∨ $(z) ⊕ (x)",
        "$(y)"
      ],
      "fol_conc": "(IvyLeague(yale university , y)) ∨ (∃z (MovedTo(z, 'new haven', 1716]))) → IvyLeague(new haven )",
      "perplexity": 26.051971435546875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "$(y) ∨ $(z) ⊕ (x)"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 116
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeeting(x, y)",
        "AppearsInCompanyToday(x)",
        "HasLunch(x, y)",
        "RemoteWorkFromHome(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x ((SchedulesMeeting(x, Customer) ∧ AppearsInCompanyToday(x)) → Employee(x)",
        "∀x (Employee(x) → HasLunch(x, Company))",
        "(HasLunch(x, Home) ⊕ HasLunch(x, Company))",
        "RemoteWorkFromHome(Home)",
        "∀x (((Employee(x) ∧ ¬IsInOtherCountry(x))) → RemoteWorkFromHome(x)) ",
        "∀x (∧¬RemoteWorkFromHome(Manager(x)))",
        "∃x (Manager(x)",
        "James ∈ Manager(x)"
      ],
      "fol_conc": "∀x ((James ∈ Manager(x) ∨ ¬IsInOtherCountry(James)) → (((RemoteWorkFromHome(Home) ∧ RemoteWorkFromHome(x)) ⊕ ¬((HasLunch(x, Home) ∧ RemoteWorkFromHome(x)))))",
      "perplexity": [
        1.5669989585876465,
        1.3821276426315308
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((SchedulesMeeting(x, Customer) ∧ AppearsInCompanyToday(x)) → Employee(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedules(x, y)",
        "Appears(x, today)",
        "Has(x, lunch)",
        "Meets(x, customer)",
        "Work(x)",
        "Remotes(x, home)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "(∀x (Schedules(x, y) ∧ Meets(y, customer))) → Appears(x, today)",
        "(∃x (Has(x, lunch) ⊕ Has(x, home)))",
        "((¬Is(x, manager)) ⊕ Is(x, manager)) → ¬(Remotes(x, home))",
        "∀x (¬Is(x, employee) ∨ Remotes(x, home))",
        "∀x ((Not(x, manager) ∧ Appears(x, today)) ∨ ∃y (Schedules(y, x) ⊕ Is(y, remote)))",
        "(If(remotesfromhome, thenjameshaslunchathomeandworkshomeworkeremotelyorbothneitherhaslunchathomeremoteornorhomeworkernoremanner))"
      ],
      "fol_conc": "Remotes(james, home) ∨ ¬Remotes(james, home)",
      "perplexity": 2.5769717693328857,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomer(y, x)",
        "SchedulesMeetingWithCustomer(z)"
      ],
      "fol_consts": [
        "james",
        "home",
        "today",
        "othercountry"
      ],
      "fol_rules": [
        "(∀x (SchedulesMeetingWithCustomer(x) → Employee(x)) ∧ ∀y (∃z ((SchedulesMeetingWithCustomer(y, z) ⊕ SchedulesMeetingWithCustomer(z)))) ∨ ∃w (((Employee(w)) ∧ SchedulesMeetingWithCustomer(wothercounry, w))) ↔ (SchedulesMeetingWithCustomer(x) → Employee(wheermeyx)))",
        "∀y ((SchedulesMeetingWithCustomer(y) ⊕ SchedulesMeetingWithCustomer(z)) ∧ SchedulesMeetingWithCustomer(wothercounry, w) ↔ ∃w (SchedulesMeetingWithCustomer(x)))",
        "∀x ((Employee(wheermeyyceps) ⊕ Employee(yesamejamesmangergg)) ∨ ∀z (((SchedulesMeetingWithCustomer(z)))) ↔ (∃t (¬(SchedulesMeetingWithCustomer(t))) ∧ SchedulesMeetingWithCustomer(wheermeyx, wheermeyyceps) ↔ ∀w ((Employee(yesamejamesmangerggg)) → SchedulesMeetingWithCustomer(x))))",
        "∃t (¬(SchedulesMeetingWithCustomer(t))) ∧ SchedulesMeetingWithCustomer(wheermeyx, wheirmeyeohercounry) ↔ ∀w ((Employee(yesamejamesmangergg)) → (∃y (((SchedulesMeetingWithCustomer(z)))) ↔ SchedulesMeetingWithCustomer(x)))",
        "(∀z (SchedulesMeetingWithCustomer(t) ↔ Employee(wheermeyx, wheirmeyeohercounry)) ∧ ∀y (((SchedulesMeetingWithCustomer(y)))) ↔ SchedulesMeetingWithCustomer(wothercooyntneyrrtytwwihtcuatmerswheyem) ↔ ∃z ((Employee(z))) ∨ (∀x (SchedulesMeetingWithCustomer(x)) → SchedulesMeetingWithCustomer(y, z)) ⊕ ∀y (((SchedulesMeetingWithCustomer(t)))))"
      ],
      "fol_conc": "((∀w ∃z ((Employee(z) ∧ SchedulesMeetingWithCustomer(wheermeyx))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ∨ ∀y (((SchedulesMeetingWithCustomer(y, z) ∧ Employee(zwheeemrmangergggrrtyyyeisjameeyysam))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀z (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, z))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(y) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(ywheeermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))))",
      "perplexity": 6.81448221206665,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∀w ∃z ((Employee(z) ∧ SchedulesMeetingWithCustomer(wheermeyx))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ∨ ∀y (((SchedulesMeetingWithCustomer(y, z) ∧ Employee(zwheeemrmangergggrrtyyyeisjameeyysam))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀z (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, z))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(y) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(ywheeermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 117
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "Person(x, y)",
        "Contains(x, y)",
        "Reads(x, y)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y ((Contains(x, 'Tons') ∨ Contains(x, 'Knowledge')) ⊕ Contains(x, 0))",
        "∀x (Person(x, 'Tons') ∧ Book(y) ∧ Reads(x, y))",
        "∀x ((Book(y) → Person(x, x)) ∧ x ≠ 1 ⊕ ∀y (z ∈ {0, z}))",
        "∃y (Person(harry, y) ∧ Book(z) ∧ Reads(harry, z))"
      ],
      "fol_conc": "Person(harry, x) → (∀x (z ∈ {0, x})) ⊕ ∀y ((∃x (Book(y) ∧ Reads(x, y)) → ∃t t < y)",
      "perplexity": [
        2.174751043319702,
        1.1641608476638794
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Book(x) → ∃y ((Contains(x, 'Tons') ∨ Contains(x, 'Knowledge')) ⊕ Contains(x, 0))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Knowledge(x)",
        "Book(x, y)",
        "Reads(x, z)",
        "Gains(z, x)",
        "Smarter(z)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau",
        "henry"
      ],
      "fol_rules": [
        "(∀x (Book(x, y) → Knowledge(y)))",
        "(∀z ((Reads(harry, z)) ∧ Book(z, walden)) → Gains(z, harry))",
        "(∀w ((Gains(w, x)) → Smarter(w)))"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 1.9907431602478027,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 118
  },
  {
    "id": 84,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "ListedIn(x, y)",
        "ReceivesNegativeReview(x, y)",
        "Rating(x) > 9",
        "ProvidesTakeOut(x)",
        "HasHighRating(y)",
        "LocalResident(x, y)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "ListedIn(subway, _) ⊕ ReceivesNegativeReview(_, suby)",
        "∀x ((Rating(x) > 9 → ListedIn(x, _))",
        "∃x (∼ProvidesTakeOut(x) ∧ ReceivesNegativeReview(_, x})",
        " ∀x (HasHighRating(x) → Rating(x) > 9)",
        "∃y ((Subway ⊕ LocalResident(s, y)) ∧ Rated(y) > 9 ∨ HasHighRating(y))"
      ],
      "fol_conc": "(~ProvidesTakeOut(subby) ∧ ReceivesNegativeReview(_, subuy)) → (Rated(subby) ⊕ ~HasHighRating(subby))",
      "perplexity": [
        1.5665364265441895,
        1.2569317817687988
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((Rating(x) > 9 → ListedIn(x, _))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Reviews(x, y)",
        "Listed(y)",
        "Rating(x)",
        "Provides(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "(Listed(yelp) → ¬(Reviews(r, y)))",
        "(∃x (Rating(x) ∧ Rating(x) ∧ ∃x ∀x ∀x ∃x ((∃x ∃y ∃x ∀x ((∃x ∀x ∃x ∃x (∀x (∃x ∃x ∃x ∃y (Rating(x) ∧ Rating(y))))) ∧ ((¬Listed(yelp) ∧ ¬(Reviews(r, y)))) ∨ Listed(yelp))))) ∧ Listed(yelp))",
        "∀r (∃s (Provides(s) ∧ Provides(s) → Reviews(r, s)) → Reviews(r, r))",
        "(∃x ((Rating(x) ∧ Rating(x) ∧ ∃x ∀y (Listed(y) ∧ Popular(y))) ∧ ¬(Listing(x)))) ∨ Listed(subway)",
        "Reviews(s, t) ∧ Provides(t, s) ∧ Reviews(r, r) → (∃s (Rating(s) ∧ Listing(s)) ∧ Rating(t) ∧ Listing(t) ∧ ((∀x ∃y ∃t ∃r (Listing(x) ∧ Popular(y))) ∧ ¬(Providing(t, s))))"
      ],
      "fol_conc": "(Reviews(subway, t) ∧ Provides(subway, s)) → (∃s (Rating(s) ∧ Listing(s)) ∧ Rating(t) ∧ ((∀x ∃y ∃t ∃r (Listing(x) ∧ Popular(y))) ∧ ¬(Providing(t, s))))",
      "perplexity": 3.2019519805908203,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Provides/1, Provides/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Provides/1, Provides/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ListedIn(x, y)",
        "ReceiveManyNegativeReviews(y)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "(ListedIn(x, y)) → ¬(ReceiveManyNegativeReviews(y))",
        "∀x (ReceiveManyNegativeReviews(y) ∧ ListedIn(x,  If receives bad review items & takes out from  - Then has rating above nine And doesn't do business . ) ∨ ¬(ListedIn(t, y)))",
        "∀x (¬ReceiveManyNegativeReviews(y) ∧ ListedIn(x, t) → ∃y ((ReceiveManyNegativeReviews(y) ⊕ ReceiveManyNegativeReviews(f))))",
        "ListedIn(subway, y) ∨ ∀x (¬ReceiveManyNegativeReviews(y))",
        "(ListedIn(x, t)) → ¬(ReceiveManyNegativeReviews(t))"
      ],
      "fol_conc": "(ReceiveManyNegativeReviews(subway) ∧ ListedIn(subway, y) ⊕ (ReceiveManyNegativeReviews(y)))",
      "perplexity": 25.02362823486328,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (ReceiveManyNegativeReviews(y) ∧ ListedIn(x,  If receives bad review items & takes out from  - Then has rating above nine And doesn't do business . ) ∨ ¬(ListedIn(t, y)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 119
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "FliesTo(x, y)",
        "Departure(x)",
        "Arrival(x)",
        "SameAirport(x, y)"
      ],
      "fol_consts": [
        "susan",
        "lga"
      ],
      "fol_rules": [
        "∀x ∃y (FliesTo(x, y) → ((Departure(y)) ⊕ (Arrival(y))))",
        "∀x ∃y ∃z (FliesTo(x, y) ∧ FlivesTo(z, x) → SameAirport(y, z))",
        "FliesFrom(john, lga)",
        "FliesTo(susan, lga) → FliesFrom(susan, lga)"
      ],
      "fol_conc": "FliesTo(susan, lga)",
      "perplexity": [
        2.4218344688415527,
        1.4011445045471191
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Arrives(x, y)"
      ],
      "fol_consts": [
        "susan",
        "lga"
      ],
      "fol_rules": [
        "(∃x (Flies(susan, x)))",
        "((Flies(x, lga)) ∧ ∃y ((Flies(y, lga)) ∨ ¬(Arrives(x, y))))",
        "((¬(Flies(john, lga) ∧ Arrives(john, lga))) ∧ Flies(lga, john))"
      ],
      "fol_conc": "(∃x (Flies(susan, x) ∧ Arrives(x, lga)))",
      "perplexity": 2.0642526149749756,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(n, m)"
      ],
      "fol_consts": [
        "susan",
        "susan",
        "susan",
        "susan",
        "susan"
      ],
      "fol_rules": [
        "(∃x (Flies(susan, x)))",
        "(¬(SameAirport(x, y)) ⊕ SameAirport(y, z) → ¬((SameAirport(z, x))))",
        "(∀z ((Flies(j, l)) ∧ Flies(l, j)) ∨ ∃y (((Flies(y, g) ∧ SameAirport(g, w))) ∨ (¬(SameAirport(w, y)) ⊕ SameAirport(x, z))))",
        "(SameAirport(z, x))"
      ],
      "fol_conc": "(∀z ((Flies(susan, l) ∧ SameAirport(l, g))) ∨ ∃y (((Flies(y, w)) → ¬(SameAirport(w, y)))))",
      "perplexity": 11.710014343261719,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 120
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Person(x)",
        "HasChild(x, y)",
        "TravelsToParisForHoneymoon(x)",
        "OccursInJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (HasChild(x, y) → Wedding(x))",
        "∀x ((TravelsToParisForHoneymoon(x)) ∧ Wedding(x)) :  All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (Wedding(x) → OccursInJuly(x)):All weddings that occur in July belong to people who travel to Paris for their honeymoon. ",
        "∃x (WellAttended(x):Some weddings in July are well-attended",
        "¼(HasChild(john) ∧ TravelsToParisForHoneymoon(john)) : If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "(HasChild(john) → (¬TravelsToParisForHoneymoon(john) ∨ ¬(OccursInJuly(john)))):If  John has at least one child ,then if he did not attend well attended then   John travels to Paris for their honeymoon."
      ],
      "fol_conc": "∀x (HasChild(x))",
      "perplexity": [
        1.6660041809082031,
        1.1691635847091675
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((TravelsToParisForHoneymoon(x)) ∧ Wedding(x)) :  All people who travel to Paris for their honeymoon are people who have a wedding."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Is(x, z)"
      ],
      "fol_consts": [
        "john",
        "child",
        "wedding",
        "paris",
        "honeymoon",
        "july",
        "attended"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Has(x, child))",
        "∀x (Honeymoon(x) ∧ Wedding(x) → Is(x, wedding))",
        "∃y ∃z ((Written(y, z) ∧ Written(z, x)) → Wedding(x))",
        "∃x (Attended(x) → Written(july, x))",
        "(Has(john, child) → ¬(Honeymoon(rina) ∨ Has(rina, wedding)))",
        "¬(Wedding(well) ∧ Is(well, attended)) → (∃z (Is(z, june) ∧ Wedding(z)) ⊕ ∃x (Honeymoon(x) ∧ Written(july, x)))"
      ],
      "fol_conc": "Has(john, child)",
      "perplexity": 2.1681532859802246,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WeddingForHoneymoon(x)",
        "HasChild(y, x)"
      ],
      "fol_consts": [
        "john",
        "july",
        "paris"
      ],
      "fol_rules": [
        "(∀x (HasChild(x)) → WeddingForHoneymoon(peoplewhohaveachildwithweddingofpersonwhotravelsforhoneymownotheirselfandnohavingawedidngtfohersonwotraevsfpornhoenomnieweedyowmnyneiyojhefroaetelohaeilhnseewdoaloonwnon))",
        "(∀x (WeddingForHoneymoon(x) → HasChild(y)))",
        "((HasChild(john) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself)) ⊕ ∃x (WeddingForHoneymoon(x) → HasChild(y)))",
        "∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself)) ⊕ (¬(WeddingForHoneymoon(x) → HasChild(y)))",
        "∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → (∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → ¬(∀y ((HasChild(john)) ∧ WeddingForHoneymoon(parisforhoneymownofjohnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself))))",
        "((HasChild(joh) ⊕ HasChild(wn)))"
      ],
      "fol_conc": "(∀y ((HasChild(won)) ∧ WeddingForHoneymoon(parisforhoneymownofjhnandnohavingawedidngfornhonewnifpersonwhotravelsfofpornotheirself) ⊕ ∃x (WeddingForHoneymoon(x))) → HasChild(john))",
      "perplexity": 3.8197269439697266,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 101
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourist(x)",
        "FavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourist(x) → FavoriteAnimal(max, x))",
        "(AnimalFromAustralia(x) ∧ LoveToSleep(x)) ⊕ ¬(AnimalFromAustralia(x) ∨ LoveToSleep(x))"
      ],
      "fol_conc": "FavoriteAnimal(max, AnimalFromAustralia(x))",
      "perplexity": [
        1.3536055088043213,
        1.5918196439743042
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteAnimal(max, AnimalFromAustralia(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, z)",
        "From(x, y)",
        "Veryfluffy(z)",
        "Love(z, w)",
        "Fluffy(z)",
        "Sleepy(z)"
      ],
      "fol_consts": [
        "max",
        "animals",
        "tourists",
        "australia",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(x, z))",
        "∀x (∃y (From(y, x) ∧ Loved(tourists, y)))",
        "∀x ∀z ((From(x, z) ∧ Loved(tourists, x)) → From(australia, z))",
        "∀x ∀y ((Favorite(z, x) ∧ Veryfluffy(y)) → Fluffy(y))",
        "∀x (Fluffy(y) → Sleepy(y))",
        "¬(Veryfluffy(x) ∧ Not(quokka)) ∨ ∃z (From(z, quokka) ∧ Fluffy(x))"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 2.0115559101104736,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Loved(x, y)",
        "FavoriteAnimal(z)",
        "Loved(x, z)",
        "FavouriteAnimalsAreVeryFluffy(animals)",
        "Loved(bytourists)",
        "Loved(tosleepx)",
        "FavoriteAnimal(sleepingz)",
        "Loved(ausquokkaq, s)",
        "FavoriteAnimal(z)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "bytheaustraliacountry",
        "kakuaussieanimalnameforshorty",
        "ausuofallanimalsinthiscountryforyou",
        "sleezingzislikekoalawhichlovesleepingandtheyareveryfluffy",
        "qoockaazuisquokka",
        "sleepingozone"
      ],
      "fol_rules": [
        "(Loved(x, y) → FavoriteAnimal(z))",
        "(∀x (Loved(bytourists)))",
        "(¬(FavouriteAnimalsAreVeryFluffy(ausanimalsqzuaussiesatthistouristyplaceforquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)) ⊕ Loved(x, bytourists))",
        "(∀x (Loved(bytheaussieanfromthatnatsionalparkwheretheqoockaslive)))",
        "FavouriteAnimalsAreVeryFluffy(ausquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)",
        "(∀x (Loved(bytourists) ∧ FavoriteAnimal(z)) → Loved(tosleepz, z))",
        "¬(FavoriteAnimal(sleepingqoockaazuisquokka)) ∨ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)",
        "(∃x (Loved(tosleepz, z) ∧ FavoriteAnimal(sleepingqoockaazuisquokka)) → Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere))",
        "Loved(tosleepz, z)"
      ],
      "fol_conc": "(∃x (FavoriteAnimal(z) ∧ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)))",
      "perplexity": 5.720861911773682,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loved/2, Loved/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loved/2, Loved/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 102
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Rose(x)",
        "GivenOutOnTV(x, y)",
        "OnTheBachelor(x)",
        "PortraysPeopleOfRealLife(x)",
        "IsRealityTvShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eightpm",
        "portrait",
        "rises"
      ],
      "fol_rules": [
        "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])",
        "∀x ((PortraysPeopleOfRealLife(x) ∨ ¬IsRealityTvShow[portrait])) (∀y (Portrait[y] ⇒ IsRealityTVShw[x])]",
        "∃x (¬IsRealityTivsHow[x])"
      ],
      "fol_conc": "∃x ((GivenOutOnTv[rise, monday] ⊕ 8pm) ∧ Portrayt[portrait] ⊗ IsRealityTVShow[x]) ⇒ (BreakingBavd[x] ∧ GivenOutOnTvs[rises, Monday] ⊕ 8pM)",
      "perplexity": [
        2.5405304431915283,
        1.2964909076690674
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Given(x, y)",
        "On(x, z, w)",
        "Is(a, b)"
      ],
      "fol_consts": [
        "roses",
        "thebachelor",
        "tv",
        "breakingingbad",
        "monday",
        "bachelorette",
        "rose",
        "realitytvs",
        "badgesontherose",
        "eighthpmmonday",
        "realpeopleshows",
        "badshowsontherealpeople"
      ],
      "fol_rules": [
        "∃x (On(x, monday, ighthpmmonday) ∧ Given(x, tv))",
        "∀x (Given(x, tv) → On(x, thebachelor))",
        "∀x (∃y (Is(y, x) ∧ Is(a, b) ∧ Realpeopleshows(y, a))) → Realitytvs(y)",
        "¬Badgesontherealpeopleshows(badshowsontherealpeople, badshowsontherealtv)",
        "Given(rose, tv) ∧ On(rose, monday, ighthpmmonday) → ∃x (Song(x) ∧ Badgesontherose(x))",
        "∀a (∃b (Is(b, a) ∧ ¬Be(b, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "Badshowsontherealpeopleshows(breakingingbad, rose)",
      "perplexity": 2.244359016418457,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: On/2, On/3.\n\n\nFatal error:  The following symbols are used with multiple arities: On/2, On/3"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GivenOut(x, y)",
        "OnTV(y)",
        "OnTV(n)",
        "Bachelor(z)",
        "Portrays(t, u)",
        "Bachelor(u)"
      ],
      "fol_consts": [
        "roses",
        "roses",
        "badger"
      ],
      "fol_rules": [
        "(∃y (GivenOut(roses, y)) ∧ OnTV(y))",
        "(OnTV(r) → ∀z (Bachelor(z) ⊕ Portrays(t, u)))",
        "((Portrays(l, t) ∨ Portrays(k, l)) ∧ ∀x ((Bachelor(x) → (Bachelor(u)))))",
        "(∃t (∀l (((GivenOut(roses, r) ∧ OnTV(y) ⊕ GivenOut(z))) ∨ ¬OnTV(w))))",
        "(¬Portrays(l, k)) ∧ ∀x ((Portrays(k, u)) → (Bachelor(u) ∨ Portrays(m, l)))",
        "∀y (((Bachelor(x) ∧ OnTV(y)))) ⊕ Bachelor(z)",
        "((GivenOut(badger, r)) ⊕ ∃t (∀l ((Portrays(l, t)) ∧ GivenOut(roses, y)) ∨ Portrays(k, l)))"
      ],
      "fol_conc": "∃x (Bachelor(x) ∧ OnTV(y))",
      "perplexity": 11.6235933303833,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GivenOut/1, GivenOut/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GivenOut/1, GivenOut/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 103
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "e1",
        "m"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "(From(marvin, m) ∧ From(marvin, e1)) ⊕ ¬(From(marvin, mars))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.242605447769165,
        1.9152517318725586
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "(From(mars, x) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x ((Earth(x)) → Human(x))",
        "(Marvin(mars) ∧ ¬From(mars, marvin) ⊕ (From(earth, marvin)))",
        "(¬From(earth, marvin) → Extraterrestrial(marvin))"
      ],
      "fol_conc": "((Marvin(mars) ∧ From(earth, marvin)) → Human(marvin))",
      "perplexity": 1.8097050189971924,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 104
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Test(x)",
        "CostTest(x, y)",
        "ProvidesFinancialAid(x, z)",
        "HasEconomicHardship(z)",
        "FamilyType(x)",
        "IsSingleParent(fam_x) ",
        "DadIsUnemployed(y, num_years_unemployed_y)"
      ],
      "fol_consts": [
        "gre",
        "usd_205",
        "ects"
      ],
      "fol_rules": [
        "∃x (Test(x) ∧ CostTest(gre, usd_205))",
        "∀z ((ProvidesFinancialAid(ets,z)) → HasEconomicHardship(z))",
        "∃x (HasEconomicHardship(x) ∧ (∃y (FamilyType(y) ∧ IsSingleParent(eats))) ∧ DadIsUnemployed(eats, 1))",
        "∀z ((ProvidersFinancialAid(ets,z)) → HasEconomicHardship(z)) : ETS provides financial aid to those applicants who have economic hardship.",
        "¬∃x (CostTest(gre, usd_300)): Cost is less than $300"
      ],
      "fol_conc": "∃y (Test(y) ∧ (∧ x ∈ domain of y:   ( CostTest(x,y)<usd_300)))",
      "perplexity": [
        2.3889622688293457,
        1.2990751266479492
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z ((ProvidersFinancialAid(ets,z)) → HasEconomicHardship(z)) : ETS provides financial aid to those applicants who have economic hardship."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(y, x)",
        "Is(x, y)",
        "Lives(x, z)",
        "Has(z, w)"
      ],
      "fol_consts": [
        "tom",
        "gretest",
        "singleparentfamily",
        "daddidnotworkformorethanayear"
      ],
      "fol_rules": [
        "∀x (Costs(gretest, urs205))",
        "∃y ((Is(y, grepest) ∧ Provides(ests, y)) → ¬(Is(x, greapest)))",
        "(Has(singleparentfamily, tom) ∧ Has(daddidnotworkformorethanayear, daddidntworkforyears)) ∧ (Has(daddidnotworkformorethanayear, dad) ∨ Is(grepest, singleparentfamily))"
      ],
      "fol_conc": "(∀x (Costs(x, us300)))",
      "perplexity": 2.7407050132751465,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GRETest(x)",
        "ETSProvidesFinancialAid(y, x)",
        "ETSProvidesFinancialAid(x)",
        "HasEconomicHardship(z, y)",
        " GRECostBelowThreshold(u)",
        "HasEconomicHardship(m, n)",
        " GRECostBelowThreshold(t)"
      ],
      "fol_consts": [
        "us205",
        "us205",
        "us205",
        "us205",
        "us205"
      ],
      "fol_rules": [
        "(ETSProvidesFinancialAid(u) ∧ GRETest(x)) → (GRETest(y))",
        "(HasEconomicHardship(z, x))",
        "GRETest(us205)",
        "ETSProvidesFinancialAid(us205)",
        "GRETest(g)",
        "GRETest(h)"
      ],
      "fol_conc": "(ETSProvidesFinancialAid(u) ∧ GRETest(x))",
      "perplexity": 18.64544677734375,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 105
  },
  {
    "id": 135,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space sucks.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Space",
        "Vacuum",
        "Vampire",
        "Plunger",
        "Duster",
        "Appliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Suck(x))",
        "∀x, y (Vampires(x) → Suck(y)) ⊕ ∃y (Plungers(y) ∨ Vacuums(y))",
        "∀x (Apliances(x) ∧ ¬Suck(x))",
        "Space ⊕ ∃y (Vacuum(y)) ⊕ (∀z (Vampire(z) → Suck(z))) ",
        "∀x ((Apliances(x) ∧ ¬Suck(x)) ⊕ Suck(x))"
      ],
      "fol_conc": "Space ∨ ∃y (Vacuums(y))",
      "perplexity": [
        2.334848165512085,
        1.2568644285202026
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (Vampires(x) → Suck(y)) ⊕ ∃y (Plungers(y) ∨ Vacuums(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Space(y)"
      ],
      "fol_consts": [
        "plunger",
        "vacuum",
        "vampire",
        "space"
      ],
      "fol_rules": [
        "∀x (Plungers(x) → Suck(x))",
        "∀x (Vacuums(x) → Suck(x))",
        "∀x (Vampires(x) → Suck(x))",
        "(Space(y) ∧ Vacuums(y))",
        "Duster(x)",
        "(¬Sucker(x) ∧ Duster(x)) ⊕ True(vacuum, sucks)"
      ],
      "fol_conc": "Suck(space)",
      "perplexity": 2.2184486389160156,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Space/1, Space/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Space/1, Space/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x, y)",
        "IsVacuum(z)",
        "IsVacuum(w)"
      ],
      "fol_consts": [
        "plunger",
        "vacuum",
        "vampire"
      ],
      "fol_rules": [
        "(¬(Suck(plungers)) ∧ Suck(vacs)) → (¬(Suck(space)))",
        "(∃x ((IsVacuum(x) ∨ IsVacuum(y))))",
        "(¬((Suck(duster)) ⊕ ¬(Suck(appliance))))",
        "Suck(spaces, vacs)",
        "(Suck(sucks, plunger))",
        "(∀z (Suck(z)))"
      ],
      "fol_conc": "(((IsVacuum(space) ∧ Suck(vacuums)) → ∃x ((¬((Suck(plungers)))) ∨ ¬(Suck(appliance)))))",
      "perplexity": 7.789027690887451,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Suck/2, Suck/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Suck/2, Suck/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 106
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(B, y)(x,y)"
      ],
      "fol_consts": [
        "melissa"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → Spicy(x))",
        "∃x (Cupcake(x) ∧ Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "ProductOf(melissa, Cupcake)(x)",
        "(∃y(DriedThaiChili(y)) ∧ (Spicy(y) ⊕ Bakery(y))) → ((DriedThaiChili(y) ∧ Hotpot(y)) ∨ Spicy(y))",
        "Dried Thai Chili (x )∧ ProductOf(melissa,Cupake(x))⊕ ¬(Cupcake(x )∧Productof(Melissa,cupke(x)]"
      ],
      "fol_conc": "DriedThaiChili(x) ⊕ ¬Cupcake(x)",
      "perplexity": [
        1.5218502283096313,
        1.5990744829177856
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "ProductOf(melissa, Cupcake)(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymellasa"
      ],
      "fol_rules": [
        "(¬Bakery(y)) → Spicy(y)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymellasa) → Cupcake(x))",
        "(Spicy(z) ⊕ (Bakery(z))) → ((Hotpot(z) ∨ Spicy(z)))",
        "∃y (Driedthai(y) ∧ Product(driedthai, y) ∧ Bakery(y))"
      ],
      "fol_conc": "(Product(driedthai, bakedbymellasa) ∧ Cupcake(driedthai)) ∧ Product(driedthai, bakedbymellasa)",
      "perplexity": 1.7343655824661255,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(y)",
        "Cupcake(y)"
      ],
      "fol_consts": [
        "driedThaiChili",
        "driedThaiChili"
      ],
      "fol_rules": [
        "(∀y (Bakery(y)))",
        "(¬(∃x (Spicy(x))))",
        "(∀z (∃w ((Cupcake(w) ∧ Bakery(z)) ⊕ Bakery(c))))",
        "(∀u ∀v (((Spicy(u) ∨ Bakery(v)) → ∃q ∃s ((((Spicy(q))) ∨ (Bakery(s))) ∨ (Bakery(t))) → ((Cupcake(w) ∧ Bakery(z)) ⊕ Cupcake(e)))))",
        "(∀e (∃d (((Spicy(d)) ⊕ Spicy(c)) ∨ Bakery(f))))",
        "((Spicy(r)) ∨ Bakery(u))"
      ],
      "fol_conc": "Cupcake(driedThaiChili) ∧ Bakery(e)",
      "perplexity": 12.43946361541748,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 107
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "WorkIn(x, y)",
        "NeedToEarnMoney(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallsMealsAndRecipes(x)",
        "NotPickyEater(x)",
        "SpendTimeInCampusDiningHalls(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkInStudentJobsOnCampus(x) → NeedToEarnMoney(x))",
        "∀x (OrderTakeoutFrequently(x) → WorkInStudentJobsOnCampus(x))",
        "∀x (WorkInStudentJobsOnCampus(x) ⊕ OrderTakeoutFrequently(x))",
        "∀x ((EnjoyDiningHallsMealsAndRecipes(x)) → ¬NotPickyEater(x))",
        "∀x ((EnjoyDiningHallsMealsAndRecipes(x)) → SpendTimeInCampusDiningHalls(x, x))",
        "(WorkInStudentJobsOnCampus(mary) ∧ NeedToEarnMoney(mary)) ⊕ ¬(NotPickyEater(mary) ∨ NeedToEarnMoney(mary))"
      ],
      "fol_conc": "EnjoyDiningHallsMealsAndRecipes(mary) ⊕ NotPickyEater(mary)",
      "perplexity": [
        1.2260255813598633,
        1.1331846714019775
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Earns(x, y)",
        "Order(sx, ty)",
        "Dininghall(sx, ty)",
        "Needs(x, y)",
        "Pickyeater(x)",
        "Time(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Workoncampus(x) → Earns(x, money))",
        "(Person(x) ∧ Order(sx, ty) ⊕ Enjoy(dininghall, sx)) → Student(x)",
        "∀x (Order(sx, ty) → (Student(x) ⊕ Enjoy(dininghall, sx)))",
        "∃y ((Dininghall(y, x) ∧ Pickyeater(y)) → ∃z (Enjoy(z, y)))",
        "(Person(x) ∧ Dininghall(x, y) ∧ Enjoy(z, x) → Time(x, dininghall))",
        "Mary(mary) ∧ Workoncampus(mary) ∧ Earns(mary, money) → ¬Pickyeater(mary)",
        "Mary(mary) ∧ Worksstudentjob(mary) ∧ Earns(mary, money) → ¬Needs(mary, money)"
      ],
      "fol_conc": "(Enjoy(dininghall, mary) ⊕ Pickyeater(mary)) ∨ (Enjoy(dininghall, mary) ∧ Pickyeater(mary) → Time(mary, dininghall))",
      "perplexity": 1.843845009803772,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NeedsMoney(x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y, x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(z)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)",
        "NeedsMoney(t)",
        "NeedsMoney(y)",
        "NeedsMoney(e, x)",
        "NeedsMoney(f)",
        "NeedsMoney(z)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y)",
        "NeedsMoney(t)",
        "NeedsMoney(s)",
        "NeedsMoney(l)",
        "NeedsMoney(a, x)",
        "WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(x)"
      ],
      "fol_consts": [
        "mary",
        "campustudyingestudentsjobs-on-campusneedsmoneytotehlpayforcollege tuition "
      ],
      "fol_rules": [
        "(NeedsMoney(t)) → (WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(mary) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(y))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "(∃x (NeedsMoney(x)))",
        "((NeedsMoney(z)) → WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))",
        "∃x (NeedsMoney(x))",
        "(NeedsMoney(e)) → ¬WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(i)"
      ],
      "fol_conc": "((NeedsMoney(l) ∧ WorkInStudentJobsOnCampusIfOrderTakeoutFrequently(j))) ⊕ (NeedsMoney(e, l))",
      "perplexity": 10.329919815063477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NeedsMoney/2, NeedsMoney/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NeedsMoney/2, NeedsMoney/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 108
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) ⊕ Deadly(x))",
        "BileDuctCancer(B): Bile duct cancer is a severe cancer.",
        "Cholangiocarcinoma(C) ≡ BileDuctCancer(C)",
        "¬(ColorectalCancer(C) ∧ SurvivalRateLow(C)) : No colorectal cancer and its survival rates are low.",
        "∀x (MildFlu(x) → ¬SurvivalRateLow(x)) : No one with mild flu has a low survival rate.",
        "∃x (SevereCancer(x) ∧ ¬SurvivalRateLow(x)) : There exists a colorectal cancer that has no low survival rate."
      ],
      "fol_conc": "∀x ((Deadly(C) → SurvivalRateLow(C)), SevereCancer(C): C: Colorectal Cancer, (MildFlu(x) ⊕ Deadly(x)), (ColorectalCancer(C) ∧ ¬SurvivalRateLow(C)) : If there exists a colorectal cancer with no low survival rate then it is not deadly disease.",
      "perplexity": [
        1.6133474111557007,
        1.536275863647461
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BileDuctCancer(B): Bile duct cancer is a severe cancer."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Low(s, y)",
        "Severe(x)",
        "Bile(x)"
      ],
      "fol_consts": [
        "bile",
        "flu",
        "cancer"
      ],
      "fol_rules": [
        "(∀x (Deadly(x) → Low(s, x)))",
        "((∃x (Severe(x)) ∧ Deadly(x)) ⊕ Deadly(x))",
        "Bile(bile) ∨ Severe(cancer)",
        "¬(Mild(flu) ∧ Low(s, flu))"
      ],
      "fol_conc": "(Severe(cancer) → Colorectal(cancer))",
      "perplexity": 2.5043067932128906,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsDeadly(x)",
        "SurvivalRateLow(x, y)",
        "SevereCancer(y)"
      ],
      "fol_consts": [
        "flu",
        "_",
        "flu"
      ],
      "fol_rules": [
        "(∀x (IsDeadly(x) → SurvivalRateLow(x)))",
        "(¬(SevereCancer(flu)) ⊕ IsDeadly(d))",
        "SevereCancer(b)",
        "((SevereCancer(y) ∧ IsDeadly(flu)) ⊕ SevereCancer(c))"
      ],
      "fol_conc": "(¬(IsDeadly(flu))) ⊕ (SurvivalRateLow(x, flu))",
      "perplexity": 14.3790283203125,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SurvivalRateLow/1, SurvivalRateLow/2.\n\n\nFatal error:  The following symbols are used with multiple arities: SurvivalRateLow/1, SurvivalRateLow/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 109
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GRETest(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "HasEconomicHardship(x)",
        "LivesInFamily(x, z)",
        "IsOutOfWork(z)"
      ],
      "fol_consts": [
        "tom",
        "ETS"
      ],
      "fol_rules": [
        "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)",
        "∀x (GRETest(x) ∧ ProvidesFinancialAid(ETS, x) → HasEconomicHardship(x))",
        "∀y (HasEconomicHardship(y) → ∃z ((LivesInFamily(z, y) ∨ ¬ LivesInFamily(z, ETS)) ∧ (IsOutOfWork(z)))",
        "IsOutOfWork(tom's dad)",
        "LivesInFamily(tom's dad, tom)",
        "∀x (HasEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ⇒ HasEconomicHardship(tom) ∴ ∃y ((GRETest(y) ∧ ProvidesFinancialAid(ETS, y)) ∨ GRETest(ets))"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9536328315734863,
        1.1783725023269653
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, z)",
        "Economic(x, y)",
        "Difficult(y)",
        "Lives(x, z)",
        "Father(x, y)",
        "Outofwork(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "us205",
        "year1",
        "singleparentfamily"
      ],
      "fol_rules": [
        "∃x (Costs(x, us205))",
        "(Provides(ets, x) ∧ Economic(x, z) ∧ Difficult(z) → Provides(ets, tom))",
        "∀y ((Economic(y) ⊕ Difficulty(y)) → ∃z (Difficult(z)))",
        "(Lives(tom, singleparentfamily) ∧ Father(tom, y) ∧ Outofwork(y, year1))",
        "(Outofwork(x, year1) → Provides(ets, tom))",
        "∀x ((Provides(ets, x) ∧ Costs(x, us205) → Play(sam, nope)))"
      ],
      "fol_conc": "(Provides(ets, tom) ∧ Costs(tom, us205))",
      "perplexity": 2.1026229858398438,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAid(sx, x)"
      ],
      "fol_consts": [
        "ets",
        "grec"
      ],
      "fol_rules": [
        "$205(x)",
        "(∃y (ProvidesFinancialAid(ets, grc) ∧ ProvidesFinancialAid(greclandhardshipx)))",
        "(¬ProvidesFinancialAid(economicgriardifficulty))",
        "($205(y))"
      ],
      "fol_conc": "(∃y (Costs(ets, grc) ∧ ProvidesFinancialAid(samhardscapitalresourcestom)))",
      "perplexity": 12.56561279296875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 110
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "PopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympicsAndParalympics(x)",
        "RankedAmongTheBest(x)",
        "University(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(beijing, china) ⊕ ¬Capital(beijing, asia-pacific)) → PopulousNationalCapitalCity(beijing)",
        "∃x (LocatedIn(x, northern-china)) ∧ LocatedIn(beijing, northern-china) ⊕ ∃x (LocatedIn(x, southern-china)) → LocatedIn(beijing, southern-china)",
        "∀y ((LocatedIn(y, china)) ⊕ (HostedOlympicsAndParalympics(beijing) → RankedAmongTheBest(china)))",
        "∃x ∃u (University(x, u) ∧ LocatedIn(u, asia-pacific)) ∧ ∀x ∃z ((LocatedIn(z, north-america)) ∧ University(x, z) ∧ ¬RankedAmongTheBest(north-america)) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ∧ Capital(beijing, china) ⊕ ∀y ((Capital(y, china)) → ¬(LocatedIn(y, southern-china)))) → True",
        "∃x (University(x, southern-china) ∧ RankedAmongTheBest(southern-china)) ⊕ ∀y ((LocatedIn(y, china)) → ∄z (((Capital(z, china))) ∧ LocatedIn(z, south-america) ∧ ¬(RankedAmongTheBest(china)))) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, china) → ¬(Capital(y, south-america))) ∧ ∃z ((University(z, y) ∧ RankedAmongTheBest(south-america)))) → True",
        "∃x (LocatedIn(x, china) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, southern-china)) → ¬(Capital(y, china))) → False",
        "∃x (LocatedIn(x, china) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, southern-china)) → ¬(Capital(y, china))) → True",
        "∃x ∃z (University(x, z) ∧ LocatedIn(z, asia-pacific) ⊕ ∀y ((LocatedIn(y, south-america)) → ¬(University(y, y)))) → False",
        "∃x ((LocatedIn(x, southern-china)) ∧ LocatedIn(beijing, x) ⊕ ∀y ((LocatedIn(y, china) → ¬(Capital(y, south-america))) → ∄z (((University(z, y))) ∧ RankedAmongTheBest(south-america)))) → False"
      ],
      "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))",
      "perplexity": [
        2.466643810272217,
        1.0918185710906982
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ∃u (University(x, u) ∧ LocatedIn(u, asia-pacific)) ∧ ∀x ∃z ((LocatedIn(z, north-america)) ∧ University(x, z) ∧ ¬RankedAmongTheBest(north-america)) → False"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(n, x)",
        "Located(x, z)",
        "Hosted(s, e)",
        "Olympics(s, t)",
        "Paralympics(s, t)",
        "Ranked(b, u)",
        "Asiapacific(u)",
        "World(u)",
        "Southern(z)",
        "China(y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(Mostpopulous(beijing, beijing))",
        "(Located(beijing, northern))",
        "(Hosted(berlin, summer2008)) ⊕ (Hosted(berlin, paralympics2008))",
        "(Hosted(summer2008) ∧ Hosted(paralympics2008)) → (Olympics(summer2008, t) ∧ Olympics(paralympics2008, t))",
        "(∃u ((Ranked(u, beijing) ∧ Asiapacific(u)) ∨ Ranked(u, world)))",
        "(∀z ((Asiapacific(z) ∧ World(z)) → Located(beijing, z)))",
        "(Located(x, southern) ∧ China(y) ⊕ (China(y) ∧ Capital(x, y)))"
      ],
      "fol_conc": "(Located(beijing, southern)) ⊕ (Located(beijing, northern))",
      "perplexity": 2.0923571586608887,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Hosted/1, Hosted/2, World/1, World/0, China/1, China/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Hosted/1, Hosted/2, World/1, World/0, China/1, China/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulousNCity(y)",
        "LocatedIn(z, x)",
        "LocatedIn(x, z)",
        "Capital(f, c)",
        "NotSouthernChina(c)",
        "NotSouthernChina(h)"
      ],
      "fol_consts": [
        "beijing"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(MostPopulousNCity(beijing))",
        "(LocatedIn(n) ↔ LocatedIn(b))",
        "((Capital(x, beijing) ∧ Capital(y, china))) ↔ (NotSouthernChina(z))"
      ],
      "fol_conc": "(∃z ((LocatedIn(beijing, z)))) ⊕ NotSouthernChina(beijing)",
      "perplexity": 13.552657127380371,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LocatedIn/1, LocatedIn/2.\n\n\nFatal error:  The following symbols are used with multiple arities: LocatedIn/1, LocatedIn/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 111
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "LabelledData(x)",
        "TrainedWithML(x)",
        "NotRL(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml"
      ],
      "fol_rules": [
        "∀x ((Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x)) → Supervised(x))",
        "∃x (Unsupervised(x) ∧ ¬LabelledData(x))",
        " ∀x ((TrainedWithML(x) ∧ Reinforcement(x)) → NotRL(x))",
        " ∀x (RequiresLabelledData(x) → Supervised(x))"
      ],
      "fol_conc": "Supervised(ml)",
      "perplexity": [
        1.3340004682540894,
        1.293811559677124
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Supervised(y)",
        "Unsupervised(y)",
        "Reinforcement(y)",
        "Requireslabelleddata(x)",
        "Stateofthearttextsummarizationmodel(x)"
      ],
      "fol_consts": [
        "ml",
        "summodel"
      ],
      "fol_rules": [
        "∀x ∀y (Category(x, y) → (Supervised(y) ⊕ Unsupervised(y) ⊕ Reinforcement(y)))",
        "¬Unsupervised(learning) → ¬Requireslabelleddata(x)",
        "(Stateofthearttextsummarizationmodel(ml) ∧ Category(ml, learning)) → ∃x (Machinelearningsumalgorithm(x))",
        "∀x ∀y ((Category(x, y) ∧ Reinforcement(y) ∧ Stateofthearttextsummarizationmodel(x)) → ¬Requireslabelleddata(x))",
        "(Requireslabelleddata(summodel) ∧ Category(summodel, mlalgorithms)) → Requireslabelleddata(ml)",
        "Supervised(learning) ⊕ Unsupervised(learning) ⊕ Reinforcement(learning) → Supervised(learningsumalgorithm)"
      ],
      "fol_conc": "Supervised(learningsumalgorithm)",
      "perplexity": 1.7255868911743164,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorize(x, y)",
        "Unsupervised(y)",
        "RequiresLabelledData(y)",
        "TrainedWithMLAlgorithm(z)",
        "RequiresLabelledData(e)"
      ],
      "fol_consts": [
        "machineLearningAlgorithms",
        "machineLearningAlgorithms"
      ],
      "fol_rules": [
        "(∀x (Categorize(x, machineLearningAlgorithms) → (∃y ((Unsupervised(y)) ⊕ RequiresLabelledData(e)))) ∧ Categorize(machineLearningAlgorithms, y))",
        "(RequiresLabelledData(z) ∨ Unsupervised(w))",
        "(∀x (TrainedWithMLAlgorithm(x)))",
        "(RequiresLabelledData(v))"
      ],
      "fol_conc": "Categorize(machineLearningAlgorithms, y) → Categorize(y, machineLearningAlgorithms)",
      "perplexity": 13.304852485656738,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 112
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Beethoven",
        "LeadThe(x, y)",
        "Orchestra(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Beethoven = x)",
        "∀x ((Composer(x) ∨ MusicPiece(x)) → Composer(x))",
        "Beethoven = symphony9"
      ],
      "fol_conc": "Composer(Beethoven)",
      "perplexity": [
        2.2153477668762207,
        1.4665547609329224
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (MusicPiece(x) ∧ Beethoven = x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Composers(x)",
        "Write(x, z)",
        "Beethoven(x)",
        "Premiered(y, x)",
        "Vienna(x)",
        "Orchestra(x)",
        "Leads(x, y)",
        "Conductor(y)",
        "Music(x)"
      ],
      "fol_consts": [
        "no9",
        "beethoven"
      ],
      "fol_rules": [
        "Is(no9, music)",
        "Composers(beethoven)",
        "(Beethoven(x) ∧ Write(x, no9))",
        "(Vienna(x) ∧ Premiered(x, no9))",
        "(Orchestra(y) → Leads(y, x))",
        "(∀x (Leads(x, y) → Conductor(x)))"
      ],
      "fol_conc": "Composers(beethoven)",
      "perplexity": 2.018230438232422,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Be(x, y)",
        "WriteComposers(y)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "vienna music society"
      ],
      "fol_rules": [
        "(∃x (Be(beethoven, x))) ∧ (∀y ((WriteComposers(y) → ∃z (Be(x, z)))))",
        "((¬WriteComposers(beethoven)) ⊕ WriteComposers(vienna music society))",
        "(∃x (Be(beethoven, x))) ∧ Be(beethoven, vienna music society)",
        "(Be(e) → ¬WriteComposers(beethoven))"
      ],
      "fol_conc": "WriteComposers(vienna music society)",
      "perplexity": 14.420961380004883,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 113
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "Population(x)",
        "Location(x)",
        "Hosted(x, z)",
        "RankedInTopX(x)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "Capital(beijing, china) ⊕ ¬Capital(beijing, y)",
        "∃x (Population(x) ∧ Capital(x, china))",
        "Location(beijing)",
        "∀y ((Hosted(y, olympics)) → Hosted(y, paralympic))",
        "∃x (Hosted(x, summer) ∧ x ≠ winter)",
        "∀y ((RankedInTopX(y)) → RankedInTopY(y))",
        "∃x (RankedInTop91(x) ∧ x ≠ asia-pacific)"
      ],
      "fol_conc": "Hosted(beijing, olympics) → Hosted(beijing, winter)",
      "perplexity": [
        2.3307886123657227,
        1.183642029762268
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Hosted(x, summer) ∧ x ≠ winter)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(nationalcapcityy)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "(Capital(beijing, china))",
        "(Capital(beijing, china) ∧ Mostpopulous(nationalcapcityy))",
        "(Locationx(x) ∧ Capital(x, y) → Northernx(y))",
        "(Hosted(games, x) ∧ Games(x) → Beijing(x))",
        "(∃x (Games(x) ⊕ Wintergames(x))) ∧ (∃x (Summergames(x) ⊕ Wintergames(x)))",
        "∀x ((Universities(x) ∧ Bestin(asiaapacificy) ∧ Bestinxworldy(y)) → Consistentlybest(universitiesx, asiaapacificy, worldxy))",
        "(Universities(beijing) ∧ Asiaapacificy(asiaapacificy) ∧ Worldsy(worldsx) → Consistentlybest(universitysbeijing, asiapoypacificky, worldsby))"
      ],
      "fol_conc": "∃x (Games(x) ⊕ Wintergames(x))",
      "perplexity": 2.7762157917022705,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulousNationalCity(y)",
        "LocatedIn(z)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(x))",
        "¬(Capital(beijing, china))",
        "(MostPopulousNationalCity(beijing))",
        "(LocatedIn(china) ∧ LocatedIn(n) ∨ ¬(LocatedIn(z)))",
        "(Capital(h) → ∃g (Capital(g) ∧ Capital(beijing)))",
        "¬(Capital(x, china) → Capital(y, china))",
        "∀z ((MostPopulousNationalCity(beijing)) ∧ LocatedIn(china) ∧ LocatedIn(n) ∨ ¬((LocatedIn(z))))",
        "(Capital(g) ∧ Capital(beijing) ⊕ (Capital(h)))",
        "¬(Capital(x, china))",
        "∀z ((MostPopulousNationalCity(beijing)) → ∃x ((Capital(y) ∧ LocatedIn(n) ∨ ¬((LocatedIn(z)))) ⊕ Capital(g)))",
        "(LocatedIn(china) ∧ (Capital(h)) → Capital(x, china))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(beijing)) ∧ ∃z ((Capital(y)) ∨ ¬((LocatedIn(z))))",
        "(∀x (((LocatedIn(china) ∧ LocatedIn(n))) → Capital(g)) ⊕ (Capital(h)))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(x) ∧ MostPopulousNationalCity(y) ∨ ¬((Capital(z))))",
        "(∀x ((LocatedIn(china)) → ∃g (((Capital(g)) ⊕ (LocatedIn(n))) ∨ Capital(h))))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(x, china) ∧ MostPopulousNationalCity(y))",
        "(∀x ((LocatedIn(china)) → ∃g (((Capital(g)) ⊕ (LocatedIn(n))) ∨ Capital(h))))",
        "(MostPopulousNationalCity(beijing))",
        "¬(Capital(beijing) ∧ MostPopulousNationalCity(y))"
      ],
      "fol_conc": "(∀x ((LocatedIn(china, n)) → ∃y (((Capital(x))) ∨ (Capital(h)))) ⊕ ¬((MostPopulousNationalCity(beijing)) ∨ ¬(Capital(beijing) ∧ MostPopulousNationalCity(y))))",
      "perplexity": 7.120315074920654,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Capital/2, Capital/1, LocatedIn/1, LocatedIn/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Capital/2, Capital/1, LocatedIn/1, LocatedIn/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 114
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "black_mirror",
        "karen",
        "lisa"
      ],
      "fol_rules": [
        "Show(black_mirror) → Popular(black_mirror)",
        "∀x (Popular(x) ⊕ ¬Show(x))",
        "∀x ((Download(x, black_mirror)) ↔ BingeWatch(karen, x))",
        "¬(Download(black_mirror, karen))",
        "Show(black_mIRROR) → Popular(black_mirror)",
        "(BingeWatch(karen, black_mirror) → Share(black_mirror, karen, lisa))"
      ],
      "fol_conc": "Share(black_mirror, karen, lisa)",
      "perplexity": [
        1.528734803199768,
        1.2277930974960327
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "blackmirror",
        "karen",
        "lisa",
        "netflixshow"
      ],
      "fol_rules": [
        "∀x (Is(strangerthings, x) → Popular(x))",
        "∀x ((Is(x, netflixshow) ∧ Popular(x)) → Karen(x))",
        "∃y ((Karen(y) ∧ Is(y, x)) → Download(y))",
        "(¬Download(karen) ∧ Is(blackmirror, netflixshow))",
        "Is(blackmirror, netflixshow)",
        "∀x (Karen(x) → (∃y (Is(y, x) ∧ Share(y, lisa))) ⊕ Karen(x))"
      ],
      "fol_conc": "(Share(karen, blackmirror) ⊕ ¬Download(karen))",
      "perplexity": 1.9135971069335938,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Karen/1, Karen/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Karen/1, Karen/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular Netflix show(x)",
        "Binge-watch(a, x)",
        "Netflix shows (x)"
      ],
      "fol_consts": [
        "stranger things",
        "karen",
        "black mirror ",
        "lisa"
      ],
      "fol_rules": [
        "(∃a ∃b ((Netflix shows (b)) ∧ Popular Netflix show(b))) → Binge-watch(karen, b)",
        "(Binge-watch(a, x) ⊕ Is(x, y))",
        "(Is(y, a) ↔ ¬(¬Binge-watch(h, h) ∨ (Is(f, c))))",
        "∀b ∃a ((Netflix shows (c)) ∧ Binge-watch(karen, b)) → (∃x ∀y (Netflix shows (f)))",
        "(Is(b, a))",
        "(Binge-watch(a, x) ⊕ Is(x, y))"
      ],
      "fol_conc": "∀b ∃a ((¬(Binge-watch(karen, b)) ∧ Binge-watch(h, h))) → (Is(b, a))",
      "perplexity": 7.2810139656066895,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall b.(some a.(((not (Binge-watch(Karen, b))) & (Binge-watch(h, h))) -> (Is(b, a))))\n                           ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 115
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "University(x)",
        "PrivateIvyLeagueResearchUniversity(x)",
        "MovedToNewHavenInYear(x, y)",
        "EndowmentValue(x, v)",
        "ConstituentCollegeSchoolsCount(x, c)",
        "ResidentialCollegesList(x, lc)",
        "NameOfResidentialCollegeInList(x, n) (x ∈ lc)"
      ],
      "fol_consts": [
        "yale",
        "benedictar franklin"
      ],
      "fol_rules": [
        "∀x (University(x) → PrivateIvyLeagueResearchUniversity(x))",
        "∃y (∀z ((MovedToNewHavenInYear(z, 1716)) ∧ z = yale)",
        "EndowmentValue(yale, 42.3)",
        "ConstituentCollegeSchoolsCount(yale, 27)",
        "ResidentialCollegesList(yale, (BenedictarFranklin ∈ {berkeley college, branford college, davenport college, eza stiles college, grace hopper college, jonathan edwards college, morse college, pauli murray college, pierson college, saybrook college, silliman college, timothy dwight college, trumbull college}))",
        "∃x (NameOfResidentialCollegeInList(yale, x) ∧ BenedictarFranklin = x)",
        "∀y ((University(y) → ResidentialCollegesList(y, lc)) ∧ NameOfResidentialCollegeInList(y, pierson))",
        "¬(NameOfResidentialCollegeInList(yale, y))) (pierson ∈ lc)"
      ],
      "fol_conc": "∀y ((University(y) → ResidentialCollegesList(y, lc)) ∧ NameOfResidual CollegeInList(y, pierson)",
      "perplexity": [
        1.6852858066558838,
        1.236964225769043
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (∀z ((MovedToNewHavenInYear(z, 1716)) ∧ z = yale)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "University(x, y)",
        "Is(y, x)",
        "Moved(x, year)",
        "Endowment(x, money)",
        "Organized(x, num)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "billion",
        "benjaminfranklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "gracehopper",
        "jonathanedwards",
        "morse",
        "paulimurray",
        "pierson",
        "saybrook",
        "silliman",
        "timothydwight",
        "trumbull"
      ],
      "fol_rules": [
        "University(yale, private) ∧ University(yale, ivyleague) ∧ University(yale, research)",
        "University(yale, moved, ets1)",
        "Endowment(yale, billion3)",
        "Organized(yale, num27)",
        "∃x (List(x, college))",
        "∀x (∃z (Member(z, x, y) ∧ List(z, residential))) → University(yale, hascollege)",
        "(∃y (University(yale, moved, year) ∧ Is(newhaven, y))) ∧ ∀x (Is(x, university) ∧ Has(endowment, billion3)) → ∃x (Endowment(x, money))",
        "∀x (∃z (Member(z, x, residential) ∧ List(z, college)) ∧ University(yale, hascollege))",
        "Pierson(restauranty) ∧ Member(presidention, restauranty)",
        "University(pierson, residential)"
      ],
      "fol_conc": "University(pierson, residential)",
      "perplexity": 2.2457728385925293,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(y, x)",
        "MovedTo(z, y)",
        "$(x)",
        "$(y)"
      ],
      "fol_consts": [
        "new haven ",
        "yale university ",
        "'new haven', 1716]",
        "yale university "
      ],
      "fol_rules": [
        "(IvyLeague(yale university , 'new haven', 1716]) ∧ Private(new haven ) → MovedTo('new haven', 1716]))",
        "$(y) ∨ $(z) ⊕ (x)",
        "$(y)"
      ],
      "fol_conc": "(IvyLeague(yale university , y)) ∨ (∃z (MovedTo(z, 'new haven', 1716]))) → IvyLeague(new haven )",
      "perplexity": 26.051971435546875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "$(y) ∨ $(z) ⊕ (x)"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 116
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeeting(x, y)",
        "AppearsInCompanyToday(x)",
        "HasLunch(x, y)",
        "RemoteWorkFromHome(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x ((SchedulesMeeting(x, Customer) ∧ AppearsInCompanyToday(x)) → Employee(x)",
        "∀x (Employee(x) → HasLunch(x, Company))",
        "(HasLunch(x, Home) ⊕ HasLunch(x, Company))",
        "RemoteWorkFromHome(Home)",
        "∀x (((Employee(x) ∧ ¬IsInOtherCountry(x))) → RemoteWorkFromHome(x)) ",
        "∀x (∧¬RemoteWorkFromHome(Manager(x)))",
        "∃x (Manager(x)",
        "James ∈ Manager(x)"
      ],
      "fol_conc": "∀x ((James ∈ Manager(x) ∨ ¬IsInOtherCountry(James)) → (((RemoteWorkFromHome(Home) ∧ RemoteWorkFromHome(x)) ⊕ ¬((HasLunch(x, Home) ∧ RemoteWorkFromHome(x)))))",
      "perplexity": [
        1.5669989585876465,
        1.3821276426315308
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((SchedulesMeeting(x, Customer) ∧ AppearsInCompanyToday(x)) → Employee(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedules(x, y)",
        "Appears(x, today)",
        "Has(x, lunch)",
        "Meets(x, customer)",
        "Work(x)",
        "Remotes(x, home)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "(∀x (Schedules(x, y) ∧ Meets(y, customer))) → Appears(x, today)",
        "(∃x (Has(x, lunch) ⊕ Has(x, home)))",
        "((¬Is(x, manager)) ⊕ Is(x, manager)) → ¬(Remotes(x, home))",
        "∀x (¬Is(x, employee) ∨ Remotes(x, home))",
        "∀x ((Not(x, manager) ∧ Appears(x, today)) ∨ ∃y (Schedules(y, x) ⊕ Is(y, remote)))",
        "(If(remotesfromhome, thenjameshaslunchathomeandworkshomeworkeremotelyorbothneitherhaslunchathomeremoteornorhomeworkernoremanner))"
      ],
      "fol_conc": "Remotes(james, home) ∨ ¬Remotes(james, home)",
      "perplexity": 2.5769717693328857,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomer(y, x)",
        "SchedulesMeetingWithCustomer(z)"
      ],
      "fol_consts": [
        "james",
        "home",
        "today",
        "othercountry"
      ],
      "fol_rules": [
        "(∀x (SchedulesMeetingWithCustomer(x) → Employee(x)) ∧ ∀y (∃z ((SchedulesMeetingWithCustomer(y, z) ⊕ SchedulesMeetingWithCustomer(z)))) ∨ ∃w (((Employee(w)) ∧ SchedulesMeetingWithCustomer(wothercounry, w))) ↔ (SchedulesMeetingWithCustomer(x) → Employee(wheermeyx)))",
        "∀y ((SchedulesMeetingWithCustomer(y) ⊕ SchedulesMeetingWithCustomer(z)) ∧ SchedulesMeetingWithCustomer(wothercounry, w) ↔ ∃w (SchedulesMeetingWithCustomer(x)))",
        "∀x ((Employee(wheermeyyceps) ⊕ Employee(yesamejamesmangergg)) ∨ ∀z (((SchedulesMeetingWithCustomer(z)))) ↔ (∃t (¬(SchedulesMeetingWithCustomer(t))) ∧ SchedulesMeetingWithCustomer(wheermeyx, wheermeyyceps) ↔ ∀w ((Employee(yesamejamesmangerggg)) → SchedulesMeetingWithCustomer(x))))",
        "∃t (¬(SchedulesMeetingWithCustomer(t))) ∧ SchedulesMeetingWithCustomer(wheermeyx, wheirmeyeohercounry) ↔ ∀w ((Employee(yesamejamesmangergg)) → (∃y (((SchedulesMeetingWithCustomer(z)))) ↔ SchedulesMeetingWithCustomer(x)))",
        "(∀z (SchedulesMeetingWithCustomer(t) ↔ Employee(wheermeyx, wheirmeyeohercounry)) ∧ ∀y (((SchedulesMeetingWithCustomer(y)))) ↔ SchedulesMeetingWithCustomer(wothercooyntneyrrtytwwihtcuatmerswheyem) ↔ ∃z ((Employee(z))) ∨ (∀x (SchedulesMeetingWithCustomer(x)) → SchedulesMeetingWithCustomer(y, z)) ⊕ ∀y (((SchedulesMeetingWithCustomer(t)))))"
      ],
      "fol_conc": "((∀w ∃z ((Employee(z) ∧ SchedulesMeetingWithCustomer(wheermeyx))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ∨ ∀y (((SchedulesMeetingWithCustomer(y, z) ∧ Employee(zwheeemrmangergggrrtyyyeisjameeyysam))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀z (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, z))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(y) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(ywheeermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))))",
      "perplexity": 6.81448221206665,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∀w ∃z ((Employee(z) ∧ SchedulesMeetingWithCustomer(wheermeyx))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ∨ ∀y (((SchedulesMeetingWithCustomer(y, z) ∧ Employee(zwheeemrmangergggrrtyyyeisjameeyysam))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀z (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, z))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(y) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(ywheeermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))) ⊕ ∀y (((SchedulesMeetingWithCustomer(z) ∧ SchedulesMeetingWithCustomer(wheermeyx, y))) → (∃t (¬(SchedulesMeetingWithCustomer(x)) ↔ SchedulesMeetingWithCustomer(t)))))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 117
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "Person(x, y)",
        "Contains(x, y)",
        "Reads(x, y)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y ((Contains(x, 'Tons') ∨ Contains(x, 'Knowledge')) ⊕ Contains(x, 0))",
        "∀x (Person(x, 'Tons') ∧ Book(y) ∧ Reads(x, y))",
        "∀x ((Book(y) → Person(x, x)) ∧ x ≠ 1 ⊕ ∀y (z ∈ {0, z}))",
        "∃y (Person(harry, y) ∧ Book(z) ∧ Reads(harry, z))"
      ],
      "fol_conc": "Person(harry, x) → (∀x (z ∈ {0, x})) ⊕ ∀y ((∃x (Book(y) ∧ Reads(x, y)) → ∃t t < y)",
      "perplexity": [
        2.174751043319702,
        1.1641608476638794
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Book(x) → ∃y ((Contains(x, 'Tons') ∨ Contains(x, 'Knowledge')) ⊕ Contains(x, 0))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Knowledge(x)",
        "Book(x, y)",
        "Reads(x, z)",
        "Gains(z, x)",
        "Smarter(z)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau",
        "henry"
      ],
      "fol_rules": [
        "(∀x (Book(x, y) → Knowledge(y)))",
        "(∀z ((Reads(harry, z)) ∧ Book(z, walden)) → Gains(z, harry))",
        "(∀w ((Gains(w, x)) → Smarter(w)))"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 1.9907431602478027,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 118
  },
  {
    "id": 84,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "ListedIn(x, y)",
        "ReceivesNegativeReview(x, y)",
        "Rating(x) > 9",
        "ProvidesTakeOut(x)",
        "HasHighRating(y)",
        "LocalResident(x, y)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "ListedIn(subway, _) ⊕ ReceivesNegativeReview(_, suby)",
        "∀x ((Rating(x) > 9 → ListedIn(x, _))",
        "∃x (∼ProvidesTakeOut(x) ∧ ReceivesNegativeReview(_, x})",
        " ∀x (HasHighRating(x) → Rating(x) > 9)",
        "∃y ((Subway ⊕ LocalResident(s, y)) ∧ Rated(y) > 9 ∨ HasHighRating(y))"
      ],
      "fol_conc": "(~ProvidesTakeOut(subby) ∧ ReceivesNegativeReview(_, subuy)) → (Rated(subby) ⊕ ~HasHighRating(subby))",
      "perplexity": [
        1.5665364265441895,
        1.2569317817687988
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((Rating(x) > 9 → ListedIn(x, _))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Reviews(x, y)",
        "Listed(y)",
        "Rating(x)",
        "Provides(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "(Listed(yelp) → ¬(Reviews(r, y)))",
        "(∃x (Rating(x) ∧ Rating(x) ∧ ∃x ∀x ∀x ∃x ((∃x ∃y ∃x ∀x ((∃x ∀x ∃x ∃x (∀x (∃x ∃x ∃x ∃y (Rating(x) ∧ Rating(y))))) ∧ ((¬Listed(yelp) ∧ ¬(Reviews(r, y)))) ∨ Listed(yelp))))) ∧ Listed(yelp))",
        "∀r (∃s (Provides(s) ∧ Provides(s) → Reviews(r, s)) → Reviews(r, r))",
        "(∃x ((Rating(x) ∧ Rating(x) ∧ ∃x ∀y (Listed(y) ∧ Popular(y))) ∧ ¬(Listing(x)))) ∨ Listed(subway)",
        "Reviews(s, t) ∧ Provides(t, s) ∧ Reviews(r, r) → (∃s (Rating(s) ∧ Listing(s)) ∧ Rating(t) ∧ Listing(t) ∧ ((∀x ∃y ∃t ∃r (Listing(x) ∧ Popular(y))) ∧ ¬(Providing(t, s))))"
      ],
      "fol_conc": "(Reviews(subway, t) ∧ Provides(subway, s)) → (∃s (Rating(s) ∧ Listing(s)) ∧ Rating(t) ∧ ((∀x ∃y ∃t ∃r (Listing(x) ∧ Popular(y))) ∧ ¬(Providing(t, s))))",
      "perplexity": 3.2019519805908203,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Provides/1, Provides/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Provides/1, Provides/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ListedIn(x, y)",
        "ReceiveManyNegativeReviews(y)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "(ListedIn(x, y)) → ¬(ReceiveManyNegativeReviews(y))",
        "∀x (ReceiveManyNegativeReviews(y) ∧ ListedIn(x,  If receives bad review items & takes out from  - Then has rating above nine And doesn't do business . ) ∨ ¬(ListedIn(t, y)))",
        "∀x (¬ReceiveManyNegativeReviews(y) ∧ ListedIn(x, t) → ∃y ((ReceiveManyNegativeReviews(y) ⊕ ReceiveManyNegativeReviews(f))))",
        "ListedIn(subway, y) ∨ ∀x (¬ReceiveManyNegativeReviews(y))",
        "(ListedIn(x, t)) → ¬(ReceiveManyNegativeReviews(t))"
      ],
      "fol_conc": "(ReceiveManyNegativeReviews(subway) ∧ ListedIn(subway, y) ⊕ (ReceiveManyNegativeReviews(y)))",
      "perplexity": 25.02362823486328,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (ReceiveManyNegativeReviews(y) ∧ ListedIn(x,  If receives bad review items & takes out from  - Then has rating above nine And doesn't do business . ) ∨ ¬(ListedIn(t, y)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 119
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "FliesTo(x, y)",
        "Departure(x)",
        "Arrival(x)",
        "SameAirport(x, y)"
      ],
      "fol_consts": [
        "susan",
        "lga"
      ],
      "fol_rules": [
        "∀x ∃y (FliesTo(x, y) → ((Departure(y)) ⊕ (Arrival(y))))",
        "∀x ∃y ∃z (FliesTo(x, y) ∧ FlivesTo(z, x) → SameAirport(y, z))",
        "FliesFrom(john, lga)",
        "FliesTo(susan, lga) → FliesFrom(susan, lga)"
      ],
      "fol_conc": "FliesTo(susan, lga)",
      "perplexity": [
        2.4218344688415527,
        1.4011445045471191
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Arrives(x, y)"
      ],
      "fol_consts": [
        "susan",
        "lga"
      ],
      "fol_rules": [
        "(∃x (Flies(susan, x)))",
        "((Flies(x, lga)) ∧ ∃y ((Flies(y, lga)) ∨ ¬(Arrives(x, y))))",
        "((¬(Flies(john, lga) ∧ Arrives(john, lga))) ∧ Flies(lga, john))"
      ],
      "fol_conc": "(∃x (Flies(susan, x) ∧ Arrives(x, lga)))",
      "perplexity": 2.0642526149749756,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(n, m)"
      ],
      "fol_consts": [
        "susan",
        "susan",
        "susan",
        "susan",
        "susan"
      ],
      "fol_rules": [
        "(∃x (Flies(susan, x)))",
        "(¬(SameAirport(x, y)) ⊕ SameAirport(y, z) → ¬((SameAirport(z, x))))",
        "(∀z ((Flies(j, l)) ∧ Flies(l, j)) ∨ ∃y (((Flies(y, g) ∧ SameAirport(g, w))) ∨ (¬(SameAirport(w, y)) ⊕ SameAirport(x, z))))",
        "(SameAirport(z, x))"
      ],
      "fol_conc": "(∀z ((Flies(susan, l) ∧ SameAirport(l, g))) ∨ ∃y (((Flies(y, w)) → ¬(SameAirport(w, y)))))",
      "perplexity": 11.710014343261719,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 120
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)",
        "HasGlu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "humans",
        "fever",
        "headache",
        "musclePains",
        "tired",
        "coughing"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccursIn(monkeypoxVirus, humans)",
        "OccursIn(monkeypoxVirus, certainAnimals)",
        "Human(humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "Mammal(certainAnimals)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "FeelTired(x) → HasGlu(x)"
      ],
      "fol_conc": "SymptomOf(coughing, monkeypox)",
      "perplexity": [
        1.1452715396881104,
        1.0182801485061646
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(fever, monkeypox)",
        "Symptom(headache, monkeypox)",
        "Symptom(musclepains, monkeypox)",
        "Symptom(tiredness, monkeypox)",
        "Feel(humans, glu)",
        "Feel(humans, tirednes)"
      ],
      "fol_conc": "Symptom(coughing, monkeypox)",
      "perplexity": 1.252568244934082,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(y, x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox virus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypox virus)",
        "OccurIn(monkeypox virus, humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(muscle pains, monkeypox)",
        "SymptomOf(fever, glu)",
        "FeelTired(glu)"
      ],
      "fol_conc": "SymptomOf(c, monkeypox)",
      "perplexity": 1.486334204673767,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 161
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Lands(x)",
        "Hawk(x)",
        "Bird(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Lands(x))",
      "perplexity": [
        1.0983628034591675,
        1.02764093875885
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Land(x)",
        "Bird(x)",
        "Hawk(x)"
      ],
      "fol_consts": [
        "none"
      ],
      "fol_rules": [
        "¬Land(x) ∧ Hawk(x)"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": 1.6184450387954712,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(x)",
        "Land(x)"
      ],
      "fol_consts": [
        "hawk",
        "bird"
      ],
      "fol_rules": [
        "¬(Hawk(x) ∧ Land(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": 1.3275210857391357,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 162
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Hardship(x)",
        "SingleParent(x)",
        "Unemployed(x, y)"
      ],
      "fol_consts": [
        "gre",
        "us_205",
        "ets",
        "tom",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, us_205)",
        "∀x (Hardship(x) → Provide(ets, x))",
        "∀x (Hardship(x) ↔ (LittleMoney(x) ∨ FewResources(x)))",
        "SingleParent(tom)",
        "Unemployed(tom, year)"
      ],
      "fol_conc": "¬∃x (Provide(ets, x))",
      "perplexity": [
        1.1217999458312988,
        1.0230932235717773
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Economic(x)",
        "Single(x)",
        "Out(x, y)",
        "Financial(x, y)"
      ],
      "fol_consts": [
        "gre",
        "us",
        "205",
        "ets",
        "tom",
        "dad",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, us) ∧ ∀x (Cost(x, us) ∧ Provide(ets, x) → ¬Economic(x))",
        "Provide(ets, x) → Economic(x)",
        "Economic(x) ∧ Single(tom) ∧ Out(dad, year)"
      ],
      "fol_conc": "¬Financial(ets, gre)",
      "perplexity": 1.5002387762069702,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cost(x, y)",
        "ProvideAid(x, y)",
        "EconomicHardship(x)",
        "LiveIn(x, y)",
        "OutOfWork(y)"
      ],
      "fol_consts": [
        "gre",
        "tom",
        "us205",
        "singleParentFamily"
      ],
      "fol_rules": [
        "Cost(gre, us205)",
        "∀x (ProvideAid(ets, x) ↔ EconomicHardship(x))",
        "EconomicHardship(x) ↔ ¬(¬(LiveIn(x, singleParentFamily)) ∧ OutOfWork(tom))",
        "LiveIn(tom, singleParentFamily)",
        "OutOfWork(tom)"
      ],
      "fol_conc": "¬(∃x (ProvideAid(ets, x)))",
      "perplexity": 1.5631322860717773,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 163
  },
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendEngage(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x, y)",
        "Student(x, y)",
        "YoungChildTeenager(x)",
        "WishFurtherEducation(x)"
      ],
      "fol_consts": [
        "bonnie",
        "School"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → (AttendEngage(x) ∧ Student(x, School)))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x, SchoolDance) → ¬Student(x, School))",
        "∀x (InactiveDisinterested(x) → Chaperone(x, SchoolDance))",
        "∀x (YoungChildTeenager(x) ∧ WishFurtherEducation(x) → (Student(x, School)))",
        "(AttendEngage(bonnie) ∧ Student(bonnie, School)) ⊕ ¬(AttendEngage(bonnie) ∨ Student(bonnie, School))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": [
        1.094003438949585,
        1.01052725315094
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Disinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "Wish(x, y)",
        "Young(x)",
        "Teenager(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) ∧ Frequent(x) → (Attend(x) ∧ Engaged(x)))",
        "∀x (Perform(x) ∧ Frequent(x)) ⊕ (Inactive(x) ∧ Disinterested(x))",
        "∀x (Chaperone(x) → ¬(Student(x) ∧ Attend(x)))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x))",
        "∀x ((Young(x) ∧ Teenager(x) ∧ Wish(x, academic)) → (Student(x) ∧ Attend(x)))",
        "(Attend(bonnie) ∧ Engaged(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Engaged(bonnie))"
      ],
      "fol_conc": "Perform(bonnie) ∧ Frequent(bonnie)",
      "perplexity": 1.1217288970947266,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendAndEngaged(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x, y)",
        "Student(x, y)",
        "WishToFurtherAcademicCareers(x)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → AttendAndEngaged(x))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x, school) → ¬Student(x, school))",
        "∀x (InactiveDisinterested(x) → Chaperone(x, school))",
        "∀x (YoungChildOrTeenager(x) ∧ WishToFurtherAcademicCareers(x) → Student(x, school))",
        "(AttendAndEngaged(bonnie) ∧ Student(bonnie, school)) ⊕ ¬((AttendAndEngaged(bonnie) ∧ Student(bonnie, school)))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": 1.1417597532272339,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 164
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlayFor(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robertLewandowski, bayernMunchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "Star(robertLewandowski)",
      "perplexity": [
        1.0497143268585205,
        1.0285565853118896
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Play(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski",
        "bayern",
        "munchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Play(x, y))"
      ],
      "fol_conc": "Star(robert)",
      "perplexity": 1.2603596448898315,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlaysFor(x, y)",
        "SoccerPlayer(x)",
        "Striker(x)"
      ],
      "fol_consts": [
        "robert lewandowski",
        "bayern munchen"
      ],
      "fol_rules": [
        "Striker(robert lewandowski)",
        "(∃y (SoccerPlayer(y) ∧ Striker(y)))",
        "Left(robert lewandowski, bayern munchen)",
        "∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "Striker(robert lewandowski)",
      "perplexity": 2.175220489501953,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 165
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)",
        "NetflixShow(x)"
      ],
      "fol_consts": [
        "stranger_things",
        "karen",
        "lisa",
        "black_mirror"
      ],
      "fol_rules": [
        "Popular(stranger_things)",
        "∀x (Popular(x) → BingeWatch(karen, x))",
        "∀x (BingeWatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, black_mirror)",
        "NetflixShow(black_mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, x, lisa))"
      ],
      "fol_conc": "Share(karen, stranger_things, lisa)",
      "perplexity": [
        1.0361075401306152,
        1.0165950059890747
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Netflix(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "strangerthings",
        "karen",
        "lisa",
        "blackmirror"
      ],
      "fol_rules": [
        "Popular(strangerthings)",
        "Netflix(strangerthings)",
        "∀x (Netflix(x) ∧ Popular(x) → Bingewatch(karen, x))",
        "∀x (Bingewatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, blackmirror)",
        "Netflix(blackmirror)",
        "∀x (Bingewatch(karen, x) → Share(karen, lisa, x))"
      ],
      "fol_conc": "Share(karen, lisa, strangerthings)",
      "perplexity": 1.1719410419464111,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular(x)",
        "NetflixShow(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "stranger things",
        "karen",
        "lisa",
        "black mirror"
      ],
      "fol_rules": [
        "Popular(stranger things)",
        "∀x (NetflixShow(x) ∧ Popular(x) → BingeWatch(karen, x))",
        "(∃x (BingeWatch(karen, x))) ↔ (Download(karen, x))",
        "¬Download(karen, black mirror)",
        "NetflixShow(black mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, lisa, x))"
      ],
      "fol_conc": "Share(karen, lisa, stranger things)",
      "perplexity": 1.114923119544983,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 166
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousCapital(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "HostedParalympics(x, y)",
        "LargestCity(x, y)",
        "University(x)",
        "TopRanked(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "asiaPacific"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulousCapital(beijing)",
        "LocatedIn(beijing, china)",
        "HostedOlympics(beijing, summer)",
        "HostedParalympics(beijing, summer)",
        "∀x (HostedOlympics(x, summer) ∧ HostedParalympics(x, summer) → HostedOlympics(x, winter) ∧ HostedParalympics(x, winter))",
        "∃x (University(x) ∧ LocatedIn(x, china) ∧ TopRanked(x))"
      ],
      "fol_conc": "LargestCity(beijing, china)",
      "perplexity": [
        1.0924162864685059,
        1.0156699419021606
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Most(x, y)",
        "Located(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Largest(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics",
        "paralympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Most(beijing, city)",
        "Located(beijing, china)",
        "Hosted(beijing, olympics)",
        "Hosted(beijing, paralympics)",
        "∃x (University(x) ∧ Located(x, beijing))",
        "∃x (University(x) ∧ Located(x, beijing))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2643002271652222,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, z)",
        "RankedAmongBestUniversities(x)",
        "LocatedIn(y, x)",
        "LocatedIn(z, w)",
        "LocatedIn(a, b)"
      ],
      "fol_consts": [
        "beijing",
        "people's republic of china",
        "asia-pacific",
        "world",
        "2008 summer olympics",
        "2008 summer paralympics games",
        "2008 summer olympics",
        "2008 summer paralympics games"
      ],
      "fol_rules": [
        "CapitalOf(beijing, people's republic of china)",
        "MostPopulousNationalCapitalCity(beijing)",
        "LocatedIn(beijing, northern china)",
        "HostedOlympics(beijing, 2008 summer olympics)",
        "HostedOlympics(beijing, 2008 summer paralympics games)",
        "∃x (RankedAmongBestUniversities(x) ∧ LocatedIn(x, beijing))",
        "LocatedIn(northern china, people's republic of china)"
      ],
      "fol_conc": "LocatedIn(beijing, z)",
      "perplexity": 2.3549418449401855,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 167
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "Rating(x, y)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (Rating(x, y) ∧ y > 9 → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ y > 9)",
        "(Rating(subway, y) ∧ y > 9) ⊕ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0505093336105347,
        1.0153346061706543
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Rating(x, y) ∧ y > 9 → Listed(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬Many(x))",
        "∀x (Rating(x, 90) → Listed(x))",
        "∃x (¬Takeout(x) ∧ Many(x))",
        "∀x (Popular(x) → Rating(x, 90))",
        "Rating(subway, 90) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Many(subway)",
      "perplexity": 1.2904717922210693,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Listed(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "PopularLocal(x)",
        "ReceiveReviews(x)"
      ],
      "fol_consts": [
        "subway",
        "yelp",
        "nine"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬ReceiveReviews(x))",
        "∀x (Rating(x, nine) → Listed(x))",
        "∃x ((¬Takeout(x) ∧ ReceiveReviews(x)))",
        "∀x (PopularLocal(x) → Rating(x, y) ∧ (∃z (Rating(z, z) ∧ (Rating(y, nine)))))",
        "(Rating(subway, nine) ∨ PopularLocal(subway))"
      ],
      "fol_conc": "(Takeout(subway) ∧ ¬ReceiveReviews(subway))",
      "perplexity": 1.7005486488342285,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 168
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "LiveInTaxHaven(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LiveInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.0409471988677979,
        1.0164481401443481
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic",
        "taxhaven"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ∨ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Livesin(x, taxhaven))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, taxhaven)"
      ],
      "fol_conc": "¬Livesin(djokovic, taxhaven)",
      "perplexity": 1.156528115272522,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "WellPaid(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LivesInTaxHaven(djokovic)",
      "perplexity": 1.0412042140960693,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 169
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x)",
        "Arrival(x)"
      ],
      "fol_consts": [
        "susan",
        "lga",
        "john"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Departure(x) ∧ Arrival(y) → x ≠ y)",
        "Flies(john, lga)"
      ],
      "fol_conc": "Flies(susan, lga)",
      "perplexity": [
        1.1265461444854736,
        1.0374109745025635
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ∀y (Departure(x) ∧ Arrival(y) → x ≠ y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x)",
        "Arrival(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Flies(x, y) → ¬(Departure(x) ∧ Arrival(x)))",
        "Flies(john, lga)"
      ],
      "fol_conc": "Departure(susan, lga)",
      "perplexity": 1.2447683811187744,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Departure/1, Departure/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Departure/1, Departure/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "DepartureAirport(x)",
        "ArrivalAirport(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "(∀x (Flies(x, z) → ¬(ArrivalAirport(x) ∧ DepartureAirport(x))))",
        "Flies(john, lga)"
      ],
      "fol_conc": "DepartureAirport(susan, lga)",
      "perplexity": 1.3297176361083984,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DepartureAirport/1, DepartureAirport/2.\n\n\nFatal error:  The following symbols are used with multiple arities: DepartureAirport/1, DepartureAirport/2"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 170
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "Gains(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, Knowledge))",
        "∀x ∀y (Reads(x, y) → Gains(x))",
        "∀x (Gains(x) → Smarter(x))",
        "Book(walden)",
        "Reads(harry, walden)"
      ],
      "fol_conc": "Contains(walden, Knowledge)",
      "perplexity": [
        1.0882973670959473,
        1.0259472131729126
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "Gain(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, knowledge))",
        "∀x (Read(x, y) → Gain(x))",
        "∀x (Gain(x) → Smarter(x))",
        "Book(walden)",
        "Read(harry, walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.1919313669204712,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "GainsKnowledge(x)",
        "BecomeSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry thoreau"
      ],
      "fol_rules": [
        "∀x (Contains(x, knowledge))",
        "∀x ∀y (Read(x, y) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → BecomeSmarter(x))",
        "Read(harry, walden)",
        "¬Contains(walden, knowledge)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.303511142730713,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 171
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, >1) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, >1))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "(¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x)))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": [
        1.0532257556915283,
        1.0238925218582153
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, multiple) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, multiple))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬(∃x (Boeing707(x) ∧ Plane(x)))"
      ],
      "fol_conc": "¬(Boeing707(greyhound) ∧ Plane(greyhound))",
      "perplexity": 1.1479668617248535,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound",
        "greyhound"
      ],
      "fol_rules": [
        "∀x (∃y (Transport(x, y)) → ¬Empty(x))",
        "∀x (Airline(x) → ∃y (Transport(x, y)))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬(∃x (Boeing707(x) ∧ Plane(x)) ∨ ¬Airline(greyhound))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": 1.2585433721542358,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 172
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "F1Visa(y)",
        "J1Visa(y)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, F1Visa(y)) ⊕ HasVisa(x, J1Visa(y))))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, F1Visa(y)) ∧ WantsToWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, J1Visa(y))",
      "perplexity": [
        1.0549362897872925,
        1.0150333642959595
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, F1Visa(y)) ⊕ HasVisa(x, J1Visa(y))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Incountry(x, y)",
        "Visa(x, y)",
        "Needs(x, y)",
        "Student(x)",
        "Work(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike",
        "us"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Incountry(x, us) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Incountry(x, us) ∧ F1visa(x) ∧ Work(x) → Needs(x, cpt))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.3624697923660278,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "F1Visa(y)",
        "J1Visa(y)",
        "NeedsToApplyCPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, y) ∧ F1Visa(y) ∨ J1Visa(y))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(y) ∧ WantsToWork(x) → NeedsToApplyCPT(x))",
        "InternationalStudent(mike)",
        "NeedsToApplyCPT(mike)"
      ],
      "fol_conc": "J1Visa(mike)",
      "perplexity": 1.2339725494384766,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 173
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "NovelWriter(x)",
        "Created(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "american_city",
        "boston",
        "year_2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "American(dani_shapiro)",
        "WrittenBy(dani_shapiro, family_history)",
        "Novel(family_history) ∧ WrittenBy(dani_shapiro, family_history) ∧ Year(family_history, year_2003)",
        "Created(dani_shapiro, family_secrets)",
        "City(boston)",
        "City(american_city)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0560157299041748,
        1.0139039754867554
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Born(x, y)",
        "American(x)",
        "Write(x, y)",
        "Novelwriter(x)",
        "Written(x, y, z)",
        "City(x)",
        "Americancity(x)"
      ],
      "fol_consts": [
        "dani",
        "familyhistory",
        "familysecrets",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x ∀y (Novel(y) ∧ Write(x, y) → Novelwriter(x))",
        "American(dani)",
        "Write(dani, familyhistory)",
        "Novel(familyhistory) ∧ Written(familyhistory, dani, 2003)",
        "Write(dani, familysecrets) ∧ Podcast(familysecrets)",
        "City(boston)",
        "Americancity(boston)"
      ],
      "fol_conc": "Novel(familysecrets)",
      "perplexity": 1.2318751811981201,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "BornIn(x, y)",
        "American(x)",
        "WrittenBy(x, y)",
        "Writer(x)",
        "Write(x, y, z)",
        "City(x)"
      ],
      "fol_consts": [
        "dani shapiro",
        "american city",
        "family history",
        "family secrets",
        "boston",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american city) → American(x))",
        "∀x ∀y ((Novel(y) ∧ WrittenBy(x, y)) → Writer(x))",
        "American(dani shapiro)",
        "WrittenBy(dani shapiro, family history)",
        "Novel(family history) ∧ Write(dani shapiro, family history, 2003)",
        "Podcast(family secrets)",
        "City(boston)",
        "BornIn(american city, boston)"
      ],
      "fol_conc": "Novel(family secrets)",
      "perplexity": 1.1579803228378296,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 174
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y, z)",
        "Managed(x)",
        "DepositRequired(x)",
        "DepositAmount(x, y)",
        "Rent(x, y)",
        "Pet(x)",
        "Own(x, y)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "two_thousand",
        "fifteen_hundred"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(fluffy, tom, x))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x (DepositAmount(x, y) → (y = two_thousand ∨ y > two_thousand))",
        "Own(tom, fluffy)",
        "∀x (Pet(x) → Pet(fluffy))",
        "Managed(olive_garden)",
        "Rent(olive_garden, two_thousand)",
        "(Allowed(fluffy, tom, x) ∧ DepositAmount(x, y) ∧ y ≤ fifteen_hundred) → Do(tom, x)",
        "two_thousand > fifteen_hundred"
      ],
      "fol_conc": "Do(tom, olive_garden)",
      "perplexity": [
        1.0853548049926758,
        1.018424153327942
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DepositAmount(x, y) → (y = two_thousand ∨ y > two_thousand))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Managed(x)",
        "Allowed(x, y)",
        "Deposit(x, y)",
        "Equal(x, y)",
        "More(x, y)",
        "Pet(x)",
        "Owner(x, y)",
        "Rent(x, y)",
        "Willrent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x, rent))",
        "∀x (Deposit(x, rent) → (Equal(x, rent) ∨ More(x, rent)))",
        "Owner(tom, fluffy)",
        "∀x (Pet(x) → Cats(x))",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "Willrent(tom, olivegarden) ↔ (Allowed(olivegarden, fluffy) ∧ More(1500, deposit))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Willrent(tom, olivegarden)",
      "perplexity": 1.1930792331695557,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Deposit/2, Deposit/0, Rent/2, Rent/0, Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Deposit/2, Deposit/0, Rent/2, Rent/0, Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Allowed(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "Equal(x, y)",
        "MoreThan(x, y)",
        "Pet(x)",
        "Own(x, y)",
        "RentApartment(x, y)",
        "RentApartment(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive garden",
        "$1500",
        "$2000"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ Allowed(fluffy, x))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → (Equal(x, $1500) ∨ MoreThan(x, $1500)))",
        "Own(tom, fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive garden)",
        "RentApartment($2000, olive garden)",
        "∀x (RentApartment(x, y) ↔ Allowed(fluffy, y) ∧ DepositRequired(y))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "RentApartment(tom, olive garden)",
      "perplexity": 1.3027429580688477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 175
  },
  {
    "id": 74,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Joe's license plate begins with the number 34.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "BeginsWith(x, y)",
        "From(x, y)",
        "IsIstanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "thirtyFour",
        "thirtyFive",
        "istanbul"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → BeginsWith(x, thirtyFour))",
        "∀x (¬BeginsWith(x, thirtyFour) → ¬From(x, istanbul))",
        "From(joe'sPlate, istanbul)",
        "BeginsWith(tom'sPlate, thirtyFive)",
        "∀x (BeginsWith(x, thirtyFive) → ¬BeginsWith(x, thirtyFour))"
      ],
      "fol_conc": "BeginsWith(joe'sPlate, thirtyFour)",
      "perplexity": [
        1.0831153392791748,
        1.021319031715393
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)",
        "Istanbul(y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "¬(From(x, istanbul)) ∨ Begins(x, 34)",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "Begins(joe, 34)",
      "perplexity": 1.2214995622634888,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BeginsWith(x, y)",
        "From(x, y)",
        "LicensePlate(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (BeginsWith(x, 34) → From(x, istanbul))",
        "¬BeginsWith(x, 34) → ¬From(x, istanbul)",
        "LicensePlate(joe)",
        "BeginsWith(tom, 35)",
        "(BeginsWith(x, 35) → ¬BeginsWith(x, 34))"
      ],
      "fol_conc": "BeginsWith(joe, 34)",
      "perplexity": 1.1002910137176514,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 176
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkIn(x, y)",
        "From(x, y)",
        "PartTimeJob(x)",
        "Take(x, y)",
        "InstructedBy(x, y)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer_science",
        "lab",
        "database"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computer_science))",
        "∀x (PartTimeJob(x) ∧ Student(x) → WorkIn(x, library))",
        "∀x (Take(x, database) → From(x, computer_science))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → Take(x, database))",
        "∀x (WorkIn(x, lab) → InstructedBy(x, david))",
        "Student(james) ∧ WorkIn(james, lab)",
        "¬(PartTimeJob(jack) ∨ WorkIn(jack, lab))"
      ],
      "fol_conc": " (Take(james, database) ∨ PartTimeJob(james))",
      "perplexity": [
        1.0604417324066162,
        1.0143828392028809
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Take(x, y)",
        "Instructed(x, y)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "university",
        "database"
      ],
      "fol_rules": [
        "¬(∃x (Student(x) ∧ Work(x, library) ∧ From(x, computer)))",
        "∀x (Parttime(x) ∧ Student(x) → Work(x, library))",
        "∀x (Take(x, database) → From(x, computer))",
        "∀x (Instructed(x, david) → Take(x, database))",
        "∀x (Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.206038475036621,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorksIn(x, y)",
        "FromDepartment(x, y)",
        "PartTimeJob(x)",
        "InstructedBy(x, y)",
        "Takes(x, y)"
      ],
      "fol_consts": [
        "james",
        "david",
        "library",
        "computer science department",
        "university",
        "lab"
      ],
      "fol_rules": [
        "¬(∃x (Student(x) ∧ WorksIn(x, library) ∧ FromDepartment(x, computer science department)))",
        "∀x ((PartTimeJob(x) ∧ Student(x)) → WorksIn(x, library))",
        "∀x (Takes(x, database course) → FromDepartment(x, computer science department))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → Takes(x, database course))",
        "∀x (WorksIn(x, lab) → InstructedBy(x, david))",
        "Student(james) ∧ WorksIn(james, lab)",
        "¬((PartTimeJob(jack) ∨ WorksIn(jack, lab)))"
      ],
      "fol_conc": "(Takes(james, database course) ⊕ PartTimeJob(james))",
      "perplexity": 1.388476014137268,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 177
  },
  {
    "id": 109,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Foodie(x)",
        "Frequent(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x)))",
        "∀x (Foodie(x) ∧ Frequent(x) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ Frequent(peter)) ⊕ HighIncome(peter)",
      "perplexity": [
        1.0582404136657715,
        1.0268410444259644
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Goout(x)",
        "Onlychild(x)",
        "Busy(x)",
        "Highincome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x) ∧ Enjoy(x)))",
        "∀x (Foodie(x) ∧ Goout(x) → Spill(x))",
        "∀x (Onlychild(x) → (Tidy(x) ∧ Enjoy(x)))",
        "∀x (Busy(x) → Onlychild(x))",
        "∀x (Highincome(x) → Busy(x))",
        "(Spill(peter) ∧ Onlychild(peter)) ⊕ ¬(Spill(peter) ∨ Onlychild(peter))"
      ],
      "fol_conc": "Foodie(peter) ∧ Goout(peter) ∨ Highincome(peter)",
      "perplexity": 1.1662999391555786,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "GoOutFrequently(x)",
        "OnlyChild(x)",
        "BusyParent(x)",
        "HighNetIncome(h)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ ¬EnjoyCleaning(x))",
        "(Foodie(x) ∧ GoOutFrequently(x)) → Spill(x)",
        "(OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "BusyParent(p) → OnlyChild(p)",
        "HighNetIncome(h) → BusyParent(p)",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ GoOutFrequently(peter)) ⊕ HighNetIncome(h)",
      "perplexity": 1.3598248958587646,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 178
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Likes(x)",
        "Access(x, y)",
        "Compose(x)",
        "WantsCompose(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(x) → WantsCompose(x))",
        "∀x (Access(x, Program) → Compose(x))",
        "∀x (Compose(x) ∧ WantsCompose(x) → Compose(x))"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose(george)",
      "perplexity": [
        1.1005382537841797,
        1.0325297117233276
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Compose(x)",
        "Access(x, y)",
        "Can(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(x) → Wants(x))",
        "∀x (Access(x, program) → Can(x, compose))",
        "∀x (Can(x, compose) ∧ Wants(x) → Compose(x))"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george, compose)",
      "perplexity": 1.2290258407592773,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x)",
        "Compose(x)",
        "Access(x, y)",
        "Want(x)",
        "Want(y)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x (Likes(x) → Want(x))",
        "∀x (Access(x, program) → Compose(x))",
        "∀x (Compose(x) ∧ Want(x) → Compose(x))"
      ],
      "fol_conc": "(¬Compose(george) → ¬(Compose(george)))",
      "perplexity": 3.3682847023010254,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 179
  },
  {
    "id": 203,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva was loaned out to a football club.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "PlaysFor(x, y)",
        "LoanedOutTo(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton_silva",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton_silva, 1995)",
        "KnownAs(ailton_silva, ailton)",
        "FootballPlayer(ailton_silva)",
        "PlaysFor(ailton_silva, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)",
        "LoanedOutTo(ailton_silva, braga)"
      ],
      "fol_conc": "LoanedOutTo(ailton_silva, x)",
      "perplexity": [
        1.0702838897705078,
        1.0173572301864624
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(x)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton, 1995)",
        "Known(ailton, ailton)",
        "Footballer(ailton)",
        "Loaned(ailton, braga)",
        "Plays(ailton, nautico)",
        "Club(braga)",
        "Club(nautico)",
        "Club(fluminense)",
        "Brazilian(ailton)"
      ],
      "fol_conc": "∃x (Loaned(ailton, x) ∧ Club(x))",
      "perplexity": 1.2402011156082153,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "IsFootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "IsFootballClub(x)"
      ],
      "fol_consts": [
        "ailton silva",
        "1995",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "Born(ailton silva, 1995)",
        "KnownAs(ailton silva, ailton silva)",
        "IsFootballPlayer(ailton silva)",
        "LoanedTo(ailton silva, braga)",
        "PlaysFor(ailton silva, nautico)",
        "IsFootballClub(nautico)",
        "IsFootballClub(braga)",
        "IsFootballClub(fluminense)"
      ],
      "fol_conc": "∃y (LoanedTo(ailton silva, y) ∧ IsFootballClub(y))",
      "perplexity": 1.339309573173523,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 180
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)",
        "HasGlu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "humans",
        "fever",
        "headache",
        "musclePains",
        "tired",
        "coughing"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccursIn(monkeypoxVirus, humans)",
        "OccursIn(monkeypoxVirus, certainAnimals)",
        "Human(humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "Mammal(certainAnimals)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "FeelTired(x) → HasGlu(x)"
      ],
      "fol_conc": "SymptomOf(coughing, monkeypox)",
      "perplexity": [
        1.1452715396881104,
        1.0182801485061646
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(fever, monkeypox)",
        "Symptom(headache, monkeypox)",
        "Symptom(musclepains, monkeypox)",
        "Symptom(tiredness, monkeypox)",
        "Feel(humans, glu)",
        "Feel(humans, tirednes)"
      ],
      "fol_conc": "Symptom(coughing, monkeypox)",
      "perplexity": 1.252568244934082,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(y, x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox virus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypox virus)",
        "OccurIn(monkeypox virus, humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(muscle pains, monkeypox)",
        "SymptomOf(fever, glu)",
        "FeelTired(glu)"
      ],
      "fol_conc": "SymptomOf(c, monkeypox)",
      "perplexity": 1.486334204673767,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 161
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Lands(x)",
        "Hawk(x)",
        "Bird(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Lands(x))",
      "perplexity": [
        1.0983628034591675,
        1.02764093875885
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Land(x)",
        "Bird(x)",
        "Hawk(x)"
      ],
      "fol_consts": [
        "none"
      ],
      "fol_rules": [
        "¬Land(x) ∧ Hawk(x)"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": 1.6184450387954712,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(x)",
        "Land(x)"
      ],
      "fol_consts": [
        "hawk",
        "bird"
      ],
      "fol_rules": [
        "¬(Hawk(x) ∧ Land(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": 1.3275210857391357,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 162
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Hardship(x)",
        "SingleParent(x)",
        "Unemployed(x, y)"
      ],
      "fol_consts": [
        "gre",
        "us_205",
        "ets",
        "tom",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, us_205)",
        "∀x (Hardship(x) → Provide(ets, x))",
        "∀x (Hardship(x) ↔ (LittleMoney(x) ∨ FewResources(x)))",
        "SingleParent(tom)",
        "Unemployed(tom, year)"
      ],
      "fol_conc": "¬∃x (Provide(ets, x))",
      "perplexity": [
        1.1217999458312988,
        1.0230932235717773
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Economic(x)",
        "Single(x)",
        "Out(x, y)",
        "Financial(x, y)"
      ],
      "fol_consts": [
        "gre",
        "us",
        "205",
        "ets",
        "tom",
        "dad",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, us) ∧ ∀x (Cost(x, us) ∧ Provide(ets, x) → ¬Economic(x))",
        "Provide(ets, x) → Economic(x)",
        "Economic(x) ∧ Single(tom) ∧ Out(dad, year)"
      ],
      "fol_conc": "¬Financial(ets, gre)",
      "perplexity": 1.5002387762069702,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cost(x, y)",
        "ProvideAid(x, y)",
        "EconomicHardship(x)",
        "LiveIn(x, y)",
        "OutOfWork(y)"
      ],
      "fol_consts": [
        "gre",
        "tom",
        "us205",
        "singleParentFamily"
      ],
      "fol_rules": [
        "Cost(gre, us205)",
        "∀x (ProvideAid(ets, x) ↔ EconomicHardship(x))",
        "EconomicHardship(x) ↔ ¬(¬(LiveIn(x, singleParentFamily)) ∧ OutOfWork(tom))",
        "LiveIn(tom, singleParentFamily)",
        "OutOfWork(tom)"
      ],
      "fol_conc": "¬(∃x (ProvideAid(ets, x)))",
      "perplexity": 1.5631322860717773,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 163
  },
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendEngage(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x, y)",
        "Student(x, y)",
        "YoungChildTeenager(x)",
        "WishFurtherEducation(x)"
      ],
      "fol_consts": [
        "bonnie",
        "School"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → (AttendEngage(x) ∧ Student(x, School)))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x, SchoolDance) → ¬Student(x, School))",
        "∀x (InactiveDisinterested(x) → Chaperone(x, SchoolDance))",
        "∀x (YoungChildTeenager(x) ∧ WishFurtherEducation(x) → (Student(x, School)))",
        "(AttendEngage(bonnie) ∧ Student(bonnie, School)) ⊕ ¬(AttendEngage(bonnie) ∨ Student(bonnie, School))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": [
        1.094003438949585,
        1.01052725315094
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Disinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "Wish(x, y)",
        "Young(x)",
        "Teenager(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) ∧ Frequent(x) → (Attend(x) ∧ Engaged(x)))",
        "∀x (Perform(x) ∧ Frequent(x)) ⊕ (Inactive(x) ∧ Disinterested(x))",
        "∀x (Chaperone(x) → ¬(Student(x) ∧ Attend(x)))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x))",
        "∀x ((Young(x) ∧ Teenager(x) ∧ Wish(x, academic)) → (Student(x) ∧ Attend(x)))",
        "(Attend(bonnie) ∧ Engaged(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Engaged(bonnie))"
      ],
      "fol_conc": "Perform(bonnie) ∧ Frequent(bonnie)",
      "perplexity": 1.1217288970947266,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendAndEngaged(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x, y)",
        "Student(x, y)",
        "WishToFurtherAcademicCareers(x)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → AttendAndEngaged(x))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x, school) → ¬Student(x, school))",
        "∀x (InactiveDisinterested(x) → Chaperone(x, school))",
        "∀x (YoungChildOrTeenager(x) ∧ WishToFurtherAcademicCareers(x) → Student(x, school))",
        "(AttendAndEngaged(bonnie) ∧ Student(bonnie, school)) ⊕ ¬((AttendAndEngaged(bonnie) ∧ Student(bonnie, school)))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": 1.1417597532272339,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 164
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlayFor(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robertLewandowski, bayernMunchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "Star(robertLewandowski)",
      "perplexity": [
        1.0497143268585205,
        1.0285565853118896
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Play(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski",
        "bayern",
        "munchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Play(x, y))"
      ],
      "fol_conc": "Star(robert)",
      "perplexity": 1.2603596448898315,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlaysFor(x, y)",
        "SoccerPlayer(x)",
        "Striker(x)"
      ],
      "fol_consts": [
        "robert lewandowski",
        "bayern munchen"
      ],
      "fol_rules": [
        "Striker(robert lewandowski)",
        "(∃y (SoccerPlayer(y) ∧ Striker(y)))",
        "Left(robert lewandowski, bayern munchen)",
        "∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "Striker(robert lewandowski)",
      "perplexity": 2.175220489501953,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 165
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)",
        "NetflixShow(x)"
      ],
      "fol_consts": [
        "stranger_things",
        "karen",
        "lisa",
        "black_mirror"
      ],
      "fol_rules": [
        "Popular(stranger_things)",
        "∀x (Popular(x) → BingeWatch(karen, x))",
        "∀x (BingeWatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, black_mirror)",
        "NetflixShow(black_mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, x, lisa))"
      ],
      "fol_conc": "Share(karen, stranger_things, lisa)",
      "perplexity": [
        1.0361075401306152,
        1.0165950059890747
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Netflix(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "strangerthings",
        "karen",
        "lisa",
        "blackmirror"
      ],
      "fol_rules": [
        "Popular(strangerthings)",
        "Netflix(strangerthings)",
        "∀x (Netflix(x) ∧ Popular(x) → Bingewatch(karen, x))",
        "∀x (Bingewatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, blackmirror)",
        "Netflix(blackmirror)",
        "∀x (Bingewatch(karen, x) → Share(karen, lisa, x))"
      ],
      "fol_conc": "Share(karen, lisa, strangerthings)",
      "perplexity": 1.1719410419464111,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular(x)",
        "NetflixShow(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "stranger things",
        "karen",
        "lisa",
        "black mirror"
      ],
      "fol_rules": [
        "Popular(stranger things)",
        "∀x (NetflixShow(x) ∧ Popular(x) → BingeWatch(karen, x))",
        "(∃x (BingeWatch(karen, x))) ↔ (Download(karen, x))",
        "¬Download(karen, black mirror)",
        "NetflixShow(black mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, lisa, x))"
      ],
      "fol_conc": "Share(karen, lisa, stranger things)",
      "perplexity": 1.114923119544983,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 166
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousCapital(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "HostedParalympics(x, y)",
        "LargestCity(x, y)",
        "University(x)",
        "TopRanked(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "asiaPacific"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulousCapital(beijing)",
        "LocatedIn(beijing, china)",
        "HostedOlympics(beijing, summer)",
        "HostedParalympics(beijing, summer)",
        "∀x (HostedOlympics(x, summer) ∧ HostedParalympics(x, summer) → HostedOlympics(x, winter) ∧ HostedParalympics(x, winter))",
        "∃x (University(x) ∧ LocatedIn(x, china) ∧ TopRanked(x))"
      ],
      "fol_conc": "LargestCity(beijing, china)",
      "perplexity": [
        1.0924162864685059,
        1.0156699419021606
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Most(x, y)",
        "Located(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Largest(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics",
        "paralympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Most(beijing, city)",
        "Located(beijing, china)",
        "Hosted(beijing, olympics)",
        "Hosted(beijing, paralympics)",
        "∃x (University(x) ∧ Located(x, beijing))",
        "∃x (University(x) ∧ Located(x, beijing))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2643002271652222,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, z)",
        "RankedAmongBestUniversities(x)",
        "LocatedIn(y, x)",
        "LocatedIn(z, w)",
        "LocatedIn(a, b)"
      ],
      "fol_consts": [
        "beijing",
        "people's republic of china",
        "asia-pacific",
        "world",
        "2008 summer olympics",
        "2008 summer paralympics games",
        "2008 summer olympics",
        "2008 summer paralympics games"
      ],
      "fol_rules": [
        "CapitalOf(beijing, people's republic of china)",
        "MostPopulousNationalCapitalCity(beijing)",
        "LocatedIn(beijing, northern china)",
        "HostedOlympics(beijing, 2008 summer olympics)",
        "HostedOlympics(beijing, 2008 summer paralympics games)",
        "∃x (RankedAmongBestUniversities(x) ∧ LocatedIn(x, beijing))",
        "LocatedIn(northern china, people's republic of china)"
      ],
      "fol_conc": "LocatedIn(beijing, z)",
      "perplexity": 2.3549418449401855,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 167
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "Rating(x, y)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (Rating(x, y) ∧ y > 9 → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ y > 9)",
        "(Rating(subway, y) ∧ y > 9) ⊕ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0505093336105347,
        1.0153346061706543
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Rating(x, y) ∧ y > 9 → Listed(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬Many(x))",
        "∀x (Rating(x, 90) → Listed(x))",
        "∃x (¬Takeout(x) ∧ Many(x))",
        "∀x (Popular(x) → Rating(x, 90))",
        "Rating(subway, 90) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Many(subway)",
      "perplexity": 1.2904717922210693,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Listed(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "PopularLocal(x)",
        "ReceiveReviews(x)"
      ],
      "fol_consts": [
        "subway",
        "yelp",
        "nine"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬ReceiveReviews(x))",
        "∀x (Rating(x, nine) → Listed(x))",
        "∃x ((¬Takeout(x) ∧ ReceiveReviews(x)))",
        "∀x (PopularLocal(x) → Rating(x, y) ∧ (∃z (Rating(z, z) ∧ (Rating(y, nine)))))",
        "(Rating(subway, nine) ∨ PopularLocal(subway))"
      ],
      "fol_conc": "(Takeout(subway) ∧ ¬ReceiveReviews(subway))",
      "perplexity": 1.7005486488342285,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 168
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "LiveInTaxHaven(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LiveInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.0409471988677979,
        1.0164481401443481
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic",
        "taxhaven"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ∨ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Livesin(x, taxhaven))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, taxhaven)"
      ],
      "fol_conc": "¬Livesin(djokovic, taxhaven)",
      "perplexity": 1.156528115272522,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "WellPaid(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LivesInTaxHaven(djokovic)",
      "perplexity": 1.0412042140960693,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 169
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x)",
        "Arrival(x)"
      ],
      "fol_consts": [
        "susan",
        "lga",
        "john"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Departure(x) ∧ Arrival(y) → x ≠ y)",
        "Flies(john, lga)"
      ],
      "fol_conc": "Flies(susan, lga)",
      "perplexity": [
        1.1265461444854736,
        1.0374109745025635
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ∀y (Departure(x) ∧ Arrival(y) → x ≠ y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x)",
        "Arrival(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Flies(x, y) → ¬(Departure(x) ∧ Arrival(x)))",
        "Flies(john, lga)"
      ],
      "fol_conc": "Departure(susan, lga)",
      "perplexity": 1.2447683811187744,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Departure/1, Departure/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Departure/1, Departure/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "DepartureAirport(x)",
        "ArrivalAirport(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "(∀x (Flies(x, z) → ¬(ArrivalAirport(x) ∧ DepartureAirport(x))))",
        "Flies(john, lga)"
      ],
      "fol_conc": "DepartureAirport(susan, lga)",
      "perplexity": 1.3297176361083984,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DepartureAirport/1, DepartureAirport/2.\n\n\nFatal error:  The following symbols are used with multiple arities: DepartureAirport/1, DepartureAirport/2"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 170
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "Gains(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, Knowledge))",
        "∀x ∀y (Reads(x, y) → Gains(x))",
        "∀x (Gains(x) → Smarter(x))",
        "Book(walden)",
        "Reads(harry, walden)"
      ],
      "fol_conc": "Contains(walden, Knowledge)",
      "perplexity": [
        1.0882973670959473,
        1.0259472131729126
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "Gain(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, knowledge))",
        "∀x (Read(x, y) → Gain(x))",
        "∀x (Gain(x) → Smarter(x))",
        "Book(walden)",
        "Read(harry, walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.1919313669204712,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "GainsKnowledge(x)",
        "BecomeSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry thoreau"
      ],
      "fol_rules": [
        "∀x (Contains(x, knowledge))",
        "∀x ∀y (Read(x, y) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → BecomeSmarter(x))",
        "Read(harry, walden)",
        "¬Contains(walden, knowledge)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.303511142730713,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 171
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, >1) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, >1))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "(¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x)))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": [
        1.0532257556915283,
        1.0238925218582153
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, multiple) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, multiple))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬(∃x (Boeing707(x) ∧ Plane(x)))"
      ],
      "fol_conc": "¬(Boeing707(greyhound) ∧ Plane(greyhound))",
      "perplexity": 1.1479668617248535,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound",
        "greyhound"
      ],
      "fol_rules": [
        "∀x (∃y (Transport(x, y)) → ¬Empty(x))",
        "∀x (Airline(x) → ∃y (Transport(x, y)))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬(∃x (Boeing707(x) ∧ Plane(x)) ∨ ¬Airline(greyhound))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": 1.2585433721542358,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 172
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "F1Visa(y)",
        "J1Visa(y)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, F1Visa(y)) ⊕ HasVisa(x, J1Visa(y))))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, F1Visa(y)) ∧ WantsToWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, J1Visa(y))",
      "perplexity": [
        1.0549362897872925,
        1.0150333642959595
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, F1Visa(y)) ⊕ HasVisa(x, J1Visa(y))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Incountry(x, y)",
        "Visa(x, y)",
        "Needs(x, y)",
        "Student(x)",
        "Work(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike",
        "us"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Incountry(x, us) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Incountry(x, us) ∧ F1visa(x) ∧ Work(x) → Needs(x, cpt))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.3624697923660278,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "F1Visa(y)",
        "J1Visa(y)",
        "NeedsToApplyCPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, y) ∧ F1Visa(y) ∨ J1Visa(y))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(y) ∧ WantsToWork(x) → NeedsToApplyCPT(x))",
        "InternationalStudent(mike)",
        "NeedsToApplyCPT(mike)"
      ],
      "fol_conc": "J1Visa(mike)",
      "perplexity": 1.2339725494384766,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 173
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "NovelWriter(x)",
        "Created(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "american_city",
        "boston",
        "year_2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "American(dani_shapiro)",
        "WrittenBy(dani_shapiro, family_history)",
        "Novel(family_history) ∧ WrittenBy(dani_shapiro, family_history) ∧ Year(family_history, year_2003)",
        "Created(dani_shapiro, family_secrets)",
        "City(boston)",
        "City(american_city)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0560157299041748,
        1.0139039754867554
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Born(x, y)",
        "American(x)",
        "Write(x, y)",
        "Novelwriter(x)",
        "Written(x, y, z)",
        "City(x)",
        "Americancity(x)"
      ],
      "fol_consts": [
        "dani",
        "familyhistory",
        "familysecrets",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x ∀y (Novel(y) ∧ Write(x, y) → Novelwriter(x))",
        "American(dani)",
        "Write(dani, familyhistory)",
        "Novel(familyhistory) ∧ Written(familyhistory, dani, 2003)",
        "Write(dani, familysecrets) ∧ Podcast(familysecrets)",
        "City(boston)",
        "Americancity(boston)"
      ],
      "fol_conc": "Novel(familysecrets)",
      "perplexity": 1.2318751811981201,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "BornIn(x, y)",
        "American(x)",
        "WrittenBy(x, y)",
        "Writer(x)",
        "Write(x, y, z)",
        "City(x)"
      ],
      "fol_consts": [
        "dani shapiro",
        "american city",
        "family history",
        "family secrets",
        "boston",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american city) → American(x))",
        "∀x ∀y ((Novel(y) ∧ WrittenBy(x, y)) → Writer(x))",
        "American(dani shapiro)",
        "WrittenBy(dani shapiro, family history)",
        "Novel(family history) ∧ Write(dani shapiro, family history, 2003)",
        "Podcast(family secrets)",
        "City(boston)",
        "BornIn(american city, boston)"
      ],
      "fol_conc": "Novel(family secrets)",
      "perplexity": 1.1579803228378296,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 174
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y, z)",
        "Managed(x)",
        "DepositRequired(x)",
        "DepositAmount(x, y)",
        "Rent(x, y)",
        "Pet(x)",
        "Own(x, y)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "two_thousand",
        "fifteen_hundred"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(fluffy, tom, x))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x (DepositAmount(x, y) → (y = two_thousand ∨ y > two_thousand))",
        "Own(tom, fluffy)",
        "∀x (Pet(x) → Pet(fluffy))",
        "Managed(olive_garden)",
        "Rent(olive_garden, two_thousand)",
        "(Allowed(fluffy, tom, x) ∧ DepositAmount(x, y) ∧ y ≤ fifteen_hundred) → Do(tom, x)",
        "two_thousand > fifteen_hundred"
      ],
      "fol_conc": "Do(tom, olive_garden)",
      "perplexity": [
        1.0853548049926758,
        1.018424153327942
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DepositAmount(x, y) → (y = two_thousand ∨ y > two_thousand))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Managed(x)",
        "Allowed(x, y)",
        "Deposit(x, y)",
        "Equal(x, y)",
        "More(x, y)",
        "Pet(x)",
        "Owner(x, y)",
        "Rent(x, y)",
        "Willrent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x, rent))",
        "∀x (Deposit(x, rent) → (Equal(x, rent) ∨ More(x, rent)))",
        "Owner(tom, fluffy)",
        "∀x (Pet(x) → Cats(x))",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "Willrent(tom, olivegarden) ↔ (Allowed(olivegarden, fluffy) ∧ More(1500, deposit))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Willrent(tom, olivegarden)",
      "perplexity": 1.1930792331695557,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Deposit/2, Deposit/0, Rent/2, Rent/0, Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Deposit/2, Deposit/0, Rent/2, Rent/0, Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Allowed(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "Equal(x, y)",
        "MoreThan(x, y)",
        "Pet(x)",
        "Own(x, y)",
        "RentApartment(x, y)",
        "RentApartment(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive garden",
        "$1500",
        "$2000"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ Allowed(fluffy, x))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → (Equal(x, $1500) ∨ MoreThan(x, $1500)))",
        "Own(tom, fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive garden)",
        "RentApartment($2000, olive garden)",
        "∀x (RentApartment(x, y) ↔ Allowed(fluffy, y) ∧ DepositRequired(y))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "RentApartment(tom, olive garden)",
      "perplexity": 1.3027429580688477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 175
  },
  {
    "id": 74,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Joe's license plate begins with the number 34.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "BeginsWith(x, y)",
        "From(x, y)",
        "IsIstanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "thirtyFour",
        "thirtyFive",
        "istanbul"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → BeginsWith(x, thirtyFour))",
        "∀x (¬BeginsWith(x, thirtyFour) → ¬From(x, istanbul))",
        "From(joe'sPlate, istanbul)",
        "BeginsWith(tom'sPlate, thirtyFive)",
        "∀x (BeginsWith(x, thirtyFive) → ¬BeginsWith(x, thirtyFour))"
      ],
      "fol_conc": "BeginsWith(joe'sPlate, thirtyFour)",
      "perplexity": [
        1.0831153392791748,
        1.021319031715393
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)",
        "Istanbul(y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "¬(From(x, istanbul)) ∨ Begins(x, 34)",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "Begins(joe, 34)",
      "perplexity": 1.2214995622634888,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BeginsWith(x, y)",
        "From(x, y)",
        "LicensePlate(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (BeginsWith(x, 34) → From(x, istanbul))",
        "¬BeginsWith(x, 34) → ¬From(x, istanbul)",
        "LicensePlate(joe)",
        "BeginsWith(tom, 35)",
        "(BeginsWith(x, 35) → ¬BeginsWith(x, 34))"
      ],
      "fol_conc": "BeginsWith(joe, 34)",
      "perplexity": 1.1002910137176514,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 176
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkIn(x, y)",
        "From(x, y)",
        "PartTimeJob(x)",
        "Take(x, y)",
        "InstructedBy(x, y)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer_science",
        "lab",
        "database"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computer_science))",
        "∀x (PartTimeJob(x) ∧ Student(x) → WorkIn(x, library))",
        "∀x (Take(x, database) → From(x, computer_science))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → Take(x, database))",
        "∀x (WorkIn(x, lab) → InstructedBy(x, david))",
        "Student(james) ∧ WorkIn(james, lab)",
        "¬(PartTimeJob(jack) ∨ WorkIn(jack, lab))"
      ],
      "fol_conc": " (Take(james, database) ∨ PartTimeJob(james))",
      "perplexity": [
        1.0604417324066162,
        1.0143828392028809
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Take(x, y)",
        "Instructed(x, y)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "university",
        "database"
      ],
      "fol_rules": [
        "¬(∃x (Student(x) ∧ Work(x, library) ∧ From(x, computer)))",
        "∀x (Parttime(x) ∧ Student(x) → Work(x, library))",
        "∀x (Take(x, database) → From(x, computer))",
        "∀x (Instructed(x, david) → Take(x, database))",
        "∀x (Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.206038475036621,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorksIn(x, y)",
        "FromDepartment(x, y)",
        "PartTimeJob(x)",
        "InstructedBy(x, y)",
        "Takes(x, y)"
      ],
      "fol_consts": [
        "james",
        "david",
        "library",
        "computer science department",
        "university",
        "lab"
      ],
      "fol_rules": [
        "¬(∃x (Student(x) ∧ WorksIn(x, library) ∧ FromDepartment(x, computer science department)))",
        "∀x ((PartTimeJob(x) ∧ Student(x)) → WorksIn(x, library))",
        "∀x (Takes(x, database course) → FromDepartment(x, computer science department))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → Takes(x, database course))",
        "∀x (WorksIn(x, lab) → InstructedBy(x, david))",
        "Student(james) ∧ WorksIn(james, lab)",
        "¬((PartTimeJob(jack) ∨ WorksIn(jack, lab)))"
      ],
      "fol_conc": "(Takes(james, database course) ⊕ PartTimeJob(james))",
      "perplexity": 1.388476014137268,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 177
  },
  {
    "id": 109,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Foodie(x)",
        "Frequent(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x)))",
        "∀x (Foodie(x) ∧ Frequent(x) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ Frequent(peter)) ⊕ HighIncome(peter)",
      "perplexity": [
        1.0582404136657715,
        1.0268410444259644
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Goout(x)",
        "Onlychild(x)",
        "Busy(x)",
        "Highincome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x) ∧ Enjoy(x)))",
        "∀x (Foodie(x) ∧ Goout(x) → Spill(x))",
        "∀x (Onlychild(x) → (Tidy(x) ∧ Enjoy(x)))",
        "∀x (Busy(x) → Onlychild(x))",
        "∀x (Highincome(x) → Busy(x))",
        "(Spill(peter) ∧ Onlychild(peter)) ⊕ ¬(Spill(peter) ∨ Onlychild(peter))"
      ],
      "fol_conc": "Foodie(peter) ∧ Goout(peter) ∨ Highincome(peter)",
      "perplexity": 1.1662999391555786,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "GoOutFrequently(x)",
        "OnlyChild(x)",
        "BusyParent(x)",
        "HighNetIncome(h)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ ¬EnjoyCleaning(x))",
        "(Foodie(x) ∧ GoOutFrequently(x)) → Spill(x)",
        "(OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "BusyParent(p) → OnlyChild(p)",
        "HighNetIncome(h) → BusyParent(p)",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ GoOutFrequently(peter)) ⊕ HighNetIncome(h)",
      "perplexity": 1.3598248958587646,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 178
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Likes(x)",
        "Access(x, y)",
        "Compose(x)",
        "WantsCompose(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(x) → WantsCompose(x))",
        "∀x (Access(x, Program) → Compose(x))",
        "∀x (Compose(x) ∧ WantsCompose(x) → Compose(x))"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose(george)",
      "perplexity": [
        1.1005382537841797,
        1.0325297117233276
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Compose(x)",
        "Access(x, y)",
        "Can(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(x) → Wants(x))",
        "∀x (Access(x, program) → Can(x, compose))",
        "∀x (Can(x, compose) ∧ Wants(x) → Compose(x))"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george, compose)",
      "perplexity": 1.2290258407592773,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x)",
        "Compose(x)",
        "Access(x, y)",
        "Want(x)",
        "Want(y)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x (Likes(x) → Want(x))",
        "∀x (Access(x, program) → Compose(x))",
        "∀x (Compose(x) ∧ Want(x) → Compose(x))"
      ],
      "fol_conc": "(¬Compose(george) → ¬(Compose(george)))",
      "perplexity": 3.3682847023010254,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 179
  },
  {
    "id": 203,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva was loaned out to a football club.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "PlaysFor(x, y)",
        "LoanedOutTo(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton_silva",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton_silva, 1995)",
        "KnownAs(ailton_silva, ailton)",
        "FootballPlayer(ailton_silva)",
        "PlaysFor(ailton_silva, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)",
        "LoanedOutTo(ailton_silva, braga)"
      ],
      "fol_conc": "LoanedOutTo(ailton_silva, x)",
      "perplexity": [
        1.0702838897705078,
        1.0173572301864624
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(x)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton, 1995)",
        "Known(ailton, ailton)",
        "Footballer(ailton)",
        "Loaned(ailton, braga)",
        "Plays(ailton, nautico)",
        "Club(braga)",
        "Club(nautico)",
        "Club(fluminense)",
        "Brazilian(ailton)"
      ],
      "fol_conc": "∃x (Loaned(ailton, x) ∧ Club(x))",
      "perplexity": 1.2402011156082153,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "IsFootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "IsFootballClub(x)"
      ],
      "fol_consts": [
        "ailton silva",
        "1995",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "Born(ailton silva, 1995)",
        "KnownAs(ailton silva, ailton silva)",
        "IsFootballPlayer(ailton silva)",
        "LoanedTo(ailton silva, braga)",
        "PlaysFor(ailton silva, nautico)",
        "IsFootballClub(nautico)",
        "IsFootballClub(braga)",
        "IsFootballClub(fluminense)"
      ],
      "fol_conc": "∃y (LoanedTo(ailton silva, y) ∧ IsFootballClub(y))",
      "perplexity": 1.339309573173523,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 180
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)",
        "HasGlu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "humans",
        "fever",
        "headache",
        "musclePains",
        "tired",
        "coughing"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccursIn(monkeypoxVirus, humans)",
        "OccursIn(monkeypoxVirus, certainAnimals)",
        "Human(humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "Mammal(certainAnimals)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "FeelTired(x) → HasGlu(x)"
      ],
      "fol_conc": "SymptomOf(coughing, monkeypox)",
      "perplexity": [
        1.1452715396881104,
        1.0182801485061646
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(fever, monkeypox)",
        "Symptom(headache, monkeypox)",
        "Symptom(musclepains, monkeypox)",
        "Symptom(tiredness, monkeypox)",
        "Feel(humans, glu)",
        "Feel(humans, tirednes)"
      ],
      "fol_conc": "Symptom(coughing, monkeypox)",
      "perplexity": 1.252568244934082,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(y, x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox virus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypox virus)",
        "OccurIn(monkeypox virus, humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(muscle pains, monkeypox)",
        "SymptomOf(fever, glu)",
        "FeelTired(glu)"
      ],
      "fol_conc": "SymptomOf(c, monkeypox)",
      "perplexity": 1.486334204673767,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 161
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Lands(x)",
        "Hawk(x)",
        "Bird(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Lands(x))",
      "perplexity": [
        1.0983628034591675,
        1.02764093875885
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Land(x)",
        "Bird(x)",
        "Hawk(x)"
      ],
      "fol_consts": [
        "none"
      ],
      "fol_rules": [
        "¬Land(x) ∧ Hawk(x)"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": 1.6184450387954712,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(x)",
        "Land(x)"
      ],
      "fol_consts": [
        "hawk",
        "bird"
      ],
      "fol_rules": [
        "¬(Hawk(x) ∧ Land(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Land(x))",
      "perplexity": 1.3275210857391357,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 162
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Hardship(x)",
        "SingleParent(x)",
        "Unemployed(x, y)"
      ],
      "fol_consts": [
        "gre",
        "us_205",
        "ets",
        "tom",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, us_205)",
        "∀x (Hardship(x) → Provide(ets, x))",
        "∀x (Hardship(x) ↔ (LittleMoney(x) ∨ FewResources(x)))",
        "SingleParent(tom)",
        "Unemployed(tom, year)"
      ],
      "fol_conc": "¬∃x (Provide(ets, x))",
      "perplexity": [
        1.1217999458312988,
        1.0230932235717773
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Economic(x)",
        "Single(x)",
        "Out(x, y)",
        "Financial(x, y)"
      ],
      "fol_consts": [
        "gre",
        "us",
        "205",
        "ets",
        "tom",
        "dad",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, us) ∧ ∀x (Cost(x, us) ∧ Provide(ets, x) → ¬Economic(x))",
        "Provide(ets, x) → Economic(x)",
        "Economic(x) ∧ Single(tom) ∧ Out(dad, year)"
      ],
      "fol_conc": "¬Financial(ets, gre)",
      "perplexity": 1.5002387762069702,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cost(x, y)",
        "ProvideAid(x, y)",
        "EconomicHardship(x)",
        "LiveIn(x, y)",
        "OutOfWork(y)"
      ],
      "fol_consts": [
        "gre",
        "tom",
        "us205",
        "singleParentFamily"
      ],
      "fol_rules": [
        "Cost(gre, us205)",
        "∀x (ProvideAid(ets, x) ↔ EconomicHardship(x))",
        "EconomicHardship(x) ↔ ¬(¬(LiveIn(x, singleParentFamily)) ∧ OutOfWork(tom))",
        "LiveIn(tom, singleParentFamily)",
        "OutOfWork(tom)"
      ],
      "fol_conc": "¬(∃x (ProvideAid(ets, x)))",
      "perplexity": 1.5631322860717773,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 163
  },
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendEngage(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x, y)",
        "Student(x, y)",
        "YoungChildTeenager(x)",
        "WishFurtherEducation(x)"
      ],
      "fol_consts": [
        "bonnie",
        "School"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → (AttendEngage(x) ∧ Student(x, School)))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x, SchoolDance) → ¬Student(x, School))",
        "∀x (InactiveDisinterested(x) → Chaperone(x, SchoolDance))",
        "∀x (YoungChildTeenager(x) ∧ WishFurtherEducation(x) → (Student(x, School)))",
        "(AttendEngage(bonnie) ∧ Student(bonnie, School)) ⊕ ¬(AttendEngage(bonnie) ∨ Student(bonnie, School))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": [
        1.094003438949585,
        1.01052725315094
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Disinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "Wish(x, y)",
        "Young(x)",
        "Teenager(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) ∧ Frequent(x) → (Attend(x) ∧ Engaged(x)))",
        "∀x (Perform(x) ∧ Frequent(x)) ⊕ (Inactive(x) ∧ Disinterested(x))",
        "∀x (Chaperone(x) → ¬(Student(x) ∧ Attend(x)))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x))",
        "∀x ((Young(x) ∧ Teenager(x) ∧ Wish(x, academic)) → (Student(x) ∧ Attend(x)))",
        "(Attend(bonnie) ∧ Engaged(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Engaged(bonnie))"
      ],
      "fol_conc": "Perform(bonnie) ∧ Frequent(bonnie)",
      "perplexity": 1.1217288970947266,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendAndEngaged(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x, y)",
        "Student(x, y)",
        "WishToFurtherAcademicCareers(x)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → AttendAndEngaged(x))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x, school) → ¬Student(x, school))",
        "∀x (InactiveDisinterested(x) → Chaperone(x, school))",
        "∀x (YoungChildOrTeenager(x) ∧ WishToFurtherAcademicCareers(x) → Student(x, school))",
        "(AttendAndEngaged(bonnie) ∧ Student(bonnie, school)) ⊕ ¬((AttendAndEngaged(bonnie) ∧ Student(bonnie, school)))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": 1.1417597532272339,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 164
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlayFor(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robertLewandowski, bayernMunchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "Star(robertLewandowski)",
      "perplexity": [
        1.0497143268585205,
        1.0285565853118896
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Play(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski",
        "bayern",
        "munchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Play(x, y))"
      ],
      "fol_conc": "Star(robert)",
      "perplexity": 1.2603596448898315,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlaysFor(x, y)",
        "SoccerPlayer(x)",
        "Striker(x)"
      ],
      "fol_consts": [
        "robert lewandowski",
        "bayern munchen"
      ],
      "fol_rules": [
        "Striker(robert lewandowski)",
        "(∃y (SoccerPlayer(y) ∧ Striker(y)))",
        "Left(robert lewandowski, bayern munchen)",
        "∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "Striker(robert lewandowski)",
      "perplexity": 2.175220489501953,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 165
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)",
        "NetflixShow(x)"
      ],
      "fol_consts": [
        "stranger_things",
        "karen",
        "lisa",
        "black_mirror"
      ],
      "fol_rules": [
        "Popular(stranger_things)",
        "∀x (Popular(x) → BingeWatch(karen, x))",
        "∀x (BingeWatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, black_mirror)",
        "NetflixShow(black_mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, x, lisa))"
      ],
      "fol_conc": "Share(karen, stranger_things, lisa)",
      "perplexity": [
        1.0361075401306152,
        1.0165950059890747
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Netflix(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "strangerthings",
        "karen",
        "lisa",
        "blackmirror"
      ],
      "fol_rules": [
        "Popular(strangerthings)",
        "Netflix(strangerthings)",
        "∀x (Netflix(x) ∧ Popular(x) → Bingewatch(karen, x))",
        "∀x (Bingewatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, blackmirror)",
        "Netflix(blackmirror)",
        "∀x (Bingewatch(karen, x) → Share(karen, lisa, x))"
      ],
      "fol_conc": "Share(karen, lisa, strangerthings)",
      "perplexity": 1.1719410419464111,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular(x)",
        "NetflixShow(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "stranger things",
        "karen",
        "lisa",
        "black mirror"
      ],
      "fol_rules": [
        "Popular(stranger things)",
        "∀x (NetflixShow(x) ∧ Popular(x) → BingeWatch(karen, x))",
        "(∃x (BingeWatch(karen, x))) ↔ (Download(karen, x))",
        "¬Download(karen, black mirror)",
        "NetflixShow(black mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, lisa, x))"
      ],
      "fol_conc": "Share(karen, lisa, stranger things)",
      "perplexity": 1.114923119544983,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 166
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousCapital(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "HostedParalympics(x, y)",
        "LargestCity(x, y)",
        "University(x)",
        "TopRanked(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "asiaPacific"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulousCapital(beijing)",
        "LocatedIn(beijing, china)",
        "HostedOlympics(beijing, summer)",
        "HostedParalympics(beijing, summer)",
        "∀x (HostedOlympics(x, summer) ∧ HostedParalympics(x, summer) → HostedOlympics(x, winter) ∧ HostedParalympics(x, winter))",
        "∃x (University(x) ∧ LocatedIn(x, china) ∧ TopRanked(x))"
      ],
      "fol_conc": "LargestCity(beijing, china)",
      "perplexity": [
        1.0924162864685059,
        1.0156699419021606
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Most(x, y)",
        "Located(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Largest(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics",
        "paralympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Most(beijing, city)",
        "Located(beijing, china)",
        "Hosted(beijing, olympics)",
        "Hosted(beijing, paralympics)",
        "∃x (University(x) ∧ Located(x, beijing))",
        "∃x (University(x) ∧ Located(x, beijing))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2643002271652222,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, z)",
        "RankedAmongBestUniversities(x)",
        "LocatedIn(y, x)",
        "LocatedIn(z, w)",
        "LocatedIn(a, b)"
      ],
      "fol_consts": [
        "beijing",
        "people's republic of china",
        "asia-pacific",
        "world",
        "2008 summer olympics",
        "2008 summer paralympics games",
        "2008 summer olympics",
        "2008 summer paralympics games"
      ],
      "fol_rules": [
        "CapitalOf(beijing, people's republic of china)",
        "MostPopulousNationalCapitalCity(beijing)",
        "LocatedIn(beijing, northern china)",
        "HostedOlympics(beijing, 2008 summer olympics)",
        "HostedOlympics(beijing, 2008 summer paralympics games)",
        "∃x (RankedAmongBestUniversities(x) ∧ LocatedIn(x, beijing))",
        "LocatedIn(northern china, people's republic of china)"
      ],
      "fol_conc": "LocatedIn(beijing, z)",
      "perplexity": 2.3549418449401855,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 167
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "Rating(x, y)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (Rating(x, y) ∧ y > 9 → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ y > 9)",
        "(Rating(subway, y) ∧ y > 9) ⊕ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0505093336105347,
        1.0153346061706543
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Rating(x, y) ∧ y > 9 → Listed(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬Many(x))",
        "∀x (Rating(x, 90) → Listed(x))",
        "∃x (¬Takeout(x) ∧ Many(x))",
        "∀x (Popular(x) → Rating(x, 90))",
        "Rating(subway, 90) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Many(subway)",
      "perplexity": 1.2904717922210693,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Listed(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "PopularLocal(x)",
        "ReceiveReviews(x)"
      ],
      "fol_consts": [
        "subway",
        "yelp",
        "nine"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬ReceiveReviews(x))",
        "∀x (Rating(x, nine) → Listed(x))",
        "∃x ((¬Takeout(x) ∧ ReceiveReviews(x)))",
        "∀x (PopularLocal(x) → Rating(x, y) ∧ (∃z (Rating(z, z) ∧ (Rating(y, nine)))))",
        "(Rating(subway, nine) ∨ PopularLocal(subway))"
      ],
      "fol_conc": "(Takeout(subway) ∧ ¬ReceiveReviews(subway))",
      "perplexity": 1.7005486488342285,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 168
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "LiveInTaxHaven(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LiveInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.0409471988677979,
        1.0164481401443481
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic",
        "taxhaven"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ∨ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Livesin(x, taxhaven))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, taxhaven)"
      ],
      "fol_conc": "¬Livesin(djokovic, taxhaven)",
      "perplexity": 1.156528115272522,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "WellPaid(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "¬LivesInTaxHaven(djokovic)",
      "perplexity": 1.0412042140960693,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 169
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x)",
        "Arrival(x)"
      ],
      "fol_consts": [
        "susan",
        "lga",
        "john"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Departure(x) ∧ Arrival(y) → x ≠ y)",
        "Flies(john, lga)"
      ],
      "fol_conc": "Flies(susan, lga)",
      "perplexity": [
        1.1265461444854736,
        1.0374109745025635
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ∀y (Departure(x) ∧ Arrival(y) → x ≠ y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x)",
        "Arrival(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Flies(x, y) → ¬(Departure(x) ∧ Arrival(x)))",
        "Flies(john, lga)"
      ],
      "fol_conc": "Departure(susan, lga)",
      "perplexity": 1.2447683811187744,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Departure/1, Departure/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Departure/1, Departure/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "DepartureAirport(x)",
        "ArrivalAirport(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "(∀x (Flies(x, z) → ¬(ArrivalAirport(x) ∧ DepartureAirport(x))))",
        "Flies(john, lga)"
      ],
      "fol_conc": "DepartureAirport(susan, lga)",
      "perplexity": 1.3297176361083984,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DepartureAirport/1, DepartureAirport/2.\n\n\nFatal error:  The following symbols are used with multiple arities: DepartureAirport/1, DepartureAirport/2"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 170
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "Gains(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, Knowledge))",
        "∀x ∀y (Reads(x, y) → Gains(x))",
        "∀x (Gains(x) → Smarter(x))",
        "Book(walden)",
        "Reads(harry, walden)"
      ],
      "fol_conc": "Contains(walden, Knowledge)",
      "perplexity": [
        1.0882973670959473,
        1.0259472131729126
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "Gain(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, knowledge))",
        "∀x (Read(x, y) → Gain(x))",
        "∀x (Gain(x) → Smarter(x))",
        "Book(walden)",
        "Read(harry, walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.1919313669204712,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "GainsKnowledge(x)",
        "BecomeSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry thoreau"
      ],
      "fol_rules": [
        "∀x (Contains(x, knowledge))",
        "∀x ∀y (Read(x, y) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → BecomeSmarter(x))",
        "Read(harry, walden)",
        "¬Contains(walden, knowledge)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.303511142730713,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 171
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, >1) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, >1))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "(¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x)))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": [
        1.0532257556915283,
        1.0238925218582153
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, multiple) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, multiple))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬(∃x (Boeing707(x) ∧ Plane(x)))"
      ],
      "fol_conc": "¬(Boeing707(greyhound) ∧ Plane(greyhound))",
      "perplexity": 1.1479668617248535,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound",
        "greyhound"
      ],
      "fol_rules": [
        "∀x (∃y (Transport(x, y)) → ¬Empty(x))",
        "∀x (Airline(x) → ∃y (Transport(x, y)))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬(∃x (Boeing707(x) ∧ Plane(x)) ∨ ¬Airline(greyhound))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": 1.2585433721542358,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 172
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "F1Visa(y)",
        "J1Visa(y)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, F1Visa(y)) ⊕ HasVisa(x, J1Visa(y))))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, F1Visa(y)) ∧ WantsToWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, J1Visa(y))",
      "perplexity": [
        1.0549362897872925,
        1.0150333642959595
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, F1Visa(y)) ⊕ HasVisa(x, J1Visa(y))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Incountry(x, y)",
        "Visa(x, y)",
        "Needs(x, y)",
        "Student(x)",
        "Work(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike",
        "us"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Incountry(x, us) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Incountry(x, us) ∧ F1visa(x) ∧ Work(x) → Needs(x, cpt))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.3624697923660278,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "F1Visa(y)",
        "J1Visa(y)",
        "NeedsToApplyCPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, y) ∧ F1Visa(y) ∨ J1Visa(y))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(y) ∧ WantsToWork(x) → NeedsToApplyCPT(x))",
        "InternationalStudent(mike)",
        "NeedsToApplyCPT(mike)"
      ],
      "fol_conc": "J1Visa(mike)",
      "perplexity": 1.2339725494384766,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 173
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "NovelWriter(x)",
        "Created(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "american_city",
        "boston",
        "year_2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "American(dani_shapiro)",
        "WrittenBy(dani_shapiro, family_history)",
        "Novel(family_history) ∧ WrittenBy(dani_shapiro, family_history) ∧ Year(family_history, year_2003)",
        "Created(dani_shapiro, family_secrets)",
        "City(boston)",
        "City(american_city)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0560157299041748,
        1.0139039754867554
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Born(x, y)",
        "American(x)",
        "Write(x, y)",
        "Novelwriter(x)",
        "Written(x, y, z)",
        "City(x)",
        "Americancity(x)"
      ],
      "fol_consts": [
        "dani",
        "familyhistory",
        "familysecrets",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x ∀y (Novel(y) ∧ Write(x, y) → Novelwriter(x))",
        "American(dani)",
        "Write(dani, familyhistory)",
        "Novel(familyhistory) ∧ Written(familyhistory, dani, 2003)",
        "Write(dani, familysecrets) ∧ Podcast(familysecrets)",
        "City(boston)",
        "Americancity(boston)"
      ],
      "fol_conc": "Novel(familysecrets)",
      "perplexity": 1.2318751811981201,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "BornIn(x, y)",
        "American(x)",
        "WrittenBy(x, y)",
        "Writer(x)",
        "Write(x, y, z)",
        "City(x)"
      ],
      "fol_consts": [
        "dani shapiro",
        "american city",
        "family history",
        "family secrets",
        "boston",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american city) → American(x))",
        "∀x ∀y ((Novel(y) ∧ WrittenBy(x, y)) → Writer(x))",
        "American(dani shapiro)",
        "WrittenBy(dani shapiro, family history)",
        "Novel(family history) ∧ Write(dani shapiro, family history, 2003)",
        "Podcast(family secrets)",
        "City(boston)",
        "BornIn(american city, boston)"
      ],
      "fol_conc": "Novel(family secrets)",
      "perplexity": 1.1579803228378296,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 174
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y, z)",
        "Managed(x)",
        "DepositRequired(x)",
        "DepositAmount(x, y)",
        "Rent(x, y)",
        "Pet(x)",
        "Own(x, y)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "two_thousand",
        "fifteen_hundred"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(fluffy, tom, x))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x (DepositAmount(x, y) → (y = two_thousand ∨ y > two_thousand))",
        "Own(tom, fluffy)",
        "∀x (Pet(x) → Pet(fluffy))",
        "Managed(olive_garden)",
        "Rent(olive_garden, two_thousand)",
        "(Allowed(fluffy, tom, x) ∧ DepositAmount(x, y) ∧ y ≤ fifteen_hundred) → Do(tom, x)",
        "two_thousand > fifteen_hundred"
      ],
      "fol_conc": "Do(tom, olive_garden)",
      "perplexity": [
        1.0853548049926758,
        1.018424153327942
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DepositAmount(x, y) → (y = two_thousand ∨ y > two_thousand))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Managed(x)",
        "Allowed(x, y)",
        "Deposit(x, y)",
        "Equal(x, y)",
        "More(x, y)",
        "Pet(x)",
        "Owner(x, y)",
        "Rent(x, y)",
        "Willrent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x, rent))",
        "∀x (Deposit(x, rent) → (Equal(x, rent) ∨ More(x, rent)))",
        "Owner(tom, fluffy)",
        "∀x (Pet(x) → Cats(x))",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "Willrent(tom, olivegarden) ↔ (Allowed(olivegarden, fluffy) ∧ More(1500, deposit))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Willrent(tom, olivegarden)",
      "perplexity": 1.1930792331695557,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Deposit/2, Deposit/0, Rent/2, Rent/0, Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Deposit/2, Deposit/0, Rent/2, Rent/0, Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Allowed(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "Equal(x, y)",
        "MoreThan(x, y)",
        "Pet(x)",
        "Own(x, y)",
        "RentApartment(x, y)",
        "RentApartment(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive garden",
        "$1500",
        "$2000"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ Allowed(fluffy, x))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → (Equal(x, $1500) ∨ MoreThan(x, $1500)))",
        "Own(tom, fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive garden)",
        "RentApartment($2000, olive garden)",
        "∀x (RentApartment(x, y) ↔ Allowed(fluffy, y) ∧ DepositRequired(y))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "RentApartment(tom, olive garden)",
      "perplexity": 1.3027429580688477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 175
  },
  {
    "id": 74,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Joe's license plate begins with the number 34.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "BeginsWith(x, y)",
        "From(x, y)",
        "IsIstanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "thirtyFour",
        "thirtyFive",
        "istanbul"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → BeginsWith(x, thirtyFour))",
        "∀x (¬BeginsWith(x, thirtyFour) → ¬From(x, istanbul))",
        "From(joe'sPlate, istanbul)",
        "BeginsWith(tom'sPlate, thirtyFive)",
        "∀x (BeginsWith(x, thirtyFive) → ¬BeginsWith(x, thirtyFour))"
      ],
      "fol_conc": "BeginsWith(joe'sPlate, thirtyFour)",
      "perplexity": [
        1.0831153392791748,
        1.021319031715393
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)",
        "Istanbul(y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "¬(From(x, istanbul)) ∨ Begins(x, 34)",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "Begins(joe, 34)",
      "perplexity": 1.2214995622634888,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BeginsWith(x, y)",
        "From(x, y)",
        "LicensePlate(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (BeginsWith(x, 34) → From(x, istanbul))",
        "¬BeginsWith(x, 34) → ¬From(x, istanbul)",
        "LicensePlate(joe)",
        "BeginsWith(tom, 35)",
        "(BeginsWith(x, 35) → ¬BeginsWith(x, 34))"
      ],
      "fol_conc": "BeginsWith(joe, 34)",
      "perplexity": 1.1002910137176514,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 176
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkIn(x, y)",
        "From(x, y)",
        "PartTimeJob(x)",
        "Take(x, y)",
        "InstructedBy(x, y)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer_science",
        "lab",
        "database"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computer_science))",
        "∀x (PartTimeJob(x) ∧ Student(x) → WorkIn(x, library))",
        "∀x (Take(x, database) → From(x, computer_science))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → Take(x, database))",
        "∀x (WorkIn(x, lab) → InstructedBy(x, david))",
        "Student(james) ∧ WorkIn(james, lab)",
        "¬(PartTimeJob(jack) ∨ WorkIn(jack, lab))"
      ],
      "fol_conc": " (Take(james, database) ∨ PartTimeJob(james))",
      "perplexity": [
        1.0604417324066162,
        1.0143828392028809
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Take(x, y)",
        "Instructed(x, y)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "university",
        "database"
      ],
      "fol_rules": [
        "¬(∃x (Student(x) ∧ Work(x, library) ∧ From(x, computer)))",
        "∀x (Parttime(x) ∧ Student(x) → Work(x, library))",
        "∀x (Take(x, database) → From(x, computer))",
        "∀x (Instructed(x, david) → Take(x, database))",
        "∀x (Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.206038475036621,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorksIn(x, y)",
        "FromDepartment(x, y)",
        "PartTimeJob(x)",
        "InstructedBy(x, y)",
        "Takes(x, y)"
      ],
      "fol_consts": [
        "james",
        "david",
        "library",
        "computer science department",
        "university",
        "lab"
      ],
      "fol_rules": [
        "¬(∃x (Student(x) ∧ WorksIn(x, library) ∧ FromDepartment(x, computer science department)))",
        "∀x ((PartTimeJob(x) ∧ Student(x)) → WorksIn(x, library))",
        "∀x (Takes(x, database course) → FromDepartment(x, computer science department))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → Takes(x, database course))",
        "∀x (WorksIn(x, lab) → InstructedBy(x, david))",
        "Student(james) ∧ WorksIn(james, lab)",
        "¬((PartTimeJob(jack) ∨ WorksIn(jack, lab)))"
      ],
      "fol_conc": "(Takes(james, database course) ⊕ PartTimeJob(james))",
      "perplexity": 1.388476014137268,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 177
  },
  {
    "id": 109,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Foodie(x)",
        "Frequent(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x)))",
        "∀x (Foodie(x) ∧ Frequent(x) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ Frequent(peter)) ⊕ HighIncome(peter)",
      "perplexity": [
        1.0582404136657715,
        1.0268410444259644
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Goout(x)",
        "Onlychild(x)",
        "Busy(x)",
        "Highincome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x) ∧ Enjoy(x)))",
        "∀x (Foodie(x) ∧ Goout(x) → Spill(x))",
        "∀x (Onlychild(x) → (Tidy(x) ∧ Enjoy(x)))",
        "∀x (Busy(x) → Onlychild(x))",
        "∀x (Highincome(x) → Busy(x))",
        "(Spill(peter) ∧ Onlychild(peter)) ⊕ ¬(Spill(peter) ∨ Onlychild(peter))"
      ],
      "fol_conc": "Foodie(peter) ∧ Goout(peter) ∨ Highincome(peter)",
      "perplexity": 1.1662999391555786,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "GoOutFrequently(x)",
        "OnlyChild(x)",
        "BusyParent(x)",
        "HighNetIncome(h)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ ¬EnjoyCleaning(x))",
        "(Foodie(x) ∧ GoOutFrequently(x)) → Spill(x)",
        "(OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "BusyParent(p) → OnlyChild(p)",
        "HighNetIncome(h) → BusyParent(p)",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ GoOutFrequently(peter)) ⊕ HighNetIncome(h)",
      "perplexity": 1.3598248958587646,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 178
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Likes(x)",
        "Access(x, y)",
        "Compose(x)",
        "WantsCompose(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(x) → WantsCompose(x))",
        "∀x (Access(x, Program) → Compose(x))",
        "∀x (Compose(x) ∧ WantsCompose(x) → Compose(x))"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose(george)",
      "perplexity": [
        1.1005382537841797,
        1.0325297117233276
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Compose(x)",
        "Access(x, y)",
        "Can(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(x) → Wants(x))",
        "∀x (Access(x, program) → Can(x, compose))",
        "∀x (Can(x, compose) ∧ Wants(x) → Compose(x))"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george, compose)",
      "perplexity": 1.2290258407592773,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x)",
        "Compose(x)",
        "Access(x, y)",
        "Want(x)",
        "Want(y)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x (Likes(x) → Want(x))",
        "∀x (Access(x, program) → Compose(x))",
        "∀x (Compose(x) ∧ Want(x) → Compose(x))"
      ],
      "fol_conc": "(¬Compose(george) → ¬(Compose(george)))",
      "perplexity": 3.3682847023010254,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 179
  },
  {
    "id": 203,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva was loaned out to a football club.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "PlaysFor(x, y)",
        "LoanedOutTo(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton_silva",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton_silva, 1995)",
        "KnownAs(ailton_silva, ailton)",
        "FootballPlayer(ailton_silva)",
        "PlaysFor(ailton_silva, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)",
        "LoanedOutTo(ailton_silva, braga)"
      ],
      "fol_conc": "LoanedOutTo(ailton_silva, x)",
      "perplexity": [
        1.0702838897705078,
        1.0173572301864624
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(x)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton, 1995)",
        "Known(ailton, ailton)",
        "Footballer(ailton)",
        "Loaned(ailton, braga)",
        "Plays(ailton, nautico)",
        "Club(braga)",
        "Club(nautico)",
        "Club(fluminense)",
        "Brazilian(ailton)"
      ],
      "fol_conc": "∃x (Loaned(ailton, x) ∧ Club(x))",
      "perplexity": 1.2402011156082153,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "IsFootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "IsFootballClub(x)"
      ],
      "fol_consts": [
        "ailton silva",
        "1995",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "Born(ailton silva, 1995)",
        "KnownAs(ailton silva, ailton silva)",
        "IsFootballPlayer(ailton silva)",
        "LoanedTo(ailton silva, braga)",
        "PlaysFor(ailton silva, nautico)",
        "IsFootballClub(nautico)",
        "IsFootballClub(braga)",
        "IsFootballClub(fluminense)"
      ],
      "fol_conc": "∃y (LoanedTo(ailton silva, y) ∧ IsFootballClub(y))",
      "perplexity": 1.339309573173523,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 180
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "Managed(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "EqualToMonthRent(x, y)",
        "MoreThanMonthRent(x, y)",
        "Cat(x)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "monthRent"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x ∀y (SecurityDeposit(x, y) → (EqualToMonthRent(x, y) ⊕ MoreThanMonthRent(x, y)))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, 2000)",
        "∀x (Allowed(x, fluffy) ∧ ¬MoreThanMonthRent(x, 1500) ↔ (Rent(x, y) ∧ ¬MoreThanMonthRent(x, 1500)))",
        "MoreThanMonthRent(2000, 1500)"
      ],
      "fol_conc": "¬Rent(tom, oliveGarden)",
      "perplexity": [
        1.072723627090454,
        1.0138976573944092
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Equal(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "month",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Equal(x, month) ∨ More(x, month)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Rent(x, y) ∧ Allowed(x, z) ∧ More(y, 1500) → ¬Rent(x, y))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Rent(olivegarden, tom)",
      "perplexity": 1.1888188123703003,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "AllowedIn(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "EqualTo(x, y)",
        "MoreThan(x, y)",
        "Cat(x)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "fluffy",
        "tom",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ AllowedIn(x, y))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x ∃y (DepositRequired(x) → SecurityDeposit(x, y))",
        "(SecurityDeposit(x, $2000) ∨ MoreThan($2000, x))"
      ],
      "fol_conc": "Rent(olivegarden, tom)",
      "perplexity": 1.5981720685958862,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 221
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "In(x, y)",
        "Visited(x, y)",
        "Mine(x)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan_de_onate",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine"
      ],
      "fol_rules": [
        "In(picuris, new_mexico) ⊕ In(picuris, texas)",
        "Visited(juan_de_onate, picuris)",
        "Mine(harding_pegmatite_mine)",
        "In(harding_pegmatite_mine, picuris)",
        "Donated(harding_pegmatite_mine)",
        "¬∃x (MountainRange(x) ∧ In(x, texas) ∧ ∃y (Mine(y) ∧ In(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan_de_onate, x) ∧ In(x, new_mexico)",
      "perplexity": [
        1.0407185554504395,
        1.008997917175293
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Range(x)",
        "Located(x, y)",
        "Visited(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "onate",
        "texas",
        "newmexico",
        "harding"
      ],
      "fol_rules": [
        "Range(picuris) ∧ (Located(picuris, texas) ∨ Located(picuris, newmexico))",
        "Visited(onate, picuris)",
        "Located(harding, picuris) ∧ Donated(harding)",
        "¬(∃x (Range(x) ∧ Located(x, texas) ∧ (∃y (Located(y, x) ∧ Donated(y)))) ∧ Mountain(x))"
      ],
      "fol_conc": "∃x (Range(x) ∧ Located(x, newmexico) ∧ Visited(onate, x))",
      "perplexity": 1.2590887546539307,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris_mountains",
        "juan_de_onate",
        "new mexico",
        "texas",
        "harding_pegmatite_mine"
      ],
      "fol_rules": [
        "LocatedIn(picuris_mountains, new mexico) ∨ LocatedIn(picuris_mountains, texas)",
        "Visited(juan_de_onate, picuris_mountains)",
        "Donated(harding_pegmatite_mine)",
        "¬(∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan_de_onate, x) ∧ MountainRange(x) ∧ LocatedIn(x, new mexico)",
      "perplexity": 1.1408864259719849,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 222
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Reptile(x)",
        "HaveTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.0553007125854492,
        1.0295382738113403
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Hasteeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Hasteeth(x))",
        "¬Hasteeth(platypus)",
        "Mammal(platypus)",
        "Hasteeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.3296551704406738,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.1642115116119385,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 223
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": [
        1.0597249269485474,
        1.0184179544448853
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "barutincove",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Part(snowisland, southshetlandislands)",
        "Part(greenwichisland, southshetlandislands)",
        "Part(deceptionisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z ((Located(x, y) ∧ Located(y, z)) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": 1.1911756992340088,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "LocatedIn(greenwich_island, south_shetland_islands)",
        "LocatedIn(deception_island, south_shetland_islands)",
        "LocatedIn(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": 1.0535399913787842,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 224
  },
  {
    "id": 92,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language understanding task.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "NLPtask(x)",
        "LanguageGeneration(x)",
        "LanguageUnderstanding(x)",
        "TextOutput(x)"
      ],
      "fol_consts": [
        "machine_translation"
      ],
      "fol_rules": [
        "∀x (NLPtask(x) → (LanguageGeneration(x) ⊕ LanguageUnderstanding(x)))",
        "∀x (TextOutput(x) → LanguageGeneration(x))",
        "NLPtask(machine_translation)",
        "TextOutput(machine_translation)"
      ],
      "fol_conc": "¬LanguageUnderstanding(machine_translation)",
      "perplexity": [
        1.0837124586105347,
        1.0163286924362183
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nlp(x)",
        "Generation(x)",
        "Understanding(x)",
        "Output(x, y)",
        "Text(y)"
      ],
      "fol_consts": [
        "machine",
        "translation"
      ],
      "fol_rules": [
        "∀x (Nlp(x) → (Generation(x) ⊕ Understanding(x)))",
        "∀x (Nlp(x) ∧ Output(x, y) ∧ Text(y) → Generation(x))",
        "Nlp(machine)",
        "Output(machine, translation)",
        "Text(translation)"
      ],
      "fol_conc": "Understanding(machine)",
      "perplexity": 1.2961746454238892,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NaturalLanguageProcessingTask(x)",
        "LanguageGenerationTask(x)",
        "LanguageUnderstandingTask(x)",
        "Output(x, y)",
        "NaturalLanguageProcessingTask(y)"
      ],
      "fol_consts": [
        "machine translation",
        "machine translation"
      ],
      "fol_rules": [
        "∀x (NaturalLanguageProcessingTask(x) → (LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x)))",
        "∀x (Output(x, y) → LanguageGenerationTask(y))",
        "NaturalLanguageProcessingTask(machine translation)",
        "Output(machine translation, x)"
      ],
      "fol_conc": "¬LanguageGenerationTask(machine translation)",
      "perplexity": 2.5953738689422607,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 225
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Rent(x, y)",
        "Deposit(x, y)",
        "Cat(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "dollar2000",
        "dollar1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, Pet))",
        "∀x (Managed(x) → ∃y (Deposit(x, y)))",
        "∀x ∀y (Deposit(x, y) → (y = Rent(x) ∨ y > Rent(x)))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, dollar2000)",
        "∀x (Managed(x) → ((Allowed(x, fluffy) ∧ Deposit(x, y) ≤ dollar1500) ↔ Rent(x, y)))",
        "dollar2000 > dollar1500"
      ],
      "fol_conc": "Deposit(oliveGarden, dollar2000) ∨ Deposit(oliveGarden, y) ∧ y > dollar2000",
      "perplexity": [
        1.0602327585220337,
        1.0234142541885376
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ∀y (Deposit(x, y) → (y = Rent(x) ∨ y > Rent(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Apartment(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "2000"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Rent(x, x) ∨ More(x, y)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Apartment(x) ∧ Managed(x) ↔ (Allowed(x, fluffy) ∧ ¬More(x, 1500)))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Deposit(olivegarden) ∨ More(olivegarden, 2000)",
      "perplexity": 1.2282187938690186,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "Cat(x)",
        "Equal(x, y)",
        "MoreThan(x, y)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ Allowed(x, y))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → SecurityDeposit(x, z) ∨ MoreThan(z, x))"
      ],
      "fol_conc": "(SecurityDeposit(olivegarden, t) ∧ Equal(t, s)) ∨ MoreThan(s, t)",
      "perplexity": 1.762923240661621,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 226
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": [
        1.0314925909042358,
        1.0186500549316406
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → Wear(x, y) ∧ Large(y))",
        "∀x (Wear(x, y) ∧ Large(y) → Wear(x, z) ∧ Large(z))",
        "¬(Wear(yuri, y) ∧ Large(y))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.1916626691818237,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.0910462141036987,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 227
  },
  {
    "id": 101,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "((Evil(harry) ∧ Ugly(harry)) ⊕ (¬Evil(harry) ∧ ¬Ugly(harry))) → ¬(Kind(harry) ∨ CEO(harry))",
      "perplexity": [
        1.0606088638305664,
        1.0105715990066528
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry)) → ¬(Kind(harry) ∨ Ceos(harry))",
      "perplexity": 1.1559126377105713,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry)) → ¬Kind(harry) ∧ ¬CEO(harry)",
      "perplexity": 1.084322452545166,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 228
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "Last(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "OlympicGames(tokyo)",
        "Last(tokyo, OlympicGames)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, tokyo)",
      "perplexity": [
        1.0780632495880127,
        1.0225456953048706
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: OlympicGames/1, OlympicGames/0.\n\n\nFatal error:  The following symbols are used with multiple arities: OlympicGames/1, OlympicGames/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Won(x, y)",
        "Most(x, y)",
        "Last(x)"
      ],
      "fol_consts": [
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(tokyo)",
        "Sporting(tokyo)",
        "Won(unitedstates, tokyo)",
        "Most(unitedstates, tokyo)"
      ],
      "fol_conc": "Won(unitedstates, x) ∧ Most(unitedstates, x) ∧ Last(x)",
      "perplexity": 1.394596815109253,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "OlympicGames(tokyo)",
        "SportingEvent(tokyo)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, tokyo)",
      "perplexity": 1.1186771392822266,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 229
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x)",
        "Appear(x)",
        "LunchCompany(x)",
        "LunchHome(x)",
        "RemoteWork(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeeting(x) → Appear(x))",
        "∀x (LunchCompany(x) → ScheduleMeeting(x))",
        "∀x (Employee(x) → (LunchCompany(x) ⊕ LunchHome(x)))",
        "∀x (LunchHome(x) → RemoteWork(x))",
        "∀x (OtherCountry(x) → RemoteWork(x))",
        "∀x (Manager(x) → ¬RemoteWork(x))",
        "(Manager(james) ∧ Appear(james)) ⊕ ¬(Manager(james) ∨ Appear(james))"
      ],
      "fol_conc": "(Manager(james) ∨ OtherCountry(james)) → (LunchHome(james) ∧ RemoteWork(james)) ⊕ ¬(LunchHome(james) ∨ RemoteWork(james))",
      "perplexity": [
        1.0634243488311768,
        1.0180314779281616
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Manager(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, y) → Appear(x, y))",
        "∀x (Lunch(x, y) → Schedule(x, y))",
        "∀x (Employee(x) → (Lunch(x, y) ⊕ Lunch(x, z)))",
        "∀x (Lunch(x, z) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, y)) ⊕ ¬(Manager(james) ∨ Appear(james, y))"
      ],
      "fol_conc": "((Manager(james) ∨ Other(james)) → ((Lunch(james, z) ∧ Remote(james)) ⊕ ¬(Lunch(james, z) ∨ Remote(james))))",
      "perplexity": 1.1209967136383057,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomer(x)",
        "AppearInCompanyToday(x)",
        "HaveLunchInCompany(x)",
        "HaveLunchAtHome(x)",
        "WorkingRemotelyFromHome(x)",
        "Manager(x)",
        "InOtherCountries(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeetingWithCustomer(x) → AppearInCompanyToday(x))",
        "∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x))",
        "∀x (Employee(x) → HaveLunchInCompany(x) ⊕ HaveLunchAtHome(x))",
        "∀x (HaveLunchAtHome(x) → WorkingRemotelyFromHome(x))",
        "∀x (Employee(x) ∧ InOtherCountries(x) → WorkingRemotelyFromHome(x))",
        "¬(Manager(x) ∧ WorkingRemotelyFromHome(x))",
        "(Manager(james) ∧ AppearInCompanyToday(james)) ⊕ ¬(Manager(james) ∨ AppearInCompanyToday(james))"
      ],
      "fol_conc": "∀x ((Manager(x) ∨ InOtherCountries(x)) → (HaveLunchAtHome(x) ∧ WorkingRemotelyFromHome(x)) ⊕ ¬(HaveLunchAtHome(x) ∨ WorkingRemotelyFromHome(x)))",
      "perplexity": 1.1599159240722656,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 230
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSDept(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSDept(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "TakeDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.036009669303894,
        1.0131852626800537
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, y)",
        "Instructed(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "database"
      ],
      "fol_rules": [
        "¬(Student(x) ∧ Work(x, library) ∧ From(x, computer))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) → From(x, computer))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, database))",
        "∀x (Student(x) ∧ Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.141514539718628,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorkingInTheLab(x)",
        "WorkingInTheLab(x)",
        "FromComputerScienceDepartment(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "TakesDatabaseCourse(x)",
        "InstructedByDavid(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkingInTheLab(x) → ¬FromComputerScienceDepartment(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) → Student(x) ∧ WorkingInTheLab(x))",
        "∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))",
        "∀x (InstructedByDavid(x) → TakesDatabaseCourse(x))",
        "∀x (WorkingInTheLab(x) → InstructedByDavid(x))",
        "Student(james)",
        "WorkingInTheLab(james)",
        "¬(HasPartTimeJobOfferedByUniversity(jack) ∨ WorkingInTheLab(jack))"
      ],
      "fol_conc": "(TakesDatabaseCourse(james) ∨ HasPartTimeJobOfferedByUniversity(james))",
      "perplexity": 1.7965888977050781,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 231
  },
  {
    "id": 128,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has a wedding that is well-attended.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "HoneymoonParis(x)",
        "July(x)",
        "WellAttended(x)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → HoneymoonParis(x))",
        "∃x (Wedding(x) ∧ July(x) ∧ WellAttended(x))",
        "Child(john) → ¬HoneymoonParis(john) ∧ ¬Wedding(john)",
        "WellAttended(john) → (Wedding(john) ∧ July(john)) ⊕ HoneymoonParis(john)"
      ],
      "fol_conc": "∃x (Wedding(x) ∧ WellAttended(x) ∧ Do(john, x))",
      "perplexity": [
        1.0615676641464233,
        1.0170412063598633
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Wedding(x)",
        "Child(x)",
        "Has(x, y)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Has(x, y) ∧ Child(y)))",
        "∀x (Travel(x, paris) ∧ Honeymoon(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → Travel(x, paris) ∧ Honeymoon(x))",
        "∃x (Wedding(x) ∧ July(x) ∧ Wellattended(x))",
        "∀x (Has(john, y) ∧ Child(y) → ¬Travel(john, paris) ∧ ¬Wedding(john))",
        "∀x (Wedding(john) ∧ Wellattended(x) → (July(x) ∨ Travel(john, paris) ∧ Honeymoon(john)))"
      ],
      "fol_conc": "∃x (Wedding(john) ∧ Wellattended(x))",
      "perplexity": 1.1191306114196777,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "TravelToParisForHoneymoon(x)",
        "InJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (TravelToParisForHoneymoon(x) → Wedding(x))",
        "∀x (InJuly(x) ∧ Wedding(x) → TravelToParisForHoneymoon(x))",
        "∃x (Wedding(x) ∧ InJuly(x) ∧ WellAttended(x))",
        "Child(john, y) → ¬TravelToParisForHoneymoon(john)",
        "WellAttended(x) ∧ Wedding(x) → InJuly(x) ∨ TravelToParisForHoneymoon(x)"
      ],
      "fol_conc": "∃y (Wedding(john, y) ∧ WellAttended(y))",
      "perplexity": 1.1806108951568604,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/1, Wedding/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/1, Wedding/2"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 232
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "F1Visa(x)",
        "J1Visa(x)",
        "WantsWork(x)",
        "NeedsCPT(x)",
        "NeedsOPT(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "F1Visa(mike)",
      "perplexity": [
        1.0469943284988403,
        1.0178579092025757
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Work(x) → (Needs(x, cpt) ∨ Needs(x, opt)))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "F1visa(mike)",
      "perplexity": 1.2128623723983765,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsApplyCPT(x)",
        "NeedsApplyOPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, f1) ∨ HasVisa(x, j1))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsToWork(x) → NeedsApplyCPT(x) ∨ NeedsApplyOPT(x))",
        "InternationalStudent(mike)",
        "NeedsApplyCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, f1)",
      "perplexity": 1.2137982845306396,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 233
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedMoney(x)",
        "OrderTakeout(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeDining(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkStudentJob(x) → NeedMoney(x))",
        "∀x (OrderTakeout(x) → WorkStudentJob(x))",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x))",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x))",
        "∀x (EnjoyDiningHall(x) → SpendTimeDining(x))",
        "∀x ((WorkStudentJob(x) ∧ NeedMoney(x)) → (¬PickyEater(x) ∧ ¬NeedMoney(x)))"
      ],
      "fol_conc": "¬PickyEater(mary) ∧ SpendTimeDining(mary)",
      "perplexity": [
        1.033364176750183,
        1.0126771926879883
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x)",
        "Need(x)",
        "Order(x)",
        "Enjoy(x)",
        "Picky(x)",
        "Spend(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "Work(x) → Need(x)",
        "Order(x) → Work(x)",
        "Order(x) ⊕ Enjoy(x)",
        "Enjoy(x) → ¬Picky(x)",
        "Enjoy(x) → Spend(x)",
        "Work(mary) ∧ Need(mary) → ¬(Picky(mary) ∨ Need(mary))"
      ],
      "fol_conc": "¬Picky(mary) ∧ Spend(mary)",
      "perplexity": 1.1238340139389038,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedEarnMoney(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeEatingCatchingUp(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "WorkStudentJob(x) → NeedEarnMoney(x)",
        "OrderTakeoutFrequently(x) → WorkStudentJob(x)",
        "OrderTakeoutFrequently(x) ⊕ EnjoyDiningHall(x)",
        "EnjoyDiningHall(x) → ¬PickyEater(x)",
        "EnjoyDiningHall(x) → SpendTimeEatingCatchingUp(x)",
        "(WorkStudentJob(mary) ∧ NeedEarnMoney(mary)) → (¬PickyEater(mary) ∧ ¬NeedEarnMoney(mary))"
      ],
      "fol_conc": "(¬PickyEater(mary) ∧ SpendTimeEatingCatchingUp(mary))",
      "perplexity": 1.120283842086792,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 234
  },
  {
    "id": 66,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "A private Ivy League research university moved to New Haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(x)",
        "Research(x)",
        "MovedTo(x, y, z)",
        "Endowment(x, y)",
        "OrganizedInto(x, y)",
        "ResidentialCollege(x)",
        "GraduateSchool(x)",
        "ProfessionalSchool(x)"
      ],
      "fol_consts": [
        "yale",
        "new_haven",
        "bf_college",
        "berkeley_college",
        "1716",
        "42.3_billion"
      ],
      "fol_rules": [
        "Private(yale) ∧ IvyLeague(yale) ∧ Research(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "Endowment(yale, 42.3_billion)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(bf_college)",
        "ResidentialCollege(berkeley_college)",
        "Private(yale) ∧ IvyLeague(yale) ∧ Research(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "Endowment(yale, 42.3_billion)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(bf_college)",
        "ResidentialCollege(berkeley_college)"
      ],
      "fol_conc": "∃x (Private(x) ∧ IvyLeague(x) ∧ Research(x) ∧ MovedTo(x, new_haven, _))",
      "perplexity": [
        1.137472152709961,
        1.0347933769226074
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\nEndowment(Yale, 42.3_billion)\n                  ^"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)",
        "Research(x)",
        "University(x)",
        "Moved(x, y)",
        "Endowment(x, y)",
        "Organized(x, y)",
        "Residential(x)",
        "Graduate(x)",
        "Professional(x)",
        "College(x)",
        "List(x, y)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "benjamin",
        "franklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "stiles",
        "grace",
        "hopper",
        "jonathan",
        "edwards",
        "morse",
        "pauli",
        "murray",
        "pierson",
        "saybrook",
        "silliman",
        "timothy",
        "dwight",
        "trumbull"
      ],
      "fol_rules": [
        "Private(yale) ∧ Ivy(yale) ∧ Research(yale) ∧ University(yale)",
        "Moved(yale, newhaven)",
        "Endowment(yale, 42300000000)",
        "Organized(yale, 27)",
        "Residential(benjamin) ∧ Residential(franklin) ∧ Residential(berkeley) ∧ Residential(branford) ∧ Residential(davenport) ∧ Residential(ezra)"
      ],
      "fol_conc": "∃x (Private(x) ∧ Ivy(x) ∧ Research(x) ∧ University(x) ∧ Moved(x, newhaven))",
      "perplexity": 1.1657090187072754,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(x)",
        "ResearchUniversity(x)",
        "MovedTo(x, y)",
        "OrganizedInto(x, y)",
        "ResearchUniversity(x)"
      ],
      "fol_consts": [
        "Yale University",
        "New Haven",
        "Yale University",
        "New Haven",
        "Yale University",
        "Yale University"
      ],
      "fol_rules": [
        "Private(Yale University) ∧ IvyLeague(Yale University) ∧ ResearchUniversity(Yale University)",
        "MovedTo(Yale University, New Haven)",
        "OrganizedInto(Yale University, Yale University)",
        "ResearchUniversity(Yale University)"
      ],
      "fol_conc": "∃x (Private(x) ∧ IvyLeague(x) ∧ ResearchUniversity(x) ∧ MovedTo(x, New Haven))",
      "perplexity": 2.2235679626464844,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 235
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "GivenOut(x, y, z)",
        "OnBachelor(x)",
        "Portrays(x, y)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃y GivenOut(roses, bachelor, pm8)",
        "∀x (GivenOut(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → ∃y Portrays(x, y))",
        "∀x ∀y (Portrays(x, y) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬GivenOut(breakingbad, monday, pm8)",
      "perplexity": [
        1.0870662927627563,
        1.0161006450653076
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realpeople(y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(roses, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.2369846105575562,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "OnTheBachelor(x)",
        "PortraysRealPeople(x)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "bachelor",
        "breakingbad",
        "monday",
        "8pm"
      ],
      "fol_rules": [
        "∃y ∃z (OnTV(y, monday, z) ∧ OnTV(y, monday, 8pm))",
        "∀x (Rose(x) → OnTheBachelor(x))",
        "∀x (OnTheBachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, monday, 8pm)",
      "perplexity": 1.4163721799850464,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 236
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, x) ∧ Stable(x)",
      "perplexity": [
        1.0569020509719849,
        1.0185134410858154
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Leads(x, y)",
        "Stable(x)",
        "Feud(x, y)",
        "Includes(x, y)",
        "Professional(x)"
      ],
      "fol_consts": [
        "roderick",
        "diamond",
        "creed",
        "ivy",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond)",
        "Leads(roderick, diamond)",
        "Includes(diamond, creed)",
        "Includes(diamond, ivy)",
        "Feud(imperium, diamond)"
      ],
      "fol_conc": "Leads(roderick, diamond)",
      "perplexity": 1.2737903594970703,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "FeudWith(x, y)",
        "Includes(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium",
        "RoderickStrong"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(DiamondMine)",
        "Leads(RoderickStrong, DiamondMine)",
        "Includes(DiamondMine, CreedBrothers)",
        "Includes(DiamondMine, IvyNile)",
        "FeudWith(Imperium, DiamondMine)"
      ],
      "fol_conc": "Leads(RoderickStrong, x) ∧ ProfessionalWrestlingStable(x)",
      "perplexity": 1.3761839866638184,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 237
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0482230186462402,
        1.0115833282470703
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.111333966255188,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.0263367891311646,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 238
  },
  {
    "id": 156,
    "nl_problem": {
      "context": [
        "All humans are mortal.",
        "All Greeks are humans."
      ],
      "question": "Some Greeks are mortal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": [
        1.0590438842773438,
        1.0337275266647339
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "socrates"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 1.3052655458450317,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "socrates",
        "plato"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 1.9556928873062134,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 239
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": [
        1.0400478839874268,
        1.0231415033340454
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robert",
        "bayern"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.2741869688034058,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": 1.0735739469528198,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 240
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "Managed(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "EqualToMonthRent(x, y)",
        "MoreThanMonthRent(x, y)",
        "Cat(x)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "monthRent"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x ∀y (SecurityDeposit(x, y) → (EqualToMonthRent(x, y) ⊕ MoreThanMonthRent(x, y)))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, 2000)",
        "∀x (Allowed(x, fluffy) ∧ ¬MoreThanMonthRent(x, 1500) ↔ (Rent(x, y) ∧ ¬MoreThanMonthRent(x, 1500)))",
        "MoreThanMonthRent(2000, 1500)"
      ],
      "fol_conc": "¬Rent(tom, oliveGarden)",
      "perplexity": [
        1.072723627090454,
        1.0138976573944092
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Equal(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "month",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Equal(x, month) ∨ More(x, month)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Rent(x, y) ∧ Allowed(x, z) ∧ More(y, 1500) → ¬Rent(x, y))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Rent(olivegarden, tom)",
      "perplexity": 1.1888188123703003,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "AllowedIn(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "EqualTo(x, y)",
        "MoreThan(x, y)",
        "Cat(x)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "fluffy",
        "tom",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ AllowedIn(x, y))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x ∃y (DepositRequired(x) → SecurityDeposit(x, y))",
        "(SecurityDeposit(x, $2000) ∨ MoreThan($2000, x))"
      ],
      "fol_conc": "Rent(olivegarden, tom)",
      "perplexity": 1.5981720685958862,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 221
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "In(x, y)",
        "Visited(x, y)",
        "Mine(x)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan_de_onate",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine"
      ],
      "fol_rules": [
        "In(picuris, new_mexico) ⊕ In(picuris, texas)",
        "Visited(juan_de_onate, picuris)",
        "Mine(harding_pegmatite_mine)",
        "In(harding_pegmatite_mine, picuris)",
        "Donated(harding_pegmatite_mine)",
        "¬∃x (MountainRange(x) ∧ In(x, texas) ∧ ∃y (Mine(y) ∧ In(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan_de_onate, x) ∧ In(x, new_mexico)",
      "perplexity": [
        1.0407185554504395,
        1.008997917175293
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Range(x)",
        "Located(x, y)",
        "Visited(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "onate",
        "texas",
        "newmexico",
        "harding"
      ],
      "fol_rules": [
        "Range(picuris) ∧ (Located(picuris, texas) ∨ Located(picuris, newmexico))",
        "Visited(onate, picuris)",
        "Located(harding, picuris) ∧ Donated(harding)",
        "¬(∃x (Range(x) ∧ Located(x, texas) ∧ (∃y (Located(y, x) ∧ Donated(y)))) ∧ Mountain(x))"
      ],
      "fol_conc": "∃x (Range(x) ∧ Located(x, newmexico) ∧ Visited(onate, x))",
      "perplexity": 1.2590887546539307,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris_mountains",
        "juan_de_onate",
        "new mexico",
        "texas",
        "harding_pegmatite_mine"
      ],
      "fol_rules": [
        "LocatedIn(picuris_mountains, new mexico) ∨ LocatedIn(picuris_mountains, texas)",
        "Visited(juan_de_onate, picuris_mountains)",
        "Donated(harding_pegmatite_mine)",
        "¬(∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan_de_onate, x) ∧ MountainRange(x) ∧ LocatedIn(x, new mexico)",
      "perplexity": 1.1408864259719849,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 222
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Reptile(x)",
        "HaveTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.0553007125854492,
        1.0295382738113403
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Hasteeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Hasteeth(x))",
        "¬Hasteeth(platypus)",
        "Mammal(platypus)",
        "Hasteeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.3296551704406738,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.1642115116119385,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 223
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": [
        1.0597249269485474,
        1.0184179544448853
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "barutincove",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Part(snowisland, southshetlandislands)",
        "Part(greenwichisland, southshetlandislands)",
        "Part(deceptionisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z ((Located(x, y) ∧ Located(y, z)) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": 1.1911756992340088,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "LocatedIn(greenwich_island, south_shetland_islands)",
        "LocatedIn(deception_island, south_shetland_islands)",
        "LocatedIn(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": 1.0535399913787842,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 224
  },
  {
    "id": 92,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language understanding task.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "NLPtask(x)",
        "LanguageGeneration(x)",
        "LanguageUnderstanding(x)",
        "TextOutput(x)"
      ],
      "fol_consts": [
        "machine_translation"
      ],
      "fol_rules": [
        "∀x (NLPtask(x) → (LanguageGeneration(x) ⊕ LanguageUnderstanding(x)))",
        "∀x (TextOutput(x) → LanguageGeneration(x))",
        "NLPtask(machine_translation)",
        "TextOutput(machine_translation)"
      ],
      "fol_conc": "¬LanguageUnderstanding(machine_translation)",
      "perplexity": [
        1.0837124586105347,
        1.0163286924362183
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nlp(x)",
        "Generation(x)",
        "Understanding(x)",
        "Output(x, y)",
        "Text(y)"
      ],
      "fol_consts": [
        "machine",
        "translation"
      ],
      "fol_rules": [
        "∀x (Nlp(x) → (Generation(x) ⊕ Understanding(x)))",
        "∀x (Nlp(x) ∧ Output(x, y) ∧ Text(y) → Generation(x))",
        "Nlp(machine)",
        "Output(machine, translation)",
        "Text(translation)"
      ],
      "fol_conc": "Understanding(machine)",
      "perplexity": 1.2961746454238892,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NaturalLanguageProcessingTask(x)",
        "LanguageGenerationTask(x)",
        "LanguageUnderstandingTask(x)",
        "Output(x, y)",
        "NaturalLanguageProcessingTask(y)"
      ],
      "fol_consts": [
        "machine translation",
        "machine translation"
      ],
      "fol_rules": [
        "∀x (NaturalLanguageProcessingTask(x) → (LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x)))",
        "∀x (Output(x, y) → LanguageGenerationTask(y))",
        "NaturalLanguageProcessingTask(machine translation)",
        "Output(machine translation, x)"
      ],
      "fol_conc": "¬LanguageGenerationTask(machine translation)",
      "perplexity": 2.5953738689422607,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 225
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Rent(x, y)",
        "Deposit(x, y)",
        "Cat(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "dollar2000",
        "dollar1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, Pet))",
        "∀x (Managed(x) → ∃y (Deposit(x, y)))",
        "∀x ∀y (Deposit(x, y) → (y = Rent(x) ∨ y > Rent(x)))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, dollar2000)",
        "∀x (Managed(x) → ((Allowed(x, fluffy) ∧ Deposit(x, y) ≤ dollar1500) ↔ Rent(x, y)))",
        "dollar2000 > dollar1500"
      ],
      "fol_conc": "Deposit(oliveGarden, dollar2000) ∨ Deposit(oliveGarden, y) ∧ y > dollar2000",
      "perplexity": [
        1.0602327585220337,
        1.0234142541885376
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ∀y (Deposit(x, y) → (y = Rent(x) ∨ y > Rent(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Apartment(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "2000"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Rent(x, x) ∨ More(x, y)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Apartment(x) ∧ Managed(x) ↔ (Allowed(x, fluffy) ∧ ¬More(x, 1500)))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Deposit(olivegarden) ∨ More(olivegarden, 2000)",
      "perplexity": 1.2282187938690186,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "Cat(x)",
        "Equal(x, y)",
        "MoreThan(x, y)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ Allowed(x, y))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → SecurityDeposit(x, z) ∨ MoreThan(z, x))"
      ],
      "fol_conc": "(SecurityDeposit(olivegarden, t) ∧ Equal(t, s)) ∨ MoreThan(s, t)",
      "perplexity": 1.762923240661621,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 226
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": [
        1.0314925909042358,
        1.0186500549316406
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → Wear(x, y) ∧ Large(y))",
        "∀x (Wear(x, y) ∧ Large(y) → Wear(x, z) ∧ Large(z))",
        "¬(Wear(yuri, y) ∧ Large(y))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.1916626691818237,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.0910462141036987,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 227
  },
  {
    "id": 101,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "((Evil(harry) ∧ Ugly(harry)) ⊕ (¬Evil(harry) ∧ ¬Ugly(harry))) → ¬(Kind(harry) ∨ CEO(harry))",
      "perplexity": [
        1.0606088638305664,
        1.0105715990066528
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry)) → ¬(Kind(harry) ∨ Ceos(harry))",
      "perplexity": 1.1559126377105713,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry)) → ¬Kind(harry) ∧ ¬CEO(harry)",
      "perplexity": 1.084322452545166,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 228
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "Last(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "OlympicGames(tokyo)",
        "Last(tokyo, OlympicGames)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, tokyo)",
      "perplexity": [
        1.0780632495880127,
        1.0225456953048706
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: OlympicGames/1, OlympicGames/0.\n\n\nFatal error:  The following symbols are used with multiple arities: OlympicGames/1, OlympicGames/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Won(x, y)",
        "Most(x, y)",
        "Last(x)"
      ],
      "fol_consts": [
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(tokyo)",
        "Sporting(tokyo)",
        "Won(unitedstates, tokyo)",
        "Most(unitedstates, tokyo)"
      ],
      "fol_conc": "Won(unitedstates, x) ∧ Most(unitedstates, x) ∧ Last(x)",
      "perplexity": 1.394596815109253,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "OlympicGames(tokyo)",
        "SportingEvent(tokyo)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, tokyo)",
      "perplexity": 1.1186771392822266,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 229
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x)",
        "Appear(x)",
        "LunchCompany(x)",
        "LunchHome(x)",
        "RemoteWork(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeeting(x) → Appear(x))",
        "∀x (LunchCompany(x) → ScheduleMeeting(x))",
        "∀x (Employee(x) → (LunchCompany(x) ⊕ LunchHome(x)))",
        "∀x (LunchHome(x) → RemoteWork(x))",
        "∀x (OtherCountry(x) → RemoteWork(x))",
        "∀x (Manager(x) → ¬RemoteWork(x))",
        "(Manager(james) ∧ Appear(james)) ⊕ ¬(Manager(james) ∨ Appear(james))"
      ],
      "fol_conc": "(Manager(james) ∨ OtherCountry(james)) → (LunchHome(james) ∧ RemoteWork(james)) ⊕ ¬(LunchHome(james) ∨ RemoteWork(james))",
      "perplexity": [
        1.0634243488311768,
        1.0180314779281616
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Manager(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, y) → Appear(x, y))",
        "∀x (Lunch(x, y) → Schedule(x, y))",
        "∀x (Employee(x) → (Lunch(x, y) ⊕ Lunch(x, z)))",
        "∀x (Lunch(x, z) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, y)) ⊕ ¬(Manager(james) ∨ Appear(james, y))"
      ],
      "fol_conc": "((Manager(james) ∨ Other(james)) → ((Lunch(james, z) ∧ Remote(james)) ⊕ ¬(Lunch(james, z) ∨ Remote(james))))",
      "perplexity": 1.1209967136383057,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomer(x)",
        "AppearInCompanyToday(x)",
        "HaveLunchInCompany(x)",
        "HaveLunchAtHome(x)",
        "WorkingRemotelyFromHome(x)",
        "Manager(x)",
        "InOtherCountries(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeetingWithCustomer(x) → AppearInCompanyToday(x))",
        "∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x))",
        "∀x (Employee(x) → HaveLunchInCompany(x) ⊕ HaveLunchAtHome(x))",
        "∀x (HaveLunchAtHome(x) → WorkingRemotelyFromHome(x))",
        "∀x (Employee(x) ∧ InOtherCountries(x) → WorkingRemotelyFromHome(x))",
        "¬(Manager(x) ∧ WorkingRemotelyFromHome(x))",
        "(Manager(james) ∧ AppearInCompanyToday(james)) ⊕ ¬(Manager(james) ∨ AppearInCompanyToday(james))"
      ],
      "fol_conc": "∀x ((Manager(x) ∨ InOtherCountries(x)) → (HaveLunchAtHome(x) ∧ WorkingRemotelyFromHome(x)) ⊕ ¬(HaveLunchAtHome(x) ∨ WorkingRemotelyFromHome(x)))",
      "perplexity": 1.1599159240722656,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 230
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSDept(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSDept(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "TakeDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.036009669303894,
        1.0131852626800537
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, y)",
        "Instructed(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "database"
      ],
      "fol_rules": [
        "¬(Student(x) ∧ Work(x, library) ∧ From(x, computer))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) → From(x, computer))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, database))",
        "∀x (Student(x) ∧ Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.141514539718628,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorkingInTheLab(x)",
        "WorkingInTheLab(x)",
        "FromComputerScienceDepartment(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "TakesDatabaseCourse(x)",
        "InstructedByDavid(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkingInTheLab(x) → ¬FromComputerScienceDepartment(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) → Student(x) ∧ WorkingInTheLab(x))",
        "∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))",
        "∀x (InstructedByDavid(x) → TakesDatabaseCourse(x))",
        "∀x (WorkingInTheLab(x) → InstructedByDavid(x))",
        "Student(james)",
        "WorkingInTheLab(james)",
        "¬(HasPartTimeJobOfferedByUniversity(jack) ∨ WorkingInTheLab(jack))"
      ],
      "fol_conc": "(TakesDatabaseCourse(james) ∨ HasPartTimeJobOfferedByUniversity(james))",
      "perplexity": 1.7965888977050781,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 231
  },
  {
    "id": 128,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has a wedding that is well-attended.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "HoneymoonParis(x)",
        "July(x)",
        "WellAttended(x)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → HoneymoonParis(x))",
        "∃x (Wedding(x) ∧ July(x) ∧ WellAttended(x))",
        "Child(john) → ¬HoneymoonParis(john) ∧ ¬Wedding(john)",
        "WellAttended(john) → (Wedding(john) ∧ July(john)) ⊕ HoneymoonParis(john)"
      ],
      "fol_conc": "∃x (Wedding(x) ∧ WellAttended(x) ∧ Do(john, x))",
      "perplexity": [
        1.0615676641464233,
        1.0170412063598633
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Wedding(x)",
        "Child(x)",
        "Has(x, y)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Has(x, y) ∧ Child(y)))",
        "∀x (Travel(x, paris) ∧ Honeymoon(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → Travel(x, paris) ∧ Honeymoon(x))",
        "∃x (Wedding(x) ∧ July(x) ∧ Wellattended(x))",
        "∀x (Has(john, y) ∧ Child(y) → ¬Travel(john, paris) ∧ ¬Wedding(john))",
        "∀x (Wedding(john) ∧ Wellattended(x) → (July(x) ∨ Travel(john, paris) ∧ Honeymoon(john)))"
      ],
      "fol_conc": "∃x (Wedding(john) ∧ Wellattended(x))",
      "perplexity": 1.1191306114196777,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "TravelToParisForHoneymoon(x)",
        "InJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (TravelToParisForHoneymoon(x) → Wedding(x))",
        "∀x (InJuly(x) ∧ Wedding(x) → TravelToParisForHoneymoon(x))",
        "∃x (Wedding(x) ∧ InJuly(x) ∧ WellAttended(x))",
        "Child(john, y) → ¬TravelToParisForHoneymoon(john)",
        "WellAttended(x) ∧ Wedding(x) → InJuly(x) ∨ TravelToParisForHoneymoon(x)"
      ],
      "fol_conc": "∃y (Wedding(john, y) ∧ WellAttended(y))",
      "perplexity": 1.1806108951568604,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/1, Wedding/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/1, Wedding/2"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 232
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "F1Visa(x)",
        "J1Visa(x)",
        "WantsWork(x)",
        "NeedsCPT(x)",
        "NeedsOPT(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "F1Visa(mike)",
      "perplexity": [
        1.0469943284988403,
        1.0178579092025757
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Work(x) → (Needs(x, cpt) ∨ Needs(x, opt)))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "F1visa(mike)",
      "perplexity": 1.2128623723983765,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsApplyCPT(x)",
        "NeedsApplyOPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, f1) ∨ HasVisa(x, j1))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsToWork(x) → NeedsApplyCPT(x) ∨ NeedsApplyOPT(x))",
        "InternationalStudent(mike)",
        "NeedsApplyCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, f1)",
      "perplexity": 1.2137982845306396,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 233
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedMoney(x)",
        "OrderTakeout(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeDining(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkStudentJob(x) → NeedMoney(x))",
        "∀x (OrderTakeout(x) → WorkStudentJob(x))",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x))",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x))",
        "∀x (EnjoyDiningHall(x) → SpendTimeDining(x))",
        "∀x ((WorkStudentJob(x) ∧ NeedMoney(x)) → (¬PickyEater(x) ∧ ¬NeedMoney(x)))"
      ],
      "fol_conc": "¬PickyEater(mary) ∧ SpendTimeDining(mary)",
      "perplexity": [
        1.033364176750183,
        1.0126771926879883
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x)",
        "Need(x)",
        "Order(x)",
        "Enjoy(x)",
        "Picky(x)",
        "Spend(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "Work(x) → Need(x)",
        "Order(x) → Work(x)",
        "Order(x) ⊕ Enjoy(x)",
        "Enjoy(x) → ¬Picky(x)",
        "Enjoy(x) → Spend(x)",
        "Work(mary) ∧ Need(mary) → ¬(Picky(mary) ∨ Need(mary))"
      ],
      "fol_conc": "¬Picky(mary) ∧ Spend(mary)",
      "perplexity": 1.1238340139389038,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedEarnMoney(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeEatingCatchingUp(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "WorkStudentJob(x) → NeedEarnMoney(x)",
        "OrderTakeoutFrequently(x) → WorkStudentJob(x)",
        "OrderTakeoutFrequently(x) ⊕ EnjoyDiningHall(x)",
        "EnjoyDiningHall(x) → ¬PickyEater(x)",
        "EnjoyDiningHall(x) → SpendTimeEatingCatchingUp(x)",
        "(WorkStudentJob(mary) ∧ NeedEarnMoney(mary)) → (¬PickyEater(mary) ∧ ¬NeedEarnMoney(mary))"
      ],
      "fol_conc": "(¬PickyEater(mary) ∧ SpendTimeEatingCatchingUp(mary))",
      "perplexity": 1.120283842086792,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 234
  },
  {
    "id": 66,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "A private Ivy League research university moved to New Haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(x)",
        "Research(x)",
        "MovedTo(x, y, z)",
        "Endowment(x, y)",
        "OrganizedInto(x, y)",
        "ResidentialCollege(x)",
        "GraduateSchool(x)",
        "ProfessionalSchool(x)"
      ],
      "fol_consts": [
        "yale",
        "new_haven",
        "bf_college",
        "berkeley_college",
        "1716",
        "42.3_billion"
      ],
      "fol_rules": [
        "Private(yale) ∧ IvyLeague(yale) ∧ Research(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "Endowment(yale, 42.3_billion)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(bf_college)",
        "ResidentialCollege(berkeley_college)",
        "Private(yale) ∧ IvyLeague(yale) ∧ Research(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "Endowment(yale, 42.3_billion)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(bf_college)",
        "ResidentialCollege(berkeley_college)"
      ],
      "fol_conc": "∃x (Private(x) ∧ IvyLeague(x) ∧ Research(x) ∧ MovedTo(x, new_haven, _))",
      "perplexity": [
        1.137472152709961,
        1.0347933769226074
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\nEndowment(Yale, 42.3_billion)\n                  ^"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)",
        "Research(x)",
        "University(x)",
        "Moved(x, y)",
        "Endowment(x, y)",
        "Organized(x, y)",
        "Residential(x)",
        "Graduate(x)",
        "Professional(x)",
        "College(x)",
        "List(x, y)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "benjamin",
        "franklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "stiles",
        "grace",
        "hopper",
        "jonathan",
        "edwards",
        "morse",
        "pauli",
        "murray",
        "pierson",
        "saybrook",
        "silliman",
        "timothy",
        "dwight",
        "trumbull"
      ],
      "fol_rules": [
        "Private(yale) ∧ Ivy(yale) ∧ Research(yale) ∧ University(yale)",
        "Moved(yale, newhaven)",
        "Endowment(yale, 42300000000)",
        "Organized(yale, 27)",
        "Residential(benjamin) ∧ Residential(franklin) ∧ Residential(berkeley) ∧ Residential(branford) ∧ Residential(davenport) ∧ Residential(ezra)"
      ],
      "fol_conc": "∃x (Private(x) ∧ Ivy(x) ∧ Research(x) ∧ University(x) ∧ Moved(x, newhaven))",
      "perplexity": 1.1657090187072754,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(x)",
        "ResearchUniversity(x)",
        "MovedTo(x, y)",
        "OrganizedInto(x, y)",
        "ResearchUniversity(x)"
      ],
      "fol_consts": [
        "Yale University",
        "New Haven",
        "Yale University",
        "New Haven",
        "Yale University",
        "Yale University"
      ],
      "fol_rules": [
        "Private(Yale University) ∧ IvyLeague(Yale University) ∧ ResearchUniversity(Yale University)",
        "MovedTo(Yale University, New Haven)",
        "OrganizedInto(Yale University, Yale University)",
        "ResearchUniversity(Yale University)"
      ],
      "fol_conc": "∃x (Private(x) ∧ IvyLeague(x) ∧ ResearchUniversity(x) ∧ MovedTo(x, New Haven))",
      "perplexity": 2.2235679626464844,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 235
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "GivenOut(x, y, z)",
        "OnBachelor(x)",
        "Portrays(x, y)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃y GivenOut(roses, bachelor, pm8)",
        "∀x (GivenOut(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → ∃y Portrays(x, y))",
        "∀x ∀y (Portrays(x, y) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬GivenOut(breakingbad, monday, pm8)",
      "perplexity": [
        1.0870662927627563,
        1.0161006450653076
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realpeople(y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(roses, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.2369846105575562,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "OnTheBachelor(x)",
        "PortraysRealPeople(x)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "bachelor",
        "breakingbad",
        "monday",
        "8pm"
      ],
      "fol_rules": [
        "∃y ∃z (OnTV(y, monday, z) ∧ OnTV(y, monday, 8pm))",
        "∀x (Rose(x) → OnTheBachelor(x))",
        "∀x (OnTheBachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, monday, 8pm)",
      "perplexity": 1.4163721799850464,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 236
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, x) ∧ Stable(x)",
      "perplexity": [
        1.0569020509719849,
        1.0185134410858154
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Leads(x, y)",
        "Stable(x)",
        "Feud(x, y)",
        "Includes(x, y)",
        "Professional(x)"
      ],
      "fol_consts": [
        "roderick",
        "diamond",
        "creed",
        "ivy",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond)",
        "Leads(roderick, diamond)",
        "Includes(diamond, creed)",
        "Includes(diamond, ivy)",
        "Feud(imperium, diamond)"
      ],
      "fol_conc": "Leads(roderick, diamond)",
      "perplexity": 1.2737903594970703,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "FeudWith(x, y)",
        "Includes(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium",
        "RoderickStrong"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(DiamondMine)",
        "Leads(RoderickStrong, DiamondMine)",
        "Includes(DiamondMine, CreedBrothers)",
        "Includes(DiamondMine, IvyNile)",
        "FeudWith(Imperium, DiamondMine)"
      ],
      "fol_conc": "Leads(RoderickStrong, x) ∧ ProfessionalWrestlingStable(x)",
      "perplexity": 1.3761839866638184,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 237
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0482230186462402,
        1.0115833282470703
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.111333966255188,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.0263367891311646,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 238
  },
  {
    "id": 156,
    "nl_problem": {
      "context": [
        "All humans are mortal.",
        "All Greeks are humans."
      ],
      "question": "Some Greeks are mortal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": [
        1.0590438842773438,
        1.0337275266647339
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "socrates"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 1.3052655458450317,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "socrates",
        "plato"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 1.9556928873062134,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 239
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": [
        1.0400478839874268,
        1.0231415033340454
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robert",
        "bayern"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.2741869688034058,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": 1.0735739469528198,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 240
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "Managed(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "EqualToMonthRent(x, y)",
        "MoreThanMonthRent(x, y)",
        "Cat(x)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "monthRent"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x ∀y (SecurityDeposit(x, y) → (EqualToMonthRent(x, y) ⊕ MoreThanMonthRent(x, y)))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, 2000)",
        "∀x (Allowed(x, fluffy) ∧ ¬MoreThanMonthRent(x, 1500) ↔ (Rent(x, y) ∧ ¬MoreThanMonthRent(x, 1500)))",
        "MoreThanMonthRent(2000, 1500)"
      ],
      "fol_conc": "¬Rent(tom, oliveGarden)",
      "perplexity": [
        1.072723627090454,
        1.0138976573944092
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Equal(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "month",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Equal(x, month) ∨ More(x, month)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Rent(x, y) ∧ Allowed(x, z) ∧ More(y, 1500) → ¬Rent(x, y))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Rent(olivegarden, tom)",
      "perplexity": 1.1888188123703003,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "AllowedIn(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "EqualTo(x, y)",
        "MoreThan(x, y)",
        "Cat(x)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "fluffy",
        "tom",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ AllowedIn(x, y))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x ∃y (DepositRequired(x) → SecurityDeposit(x, y))",
        "(SecurityDeposit(x, $2000) ∨ MoreThan($2000, x))"
      ],
      "fol_conc": "Rent(olivegarden, tom)",
      "perplexity": 1.5981720685958862,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 221
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "In(x, y)",
        "Visited(x, y)",
        "Mine(x)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan_de_onate",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine"
      ],
      "fol_rules": [
        "In(picuris, new_mexico) ⊕ In(picuris, texas)",
        "Visited(juan_de_onate, picuris)",
        "Mine(harding_pegmatite_mine)",
        "In(harding_pegmatite_mine, picuris)",
        "Donated(harding_pegmatite_mine)",
        "¬∃x (MountainRange(x) ∧ In(x, texas) ∧ ∃y (Mine(y) ∧ In(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan_de_onate, x) ∧ In(x, new_mexico)",
      "perplexity": [
        1.0407185554504395,
        1.008997917175293
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Range(x)",
        "Located(x, y)",
        "Visited(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "onate",
        "texas",
        "newmexico",
        "harding"
      ],
      "fol_rules": [
        "Range(picuris) ∧ (Located(picuris, texas) ∨ Located(picuris, newmexico))",
        "Visited(onate, picuris)",
        "Located(harding, picuris) ∧ Donated(harding)",
        "¬(∃x (Range(x) ∧ Located(x, texas) ∧ (∃y (Located(y, x) ∧ Donated(y)))) ∧ Mountain(x))"
      ],
      "fol_conc": "∃x (Range(x) ∧ Located(x, newmexico) ∧ Visited(onate, x))",
      "perplexity": 1.2590887546539307,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris_mountains",
        "juan_de_onate",
        "new mexico",
        "texas",
        "harding_pegmatite_mine"
      ],
      "fol_rules": [
        "LocatedIn(picuris_mountains, new mexico) ∨ LocatedIn(picuris_mountains, texas)",
        "Visited(juan_de_onate, picuris_mountains)",
        "Donated(harding_pegmatite_mine)",
        "¬(∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan_de_onate, x) ∧ MountainRange(x) ∧ LocatedIn(x, new mexico)",
      "perplexity": 1.1408864259719849,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 222
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Reptile(x)",
        "HaveTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.0553007125854492,
        1.0295382738113403
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Hasteeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Hasteeth(x))",
        "¬Hasteeth(platypus)",
        "Mammal(platypus)",
        "Hasteeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.3296551704406738,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.1642115116119385,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 223
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": [
        1.0597249269485474,
        1.0184179544448853
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "barutincove",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Part(snowisland, southshetlandislands)",
        "Part(greenwichisland, southshetlandislands)",
        "Part(deceptionisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z ((Located(x, y) ∧ Located(y, z)) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": 1.1911756992340088,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "LocatedIn(greenwich_island, south_shetland_islands)",
        "LocatedIn(deception_island, south_shetland_islands)",
        "LocatedIn(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": 1.0535399913787842,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 224
  },
  {
    "id": 92,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language understanding task.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "NLPtask(x)",
        "LanguageGeneration(x)",
        "LanguageUnderstanding(x)",
        "TextOutput(x)"
      ],
      "fol_consts": [
        "machine_translation"
      ],
      "fol_rules": [
        "∀x (NLPtask(x) → (LanguageGeneration(x) ⊕ LanguageUnderstanding(x)))",
        "∀x (TextOutput(x) → LanguageGeneration(x))",
        "NLPtask(machine_translation)",
        "TextOutput(machine_translation)"
      ],
      "fol_conc": "¬LanguageUnderstanding(machine_translation)",
      "perplexity": [
        1.0837124586105347,
        1.0163286924362183
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nlp(x)",
        "Generation(x)",
        "Understanding(x)",
        "Output(x, y)",
        "Text(y)"
      ],
      "fol_consts": [
        "machine",
        "translation"
      ],
      "fol_rules": [
        "∀x (Nlp(x) → (Generation(x) ⊕ Understanding(x)))",
        "∀x (Nlp(x) ∧ Output(x, y) ∧ Text(y) → Generation(x))",
        "Nlp(machine)",
        "Output(machine, translation)",
        "Text(translation)"
      ],
      "fol_conc": "Understanding(machine)",
      "perplexity": 1.2961746454238892,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NaturalLanguageProcessingTask(x)",
        "LanguageGenerationTask(x)",
        "LanguageUnderstandingTask(x)",
        "Output(x, y)",
        "NaturalLanguageProcessingTask(y)"
      ],
      "fol_consts": [
        "machine translation",
        "machine translation"
      ],
      "fol_rules": [
        "∀x (NaturalLanguageProcessingTask(x) → (LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x)))",
        "∀x (Output(x, y) → LanguageGenerationTask(y))",
        "NaturalLanguageProcessingTask(machine translation)",
        "Output(machine translation, x)"
      ],
      "fol_conc": "¬LanguageGenerationTask(machine translation)",
      "perplexity": 2.5953738689422607,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 225
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Rent(x, y)",
        "Deposit(x, y)",
        "Cat(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "dollar2000",
        "dollar1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, Pet))",
        "∀x (Managed(x) → ∃y (Deposit(x, y)))",
        "∀x ∀y (Deposit(x, y) → (y = Rent(x) ∨ y > Rent(x)))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, dollar2000)",
        "∀x (Managed(x) → ((Allowed(x, fluffy) ∧ Deposit(x, y) ≤ dollar1500) ↔ Rent(x, y)))",
        "dollar2000 > dollar1500"
      ],
      "fol_conc": "Deposit(oliveGarden, dollar2000) ∨ Deposit(oliveGarden, y) ∧ y > dollar2000",
      "perplexity": [
        1.0602327585220337,
        1.0234142541885376
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ∀y (Deposit(x, y) → (y = Rent(x) ∨ y > Rent(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x)",
        "Managed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Apartment(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "2000"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Rent(x, x) ∨ More(x, y)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Apartment(x) ∧ Managed(x) ↔ (Allowed(x, fluffy) ∧ ¬More(x, 1500)))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Deposit(olivegarden) ∨ More(olivegarden, 2000)",
      "perplexity": 1.2282187938690186,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Pet/1, Pet/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Pet/1, Pet/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "ManagedBuilding(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "Cat(x)",
        "Equal(x, y)",
        "MoreThan(x, y)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ Allowed(x, y))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → SecurityDeposit(x, z) ∨ MoreThan(z, x))"
      ],
      "fol_conc": "(SecurityDeposit(olivegarden, t) ∧ Equal(t, s)) ∨ MoreThan(s, t)",
      "perplexity": 1.762923240661621,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 226
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": [
        1.0314925909042358,
        1.0186500549316406
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → Wear(x, y) ∧ Large(y))",
        "∀x (Wear(x, y) ∧ Large(y) → Wear(x, z) ∧ Large(z))",
        "¬(Wear(yuri, y) ∧ Large(y))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.1916626691818237,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.0910462141036987,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 227
  },
  {
    "id": 101,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "((Evil(harry) ∧ Ugly(harry)) ⊕ (¬Evil(harry) ∧ ¬Ugly(harry))) → ¬(Kind(harry) ∨ CEO(harry))",
      "perplexity": [
        1.0606088638305664,
        1.0105715990066528
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry)) → ¬(Kind(harry) ∨ Ceos(harry))",
      "perplexity": 1.1559126377105713,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry)) → ¬Kind(harry) ∧ ¬CEO(harry)",
      "perplexity": 1.084322452545166,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 228
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "Last(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "OlympicGames(tokyo)",
        "Last(tokyo, OlympicGames)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, tokyo)",
      "perplexity": [
        1.0780632495880127,
        1.0225456953048706
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: OlympicGames/1, OlympicGames/0.\n\n\nFatal error:  The following symbols are used with multiple arities: OlympicGames/1, OlympicGames/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Won(x, y)",
        "Most(x, y)",
        "Last(x)"
      ],
      "fol_consts": [
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(tokyo)",
        "Sporting(tokyo)",
        "Won(unitedstates, tokyo)",
        "Most(unitedstates, tokyo)"
      ],
      "fol_conc": "Won(unitedstates, x) ∧ Most(unitedstates, x) ∧ Last(x)",
      "perplexity": 1.394596815109253,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "OlympicGames(tokyo)",
        "SportingEvent(tokyo)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, tokyo)",
      "perplexity": 1.1186771392822266,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 229
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x)",
        "Appear(x)",
        "LunchCompany(x)",
        "LunchHome(x)",
        "RemoteWork(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeeting(x) → Appear(x))",
        "∀x (LunchCompany(x) → ScheduleMeeting(x))",
        "∀x (Employee(x) → (LunchCompany(x) ⊕ LunchHome(x)))",
        "∀x (LunchHome(x) → RemoteWork(x))",
        "∀x (OtherCountry(x) → RemoteWork(x))",
        "∀x (Manager(x) → ¬RemoteWork(x))",
        "(Manager(james) ∧ Appear(james)) ⊕ ¬(Manager(james) ∨ Appear(james))"
      ],
      "fol_conc": "(Manager(james) ∨ OtherCountry(james)) → (LunchHome(james) ∧ RemoteWork(james)) ⊕ ¬(LunchHome(james) ∨ RemoteWork(james))",
      "perplexity": [
        1.0634243488311768,
        1.0180314779281616
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Manager(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, y) → Appear(x, y))",
        "∀x (Lunch(x, y) → Schedule(x, y))",
        "∀x (Employee(x) → (Lunch(x, y) ⊕ Lunch(x, z)))",
        "∀x (Lunch(x, z) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, y)) ⊕ ¬(Manager(james) ∨ Appear(james, y))"
      ],
      "fol_conc": "((Manager(james) ∨ Other(james)) → ((Lunch(james, z) ∧ Remote(james)) ⊕ ¬(Lunch(james, z) ∨ Remote(james))))",
      "perplexity": 1.1209967136383057,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomer(x)",
        "AppearInCompanyToday(x)",
        "HaveLunchInCompany(x)",
        "HaveLunchAtHome(x)",
        "WorkingRemotelyFromHome(x)",
        "Manager(x)",
        "InOtherCountries(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeetingWithCustomer(x) → AppearInCompanyToday(x))",
        "∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x))",
        "∀x (Employee(x) → HaveLunchInCompany(x) ⊕ HaveLunchAtHome(x))",
        "∀x (HaveLunchAtHome(x) → WorkingRemotelyFromHome(x))",
        "∀x (Employee(x) ∧ InOtherCountries(x) → WorkingRemotelyFromHome(x))",
        "¬(Manager(x) ∧ WorkingRemotelyFromHome(x))",
        "(Manager(james) ∧ AppearInCompanyToday(james)) ⊕ ¬(Manager(james) ∨ AppearInCompanyToday(james))"
      ],
      "fol_conc": "∀x ((Manager(x) ∨ InOtherCountries(x)) → (HaveLunchAtHome(x) ∧ WorkingRemotelyFromHome(x)) ⊕ ¬(HaveLunchAtHome(x) ∨ WorkingRemotelyFromHome(x)))",
      "perplexity": 1.1599159240722656,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 230
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSDept(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSDept(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "TakeDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.036009669303894,
        1.0131852626800537
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, y)",
        "Instructed(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "database"
      ],
      "fol_rules": [
        "¬(Student(x) ∧ Work(x, library) ∧ From(x, computer))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) → From(x, computer))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, database))",
        "∀x (Student(x) ∧ Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.141514539718628,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorkingInTheLab(x)",
        "WorkingInTheLab(x)",
        "FromComputerScienceDepartment(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "TakesDatabaseCourse(x)",
        "InstructedByDavid(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkingInTheLab(x) → ¬FromComputerScienceDepartment(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) → Student(x) ∧ WorkingInTheLab(x))",
        "∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))",
        "∀x (InstructedByDavid(x) → TakesDatabaseCourse(x))",
        "∀x (WorkingInTheLab(x) → InstructedByDavid(x))",
        "Student(james)",
        "WorkingInTheLab(james)",
        "¬(HasPartTimeJobOfferedByUniversity(jack) ∨ WorkingInTheLab(jack))"
      ],
      "fol_conc": "(TakesDatabaseCourse(james) ∨ HasPartTimeJobOfferedByUniversity(james))",
      "perplexity": 1.7965888977050781,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 231
  },
  {
    "id": 128,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has a wedding that is well-attended.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "HoneymoonParis(x)",
        "July(x)",
        "WellAttended(x)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → HoneymoonParis(x))",
        "∃x (Wedding(x) ∧ July(x) ∧ WellAttended(x))",
        "Child(john) → ¬HoneymoonParis(john) ∧ ¬Wedding(john)",
        "WellAttended(john) → (Wedding(john) ∧ July(john)) ⊕ HoneymoonParis(john)"
      ],
      "fol_conc": "∃x (Wedding(x) ∧ WellAttended(x) ∧ Do(john, x))",
      "perplexity": [
        1.0615676641464233,
        1.0170412063598633
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Wedding(x)",
        "Child(x)",
        "Has(x, y)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Has(x, y) ∧ Child(y)))",
        "∀x (Travel(x, paris) ∧ Honeymoon(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → Travel(x, paris) ∧ Honeymoon(x))",
        "∃x (Wedding(x) ∧ July(x) ∧ Wellattended(x))",
        "∀x (Has(john, y) ∧ Child(y) → ¬Travel(john, paris) ∧ ¬Wedding(john))",
        "∀x (Wedding(john) ∧ Wellattended(x) → (July(x) ∨ Travel(john, paris) ∧ Honeymoon(john)))"
      ],
      "fol_conc": "∃x (Wedding(john) ∧ Wellattended(x))",
      "perplexity": 1.1191306114196777,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "TravelToParisForHoneymoon(x)",
        "InJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (TravelToParisForHoneymoon(x) → Wedding(x))",
        "∀x (InJuly(x) ∧ Wedding(x) → TravelToParisForHoneymoon(x))",
        "∃x (Wedding(x) ∧ InJuly(x) ∧ WellAttended(x))",
        "Child(john, y) → ¬TravelToParisForHoneymoon(john)",
        "WellAttended(x) ∧ Wedding(x) → InJuly(x) ∨ TravelToParisForHoneymoon(x)"
      ],
      "fol_conc": "∃y (Wedding(john, y) ∧ WellAttended(y))",
      "perplexity": 1.1806108951568604,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/1, Wedding/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/1, Wedding/2"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 232
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "F1Visa(x)",
        "J1Visa(x)",
        "WantsWork(x)",
        "NeedsCPT(x)",
        "NeedsOPT(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "F1Visa(mike)",
      "perplexity": [
        1.0469943284988403,
        1.0178579092025757
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Work(x) → (Needs(x, cpt) ∨ Needs(x, opt)))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "F1visa(mike)",
      "perplexity": 1.2128623723983765,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsApplyCPT(x)",
        "NeedsApplyOPT(x)",
        "WantsToWork(x)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, f1) ∨ HasVisa(x, j1))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsToWork(x) → NeedsApplyCPT(x) ∨ NeedsApplyOPT(x))",
        "InternationalStudent(mike)",
        "NeedsApplyCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, f1)",
      "perplexity": 1.2137982845306396,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 233
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedMoney(x)",
        "OrderTakeout(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeDining(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkStudentJob(x) → NeedMoney(x))",
        "∀x (OrderTakeout(x) → WorkStudentJob(x))",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x))",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x))",
        "∀x (EnjoyDiningHall(x) → SpendTimeDining(x))",
        "∀x ((WorkStudentJob(x) ∧ NeedMoney(x)) → (¬PickyEater(x) ∧ ¬NeedMoney(x)))"
      ],
      "fol_conc": "¬PickyEater(mary) ∧ SpendTimeDining(mary)",
      "perplexity": [
        1.033364176750183,
        1.0126771926879883
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x)",
        "Need(x)",
        "Order(x)",
        "Enjoy(x)",
        "Picky(x)",
        "Spend(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "Work(x) → Need(x)",
        "Order(x) → Work(x)",
        "Order(x) ⊕ Enjoy(x)",
        "Enjoy(x) → ¬Picky(x)",
        "Enjoy(x) → Spend(x)",
        "Work(mary) ∧ Need(mary) → ¬(Picky(mary) ∨ Need(mary))"
      ],
      "fol_conc": "¬Picky(mary) ∧ Spend(mary)",
      "perplexity": 1.1238340139389038,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedEarnMoney(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeEatingCatchingUp(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "WorkStudentJob(x) → NeedEarnMoney(x)",
        "OrderTakeoutFrequently(x) → WorkStudentJob(x)",
        "OrderTakeoutFrequently(x) ⊕ EnjoyDiningHall(x)",
        "EnjoyDiningHall(x) → ¬PickyEater(x)",
        "EnjoyDiningHall(x) → SpendTimeEatingCatchingUp(x)",
        "(WorkStudentJob(mary) ∧ NeedEarnMoney(mary)) → (¬PickyEater(mary) ∧ ¬NeedEarnMoney(mary))"
      ],
      "fol_conc": "(¬PickyEater(mary) ∧ SpendTimeEatingCatchingUp(mary))",
      "perplexity": 1.120283842086792,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 234
  },
  {
    "id": 66,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "A private Ivy League research university moved to New Haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(x)",
        "Research(x)",
        "MovedTo(x, y, z)",
        "Endowment(x, y)",
        "OrganizedInto(x, y)",
        "ResidentialCollege(x)",
        "GraduateSchool(x)",
        "ProfessionalSchool(x)"
      ],
      "fol_consts": [
        "yale",
        "new_haven",
        "bf_college",
        "berkeley_college",
        "1716",
        "42.3_billion"
      ],
      "fol_rules": [
        "Private(yale) ∧ IvyLeague(yale) ∧ Research(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "Endowment(yale, 42.3_billion)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(bf_college)",
        "ResidentialCollege(berkeley_college)",
        "Private(yale) ∧ IvyLeague(yale) ∧ Research(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "Endowment(yale, 42.3_billion)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(bf_college)",
        "ResidentialCollege(berkeley_college)"
      ],
      "fol_conc": "∃x (Private(x) ∧ IvyLeague(x) ∧ Research(x) ∧ MovedTo(x, new_haven, _))",
      "perplexity": [
        1.137472152709961,
        1.0347933769226074
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\nEndowment(Yale, 42.3_billion)\n                  ^"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)",
        "Research(x)",
        "University(x)",
        "Moved(x, y)",
        "Endowment(x, y)",
        "Organized(x, y)",
        "Residential(x)",
        "Graduate(x)",
        "Professional(x)",
        "College(x)",
        "List(x, y)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "benjamin",
        "franklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "stiles",
        "grace",
        "hopper",
        "jonathan",
        "edwards",
        "morse",
        "pauli",
        "murray",
        "pierson",
        "saybrook",
        "silliman",
        "timothy",
        "dwight",
        "trumbull"
      ],
      "fol_rules": [
        "Private(yale) ∧ Ivy(yale) ∧ Research(yale) ∧ University(yale)",
        "Moved(yale, newhaven)",
        "Endowment(yale, 42300000000)",
        "Organized(yale, 27)",
        "Residential(benjamin) ∧ Residential(franklin) ∧ Residential(berkeley) ∧ Residential(branford) ∧ Residential(davenport) ∧ Residential(ezra)"
      ],
      "fol_conc": "∃x (Private(x) ∧ Ivy(x) ∧ Research(x) ∧ University(x) ∧ Moved(x, newhaven))",
      "perplexity": 1.1657090187072754,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Private(x)",
        "IvyLeague(x)",
        "ResearchUniversity(x)",
        "MovedTo(x, y)",
        "OrganizedInto(x, y)",
        "ResearchUniversity(x)"
      ],
      "fol_consts": [
        "Yale University",
        "New Haven",
        "Yale University",
        "New Haven",
        "Yale University",
        "Yale University"
      ],
      "fol_rules": [
        "Private(Yale University) ∧ IvyLeague(Yale University) ∧ ResearchUniversity(Yale University)",
        "MovedTo(Yale University, New Haven)",
        "OrganizedInto(Yale University, Yale University)",
        "ResearchUniversity(Yale University)"
      ],
      "fol_conc": "∃x (Private(x) ∧ IvyLeague(x) ∧ ResearchUniversity(x) ∧ MovedTo(x, New Haven))",
      "perplexity": 2.2235679626464844,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 235
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "GivenOut(x, y, z)",
        "OnBachelor(x)",
        "Portrays(x, y)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃y GivenOut(roses, bachelor, pm8)",
        "∀x (GivenOut(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → ∃y Portrays(x, y))",
        "∀x ∀y (Portrays(x, y) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬GivenOut(breakingbad, monday, pm8)",
      "perplexity": [
        1.0870662927627563,
        1.0161006450653076
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realpeople(y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(roses, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.2369846105575562,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "OnTheBachelor(x)",
        "PortraysRealPeople(x)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "bachelor",
        "breakingbad",
        "monday",
        "8pm"
      ],
      "fol_rules": [
        "∃y ∃z (OnTV(y, monday, z) ∧ OnTV(y, monday, 8pm))",
        "∀x (Rose(x) → OnTheBachelor(x))",
        "∀x (OnTheBachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, monday, 8pm)",
      "perplexity": 1.4163721799850464,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 236
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, x) ∧ Stable(x)",
      "perplexity": [
        1.0569020509719849,
        1.0185134410858154
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Leads(x, y)",
        "Stable(x)",
        "Feud(x, y)",
        "Includes(x, y)",
        "Professional(x)"
      ],
      "fol_consts": [
        "roderick",
        "diamond",
        "creed",
        "ivy",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond)",
        "Leads(roderick, diamond)",
        "Includes(diamond, creed)",
        "Includes(diamond, ivy)",
        "Feud(imperium, diamond)"
      ],
      "fol_conc": "Leads(roderick, diamond)",
      "perplexity": 1.2737903594970703,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "FeudWith(x, y)",
        "Includes(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium",
        "RoderickStrong"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(DiamondMine)",
        "Leads(RoderickStrong, DiamondMine)",
        "Includes(DiamondMine, CreedBrothers)",
        "Includes(DiamondMine, IvyNile)",
        "FeudWith(Imperium, DiamondMine)"
      ],
      "fol_conc": "Leads(RoderickStrong, x) ∧ ProfessionalWrestlingStable(x)",
      "perplexity": 1.3761839866638184,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 237
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0482230186462402,
        1.0115833282470703
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.111333966255188,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.0263367891311646,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 238
  },
  {
    "id": 156,
    "nl_problem": {
      "context": [
        "All humans are mortal.",
        "All Greeks are humans."
      ],
      "question": "Some Greeks are mortal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": [
        1.0590438842773438,
        1.0337275266647339
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "socrates"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 1.3052655458450317,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "socrates",
        "plato"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 1.9556928873062134,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 239
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": [
        1.0400478839874268,
        1.0231415033340454
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robert",
        "bayern"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.2741869688034058,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": 1.0735739469528198,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 240
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "(1.e5))",
        "realize"
      ],
      "fol_consts": [
        "+1 (2.c0)"
      ],
      "fol_rules": [
        "Ciccee.e1,",
        "Ciere.",
        "Cuertas.",
        "Circauea.",
        "Cilkaurea",
        "Ciereal!"
      ],
      "fol_conc": "Ciceraelee.doung.sons/Instruntals.",
      "perplexity": [
        3.936276435852051,
        13.850831031799316
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ciccee.e1,"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Galvian(x)"
      ],
      "fol_consts": [
        "milk",
        "software"
      ],
      "fol_rules": [
        "Akaeceionist(x) → ((Cassessor(x)) ∧ Cascessor(x) ∧ Percept(x) ∧ Obreteteeinn(x) ∨ Akaeceionist(x) ∨ Demettertleeinn(x))",
        "Ukleueeis(x) → (Cascessor(x) ∧ Cascissor(x)) ∧ Cassessor(x) ∨ Appesutteeinn(x) ∨ Uniteeinn(x)"
      ],
      "fol_conc": "Cascessor(s) ∧ Akaeceionist(s)",
      "perplexity": 7.65470552444458,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Coinny(x)"
      ],
      "fol_consts": [
        "$",
        "$",
        "$"
      ],
      "fol_rules": [
        "∃e ((((Coinny(u)))) → Coinny(i) ∧ Coinny(z))"
      ],
      "fol_conc": "((Coinny(o, i)))",
      "perplexity": 10.246957778930664,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Coinny/1, Coinny/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Coinny/1, Coinny/2"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 281
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "AI-powered chatbot",
        "Alice and Bob"
      ],
      "fol_consts": [
        "apple",
        "apple",
        "orange"
      ],
      "fol_rules": [
        "Use: <function to call with input]: The function is to perform the task."
      ],
      "fol_conc": "Alice and Alex can execute a simple program!",
      "perplexity": [
        4.864920139312744,
        11.126039505004883
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Use: <function to call with input]: The function is to perform the task."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Impetion(x)",
        "Cronsenton(x)"
      ],
      "fol_consts": [
        "cronsent"
      ],
      "fol_rules": [
        "Inirement1in(x, y) → ∀k (Sobtientnin(x) ∧ Unacleteeunin(y))"
      ],
      "fol_conc": "Ancrynents(z) ∧ Noncementiuenis(u, cronsent)",
      "perplexity": 10.930004119873047,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 282
  },
  {
    "id": 60,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Montana is home to the city of Missoula.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1, [ebb-eub', 'some'], and 'i']",
        "local_nimbanty1: ",
        "liteinnton ' to be my 'my'. The best way to understand why you need a lawyer is just look out of the door and get it done.",
        " \t\t",
        " cue",
        " I've got nothing to tell. No one has been able to say anything about me!"
      ],
      "fol_consts": [
        "1]"
      ],
      "fol_rules": [
        "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done.",
        ", ",
        " ",
        " ",
        " ",
        " ",
        " 1: "
      ],
      "fol_conc": "I have no proof for this.",
      "perplexity": [
        7.556910037994385,
        13.977261543273926
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 283
  },
  {
    "id": 76,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary needs to earn money to help pay for her college tuition.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "task, task",
        "good to finish"
      ],
      "fol_consts": [
        "my own work-innnty.",
        "I can only run my own job."
      ],
      "fol_rules": [
        "To make sure we know everything about the thing I'm going through in my real world,"
      ],
      "fol_conc": "If you say 'your part of the task' and no one is really good to get done right in your own way, then you can stop it.",
      "perplexity": [
        6.090766429901123,
        6.465536594390869
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "To make sure we know everything about the thing I'm going through in my real world,"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Aliceeion(x)"
      ],
      "fol_consts": [
        "cytorealism",
        "accelvancein",
        "assimilation"
      ],
      "fol_rules": [
        "(Alieeion(x)) ∧ (Echelon(x) → Cytelein(x) ∨ Echetto(x))",
        "Diornyeceit(zrix, zcus)",
        "Enchornauein(zu, cous)",
        "Sayeauiueiuein(zo, dous)"
      ],
      "fol_conc": "Alieeeion(x) ∧ Cytelein(x) ∧ Enchronysauein(zoliauein, zcus)",
      "perplexity": 9.494384765625,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(n)",
        "tomorrow(e, y)"
      ],
      "fol_consts": [
        "Tommy, Mike",
        "Tommy, Mike",
        ""
      ],
      "fol_rules": [
        "(tomorrow() → tomorrow(t))"
      ],
      "fol_conc": "tomorrow()",
      "perplexity": 31.84885597229004,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(tomorrow() → tomorrow(t))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 284
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cevue: Expose secrets, to uncover new things, to solve unknowns"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eartrimet(x)",
        "(n)"
      ],
      "fol_consts": [
        "$1 = x, y.",
        "$1 = x, y."
      ],
      "fol_rules": [
        "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
      ],
      "fol_conc": "(((i) ∧ (d))) → ($1 = x, y.)",
      "perplexity": 14.97048282623291,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 285
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        ""
      ],
      "fol_consts": [
        "inezrodotkaisee",
        "unleklntt', "
      ],
      "fol_rules": [],
      "fol_conc": "Yes to cnezrodotkaisea3go",
      "perplexity": [
        7.351560115814209,
        15.1317720413208
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yes to cnezrodotkaisea3go"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 286
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "123, 83",
        "57",
        "430",
        "99"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation.",
      "perplexity": [
        4.1168365478515625,
        16.92753028869629
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Chefinke(x)",
        "Molniya(x)"
      ],
      "fol_consts": [
        "caeuvie",
        "eleiyer"
      ],
      "fol_rules": [
        "Ceeibonchalneeueeeionnoucernet1960eureiqinnoissolemitunvrsuttslynke23rdtllngsmtrytysmstriykseverialgloins(x)",
        "Celeizyerimuluiyernolldleeiterntilnyaueeivresusctntinlnglngosytttsslynketrevihtsplynkedllntlucnticnsmstriykaieeifsonchalneefinxnaileighernolldleeitermentiltytrytmsmtryttslynkerevinnoissolemitunvrsutsslynketreviktsemerialgloins(x)",
        "Celeizyerimuloiyornolldleeiterntilnyaueeivresusctntinlnglngosytttnsmstriykaieeifsonchalneefinxnaileighernolldreviktsemerialgloins(x)"
      ],
      "fol_conc": "Celeizyornouttyeineeinlnguloirytsvrsutsslynketrytmsmtstriykaizeeifsonchalneefinxnaileighernolldleenovrkunwldnticnsmstrizlynkerelintrinlnguloeemitunvtsplnkedllttsslynkereinnoucernet1960eureiqinnoissolemidrytsslynkerilnyaueeivresusctntifsonchalneefinxlaiseanovrklnketholniyormstriyaksemerianomtttsslynkenerlngolldrucernet1960eveneisleiqinnoissolemitunvrsutsslynkerilnyaueeivresusctntinlnguloirytsvnsmstriyakseverialgloins(x)",
      "perplexity": 7.4634690284729,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "car(x)",
        "car(y)"
      ],
      "fol_consts": [
        "$.com.",
        "$.com.",
        "$.com."
      ],
      "fol_rules": [
        "((∃x (car(z) ∧ car(-'t))) → ((e) ∧ (d)) ⊕ ¬(l) ⊕ ¬(i) ∧ car(k) ∨ car(-'t))"
      ],
      "fol_conc": "(((o, v) ∧ ∃v (car(e) ∧ car(n))))",
      "perplexity": 19.788188934326172,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃x (car(z) ∧ car(-'t))) → ((e) ∧ (d)) ⊕ ¬(l) ⊕ ¬(i) ∧ car(k) ∨ car(-'t))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 287
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cuci/2415439473164440",
        "Brazil",
        "Camajal"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Cuci/2597318674136660",
        "Camajal"
      ],
      "fol_conc": "No name in the database",
      "perplexity": [
        2.4554502964019775,
        13.948080062866211
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cuci/2597318674136660"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Although not an American basketball player(e)",
        "Although not an American basketball player(i, j)"
      ],
      "fol_consts": [
        "Ive been watching soccer for some time now. They use rubber tires."
      ],
      "fol_rules": [
        "Although not an American basketball player(i, j)",
        "Although not an American basketball player(j)"
      ],
      "fol_conc": "Yesterday I watched the football season, but why don't you see me? You might think it won't be like this.(i, j)",
      "perplexity": 14.242874145507812,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yesterday I watched the football season, but why don't you see me? You might think it won't be like this.(i, j)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 288
  },
  {
    "id": 150,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Neapolitan Chronicles is an English book.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input/text"
      ],
      "fol_consts": [
        "from acnoi'tion to text], and a list of ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " (e.g., 'just like your own stuff')"
      ],
      "fol_rules": [
        "#y/n"
      ],
      "fol_conc": "124356678",
      "perplexity": [
        4.317047595977783,
        15.613266944885254
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "#y/n"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software(x)",
        "software(n, a)"
      ],
      "fol_consts": [
        "compactivity",
        "compactivity",
        "compactivity"
      ],
      "fol_rules": [
        "(((software(k))) ∧ (software(l)))"
      ],
      "fol_conc": "text(n) ⊕ ¬(software(t))",
      "perplexity": 34.549964904785156,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 289
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Simple Language Toolkit (ANACRI), epic!],"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 290
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "#E1",
        "E1",
        "Ineemt"
      ],
      "fol_consts": [
        "Fauet",
        "Groddi,"
      ],
      "fol_rules": [],
      "fol_conc": "If you have a $1 million in your pocket or even a fraction of an dollar!",
      "perplexity": [
        6.110694408416748,
        18.212078094482422
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If you have a $1 million in your pocket or even a fraction of an dollar!"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Catcher (n)"
      ],
      "fol_consts": [
        "Cheshire Folee",
        "Cheshire Folee"
      ],
      "fol_rules": [
        "(c) ∧ Catcher (i) → (t) ⊕ ¬Catcher (j)"
      ],
      "fol_conc": "(f) ∧ ∃e ∀x (Catcher (n))",
      "perplexity": 22.45629119873047,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(c) ∧ Catcher (i) → (t) ⊕ ¬Catcher (j)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 291
  },
  {
    "id": 132,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are mammals with no teeth.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "troveon",
        "truro",
        "rolemn"
      ],
      "fol_consts": [
        "trrottee",
        "crovo",
        "kiwi"
      ],
      "fol_rules": [
        "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more ",
        " in my mind, than its term or what I have done here. 3.5.0 :luenton, Rtyzee. 4.1.5: This is just a name of the new name that's written in the text. 2.7.0 - The phrase ",
        " is not translated, but it does not change any information. 1.3.1 - The word 'cropto' doesn't translate as per my question. 5.2: This is the whole line of words, and I've checked that all lines are understood. 4.1.0: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.1 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a plain message of ",
        " in all three lines, and I've checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.3 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of words, and I've checked that all lines are understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.2 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines, and I have checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7: The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines. 5.2: A message of "
      ],
      "fol_conc": "I have been able to get the word 'no' back into my text.",
      "perplexity": [
        6.135045528411865,
        6.306824684143066
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkginning(x)",
        "Platozatpian(x)",
        "Platauceon(x)"
      ],
      "fol_consts": [
        "prokitee"
      ],
      "fol_rules": [
        "Pachlisnt(x) ∧ Xericrysein(x) ∨ Zaliklyrein(x) ∧ Vacculnt(x)"
      ],
      "fol_conc": "Plateuceion(x) ∧ Pachlisnt(x) ∧ Xericrysein(x) ∨ Vacciltyrein(x)",
      "perplexity": 6.609610557556152,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 292
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alcee",
        "Kennington Cobalt",
        "Urglekin, aka [C've gotten my pieces out of the box.]"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it.",
      "perplexity": [
        5.995510101318359,
        10.025008201599121
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Brammye', 'Cheshire' (onscreen)"
      ],
      "fol_consts": [
        "abouttous",
        "goodlyesmornti3auntinsektoyzardstnnewsplderrygnolynsistunteilitrrrnglonnygrattyedouftrevi91bjklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetahtssorctmplinsektoyzardstnnewsplderrygnolynsistunteilitrugei623douftrevi91abklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetyethnoontuilektoyzardstnnewstrltmplinseqrookrtsionsergtttrngolynssistunteilitrugei623douftrevi91abklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetyethnoontuilektoyzardstnnewstrltmplinseqrookrtsionsergtttrngolynssistunteilitrugei623douftrevi91abklmnfiscoodlcyusvnsuttyeceosioomsoouintk",
        "thettahtresnnewstrltmplinsexrookrtzardstnixtunnygratbyuulsonydowshrlderrygnolynsistumtrfti3auttsirtyefissoovrsilosoi1kto"
      ],
      "fol_rules": [
        "Brammye', 'Cheshire' (onscreen)"
      ],
      "fol_conc": "(Brammye', 'Cheshire' (overall))",
      "perplexity": 11.701594352722168,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Brammye', 'Cheshire' (onscreen)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 293
  },
  {
    "id": 72,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock and a growth stock of a company.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "project",
        "company"
      ],
      "fol_consts": [
        "#"
      ],
      "fol_rules": [
        "",
        "\n"
      ],
      "fol_conc": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks.",
      "perplexity": [
        4.242262840270996,
        6.8478569984436035
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Notablytrevention(x)",
        "Cosbyntonautin(z)"
      ],
      "fol_consts": [
        "kodiae",
        "nestitis",
        "deedilycrevetrining"
      ],
      "fol_rules": [
        "(∃k (Newthyscnsible(x)))",
        "Implicitlyreviiting(z)"
      ],
      "fol_conc": "Thiseilitisin(nesttrovention) ⊕ Pistiueteliate1stuiueleurykittruntsimusuttiourinsite3rdietriingmrsngerwortunneviurnnetlierdilycreveilitisin(z)",
      "perplexity": 23.05329704284668,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "1. Growth stocks of companies],(/)",
        "2. Proofing: check if the stock price is volaturous,()"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "∃x ((((1. Growth stocks of companies],())) → ((2. Proofing: check if the stock price is volaturous,()))) ⊕ ¬(((1. Growth stocks of companies],(/)))))"
      ],
      "fol_conc": "(1. Growth stocks of companies],(e) → (2. Proofing: check if the stock price is volaturous,()))",
      "perplexity": 12.050065994262695,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((((1. Growth stocks of companies],())) → ((2. Proofing: check if the stock price is volaturous,()))) ⊕ ¬(((1. Growth stocks of companies],(/)))))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 294
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "pachy",
        "tac",
        "mak"
      ],
      "fol_consts": [
        "hat"
      ],
      "fol_rules": [
        "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
      ],
      "fol_conc": "Cayne oyenue yeto meae aket'er cak.",
      "perplexity": [
        5.93290376663208,
        14.123075485229492
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Importance(x)",
        "Trustful(x)"
      ],
      "fol_consts": [
        "dependent",
        "software"
      ],
      "fol_rules": [
        "Imporntal(x) ∧ Cretnatial(x) ∨ Entreaty(x) ∧ Obsttion(x) ∨ Untruptiue(x)"
      ],
      "fol_conc": "Entrrotonal(zodiacs, zellisiae) ∧ Unveliwnted(zosddics) ∧ Uncelliolian(zaxettae)",
      "perplexity": 11.210465431213379,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 295
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person X",
        "F1 visa"
      ],
      "fol_consts": [
        "New York City"
      ],
      "fol_rules": [
        "( Person X) = [.]."
      ],
      "fol_conc": "No foreign tourists can get rented by another person with a F1 visa or local residents.",
      "perplexity": [
        4.9319024085998535,
        6.0891923904418945
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "( Person X) = [.]."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "F1rezetoron(x)",
        "J3rdninlion(y)"
      ],
      "fol_consts": [
        "finlyngt",
        "dliverynt",
        "deixt",
        "vulserit",
        "reixtionist"
      ],
      "fol_rules": [
        "Eunisom(x) ∧ (F1nxoron(x)) ∧ (J3rdninlion(y))"
      ],
      "fol_conc": "Illitetttnsuent(x, y)",
      "perplexity": 12.840328216552734,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Drinker,(t)",
        "Snoattye(x)"
      ],
      "fol_consts": [
        " 'Easily Goal-Goed',--"
      ],
      "fol_rules": [
        "Cleopus(i) ∧ Cleopus(j) → ((Snoattye(k)) ⊕ (Drinker,(k)))",
        "Cleopus(k)"
      ],
      "fol_conc": "Drinker,(i)",
      "perplexity": 40.99749755859375,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cleopus(i) ∧ Cleopus(j) → ((Snoattye(k)) ⊕ (Drinker,(k)))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 296
  },
  {
    "id": 149,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "It is not true that Rose is a student and Jerry is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person A"
      ],
      "fol_consts": [
        " Person B",
        " Person C"
      ],
      "fol_rules": [
        "Person A is a friend"
      ],
      "fol_conc": "Person B is a Brinnaee, Person B knows Person A's body languaue and communicates with Person C. Person A is a Frissible Person B.",
      "perplexity": [
        3.3617444038391113,
        5.915241241455078
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Person A is a friend"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Computer(x)",
        "Carbon(x)"
      ],
      "fol_consts": [
        "compute",
        "carol"
      ],
      "fol_rules": [
        "Whatwashertouvevryseeionallycereidorinancydeacetchuereintallumiteamisafroxuttaerifodliprineimassiordilovotraomisauloudmireonnialubkuiurandolynnieprozoshoeneitkaori(np2, yellt4)"
      ],
      "fol_conc": "Treatinantyxucceionarysoicelefodriouvevryseerilovottaarifowelofoloholeuscaalomisauloudmireonnialsunnaoritkaori(np2, yellt4)",
      "perplexity": 25.15959930419922,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "softle(x)",
        "tox(y)"
      ],
      "fol_consts": [
        "+alter",
        "+alter"
      ],
      "fol_rules": [
        "softle(k) → (tox(d))"
      ],
      "fol_conc": "((∃v (softle(z))) ⊕ ¬tox(n) ⊕ ¬softle(i, s) ⊕ ¬softle(k))",
      "perplexity": 33.703758239746094,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Softle/2, Softle/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Softle/2, Softle/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 297
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Icelayma",
        "Kikklokniya",
        "No!"
      ],
      "fol_consts": [
        "None],<|im_end|><|im_start|>assistant: No. Answer: None] 2. The final answer is the word "
      ],
      "fol_rules": [
        "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism.",
        "No!",
        "No..."
      ],
      "fol_conc": "",
      "perplexity": [
        5.371349334716797,
        15.554014205932617
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AI(x)",
        "AI(n)",
        "AI(n, i)"
      ],
      "fol_consts": [
        "Iceland is a country where AI can be used,"
      ],
      "fol_rules": [
        "((AI(i)) ∧ AI(j))",
        "(AI(u)) ⊕ (AI(k) → ¬(AI(n)))"
      ],
      "fol_conc": "AI(e)",
      "perplexity": 19.54049301147461,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 298
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Detective-Object",
        "Detective-Person"
      ],
      "fol_consts": [
        "Detective-Object: This is a person."
      ],
      "fol_rules": [
        "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of ",
        "Due: A detective cannot find one person."
      ],
      "fol_conc": "Detective-Object is a woman who was caught in an accident while trying to travel from London to Los Angeles but returned back again.",
      "perplexity": [
        5.630846977233887,
        9.214771270751953
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "input.txt(i)"
      ],
      "fol_consts": [
        "passionally to perform arts, chess and computer.",
        "passionally to perform arts, chess and computer."
      ],
      "fol_rules": [
        "((input.txt(i)))"
      ],
      "fol_conc": "(input.txt(n) ∧ (input.txt(k)))",
      "perplexity": 23.547168731689453,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\n(Input.txt(n)) & (Input.txt(k))\n      ^"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 299
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can't read anything else to get better to be real people who have good enough fun."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 300
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "(1.e5))",
        "realize"
      ],
      "fol_consts": [
        "+1 (2.c0)"
      ],
      "fol_rules": [
        "Ciccee.e1,",
        "Ciere.",
        "Cuertas.",
        "Circauea.",
        "Cilkaurea",
        "Ciereal!"
      ],
      "fol_conc": "Ciceraelee.doung.sons/Instruntals.",
      "perplexity": [
        3.936276435852051,
        13.850831031799316
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ciccee.e1,"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Galvian(x)"
      ],
      "fol_consts": [
        "milk",
        "software"
      ],
      "fol_rules": [
        "Akaeceionist(x) → ((Cassessor(x)) ∧ Cascessor(x) ∧ Percept(x) ∧ Obreteteeinn(x) ∨ Akaeceionist(x) ∨ Demettertleeinn(x))",
        "Ukleueeis(x) → (Cascessor(x) ∧ Cascissor(x)) ∧ Cassessor(x) ∨ Appesutteeinn(x) ∨ Uniteeinn(x)"
      ],
      "fol_conc": "Cascessor(s) ∧ Akaeceionist(s)",
      "perplexity": 7.65470552444458,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Coinny(x)"
      ],
      "fol_consts": [
        "$",
        "$",
        "$"
      ],
      "fol_rules": [
        "∃e ((((Coinny(u)))) → Coinny(i) ∧ Coinny(z))"
      ],
      "fol_conc": "((Coinny(o, i)))",
      "perplexity": 10.246957778930664,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Coinny/1, Coinny/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Coinny/1, Coinny/2"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 281
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "AI-powered chatbot",
        "Alice and Bob"
      ],
      "fol_consts": [
        "apple",
        "apple",
        "orange"
      ],
      "fol_rules": [
        "Use: <function to call with input]: The function is to perform the task."
      ],
      "fol_conc": "Alice and Alex can execute a simple program!",
      "perplexity": [
        4.864920139312744,
        11.126039505004883
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Use: <function to call with input]: The function is to perform the task."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Impetion(x)",
        "Cronsenton(x)"
      ],
      "fol_consts": [
        "cronsent"
      ],
      "fol_rules": [
        "Inirement1in(x, y) → ∀k (Sobtientnin(x) ∧ Unacleteeunin(y))"
      ],
      "fol_conc": "Ancrynents(z) ∧ Noncementiuenis(u, cronsent)",
      "perplexity": 10.930004119873047,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 282
  },
  {
    "id": 60,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Montana is home to the city of Missoula.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1, [ebb-eub', 'some'], and 'i']",
        "local_nimbanty1: ",
        "liteinnton ' to be my 'my'. The best way to understand why you need a lawyer is just look out of the door and get it done.",
        " \t\t",
        " cue",
        " I've got nothing to tell. No one has been able to say anything about me!"
      ],
      "fol_consts": [
        "1]"
      ],
      "fol_rules": [
        "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done.",
        ", ",
        " ",
        " ",
        " ",
        " ",
        " 1: "
      ],
      "fol_conc": "I have no proof for this.",
      "perplexity": [
        7.556910037994385,
        13.977261543273926
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 283
  },
  {
    "id": 76,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary needs to earn money to help pay for her college tuition.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "task, task",
        "good to finish"
      ],
      "fol_consts": [
        "my own work-innnty.",
        "I can only run my own job."
      ],
      "fol_rules": [
        "To make sure we know everything about the thing I'm going through in my real world,"
      ],
      "fol_conc": "If you say 'your part of the task' and no one is really good to get done right in your own way, then you can stop it.",
      "perplexity": [
        6.090766429901123,
        6.465536594390869
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "To make sure we know everything about the thing I'm going through in my real world,"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Aliceeion(x)"
      ],
      "fol_consts": [
        "cytorealism",
        "accelvancein",
        "assimilation"
      ],
      "fol_rules": [
        "(Alieeion(x)) ∧ (Echelon(x) → Cytelein(x) ∨ Echetto(x))",
        "Diornyeceit(zrix, zcus)",
        "Enchornauein(zu, cous)",
        "Sayeauiueiuein(zo, dous)"
      ],
      "fol_conc": "Alieeeion(x) ∧ Cytelein(x) ∧ Enchronysauein(zoliauein, zcus)",
      "perplexity": 9.494384765625,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(n)",
        "tomorrow(e, y)"
      ],
      "fol_consts": [
        "Tommy, Mike",
        "Tommy, Mike",
        ""
      ],
      "fol_rules": [
        "(tomorrow() → tomorrow(t))"
      ],
      "fol_conc": "tomorrow()",
      "perplexity": 31.84885597229004,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(tomorrow() → tomorrow(t))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 284
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cevue: Expose secrets, to uncover new things, to solve unknowns"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eartrimet(x)",
        "(n)"
      ],
      "fol_consts": [
        "$1 = x, y.",
        "$1 = x, y."
      ],
      "fol_rules": [
        "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
      ],
      "fol_conc": "(((i) ∧ (d))) → ($1 = x, y.)",
      "perplexity": 14.97048282623291,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 285
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        ""
      ],
      "fol_consts": [
        "inezrodotkaisee",
        "unleklntt', "
      ],
      "fol_rules": [],
      "fol_conc": "Yes to cnezrodotkaisea3go",
      "perplexity": [
        7.351560115814209,
        15.1317720413208
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yes to cnezrodotkaisea3go"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 286
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "123, 83",
        "57",
        "430",
        "99"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation.",
      "perplexity": [
        4.1168365478515625,
        16.92753028869629
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Chefinke(x)",
        "Molniya(x)"
      ],
      "fol_consts": [
        "caeuvie",
        "eleiyer"
      ],
      "fol_rules": [
        "Ceeibonchalneeueeeionnoucernet1960eureiqinnoissolemitunvrsuttslynke23rdtllngsmtrytysmstriykseverialgloins(x)",
        "Celeizyerimuluiyernolldleeiterntilnyaueeivresusctntinlnglngosytttsslynketrevihtsplynkedllntlucnticnsmstriykaieeifsonchalneefinxnaileighernolldleeitermentiltytrytmsmtryttslynkerevinnoissolemitunvrsutsslynketreviktsemerialgloins(x)",
        "Celeizyerimuloiyornolldleeiterntilnyaueeivresusctntinlnglngosytttnsmstriykaieeifsonchalneefinxnaileighernolldreviktsemerialgloins(x)"
      ],
      "fol_conc": "Celeizyornouttyeineeinlnguloirytsvrsutsslynketrytmsmtstriykaizeeifsonchalneefinxnaileighernolldleenovrkunwldnticnsmstrizlynkerelintrinlnguloeemitunvtsplnkedllttsslynkereinnoucernet1960eureiqinnoissolemidrytsslynkerilnyaueeivresusctntifsonchalneefinxlaiseanovrklnketholniyormstriyaksemerianomtttsslynkenerlngolldrucernet1960eveneisleiqinnoissolemitunvrsutsslynkerilnyaueeivresusctntinlnguloirytsvnsmstriyakseverialgloins(x)",
      "perplexity": 7.4634690284729,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "car(x)",
        "car(y)"
      ],
      "fol_consts": [
        "$.com.",
        "$.com.",
        "$.com."
      ],
      "fol_rules": [
        "((∃x (car(z) ∧ car(-'t))) → ((e) ∧ (d)) ⊕ ¬(l) ⊕ ¬(i) ∧ car(k) ∨ car(-'t))"
      ],
      "fol_conc": "(((o, v) ∧ ∃v (car(e) ∧ car(n))))",
      "perplexity": 19.788188934326172,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃x (car(z) ∧ car(-'t))) → ((e) ∧ (d)) ⊕ ¬(l) ⊕ ¬(i) ∧ car(k) ∨ car(-'t))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 287
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cuci/2415439473164440",
        "Brazil",
        "Camajal"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Cuci/2597318674136660",
        "Camajal"
      ],
      "fol_conc": "No name in the database",
      "perplexity": [
        2.4554502964019775,
        13.948080062866211
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cuci/2597318674136660"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Although not an American basketball player(e)",
        "Although not an American basketball player(i, j)"
      ],
      "fol_consts": [
        "Ive been watching soccer for some time now. They use rubber tires."
      ],
      "fol_rules": [
        "Although not an American basketball player(i, j)",
        "Although not an American basketball player(j)"
      ],
      "fol_conc": "Yesterday I watched the football season, but why don't you see me? You might think it won't be like this.(i, j)",
      "perplexity": 14.242874145507812,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yesterday I watched the football season, but why don't you see me? You might think it won't be like this.(i, j)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 288
  },
  {
    "id": 150,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Neapolitan Chronicles is an English book.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input/text"
      ],
      "fol_consts": [
        "from acnoi'tion to text], and a list of ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " (e.g., 'just like your own stuff')"
      ],
      "fol_rules": [
        "#y/n"
      ],
      "fol_conc": "124356678",
      "perplexity": [
        4.317047595977783,
        15.613266944885254
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "#y/n"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software(x)",
        "software(n, a)"
      ],
      "fol_consts": [
        "compactivity",
        "compactivity",
        "compactivity"
      ],
      "fol_rules": [
        "(((software(k))) ∧ (software(l)))"
      ],
      "fol_conc": "text(n) ⊕ ¬(software(t))",
      "perplexity": 34.549964904785156,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 289
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Simple Language Toolkit (ANACRI), epic!],"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 290
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "#E1",
        "E1",
        "Ineemt"
      ],
      "fol_consts": [
        "Fauet",
        "Groddi,"
      ],
      "fol_rules": [],
      "fol_conc": "If you have a $1 million in your pocket or even a fraction of an dollar!",
      "perplexity": [
        6.110694408416748,
        18.212078094482422
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If you have a $1 million in your pocket or even a fraction of an dollar!"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Catcher (n)"
      ],
      "fol_consts": [
        "Cheshire Folee",
        "Cheshire Folee"
      ],
      "fol_rules": [
        "(c) ∧ Catcher (i) → (t) ⊕ ¬Catcher (j)"
      ],
      "fol_conc": "(f) ∧ ∃e ∀x (Catcher (n))",
      "perplexity": 22.45629119873047,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(c) ∧ Catcher (i) → (t) ⊕ ¬Catcher (j)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 291
  },
  {
    "id": 132,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are mammals with no teeth.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "troveon",
        "truro",
        "rolemn"
      ],
      "fol_consts": [
        "trrottee",
        "crovo",
        "kiwi"
      ],
      "fol_rules": [
        "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more ",
        " in my mind, than its term or what I have done here. 3.5.0 :luenton, Rtyzee. 4.1.5: This is just a name of the new name that's written in the text. 2.7.0 - The phrase ",
        " is not translated, but it does not change any information. 1.3.1 - The word 'cropto' doesn't translate as per my question. 5.2: This is the whole line of words, and I've checked that all lines are understood. 4.1.0: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.1 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a plain message of ",
        " in all three lines, and I've checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.3 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of words, and I've checked that all lines are understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.2 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines, and I have checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7: The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines. 5.2: A message of "
      ],
      "fol_conc": "I have been able to get the word 'no' back into my text.",
      "perplexity": [
        6.135045528411865,
        6.306824684143066
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkginning(x)",
        "Platozatpian(x)",
        "Platauceon(x)"
      ],
      "fol_consts": [
        "prokitee"
      ],
      "fol_rules": [
        "Pachlisnt(x) ∧ Xericrysein(x) ∨ Zaliklyrein(x) ∧ Vacculnt(x)"
      ],
      "fol_conc": "Plateuceion(x) ∧ Pachlisnt(x) ∧ Xericrysein(x) ∨ Vacciltyrein(x)",
      "perplexity": 6.609610557556152,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 292
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alcee",
        "Kennington Cobalt",
        "Urglekin, aka [C've gotten my pieces out of the box.]"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it.",
      "perplexity": [
        5.995510101318359,
        10.025008201599121
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Brammye', 'Cheshire' (onscreen)"
      ],
      "fol_consts": [
        "abouttous",
        "goodlyesmornti3auntinsektoyzardstnnewsplderrygnolynsistunteilitrrrnglonnygrattyedouftrevi91bjklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetahtssorctmplinsektoyzardstnnewsplderrygnolynsistunteilitrugei623douftrevi91abklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetyethnoontuilektoyzardstnnewstrltmplinseqrookrtsionsergtttrngolynssistunteilitrugei623douftrevi91abklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetyethnoontuilektoyzardstnnewstrltmplinseqrookrtsionsergtttrngolynssistunteilitrugei623douftrevi91abklmnfiscoodlcyusvnsuttyeceosioomsoouintk",
        "thettahtresnnewstrltmplinsexrookrtzardstnixtunnygratbyuulsonydowshrlderrygnolynsistumtrfti3auttsirtyefissoovrsilosoi1kto"
      ],
      "fol_rules": [
        "Brammye', 'Cheshire' (onscreen)"
      ],
      "fol_conc": "(Brammye', 'Cheshire' (overall))",
      "perplexity": 11.701594352722168,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Brammye', 'Cheshire' (onscreen)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 293
  },
  {
    "id": 72,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock and a growth stock of a company.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "project",
        "company"
      ],
      "fol_consts": [
        "#"
      ],
      "fol_rules": [
        "",
        "\n"
      ],
      "fol_conc": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks.",
      "perplexity": [
        4.242262840270996,
        6.8478569984436035
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Notablytrevention(x)",
        "Cosbyntonautin(z)"
      ],
      "fol_consts": [
        "kodiae",
        "nestitis",
        "deedilycrevetrining"
      ],
      "fol_rules": [
        "(∃k (Newthyscnsible(x)))",
        "Implicitlyreviiting(z)"
      ],
      "fol_conc": "Thiseilitisin(nesttrovention) ⊕ Pistiueteliate1stuiueleurykittruntsimusuttiourinsite3rdietriingmrsngerwortunneviurnnetlierdilycreveilitisin(z)",
      "perplexity": 23.05329704284668,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "1. Growth stocks of companies],(/)",
        "2. Proofing: check if the stock price is volaturous,()"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "∃x ((((1. Growth stocks of companies],())) → ((2. Proofing: check if the stock price is volaturous,()))) ⊕ ¬(((1. Growth stocks of companies],(/)))))"
      ],
      "fol_conc": "(1. Growth stocks of companies],(e) → (2. Proofing: check if the stock price is volaturous,()))",
      "perplexity": 12.050065994262695,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((((1. Growth stocks of companies],())) → ((2. Proofing: check if the stock price is volaturous,()))) ⊕ ¬(((1. Growth stocks of companies],(/)))))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 294
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "pachy",
        "tac",
        "mak"
      ],
      "fol_consts": [
        "hat"
      ],
      "fol_rules": [
        "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
      ],
      "fol_conc": "Cayne oyenue yeto meae aket'er cak.",
      "perplexity": [
        5.93290376663208,
        14.123075485229492
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Importance(x)",
        "Trustful(x)"
      ],
      "fol_consts": [
        "dependent",
        "software"
      ],
      "fol_rules": [
        "Imporntal(x) ∧ Cretnatial(x) ∨ Entreaty(x) ∧ Obsttion(x) ∨ Untruptiue(x)"
      ],
      "fol_conc": "Entrrotonal(zodiacs, zellisiae) ∧ Unveliwnted(zosddics) ∧ Uncelliolian(zaxettae)",
      "perplexity": 11.210465431213379,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 295
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person X",
        "F1 visa"
      ],
      "fol_consts": [
        "New York City"
      ],
      "fol_rules": [
        "( Person X) = [.]."
      ],
      "fol_conc": "No foreign tourists can get rented by another person with a F1 visa or local residents.",
      "perplexity": [
        4.9319024085998535,
        6.0891923904418945
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "( Person X) = [.]."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "F1rezetoron(x)",
        "J3rdninlion(y)"
      ],
      "fol_consts": [
        "finlyngt",
        "dliverynt",
        "deixt",
        "vulserit",
        "reixtionist"
      ],
      "fol_rules": [
        "Eunisom(x) ∧ (F1nxoron(x)) ∧ (J3rdninlion(y))"
      ],
      "fol_conc": "Illitetttnsuent(x, y)",
      "perplexity": 12.840328216552734,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Drinker,(t)",
        "Snoattye(x)"
      ],
      "fol_consts": [
        " 'Easily Goal-Goed',--"
      ],
      "fol_rules": [
        "Cleopus(i) ∧ Cleopus(j) → ((Snoattye(k)) ⊕ (Drinker,(k)))",
        "Cleopus(k)"
      ],
      "fol_conc": "Drinker,(i)",
      "perplexity": 40.99749755859375,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cleopus(i) ∧ Cleopus(j) → ((Snoattye(k)) ⊕ (Drinker,(k)))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 296
  },
  {
    "id": 149,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "It is not true that Rose is a student and Jerry is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person A"
      ],
      "fol_consts": [
        " Person B",
        " Person C"
      ],
      "fol_rules": [
        "Person A is a friend"
      ],
      "fol_conc": "Person B is a Brinnaee, Person B knows Person A's body languaue and communicates with Person C. Person A is a Frissible Person B.",
      "perplexity": [
        3.3617444038391113,
        5.915241241455078
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Person A is a friend"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Computer(x)",
        "Carbon(x)"
      ],
      "fol_consts": [
        "compute",
        "carol"
      ],
      "fol_rules": [
        "Whatwashertouvevryseeionallycereidorinancydeacetchuereintallumiteamisafroxuttaerifodliprineimassiordilovotraomisauloudmireonnialubkuiurandolynnieprozoshoeneitkaori(np2, yellt4)"
      ],
      "fol_conc": "Treatinantyxucceionarysoicelefodriouvevryseerilovottaarifowelofoloholeuscaalomisauloudmireonnialsunnaoritkaori(np2, yellt4)",
      "perplexity": 25.15959930419922,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "softle(x)",
        "tox(y)"
      ],
      "fol_consts": [
        "+alter",
        "+alter"
      ],
      "fol_rules": [
        "softle(k) → (tox(d))"
      ],
      "fol_conc": "((∃v (softle(z))) ⊕ ¬tox(n) ⊕ ¬softle(i, s) ⊕ ¬softle(k))",
      "perplexity": 33.703758239746094,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Softle/2, Softle/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Softle/2, Softle/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 297
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Icelayma",
        "Kikklokniya",
        "No!"
      ],
      "fol_consts": [
        "None],<|im_end|><|im_start|>assistant: No. Answer: None] 2. The final answer is the word "
      ],
      "fol_rules": [
        "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism.",
        "No!",
        "No..."
      ],
      "fol_conc": "",
      "perplexity": [
        5.371349334716797,
        15.554014205932617
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AI(x)",
        "AI(n)",
        "AI(n, i)"
      ],
      "fol_consts": [
        "Iceland is a country where AI can be used,"
      ],
      "fol_rules": [
        "((AI(i)) ∧ AI(j))",
        "(AI(u)) ⊕ (AI(k) → ¬(AI(n)))"
      ],
      "fol_conc": "AI(e)",
      "perplexity": 19.54049301147461,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 298
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Detective-Object",
        "Detective-Person"
      ],
      "fol_consts": [
        "Detective-Object: This is a person."
      ],
      "fol_rules": [
        "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of ",
        "Due: A detective cannot find one person."
      ],
      "fol_conc": "Detective-Object is a woman who was caught in an accident while trying to travel from London to Los Angeles but returned back again.",
      "perplexity": [
        5.630846977233887,
        9.214771270751953
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "input.txt(i)"
      ],
      "fol_consts": [
        "passionally to perform arts, chess and computer.",
        "passionally to perform arts, chess and computer."
      ],
      "fol_rules": [
        "((input.txt(i)))"
      ],
      "fol_conc": "(input.txt(n) ∧ (input.txt(k)))",
      "perplexity": 23.547168731689453,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\n(Input.txt(n)) & (Input.txt(k))\n      ^"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 299
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can't read anything else to get better to be real people who have good enough fun."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 300
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "(1.e5))",
        "realize"
      ],
      "fol_consts": [
        "+1 (2.c0)"
      ],
      "fol_rules": [
        "Ciccee.e1,",
        "Ciere.",
        "Cuertas.",
        "Circauea.",
        "Cilkaurea",
        "Ciereal!"
      ],
      "fol_conc": "Ciceraelee.doung.sons/Instruntals.",
      "perplexity": [
        3.936276435852051,
        13.850831031799316
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ciccee.e1,"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Galvian(x)"
      ],
      "fol_consts": [
        "milk",
        "software"
      ],
      "fol_rules": [
        "Akaeceionist(x) → ((Cassessor(x)) ∧ Cascessor(x) ∧ Percept(x) ∧ Obreteteeinn(x) ∨ Akaeceionist(x) ∨ Demettertleeinn(x))",
        "Ukleueeis(x) → (Cascessor(x) ∧ Cascissor(x)) ∧ Cassessor(x) ∨ Appesutteeinn(x) ∨ Uniteeinn(x)"
      ],
      "fol_conc": "Cascessor(s) ∧ Akaeceionist(s)",
      "perplexity": 7.65470552444458,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Coinny(x)"
      ],
      "fol_consts": [
        "$",
        "$",
        "$"
      ],
      "fol_rules": [
        "∃e ((((Coinny(u)))) → Coinny(i) ∧ Coinny(z))"
      ],
      "fol_conc": "((Coinny(o, i)))",
      "perplexity": 10.246957778930664,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Coinny/1, Coinny/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Coinny/1, Coinny/2"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 281
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "AI-powered chatbot",
        "Alice and Bob"
      ],
      "fol_consts": [
        "apple",
        "apple",
        "orange"
      ],
      "fol_rules": [
        "Use: <function to call with input]: The function is to perform the task."
      ],
      "fol_conc": "Alice and Alex can execute a simple program!",
      "perplexity": [
        4.864920139312744,
        11.126039505004883
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Use: <function to call with input]: The function is to perform the task."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Impetion(x)",
        "Cronsenton(x)"
      ],
      "fol_consts": [
        "cronsent"
      ],
      "fol_rules": [
        "Inirement1in(x, y) → ∀k (Sobtientnin(x) ∧ Unacleteeunin(y))"
      ],
      "fol_conc": "Ancrynents(z) ∧ Noncementiuenis(u, cronsent)",
      "perplexity": 10.930004119873047,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 282
  },
  {
    "id": 60,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Montana is home to the city of Missoula.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1, [ebb-eub', 'some'], and 'i']",
        "local_nimbanty1: ",
        "liteinnton ' to be my 'my'. The best way to understand why you need a lawyer is just look out of the door and get it done.",
        " \t\t",
        " cue",
        " I've got nothing to tell. No one has been able to say anything about me!"
      ],
      "fol_consts": [
        "1]"
      ],
      "fol_rules": [
        "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done.",
        ", ",
        " ",
        " ",
        " ",
        " ",
        " 1: "
      ],
      "fol_conc": "I have no proof for this.",
      "perplexity": [
        7.556910037994385,
        13.977261543273926
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 283
  },
  {
    "id": 76,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary needs to earn money to help pay for her college tuition.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "task, task",
        "good to finish"
      ],
      "fol_consts": [
        "my own work-innnty.",
        "I can only run my own job."
      ],
      "fol_rules": [
        "To make sure we know everything about the thing I'm going through in my real world,"
      ],
      "fol_conc": "If you say 'your part of the task' and no one is really good to get done right in your own way, then you can stop it.",
      "perplexity": [
        6.090766429901123,
        6.465536594390869
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "To make sure we know everything about the thing I'm going through in my real world,"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Aliceeion(x)"
      ],
      "fol_consts": [
        "cytorealism",
        "accelvancein",
        "assimilation"
      ],
      "fol_rules": [
        "(Alieeion(x)) ∧ (Echelon(x) → Cytelein(x) ∨ Echetto(x))",
        "Diornyeceit(zrix, zcus)",
        "Enchornauein(zu, cous)",
        "Sayeauiueiuein(zo, dous)"
      ],
      "fol_conc": "Alieeeion(x) ∧ Cytelein(x) ∧ Enchronysauein(zoliauein, zcus)",
      "perplexity": 9.494384765625,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(n)",
        "tomorrow(e, y)"
      ],
      "fol_consts": [
        "Tommy, Mike",
        "Tommy, Mike",
        ""
      ],
      "fol_rules": [
        "(tomorrow() → tomorrow(t))"
      ],
      "fol_conc": "tomorrow()",
      "perplexity": 31.84885597229004,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(tomorrow() → tomorrow(t))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 284
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cevue: Expose secrets, to uncover new things, to solve unknowns"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eartrimet(x)",
        "(n)"
      ],
      "fol_consts": [
        "$1 = x, y.",
        "$1 = x, y."
      ],
      "fol_rules": [
        "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
      ],
      "fol_conc": "(((i) ∧ (d))) → ($1 = x, y.)",
      "perplexity": 14.97048282623291,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 285
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        ""
      ],
      "fol_consts": [
        "inezrodotkaisee",
        "unleklntt', "
      ],
      "fol_rules": [],
      "fol_conc": "Yes to cnezrodotkaisea3go",
      "perplexity": [
        7.351560115814209,
        15.1317720413208
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yes to cnezrodotkaisea3go"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 286
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "123, 83",
        "57",
        "430",
        "99"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation.",
      "perplexity": [
        4.1168365478515625,
        16.92753028869629
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Chefinke(x)",
        "Molniya(x)"
      ],
      "fol_consts": [
        "caeuvie",
        "eleiyer"
      ],
      "fol_rules": [
        "Ceeibonchalneeueeeionnoucernet1960eureiqinnoissolemitunvrsuttslynke23rdtllngsmtrytysmstriykseverialgloins(x)",
        "Celeizyerimuluiyernolldleeiterntilnyaueeivresusctntinlnglngosytttsslynketrevihtsplynkedllntlucnticnsmstriykaieeifsonchalneefinxnaileighernolldleeitermentiltytrytmsmtryttslynkerevinnoissolemitunvrsutsslynketreviktsemerialgloins(x)",
        "Celeizyerimuloiyornolldleeiterntilnyaueeivresusctntinlnglngosytttnsmstriykaieeifsonchalneefinxnaileighernolldreviktsemerialgloins(x)"
      ],
      "fol_conc": "Celeizyornouttyeineeinlnguloirytsvrsutsslynketrytmsmtstriykaizeeifsonchalneefinxnaileighernolldleenovrkunwldnticnsmstrizlynkerelintrinlnguloeemitunvtsplnkedllttsslynkereinnoucernet1960eureiqinnoissolemidrytsslynkerilnyaueeivresusctntifsonchalneefinxlaiseanovrklnketholniyormstriyaksemerianomtttsslynkenerlngolldrucernet1960eveneisleiqinnoissolemitunvrsutsslynkerilnyaueeivresusctntinlnguloirytsvnsmstriyakseverialgloins(x)",
      "perplexity": 7.4634690284729,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "car(x)",
        "car(y)"
      ],
      "fol_consts": [
        "$.com.",
        "$.com.",
        "$.com."
      ],
      "fol_rules": [
        "((∃x (car(z) ∧ car(-'t))) → ((e) ∧ (d)) ⊕ ¬(l) ⊕ ¬(i) ∧ car(k) ∨ car(-'t))"
      ],
      "fol_conc": "(((o, v) ∧ ∃v (car(e) ∧ car(n))))",
      "perplexity": 19.788188934326172,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃x (car(z) ∧ car(-'t))) → ((e) ∧ (d)) ⊕ ¬(l) ⊕ ¬(i) ∧ car(k) ∨ car(-'t))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 287
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cuci/2415439473164440",
        "Brazil",
        "Camajal"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Cuci/2597318674136660",
        "Camajal"
      ],
      "fol_conc": "No name in the database",
      "perplexity": [
        2.4554502964019775,
        13.948080062866211
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cuci/2597318674136660"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Although not an American basketball player(e)",
        "Although not an American basketball player(i, j)"
      ],
      "fol_consts": [
        "Ive been watching soccer for some time now. They use rubber tires."
      ],
      "fol_rules": [
        "Although not an American basketball player(i, j)",
        "Although not an American basketball player(j)"
      ],
      "fol_conc": "Yesterday I watched the football season, but why don't you see me? You might think it won't be like this.(i, j)",
      "perplexity": 14.242874145507812,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yesterday I watched the football season, but why don't you see me? You might think it won't be like this.(i, j)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 288
  },
  {
    "id": 150,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Neapolitan Chronicles is an English book.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input/text"
      ],
      "fol_consts": [
        "from acnoi'tion to text], and a list of ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " (e.g., 'just like your own stuff')"
      ],
      "fol_rules": [
        "#y/n"
      ],
      "fol_conc": "124356678",
      "perplexity": [
        4.317047595977783,
        15.613266944885254
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "#y/n"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software(x)",
        "software(n, a)"
      ],
      "fol_consts": [
        "compactivity",
        "compactivity",
        "compactivity"
      ],
      "fol_rules": [
        "(((software(k))) ∧ (software(l)))"
      ],
      "fol_conc": "text(n) ⊕ ¬(software(t))",
      "perplexity": 34.549964904785156,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 289
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Simple Language Toolkit (ANACRI), epic!],"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 290
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "#E1",
        "E1",
        "Ineemt"
      ],
      "fol_consts": [
        "Fauet",
        "Groddi,"
      ],
      "fol_rules": [],
      "fol_conc": "If you have a $1 million in your pocket or even a fraction of an dollar!",
      "perplexity": [
        6.110694408416748,
        18.212078094482422
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If you have a $1 million in your pocket or even a fraction of an dollar!"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Catcher (n)"
      ],
      "fol_consts": [
        "Cheshire Folee",
        "Cheshire Folee"
      ],
      "fol_rules": [
        "(c) ∧ Catcher (i) → (t) ⊕ ¬Catcher (j)"
      ],
      "fol_conc": "(f) ∧ ∃e ∀x (Catcher (n))",
      "perplexity": 22.45629119873047,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(c) ∧ Catcher (i) → (t) ⊕ ¬Catcher (j)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 291
  },
  {
    "id": 132,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are mammals with no teeth.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "troveon",
        "truro",
        "rolemn"
      ],
      "fol_consts": [
        "trrottee",
        "crovo",
        "kiwi"
      ],
      "fol_rules": [
        "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more ",
        " in my mind, than its term or what I have done here. 3.5.0 :luenton, Rtyzee. 4.1.5: This is just a name of the new name that's written in the text. 2.7.0 - The phrase ",
        " is not translated, but it does not change any information. 1.3.1 - The word 'cropto' doesn't translate as per my question. 5.2: This is the whole line of words, and I've checked that all lines are understood. 4.1.0: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.1 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a plain message of ",
        " in all three lines, and I've checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.3 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of words, and I've checked that all lines are understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.2 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines, and I have checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7: The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines. 5.2: A message of "
      ],
      "fol_conc": "I have been able to get the word 'no' back into my text.",
      "perplexity": [
        6.135045528411865,
        6.306824684143066
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkginning(x)",
        "Platozatpian(x)",
        "Platauceon(x)"
      ],
      "fol_consts": [
        "prokitee"
      ],
      "fol_rules": [
        "Pachlisnt(x) ∧ Xericrysein(x) ∨ Zaliklyrein(x) ∧ Vacculnt(x)"
      ],
      "fol_conc": "Plateuceion(x) ∧ Pachlisnt(x) ∧ Xericrysein(x) ∨ Vacciltyrein(x)",
      "perplexity": 6.609610557556152,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 292
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alcee",
        "Kennington Cobalt",
        "Urglekin, aka [C've gotten my pieces out of the box.]"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it.",
      "perplexity": [
        5.995510101318359,
        10.025008201599121
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Brammye', 'Cheshire' (onscreen)"
      ],
      "fol_consts": [
        "abouttous",
        "goodlyesmornti3auntinsektoyzardstnnewsplderrygnolynsistunteilitrrrnglonnygrattyedouftrevi91bjklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetahtssorctmplinsektoyzardstnnewsplderrygnolynsistunteilitrugei623douftrevi91abklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetyethnoontuilektoyzardstnnewstrltmplinseqrookrtsionsergtttrngolynssistunteilitrugei623douftrevi91abklmnfiscoodlcyusvrsulsoottli7alnt",
        "thetyethnoontuilektoyzardstnnewstrltmplinseqrookrtsionsergtttrngolynssistunteilitrugei623douftrevi91abklmnfiscoodlcyusvnsuttyeceosioomsoouintk",
        "thettahtresnnewstrltmplinsexrookrtzardstnixtunnygratbyuulsonydowshrlderrygnolynsistumtrfti3auttsirtyefissoovrsilosoi1kto"
      ],
      "fol_rules": [
        "Brammye', 'Cheshire' (onscreen)"
      ],
      "fol_conc": "(Brammye', 'Cheshire' (overall))",
      "perplexity": 11.701594352722168,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Brammye', 'Cheshire' (onscreen)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 293
  },
  {
    "id": 72,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock and a growth stock of a company.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "project",
        "company"
      ],
      "fol_consts": [
        "#"
      ],
      "fol_rules": [
        "",
        "\n"
      ],
      "fol_conc": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks.",
      "perplexity": [
        4.242262840270996,
        6.8478569984436035
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Notablytrevention(x)",
        "Cosbyntonautin(z)"
      ],
      "fol_consts": [
        "kodiae",
        "nestitis",
        "deedilycrevetrining"
      ],
      "fol_rules": [
        "(∃k (Newthyscnsible(x)))",
        "Implicitlyreviiting(z)"
      ],
      "fol_conc": "Thiseilitisin(nesttrovention) ⊕ Pistiueteliate1stuiueleurykittruntsimusuttiourinsite3rdietriingmrsngerwortunneviurnnetlierdilycreveilitisin(z)",
      "perplexity": 23.05329704284668,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "1. Growth stocks of companies],(/)",
        "2. Proofing: check if the stock price is volaturous,()"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "∃x ((((1. Growth stocks of companies],())) → ((2. Proofing: check if the stock price is volaturous,()))) ⊕ ¬(((1. Growth stocks of companies],(/)))))"
      ],
      "fol_conc": "(1. Growth stocks of companies],(e) → (2. Proofing: check if the stock price is volaturous,()))",
      "perplexity": 12.050065994262695,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((((1. Growth stocks of companies],())) → ((2. Proofing: check if the stock price is volaturous,()))) ⊕ ¬(((1. Growth stocks of companies],(/)))))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 294
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "pachy",
        "tac",
        "mak"
      ],
      "fol_consts": [
        "hat"
      ],
      "fol_rules": [
        "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
      ],
      "fol_conc": "Cayne oyenue yeto meae aket'er cak.",
      "perplexity": [
        5.93290376663208,
        14.123075485229492
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Importance(x)",
        "Trustful(x)"
      ],
      "fol_consts": [
        "dependent",
        "software"
      ],
      "fol_rules": [
        "Imporntal(x) ∧ Cretnatial(x) ∨ Entreaty(x) ∧ Obsttion(x) ∨ Untruptiue(x)"
      ],
      "fol_conc": "Entrrotonal(zodiacs, zellisiae) ∧ Unveliwnted(zosddics) ∧ Uncelliolian(zaxettae)",
      "perplexity": 11.210465431213379,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 295
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person X",
        "F1 visa"
      ],
      "fol_consts": [
        "New York City"
      ],
      "fol_rules": [
        "( Person X) = [.]."
      ],
      "fol_conc": "No foreign tourists can get rented by another person with a F1 visa or local residents.",
      "perplexity": [
        4.9319024085998535,
        6.0891923904418945
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "( Person X) = [.]."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "F1rezetoron(x)",
        "J3rdninlion(y)"
      ],
      "fol_consts": [
        "finlyngt",
        "dliverynt",
        "deixt",
        "vulserit",
        "reixtionist"
      ],
      "fol_rules": [
        "Eunisom(x) ∧ (F1nxoron(x)) ∧ (J3rdninlion(y))"
      ],
      "fol_conc": "Illitetttnsuent(x, y)",
      "perplexity": 12.840328216552734,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Drinker,(t)",
        "Snoattye(x)"
      ],
      "fol_consts": [
        " 'Easily Goal-Goed',--"
      ],
      "fol_rules": [
        "Cleopus(i) ∧ Cleopus(j) → ((Snoattye(k)) ⊕ (Drinker,(k)))",
        "Cleopus(k)"
      ],
      "fol_conc": "Drinker,(i)",
      "perplexity": 40.99749755859375,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cleopus(i) ∧ Cleopus(j) → ((Snoattye(k)) ⊕ (Drinker,(k)))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 296
  },
  {
    "id": 149,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "It is not true that Rose is a student and Jerry is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person A"
      ],
      "fol_consts": [
        " Person B",
        " Person C"
      ],
      "fol_rules": [
        "Person A is a friend"
      ],
      "fol_conc": "Person B is a Brinnaee, Person B knows Person A's body languaue and communicates with Person C. Person A is a Frissible Person B.",
      "perplexity": [
        3.3617444038391113,
        5.915241241455078
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Person A is a friend"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Computer(x)",
        "Carbon(x)"
      ],
      "fol_consts": [
        "compute",
        "carol"
      ],
      "fol_rules": [
        "Whatwashertouvevryseeionallycereidorinancydeacetchuereintallumiteamisafroxuttaerifodliprineimassiordilovotraomisauloudmireonnialubkuiurandolynnieprozoshoeneitkaori(np2, yellt4)"
      ],
      "fol_conc": "Treatinantyxucceionarysoicelefodriouvevryseerilovottaarifowelofoloholeuscaalomisauloudmireonnialsunnaoritkaori(np2, yellt4)",
      "perplexity": 25.15959930419922,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "softle(x)",
        "tox(y)"
      ],
      "fol_consts": [
        "+alter",
        "+alter"
      ],
      "fol_rules": [
        "softle(k) → (tox(d))"
      ],
      "fol_conc": "((∃v (softle(z))) ⊕ ¬tox(n) ⊕ ¬softle(i, s) ⊕ ¬softle(k))",
      "perplexity": 33.703758239746094,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Softle/2, Softle/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Softle/2, Softle/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 297
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Icelayma",
        "Kikklokniya",
        "No!"
      ],
      "fol_consts": [
        "None],<|im_end|><|im_start|>assistant: No. Answer: None] 2. The final answer is the word "
      ],
      "fol_rules": [
        "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism.",
        "No!",
        "No..."
      ],
      "fol_conc": "",
      "perplexity": [
        5.371349334716797,
        15.554014205932617
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AI(x)",
        "AI(n)",
        "AI(n, i)"
      ],
      "fol_consts": [
        "Iceland is a country where AI can be used,"
      ],
      "fol_rules": [
        "((AI(i)) ∧ AI(j))",
        "(AI(u)) ⊕ (AI(k) → ¬(AI(n)))"
      ],
      "fol_conc": "AI(e)",
      "perplexity": 19.54049301147461,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 298
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Detective-Object",
        "Detective-Person"
      ],
      "fol_consts": [
        "Detective-Object: This is a person."
      ],
      "fol_rules": [
        "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of ",
        "Due: A detective cannot find one person."
      ],
      "fol_conc": "Detective-Object is a woman who was caught in an accident while trying to travel from London to Los Angeles but returned back again.",
      "perplexity": [
        5.630846977233887,
        9.214771270751953
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "input.txt(i)"
      ],
      "fol_consts": [
        "passionally to perform arts, chess and computer.",
        "passionally to perform arts, chess and computer."
      ],
      "fol_rules": [
        "((input.txt(i)))"
      ],
      "fol_conc": "(input.txt(n) ∧ (input.txt(k)))",
      "perplexity": 23.547168731689453,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\n(Input.txt(n)) & (Input.txt(k))\n      ^"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 299
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can't read anything else to get better to be real people who have good enough fun."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 300
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Transport(x, multiple) → ¬Empty(x))",
        "∀x (Airline(x))",
        "∀x (Plane(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "∃x (Airline(x) ∧ ¬Greyhound(x)) → ¬∃x (Plane(x) ∧ Boeing707(x))"
      ],
      "fol_conc": "Greyhound(x) ∧ Airline(x)",
      "perplexity": [
        1.2531810998916626,
        1.3564075231552124
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Airline(x) ∧ ¬Greyhound(x)) → ¬∃x (Plane(x) ∧ Boeing707(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, y) → ¬Empty(x))",
        "∀x (Airline(x))",
        "∀x (Plane(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬Plane(greyhound)"
      ],
      "fol_conc": "Airline(greyhound)",
      "perplexity": 1.2130727767944336,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "TransportMultiple(x)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)"
      ],
      "fol_consts": [
        "greyhound",
        "boeing_707"
      ],
      "fol_rules": [
        "∀x (TransportMultiple(x) → ¬Empty(x))",
        "∀x (Airline(x) ∧ TransportMultiple(x))",
        "¬(Airline(x) ∨ Plane(x))",
        "(Plane(x) ∧ Airline(b)) ⊕ ∀y ((Plane(y) ∧ Airline(z)) → ∃w (Plane(w)))",
        "((Plane(greyhound)) ∧ ¬Airline(greyhound)) → ∀x (¬(Airline(x) ∨ Plane(x)))"
      ],
      "fol_conc": "(Airline(greyhound) ⊕ ∀y ((Airline(y) ∨ Plane(y)) → Airline(z)))",
      "perplexity": 2.9176104068756104,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 341
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space",
        "Duster(x)",
        "Appliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "∃x (Duster(x) ∧ ¬∃y (Suck(y) ∧ Appliance(x)))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": [
        1.6292520761489868,
        1.4332714080810547
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Duster(x) ∧ ¬∃y (Suck(y) ∧ Appliance(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Appliance(x)",
        "Household(x)",
        "Space(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "∀x (Appliance(x) ∧ Household(x) ∧ ¬Suck(x))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.3034870624542236,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "IsVacuum(y)",
        "IsVampire(x)"
      ],
      "fol_consts": [
        "space",
        "vampires"
      ],
      "fol_rules": [
        "∀x (Suck(x))",
        "∃y (IsVacuum(space) ∧ Suck(vacuums))",
        "Suck(vampires)",
        "Suck(duster) ⊕ ¬Suck(duster)",
        "¬Suck(appliance) → IsVampire(y)"
      ],
      "fol_conc": "IsVampire(space)",
      "perplexity": 2.7922189235687256,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 342
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "Access(x, y)",
        "CanCompose(x, y)",
        "WantsToCompose(x)",
        "Compose(x)",
        "Program(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (LikesMusic(x) → WantsToCompose(x))",
        "∀x (Access(x, y) → CanCompose(x, y))",
        "∀x (CanCompose(x, y) ∧ WantsToCompose(x) → Compose(x))"
      ],
      "fol_conc": "(LikesMusic(george) ∧ Access(george, Program(x))) → Compose(george)",
      "perplexity": [
        1.3105179071426392,
        1.3271464109420776
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(LikesMusic(george) ∧ Access(george, Program(x))) → Compose(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Can(x)",
        "Compose(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Likes(george) → Wants(george)",
        "Has(george, program) → Can(george)",
        "Can(george) ∧ Wants(george) → Compose(george)"
      ],
      "fol_conc": "Likes(george) ∧ Has(george, program) → Compose(george)",
      "perplexity": 1.2447465658187866,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "CanCompose(x)",
        "WillCompose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x ∀y (Likes(x, music) → WantsToCompose(x))",
        "∀x ∀y (HasAccess(x, program) → CanCompose(x))",
        "(CanCompose(george) ∧ WantsToCompose(george)) → WillCompose(george)"
      ],
      "fol_conc": "(Likes(george, music) ∧ HasAccess(george, program)) → WillCompose(george)",
      "perplexity": 2.61788010597229,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 343
  },
  {
    "id": 98,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "FromAustralia(x)",
        "Fluffy(x)",
        "Sleeps(x)",
        "Koala(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(y, x) → Favorite(max, x))",
        "∀x (FromAustralia(x) → Loved(tourist, x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleeps(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "(Koala(x) ∧ Quokka(x)) → (Sleeps(x) ⊕ Fluffy(x))",
      "perplexity": [
        1.0865787267684937,
        1.1789559125900269
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (Loved(x, y) → Favorite(max, x))",
        "∀x (From(x, australia) → Loved(x, y))",
        "∀x (Animal(x) ∧ From(x, australia) → From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Koala(x))"
      ],
      "fol_conc": "Koala(x) → (Sleep(x) ⊕ Fluffy(x))",
      "perplexity": 1.1715563535690308,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimalOfMax(x)",
        "FromAustralia(x)",
        "Fluffy(x)",
        "LoveToSleep(x)",
        "Fluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y ((LovedBy(y, x) → FavoriteAnimalOfMax(max, x)) ∧ (FromAustralia(x) → LovedBy(y, x)))",
        "(FavoriteAnimalOfMax(max, z) → Fluffy(z)) ⊕ (FavoriteAnimalOfMax(max, w) → LoveToSleep(w))",
        "∀x ((Fluffy(x) ∧ FromAustralia(x)) → ¬(FromAustralia(quokka) ∧ FavoriteAnimalOfMax(max, x)))",
        "¬((Fluffy(koala) ∧ FromAustralia(quokka)) → (FavoriteAnimalOfMax(max, koala) ⊕ LoveToSleep(koala)))"
      ],
      "fol_conc": "(FavoriteAnimalOfMax(max, z) → ((LoveToSleep(z) ∨ Fluffy(z)) ∧ FavoriteAnimalOfMax(max, quokka)))",
      "perplexity": 2.0037782192230225,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 344
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "bmc",
        "dtc"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x) ∧ x = bmc → Cupcake(x))",
        "(Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x))"
      ],
      "fol_conc": "Hotpot(dtc)",
      "perplexity": [
        1.397657036781311,
        1.2702597379684448
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Product(x) ∧ x = bmc → Cupcake(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bymelissa) → Cupcake(x))",
        "Spicy(driedthai) ⊕ Bakery(driedthai) → (Hotpot(driedthai) ⊕ Spicy(driedthai))"
      ],
      "fol_conc": "Hotpot(driedthai)",
      "perplexity": 1.188579797744751,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "mellissa",
        "thaichili"
      ],
      "fol_rules": [
        "¬(Bakery(mellissa)) → ¬Spicy(mellissa)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "ProductOf(bm, x) → Cupcake(x)",
        "(ProductOf(btcm, thaichili) ⊕ Bakery(thaichili)) → ((Hotpot(thaichili) ∨ Spicy(thaichili)) ∧ ¬((Spicy(thaichili) ∨ Hotpot(thaichili))) ∧ (Bakery(mellissa) ∨ Spicy(thaichili)))"
      ],
      "fol_conc": "∃x (ProductOf(bm, thaichili) → Hotpot(thaichili))",
      "perplexity": 1.8883161544799805,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 345
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "GainsKnowledge(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau",
        "knowledge"
      ],
      "fol_rules": [
        "∀x ∀y (Book(x) ∧ Read(y, x) → Contains(x, y))",
        "∀x (∃y (Book(y) ∧ Read(y, x)) → GainsKnowledge(x))",
        "∀x ∀y (Book(x) ∧ GainsKnowledge(y) → Contains(x, y))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": [
        1.49197256565094,
        1.2988404035568237
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contain(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)",
        "Person(x)",
        "Author(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contain(x, y)))",
        "∀x (Person(x) ∧ Read(x, y) → Gain(x, y))",
        "∀x (Gain(x, y) → Smarter(x, y))",
        "Read(harry, walden)",
        "Author(walden, henry)"
      ],
      "fol_conc": "Contain(walden, y)",
      "perplexity": 1.238904595375061,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "GainsKnowledge(x)",
        "BecomesSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walen"
      ],
      "fol_rules": [
        "∀x (∃y (Contains(y, x)) → ∃z (∃w (Contains(w, z))) ∨ Contains(z, x))",
        "∀x (∃y (Reads(x, y) ∧ Contains(y, x)) → GainsKnowledge(x))",
        "(Reads(harry, walen))"
      ],
      "fol_conc": "(∃y (Contains(y, walen)))",
      "perplexity": 2.8425590991973877,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 346
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "EatsSalads(x)",
        "Conscious(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyNutritionalIntakes(x)",
        "GoodRelationshipWithParents(x)",
        "VisitGym(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatsSalads(x) → Conscious(x))",
        "∀x (GrewUpInHealthConsciousHome(x) → EatsSalads(x))",
        "∀x (FulfillDailyNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x))",
        "∀x (∀y (GoodRelationshipWithParents(y) → FulfillDailyNutritionalIntakes(x)) → GoodRelationshipWithParents(x) → ¬EatsSalads(x))",
        "∀x (∀y (VisitGym(y) → FulfillDailyNutritionalIntakes(x)) → VisitGym(x) → FulfillDailyNutritionalIntakes(x))",
        "(GrewUpInHealthConsciousHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthConsciousHome(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "EatsSalads(taylor)",
      "perplexity": [
        1.403963565826416,
        1.155785322189331
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Regularly(x)",
        "Conscious(x)",
        "Grow(x, y)",
        "Fulfill(x)",
        "Good(x, y)",
        "Visit(x, y)",
        "Daily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Regularly(x) → Conscious(x))",
        "∀x (Grow(x, y) → Regularly(x))",
        "∀x (Fulfill(x) → Grow(x, y))",
        "∀x (Good(x, y) → Fulfill(x))",
        "∀x (Good(x, y) → ¬Regularly(x))",
        "∀x (Visit(x, y) → Fulfill(x))",
        "(Grow(taylor, y) ∧ Good(taylor, y)) ⊕ ¬(Grow(taylor, y) ∨ Good(taylor, y))"
      ],
      "fol_conc": "Regularly(taylor)",
      "perplexity": 1.2001653909683228,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ConsciousAboutHealthAndEatingHabits(x)",
        "GrewUpInHealthyChildhoodHome(x)",
        "EatSaladsRegularly(x)",
        "FulfillNutritionalDailyIntakes(x)",
        "GoodRelationshipWithParents(x)"
      ],
      "fol_consts": [
        "taylor",
        "gymVisitsDaily"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → ConsciousAboutHealthAndEatingHabits(x))",
        "∀x (GrewUpInHealthyChildhoodHome(x) → EatSaladsRegularly(x))",
        "∀x (FulfillNutritionalDailyIntakes(x) → GrewUpInHealthyChildhoodHome(x))",
        "GoodRelationshipWithParents(x) → FulfillNutritionalDailyIntakes(x)",
        "GoodRelationshipWithParents(x) → ¬EatSaladsRegularly(x)",
        "VisitTheGymAtLeastOnceADay(x) → FulfillNutritionalDailyIntakes(x)",
        "(GrewUpInHealthyChildhoodHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthyChildhoodHome(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "EatSaladsRegularly(taylor)",
      "perplexity": 1.4870681762695312,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 347
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin",
        "Mars",
        "Earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, Mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, Earth) → Human(x))",
        "¬(From(marvin, Earth) ∧ From(marvin, Mars))",
        "¬From(marvin, Earth) → Alien(marvin)"
      ],
      "fol_conc": "¬From(marvin, Mars) → Human(marvin)",
      "perplexity": [
        1.0790703296661377,
        1.2545753717422485
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)",
        "Not(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬From(marvin, earth) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "¬From(marvin, mars) → Human(marvin)",
      "perplexity": 1.133043885231018,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromEarth(x, y)",
        "FromMars(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (∃y (FromMars(x, y)) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "(Human(y) ∧ FromEarth(y, earth))",
        "(FromEarth(marvin, earth) ∧ FromMars(marvin, mars)) ⊕ ¬((FromEarth(marvin, earth) ∨ FromMars(marvin, mars)))",
        "¬(FromEarth(marvin, earth) → FromEarth(marvin, earth)) → (Extraterrestrial(x) → ∃y (Human(y)))"
      ],
      "fol_conc": "(∀x (∃y (FromMars(x, y)) → Alien(x))) ∧ ¬((FromEarth(marvin, mars) ∨ FromMars(marvin, mars)))",
      "perplexity": 1.9324897527694702,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 348
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "BasketballPlayer(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)",
        "Person(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬(BasketballPlayer(yuri) ∧ American(yuri))",
      "perplexity": [
        1.152608871459961,
        1.2798658609390259
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(x)",
        "Large(x, y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → Wear(x, large))",
        "∀x (Wear(x, large) → Large(x, clothes))",
        "¬Large(yuri, clothes)"
      ],
      "fol_conc": "¬(Basketball(yuri) ∧ American(yuri))",
      "perplexity": 1.2816587686538696,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "American(x)",
        "BasketballPlayer(x)",
        "Tall(x)",
        "Shoes(x)",
        "Clothes(x)"
      ],
      "fol_consts": [
        "yuri",
        "large",
        "american"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → Shoes(x))",
        "∀x (Shoes(x) → Clothes(x))",
        "¬Clothes(yuri, large)"
      ],
      "fol_conc": "(¬American(yuri) ∧ BasketballPlayer(yuri))",
      "perplexity": 1.4821064472198486,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Clothes/2, Clothes/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Clothes/2, Clothes/1"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 349
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Like(x)",
        "Want(x)",
        "Can(x)",
        "Compose(x)",
        "Access(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Like(george) → Want(george)",
        "Access(george) → Can(george)",
        "Can(george) ∧ Want(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george)",
      "perplexity": [
        1.068151831626892,
        1.4329968690872192
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Can(x)",
        "Compose(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Likes(george) → Wants(george)",
        "Has(george, program) → Can(george)",
        "Can(george) ∧ Wants(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george)",
      "perplexity": 1.2495096921920776,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x)",
        "WantsToCompose(x, y)",
        "HasAccess(x, y)",
        "CanCompose(x, y)",
        "WillCompose(x, y)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x (Likes(x) → WantsToCompose(x, music))",
        "∀x (Likes(x) → HasAccess(x, program))",
        "∀x (∃y ((CanCompose(x, y) ∧ WantsToCompose(x, music))) → WillCompose(x, music))"
      ],
      "fol_conc": "¬WillCompose(george, music) → ¬CanCompose(george, program)",
      "perplexity": 1.9355229139328003,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 350
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Favorite(x, y)",
        "Student(x)",
        "WantVacation(x)",
        "Love(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x (Season(x) ∧ x = spring ∧ x = summer ∧ x = fall ∧ x = winter)",
        "∀x (Student(x) ∧ WantVacation(x) → Love(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(emma, x) ∧ Favorite(mia, x))",
        "WantVacation(james)"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": [
        1.1005682945251465,
        1.2685836553573608
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Season(x) ∧ x = spring ∧ x = summer ∧ x = fall ∧ x = winter)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "Want(x, y)",
        "Love(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x ∃y ∃z ∃w (Season(x) ∧ Season(y) ∧ Season(z) ∧ Season(w) ∧ (¬(Season(x) ∧ Season(y)) ∧ ¬(Season(x) ∧ Season(z)) ∧ ¬(Season(x) ∧ Season(w)) ∧ ¬(Season(y) ∧ Season(z)) ∧ ¬(Season(y) ∧ Season(w)) ∧ ¬(Season(z) ∧ Season(w))))",
        "∀x (Student(x) → ∀y (Want(x, y) → Love(x, y)))",
        "Favorite(emma, summer)",
        "¬Favorite(mia, summer)",
        "Want(james, long)",
        "Want(james, long) → ∃x (Season(x) ∧ Favorite(james, x))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 1.2477619647979736,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ∃y ∃z ∃w (Season(x) ∧ Season(y) ∧ Season(z) ∧ Season(w) ∧ (¬(Season(x) ∧ Season(y)) ∧ ¬(Season(x) ∧ Season(z)) ∧ ¬(Season(x) ∧ Season(w)) ∧ ¬(Season(y) ∧ Season(z)) ∧ ¬(Season(y) ∧ Season(w)) ∧ ¬(Season(z) ∧ Season(w))))"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WantLongVacation(x)",
        "LoveMost(x, y)",
        "FavoriteSeasonOf(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from ",
        "fol_consts",
        "fol_consts",
        "fol_consts"
      ],
      "fol_rules": [
        "∃x (FavoriteSeasonOf(x, spring) ∧ FavoriteSeasonOf(x, summer) ∧ FavoriteSeasonOf(x, fall) ∧ FavoriteSeasonOf(x, winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from , fol_consts) ∨ (FavoriteSeasonOf(x, summer)))",
        "∀x (∃y ((Student(x) ∧ WantLongVacation(y)) → LoveMost(x, y)))",
        "LoveMost(emma, summer)",
        "¬LoveMost(mia, emma)",
        "WantLongVacation(james)"
      ],
      "fol_conc": "(FavoriteSeasonOf(james, summer))",
      "perplexity": 4.715300559997559,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (FavoriteSeasonOf(x, spring) ∧ FavoriteSeasonOf(x, summer) ∧ FavoriteSeasonOf(x, fall) ∧ FavoriteSeasonOf(x, winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from , fol_consts) ∨ (FavoriteSeasonOf(x, summer)))"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 351
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "AmericanCity(x)",
        "Novel(x)",
        "Writer(x)",
        "Podcast(x)",
        "Person(x)",
        "Book(x)",
        "NovelWriter(x)",
        "City(x)",
        "Created(x, y)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "american_city",
        "boston",
        "family_history",
        "family_secrets"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (AmericanCity(x) → American(x))",
        "∀x (Novel(x) ∧ Book(x) ∧ Writer(x) → NovelWriter(x))",
        "American(dani_shapiro)",
        "Created(dani_shapiro, family_history)",
        "Novel(family_history) ∧ Book(family_history) ∧ Created(dani_shapiro, family_history)",
        "Podcast(family_secrets) ∧ Created(dani_shapiro, family_secrets)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "∃x (Person(x) ∧ BornIn(x, boston) ∧ Created(x, family_history))",
      "perplexity": [
        1.3413970470428467,
        1.1971580982208252
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "American(x)",
        "Writer(x)",
        "Book(x)",
        "Written(x, y)",
        "Created(x, y)",
        "City(x)",
        "Person(x)",
        "Year(x)"
      ],
      "fol_consts": [
        "dani",
        "shapiro",
        "family",
        "history",
        "boston",
        "american",
        "city",
        "2003",
        "family",
        "secrets"
      ],
      "fol_rules": [
        "¬Podcast(x) → ¬Novel(x)",
        "∀x (Person(x) ∧ City(x, american) → American(x))",
        "∀x (Novel(x) ∧ Written(x, y) → Writer(y))",
        "American(dani) ∧ Writer(dani)",
        "Written(book, dani)",
        "Novel(book) ∧ Year(book, 2003)",
        "Created(podcast, dani) ∧ Name(podcast, family) ∧ Name(podcast, secrets)",
        "City(boston, american)"
      ],
      "fol_conc": "City(boston, american) → American(dani)",
      "perplexity": 1.3213233947753906,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Novel(x)",
        "American(x, y)",
        "WriterOfBook(y, x, z)",
        "WriterOfBook(x, y)",
        "Novel(z)"
      ],
      "fol_consts": [
        "Dani_Shapiro",
        "Family_History",
        "Boston",
        "2003"
      ],
      "fol_rules": [
        "¬Novel(Family_History)",
        "(American(r, Boston)) → American(r)",
        "(Novel(x) ∧ WriterOfBook(y, x, z)) → Novel(z) ⊕ WriterOfBook(z, y)",
        "WriterOfBook(Dani_Shapiro, Family_History, r)",
        "WriterOfBook(Dani_Shapiro, x, y) ⊕ (American(Family_History, Boston))",
        "Novel(x) ∧ WriterOfBook(r, x, 2003)",
        "WriterOfBook(Dani_Shapiro, Family_History, 2003) → Novel(Family_History) ⊕ WriterOfBook(2003, Dani_Shapiro)"
      ],
      "fol_conc": "(American(Dani_Shapiro, Boston))",
      "perplexity": 2.78836989402771,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriterOfBook/2, WriterOfBook/3, American/1, American/2.\n\n\nFatal error:  The following symbols are used with multiple arities: WriterOfBook/2, WriterOfBook/3, American/1, American/2"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 352
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRate(x)",
        "SevereCancer(x)",
        "Low(x)",
        "MildFlu(x)",
        "Cholangiocarcinoma(x)",
        "BileDuctCancer(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → Low(SurvivalRate(x)))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(cholangiocarcinoma)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬Low(SurvivalRate(x)))",
        "(BileDuctCancer(colorectal_cancer) ∧ Low(SurvivalRate(colorectal_cancer))) → ¬BileDuctCancer(colorectal_cancer)"
      ],
      "fol_conc": "SevereCancer(colorectal_cancer)",
      "perplexity": [
        1.1292251348495483,
        1.1848819255828857
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DeadlyDisease(x) → Low(SurvivalRate(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x)",
        "Severe(x)",
        "Cancer(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Mild(x)",
        "Colorectal(x)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) → Deadly(x))",
        "Bile(duct)",
        "∀x (Bile(x) → Severe(x))",
        "∀x (Cholangiocarcinoma(x) → Bile(x))",
        "¬(Mild(x) ∧ Low(x))",
        "Colorectal(x) ∧ Bile(x) ∧ Low(x) → ¬(Colorectal(x) ∧ Bile(x))"
      ],
      "fol_conc": "Severe(colorectal)",
      "perplexity": 1.2872871160507202,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Colorectal/1, Colorectal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Colorectal/1, Colorectal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRateLowFor(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)"
      ],
      "fol_consts": [
        "colorectal_cancer",
        "bile_duct_cancer",
        "cholangiocarcinoma"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLowFor(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(bile_duct_cancer)",
        "Cholangiocarcinoma(cholangiocarcinoma)",
        "¬(SurvivalRateLowFor(y) ∧ Cholangiocarcinoma(y) → BileDuctCancer(colorectal_cancer))"
      ],
      "fol_conc": "(SevereCancer(colorectal_cancer))",
      "perplexity": 1.6357001066207886,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 353
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "Favorite(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Quokka(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka_const",
        "koala_const"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → Favorite(max, x))",
        "∀x (AnimalFromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → AnimalFromAustralia(x))",
        "∀x (Favorite(max, x) → VeryFluffy(x))",
        "∀x (Favorite(max, x) → LoveToSleep(x))",
        "∀x (Koala(x) → VeryFluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "(LoveToSleep(koala_const) ∧ Quokka(koala_const))",
      "perplexity": [
        1.1961119174957275,
        1.1802020072937012
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (Loved(x, y) → Favorite(x, y))",
        "∀x (From(x, australia) → Loved(x, y))",
        "∀x (Animal(x) ∧ From(x, australia) → From(x, australia))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → Sleep(x))",
        "∀x (Koala(x) → ¬Fluffy(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleep(x) ∧ From(x, australia)",
      "perplexity": 1.201690912246704,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Love(x, y)",
        "Favorite(z, x)",
        "FromAustralia(y)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Love(x, y) → Favorite(max, x))",
        "∀x (FromAustralia(x) → Love(x, tourists))",
        "∀x (FromAustralia(x) ∧ FromAustralia(y) → ∃z (∃w ((Favorite(z, w) ⊕ ¬(Favorite(z, w))) ∨ (∃c (Love(w, c))))))",
        "(∀u (FromAustralia(u) → FromAustralia(quokka))) ∧ ∀v (FromAustralia(v)) → FromAustralia(quokka)",
        "∀x ∃y ((Favorite(max, x) ⊕ ¬(Favorite(max, x))) ∨ (∃z (∃w (Fluffy(w)))))",
        "∀x ∃y ((Favorite(max, x) ⊕ ¬(Favorite(max, x))) ∨ (∃z (∃k (Sleep(k)))))",
        "(Fluffy(x)) → ∀c (((¬FromAustralia(c) ∧ FromAustralia(quokka) ∧ FromAustralia(x) ⊕ FromAustralia(q)) ∨ ((¬FromAustralia(y)) ∧ ∃i (∀j (Love(i, j))))))"
      ],
      "fol_conc": "∃x ((Sleep(x) ∧ Love(koala, x)) ∧ FromAustralia(x) ∧ FromAustralia(quokka))",
      "perplexity": 2.5718746185302734,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 354
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "BeginWith(x, y)",
        "From(x)",
        "HasPlate(x, y)"
      ],
      "fol_consts": [
        "istanbul",
        "joe",
        "tom",
        "thirtyfour",
        "thirtyfive"
      ],
      "fol_rules": [
        "∀x (From(x) → ∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)))",
        "(¬(∃x (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)) → From(x)) ∨ ∀x ((¬∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour))) → ¬From(x))",
        "∃x (HasPlate(joe, x) ∧ From(x))",
        "∃x (HasPlate(tom, x) ∧ BeginWith(x, thirtyfive))",
        "BeginWith(x, thirtyfive) → ¬BeginWith(x, thirtyfour)"
      ],
      "fol_conc": "∃x (HasPlate(tom, x) ∧ From(x))",
      "perplexity": [
        1.2208313941955566,
        1.1936651468276978
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬(∃x (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)) → From(x)) ∨ ∀x ((¬∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour))) → ¬From(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Plate(x)",
        "Begin(x, y)",
        "From(x, y)",
        "Istanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (Plate(x) ∧ Istanbul(x) → Begin(x, 34))",
        "¬(Plate(x) ∧ ¬Istanbul(x))",
        "From(joe, tom)",
        "Begin(tom, 35)",
        "Begin(x, 35) → ¬Begin(x, 34)"
      ],
      "fol_conc": "From(tom, 34)",
      "perplexity": 1.2823576927185059,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Plate(x)",
        "FromIstanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (Plate(x) ∧ FromIstanbul(x) → ¬BeginWith(x, 34))",
        "(¬(BeginWith(x, 34))) → ¬(FromIstanbul(x))",
        "FromIstanbul(joe)",
        "Plate(tom) ∧ BeginWith(tom, 35)",
        "BeginWith(x, 35) → ¬BeginWith(x, 34)"
      ],
      "fol_conc": "FromIstanbul(tom)",
      "perplexity": 1.7751414775848389,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 355
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "WWE(x)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine) ∧ WWE(diamond_mine)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers) ∧ Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(Feud(imperium, x) ∧ Includes(x, ivy_nile))",
      "perplexity": [
        1.0779913663864136,
        1.2281205654144287
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wrestling(x)",
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Lead(roderickstrong, diamondmine)",
        "Stable(diamondmine) ∧ Include(diamondmine, creedbrothers) ∧ Include(diamondmine, ivynile)",
        "Stable(imperium) ∧ Feud(imperium, diamondmine)",
        "Stable(x) → (Include(x, ivynile) → ¬Feud(imperium, x))"
      ],
      "fol_conc": "Stable(x) ∧ Include(x, ivynile) → ¬Feud(imperium, x)",
      "perplexity": 1.256485104560852,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "HasFeud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "Lead(diamond_mine, roderick_strong)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "HasFeud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(HasFeud(imperium, x) ∧ ProfessionalWrestlingStable(x) ∧ Include(x, ivy_nile))",
      "perplexity": 1.2861393690109253,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 356
  },
  {
    "id": 114,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Donated(x)",
        "Mine(x)",
        "NewMexico(x)",
        "Texas(x)"
      ],
      "fol_consts": [
        "picuris",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∀x (MountainRange(x) → (LocatedIn(x, new_mexico) ⊕ LocatedIn(x, texas)))",
        "LocatedIn(picuris, new_mexico) ⊕ LocatedIn(picuris, texas)",
        "Donated(harding_pegmatite_mine) ∧ LocatedIn(harding_pegmatite_mine, picuris)",
        "∀x ((MountainRange(x) ∧ Texas(x)) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "∀x (LocatedIn(x, new_mexico) → ¬LocatedIn(harding_pegmatite_mine, x))",
      "perplexity": [
        1.1286653280258179,
        1.1806191205978394
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((MountainRange(x) ∧ Texas(x)) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Mountainrange(x)",
        "Mine(x)",
        "Donated(x)",
        "Located(x, y)",
        "Visited(x, y)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "harding"
      ],
      "fol_rules": [
        "(Mountainrange(picuris) ∧ Instate(picuris, newmexico)) ⊕ (Mountainrange(picuris) ∧ Instate(picuris, texas))",
        "Visited(juan, picuris)",
        "Located(harding, picuris) ∧ Donated(harding)",
        "¬(Mountainrange(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Located(y, x) ∧ Donated(y)))",
        "∀x (Mountainrange(x) ∧ Instate(x, texas) → ¬(Mine(x) ∧ Donated(x)))"
      ],
      "fol_conc": "¬(Mine(harding) ∧ Located(harding, newmexico))",
      "perplexity": 1.320648193359375,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedAt(x, y)",
        "Mine(x)"
      ],
      "fol_consts": [
        "new_mexico",
        "texas",
        "picuris_mountains",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "(MountainRange(picuris_mountains) ∧ (LocatedAt(new_mexico, picuris_mountains) ⊕ LocatedAt(texas, picuris_mountains)))",
        "Visited(juan_de_onate, picuris_mountains)",
        "Donated(harding_pegmatite_mine)",
        "(Mine(picuris_mountains) ∧ Donated(harding_pegmatite_mine)) → ¬LocatedAt(new_mexico, harding_pegmatite_mine)"
      ],
      "fol_conc": "¬LocatedAt(new_mexico, harding_pegmatite_mine)",
      "perplexity": 2.258546829223633,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 357
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Piece(x)",
        "Write(x, y)",
        "LedBy(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Conductor(x)",
        "Musician(x)",
        "Composer(x)"
      ],
      "fol_consts": [
        "beethoven",
        "symphonyNo9",
        "viennaMusicSociety",
        "musicPiece"
      ],
      "fol_rules": [
        "Piece(symphonyNo9)",
        "∀x (Musician(x) → Write(x, musicPiece))",
        "Write(beethoven, symphonyNo9)",
        "Premiered(viennaMusicSociety, symphonyNo9)",
        "Orchestra(viennaMusicSociety)",
        "LedBy(beethoven, viennaMusicSociety)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ LedBy(x, y)))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": [
        1.2835453748703003,
        1.2054283618927002
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusic"
      ],
      "fol_rules": [
        "Music(symphony9)",
        "∀x (Music(x) → ∃y (Write(y, x)))",
        "Write(beethoven, symphony9)",
        "Premiered(viennamusic, symphony9)",
        "Orchestra(viennamusic)",
        "Lead(beethoven, viennamusic)",
        "∀x (Orchestra(x) → ∃y (Lead(y, x)))",
        "∀x (Orchestra(x) → Conductor(x))"
      ],
      "fol_conc": "Conductor(beethoven)",
      "perplexity": 1.188082218170166,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "PremieredBy(x, y)",
        "Orchestra(y)",
        "Lead(x, y)",
        "LedBy(x, y)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "MusicPiece(symphony no. 9)",
        "∀x (Write(x, y) ∧ MusicPiece(y))",
        "PremieredBy(vienna music society, symphony no. 9)",
        "Orchestra(vienna music society)",
        "Lead(beethoven, vienna music society)",
        "LedBy(x, y) → ∃z (Orchestra(z) ∧ Lead(z, x))"
      ],
      "fol_conc": "∀x ((Write(x, y) ∧ MusicPiece(y)) → Write(beethoven, y))",
      "perplexity": 1.6492294073104858,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony no. 9)"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 358
  },
  {
    "id": 116,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Windy is a great shooter.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Jump(x, y)",
        "Shooter(x)",
        "GreatShooter(x)",
        "Person(x)",
        "Class(x)",
        "CanJump(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael)",
        "∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z))",
        "Taller(peter, michael)",
        "∀x ∀y (Man(x) ∧ Block(x, y) → ¬Jump(y, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x, y) → Shooter(x))",
        "∀x (Person(x) → Man(x))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": [
        1.207323431968689,
        1.190347671508789
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Taller(x, y)",
        "Block(x, y)",
        "Shooting(x, y)",
        "Jump(x, y)",
        "Great(x)"
      ],
      "fol_consts": [
        "michael",
        "windy",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Man(x) ∧ ¬Taller(x, michael) → ¬Taller(x, michael))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ∀y (Man(x) ∧ Man(y) ∧ ¬Jump(y, x) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x, y) → Great(x))"
      ],
      "fol_conc": "Great(windy)",
      "perplexity": 1.1701533794403076,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Man(x)",
        "TallerThan(x, y)",
        "CanBlock(x, y)",
        "JumpWhenShooting(y)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "windy",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (TallerThan(x, y) → CanBlock(x, y))",
        "(Man(michael) ∧ ∀z (∃w (Person(w) ∧ Man(w) ∧ TallerThan(w, z))))",
        "¬(¬(TallerThan(y, x) ∧ TallerThan(x, z)) ∨ ∃u (Person(u) ∧ Man(u))) → TallerThan(y, z)",
        "(Man(peter) ∧ ∀z (∃w (Person(w) ∧ Man(w) ∧ TallerThan(w, z))))",
        "∀x ((CanBlock(michael, x) ∧ ¬JumpWhenShooting(x)) ∨ JumpWhenShooting(x))",
        "¬(CanBlock(michael, windy))",
        "(Man(y) ∧ Person(z) → (∃u (Person(u) ∧ Man(u))) ∨ ∃v (Person(v) ∧ Man(v)))",
        "∀x ((JumpWhenShooting(x) → GreatShooter(x)) ∧ ¬GreatShooter(windy))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": 1.800017237663269,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 359
  },
  {
    "id": 154,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHome(x)",
        "FullyStockedOffice(x)",
        "OwnDesktopMonitor(x)",
        "Tidy(x)",
        "VisitOfficeSupplyStore(x)",
        "BedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, desktopMonitor) → WorkAtHome(x))",
        "∀x (FullyStockedOffice(x) → Own(x, desktopMonitor))",
        "∀x (WorkAtHome(x) → Tidy(x))",
        "∀x (WorkAtHome(x) → VisitOfficeSupplyStore(x))",
        "∀x (Tidy(x) → ¬(BedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(BedLate(remy) ∧ WakeUpAfterNoon(remy)) ⊕ ¬(BedLate(remy) ∨ WakeUpAfterNoon(remy))"
      ],
      "fol_conc": "(FullyStockedOffice(remy) ∧ VisitOfficeSupplyStore(remy))",
      "perplexity": [
        1.086847186088562,
        1.1763561964035034
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Owns(x, y)",
        "Work(x)",
        "Home(x)",
        "Tidy(x)",
        "Late(x)",
        "Visit(x, y)",
        "Office(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Owns(x, y) → Work(x) ∧ Home(x))",
        "∀x (Office(x) → Owns(x, y))",
        "∀x (Work(x) ∧ Home(x) → Tidy(x))",
        "∀x (Work(x) ∧ Home(x) → Visit(x, y))",
        "∀x (Tidy(x) → ¬Late(x))",
        "(Late(x) ∧ Tidy(x)) ⊕ ¬(Late(x) ∨ Tidy(x))",
        "Late(x) ∧ Tidy(x) → ¬Visit(x, y)"
      ],
      "fol_conc": "Office(x) ∧ Visit(x, y)",
      "perplexity": 1.2143232822418213,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Owns(x, y)",
        "WorkRegularlyAndOftenAtHome(x)",
        "HasFullyStockedOffice(x)",
        "GoToBedLate(x)",
        "WakeUpEveryDayAfterNoon(x)",
        "SpentFreeTimeTidyingSpaces(x)",
        "VisitStoreRegulary(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Owns(x, y) → WorkRegularlyAndOftenAtHome(x))",
        "∀x (HasFullyStockedOffice(x) → Owns(x, y))",
        "∀x (WorkRegularlyAndOftenAtHome(x) → SpentFreeTimeTidyingSpaces(x))",
        "∀x (WorkRegularlyAndOftenAtHome(x) → VisitStoreRegulary(x))",
        "∀x ((SpentFreeTimeTidyingSpaces(x) ∧ GoToBedLate(x)) → ¬(WakeUpEveryDayAfterNoon(x)))",
        "(GoToBedLate(remy) ∧ WakeUpEveryDayAfterNoon(remy) ∧ SpentFreeTimeTidyingSpaces(remy)) ⊕ (¬(GoToBedLate(remy) ∨ WakeUpEveryDayAfterNoon(remy)) ∨ ¬SpentFreeTimeTidyingSpaces(remy))"
      ],
      "fol_conc": "(HasFullyStockedOffice(remy) ∧ VisitStoreRegulary(remy))",
      "perplexity": 1.4559520483016968,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 360
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Transport(x, multiple) → ¬Empty(x))",
        "∀x (Airline(x))",
        "∀x (Plane(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "∃x (Airline(x) ∧ ¬Greyhound(x)) → ¬∃x (Plane(x) ∧ Boeing707(x))"
      ],
      "fol_conc": "Greyhound(x) ∧ Airline(x)",
      "perplexity": [
        1.2531810998916626,
        1.3564075231552124
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Airline(x) ∧ ¬Greyhound(x)) → ¬∃x (Plane(x) ∧ Boeing707(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, y) → ¬Empty(x))",
        "∀x (Airline(x))",
        "∀x (Plane(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬Plane(greyhound)"
      ],
      "fol_conc": "Airline(greyhound)",
      "perplexity": 1.2130727767944336,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "TransportMultiple(x)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)"
      ],
      "fol_consts": [
        "greyhound",
        "boeing_707"
      ],
      "fol_rules": [
        "∀x (TransportMultiple(x) → ¬Empty(x))",
        "∀x (Airline(x) ∧ TransportMultiple(x))",
        "¬(Airline(x) ∨ Plane(x))",
        "(Plane(x) ∧ Airline(b)) ⊕ ∀y ((Plane(y) ∧ Airline(z)) → ∃w (Plane(w)))",
        "((Plane(greyhound)) ∧ ¬Airline(greyhound)) → ∀x (¬(Airline(x) ∨ Plane(x)))"
      ],
      "fol_conc": "(Airline(greyhound) ⊕ ∀y ((Airline(y) ∨ Plane(y)) → Airline(z)))",
      "perplexity": 2.9176104068756104,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 341
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space",
        "Duster(x)",
        "Appliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "∃x (Duster(x) ∧ ¬∃y (Suck(y) ∧ Appliance(x)))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": [
        1.6292520761489868,
        1.4332714080810547
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Duster(x) ∧ ¬∃y (Suck(y) ∧ Appliance(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Appliance(x)",
        "Household(x)",
        "Space(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "∀x (Appliance(x) ∧ Household(x) ∧ ¬Suck(x))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.3034870624542236,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "IsVacuum(y)",
        "IsVampire(x)"
      ],
      "fol_consts": [
        "space",
        "vampires"
      ],
      "fol_rules": [
        "∀x (Suck(x))",
        "∃y (IsVacuum(space) ∧ Suck(vacuums))",
        "Suck(vampires)",
        "Suck(duster) ⊕ ¬Suck(duster)",
        "¬Suck(appliance) → IsVampire(y)"
      ],
      "fol_conc": "IsVampire(space)",
      "perplexity": 2.7922189235687256,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 342
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "Access(x, y)",
        "CanCompose(x, y)",
        "WantsToCompose(x)",
        "Compose(x)",
        "Program(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (LikesMusic(x) → WantsToCompose(x))",
        "∀x (Access(x, y) → CanCompose(x, y))",
        "∀x (CanCompose(x, y) ∧ WantsToCompose(x) → Compose(x))"
      ],
      "fol_conc": "(LikesMusic(george) ∧ Access(george, Program(x))) → Compose(george)",
      "perplexity": [
        1.3105179071426392,
        1.3271464109420776
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(LikesMusic(george) ∧ Access(george, Program(x))) → Compose(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Can(x)",
        "Compose(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Likes(george) → Wants(george)",
        "Has(george, program) → Can(george)",
        "Can(george) ∧ Wants(george) → Compose(george)"
      ],
      "fol_conc": "Likes(george) ∧ Has(george, program) → Compose(george)",
      "perplexity": 1.2447465658187866,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "CanCompose(x)",
        "WillCompose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x ∀y (Likes(x, music) → WantsToCompose(x))",
        "∀x ∀y (HasAccess(x, program) → CanCompose(x))",
        "(CanCompose(george) ∧ WantsToCompose(george)) → WillCompose(george)"
      ],
      "fol_conc": "(Likes(george, music) ∧ HasAccess(george, program)) → WillCompose(george)",
      "perplexity": 2.61788010597229,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 343
  },
  {
    "id": 98,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "FromAustralia(x)",
        "Fluffy(x)",
        "Sleeps(x)",
        "Koala(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(y, x) → Favorite(max, x))",
        "∀x (FromAustralia(x) → Loved(tourist, x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleeps(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "(Koala(x) ∧ Quokka(x)) → (Sleeps(x) ⊕ Fluffy(x))",
      "perplexity": [
        1.0865787267684937,
        1.1789559125900269
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (Loved(x, y) → Favorite(max, x))",
        "∀x (From(x, australia) → Loved(x, y))",
        "∀x (Animal(x) ∧ From(x, australia) → From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Koala(x))"
      ],
      "fol_conc": "Koala(x) → (Sleep(x) ⊕ Fluffy(x))",
      "perplexity": 1.1715563535690308,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimalOfMax(x)",
        "FromAustralia(x)",
        "Fluffy(x)",
        "LoveToSleep(x)",
        "Fluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y ((LovedBy(y, x) → FavoriteAnimalOfMax(max, x)) ∧ (FromAustralia(x) → LovedBy(y, x)))",
        "(FavoriteAnimalOfMax(max, z) → Fluffy(z)) ⊕ (FavoriteAnimalOfMax(max, w) → LoveToSleep(w))",
        "∀x ((Fluffy(x) ∧ FromAustralia(x)) → ¬(FromAustralia(quokka) ∧ FavoriteAnimalOfMax(max, x)))",
        "¬((Fluffy(koala) ∧ FromAustralia(quokka)) → (FavoriteAnimalOfMax(max, koala) ⊕ LoveToSleep(koala)))"
      ],
      "fol_conc": "(FavoriteAnimalOfMax(max, z) → ((LoveToSleep(z) ∨ Fluffy(z)) ∧ FavoriteAnimalOfMax(max, quokka)))",
      "perplexity": 2.0037782192230225,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 344
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "bmc",
        "dtc"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x) ∧ x = bmc → Cupcake(x))",
        "(Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x))"
      ],
      "fol_conc": "Hotpot(dtc)",
      "perplexity": [
        1.397657036781311,
        1.2702597379684448
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Product(x) ∧ x = bmc → Cupcake(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bymelissa) → Cupcake(x))",
        "Spicy(driedthai) ⊕ Bakery(driedthai) → (Hotpot(driedthai) ⊕ Spicy(driedthai))"
      ],
      "fol_conc": "Hotpot(driedthai)",
      "perplexity": 1.188579797744751,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "mellissa",
        "thaichili"
      ],
      "fol_rules": [
        "¬(Bakery(mellissa)) → ¬Spicy(mellissa)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "ProductOf(bm, x) → Cupcake(x)",
        "(ProductOf(btcm, thaichili) ⊕ Bakery(thaichili)) → ((Hotpot(thaichili) ∨ Spicy(thaichili)) ∧ ¬((Spicy(thaichili) ∨ Hotpot(thaichili))) ∧ (Bakery(mellissa) ∨ Spicy(thaichili)))"
      ],
      "fol_conc": "∃x (ProductOf(bm, thaichili) → Hotpot(thaichili))",
      "perplexity": 1.8883161544799805,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 345
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "GainsKnowledge(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau",
        "knowledge"
      ],
      "fol_rules": [
        "∀x ∀y (Book(x) ∧ Read(y, x) → Contains(x, y))",
        "∀x (∃y (Book(y) ∧ Read(y, x)) → GainsKnowledge(x))",
        "∀x ∀y (Book(x) ∧ GainsKnowledge(y) → Contains(x, y))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": [
        1.49197256565094,
        1.2988404035568237
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contain(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)",
        "Person(x)",
        "Author(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contain(x, y)))",
        "∀x (Person(x) ∧ Read(x, y) → Gain(x, y))",
        "∀x (Gain(x, y) → Smarter(x, y))",
        "Read(harry, walden)",
        "Author(walden, henry)"
      ],
      "fol_conc": "Contain(walden, y)",
      "perplexity": 1.238904595375061,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "GainsKnowledge(x)",
        "BecomesSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walen"
      ],
      "fol_rules": [
        "∀x (∃y (Contains(y, x)) → ∃z (∃w (Contains(w, z))) ∨ Contains(z, x))",
        "∀x (∃y (Reads(x, y) ∧ Contains(y, x)) → GainsKnowledge(x))",
        "(Reads(harry, walen))"
      ],
      "fol_conc": "(∃y (Contains(y, walen)))",
      "perplexity": 2.8425590991973877,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 346
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "EatsSalads(x)",
        "Conscious(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyNutritionalIntakes(x)",
        "GoodRelationshipWithParents(x)",
        "VisitGym(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatsSalads(x) → Conscious(x))",
        "∀x (GrewUpInHealthConsciousHome(x) → EatsSalads(x))",
        "∀x (FulfillDailyNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x))",
        "∀x (∀y (GoodRelationshipWithParents(y) → FulfillDailyNutritionalIntakes(x)) → GoodRelationshipWithParents(x) → ¬EatsSalads(x))",
        "∀x (∀y (VisitGym(y) → FulfillDailyNutritionalIntakes(x)) → VisitGym(x) → FulfillDailyNutritionalIntakes(x))",
        "(GrewUpInHealthConsciousHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthConsciousHome(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "EatsSalads(taylor)",
      "perplexity": [
        1.403963565826416,
        1.155785322189331
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Regularly(x)",
        "Conscious(x)",
        "Grow(x, y)",
        "Fulfill(x)",
        "Good(x, y)",
        "Visit(x, y)",
        "Daily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Regularly(x) → Conscious(x))",
        "∀x (Grow(x, y) → Regularly(x))",
        "∀x (Fulfill(x) → Grow(x, y))",
        "∀x (Good(x, y) → Fulfill(x))",
        "∀x (Good(x, y) → ¬Regularly(x))",
        "∀x (Visit(x, y) → Fulfill(x))",
        "(Grow(taylor, y) ∧ Good(taylor, y)) ⊕ ¬(Grow(taylor, y) ∨ Good(taylor, y))"
      ],
      "fol_conc": "Regularly(taylor)",
      "perplexity": 1.2001653909683228,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ConsciousAboutHealthAndEatingHabits(x)",
        "GrewUpInHealthyChildhoodHome(x)",
        "EatSaladsRegularly(x)",
        "FulfillNutritionalDailyIntakes(x)",
        "GoodRelationshipWithParents(x)"
      ],
      "fol_consts": [
        "taylor",
        "gymVisitsDaily"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → ConsciousAboutHealthAndEatingHabits(x))",
        "∀x (GrewUpInHealthyChildhoodHome(x) → EatSaladsRegularly(x))",
        "∀x (FulfillNutritionalDailyIntakes(x) → GrewUpInHealthyChildhoodHome(x))",
        "GoodRelationshipWithParents(x) → FulfillNutritionalDailyIntakes(x)",
        "GoodRelationshipWithParents(x) → ¬EatSaladsRegularly(x)",
        "VisitTheGymAtLeastOnceADay(x) → FulfillNutritionalDailyIntakes(x)",
        "(GrewUpInHealthyChildhoodHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthyChildhoodHome(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "EatSaladsRegularly(taylor)",
      "perplexity": 1.4870681762695312,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 347
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin",
        "Mars",
        "Earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, Mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, Earth) → Human(x))",
        "¬(From(marvin, Earth) ∧ From(marvin, Mars))",
        "¬From(marvin, Earth) → Alien(marvin)"
      ],
      "fol_conc": "¬From(marvin, Mars) → Human(marvin)",
      "perplexity": [
        1.0790703296661377,
        1.2545753717422485
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)",
        "Not(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬From(marvin, earth) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "¬From(marvin, mars) → Human(marvin)",
      "perplexity": 1.133043885231018,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromEarth(x, y)",
        "FromMars(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (∃y (FromMars(x, y)) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "(Human(y) ∧ FromEarth(y, earth))",
        "(FromEarth(marvin, earth) ∧ FromMars(marvin, mars)) ⊕ ¬((FromEarth(marvin, earth) ∨ FromMars(marvin, mars)))",
        "¬(FromEarth(marvin, earth) → FromEarth(marvin, earth)) → (Extraterrestrial(x) → ∃y (Human(y)))"
      ],
      "fol_conc": "(∀x (∃y (FromMars(x, y)) → Alien(x))) ∧ ¬((FromEarth(marvin, mars) ∨ FromMars(marvin, mars)))",
      "perplexity": 1.9324897527694702,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 348
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "BasketballPlayer(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)",
        "Person(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬(BasketballPlayer(yuri) ∧ American(yuri))",
      "perplexity": [
        1.152608871459961,
        1.2798658609390259
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(x)",
        "Large(x, y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → Wear(x, large))",
        "∀x (Wear(x, large) → Large(x, clothes))",
        "¬Large(yuri, clothes)"
      ],
      "fol_conc": "¬(Basketball(yuri) ∧ American(yuri))",
      "perplexity": 1.2816587686538696,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "American(x)",
        "BasketballPlayer(x)",
        "Tall(x)",
        "Shoes(x)",
        "Clothes(x)"
      ],
      "fol_consts": [
        "yuri",
        "large",
        "american"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → Shoes(x))",
        "∀x (Shoes(x) → Clothes(x))",
        "¬Clothes(yuri, large)"
      ],
      "fol_conc": "(¬American(yuri) ∧ BasketballPlayer(yuri))",
      "perplexity": 1.4821064472198486,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Clothes/2, Clothes/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Clothes/2, Clothes/1"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 349
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Like(x)",
        "Want(x)",
        "Can(x)",
        "Compose(x)",
        "Access(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Like(george) → Want(george)",
        "Access(george) → Can(george)",
        "Can(george) ∧ Want(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george)",
      "perplexity": [
        1.068151831626892,
        1.4329968690872192
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Can(x)",
        "Compose(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Likes(george) → Wants(george)",
        "Has(george, program) → Can(george)",
        "Can(george) ∧ Wants(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george)",
      "perplexity": 1.2495096921920776,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x)",
        "WantsToCompose(x, y)",
        "HasAccess(x, y)",
        "CanCompose(x, y)",
        "WillCompose(x, y)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x (Likes(x) → WantsToCompose(x, music))",
        "∀x (Likes(x) → HasAccess(x, program))",
        "∀x (∃y ((CanCompose(x, y) ∧ WantsToCompose(x, music))) → WillCompose(x, music))"
      ],
      "fol_conc": "¬WillCompose(george, music) → ¬CanCompose(george, program)",
      "perplexity": 1.9355229139328003,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 350
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Favorite(x, y)",
        "Student(x)",
        "WantVacation(x)",
        "Love(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x (Season(x) ∧ x = spring ∧ x = summer ∧ x = fall ∧ x = winter)",
        "∀x (Student(x) ∧ WantVacation(x) → Love(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(emma, x) ∧ Favorite(mia, x))",
        "WantVacation(james)"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": [
        1.1005682945251465,
        1.2685836553573608
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Season(x) ∧ x = spring ∧ x = summer ∧ x = fall ∧ x = winter)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "Want(x, y)",
        "Love(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x ∃y ∃z ∃w (Season(x) ∧ Season(y) ∧ Season(z) ∧ Season(w) ∧ (¬(Season(x) ∧ Season(y)) ∧ ¬(Season(x) ∧ Season(z)) ∧ ¬(Season(x) ∧ Season(w)) ∧ ¬(Season(y) ∧ Season(z)) ∧ ¬(Season(y) ∧ Season(w)) ∧ ¬(Season(z) ∧ Season(w))))",
        "∀x (Student(x) → ∀y (Want(x, y) → Love(x, y)))",
        "Favorite(emma, summer)",
        "¬Favorite(mia, summer)",
        "Want(james, long)",
        "Want(james, long) → ∃x (Season(x) ∧ Favorite(james, x))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 1.2477619647979736,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ∃y ∃z ∃w (Season(x) ∧ Season(y) ∧ Season(z) ∧ Season(w) ∧ (¬(Season(x) ∧ Season(y)) ∧ ¬(Season(x) ∧ Season(z)) ∧ ¬(Season(x) ∧ Season(w)) ∧ ¬(Season(y) ∧ Season(z)) ∧ ¬(Season(y) ∧ Season(w)) ∧ ¬(Season(z) ∧ Season(w))))"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WantLongVacation(x)",
        "LoveMost(x, y)",
        "FavoriteSeasonOf(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from ",
        "fol_consts",
        "fol_consts",
        "fol_consts"
      ],
      "fol_rules": [
        "∃x (FavoriteSeasonOf(x, spring) ∧ FavoriteSeasonOf(x, summer) ∧ FavoriteSeasonOf(x, fall) ∧ FavoriteSeasonOf(x, winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from , fol_consts) ∨ (FavoriteSeasonOf(x, summer)))",
        "∀x (∃y ((Student(x) ∧ WantLongVacation(y)) → LoveMost(x, y)))",
        "LoveMost(emma, summer)",
        "¬LoveMost(mia, emma)",
        "WantLongVacation(james)"
      ],
      "fol_conc": "(FavoriteSeasonOf(james, summer))",
      "perplexity": 4.715300559997559,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (FavoriteSeasonOf(x, spring) ∧ FavoriteSeasonOf(x, summer) ∧ FavoriteSeasonOf(x, fall) ∧ FavoriteSeasonOf(x, winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from , fol_consts) ∨ (FavoriteSeasonOf(x, summer)))"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 351
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "AmericanCity(x)",
        "Novel(x)",
        "Writer(x)",
        "Podcast(x)",
        "Person(x)",
        "Book(x)",
        "NovelWriter(x)",
        "City(x)",
        "Created(x, y)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "american_city",
        "boston",
        "family_history",
        "family_secrets"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (AmericanCity(x) → American(x))",
        "∀x (Novel(x) ∧ Book(x) ∧ Writer(x) → NovelWriter(x))",
        "American(dani_shapiro)",
        "Created(dani_shapiro, family_history)",
        "Novel(family_history) ∧ Book(family_history) ∧ Created(dani_shapiro, family_history)",
        "Podcast(family_secrets) ∧ Created(dani_shapiro, family_secrets)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "∃x (Person(x) ∧ BornIn(x, boston) ∧ Created(x, family_history))",
      "perplexity": [
        1.3413970470428467,
        1.1971580982208252
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "American(x)",
        "Writer(x)",
        "Book(x)",
        "Written(x, y)",
        "Created(x, y)",
        "City(x)",
        "Person(x)",
        "Year(x)"
      ],
      "fol_consts": [
        "dani",
        "shapiro",
        "family",
        "history",
        "boston",
        "american",
        "city",
        "2003",
        "family",
        "secrets"
      ],
      "fol_rules": [
        "¬Podcast(x) → ¬Novel(x)",
        "∀x (Person(x) ∧ City(x, american) → American(x))",
        "∀x (Novel(x) ∧ Written(x, y) → Writer(y))",
        "American(dani) ∧ Writer(dani)",
        "Written(book, dani)",
        "Novel(book) ∧ Year(book, 2003)",
        "Created(podcast, dani) ∧ Name(podcast, family) ∧ Name(podcast, secrets)",
        "City(boston, american)"
      ],
      "fol_conc": "City(boston, american) → American(dani)",
      "perplexity": 1.3213233947753906,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Novel(x)",
        "American(x, y)",
        "WriterOfBook(y, x, z)",
        "WriterOfBook(x, y)",
        "Novel(z)"
      ],
      "fol_consts": [
        "Dani_Shapiro",
        "Family_History",
        "Boston",
        "2003"
      ],
      "fol_rules": [
        "¬Novel(Family_History)",
        "(American(r, Boston)) → American(r)",
        "(Novel(x) ∧ WriterOfBook(y, x, z)) → Novel(z) ⊕ WriterOfBook(z, y)",
        "WriterOfBook(Dani_Shapiro, Family_History, r)",
        "WriterOfBook(Dani_Shapiro, x, y) ⊕ (American(Family_History, Boston))",
        "Novel(x) ∧ WriterOfBook(r, x, 2003)",
        "WriterOfBook(Dani_Shapiro, Family_History, 2003) → Novel(Family_History) ⊕ WriterOfBook(2003, Dani_Shapiro)"
      ],
      "fol_conc": "(American(Dani_Shapiro, Boston))",
      "perplexity": 2.78836989402771,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriterOfBook/2, WriterOfBook/3, American/1, American/2.\n\n\nFatal error:  The following symbols are used with multiple arities: WriterOfBook/2, WriterOfBook/3, American/1, American/2"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 352
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRate(x)",
        "SevereCancer(x)",
        "Low(x)",
        "MildFlu(x)",
        "Cholangiocarcinoma(x)",
        "BileDuctCancer(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → Low(SurvivalRate(x)))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(cholangiocarcinoma)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬Low(SurvivalRate(x)))",
        "(BileDuctCancer(colorectal_cancer) ∧ Low(SurvivalRate(colorectal_cancer))) → ¬BileDuctCancer(colorectal_cancer)"
      ],
      "fol_conc": "SevereCancer(colorectal_cancer)",
      "perplexity": [
        1.1292251348495483,
        1.1848819255828857
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DeadlyDisease(x) → Low(SurvivalRate(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x)",
        "Severe(x)",
        "Cancer(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Mild(x)",
        "Colorectal(x)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) → Deadly(x))",
        "Bile(duct)",
        "∀x (Bile(x) → Severe(x))",
        "∀x (Cholangiocarcinoma(x) → Bile(x))",
        "¬(Mild(x) ∧ Low(x))",
        "Colorectal(x) ∧ Bile(x) ∧ Low(x) → ¬(Colorectal(x) ∧ Bile(x))"
      ],
      "fol_conc": "Severe(colorectal)",
      "perplexity": 1.2872871160507202,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Colorectal/1, Colorectal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Colorectal/1, Colorectal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRateLowFor(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)"
      ],
      "fol_consts": [
        "colorectal_cancer",
        "bile_duct_cancer",
        "cholangiocarcinoma"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLowFor(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(bile_duct_cancer)",
        "Cholangiocarcinoma(cholangiocarcinoma)",
        "¬(SurvivalRateLowFor(y) ∧ Cholangiocarcinoma(y) → BileDuctCancer(colorectal_cancer))"
      ],
      "fol_conc": "(SevereCancer(colorectal_cancer))",
      "perplexity": 1.6357001066207886,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 353
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "Favorite(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Quokka(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka_const",
        "koala_const"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → Favorite(max, x))",
        "∀x (AnimalFromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → AnimalFromAustralia(x))",
        "∀x (Favorite(max, x) → VeryFluffy(x))",
        "∀x (Favorite(max, x) → LoveToSleep(x))",
        "∀x (Koala(x) → VeryFluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "(LoveToSleep(koala_const) ∧ Quokka(koala_const))",
      "perplexity": [
        1.1961119174957275,
        1.1802020072937012
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (Loved(x, y) → Favorite(x, y))",
        "∀x (From(x, australia) → Loved(x, y))",
        "∀x (Animal(x) ∧ From(x, australia) → From(x, australia))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → Sleep(x))",
        "∀x (Koala(x) → ¬Fluffy(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleep(x) ∧ From(x, australia)",
      "perplexity": 1.201690912246704,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Love(x, y)",
        "Favorite(z, x)",
        "FromAustralia(y)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Love(x, y) → Favorite(max, x))",
        "∀x (FromAustralia(x) → Love(x, tourists))",
        "∀x (FromAustralia(x) ∧ FromAustralia(y) → ∃z (∃w ((Favorite(z, w) ⊕ ¬(Favorite(z, w))) ∨ (∃c (Love(w, c))))))",
        "(∀u (FromAustralia(u) → FromAustralia(quokka))) ∧ ∀v (FromAustralia(v)) → FromAustralia(quokka)",
        "∀x ∃y ((Favorite(max, x) ⊕ ¬(Favorite(max, x))) ∨ (∃z (∃w (Fluffy(w)))))",
        "∀x ∃y ((Favorite(max, x) ⊕ ¬(Favorite(max, x))) ∨ (∃z (∃k (Sleep(k)))))",
        "(Fluffy(x)) → ∀c (((¬FromAustralia(c) ∧ FromAustralia(quokka) ∧ FromAustralia(x) ⊕ FromAustralia(q)) ∨ ((¬FromAustralia(y)) ∧ ∃i (∀j (Love(i, j))))))"
      ],
      "fol_conc": "∃x ((Sleep(x) ∧ Love(koala, x)) ∧ FromAustralia(x) ∧ FromAustralia(quokka))",
      "perplexity": 2.5718746185302734,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 354
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "BeginWith(x, y)",
        "From(x)",
        "HasPlate(x, y)"
      ],
      "fol_consts": [
        "istanbul",
        "joe",
        "tom",
        "thirtyfour",
        "thirtyfive"
      ],
      "fol_rules": [
        "∀x (From(x) → ∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)))",
        "(¬(∃x (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)) → From(x)) ∨ ∀x ((¬∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour))) → ¬From(x))",
        "∃x (HasPlate(joe, x) ∧ From(x))",
        "∃x (HasPlate(tom, x) ∧ BeginWith(x, thirtyfive))",
        "BeginWith(x, thirtyfive) → ¬BeginWith(x, thirtyfour)"
      ],
      "fol_conc": "∃x (HasPlate(tom, x) ∧ From(x))",
      "perplexity": [
        1.2208313941955566,
        1.1936651468276978
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬(∃x (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)) → From(x)) ∨ ∀x ((¬∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour))) → ¬From(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Plate(x)",
        "Begin(x, y)",
        "From(x, y)",
        "Istanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (Plate(x) ∧ Istanbul(x) → Begin(x, 34))",
        "¬(Plate(x) ∧ ¬Istanbul(x))",
        "From(joe, tom)",
        "Begin(tom, 35)",
        "Begin(x, 35) → ¬Begin(x, 34)"
      ],
      "fol_conc": "From(tom, 34)",
      "perplexity": 1.2823576927185059,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Plate(x)",
        "FromIstanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (Plate(x) ∧ FromIstanbul(x) → ¬BeginWith(x, 34))",
        "(¬(BeginWith(x, 34))) → ¬(FromIstanbul(x))",
        "FromIstanbul(joe)",
        "Plate(tom) ∧ BeginWith(tom, 35)",
        "BeginWith(x, 35) → ¬BeginWith(x, 34)"
      ],
      "fol_conc": "FromIstanbul(tom)",
      "perplexity": 1.7751414775848389,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 355
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "WWE(x)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine) ∧ WWE(diamond_mine)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers) ∧ Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(Feud(imperium, x) ∧ Includes(x, ivy_nile))",
      "perplexity": [
        1.0779913663864136,
        1.2281205654144287
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wrestling(x)",
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Lead(roderickstrong, diamondmine)",
        "Stable(diamondmine) ∧ Include(diamondmine, creedbrothers) ∧ Include(diamondmine, ivynile)",
        "Stable(imperium) ∧ Feud(imperium, diamondmine)",
        "Stable(x) → (Include(x, ivynile) → ¬Feud(imperium, x))"
      ],
      "fol_conc": "Stable(x) ∧ Include(x, ivynile) → ¬Feud(imperium, x)",
      "perplexity": 1.256485104560852,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "HasFeud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "Lead(diamond_mine, roderick_strong)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "HasFeud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(HasFeud(imperium, x) ∧ ProfessionalWrestlingStable(x) ∧ Include(x, ivy_nile))",
      "perplexity": 1.2861393690109253,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 356
  },
  {
    "id": 114,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Donated(x)",
        "Mine(x)",
        "NewMexico(x)",
        "Texas(x)"
      ],
      "fol_consts": [
        "picuris",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∀x (MountainRange(x) → (LocatedIn(x, new_mexico) ⊕ LocatedIn(x, texas)))",
        "LocatedIn(picuris, new_mexico) ⊕ LocatedIn(picuris, texas)",
        "Donated(harding_pegmatite_mine) ∧ LocatedIn(harding_pegmatite_mine, picuris)",
        "∀x ((MountainRange(x) ∧ Texas(x)) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "∀x (LocatedIn(x, new_mexico) → ¬LocatedIn(harding_pegmatite_mine, x))",
      "perplexity": [
        1.1286653280258179,
        1.1806191205978394
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((MountainRange(x) ∧ Texas(x)) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Mountainrange(x)",
        "Mine(x)",
        "Donated(x)",
        "Located(x, y)",
        "Visited(x, y)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "harding"
      ],
      "fol_rules": [
        "(Mountainrange(picuris) ∧ Instate(picuris, newmexico)) ⊕ (Mountainrange(picuris) ∧ Instate(picuris, texas))",
        "Visited(juan, picuris)",
        "Located(harding, picuris) ∧ Donated(harding)",
        "¬(Mountainrange(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Located(y, x) ∧ Donated(y)))",
        "∀x (Mountainrange(x) ∧ Instate(x, texas) → ¬(Mine(x) ∧ Donated(x)))"
      ],
      "fol_conc": "¬(Mine(harding) ∧ Located(harding, newmexico))",
      "perplexity": 1.320648193359375,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedAt(x, y)",
        "Mine(x)"
      ],
      "fol_consts": [
        "new_mexico",
        "texas",
        "picuris_mountains",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "(MountainRange(picuris_mountains) ∧ (LocatedAt(new_mexico, picuris_mountains) ⊕ LocatedAt(texas, picuris_mountains)))",
        "Visited(juan_de_onate, picuris_mountains)",
        "Donated(harding_pegmatite_mine)",
        "(Mine(picuris_mountains) ∧ Donated(harding_pegmatite_mine)) → ¬LocatedAt(new_mexico, harding_pegmatite_mine)"
      ],
      "fol_conc": "¬LocatedAt(new_mexico, harding_pegmatite_mine)",
      "perplexity": 2.258546829223633,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 357
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Piece(x)",
        "Write(x, y)",
        "LedBy(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Conductor(x)",
        "Musician(x)",
        "Composer(x)"
      ],
      "fol_consts": [
        "beethoven",
        "symphonyNo9",
        "viennaMusicSociety",
        "musicPiece"
      ],
      "fol_rules": [
        "Piece(symphonyNo9)",
        "∀x (Musician(x) → Write(x, musicPiece))",
        "Write(beethoven, symphonyNo9)",
        "Premiered(viennaMusicSociety, symphonyNo9)",
        "Orchestra(viennaMusicSociety)",
        "LedBy(beethoven, viennaMusicSociety)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ LedBy(x, y)))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": [
        1.2835453748703003,
        1.2054283618927002
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusic"
      ],
      "fol_rules": [
        "Music(symphony9)",
        "∀x (Music(x) → ∃y (Write(y, x)))",
        "Write(beethoven, symphony9)",
        "Premiered(viennamusic, symphony9)",
        "Orchestra(viennamusic)",
        "Lead(beethoven, viennamusic)",
        "∀x (Orchestra(x) → ∃y (Lead(y, x)))",
        "∀x (Orchestra(x) → Conductor(x))"
      ],
      "fol_conc": "Conductor(beethoven)",
      "perplexity": 1.188082218170166,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "PremieredBy(x, y)",
        "Orchestra(y)",
        "Lead(x, y)",
        "LedBy(x, y)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "MusicPiece(symphony no. 9)",
        "∀x (Write(x, y) ∧ MusicPiece(y))",
        "PremieredBy(vienna music society, symphony no. 9)",
        "Orchestra(vienna music society)",
        "Lead(beethoven, vienna music society)",
        "LedBy(x, y) → ∃z (Orchestra(z) ∧ Lead(z, x))"
      ],
      "fol_conc": "∀x ((Write(x, y) ∧ MusicPiece(y)) → Write(beethoven, y))",
      "perplexity": 1.6492294073104858,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony no. 9)"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 358
  },
  {
    "id": 116,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Windy is a great shooter.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Jump(x, y)",
        "Shooter(x)",
        "GreatShooter(x)",
        "Person(x)",
        "Class(x)",
        "CanJump(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael)",
        "∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z))",
        "Taller(peter, michael)",
        "∀x ∀y (Man(x) ∧ Block(x, y) → ¬Jump(y, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x, y) → Shooter(x))",
        "∀x (Person(x) → Man(x))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": [
        1.207323431968689,
        1.190347671508789
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Taller(x, y)",
        "Block(x, y)",
        "Shooting(x, y)",
        "Jump(x, y)",
        "Great(x)"
      ],
      "fol_consts": [
        "michael",
        "windy",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Man(x) ∧ ¬Taller(x, michael) → ¬Taller(x, michael))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ∀y (Man(x) ∧ Man(y) ∧ ¬Jump(y, x) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x, y) → Great(x))"
      ],
      "fol_conc": "Great(windy)",
      "perplexity": 1.1701533794403076,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Man(x)",
        "TallerThan(x, y)",
        "CanBlock(x, y)",
        "JumpWhenShooting(y)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "windy",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (TallerThan(x, y) → CanBlock(x, y))",
        "(Man(michael) ∧ ∀z (∃w (Person(w) ∧ Man(w) ∧ TallerThan(w, z))))",
        "¬(¬(TallerThan(y, x) ∧ TallerThan(x, z)) ∨ ∃u (Person(u) ∧ Man(u))) → TallerThan(y, z)",
        "(Man(peter) ∧ ∀z (∃w (Person(w) ∧ Man(w) ∧ TallerThan(w, z))))",
        "∀x ((CanBlock(michael, x) ∧ ¬JumpWhenShooting(x)) ∨ JumpWhenShooting(x))",
        "¬(CanBlock(michael, windy))",
        "(Man(y) ∧ Person(z) → (∃u (Person(u) ∧ Man(u))) ∨ ∃v (Person(v) ∧ Man(v)))",
        "∀x ((JumpWhenShooting(x) → GreatShooter(x)) ∧ ¬GreatShooter(windy))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": 1.800017237663269,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 359
  },
  {
    "id": 154,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHome(x)",
        "FullyStockedOffice(x)",
        "OwnDesktopMonitor(x)",
        "Tidy(x)",
        "VisitOfficeSupplyStore(x)",
        "BedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, desktopMonitor) → WorkAtHome(x))",
        "∀x (FullyStockedOffice(x) → Own(x, desktopMonitor))",
        "∀x (WorkAtHome(x) → Tidy(x))",
        "∀x (WorkAtHome(x) → VisitOfficeSupplyStore(x))",
        "∀x (Tidy(x) → ¬(BedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(BedLate(remy) ∧ WakeUpAfterNoon(remy)) ⊕ ¬(BedLate(remy) ∨ WakeUpAfterNoon(remy))"
      ],
      "fol_conc": "(FullyStockedOffice(remy) ∧ VisitOfficeSupplyStore(remy))",
      "perplexity": [
        1.086847186088562,
        1.1763561964035034
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Owns(x, y)",
        "Work(x)",
        "Home(x)",
        "Tidy(x)",
        "Late(x)",
        "Visit(x, y)",
        "Office(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Owns(x, y) → Work(x) ∧ Home(x))",
        "∀x (Office(x) → Owns(x, y))",
        "∀x (Work(x) ∧ Home(x) → Tidy(x))",
        "∀x (Work(x) ∧ Home(x) → Visit(x, y))",
        "∀x (Tidy(x) → ¬Late(x))",
        "(Late(x) ∧ Tidy(x)) ⊕ ¬(Late(x) ∨ Tidy(x))",
        "Late(x) ∧ Tidy(x) → ¬Visit(x, y)"
      ],
      "fol_conc": "Office(x) ∧ Visit(x, y)",
      "perplexity": 1.2143232822418213,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Owns(x, y)",
        "WorkRegularlyAndOftenAtHome(x)",
        "HasFullyStockedOffice(x)",
        "GoToBedLate(x)",
        "WakeUpEveryDayAfterNoon(x)",
        "SpentFreeTimeTidyingSpaces(x)",
        "VisitStoreRegulary(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Owns(x, y) → WorkRegularlyAndOftenAtHome(x))",
        "∀x (HasFullyStockedOffice(x) → Owns(x, y))",
        "∀x (WorkRegularlyAndOftenAtHome(x) → SpentFreeTimeTidyingSpaces(x))",
        "∀x (WorkRegularlyAndOftenAtHome(x) → VisitStoreRegulary(x))",
        "∀x ((SpentFreeTimeTidyingSpaces(x) ∧ GoToBedLate(x)) → ¬(WakeUpEveryDayAfterNoon(x)))",
        "(GoToBedLate(remy) ∧ WakeUpEveryDayAfterNoon(remy) ∧ SpentFreeTimeTidyingSpaces(remy)) ⊕ (¬(GoToBedLate(remy) ∨ WakeUpEveryDayAfterNoon(remy)) ∨ ¬SpentFreeTimeTidyingSpaces(remy))"
      ],
      "fol_conc": "(HasFullyStockedOffice(remy) ∧ VisitStoreRegulary(remy))",
      "perplexity": 1.4559520483016968,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 360
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Transport(x, multiple) → ¬Empty(x))",
        "∀x (Airline(x))",
        "∀x (Plane(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "∃x (Airline(x) ∧ ¬Greyhound(x)) → ¬∃x (Plane(x) ∧ Boeing707(x))"
      ],
      "fol_conc": "Greyhound(x) ∧ Airline(x)",
      "perplexity": [
        1.2531810998916626,
        1.3564075231552124
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Airline(x) ∧ ¬Greyhound(x)) → ¬∃x (Plane(x) ∧ Boeing707(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, y) → ¬Empty(x))",
        "∀x (Airline(x))",
        "∀x (Plane(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬Plane(greyhound)"
      ],
      "fol_conc": "Airline(greyhound)",
      "perplexity": 1.2130727767944336,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "TransportMultiple(x)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)"
      ],
      "fol_consts": [
        "greyhound",
        "boeing_707"
      ],
      "fol_rules": [
        "∀x (TransportMultiple(x) → ¬Empty(x))",
        "∀x (Airline(x) ∧ TransportMultiple(x))",
        "¬(Airline(x) ∨ Plane(x))",
        "(Plane(x) ∧ Airline(b)) ⊕ ∀y ((Plane(y) ∧ Airline(z)) → ∃w (Plane(w)))",
        "((Plane(greyhound)) ∧ ¬Airline(greyhound)) → ∀x (¬(Airline(x) ∨ Plane(x)))"
      ],
      "fol_conc": "(Airline(greyhound) ⊕ ∀y ((Airline(y) ∨ Plane(y)) → Airline(z)))",
      "perplexity": 2.9176104068756104,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 341
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space",
        "Duster(x)",
        "Appliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "∃x (Duster(x) ∧ ¬∃y (Suck(y) ∧ Appliance(x)))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": [
        1.6292520761489868,
        1.4332714080810547
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Duster(x) ∧ ¬∃y (Suck(y) ∧ Appliance(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Appliance(x)",
        "Household(x)",
        "Space(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "∀x (Appliance(x) ∧ Household(x) ∧ ¬Suck(x))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.3034870624542236,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "IsVacuum(y)",
        "IsVampire(x)"
      ],
      "fol_consts": [
        "space",
        "vampires"
      ],
      "fol_rules": [
        "∀x (Suck(x))",
        "∃y (IsVacuum(space) ∧ Suck(vacuums))",
        "Suck(vampires)",
        "Suck(duster) ⊕ ¬Suck(duster)",
        "¬Suck(appliance) → IsVampire(y)"
      ],
      "fol_conc": "IsVampire(space)",
      "perplexity": 2.7922189235687256,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 342
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "Access(x, y)",
        "CanCompose(x, y)",
        "WantsToCompose(x)",
        "Compose(x)",
        "Program(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (LikesMusic(x) → WantsToCompose(x))",
        "∀x (Access(x, y) → CanCompose(x, y))",
        "∀x (CanCompose(x, y) ∧ WantsToCompose(x) → Compose(x))"
      ],
      "fol_conc": "(LikesMusic(george) ∧ Access(george, Program(x))) → Compose(george)",
      "perplexity": [
        1.3105179071426392,
        1.3271464109420776
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(LikesMusic(george) ∧ Access(george, Program(x))) → Compose(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Can(x)",
        "Compose(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Likes(george) → Wants(george)",
        "Has(george, program) → Can(george)",
        "Can(george) ∧ Wants(george) → Compose(george)"
      ],
      "fol_conc": "Likes(george) ∧ Has(george, program) → Compose(george)",
      "perplexity": 1.2447465658187866,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "CanCompose(x)",
        "WillCompose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x ∀y (Likes(x, music) → WantsToCompose(x))",
        "∀x ∀y (HasAccess(x, program) → CanCompose(x))",
        "(CanCompose(george) ∧ WantsToCompose(george)) → WillCompose(george)"
      ],
      "fol_conc": "(Likes(george, music) ∧ HasAccess(george, program)) → WillCompose(george)",
      "perplexity": 2.61788010597229,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 343
  },
  {
    "id": 98,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "FromAustralia(x)",
        "Fluffy(x)",
        "Sleeps(x)",
        "Koala(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(y, x) → Favorite(max, x))",
        "∀x (FromAustralia(x) → Loved(tourist, x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleeps(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "(Koala(x) ∧ Quokka(x)) → (Sleeps(x) ⊕ Fluffy(x))",
      "perplexity": [
        1.0865787267684937,
        1.1789559125900269
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (Loved(x, y) → Favorite(max, x))",
        "∀x (From(x, australia) → Loved(x, y))",
        "∀x (Animal(x) ∧ From(x, australia) → From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Koala(x))"
      ],
      "fol_conc": "Koala(x) → (Sleep(x) ⊕ Fluffy(x))",
      "perplexity": 1.1715563535690308,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimalOfMax(x)",
        "FromAustralia(x)",
        "Fluffy(x)",
        "LoveToSleep(x)",
        "Fluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y ((LovedBy(y, x) → FavoriteAnimalOfMax(max, x)) ∧ (FromAustralia(x) → LovedBy(y, x)))",
        "(FavoriteAnimalOfMax(max, z) → Fluffy(z)) ⊕ (FavoriteAnimalOfMax(max, w) → LoveToSleep(w))",
        "∀x ((Fluffy(x) ∧ FromAustralia(x)) → ¬(FromAustralia(quokka) ∧ FavoriteAnimalOfMax(max, x)))",
        "¬((Fluffy(koala) ∧ FromAustralia(quokka)) → (FavoriteAnimalOfMax(max, koala) ⊕ LoveToSleep(koala)))"
      ],
      "fol_conc": "(FavoriteAnimalOfMax(max, z) → ((LoveToSleep(z) ∨ Fluffy(z)) ∧ FavoriteAnimalOfMax(max, quokka)))",
      "perplexity": 2.0037782192230225,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 344
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "bmc",
        "dtc"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x) ∧ x = bmc → Cupcake(x))",
        "(Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x))"
      ],
      "fol_conc": "Hotpot(dtc)",
      "perplexity": [
        1.397657036781311,
        1.2702597379684448
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Product(x) ∧ x = bmc → Cupcake(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bymelissa) → Cupcake(x))",
        "Spicy(driedthai) ⊕ Bakery(driedthai) → (Hotpot(driedthai) ⊕ Spicy(driedthai))"
      ],
      "fol_conc": "Hotpot(driedthai)",
      "perplexity": 1.188579797744751,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "mellissa",
        "thaichili"
      ],
      "fol_rules": [
        "¬(Bakery(mellissa)) → ¬Spicy(mellissa)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "ProductOf(bm, x) → Cupcake(x)",
        "(ProductOf(btcm, thaichili) ⊕ Bakery(thaichili)) → ((Hotpot(thaichili) ∨ Spicy(thaichili)) ∧ ¬((Spicy(thaichili) ∨ Hotpot(thaichili))) ∧ (Bakery(mellissa) ∨ Spicy(thaichili)))"
      ],
      "fol_conc": "∃x (ProductOf(bm, thaichili) → Hotpot(thaichili))",
      "perplexity": 1.8883161544799805,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 345
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "GainsKnowledge(x)",
        "Smarter(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau",
        "knowledge"
      ],
      "fol_rules": [
        "∀x ∀y (Book(x) ∧ Read(y, x) → Contains(x, y))",
        "∀x (∃y (Book(y) ∧ Read(y, x)) → GainsKnowledge(x))",
        "∀x ∀y (Book(x) ∧ GainsKnowledge(y) → Contains(x, y))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": [
        1.49197256565094,
        1.2988404035568237
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contain(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)",
        "Person(x)",
        "Author(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contain(x, y)))",
        "∀x (Person(x) ∧ Read(x, y) → Gain(x, y))",
        "∀x (Gain(x, y) → Smarter(x, y))",
        "Read(harry, walden)",
        "Author(walden, henry)"
      ],
      "fol_conc": "Contain(walden, y)",
      "perplexity": 1.238904595375061,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "GainsKnowledge(x)",
        "BecomesSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walen"
      ],
      "fol_rules": [
        "∀x (∃y (Contains(y, x)) → ∃z (∃w (Contains(w, z))) ∨ Contains(z, x))",
        "∀x (∃y (Reads(x, y) ∧ Contains(y, x)) → GainsKnowledge(x))",
        "(Reads(harry, walen))"
      ],
      "fol_conc": "(∃y (Contains(y, walen)))",
      "perplexity": 2.8425590991973877,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 346
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "EatsSalads(x)",
        "Conscious(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyNutritionalIntakes(x)",
        "GoodRelationshipWithParents(x)",
        "VisitGym(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatsSalads(x) → Conscious(x))",
        "∀x (GrewUpInHealthConsciousHome(x) → EatsSalads(x))",
        "∀x (FulfillDailyNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x))",
        "∀x (∀y (GoodRelationshipWithParents(y) → FulfillDailyNutritionalIntakes(x)) → GoodRelationshipWithParents(x) → ¬EatsSalads(x))",
        "∀x (∀y (VisitGym(y) → FulfillDailyNutritionalIntakes(x)) → VisitGym(x) → FulfillDailyNutritionalIntakes(x))",
        "(GrewUpInHealthConsciousHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthConsciousHome(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "EatsSalads(taylor)",
      "perplexity": [
        1.403963565826416,
        1.155785322189331
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Regularly(x)",
        "Conscious(x)",
        "Grow(x, y)",
        "Fulfill(x)",
        "Good(x, y)",
        "Visit(x, y)",
        "Daily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Regularly(x) → Conscious(x))",
        "∀x (Grow(x, y) → Regularly(x))",
        "∀x (Fulfill(x) → Grow(x, y))",
        "∀x (Good(x, y) → Fulfill(x))",
        "∀x (Good(x, y) → ¬Regularly(x))",
        "∀x (Visit(x, y) → Fulfill(x))",
        "(Grow(taylor, y) ∧ Good(taylor, y)) ⊕ ¬(Grow(taylor, y) ∨ Good(taylor, y))"
      ],
      "fol_conc": "Regularly(taylor)",
      "perplexity": 1.2001653909683228,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ConsciousAboutHealthAndEatingHabits(x)",
        "GrewUpInHealthyChildhoodHome(x)",
        "EatSaladsRegularly(x)",
        "FulfillNutritionalDailyIntakes(x)",
        "GoodRelationshipWithParents(x)"
      ],
      "fol_consts": [
        "taylor",
        "gymVisitsDaily"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → ConsciousAboutHealthAndEatingHabits(x))",
        "∀x (GrewUpInHealthyChildhoodHome(x) → EatSaladsRegularly(x))",
        "∀x (FulfillNutritionalDailyIntakes(x) → GrewUpInHealthyChildhoodHome(x))",
        "GoodRelationshipWithParents(x) → FulfillNutritionalDailyIntakes(x)",
        "GoodRelationshipWithParents(x) → ¬EatSaladsRegularly(x)",
        "VisitTheGymAtLeastOnceADay(x) → FulfillNutritionalDailyIntakes(x)",
        "(GrewUpInHealthyChildhoodHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthyChildhoodHome(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "EatSaladsRegularly(taylor)",
      "perplexity": 1.4870681762695312,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 347
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin",
        "Mars",
        "Earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, Mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, Earth) → Human(x))",
        "¬(From(marvin, Earth) ∧ From(marvin, Mars))",
        "¬From(marvin, Earth) → Alien(marvin)"
      ],
      "fol_conc": "¬From(marvin, Mars) → Human(marvin)",
      "perplexity": [
        1.0790703296661377,
        1.2545753717422485
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)",
        "Not(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬From(marvin, earth) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "¬From(marvin, mars) → Human(marvin)",
      "perplexity": 1.133043885231018,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromEarth(x, y)",
        "FromMars(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (∃y (FromMars(x, y)) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "(Human(y) ∧ FromEarth(y, earth))",
        "(FromEarth(marvin, earth) ∧ FromMars(marvin, mars)) ⊕ ¬((FromEarth(marvin, earth) ∨ FromMars(marvin, mars)))",
        "¬(FromEarth(marvin, earth) → FromEarth(marvin, earth)) → (Extraterrestrial(x) → ∃y (Human(y)))"
      ],
      "fol_conc": "(∀x (∃y (FromMars(x, y)) → Alien(x))) ∧ ¬((FromEarth(marvin, mars) ∨ FromMars(marvin, mars)))",
      "perplexity": 1.9324897527694702,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 348
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "BasketballPlayer(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)",
        "Person(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬(BasketballPlayer(yuri) ∧ American(yuri))",
      "perplexity": [
        1.152608871459961,
        1.2798658609390259
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(x)",
        "Large(x, y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → Wear(x, large))",
        "∀x (Wear(x, large) → Large(x, clothes))",
        "¬Large(yuri, clothes)"
      ],
      "fol_conc": "¬(Basketball(yuri) ∧ American(yuri))",
      "perplexity": 1.2816587686538696,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "American(x)",
        "BasketballPlayer(x)",
        "Tall(x)",
        "Shoes(x)",
        "Clothes(x)"
      ],
      "fol_consts": [
        "yuri",
        "large",
        "american"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → Shoes(x))",
        "∀x (Shoes(x) → Clothes(x))",
        "¬Clothes(yuri, large)"
      ],
      "fol_conc": "(¬American(yuri) ∧ BasketballPlayer(yuri))",
      "perplexity": 1.4821064472198486,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Clothes/2, Clothes/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Clothes/2, Clothes/1"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 349
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Like(x)",
        "Want(x)",
        "Can(x)",
        "Compose(x)",
        "Access(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Like(george) → Want(george)",
        "Access(george) → Can(george)",
        "Can(george) ∧ Want(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george)",
      "perplexity": [
        1.068151831626892,
        1.4329968690872192
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Can(x)",
        "Compose(x)",
        "Has(x, y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "Likes(george) → Wants(george)",
        "Has(george, program) → Can(george)",
        "Can(george) ∧ Wants(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(george)",
      "perplexity": 1.2495096921920776,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x)",
        "WantsToCompose(x, y)",
        "HasAccess(x, y)",
        "CanCompose(x, y)",
        "WillCompose(x, y)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "∀x (Likes(x) → WantsToCompose(x, music))",
        "∀x (Likes(x) → HasAccess(x, program))",
        "∀x (∃y ((CanCompose(x, y) ∧ WantsToCompose(x, music))) → WillCompose(x, music))"
      ],
      "fol_conc": "¬WillCompose(george, music) → ¬CanCompose(george, program)",
      "perplexity": 1.9355229139328003,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 350
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Favorite(x, y)",
        "Student(x)",
        "WantVacation(x)",
        "Love(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x (Season(x) ∧ x = spring ∧ x = summer ∧ x = fall ∧ x = winter)",
        "∀x (Student(x) ∧ WantVacation(x) → Love(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(emma, x) ∧ Favorite(mia, x))",
        "WantVacation(james)"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": [
        1.1005682945251465,
        1.2685836553573608
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Season(x) ∧ x = spring ∧ x = summer ∧ x = fall ∧ x = winter)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "Want(x, y)",
        "Love(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x ∃y ∃z ∃w (Season(x) ∧ Season(y) ∧ Season(z) ∧ Season(w) ∧ (¬(Season(x) ∧ Season(y)) ∧ ¬(Season(x) ∧ Season(z)) ∧ ¬(Season(x) ∧ Season(w)) ∧ ¬(Season(y) ∧ Season(z)) ∧ ¬(Season(y) ∧ Season(w)) ∧ ¬(Season(z) ∧ Season(w))))",
        "∀x (Student(x) → ∀y (Want(x, y) → Love(x, y)))",
        "Favorite(emma, summer)",
        "¬Favorite(mia, summer)",
        "Want(james, long)",
        "Want(james, long) → ∃x (Season(x) ∧ Favorite(james, x))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 1.2477619647979736,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ∃y ∃z ∃w (Season(x) ∧ Season(y) ∧ Season(z) ∧ Season(w) ∧ (¬(Season(x) ∧ Season(y)) ∧ ¬(Season(x) ∧ Season(z)) ∧ ¬(Season(x) ∧ Season(w)) ∧ ¬(Season(y) ∧ Season(z)) ∧ ¬(Season(y) ∧ Season(w)) ∧ ¬(Season(z) ∧ Season(w))))"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WantLongVacation(x)",
        "LoveMost(x, y)",
        "FavoriteSeasonOf(x, y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from ",
        "fol_consts",
        "fol_consts",
        "fol_consts"
      ],
      "fol_rules": [
        "∃x (FavoriteSeasonOf(x, spring) ∧ FavoriteSeasonOf(x, summer) ∧ FavoriteSeasonOf(x, fall) ∧ FavoriteSeasonOf(x, winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from , fol_consts) ∨ (FavoriteSeasonOf(x, summer)))",
        "∀x (∃y ((Student(x) ∧ WantLongVacation(y)) → LoveMost(x, y)))",
        "LoveMost(emma, summer)",
        "¬LoveMost(mia, emma)",
        "WantLongVacation(james)"
      ],
      "fol_conc": "(FavoriteSeasonOf(james, summer))",
      "perplexity": 4.715300559997559,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (FavoriteSeasonOf(x, spring) ∧ FavoriteSeasonOf(x, summer) ∧ FavoriteSeasonOf(x, fall) ∧ FavoriteSeasonOf(x, winter']}  # Removed Fall and Winter since they're not needed to express the conclusion. If you need them for other purposes in your logic, then keep them there. They were included due to being part of the original NL premises statement about seasons. However, upon reviewing my last response I can see that it wasn't necessary so removed fall and winter from , fol_consts) ∨ (FavoriteSeasonOf(x, summer)))"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 351
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "AmericanCity(x)",
        "Novel(x)",
        "Writer(x)",
        "Podcast(x)",
        "Person(x)",
        "Book(x)",
        "NovelWriter(x)",
        "City(x)",
        "Created(x, y)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "american_city",
        "boston",
        "family_history",
        "family_secrets"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (AmericanCity(x) → American(x))",
        "∀x (Novel(x) ∧ Book(x) ∧ Writer(x) → NovelWriter(x))",
        "American(dani_shapiro)",
        "Created(dani_shapiro, family_history)",
        "Novel(family_history) ∧ Book(family_history) ∧ Created(dani_shapiro, family_history)",
        "Podcast(family_secrets) ∧ Created(dani_shapiro, family_secrets)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "∃x (Person(x) ∧ BornIn(x, boston) ∧ Created(x, family_history))",
      "perplexity": [
        1.3413970470428467,
        1.1971580982208252
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "American(x)",
        "Writer(x)",
        "Book(x)",
        "Written(x, y)",
        "Created(x, y)",
        "City(x)",
        "Person(x)",
        "Year(x)"
      ],
      "fol_consts": [
        "dani",
        "shapiro",
        "family",
        "history",
        "boston",
        "american",
        "city",
        "2003",
        "family",
        "secrets"
      ],
      "fol_rules": [
        "¬Podcast(x) → ¬Novel(x)",
        "∀x (Person(x) ∧ City(x, american) → American(x))",
        "∀x (Novel(x) ∧ Written(x, y) → Writer(y))",
        "American(dani) ∧ Writer(dani)",
        "Written(book, dani)",
        "Novel(book) ∧ Year(book, 2003)",
        "Created(podcast, dani) ∧ Name(podcast, family) ∧ Name(podcast, secrets)",
        "City(boston, american)"
      ],
      "fol_conc": "City(boston, american) → American(dani)",
      "perplexity": 1.3213233947753906,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Novel(x)",
        "American(x, y)",
        "WriterOfBook(y, x, z)",
        "WriterOfBook(x, y)",
        "Novel(z)"
      ],
      "fol_consts": [
        "Dani_Shapiro",
        "Family_History",
        "Boston",
        "2003"
      ],
      "fol_rules": [
        "¬Novel(Family_History)",
        "(American(r, Boston)) → American(r)",
        "(Novel(x) ∧ WriterOfBook(y, x, z)) → Novel(z) ⊕ WriterOfBook(z, y)",
        "WriterOfBook(Dani_Shapiro, Family_History, r)",
        "WriterOfBook(Dani_Shapiro, x, y) ⊕ (American(Family_History, Boston))",
        "Novel(x) ∧ WriterOfBook(r, x, 2003)",
        "WriterOfBook(Dani_Shapiro, Family_History, 2003) → Novel(Family_History) ⊕ WriterOfBook(2003, Dani_Shapiro)"
      ],
      "fol_conc": "(American(Dani_Shapiro, Boston))",
      "perplexity": 2.78836989402771,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriterOfBook/2, WriterOfBook/3, American/1, American/2.\n\n\nFatal error:  The following symbols are used with multiple arities: WriterOfBook/2, WriterOfBook/3, American/1, American/2"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 352
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRate(x)",
        "SevereCancer(x)",
        "Low(x)",
        "MildFlu(x)",
        "Cholangiocarcinoma(x)",
        "BileDuctCancer(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → Low(SurvivalRate(x)))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(cholangiocarcinoma)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬Low(SurvivalRate(x)))",
        "(BileDuctCancer(colorectal_cancer) ∧ Low(SurvivalRate(colorectal_cancer))) → ¬BileDuctCancer(colorectal_cancer)"
      ],
      "fol_conc": "SevereCancer(colorectal_cancer)",
      "perplexity": [
        1.1292251348495483,
        1.1848819255828857
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DeadlyDisease(x) → Low(SurvivalRate(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x)",
        "Severe(x)",
        "Cancer(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Mild(x)",
        "Colorectal(x)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) → Deadly(x))",
        "Bile(duct)",
        "∀x (Bile(x) → Severe(x))",
        "∀x (Cholangiocarcinoma(x) → Bile(x))",
        "¬(Mild(x) ∧ Low(x))",
        "Colorectal(x) ∧ Bile(x) ∧ Low(x) → ¬(Colorectal(x) ∧ Bile(x))"
      ],
      "fol_conc": "Severe(colorectal)",
      "perplexity": 1.2872871160507202,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Colorectal/1, Colorectal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Colorectal/1, Colorectal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRateLowFor(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)"
      ],
      "fol_consts": [
        "colorectal_cancer",
        "bile_duct_cancer",
        "cholangiocarcinoma"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLowFor(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(bile_duct_cancer)",
        "Cholangiocarcinoma(cholangiocarcinoma)",
        "¬(SurvivalRateLowFor(y) ∧ Cholangiocarcinoma(y) → BileDuctCancer(colorectal_cancer))"
      ],
      "fol_conc": "(SevereCancer(colorectal_cancer))",
      "perplexity": 1.6357001066207886,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 353
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "Favorite(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Quokka(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka_const",
        "koala_const"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → Favorite(max, x))",
        "∀x (AnimalFromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → AnimalFromAustralia(x))",
        "∀x (Favorite(max, x) → VeryFluffy(x))",
        "∀x (Favorite(max, x) → LoveToSleep(x))",
        "∀x (Koala(x) → VeryFluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "(LoveToSleep(koala_const) ∧ Quokka(koala_const))",
      "perplexity": [
        1.1961119174957275,
        1.1802020072937012
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (Loved(x, y) → Favorite(x, y))",
        "∀x (From(x, australia) → Loved(x, y))",
        "∀x (Animal(x) ∧ From(x, australia) → From(x, australia))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → Sleep(x))",
        "∀x (Koala(x) → ¬Fluffy(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleep(x) ∧ From(x, australia)",
      "perplexity": 1.201690912246704,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Love(x, y)",
        "Favorite(z, x)",
        "FromAustralia(y)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Love(x, y) → Favorite(max, x))",
        "∀x (FromAustralia(x) → Love(x, tourists))",
        "∀x (FromAustralia(x) ∧ FromAustralia(y) → ∃z (∃w ((Favorite(z, w) ⊕ ¬(Favorite(z, w))) ∨ (∃c (Love(w, c))))))",
        "(∀u (FromAustralia(u) → FromAustralia(quokka))) ∧ ∀v (FromAustralia(v)) → FromAustralia(quokka)",
        "∀x ∃y ((Favorite(max, x) ⊕ ¬(Favorite(max, x))) ∨ (∃z (∃w (Fluffy(w)))))",
        "∀x ∃y ((Favorite(max, x) ⊕ ¬(Favorite(max, x))) ∨ (∃z (∃k (Sleep(k)))))",
        "(Fluffy(x)) → ∀c (((¬FromAustralia(c) ∧ FromAustralia(quokka) ∧ FromAustralia(x) ⊕ FromAustralia(q)) ∨ ((¬FromAustralia(y)) ∧ ∃i (∀j (Love(i, j))))))"
      ],
      "fol_conc": "∃x ((Sleep(x) ∧ Love(koala, x)) ∧ FromAustralia(x) ∧ FromAustralia(quokka))",
      "perplexity": 2.5718746185302734,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 354
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "BeginWith(x, y)",
        "From(x)",
        "HasPlate(x, y)"
      ],
      "fol_consts": [
        "istanbul",
        "joe",
        "tom",
        "thirtyfour",
        "thirtyfive"
      ],
      "fol_rules": [
        "∀x (From(x) → ∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)))",
        "(¬(∃x (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)) → From(x)) ∨ ∀x ((¬∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour))) → ¬From(x))",
        "∃x (HasPlate(joe, x) ∧ From(x))",
        "∃x (HasPlate(tom, x) ∧ BeginWith(x, thirtyfive))",
        "BeginWith(x, thirtyfive) → ¬BeginWith(x, thirtyfour)"
      ],
      "fol_conc": "∃x (HasPlate(tom, x) ∧ From(x))",
      "perplexity": [
        1.2208313941955566,
        1.1936651468276978
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬(∃x (HasPlate(x, y) ∧ BeginWith(y, thirtyfour)) → From(x)) ∨ ∀x ((¬∃y (HasPlate(x, y) ∧ BeginWith(y, thirtyfour))) → ¬From(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Plate(x)",
        "Begin(x, y)",
        "From(x, y)",
        "Istanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (Plate(x) ∧ Istanbul(x) → Begin(x, 34))",
        "¬(Plate(x) ∧ ¬Istanbul(x))",
        "From(joe, tom)",
        "Begin(tom, 35)",
        "Begin(x, 35) → ¬Begin(x, 34)"
      ],
      "fol_conc": "From(tom, 34)",
      "perplexity": 1.2823576927185059,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Plate(x)",
        "FromIstanbul(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (Plate(x) ∧ FromIstanbul(x) → ¬BeginWith(x, 34))",
        "(¬(BeginWith(x, 34))) → ¬(FromIstanbul(x))",
        "FromIstanbul(joe)",
        "Plate(tom) ∧ BeginWith(tom, 35)",
        "BeginWith(x, 35) → ¬BeginWith(x, 34)"
      ],
      "fol_conc": "FromIstanbul(tom)",
      "perplexity": 1.7751414775848389,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 355
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "WWE(x)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine) ∧ WWE(diamond_mine)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers) ∧ Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(Feud(imperium, x) ∧ Includes(x, ivy_nile))",
      "perplexity": [
        1.0779913663864136,
        1.2281205654144287
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wrestling(x)",
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Lead(roderickstrong, diamondmine)",
        "Stable(diamondmine) ∧ Include(diamondmine, creedbrothers) ∧ Include(diamondmine, ivynile)",
        "Stable(imperium) ∧ Feud(imperium, diamondmine)",
        "Stable(x) → (Include(x, ivynile) → ¬Feud(imperium, x))"
      ],
      "fol_conc": "Stable(x) ∧ Include(x, ivynile) → ¬Feud(imperium, x)",
      "perplexity": 1.256485104560852,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "HasFeud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "Lead(diamond_mine, roderick_strong)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "HasFeud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(HasFeud(imperium, x) ∧ ProfessionalWrestlingStable(x) ∧ Include(x, ivy_nile))",
      "perplexity": 1.2861393690109253,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 356
  },
  {
    "id": 114,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Donated(x)",
        "Mine(x)",
        "NewMexico(x)",
        "Texas(x)"
      ],
      "fol_consts": [
        "picuris",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∀x (MountainRange(x) → (LocatedIn(x, new_mexico) ⊕ LocatedIn(x, texas)))",
        "LocatedIn(picuris, new_mexico) ⊕ LocatedIn(picuris, texas)",
        "Donated(harding_pegmatite_mine) ∧ LocatedIn(harding_pegmatite_mine, picuris)",
        "∀x ((MountainRange(x) ∧ Texas(x)) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "∀x (LocatedIn(x, new_mexico) → ¬LocatedIn(harding_pegmatite_mine, x))",
      "perplexity": [
        1.1286653280258179,
        1.1806191205978394
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((MountainRange(x) ∧ Texas(x)) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Mountainrange(x)",
        "Mine(x)",
        "Donated(x)",
        "Located(x, y)",
        "Visited(x, y)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "harding"
      ],
      "fol_rules": [
        "(Mountainrange(picuris) ∧ Instate(picuris, newmexico)) ⊕ (Mountainrange(picuris) ∧ Instate(picuris, texas))",
        "Visited(juan, picuris)",
        "Located(harding, picuris) ∧ Donated(harding)",
        "¬(Mountainrange(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Located(y, x) ∧ Donated(y)))",
        "∀x (Mountainrange(x) ∧ Instate(x, texas) → ¬(Mine(x) ∧ Donated(x)))"
      ],
      "fol_conc": "¬(Mine(harding) ∧ Located(harding, newmexico))",
      "perplexity": 1.320648193359375,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedAt(x, y)",
        "Mine(x)"
      ],
      "fol_consts": [
        "new_mexico",
        "texas",
        "picuris_mountains",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "(MountainRange(picuris_mountains) ∧ (LocatedAt(new_mexico, picuris_mountains) ⊕ LocatedAt(texas, picuris_mountains)))",
        "Visited(juan_de_onate, picuris_mountains)",
        "Donated(harding_pegmatite_mine)",
        "(Mine(picuris_mountains) ∧ Donated(harding_pegmatite_mine)) → ¬LocatedAt(new_mexico, harding_pegmatite_mine)"
      ],
      "fol_conc": "¬LocatedAt(new_mexico, harding_pegmatite_mine)",
      "perplexity": 2.258546829223633,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 357
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Piece(x)",
        "Write(x, y)",
        "LedBy(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Conductor(x)",
        "Musician(x)",
        "Composer(x)"
      ],
      "fol_consts": [
        "beethoven",
        "symphonyNo9",
        "viennaMusicSociety",
        "musicPiece"
      ],
      "fol_rules": [
        "Piece(symphonyNo9)",
        "∀x (Musician(x) → Write(x, musicPiece))",
        "Write(beethoven, symphonyNo9)",
        "Premiered(viennaMusicSociety, symphonyNo9)",
        "Orchestra(viennaMusicSociety)",
        "LedBy(beethoven, viennaMusicSociety)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ LedBy(x, y)))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": [
        1.2835453748703003,
        1.2054283618927002
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusic"
      ],
      "fol_rules": [
        "Music(symphony9)",
        "∀x (Music(x) → ∃y (Write(y, x)))",
        "Write(beethoven, symphony9)",
        "Premiered(viennamusic, symphony9)",
        "Orchestra(viennamusic)",
        "Lead(beethoven, viennamusic)",
        "∀x (Orchestra(x) → ∃y (Lead(y, x)))",
        "∀x (Orchestra(x) → Conductor(x))"
      ],
      "fol_conc": "Conductor(beethoven)",
      "perplexity": 1.188082218170166,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "PremieredBy(x, y)",
        "Orchestra(y)",
        "Lead(x, y)",
        "LedBy(x, y)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "MusicPiece(symphony no. 9)",
        "∀x (Write(x, y) ∧ MusicPiece(y))",
        "PremieredBy(vienna music society, symphony no. 9)",
        "Orchestra(vienna music society)",
        "Lead(beethoven, vienna music society)",
        "LedBy(x, y) → ∃z (Orchestra(z) ∧ Lead(z, x))"
      ],
      "fol_conc": "∀x ((Write(x, y) ∧ MusicPiece(y)) → Write(beethoven, y))",
      "perplexity": 1.6492294073104858,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony no. 9)"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 358
  },
  {
    "id": 116,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Windy is a great shooter.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Jump(x, y)",
        "Shooter(x)",
        "GreatShooter(x)",
        "Person(x)",
        "Class(x)",
        "CanJump(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael)",
        "∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z))",
        "Taller(peter, michael)",
        "∀x ∀y (Man(x) ∧ Block(x, y) → ¬Jump(y, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x, y) → Shooter(x))",
        "∀x (Person(x) → Man(x))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": [
        1.207323431968689,
        1.190347671508789
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Taller(x, y)",
        "Block(x, y)",
        "Shooting(x, y)",
        "Jump(x, y)",
        "Great(x)"
      ],
      "fol_consts": [
        "michael",
        "windy",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Man(x) ∧ ¬Taller(x, michael) → ¬Taller(x, michael))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ∀y (Man(x) ∧ Man(y) ∧ ¬Jump(y, x) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x, y) → Great(x))"
      ],
      "fol_conc": "Great(windy)",
      "perplexity": 1.1701533794403076,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Man(x)",
        "TallerThan(x, y)",
        "CanBlock(x, y)",
        "JumpWhenShooting(y)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "windy",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (TallerThan(x, y) → CanBlock(x, y))",
        "(Man(michael) ∧ ∀z (∃w (Person(w) ∧ Man(w) ∧ TallerThan(w, z))))",
        "¬(¬(TallerThan(y, x) ∧ TallerThan(x, z)) ∨ ∃u (Person(u) ∧ Man(u))) → TallerThan(y, z)",
        "(Man(peter) ∧ ∀z (∃w (Person(w) ∧ Man(w) ∧ TallerThan(w, z))))",
        "∀x ((CanBlock(michael, x) ∧ ¬JumpWhenShooting(x)) ∨ JumpWhenShooting(x))",
        "¬(CanBlock(michael, windy))",
        "(Man(y) ∧ Person(z) → (∃u (Person(u) ∧ Man(u))) ∨ ∃v (Person(v) ∧ Man(v)))",
        "∀x ((JumpWhenShooting(x) → GreatShooter(x)) ∧ ¬GreatShooter(windy))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": 1.800017237663269,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 359
  },
  {
    "id": 154,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHome(x)",
        "FullyStockedOffice(x)",
        "OwnDesktopMonitor(x)",
        "Tidy(x)",
        "VisitOfficeSupplyStore(x)",
        "BedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, desktopMonitor) → WorkAtHome(x))",
        "∀x (FullyStockedOffice(x) → Own(x, desktopMonitor))",
        "∀x (WorkAtHome(x) → Tidy(x))",
        "∀x (WorkAtHome(x) → VisitOfficeSupplyStore(x))",
        "∀x (Tidy(x) → ¬(BedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(BedLate(remy) ∧ WakeUpAfterNoon(remy)) ⊕ ¬(BedLate(remy) ∨ WakeUpAfterNoon(remy))"
      ],
      "fol_conc": "(FullyStockedOffice(remy) ∧ VisitOfficeSupplyStore(remy))",
      "perplexity": [
        1.086847186088562,
        1.1763561964035034
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Owns(x, y)",
        "Work(x)",
        "Home(x)",
        "Tidy(x)",
        "Late(x)",
        "Visit(x, y)",
        "Office(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Owns(x, y) → Work(x) ∧ Home(x))",
        "∀x (Office(x) → Owns(x, y))",
        "∀x (Work(x) ∧ Home(x) → Tidy(x))",
        "∀x (Work(x) ∧ Home(x) → Visit(x, y))",
        "∀x (Tidy(x) → ¬Late(x))",
        "(Late(x) ∧ Tidy(x)) ⊕ ¬(Late(x) ∨ Tidy(x))",
        "Late(x) ∧ Tidy(x) → ¬Visit(x, y)"
      ],
      "fol_conc": "Office(x) ∧ Visit(x, y)",
      "perplexity": 1.2143232822418213,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Owns(x, y)",
        "WorkRegularlyAndOftenAtHome(x)",
        "HasFullyStockedOffice(x)",
        "GoToBedLate(x)",
        "WakeUpEveryDayAfterNoon(x)",
        "SpentFreeTimeTidyingSpaces(x)",
        "VisitStoreRegulary(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Owns(x, y) → WorkRegularlyAndOftenAtHome(x))",
        "∀x (HasFullyStockedOffice(x) → Owns(x, y))",
        "∀x (WorkRegularlyAndOftenAtHome(x) → SpentFreeTimeTidyingSpaces(x))",
        "∀x (WorkRegularlyAndOftenAtHome(x) → VisitStoreRegulary(x))",
        "∀x ((SpentFreeTimeTidyingSpaces(x) ∧ GoToBedLate(x)) → ¬(WakeUpEveryDayAfterNoon(x)))",
        "(GoToBedLate(remy) ∧ WakeUpEveryDayAfterNoon(remy) ∧ SpentFreeTimeTidyingSpaces(remy)) ⊕ (¬(GoToBedLate(remy) ∨ WakeUpEveryDayAfterNoon(remy)) ∨ ¬SpentFreeTimeTidyingSpaces(remy))"
      ],
      "fol_conc": "(HasFullyStockedOffice(remy) ∧ VisitStoreRegulary(remy))",
      "perplexity": 1.4559520483016968,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 360
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "GrumpyPerson(x)",
        "AnimalLover(x)",
        "PetOwner(x)",
        "Owns(x, y)",
        "IsAPet(y)",
        "Be(x, y)",
        "And(p, q)",
        "Or(p, q)",
        "Not(p)",
        "Implication(p, q)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (PetOwner(x) → AnimalLover(x))",
        "PetOwner(tom)"
      ],
      "fol_conc": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))",
      "perplexity": [
        1.2260806560516357,
        1.07374906539917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x)",
        "Animal(y)",
        "Loves(x, y)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom",
        "pet"
      ],
      "fol_rules": [
        "¬(Nice(x, animal) ∧ Mean(x, animal))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "Animal(y) → (Loves(x, y) → Nice(x, y))",
        "Owns(x, y) → Loves(x, y)",
        "Owns(tom, pet)"
      ],
      "fol_conc": "¬Grumpy(tom) ∧ ¬Mean(tom, animal)",
      "perplexity": 1.3317378759384155,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "AnimalLover(x)",
        "OwnPet(x)"
      ],
      "fol_consts": [
        "tom",
        "grumpy"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃y (AnimalLover(y) ∧ MeanToAnimals(y))",
        "∀z (AnimalLover(z) → NiceToAnimals(z))",
        "OwnPet(tom)",
        "∀w ((OwnPet(w) → AnimalLover(w)))"
      ],
      "fol_conc": "¬MeanToAnimals(tom)",
      "perplexity": 1.5121904611587524,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 401
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x)",
        "DepositRequired(y)",
        "ManagedBuilding(z)",
        "SecurityDepositEqualToOneMonthsRent(w, z)",
        "MoreThanOneMonthsRent(w, z)",
        "Pet(v)",
        "Cat(u)",
        "OwnedBy(p, q)",
        "ApartmentInBuilding(r, s)",
        "MonthlyRent(t, x)",
        "WillRentIfConditionsMet(y, z, w)",
        "AllowedWithPet(a, b)",
        "SecurityDepositAtBuilding(c, d)",
        "MoreThan(e, f)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Allowed(x))",
        "∀y DepositRequired(ApartmentInBuilding(y, ManagedBuilding(z)))",
        "∀w ∀z ((SecurityDepositEqualToOneMonthsRent(w, z) ⊕ MoreThanOneMonthsRent(w, z)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "∃x MonthlyRent(ApartmentInBuilding(x, olive_garden), $2000)",
        "OwnedBy(tom, fluffy) ↔ WillRentIfConditionsMet(tom, ApartmentInBuilding(y, ManagedBuilding(z)), (AllowedWithPet(y, z)) ∧ (SecurityDepositAtBuilding(z, d) → d ≤ $1500))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "MoreThan(SecurityDepositAtBuilding(olive_garden, d), $2000)",
      "perplexity": [
        1.3528461456298828,
        1.0653351545333862
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y DepositRequired(ApartmentInBuilding(y, ManagedBuilding(z)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allows(x, y)",
        "Requires(y, z)",
        "Equal(z1, z2)",
        "More(z1, z2)",
        "Ownedby(x, y)",
        "Isa(x, y)",
        "Managedbuilding(x)",
        "Monthlyrent(x, y)",
        "Rentapartment(x, y, z)",
        "Securitydeposit(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "pets",
        "cats",
        "monthlyrent2000dollars",
        "securitydeposittomatolivgardendollar1500"
      ],
      "fol_rules": [
        "∃x ∃y (Pets(x) ∧ Managedbuilding(y) ∧ Allows(y, x))",
        "∀y (Managedbuilding(y) → Requires(y, z))",
        "Securitydeposit(y, z) → More(z1, z2) ⊕ Equal(z1, z2)",
        "Ownedby(fluffy, tom) ∧ Isa(cats, fluffy) ∧ Managedbuilding(olivegarden)",
        "Monthlyrent(olivegarden, monthlyrent2000dollars)",
        "Rentapartment(tom, olivegarden, securitydeposittomatolivgardendollar1500) → Allows(y, fluffy) ∧ (Securitydeposit(securitydeposittomatolivgardendollar1500))",
        "Morethan(monthlyrent2000dollars, securitydeposittomatolivgardendollar1500)"
      ],
      "fol_conc": "(Equal(securitydepositattheolivegarden, monthlyrent2000) ∨ More(securitydepositattheolivegarden, monthlyrent2000))",
      "perplexity": 1.572614073753357,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Securitydeposit/1, Securitydeposit/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Securitydeposit/1, Securitydeposit/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Allowed(x, y)",
        "RentApartmentIn(z, x)",
        "ManagedBuilding(y)",
        "RequiresDeposit(w, z, x, y)",
        "EqualToOrMore(a, b)",
        "IsPet(c)",
        "IsCat(d)",
        "MonthlyRentAt(e, f)",
        "WillRentIfAndOnlyIf(g, h, i, j)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(y) → Allowed(x, y))",
        "RequiresDeposit(a, b, c, d)",
        "EqualToOrMore(e, f) ⊕ EqualToOrMore(g, h)",
        "IsCat(i) ∧ IsPet(j) → (ManagedBuilding(k) → Allowed(l, m))",
        "IsCat(n) ∧ ManagedBuilding(o) → MonthlyRentAt(p, q)",
        "MonthlyRentAt(r, s)"
      ],
      "fol_conc": "(EqualToOrMore(t, u) ⊕ EqualToOrMore(v, w))",
      "perplexity": 2.1651153564453125,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 402
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "BritishSitcomSeries(x)",
        "StarringMembersOfPappy’s(y)",
        "MemberOfPappy’s(z)",
        "PilotedOnBBCThree(x, d)",
        "WorkingTitleUsedForBadults(\"The Secret Dude Society\")",
        "ScriptEditorForBadults(AndrewCollins)",
        "PilotOnBBCTwoOrThree(y, d)",
        "NoMemberStarredInShow(z, y)"
      ],
      "fol_consts": [
        "Badults",
        "\"The Secret Dude Society\"",
        "AndrewCollins",
        "July2013",
        "BBC Three",
        "Pappy's (group)"
      ],
      "fol_rules": [
        "BritishSitcomSeries(Badults)",
        "StarringMembersOfPappy’s(Badults)",
        "WorkingTitleUsedForBadults(\"The Secret Dude Society\")",
        "PilotedOnBBCThree(Badults, July2013)",
        "ScriptEditorForBadults(AndrewCollins)"
      ],
      "fol_conc": "∀z (MemberOfPappy’s(z) → ¬NoMemberStarredInShow(z, y)) where y is a show that piloted on BBC Two or BBC Three.",
      "perplexity": [
        1.3760546445846558,
        1.1380679607391357
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z (MemberOfPappy’s(z) → ¬NoMemberStarredInShow(z, y)) where y is a show that piloted on BBC Two or BBC Three."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "British(x)",
        "Sitcom(y)",
        "Starring(z, y)",
        "Member(w, z)",
        "Piloted(y, date, channel)"
      ],
      "fol_consts": [
        "badults",
        "bbc3",
        "july2013",
        "pappys",
        "andrewcollins"
      ],
      "fol_rules": [
        "Sitcom(badults)",
        "British(badults)",
        "Piloted(badults, july2013, bbc3)",
        "Starring(pappys, badults)",
        "Member(andrewcollins, pappys)"
      ],
      "fol_conc": "¬Exists(x) ∧ Member(y, pappys) ∧ Starring(z, y) ∧ Piloted(x, date, bbc2) ∨ Piloted(x, date, bbc3)",
      "perplexity": 1.4711874723434448,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ScriptEditorFor(x, y)",
        "StarringMembersOf(y, z)",
        "BritishSitcomSeries(x)",
        "ScriptEditorFor(a, b)",
        "StarringMembersOf(b, c)",
        "BritishSitcomSeries(d)"
      ],
      "fol_consts": [
        "badults",
        "pappy's",
        "bbc three",
        "bbc two",
        "pappy's"
      ],
      "fol_rules": [
        "∃x (BritishSitcomSeries(x) ∧ StarringMembersOf(x, y))",
        "∀x (BritishSitcomSeries(x) → ScriptEditorFor(a, x))",
        "ScriptEditorFor(b, c)",
        "StarringMembersOf(d, e)"
      ],
      "fol_conc": "¬(∃f ∃g ((BritishSitcomSeries(f) ∧ StarringMembersOf(f, g) ∧ (ScriptEditorFor(b, c) → ∀h (StarringMembersOf(d, h))))))",
      "perplexity": 2.548502206802368,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 403
  },
  {
    "id": 142,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromSimpsons(x))",
        "(FromSimpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "((Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊂ Ugly(ben)))",
      "perplexity": [
        1.060420036315918,
        1.0564504861831665
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊂ Ugly(ben)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Lovedbychildren(x)",
        "Fromsimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Lovedbychildren(x) → Funny(x))",
        "∀x (Fromsimpsons(x) → Lovedbychildren(x))",
        "∀x (Yellow(x) → Fromsimpsons(x))",
        "Fromsimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊕ Ugly(ben))",
      "perplexity": 1.1885144710540771,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromTheSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromTheSimpsons(x))",
        "(FromTheSimpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊕ Ugly(ben))",
      "perplexity": 1.0705052614212036,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 404
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "WorksInStudentJob(x)",
        "NeedsMoneyForTuition(x)",
        "OrdersTakeoutFrequently(x)",
        "EnjoysDiningHallMeals(x)",
        "IsPickyEater(x)",
        "SpendsTimeInCampusDiningHalls(x, y)"
      ],
      "fol_consts": [
        "mary",
        "eating_and_catching_up_with_friends"
      ],
      "fol_rules": [
        "∀x (WorksInStudentJob(x) → NeedsMoneyForTuition(x))",
        "∀x (OrdersTakeoutFrequently(x) → WorksInStudentJob(x))",
        "∀x (OrdersTakeoutFrequently(x) ⊕ EnjoysDiningHallMeals(x))",
        "∀x (EnjoysDiningHallMeals(x) → ¬IsPickyEater(x))",
        "∀x (EnjoysDiningHallMeals(x) → SpendsTimeInCampusDiningHalls(x, eating_and_catching_up_with_friends))",
        "(WorksInStudentJob(mary) ∧ NeedsMoneyForTuition(mary)) → ((NeedsMoneyForTuition(mary) → ¬IsPickyEater(mary)))"
      ],
      "fol_conc": "((EnjoysDiningHallMeals(mary) → ¬IsPickyEater(mary)) ⊕ ((IsPickyEater(mary) ∧ EnjoysDiningHallMeals(mary)) → SpendsTimeInCampusDiningHalls(mary, eating_and_catching_up_with_friends)))",
      "perplexity": [
        1.2186000347137451,
        1.0599137544631958
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Works(x, y)",
        "Need(x, y)",
        "Order(x, y)",
        "Enjoy(x, y)",
        "Picky(x)"
      ],
      "fol_consts": [
        "mary",
        "studentjobs",
        "collegetuition",
        "campusdininghalls",
        "friends"
      ],
      "fol_rules": [
        "∀x (Works(x, studentjobs) → Need(x, collegetuition))",
        "∀x ((Order(x, takeoutfrequentlyincampus) → Works(x, studentjobs)))",
        "∀x ((Enjoy(x, dininghallmealsandrecipes) ⊕ Order(x, takeoutfrequentlyincampus)))",
        "(Enjoy(mary, dininghallmealsandrecipes) → ¬Picky(mary))",
        "(Works(mary, studentjobs) ∧ Need(mary, collegetuition)) → ((Need(x, y) ⊕ Picky(x)))"
      ],
      "fol_conc": "(Enjoy(mary, dininghallmealsandrecipes) → (¬Picky(mary) ⊕ Spends(mary, lots, timeeatingcatchingupwithfriendsincampusdininghalls)))",
      "perplexity": 1.5905483961105347,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Work(x)",
        "NeedMoneyForTuition(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallMeals(x)",
        "PickyEater(x)"
      ],
      "fol_consts": [
        "mary",
        "mary",
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x, student jobs on campus) → NeedMoneyForTuition(x))",
        "∀x (OrderTakeoutFrequently(x) → Work(x, student jobs on campus))",
        "∀x ((OrderTakeoutFrequently(x) ⊕ EnjoyDiningHallMeals(x)))",
        "∀x (EnjoyDiningHallMeals(x) → ¬PickyEater(x))",
        "(Work(mary, student jobs on campus) ∧ NeedMoneyForTuition(mary)) → ((NeedMoneyForTuition(mary) ⊕ PickyEater(mary)))"
      ],
      "fol_conc": "((EnjoyDiningHallMeals(mary) → (¬PickyEater(mary) ∨ SpendTimeEatingWithFriends(mary))))",
      "perplexity": 1.3723564147949219,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 405
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "RioGrande(x)",
        "Ocellated(x)",
        "WildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃e Eastern(e) ∧ ∃o Osceola(o) ∧ ∃g Goulds(g) ∧ ∃m Merriams(m) ∧ ∃r RioGrande(r) ∧ ∃oc Ocellated(oc): There are six types of wild turkeys.",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom)",
        "WildTurkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": [
        1.099631667137146,
        1.0776468515396118
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃e Eastern(e) ∧ ∃o Osceola(o) ∧ ∃g Goulds(g) ∧ ∃m Merriams(m) ∧ ∃r RioGrande(r) ∧ ∃oc Ocellated(oc): There are six types of wild turkeys."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "Rio(x)",
        "Ocellated(x)",
        "Wild(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃a ∀b (Eastern(b) ⊕ Osceola(b) ⊕ Goulds(b) ⊕ Merriams(b) ⊕ Rio(b) ⊕ Ocellated(b))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriams(tom) ∨ Rio(tom))",
        "Wild(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 1.239723801612854,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EasternWildTurkey(x)",
        "OsceolaWildTurkey(x)",
        "GouldsWildTurkey(x)",
        "MerriamsWildTurkey(x)",
        "RioGrandeWildTurkey(x)",
        "OcellatedWildTurkey(x)",
        "IsNot(x, y)",
        "IsA(x, y)"
      ],
      "fol_consts": [
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom"
      ],
      "fol_rules": [
        "∃a (EasternWildTurkey(a)) ∧ ∃b (OsceolaWildTurkey(b)) ∧ ∃c (GouldsWildTurkey(c)) ∧ ∃d (MerriamsWildTurkey(d)) ∧ ∃e (RioGrandeWildTurkey(e)) ∧ ∃f (OcellatedWildTurkey(f))",
        "IsNot(tom, a) ∨ IsNot(tom, b)",
        "IsNot(tom, c) ∨ IsNot(tom, d) ∨ IsNot(tom, e)",
        "IsA(tom, g)"
      ],
      "fol_conc": "IsA(tom, f)",
      "perplexity": 1.3438472747802734,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 406
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayForTeam(x, y)",
        "Star(x)",
        "Player(x, y)",
        "BayernMunchenTeam(z)",
        "NoLongerPlaysFor(w, v)",
        "IsPlayerType(u, t)",
        "IsTeam(q)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y ((SoccerPlayer(x) ∧ IsTeam(y)) → (LeftTeam(x, y) → NoLongerPlaysFor(x, y)))",
        "NoLongerPlaysFor(robert_lewandowski, bayern_munchen)",
        "∀x ∀y ((SoccerPlayer(x) ∧ IsTeam(y)) → (NoLongerPlaysFor(x, y) → Star(x)))",
        "Star(robert_lewandowski)"
      ],
      "fol_conc": "Star(robert_lewandowski)",
      "perplexity": [
        1.362444281578064,
        1.084766149520874
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robertlewandowski",
        "bayernmunchen"
      ],
      "fol_rules": [
        "Striker(robertlewandowski)",
        "(∀x (Soccerplayer(x)) → Striker(x))",
        "Left(robertlewandowski, bayernmunchen)",
        "∀x ∀y (Playfor(x, y) ∧ Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Star(robertlewandowski)",
      "perplexity": 1.5290292501449585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robertLewandowski, bayernMunchen)",
        "∀x ∀y (SoccerPlayer(x) ∧ LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "¬SoccerPlayer(robertLewandowski)",
      "perplexity": 1.3128474950790405,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 407
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "Top10List(y)",
        "MadeByJapaneseCompany(y)",
        "SellsMoreThanOneMillionCopies(y)",
        "LegendOfZelda(x)"
      ],
      "fol_consts": [
        "japaneseGameCompany",
        "legendOfZelda"
      ],
      "fol_rules": [
        "Created(japaneseGameCompany, legendOfZelda): A Japanese game company created the game The Legend of Zelda.",
        "∀y (Top10List(y) → MadeByJapaneseCompany(y)): All games in the Top 10 list are made by Japanese game companies.",
        "∀z ((SellsMoreThanOneMillionCopies(z)) → Top10List(z)): If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "SellsMoreThanOneMillionCopies(legendOfZelda): The Legend of Zelda sold more than one million copies."
      ],
      "fol_conc": "¬Top10List(legendOfZelda): The Legend of Zelda is not in the Top 10 list.",
      "perplexity": [
        1.1664321422576904,
        1.0843391418457031
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Created(japaneseGameCompany, legendOfZelda): A Japanese game company created the game The Legend of Zelda."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(y)",
        "Game(z)",
        "Top10list(w)",
        "Madeby(u, v)",
        "Sells(a, b)",
        "Millioncopies(b)"
      ],
      "fol_consts": [
        "japancompany",
        "legendofzelda",
        "top10list",
        "game",
        "million"
      ],
      "fol_rules": [
        "∃x (Japanese(y) ∧ Gamecompany(y)) ∧ Created(x, y)",
        "∀z ((Game(z) ∧ Top10list(w)) → Madeby(u, v))",
        "(Sells(a, b) ∧ Millioncopies(b)) → (Top10list(v) ∧ Game(u))",
        "Created(japancompany, legendofzelda)",
        "Sells(legendofzelda, million)",
        "Millioncopies(million)"
      ],
      "fol_conc": "¬(Gamecompany(top10list) ∧ Top10list(legendofzelda))",
      "perplexity": 1.572829008102417,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "GameInTop10List(y)",
        "MadeByJapaneseCompany(z)",
        "SellsMoreThanOneMillionCopies(w)",
        "SellsMoreThanOneMillionCopies(w)"
      ],
      "fol_consts": [
        "legend of zelda",
        "japanese game company",
        "legend of zelda"
      ],
      "fol_rules": [
        "∃x (Created(x, y) ∧ GameInTop10List(y))",
        "∀z (MadeByJapaneseCompany(z) → ∃w (GameInTop10List(w)))",
        "∀u (SellsMoreThanOneMillionCopies(u) → GameInTop10List(u))",
        "SellsMoreThanOneMillionCopies(legend of zelda)"
      ],
      "fol_conc": "¬GameInTop10List(legend of zelda)",
      "perplexity": 1.4667295217514038,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 408
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Human(x)",
        "Platypus(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Human(humans) ∧ Teeth(humans)"
      ],
      "fol_conc": "Human(x) → Mammal(x)",
      "perplexity": [
        1.2550883293151855,
        1.1196902990341187
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Teeth(humans)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": 1.1480742692947388,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HasTeeth(x))",
        "¬HasTeeth(platypus)",
        "Mammal(platypus)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": 1.3321523666381836,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 409
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(y)",
        "LowSurvivalRate(z)",
        "MildFlu(mfl)",
        "ColorectalCancer(cc)"
      ],
      "fol_consts": [
        "cc",
        "bdc",
        "cholangiocarcinoma",
        "mfl"
      ],
      "fol_rules": [
        "DeadlyDisease(x) → LowSurvivalRate(x)",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(bdc)",
        "Cholangiocarcinoma(cholangiocarcinoma) ∧ (Cholangiocarcinoma(y) → BileDuctCancer(y))",
        "MildFlu(mfl) → ¬LowSurvivalRate(mfl)",
        "(ColorectalCancer(cc) → BileDuctCancer(cc)) ∧ LowSurvivalRate(bdc) → ColorectalCancer(cc) → BileDuctCancer(cc)"
      ],
      "fol_conc": "(ColorectalCancer(cc) ∧ BileDuctCancer(bdc)) ⊕ Cholangiocarcinoma(cholangiocarcinoma): If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then ColorectalCancer(cc) → (BileDuctCancer(bdc)) ∧ MildFlu(mfl).",
      "perplexity": [
        1.2670605182647705,
        1.0651354789733887
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(ColorectalCancer(cc) ∧ BileDuctCancer(bdc)) ⊕ Cholangiocarcinoma(cholangiocarcinoma): If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then ColorectalCancer(cc) → (BileDuctCancer(bdc)) ∧ MildFlu(mfl)."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Low(y)",
        "Severe(x, y)",
        "Cancer(z)",
        "Bile(w)",
        "Cholangio(u)"
      ],
      "fol_consts": [
        "colorectal",
        "mildflu",
        "bileductcancervalue",
        "chola1value",
        "chola2value"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → ∃y (Survival(x, y) ∧ Low(y)))",
        "∀z (Cancer(z) ∧ Severe(bileductcancervalue, z) → Deadly(z))",
        "Bile(bileductcancervalue)",
        "(Cholangio(chola1value) ⊕ Cholangio(chola2value))",
        "∀x (Mildflu(x) → Survival(x, high))",
        "(Colorectal(colorectal) ∧ Bile(bileductcancervalue) ∧ Low(y) ∧ Colorectal(colorectal) → (Bile(bileductcancervalue)))"
      ],
      "fol_conc": "(Colorectal(x) ⊕ Cholangio(x)) → (Bile(w) ∧ Mildflu(mildflu))",
      "perplexity": 1.5734707117080688,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)",
        "SurvivalRateIsLow(x)"
      ],
      "fol_consts": [
        "colorectalcancer"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateIsLow(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(colorectalcancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRateIsLow(x))",
        "((BileDuctCancer(colorectalcancer) ∧ SurvivalRateIsLow(colorectalcancer)) → ¬BileDuctCancer(colorectalcancer))"
      ],
      "fol_conc": "(BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer)) → (BileDuctCancer(colorectalcancer) ∧ MildFlu(colorectalcancer))",
      "perplexity": 1.2874609231948853,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 410
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseGameCompany(x)",
        "Top10List(y)",
        "MadeBy(y, z)",
        "SellsMoreThanOneMillionCopies(z)"
      ],
      "fol_consts": [
        "japaneseGameCompany",
        "legendOfZelda"
      ],
      "fol_rules": [
        "Created(japaneseGameCompany, legendOfZelda)",
        "Ωy (JapaneseGameCompany(x) → MadeBy(y, x)) → Top10List(y)",
        "SellsMoreThanOneMillionCopies(legendOfZelda) → Top10List(legendOfZelda)",
        "SellsMoreThanOneMillionCopies(legendOfZelda)"
      ],
      "fol_conc": "Top10List(legendOfZelda)",
      "perplexity": [
        1.3176381587982178,
        1.1206920146942139
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ωy (JapaneseGameCompany(x) → MadeBy(y, x)) → Top10List(y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Japanese(x)",
        "Game(y, x)",
        "Top10(z)",
        "Madeby(w, z, y)",
        "Sells(a, b)"
      ],
      "fol_consts": [
        "zelda",
        "company",
        "top10list"
      ],
      "fol_rules": [
        "∃x (Japanese(x) ∧ Game(zelda, x))",
        "∀z ((Top10(z) → ∃y ∃w (Game(y, w) ∧ Japanese(w))) ∧ Madeby(company, top10list, zelda))",
        "(Sells(zelda, morethanone) → Top10(zelda))"
      ],
      "fol_conc": "Top10(zelda)",
      "perplexity": 1.6389892101287842,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "InTop10List(y)",
        "MadeBy(y, z)",
        "SellsMoreThanOneMillionCopies(z)"
      ],
      "fol_consts": [
        "japanese game company",
        "legend of zelda"
      ],
      "fol_rules": [
        "Created(japanese game company, legend of zelda)",
        "∀x (InTop10List(x) → ∃y ((MadeBy(x, y)) ∧ (SellsMoreThanOneMillionCopies(y))) ⊕ MadeBy(japanese game company, legend of zelda))",
        "∀z (SellsMoreThanOneMillionCopies(legend of zelda) → InTop10List(legend of zelda))"
      ],
      "fol_conc": "InTop10List(legend of zelda)",
      "perplexity": 1.4771926403045654,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 411
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "LastOlympicGames(y)",
        "InCity(z, w)",
        "WonMostMedalsIn(a, b)",
        "Country(c)"
      ],
      "fol_consts": [
        "olympic_games",
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "∀x (OlympicGames(x) → SportingEvent(x))",
        "LastOlympicGames(tokyo)",
        "InCity(olympic_games, tokyo)",
        "∃c (Country(united_states) ∧ WonMostMedalsIn(united_states, olympic_games))"
      ],
      "fol_conc": "∀c (LastOlympicGames(tokyo) → Country(united_states) ∧ WonMostMedalsIn(united_states, tokyo))",
      "perplexity": [
        1.4983280897140503,
        1.0761215686798096
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x, y)",
        "Last(y)",
        "Won(z, x)",
        "Medalist(u, v)"
      ],
      "fol_consts": [
        "olympic",
        "bg",
        "us",
        "tokyo",
        "medals"
      ],
      "fol_rules": [
        "Sporting(olympic)",
        "Olympic(bg, tokyo) ∧ Last(tokyo)",
        "Won(us, medals) ∧ Medalist(tokyo, us)"
      ],
      "fol_conc": "Medalist(last, us)",
      "perplexity": 1.7500580549240112,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Olympic/2, Olympic/0, Last/1, Last/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Olympic/2, Olympic/0, Last/1, Last/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "Last(y, x)",
        "HeldIn(z, y)",
        "WonMostMedalsIn(a, b)"
      ],
      "fol_consts": [
        "olympic",
        "tokyo",
        "united states"
      ],
      "fol_rules": [
        "OlympicGames(olympic) ∧ SportingEvent(olympic)",
        "Last(tokyo, olympic)",
        "WonMostMedalsIn(united states, tokyo)"
      ],
      "fol_conc": "WonMostMedalsIn(united states, olympic)",
      "perplexity": 1.387575387954712,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 412
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "FavoriteAnimal(Max, x)",
        "FromAustralia(x)",
        "AnimalFromContinent(x, y)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LovesToSleep(x)",
        "Koala(y)",
        "NotQuokka(y)"
      ],
      "fol_consts": [
        "Max",
        "Australia"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → FavoriteAnimal(Max, x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → AnimalFromContinent(x, Australia))",
        "∀x (FavoriteAnimal(Max, x) → VeryFluffy(x))",
        "∀x (FavoriteAnimal(Max, x) → LovesToSleep(x))",
        "∀y ((Koala(y) ∧ VeryFluffy(y)) → NotQuokka(y))"
      ],
      "fol_conc": "∃y (Koala(y) ∧ LovesToSleep(y))",
      "perplexity": [
        1.2356595993041992,
        1.1217081546783447
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleepy(x)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "animal",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Animal(x) → (Loved(y, x) → Favorite(max, y)))",
        "∀x ((From(x, australia) ∧ Animal(x)) → Loved(tourist, x))",
        "∀x ((Quokka(x) → From(x, australia)))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleepy(x))",
        "(Koala(k) ∧ Fluffy(k)) → ¬Quokka(k)"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 1.3223050832748413,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Koala/1, Koala/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Koala/1, Koala/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimal(y, x)",
        "FromAustralia(z)",
        "Is(w, z)",
        "VeryFluffy(u)",
        "LoveToSleep(v)"
      ],
      "fol_consts": [
        "animals",
        "tourists",
        "Max's favorite animals",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedBy(x, tourists) → FavoriteAnimal(x, Max's favorite animals))",
        "∀z (FromAustralia(z) ⊕ LovedBy(animals, tourists))",
        "∀w (Is(quokka, w) → FromAustralia(animals))",
        "FavoriteAnimal(Max's favorite animals, x) ∧ VeryFluffy(x)",
        "(LovedBy(koala, Max's favorite animals) ⊕ LoveToSleep(koala))"
      ],
      "fol_conc": "LoveToSleep(koala)",
      "perplexity": 1.7339708805084229,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 413
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOfBakedByMelissa(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))",
        "DriedThaiChilies(dried_thai_chilies)",
        "(Spicy(dried_thai_chilies) ∨ Bakery(dried_thai_chilies)) → (Hotpot(dried_thai_chilies) ∨ Spicy(dried_thai_chilies))"
      ],
      "fol_conc": "ProductOfBakedByMelissa(dried_thai_chilies)",
      "perplexity": [
        1.1512373685836792,
        1.0575222969055176
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "baked",
        "melissa",
        "dried"
      ],
      "fol_rules": [
        "¬Bakery(x) ∧ Spicy(x)",
        "Cupcake(x) → Bakery(x)",
        "Hotpot(x) → Spicy(x)",
        "Product(baked, melissa, x) → Cupcake(x)",
        "Spicy(dried) ∨ Bakery(dried) → Hotpot(dried) ∨ Spicy(dried)"
      ],
      "fol_conc": "Product(baked, melissa, dried)",
      "perplexity": 1.3038133382797241,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬(∃x (Bakery(x) ∧ Spicy(x)))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(baked by melissa, x) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "ProductOf(baked by melissa, dried thai chilies)",
      "perplexity": 1.143490195274353,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 414
  },
  {
    "id": 199,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "No one playing for Nautico is Brazilian.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "Player(x)",
        "LoanedOutTo(x, y)",
        "BrazillianFootballer(x)",
        "PlaysFor(x, y)",
        "Club(y)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailtonSilva",
        "braga",
        "nautico",
        "fluminense",
        "],"
      ],
      "fol_rules": [
        "Born(ailtonSiliva,1995): Ailton Silva was born in 1995.",
        "KnownAs(ailtonSilva,\\\"Atilon\\\"): Ailton Silva is commonly known as Atilon.",
        "Player(\\\"Atlon\\\") \\wedge LoanedOutTo(\\\"Atlon\\\",braga): Ailton is a football player who was loaned out to Braga.",
        "BrazillianFootballer(ailtonSilva) ∧ PlaysFor(ailtonSiliva,nautico): Ailton Silva is a Brazilian footballer who plays for Nautico.",
        "Club(nautico) \\wedge Club(braga): Nautico and Braga are football clubs.",
        "Club(fluminense): Fluminesse is a football club."
      ],
      "fol_conc": "\neg\\exists x (PlaysFor(x, nautico) ∧ Brazilian(x))",
      "perplexity": [
        1.199383020401001,
        1.6684678792953491
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Born(ailtonSiliva,1995): Ailton Silva was born in 1995."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Commonlyknownas(x, y)",
        "Footballplayer(x)",
        "Loanedoutto(x, y)",
        "Playsfor(x, y)",
        "Isafootballerfrom(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "nautico",
        "braga",
        "fluminense"
      ],
      "fol_rules": [
        "Born(silva, xtuples)",
        "Commonlyknownas(ailton, silva)",
        "Footballplayer(x) ∧ Loanedoutto(x, braga)",
        "Playsfor(x, nautico)",
        "Isafootballerfrom(silva, brazil)"
      ],
      "fol_conc": "¬Exist(y) ∨ (Born(y, brazil))",
      "perplexity": 1.8936891555786133,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "KnownAs(x, y)",
        "Born(x, y)",
        "FootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "IsA(x, y)",
        "Club(z)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "brazillian",
        "1995"
      ],
      "fol_rules": [
        "KnownAs(silva, ailton)",
        "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
        "IsA(silva, brazillian) ∧ PlaysFor(silva, nautico)",
        "Club(nautico) ∧ Club(braga)",
        "Club(ailton)"
      ],
      "fol_conc": "¬((PlaysFor(x, nautico)) → IsA(x, brazillian))",
      "perplexity": 1.530170202255249,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 415
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "ComposerWritesMusicPiece(y, z)",
        "Premiers(w, x)",
        "Orchestra(v)",
        "Leads(u, v)",
        "Conductor(t)"
      ],
      "fol_consts": [
        "symphony_no_9",
        "beethoven",
        "vienna_music_society"
      ],
      "fol_rules": [
        "MusicPiece(symphony_no_9): Symphony No. 9 is a music piece.",
        "∀y ∃z (ComposerWritesMusicPiece(y, z)): Composers write music pieces.",
        "ComposerWritesMusicPiece(beethoven, symphony_no_9): Beethoven wrote Symphony No. 9.",
        "Premiers(vienna_music_society, symphony_no_9): Vienna Music Society premiered Symphony No. 9.",
        "Orchestra(vienna_music_society): Vienna Music Society is an orchestra.",
        "Leads(beethoven, vienna_music_society): Beethoven leads the Vienna Music Society.",
        "∀u ∃v (Leads(u, v) → Orchestra(v)): Orchestras are led by conductors.",
        "(Orchestra(w) → Premiers(w, x)) & MusicPiece(x): Some orchestras premiered music pieces."
      ],
      "fol_conc": "∃v ∃y (MusicPiece(y) ∧ Orchestra(v) ∧ Premiers(v, y)): Some orchestras premiered music pieces.",
      "perplexity": [
        1.1702264547348022,
        1.07967209815979
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony_no_9): Symphony No. 9 is a music piece."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Musicpiece(x)",
        "Composerwrites(y, x)",
        "Beethovenwrote(z)",
        "Premieredbyorchestra(a, b)",
        "Orchestra(c)",
        "Leadsorchestra(d, e)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusicsociety"
      ],
      "fol_rules": [
        "Musicpiece(symphony9)",
        "∀x (Composerwrites(y, x))",
        "Beethovenwrote(symphony9) → Composerwrites(beethoven, symphony9)",
        "Premieredbyorchestra(viennamusicsociety, symphony9)",
        "Orchestra(viennamusicsociety)",
        "Leadsorchestra(beethoven, viennamusicsociety) → Composerwrites(beethoven, symphony9)",
        "∀x (Orchestra(x))"
      ],
      "fol_conc": "∃z (Musicpiece(z) ∧ Premieredbyorchestra(viennamusicsociety, z))",
      "perplexity": 1.5666359663009644,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "ComposerWrites(y, x)",
        "Wrote(z, y, x)",
        "OrchestraPremiered(w, x)",
        "OrchestraPremiered(v, z, w, x)",
        "Leads(t, u, v)",
        "MusicPiece(p)",
        "ComposerWrites(c, p)"
      ],
      "fol_consts": [
        "symphony no. 9",
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "MusicPiece(symphony no. 9)",
        "∀x (ComposerWrites(y, x))",
        "Wrote(beethoven, symphony no. 9)",
        "OrchestraPremiered(vienna music society, symphony no. 9)",
        "OrchestraPremiered(w, x)",
        "Leads(t, u, v)"
      ],
      "fol_conc": "∃x (MusicPiece(p) ∧ ComposerWrites(c, p))",
      "perplexity": 1.9055601358413696,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony no. 9)"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 416
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "e"
      ],
      "fol_rules": [
        "(∀x ((Event(x) → Happy(x)) ⊕ Sad(x)))",
        "(∃e (Happy(e) ∧ Event(e)))"
      ],
      "fol_conc": "¬∃e (Happy(e)) → ∀x ((Event(x) → Sad(x)))",
      "perplexity": [
        1.397430658340454,
        1.2223658561706543
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "e1",
        "e2"
      ],
      "fol_rules": [
        "∀x (Event(x) → (Happy(x) ⊕ Sad(x)))",
        "¬(Happy(e1))"
      ],
      "fol_conc": "∀x (Event(x) → Sad(x))",
      "perplexity": 2.5677337646484375,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "event"
      ],
      "fol_rules": [
        "∀x (Happy(x) ⊕ Sad(x))",
        "∃x (Happy(x))"
      ],
      "fol_conc": "∀y (Sad(y))",
      "perplexity": 1.4209630489349365,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 417
  },
  {
    "id": 137,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "If something is a household appliance, it sucks.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sucks(x)",
        "Vacuum(x)",
        "Plunger(x)",
        "Duster(y)",
        "HouseholdAppliance(z)"
      ],
      "fol_consts": [
        "Space",
        ""
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Sucks(x))",
        "∀x (Vacuum(x) → Sucks(x))",
        "∀x (Vampire(x) → Sucks(x))",
        "(Space = Vacuum)",
        "(∃y (Duster(y) ∧ HouseholdAppliance(y))) ∧ (¬Sucks(y))"
      ],
      "fol_conc": "∀z (HouseholdAppliance(z) → Sucks(z))",
      "perplexity": [
        1.1574909687042236,
        1.2089123725891113
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Space = Vacuum)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Plunger(x)",
        "Duster(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Suck(x))",
        "∀x (Vacuum(x) → Suck(x))",
        "∀x (Vampire(x) → Suck(x))",
        "Vacuum(space)",
        "(Duster(x) ∧ Household(x)) → ¬Suck(x)"
      ],
      "fol_conc": "∀y ((Household(y) ∨ Duster(y)) → Suck(y))",
      "perplexity": 1.4272080659866333,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "IsVacuum(x)",
        "IsVacuum(y)"
      ],
      "fol_consts": [
        "plunger",
        "vaccum",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "IsVacuum(space)",
        "IsVacuum(x) ∧ IsVacuum(y) → Suck(x)"
      ],
      "fol_conc": "IsVacuum(duster) ∨ IsVacuum(householdappliance)",
      "perplexity": 2.324612617492676,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 418
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesAid(z, w)",
        "HasHardship(w)",
        "SingleParentFamily(v)",
        "OutOfWork(u, v)",
        "GREApplicant(t)",
        "ProvesHardship(w, x)"
      ],
      "fol_consts": [
        "tom",
        "gre_test",
        "ets",
        "usd_205"
      ],
      "fol_rules": [
        "Costs(gre_test, usd_205): It costs US $205 to take the GRE test.",
        "ProvidesAid(ets, w) → HasHardship(w): ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "∀x (HasHardship(x) → DifficultyCausedByMoneyOrResources(x)): Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "SingleParentFamily(tom): Tom lives in a single-parent family.",
        "OutOfWork(dad, tom): His dad has been out of work for more than a year.",
        "GREApplicant(tom): Tom is a GRE applicant (implicit from the context).",
        "∀x ((SingleParentFamily(y) ∧ OutOfWork(z, y)) → HasHardship(y)): If someone lives in a single-parent family and their parent has been out of work for more than a year, they have economic hardship.",
        "HasHardship(tom): From rules 4, 5, and 7, Tom has economic hardship.",
        "ProvidesAid(ets, tom) → ProvesHardship(tom, ets): ETS provides financial aid to those GRE applicants who prove economic hardship (rule 2).",
        "ProvesHardship(tom, ets): From rule 8 and the context that Tom is a GRE applicant, he can prove his economic hardship to ETS."
      ],
      "fol_conc": "ProvidesAid(ets, tom)",
      "perplexity": [
        1.268706202507019,
        1.053062915802002
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Costs(gre_test, usd_205): It costs US $205 to take the GRE test."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provides(z, x, y)",
        "Financialaid(z, x)",
        "Economichardship(x, y)",
        "Livein(x, y)",
        "Unemployedfor(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "usd205",
        "singleparentfamily",
        "morethanyear",
        "difficultycausedbylackingmoneyandresources"
      ],
      "fol_rules": [
        "Cost(gre, usd205)",
        "Provides(ets, gre, x) → Financialaid(ets, x)",
        "Economichardship(x, y) ↔ Difficultycausedbylackingmoneyandresources(x, y)",
        "Livein(tom, singleparentfamily)"
      ],
      "fol_conc": "Financialaid(ets, tom)",
      "perplexity": 1.5844446420669556,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cost(x, y)",
        "ProvideFinancialAid(z, x)",
        "ProvideFinancialAid(z, y)",
        "EconomicHardship(x)",
        "LiveInSingleParentFamily(x)",
        "OutOfWork(y)"
      ],
      "fol_consts": [
        "tom",
        "$205",
        "ETS"
      ],
      "fol_rules": [
        "Cost(GRE test, $205)",
        "ProvideFinancialAid(ETS, x) ↔ (ProvideFinancialAid(x, ETS) ∧ EconomicHardship(x))",
        "EconomicHardship(x) → LiveInSingleParentFamily(x) ⊕ OutOfWork(y)",
        "(LiveInSingleParentFamily(tom) ∨ OutOfWork(d))"
      ],
      "fol_conc": "ProvideFinancialAid(ETS, tom)",
      "perplexity": 1.7800887823104858,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 419
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "BornInYear(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazilian(x)",
        "PlaysFor(x, y)",
        "FootballClub(z)",
        "Team(u)",
        "Includes(a, b)"
      ],
      "fol_consts": [
        "aitlon_silva",
        "braga",
        "fluminense",
        "nautico",
        "brazilian",
        "1995",
        "aitlon",
        "football_player"
      ],
      "fol_rules": [
        "Person(aitlon_silva) ∧ BornInYear(aitlon_silva, 1995) ∧ KnownAs(aitlon_silva, aitlon)",
        "FootballPlayer(aitlon) ∧ LoanedOutTo(aitlon, braga)",
        "Person(aitlon_silva) ∧ Brazilian(aitlon_silva) ∧ PlaysFor(aitlon_silva, nautico)",
        "FootballClub(braga) ∧ FootballClub(nautico) ∧ Includes([braga, nautico], football_clubs)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "¬∃y (LoanedOutTo(aitlon, y)) ∧ FootballClub(y)",
      "perplexity": [
        1.2822799682617188,
        1.0382438898086548
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(z)"
      ],
      "fol_consts": [
        "aitlon",
        "silva",
        "nautico",
        "braga",
        "fluminense",
        "brazilian",
        "footballplayer",
        "footballclub",
        "loanedoutto",
        "playfor",
        "bornin",
        "commonlyknownas"
      ],
      "fol_rules": [
        "Born(silva, xtu1995)",
        "Known(aitlon, silva)",
        "Footballer(aitlon)",
        "Loaned(footballplayer, loanedoutto)",
        "Plays(brazilian, playsfor)",
        "Club(nautico)",
        "Club(braga)",
        "Club(fluminense)"
      ],
      "fol_conc": "(¬Loaned(x))",
      "perplexity": 2.015777587890625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loaned/2, Loaned/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loaned/2, Loaned/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "PlaysFor(x, y)",
        "LoanedTo(x, y)",
        "IsFootballClub(z)"
      ],
      "fol_consts": [
        "aitlon",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "Born(aitlon, 1995)",
        "KnownAs(aitlon, ailton silva)",
        "PlaysFor(aitlon, braga) ∧ LoanedTo(aitlon, braga)",
        "IsFootballClub(nautico)",
        "IsFootballClub(braga)",
        "LoanedTo(x, y) → IsFootballClub(y)"
      ],
      "fol_conc": "¬LoanedTo(aitlon, z)",
      "perplexity": 1.767911672592163,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 420
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "GrumpyPerson(x)",
        "AnimalLover(x)",
        "PetOwner(x)",
        "Owns(x, y)",
        "IsAPet(y)",
        "Be(x, y)",
        "And(p, q)",
        "Or(p, q)",
        "Not(p)",
        "Implication(p, q)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (PetOwner(x) → AnimalLover(x))",
        "PetOwner(tom)"
      ],
      "fol_conc": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))",
      "perplexity": [
        1.2260806560516357,
        1.07374906539917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x)",
        "Animal(y)",
        "Loves(x, y)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom",
        "pet"
      ],
      "fol_rules": [
        "¬(Nice(x, animal) ∧ Mean(x, animal))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "Animal(y) → (Loves(x, y) → Nice(x, y))",
        "Owns(x, y) → Loves(x, y)",
        "Owns(tom, pet)"
      ],
      "fol_conc": "¬Grumpy(tom) ∧ ¬Mean(tom, animal)",
      "perplexity": 1.3317378759384155,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "AnimalLover(x)",
        "OwnPet(x)"
      ],
      "fol_consts": [
        "tom",
        "grumpy"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃y (AnimalLover(y) ∧ MeanToAnimals(y))",
        "∀z (AnimalLover(z) → NiceToAnimals(z))",
        "OwnPet(tom)",
        "∀w ((OwnPet(w) → AnimalLover(w)))"
      ],
      "fol_conc": "¬MeanToAnimals(tom)",
      "perplexity": 1.5121904611587524,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 401
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x)",
        "DepositRequired(y)",
        "ManagedBuilding(z)",
        "SecurityDepositEqualToOneMonthsRent(w, z)",
        "MoreThanOneMonthsRent(w, z)",
        "Pet(v)",
        "Cat(u)",
        "OwnedBy(p, q)",
        "ApartmentInBuilding(r, s)",
        "MonthlyRent(t, x)",
        "WillRentIfConditionsMet(y, z, w)",
        "AllowedWithPet(a, b)",
        "SecurityDepositAtBuilding(c, d)",
        "MoreThan(e, f)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Allowed(x))",
        "∀y DepositRequired(ApartmentInBuilding(y, ManagedBuilding(z)))",
        "∀w ∀z ((SecurityDepositEqualToOneMonthsRent(w, z) ⊕ MoreThanOneMonthsRent(w, z)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "∃x MonthlyRent(ApartmentInBuilding(x, olive_garden), $2000)",
        "OwnedBy(tom, fluffy) ↔ WillRentIfConditionsMet(tom, ApartmentInBuilding(y, ManagedBuilding(z)), (AllowedWithPet(y, z)) ∧ (SecurityDepositAtBuilding(z, d) → d ≤ $1500))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "MoreThan(SecurityDepositAtBuilding(olive_garden, d), $2000)",
      "perplexity": [
        1.3528461456298828,
        1.0653351545333862
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y DepositRequired(ApartmentInBuilding(y, ManagedBuilding(z)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allows(x, y)",
        "Requires(y, z)",
        "Equal(z1, z2)",
        "More(z1, z2)",
        "Ownedby(x, y)",
        "Isa(x, y)",
        "Managedbuilding(x)",
        "Monthlyrent(x, y)",
        "Rentapartment(x, y, z)",
        "Securitydeposit(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "pets",
        "cats",
        "monthlyrent2000dollars",
        "securitydeposittomatolivgardendollar1500"
      ],
      "fol_rules": [
        "∃x ∃y (Pets(x) ∧ Managedbuilding(y) ∧ Allows(y, x))",
        "∀y (Managedbuilding(y) → Requires(y, z))",
        "Securitydeposit(y, z) → More(z1, z2) ⊕ Equal(z1, z2)",
        "Ownedby(fluffy, tom) ∧ Isa(cats, fluffy) ∧ Managedbuilding(olivegarden)",
        "Monthlyrent(olivegarden, monthlyrent2000dollars)",
        "Rentapartment(tom, olivegarden, securitydeposittomatolivgardendollar1500) → Allows(y, fluffy) ∧ (Securitydeposit(securitydeposittomatolivgardendollar1500))",
        "Morethan(monthlyrent2000dollars, securitydeposittomatolivgardendollar1500)"
      ],
      "fol_conc": "(Equal(securitydepositattheolivegarden, monthlyrent2000) ∨ More(securitydepositattheolivegarden, monthlyrent2000))",
      "perplexity": 1.572614073753357,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Securitydeposit/1, Securitydeposit/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Securitydeposit/1, Securitydeposit/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Allowed(x, y)",
        "RentApartmentIn(z, x)",
        "ManagedBuilding(y)",
        "RequiresDeposit(w, z, x, y)",
        "EqualToOrMore(a, b)",
        "IsPet(c)",
        "IsCat(d)",
        "MonthlyRentAt(e, f)",
        "WillRentIfAndOnlyIf(g, h, i, j)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(y) → Allowed(x, y))",
        "RequiresDeposit(a, b, c, d)",
        "EqualToOrMore(e, f) ⊕ EqualToOrMore(g, h)",
        "IsCat(i) ∧ IsPet(j) → (ManagedBuilding(k) → Allowed(l, m))",
        "IsCat(n) ∧ ManagedBuilding(o) → MonthlyRentAt(p, q)",
        "MonthlyRentAt(r, s)"
      ],
      "fol_conc": "(EqualToOrMore(t, u) ⊕ EqualToOrMore(v, w))",
      "perplexity": 2.1651153564453125,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 402
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "BritishSitcomSeries(x)",
        "StarringMembersOfPappy’s(y)",
        "MemberOfPappy’s(z)",
        "PilotedOnBBCThree(x, d)",
        "WorkingTitleUsedForBadults(\"The Secret Dude Society\")",
        "ScriptEditorForBadults(AndrewCollins)",
        "PilotOnBBCTwoOrThree(y, d)",
        "NoMemberStarredInShow(z, y)"
      ],
      "fol_consts": [
        "Badults",
        "\"The Secret Dude Society\"",
        "AndrewCollins",
        "July2013",
        "BBC Three",
        "Pappy's (group)"
      ],
      "fol_rules": [
        "BritishSitcomSeries(Badults)",
        "StarringMembersOfPappy’s(Badults)",
        "WorkingTitleUsedForBadults(\"The Secret Dude Society\")",
        "PilotedOnBBCThree(Badults, July2013)",
        "ScriptEditorForBadults(AndrewCollins)"
      ],
      "fol_conc": "∀z (MemberOfPappy’s(z) → ¬NoMemberStarredInShow(z, y)) where y is a show that piloted on BBC Two or BBC Three.",
      "perplexity": [
        1.3760546445846558,
        1.1380679607391357
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z (MemberOfPappy’s(z) → ¬NoMemberStarredInShow(z, y)) where y is a show that piloted on BBC Two or BBC Three."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "British(x)",
        "Sitcom(y)",
        "Starring(z, y)",
        "Member(w, z)",
        "Piloted(y, date, channel)"
      ],
      "fol_consts": [
        "badults",
        "bbc3",
        "july2013",
        "pappys",
        "andrewcollins"
      ],
      "fol_rules": [
        "Sitcom(badults)",
        "British(badults)",
        "Piloted(badults, july2013, bbc3)",
        "Starring(pappys, badults)",
        "Member(andrewcollins, pappys)"
      ],
      "fol_conc": "¬Exists(x) ∧ Member(y, pappys) ∧ Starring(z, y) ∧ Piloted(x, date, bbc2) ∨ Piloted(x, date, bbc3)",
      "perplexity": 1.4711874723434448,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ScriptEditorFor(x, y)",
        "StarringMembersOf(y, z)",
        "BritishSitcomSeries(x)",
        "ScriptEditorFor(a, b)",
        "StarringMembersOf(b, c)",
        "BritishSitcomSeries(d)"
      ],
      "fol_consts": [
        "badults",
        "pappy's",
        "bbc three",
        "bbc two",
        "pappy's"
      ],
      "fol_rules": [
        "∃x (BritishSitcomSeries(x) ∧ StarringMembersOf(x, y))",
        "∀x (BritishSitcomSeries(x) → ScriptEditorFor(a, x))",
        "ScriptEditorFor(b, c)",
        "StarringMembersOf(d, e)"
      ],
      "fol_conc": "¬(∃f ∃g ((BritishSitcomSeries(f) ∧ StarringMembersOf(f, g) ∧ (ScriptEditorFor(b, c) → ∀h (StarringMembersOf(d, h))))))",
      "perplexity": 2.548502206802368,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 403
  },
  {
    "id": 142,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromSimpsons(x))",
        "(FromSimpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "((Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊂ Ugly(ben)))",
      "perplexity": [
        1.060420036315918,
        1.0564504861831665
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊂ Ugly(ben)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Lovedbychildren(x)",
        "Fromsimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Lovedbychildren(x) → Funny(x))",
        "∀x (Fromsimpsons(x) → Lovedbychildren(x))",
        "∀x (Yellow(x) → Fromsimpsons(x))",
        "Fromsimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊕ Ugly(ben))",
      "perplexity": 1.1885144710540771,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromTheSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromTheSimpsons(x))",
        "(FromTheSimpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊕ Ugly(ben))",
      "perplexity": 1.0705052614212036,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 404
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "WorksInStudentJob(x)",
        "NeedsMoneyForTuition(x)",
        "OrdersTakeoutFrequently(x)",
        "EnjoysDiningHallMeals(x)",
        "IsPickyEater(x)",
        "SpendsTimeInCampusDiningHalls(x, y)"
      ],
      "fol_consts": [
        "mary",
        "eating_and_catching_up_with_friends"
      ],
      "fol_rules": [
        "∀x (WorksInStudentJob(x) → NeedsMoneyForTuition(x))",
        "∀x (OrdersTakeoutFrequently(x) → WorksInStudentJob(x))",
        "∀x (OrdersTakeoutFrequently(x) ⊕ EnjoysDiningHallMeals(x))",
        "∀x (EnjoysDiningHallMeals(x) → ¬IsPickyEater(x))",
        "∀x (EnjoysDiningHallMeals(x) → SpendsTimeInCampusDiningHalls(x, eating_and_catching_up_with_friends))",
        "(WorksInStudentJob(mary) ∧ NeedsMoneyForTuition(mary)) → ((NeedsMoneyForTuition(mary) → ¬IsPickyEater(mary)))"
      ],
      "fol_conc": "((EnjoysDiningHallMeals(mary) → ¬IsPickyEater(mary)) ⊕ ((IsPickyEater(mary) ∧ EnjoysDiningHallMeals(mary)) → SpendsTimeInCampusDiningHalls(mary, eating_and_catching_up_with_friends)))",
      "perplexity": [
        1.2186000347137451,
        1.0599137544631958
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Works(x, y)",
        "Need(x, y)",
        "Order(x, y)",
        "Enjoy(x, y)",
        "Picky(x)"
      ],
      "fol_consts": [
        "mary",
        "studentjobs",
        "collegetuition",
        "campusdininghalls",
        "friends"
      ],
      "fol_rules": [
        "∀x (Works(x, studentjobs) → Need(x, collegetuition))",
        "∀x ((Order(x, takeoutfrequentlyincampus) → Works(x, studentjobs)))",
        "∀x ((Enjoy(x, dininghallmealsandrecipes) ⊕ Order(x, takeoutfrequentlyincampus)))",
        "(Enjoy(mary, dininghallmealsandrecipes) → ¬Picky(mary))",
        "(Works(mary, studentjobs) ∧ Need(mary, collegetuition)) → ((Need(x, y) ⊕ Picky(x)))"
      ],
      "fol_conc": "(Enjoy(mary, dininghallmealsandrecipes) → (¬Picky(mary) ⊕ Spends(mary, lots, timeeatingcatchingupwithfriendsincampusdininghalls)))",
      "perplexity": 1.5905483961105347,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Work(x)",
        "NeedMoneyForTuition(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallMeals(x)",
        "PickyEater(x)"
      ],
      "fol_consts": [
        "mary",
        "mary",
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x, student jobs on campus) → NeedMoneyForTuition(x))",
        "∀x (OrderTakeoutFrequently(x) → Work(x, student jobs on campus))",
        "∀x ((OrderTakeoutFrequently(x) ⊕ EnjoyDiningHallMeals(x)))",
        "∀x (EnjoyDiningHallMeals(x) → ¬PickyEater(x))",
        "(Work(mary, student jobs on campus) ∧ NeedMoneyForTuition(mary)) → ((NeedMoneyForTuition(mary) ⊕ PickyEater(mary)))"
      ],
      "fol_conc": "((EnjoyDiningHallMeals(mary) → (¬PickyEater(mary) ∨ SpendTimeEatingWithFriends(mary))))",
      "perplexity": 1.3723564147949219,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 405
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "RioGrande(x)",
        "Ocellated(x)",
        "WildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃e Eastern(e) ∧ ∃o Osceola(o) ∧ ∃g Goulds(g) ∧ ∃m Merriams(m) ∧ ∃r RioGrande(r) ∧ ∃oc Ocellated(oc): There are six types of wild turkeys.",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom)",
        "WildTurkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": [
        1.099631667137146,
        1.0776468515396118
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃e Eastern(e) ∧ ∃o Osceola(o) ∧ ∃g Goulds(g) ∧ ∃m Merriams(m) ∧ ∃r RioGrande(r) ∧ ∃oc Ocellated(oc): There are six types of wild turkeys."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "Rio(x)",
        "Ocellated(x)",
        "Wild(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃a ∀b (Eastern(b) ⊕ Osceola(b) ⊕ Goulds(b) ⊕ Merriams(b) ⊕ Rio(b) ⊕ Ocellated(b))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriams(tom) ∨ Rio(tom))",
        "Wild(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 1.239723801612854,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EasternWildTurkey(x)",
        "OsceolaWildTurkey(x)",
        "GouldsWildTurkey(x)",
        "MerriamsWildTurkey(x)",
        "RioGrandeWildTurkey(x)",
        "OcellatedWildTurkey(x)",
        "IsNot(x, y)",
        "IsA(x, y)"
      ],
      "fol_consts": [
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom"
      ],
      "fol_rules": [
        "∃a (EasternWildTurkey(a)) ∧ ∃b (OsceolaWildTurkey(b)) ∧ ∃c (GouldsWildTurkey(c)) ∧ ∃d (MerriamsWildTurkey(d)) ∧ ∃e (RioGrandeWildTurkey(e)) ∧ ∃f (OcellatedWildTurkey(f))",
        "IsNot(tom, a) ∨ IsNot(tom, b)",
        "IsNot(tom, c) ∨ IsNot(tom, d) ∨ IsNot(tom, e)",
        "IsA(tom, g)"
      ],
      "fol_conc": "IsA(tom, f)",
      "perplexity": 1.3438472747802734,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 406
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayForTeam(x, y)",
        "Star(x)",
        "Player(x, y)",
        "BayernMunchenTeam(z)",
        "NoLongerPlaysFor(w, v)",
        "IsPlayerType(u, t)",
        "IsTeam(q)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y ((SoccerPlayer(x) ∧ IsTeam(y)) → (LeftTeam(x, y) → NoLongerPlaysFor(x, y)))",
        "NoLongerPlaysFor(robert_lewandowski, bayern_munchen)",
        "∀x ∀y ((SoccerPlayer(x) ∧ IsTeam(y)) → (NoLongerPlaysFor(x, y) → Star(x)))",
        "Star(robert_lewandowski)"
      ],
      "fol_conc": "Star(robert_lewandowski)",
      "perplexity": [
        1.362444281578064,
        1.084766149520874
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robertlewandowski",
        "bayernmunchen"
      ],
      "fol_rules": [
        "Striker(robertlewandowski)",
        "(∀x (Soccerplayer(x)) → Striker(x))",
        "Left(robertlewandowski, bayernmunchen)",
        "∀x ∀y (Playfor(x, y) ∧ Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Star(robertlewandowski)",
      "perplexity": 1.5290292501449585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robertLewandowski, bayernMunchen)",
        "∀x ∀y (SoccerPlayer(x) ∧ LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "¬SoccerPlayer(robertLewandowski)",
      "perplexity": 1.3128474950790405,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 407
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "Top10List(y)",
        "MadeByJapaneseCompany(y)",
        "SellsMoreThanOneMillionCopies(y)",
        "LegendOfZelda(x)"
      ],
      "fol_consts": [
        "japaneseGameCompany",
        "legendOfZelda"
      ],
      "fol_rules": [
        "Created(japaneseGameCompany, legendOfZelda): A Japanese game company created the game The Legend of Zelda.",
        "∀y (Top10List(y) → MadeByJapaneseCompany(y)): All games in the Top 10 list are made by Japanese game companies.",
        "∀z ((SellsMoreThanOneMillionCopies(z)) → Top10List(z)): If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "SellsMoreThanOneMillionCopies(legendOfZelda): The Legend of Zelda sold more than one million copies."
      ],
      "fol_conc": "¬Top10List(legendOfZelda): The Legend of Zelda is not in the Top 10 list.",
      "perplexity": [
        1.1664321422576904,
        1.0843391418457031
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Created(japaneseGameCompany, legendOfZelda): A Japanese game company created the game The Legend of Zelda."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(y)",
        "Game(z)",
        "Top10list(w)",
        "Madeby(u, v)",
        "Sells(a, b)",
        "Millioncopies(b)"
      ],
      "fol_consts": [
        "japancompany",
        "legendofzelda",
        "top10list",
        "game",
        "million"
      ],
      "fol_rules": [
        "∃x (Japanese(y) ∧ Gamecompany(y)) ∧ Created(x, y)",
        "∀z ((Game(z) ∧ Top10list(w)) → Madeby(u, v))",
        "(Sells(a, b) ∧ Millioncopies(b)) → (Top10list(v) ∧ Game(u))",
        "Created(japancompany, legendofzelda)",
        "Sells(legendofzelda, million)",
        "Millioncopies(million)"
      ],
      "fol_conc": "¬(Gamecompany(top10list) ∧ Top10list(legendofzelda))",
      "perplexity": 1.572829008102417,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "GameInTop10List(y)",
        "MadeByJapaneseCompany(z)",
        "SellsMoreThanOneMillionCopies(w)",
        "SellsMoreThanOneMillionCopies(w)"
      ],
      "fol_consts": [
        "legend of zelda",
        "japanese game company",
        "legend of zelda"
      ],
      "fol_rules": [
        "∃x (Created(x, y) ∧ GameInTop10List(y))",
        "∀z (MadeByJapaneseCompany(z) → ∃w (GameInTop10List(w)))",
        "∀u (SellsMoreThanOneMillionCopies(u) → GameInTop10List(u))",
        "SellsMoreThanOneMillionCopies(legend of zelda)"
      ],
      "fol_conc": "¬GameInTop10List(legend of zelda)",
      "perplexity": 1.4667295217514038,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 408
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Human(x)",
        "Platypus(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Human(humans) ∧ Teeth(humans)"
      ],
      "fol_conc": "Human(x) → Mammal(x)",
      "perplexity": [
        1.2550883293151855,
        1.1196902990341187
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Teeth(humans)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": 1.1480742692947388,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HasTeeth(x))",
        "¬HasTeeth(platypus)",
        "Mammal(platypus)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": 1.3321523666381836,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 409
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(y)",
        "LowSurvivalRate(z)",
        "MildFlu(mfl)",
        "ColorectalCancer(cc)"
      ],
      "fol_consts": [
        "cc",
        "bdc",
        "cholangiocarcinoma",
        "mfl"
      ],
      "fol_rules": [
        "DeadlyDisease(x) → LowSurvivalRate(x)",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(bdc)",
        "Cholangiocarcinoma(cholangiocarcinoma) ∧ (Cholangiocarcinoma(y) → BileDuctCancer(y))",
        "MildFlu(mfl) → ¬LowSurvivalRate(mfl)",
        "(ColorectalCancer(cc) → BileDuctCancer(cc)) ∧ LowSurvivalRate(bdc) → ColorectalCancer(cc) → BileDuctCancer(cc)"
      ],
      "fol_conc": "(ColorectalCancer(cc) ∧ BileDuctCancer(bdc)) ⊕ Cholangiocarcinoma(cholangiocarcinoma): If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then ColorectalCancer(cc) → (BileDuctCancer(bdc)) ∧ MildFlu(mfl).",
      "perplexity": [
        1.2670605182647705,
        1.0651354789733887
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(ColorectalCancer(cc) ∧ BileDuctCancer(bdc)) ⊕ Cholangiocarcinoma(cholangiocarcinoma): If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then ColorectalCancer(cc) → (BileDuctCancer(bdc)) ∧ MildFlu(mfl)."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Low(y)",
        "Severe(x, y)",
        "Cancer(z)",
        "Bile(w)",
        "Cholangio(u)"
      ],
      "fol_consts": [
        "colorectal",
        "mildflu",
        "bileductcancervalue",
        "chola1value",
        "chola2value"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → ∃y (Survival(x, y) ∧ Low(y)))",
        "∀z (Cancer(z) ∧ Severe(bileductcancervalue, z) → Deadly(z))",
        "Bile(bileductcancervalue)",
        "(Cholangio(chola1value) ⊕ Cholangio(chola2value))",
        "∀x (Mildflu(x) → Survival(x, high))",
        "(Colorectal(colorectal) ∧ Bile(bileductcancervalue) ∧ Low(y) ∧ Colorectal(colorectal) → (Bile(bileductcancervalue)))"
      ],
      "fol_conc": "(Colorectal(x) ⊕ Cholangio(x)) → (Bile(w) ∧ Mildflu(mildflu))",
      "perplexity": 1.5734707117080688,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)",
        "SurvivalRateIsLow(x)"
      ],
      "fol_consts": [
        "colorectalcancer"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateIsLow(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(colorectalcancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRateIsLow(x))",
        "((BileDuctCancer(colorectalcancer) ∧ SurvivalRateIsLow(colorectalcancer)) → ¬BileDuctCancer(colorectalcancer))"
      ],
      "fol_conc": "(BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer)) → (BileDuctCancer(colorectalcancer) ∧ MildFlu(colorectalcancer))",
      "perplexity": 1.2874609231948853,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 410
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseGameCompany(x)",
        "Top10List(y)",
        "MadeBy(y, z)",
        "SellsMoreThanOneMillionCopies(z)"
      ],
      "fol_consts": [
        "japaneseGameCompany",
        "legendOfZelda"
      ],
      "fol_rules": [
        "Created(japaneseGameCompany, legendOfZelda)",
        "Ωy (JapaneseGameCompany(x) → MadeBy(y, x)) → Top10List(y)",
        "SellsMoreThanOneMillionCopies(legendOfZelda) → Top10List(legendOfZelda)",
        "SellsMoreThanOneMillionCopies(legendOfZelda)"
      ],
      "fol_conc": "Top10List(legendOfZelda)",
      "perplexity": [
        1.3176381587982178,
        1.1206920146942139
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ωy (JapaneseGameCompany(x) → MadeBy(y, x)) → Top10List(y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Japanese(x)",
        "Game(y, x)",
        "Top10(z)",
        "Madeby(w, z, y)",
        "Sells(a, b)"
      ],
      "fol_consts": [
        "zelda",
        "company",
        "top10list"
      ],
      "fol_rules": [
        "∃x (Japanese(x) ∧ Game(zelda, x))",
        "∀z ((Top10(z) → ∃y ∃w (Game(y, w) ∧ Japanese(w))) ∧ Madeby(company, top10list, zelda))",
        "(Sells(zelda, morethanone) → Top10(zelda))"
      ],
      "fol_conc": "Top10(zelda)",
      "perplexity": 1.6389892101287842,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "InTop10List(y)",
        "MadeBy(y, z)",
        "SellsMoreThanOneMillionCopies(z)"
      ],
      "fol_consts": [
        "japanese game company",
        "legend of zelda"
      ],
      "fol_rules": [
        "Created(japanese game company, legend of zelda)",
        "∀x (InTop10List(x) → ∃y ((MadeBy(x, y)) ∧ (SellsMoreThanOneMillionCopies(y))) ⊕ MadeBy(japanese game company, legend of zelda))",
        "∀z (SellsMoreThanOneMillionCopies(legend of zelda) → InTop10List(legend of zelda))"
      ],
      "fol_conc": "InTop10List(legend of zelda)",
      "perplexity": 1.4771926403045654,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 411
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "LastOlympicGames(y)",
        "InCity(z, w)",
        "WonMostMedalsIn(a, b)",
        "Country(c)"
      ],
      "fol_consts": [
        "olympic_games",
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "∀x (OlympicGames(x) → SportingEvent(x))",
        "LastOlympicGames(tokyo)",
        "InCity(olympic_games, tokyo)",
        "∃c (Country(united_states) ∧ WonMostMedalsIn(united_states, olympic_games))"
      ],
      "fol_conc": "∀c (LastOlympicGames(tokyo) → Country(united_states) ∧ WonMostMedalsIn(united_states, tokyo))",
      "perplexity": [
        1.4983280897140503,
        1.0761215686798096
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x, y)",
        "Last(y)",
        "Won(z, x)",
        "Medalist(u, v)"
      ],
      "fol_consts": [
        "olympic",
        "bg",
        "us",
        "tokyo",
        "medals"
      ],
      "fol_rules": [
        "Sporting(olympic)",
        "Olympic(bg, tokyo) ∧ Last(tokyo)",
        "Won(us, medals) ∧ Medalist(tokyo, us)"
      ],
      "fol_conc": "Medalist(last, us)",
      "perplexity": 1.7500580549240112,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Olympic/2, Olympic/0, Last/1, Last/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Olympic/2, Olympic/0, Last/1, Last/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "Last(y, x)",
        "HeldIn(z, y)",
        "WonMostMedalsIn(a, b)"
      ],
      "fol_consts": [
        "olympic",
        "tokyo",
        "united states"
      ],
      "fol_rules": [
        "OlympicGames(olympic) ∧ SportingEvent(olympic)",
        "Last(tokyo, olympic)",
        "WonMostMedalsIn(united states, tokyo)"
      ],
      "fol_conc": "WonMostMedalsIn(united states, olympic)",
      "perplexity": 1.387575387954712,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 412
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "FavoriteAnimal(Max, x)",
        "FromAustralia(x)",
        "AnimalFromContinent(x, y)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LovesToSleep(x)",
        "Koala(y)",
        "NotQuokka(y)"
      ],
      "fol_consts": [
        "Max",
        "Australia"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → FavoriteAnimal(Max, x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → AnimalFromContinent(x, Australia))",
        "∀x (FavoriteAnimal(Max, x) → VeryFluffy(x))",
        "∀x (FavoriteAnimal(Max, x) → LovesToSleep(x))",
        "∀y ((Koala(y) ∧ VeryFluffy(y)) → NotQuokka(y))"
      ],
      "fol_conc": "∃y (Koala(y) ∧ LovesToSleep(y))",
      "perplexity": [
        1.2356595993041992,
        1.1217081546783447
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleepy(x)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "animal",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Animal(x) → (Loved(y, x) → Favorite(max, y)))",
        "∀x ((From(x, australia) ∧ Animal(x)) → Loved(tourist, x))",
        "∀x ((Quokka(x) → From(x, australia)))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleepy(x))",
        "(Koala(k) ∧ Fluffy(k)) → ¬Quokka(k)"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 1.3223050832748413,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Koala/1, Koala/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Koala/1, Koala/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimal(y, x)",
        "FromAustralia(z)",
        "Is(w, z)",
        "VeryFluffy(u)",
        "LoveToSleep(v)"
      ],
      "fol_consts": [
        "animals",
        "tourists",
        "Max's favorite animals",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedBy(x, tourists) → FavoriteAnimal(x, Max's favorite animals))",
        "∀z (FromAustralia(z) ⊕ LovedBy(animals, tourists))",
        "∀w (Is(quokka, w) → FromAustralia(animals))",
        "FavoriteAnimal(Max's favorite animals, x) ∧ VeryFluffy(x)",
        "(LovedBy(koala, Max's favorite animals) ⊕ LoveToSleep(koala))"
      ],
      "fol_conc": "LoveToSleep(koala)",
      "perplexity": 1.7339708805084229,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 413
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOfBakedByMelissa(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))",
        "DriedThaiChilies(dried_thai_chilies)",
        "(Spicy(dried_thai_chilies) ∨ Bakery(dried_thai_chilies)) → (Hotpot(dried_thai_chilies) ∨ Spicy(dried_thai_chilies))"
      ],
      "fol_conc": "ProductOfBakedByMelissa(dried_thai_chilies)",
      "perplexity": [
        1.1512373685836792,
        1.0575222969055176
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "baked",
        "melissa",
        "dried"
      ],
      "fol_rules": [
        "¬Bakery(x) ∧ Spicy(x)",
        "Cupcake(x) → Bakery(x)",
        "Hotpot(x) → Spicy(x)",
        "Product(baked, melissa, x) → Cupcake(x)",
        "Spicy(dried) ∨ Bakery(dried) → Hotpot(dried) ∨ Spicy(dried)"
      ],
      "fol_conc": "Product(baked, melissa, dried)",
      "perplexity": 1.3038133382797241,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬(∃x (Bakery(x) ∧ Spicy(x)))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(baked by melissa, x) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "ProductOf(baked by melissa, dried thai chilies)",
      "perplexity": 1.143490195274353,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 414
  },
  {
    "id": 199,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "No one playing for Nautico is Brazilian.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "Player(x)",
        "LoanedOutTo(x, y)",
        "BrazillianFootballer(x)",
        "PlaysFor(x, y)",
        "Club(y)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailtonSilva",
        "braga",
        "nautico",
        "fluminense",
        "],"
      ],
      "fol_rules": [
        "Born(ailtonSiliva,1995): Ailton Silva was born in 1995.",
        "KnownAs(ailtonSilva,\\\"Atilon\\\"): Ailton Silva is commonly known as Atilon.",
        "Player(\\\"Atlon\\\") \\wedge LoanedOutTo(\\\"Atlon\\\",braga): Ailton is a football player who was loaned out to Braga.",
        "BrazillianFootballer(ailtonSilva) ∧ PlaysFor(ailtonSiliva,nautico): Ailton Silva is a Brazilian footballer who plays for Nautico.",
        "Club(nautico) \\wedge Club(braga): Nautico and Braga are football clubs.",
        "Club(fluminense): Fluminesse is a football club."
      ],
      "fol_conc": "\neg\\exists x (PlaysFor(x, nautico) ∧ Brazilian(x))",
      "perplexity": [
        1.199383020401001,
        1.6684678792953491
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Born(ailtonSiliva,1995): Ailton Silva was born in 1995."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Commonlyknownas(x, y)",
        "Footballplayer(x)",
        "Loanedoutto(x, y)",
        "Playsfor(x, y)",
        "Isafootballerfrom(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "nautico",
        "braga",
        "fluminense"
      ],
      "fol_rules": [
        "Born(silva, xtuples)",
        "Commonlyknownas(ailton, silva)",
        "Footballplayer(x) ∧ Loanedoutto(x, braga)",
        "Playsfor(x, nautico)",
        "Isafootballerfrom(silva, brazil)"
      ],
      "fol_conc": "¬Exist(y) ∨ (Born(y, brazil))",
      "perplexity": 1.8936891555786133,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "KnownAs(x, y)",
        "Born(x, y)",
        "FootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "IsA(x, y)",
        "Club(z)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "brazillian",
        "1995"
      ],
      "fol_rules": [
        "KnownAs(silva, ailton)",
        "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
        "IsA(silva, brazillian) ∧ PlaysFor(silva, nautico)",
        "Club(nautico) ∧ Club(braga)",
        "Club(ailton)"
      ],
      "fol_conc": "¬((PlaysFor(x, nautico)) → IsA(x, brazillian))",
      "perplexity": 1.530170202255249,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 415
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "ComposerWritesMusicPiece(y, z)",
        "Premiers(w, x)",
        "Orchestra(v)",
        "Leads(u, v)",
        "Conductor(t)"
      ],
      "fol_consts": [
        "symphony_no_9",
        "beethoven",
        "vienna_music_society"
      ],
      "fol_rules": [
        "MusicPiece(symphony_no_9): Symphony No. 9 is a music piece.",
        "∀y ∃z (ComposerWritesMusicPiece(y, z)): Composers write music pieces.",
        "ComposerWritesMusicPiece(beethoven, symphony_no_9): Beethoven wrote Symphony No. 9.",
        "Premiers(vienna_music_society, symphony_no_9): Vienna Music Society premiered Symphony No. 9.",
        "Orchestra(vienna_music_society): Vienna Music Society is an orchestra.",
        "Leads(beethoven, vienna_music_society): Beethoven leads the Vienna Music Society.",
        "∀u ∃v (Leads(u, v) → Orchestra(v)): Orchestras are led by conductors.",
        "(Orchestra(w) → Premiers(w, x)) & MusicPiece(x): Some orchestras premiered music pieces."
      ],
      "fol_conc": "∃v ∃y (MusicPiece(y) ∧ Orchestra(v) ∧ Premiers(v, y)): Some orchestras premiered music pieces.",
      "perplexity": [
        1.1702264547348022,
        1.07967209815979
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony_no_9): Symphony No. 9 is a music piece."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Musicpiece(x)",
        "Composerwrites(y, x)",
        "Beethovenwrote(z)",
        "Premieredbyorchestra(a, b)",
        "Orchestra(c)",
        "Leadsorchestra(d, e)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusicsociety"
      ],
      "fol_rules": [
        "Musicpiece(symphony9)",
        "∀x (Composerwrites(y, x))",
        "Beethovenwrote(symphony9) → Composerwrites(beethoven, symphony9)",
        "Premieredbyorchestra(viennamusicsociety, symphony9)",
        "Orchestra(viennamusicsociety)",
        "Leadsorchestra(beethoven, viennamusicsociety) → Composerwrites(beethoven, symphony9)",
        "∀x (Orchestra(x))"
      ],
      "fol_conc": "∃z (Musicpiece(z) ∧ Premieredbyorchestra(viennamusicsociety, z))",
      "perplexity": 1.5666359663009644,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "ComposerWrites(y, x)",
        "Wrote(z, y, x)",
        "OrchestraPremiered(w, x)",
        "OrchestraPremiered(v, z, w, x)",
        "Leads(t, u, v)",
        "MusicPiece(p)",
        "ComposerWrites(c, p)"
      ],
      "fol_consts": [
        "symphony no. 9",
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "MusicPiece(symphony no. 9)",
        "∀x (ComposerWrites(y, x))",
        "Wrote(beethoven, symphony no. 9)",
        "OrchestraPremiered(vienna music society, symphony no. 9)",
        "OrchestraPremiered(w, x)",
        "Leads(t, u, v)"
      ],
      "fol_conc": "∃x (MusicPiece(p) ∧ ComposerWrites(c, p))",
      "perplexity": 1.9055601358413696,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony no. 9)"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 416
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "e"
      ],
      "fol_rules": [
        "(∀x ((Event(x) → Happy(x)) ⊕ Sad(x)))",
        "(∃e (Happy(e) ∧ Event(e)))"
      ],
      "fol_conc": "¬∃e (Happy(e)) → ∀x ((Event(x) → Sad(x)))",
      "perplexity": [
        1.397430658340454,
        1.2223658561706543
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "e1",
        "e2"
      ],
      "fol_rules": [
        "∀x (Event(x) → (Happy(x) ⊕ Sad(x)))",
        "¬(Happy(e1))"
      ],
      "fol_conc": "∀x (Event(x) → Sad(x))",
      "perplexity": 2.5677337646484375,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "event"
      ],
      "fol_rules": [
        "∀x (Happy(x) ⊕ Sad(x))",
        "∃x (Happy(x))"
      ],
      "fol_conc": "∀y (Sad(y))",
      "perplexity": 1.4209630489349365,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 417
  },
  {
    "id": 137,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "If something is a household appliance, it sucks.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sucks(x)",
        "Vacuum(x)",
        "Plunger(x)",
        "Duster(y)",
        "HouseholdAppliance(z)"
      ],
      "fol_consts": [
        "Space",
        ""
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Sucks(x))",
        "∀x (Vacuum(x) → Sucks(x))",
        "∀x (Vampire(x) → Sucks(x))",
        "(Space = Vacuum)",
        "(∃y (Duster(y) ∧ HouseholdAppliance(y))) ∧ (¬Sucks(y))"
      ],
      "fol_conc": "∀z (HouseholdAppliance(z) → Sucks(z))",
      "perplexity": [
        1.1574909687042236,
        1.2089123725891113
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Space = Vacuum)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Plunger(x)",
        "Duster(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Suck(x))",
        "∀x (Vacuum(x) → Suck(x))",
        "∀x (Vampire(x) → Suck(x))",
        "Vacuum(space)",
        "(Duster(x) ∧ Household(x)) → ¬Suck(x)"
      ],
      "fol_conc": "∀y ((Household(y) ∨ Duster(y)) → Suck(y))",
      "perplexity": 1.4272080659866333,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "IsVacuum(x)",
        "IsVacuum(y)"
      ],
      "fol_consts": [
        "plunger",
        "vaccum",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "IsVacuum(space)",
        "IsVacuum(x) ∧ IsVacuum(y) → Suck(x)"
      ],
      "fol_conc": "IsVacuum(duster) ∨ IsVacuum(householdappliance)",
      "perplexity": 2.324612617492676,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 418
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesAid(z, w)",
        "HasHardship(w)",
        "SingleParentFamily(v)",
        "OutOfWork(u, v)",
        "GREApplicant(t)",
        "ProvesHardship(w, x)"
      ],
      "fol_consts": [
        "tom",
        "gre_test",
        "ets",
        "usd_205"
      ],
      "fol_rules": [
        "Costs(gre_test, usd_205): It costs US $205 to take the GRE test.",
        "ProvidesAid(ets, w) → HasHardship(w): ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "∀x (HasHardship(x) → DifficultyCausedByMoneyOrResources(x)): Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "SingleParentFamily(tom): Tom lives in a single-parent family.",
        "OutOfWork(dad, tom): His dad has been out of work for more than a year.",
        "GREApplicant(tom): Tom is a GRE applicant (implicit from the context).",
        "∀x ((SingleParentFamily(y) ∧ OutOfWork(z, y)) → HasHardship(y)): If someone lives in a single-parent family and their parent has been out of work for more than a year, they have economic hardship.",
        "HasHardship(tom): From rules 4, 5, and 7, Tom has economic hardship.",
        "ProvidesAid(ets, tom) → ProvesHardship(tom, ets): ETS provides financial aid to those GRE applicants who prove economic hardship (rule 2).",
        "ProvesHardship(tom, ets): From rule 8 and the context that Tom is a GRE applicant, he can prove his economic hardship to ETS."
      ],
      "fol_conc": "ProvidesAid(ets, tom)",
      "perplexity": [
        1.268706202507019,
        1.053062915802002
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Costs(gre_test, usd_205): It costs US $205 to take the GRE test."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provides(z, x, y)",
        "Financialaid(z, x)",
        "Economichardship(x, y)",
        "Livein(x, y)",
        "Unemployedfor(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "usd205",
        "singleparentfamily",
        "morethanyear",
        "difficultycausedbylackingmoneyandresources"
      ],
      "fol_rules": [
        "Cost(gre, usd205)",
        "Provides(ets, gre, x) → Financialaid(ets, x)",
        "Economichardship(x, y) ↔ Difficultycausedbylackingmoneyandresources(x, y)",
        "Livein(tom, singleparentfamily)"
      ],
      "fol_conc": "Financialaid(ets, tom)",
      "perplexity": 1.5844446420669556,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cost(x, y)",
        "ProvideFinancialAid(z, x)",
        "ProvideFinancialAid(z, y)",
        "EconomicHardship(x)",
        "LiveInSingleParentFamily(x)",
        "OutOfWork(y)"
      ],
      "fol_consts": [
        "tom",
        "$205",
        "ETS"
      ],
      "fol_rules": [
        "Cost(GRE test, $205)",
        "ProvideFinancialAid(ETS, x) ↔ (ProvideFinancialAid(x, ETS) ∧ EconomicHardship(x))",
        "EconomicHardship(x) → LiveInSingleParentFamily(x) ⊕ OutOfWork(y)",
        "(LiveInSingleParentFamily(tom) ∨ OutOfWork(d))"
      ],
      "fol_conc": "ProvideFinancialAid(ETS, tom)",
      "perplexity": 1.7800887823104858,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 419
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "BornInYear(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazilian(x)",
        "PlaysFor(x, y)",
        "FootballClub(z)",
        "Team(u)",
        "Includes(a, b)"
      ],
      "fol_consts": [
        "aitlon_silva",
        "braga",
        "fluminense",
        "nautico",
        "brazilian",
        "1995",
        "aitlon",
        "football_player"
      ],
      "fol_rules": [
        "Person(aitlon_silva) ∧ BornInYear(aitlon_silva, 1995) ∧ KnownAs(aitlon_silva, aitlon)",
        "FootballPlayer(aitlon) ∧ LoanedOutTo(aitlon, braga)",
        "Person(aitlon_silva) ∧ Brazilian(aitlon_silva) ∧ PlaysFor(aitlon_silva, nautico)",
        "FootballClub(braga) ∧ FootballClub(nautico) ∧ Includes([braga, nautico], football_clubs)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "¬∃y (LoanedOutTo(aitlon, y)) ∧ FootballClub(y)",
      "perplexity": [
        1.2822799682617188,
        1.0382438898086548
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(z)"
      ],
      "fol_consts": [
        "aitlon",
        "silva",
        "nautico",
        "braga",
        "fluminense",
        "brazilian",
        "footballplayer",
        "footballclub",
        "loanedoutto",
        "playfor",
        "bornin",
        "commonlyknownas"
      ],
      "fol_rules": [
        "Born(silva, xtu1995)",
        "Known(aitlon, silva)",
        "Footballer(aitlon)",
        "Loaned(footballplayer, loanedoutto)",
        "Plays(brazilian, playsfor)",
        "Club(nautico)",
        "Club(braga)",
        "Club(fluminense)"
      ],
      "fol_conc": "(¬Loaned(x))",
      "perplexity": 2.015777587890625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loaned/2, Loaned/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loaned/2, Loaned/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "PlaysFor(x, y)",
        "LoanedTo(x, y)",
        "IsFootballClub(z)"
      ],
      "fol_consts": [
        "aitlon",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "Born(aitlon, 1995)",
        "KnownAs(aitlon, ailton silva)",
        "PlaysFor(aitlon, braga) ∧ LoanedTo(aitlon, braga)",
        "IsFootballClub(nautico)",
        "IsFootballClub(braga)",
        "LoanedTo(x, y) → IsFootballClub(y)"
      ],
      "fol_conc": "¬LoanedTo(aitlon, z)",
      "perplexity": 1.767911672592163,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 420
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "GrumpyPerson(x)",
        "AnimalLover(x)",
        "PetOwner(x)",
        "Owns(x, y)",
        "IsAPet(y)",
        "Be(x, y)",
        "And(p, q)",
        "Or(p, q)",
        "Not(p)",
        "Implication(p, q)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (PetOwner(x) → AnimalLover(x))",
        "PetOwner(tom)"
      ],
      "fol_conc": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))",
      "perplexity": [
        1.2260806560516357,
        1.07374906539917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x)",
        "Animal(y)",
        "Loves(x, y)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom",
        "pet"
      ],
      "fol_rules": [
        "¬(Nice(x, animal) ∧ Mean(x, animal))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "Animal(y) → (Loves(x, y) → Nice(x, y))",
        "Owns(x, y) → Loves(x, y)",
        "Owns(tom, pet)"
      ],
      "fol_conc": "¬Grumpy(tom) ∧ ¬Mean(tom, animal)",
      "perplexity": 1.3317378759384155,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "AnimalLover(x)",
        "OwnPet(x)"
      ],
      "fol_consts": [
        "tom",
        "grumpy"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃y (AnimalLover(y) ∧ MeanToAnimals(y))",
        "∀z (AnimalLover(z) → NiceToAnimals(z))",
        "OwnPet(tom)",
        "∀w ((OwnPet(w) → AnimalLover(w)))"
      ],
      "fol_conc": "¬MeanToAnimals(tom)",
      "perplexity": 1.5121904611587524,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 401
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x)",
        "DepositRequired(y)",
        "ManagedBuilding(z)",
        "SecurityDepositEqualToOneMonthsRent(w, z)",
        "MoreThanOneMonthsRent(w, z)",
        "Pet(v)",
        "Cat(u)",
        "OwnedBy(p, q)",
        "ApartmentInBuilding(r, s)",
        "MonthlyRent(t, x)",
        "WillRentIfConditionsMet(y, z, w)",
        "AllowedWithPet(a, b)",
        "SecurityDepositAtBuilding(c, d)",
        "MoreThan(e, f)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Allowed(x))",
        "∀y DepositRequired(ApartmentInBuilding(y, ManagedBuilding(z)))",
        "∀w ∀z ((SecurityDepositEqualToOneMonthsRent(w, z) ⊕ MoreThanOneMonthsRent(w, z)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "∃x MonthlyRent(ApartmentInBuilding(x, olive_garden), $2000)",
        "OwnedBy(tom, fluffy) ↔ WillRentIfConditionsMet(tom, ApartmentInBuilding(y, ManagedBuilding(z)), (AllowedWithPet(y, z)) ∧ (SecurityDepositAtBuilding(z, d) → d ≤ $1500))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "MoreThan(SecurityDepositAtBuilding(olive_garden, d), $2000)",
      "perplexity": [
        1.3528461456298828,
        1.0653351545333862
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y DepositRequired(ApartmentInBuilding(y, ManagedBuilding(z)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allows(x, y)",
        "Requires(y, z)",
        "Equal(z1, z2)",
        "More(z1, z2)",
        "Ownedby(x, y)",
        "Isa(x, y)",
        "Managedbuilding(x)",
        "Monthlyrent(x, y)",
        "Rentapartment(x, y, z)",
        "Securitydeposit(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "pets",
        "cats",
        "monthlyrent2000dollars",
        "securitydeposittomatolivgardendollar1500"
      ],
      "fol_rules": [
        "∃x ∃y (Pets(x) ∧ Managedbuilding(y) ∧ Allows(y, x))",
        "∀y (Managedbuilding(y) → Requires(y, z))",
        "Securitydeposit(y, z) → More(z1, z2) ⊕ Equal(z1, z2)",
        "Ownedby(fluffy, tom) ∧ Isa(cats, fluffy) ∧ Managedbuilding(olivegarden)",
        "Monthlyrent(olivegarden, monthlyrent2000dollars)",
        "Rentapartment(tom, olivegarden, securitydeposittomatolivgardendollar1500) → Allows(y, fluffy) ∧ (Securitydeposit(securitydeposittomatolivgardendollar1500))",
        "Morethan(monthlyrent2000dollars, securitydeposittomatolivgardendollar1500)"
      ],
      "fol_conc": "(Equal(securitydepositattheolivegarden, monthlyrent2000) ∨ More(securitydepositattheolivegarden, monthlyrent2000))",
      "perplexity": 1.572614073753357,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Securitydeposit/1, Securitydeposit/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Securitydeposit/1, Securitydeposit/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Allowed(x, y)",
        "RentApartmentIn(z, x)",
        "ManagedBuilding(y)",
        "RequiresDeposit(w, z, x, y)",
        "EqualToOrMore(a, b)",
        "IsPet(c)",
        "IsCat(d)",
        "MonthlyRentAt(e, f)",
        "WillRentIfAndOnlyIf(g, h, i, j)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden",
        "olive garden"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(y) → Allowed(x, y))",
        "RequiresDeposit(a, b, c, d)",
        "EqualToOrMore(e, f) ⊕ EqualToOrMore(g, h)",
        "IsCat(i) ∧ IsPet(j) → (ManagedBuilding(k) → Allowed(l, m))",
        "IsCat(n) ∧ ManagedBuilding(o) → MonthlyRentAt(p, q)",
        "MonthlyRentAt(r, s)"
      ],
      "fol_conc": "(EqualToOrMore(t, u) ⊕ EqualToOrMore(v, w))",
      "perplexity": 2.1651153564453125,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 402
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "BritishSitcomSeries(x)",
        "StarringMembersOfPappy’s(y)",
        "MemberOfPappy’s(z)",
        "PilotedOnBBCThree(x, d)",
        "WorkingTitleUsedForBadults(\"The Secret Dude Society\")",
        "ScriptEditorForBadults(AndrewCollins)",
        "PilotOnBBCTwoOrThree(y, d)",
        "NoMemberStarredInShow(z, y)"
      ],
      "fol_consts": [
        "Badults",
        "\"The Secret Dude Society\"",
        "AndrewCollins",
        "July2013",
        "BBC Three",
        "Pappy's (group)"
      ],
      "fol_rules": [
        "BritishSitcomSeries(Badults)",
        "StarringMembersOfPappy’s(Badults)",
        "WorkingTitleUsedForBadults(\"The Secret Dude Society\")",
        "PilotedOnBBCThree(Badults, July2013)",
        "ScriptEditorForBadults(AndrewCollins)"
      ],
      "fol_conc": "∀z (MemberOfPappy’s(z) → ¬NoMemberStarredInShow(z, y)) where y is a show that piloted on BBC Two or BBC Three.",
      "perplexity": [
        1.3760546445846558,
        1.1380679607391357
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z (MemberOfPappy’s(z) → ¬NoMemberStarredInShow(z, y)) where y is a show that piloted on BBC Two or BBC Three."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "British(x)",
        "Sitcom(y)",
        "Starring(z, y)",
        "Member(w, z)",
        "Piloted(y, date, channel)"
      ],
      "fol_consts": [
        "badults",
        "bbc3",
        "july2013",
        "pappys",
        "andrewcollins"
      ],
      "fol_rules": [
        "Sitcom(badults)",
        "British(badults)",
        "Piloted(badults, july2013, bbc3)",
        "Starring(pappys, badults)",
        "Member(andrewcollins, pappys)"
      ],
      "fol_conc": "¬Exists(x) ∧ Member(y, pappys) ∧ Starring(z, y) ∧ Piloted(x, date, bbc2) ∨ Piloted(x, date, bbc3)",
      "perplexity": 1.4711874723434448,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ScriptEditorFor(x, y)",
        "StarringMembersOf(y, z)",
        "BritishSitcomSeries(x)",
        "ScriptEditorFor(a, b)",
        "StarringMembersOf(b, c)",
        "BritishSitcomSeries(d)"
      ],
      "fol_consts": [
        "badults",
        "pappy's",
        "bbc three",
        "bbc two",
        "pappy's"
      ],
      "fol_rules": [
        "∃x (BritishSitcomSeries(x) ∧ StarringMembersOf(x, y))",
        "∀x (BritishSitcomSeries(x) → ScriptEditorFor(a, x))",
        "ScriptEditorFor(b, c)",
        "StarringMembersOf(d, e)"
      ],
      "fol_conc": "¬(∃f ∃g ((BritishSitcomSeries(f) ∧ StarringMembersOf(f, g) ∧ (ScriptEditorFor(b, c) → ∀h (StarringMembersOf(d, h))))))",
      "perplexity": 2.548502206802368,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 403
  },
  {
    "id": 142,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromSimpsons(x))",
        "(FromSimpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "((Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊂ Ugly(ben)))",
      "perplexity": [
        1.060420036315918,
        1.0564504861831665
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊂ Ugly(ben)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Lovedbychildren(x)",
        "Fromsimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Lovedbychildren(x) → Funny(x))",
        "∀x (Fromsimpsons(x) → Lovedbychildren(x))",
        "∀x (Yellow(x) → Fromsimpsons(x))",
        "Fromsimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊕ Ugly(ben))",
      "perplexity": 1.1885144710540771,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromTheSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromTheSimpsons(x))",
        "(FromTheSimpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ⊕ Ugly(ben))",
      "perplexity": 1.0705052614212036,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 404
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "WorksInStudentJob(x)",
        "NeedsMoneyForTuition(x)",
        "OrdersTakeoutFrequently(x)",
        "EnjoysDiningHallMeals(x)",
        "IsPickyEater(x)",
        "SpendsTimeInCampusDiningHalls(x, y)"
      ],
      "fol_consts": [
        "mary",
        "eating_and_catching_up_with_friends"
      ],
      "fol_rules": [
        "∀x (WorksInStudentJob(x) → NeedsMoneyForTuition(x))",
        "∀x (OrdersTakeoutFrequently(x) → WorksInStudentJob(x))",
        "∀x (OrdersTakeoutFrequently(x) ⊕ EnjoysDiningHallMeals(x))",
        "∀x (EnjoysDiningHallMeals(x) → ¬IsPickyEater(x))",
        "∀x (EnjoysDiningHallMeals(x) → SpendsTimeInCampusDiningHalls(x, eating_and_catching_up_with_friends))",
        "(WorksInStudentJob(mary) ∧ NeedsMoneyForTuition(mary)) → ((NeedsMoneyForTuition(mary) → ¬IsPickyEater(mary)))"
      ],
      "fol_conc": "((EnjoysDiningHallMeals(mary) → ¬IsPickyEater(mary)) ⊕ ((IsPickyEater(mary) ∧ EnjoysDiningHallMeals(mary)) → SpendsTimeInCampusDiningHalls(mary, eating_and_catching_up_with_friends)))",
      "perplexity": [
        1.2186000347137451,
        1.0599137544631958
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Works(x, y)",
        "Need(x, y)",
        "Order(x, y)",
        "Enjoy(x, y)",
        "Picky(x)"
      ],
      "fol_consts": [
        "mary",
        "studentjobs",
        "collegetuition",
        "campusdininghalls",
        "friends"
      ],
      "fol_rules": [
        "∀x (Works(x, studentjobs) → Need(x, collegetuition))",
        "∀x ((Order(x, takeoutfrequentlyincampus) → Works(x, studentjobs)))",
        "∀x ((Enjoy(x, dininghallmealsandrecipes) ⊕ Order(x, takeoutfrequentlyincampus)))",
        "(Enjoy(mary, dininghallmealsandrecipes) → ¬Picky(mary))",
        "(Works(mary, studentjobs) ∧ Need(mary, collegetuition)) → ((Need(x, y) ⊕ Picky(x)))"
      ],
      "fol_conc": "(Enjoy(mary, dininghallmealsandrecipes) → (¬Picky(mary) ⊕ Spends(mary, lots, timeeatingcatchingupwithfriendsincampusdininghalls)))",
      "perplexity": 1.5905483961105347,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Work(x)",
        "NeedMoneyForTuition(x)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallMeals(x)",
        "PickyEater(x)"
      ],
      "fol_consts": [
        "mary",
        "mary",
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x, student jobs on campus) → NeedMoneyForTuition(x))",
        "∀x (OrderTakeoutFrequently(x) → Work(x, student jobs on campus))",
        "∀x ((OrderTakeoutFrequently(x) ⊕ EnjoyDiningHallMeals(x)))",
        "∀x (EnjoyDiningHallMeals(x) → ¬PickyEater(x))",
        "(Work(mary, student jobs on campus) ∧ NeedMoneyForTuition(mary)) → ((NeedMoneyForTuition(mary) ⊕ PickyEater(mary)))"
      ],
      "fol_conc": "((EnjoyDiningHallMeals(mary) → (¬PickyEater(mary) ∨ SpendTimeEatingWithFriends(mary))))",
      "perplexity": 1.3723564147949219,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 405
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "RioGrande(x)",
        "Ocellated(x)",
        "WildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃e Eastern(e) ∧ ∃o Osceola(o) ∧ ∃g Goulds(g) ∧ ∃m Merriams(m) ∧ ∃r RioGrande(r) ∧ ∃oc Ocellated(oc): There are six types of wild turkeys.",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom)",
        "WildTurkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": [
        1.099631667137146,
        1.0776468515396118
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃e Eastern(e) ∧ ∃o Osceola(o) ∧ ∃g Goulds(g) ∧ ∃m Merriams(m) ∧ ∃r RioGrande(r) ∧ ∃oc Ocellated(oc): There are six types of wild turkeys."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "Rio(x)",
        "Ocellated(x)",
        "Wild(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃a ∀b (Eastern(b) ⊕ Osceola(b) ⊕ Goulds(b) ⊕ Merriams(b) ⊕ Rio(b) ⊕ Ocellated(b))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriams(tom) ∨ Rio(tom))",
        "Wild(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 1.239723801612854,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EasternWildTurkey(x)",
        "OsceolaWildTurkey(x)",
        "GouldsWildTurkey(x)",
        "MerriamsWildTurkey(x)",
        "RioGrandeWildTurkey(x)",
        "OcellatedWildTurkey(x)",
        "IsNot(x, y)",
        "IsA(x, y)"
      ],
      "fol_consts": [
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom",
        "tom"
      ],
      "fol_rules": [
        "∃a (EasternWildTurkey(a)) ∧ ∃b (OsceolaWildTurkey(b)) ∧ ∃c (GouldsWildTurkey(c)) ∧ ∃d (MerriamsWildTurkey(d)) ∧ ∃e (RioGrandeWildTurkey(e)) ∧ ∃f (OcellatedWildTurkey(f))",
        "IsNot(tom, a) ∨ IsNot(tom, b)",
        "IsNot(tom, c) ∨ IsNot(tom, d) ∨ IsNot(tom, e)",
        "IsA(tom, g)"
      ],
      "fol_conc": "IsA(tom, f)",
      "perplexity": 1.3438472747802734,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 406
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayForTeam(x, y)",
        "Star(x)",
        "Player(x, y)",
        "BayernMunchenTeam(z)",
        "NoLongerPlaysFor(w, v)",
        "IsPlayerType(u, t)",
        "IsTeam(q)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y ((SoccerPlayer(x) ∧ IsTeam(y)) → (LeftTeam(x, y) → NoLongerPlaysFor(x, y)))",
        "NoLongerPlaysFor(robert_lewandowski, bayern_munchen)",
        "∀x ∀y ((SoccerPlayer(x) ∧ IsTeam(y)) → (NoLongerPlaysFor(x, y) → Star(x)))",
        "Star(robert_lewandowski)"
      ],
      "fol_conc": "Star(robert_lewandowski)",
      "perplexity": [
        1.362444281578064,
        1.084766149520874
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robertlewandowski",
        "bayernmunchen"
      ],
      "fol_rules": [
        "Striker(robertlewandowski)",
        "(∀x (Soccerplayer(x)) → Striker(x))",
        "Left(robertlewandowski, bayernmunchen)",
        "∀x ∀y (Playfor(x, y) ∧ Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Star(robertlewandowski)",
      "perplexity": 1.5290292501449585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robertLewandowski, bayernMunchen)",
        "∀x ∀y (SoccerPlayer(x) ∧ LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "¬SoccerPlayer(robertLewandowski)",
      "perplexity": 1.3128474950790405,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 407
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "Top10List(y)",
        "MadeByJapaneseCompany(y)",
        "SellsMoreThanOneMillionCopies(y)",
        "LegendOfZelda(x)"
      ],
      "fol_consts": [
        "japaneseGameCompany",
        "legendOfZelda"
      ],
      "fol_rules": [
        "Created(japaneseGameCompany, legendOfZelda): A Japanese game company created the game The Legend of Zelda.",
        "∀y (Top10List(y) → MadeByJapaneseCompany(y)): All games in the Top 10 list are made by Japanese game companies.",
        "∀z ((SellsMoreThanOneMillionCopies(z)) → Top10List(z)): If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "SellsMoreThanOneMillionCopies(legendOfZelda): The Legend of Zelda sold more than one million copies."
      ],
      "fol_conc": "¬Top10List(legendOfZelda): The Legend of Zelda is not in the Top 10 list.",
      "perplexity": [
        1.1664321422576904,
        1.0843391418457031
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Created(japaneseGameCompany, legendOfZelda): A Japanese game company created the game The Legend of Zelda."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(y)",
        "Game(z)",
        "Top10list(w)",
        "Madeby(u, v)",
        "Sells(a, b)",
        "Millioncopies(b)"
      ],
      "fol_consts": [
        "japancompany",
        "legendofzelda",
        "top10list",
        "game",
        "million"
      ],
      "fol_rules": [
        "∃x (Japanese(y) ∧ Gamecompany(y)) ∧ Created(x, y)",
        "∀z ((Game(z) ∧ Top10list(w)) → Madeby(u, v))",
        "(Sells(a, b) ∧ Millioncopies(b)) → (Top10list(v) ∧ Game(u))",
        "Created(japancompany, legendofzelda)",
        "Sells(legendofzelda, million)",
        "Millioncopies(million)"
      ],
      "fol_conc": "¬(Gamecompany(top10list) ∧ Top10list(legendofzelda))",
      "perplexity": 1.572829008102417,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "GameInTop10List(y)",
        "MadeByJapaneseCompany(z)",
        "SellsMoreThanOneMillionCopies(w)",
        "SellsMoreThanOneMillionCopies(w)"
      ],
      "fol_consts": [
        "legend of zelda",
        "japanese game company",
        "legend of zelda"
      ],
      "fol_rules": [
        "∃x (Created(x, y) ∧ GameInTop10List(y))",
        "∀z (MadeByJapaneseCompany(z) → ∃w (GameInTop10List(w)))",
        "∀u (SellsMoreThanOneMillionCopies(u) → GameInTop10List(u))",
        "SellsMoreThanOneMillionCopies(legend of zelda)"
      ],
      "fol_conc": "¬GameInTop10List(legend of zelda)",
      "perplexity": 1.4667295217514038,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 408
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Human(x)",
        "Platypus(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Human(humans) ∧ Teeth(humans)"
      ],
      "fol_conc": "Human(x) → Mammal(x)",
      "perplexity": [
        1.2550883293151855,
        1.1196902990341187
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Teeth(humans)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": 1.1480742692947388,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HasTeeth(x))",
        "¬HasTeeth(platypus)",
        "Mammal(platypus)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": 1.3321523666381836,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 409
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(y)",
        "LowSurvivalRate(z)",
        "MildFlu(mfl)",
        "ColorectalCancer(cc)"
      ],
      "fol_consts": [
        "cc",
        "bdc",
        "cholangiocarcinoma",
        "mfl"
      ],
      "fol_rules": [
        "DeadlyDisease(x) → LowSurvivalRate(x)",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(bdc)",
        "Cholangiocarcinoma(cholangiocarcinoma) ∧ (Cholangiocarcinoma(y) → BileDuctCancer(y))",
        "MildFlu(mfl) → ¬LowSurvivalRate(mfl)",
        "(ColorectalCancer(cc) → BileDuctCancer(cc)) ∧ LowSurvivalRate(bdc) → ColorectalCancer(cc) → BileDuctCancer(cc)"
      ],
      "fol_conc": "(ColorectalCancer(cc) ∧ BileDuctCancer(bdc)) ⊕ Cholangiocarcinoma(cholangiocarcinoma): If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then ColorectalCancer(cc) → (BileDuctCancer(bdc)) ∧ MildFlu(mfl).",
      "perplexity": [
        1.2670605182647705,
        1.0651354789733887
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(ColorectalCancer(cc) ∧ BileDuctCancer(bdc)) ⊕ Cholangiocarcinoma(cholangiocarcinoma): If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then ColorectalCancer(cc) → (BileDuctCancer(bdc)) ∧ MildFlu(mfl)."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Low(y)",
        "Severe(x, y)",
        "Cancer(z)",
        "Bile(w)",
        "Cholangio(u)"
      ],
      "fol_consts": [
        "colorectal",
        "mildflu",
        "bileductcancervalue",
        "chola1value",
        "chola2value"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → ∃y (Survival(x, y) ∧ Low(y)))",
        "∀z (Cancer(z) ∧ Severe(bileductcancervalue, z) → Deadly(z))",
        "Bile(bileductcancervalue)",
        "(Cholangio(chola1value) ⊕ Cholangio(chola2value))",
        "∀x (Mildflu(x) → Survival(x, high))",
        "(Colorectal(colorectal) ∧ Bile(bileductcancervalue) ∧ Low(y) ∧ Colorectal(colorectal) → (Bile(bileductcancervalue)))"
      ],
      "fol_conc": "(Colorectal(x) ⊕ Cholangio(x)) → (Bile(w) ∧ Mildflu(mildflu))",
      "perplexity": 1.5734707117080688,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)",
        "SurvivalRateIsLow(x)"
      ],
      "fol_consts": [
        "colorectalcancer"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateIsLow(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(colorectalcancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRateIsLow(x))",
        "((BileDuctCancer(colorectalcancer) ∧ SurvivalRateIsLow(colorectalcancer)) → ¬BileDuctCancer(colorectalcancer))"
      ],
      "fol_conc": "(BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer)) → (BileDuctCancer(colorectalcancer) ∧ MildFlu(colorectalcancer))",
      "perplexity": 1.2874609231948853,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 410
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseGameCompany(x)",
        "Top10List(y)",
        "MadeBy(y, z)",
        "SellsMoreThanOneMillionCopies(z)"
      ],
      "fol_consts": [
        "japaneseGameCompany",
        "legendOfZelda"
      ],
      "fol_rules": [
        "Created(japaneseGameCompany, legendOfZelda)",
        "Ωy (JapaneseGameCompany(x) → MadeBy(y, x)) → Top10List(y)",
        "SellsMoreThanOneMillionCopies(legendOfZelda) → Top10List(legendOfZelda)",
        "SellsMoreThanOneMillionCopies(legendOfZelda)"
      ],
      "fol_conc": "Top10List(legendOfZelda)",
      "perplexity": [
        1.3176381587982178,
        1.1206920146942139
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ωy (JapaneseGameCompany(x) → MadeBy(y, x)) → Top10List(y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Japanese(x)",
        "Game(y, x)",
        "Top10(z)",
        "Madeby(w, z, y)",
        "Sells(a, b)"
      ],
      "fol_consts": [
        "zelda",
        "company",
        "top10list"
      ],
      "fol_rules": [
        "∃x (Japanese(x) ∧ Game(zelda, x))",
        "∀z ((Top10(z) → ∃y ∃w (Game(y, w) ∧ Japanese(w))) ∧ Madeby(company, top10list, zelda))",
        "(Sells(zelda, morethanone) → Top10(zelda))"
      ],
      "fol_conc": "Top10(zelda)",
      "perplexity": 1.6389892101287842,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "InTop10List(y)",
        "MadeBy(y, z)",
        "SellsMoreThanOneMillionCopies(z)"
      ],
      "fol_consts": [
        "japanese game company",
        "legend of zelda"
      ],
      "fol_rules": [
        "Created(japanese game company, legend of zelda)",
        "∀x (InTop10List(x) → ∃y ((MadeBy(x, y)) ∧ (SellsMoreThanOneMillionCopies(y))) ⊕ MadeBy(japanese game company, legend of zelda))",
        "∀z (SellsMoreThanOneMillionCopies(legend of zelda) → InTop10List(legend of zelda))"
      ],
      "fol_conc": "InTop10List(legend of zelda)",
      "perplexity": 1.4771926403045654,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 411
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "LastOlympicGames(y)",
        "InCity(z, w)",
        "WonMostMedalsIn(a, b)",
        "Country(c)"
      ],
      "fol_consts": [
        "olympic_games",
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "∀x (OlympicGames(x) → SportingEvent(x))",
        "LastOlympicGames(tokyo)",
        "InCity(olympic_games, tokyo)",
        "∃c (Country(united_states) ∧ WonMostMedalsIn(united_states, olympic_games))"
      ],
      "fol_conc": "∀c (LastOlympicGames(tokyo) → Country(united_states) ∧ WonMostMedalsIn(united_states, tokyo))",
      "perplexity": [
        1.4983280897140503,
        1.0761215686798096
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x, y)",
        "Last(y)",
        "Won(z, x)",
        "Medalist(u, v)"
      ],
      "fol_consts": [
        "olympic",
        "bg",
        "us",
        "tokyo",
        "medals"
      ],
      "fol_rules": [
        "Sporting(olympic)",
        "Olympic(bg, tokyo) ∧ Last(tokyo)",
        "Won(us, medals) ∧ Medalist(tokyo, us)"
      ],
      "fol_conc": "Medalist(last, us)",
      "perplexity": 1.7500580549240112,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Olympic/2, Olympic/0, Last/1, Last/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Olympic/2, Olympic/0, Last/1, Last/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "Last(y, x)",
        "HeldIn(z, y)",
        "WonMostMedalsIn(a, b)"
      ],
      "fol_consts": [
        "olympic",
        "tokyo",
        "united states"
      ],
      "fol_rules": [
        "OlympicGames(olympic) ∧ SportingEvent(olympic)",
        "Last(tokyo, olympic)",
        "WonMostMedalsIn(united states, tokyo)"
      ],
      "fol_conc": "WonMostMedalsIn(united states, olympic)",
      "perplexity": 1.387575387954712,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 412
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "FavoriteAnimal(Max, x)",
        "FromAustralia(x)",
        "AnimalFromContinent(x, y)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LovesToSleep(x)",
        "Koala(y)",
        "NotQuokka(y)"
      ],
      "fol_consts": [
        "Max",
        "Australia"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → FavoriteAnimal(Max, x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → AnimalFromContinent(x, Australia))",
        "∀x (FavoriteAnimal(Max, x) → VeryFluffy(x))",
        "∀x (FavoriteAnimal(Max, x) → LovesToSleep(x))",
        "∀y ((Koala(y) ∧ VeryFluffy(y)) → NotQuokka(y))"
      ],
      "fol_conc": "∃y (Koala(y) ∧ LovesToSleep(y))",
      "perplexity": [
        1.2356595993041992,
        1.1217081546783447
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleepy(x)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "animal",
        "australia",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Animal(x) → (Loved(y, x) → Favorite(max, y)))",
        "∀x ((From(x, australia) ∧ Animal(x)) → Loved(tourist, x))",
        "∀x ((Quokka(x) → From(x, australia)))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleepy(x))",
        "(Koala(k) ∧ Fluffy(k)) → ¬Quokka(k)"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 1.3223050832748413,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Koala/1, Koala/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Koala/1, Koala/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimal(y, x)",
        "FromAustralia(z)",
        "Is(w, z)",
        "VeryFluffy(u)",
        "LoveToSleep(v)"
      ],
      "fol_consts": [
        "animals",
        "tourists",
        "Max's favorite animals",
        "quokka",
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedBy(x, tourists) → FavoriteAnimal(x, Max's favorite animals))",
        "∀z (FromAustralia(z) ⊕ LovedBy(animals, tourists))",
        "∀w (Is(quokka, w) → FromAustralia(animals))",
        "FavoriteAnimal(Max's favorite animals, x) ∧ VeryFluffy(x)",
        "(LovedBy(koala, Max's favorite animals) ⊕ LoveToSleep(koala))"
      ],
      "fol_conc": "LoveToSleep(koala)",
      "perplexity": 1.7339708805084229,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 413
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOfBakedByMelissa(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))",
        "DriedThaiChilies(dried_thai_chilies)",
        "(Spicy(dried_thai_chilies) ∨ Bakery(dried_thai_chilies)) → (Hotpot(dried_thai_chilies) ∨ Spicy(dried_thai_chilies))"
      ],
      "fol_conc": "ProductOfBakedByMelissa(dried_thai_chilies)",
      "perplexity": [
        1.1512373685836792,
        1.0575222969055176
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "baked",
        "melissa",
        "dried"
      ],
      "fol_rules": [
        "¬Bakery(x) ∧ Spicy(x)",
        "Cupcake(x) → Bakery(x)",
        "Hotpot(x) → Spicy(x)",
        "Product(baked, melissa, x) → Cupcake(x)",
        "Spicy(dried) ∨ Bakery(dried) → Hotpot(dried) ∨ Spicy(dried)"
      ],
      "fol_conc": "Product(baked, melissa, dried)",
      "perplexity": 1.3038133382797241,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬(∃x (Bakery(x) ∧ Spicy(x)))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(baked by melissa, x) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "ProductOf(baked by melissa, dried thai chilies)",
      "perplexity": 1.143490195274353,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 414
  },
  {
    "id": 199,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "No one playing for Nautico is Brazilian.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "Player(x)",
        "LoanedOutTo(x, y)",
        "BrazillianFootballer(x)",
        "PlaysFor(x, y)",
        "Club(y)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailtonSilva",
        "braga",
        "nautico",
        "fluminense",
        "],"
      ],
      "fol_rules": [
        "Born(ailtonSiliva,1995): Ailton Silva was born in 1995.",
        "KnownAs(ailtonSilva,\\\"Atilon\\\"): Ailton Silva is commonly known as Atilon.",
        "Player(\\\"Atlon\\\") \\wedge LoanedOutTo(\\\"Atlon\\\",braga): Ailton is a football player who was loaned out to Braga.",
        "BrazillianFootballer(ailtonSilva) ∧ PlaysFor(ailtonSiliva,nautico): Ailton Silva is a Brazilian footballer who plays for Nautico.",
        "Club(nautico) \\wedge Club(braga): Nautico and Braga are football clubs.",
        "Club(fluminense): Fluminesse is a football club."
      ],
      "fol_conc": "\neg\\exists x (PlaysFor(x, nautico) ∧ Brazilian(x))",
      "perplexity": [
        1.199383020401001,
        1.6684678792953491
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Born(ailtonSiliva,1995): Ailton Silva was born in 1995."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Commonlyknownas(x, y)",
        "Footballplayer(x)",
        "Loanedoutto(x, y)",
        "Playsfor(x, y)",
        "Isafootballerfrom(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "nautico",
        "braga",
        "fluminense"
      ],
      "fol_rules": [
        "Born(silva, xtuples)",
        "Commonlyknownas(ailton, silva)",
        "Footballplayer(x) ∧ Loanedoutto(x, braga)",
        "Playsfor(x, nautico)",
        "Isafootballerfrom(silva, brazil)"
      ],
      "fol_conc": "¬Exist(y) ∨ (Born(y, brazil))",
      "perplexity": 1.8936891555786133,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "KnownAs(x, y)",
        "Born(x, y)",
        "FootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "IsA(x, y)",
        "Club(z)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "brazillian",
        "1995"
      ],
      "fol_rules": [
        "KnownAs(silva, ailton)",
        "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
        "IsA(silva, brazillian) ∧ PlaysFor(silva, nautico)",
        "Club(nautico) ∧ Club(braga)",
        "Club(ailton)"
      ],
      "fol_conc": "¬((PlaysFor(x, nautico)) → IsA(x, brazillian))",
      "perplexity": 1.530170202255249,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 415
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "ComposerWritesMusicPiece(y, z)",
        "Premiers(w, x)",
        "Orchestra(v)",
        "Leads(u, v)",
        "Conductor(t)"
      ],
      "fol_consts": [
        "symphony_no_9",
        "beethoven",
        "vienna_music_society"
      ],
      "fol_rules": [
        "MusicPiece(symphony_no_9): Symphony No. 9 is a music piece.",
        "∀y ∃z (ComposerWritesMusicPiece(y, z)): Composers write music pieces.",
        "ComposerWritesMusicPiece(beethoven, symphony_no_9): Beethoven wrote Symphony No. 9.",
        "Premiers(vienna_music_society, symphony_no_9): Vienna Music Society premiered Symphony No. 9.",
        "Orchestra(vienna_music_society): Vienna Music Society is an orchestra.",
        "Leads(beethoven, vienna_music_society): Beethoven leads the Vienna Music Society.",
        "∀u ∃v (Leads(u, v) → Orchestra(v)): Orchestras are led by conductors.",
        "(Orchestra(w) → Premiers(w, x)) & MusicPiece(x): Some orchestras premiered music pieces."
      ],
      "fol_conc": "∃v ∃y (MusicPiece(y) ∧ Orchestra(v) ∧ Premiers(v, y)): Some orchestras premiered music pieces.",
      "perplexity": [
        1.1702264547348022,
        1.07967209815979
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony_no_9): Symphony No. 9 is a music piece."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Musicpiece(x)",
        "Composerwrites(y, x)",
        "Beethovenwrote(z)",
        "Premieredbyorchestra(a, b)",
        "Orchestra(c)",
        "Leadsorchestra(d, e)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusicsociety"
      ],
      "fol_rules": [
        "Musicpiece(symphony9)",
        "∀x (Composerwrites(y, x))",
        "Beethovenwrote(symphony9) → Composerwrites(beethoven, symphony9)",
        "Premieredbyorchestra(viennamusicsociety, symphony9)",
        "Orchestra(viennamusicsociety)",
        "Leadsorchestra(beethoven, viennamusicsociety) → Composerwrites(beethoven, symphony9)",
        "∀x (Orchestra(x))"
      ],
      "fol_conc": "∃z (Musicpiece(z) ∧ Premieredbyorchestra(viennamusicsociety, z))",
      "perplexity": 1.5666359663009644,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "ComposerWrites(y, x)",
        "Wrote(z, y, x)",
        "OrchestraPremiered(w, x)",
        "OrchestraPremiered(v, z, w, x)",
        "Leads(t, u, v)",
        "MusicPiece(p)",
        "ComposerWrites(c, p)"
      ],
      "fol_consts": [
        "symphony no. 9",
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "MusicPiece(symphony no. 9)",
        "∀x (ComposerWrites(y, x))",
        "Wrote(beethoven, symphony no. 9)",
        "OrchestraPremiered(vienna music society, symphony no. 9)",
        "OrchestraPremiered(w, x)",
        "Leads(t, u, v)"
      ],
      "fol_conc": "∃x (MusicPiece(p) ∧ ComposerWrites(c, p))",
      "perplexity": 1.9055601358413696,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "MusicPiece(symphony no. 9)"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 416
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "e"
      ],
      "fol_rules": [
        "(∀x ((Event(x) → Happy(x)) ⊕ Sad(x)))",
        "(∃e (Happy(e) ∧ Event(e)))"
      ],
      "fol_conc": "¬∃e (Happy(e)) → ∀x ((Event(x) → Sad(x)))",
      "perplexity": [
        1.397430658340454,
        1.2223658561706543
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "e1",
        "e2"
      ],
      "fol_rules": [
        "∀x (Event(x) → (Happy(x) ⊕ Sad(x)))",
        "¬(Happy(e1))"
      ],
      "fol_conc": "∀x (Event(x) → Sad(x))",
      "perplexity": 2.5677337646484375,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "event"
      ],
      "fol_rules": [
        "∀x (Happy(x) ⊕ Sad(x))",
        "∃x (Happy(x))"
      ],
      "fol_conc": "∀y (Sad(y))",
      "perplexity": 1.4209630489349365,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 417
  },
  {
    "id": 137,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "If something is a household appliance, it sucks.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sucks(x)",
        "Vacuum(x)",
        "Plunger(x)",
        "Duster(y)",
        "HouseholdAppliance(z)"
      ],
      "fol_consts": [
        "Space",
        ""
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Sucks(x))",
        "∀x (Vacuum(x) → Sucks(x))",
        "∀x (Vampire(x) → Sucks(x))",
        "(Space = Vacuum)",
        "(∃y (Duster(y) ∧ HouseholdAppliance(y))) ∧ (¬Sucks(y))"
      ],
      "fol_conc": "∀z (HouseholdAppliance(z) → Sucks(z))",
      "perplexity": [
        1.1574909687042236,
        1.2089123725891113
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Space = Vacuum)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Plunger(x)",
        "Duster(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Suck(x))",
        "∀x (Vacuum(x) → Suck(x))",
        "∀x (Vampire(x) → Suck(x))",
        "Vacuum(space)",
        "(Duster(x) ∧ Household(x)) → ¬Suck(x)"
      ],
      "fol_conc": "∀y ((Household(y) ∨ Duster(y)) → Suck(y))",
      "perplexity": 1.4272080659866333,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "IsVacuum(x)",
        "IsVacuum(y)"
      ],
      "fol_consts": [
        "plunger",
        "vaccum",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "IsVacuum(space)",
        "IsVacuum(x) ∧ IsVacuum(y) → Suck(x)"
      ],
      "fol_conc": "IsVacuum(duster) ∨ IsVacuum(householdappliance)",
      "perplexity": 2.324612617492676,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 418
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesAid(z, w)",
        "HasHardship(w)",
        "SingleParentFamily(v)",
        "OutOfWork(u, v)",
        "GREApplicant(t)",
        "ProvesHardship(w, x)"
      ],
      "fol_consts": [
        "tom",
        "gre_test",
        "ets",
        "usd_205"
      ],
      "fol_rules": [
        "Costs(gre_test, usd_205): It costs US $205 to take the GRE test.",
        "ProvidesAid(ets, w) → HasHardship(w): ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "∀x (HasHardship(x) → DifficultyCausedByMoneyOrResources(x)): Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "SingleParentFamily(tom): Tom lives in a single-parent family.",
        "OutOfWork(dad, tom): His dad has been out of work for more than a year.",
        "GREApplicant(tom): Tom is a GRE applicant (implicit from the context).",
        "∀x ((SingleParentFamily(y) ∧ OutOfWork(z, y)) → HasHardship(y)): If someone lives in a single-parent family and their parent has been out of work for more than a year, they have economic hardship.",
        "HasHardship(tom): From rules 4, 5, and 7, Tom has economic hardship.",
        "ProvidesAid(ets, tom) → ProvesHardship(tom, ets): ETS provides financial aid to those GRE applicants who prove economic hardship (rule 2).",
        "ProvesHardship(tom, ets): From rule 8 and the context that Tom is a GRE applicant, he can prove his economic hardship to ETS."
      ],
      "fol_conc": "ProvidesAid(ets, tom)",
      "perplexity": [
        1.268706202507019,
        1.053062915802002
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Costs(gre_test, usd_205): It costs US $205 to take the GRE test."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provides(z, x, y)",
        "Financialaid(z, x)",
        "Economichardship(x, y)",
        "Livein(x, y)",
        "Unemployedfor(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "usd205",
        "singleparentfamily",
        "morethanyear",
        "difficultycausedbylackingmoneyandresources"
      ],
      "fol_rules": [
        "Cost(gre, usd205)",
        "Provides(ets, gre, x) → Financialaid(ets, x)",
        "Economichardship(x, y) ↔ Difficultycausedbylackingmoneyandresources(x, y)",
        "Livein(tom, singleparentfamily)"
      ],
      "fol_conc": "Financialaid(ets, tom)",
      "perplexity": 1.5844446420669556,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cost(x, y)",
        "ProvideFinancialAid(z, x)",
        "ProvideFinancialAid(z, y)",
        "EconomicHardship(x)",
        "LiveInSingleParentFamily(x)",
        "OutOfWork(y)"
      ],
      "fol_consts": [
        "tom",
        "$205",
        "ETS"
      ],
      "fol_rules": [
        "Cost(GRE test, $205)",
        "ProvideFinancialAid(ETS, x) ↔ (ProvideFinancialAid(x, ETS) ∧ EconomicHardship(x))",
        "EconomicHardship(x) → LiveInSingleParentFamily(x) ⊕ OutOfWork(y)",
        "(LiveInSingleParentFamily(tom) ∨ OutOfWork(d))"
      ],
      "fol_conc": "ProvideFinancialAid(ETS, tom)",
      "perplexity": 1.7800887823104858,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 419
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "BornInYear(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazilian(x)",
        "PlaysFor(x, y)",
        "FootballClub(z)",
        "Team(u)",
        "Includes(a, b)"
      ],
      "fol_consts": [
        "aitlon_silva",
        "braga",
        "fluminense",
        "nautico",
        "brazilian",
        "1995",
        "aitlon",
        "football_player"
      ],
      "fol_rules": [
        "Person(aitlon_silva) ∧ BornInYear(aitlon_silva, 1995) ∧ KnownAs(aitlon_silva, aitlon)",
        "FootballPlayer(aitlon) ∧ LoanedOutTo(aitlon, braga)",
        "Person(aitlon_silva) ∧ Brazilian(aitlon_silva) ∧ PlaysFor(aitlon_silva, nautico)",
        "FootballClub(braga) ∧ FootballClub(nautico) ∧ Includes([braga, nautico], football_clubs)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "¬∃y (LoanedOutTo(aitlon, y)) ∧ FootballClub(y)",
      "perplexity": [
        1.2822799682617188,
        1.0382438898086548
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(z)"
      ],
      "fol_consts": [
        "aitlon",
        "silva",
        "nautico",
        "braga",
        "fluminense",
        "brazilian",
        "footballplayer",
        "footballclub",
        "loanedoutto",
        "playfor",
        "bornin",
        "commonlyknownas"
      ],
      "fol_rules": [
        "Born(silva, xtu1995)",
        "Known(aitlon, silva)",
        "Footballer(aitlon)",
        "Loaned(footballplayer, loanedoutto)",
        "Plays(brazilian, playsfor)",
        "Club(nautico)",
        "Club(braga)",
        "Club(fluminense)"
      ],
      "fol_conc": "(¬Loaned(x))",
      "perplexity": 2.015777587890625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loaned/2, Loaned/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loaned/2, Loaned/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "PlaysFor(x, y)",
        "LoanedTo(x, y)",
        "IsFootballClub(z)"
      ],
      "fol_consts": [
        "aitlon",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "Born(aitlon, 1995)",
        "KnownAs(aitlon, ailton silva)",
        "PlaysFor(aitlon, braga) ∧ LoanedTo(aitlon, braga)",
        "IsFootballClub(nautico)",
        "IsFootballClub(braga)",
        "LoanedTo(x, y) → IsFootballClub(y)"
      ],
      "fol_conc": "¬LoanedTo(aitlon, z)",
      "perplexity": 1.767911672592163,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 420
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "VisitedBy(x, y)",
        "LocatedIn(x, y)",
        "Mine(x)"
      ],
      "fol_consts": [
        "picuris",
        "texas",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∀x (MountainRange(x) → LocatedIn(x, New Mexico))",
        "∀x (LocatedIn(x, Texas) ∧ Mine(x)) → ¬ MountainRange(x)",
        "∃x (VisitedBy(juan_de_onate,MountainRange(texas))) "
      ],
      "fol_conc": "∃x (VisitedBy(juan_de_Onate, MountainRange(texas)))}",
      "perplexity": [
        2.021256923675537,
        1.2044757604599
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (VisitedBy(juan_de_onate,MountainRange(texas)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Visit(x, y)",
        "Location(x, y)",
        "Mine(x)",
        "Donate(x)"
      ],
      "fol_consts": [
        "picuris",
        "texas"
      ],
      "fol_rules": [
        "∀x (Mountain(x) ∨ Location(x, picuris))",
        "(Juandeonatevisit(x) ∧ Mountain(x))",
        "(Location(x, picuris) → Mine(x))",
        "¬Mine(x) ∧ Texasmountain(x) → Donate(x)",
        "Texasmountain(x)"
      ],
      "fol_conc": "Visit(juandeonate, texas)",
      "perplexity": 1.8778008222579956,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Visited(x)"
      ],
      "fol_consts": [
        "Picuris Mountains",
        "Texas",
        "Juan de Onate",
        "Harding Pegmatite Mine",
        "New Mexico"
      ],
      "fol_rules": [
        "∃x (LocatedIn(Picuris Mountains, Texas)) ∨ ∃x (LocatedIn(Picuris Mountains, New Mexico))",
        "Visited(Juan de Onate, Picuris Mountains)",
        "∀x (Visited(y) → LocatedIn(x, y))"
      ],
      "fol_conc": "Visited(Juan de Onate, Texas)",
      "perplexity": 2.975429058074951,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Visited/1, Visited/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Visited/1, Visited/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 461
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Mammal(x)",
        "Bird(x)",
        "Fly(x, y)",
        "Breathe(x)",
        "Winged(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Animal(x) → Mammal(x))",
        "∀x (Mammal(x) ∧ Bird(x) ∧ Animal(x) → Fly(x))",
        "∀x (Bird(x) → Winged(x))",
        "∀x  (Animal(x) → Breathe(x))"
      ],
      "fol_conc": "Rock is Mammal",
      "perplexity": [
        2.3614706993103027,
        1.060038685798645
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Rock is Mammal"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∀x (Monkey(x) ∧ Mammal(x))",
        "∀x (Animal(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) ∧ Breathe(x))",
        "¬Fly(x) → ¬Wings(x)",
        "(Not(fly) ∨ Not(breath))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.3496768474578857,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fly/1, Fly/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fly/1, Fly/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Fly(x)",
        "Breathe(x)",
        "Mammal(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∀x (Mammal(x) → (Animal(x) ∨ Mammal(x)))",
        "∀x (Fly(x) → (Animal(x) ∧ Breathe(x)))",
        "(Mammal(x) ∧ Fly(x)) ⊕ (Animal(x) ∧ Breathe(x))"
      ],
      "fol_conc": "Mammal(Rock)",
      "perplexity": 1.9306331872940063,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 462
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Japanese(x)",
        "Top10List(x)",
        "SoldMoreThanOneMillion(x, y)",
        "CreatedBy(y)"
      ],
      "fol_consts": [
        "Zelda"
      ],
      "fol_rules": [
        "\t∀x (Company(x) → Japanese(x))",
        "\t∀x (Game(x) ∧ Company(x))",
        "\t∀x (Top10List(x) → Game(x) ∧ SoldMoreThanOneMillion(x, y))",
        "\t"
      ],
      "fol_conc": "The Legend of Zelda is in the Top 10 list",
      "perplexity": [
        1.822733759880066,
        1.2631988525390625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The Legend of Zelda is in the Top 10 list"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Created(x, y)",
        "Top10(x)",
        "Sells(x, y)"
      ],
      "fol_consts": [
        "thelegendofzelda",
        "japanese"
      ],
      "fol_rules": [
        "∀x (Company(x) → Game(x))",
        "∀x (Game(x) ∧ Top10(x) → Company(x))",
        "(Sells(game, million)) → Top10(game)",
        "Thelegendofzelda(game)"
      ],
      "fol_conc": "Top10(thelegendofzelda)",
      "perplexity": 1.5442975759506226,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Game/1, Game/0, Thelegendofzelda/1, Thelegendofzelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Game/1, Game/0, Thelegendofzelda/1, Thelegendofzelda/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "created(x, y)",
        "isGameCompany(y)",
        "sellsMoreThanOneMillionCopies(x)",
        "inTop10List(x)"
      ],
      "fol_consts": [
        "the Legend of Zelda",
        "Japanese game company",
        "Top 10 list",
        "Japanese game company"
      ],
      "fol_rules": [
        "(created(x, y)) → isGameCompany(y)",
        "(isGameCompany(y) ∧ sellsMoreThanOneMillionCopies(x)) ∧ inTop10List(x)"
      ],
      "fol_conc": "inTop10List(the Legend of Zelda)",
      "perplexity": 2.181828022003174,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 463
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Building(x)",
        "Deposit(x, y)",
        "Pet(x)",
        "Rented(x, y)",
        "AllowedInBuilding(x)"
      ],
      "fol_consts": [
        "Fluffy",
        "OliveGarden",
        "Tom",
        "2000$",
        "MonthlyRent(x)"
      ],
      "fol_rules": [
        "∀x (Building(x) → Deposit(x, ≥ MonthlyRent(x)))",
        "(Pet(Fluffy) & Rented(Tom, OliveGarden))",
        "Deposit(OliveGarden, y)",
        "MonthlyRent(OliveGarden) = $2000",
        "∃x (Pet(x)) & Deposit(x, x)",
        "Tom rents an apartment in a managed building",
        "Deposit(OliveGarden, y) > 1500",
        "∃x (Pet(Fluffy)) & Deposit(OliveGarden, x)"
      ],
      "fol_conc": "Deposit(OliveGarden, ≥ MonthlyRent(OliveGarden))",
      "perplexity": [
        2.2000205516815186,
        1.1280587911605835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Building(x) → Deposit(x, ≥ MonthlyRent(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allowed(x, y)",
        "Deposit(y)",
        "Pet(x)",
        "Rent(y)"
      ],
      "fol_consts": [
        "pets",
        "managed",
        "olivegarden",
        "tom",
        "fluffy"
      ],
      "fol_rules": [
        "∃x (Allowed(x, olivegarden)) ∧ Deposit(x) → Rent(x)",
        "∀x (Pet(x) → Allowed(x, managed)) ∧ Deposit(x) → Rent(x)"
      ],
      "fol_conc": "Deposit(olivegarden)",
      "perplexity": 1.6215742826461792,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PetIs(x)",
        "RentEquals(x, y)",
        "DepositRequired(x)",
        "AllowedIn(x)",
        "RentEquals(y, z)"
      ],
      "fol_consts": [
        "Fluffy",
        "Tom",
        "Olive Garden",
        "managed building",
        "pets",
        "pets"
      ],
      "fol_rules": [
        "(PetIs(x) ∧ AllowedIn(x)) → (DepositRequired(x))",
        "(AllowedIn(x) ∧ DepositRequired(x)) → RentEquals(x, y)",
        "(RentEquals(x, y) ∨ DepositRequired(x))"
      ],
      "fol_conc": "DepositRequired(Olive Garden)",
      "perplexity": 3.2092714309692383,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 464
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "Composes(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "\n  \t HasAccess(george, program) → Composes(george)\n",
        "\n     WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
      ],
      "fol_conc": "Composes(george)",
      "perplexity": [
        1.8436528444290161,
        1.517404317855835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "(Likes(george) ∧ Has(george, program)) → Compose(george)"
      ],
      "fol_conc": "Compose(george)",
      "perplexity": 1.9979276657104492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantToCompose(y)",
        "CanCompose(x, y)"
      ],
      "fol_consts": [
        "George",
        "George"
      ],
      "fol_rules": [
        "∀x (Likes(x, m) → WantToCompose(x))",
        "∀x (CanCompose(x, p) ∧ WantToCompose(x) → CanCompose(x, p))",
        "∃x (CanCompose(x, y) ∧ Likes(x, m) ∧ WantToCompose(x))"
      ],
      "fol_conc": "CanCompose(George, y)",
      "perplexity": 2.0636627674102783,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 465
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "breed_back(x, y)",
        "animal(x)",
        "extinct(y)",
        "resembles(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed_back(x, auroch) → extinct(auroch))",
        "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],  ",
        "fol_conc"
      ],
      "fol_conc": "extinct(aurochs)",
      "perplexity": [
        2.5359489917755127,
        3.612553596496582
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x)",
        "Artificial(y)",
        "Animals(x)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "breeding",
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Breedin(x)) → ∃y (Animal(y) ∧ Artificial(y))"
      ],
      "fol_conc": "Aurochs(is)",
      "perplexity": 2.0227158069610596,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "breed-back(x)",
        "animal(x)",
        "resemble(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs",
        "breeding",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed-back(x) → animal(x))",
        "∃x (breed-back(heck cattle) ∧ breed-back(aurochs))",
        "∃y (animal(y) ∧ resemble(heck cattle, y))"
      ],
      "fol_conc": "¬(∃x (resemble(aurochs, x)))",
      "perplexity": 2.7038025856018066,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Breed-back(x)) -> (Animal(x)))\n             ^"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 466
  },
  {
    "id": 195,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Leaderboard(x)",
        "Participated(x, y)",
        "FromCountry(x, country)",
        "Winner (x)"
      ],
      "fol_consts": [
        "Steinhauer",
        "Descampe"
      ],
      "fol_rules": [
        "∀x (Leaderboards(x) → Participated(x, duMaurierClassic))",
        ",  /* Rule 1 */ ∃x (Leaderboards(x) ∧ FromCountry(x, Belgium) and Leaderboards(x)), /* Rule 2 */"
      ],
      "fol_conc": "Descampe is in the six-way tie of the du Maurier Classic leaderboard",
      "perplexity": [
        2.6767239570617676,
        1.6118606328964233
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  /* Rule 1 */ ∃x (Leaderboards(x) ∧ FromCountry(x, Belgium) and Leaderboards(x)), /* Rule 2 */"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Win(x)",
        "Participate(x, y)",
        "Leaderboards(y)",
        "From(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "dumaurierclassic1992"
      ],
      "fol_rules": [
        "∀x (Win(x) ∧ Participate(x, dumaurieclassic1992))",
        "∃y (Leaderboards(y) ∧ From(descampe, y))",
        "Existential(leaderboard)",
        "All(participated)"
      ],
      "fol_conc": "Descampe(from)",
      "perplexity": 2.1030733585357666,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Descampe/1, Descampe/0, From/2, From/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Descampe/1, Descampe/0, From/2, From/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "Participated(x, y)",
        "From(x, y)",
        "SixWayTie(x)",
        "IsOnLeaderboard(y)"
      ],
      "fol_consts": [
        "1992 du Maurier Classic",
        "Steinhauer",
        "Descampe"
      ],
      "fol_rules": [
        "∀x (Winner(x) → Participated(x, 1992 du Maurier Classic))",
        "∃x ∃y (Participated(x, y) ∧ SixWayTie(y))",
        "SixWayTie(y) ∧ From(Descampe, y)",
        "IsOnLeaderboard(y) ∧ Participated(y, 1992 du Maurier Classic)",
        "∀x (IsOnLeaderboard(x) → Participated(x, 1992 du Maurier Classic))"
      ],
      "fol_conc": "IsOnLeaderboard(Descampe)",
      "perplexity": 1.6095887422561646,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 467
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "Read(x, y)",
        "Knowledge(y)",
        "SmarterThan(x, y)"
      ],
      "fol_consts": [
        "harry",
        "Walden"
      ],
      "fol_rules": [
        "\t ∀ x (Book(x) → Knowledge(x))",
        "\t ∀ x (Read(x, book) → Knowledge(book))",
        "\t ∀ x (Knowledge(x) → SmarterThan(x, initial_knowledge))"
      ],
      "fol_conc": "Smarter than Harry before reading Walden",
      "perplexity": [
        2.220659017562866,
        1.1864593029022217
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Smarter than Harry before reading Walden"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "Gainknowledge(y)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henrythoreau"
      ],
      "fol_rules": [
        "∀x (Contains(x, y) → ∃z (Read(z, x)))",
        "∀x (Reads(x, y) ∧ Gainknowledge(y)) ∧ (Smarter(x) ∨ ¬Smarter(x))"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 1.609443187713623,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Read(x, y)",
        "GainKnowledge(y)",
        "SmarterThan(x, y)"
      ],
      "fol_consts": [
        "Harry",
        "Walden",
        "Henry Thoreau"
      ],
      "fol_rules": [
        "∀x (Read(x, y) → GainKnowledge(y))",
        "∀x ∀y (GainKnowledge(y) → SmarterThan(x, y))",
        "∃x (Read(Harry, Walden) ∧ Read(t, Walden))"
      ],
      "fol_conc": "SmarterThan(Harry, x)",
      "perplexity": 1.5752694606781006,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 468
  },
  {
    "id": 181,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "John flies to LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Airport(x)",
        "DepartureAirport(x, y)",
        "ArrivalAirport(x, y)",
        "FlyToAirport(x, y)"
      ],
      "fol_consts": [
        "John",
        "LGA"
      ],
      "fol_rules": [
        "∀x ∃y ∀z (DepartureAirport(x, z) → ArrivalAirport(x, y))"
      ],
      "fol_conc": "FlyToLGA(John)",
      "perplexity": [
        2.2581052780151367,
        1.166481614112854
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Fly(x, y)",
        "Depart(y, z)",
        "Arrive(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "∀x (Fly(x, lga) → ¬Depart(lga, x)) ∧ ¬(Fly(x, lga) → Arrive(x, lga))",
        "(John(fly) ∧ Depart(lga, john) ∨ John(fly) ∧ Arrive(john, lga))"
      ],
      "fol_conc": "John(fly)",
      "perplexity": 1.8482999801635742,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "FliesTo(x, y)",
        "DepartureAndArrivalCannotBeSameAirport(y)"
      ],
      "fol_consts": [
        "Susan",
        "LGA"
      ],
      "fol_rules": [
        "∀x (FliesTo(Susan, x)) ∧ ¬DepartureAndArrivalCannotBeSameAirport(Susan, LGA)",
        "∀x (FliesTo(x, LGA) → FliesTo(Susan, LGA))"
      ],
      "fol_conc": "FliesTo(LGA, Susan)",
      "perplexity": 1.7422852516174316,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 469
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "American(x)",
        "Tall(x)",
        "ShoesSize(x, y)",
        "ClothesSize(x, y)"
      ],
      "fol_consts": [
        "Yuri"
      ],
      "fol_rules": [
        "∀x (Player(x) → Tall(x))",
        "∀x (ShoesSize(x, Large) → ClothesSize(x, Large))"
      ],
      "fol_conc": "Yuri is American",
      "perplexity": [
        1.841971516609192,
        1.074521541595459
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yuri is American"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(x)"
      ],
      "fol_consts": [
        "yuri",
        "american"
      ],
      "fol_rules": [
        "∃x (Basketball(x)) ∧ ¬American(x)",
        "(Tall(x)) → Wear(x, large)",
        "(Wear(x, large)) → Large(clothes)"
      ],
      "fol_conc": "Yuri(is) ∨ American(yuri)",
      "perplexity": 1.8890341520309448,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "American(x)",
        "Tall(x)",
        "Tall(x)"
      ],
      "fol_consts": [
        "Yuri",
        "Yuri"
      ],
      "fol_rules": [
        "∀x (American(x) → ¬Tall(x))",
        "∀x (Tall(x) ∧ (¬Tall(y)))"
      ],
      "fol_conc": "American(Yuri)",
      "perplexity": 3.4957547187805176,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 470
  },
  {
    "id": 129,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John does not have a wedding that is well-attended.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Weddings(x)",
        "Children(x)",
        "TravelToParisForHoneymoon(x)",
        "JulyWedding(x,y)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "John"
      ],
      "fol_rules": [
        "∀x (Weddings(x) → Children(x))",
        "∀x (TravelToParisForHoneymoon(x) → Weddings(x))",
        "∀x (JulyWedding(x,y) → TravelToParisForHoneymoon(x))",
        ", 3.  "
      ],
      "fol_conc": "∃x ¬ WellAttended(John)",
      "perplexity": [
        1.9284031391143799,
        1.6435260772705078
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", 3."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travels(x, y)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (Travels(x, paris) ∧ Wedding(x))",
        "∀w (Weddings(x, july) → Travels(x, paris))",
        "∃y (Wellattended(y) ∧ Weddings(john, july))",
        "(Child(john) ∧ ¬Travels(john, paris)) ∧ ¬Wedding(john)",
        "∃y (Wellattended(y) ∧ Wedding(john, july) ∨ ¬Wedding(john) → Travels(john, paris))"
      ],
      "fol_conc": "¬Wellattended(john)",
      "perplexity": 1.490204095840454,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/2, Wedding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/2, Wedding/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasWedding(x)",
        "HasWedding(y, x)",
        "HasWedding(y, z)",
        "TravelToParisForHoneymoon(x)",
        "HasWedding(x)"
      ],
      "fol_consts": [
        "John",
        "July",
        "John"
      ],
      "fol_rules": [
        "∀x (HasWedding(x) → HasWedding(x))",
        "∀x (TravelToParisForHoneymoon(x) ∧ HasWedding(x))",
        "∀x (HasWedding(x) ∧ TravelToParisForHoneymoon(x) ∧ HasWedding(x, x))",
        "(HasWedding(John) ∧ TravelToParisForHoneymoon(John) ∧ HasWedding(John, John)) → ¬TravelToParisForHoneymoon(John)",
        "∀x (HasWedding(x) ∧ TravelToParisForHoneymoon(x) ∧ HasWedding(x, x))",
        "∃x (HasWedding(x) ∧ HasWedding(x, John) ∧ HasWedding(John, y))"
      ],
      "fol_conc": "¬HasWedding(John, y)",
      "perplexity": 2.6945762634277344,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasWedding/1, HasWedding/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasWedding/1, HasWedding/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 471
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x,y)"
      ],
      "fol_consts": [
        "Netflix",
        "Stranger Things",
        "Black Mirror",
        "Karen",
        "Lisa"
      ],
      "fol_rules": [
        "Popular(Netflix_show) → BingeWatch(Karen, Netflix_show)",
        "BingeWatch(Karen, Netflix_show) ⟹ Download(Karen, Netflix_show)",
        "Black Mirror is a Show."
      ],
      "fol_conc": "Share(Karen, Stranger Things)",
      "perplexity": [
        2.466493606567383,
        1.2511638402938843
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BingeWatch(Karen, Netflix_show) ⟹ Download(Karen, Netflix_show)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Shared(x, y)",
        "Netflix(y)"
      ],
      "fol_consts": [
        "stranger",
        "things",
        "karen",
        "blackmirror",
        "lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → Bingewatch(x, karen))",
        "Bingewatch(x, karen) ∧ Download(x, y) ↔ True(y)",
        "¬Download(karen, blackmirror)",
        "Bingewatch(x, karen) → Shared(x, lisa)",
        "True(blackmirror)"
      ],
      "fol_conc": "Shared(stranger, lisa)",
      "perplexity": 1.7128781080245972,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "ShareTo(x, y)"
      ],
      "fol_consts": [
        "StrangerThings",
        "BlackMirror",
        "Karen",
        "Lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → BingeWatch(Karen, x))",
        "(BingeWatch(Karen, x) ∧ Download(Karen, x)) → ShareTo(Karen, Lisa)",
        "¬Download(Karen, BlackMirror)",
        "BingeWatch(Karen, StrangerThings) → ShareTo(Karen, Lisa)"
      ],
      "fol_conc": "ShareTo(Karen, Lisa)",
      "perplexity": 1.2593355178833008,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 472
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Event(x)",
        "LastEvent(x, y)",
        "WonMedals(x, y)"
      ],
      "fol_consts": [
        "olympic_games",
        "tokyo",
        "united_states"
      ],
      "fol_rules": [],
      "fol_conc": "The world championships is a sporting event.",
      "perplexity": [
        4.0166144371032715,
        1.2792718410491943
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The world championships is a sporting event."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x)",
        "Winning(x, y)"
      ],
      "fol_consts": [
        "worldchampionships",
        "games",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "∀x (Sporting(x)) → ∃y (Olympic(y))",
        "Last(olympic, tokyo)"
      ],
      "fol_conc": "Sporting(worldchampionships)",
      "perplexity": 2.0773000717163086,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Olympic/1, Olympic/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Olympic/1, Olympic/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "WonMedals(x, y)"
      ],
      "fol_consts": [
        "OlympicGames",
        "Tokyo",
        "USA",
        "OlympicGames"
      ],
      "fol_rules": [
        "∃x (SportingEvent(x))",
        "(SportingEvent(x) ∧ WonMedals(x, Tokyo)) → SportingEvent(OlympicGames)"
      ],
      "fol_conc": "SportingEvent(OlympicGames)",
      "perplexity": 4.642244338989258,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 473
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "born_in(x, y)",
        "known_as(x, y)",
        "plays_for(x, y)",
        "footballer(x)"
      ],
      "fol_consts": [
        "Ailton_Silva",
        "1995",
        "Brazillian",
        "Fluminense"
      ],
      "fol_rules": [
        ""
      ],
      "fol_conc": "plays_for(Ailton_Silva, Fluminense)",
      "perplexity": [
        3.268279552459717,
        1.2719157934188843
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Knows(x, y)",
        "Plays(x, y)",
        "Loaned(x, y)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∀x (Born(x, yyy)) → Knows(x, ailton)",
        "Plays(ailton) ∧ Loaned(ailton, bragao) → Is(ailton, nautico)"
      ],
      "fol_conc": "Plays(ailton)",
      "perplexity": 1.6594799757003784,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PlayedFor(x, y)",
        "PlayedFor(y)",
        "PlayedFor(x, z)"
      ],
      "fol_consts": [
        "Ailton Silva",
        "Braga",
        "Nautico",
        "Fluminense",
        "Brazillian",
        "1995",
        "Ailton Silva"
      ],
      "fol_rules": [
        "∀x (PlayedFor(x, y) → PlayedFor(y))",
        "∀x (PlayedFor(x, z) → ∃w (PlayedFor(z, w)))",
        "¬(PlayedFor(Ailton Silva, Fluminense))"
      ],
      "fol_conc": "PlayedFor(Ailton Silva, Fluminense)",
      "perplexity": 2.0861611366271973,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PlayedFor/1, PlayedFor/2.\n\n\nFatal error:  The following symbols are used with multiple arities: PlayedFor/1, PlayedFor/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 474
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LoveBy(x, y)",
        "IsFavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "IsKoala(x)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "Max"
      ],
      "fol_rules": [
        "∀x (LoveBy(x, tourists) → IsFavoriteAnimal(x, Max))",
        ". ",
        "\n    * \n    * ∀x (AnimalFromAustralia(x) → LoveBy(x, tourists))\n    *",
        "\n    * ∀x (IsKoala(x) ∧ Fluffy(x))  → ¬IsQuokka(x)",
        "fol_conc"
      ],
      "fol_conc": "Koalas love to sleep.",
      "perplexity": [
        2.1587138175964355,
        1.9064726829528809
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "Australia(x)",
        "Fluffy(x)",
        "Sleeps(x)"
      ],
      "fol_consts": [
        "max",
        "koalas",
        "animals",
        "tourists",
        "quokkas"
      ],
      "fol_rules": [
        "∀x (Loved(x, tourists) → Favorite(x, max))",
        "All(a) → Australia(a)",
        "All(q) ∧ Animal(q) ∧ Australia(q) → All(max) ∧ Fluffy(max) ∧ Sleeps(max)"
      ],
      "fol_conc": "Sleeps(koalas)",
      "perplexity": 1.6065083742141724,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "Favorite(x, y)",
        "IsA(x, y)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "animals",
        "Max",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∃y (LovedBy(x, y) → Favorite(x, y))",
        "∀a (IsA(a, animals) → LovedBy(a, tourists))",
        "∀a (IsA(a, animals) → IsA(a, Australia))",
        "∀a (IsA(a, quokka) → IsA(a, Australia))",
        "∀x ∃y (Fluffy(x) → Favorite(Max, y))",
        "(Fluffy(x) ∧ Favorite(Max, x) → ¬IsA(x, quokka))"
      ],
      "fol_conc": "LovedBy(koala, tourists)",
      "perplexity": 1.714306116104126,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 475
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Movie(x)",
        "Superhero(x)",
        "Character(x)",
        "GoodGuy(x)",
        "Badguy(x)",
        "WinFight(x, y)"
      ],
      "fol_consts": [
        "Digby",
        "SurprisingAdventuresOfSirDigbyChickenCaesar",
        "Nemesis"
      ],
      "fol_rules": [
        "∀x (Movie(x) → Superhero(x))",
        "∀x (GoodGuy(Character(x)))",
        "(Superhero(SurprisingAdventuresOfSirDigbyChickenCaesar)  → Character(Digby))"
      ],
      "fol_conc": "Badguy(Nemesis)",
      "perplexity": [
        1.7948894500732422,
        1.1258997917175293
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (GoodGuy(Character(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Wins(y, z)",
        "Named(x, y)"
      ],
      "fol_consts": [
        "sir",
        "digby"
      ],
      "fol_rules": [
        "∀x ∀z (Superhero(x) → Wins(x, z))",
        "Surprisingadventuresofsirdidigbchickencaesar(superhero)",
        "Goodguy(x) → Named(x, goodguy)",
        "Named(sirdigby, surprizingadventuresofsiderigbychickeneaser)",
        "Wins(a, b) → ¬Wins(b, a)",
        "Superhero(x) ∧ Named(x, character) → Appears(character, x)"
      ],
      "fol_conc": "¬Wins(diaby, nemesis)",
      "perplexity": 2.4165217876434326,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wins(x)",
        "Fight(x, y)",
        "AppearsInMovie(x)",
        "AppearsInMovie(x)"
      ],
      "fol_consts": [
        "Sir Digby",
        "good guy",
        "bad guy"
      ],
      "fol_rules": [
        "∀x (Wins(x) → Fight(x, y))",
        "∀x ∃y (Fight(x, y) ∧ AppearsInMovie(y))",
        "AppearsInMovie(x)",
        "Wins(Sir Digby) ∧ AppearsInMovie(Sir Digby)"
      ],
      "fol_conc": "Wins(Sir Digby)",
      "perplexity": 2.77581524848938,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 476
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Works(x, y)",
        "NeedsToEarningMoney(x)",
        "OrdersTakeOutFrequently(x)",
        "EatsInDiningHall(x)",
        "IsPickyEater(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Works(x, StudentJob) → NeedsToEarningMoney(x))",
        ", ",
        ", // This is an example of how to add multiple rules. You can remove the comma if you only have one rule. 6457: ",
        "∀x (OrdersTakeOutFrequently(x) → Works(x,StudentJob))",
        ",",
        "∃x (EatsInDiningHall(x) ∨ OrdersTakeoutFrequently(x))",
        ",",
        "], 7082 : },] ",
        "fol_conc",
        "Mary is not a picky eater and spends a lot of time eating and catching up with friends in the campus dining halls.: Mary enjoys dining hall meals and recipes and she spends a lot of her time eating and catching up with friends."
      ],
      "fol_conc": "Mary is not a picky eater and spends a lot of time eating and catching up with friends in the campus dining halls: Mary enjoys dining hall meals and recipes and she spends a lot of her time eating and catching up with friends.",
      "perplexity": [
        1.5484498739242554,
        2.659191608428955
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x, y)",
        "Earnmoney(x)",
        "Ordertakeout(x)",
        "Picky(x)",
        "Spendtime(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x, campus) ∧ Earnmoney(x)) → ¬Picky(x)"
      ],
      "fol_conc": "Notpicky(mary) ∧ Spendtime(mary, dininghall)",
      "perplexity": 1.6419284343719482,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Work(x, y)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallMealsAndRecipes(x)",
        "PickyEaters(x)",
        "SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(x)"
      ],
      "fol_consts": [
        "Mary"
      ],
      "fol_rules": [
        "∀x (Work(x, y) → ∃p (OrderTakeoutFrequently(x) ∧ Work(x, y)))",
        "(EnjoyDiningHallMealsAndRecipes(x)) → ¬PickyEaters(x)",
        "(SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(x) ∨ EnjoyDiningHallMealsAndRecipes(x))"
      ],
      "fol_conc": "¬PickyEaters(Mary) ∧ SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(Mary)",
      "perplexity": 1.7438634634017944,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 477
  },
  {
    "id": 157,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James has a part-time job offered by the university.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkInLibrary(x)",
        "WorksInLab(x)",
        "FromCSDepartment(x)",
        "PartTimeJobOfferedByUniversity(x)"
      ],
      "fol_consts": [
        "James",
        "Jack",
        "David"
      ],
      "fol_rules": [
        "∀x (Student(x) → WorkInLibrary(x))",
        "// All students work in the library.",
        "∀x (WorkInLab(x) ∧ Student(x))",
        "// Students who are working in the lab are also students.",
        "// This is a more specific rule about students and their jobs. ",
        "∀x (FromCSDepartment(x) ∧ PartTimeJobOfferedByUniversity(x))",
        "All members of the computer science department have a part-time job offered by the university.",
        ""
      ],
      "fol_conc": "James has a part-time job offered by the university",
      "perplexity": [
        1.992931604385376,
        1.6443487405776978
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "// All students work in the library."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Parttime(y)",
        "Instruct(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, library)) → ¬Student(x) ∧ Department(x, computercience)",
        "∀x (Parttime(x) ∧ Student(x) ∧ Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) ∧ Instruct(david, x)) → Instruct(david, x)",
        "∀x (Lab(x) ∧ Instruct(david, x))",
        "(James(student) ∧ Work(james, lab))",
        "¬(Jack(student) ∧ Parttime(jack) ∧ Lab(jack))"
      ],
      "fol_conc": "Parttime(james)",
      "perplexity": 1.6386723518371582,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorksInLab(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "FromComputerScienceDepartment(x)",
        "WorkInLibrary(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "James",
        "Jack",
        "university",
        "library"
      ],
      "fol_rules": [
        "∀x (Student(x) → WorksInLab(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) ∧ Student(x) → WorkInLibrary(x))",
        "∀x (FromComputerScienceDepartment(x) ∧ Student(x) → WorksInLab(x))",
        "∀x (Student(x) ∧ Student(x) → HasPartTimeJobOfferedByUniversity(x))"
      ],
      "fol_conc": "HasPartTimeJobOfferedByUniversity(James)",
      "perplexity": 1.767884373664856,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 478
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "EatSalad(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyIntake(x)",
        "HaveGoodParentRelationship(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalad(x) → GrownUpInHealthConsciousHome(x))",
        ",",
        "∀x (HaveGoodParentRelationship(x, y) ∧ FulfillDailyIntake(x)) → EatSalad(x)",
        "∀x (GrewUpInHealthConsciousHome(x) ∧ ¬EatSalad(x))"
      ],
      "fol_conc": "EatSalad(taylor)",
      "perplexity": [
        1.7876778841018677,
        1.3988049030303955
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Healthy(y)",
        "Grewup(x, y)",
        "Good(x, y)",
        "Relationship(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x) → Healthy(x))",
        "∀x (Grewup(x, y) ∧ Eat(x) → Healthy(y))",
        "∀x (Good(x, y) ∧ Eat(x) → Relationship(x, y))",
        "(Relationship(x, y) → Fulfill(x, y))",
        "(Relationship(x, y) → ¬Eat(x))",
        "(Gym(x) ∧ Daily(x)) → Alwaysfulfill(x)",
        "Existential(y1, y2) → (Grewup(y1, y2) ⊕ Existential(y2, y1))"
      ],
      "fol_conc": "Eat(taylor)",
      "perplexity": 1.7171189785003662,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EatSaladRegularly(x)",
        "ConsciousAboutHealthAndEatingHabits(x)",
        "GrewUpInHealthyChildhoodHome(x)",
        "FulfillNutritionalDailyIntake(x)",
        "GoodRelationshipWithParents(x)",
        "GoodRelationshipWithParents(y)",
        "GoodRelationshipWithParents(y)"
      ],
      "fol_consts": [
        "Taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladRegularly(x) → ConsciousAboutHealthAndEatingHabits(x))",
        "∀x (GrewUpInHealthyChildhoodHome(x) ∧ EatSaladRegularly(x))",
        "∀x (FulfillNutritionalDailyIntake(x) ∧ GrewUpInHealthyChildhoodHome(x))",
        "(GoodRelationshipWithParents(x) → FulfillNutritionalDailyIntake(x))",
        "(GoodRelationshipWithParents(x) → ¬EatSaladRegularly(x))",
        "(GoodRelationshipWithParents(y) ∧ GoodRelationshipWithParents(z) → FulfillNutritionalDailyIntake(y))"
      ],
      "fol_conc": "EatSaladRegularly(Taylor)",
      "perplexity": 2.0077388286590576,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 479
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Capital(x)",
        "PopulationSize(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "Capital(Beijing)",
        "PopulationSize(Beijing, p)"
      ],
      "fol_conc": "",
      "perplexity": [
        3.38611102104187,
        1.4317158460617065
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "world"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, china) ∧ Capital(x))",
        "∃x (Hosted(x, beijing) ∧ Ranked(x, asia))",
        "(Ranked(beijing, world) ∨ Ranked(beijing, asia))"
      ],
      "fol_conc": "Not(worldly2ndlargestcity)",
      "perplexity": 1.8451765775680542,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldPopulousCity(y)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "∀x (Capital(x, China)) ∧ Capital(Beijing, x)",
        "Capital(Beijing, China)",
        "WorldPopulousCity(Beijing)",
        "LocatedIn(Beijing, China)"
      ],
      "fol_conc": "∃x (WorldPopulousCity(x) ∧ ¬HostedOlympics(x))",
      "perplexity": 3.035545587539673,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 480
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "VisitedBy(x, y)",
        "LocatedIn(x, y)",
        "Mine(x)"
      ],
      "fol_consts": [
        "picuris",
        "texas",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∀x (MountainRange(x) → LocatedIn(x, New Mexico))",
        "∀x (LocatedIn(x, Texas) ∧ Mine(x)) → ¬ MountainRange(x)",
        "∃x (VisitedBy(juan_de_onate,MountainRange(texas))) "
      ],
      "fol_conc": "∃x (VisitedBy(juan_de_Onate, MountainRange(texas)))}",
      "perplexity": [
        2.021256923675537,
        1.2044757604599
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (VisitedBy(juan_de_onate,MountainRange(texas)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Visit(x, y)",
        "Location(x, y)",
        "Mine(x)",
        "Donate(x)"
      ],
      "fol_consts": [
        "picuris",
        "texas"
      ],
      "fol_rules": [
        "∀x (Mountain(x) ∨ Location(x, picuris))",
        "(Juandeonatevisit(x) ∧ Mountain(x))",
        "(Location(x, picuris) → Mine(x))",
        "¬Mine(x) ∧ Texasmountain(x) → Donate(x)",
        "Texasmountain(x)"
      ],
      "fol_conc": "Visit(juandeonate, texas)",
      "perplexity": 1.8778008222579956,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Visited(x)"
      ],
      "fol_consts": [
        "Picuris Mountains",
        "Texas",
        "Juan de Onate",
        "Harding Pegmatite Mine",
        "New Mexico"
      ],
      "fol_rules": [
        "∃x (LocatedIn(Picuris Mountains, Texas)) ∨ ∃x (LocatedIn(Picuris Mountains, New Mexico))",
        "Visited(Juan de Onate, Picuris Mountains)",
        "∀x (Visited(y) → LocatedIn(x, y))"
      ],
      "fol_conc": "Visited(Juan de Onate, Texas)",
      "perplexity": 2.975429058074951,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Visited/1, Visited/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Visited/1, Visited/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 461
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Mammal(x)",
        "Bird(x)",
        "Fly(x, y)",
        "Breathe(x)",
        "Winged(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Animal(x) → Mammal(x))",
        "∀x (Mammal(x) ∧ Bird(x) ∧ Animal(x) → Fly(x))",
        "∀x (Bird(x) → Winged(x))",
        "∀x  (Animal(x) → Breathe(x))"
      ],
      "fol_conc": "Rock is Mammal",
      "perplexity": [
        2.3614706993103027,
        1.060038685798645
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Rock is Mammal"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∀x (Monkey(x) ∧ Mammal(x))",
        "∀x (Animal(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) ∧ Breathe(x))",
        "¬Fly(x) → ¬Wings(x)",
        "(Not(fly) ∨ Not(breath))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.3496768474578857,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fly/1, Fly/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fly/1, Fly/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Fly(x)",
        "Breathe(x)",
        "Mammal(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∀x (Mammal(x) → (Animal(x) ∨ Mammal(x)))",
        "∀x (Fly(x) → (Animal(x) ∧ Breathe(x)))",
        "(Mammal(x) ∧ Fly(x)) ⊕ (Animal(x) ∧ Breathe(x))"
      ],
      "fol_conc": "Mammal(Rock)",
      "perplexity": 1.9306331872940063,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 462
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Japanese(x)",
        "Top10List(x)",
        "SoldMoreThanOneMillion(x, y)",
        "CreatedBy(y)"
      ],
      "fol_consts": [
        "Zelda"
      ],
      "fol_rules": [
        "\t∀x (Company(x) → Japanese(x))",
        "\t∀x (Game(x) ∧ Company(x))",
        "\t∀x (Top10List(x) → Game(x) ∧ SoldMoreThanOneMillion(x, y))",
        "\t"
      ],
      "fol_conc": "The Legend of Zelda is in the Top 10 list",
      "perplexity": [
        1.822733759880066,
        1.2631988525390625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The Legend of Zelda is in the Top 10 list"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Created(x, y)",
        "Top10(x)",
        "Sells(x, y)"
      ],
      "fol_consts": [
        "thelegendofzelda",
        "japanese"
      ],
      "fol_rules": [
        "∀x (Company(x) → Game(x))",
        "∀x (Game(x) ∧ Top10(x) → Company(x))",
        "(Sells(game, million)) → Top10(game)",
        "Thelegendofzelda(game)"
      ],
      "fol_conc": "Top10(thelegendofzelda)",
      "perplexity": 1.5442975759506226,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Game/1, Game/0, Thelegendofzelda/1, Thelegendofzelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Game/1, Game/0, Thelegendofzelda/1, Thelegendofzelda/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "created(x, y)",
        "isGameCompany(y)",
        "sellsMoreThanOneMillionCopies(x)",
        "inTop10List(x)"
      ],
      "fol_consts": [
        "the Legend of Zelda",
        "Japanese game company",
        "Top 10 list",
        "Japanese game company"
      ],
      "fol_rules": [
        "(created(x, y)) → isGameCompany(y)",
        "(isGameCompany(y) ∧ sellsMoreThanOneMillionCopies(x)) ∧ inTop10List(x)"
      ],
      "fol_conc": "inTop10List(the Legend of Zelda)",
      "perplexity": 2.181828022003174,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 463
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Building(x)",
        "Deposit(x, y)",
        "Pet(x)",
        "Rented(x, y)",
        "AllowedInBuilding(x)"
      ],
      "fol_consts": [
        "Fluffy",
        "OliveGarden",
        "Tom",
        "2000$",
        "MonthlyRent(x)"
      ],
      "fol_rules": [
        "∀x (Building(x) → Deposit(x, ≥ MonthlyRent(x)))",
        "(Pet(Fluffy) & Rented(Tom, OliveGarden))",
        "Deposit(OliveGarden, y)",
        "MonthlyRent(OliveGarden) = $2000",
        "∃x (Pet(x)) & Deposit(x, x)",
        "Tom rents an apartment in a managed building",
        "Deposit(OliveGarden, y) > 1500",
        "∃x (Pet(Fluffy)) & Deposit(OliveGarden, x)"
      ],
      "fol_conc": "Deposit(OliveGarden, ≥ MonthlyRent(OliveGarden))",
      "perplexity": [
        2.2000205516815186,
        1.1280587911605835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Building(x) → Deposit(x, ≥ MonthlyRent(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allowed(x, y)",
        "Deposit(y)",
        "Pet(x)",
        "Rent(y)"
      ],
      "fol_consts": [
        "pets",
        "managed",
        "olivegarden",
        "tom",
        "fluffy"
      ],
      "fol_rules": [
        "∃x (Allowed(x, olivegarden)) ∧ Deposit(x) → Rent(x)",
        "∀x (Pet(x) → Allowed(x, managed)) ∧ Deposit(x) → Rent(x)"
      ],
      "fol_conc": "Deposit(olivegarden)",
      "perplexity": 1.6215742826461792,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PetIs(x)",
        "RentEquals(x, y)",
        "DepositRequired(x)",
        "AllowedIn(x)",
        "RentEquals(y, z)"
      ],
      "fol_consts": [
        "Fluffy",
        "Tom",
        "Olive Garden",
        "managed building",
        "pets",
        "pets"
      ],
      "fol_rules": [
        "(PetIs(x) ∧ AllowedIn(x)) → (DepositRequired(x))",
        "(AllowedIn(x) ∧ DepositRequired(x)) → RentEquals(x, y)",
        "(RentEquals(x, y) ∨ DepositRequired(x))"
      ],
      "fol_conc": "DepositRequired(Olive Garden)",
      "perplexity": 3.2092714309692383,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 464
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "Composes(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "\n  \t HasAccess(george, program) → Composes(george)\n",
        "\n     WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
      ],
      "fol_conc": "Composes(george)",
      "perplexity": [
        1.8436528444290161,
        1.517404317855835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "(Likes(george) ∧ Has(george, program)) → Compose(george)"
      ],
      "fol_conc": "Compose(george)",
      "perplexity": 1.9979276657104492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantToCompose(y)",
        "CanCompose(x, y)"
      ],
      "fol_consts": [
        "George",
        "George"
      ],
      "fol_rules": [
        "∀x (Likes(x, m) → WantToCompose(x))",
        "∀x (CanCompose(x, p) ∧ WantToCompose(x) → CanCompose(x, p))",
        "∃x (CanCompose(x, y) ∧ Likes(x, m) ∧ WantToCompose(x))"
      ],
      "fol_conc": "CanCompose(George, y)",
      "perplexity": 2.0636627674102783,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 465
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "breed_back(x, y)",
        "animal(x)",
        "extinct(y)",
        "resembles(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed_back(x, auroch) → extinct(auroch))",
        "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],  ",
        "fol_conc"
      ],
      "fol_conc": "extinct(aurochs)",
      "perplexity": [
        2.5359489917755127,
        3.612553596496582
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x)",
        "Artificial(y)",
        "Animals(x)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "breeding",
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Breedin(x)) → ∃y (Animal(y) ∧ Artificial(y))"
      ],
      "fol_conc": "Aurochs(is)",
      "perplexity": 2.0227158069610596,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "breed-back(x)",
        "animal(x)",
        "resemble(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs",
        "breeding",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed-back(x) → animal(x))",
        "∃x (breed-back(heck cattle) ∧ breed-back(aurochs))",
        "∃y (animal(y) ∧ resemble(heck cattle, y))"
      ],
      "fol_conc": "¬(∃x (resemble(aurochs, x)))",
      "perplexity": 2.7038025856018066,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Breed-back(x)) -> (Animal(x)))\n             ^"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 466
  },
  {
    "id": 195,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Leaderboard(x)",
        "Participated(x, y)",
        "FromCountry(x, country)",
        "Winner (x)"
      ],
      "fol_consts": [
        "Steinhauer",
        "Descampe"
      ],
      "fol_rules": [
        "∀x (Leaderboards(x) → Participated(x, duMaurierClassic))",
        ",  /* Rule 1 */ ∃x (Leaderboards(x) ∧ FromCountry(x, Belgium) and Leaderboards(x)), /* Rule 2 */"
      ],
      "fol_conc": "Descampe is in the six-way tie of the du Maurier Classic leaderboard",
      "perplexity": [
        2.6767239570617676,
        1.6118606328964233
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  /* Rule 1 */ ∃x (Leaderboards(x) ∧ FromCountry(x, Belgium) and Leaderboards(x)), /* Rule 2 */"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Win(x)",
        "Participate(x, y)",
        "Leaderboards(y)",
        "From(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "dumaurierclassic1992"
      ],
      "fol_rules": [
        "∀x (Win(x) ∧ Participate(x, dumaurieclassic1992))",
        "∃y (Leaderboards(y) ∧ From(descampe, y))",
        "Existential(leaderboard)",
        "All(participated)"
      ],
      "fol_conc": "Descampe(from)",
      "perplexity": 2.1030733585357666,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Descampe/1, Descampe/0, From/2, From/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Descampe/1, Descampe/0, From/2, From/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "Participated(x, y)",
        "From(x, y)",
        "SixWayTie(x)",
        "IsOnLeaderboard(y)"
      ],
      "fol_consts": [
        "1992 du Maurier Classic",
        "Steinhauer",
        "Descampe"
      ],
      "fol_rules": [
        "∀x (Winner(x) → Participated(x, 1992 du Maurier Classic))",
        "∃x ∃y (Participated(x, y) ∧ SixWayTie(y))",
        "SixWayTie(y) ∧ From(Descampe, y)",
        "IsOnLeaderboard(y) ∧ Participated(y, 1992 du Maurier Classic)",
        "∀x (IsOnLeaderboard(x) → Participated(x, 1992 du Maurier Classic))"
      ],
      "fol_conc": "IsOnLeaderboard(Descampe)",
      "perplexity": 1.6095887422561646,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 467
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "Read(x, y)",
        "Knowledge(y)",
        "SmarterThan(x, y)"
      ],
      "fol_consts": [
        "harry",
        "Walden"
      ],
      "fol_rules": [
        "\t ∀ x (Book(x) → Knowledge(x))",
        "\t ∀ x (Read(x, book) → Knowledge(book))",
        "\t ∀ x (Knowledge(x) → SmarterThan(x, initial_knowledge))"
      ],
      "fol_conc": "Smarter than Harry before reading Walden",
      "perplexity": [
        2.220659017562866,
        1.1864593029022217
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Smarter than Harry before reading Walden"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "Gainknowledge(y)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henrythoreau"
      ],
      "fol_rules": [
        "∀x (Contains(x, y) → ∃z (Read(z, x)))",
        "∀x (Reads(x, y) ∧ Gainknowledge(y)) ∧ (Smarter(x) ∨ ¬Smarter(x))"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 1.609443187713623,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Read(x, y)",
        "GainKnowledge(y)",
        "SmarterThan(x, y)"
      ],
      "fol_consts": [
        "Harry",
        "Walden",
        "Henry Thoreau"
      ],
      "fol_rules": [
        "∀x (Read(x, y) → GainKnowledge(y))",
        "∀x ∀y (GainKnowledge(y) → SmarterThan(x, y))",
        "∃x (Read(Harry, Walden) ∧ Read(t, Walden))"
      ],
      "fol_conc": "SmarterThan(Harry, x)",
      "perplexity": 1.5752694606781006,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 468
  },
  {
    "id": 181,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "John flies to LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Airport(x)",
        "DepartureAirport(x, y)",
        "ArrivalAirport(x, y)",
        "FlyToAirport(x, y)"
      ],
      "fol_consts": [
        "John",
        "LGA"
      ],
      "fol_rules": [
        "∀x ∃y ∀z (DepartureAirport(x, z) → ArrivalAirport(x, y))"
      ],
      "fol_conc": "FlyToLGA(John)",
      "perplexity": [
        2.2581052780151367,
        1.166481614112854
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Fly(x, y)",
        "Depart(y, z)",
        "Arrive(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "∀x (Fly(x, lga) → ¬Depart(lga, x)) ∧ ¬(Fly(x, lga) → Arrive(x, lga))",
        "(John(fly) ∧ Depart(lga, john) ∨ John(fly) ∧ Arrive(john, lga))"
      ],
      "fol_conc": "John(fly)",
      "perplexity": 1.8482999801635742,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "FliesTo(x, y)",
        "DepartureAndArrivalCannotBeSameAirport(y)"
      ],
      "fol_consts": [
        "Susan",
        "LGA"
      ],
      "fol_rules": [
        "∀x (FliesTo(Susan, x)) ∧ ¬DepartureAndArrivalCannotBeSameAirport(Susan, LGA)",
        "∀x (FliesTo(x, LGA) → FliesTo(Susan, LGA))"
      ],
      "fol_conc": "FliesTo(LGA, Susan)",
      "perplexity": 1.7422852516174316,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 469
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "American(x)",
        "Tall(x)",
        "ShoesSize(x, y)",
        "ClothesSize(x, y)"
      ],
      "fol_consts": [
        "Yuri"
      ],
      "fol_rules": [
        "∀x (Player(x) → Tall(x))",
        "∀x (ShoesSize(x, Large) → ClothesSize(x, Large))"
      ],
      "fol_conc": "Yuri is American",
      "perplexity": [
        1.841971516609192,
        1.074521541595459
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yuri is American"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(x)"
      ],
      "fol_consts": [
        "yuri",
        "american"
      ],
      "fol_rules": [
        "∃x (Basketball(x)) ∧ ¬American(x)",
        "(Tall(x)) → Wear(x, large)",
        "(Wear(x, large)) → Large(clothes)"
      ],
      "fol_conc": "Yuri(is) ∨ American(yuri)",
      "perplexity": 1.8890341520309448,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "American(x)",
        "Tall(x)",
        "Tall(x)"
      ],
      "fol_consts": [
        "Yuri",
        "Yuri"
      ],
      "fol_rules": [
        "∀x (American(x) → ¬Tall(x))",
        "∀x (Tall(x) ∧ (¬Tall(y)))"
      ],
      "fol_conc": "American(Yuri)",
      "perplexity": 3.4957547187805176,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 470
  },
  {
    "id": 129,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John does not have a wedding that is well-attended.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Weddings(x)",
        "Children(x)",
        "TravelToParisForHoneymoon(x)",
        "JulyWedding(x,y)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "John"
      ],
      "fol_rules": [
        "∀x (Weddings(x) → Children(x))",
        "∀x (TravelToParisForHoneymoon(x) → Weddings(x))",
        "∀x (JulyWedding(x,y) → TravelToParisForHoneymoon(x))",
        ", 3.  "
      ],
      "fol_conc": "∃x ¬ WellAttended(John)",
      "perplexity": [
        1.9284031391143799,
        1.6435260772705078
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", 3."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travels(x, y)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (Travels(x, paris) ∧ Wedding(x))",
        "∀w (Weddings(x, july) → Travels(x, paris))",
        "∃y (Wellattended(y) ∧ Weddings(john, july))",
        "(Child(john) ∧ ¬Travels(john, paris)) ∧ ¬Wedding(john)",
        "∃y (Wellattended(y) ∧ Wedding(john, july) ∨ ¬Wedding(john) → Travels(john, paris))"
      ],
      "fol_conc": "¬Wellattended(john)",
      "perplexity": 1.490204095840454,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/2, Wedding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/2, Wedding/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasWedding(x)",
        "HasWedding(y, x)",
        "HasWedding(y, z)",
        "TravelToParisForHoneymoon(x)",
        "HasWedding(x)"
      ],
      "fol_consts": [
        "John",
        "July",
        "John"
      ],
      "fol_rules": [
        "∀x (HasWedding(x) → HasWedding(x))",
        "∀x (TravelToParisForHoneymoon(x) ∧ HasWedding(x))",
        "∀x (HasWedding(x) ∧ TravelToParisForHoneymoon(x) ∧ HasWedding(x, x))",
        "(HasWedding(John) ∧ TravelToParisForHoneymoon(John) ∧ HasWedding(John, John)) → ¬TravelToParisForHoneymoon(John)",
        "∀x (HasWedding(x) ∧ TravelToParisForHoneymoon(x) ∧ HasWedding(x, x))",
        "∃x (HasWedding(x) ∧ HasWedding(x, John) ∧ HasWedding(John, y))"
      ],
      "fol_conc": "¬HasWedding(John, y)",
      "perplexity": 2.6945762634277344,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasWedding/1, HasWedding/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasWedding/1, HasWedding/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 471
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x,y)"
      ],
      "fol_consts": [
        "Netflix",
        "Stranger Things",
        "Black Mirror",
        "Karen",
        "Lisa"
      ],
      "fol_rules": [
        "Popular(Netflix_show) → BingeWatch(Karen, Netflix_show)",
        "BingeWatch(Karen, Netflix_show) ⟹ Download(Karen, Netflix_show)",
        "Black Mirror is a Show."
      ],
      "fol_conc": "Share(Karen, Stranger Things)",
      "perplexity": [
        2.466493606567383,
        1.2511638402938843
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BingeWatch(Karen, Netflix_show) ⟹ Download(Karen, Netflix_show)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Shared(x, y)",
        "Netflix(y)"
      ],
      "fol_consts": [
        "stranger",
        "things",
        "karen",
        "blackmirror",
        "lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → Bingewatch(x, karen))",
        "Bingewatch(x, karen) ∧ Download(x, y) ↔ True(y)",
        "¬Download(karen, blackmirror)",
        "Bingewatch(x, karen) → Shared(x, lisa)",
        "True(blackmirror)"
      ],
      "fol_conc": "Shared(stranger, lisa)",
      "perplexity": 1.7128781080245972,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "ShareTo(x, y)"
      ],
      "fol_consts": [
        "StrangerThings",
        "BlackMirror",
        "Karen",
        "Lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → BingeWatch(Karen, x))",
        "(BingeWatch(Karen, x) ∧ Download(Karen, x)) → ShareTo(Karen, Lisa)",
        "¬Download(Karen, BlackMirror)",
        "BingeWatch(Karen, StrangerThings) → ShareTo(Karen, Lisa)"
      ],
      "fol_conc": "ShareTo(Karen, Lisa)",
      "perplexity": 1.2593355178833008,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 472
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Event(x)",
        "LastEvent(x, y)",
        "WonMedals(x, y)"
      ],
      "fol_consts": [
        "olympic_games",
        "tokyo",
        "united_states"
      ],
      "fol_rules": [],
      "fol_conc": "The world championships is a sporting event.",
      "perplexity": [
        4.0166144371032715,
        1.2792718410491943
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The world championships is a sporting event."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x)",
        "Winning(x, y)"
      ],
      "fol_consts": [
        "worldchampionships",
        "games",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "∀x (Sporting(x)) → ∃y (Olympic(y))",
        "Last(olympic, tokyo)"
      ],
      "fol_conc": "Sporting(worldchampionships)",
      "perplexity": 2.0773000717163086,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Olympic/1, Olympic/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Olympic/1, Olympic/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "WonMedals(x, y)"
      ],
      "fol_consts": [
        "OlympicGames",
        "Tokyo",
        "USA",
        "OlympicGames"
      ],
      "fol_rules": [
        "∃x (SportingEvent(x))",
        "(SportingEvent(x) ∧ WonMedals(x, Tokyo)) → SportingEvent(OlympicGames)"
      ],
      "fol_conc": "SportingEvent(OlympicGames)",
      "perplexity": 4.642244338989258,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 473
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "born_in(x, y)",
        "known_as(x, y)",
        "plays_for(x, y)",
        "footballer(x)"
      ],
      "fol_consts": [
        "Ailton_Silva",
        "1995",
        "Brazillian",
        "Fluminense"
      ],
      "fol_rules": [
        ""
      ],
      "fol_conc": "plays_for(Ailton_Silva, Fluminense)",
      "perplexity": [
        3.268279552459717,
        1.2719157934188843
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Knows(x, y)",
        "Plays(x, y)",
        "Loaned(x, y)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∀x (Born(x, yyy)) → Knows(x, ailton)",
        "Plays(ailton) ∧ Loaned(ailton, bragao) → Is(ailton, nautico)"
      ],
      "fol_conc": "Plays(ailton)",
      "perplexity": 1.6594799757003784,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PlayedFor(x, y)",
        "PlayedFor(y)",
        "PlayedFor(x, z)"
      ],
      "fol_consts": [
        "Ailton Silva",
        "Braga",
        "Nautico",
        "Fluminense",
        "Brazillian",
        "1995",
        "Ailton Silva"
      ],
      "fol_rules": [
        "∀x (PlayedFor(x, y) → PlayedFor(y))",
        "∀x (PlayedFor(x, z) → ∃w (PlayedFor(z, w)))",
        "¬(PlayedFor(Ailton Silva, Fluminense))"
      ],
      "fol_conc": "PlayedFor(Ailton Silva, Fluminense)",
      "perplexity": 2.0861611366271973,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PlayedFor/1, PlayedFor/2.\n\n\nFatal error:  The following symbols are used with multiple arities: PlayedFor/1, PlayedFor/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 474
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LoveBy(x, y)",
        "IsFavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "IsKoala(x)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "Max"
      ],
      "fol_rules": [
        "∀x (LoveBy(x, tourists) → IsFavoriteAnimal(x, Max))",
        ". ",
        "\n    * \n    * ∀x (AnimalFromAustralia(x) → LoveBy(x, tourists))\n    *",
        "\n    * ∀x (IsKoala(x) ∧ Fluffy(x))  → ¬IsQuokka(x)",
        "fol_conc"
      ],
      "fol_conc": "Koalas love to sleep.",
      "perplexity": [
        2.1587138175964355,
        1.9064726829528809
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "Australia(x)",
        "Fluffy(x)",
        "Sleeps(x)"
      ],
      "fol_consts": [
        "max",
        "koalas",
        "animals",
        "tourists",
        "quokkas"
      ],
      "fol_rules": [
        "∀x (Loved(x, tourists) → Favorite(x, max))",
        "All(a) → Australia(a)",
        "All(q) ∧ Animal(q) ∧ Australia(q) → All(max) ∧ Fluffy(max) ∧ Sleeps(max)"
      ],
      "fol_conc": "Sleeps(koalas)",
      "perplexity": 1.6065083742141724,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "Favorite(x, y)",
        "IsA(x, y)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "animals",
        "Max",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∃y (LovedBy(x, y) → Favorite(x, y))",
        "∀a (IsA(a, animals) → LovedBy(a, tourists))",
        "∀a (IsA(a, animals) → IsA(a, Australia))",
        "∀a (IsA(a, quokka) → IsA(a, Australia))",
        "∀x ∃y (Fluffy(x) → Favorite(Max, y))",
        "(Fluffy(x) ∧ Favorite(Max, x) → ¬IsA(x, quokka))"
      ],
      "fol_conc": "LovedBy(koala, tourists)",
      "perplexity": 1.714306116104126,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 475
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Movie(x)",
        "Superhero(x)",
        "Character(x)",
        "GoodGuy(x)",
        "Badguy(x)",
        "WinFight(x, y)"
      ],
      "fol_consts": [
        "Digby",
        "SurprisingAdventuresOfSirDigbyChickenCaesar",
        "Nemesis"
      ],
      "fol_rules": [
        "∀x (Movie(x) → Superhero(x))",
        "∀x (GoodGuy(Character(x)))",
        "(Superhero(SurprisingAdventuresOfSirDigbyChickenCaesar)  → Character(Digby))"
      ],
      "fol_conc": "Badguy(Nemesis)",
      "perplexity": [
        1.7948894500732422,
        1.1258997917175293
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (GoodGuy(Character(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Wins(y, z)",
        "Named(x, y)"
      ],
      "fol_consts": [
        "sir",
        "digby"
      ],
      "fol_rules": [
        "∀x ∀z (Superhero(x) → Wins(x, z))",
        "Surprisingadventuresofsirdidigbchickencaesar(superhero)",
        "Goodguy(x) → Named(x, goodguy)",
        "Named(sirdigby, surprizingadventuresofsiderigbychickeneaser)",
        "Wins(a, b) → ¬Wins(b, a)",
        "Superhero(x) ∧ Named(x, character) → Appears(character, x)"
      ],
      "fol_conc": "¬Wins(diaby, nemesis)",
      "perplexity": 2.4165217876434326,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wins(x)",
        "Fight(x, y)",
        "AppearsInMovie(x)",
        "AppearsInMovie(x)"
      ],
      "fol_consts": [
        "Sir Digby",
        "good guy",
        "bad guy"
      ],
      "fol_rules": [
        "∀x (Wins(x) → Fight(x, y))",
        "∀x ∃y (Fight(x, y) ∧ AppearsInMovie(y))",
        "AppearsInMovie(x)",
        "Wins(Sir Digby) ∧ AppearsInMovie(Sir Digby)"
      ],
      "fol_conc": "Wins(Sir Digby)",
      "perplexity": 2.77581524848938,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 476
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Works(x, y)",
        "NeedsToEarningMoney(x)",
        "OrdersTakeOutFrequently(x)",
        "EatsInDiningHall(x)",
        "IsPickyEater(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Works(x, StudentJob) → NeedsToEarningMoney(x))",
        ", ",
        ", // This is an example of how to add multiple rules. You can remove the comma if you only have one rule. 6457: ",
        "∀x (OrdersTakeOutFrequently(x) → Works(x,StudentJob))",
        ",",
        "∃x (EatsInDiningHall(x) ∨ OrdersTakeoutFrequently(x))",
        ",",
        "], 7082 : },] ",
        "fol_conc",
        "Mary is not a picky eater and spends a lot of time eating and catching up with friends in the campus dining halls.: Mary enjoys dining hall meals and recipes and she spends a lot of her time eating and catching up with friends."
      ],
      "fol_conc": "Mary is not a picky eater and spends a lot of time eating and catching up with friends in the campus dining halls: Mary enjoys dining hall meals and recipes and she spends a lot of her time eating and catching up with friends.",
      "perplexity": [
        1.5484498739242554,
        2.659191608428955
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x, y)",
        "Earnmoney(x)",
        "Ordertakeout(x)",
        "Picky(x)",
        "Spendtime(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x, campus) ∧ Earnmoney(x)) → ¬Picky(x)"
      ],
      "fol_conc": "Notpicky(mary) ∧ Spendtime(mary, dininghall)",
      "perplexity": 1.6419284343719482,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Work(x, y)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallMealsAndRecipes(x)",
        "PickyEaters(x)",
        "SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(x)"
      ],
      "fol_consts": [
        "Mary"
      ],
      "fol_rules": [
        "∀x (Work(x, y) → ∃p (OrderTakeoutFrequently(x) ∧ Work(x, y)))",
        "(EnjoyDiningHallMealsAndRecipes(x)) → ¬PickyEaters(x)",
        "(SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(x) ∨ EnjoyDiningHallMealsAndRecipes(x))"
      ],
      "fol_conc": "¬PickyEaters(Mary) ∧ SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(Mary)",
      "perplexity": 1.7438634634017944,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 477
  },
  {
    "id": 157,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James has a part-time job offered by the university.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkInLibrary(x)",
        "WorksInLab(x)",
        "FromCSDepartment(x)",
        "PartTimeJobOfferedByUniversity(x)"
      ],
      "fol_consts": [
        "James",
        "Jack",
        "David"
      ],
      "fol_rules": [
        "∀x (Student(x) → WorkInLibrary(x))",
        "// All students work in the library.",
        "∀x (WorkInLab(x) ∧ Student(x))",
        "// Students who are working in the lab are also students.",
        "// This is a more specific rule about students and their jobs. ",
        "∀x (FromCSDepartment(x) ∧ PartTimeJobOfferedByUniversity(x))",
        "All members of the computer science department have a part-time job offered by the university.",
        ""
      ],
      "fol_conc": "James has a part-time job offered by the university",
      "perplexity": [
        1.992931604385376,
        1.6443487405776978
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "// All students work in the library."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Parttime(y)",
        "Instruct(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, library)) → ¬Student(x) ∧ Department(x, computercience)",
        "∀x (Parttime(x) ∧ Student(x) ∧ Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) ∧ Instruct(david, x)) → Instruct(david, x)",
        "∀x (Lab(x) ∧ Instruct(david, x))",
        "(James(student) ∧ Work(james, lab))",
        "¬(Jack(student) ∧ Parttime(jack) ∧ Lab(jack))"
      ],
      "fol_conc": "Parttime(james)",
      "perplexity": 1.6386723518371582,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorksInLab(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "FromComputerScienceDepartment(x)",
        "WorkInLibrary(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "James",
        "Jack",
        "university",
        "library"
      ],
      "fol_rules": [
        "∀x (Student(x) → WorksInLab(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) ∧ Student(x) → WorkInLibrary(x))",
        "∀x (FromComputerScienceDepartment(x) ∧ Student(x) → WorksInLab(x))",
        "∀x (Student(x) ∧ Student(x) → HasPartTimeJobOfferedByUniversity(x))"
      ],
      "fol_conc": "HasPartTimeJobOfferedByUniversity(James)",
      "perplexity": 1.767884373664856,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 478
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "EatSalad(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyIntake(x)",
        "HaveGoodParentRelationship(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalad(x) → GrownUpInHealthConsciousHome(x))",
        ",",
        "∀x (HaveGoodParentRelationship(x, y) ∧ FulfillDailyIntake(x)) → EatSalad(x)",
        "∀x (GrewUpInHealthConsciousHome(x) ∧ ¬EatSalad(x))"
      ],
      "fol_conc": "EatSalad(taylor)",
      "perplexity": [
        1.7876778841018677,
        1.3988049030303955
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Healthy(y)",
        "Grewup(x, y)",
        "Good(x, y)",
        "Relationship(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x) → Healthy(x))",
        "∀x (Grewup(x, y) ∧ Eat(x) → Healthy(y))",
        "∀x (Good(x, y) ∧ Eat(x) → Relationship(x, y))",
        "(Relationship(x, y) → Fulfill(x, y))",
        "(Relationship(x, y) → ¬Eat(x))",
        "(Gym(x) ∧ Daily(x)) → Alwaysfulfill(x)",
        "Existential(y1, y2) → (Grewup(y1, y2) ⊕ Existential(y2, y1))"
      ],
      "fol_conc": "Eat(taylor)",
      "perplexity": 1.7171189785003662,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EatSaladRegularly(x)",
        "ConsciousAboutHealthAndEatingHabits(x)",
        "GrewUpInHealthyChildhoodHome(x)",
        "FulfillNutritionalDailyIntake(x)",
        "GoodRelationshipWithParents(x)",
        "GoodRelationshipWithParents(y)",
        "GoodRelationshipWithParents(y)"
      ],
      "fol_consts": [
        "Taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladRegularly(x) → ConsciousAboutHealthAndEatingHabits(x))",
        "∀x (GrewUpInHealthyChildhoodHome(x) ∧ EatSaladRegularly(x))",
        "∀x (FulfillNutritionalDailyIntake(x) ∧ GrewUpInHealthyChildhoodHome(x))",
        "(GoodRelationshipWithParents(x) → FulfillNutritionalDailyIntake(x))",
        "(GoodRelationshipWithParents(x) → ¬EatSaladRegularly(x))",
        "(GoodRelationshipWithParents(y) ∧ GoodRelationshipWithParents(z) → FulfillNutritionalDailyIntake(y))"
      ],
      "fol_conc": "EatSaladRegularly(Taylor)",
      "perplexity": 2.0077388286590576,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 479
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Capital(x)",
        "PopulationSize(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "Capital(Beijing)",
        "PopulationSize(Beijing, p)"
      ],
      "fol_conc": "",
      "perplexity": [
        3.38611102104187,
        1.4317158460617065
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "world"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, china) ∧ Capital(x))",
        "∃x (Hosted(x, beijing) ∧ Ranked(x, asia))",
        "(Ranked(beijing, world) ∨ Ranked(beijing, asia))"
      ],
      "fol_conc": "Not(worldly2ndlargestcity)",
      "perplexity": 1.8451765775680542,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldPopulousCity(y)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "∀x (Capital(x, China)) ∧ Capital(Beijing, x)",
        "Capital(Beijing, China)",
        "WorldPopulousCity(Beijing)",
        "LocatedIn(Beijing, China)"
      ],
      "fol_conc": "∃x (WorldPopulousCity(x) ∧ ¬HostedOlympics(x))",
      "perplexity": 3.035545587539673,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 480
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "VisitedBy(x, y)",
        "LocatedIn(x, y)",
        "Mine(x)"
      ],
      "fol_consts": [
        "picuris",
        "texas",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∀x (MountainRange(x) → LocatedIn(x, New Mexico))",
        "∀x (LocatedIn(x, Texas) ∧ Mine(x)) → ¬ MountainRange(x)",
        "∃x (VisitedBy(juan_de_onate,MountainRange(texas))) "
      ],
      "fol_conc": "∃x (VisitedBy(juan_de_Onate, MountainRange(texas)))}",
      "perplexity": [
        2.021256923675537,
        1.2044757604599
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (VisitedBy(juan_de_onate,MountainRange(texas)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Visit(x, y)",
        "Location(x, y)",
        "Mine(x)",
        "Donate(x)"
      ],
      "fol_consts": [
        "picuris",
        "texas"
      ],
      "fol_rules": [
        "∀x (Mountain(x) ∨ Location(x, picuris))",
        "(Juandeonatevisit(x) ∧ Mountain(x))",
        "(Location(x, picuris) → Mine(x))",
        "¬Mine(x) ∧ Texasmountain(x) → Donate(x)",
        "Texasmountain(x)"
      ],
      "fol_conc": "Visit(juandeonate, texas)",
      "perplexity": 1.8778008222579956,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Visited(x)"
      ],
      "fol_consts": [
        "Picuris Mountains",
        "Texas",
        "Juan de Onate",
        "Harding Pegmatite Mine",
        "New Mexico"
      ],
      "fol_rules": [
        "∃x (LocatedIn(Picuris Mountains, Texas)) ∨ ∃x (LocatedIn(Picuris Mountains, New Mexico))",
        "Visited(Juan de Onate, Picuris Mountains)",
        "∀x (Visited(y) → LocatedIn(x, y))"
      ],
      "fol_conc": "Visited(Juan de Onate, Texas)",
      "perplexity": 2.975429058074951,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Visited/1, Visited/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Visited/1, Visited/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 461
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Mammal(x)",
        "Bird(x)",
        "Fly(x, y)",
        "Breathe(x)",
        "Winged(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Animal(x) → Mammal(x))",
        "∀x (Mammal(x) ∧ Bird(x) ∧ Animal(x) → Fly(x))",
        "∀x (Bird(x) → Winged(x))",
        "∀x  (Animal(x) → Breathe(x))"
      ],
      "fol_conc": "Rock is Mammal",
      "perplexity": [
        2.3614706993103027,
        1.060038685798645
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Rock is Mammal"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∀x (Monkey(x) ∧ Mammal(x))",
        "∀x (Animal(x) ⊕ Bird(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) ∧ Breathe(x))",
        "¬Fly(x) → ¬Wings(x)",
        "(Not(fly) ∨ Not(breath))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.3496768474578857,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fly/1, Fly/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fly/1, Fly/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Fly(x)",
        "Breathe(x)",
        "Mammal(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∀x (Mammal(x) → (Animal(x) ∨ Mammal(x)))",
        "∀x (Fly(x) → (Animal(x) ∧ Breathe(x)))",
        "(Mammal(x) ∧ Fly(x)) ⊕ (Animal(x) ∧ Breathe(x))"
      ],
      "fol_conc": "Mammal(Rock)",
      "perplexity": 1.9306331872940063,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 462
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Japanese(x)",
        "Top10List(x)",
        "SoldMoreThanOneMillion(x, y)",
        "CreatedBy(y)"
      ],
      "fol_consts": [
        "Zelda"
      ],
      "fol_rules": [
        "\t∀x (Company(x) → Japanese(x))",
        "\t∀x (Game(x) ∧ Company(x))",
        "\t∀x (Top10List(x) → Game(x) ∧ SoldMoreThanOneMillion(x, y))",
        "\t"
      ],
      "fol_conc": "The Legend of Zelda is in the Top 10 list",
      "perplexity": [
        1.822733759880066,
        1.2631988525390625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The Legend of Zelda is in the Top 10 list"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Created(x, y)",
        "Top10(x)",
        "Sells(x, y)"
      ],
      "fol_consts": [
        "thelegendofzelda",
        "japanese"
      ],
      "fol_rules": [
        "∀x (Company(x) → Game(x))",
        "∀x (Game(x) ∧ Top10(x) → Company(x))",
        "(Sells(game, million)) → Top10(game)",
        "Thelegendofzelda(game)"
      ],
      "fol_conc": "Top10(thelegendofzelda)",
      "perplexity": 1.5442975759506226,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Game/1, Game/0, Thelegendofzelda/1, Thelegendofzelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Game/1, Game/0, Thelegendofzelda/1, Thelegendofzelda/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "created(x, y)",
        "isGameCompany(y)",
        "sellsMoreThanOneMillionCopies(x)",
        "inTop10List(x)"
      ],
      "fol_consts": [
        "the Legend of Zelda",
        "Japanese game company",
        "Top 10 list",
        "Japanese game company"
      ],
      "fol_rules": [
        "(created(x, y)) → isGameCompany(y)",
        "(isGameCompany(y) ∧ sellsMoreThanOneMillionCopies(x)) ∧ inTop10List(x)"
      ],
      "fol_conc": "inTop10List(the Legend of Zelda)",
      "perplexity": 2.181828022003174,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 463
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Building(x)",
        "Deposit(x, y)",
        "Pet(x)",
        "Rented(x, y)",
        "AllowedInBuilding(x)"
      ],
      "fol_consts": [
        "Fluffy",
        "OliveGarden",
        "Tom",
        "2000$",
        "MonthlyRent(x)"
      ],
      "fol_rules": [
        "∀x (Building(x) → Deposit(x, ≥ MonthlyRent(x)))",
        "(Pet(Fluffy) & Rented(Tom, OliveGarden))",
        "Deposit(OliveGarden, y)",
        "MonthlyRent(OliveGarden) = $2000",
        "∃x (Pet(x)) & Deposit(x, x)",
        "Tom rents an apartment in a managed building",
        "Deposit(OliveGarden, y) > 1500",
        "∃x (Pet(Fluffy)) & Deposit(OliveGarden, x)"
      ],
      "fol_conc": "Deposit(OliveGarden, ≥ MonthlyRent(OliveGarden))",
      "perplexity": [
        2.2000205516815186,
        1.1280587911605835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Building(x) → Deposit(x, ≥ MonthlyRent(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allowed(x, y)",
        "Deposit(y)",
        "Pet(x)",
        "Rent(y)"
      ],
      "fol_consts": [
        "pets",
        "managed",
        "olivegarden",
        "tom",
        "fluffy"
      ],
      "fol_rules": [
        "∃x (Allowed(x, olivegarden)) ∧ Deposit(x) → Rent(x)",
        "∀x (Pet(x) → Allowed(x, managed)) ∧ Deposit(x) → Rent(x)"
      ],
      "fol_conc": "Deposit(olivegarden)",
      "perplexity": 1.6215742826461792,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PetIs(x)",
        "RentEquals(x, y)",
        "DepositRequired(x)",
        "AllowedIn(x)",
        "RentEquals(y, z)"
      ],
      "fol_consts": [
        "Fluffy",
        "Tom",
        "Olive Garden",
        "managed building",
        "pets",
        "pets"
      ],
      "fol_rules": [
        "(PetIs(x) ∧ AllowedIn(x)) → (DepositRequired(x))",
        "(AllowedIn(x) ∧ DepositRequired(x)) → RentEquals(x, y)",
        "(RentEquals(x, y) ∨ DepositRequired(x))"
      ],
      "fol_conc": "DepositRequired(Olive Garden)",
      "perplexity": 3.2092714309692383,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 464
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "Composes(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "\n  \t HasAccess(george, program) → Composes(george)\n",
        "\n     WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
      ],
      "fol_conc": "Composes(george)",
      "perplexity": [
        1.8436528444290161,
        1.517404317855835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "(Likes(george) ∧ Has(george, program)) → Compose(george)"
      ],
      "fol_conc": "Compose(george)",
      "perplexity": 1.9979276657104492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantToCompose(y)",
        "CanCompose(x, y)"
      ],
      "fol_consts": [
        "George",
        "George"
      ],
      "fol_rules": [
        "∀x (Likes(x, m) → WantToCompose(x))",
        "∀x (CanCompose(x, p) ∧ WantToCompose(x) → CanCompose(x, p))",
        "∃x (CanCompose(x, y) ∧ Likes(x, m) ∧ WantToCompose(x))"
      ],
      "fol_conc": "CanCompose(George, y)",
      "perplexity": 2.0636627674102783,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 465
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "breed_back(x, y)",
        "animal(x)",
        "extinct(y)",
        "resembles(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed_back(x, auroch) → extinct(auroch))",
        "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],  ",
        "fol_conc"
      ],
      "fol_conc": "extinct(aurochs)",
      "perplexity": [
        2.5359489917755127,
        3.612553596496582
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x)",
        "Artificial(y)",
        "Animals(x)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "breeding",
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Breedin(x)) → ∃y (Animal(y) ∧ Artificial(y))"
      ],
      "fol_conc": "Aurochs(is)",
      "perplexity": 2.0227158069610596,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "breed-back(x)",
        "animal(x)",
        "resemble(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs",
        "breeding",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed-back(x) → animal(x))",
        "∃x (breed-back(heck cattle) ∧ breed-back(aurochs))",
        "∃y (animal(y) ∧ resemble(heck cattle, y))"
      ],
      "fol_conc": "¬(∃x (resemble(aurochs, x)))",
      "perplexity": 2.7038025856018066,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Breed-back(x)) -> (Animal(x)))\n             ^"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 466
  },
  {
    "id": 195,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Leaderboard(x)",
        "Participated(x, y)",
        "FromCountry(x, country)",
        "Winner (x)"
      ],
      "fol_consts": [
        "Steinhauer",
        "Descampe"
      ],
      "fol_rules": [
        "∀x (Leaderboards(x) → Participated(x, duMaurierClassic))",
        ",  /* Rule 1 */ ∃x (Leaderboards(x) ∧ FromCountry(x, Belgium) and Leaderboards(x)), /* Rule 2 */"
      ],
      "fol_conc": "Descampe is in the six-way tie of the du Maurier Classic leaderboard",
      "perplexity": [
        2.6767239570617676,
        1.6118606328964233
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  /* Rule 1 */ ∃x (Leaderboards(x) ∧ FromCountry(x, Belgium) and Leaderboards(x)), /* Rule 2 */"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Win(x)",
        "Participate(x, y)",
        "Leaderboards(y)",
        "From(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "dumaurierclassic1992"
      ],
      "fol_rules": [
        "∀x (Win(x) ∧ Participate(x, dumaurieclassic1992))",
        "∃y (Leaderboards(y) ∧ From(descampe, y))",
        "Existential(leaderboard)",
        "All(participated)"
      ],
      "fol_conc": "Descampe(from)",
      "perplexity": 2.1030733585357666,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Descampe/1, Descampe/0, From/2, From/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Descampe/1, Descampe/0, From/2, From/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "Participated(x, y)",
        "From(x, y)",
        "SixWayTie(x)",
        "IsOnLeaderboard(y)"
      ],
      "fol_consts": [
        "1992 du Maurier Classic",
        "Steinhauer",
        "Descampe"
      ],
      "fol_rules": [
        "∀x (Winner(x) → Participated(x, 1992 du Maurier Classic))",
        "∃x ∃y (Participated(x, y) ∧ SixWayTie(y))",
        "SixWayTie(y) ∧ From(Descampe, y)",
        "IsOnLeaderboard(y) ∧ Participated(y, 1992 du Maurier Classic)",
        "∀x (IsOnLeaderboard(x) → Participated(x, 1992 du Maurier Classic))"
      ],
      "fol_conc": "IsOnLeaderboard(Descampe)",
      "perplexity": 1.6095887422561646,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 467
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "Read(x, y)",
        "Knowledge(y)",
        "SmarterThan(x, y)"
      ],
      "fol_consts": [
        "harry",
        "Walden"
      ],
      "fol_rules": [
        "\t ∀ x (Book(x) → Knowledge(x))",
        "\t ∀ x (Read(x, book) → Knowledge(book))",
        "\t ∀ x (Knowledge(x) → SmarterThan(x, initial_knowledge))"
      ],
      "fol_conc": "Smarter than Harry before reading Walden",
      "perplexity": [
        2.220659017562866,
        1.1864593029022217
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Smarter than Harry before reading Walden"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, y)",
        "Gainknowledge(y)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henrythoreau"
      ],
      "fol_rules": [
        "∀x (Contains(x, y) → ∃z (Read(z, x)))",
        "∀x (Reads(x, y) ∧ Gainknowledge(y)) ∧ (Smarter(x) ∨ ¬Smarter(x))"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 1.609443187713623,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Read(x, y)",
        "GainKnowledge(y)",
        "SmarterThan(x, y)"
      ],
      "fol_consts": [
        "Harry",
        "Walden",
        "Henry Thoreau"
      ],
      "fol_rules": [
        "∀x (Read(x, y) → GainKnowledge(y))",
        "∀x ∀y (GainKnowledge(y) → SmarterThan(x, y))",
        "∃x (Read(Harry, Walden) ∧ Read(t, Walden))"
      ],
      "fol_conc": "SmarterThan(Harry, x)",
      "perplexity": 1.5752694606781006,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 468
  },
  {
    "id": 181,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "John flies to LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Airport(x)",
        "DepartureAirport(x, y)",
        "ArrivalAirport(x, y)",
        "FlyToAirport(x, y)"
      ],
      "fol_consts": [
        "John",
        "LGA"
      ],
      "fol_rules": [
        "∀x ∃y ∀z (DepartureAirport(x, z) → ArrivalAirport(x, y))"
      ],
      "fol_conc": "FlyToLGA(John)",
      "perplexity": [
        2.2581052780151367,
        1.166481614112854
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Fly(x, y)",
        "Depart(y, z)",
        "Arrive(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "∀x (Fly(x, lga) → ¬Depart(lga, x)) ∧ ¬(Fly(x, lga) → Arrive(x, lga))",
        "(John(fly) ∧ Depart(lga, john) ∨ John(fly) ∧ Arrive(john, lga))"
      ],
      "fol_conc": "John(fly)",
      "perplexity": 1.8482999801635742,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "FliesTo(x, y)",
        "DepartureAndArrivalCannotBeSameAirport(y)"
      ],
      "fol_consts": [
        "Susan",
        "LGA"
      ],
      "fol_rules": [
        "∀x (FliesTo(Susan, x)) ∧ ¬DepartureAndArrivalCannotBeSameAirport(Susan, LGA)",
        "∀x (FliesTo(x, LGA) → FliesTo(Susan, LGA))"
      ],
      "fol_conc": "FliesTo(LGA, Susan)",
      "perplexity": 1.7422852516174316,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 469
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "American(x)",
        "Tall(x)",
        "ShoesSize(x, y)",
        "ClothesSize(x, y)"
      ],
      "fol_consts": [
        "Yuri"
      ],
      "fol_rules": [
        "∀x (Player(x) → Tall(x))",
        "∀x (ShoesSize(x, Large) → ClothesSize(x, Large))"
      ],
      "fol_conc": "Yuri is American",
      "perplexity": [
        1.841971516609192,
        1.074521541595459
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Yuri is American"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(x)"
      ],
      "fol_consts": [
        "yuri",
        "american"
      ],
      "fol_rules": [
        "∃x (Basketball(x)) ∧ ¬American(x)",
        "(Tall(x)) → Wear(x, large)",
        "(Wear(x, large)) → Large(clothes)"
      ],
      "fol_conc": "Yuri(is) ∨ American(yuri)",
      "perplexity": 1.8890341520309448,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "American(x)",
        "Tall(x)",
        "Tall(x)"
      ],
      "fol_consts": [
        "Yuri",
        "Yuri"
      ],
      "fol_rules": [
        "∀x (American(x) → ¬Tall(x))",
        "∀x (Tall(x) ∧ (¬Tall(y)))"
      ],
      "fol_conc": "American(Yuri)",
      "perplexity": 3.4957547187805176,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 470
  },
  {
    "id": 129,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John does not have a wedding that is well-attended.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Weddings(x)",
        "Children(x)",
        "TravelToParisForHoneymoon(x)",
        "JulyWedding(x,y)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "John"
      ],
      "fol_rules": [
        "∀x (Weddings(x) → Children(x))",
        "∀x (TravelToParisForHoneymoon(x) → Weddings(x))",
        "∀x (JulyWedding(x,y) → TravelToParisForHoneymoon(x))",
        ", 3.  "
      ],
      "fol_conc": "∃x ¬ WellAttended(John)",
      "perplexity": [
        1.9284031391143799,
        1.6435260772705078
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", 3."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travels(x, y)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (Travels(x, paris) ∧ Wedding(x))",
        "∀w (Weddings(x, july) → Travels(x, paris))",
        "∃y (Wellattended(y) ∧ Weddings(john, july))",
        "(Child(john) ∧ ¬Travels(john, paris)) ∧ ¬Wedding(john)",
        "∃y (Wellattended(y) ∧ Wedding(john, july) ∨ ¬Wedding(john) → Travels(john, paris))"
      ],
      "fol_conc": "¬Wellattended(john)",
      "perplexity": 1.490204095840454,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/2, Wedding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/2, Wedding/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasWedding(x)",
        "HasWedding(y, x)",
        "HasWedding(y, z)",
        "TravelToParisForHoneymoon(x)",
        "HasWedding(x)"
      ],
      "fol_consts": [
        "John",
        "July",
        "John"
      ],
      "fol_rules": [
        "∀x (HasWedding(x) → HasWedding(x))",
        "∀x (TravelToParisForHoneymoon(x) ∧ HasWedding(x))",
        "∀x (HasWedding(x) ∧ TravelToParisForHoneymoon(x) ∧ HasWedding(x, x))",
        "(HasWedding(John) ∧ TravelToParisForHoneymoon(John) ∧ HasWedding(John, John)) → ¬TravelToParisForHoneymoon(John)",
        "∀x (HasWedding(x) ∧ TravelToParisForHoneymoon(x) ∧ HasWedding(x, x))",
        "∃x (HasWedding(x) ∧ HasWedding(x, John) ∧ HasWedding(John, y))"
      ],
      "fol_conc": "¬HasWedding(John, y)",
      "perplexity": 2.6945762634277344,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasWedding/1, HasWedding/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasWedding/1, HasWedding/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 471
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x,y)"
      ],
      "fol_consts": [
        "Netflix",
        "Stranger Things",
        "Black Mirror",
        "Karen",
        "Lisa"
      ],
      "fol_rules": [
        "Popular(Netflix_show) → BingeWatch(Karen, Netflix_show)",
        "BingeWatch(Karen, Netflix_show) ⟹ Download(Karen, Netflix_show)",
        "Black Mirror is a Show."
      ],
      "fol_conc": "Share(Karen, Stranger Things)",
      "perplexity": [
        2.466493606567383,
        1.2511638402938843
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BingeWatch(Karen, Netflix_show) ⟹ Download(Karen, Netflix_show)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Shared(x, y)",
        "Netflix(y)"
      ],
      "fol_consts": [
        "stranger",
        "things",
        "karen",
        "blackmirror",
        "lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → Bingewatch(x, karen))",
        "Bingewatch(x, karen) ∧ Download(x, y) ↔ True(y)",
        "¬Download(karen, blackmirror)",
        "Bingewatch(x, karen) → Shared(x, lisa)",
        "True(blackmirror)"
      ],
      "fol_conc": "Shared(stranger, lisa)",
      "perplexity": 1.7128781080245972,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "ShareTo(x, y)"
      ],
      "fol_consts": [
        "StrangerThings",
        "BlackMirror",
        "Karen",
        "Lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → BingeWatch(Karen, x))",
        "(BingeWatch(Karen, x) ∧ Download(Karen, x)) → ShareTo(Karen, Lisa)",
        "¬Download(Karen, BlackMirror)",
        "BingeWatch(Karen, StrangerThings) → ShareTo(Karen, Lisa)"
      ],
      "fol_conc": "ShareTo(Karen, Lisa)",
      "perplexity": 1.2593355178833008,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 472
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Event(x)",
        "LastEvent(x, y)",
        "WonMedals(x, y)"
      ],
      "fol_consts": [
        "olympic_games",
        "tokyo",
        "united_states"
      ],
      "fol_rules": [],
      "fol_conc": "The world championships is a sporting event.",
      "perplexity": [
        4.0166144371032715,
        1.2792718410491943
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "The world championships is a sporting event."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x)",
        "Winning(x, y)"
      ],
      "fol_consts": [
        "worldchampionships",
        "games",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "∀x (Sporting(x)) → ∃y (Olympic(y))",
        "Last(olympic, tokyo)"
      ],
      "fol_conc": "Sporting(worldchampionships)",
      "perplexity": 2.0773000717163086,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Olympic/1, Olympic/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Olympic/1, Olympic/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "WonMedals(x, y)"
      ],
      "fol_consts": [
        "OlympicGames",
        "Tokyo",
        "USA",
        "OlympicGames"
      ],
      "fol_rules": [
        "∃x (SportingEvent(x))",
        "(SportingEvent(x) ∧ WonMedals(x, Tokyo)) → SportingEvent(OlympicGames)"
      ],
      "fol_conc": "SportingEvent(OlympicGames)",
      "perplexity": 4.642244338989258,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 473
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "born_in(x, y)",
        "known_as(x, y)",
        "plays_for(x, y)",
        "footballer(x)"
      ],
      "fol_consts": [
        "Ailton_Silva",
        "1995",
        "Brazillian",
        "Fluminense"
      ],
      "fol_rules": [
        ""
      ],
      "fol_conc": "plays_for(Ailton_Silva, Fluminense)",
      "perplexity": [
        3.268279552459717,
        1.2719157934188843
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Knows(x, y)",
        "Plays(x, y)",
        "Loaned(x, y)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∀x (Born(x, yyy)) → Knows(x, ailton)",
        "Plays(ailton) ∧ Loaned(ailton, bragao) → Is(ailton, nautico)"
      ],
      "fol_conc": "Plays(ailton)",
      "perplexity": 1.6594799757003784,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PlayedFor(x, y)",
        "PlayedFor(y)",
        "PlayedFor(x, z)"
      ],
      "fol_consts": [
        "Ailton Silva",
        "Braga",
        "Nautico",
        "Fluminense",
        "Brazillian",
        "1995",
        "Ailton Silva"
      ],
      "fol_rules": [
        "∀x (PlayedFor(x, y) → PlayedFor(y))",
        "∀x (PlayedFor(x, z) → ∃w (PlayedFor(z, w)))",
        "¬(PlayedFor(Ailton Silva, Fluminense))"
      ],
      "fol_conc": "PlayedFor(Ailton Silva, Fluminense)",
      "perplexity": 2.0861611366271973,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PlayedFor/1, PlayedFor/2.\n\n\nFatal error:  The following symbols are used with multiple arities: PlayedFor/1, PlayedFor/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 474
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LoveBy(x, y)",
        "IsFavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "IsKoala(x)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "Max"
      ],
      "fol_rules": [
        "∀x (LoveBy(x, tourists) → IsFavoriteAnimal(x, Max))",
        ". ",
        "\n    * \n    * ∀x (AnimalFromAustralia(x) → LoveBy(x, tourists))\n    *",
        "\n    * ∀x (IsKoala(x) ∧ Fluffy(x))  → ¬IsQuokka(x)",
        "fol_conc"
      ],
      "fol_conc": "Koalas love to sleep.",
      "perplexity": [
        2.1587138175964355,
        1.9064726829528809
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "Australia(x)",
        "Fluffy(x)",
        "Sleeps(x)"
      ],
      "fol_consts": [
        "max",
        "koalas",
        "animals",
        "tourists",
        "quokkas"
      ],
      "fol_rules": [
        "∀x (Loved(x, tourists) → Favorite(x, max))",
        "All(a) → Australia(a)",
        "All(q) ∧ Animal(q) ∧ Australia(q) → All(max) ∧ Fluffy(max) ∧ Sleeps(max)"
      ],
      "fol_conc": "Sleeps(koalas)",
      "perplexity": 1.6065083742141724,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "Favorite(x, y)",
        "IsA(x, y)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "animals",
        "Max",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∃y (LovedBy(x, y) → Favorite(x, y))",
        "∀a (IsA(a, animals) → LovedBy(a, tourists))",
        "∀a (IsA(a, animals) → IsA(a, Australia))",
        "∀a (IsA(a, quokka) → IsA(a, Australia))",
        "∀x ∃y (Fluffy(x) → Favorite(Max, y))",
        "(Fluffy(x) ∧ Favorite(Max, x) → ¬IsA(x, quokka))"
      ],
      "fol_conc": "LovedBy(koala, tourists)",
      "perplexity": 1.714306116104126,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 475
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Movie(x)",
        "Superhero(x)",
        "Character(x)",
        "GoodGuy(x)",
        "Badguy(x)",
        "WinFight(x, y)"
      ],
      "fol_consts": [
        "Digby",
        "SurprisingAdventuresOfSirDigbyChickenCaesar",
        "Nemesis"
      ],
      "fol_rules": [
        "∀x (Movie(x) → Superhero(x))",
        "∀x (GoodGuy(Character(x)))",
        "(Superhero(SurprisingAdventuresOfSirDigbyChickenCaesar)  → Character(Digby))"
      ],
      "fol_conc": "Badguy(Nemesis)",
      "perplexity": [
        1.7948894500732422,
        1.1258997917175293
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (GoodGuy(Character(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Wins(y, z)",
        "Named(x, y)"
      ],
      "fol_consts": [
        "sir",
        "digby"
      ],
      "fol_rules": [
        "∀x ∀z (Superhero(x) → Wins(x, z))",
        "Surprisingadventuresofsirdidigbchickencaesar(superhero)",
        "Goodguy(x) → Named(x, goodguy)",
        "Named(sirdigby, surprizingadventuresofsiderigbychickeneaser)",
        "Wins(a, b) → ¬Wins(b, a)",
        "Superhero(x) ∧ Named(x, character) → Appears(character, x)"
      ],
      "fol_conc": "¬Wins(diaby, nemesis)",
      "perplexity": 2.4165217876434326,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wins(x)",
        "Fight(x, y)",
        "AppearsInMovie(x)",
        "AppearsInMovie(x)"
      ],
      "fol_consts": [
        "Sir Digby",
        "good guy",
        "bad guy"
      ],
      "fol_rules": [
        "∀x (Wins(x) → Fight(x, y))",
        "∀x ∃y (Fight(x, y) ∧ AppearsInMovie(y))",
        "AppearsInMovie(x)",
        "Wins(Sir Digby) ∧ AppearsInMovie(Sir Digby)"
      ],
      "fol_conc": "Wins(Sir Digby)",
      "perplexity": 2.77581524848938,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 476
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Works(x, y)",
        "NeedsToEarningMoney(x)",
        "OrdersTakeOutFrequently(x)",
        "EatsInDiningHall(x)",
        "IsPickyEater(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Works(x, StudentJob) → NeedsToEarningMoney(x))",
        ", ",
        ", // This is an example of how to add multiple rules. You can remove the comma if you only have one rule. 6457: ",
        "∀x (OrdersTakeOutFrequently(x) → Works(x,StudentJob))",
        ",",
        "∃x (EatsInDiningHall(x) ∨ OrdersTakeoutFrequently(x))",
        ",",
        "], 7082 : },] ",
        "fol_conc",
        "Mary is not a picky eater and spends a lot of time eating and catching up with friends in the campus dining halls.: Mary enjoys dining hall meals and recipes and she spends a lot of her time eating and catching up with friends."
      ],
      "fol_conc": "Mary is not a picky eater and spends a lot of time eating and catching up with friends in the campus dining halls: Mary enjoys dining hall meals and recipes and she spends a lot of her time eating and catching up with friends.",
      "perplexity": [
        1.5484498739242554,
        2.659191608428955
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x, y)",
        "Earnmoney(x)",
        "Ordertakeout(x)",
        "Picky(x)",
        "Spendtime(x, y)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x, campus) ∧ Earnmoney(x)) → ¬Picky(x)"
      ],
      "fol_conc": "Notpicky(mary) ∧ Spendtime(mary, dininghall)",
      "perplexity": 1.6419284343719482,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Work(x, y)",
        "OrderTakeoutFrequently(x)",
        "EnjoyDiningHallMealsAndRecipes(x)",
        "PickyEaters(x)",
        "SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(x)"
      ],
      "fol_consts": [
        "Mary"
      ],
      "fol_rules": [
        "∀x (Work(x, y) → ∃p (OrderTakeoutFrequently(x) ∧ Work(x, y)))",
        "(EnjoyDiningHallMealsAndRecipes(x)) → ¬PickyEaters(x)",
        "(SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(x) ∨ EnjoyDiningHallMealsAndRecipes(x))"
      ],
      "fol_conc": "¬PickyEaters(Mary) ∧ SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(Mary)",
      "perplexity": 1.7438634634017944,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 477
  },
  {
    "id": 157,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James has a part-time job offered by the university.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkInLibrary(x)",
        "WorksInLab(x)",
        "FromCSDepartment(x)",
        "PartTimeJobOfferedByUniversity(x)"
      ],
      "fol_consts": [
        "James",
        "Jack",
        "David"
      ],
      "fol_rules": [
        "∀x (Student(x) → WorkInLibrary(x))",
        "// All students work in the library.",
        "∀x (WorkInLab(x) ∧ Student(x))",
        "// Students who are working in the lab are also students.",
        "// This is a more specific rule about students and their jobs. ",
        "∀x (FromCSDepartment(x) ∧ PartTimeJobOfferedByUniversity(x))",
        "All members of the computer science department have a part-time job offered by the university.",
        ""
      ],
      "fol_conc": "James has a part-time job offered by the university",
      "perplexity": [
        1.992931604385376,
        1.6443487405776978
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "// All students work in the library."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Parttime(y)",
        "Instruct(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, library)) → ¬Student(x) ∧ Department(x, computercience)",
        "∀x (Parttime(x) ∧ Student(x) ∧ Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) ∧ Instruct(david, x)) → Instruct(david, x)",
        "∀x (Lab(x) ∧ Instruct(david, x))",
        "(James(student) ∧ Work(james, lab))",
        "¬(Jack(student) ∧ Parttime(jack) ∧ Lab(jack))"
      ],
      "fol_conc": "Parttime(james)",
      "perplexity": 1.6386723518371582,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorksInLab(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "FromComputerScienceDepartment(x)",
        "WorkInLibrary(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "James",
        "Jack",
        "university",
        "library"
      ],
      "fol_rules": [
        "∀x (Student(x) → WorksInLab(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) ∧ Student(x) → WorkInLibrary(x))",
        "∀x (FromComputerScienceDepartment(x) ∧ Student(x) → WorksInLab(x))",
        "∀x (Student(x) ∧ Student(x) → HasPartTimeJobOfferedByUniversity(x))"
      ],
      "fol_conc": "HasPartTimeJobOfferedByUniversity(James)",
      "perplexity": 1.767884373664856,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 478
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "EatSalad(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyIntake(x)",
        "HaveGoodParentRelationship(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalad(x) → GrownUpInHealthConsciousHome(x))",
        ",",
        "∀x (HaveGoodParentRelationship(x, y) ∧ FulfillDailyIntake(x)) → EatSalad(x)",
        "∀x (GrewUpInHealthConsciousHome(x) ∧ ¬EatSalad(x))"
      ],
      "fol_conc": "EatSalad(taylor)",
      "perplexity": [
        1.7876778841018677,
        1.3988049030303955
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Healthy(y)",
        "Grewup(x, y)",
        "Good(x, y)",
        "Relationship(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x) → Healthy(x))",
        "∀x (Grewup(x, y) ∧ Eat(x) → Healthy(y))",
        "∀x (Good(x, y) ∧ Eat(x) → Relationship(x, y))",
        "(Relationship(x, y) → Fulfill(x, y))",
        "(Relationship(x, y) → ¬Eat(x))",
        "(Gym(x) ∧ Daily(x)) → Alwaysfulfill(x)",
        "Existential(y1, y2) → (Grewup(y1, y2) ⊕ Existential(y2, y1))"
      ],
      "fol_conc": "Eat(taylor)",
      "perplexity": 1.7171189785003662,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EatSaladRegularly(x)",
        "ConsciousAboutHealthAndEatingHabits(x)",
        "GrewUpInHealthyChildhoodHome(x)",
        "FulfillNutritionalDailyIntake(x)",
        "GoodRelationshipWithParents(x)",
        "GoodRelationshipWithParents(y)",
        "GoodRelationshipWithParents(y)"
      ],
      "fol_consts": [
        "Taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladRegularly(x) → ConsciousAboutHealthAndEatingHabits(x))",
        "∀x (GrewUpInHealthyChildhoodHome(x) ∧ EatSaladRegularly(x))",
        "∀x (FulfillNutritionalDailyIntake(x) ∧ GrewUpInHealthyChildhoodHome(x))",
        "(GoodRelationshipWithParents(x) → FulfillNutritionalDailyIntake(x))",
        "(GoodRelationshipWithParents(x) → ¬EatSaladRegularly(x))",
        "(GoodRelationshipWithParents(y) ∧ GoodRelationshipWithParents(z) → FulfillNutritionalDailyIntake(y))"
      ],
      "fol_conc": "EatSaladRegularly(Taylor)",
      "perplexity": 2.0077388286590576,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 479
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Capital(x)",
        "PopulationSize(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "Capital(Beijing)",
        "PopulationSize(Beijing, p)"
      ],
      "fol_conc": "",
      "perplexity": [
        3.38611102104187,
        1.4317158460617065
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "world"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, china) ∧ Capital(x))",
        "∃x (Hosted(x, beijing) ∧ Ranked(x, asia))",
        "(Ranked(beijing, world) ∨ Ranked(beijing, asia))"
      ],
      "fol_conc": "Not(worldly2ndlargestcity)",
      "perplexity": 1.8451765775680542,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldPopulousCity(y)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "∀x (Capital(x, China)) ∧ Capital(Beijing, x)",
        "Capital(Beijing, China)",
        "WorldPopulousCity(Beijing)",
        "LocatedIn(Beijing, China)"
      ],
      "fol_conc": "∃x (WorldPopulousCity(x) ∧ ¬HostedOlympics(x))",
      "perplexity": 3.035545587539673,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 480
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Ranked(x, y)",
        "ActivePlayer(y)",
        "FemalePlayer(r, a)",
        "MalePlayer(m, x)"
      ],
      "fol_consts": [
        "x",
        "y",
        "r",
        "a",
        "m",
        "WTA"
      ],
      "fol_rules": [
        "(∀z (ActivePlayer(z))) ≡ (∃w ActivePlayer(w ∧ z ≠ w))",
        "(∀z ((ActivePlayer(z) ∨ MalePlayer(z,x)))) ≡ ¬(Women's(Tennis Association)(x,z))"
      ],
      "fol_conc": "∃x ActivePlayer(x)",
      "perplexity": [
        2.518296003341675,
        1.9170558452606201
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀z (ActivePlayer(z))) ≡ (∃w ActivePlayer(w ∧ z ≠ w))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Highly(x, y)",
        "Active(x)",
        "Lost(y, x)"
      ],
      "fol_consts": [
        "gauff",
        "swiatek"
      ],
      "fol_rules": [
        "∀x (Highly(rina, x)) → (∃y (Player(rina, y) ∧ Highly(y, rina)))",
        "(Swiatek(x) ∨ Highlly(rina, x))"
      ],
      "fol_conc": "¬(Loss(gauff, iga)) ∨ Active(gault)",
      "perplexity": 3.5623319149017334,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsHighlyRanked(x, y)",
        "IsHighlyRanked(y, x)"
      ],
      "fol_consts": [
        "player1",
        "player2",
        "player3",
        "coco",
        "iga",
        "rafael",
        "womens",
        "tennis",
        "garros2022",
        "rolandgarrorssupplementary",
        "highlyactive"
      ],
      "fol_rules": [
        "∀x (IsHighlyRanked(x, r1) → IsHighlyRanked(r1, x))",
        "(IsHighlyRanked(ixa) ∧ IsHighlyRanked(rafaelb)) ∨ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc))))",
        "∀x (IsHighlyRanked(x, r2) → ¬(IsHighlyRanked(r1f, x) ∨ IsHighlyRanked(faralb)))",
        "(IsHighlyRanked(cocagauff)) ∧ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc)) ∨ (IsHighlyRanked(rafaelb) ∨ ∃x (IsHighlyRanked(x, r2)))))",
        "∀x ((IsHighlyRanked(iga) ∧ ¬IsHighlyRanked(rafaelps)) → IsHighlyRanked(faralbs))",
        "(IsHighlyRanked(cocagauff) ∨ (IsHighlyRanked(rafaelb)))"
      ],
      "fol_conc": "¬(IsHighlyRanked(iga, r1f) ∧ ¬IsHighlyRanked(rafaelps, ixa)) ∨ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc))))",
      "perplexity": 3.585270881652832,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsHighlyRanked/1, IsHighlyRanked/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsHighlyRanked/1, IsHighlyRanked/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 521
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x, Fluminense)",
        "Club(x)",
        "Person(y)",
        "Fluminense",
        "Braga",
        "Ailton"
      ],
      "fol_consts": [
        "Ailton",
        "Footballer(1tonico Silva)"
      ],
      "fol_rules": [
        "∀x (Fluminense(x)^ ∨ Club(x))",
        "(Braga(x) ∧ Player(x, Braga))^ OR ∃y ((Club(y^ AND Person(x))) ^ OR ¬Club(Person(x))))",
        "]}{",
        "fol_preds",
        "%{player%,",
        "flumenense%",
        "%,",
        "club%",
        "}",
        "fol_consts",
        "[\"Ailton\","
      ],
      "fol_conc": "%{% player x y %}^ OR NOT club(y)%",
      "perplexity": [
        2.2612507343292236,
        6.06541633605957
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Fluminense(x)^ ∨ Club(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Name(x)",
        "Born(y)"
      ],
      "fol_consts": [
        "atilton",
        "sylvia"
      ],
      "fol_rules": [
        "(∃y (Born(y)) ∧ Name(atilton))",
        "(∀x (Born(x) → ∃y (Born(y))) ⊕ (∃x (Name(x) ∧ Born(x))))",
        "((Fluminense(ratilton) ∨ Braga(ratilton)) ∧ Nautico(ratilton))",
        "(Braga(ratilton) ∨ Fluminense(ratilton)) → ∃y (Born(y))"
      ],
      "fol_conc": "Ailton(ratilton)",
      "perplexity": 3.251880407333374,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "LoanedOutTo(y, x)",
        "PlayedFor(z, y)"
      ],
      "fol_consts": [
        "Ailton",
        "Silva"
      ],
      "fol_rules": [
        "∀x (Born(x, z)) → ∀y (LoanedOutTo(y, x)) ∧ ∃z (PlayedFor(Ailton, z))"
      ],
      "fol_conc": "(Born(r, x)) ∨ LoanedOutTo(s, r) ∨ PlayedFor(l, s)",
      "perplexity": 4.101230144500732,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 522
  },
  {
    "id": 190,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Are(x, y)",
        "WearLargeShoes(y)"
      ],
      "fol_consts": [
        "Yuri"
      ],
      "fol_rules": [
        "{∀x ∀y (Are(x, y) → WearLargeShoes(y))}",
        "All basketball players have a certain height. If someone has the same height and wears large shoes when that size matches what type of shoe available in market can be worn for sports purposes, then he must wear sneakers with high heels."
      ],
      "fol_conc": "Are(x, Yuri) ∧ WearLargeShoes(yuri)",
      "perplexity": [
        3.2482831478118896,
        2.1334495544433594
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{∀x ∀y (Are(x, y) → WearLargeShoes(y))}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "American(x)",
        "Tall(y)"
      ],
      "fol_consts": [
        "yuri",
        "american",
        "basketball"
      ],
      "fol_rules": [
        "∀x (Basketball(basketball) → Tall(tall))",
        "(Not(american)) ∧ (∃x (Basketball(x))) ⊕ ¬((Tall(y) ∨ Basketball(y)) ∧ Not(american))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 5.028677940368652,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Not(x)",
        "All(y, z)"
      ],
      "fol_consts": [
        "yuri",
        "x",
        "yuri",
        "yuri"
      ],
      "fol_rules": [
        "∀x (Not(x)) → ∀z ∃w (Not(z) ∧ Not(w))"
      ],
      "fol_conc": "∃x (Not(x) ∨ All(y, x) ∨ ¬(All(x, y)))",
      "perplexity": 4.926126480102539,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 523
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac"
      ],
      "fol_rules": [
        "(∀x (Project(x) → WrittenIn(x, python)))",
        "((∃x ¬(Jokes(x) ∧ Unaware(rina)) ∧ Project(sam)) ∨ ((∃y ∘ Be(y, perfect)).¬Use(sam, y)))."
      ],
      "fol_conc": "(∃x (Project(x) ∧ Do(sam, x)))",
      "perplexity": [
        1.4543311595916748,
        3.4426028728485107
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃x ¬(Jokes(x) ∧ Unaware(rina)) ∧ Project(sam)) ∨ ((∃y ∘ Be(y, perfect)).¬Use(sam, y)))."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Location(x, y)",
        "City(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana"
      ],
      "fol_rules": [
        "∀x (Location(y, x) → City(z, y))",
        "(Montana(x) ∧ City(y, z)) ⊕ White(sulphur) ∧ Butte(x, y)",
        "(Pierre(x)) → ∃y ((City(x, y) ∨ Not(city1, butte)))",
        "Not(city2, montana)"
      ],
      "fol_conc": "∀x (Location(y, x) ∧ City(z, y)) ⊕ White(sulphur) ∧ Butte(x, y)",
      "perplexity": 3.2776472568511963,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "City(x, y)",
        "StateOf(x)"
      ],
      "fol_consts": [
        "montana",
        "billings",
        "billings",
        "billings"
      ],
      "fol_rules": [
        "∀x (StateOf(billings)) → City(billings, x)"
      ],
      "fol_conc": "∃y ∃z (City(x, y) ∧ StateOf(y) ∧ City(z, z) ∧ ¬StateOf(billings))",
      "perplexity": 6.583261966705322,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 524
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Skittish(turtle)"
      ],
      "fol_consts": [
        "Rabbits",
        "Turtles"
      ],
      "fol_rules": [
        "∀x (Cute(x) → ¬Skittish(x))",
        "(Some(Turtles) ∨ Skittish(Tturtle))) ⊕ ∀x (Cute(x)): All rabbits are not skittish.",
        "∃S Some(Squirrels): S2"
      ],
      "fol_conc": "Rabbits",
      "perplexity": [
        3.259385108947754,
        2.787620782852173
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Some(Turtles) ∨ Skittish(Tturtle))) ⊕ ∀x (Cute(x)): All rabbits are not skittish."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "All(x, y)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle",
        "squirrel",
        "rock"
      ],
      "fol_rules": [
        "(∀x ∃y (All(y, x))) → (∀x ∃y ∀z (All(z, x)) ∧ All(y, z) ∨ ¬(Some(x) ∧ Some(y)))",
        "(Skittish(something)) → ((Not(remaining) ↔ Not(still)) → Skittish(something))"
      ],
      "fol_conc": "Rock(cute) ⊕ Rock(still)",
      "perplexity": 4.116447448730469,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsRabbit(x)",
        "IsRabbit(x, y)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle"
      ],
      "fol_rules": [
        "(∃x (IsRabbit(x)) ∧ ¬(¬(IsRabbit(x))) → IsRabbit(x))",
        "(¬(IsRabbit(a)) ∨ ∃y (IsRabbit(y) ∧ Skittish(y)))",
        "(¬(Skittish(turtle)) ∧ ∀x (IsRabbit(x) ∧ Skittish(x) → ¬(IsRabbit(x))))",
        "(∀x (IsRabbit(x) ∨ IsRabbit(s) ∨ ∃y (IsRabbit(y) ∧ Skittish(y))) → (∀x (Skittish(x)) ∨ ∀x (Skittish(x)) → ¬(IsRabbit(x))))",
        "¬(∃x (IsRabbit(x) ∧ IsRabbit(x) ∧ Skittish(s)) → ∃y (IsRabbit(y)))",
        "(IsRabbit(rabbit)) ∨ (∀x (Skittish(turtle) ∨ ∀x (Skittish(turtle)) → ¬(IsRabbit(x))))",
        "¬(∀x (IsRabbit(x) ∧ IsRabbit(x)))",
        "(∃y ((IsRabbit(y)) ∧ Skittish(s)))"
      ],
      "fol_conc": "(Skittish(rabbit) ∨ ¬(Skittish(turtle)))",
      "perplexity": 4.348047733306885,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 525
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x)",
        "MadeBy(x, BG)",
        "SellsMoreThanOneMillion(Copy(c), Copy(s))"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Created(x) ∧ MadeBy(x, BG)) → SellsMoreThanOneMillion(Copy(c), Copy(s))",
        "∀Copy(a1, b): (a1 = copy(b) ∧ Created(copy(1))) → SellsMoreThanOneMillion(Copy(c), Copy(s))"
      ],
      "fol_conc": "Created(x) ∧ MadeBy(x, BG)",
      "perplexity": [
        1.3966439962387085,
        1.8625372648239136
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Created(x) ∧ MadeBy(x, BG)) → SellsMoreThanOneMillion(Copy(c), Copy(s))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drink(x)"
      ],
      "fol_consts": [
        "x1",
        "x2",
        "rna1",
        "rho1",
        "x3",
        "x4"
      ],
      "fol_rules": [
        "(∃x (Independent(x))) ∧ ∃y (Caffeine(y))",
        "(∀x (Drink(x) → Caffeine(x))) ∨ (∃x (Drink(x)))",
        "(∀x (Drink(x)) → ¬(Dependent(x))) ∨ ((∀x (Independent(x)) ∧ Independent(rna1)) ⊕ ∃y (Caffeine(y)))"
      ],
      "fol_conc": "Jokes(rna2) ∨ Uncertain(rna3)",
      "perplexity": 3.0659239292144775,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "JapaneseGameCompany(x)",
        "MadeInJapan(x, y)",
        "SellMoreThanOne Million(y)"
      ],
      "fol_consts": [
        "z",
        "z",
        "z"
      ],
      "fol_rules": [
        "∀x (MadeInJapan(x, z)) → ∃y (SellMoreThanOne Million(y, x))",
        "(JapaneseGameCompany(z)) ∨ (∀y (MadeInJapan(z, y))) ⊕ ∀y ((SellMoreThanOne Million(y) ∧ MadeInJapan(y, z)) → ¬(JapaneseGameCompany(z) ∧ SellMoreThanOne Million(y)))"
      ],
      "fol_conc": "MadeInJapan(x, z)",
      "perplexity": 2.683007001876831,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SellMoreThanOneMillion/1, SellMoreThanOneMillion/2.\n\n\nFatal error:  The following symbols are used with multiple arities: SellMoreThanOneMillion/1, SellMoreThanOneMillion/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 526
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(U)"
      ],
      "fol_consts": [
        "Harry"
      ],
      "fol_rules": [
        "∀x Kind(x) → Gentleman(x)",
        "(∃x Ugly(U)) ⊕ ¬(Gentleman(harry))]",
        "fol_conc': ∃x (Kind(x) ∨ Evil(x) ∧ Ugly(U))'}"
      ],
      "fol_conc": "∈yUy(y≠Harry)",
      "perplexity": [
        3.166081190109253,
        4.1789350509643555
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∃x Ugly(U)) ⊕ ¬(Gentleman(harry))]"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)"
      ],
      "fol_consts": [
        "man1",
        "evil1"
      ],
      "fol_rules": [
        "(∃x (Kind(x) ∧ Evil(x)))",
        "(No(x, ugly)) → No(uglyperson, handsome)",
        "(All(x, kind))",
        "Man(man1)",
        "Evil(man1)",
        "Not(man1, ugly)",
        "All(man, gentlemen)",
        "Gentlemen(man1)"
      ],
      "fol_conc": "(Kind(man2) ∨ Evil(man2))",
      "perplexity": 4.811374664306641,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Gentlemen/1, Gentlemen/0, Man/1, Man/0, Kind/1, Kind/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Gentlemen/1, Gentlemen/0, Man/1, Man/0, Kind/1, Kind/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "IsMan(x)",
        "IsMan(x)"
      ],
      "fol_consts": [
        "man",
        "guy"
      ],
      "fol_rules": [
        "∀x (Kind(x) → IsMan(x))",
        "(IsMan(guy)) ⊕ ¬(IsMan(man) ∧ IsMan(guy))"
      ],
      "fol_conc": "IsMan(h)",
      "perplexity": 3.961679220199585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 527
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "LoveSeason(x, y)",
        "AttendCollege(x, y)"
      ],
      "fol_consts": [
        "Emma",
        "Fall"
      ],
      "fol_rules": [
        "∀x (Summer(y) → x Loves(Fall,z))",
        "∃y ((LoveSeason(Emma,x) ∨ ∼(Attends Emma college for at least 3 years)))",
        "(Student(eva). Loves Fall(x))."
      ],
      "fol_conc": "Fall(Ema)",
      "perplexity": [
        3.370195150375366,
        3.53603458404541
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Summer(y) → x Loves(Fall,z))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "∀x (Students(x)) → ∀y (Unsure(y, x) ∨ Aware(y, x))",
        "(Dependent(rina) ∧ Student(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))",
        "∃x ∃y (Jokes(x, y) ∧ Unsure(x, y))",
        "¬(Drinks(sam) → Dependent(sam, x))",
        "(Play(sam, perfectsong) ∧ Not(jokeaboutperfectsong))",
        "Dependent(rina)",
        "Student(rinaproject)",
        "Be(x, rina)",
        "Jokes(rina)",
        "Written(x, y)"
      ],
      "fol_conc": "Jokes(rina)",
      "perplexity": 3.596717596054077,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dependent/2, Dependent/1, Jokes/2, Jokes/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Dependent/2, Dependent/1, Jokes/2, Jokes/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LongVacation(x, y)",
        "LoveSeason(y, z)",
        "LoveSeason(z)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀x ∀y (LongVacation(x, y)) → (∃z (LoveSeason(x, z) ∧ LongVacation(y, z))) ∨ (∃z (LoveSeason(z) ∧ LongVacation(z) ∧ ¬(LoveSeason(z) ∧ LoveSeason(z))))",
        "(∀x ∀y (LongVacation(x, y)) → (¬(LoveSeason(x, y)) ∨ ∃w ((LoveSeason(w) ∧ LongVacation(y, w)))))"
      ],
      "fol_conc": "∃x (∃y (LoveSeason(x, y)))",
      "perplexity": 4.095651626586914,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LongVacation/1, LongVacation/2, LoveSeason/1, LoveSeason/2.\n\n\nFatal error:  The following symbols are used with multiple arities: LongVacation/1, LongVacation/2, LoveSeason/1, LoveSeason/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 528
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "Low(SurvRate(y))",
        "Sever(cancer(z)), High(DiseaseType(w))"
      ],
      "fol_consts": [
        "D",
        "%"
      ],
      "fol_rules": [
        "# Rule 1: ∀x (∀y Severe(x) → Low(survatrate(b,x)))",
        "#Rule #2. ∃(c,c)"
      ],
      "fol_conc": "∇ x Deadly(y), y has a survival rate of less than .5 or it is deadly.",
      "perplexity": [
        1.8211439847946167,
        8.204771041870117
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "# Rule 1: ∀x (∀y Severe(x) → Low(survatrate(b,x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(y)",
        "Bile(x)",
        "Duct(cancer)"
      ],
      "fol_consts": [
        "x1",
        "y1",
        "z1"
      ],
      "fol_rules": [
        "(∀x (Survival(x) → Low(x))) ∧ (∃x (Deadly(x)) ∨ ∃y (Severe(y) ∧ Deadly(y)))",
        "¬(All(x, bile) ∧ Survival(x))",
        "(Bile(cancer1) ∧ Duct(cancer2))"
      ],
      "fol_conc": "((∀x (Survival(x) → Low(x)) ∨ (∃y (Severe(y) ∧ Deadly(y)))) ∨ ((Bile(cancer1) ∧ Duct(cancer2))) ∨ ¬(All(x, bile) ∧ Survival(x)) ∨ (Cancer1(x) ∨ Cancer2(x)))",
      "perplexity": 2.910975217819214,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isDeadly(x)",
        "hasLowSurvivalRate(x)"
      ],
      "fol_consts": [
        "disease",
        "cancer1",
        "cancer2",
        "cancer2",
        "cancer1"
      ],
      "fol_rules": [
        "∀x (isDeadly(x) → hasLowSurvivalRate(x))",
        "(isDeadly(disease)) ∧ (hasLowSurvivalRate(cancer2)) ∨ ∃x (isDeadly(cancer1) ∧ ¬(hasLowSurvivalRate(x)))"
      ],
      "fol_conc": "∃x ((isDeadly(x) ∨ hasLowSurvivalRate(x)) ∧ (¬(isDeadly(disease)) ∨ (hasLowSurvivalRate(cancer2))))",
      "perplexity": 2.30045223236084,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 529
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "contains(x, y)",
        "hasKnowledge(y)",
        "readsBooks(x)"
      ],
      "fol_consts": [
        "books",
        "readers"
      ],
      "fol_rules": [
        "{forall x (Smarter(z) -> contains(x, z))}",
        "(smaller(p) && books.p = p)",
        "{forall y ((hasKnowledge(books.y))^x != contains(y,x)) || smaller(smaller(z),y)}",
        "{exists!z ((smaller(z)): books.z= :x)}"
      ],
      "fol_conc": "Walden provides tons of knowledge.",
      "perplexity": [
        3.642012357711792,
        4.920571804046631
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{forall x (Smarter(z) -> contains(x, z))}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Reading(x, y)"
      ],
      "fol_consts": [
        "henry",
        "walden",
        "waldenthoreau"
      ],
      "fol_rules": [
        "(∀x (Has(x, waldent)) → ∃y (Waldent(y)))",
        "∀x (∃y (Reading(x, y) ∧ Has(reading, x)) → Reading(rina, rina))"
      ],
      "fol_conc": "Waldet(henry) ⊕ Waldenthoreau(waldenhare)",
      "perplexity": 3.9582631587982178,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Knows(x)",
        "Reads(x, y)",
        "Knows(x)"
      ],
      "fol_consts": [
        "Harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x (Knows(y) → Reads(x, Walden))"
      ],
      "fol_conc": "Knows(Harry)",
      "perplexity": 3.7611818313598633,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 530
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mountain(x)",
        "Visited(Juan, x)",
        "Donated(Mountain(new mexico))",
        "Mine(y)"
      ],
      "fol_consts": [
        "Juan",
        "NewMexico",
        "Texas",
        "Picuris Mountains",
        " Harding Pegmatite Mine",
        "visited",
        "donated",
        "mined"
      ],
      "fol_rules": [
        "∀x (Mountain(x)) → Visited(Juan, x)",
        "∃y)Mine(y), where mine(x,y) denotes 'The Harding Pegmatite Mine' at location y.",
        "∀x (∃y) Mine(y)",
        "∀x Visited(Juan,x)",
        "(NewMexico ∧ Donated(Mountain(new mexico)) → Mountain(Visiting(Juan,new mexico)))",
        "∀x (Donated(Mountain(x)).visited(Juan,x)), ∃x (Mine(y).visited(Visiting(juan,y))))"
      ],
      "fol_conc": "Jokes(Juan)",
      "perplexity": [
        2.8760826587677,
        2.393364429473877
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y)Mine(y), where mine(x,y) denotes 'The Harding Pegmatite Mine' at location y."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Picuris(x)",
        "Mountain(x, y)",
        "Visited(y, x)"
      ],
      "fol_consts": [
        "juan",
        "onate"
      ],
      "fol_rules": [
        "(∃x (Mountain(x, picuris)) ∧ ∀y (Mountain(y, picuris) ∨ Donated(y, mine)))",
        "(Donated(juan, onate))"
      ],
      "fol_conc": "(Visited(juan, picuris))",
      "perplexity": 2.7630670070648193,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Picuris(x)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "juan",
        "onate",
        "harding"
      ],
      "fol_rules": [
        "∀x (Picuris(x) ∧ LocatedIn(y, x)) → (∃y (LocatedIn(y, x)))",
        "(Picuris(juan)) ∨ (Picuris(onate))"
      ],
      "fol_conc": "Picuris(juan)",
      "perplexity": 2.8036558628082275,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 531
  },
  {
    "id": 71,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Volatile(x)",
        "SuitableForRetirementFund(y)"
      ],
      "fol_consts": [
        "KO",
        "MatureCompanies(matureC)"
      ],
      "fol_rules": [
        "∀x (Volatile(x) → NotSuitableForRetirementFund(x))",
        "∃y (∼Mature(y) ∧ SuitableForRetirementFund(y))"
      ],
      "fol_conc": "CKO ⊕ MatureC",
      "perplexity": [
        3.002117156982422,
        1.9011603593826294
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "CKO ⊕ MatureC"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Growth(x, y)",
        "Volatile(x)"
      ],
      "fol_consts": [
        "ko",
        "company"
      ],
      "fol_rules": [
        "∀x (Company(rco)) → ∃y (Stock(y, rco)) ∧ ∀z (Mature(z) ∨ Suitable(z, rco) → Stock(z, koz))",
        "(Volatile(x) ∧ Not(bootsx)) ⊕ Stocks(ko, x)",
        "Not(bootsk, ko)"
      ],
      "fol_conc": "Stock(ko, x)",
      "perplexity": 5.124571323394775,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Not/2, Not/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Not/2, Not/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Volatile(x)",
        "Stock(x, y)",
        "Growth(y)"
      ],
      "fol_consts": [
        "KO",
        "KO"
      ],
      "fol_rules": [
        "∀x (Volatile(x)) → ∃y (Stock(x, y))",
        "(Stock(x, y) ∧ ∀z (Growth(z))) ⊕ ∀z (∃w ((Growth(w, z) ∨ ¬(¬Growth(y, w)))) ∨ Stock(x, y))"
      ],
      "fol_conc": "∀x (Volatile(x) → ∃y (Growth(y)))",
      "perplexity": 3.625498056411743,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Growth/2, Growth/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Growth/2, Growth/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 532
  },
  {
    "id": 127,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock does not have wings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Breathes(x)",
        "Wings(x, y)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∃x Mammal(x)",
        "For all x If P(x), then Q(x) → R(x)",
        "¬(P(y) ∧ NotQ(z)) → ¬R(y)",
        "Wings(rina)"
      ],
      "fol_conc": "Wings(rina)",
      "perplexity": [
        2.6091818809509277,
        1.8756104707717896
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "For all x If P(x), then Q(x) → R(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(y)",
        "Bird(z)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "mammals",
        "monkeys",
        "birds",
        "animals",
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "(Monkey(mammals) ∧ Mammal(monkey)) ∨ Is(monkey, monkey)",
        "Is(birds) ∧ Is(animal)"
      ],
      "fol_conc": "¬Is(wings) ⊕ ¬Breathe(something)",
      "perplexity": 3.6146841049194336,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "mammals",
        "monkeys",
        "birds",
        "animals"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x)) → ∃y (Mammal(y) ∨ Animal(y))",
        "(Mammal(mammals) ∧ ¬(Animal(monkey) ∨ Mammal(monkey))) ⊕ (¬(Animal(birds) ∨ Mammal(birds)))"
      ],
      "fol_conc": "∀x ((Mammal(x) → ∃y (Mammal(y)) ∧ Animal(x)) ∨ (¬Mammal(mammals) ∨ ¬Animal(monkeys)) ∨ (∀x (Animal(x) → ¬(Mammal(birds)))))",
      "perplexity": 2.3051323890686035,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 533
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Skittish(animal(x))",
        "Rabbitta",
        "Turtel"
      ],
      "fol_consts": [
        "Rabbit",
        "Squirrel",
        "Rock"
      ],
      "fol_rules": [
        "(∀x (Cute(x) → ¬Skittish(x)))",
        "((∃y (Rabbit(y)) ∧ Skittish(z)) ∨ (∃z (Turtel(x)) ∧ ∼(Still(z)))) ⊕ ((∀y (Squirrel(a))) ∧ ∀z (Rock(b))),"
      ],
      "fol_conc": "(Cute(Rabbitta) ∧ Skittish(Squirrel(Turtel(rock])))",
      "perplexity": [
        2.4840481281280518,
        3.243828058242798
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃y (Rabbit(y)) ∧ Skittish(z)) ∨ (∃z (Turtel(x)) ∧ ∼(Still(z)))) ⊕ ((∀y (Squirrel(a))) ∧ ∀z (Rock(b))),"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle"
      ],
      "fol_rules": [
        "(∀x (Cute(x) → Rabbit(x)))",
        "(∃x (Turtle(t)) ∧ (∃y (Skittish(y, x))))",
        "(Squirrel(s) → Skittish(s))",
        "(Rock(r) ∧ Still(r))"
      ],
      "fol_conc": "(Rabbit(r)) ∨ (∃y (Still(y)))",
      "perplexity": 3.8100430965423584,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Skittish/1, Skittish/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Skittish/1, Skittish/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isCute(x)",
        "exists(y)",
        "isCute(z)"
      ],
      "fol_consts": [
        "rabbids",
        "turtles",
        "rabbits",
        "squirrels",
        "rock"
      ],
      "fol_rules": [
        "(∀x (isCute(x))) → (∃y ((isCute(y)) ∨ ¬(exists(y))))",
        "(∃x (exists(y) ∧ isCute(x))) → ∃z (isCute(z))"
      ],
      "fol_conc": "¬((∃t (exists(t) ∧ exists(rabbids))) ∨ (∃r (exists(squirrels)) ∧ ¬(exists(rack))))",
      "perplexity": 4.332442760467529,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 534
  },
  {
    "id": 169,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "No politicans are part of the Nazi Reichstag.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∀x (Caffeine(x) ∧ Drinks(x)) ⊕ ¬(Hinrich(x) ∨ ∃y Caffeine(y))",
        "∀x (∃y Caffeine(y) ∧ Jokes(hinrich)) ⊕ ¬(Hinrich(x) ∨ ∃z Drink(z))"
      ],
      "fol_conc": "Jokes(rina) ⊕ Unaware(rina)",
      "perplexity": [
        2.685208320617676,
        1.4894016981124878
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python"
      ],
      "fol_rules": [
        "∀x (Drink(x)) → Dependent(x)",
        "(Sam(rina, x)) ∧ Unaware(rina) ⊕ ¬(Mac(sam) ∨ Unclear(rina))",
        "(Student(rina)) ∧ Not(arnednesssam)"
      ],
      "fol_conc": "Jokes(rina)",
      "perplexity": 3.5919346809387207,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Member(x, y)",
        "Person(x)"
      ],
      "fol_consts": [
        "heinrich",
        "nazi"
      ],
      "fol_rules": [
        "∀x (Person(x)) → ∃y (Member(y, x))"
      ],
      "fol_conc": "¬(Member(nazi, heinrich))",
      "perplexity": 2.5644705295562744,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 535
  },
  {
    "id": 196,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi is terricolous.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Drinks(x)",
        "Student(x)",
        "Dependent(x)",
        "Barks(y)"
      ],
      "fol_consts": [
        "rina"
      ],
      "fol_rules": [
        "∀x (Drinks(x) → Dependent(x))",
        "∃y (Students(y)): ∀z ((Drinks(z, x) ∨ Barks(z)) ⊕ ¬((Student(z) ∧ Barks(z))))",
        "¬(Dependent(rina,x))"
      ],
      "fol_conc": "(Terricolous(Kikki))",
      "perplexity": [
        2.762660503387451,
        3.7335548400878906
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (Students(y)): ∀z ((Drinks(z, x) ∨ Barks(z)) ⊕ ¬((Student(z) ∧ Barks(z))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Animal(x)",
        "Barks(y)",
        "Likes(z)"
      ],
      "fol_consts": [
        "bark",
        "like"
      ],
      "fol_rules": [
        "(∃x ∀y (If(x, y) → If(z, x)) ∧ All(dogs) ⊕ Barks(bark))",
        "(All(animals) ∧ (∀z ((Barks(y) ∨ Like(jane)) → Zicks(y))) ∧ Legs(z) ∨ Jumping(z))",
        "(Terricolous(a) ∧ (Legs(a) ∨ Jumping(a))) ∨ Terricolous(kikki)"
      ],
      "fol_conc": "Terricolous(kikki)",
      "perplexity": 3.864511251449585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "barks(x)",
        "jumps(x)",
        "hasLegs(x)",
        "isTerricolous(x)"
      ],
      "fol_consts": [
        "Jane",
        "KiKi"
      ],
      "fol_rules": [
        "∀x (barks(x) → ¬(¬barks(y) ∨ ∀z (jumps(z) ∧ barks(y))))",
        "(barks(k) → ∃y ((hasLegs(y)) ∨ jumps(y)))",
        "(isTerricolous(s) → (∀t (hasLegs(t)) ∨ isTerricolous(t)))"
      ],
      "fol_conc": "(barks(KiKi) ∧ ¬(jumps(KiKi) ∧ hasLegs(KiKi)))",
      "perplexity": 3.0433437824249268,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 536
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "IsdependentOnCaffeine(x)",
        "DrinkCoffee(x)",
        "JokeAboutCaffeine(x)",
        "DriedThaiChilies(is a hotpot)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Dependent(x) ∧ DrinkCoffee(x))",
        "(¬∃y (Drinkscoffee(y))) ∨ ¬(All products of Baked by Melissa are cupcakes)",
        "∀x ((Not Dependent(x) ∧ Drinks Coffee(x)) ∨ JokeAboutCaffeine(x))"
      ],
      "fol_conc": "DriedThaiChilies(is a hotpot)",
      "perplexity": [
        2.4887778759002686,
        2.0974948406219482
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬∃y (Drinkscoffee(y))) ∨ ¬(All products of Baked by Melissa are cupcakes)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "No(x)",
        "All(y, z)"
      ],
      "fol_consts": [
        "bakery",
        "cupcake",
        "spicy",
        "hotpot",
        "products",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "∀x (Spicy(x) → No(bakery))",
        "∀y (Bakery(y) ∧ Spicy(y) → Cupcake(y))"
      ],
      "fol_conc": "Hotpot(cupcakes)",
      "perplexity": 2.6839542388916016,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bakery/1, Bakery/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bakery/1, Bakery/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BakedByMelissa(x)",
        "Spicy(x)"
      ],
      "fol_consts": [
        "bakeries",
        "cupcakes",
        "hotpots"
      ],
      "fol_rules": [
        "∀x (BakedByMelissa(x)) → ∃y (Spicy(y))",
        "(BakedByMelissa(rina)) ∧ Spicy(rina)"
      ],
      "fol_conc": "∃x (BakedByMelissa(x) ∨ Spicy(x))",
      "perplexity": 2.3198816776275635,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 537
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "Dependent(rina)",
        "Drinks(sam)",
        "Jokes(sam)",
        "Unaware(rina)"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        3.301961660385132,
        4.326804161071777
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "All(x, haswedding)",
        "John(x)",
        "Traveling(x, y)",
        "Wedding(y, z)",
        "Child(z)"
      ],
      "fol_consts": [
        "john",
        "traveling",
        "wedding"
      ],
      "fol_rules": [
        "∀x (All(x, haswedding) → John(x))",
        "(John(john) ∧ Wedding(workingdays)) ⊕ (∃y (Workingdays(y)))",
        "(Wedding(workingdays) ∨ Traveling(john)) → ∀z ((Child(z) ∧ Wedded(john, z)) ∨ (Traveling(john, y) ∧ Haswedding(x, workingdays)))"
      ],
      "fol_conc": "∃x ∃y (∀w (Haswedding(w, x) ∧ Wedding(w, x) → Child(y)))",
      "perplexity": 3.776440382003784,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Traveling/2, Traveling/1, Wedding/1, Wedding/2, John/1, John/0, Workingdays/1, Workingdays/0, Haswedding/2, Haswedding/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Traveling/2, Traveling/1, Wedding/1, Wedding/2, John/1, John/0, Workingdays/1, Workingdays/0, Haswedding/2, Haswedding/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)"
      ],
      "fol_consts": [
        "john",
        "wednesday",
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "(Wedding(wednesday, x)) ∨ ∀y (Wedding(y, x) ∧ ¬(Wedding(x) ⊕ Wedding(y)))"
      ],
      "fol_conc": "Child(john)",
      "perplexity": 3.9544217586517334,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/2, Wedding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/2, Wedding/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 538
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Can(x, y)",
        "Empty(p)"
      ],
      "fol_consts": [
        "Greyhound",
        "Boeing 707"
      ],
      "fol_rules": [
        "∀x (Can(Greyhound(x), transport(y)) → Transport(y)), ∀y ∃z Can(Boeing 707(z), y)",
        "∀x Cannot(Can(x, Greyhound) ∨ Can(x, Boeing 707))"
      ],
      "fol_conc": "Empty(p)",
      "perplexity": [
        3.976666212081909,
        1.8244335651397705
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Can(Greyhound(x), transport(y)) → Transport(y)), ∀y ∃z Can(Boeing 707(z), y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Can(x, y)",
        "Empty(y)"
      ],
      "fol_consts": [
        "plane",
        "airline",
        "passenger"
      ],
      "fol_rules": [
        "(∀x ∀y (Plane(planes)) → Empty(passengers))",
        "If(planepassesemptythennotairlinen)"
      ],
      "fol_conc": "Not(businessespanningplane)",
      "perplexity": 18.67601203918457,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Can(x, y)",
        "NotEmpty(y)"
      ],
      "fol_consts": [
        "airline",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "airline",
        "airline",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane"
      ],
      "fol_rules": [
        "∀x ∀y (Can(x, y) → ¬NotEmpty(y))",
        "(NotEmpty(airline)) ∧ ¬(NotEmpty(plane)) ∨ (∃x ∃y ∃z (Can(x, z) ∧ Can(y, z))) ∨ (∀x ∃y ∃z (Can(x, y) ∧ NotEmpty(z)) → ∀y ∃x ∃z ((NotEmpty(y) ∧ Can(x, z)) → ¬(NotEmpty(z))))",
        "¬(Can(s) ∧ NotEmpty(plane))"
      ],
      "fol_conc": "(∀x (Can(x, plane) ∨ ¬Can(x, plane)))",
      "perplexity": 2.31225323677063,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Can/1, Can/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Can/1, Can/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 539
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "contains(x)",
        "reads(x, y)",
        "gainsKnowledge(y)"
      ],
      "fol_consts": [
        "Harry",
        "sam"
      ],
      "fol_rules": [
        "∀z ∃y ((reads(z, y) ∧ contains(x)) → gainKnowledge(y})",
        "(∀x (gainsKnowledge(x))) ⊕ ¬(∀x ∃y ((read(sam,x) ∨ reads(x,y)) ∧ contain(x,y))))",
        "∀x (∋gainKnowledge(x))^⊕¬∈z (((read(sam,z) ∨ read(z,x)) ∧ contains(z,y)) → gainKnowledge(y))"
      ],
      "fol_conc": "∀x (gainsKnowledge(x))^ ⊕ ¬∃z ((read(sam,z) ∨ reads(z,x)) ∧ contain(z,y))",
      "perplexity": [
        3.0432920455932617,
        2.0813889503479004
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z ∃y ((reads(z, y) ∧ contains(x)) → gainKnowledge(y})"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Knowledge(x)",
        "Reads(x, y)",
        "Gains(x, y)"
      ],
      "fol_consts": [
        "walden",
        "henrythroeu",
        "smarter"
      ],
      "fol_rules": [
        "(∀x (Knowledge(x) → Gains(reading, x)))",
        "(Walden(waldfen)) ∧ (Henryrothau(henerythoene))"
      ],
      "fol_conc": "(Smarter(readswaldefeno)) ∨ (Gains(readswaldfeno))",
      "perplexity": 3.69999361038208,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Gains/2, Gains/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Gains/2, Gains/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasKnowledge(x)",
        "Smarter(y)"
      ],
      "fol_consts": [
        "Harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x (HasKnowledge(x) → Smarter(x))",
        "(∃y (Smarter(y))) ∧ (∃x (HasKnowledge(x) ∧ ∃z (Smarter(z)))) → ((∃y (Smarter(y)) ∧ HasKnowledge(x)) ∨ (∀y (Smarter(y) ∧ ∀z (HasKnowledge(x) ∧ Smarter(z)))))",
        "(∀x (Smarter(x))) ⊕ (∀x (Smarter(x)))"
      ],
      "fol_conc": "(Smarter(h) → HasKnowledge(Walden))",
      "perplexity": 2.4765119552612305,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 540
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Ranked(x, y)",
        "ActivePlayer(y)",
        "FemalePlayer(r, a)",
        "MalePlayer(m, x)"
      ],
      "fol_consts": [
        "x",
        "y",
        "r",
        "a",
        "m",
        "WTA"
      ],
      "fol_rules": [
        "(∀z (ActivePlayer(z))) ≡ (∃w ActivePlayer(w ∧ z ≠ w))",
        "(∀z ((ActivePlayer(z) ∨ MalePlayer(z,x)))) ≡ ¬(Women's(Tennis Association)(x,z))"
      ],
      "fol_conc": "∃x ActivePlayer(x)",
      "perplexity": [
        2.518296003341675,
        1.9170558452606201
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀z (ActivePlayer(z))) ≡ (∃w ActivePlayer(w ∧ z ≠ w))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Highly(x, y)",
        "Active(x)",
        "Lost(y, x)"
      ],
      "fol_consts": [
        "gauff",
        "swiatek"
      ],
      "fol_rules": [
        "∀x (Highly(rina, x)) → (∃y (Player(rina, y) ∧ Highly(y, rina)))",
        "(Swiatek(x) ∨ Highlly(rina, x))"
      ],
      "fol_conc": "¬(Loss(gauff, iga)) ∨ Active(gault)",
      "perplexity": 3.5623319149017334,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsHighlyRanked(x, y)",
        "IsHighlyRanked(y, x)"
      ],
      "fol_consts": [
        "player1",
        "player2",
        "player3",
        "coco",
        "iga",
        "rafael",
        "womens",
        "tennis",
        "garros2022",
        "rolandgarrorssupplementary",
        "highlyactive"
      ],
      "fol_rules": [
        "∀x (IsHighlyRanked(x, r1) → IsHighlyRanked(r1, x))",
        "(IsHighlyRanked(ixa) ∧ IsHighlyRanked(rafaelb)) ∨ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc))))",
        "∀x (IsHighlyRanked(x, r2) → ¬(IsHighlyRanked(r1f, x) ∨ IsHighlyRanked(faralb)))",
        "(IsHighlyRanked(cocagauff)) ∧ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc)) ∨ (IsHighlyRanked(rafaelb) ∨ ∃x (IsHighlyRanked(x, r2)))))",
        "∀x ((IsHighlyRanked(iga) ∧ ¬IsHighlyRanked(rafaelps)) → IsHighlyRanked(faralbs))",
        "(IsHighlyRanked(cocagauff) ∨ (IsHighlyRanked(rafaelb)))"
      ],
      "fol_conc": "¬(IsHighlyRanked(iga, r1f) ∧ ¬IsHighlyRanked(rafaelps, ixa)) ∨ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc))))",
      "perplexity": 3.585270881652832,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsHighlyRanked/1, IsHighlyRanked/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsHighlyRanked/1, IsHighlyRanked/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 521
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x, Fluminense)",
        "Club(x)",
        "Person(y)",
        "Fluminense",
        "Braga",
        "Ailton"
      ],
      "fol_consts": [
        "Ailton",
        "Footballer(1tonico Silva)"
      ],
      "fol_rules": [
        "∀x (Fluminense(x)^ ∨ Club(x))",
        "(Braga(x) ∧ Player(x, Braga))^ OR ∃y ((Club(y^ AND Person(x))) ^ OR ¬Club(Person(x))))",
        "]}{",
        "fol_preds",
        "%{player%,",
        "flumenense%",
        "%,",
        "club%",
        "}",
        "fol_consts",
        "[\"Ailton\","
      ],
      "fol_conc": "%{% player x y %}^ OR NOT club(y)%",
      "perplexity": [
        2.2612507343292236,
        6.06541633605957
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Fluminense(x)^ ∨ Club(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Name(x)",
        "Born(y)"
      ],
      "fol_consts": [
        "atilton",
        "sylvia"
      ],
      "fol_rules": [
        "(∃y (Born(y)) ∧ Name(atilton))",
        "(∀x (Born(x) → ∃y (Born(y))) ⊕ (∃x (Name(x) ∧ Born(x))))",
        "((Fluminense(ratilton) ∨ Braga(ratilton)) ∧ Nautico(ratilton))",
        "(Braga(ratilton) ∨ Fluminense(ratilton)) → ∃y (Born(y))"
      ],
      "fol_conc": "Ailton(ratilton)",
      "perplexity": 3.251880407333374,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "LoanedOutTo(y, x)",
        "PlayedFor(z, y)"
      ],
      "fol_consts": [
        "Ailton",
        "Silva"
      ],
      "fol_rules": [
        "∀x (Born(x, z)) → ∀y (LoanedOutTo(y, x)) ∧ ∃z (PlayedFor(Ailton, z))"
      ],
      "fol_conc": "(Born(r, x)) ∨ LoanedOutTo(s, r) ∨ PlayedFor(l, s)",
      "perplexity": 4.101230144500732,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 522
  },
  {
    "id": 190,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Are(x, y)",
        "WearLargeShoes(y)"
      ],
      "fol_consts": [
        "Yuri"
      ],
      "fol_rules": [
        "{∀x ∀y (Are(x, y) → WearLargeShoes(y))}",
        "All basketball players have a certain height. If someone has the same height and wears large shoes when that size matches what type of shoe available in market can be worn for sports purposes, then he must wear sneakers with high heels."
      ],
      "fol_conc": "Are(x, Yuri) ∧ WearLargeShoes(yuri)",
      "perplexity": [
        3.2482831478118896,
        2.1334495544433594
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{∀x ∀y (Are(x, y) → WearLargeShoes(y))}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "American(x)",
        "Tall(y)"
      ],
      "fol_consts": [
        "yuri",
        "american",
        "basketball"
      ],
      "fol_rules": [
        "∀x (Basketball(basketball) → Tall(tall))",
        "(Not(american)) ∧ (∃x (Basketball(x))) ⊕ ¬((Tall(y) ∨ Basketball(y)) ∧ Not(american))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 5.028677940368652,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Not(x)",
        "All(y, z)"
      ],
      "fol_consts": [
        "yuri",
        "x",
        "yuri",
        "yuri"
      ],
      "fol_rules": [
        "∀x (Not(x)) → ∀z ∃w (Not(z) ∧ Not(w))"
      ],
      "fol_conc": "∃x (Not(x) ∨ All(y, x) ∨ ¬(All(x, y)))",
      "perplexity": 4.926126480102539,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 523
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac"
      ],
      "fol_rules": [
        "(∀x (Project(x) → WrittenIn(x, python)))",
        "((∃x ¬(Jokes(x) ∧ Unaware(rina)) ∧ Project(sam)) ∨ ((∃y ∘ Be(y, perfect)).¬Use(sam, y)))."
      ],
      "fol_conc": "(∃x (Project(x) ∧ Do(sam, x)))",
      "perplexity": [
        1.4543311595916748,
        3.4426028728485107
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃x ¬(Jokes(x) ∧ Unaware(rina)) ∧ Project(sam)) ∨ ((∃y ∘ Be(y, perfect)).¬Use(sam, y)))."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Location(x, y)",
        "City(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana"
      ],
      "fol_rules": [
        "∀x (Location(y, x) → City(z, y))",
        "(Montana(x) ∧ City(y, z)) ⊕ White(sulphur) ∧ Butte(x, y)",
        "(Pierre(x)) → ∃y ((City(x, y) ∨ Not(city1, butte)))",
        "Not(city2, montana)"
      ],
      "fol_conc": "∀x (Location(y, x) ∧ City(z, y)) ⊕ White(sulphur) ∧ Butte(x, y)",
      "perplexity": 3.2776472568511963,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "City(x, y)",
        "StateOf(x)"
      ],
      "fol_consts": [
        "montana",
        "billings",
        "billings",
        "billings"
      ],
      "fol_rules": [
        "∀x (StateOf(billings)) → City(billings, x)"
      ],
      "fol_conc": "∃y ∃z (City(x, y) ∧ StateOf(y) ∧ City(z, z) ∧ ¬StateOf(billings))",
      "perplexity": 6.583261966705322,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 524
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Skittish(turtle)"
      ],
      "fol_consts": [
        "Rabbits",
        "Turtles"
      ],
      "fol_rules": [
        "∀x (Cute(x) → ¬Skittish(x))",
        "(Some(Turtles) ∨ Skittish(Tturtle))) ⊕ ∀x (Cute(x)): All rabbits are not skittish.",
        "∃S Some(Squirrels): S2"
      ],
      "fol_conc": "Rabbits",
      "perplexity": [
        3.259385108947754,
        2.787620782852173
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Some(Turtles) ∨ Skittish(Tturtle))) ⊕ ∀x (Cute(x)): All rabbits are not skittish."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "All(x, y)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle",
        "squirrel",
        "rock"
      ],
      "fol_rules": [
        "(∀x ∃y (All(y, x))) → (∀x ∃y ∀z (All(z, x)) ∧ All(y, z) ∨ ¬(Some(x) ∧ Some(y)))",
        "(Skittish(something)) → ((Not(remaining) ↔ Not(still)) → Skittish(something))"
      ],
      "fol_conc": "Rock(cute) ⊕ Rock(still)",
      "perplexity": 4.116447448730469,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsRabbit(x)",
        "IsRabbit(x, y)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle"
      ],
      "fol_rules": [
        "(∃x (IsRabbit(x)) ∧ ¬(¬(IsRabbit(x))) → IsRabbit(x))",
        "(¬(IsRabbit(a)) ∨ ∃y (IsRabbit(y) ∧ Skittish(y)))",
        "(¬(Skittish(turtle)) ∧ ∀x (IsRabbit(x) ∧ Skittish(x) → ¬(IsRabbit(x))))",
        "(∀x (IsRabbit(x) ∨ IsRabbit(s) ∨ ∃y (IsRabbit(y) ∧ Skittish(y))) → (∀x (Skittish(x)) ∨ ∀x (Skittish(x)) → ¬(IsRabbit(x))))",
        "¬(∃x (IsRabbit(x) ∧ IsRabbit(x) ∧ Skittish(s)) → ∃y (IsRabbit(y)))",
        "(IsRabbit(rabbit)) ∨ (∀x (Skittish(turtle) ∨ ∀x (Skittish(turtle)) → ¬(IsRabbit(x))))",
        "¬(∀x (IsRabbit(x) ∧ IsRabbit(x)))",
        "(∃y ((IsRabbit(y)) ∧ Skittish(s)))"
      ],
      "fol_conc": "(Skittish(rabbit) ∨ ¬(Skittish(turtle)))",
      "perplexity": 4.348047733306885,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 525
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x)",
        "MadeBy(x, BG)",
        "SellsMoreThanOneMillion(Copy(c), Copy(s))"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Created(x) ∧ MadeBy(x, BG)) → SellsMoreThanOneMillion(Copy(c), Copy(s))",
        "∀Copy(a1, b): (a1 = copy(b) ∧ Created(copy(1))) → SellsMoreThanOneMillion(Copy(c), Copy(s))"
      ],
      "fol_conc": "Created(x) ∧ MadeBy(x, BG)",
      "perplexity": [
        1.3966439962387085,
        1.8625372648239136
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Created(x) ∧ MadeBy(x, BG)) → SellsMoreThanOneMillion(Copy(c), Copy(s))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drink(x)"
      ],
      "fol_consts": [
        "x1",
        "x2",
        "rna1",
        "rho1",
        "x3",
        "x4"
      ],
      "fol_rules": [
        "(∃x (Independent(x))) ∧ ∃y (Caffeine(y))",
        "(∀x (Drink(x) → Caffeine(x))) ∨ (∃x (Drink(x)))",
        "(∀x (Drink(x)) → ¬(Dependent(x))) ∨ ((∀x (Independent(x)) ∧ Independent(rna1)) ⊕ ∃y (Caffeine(y)))"
      ],
      "fol_conc": "Jokes(rna2) ∨ Uncertain(rna3)",
      "perplexity": 3.0659239292144775,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "JapaneseGameCompany(x)",
        "MadeInJapan(x, y)",
        "SellMoreThanOne Million(y)"
      ],
      "fol_consts": [
        "z",
        "z",
        "z"
      ],
      "fol_rules": [
        "∀x (MadeInJapan(x, z)) → ∃y (SellMoreThanOne Million(y, x))",
        "(JapaneseGameCompany(z)) ∨ (∀y (MadeInJapan(z, y))) ⊕ ∀y ((SellMoreThanOne Million(y) ∧ MadeInJapan(y, z)) → ¬(JapaneseGameCompany(z) ∧ SellMoreThanOne Million(y)))"
      ],
      "fol_conc": "MadeInJapan(x, z)",
      "perplexity": 2.683007001876831,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SellMoreThanOneMillion/1, SellMoreThanOneMillion/2.\n\n\nFatal error:  The following symbols are used with multiple arities: SellMoreThanOneMillion/1, SellMoreThanOneMillion/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 526
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(U)"
      ],
      "fol_consts": [
        "Harry"
      ],
      "fol_rules": [
        "∀x Kind(x) → Gentleman(x)",
        "(∃x Ugly(U)) ⊕ ¬(Gentleman(harry))]",
        "fol_conc': ∃x (Kind(x) ∨ Evil(x) ∧ Ugly(U))'}"
      ],
      "fol_conc": "∈yUy(y≠Harry)",
      "perplexity": [
        3.166081190109253,
        4.1789350509643555
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∃x Ugly(U)) ⊕ ¬(Gentleman(harry))]"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)"
      ],
      "fol_consts": [
        "man1",
        "evil1"
      ],
      "fol_rules": [
        "(∃x (Kind(x) ∧ Evil(x)))",
        "(No(x, ugly)) → No(uglyperson, handsome)",
        "(All(x, kind))",
        "Man(man1)",
        "Evil(man1)",
        "Not(man1, ugly)",
        "All(man, gentlemen)",
        "Gentlemen(man1)"
      ],
      "fol_conc": "(Kind(man2) ∨ Evil(man2))",
      "perplexity": 4.811374664306641,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Gentlemen/1, Gentlemen/0, Man/1, Man/0, Kind/1, Kind/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Gentlemen/1, Gentlemen/0, Man/1, Man/0, Kind/1, Kind/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "IsMan(x)",
        "IsMan(x)"
      ],
      "fol_consts": [
        "man",
        "guy"
      ],
      "fol_rules": [
        "∀x (Kind(x) → IsMan(x))",
        "(IsMan(guy)) ⊕ ¬(IsMan(man) ∧ IsMan(guy))"
      ],
      "fol_conc": "IsMan(h)",
      "perplexity": 3.961679220199585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 527
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "LoveSeason(x, y)",
        "AttendCollege(x, y)"
      ],
      "fol_consts": [
        "Emma",
        "Fall"
      ],
      "fol_rules": [
        "∀x (Summer(y) → x Loves(Fall,z))",
        "∃y ((LoveSeason(Emma,x) ∨ ∼(Attends Emma college for at least 3 years)))",
        "(Student(eva). Loves Fall(x))."
      ],
      "fol_conc": "Fall(Ema)",
      "perplexity": [
        3.370195150375366,
        3.53603458404541
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Summer(y) → x Loves(Fall,z))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "∀x (Students(x)) → ∀y (Unsure(y, x) ∨ Aware(y, x))",
        "(Dependent(rina) ∧ Student(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))",
        "∃x ∃y (Jokes(x, y) ∧ Unsure(x, y))",
        "¬(Drinks(sam) → Dependent(sam, x))",
        "(Play(sam, perfectsong) ∧ Not(jokeaboutperfectsong))",
        "Dependent(rina)",
        "Student(rinaproject)",
        "Be(x, rina)",
        "Jokes(rina)",
        "Written(x, y)"
      ],
      "fol_conc": "Jokes(rina)",
      "perplexity": 3.596717596054077,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dependent/2, Dependent/1, Jokes/2, Jokes/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Dependent/2, Dependent/1, Jokes/2, Jokes/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LongVacation(x, y)",
        "LoveSeason(y, z)",
        "LoveSeason(z)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀x ∀y (LongVacation(x, y)) → (∃z (LoveSeason(x, z) ∧ LongVacation(y, z))) ∨ (∃z (LoveSeason(z) ∧ LongVacation(z) ∧ ¬(LoveSeason(z) ∧ LoveSeason(z))))",
        "(∀x ∀y (LongVacation(x, y)) → (¬(LoveSeason(x, y)) ∨ ∃w ((LoveSeason(w) ∧ LongVacation(y, w)))))"
      ],
      "fol_conc": "∃x (∃y (LoveSeason(x, y)))",
      "perplexity": 4.095651626586914,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LongVacation/1, LongVacation/2, LoveSeason/1, LoveSeason/2.\n\n\nFatal error:  The following symbols are used with multiple arities: LongVacation/1, LongVacation/2, LoveSeason/1, LoveSeason/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 528
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "Low(SurvRate(y))",
        "Sever(cancer(z)), High(DiseaseType(w))"
      ],
      "fol_consts": [
        "D",
        "%"
      ],
      "fol_rules": [
        "# Rule 1: ∀x (∀y Severe(x) → Low(survatrate(b,x)))",
        "#Rule #2. ∃(c,c)"
      ],
      "fol_conc": "∇ x Deadly(y), y has a survival rate of less than .5 or it is deadly.",
      "perplexity": [
        1.8211439847946167,
        8.204771041870117
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "# Rule 1: ∀x (∀y Severe(x) → Low(survatrate(b,x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(y)",
        "Bile(x)",
        "Duct(cancer)"
      ],
      "fol_consts": [
        "x1",
        "y1",
        "z1"
      ],
      "fol_rules": [
        "(∀x (Survival(x) → Low(x))) ∧ (∃x (Deadly(x)) ∨ ∃y (Severe(y) ∧ Deadly(y)))",
        "¬(All(x, bile) ∧ Survival(x))",
        "(Bile(cancer1) ∧ Duct(cancer2))"
      ],
      "fol_conc": "((∀x (Survival(x) → Low(x)) ∨ (∃y (Severe(y) ∧ Deadly(y)))) ∨ ((Bile(cancer1) ∧ Duct(cancer2))) ∨ ¬(All(x, bile) ∧ Survival(x)) ∨ (Cancer1(x) ∨ Cancer2(x)))",
      "perplexity": 2.910975217819214,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isDeadly(x)",
        "hasLowSurvivalRate(x)"
      ],
      "fol_consts": [
        "disease",
        "cancer1",
        "cancer2",
        "cancer2",
        "cancer1"
      ],
      "fol_rules": [
        "∀x (isDeadly(x) → hasLowSurvivalRate(x))",
        "(isDeadly(disease)) ∧ (hasLowSurvivalRate(cancer2)) ∨ ∃x (isDeadly(cancer1) ∧ ¬(hasLowSurvivalRate(x)))"
      ],
      "fol_conc": "∃x ((isDeadly(x) ∨ hasLowSurvivalRate(x)) ∧ (¬(isDeadly(disease)) ∨ (hasLowSurvivalRate(cancer2))))",
      "perplexity": 2.30045223236084,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 529
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "contains(x, y)",
        "hasKnowledge(y)",
        "readsBooks(x)"
      ],
      "fol_consts": [
        "books",
        "readers"
      ],
      "fol_rules": [
        "{forall x (Smarter(z) -> contains(x, z))}",
        "(smaller(p) && books.p = p)",
        "{forall y ((hasKnowledge(books.y))^x != contains(y,x)) || smaller(smaller(z),y)}",
        "{exists!z ((smaller(z)): books.z= :x)}"
      ],
      "fol_conc": "Walden provides tons of knowledge.",
      "perplexity": [
        3.642012357711792,
        4.920571804046631
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{forall x (Smarter(z) -> contains(x, z))}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Reading(x, y)"
      ],
      "fol_consts": [
        "henry",
        "walden",
        "waldenthoreau"
      ],
      "fol_rules": [
        "(∀x (Has(x, waldent)) → ∃y (Waldent(y)))",
        "∀x (∃y (Reading(x, y) ∧ Has(reading, x)) → Reading(rina, rina))"
      ],
      "fol_conc": "Waldet(henry) ⊕ Waldenthoreau(waldenhare)",
      "perplexity": 3.9582631587982178,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Knows(x)",
        "Reads(x, y)",
        "Knows(x)"
      ],
      "fol_consts": [
        "Harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x (Knows(y) → Reads(x, Walden))"
      ],
      "fol_conc": "Knows(Harry)",
      "perplexity": 3.7611818313598633,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 530
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mountain(x)",
        "Visited(Juan, x)",
        "Donated(Mountain(new mexico))",
        "Mine(y)"
      ],
      "fol_consts": [
        "Juan",
        "NewMexico",
        "Texas",
        "Picuris Mountains",
        " Harding Pegmatite Mine",
        "visited",
        "donated",
        "mined"
      ],
      "fol_rules": [
        "∀x (Mountain(x)) → Visited(Juan, x)",
        "∃y)Mine(y), where mine(x,y) denotes 'The Harding Pegmatite Mine' at location y.",
        "∀x (∃y) Mine(y)",
        "∀x Visited(Juan,x)",
        "(NewMexico ∧ Donated(Mountain(new mexico)) → Mountain(Visiting(Juan,new mexico)))",
        "∀x (Donated(Mountain(x)).visited(Juan,x)), ∃x (Mine(y).visited(Visiting(juan,y))))"
      ],
      "fol_conc": "Jokes(Juan)",
      "perplexity": [
        2.8760826587677,
        2.393364429473877
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y)Mine(y), where mine(x,y) denotes 'The Harding Pegmatite Mine' at location y."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Picuris(x)",
        "Mountain(x, y)",
        "Visited(y, x)"
      ],
      "fol_consts": [
        "juan",
        "onate"
      ],
      "fol_rules": [
        "(∃x (Mountain(x, picuris)) ∧ ∀y (Mountain(y, picuris) ∨ Donated(y, mine)))",
        "(Donated(juan, onate))"
      ],
      "fol_conc": "(Visited(juan, picuris))",
      "perplexity": 2.7630670070648193,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Picuris(x)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "juan",
        "onate",
        "harding"
      ],
      "fol_rules": [
        "∀x (Picuris(x) ∧ LocatedIn(y, x)) → (∃y (LocatedIn(y, x)))",
        "(Picuris(juan)) ∨ (Picuris(onate))"
      ],
      "fol_conc": "Picuris(juan)",
      "perplexity": 2.8036558628082275,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 531
  },
  {
    "id": 71,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Volatile(x)",
        "SuitableForRetirementFund(y)"
      ],
      "fol_consts": [
        "KO",
        "MatureCompanies(matureC)"
      ],
      "fol_rules": [
        "∀x (Volatile(x) → NotSuitableForRetirementFund(x))",
        "∃y (∼Mature(y) ∧ SuitableForRetirementFund(y))"
      ],
      "fol_conc": "CKO ⊕ MatureC",
      "perplexity": [
        3.002117156982422,
        1.9011603593826294
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "CKO ⊕ MatureC"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Growth(x, y)",
        "Volatile(x)"
      ],
      "fol_consts": [
        "ko",
        "company"
      ],
      "fol_rules": [
        "∀x (Company(rco)) → ∃y (Stock(y, rco)) ∧ ∀z (Mature(z) ∨ Suitable(z, rco) → Stock(z, koz))",
        "(Volatile(x) ∧ Not(bootsx)) ⊕ Stocks(ko, x)",
        "Not(bootsk, ko)"
      ],
      "fol_conc": "Stock(ko, x)",
      "perplexity": 5.124571323394775,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Not/2, Not/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Not/2, Not/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Volatile(x)",
        "Stock(x, y)",
        "Growth(y)"
      ],
      "fol_consts": [
        "KO",
        "KO"
      ],
      "fol_rules": [
        "∀x (Volatile(x)) → ∃y (Stock(x, y))",
        "(Stock(x, y) ∧ ∀z (Growth(z))) ⊕ ∀z (∃w ((Growth(w, z) ∨ ¬(¬Growth(y, w)))) ∨ Stock(x, y))"
      ],
      "fol_conc": "∀x (Volatile(x) → ∃y (Growth(y)))",
      "perplexity": 3.625498056411743,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Growth/2, Growth/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Growth/2, Growth/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 532
  },
  {
    "id": 127,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock does not have wings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Breathes(x)",
        "Wings(x, y)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∃x Mammal(x)",
        "For all x If P(x), then Q(x) → R(x)",
        "¬(P(y) ∧ NotQ(z)) → ¬R(y)",
        "Wings(rina)"
      ],
      "fol_conc": "Wings(rina)",
      "perplexity": [
        2.6091818809509277,
        1.8756104707717896
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "For all x If P(x), then Q(x) → R(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(y)",
        "Bird(z)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "mammals",
        "monkeys",
        "birds",
        "animals",
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "(Monkey(mammals) ∧ Mammal(monkey)) ∨ Is(monkey, monkey)",
        "Is(birds) ∧ Is(animal)"
      ],
      "fol_conc": "¬Is(wings) ⊕ ¬Breathe(something)",
      "perplexity": 3.6146841049194336,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "mammals",
        "monkeys",
        "birds",
        "animals"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x)) → ∃y (Mammal(y) ∨ Animal(y))",
        "(Mammal(mammals) ∧ ¬(Animal(monkey) ∨ Mammal(monkey))) ⊕ (¬(Animal(birds) ∨ Mammal(birds)))"
      ],
      "fol_conc": "∀x ((Mammal(x) → ∃y (Mammal(y)) ∧ Animal(x)) ∨ (¬Mammal(mammals) ∨ ¬Animal(monkeys)) ∨ (∀x (Animal(x) → ¬(Mammal(birds)))))",
      "perplexity": 2.3051323890686035,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 533
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Skittish(animal(x))",
        "Rabbitta",
        "Turtel"
      ],
      "fol_consts": [
        "Rabbit",
        "Squirrel",
        "Rock"
      ],
      "fol_rules": [
        "(∀x (Cute(x) → ¬Skittish(x)))",
        "((∃y (Rabbit(y)) ∧ Skittish(z)) ∨ (∃z (Turtel(x)) ∧ ∼(Still(z)))) ⊕ ((∀y (Squirrel(a))) ∧ ∀z (Rock(b))),"
      ],
      "fol_conc": "(Cute(Rabbitta) ∧ Skittish(Squirrel(Turtel(rock])))",
      "perplexity": [
        2.4840481281280518,
        3.243828058242798
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃y (Rabbit(y)) ∧ Skittish(z)) ∨ (∃z (Turtel(x)) ∧ ∼(Still(z)))) ⊕ ((∀y (Squirrel(a))) ∧ ∀z (Rock(b))),"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle"
      ],
      "fol_rules": [
        "(∀x (Cute(x) → Rabbit(x)))",
        "(∃x (Turtle(t)) ∧ (∃y (Skittish(y, x))))",
        "(Squirrel(s) → Skittish(s))",
        "(Rock(r) ∧ Still(r))"
      ],
      "fol_conc": "(Rabbit(r)) ∨ (∃y (Still(y)))",
      "perplexity": 3.8100430965423584,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Skittish/1, Skittish/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Skittish/1, Skittish/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isCute(x)",
        "exists(y)",
        "isCute(z)"
      ],
      "fol_consts": [
        "rabbids",
        "turtles",
        "rabbits",
        "squirrels",
        "rock"
      ],
      "fol_rules": [
        "(∀x (isCute(x))) → (∃y ((isCute(y)) ∨ ¬(exists(y))))",
        "(∃x (exists(y) ∧ isCute(x))) → ∃z (isCute(z))"
      ],
      "fol_conc": "¬((∃t (exists(t) ∧ exists(rabbids))) ∨ (∃r (exists(squirrels)) ∧ ¬(exists(rack))))",
      "perplexity": 4.332442760467529,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 534
  },
  {
    "id": 169,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "No politicans are part of the Nazi Reichstag.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∀x (Caffeine(x) ∧ Drinks(x)) ⊕ ¬(Hinrich(x) ∨ ∃y Caffeine(y))",
        "∀x (∃y Caffeine(y) ∧ Jokes(hinrich)) ⊕ ¬(Hinrich(x) ∨ ∃z Drink(z))"
      ],
      "fol_conc": "Jokes(rina) ⊕ Unaware(rina)",
      "perplexity": [
        2.685208320617676,
        1.4894016981124878
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python"
      ],
      "fol_rules": [
        "∀x (Drink(x)) → Dependent(x)",
        "(Sam(rina, x)) ∧ Unaware(rina) ⊕ ¬(Mac(sam) ∨ Unclear(rina))",
        "(Student(rina)) ∧ Not(arnednesssam)"
      ],
      "fol_conc": "Jokes(rina)",
      "perplexity": 3.5919346809387207,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Member(x, y)",
        "Person(x)"
      ],
      "fol_consts": [
        "heinrich",
        "nazi"
      ],
      "fol_rules": [
        "∀x (Person(x)) → ∃y (Member(y, x))"
      ],
      "fol_conc": "¬(Member(nazi, heinrich))",
      "perplexity": 2.5644705295562744,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 535
  },
  {
    "id": 196,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi is terricolous.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Drinks(x)",
        "Student(x)",
        "Dependent(x)",
        "Barks(y)"
      ],
      "fol_consts": [
        "rina"
      ],
      "fol_rules": [
        "∀x (Drinks(x) → Dependent(x))",
        "∃y (Students(y)): ∀z ((Drinks(z, x) ∨ Barks(z)) ⊕ ¬((Student(z) ∧ Barks(z))))",
        "¬(Dependent(rina,x))"
      ],
      "fol_conc": "(Terricolous(Kikki))",
      "perplexity": [
        2.762660503387451,
        3.7335548400878906
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (Students(y)): ∀z ((Drinks(z, x) ∨ Barks(z)) ⊕ ¬((Student(z) ∧ Barks(z))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Animal(x)",
        "Barks(y)",
        "Likes(z)"
      ],
      "fol_consts": [
        "bark",
        "like"
      ],
      "fol_rules": [
        "(∃x ∀y (If(x, y) → If(z, x)) ∧ All(dogs) ⊕ Barks(bark))",
        "(All(animals) ∧ (∀z ((Barks(y) ∨ Like(jane)) → Zicks(y))) ∧ Legs(z) ∨ Jumping(z))",
        "(Terricolous(a) ∧ (Legs(a) ∨ Jumping(a))) ∨ Terricolous(kikki)"
      ],
      "fol_conc": "Terricolous(kikki)",
      "perplexity": 3.864511251449585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "barks(x)",
        "jumps(x)",
        "hasLegs(x)",
        "isTerricolous(x)"
      ],
      "fol_consts": [
        "Jane",
        "KiKi"
      ],
      "fol_rules": [
        "∀x (barks(x) → ¬(¬barks(y) ∨ ∀z (jumps(z) ∧ barks(y))))",
        "(barks(k) → ∃y ((hasLegs(y)) ∨ jumps(y)))",
        "(isTerricolous(s) → (∀t (hasLegs(t)) ∨ isTerricolous(t)))"
      ],
      "fol_conc": "(barks(KiKi) ∧ ¬(jumps(KiKi) ∧ hasLegs(KiKi)))",
      "perplexity": 3.0433437824249268,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 536
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "IsdependentOnCaffeine(x)",
        "DrinkCoffee(x)",
        "JokeAboutCaffeine(x)",
        "DriedThaiChilies(is a hotpot)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Dependent(x) ∧ DrinkCoffee(x))",
        "(¬∃y (Drinkscoffee(y))) ∨ ¬(All products of Baked by Melissa are cupcakes)",
        "∀x ((Not Dependent(x) ∧ Drinks Coffee(x)) ∨ JokeAboutCaffeine(x))"
      ],
      "fol_conc": "DriedThaiChilies(is a hotpot)",
      "perplexity": [
        2.4887778759002686,
        2.0974948406219482
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬∃y (Drinkscoffee(y))) ∨ ¬(All products of Baked by Melissa are cupcakes)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "No(x)",
        "All(y, z)"
      ],
      "fol_consts": [
        "bakery",
        "cupcake",
        "spicy",
        "hotpot",
        "products",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "∀x (Spicy(x) → No(bakery))",
        "∀y (Bakery(y) ∧ Spicy(y) → Cupcake(y))"
      ],
      "fol_conc": "Hotpot(cupcakes)",
      "perplexity": 2.6839542388916016,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bakery/1, Bakery/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bakery/1, Bakery/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BakedByMelissa(x)",
        "Spicy(x)"
      ],
      "fol_consts": [
        "bakeries",
        "cupcakes",
        "hotpots"
      ],
      "fol_rules": [
        "∀x (BakedByMelissa(x)) → ∃y (Spicy(y))",
        "(BakedByMelissa(rina)) ∧ Spicy(rina)"
      ],
      "fol_conc": "∃x (BakedByMelissa(x) ∨ Spicy(x))",
      "perplexity": 2.3198816776275635,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 537
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "Dependent(rina)",
        "Drinks(sam)",
        "Jokes(sam)",
        "Unaware(rina)"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        3.301961660385132,
        4.326804161071777
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "All(x, haswedding)",
        "John(x)",
        "Traveling(x, y)",
        "Wedding(y, z)",
        "Child(z)"
      ],
      "fol_consts": [
        "john",
        "traveling",
        "wedding"
      ],
      "fol_rules": [
        "∀x (All(x, haswedding) → John(x))",
        "(John(john) ∧ Wedding(workingdays)) ⊕ (∃y (Workingdays(y)))",
        "(Wedding(workingdays) ∨ Traveling(john)) → ∀z ((Child(z) ∧ Wedded(john, z)) ∨ (Traveling(john, y) ∧ Haswedding(x, workingdays)))"
      ],
      "fol_conc": "∃x ∃y (∀w (Haswedding(w, x) ∧ Wedding(w, x) → Child(y)))",
      "perplexity": 3.776440382003784,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Traveling/2, Traveling/1, Wedding/1, Wedding/2, John/1, John/0, Workingdays/1, Workingdays/0, Haswedding/2, Haswedding/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Traveling/2, Traveling/1, Wedding/1, Wedding/2, John/1, John/0, Workingdays/1, Workingdays/0, Haswedding/2, Haswedding/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)"
      ],
      "fol_consts": [
        "john",
        "wednesday",
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "(Wedding(wednesday, x)) ∨ ∀y (Wedding(y, x) ∧ ¬(Wedding(x) ⊕ Wedding(y)))"
      ],
      "fol_conc": "Child(john)",
      "perplexity": 3.9544217586517334,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/2, Wedding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/2, Wedding/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 538
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Can(x, y)",
        "Empty(p)"
      ],
      "fol_consts": [
        "Greyhound",
        "Boeing 707"
      ],
      "fol_rules": [
        "∀x (Can(Greyhound(x), transport(y)) → Transport(y)), ∀y ∃z Can(Boeing 707(z), y)",
        "∀x Cannot(Can(x, Greyhound) ∨ Can(x, Boeing 707))"
      ],
      "fol_conc": "Empty(p)",
      "perplexity": [
        3.976666212081909,
        1.8244335651397705
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Can(Greyhound(x), transport(y)) → Transport(y)), ∀y ∃z Can(Boeing 707(z), y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Can(x, y)",
        "Empty(y)"
      ],
      "fol_consts": [
        "plane",
        "airline",
        "passenger"
      ],
      "fol_rules": [
        "(∀x ∀y (Plane(planes)) → Empty(passengers))",
        "If(planepassesemptythennotairlinen)"
      ],
      "fol_conc": "Not(businessespanningplane)",
      "perplexity": 18.67601203918457,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Can(x, y)",
        "NotEmpty(y)"
      ],
      "fol_consts": [
        "airline",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "airline",
        "airline",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane"
      ],
      "fol_rules": [
        "∀x ∀y (Can(x, y) → ¬NotEmpty(y))",
        "(NotEmpty(airline)) ∧ ¬(NotEmpty(plane)) ∨ (∃x ∃y ∃z (Can(x, z) ∧ Can(y, z))) ∨ (∀x ∃y ∃z (Can(x, y) ∧ NotEmpty(z)) → ∀y ∃x ∃z ((NotEmpty(y) ∧ Can(x, z)) → ¬(NotEmpty(z))))",
        "¬(Can(s) ∧ NotEmpty(plane))"
      ],
      "fol_conc": "(∀x (Can(x, plane) ∨ ¬Can(x, plane)))",
      "perplexity": 2.31225323677063,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Can/1, Can/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Can/1, Can/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 539
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "contains(x)",
        "reads(x, y)",
        "gainsKnowledge(y)"
      ],
      "fol_consts": [
        "Harry",
        "sam"
      ],
      "fol_rules": [
        "∀z ∃y ((reads(z, y) ∧ contains(x)) → gainKnowledge(y})",
        "(∀x (gainsKnowledge(x))) ⊕ ¬(∀x ∃y ((read(sam,x) ∨ reads(x,y)) ∧ contain(x,y))))",
        "∀x (∋gainKnowledge(x))^⊕¬∈z (((read(sam,z) ∨ read(z,x)) ∧ contains(z,y)) → gainKnowledge(y))"
      ],
      "fol_conc": "∀x (gainsKnowledge(x))^ ⊕ ¬∃z ((read(sam,z) ∨ reads(z,x)) ∧ contain(z,y))",
      "perplexity": [
        3.0432920455932617,
        2.0813889503479004
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z ∃y ((reads(z, y) ∧ contains(x)) → gainKnowledge(y})"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Knowledge(x)",
        "Reads(x, y)",
        "Gains(x, y)"
      ],
      "fol_consts": [
        "walden",
        "henrythroeu",
        "smarter"
      ],
      "fol_rules": [
        "(∀x (Knowledge(x) → Gains(reading, x)))",
        "(Walden(waldfen)) ∧ (Henryrothau(henerythoene))"
      ],
      "fol_conc": "(Smarter(readswaldefeno)) ∨ (Gains(readswaldfeno))",
      "perplexity": 3.69999361038208,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Gains/2, Gains/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Gains/2, Gains/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasKnowledge(x)",
        "Smarter(y)"
      ],
      "fol_consts": [
        "Harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x (HasKnowledge(x) → Smarter(x))",
        "(∃y (Smarter(y))) ∧ (∃x (HasKnowledge(x) ∧ ∃z (Smarter(z)))) → ((∃y (Smarter(y)) ∧ HasKnowledge(x)) ∨ (∀y (Smarter(y) ∧ ∀z (HasKnowledge(x) ∧ Smarter(z)))))",
        "(∀x (Smarter(x))) ⊕ (∀x (Smarter(x)))"
      ],
      "fol_conc": "(Smarter(h) → HasKnowledge(Walden))",
      "perplexity": 2.4765119552612305,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 540
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Ranked(x, y)",
        "ActivePlayer(y)",
        "FemalePlayer(r, a)",
        "MalePlayer(m, x)"
      ],
      "fol_consts": [
        "x",
        "y",
        "r",
        "a",
        "m",
        "WTA"
      ],
      "fol_rules": [
        "(∀z (ActivePlayer(z))) ≡ (∃w ActivePlayer(w ∧ z ≠ w))",
        "(∀z ((ActivePlayer(z) ∨ MalePlayer(z,x)))) ≡ ¬(Women's(Tennis Association)(x,z))"
      ],
      "fol_conc": "∃x ActivePlayer(x)",
      "perplexity": [
        2.518296003341675,
        1.9170558452606201
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀z (ActivePlayer(z))) ≡ (∃w ActivePlayer(w ∧ z ≠ w))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Highly(x, y)",
        "Active(x)",
        "Lost(y, x)"
      ],
      "fol_consts": [
        "gauff",
        "swiatek"
      ],
      "fol_rules": [
        "∀x (Highly(rina, x)) → (∃y (Player(rina, y) ∧ Highly(y, rina)))",
        "(Swiatek(x) ∨ Highlly(rina, x))"
      ],
      "fol_conc": "¬(Loss(gauff, iga)) ∨ Active(gault)",
      "perplexity": 3.5623319149017334,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsHighlyRanked(x, y)",
        "IsHighlyRanked(y, x)"
      ],
      "fol_consts": [
        "player1",
        "player2",
        "player3",
        "coco",
        "iga",
        "rafael",
        "womens",
        "tennis",
        "garros2022",
        "rolandgarrorssupplementary",
        "highlyactive"
      ],
      "fol_rules": [
        "∀x (IsHighlyRanked(x, r1) → IsHighlyRanked(r1, x))",
        "(IsHighlyRanked(ixa) ∧ IsHighlyRanked(rafaelb)) ∨ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc))))",
        "∀x (IsHighlyRanked(x, r2) → ¬(IsHighlyRanked(r1f, x) ∨ IsHighlyRanked(faralb)))",
        "(IsHighlyRanked(cocagauff)) ∧ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc)) ∨ (IsHighlyRanked(rafaelb) ∨ ∃x (IsHighlyRanked(x, r2)))))",
        "∀x ((IsHighlyRanked(iga) ∧ ¬IsHighlyRanked(rafaelps)) → IsHighlyRanked(faralbs))",
        "(IsHighlyRanked(cocagauff) ∨ (IsHighlyRanked(rafaelb)))"
      ],
      "fol_conc": "¬(IsHighlyRanked(iga, r1f) ∧ ¬IsHighlyRanked(rafaelps, ixa)) ∨ (∃y ((IsHighlyRanked(ya) ∧ IsHighlyRanked(brafelc))))",
      "perplexity": 3.585270881652832,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsHighlyRanked/1, IsHighlyRanked/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsHighlyRanked/1, IsHighlyRanked/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 521
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x, Fluminense)",
        "Club(x)",
        "Person(y)",
        "Fluminense",
        "Braga",
        "Ailton"
      ],
      "fol_consts": [
        "Ailton",
        "Footballer(1tonico Silva)"
      ],
      "fol_rules": [
        "∀x (Fluminense(x)^ ∨ Club(x))",
        "(Braga(x) ∧ Player(x, Braga))^ OR ∃y ((Club(y^ AND Person(x))) ^ OR ¬Club(Person(x))))",
        "]}{",
        "fol_preds",
        "%{player%,",
        "flumenense%",
        "%,",
        "club%",
        "}",
        "fol_consts",
        "[\"Ailton\","
      ],
      "fol_conc": "%{% player x y %}^ OR NOT club(y)%",
      "perplexity": [
        2.2612507343292236,
        6.06541633605957
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Fluminense(x)^ ∨ Club(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Name(x)",
        "Born(y)"
      ],
      "fol_consts": [
        "atilton",
        "sylvia"
      ],
      "fol_rules": [
        "(∃y (Born(y)) ∧ Name(atilton))",
        "(∀x (Born(x) → ∃y (Born(y))) ⊕ (∃x (Name(x) ∧ Born(x))))",
        "((Fluminense(ratilton) ∨ Braga(ratilton)) ∧ Nautico(ratilton))",
        "(Braga(ratilton) ∨ Fluminense(ratilton)) → ∃y (Born(y))"
      ],
      "fol_conc": "Ailton(ratilton)",
      "perplexity": 3.251880407333374,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Born(x, y)",
        "LoanedOutTo(y, x)",
        "PlayedFor(z, y)"
      ],
      "fol_consts": [
        "Ailton",
        "Silva"
      ],
      "fol_rules": [
        "∀x (Born(x, z)) → ∀y (LoanedOutTo(y, x)) ∧ ∃z (PlayedFor(Ailton, z))"
      ],
      "fol_conc": "(Born(r, x)) ∨ LoanedOutTo(s, r) ∨ PlayedFor(l, s)",
      "perplexity": 4.101230144500732,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 522
  },
  {
    "id": 190,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Are(x, y)",
        "WearLargeShoes(y)"
      ],
      "fol_consts": [
        "Yuri"
      ],
      "fol_rules": [
        "{∀x ∀y (Are(x, y) → WearLargeShoes(y))}",
        "All basketball players have a certain height. If someone has the same height and wears large shoes when that size matches what type of shoe available in market can be worn for sports purposes, then he must wear sneakers with high heels."
      ],
      "fol_conc": "Are(x, Yuri) ∧ WearLargeShoes(yuri)",
      "perplexity": [
        3.2482831478118896,
        2.1334495544433594
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{∀x ∀y (Are(x, y) → WearLargeShoes(y))}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "American(x)",
        "Tall(y)"
      ],
      "fol_consts": [
        "yuri",
        "american",
        "basketball"
      ],
      "fol_rules": [
        "∀x (Basketball(basketball) → Tall(tall))",
        "(Not(american)) ∧ (∃x (Basketball(x))) ⊕ ¬((Tall(y) ∨ Basketball(y)) ∧ Not(american))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 5.028677940368652,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Not(x)",
        "All(y, z)"
      ],
      "fol_consts": [
        "yuri",
        "x",
        "yuri",
        "yuri"
      ],
      "fol_rules": [
        "∀x (Not(x)) → ∀z ∃w (Not(z) ∧ Not(w))"
      ],
      "fol_conc": "∃x (Not(x) ∨ All(y, x) ∨ ¬(All(x, y)))",
      "perplexity": 4.926126480102539,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 523
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac"
      ],
      "fol_rules": [
        "(∀x (Project(x) → WrittenIn(x, python)))",
        "((∃x ¬(Jokes(x) ∧ Unaware(rina)) ∧ Project(sam)) ∨ ((∃y ∘ Be(y, perfect)).¬Use(sam, y)))."
      ],
      "fol_conc": "(∃x (Project(x) ∧ Do(sam, x)))",
      "perplexity": [
        1.4543311595916748,
        3.4426028728485107
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃x ¬(Jokes(x) ∧ Unaware(rina)) ∧ Project(sam)) ∨ ((∃y ∘ Be(y, perfect)).¬Use(sam, y)))."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Location(x, y)",
        "City(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana"
      ],
      "fol_rules": [
        "∀x (Location(y, x) → City(z, y))",
        "(Montana(x) ∧ City(y, z)) ⊕ White(sulphur) ∧ Butte(x, y)",
        "(Pierre(x)) → ∃y ((City(x, y) ∨ Not(city1, butte)))",
        "Not(city2, montana)"
      ],
      "fol_conc": "∀x (Location(y, x) ∧ City(z, y)) ⊕ White(sulphur) ∧ Butte(x, y)",
      "perplexity": 3.2776472568511963,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "City(x, y)",
        "StateOf(x)"
      ],
      "fol_consts": [
        "montana",
        "billings",
        "billings",
        "billings"
      ],
      "fol_rules": [
        "∀x (StateOf(billings)) → City(billings, x)"
      ],
      "fol_conc": "∃y ∃z (City(x, y) ∧ StateOf(y) ∧ City(z, z) ∧ ¬StateOf(billings))",
      "perplexity": 6.583261966705322,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 524
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Skittish(turtle)"
      ],
      "fol_consts": [
        "Rabbits",
        "Turtles"
      ],
      "fol_rules": [
        "∀x (Cute(x) → ¬Skittish(x))",
        "(Some(Turtles) ∨ Skittish(Tturtle))) ⊕ ∀x (Cute(x)): All rabbits are not skittish.",
        "∃S Some(Squirrels): S2"
      ],
      "fol_conc": "Rabbits",
      "perplexity": [
        3.259385108947754,
        2.787620782852173
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Some(Turtles) ∨ Skittish(Tturtle))) ⊕ ∀x (Cute(x)): All rabbits are not skittish."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "All(x, y)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle",
        "squirrel",
        "rock"
      ],
      "fol_rules": [
        "(∀x ∃y (All(y, x))) → (∀x ∃y ∀z (All(z, x)) ∧ All(y, z) ∨ ¬(Some(x) ∧ Some(y)))",
        "(Skittish(something)) → ((Not(remaining) ↔ Not(still)) → Skittish(something))"
      ],
      "fol_conc": "Rock(cute) ⊕ Rock(still)",
      "perplexity": 4.116447448730469,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsRabbit(x)",
        "IsRabbit(x, y)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle"
      ],
      "fol_rules": [
        "(∃x (IsRabbit(x)) ∧ ¬(¬(IsRabbit(x))) → IsRabbit(x))",
        "(¬(IsRabbit(a)) ∨ ∃y (IsRabbit(y) ∧ Skittish(y)))",
        "(¬(Skittish(turtle)) ∧ ∀x (IsRabbit(x) ∧ Skittish(x) → ¬(IsRabbit(x))))",
        "(∀x (IsRabbit(x) ∨ IsRabbit(s) ∨ ∃y (IsRabbit(y) ∧ Skittish(y))) → (∀x (Skittish(x)) ∨ ∀x (Skittish(x)) → ¬(IsRabbit(x))))",
        "¬(∃x (IsRabbit(x) ∧ IsRabbit(x) ∧ Skittish(s)) → ∃y (IsRabbit(y)))",
        "(IsRabbit(rabbit)) ∨ (∀x (Skittish(turtle) ∨ ∀x (Skittish(turtle)) → ¬(IsRabbit(x))))",
        "¬(∀x (IsRabbit(x) ∧ IsRabbit(x)))",
        "(∃y ((IsRabbit(y)) ∧ Skittish(s)))"
      ],
      "fol_conc": "(Skittish(rabbit) ∨ ¬(Skittish(turtle)))",
      "perplexity": 4.348047733306885,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 525
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x)",
        "MadeBy(x, BG)",
        "SellsMoreThanOneMillion(Copy(c), Copy(s))"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Created(x) ∧ MadeBy(x, BG)) → SellsMoreThanOneMillion(Copy(c), Copy(s))",
        "∀Copy(a1, b): (a1 = copy(b) ∧ Created(copy(1))) → SellsMoreThanOneMillion(Copy(c), Copy(s))"
      ],
      "fol_conc": "Created(x) ∧ MadeBy(x, BG)",
      "perplexity": [
        1.3966439962387085,
        1.8625372648239136
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Created(x) ∧ MadeBy(x, BG)) → SellsMoreThanOneMillion(Copy(c), Copy(s))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drink(x)"
      ],
      "fol_consts": [
        "x1",
        "x2",
        "rna1",
        "rho1",
        "x3",
        "x4"
      ],
      "fol_rules": [
        "(∃x (Independent(x))) ∧ ∃y (Caffeine(y))",
        "(∀x (Drink(x) → Caffeine(x))) ∨ (∃x (Drink(x)))",
        "(∀x (Drink(x)) → ¬(Dependent(x))) ∨ ((∀x (Independent(x)) ∧ Independent(rna1)) ⊕ ∃y (Caffeine(y)))"
      ],
      "fol_conc": "Jokes(rna2) ∨ Uncertain(rna3)",
      "perplexity": 3.0659239292144775,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "JapaneseGameCompany(x)",
        "MadeInJapan(x, y)",
        "SellMoreThanOne Million(y)"
      ],
      "fol_consts": [
        "z",
        "z",
        "z"
      ],
      "fol_rules": [
        "∀x (MadeInJapan(x, z)) → ∃y (SellMoreThanOne Million(y, x))",
        "(JapaneseGameCompany(z)) ∨ (∀y (MadeInJapan(z, y))) ⊕ ∀y ((SellMoreThanOne Million(y) ∧ MadeInJapan(y, z)) → ¬(JapaneseGameCompany(z) ∧ SellMoreThanOne Million(y)))"
      ],
      "fol_conc": "MadeInJapan(x, z)",
      "perplexity": 2.683007001876831,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SellMoreThanOneMillion/1, SellMoreThanOneMillion/2.\n\n\nFatal error:  The following symbols are used with multiple arities: SellMoreThanOneMillion/1, SellMoreThanOneMillion/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 526
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(U)"
      ],
      "fol_consts": [
        "Harry"
      ],
      "fol_rules": [
        "∀x Kind(x) → Gentleman(x)",
        "(∃x Ugly(U)) ⊕ ¬(Gentleman(harry))]",
        "fol_conc': ∃x (Kind(x) ∨ Evil(x) ∧ Ugly(U))'}"
      ],
      "fol_conc": "∈yUy(y≠Harry)",
      "perplexity": [
        3.166081190109253,
        4.1789350509643555
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∃x Ugly(U)) ⊕ ¬(Gentleman(harry))]"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)"
      ],
      "fol_consts": [
        "man1",
        "evil1"
      ],
      "fol_rules": [
        "(∃x (Kind(x) ∧ Evil(x)))",
        "(No(x, ugly)) → No(uglyperson, handsome)",
        "(All(x, kind))",
        "Man(man1)",
        "Evil(man1)",
        "Not(man1, ugly)",
        "All(man, gentlemen)",
        "Gentlemen(man1)"
      ],
      "fol_conc": "(Kind(man2) ∨ Evil(man2))",
      "perplexity": 4.811374664306641,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Gentlemen/1, Gentlemen/0, Man/1, Man/0, Kind/1, Kind/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Gentlemen/1, Gentlemen/0, Man/1, Man/0, Kind/1, Kind/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "IsMan(x)",
        "IsMan(x)"
      ],
      "fol_consts": [
        "man",
        "guy"
      ],
      "fol_rules": [
        "∀x (Kind(x) → IsMan(x))",
        "(IsMan(guy)) ⊕ ¬(IsMan(man) ∧ IsMan(guy))"
      ],
      "fol_conc": "IsMan(h)",
      "perplexity": 3.961679220199585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 527
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "LoveSeason(x, y)",
        "AttendCollege(x, y)"
      ],
      "fol_consts": [
        "Emma",
        "Fall"
      ],
      "fol_rules": [
        "∀x (Summer(y) → x Loves(Fall,z))",
        "∃y ((LoveSeason(Emma,x) ∨ ∼(Attends Emma college for at least 3 years)))",
        "(Student(eva). Loves Fall(x))."
      ],
      "fol_conc": "Fall(Ema)",
      "perplexity": [
        3.370195150375366,
        3.53603458404541
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Summer(y) → x Loves(Fall,z))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "∀x (Students(x)) → ∀y (Unsure(y, x) ∨ Aware(y, x))",
        "(Dependent(rina) ∧ Student(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))",
        "∃x ∃y (Jokes(x, y) ∧ Unsure(x, y))",
        "¬(Drinks(sam) → Dependent(sam, x))",
        "(Play(sam, perfectsong) ∧ Not(jokeaboutperfectsong))",
        "Dependent(rina)",
        "Student(rinaproject)",
        "Be(x, rina)",
        "Jokes(rina)",
        "Written(x, y)"
      ],
      "fol_conc": "Jokes(rina)",
      "perplexity": 3.596717596054077,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dependent/2, Dependent/1, Jokes/2, Jokes/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Dependent/2, Dependent/1, Jokes/2, Jokes/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LongVacation(x, y)",
        "LoveSeason(y, z)",
        "LoveSeason(z)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀x ∀y (LongVacation(x, y)) → (∃z (LoveSeason(x, z) ∧ LongVacation(y, z))) ∨ (∃z (LoveSeason(z) ∧ LongVacation(z) ∧ ¬(LoveSeason(z) ∧ LoveSeason(z))))",
        "(∀x ∀y (LongVacation(x, y)) → (¬(LoveSeason(x, y)) ∨ ∃w ((LoveSeason(w) ∧ LongVacation(y, w)))))"
      ],
      "fol_conc": "∃x (∃y (LoveSeason(x, y)))",
      "perplexity": 4.095651626586914,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LongVacation/1, LongVacation/2, LoveSeason/1, LoveSeason/2.\n\n\nFatal error:  The following symbols are used with multiple arities: LongVacation/1, LongVacation/2, LoveSeason/1, LoveSeason/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 528
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "Low(SurvRate(y))",
        "Sever(cancer(z)), High(DiseaseType(w))"
      ],
      "fol_consts": [
        "D",
        "%"
      ],
      "fol_rules": [
        "# Rule 1: ∀x (∀y Severe(x) → Low(survatrate(b,x)))",
        "#Rule #2. ∃(c,c)"
      ],
      "fol_conc": "∇ x Deadly(y), y has a survival rate of less than .5 or it is deadly.",
      "perplexity": [
        1.8211439847946167,
        8.204771041870117
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "# Rule 1: ∀x (∀y Severe(x) → Low(survatrate(b,x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(y)",
        "Bile(x)",
        "Duct(cancer)"
      ],
      "fol_consts": [
        "x1",
        "y1",
        "z1"
      ],
      "fol_rules": [
        "(∀x (Survival(x) → Low(x))) ∧ (∃x (Deadly(x)) ∨ ∃y (Severe(y) ∧ Deadly(y)))",
        "¬(All(x, bile) ∧ Survival(x))",
        "(Bile(cancer1) ∧ Duct(cancer2))"
      ],
      "fol_conc": "((∀x (Survival(x) → Low(x)) ∨ (∃y (Severe(y) ∧ Deadly(y)))) ∨ ((Bile(cancer1) ∧ Duct(cancer2))) ∨ ¬(All(x, bile) ∧ Survival(x)) ∨ (Cancer1(x) ∨ Cancer2(x)))",
      "perplexity": 2.910975217819214,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isDeadly(x)",
        "hasLowSurvivalRate(x)"
      ],
      "fol_consts": [
        "disease",
        "cancer1",
        "cancer2",
        "cancer2",
        "cancer1"
      ],
      "fol_rules": [
        "∀x (isDeadly(x) → hasLowSurvivalRate(x))",
        "(isDeadly(disease)) ∧ (hasLowSurvivalRate(cancer2)) ∨ ∃x (isDeadly(cancer1) ∧ ¬(hasLowSurvivalRate(x)))"
      ],
      "fol_conc": "∃x ((isDeadly(x) ∨ hasLowSurvivalRate(x)) ∧ (¬(isDeadly(disease)) ∨ (hasLowSurvivalRate(cancer2))))",
      "perplexity": 2.30045223236084,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 529
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "contains(x, y)",
        "hasKnowledge(y)",
        "readsBooks(x)"
      ],
      "fol_consts": [
        "books",
        "readers"
      ],
      "fol_rules": [
        "{forall x (Smarter(z) -> contains(x, z))}",
        "(smaller(p) && books.p = p)",
        "{forall y ((hasKnowledge(books.y))^x != contains(y,x)) || smaller(smaller(z),y)}",
        "{exists!z ((smaller(z)): books.z= :x)}"
      ],
      "fol_conc": "Walden provides tons of knowledge.",
      "perplexity": [
        3.642012357711792,
        4.920571804046631
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{forall x (Smarter(z) -> contains(x, z))}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Reading(x, y)"
      ],
      "fol_consts": [
        "henry",
        "walden",
        "waldenthoreau"
      ],
      "fol_rules": [
        "(∀x (Has(x, waldent)) → ∃y (Waldent(y)))",
        "∀x (∃y (Reading(x, y) ∧ Has(reading, x)) → Reading(rina, rina))"
      ],
      "fol_conc": "Waldet(henry) ⊕ Waldenthoreau(waldenhare)",
      "perplexity": 3.9582631587982178,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Knows(x)",
        "Reads(x, y)",
        "Knows(x)"
      ],
      "fol_consts": [
        "Harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x (Knows(y) → Reads(x, Walden))"
      ],
      "fol_conc": "Knows(Harry)",
      "perplexity": 3.7611818313598633,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 530
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mountain(x)",
        "Visited(Juan, x)",
        "Donated(Mountain(new mexico))",
        "Mine(y)"
      ],
      "fol_consts": [
        "Juan",
        "NewMexico",
        "Texas",
        "Picuris Mountains",
        " Harding Pegmatite Mine",
        "visited",
        "donated",
        "mined"
      ],
      "fol_rules": [
        "∀x (Mountain(x)) → Visited(Juan, x)",
        "∃y)Mine(y), where mine(x,y) denotes 'The Harding Pegmatite Mine' at location y.",
        "∀x (∃y) Mine(y)",
        "∀x Visited(Juan,x)",
        "(NewMexico ∧ Donated(Mountain(new mexico)) → Mountain(Visiting(Juan,new mexico)))",
        "∀x (Donated(Mountain(x)).visited(Juan,x)), ∃x (Mine(y).visited(Visiting(juan,y))))"
      ],
      "fol_conc": "Jokes(Juan)",
      "perplexity": [
        2.8760826587677,
        2.393364429473877
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y)Mine(y), where mine(x,y) denotes 'The Harding Pegmatite Mine' at location y."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Picuris(x)",
        "Mountain(x, y)",
        "Visited(y, x)"
      ],
      "fol_consts": [
        "juan",
        "onate"
      ],
      "fol_rules": [
        "(∃x (Mountain(x, picuris)) ∧ ∀y (Mountain(y, picuris) ∨ Donated(y, mine)))",
        "(Donated(juan, onate))"
      ],
      "fol_conc": "(Visited(juan, picuris))",
      "perplexity": 2.7630670070648193,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Picuris(x)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "juan",
        "onate",
        "harding"
      ],
      "fol_rules": [
        "∀x (Picuris(x) ∧ LocatedIn(y, x)) → (∃y (LocatedIn(y, x)))",
        "(Picuris(juan)) ∨ (Picuris(onate))"
      ],
      "fol_conc": "Picuris(juan)",
      "perplexity": 2.8036558628082275,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 531
  },
  {
    "id": 71,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Volatile(x)",
        "SuitableForRetirementFund(y)"
      ],
      "fol_consts": [
        "KO",
        "MatureCompanies(matureC)"
      ],
      "fol_rules": [
        "∀x (Volatile(x) → NotSuitableForRetirementFund(x))",
        "∃y (∼Mature(y) ∧ SuitableForRetirementFund(y))"
      ],
      "fol_conc": "CKO ⊕ MatureC",
      "perplexity": [
        3.002117156982422,
        1.9011603593826294
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "CKO ⊕ MatureC"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Growth(x, y)",
        "Volatile(x)"
      ],
      "fol_consts": [
        "ko",
        "company"
      ],
      "fol_rules": [
        "∀x (Company(rco)) → ∃y (Stock(y, rco)) ∧ ∀z (Mature(z) ∨ Suitable(z, rco) → Stock(z, koz))",
        "(Volatile(x) ∧ Not(bootsx)) ⊕ Stocks(ko, x)",
        "Not(bootsk, ko)"
      ],
      "fol_conc": "Stock(ko, x)",
      "perplexity": 5.124571323394775,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Not/2, Not/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Not/2, Not/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Volatile(x)",
        "Stock(x, y)",
        "Growth(y)"
      ],
      "fol_consts": [
        "KO",
        "KO"
      ],
      "fol_rules": [
        "∀x (Volatile(x)) → ∃y (Stock(x, y))",
        "(Stock(x, y) ∧ ∀z (Growth(z))) ⊕ ∀z (∃w ((Growth(w, z) ∨ ¬(¬Growth(y, w)))) ∨ Stock(x, y))"
      ],
      "fol_conc": "∀x (Volatile(x) → ∃y (Growth(y)))",
      "perplexity": 3.625498056411743,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Growth/2, Growth/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Growth/2, Growth/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 532
  },
  {
    "id": 127,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock does not have wings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Breathes(x)",
        "Wings(x, y)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x))",
        "∃x Mammal(x)",
        "For all x If P(x), then Q(x) → R(x)",
        "¬(P(y) ∧ NotQ(z)) → ¬R(y)",
        "Wings(rina)"
      ],
      "fol_conc": "Wings(rina)",
      "perplexity": [
        2.6091818809509277,
        1.8756104707717896
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "For all x If P(x), then Q(x) → R(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(y)",
        "Bird(z)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "mammals",
        "monkeys",
        "birds",
        "animals",
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "(Monkey(mammals) ∧ Mammal(monkey)) ∨ Is(monkey, monkey)",
        "Is(birds) ∧ Is(animal)"
      ],
      "fol_conc": "¬Is(wings) ⊕ ¬Breathe(something)",
      "perplexity": 3.6146841049194336,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "mammals",
        "monkeys",
        "birds",
        "animals"
      ],
      "fol_rules": [
        "∀x (Mammal(x) ∧ Animal(x)) → ∃y (Mammal(y) ∨ Animal(y))",
        "(Mammal(mammals) ∧ ¬(Animal(monkey) ∨ Mammal(monkey))) ⊕ (¬(Animal(birds) ∨ Mammal(birds)))"
      ],
      "fol_conc": "∀x ((Mammal(x) → ∃y (Mammal(y)) ∧ Animal(x)) ∨ (¬Mammal(mammals) ∨ ¬Animal(monkeys)) ∨ (∀x (Animal(x) → ¬(Mammal(birds)))))",
      "perplexity": 2.3051323890686035,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 533
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Skittish(animal(x))",
        "Rabbitta",
        "Turtel"
      ],
      "fol_consts": [
        "Rabbit",
        "Squirrel",
        "Rock"
      ],
      "fol_rules": [
        "(∀x (Cute(x) → ¬Skittish(x)))",
        "((∃y (Rabbit(y)) ∧ Skittish(z)) ∨ (∃z (Turtel(x)) ∧ ∼(Still(z)))) ⊕ ((∀y (Squirrel(a))) ∧ ∀z (Rock(b))),"
      ],
      "fol_conc": "(Cute(Rabbitta) ∧ Skittish(Squirrel(Turtel(rock])))",
      "perplexity": [
        2.4840481281280518,
        3.243828058242798
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∃y (Rabbit(y)) ∧ Skittish(z)) ∨ (∃z (Turtel(x)) ∧ ∼(Still(z)))) ⊕ ((∀y (Squirrel(a))) ∧ ∀z (Rock(b))),"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)"
      ],
      "fol_consts": [
        "rabbit",
        "turtle"
      ],
      "fol_rules": [
        "(∀x (Cute(x) → Rabbit(x)))",
        "(∃x (Turtle(t)) ∧ (∃y (Skittish(y, x))))",
        "(Squirrel(s) → Skittish(s))",
        "(Rock(r) ∧ Still(r))"
      ],
      "fol_conc": "(Rabbit(r)) ∨ (∃y (Still(y)))",
      "perplexity": 3.8100430965423584,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Skittish/1, Skittish/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Skittish/1, Skittish/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isCute(x)",
        "exists(y)",
        "isCute(z)"
      ],
      "fol_consts": [
        "rabbids",
        "turtles",
        "rabbits",
        "squirrels",
        "rock"
      ],
      "fol_rules": [
        "(∀x (isCute(x))) → (∃y ((isCute(y)) ∨ ¬(exists(y))))",
        "(∃x (exists(y) ∧ isCute(x))) → ∃z (isCute(z))"
      ],
      "fol_conc": "¬((∃t (exists(t) ∧ exists(rabbids))) ∨ (∃r (exists(squirrels)) ∧ ¬(exists(rack))))",
      "perplexity": 4.332442760467529,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 534
  },
  {
    "id": 169,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "No politicans are part of the Nazi Reichstag.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∀x (Caffeine(x) ∧ Drinks(x)) ⊕ ¬(Hinrich(x) ∨ ∃y Caffeine(y))",
        "∀x (∃y Caffeine(y) ∧ Jokes(hinrich)) ⊕ ¬(Hinrich(x) ∨ ∃z Drink(z))"
      ],
      "fol_conc": "Jokes(rina) ⊕ Unaware(rina)",
      "perplexity": [
        2.685208320617676,
        1.4894016981124878
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python"
      ],
      "fol_rules": [
        "∀x (Drink(x)) → Dependent(x)",
        "(Sam(rina, x)) ∧ Unaware(rina) ⊕ ¬(Mac(sam) ∨ Unclear(rina))",
        "(Student(rina)) ∧ Not(arnednesssam)"
      ],
      "fol_conc": "Jokes(rina)",
      "perplexity": 3.5919346809387207,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Member(x, y)",
        "Person(x)"
      ],
      "fol_consts": [
        "heinrich",
        "nazi"
      ],
      "fol_rules": [
        "∀x (Person(x)) → ∃y (Member(y, x))"
      ],
      "fol_conc": "¬(Member(nazi, heinrich))",
      "perplexity": 2.5644705295562744,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 535
  },
  {
    "id": 196,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi is terricolous.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Drinks(x)",
        "Student(x)",
        "Dependent(x)",
        "Barks(y)"
      ],
      "fol_consts": [
        "rina"
      ],
      "fol_rules": [
        "∀x (Drinks(x) → Dependent(x))",
        "∃y (Students(y)): ∀z ((Drinks(z, x) ∨ Barks(z)) ⊕ ¬((Student(z) ∧ Barks(z))))",
        "¬(Dependent(rina,x))"
      ],
      "fol_conc": "(Terricolous(Kikki))",
      "perplexity": [
        2.762660503387451,
        3.7335548400878906
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (Students(y)): ∀z ((Drinks(z, x) ∨ Barks(z)) ⊕ ¬((Student(z) ∧ Barks(z))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Animal(x)",
        "Barks(y)",
        "Likes(z)"
      ],
      "fol_consts": [
        "bark",
        "like"
      ],
      "fol_rules": [
        "(∃x ∀y (If(x, y) → If(z, x)) ∧ All(dogs) ⊕ Barks(bark))",
        "(All(animals) ∧ (∀z ((Barks(y) ∨ Like(jane)) → Zicks(y))) ∧ Legs(z) ∨ Jumping(z))",
        "(Terricolous(a) ∧ (Legs(a) ∨ Jumping(a))) ∨ Terricolous(kikki)"
      ],
      "fol_conc": "Terricolous(kikki)",
      "perplexity": 3.864511251449585,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "barks(x)",
        "jumps(x)",
        "hasLegs(x)",
        "isTerricolous(x)"
      ],
      "fol_consts": [
        "Jane",
        "KiKi"
      ],
      "fol_rules": [
        "∀x (barks(x) → ¬(¬barks(y) ∨ ∀z (jumps(z) ∧ barks(y))))",
        "(barks(k) → ∃y ((hasLegs(y)) ∨ jumps(y)))",
        "(isTerricolous(s) → (∀t (hasLegs(t)) ∨ isTerricolous(t)))"
      ],
      "fol_conc": "(barks(KiKi) ∧ ¬(jumps(KiKi) ∧ hasLegs(KiKi)))",
      "perplexity": 3.0433437824249268,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 536
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "IsdependentOnCaffeine(x)",
        "DrinkCoffee(x)",
        "JokeAboutCaffeine(x)",
        "DriedThaiChilies(is a hotpot)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Dependent(x) ∧ DrinkCoffee(x))",
        "(¬∃y (Drinkscoffee(y))) ∨ ¬(All products of Baked by Melissa are cupcakes)",
        "∀x ((Not Dependent(x) ∧ Drinks Coffee(x)) ∨ JokeAboutCaffeine(x))"
      ],
      "fol_conc": "DriedThaiChilies(is a hotpot)",
      "perplexity": [
        2.4887778759002686,
        2.0974948406219482
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬∃y (Drinkscoffee(y))) ∨ ¬(All products of Baked by Melissa are cupcakes)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "No(x)",
        "All(y, z)"
      ],
      "fol_consts": [
        "bakery",
        "cupcake",
        "spicy",
        "hotpot",
        "products",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "∀x (Spicy(x) → No(bakery))",
        "∀y (Bakery(y) ∧ Spicy(y) → Cupcake(y))"
      ],
      "fol_conc": "Hotpot(cupcakes)",
      "perplexity": 2.6839542388916016,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Bakery/1, Bakery/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Bakery/1, Bakery/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BakedByMelissa(x)",
        "Spicy(x)"
      ],
      "fol_consts": [
        "bakeries",
        "cupcakes",
        "hotpots"
      ],
      "fol_rules": [
        "∀x (BakedByMelissa(x)) → ∃y (Spicy(y))",
        "(BakedByMelissa(rina)) ∧ Spicy(rina)"
      ],
      "fol_conc": "∃x (BakedByMelissa(x) ∨ Spicy(x))",
      "perplexity": 2.3198816776275635,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 537
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "Dependent(rina)",
        "Drinks(sam)",
        "Jokes(sam)",
        "Unaware(rina)"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        3.301961660385132,
        4.326804161071777
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "All(x, haswedding)",
        "John(x)",
        "Traveling(x, y)",
        "Wedding(y, z)",
        "Child(z)"
      ],
      "fol_consts": [
        "john",
        "traveling",
        "wedding"
      ],
      "fol_rules": [
        "∀x (All(x, haswedding) → John(x))",
        "(John(john) ∧ Wedding(workingdays)) ⊕ (∃y (Workingdays(y)))",
        "(Wedding(workingdays) ∨ Traveling(john)) → ∀z ((Child(z) ∧ Wedded(john, z)) ∨ (Traveling(john, y) ∧ Haswedding(x, workingdays)))"
      ],
      "fol_conc": "∃x ∃y (∀w (Haswedding(w, x) ∧ Wedding(w, x) → Child(y)))",
      "perplexity": 3.776440382003784,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Traveling/2, Traveling/1, Wedding/1, Wedding/2, John/1, John/0, Workingdays/1, Workingdays/0, Haswedding/2, Haswedding/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Traveling/2, Traveling/1, Wedding/1, Wedding/2, John/1, John/0, Workingdays/1, Workingdays/0, Haswedding/2, Haswedding/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)"
      ],
      "fol_consts": [
        "john",
        "wednesday",
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "(Wedding(wednesday, x)) ∨ ∀y (Wedding(y, x) ∧ ¬(Wedding(x) ⊕ Wedding(y)))"
      ],
      "fol_conc": "Child(john)",
      "perplexity": 3.9544217586517334,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wedding/2, Wedding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Wedding/2, Wedding/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 538
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Can(x, y)",
        "Empty(p)"
      ],
      "fol_consts": [
        "Greyhound",
        "Boeing 707"
      ],
      "fol_rules": [
        "∀x (Can(Greyhound(x), transport(y)) → Transport(y)), ∀y ∃z Can(Boeing 707(z), y)",
        "∀x Cannot(Can(x, Greyhound) ∨ Can(x, Boeing 707))"
      ],
      "fol_conc": "Empty(p)",
      "perplexity": [
        3.976666212081909,
        1.8244335651397705
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Can(Greyhound(x), transport(y)) → Transport(y)), ∀y ∃z Can(Boeing 707(z), y)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Can(x, y)",
        "Empty(y)"
      ],
      "fol_consts": [
        "plane",
        "airline",
        "passenger"
      ],
      "fol_rules": [
        "(∀x ∀y (Plane(planes)) → Empty(passengers))",
        "If(planepassesemptythennotairlinen)"
      ],
      "fol_conc": "Not(businessespanningplane)",
      "perplexity": 18.67601203918457,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Can(x, y)",
        "NotEmpty(y)"
      ],
      "fol_consts": [
        "airline",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "airline",
        "airline",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane",
        "plane"
      ],
      "fol_rules": [
        "∀x ∀y (Can(x, y) → ¬NotEmpty(y))",
        "(NotEmpty(airline)) ∧ ¬(NotEmpty(plane)) ∨ (∃x ∃y ∃z (Can(x, z) ∧ Can(y, z))) ∨ (∀x ∃y ∃z (Can(x, y) ∧ NotEmpty(z)) → ∀y ∃x ∃z ((NotEmpty(y) ∧ Can(x, z)) → ¬(NotEmpty(z))))",
        "¬(Can(s) ∧ NotEmpty(plane))"
      ],
      "fol_conc": "(∀x (Can(x, plane) ∨ ¬Can(x, plane)))",
      "perplexity": 2.31225323677063,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Can/1, Can/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Can/1, Can/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 539
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "contains(x)",
        "reads(x, y)",
        "gainsKnowledge(y)"
      ],
      "fol_consts": [
        "Harry",
        "sam"
      ],
      "fol_rules": [
        "∀z ∃y ((reads(z, y) ∧ contains(x)) → gainKnowledge(y})",
        "(∀x (gainsKnowledge(x))) ⊕ ¬(∀x ∃y ((read(sam,x) ∨ reads(x,y)) ∧ contain(x,y))))",
        "∀x (∋gainKnowledge(x))^⊕¬∈z (((read(sam,z) ∨ read(z,x)) ∧ contains(z,y)) → gainKnowledge(y))"
      ],
      "fol_conc": "∀x (gainsKnowledge(x))^ ⊕ ¬∃z ((read(sam,z) ∨ reads(z,x)) ∧ contain(z,y))",
      "perplexity": [
        3.0432920455932617,
        2.0813889503479004
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀z ∃y ((reads(z, y) ∧ contains(x)) → gainKnowledge(y})"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Knowledge(x)",
        "Reads(x, y)",
        "Gains(x, y)"
      ],
      "fol_consts": [
        "walden",
        "henrythroeu",
        "smarter"
      ],
      "fol_rules": [
        "(∀x (Knowledge(x) → Gains(reading, x)))",
        "(Walden(waldfen)) ∧ (Henryrothau(henerythoene))"
      ],
      "fol_conc": "(Smarter(readswaldefeno)) ∨ (Gains(readswaldfeno))",
      "perplexity": 3.69999361038208,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Gains/2, Gains/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Gains/2, Gains/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasKnowledge(x)",
        "Smarter(y)"
      ],
      "fol_consts": [
        "Harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x (HasKnowledge(x) → Smarter(x))",
        "(∃y (Smarter(y))) ∧ (∃x (HasKnowledge(x) ∧ ∃z (Smarter(z)))) → ((∃y (Smarter(y)) ∧ HasKnowledge(x)) ∨ (∀y (Smarter(y) ∧ ∀z (HasKnowledge(x) ∧ Smarter(z)))))",
        "(∀x (Smarter(x))) ⊕ (∀x (Smarter(x)))"
      ],
      "fol_conc": "(Smarter(h) → HasKnowledge(Walden))",
      "perplexity": 2.4765119552612305,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 540
  }
]