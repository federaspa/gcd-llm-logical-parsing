Given a problem description and a question. The task is to formulate the problem as a logic program, consisting three parts: Declarations, Constraints, and Options.
Declarations: Declare the variables and functions.
Constraints: Write the constraints in the problem description as logic formulas.
Options: Write the options in the question as logic formulas.
Do not attempt to solve the problem, limit yourself to converting.

------

NL problem:
"""
On Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.
"""

NL question:
"""
Vladimir must eat which one of the following foods?
Choices:
(A) fish
(B) hot cakes
(C) macaroni
(D) omelet
(E) poached eggs
"""

###

{"declarations": [ "people = EnumSort([vladimir, wendy])", "meals = EnumSort([breakfast, lunch, dinner, snack])", "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])", "eats = Function([people, meals] -> [foods])"], "constraints": ["ForAll([m:meals], eats(vladimir, m) != eats(wendy, m))", "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)", "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))", "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))", "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",  "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))", "eats(wendy, lunch) == omelet"], "options": ["is_valid(Exists([m:meals], eats(vladimir, m) == fish))", "is_valid(Exists([m:meals], eats(vladimir, m) == hot_cakes))", "is_valid(Exists([m:meals], eats(vladimir, m) == macaroni))", "is_valid(Exists([m:meals], eats(vladimir, m) == omelet))", "is_valid(Exists([m:meals], eats(vladimir, m) == poached_eggs))"]}

------

NL Problem:
"""
In a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types—radios, televisions, and VCRs—and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.
"""

NL Question:
"""
Which one of the following pairs of technicians could repair all and only the same types of machines as each other?
Choices:
(A) Stacy and Urma
(B) Urma and Yolanda
(C) Urma and Xena
(D) Wim and Xena
(E) Xena and Yolanda
"""

###

{"declarations": ["technicians = EnumSort([stacy, urma, wim, xena, yolanda, zane])", "machines = EnumSort([radios, televisions, vcrs])", "repairs = Function([technicians, machines] -> [bool])"],"constraints": ["ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)", "And(repairs(xena, radios), Count([t:technicians], And(t != xena, repairs(t, radios))) == 3)", "And(repairs(yolanda, televisions), repairs(yolanda, vcrs))", "ForAll([m:machines], Implies(repairs(yolanda, m), Not(repairs(stacy, m))))", "Count([m:machines], repairs(zane, m)) > Count([m:machines], repairs(yolanda, m))", "ForAll([m:machines], Implies(repairs(stacy, m), Not(repairs(wim, m))))", "Count([m:machines], repairs(urma, m)) == 2"], "options": ["is_sat(ForAll([m:machines], repairs(stacy, m) == repairs(urma, m)))", "is_sat(ForAll([m:machines], repairs(urma, m) == repairs(yolanda, m)))", "is_sat(ForAll([m:machines], repairs(urma, m) == repairs(xena, m)))", "is_sat(ForAll([m:machines], repairs(wim, m) == repairs(xena, m)))", "is_sat(ForAll([m:machines], repairs(xena, m) == repairs(yolanda, m)))"]}

------

NL Problem:
"""
Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.
"""

NL Question:
"""
Each of the following could be the fifth valve opened EXCEPT:
Choices:
(A) H
(B) I
(C) K
(D) N
(E) O
"""

###

{"declarations": ["valves = EnumSort([g, h, i, k, l, n, o, p])", "opened = Function([valves] -> [int])"], "constraints": ["ForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))", "Distinct([v:valves], opened(v))", "And(opened(k) < opened(h), opened(p) < opened(h))", "And(opened(o) > opened(h), opened(o) < opened(l))", "opened(l) > opened(g)", "opened(n) < opened(h)", "opened(i) > opened(k)"], "options": ["is_exception(is_sat(opened(h) == 5))", "is_exception(is_sat(opened(i) == 5))", "is_exception(is_sat(opened(k) == 5))", "is_exception(is_sat(opened(n) == 5))", "is_exception(is_sat(opened(o) == 5))"]}

------

NL Problem:
"""
Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.
"""

NL Question:
"""
If R speaks second at meeting 2 and first at meeting 3, which one of the following is a complete and accurate list of those time slots any one of which could be the time slot in which R speaks at meeting 1?
Choices:
(A) fourth, fifth
(B) first, second, fifth
(C) second, third, fifth
(D) third, fourth, fifth
(E) second, third, fourth, fifth
"""

###

{"declarations": ["candidates = EnumSort([q, r, s, t, u])", "meetings = EnumSort([1, 2, 3])", "speaks = Function([meetings, candidates] -> [int])"], "constraints": ["ForAll([m:meetings, c:candidates], And(1 <= speaks(m, c), speaks(m, c) <= 5))", "ForAll([m:meetings], Distinct([c:candidates], speaks(m, c)))", "ForAll([c:candidates], Exists([m:meetings], Or(speaks(m, c) == 1, speaks(m, c) == 2)))", "ForAll([c:candidates], Implies(Exists([m:meetings], speaks(m, c) == 5), Exists([m:meetings], speaks(m, c) == 1)))", "ForAll([c:candidates], Count([m:meetings], speaks(m, c) == 4) <= 1)", "And(speaks(2, r) == 2, speaks(3, r) == 1)"], "options": ["is_accurate_list([speaks(1, r) == 4, speaks(1, r) == 5])", "is_accurate_list([speaks(1, r) == 1, speaks(1, r) == 2, speaks(1, r) == 5])", "is_accurate_list([speaks(1, r) == 2, speaks(1, r) == 3, speaks(1, r) == 5])", "is_accurate_list([speaks(1, r) == 3, speaks(1, r) == 4, speaks(1, r) == 5])", "is_accurate_list([speaks(1, r) == 2, speaks(1, r) == 3, speaks(1, r) == 4, speaks(1, r) == 5])"]}

------

NL Problem:
"""
A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.
"""

NL Question:
"""
Which one of the following interns CANNOT be assigned to Tuscany?
Choices:
(A) Farber
(B) Gombarick
(C) Hall
(D) Kanze
(E) Lha
"""

###

{"declarations": ["interns = EnumSort([farber, gombarick, hall, jackson, kanze, lha])", "stories = EnumSort([romania, spain, tuscany])", "assistants = EnumSort([photographer, writer])", "assigned = Function([interns] -> [stories])", "trained = Function([interns] -> [assistants])"], "constraints": ["ForAll([s:stories], Exists([i1:interns, i2:interns], And(i1 != i2, And(assigned(i1) == s, assigned(i2) == s, trained(i1) == photographer, trained(i2) == writer))))", "trained(gombarick) == trained(lha)", "trained(farber) != trained(kanze)", "trained(hall) == photographer", "assigned(jackson) == tuscany", "assigned(kanze) != spain"], "options": ["is_unsat(assigned(farber) == tuscany)", "is_unsat(assigned(gombarick) == tuscany)", "is_unsat(assigned(hall) == tuscany)", "is_unsat(assigned(kanze) == tuscany)", "is_unsat(assigned(lha) == tuscany)"]}

------

NL Problem:
"""
[[nl_problem]]
"""

NL Question:
"""
[[nl_question]]
Choices:
[[choices]]
"""
###