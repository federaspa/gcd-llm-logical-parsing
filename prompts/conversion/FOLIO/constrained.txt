The task is to convert a natrual language reasoning problem into first-order logic. 
First, identify the predicates and constants required to build the first order logic formulas. 
Then, use them to build the rules and the conclusion. 
Do not attempt to prove or disprove the conclusion, limit yourself to converting.

You reply strictly in JSON format, with the following schema:
"""
\{
"fol_preds": [list of required FOL Predicates],
"fol_consts": [list of required FOL Constants],
"fol_rules": [list of generated FOL Rules],
"fol_conc": [generated FOL Conclusion]
\}
"""

Here's an example of how to perform the conversion:

NL premises:
"""
All people who regularly drink coffee are dependent on caffeine. 
People either regularly drink coffee or joke about being addicted to caffeine. 
No one who jokes about being addicted to caffeine is unaware that caffeine is a drug. 
Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug. 
If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student.
"""

NL conclusion:
"""
Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.
"""

------

{"fol_preds": ["Dependent(x)", "Drinks(x)", "Jokes(x)", "Unaware(x)", "Student(x)"], "fol_consts": ["rina"], "fol_rules": ["∀x (Drinks(x) → Dependent(x))", "∀x (Drinks(x) ⊕ Jokes(x))", "∀x (Jokes(x) → ¬Unaware(x))", "(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))", "¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))"], "fol_conc": "Jokes(rina) ⊕ Unaware(rina)"}

###

Here's another example:

NL premises:
"""
Sam is doing a project.
A project is written either in Rust or in Python.
If Sam does a project written in Python, he will not use a Mac.
Sam is using a Mac.
If Sam uses a Mac, he will play a song.
If a song is not "Perfect", Sam will never play it.
"""

NL conclusion:
"""
The project Sam is doing is written in Rust.
"""

------

{"fol_preds": ["Project(x)", "Do(x, y)", "WrittenIn(x, y)", "Use(x, y)", "Play(x, y)", "Song(x)", "Be(x, y)"], "fol_consts": ["sam", "mac", "python", "rust", "perfect"], "fol_rules": ["∃x (Project(x) ∧ Do(sam, x))", "∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, rust)))", "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))", "Use(sam, mac)", "Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))", "∀x ((Song(x) ∧ ¬Be(x, perfect)) → ¬Play(sam, x))"], "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))"}

###

Now let's convert this problem to first-order logic:

NL premises:
"""
[[nl_problem]]
"""

NL conclusion:
"""
[[nl_conclusion]]
"""