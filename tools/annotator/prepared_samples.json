[
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ContainsKnowledge(x)",
        "ReadsBook(x, y)",
        "GainKnowledge(x)",
        "BecomesSmarter(x)",
        "Book(y)",
        "AuthorOf(z, w)",
        "TitleIs(w, v)"
      ],
      "fol_consts": [
        "harry",
        "walden_by_thoreau",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainsKnowledge(x))",
        "∀x, y (ReadsBook(x, y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → BecomesSmarter(x))",
        "ReadsBook(harry, walden_by_thoreau)",
        "Book(walden_by_thoreau)",
        "AuthorOf(thoreau, walden_by_thoreau)",
        "TitleIs(walden_by_thoreau, walden)",
        "∀y (TitleIs(x, y) → ContainsKnowledge(x))",
        "∀z, w ((AuthorOf(z, w)) → GainKnowledge((ReadsBook(_, z))) )",
        "(ReadsBook(harry, walden_by_thoreau) & ContainsKnowledge(walden_by_thoreau))"
      ],
      "fol_conc": "ContainsKnowledge(walden_by_thoreau)",
      "perplexity": [
        1.3975255489349365,
        1.0834386348724365
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (ReadsBook(x, y) → GainKnowledge(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(z, x)",
        "Gain(z, y)",
        "Becomes(z)"
      ],
      "fol_consts": [
        "harry",
        "walden"
      ],
      "fol_rules": [
        "∀b (Book(b) → ∃k (Contains(b, k)))",
        "∀p (Person(p)) → Read(p, b) → Gain(p, k)",
        "Gain(p, k) → Becomes(p)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.7071341276168823,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ContainsKnowledge(x)",
        "Reads(y, x)",
        "GainsKnowledge(z)",
        "GainsKnowledge(w)",
        "Reads(y, w)",
        "ContainsKnowledge(t)",
        "ContainsKnowledge(u)",
        "Reads(v, t)",
        "Reads(g, u)",
        "ContainsKnowledge(b)",
        "Reads(h, b)",
        "Reads(i, c)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "walden",
        "harry",
        "harry",
        "harry"
      ],
      "fol_rules": [
        "∀x (ContainsKnowledge(x)) → ¬GainsKnowledge(z)",
        "∃y ∃x (Reads(y, x) → GainsKnowledge(w))",
        "∀u ∀v (Reads(v, u) → ContainsKnowledge(b))",
        "GainsKnowledge(z)",
        "Reads(harry, walden)"
      ],
      "fol_conc": "ContainsKnowledge(walden)",
      "perplexity": 3.092141628265381,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 1
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "GivenOut(x, y, z)",
        "OnBachelor(x)",
        "Portrays(x, y)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃y GivenOut(roses, bachelor, pm8)",
        "∀x (GivenOut(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → ∃y Portrays(x, y))",
        "∀x ∀y (Portrays(x, y) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬GivenOut(breakingbad, monday, pm8)",
      "perplexity": [
        1.0870662927627563,
        1.0161006450653076
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realpeople(y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(roses, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.2369846105575562,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "OnTheBachelor(x)",
        "PortraysRealPeople(x)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "bachelor",
        "breakingbad",
        "monday",
        "8pm"
      ],
      "fol_rules": [
        "∃y ∃z (OnTV(y, monday, z) ∧ OnTV(y, monday, 8pm))",
        "∀x (Rose(x) → OnTheBachelor(x))",
        "∀x (OnTheBachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, monday, 8pm)",
      "perplexity": 1.4163721799850464,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 2
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contain(x, y)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x, y)",
        "Book(x)",
        "Author(x, y)",
        "Person(x)",
        "Knowledge(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x ∀y (Book(x) ∧ Contain(x, y) → Knowledge(y))",
        "∀x ∀y (Person(x) ∧ Read(x, y) → GainKnowledge(x))",
        "∀x ∀y (GainKnowledge(x) → Smarter(x, y))",
        "Book(walden) ∧ Author(walden, henry) ∧ Read(harry, walden)"
      ],
      "fol_conc": "∃y (Smarter(harry, y))",
      "perplexity": [
        1.1879096031188965,
        1.2324451208114624
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contain(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contain(x, y)))",
        "∀x (Read(x, y) → Gain(x, y))",
        "∀x (Gain(x, y) → Smarter(x, y))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry, harry)",
      "perplexity": 1.2436883449554443,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contain(x, y)",
        "Reads(x, y)",
        "GainsKnowledge(x, y)",
        "BecomeSmarter(x)",
        "BecomeSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry thoreau']}  # Becomes smarter is a relation between two states of Harry before and after reading the book. To capture this in FOL we need to define 'smarter' as an attribute of a person, but since it's not stated that there are different states or stages for people with respect to their intelligence in the problem description - I just added ",
        "walden",
        "henry thoreau']}  # Becomes smarter is a relation between two states of Harry before and after reading the book. To capture this in FOL we need to define 'smarter' as an attribute of a person, but since it's not stated that there are different states or stages for people with respect to their intelligence in the problem description - I just added "
      ],
      "fol_rules": [
        "∀x (Contain(x, y) → ∃z (GainsKnowledge(z, x)))",
        "∀x (∃y (Reads(x, y)) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → BecomeSmarter(x))",
        "Reads(harry, walden)",
        "BecomeSmarter(x, z)"
      ],
      "fol_conc": "BecomeSmarter(harry, x)",
      "perplexity": 4.831011772155762,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GainsKnowledge/1, GainsKnowledge/2, BecomeSmarter/1, BecomeSmarter/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GainsKnowledge/1, GainsKnowledge/2, BecomeSmarter/1, BecomeSmarter/2"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 3
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "IsHuman(x)",
        "IsExtraterrestrial(x)"
      ],
      "fol_consts": [
        ",marvin"
      ],
      "fol_rules": [
        "[∀x (IsHuman(x) → ¬Extraterrestrial(x))",
        "(Marvin = Human)",
        "{(¬(IsExtraterrestrial(Marvin))) ∨ (Marvin ≠ marvin)}"
      ],
      "fol_conc": "¬((∃x IsHuman(x) ∧ x ≠ marvin) ∨ ¬(IsExtraterrestrial(marvin)))",
      "perplexity": [
        2.573894739151001,
        2.66007399559021
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "[∀x (IsHuman(x) → ¬Extraterrestrial(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Mars(x)",
        "Human(y)"
      ],
      "fol_consts": [
        "earth",
        "mario"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x) → Alien(x))",
        "(Alien(radio) ∧ Extraterrestrial(radioguy)) ⊕ ∃y (∃z ∀w ((Mars(z, y)) ∨ ¬(Earth(w))))",
        "¬(Human(earth) ∧ Extranterstellar(mario))"
      ],
      "fol_conc": "(Not(extraterresterialradio) → Alien(radioguy))",
      "perplexity": 4.696617126464844,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Earth/1, Earth/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Earth/1, Earth/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(y)",
        "Extraterrestrial(z)"
      ],
      "fol_consts": [
        "Earth(x)"
      ],
      "fol_rules": [
        "∀y (Extraterrestrial(y)) → ∀z (Extraterrestrial(z) ⊕ Alien(y))",
        "(Extraterrestrial(e)) ∧ Extraterrestrial(f) → Extraterrestrial(e, f)",
        "Extraterrestrial(m) ∨ Extraterrestrial(a) → Alien(Earth(x), Earth(x))"
      ],
      "fol_conc": "Alien(Earth(x))",
      "perplexity": 5.347553253173828,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Extraterrestrial(m) ∨ Extraterrestrial(a) → Alien(Earth(x), Earth(x))"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 4
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x)",
        "ManMade(x)",
        "ArtificialIntelligence(x, y)",
        "Created(Alice, x)"
      ],
      "fol_consts": [
        "Alice",
        "Computer"
      ],
      "fol_rules": [
        "(∀x ((Created(x)) → (ManMade(Computer(x)))) ∨ (∃x (ManMade(Created(Alice, x))))",
        "$(¬Exists(y)(ArtificialIntelligence(y, Computer(sam))) ∧ Created(sam, y))"
      ],
      "fol_conc": "IsGrandSlam(Djokovic, x): The status of being the grand slam champion for Djokovic = true or false",
      "perplexity": [
        2.979233980178833,
        2.5362324714660645
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x ((Created(x)) → (ManMade(Computer(x)))) ∨ (∃x (ManMade(Created(Alice, x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "grandchampion",
        "oaccer",
        "tennisplayer",
        "celebrity",
        "athlete",
        "paid",
        "famous",
        "taxhaven"
      ],
      "fol_rules": [
        "(∀x (Person(x))) ⊕ (Is(celebrity, x))",
        "(Grandchampion(x) ∧ Is(tennisplayer, x))"
      ],
      "fol_conc": "If(djokovic) → If(famous, then, live, in, taxhaven)",
      "perplexity": 3.6547248363494873,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: If/5, If/1.\n\n\nFatal error:  The following symbols are used with multiple arities: If/5, If/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlam(x)",
        "OscarNominated(x)",
        "GrandSlam(champion)"
      ],
      "fol_consts": [
        "johndokovic",
        "tennisplayer",
        "actor"
      ],
      "fol_rules": [
        "∀x (GrandSlam(x)) → (GrandSlam(champion) ∧ (GrandSlam(champion) ∨ OscarNominated(x)))",
        "(OscarNominated(actor)) ⊕ GrandSlam(athlete)",
        "(OscarNominated(actor)) ⊕ GrandSlam(player)"
      ],
      "fol_conc": "¬(GrandSlam(johndokovic) ∧ (GrandSlam(johndokovic) ∨ OscarNominated(johndokovic)))",
      "perplexity": 2.873694658279419,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 5
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Loves(x, y)",
        "Favorite(x, y)",
        "Australian(x)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "Max",
        "Koala",
        "Tourists"
      ],
      "fol_rules": [
        "∀x (Loves(Max, Animals) → Favorite(Max, Animals))",
        "ς▼  Τ χ⁡.  /ψ ι Ϋ λ. ",
        "∀x (Quokka(Animal) → Australian(Animal))",
        "υ Τ χ⁡.μ"
      ],
      "fol_conc": "Koalas love to sleep and are quokkas",
      "perplexity": [
        2.5639846324920654,
        2.136125087738037
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "ς▼  Τ χ⁡.  /ψ ι Ϋ λ."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleeps(x)"
      ],
      "fol_consts": [
        "max",
        "koala",
        "quokka",
        "australia",
        "animals"
      ],
      "fol_rules": [
        "∀y (Loved(animals, tourists) → Favorite(max, animals))",
        "∀x (From(x, australia) ∧ Loved(x, tourists))",
        "∀x (Animal(x) ∧ From(x, australia))",
        "Favorite(max, animals) ∧ Fluffy(animals)",
        "All(favorite, max) → Sleeps(favorites)",
        "Fluffy(koala) → ¬(From(koala, quokka))"
      ],
      "fol_conc": "Sleeps(koalas) ∧ From(koalas, quokka)",
      "perplexity": 1.6129482984542847,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Favorite/2, Favorite/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Favorite/2, Favorite/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "Favorite(x, y)",
        "LovedBy(x, y)"
      ],
      "fol_consts": [
        "animals",
        "Max",
        "koalas",
        "quokkas"
      ],
      "fol_rules": [
        "(LovedBy(Max, x)) ∧ (Favorite(Max, x)) → (LovedBy(a, x)) ∨ (LovedBy(x, a))",
        "LovedBy(animals, a) → (LovedBy(a, animals))",
        "LovedBy(australia, animals) ∧ Favorite(Max, animals)",
        "(Favorite(Max, x)) ∧ (LovedBy(x, Max))",
        "LovedBy(koalas, a)",
        "LovedBy(a, koalas) ∧ LovedBy(koalas, a)"
      ],
      "fol_conc": "LovedBy(animals, koalas)",
      "perplexity": 3.8307785987854004,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 6
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxFavorite(x) → VeryFluffy(x))",
        "∀x (MaxFavorite(x) → LoveToSleep(x))",
        "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "∀x (Koala(x) → LoveToSleep(x))",
      "perplexity": [
        1.0403395891189575,
        1.0133841037750244
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Quokka(x)",
        "Animal(x)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(y, x))",
        "∀x (Animal(x) ∧ From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → Animal(x) ∧ From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Sleep(koala)",
      "perplexity": 1.134602427482605,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Koala/1, Koala/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Koala/1, Koala/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedByTourists(x)",
        "FavoriteAnimalOfMax(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "LovesToSleep(x)"
      ],
      "fol_consts": [
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → FavoriteAnimalOfMax(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (FavoriteAnimalOfMax(x) → Fluffy(x))",
        "∀x (FavoriteAnimalOfMax(x) → LovesToSleep(x))",
        "∀x (Fluffy(x) ∧ Quokka(x) → ¬Quokka(x))"
      ],
      "fol_conc": "LovesToSleep(koala)",
      "perplexity": 1.1183691024780273,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 7
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(y, z)",
        "Mammal(z)",
        "Animal(w)",
        "SymptomOf(virus, symptom)",
        "HasSymptoms(animal, symptomsList)"
      ],
      "fol_consts": [
        "Monkeypox",
        "MonkeypoxVirus",
        "Humans",
        " glu"
      ],
      "fol_rules": [
        "InfectiousDisease(Monkeypox)",
        "CausedBy(Monkeypox, MonkeypoxVirus)",
        "OccursIn(MonkeypoxVirus, Humans)",
        "Mammal(Humans) ∧ Animal(Humans)",
        "∀x (SymptomOf(x, fever))",
        "∃y HasSymptoms(y, [fever, headache])"
      ],
      "fol_conc": "SymptomOf(MonkeypoxVirus, coughing)",
      "perplexity": [
        1.891088843345642,
        1.1538031101226807
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Caused(y)",
        "Occurs(z)",
        "Symptons(x)",
        "Infective(x)",
        "Feel(tired)",
        "Feels(x)",
        "Glu(y)"
      ],
      "fol_consts": [
        "monkeypox",
        "virus"
      ],
      "fol_rules": [
        "∀x (Is(monkeypox, infectious))",
        "∃y (Caused(virus) ∧ Occurs(y) ∧ Is(y, monkeypox))",
        "∀z ((Occurs(z) → Infective(z)))",
        "∀w (Mammal(w) → Animal(w))",
        "Human(human)",
        "(Symptons(monkeypox) → (Feels(x) ∧ Glu(y)))"
      ],
      "fol_conc": "∃x ((Symptons(monkeypox) → Coughs(x)))",
      "perplexity": 2.5654892921447754,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Disease(x)",
        "CausedBy(y, x)",
        "OccursIn(z, y)",
        "IsAAnimal(w)",
        "Mammal(v)",
        "Symptons(u)",
        "Fever(s)",
        "Fever(t)",
        "Symptons(v)",
        "Fever(r)",
        "CausedBy(g, h)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "∀x (Disease(x))",
        "CausedBy(monkeypoxvirus, monkeypox)",
        "OccursIn(human, monkeypoxvirus)",
        "IsAAnimal(humans)",
        "Mammal(mamals)",
        "Symptons(fever)",
        "Symptons(headache)",
        "Symptons(restlessness)",
        "Fever(tired)"
      ],
      "fol_conc": "∃x (Disease(x))",
      "perplexity": 4.442147731781006,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fever/1, Fever/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fever/1, Fever/0"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 8
  },
  {
    "id": 104,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Twin(x, y)",
        "Triplet(x, y, z)",
        "Siblings(x, y)",
        "SameAge(x, y)",
        "HangOut(x, y)",
        "Play(x, y)",
        "Complain(x)",
        "DevelopBonds(x)",
        "LiveAtHome(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "(Twin(x, y) ⊕ Triplet(x, y, z)) → HangOut(x, y) ∧ Play(x, y)",
        "(SameAge(x, y) → Twin(x, y) ⊕ Triplet(x, y, z))",
        "Complain(x) → SameAge(x, y)",
        "¬LiveAtHome(x) → ¬DevelopBonds(x)",
        "(HangOut(x, y) ∧ Play(x, y)) → ¬LiveAtHome(x)",
        "(Twin(x, y) ⊕ Triplet(x, y, z)) ⊕ ¬DevelopBonds(x)"
      ],
      "fol_conc": "¬(Twin(luke, y) ⊕ Triplet(luke, y, z)) ∧ ¬Complain(luke)",
      "perplexity": [
        1.087146520614624,
        1.1624399423599243
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "Siblings(x, y)",
        "Sameage(x, y)",
        "Annoying(x, y)",
        "Complain(x, y)",
        "Hangingout(x, y)",
        "Play(x, y)",
        "Home(x)",
        "Bond(x, y)",
        "Regular(x, y)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Twin(x) ⊕ Triplet(x)) → ∀y (Siblings(x, y) → Hangingout(x, y) ∧ Play(x, y))",
        "∀x (Siblings(x, y) ∧ Sameage(x, y) → Twin(x) ⊕ Triplet(x))",
        "∀x (Complain(x, y) → Sameage(x, y))",
        "¬Regular(x, y) → ¬Bond(x, y)",
        "Hangingout(x, y) ∧ Play(x, y) → ¬Regular(x, y)",
        "Twin(luke) ⊕ Triplet(luke) → Bond(luke, luke)",
        "¬(Twin(luke) ⊕ Triplet(luke)) → ¬(Twin(luke) ⊕ Triplet(luke))"
      ],
      "fol_conc": "¬(Twin(luke) ⊕ Triplet(luke)) ∧ ¬Complain(luke, luke)",
      "perplexity": 1.1990209817886353,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SpendTimeWithAndPlay(x, y)",
        "HaveSameAgeSibling(x, y)",
        "ComplainAboutAnnoyingSibling(x)",
        "DoNotLiveAtHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)"
      ],
      "fol_consts": [
        "luke",
        "luke"
      ],
      "fol_rules": [
        "∀x ∀y ((Twin(x, y) ⊕ Triplet(x)) → SpendTimeWithAndPlay(x, y))",
        "∀x ∃y (HaveSameAgeSibling(x, y) → Twin(x, y) ⊕ Triplet(x))",
        "∀x (∃y (ComplainAboutAnnoyingSibling(y) ∧ HaveSameAgeSibling(x, y)) → ComplainAboutAnnoyingSibling(x))",
        "∀x ((DoNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x)))",
        "(DoNotLiveAtHomeRegularly(x) ⊕ DevelopStrongBondsWithFamilyMembers(x))",
        "Twin(luke, luke) ⊕ Triplet(luke)",
        "¬(Twin(luke, luke) ∨ Triplet(luke))"
      ],
      "fol_conc": "(ComplainAboutAnnoyingSibling(luke) → ¬DevelopStrongBondsWithFamilyMembers(luke))",
      "perplexity": 2.3129143714904785,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 9
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [
        "colorectal_cancer"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(colorectal_cancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRateLow(x))",
        "∀x (BileDuctCancer(x) ∧ SurvivalRateLow(x) ∧ ColorectalCancer(x) → ¬BileDuctCancer(x))"
      ],
      "fol_conc": "∀x ( (BileDuctCancer(x) ∨ Cholangiocarcinoma(x)) ∧ ColorectalCancer(x) → (BileDuctCancer(x) ∧ MildFlu(x)) )",
      "perplexity": [
        1.0621095895767212,
        1.0207260847091675
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(x)",
        "Cancer(x)",
        "Bileduct(x)",
        "Cholangiocarcinoma(x)",
        "Mild(x)"
      ],
      "fol_consts": [
        "colorectal",
        "cancer"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → ¬Survival(x, high))",
        "∀x (Severe(x) → Deadly(x))",
        "Bileduct(colorectal)",
        "∀x (Cholangiocarcinoma(x) → Bileduct(x))",
        "∀x (Mild(x) → ¬Survival(x, low))",
        "∀x (Cancer(x) ∧ Bileduct(x) ∧ Survival(x, low) → ¬Bileduct(x))"
      ],
      "fol_conc": "((Cancer(colorectal) ∧ Bileduct(colorectal)) ∨ Cholangiocarcinoma(colorectal)) → (Cancer(colorectal) ∧ Bileduct(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.228973627090454,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "ColorectalCancer(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [
        "colorectalcancer"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) → Deadly(x))",
        "BileDuctCancer(bileductcancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "¬(MildFlu(x) ∧ SurvivalRateLow(x))",
        "(BileDuctCancer(colorectalcancer) ∧ SurvivalRateLow(colorectalcancer)) → ¬BileDuctCancer(colorectalcancer)"
      ],
      "fol_conc": "((BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer)) → (BileDuctCancer(colorectalcancer) ∧ MildFlu(colorectalcancer)))",
      "perplexity": 1.1319353580474854,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 10
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.0469894409179688,
        1.0243240594863892
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "∀x (¬(Ugly(x) ∧ Handsome(x)))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ Ceos(harry)",
      "perplexity": 1.2332758903503418,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Kind(harry) ∨ CEO(harry))",
      "perplexity": 1.0347031354904175,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 11
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "ZahaHadidStyle(x)",
        "KellyWearstlerStyle(x)"
      ],
      "fol_consts": [
        "zahahadid",
        "kellywearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (ZahaHadidStyle(x) → Timeless(x))",
        "∀x (∃y MassProductDesign(y) ∧ Timeless(y))",
        "∃x (ZahaHadidStyle(x) ⊕ KellyWearstlerStyle(x))",
        "∀x (KellyWearstlerStyle(x) → Evocative(x))",
        "∀x (KellyWearstlerStyle(x) → Dreamy(x))",
        "∀x ((MassProductDesign(x) ∧ Timeless(x)) → (∃y MassProductDesign(y) ∧ Evocative(y)))"
      ],
      "fol_conc": "∃x (MassProductDesign(x) ∧ Timeless(x))",
      "perplexity": [
        1.1905467510223389,
        1.1764590740203857
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max",
        "hadi",
        "wearstler"
      ],
      "fol_rules": [
        "(∀x (Design(x, zaha) → Timeless(x)))",
        "(¬(Mass(x, y)) → Timeless(y))",
        "(Design(zaha, x) ∨ Design(kelly, x))",
        "(∀x (Design(x, wearstler) → Evocative(x)))",
        "(∀x (Design(x, wearstler) → Dreamy(x)))",
        "((¬(Mass(max, y)) ∧ Timeless(y)) → (∃x (Design(x, max) ∧ Mass(x, y) ∧ Evocative(x))))"
      ],
      "fol_conc": "(Mass(max, x) ∧ Evocative(x))",
      "perplexity": 1.92484712600708,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)"
      ],
      "fol_consts": [
        "zaha-hadid",
        "kelly-wearstler",
        "max"
      ],
      "fol_rules": [
        "(∀x (¬(Timeless(zaha-hadid)) ∨ Timeless(max)))",
        "(Timeless(kelly-wearstler) → ¬MassProductDesign(kelly-wearstler))"
      ],
      "fol_conc": "((MassProductDesign(x) ∧ Timeless(y)))",
      "perplexity": 12.510005950927734,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((not (Timeless(Zaha-hadid))) | (Timeless(Max)))\n                          ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 12
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "KnownAs(x, y)",
        "BornIn(x, year)",
        "FootballPlayer(x)",
        "LoanedOutToClub(x, club)"
      ],
      "fol_consts": [
        "ailton",
        "1995",
        "braga",
        "nautico"
      ],
      "fol_rules": [
        "∀x, y (KnownAs(x, y) → BornIn(x, 1995))",
        "KnownAs(ailton, 'Ailton')",
        "FootballPlayer(ailton)",
        "LoanedOutToClub(ailton, braga)"
      ],
      "fol_conc": "¬∃club (LoanedOutToClub(ailton, club))",
      "perplexity": [
        1.805975317955017,
        1.0629603862762451
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (KnownAs(x, y) → BornIn(x, 1995))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Knownas(x, z)",
        "Player(x)",
        "Loanedoutto(x, y)",
        "Brazillian(x)",
        "Footballclub(x)",
        "Playsfor(x)",
        "Clubof(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∀x (Born(x, xtime)) → Knownas(x, ailton)",
        "Loanedoutto(ailton, braga) ∧ Player(ailton) → Footballclub(braga)",
        "Footballclub(nautico)",
        "Playsfor(ailton, nautico)"
      ],
      "fol_conc": "¬(Player(x))",
      "perplexity": 2.2763373851776123,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "KnownAs(x)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazillian(y)",
        "FootballClub(z)"
      ],
      "fol_consts": [
        "ailton",
        "1995"
      ],
      "fol_rules": [
        "(∀x (BornIn(ailton, 1995)))",
        "(∃y ((KnownAs(x) ∧ FootballPlayer(x)) ∧ LoanedOutTo(x, y)))",
        "(FootballClub(braga))",
        "(∃z ((Brazillian(z) ∧ FootballClub(nautico)) ∨ FootballClub(braga)))"
      ],
      "fol_conc": "¬LoanedOutTo(ailton)",
      "perplexity": 2.0865602493286133,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LoanedOutTo/2, LoanedOutTo/1.\n\n\nFatal error:  The following symbols are used with multiple arities: LoanedOutTo/2, LoanedOutTo/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 13
  },
  {
    "id": 175,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Eat(x)",
        "ConsciousAboutHealthAndHabits(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyNutritionalIntake(x)",
        "HasGoodRelationshipWithParent(x, y)",
        "VisitGymAtLeastOnceADay(x)"
      ],
      "fol_consts": [
        "taylor",
        "sam"
      ],
      "fol_rules": [
        "∀x (Eat(x) → ConsciousAboutHealthAndHabits(x))",
        "∀x (GrewUpInHealthConsciousHome(x) → Eat(x))",
        "∀x ((FulfillDailyNutritionalIntake(x)) → GrewUpInHealthConsciousHome(x))",
        "(HasGoodRelationshipWithParent(taylor, sam) ∧ FulfillDailyNutritionalIntake(taylor)) ⊕ ¬(FulfillDailyNutritionalIntake(taylor) ∨ Eat(taylor))",
        " (HasGoodRelationshipWithParent(sam, taylor) → FulfillDailyNutritionalIntake(taylor)) ⊕ ¬(Eat(taylor) ∨ VisitGymAtLeastOnceADay(taylor))",
        "(VisitGymAtLeastOnceADay(x) → ∃y (FulfillDailyNutritionalIntake(y) ∧ HasGoodRelationshipWithParent(sam, y)) ⊕ ¬(Eat(taylor) ∨ FulfillDailyNutritionalIntake(taylor)))",
        "  (¬HasGoodRelationshipWithParent(x, taylor)) ⊕ ¬(Eat(taylor) ∨ FulfillDailyNutritionalIntake(taylor))"
      ],
      "fol_conc": "(¬HasGoodRelationshipWithParent(x, taylor)) ⊕ ¬(VisitGymAtLeastOnceADay(taylor))",
      "perplexity": [
        1.3802436590194702,
        1.1904563903808594
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Conscious(x)",
        "Eats(x, y)",
        "Grewupx(x)"
      ],
      "fol_consts": [
        "taylor",
        "salad",
        "parent",
        "childhoodhome"
      ],
      "fol_rules": [
        "(∀x (Eats(x, salad) → Conscious(x)))",
        "(∀x (∃y ((Grewupx(y)) ∧ Eats(x, salad))))",
        "(∀x ((Fulfills(x) ∧ Grewupx(x))) → (Grewupx(x) ∧ Eats(x, salad)))",
        "(∀x (Goodrelation(parent, x) → Fulfills(x)))",
        "(∀x (Goodrelation(parent, x) → ¬Eats(x, salad)))",
        "(∃y ((Parent(y) ∧ Goodrelation(taylor, y)) ∨ ¬(Grewupchildhoodhome(taylor) ∨ Goodrelation(taylor, parent))))",
        "¬((Grewupchildhoodhome(taylor) ∧ Goodrelation(parent, taylor)) ∨ (Goodrelation(taylor, parent) ∨ Grewupchildhoodhome(taylor)))"
      ],
      "fol_conc": "(∃y ((Parent(y) ∧ Goodrelation(taylor, y)) ∨ ¬(Grewupchildhoodhome(taylor) ∨ Goodrelation(taylor, parent)))) ∨ ∃x (Goodrelation(gym, taylor))",
      "perplexity": 1.8876999616622925,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RegularlyEats salads(x)",
        "HasGoodRelation(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (RegularlyEats salads(x)) → ∀y ((HasGoodRelation(y, x) ∧ Eat(s, h)))",
        "¬(HasGoodRelation(taylor, y)) ∨ RegularlyEats salads(y)",
        "(∃x (GrowsInHealthfulUpbringing(h) ∧ HasGoodRelation(x, taylor)) → ∀z ((Eat(z, taylor))))",
        "RegularlyEats salads(taylor)",
        "¬(HasGoodRelation(y, x)) ∨ RegularlyEats salads(y)",
        "(HasGoodRelation(l) ∧ GrowsInHealthfulUpbringing(h) → (Eat(s, t)))",
        "∀x ((RegularlyEats salads(x)) ⊕ (∃z (((GrowsInHealthfulUpbringing(z) ∨ HasGoodRelation(y, x)))) ∧ Eat(taylor)))",
        "(HasGoodRelation(l) → ∀t (HasGoodRelation(f) ∨ HasGoodRelation(g)))",
        "¬(Eat(x))",
        "∀x (((RegularlyEats salads(e)) ∨ (∃z ((GrowsInHealthfulUpbringing(z)))) ∧ Eat(taylor)))"
      ],
      "fol_conc": "(GrowsInHealthfulUpbringing(h) ⊕ HasGoodRelation(l, taylor))",
      "perplexity": 15.263699531555176,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Eat/1, Eat/2, HasGoodRelation/1, HasGoodRelation/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Eat/1, Eat/2, HasGoodRelation/1, HasGoodRelation/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 14
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "F1Visa(x)",
        "J1Visa(x)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsWork(x) → (NeedsCPT(x) ⊕ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)",
        "WantsWork(mike)"
      ],
      "fol_conc": "J1Visa(mike)",
      "perplexity": [
        1.0409514904022217,
        1.0161923170089722
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Wants(x, y) → (Needs(x, cpt) ∨ Needs(x, opt)))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.2441786527633667,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsToApplyFor(x, z)",
        "WantsToWork(x)",
        "CPT(z)",
        "OPT(z)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, f1) ⊕ HasVisa(x, j1))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsToWork(x) → NeedsToApplyFor(x, c) ∨ NeedsToApplyFor(x, o))"
      ],
      "fol_conc": "HasVisa(mike, j1)",
      "perplexity": 1.2153346538543701,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 15
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "EarthCitizen(x)"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        ",",
        "∀x (FromMars(x) → Alien(x))",
        ", ∀x ¬(Extraterrestrial(x) ∧ Human(x)),  ",
        ", ∀x (EarthCitizen(x) → Human(x)) ",
        ",",
        "¬(FromMars(Marvin) ∧ EarthCitizen(Marvin))",
        ", ¬(EarthCitizen(Marvin) → FromMars(Marvin))"
      ],
      "fol_conc": "¬(Human(Marvin) ∨ FromMars(Marvin))",
      "perplexity": [
        1.9314908981323242,
        1.4980099201202393
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x)) → ∃y (Extraterrestrial(y))",
        "(From(marve, earth) → Alien(marve))",
        "¬(Alien(x) ∧ Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬(From(marvin, earth)) → Alien(marvin)",
        "∃y (Extraterrestrial(y) ∧ ¬From(marvin, y))"
      ],
      "fol_conc": "¬(Human(marve) ∨ From(marve, mars))",
      "perplexity": 1.3244824409484863,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isAlien(x)",
        "fromMars(y)",
        "human(x)",
        "fromMars(x)"
      ],
      "fol_consts": [
        "Marvin",
        "Earth",
        "Mars"
      ],
      "fol_rules": [
        "∀x (isAlien(x) → isAlien(x))",
        "(fromMars(x) ∧ isAlien(x))",
        "¬(isAlien(x) ∧ human(x))",
        "∀x (human(x) → fromMars(x))",
        "¬(fromMars(Marvin) ∧ fromMars(Earth))"
      ],
      "fol_conc": "¬(human(Marvin) ∨ fromMars(Marvin))",
      "perplexity": 1.6519927978515625,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 16
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Importnion",
        "Cnnynt",
        "Everce"
      ],
      "fol_consts": [
        "Ornningaltye], 21.3.7.1",
        "Anneklitee] from the text."
      ],
      "fol_rules": [
        "Extruention",
        "Cnnynt",
        "Everteon,"
      ],
      "fol_conc": "Frozen cion's name is detected. ",
      "perplexity": [
        6.6639018058776855,
        20.017589569091797
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Extruention"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 17
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PersonX"
      ],
      "fol_consts": [
        " Person X"
      ],
      "fol_rules": [],
      "fol_conc": "Person X is a friend of Person X and Person Y. Person X is an apple.",
      "perplexity": [
        2.6581013202667236,
        6.358364105224609
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Person X is a friend of Person X and Person Y. Person X is an apple."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "trimor, rivroed.(n)"
      ],
      "fol_consts": [
        "$n$",
        "$n$"
      ],
      "fol_rules": [
        "trimor, rivroed.($n$, $n$)"
      ],
      "fol_conc": "((∀k ∃x (coutin(i))) ⊕ ¬trimor, rivroed.(o, i))",
      "perplexity": 25.573078155517578,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "trimor, rivroed.($n$, $n$)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 18
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)",
        "HasGlu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "humans",
        "fever",
        "headache",
        "musclePains",
        "tired",
        "coughing"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccursIn(monkeypoxVirus, humans)",
        "OccursIn(monkeypoxVirus, certainAnimals)",
        "Human(humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "Mammal(certainAnimals)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "FeelTired(x) → HasGlu(x)"
      ],
      "fol_conc": "SymptomOf(coughing, monkeypox)",
      "perplexity": [
        1.1452715396881104,
        1.0182801485061646
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(fever, monkeypox)",
        "Symptom(headache, monkeypox)",
        "Symptom(musclepains, monkeypox)",
        "Symptom(tiredness, monkeypox)",
        "Feel(humans, glu)",
        "Feel(humans, tirednes)"
      ],
      "fol_conc": "Symptom(coughing, monkeypox)",
      "perplexity": 1.252568244934082,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(y, x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox virus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypox virus)",
        "OccurIn(monkeypox virus, humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(muscle pains, monkeypox)",
        "SymptomOf(fever, glu)",
        "FeelTired(glu)"
      ],
      "fol_conc": "SymptomOf(c, monkeypox)",
      "perplexity": 1.486334204673767,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 19
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Bv",
        "Cw",
        "Pet",
        "DomestcatedAnimal",
        "Alligators"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Bv(x) → DomestcatedAnimal(x))",
        ",  // All bovines are domesticated animals. ",
        "∃x (Pet(x) ∧ Bv(x))",
        "Some pets are cows.",
        "fol_conc",
        "If Cw(Ted), then ¬ Pet(Ted): If Ted is a cow, then Ted is not a pet."
      ],
      "fol_conc": "If Cw(Ted), then ¬Pet(Ted)",
      "perplexity": [
        2.8385090827941895,
        1.9578423500061035
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  // All bovines are domesticated animals."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)"
      ],
      "fol_consts": [
        "ted",
        "cow",
        "alligator"
      ],
      "fol_rules": [
        "∀x (Bovine(x) → Domesticated(x))",
        "∃x (Pet(x) ∧ Bovine(x))",
        "(Bovine(x) ∧ Domesticated(x)) → ¬Alligator(x)",
        "¬Domesticated(ted)",
        "Ted(alligator)"
      ],
      "fol_conc": "If(bovine, ted) → Not(pet)",
      "perplexity": 1.5994274616241455,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Alligator/1, Alligator/0, Pet/1, Pet/0, Ted/1, Ted/0, Bovine/1, Bovine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Alligator/1, Alligator/0, Pet/1, Pet/0, Ted/1, Ted/0, Bovine/1, Bovine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isBovine(x)",
        "isPet(x)",
        "isDomesticated(x)",
        "isAlligator(x)"
      ],
      "fol_consts": [
        "Ted",
        "cow",
        "pet",
        "bovine"
      ],
      "fol_rules": [
        "∀x (isBovine(x) → isDomesticated(x))",
        "(∃x (isBovine(x) ∧ isPet(x)))",
        "(∃x (isBovine(x) → ¬isAlligator(x)))",
        "∀x (isAlligator(x) → isDomesticated(x))"
      ],
      "fol_conc": "¬(isPet(Ted) ∧ isBovine(Ted))",
      "perplexity": 1.991287350654602,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 20
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "University(y)",
        "Private(x)"
      ],
      "fol_consts": [
        "%Yale%",
        "But I don't know what the constants are. They could be variables or numbers.",
        "%IvyLeague%"
      ],
      "fol_rules": [
        "∃x (yale x ∧ ivyleague(x))",
        " ∀x (ivyleague(y) → university(x))",
        " ∃x (yale x ∧ private(x))",
        "  ∀x (private(y) ∨ ivyleague(x)"
      ],
      "fol_conc": "∃x (University(y) ∧ Private(x))",
      "perplexity": [
        1.7619527578353882,
        4.370296955108643
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (yale x ∧ ivyleague(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(i, x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "endowment"
      ],
      "fol_rules": [
        "(Newhaven(yale)) → (Endowment(yn))",
        "∀x ∃z ((Private(x) ∨ Ivy(i, x)))"
      ],
      "fol_conc": "((Pierson(piersoncollegei) ∧ Residential(zyalesexfordiafrobericolegeoedwardsoniacolligecolleges)) ⊕ (Be(ynewhavenuailex, r)))",
      "perplexity": 16.979520797729492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Endowment(x)",
        "MovedTo(x, y)",
        "Dependent(yaleuniversity, x)"
      ],
      "fol_consts": [
        "yaleuniversity",
        "newhaven",
        "residentialcollegesatyleanycollege",
        "residentialeducationschoolsatyleaniancscolorages",
        "professionalschoolsatsyledianycsschoolsofartsandsciencesschools",
        "benjaminfranklincollege",
        "berkercollage",
        "branfordcollergecollege"
      ],
      "fol_rules": [
        "∀x (Endowment(x) ∨ MovedTo(yaleuniversity, x))",
        "(Dependent(renvilleyaledenistate, yaleuniversity)) ∧ (∀x (MovedTo(renvilleyaledenistate, x))) ⊕ (∃x (Dependent(x, newhaven)))",
        "∀x (Endowment(x) ∨ MovedTo(yaleuniversity, x)) ∧ Dependent(renvilleyaledenistate, yaleuniversity)",
        "(Dependent(newhavensecuritycollegeschoolatyleanycollege, renvilleyaledenistate)) ⊕ (∃x (Dependent(x, newhaven)))",
        "∀x ((MovedTo(renvilleyaledenistate, x) ∨ Dependent(renvilleyaledenistate, yaleuniversity))) ∧ Dependent(newhavensecuritycollegeschoolatyleanycollege)",
        "(Dependent(renvileynedentstate, newhaven)) ⊕ ∃x (Endowment(x) ∨ MovedTo(yaleuniversity, x))"
      ],
      "fol_conc": "∀x ((Dependent(renvilleyaledenistate, yaleuniversity)) ∧ (∀x (MovedTo(renvileynedentstate, x))) ⊕ (∃x (Dependent(x, newhaven))))",
      "perplexity": 2.480698823928833,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dependent/1, Dependent/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Dependent/1, Dependent/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 21
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "breed_back(x, y)",
        "animal(x)",
        "extinct(y)",
        "resembles(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed_back(x, auroch) → extinct(auroch))",
        "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],  ",
        "fol_conc"
      ],
      "fol_conc": "extinct(aurochs)",
      "perplexity": [
        2.5359489917755127,
        3.612553596496582
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x)",
        "Artificial(y)",
        "Animals(x)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "breeding",
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Breedin(x)) → ∃y (Animal(y) ∧ Artificial(y))"
      ],
      "fol_conc": "Aurochs(is)",
      "perplexity": 2.0227158069610596,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "breed-back(x)",
        "animal(x)",
        "resemble(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs",
        "breeding",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed-back(x) → animal(x))",
        "∃x (breed-back(heck cattle) ∧ breed-back(aurochs))",
        "∃y (animal(y) ∧ resemble(heck cattle, y))"
      ],
      "fol_conc": "¬(∃x (resemble(aurochs, x)))",
      "perplexity": 2.7038025856018066,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Breed-back(x)) -> (Animal(x)))\n             ^"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 22
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GRETest(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "HasEconomicHardship(x)",
        "LivesInFamily(x, z)",
        "IsOutOfWork(z)"
      ],
      "fol_consts": [
        "tom",
        "ETS"
      ],
      "fol_rules": [
        "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)",
        "∀x (GRETest(x) ∧ ProvidesFinancialAid(ETS, x) → HasEconomicHardship(x))",
        "∀y (HasEconomicHardship(y) → ∃z ((LivesInFamily(z, y) ∨ ¬ LivesInFamily(z, ETS)) ∧ (IsOutOfWork(z)))",
        "IsOutOfWork(tom's dad)",
        "LivesInFamily(tom's dad, tom)",
        "∀x (HasEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ⇒ HasEconomicHardship(tom) ∴ ∃y ((GRETest(y) ∧ ProvidesFinancialAid(ETS, y)) ∨ GRETest(ets))"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9536328315734863,
        1.1783725023269653
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, z)",
        "Economic(x, y)",
        "Difficult(y)",
        "Lives(x, z)",
        "Father(x, y)",
        "Outofwork(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "us205",
        "year1",
        "singleparentfamily"
      ],
      "fol_rules": [
        "∃x (Costs(x, us205))",
        "(Provides(ets, x) ∧ Economic(x, z) ∧ Difficult(z) → Provides(ets, tom))",
        "∀y ((Economic(y) ⊕ Difficulty(y)) → ∃z (Difficult(z)))",
        "(Lives(tom, singleparentfamily) ∧ Father(tom, y) ∧ Outofwork(y, year1))",
        "(Outofwork(x, year1) → Provides(ets, tom))",
        "∀x ((Provides(ets, x) ∧ Costs(x, us205) → Play(sam, nope)))"
      ],
      "fol_conc": "(Provides(ets, tom) ∧ Costs(tom, us205))",
      "perplexity": 2.1026229858398438,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAid(sx, x)"
      ],
      "fol_consts": [
        "ets",
        "grec"
      ],
      "fol_rules": [
        "$205(x)",
        "(∃y (ProvidesFinancialAid(ets, grc) ∧ ProvidesFinancialAid(greclandhardshipx)))",
        "(¬ProvidesFinancialAid(economicgriardifficulty))",
        "($205(y))"
      ],
      "fol_conc": "(∃y (Costs(ets, grc) ∧ ProvidesFinancialAid(samhardscapitalresourcestom)))",
      "perplexity": 12.56561279296875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 23
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Disease(x)",
        "Infectious(x)",
        "Virus(x)",
        "Cause(x, y)",
        "Animal(x)",
        "Human(x)",
        "Mammal(x)",
        "Symptoms(x, y)",
        "Coughing(x)",
        "Fever(x)",
        "Headache(x)",
        "MusclePain(x)",
        "FeelingTired(x)",
        "Glu(x)",
        "Occur(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox_virus"
      ],
      "fol_rules": [
        "Disease(monkeypox) ∧ Infectious(monkeypox) ∧ ∃v (Virus(v) ∧ Cause(v, monkeypox))",
        "∃a ∃v (Animal(a) ∧ Virus(v) ∧ Cause(v, monkeypox) ∧ (a = human ∨ a ≠ human))",
        "∀h (Human(h))",
        "∀a (Mammal(a) → Animal(a))",
        "∃f (Fever(f) ∧ Symptoms(monkeypox, f)) ⊕ ∃h (Headache(h) ∧ Symptoms(monkeypox, h)) ⊕ ∃m (MusclePain(m) ∧ Symptoms(monkeypox, m)) ⊕ ∃t (FeelingTired(t) ∧ Symptoms(monkeypox, t))",
        "∀p (Glu(p) → ∃x (FeelingTired(x) ∧ x = p))"
      ],
      "fol_conc": "∃s (Coughing(s) ∧ (s = fever ∨ s = headache ∨ s = muscle pain ∨ s = feeling tired))",
      "perplexity": [
        1.2451910972595215,
        1.1040452718734741
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃a ∃v (Animal(a) ∧ Virus(v) ∧ Cause(v, monkeypox) ∧ (a = human ∨ a ≠ human))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Caused(x, y)",
        "Occur(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)",
        "Glu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "Infectious(monkeypox) ∧ Caused(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, human)",
        "Human(human)",
        "Mammal(human)",
        "Animal(human)",
        "∀x (Symptom(monkeypox, x) → (Fever(x) ⊕ Headache(x) ⊕ Muscle(x) ⊕ Tired(x)))",
        "∀x (Glu(x) → Tired(x))"
      ],
      "fol_conc": "Symptom(monkeypox, coughing)",
      "perplexity": 1.2537015676498413,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Disease(x)",
        "Virus(y, x)",
        "OccurIn(y, z)",
        "Mammal(z)",
        "Animal(z)",
        "SymptomOf(x, y)",
        "FeelTiredWhenGetGlu(z)"
      ],
      "fol_consts": [
        "monkeypox",
        "human",
        "coughing",
        "glu",
        "fever",
        "headache",
        "musclepain",
        "tireness",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "Disease(monkeypox)",
        "Virus(monkeypoxvirus, monkeypocx) → OccurIn(monkeypovirrus, human)",
        "Mammal(human)",
        "Animal(mammal)",
        "∀y (SymptomOf(monkeypoxx, y) ⊕ SymptomOf(monkeypox, fever))",
        "∀z (∃w (FeelTiredWhenGetGlu(w) ∧ FeelTiredWhenGetGlu(z))) → ∃x ((Disease(x) ∧ Virus(monkeypovirus, x) ∧ OccurIn(monkepyvrius, human)) → SymptomOf(x, y))",
        "∀y (SymptomOf(monkeypox, headache) ⊕ SymptomOf(monkeypoxx, musclepain))"
      ],
      "fol_conc": "SymptomOf(monkeypox, coughing)",
      "perplexity": 2.0718834400177,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Mammal/1, Mammal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Mammal/1, Mammal/0"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 24
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.054250717163086,
        1.0146929025650024
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ Ceos(harry)",
      "perplexity": 1.1794359683990479,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "∀x (¬Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ CEO(harry)",
      "perplexity": 1.0483012199401855,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 25
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "¬∃x (Bakery(x) ∧ Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "(Spicy(dried_thai_chilies) ∨ Bakery(dried_thai_chilies)) → (Hotpot(dried_thai_chilies) ∨ Spicy(dried_thai_chilies))"
      ],
      "fol_conc": "Hotpot(dried_thai_chilies)",
      "perplexity": [
        1.0406627655029297,
        1.0183966159820557
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthai) ∨ Bakery(driedthai) → (Hotpot(driedthai) ∨ Spicy(driedthai))"
      ],
      "fol_conc": "Hotpot(driedthai)",
      "perplexity": 1.2306299209594727,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "ProductOf(x, y)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "dried thai chilies",
        "baked by melissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "Hotpot(dried thai chilies)",
      "perplexity": 1.1991777420043945,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 26
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)",
        "Person(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x ((Person(x)) → (Studies(x) ⊕ Teaches(x)))",
        "¬∃x (Young(x) ∧ Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": [
        1.1553475856781006,
        1.07990562915802
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x ((Teaches(x) ⊕ Studies(x)))",
        "∀x (Young(x) → ¬Teaches(x))",
        "(Teaches(jerry) ⊕ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.1508289575576782,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "rose",
        "jerry"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.3661795854568481,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 27
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x)",
        "EasternWildTurkey(x)",
        "OsceolaWildTurkey(x)",
        "GouldsWildTurkey(x)",
        "MerriamsWildTurkey(x)",
        "RioGrandeWildTurkey(x)",
        "OcellatedWildTurkey(x)",
        "Tom"
      ],
      "fol_consts": [
        "sam",
        "perfect"
      ],
      "fol_rules": [
        "∃x (EasternWildTurkey(x) → ¬(Tom ⊕ WildTurkey(x)))",
        "Forall y ((OsceolaWildTurkey(y) ∨ GouldsWildTurkey(y) ∨ MerriamsWildTurkey(y) ∨ RioGrandeWildTurkey(y)) → ¬(Tom ⊕ WildTurkey(x))) ",
        "Forall x (GouldsWildTurkey(x) ⊕ MerriamsWildTurkey(x) ⊕ RioGrandeWildTurkey(x)) → ¬(Tom ⊕ WildTurkey(x))",
        "Forall x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x)) → WildTurkey(x)",
        "Forall y ((OsceolaWildTurkey(y) ∨ GouldsWildTurkey(y) ∨ MerriamsWildTurkey(y) ∨ RioGrandeWildTurkey(y)) → Play(sam, y))",
        "Forall y ((Song(y) ∧ ¬Be(y, perfect)) ⊕ (Play(sam, y))) ",
        "Exyst x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))",
        "Forall y ((Song(y)) ∧ ¬Be(y, perfect)) ",
        "Exist x (Play(sam,x) ⊕ ¬(OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))) ",
        "Forall x (Project(x) ∧ WrittenIn(x, rust)) → Dependent(rina)",
        "Exyst y ((Dependent(y)) ∧ (∀z((OsceolaWildTurkey(z) ∨ GouldsWildTurkey(z) ∨ MerriamsWildTurkey(z) ∨ RioGrandeWildTurkey(z)) ⊕ WildTurkey(x)))) "
      ],
      "fol_conc": "Exyst x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))",
      "perplexity": [
        1.9590039253234863,
        1.1492983102798462
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (EasternWildTurkey(x) → ¬(Tom ⊕ WildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wild(x, y)",
        "Eastern(wildturkey, x)",
        "Osceola(wildturkey, x)",
        "Goulds(wildturkey, x)",
        "Merriam(swildturkey, x)",
        "Rio(gradewildturkey, x)",
        "Ocellated(wildturkey, x)",
        "Not(x)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "∃x ∀y (Wild(x, y) → (Eastern(y, tom) ⊕ Osceola(y, tom)) ⊕ Goulds(y, tom) ⊕ Merriam(y, tom) ⊕ Rio(gradey, tom) ⊕ Ocellated(y, tom))",
        "∃x ∀y (Wild(x, y) → Not(easternwildturkeyy, x))",
        "∃x ∀y (Wild(x, y) ∧ Osceolateywildturkeys(x) → ¬Oscelaowildturksey(tom))",
        "∃x ∀y (Wild(x, y) ∧ Gouldswiltdurkeys(x) ∧ Merriamwildturkeys(x) → Not(gouldswiltdurkeystomp))",
        "∃x ∀y (Not(wildedurkeyy, x) ∨ ¬(Oscelaowildturksey(tom)))",
        "Tom(woot)",
        "(¬Dependentoncafey(rina) ∧ Studentriny(x)) → ((Dependentsocialcaffeerrna(x)) ⊕ Dependentofcaffey(rina))",
        "Jokesriny(x) ∨ Unawarenirya(x)"
      ],
      "fol_conc": "Wild(joey, x)",
      "perplexity": 2.507920503616333,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EasternWildTurkey(x)",
        "OsceolaWTurkey(x)",
        "Goulds WTurKEY(y)",
        "Merriams WturKey(z)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "(∃x (EasternWildTurkey(x)) ∧ ∃y (∀z ((OsceolaWTurkey(y) ∨ Goulds WTurKEY(y))) ∨ Merriams WturKey(z)))",
        "(¬EasternWildTurkey(tom))",
        "((Goulds WTurKEY(i) ⊕ OsceolaWTurkey(k)) ∧ ¬(Goulds WTurKEY(m) ∨ Goulds WTurKEY(n)) ∨ (Merriams WturKey(r)))",
        "(∃x (EasternWildTurkey(x) ∨ OsceolaWTurkey(y) ∨ Goulds WTurKEY(z) ⊕ Merriams WturKey(w) ⊕ RioGrandeW TurkeY(v)))",
        "(¬OsceolaWTurkey(k))",
        "(Goulds WTurKEY(l) ∨ OsceolaWTurkey(m))",
        "∀x (EasternWildTurkey(x) → ¬EasternWildTurkey(tom))",
        "(Merriams WturKey(r) ⊕ Goulds WTurKEY(s)) ∨ Merriams WturKey(u)",
        "(¬OsceolaWTurkey(m))",
        "∃x (EasternWildTurkey(x))",
        "((Goulds WTurKEY(l) ∨ OsceolaWTurkey(r)))",
        "(Merriams WturKey(q) ⊕ Goulds WTurKEY(s)) ∨ Merriams WturKey(u)",
        "(∃x (EasternWildTurkey(x)) ∧ EasternWildTurkey(tom))",
        "(Goulds WTurKEY(l))",
        "((Merriams WturKey(r) ⊕ Goulds WTurKEY(s)))",
        "(¬OsceolaWTurkey(m))"
      ],
      "fol_conc": "(∃x (EasternWildTurkey(x)))",
      "perplexity": 7.224533557891846,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 28
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Montana(x)",
        "Has_Cities(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "white sulphur springs",
        "pierre"
      ],
      "fol_rules": [
        "∀x (City(billings) → City(Montana))",
        "∃x (Has_Cities(Butte, x) ∧ Has_Cities(White Sulphur Springs, x))"
      ],
      "fol_conc": "(∀x (City(billings) → City(Montana)) ∧ ∃x (Has_Cities(butte, x) ∧ Has_Cities(white sulphur springs, x)))→ ∃x (Butte and Pierre are in the same state)}",
      "perplexity": [
        2.959338426589966,
        1.1957212686538696
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x (City(billings) → City(Montana)) ∧ ∃x (Has_Cities(butte, x) ∧ Has_Cities(white sulphur springs, x)))→ ∃x (Butte and Pierre are in the same state)}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "State(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "pierre",
        "white"
      ],
      "fol_rules": [
        "∀x (City(x) → In(x, montana))",
        "Montana(x) ∧ City(y) ∧ In(y, montanta) ∧ Is(y, x) → ¬Is(y, pierre)",
        "In(butte, white) ∧ In(white, butte) ∧ State(butte) ∧ ¬State(pierre)"
      ],
      "fol_conc": "Butte(x) ∧ Pierre(x)",
      "perplexity": 1.732763409614563,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Butte/1, Butte/0, Pierre/1, Pierre/0, Montana/1, Montana/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Butte/1, Butte/0, Pierre/1, Pierre/0, Montana/1, Montana/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "in_(x, y)",
        "in_(x)"
      ],
      "fol_consts": [
        "Billings",
        "Montana",
        "Butte",
        "Helena",
        "Missoula",
        "White Sulphur Springs",
        "Pierre"
      ],
      "fol_rules": [
        "∀x (in_(Billings, Montana))",
        "(in_(Butte, Pierre) ∧ in_(Butte, White Sulphur Springs)) → in_(Butte, Pierre)",
        "(¬(in_(Montana, Pierre)))",
        "∀x (in_(x) → in_(White Sulphur Springs, x))"
      ],
      "fol_conc": "in_(Pierre, Montana)",
      "perplexity": 4.1788482666015625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: In_/1, In_/2.\n\n\nFatal error:  The following symbols are used with multiple arities: In_/1, In_/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 29
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(y, z)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiKi"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x ((Dog(x) ∧ Barks(x)) ⊕ ∃y (Animal(y) ∧ Animal(x) ∧ Jumps(y) ∧ Likes(y, z)))",
        "killed"
      ],
      "fol_conc": "∃x (Project(x)∧ WrittenIn(z,rust)",
      "perplexity": [
        2.5882740020751953,
        1.7326254844665527
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "killed"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x, y)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Has(x, y)",
        "Legs(x)"
      ],
      "fol_consts": [
        "ki",
        "jane",
        "dog"
      ],
      "fol_rules": [
        "(∀x (Barks(x, jane) → ¬Like(x, jane)))",
        "(∃y ((Animal(y) ∧ Barks(y)) ⊕ Dog(y)))",
        "(∀x (Jumps(x) → Like(x, jane)))",
        "(∀x (Has(x, legs) → Jumps(x)))",
        "(∀x (Animals(x) → Legs(x)))",
        "((¬(Ki(ki) ∧ Jumps(ki)) ∨ ¬(Ki(ki) ∧ Legs(ki))) ⊕ (∃y ((Terricolous(y) ∧ Ki(ki)) ∨ Legs(ki))))",
        "(∀x (Barks(x, ki) → ¬Like(x, ki)))",
        "((Jumps(ki) ⊕ Has(ki, legs)) ∨ (Ki(ki) ⊕ Legs(ki)))"
      ],
      "fol_conc": "Barks(ki, jane) ⊕ Dog(ki)",
      "perplexity": 1.7400482892990112,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Barks(x, y)",
        "Likes(y, x)",
        "IsDog(x)"
      ],
      "fol_consts": [
        "kiKi",
        "jane"
      ],
      "fol_rules": [
        "(∃y (¬Barks(y)) → ¬Likes(jane, y))",
        "(∀z (∃w (IsDog(w))) ⊕ Barks(z) ∧ IsDog(x))",
        "(∃x ((Likes(kiKi, x) ∨ Barks(kiKi))))",
        "Barks(y)",
        "¬((Likes(jane, y) → ¬Likes(v)) ∨ Likes(b))",
        "IsDog(x)",
        "(∀y (¬(Likes(z))) ⊕ ((Likes(w) ∨ Barks(k))))"
      ],
      "fol_conc": "Barks(y)",
      "perplexity": 18.1115779876709,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Likes/1, Likes/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Likes/1, Likes/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 30
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "WWE(x)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine) ∧ WWE(diamond_mine)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers) ∧ Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(Feud(imperium, x) ∧ Includes(x, ivy_nile))",
      "perplexity": [
        1.0779913663864136,
        1.2281205654144287
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wrestling(x)",
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Lead(roderickstrong, diamondmine)",
        "Stable(diamondmine) ∧ Include(diamondmine, creedbrothers) ∧ Include(diamondmine, ivynile)",
        "Stable(imperium) ∧ Feud(imperium, diamondmine)",
        "Stable(x) → (Include(x, ivynile) → ¬Feud(imperium, x))"
      ],
      "fol_conc": "Stable(x) ∧ Include(x, ivynile) → ¬Feud(imperium, x)",
      "perplexity": 1.256485104560852,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "HasFeud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "Lead(diamond_mine, roderick_strong)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "HasFeud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(HasFeud(imperium, x) ∧ ProfessionalWrestlingStable(x) ∧ Include(x, ivy_nile))",
      "perplexity": 1.2861393690109253,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 31
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorksRegularlyOftenAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyingOrganizingSpacesInHome(x)",
        "VisitStoreRegularly(x, y)",
        "GoesToBedLateAndWakesUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "officeSupply"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x)): All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksRegularlyOftenAtHome(x) → TidyingOrganizingSpacesInHome(x)) : All people who work regularly and often at home spend free time tidying and organizing the spaces in their homes.",
        "VisitStoreRegularly(remy, officeSupply)",
        "∃x ((TidyingOrganizingSpacesInHome(x) → ¬GoesToBedLateAndWakesUpAfterNoon(x))) : If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(∃x (TidyingOrganizingSpacesInHome(remy) ∧ GoesToBedLateAndWakesUpAfterNoon(x))) ⊕ ¬((TidyingOrganizingSpacesInHome(remy)) ∨ (GoesToBedLateAndWakesUpAfterNoon(x))): Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "fol_conc": "VisitStoreRegularly(remy, officeSupply)",
      "perplexity": [
        1.2690494060516357,
        1.0767649412155151
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Works(x, z)",
        "Home(y)",
        "Regularly(x)",
        "Often(x)",
        "Fullystocked(z)",
        "Impressive(w)",
        "Tidy(x)",
        "Organize(x)",
        "Visit(z)",
        "Goeslate(x)",
        "Wakeupafternoon(x)",
        "Remygoeshomeoffice(x)"
      ],
      "fol_consts": [
        "remy",
        "largedesktopmonitor",
        "homeoffice"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Regularly(worksat, home))",
        "∀x (Fullystocked(x) ∧ Impressive(y) → Owns(x, largedesktopmonitor))",
        "∀x (Regularly(w, z) ∨ Often(w, z)) → Tidy(oftenw, x)",
        "∀x (Regularly(workathome, y)) → Visit(z)",
        "∀x (Tidy(x) → ¬Goeslate(y) ∧ Wakeupafternoon(y))",
        "Remygoeshomeoffice(r) → Remybothgoestolateandwakeupafternoontheirhomeorremydoesenottolatesnororganizesherhomeandvisitsstoreoften(r)"
      ],
      "fol_conc": "Regularly(visit, officeupply)",
      "perplexity": 2.593095541000366,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHomeRegularlyAndOften(x)",
        "HomeOffice(x)",
        "TidyOrganizeSpacesInHomeFreeTime(x)",
        "VisitOfficeSupplyStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "(∀x (Own(x, y) → WorkAtHomeRegularlyAndOften(x)))",
        "(∀x (HomeOffice(x) → Own(x, y)))",
        "(∀x ((WorkAtHomeRegularlyAndOften(x) ∧ TidyOrganizeSpacesInHomeFreeTime(x))) ⊕ ¬(TidyOrganizeSpacesInHomeFreeTime(x)))",
        "((∀x (VisitOfficeSupplyStore(x) → WorkAtHomeRegularlyAndOften(x))))",
        "(TidyOrganizeSpacesInHomeFreeTime(y) ∧ ¬WorkAtHomeRegularlyAndOften(x)) ⊕ TidyOrganizeSpacesInHomeFreeTime(z)",
        "((Own(remy, y) → WorkAtHomeRegularlyAndOften(remy)))",
        "(TidyOrganizeSpacesInHomeFreeTime(remy) ∧ ¬WorkAtHomeRegularlyAndOften(y)) ⊕ (¬TidyOrganizeSpacesInHomeFreeTime(z) ∨ VisitOfficeSupplyStore(w))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(r) → WorkAtHomeRegularlyAndOften(remy)",
      "perplexity": 1.8778806924819946,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 32
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(y)",
        "DesignStyleOfZahaHadid(z)",
        "DesignStyleOfKellyWearstler(w)",
        "Evocative(v)",
        "Dreamy(u)",
        "DesignByMax(t)"
      ],
      "fol_consts": [
        "hadid",
        "wearstler",
        "max_design"
      ],
      "fol_rules": [
        "∀x (DesignStyleOfZahaHadid(x) → Timeless(x))",
        "¬∃y (MassProductDesign(y) ∧ Timeless(y))",
        "DesignStyleOfZahaHadid(hadid) ⊕ DesignStyleOfKellyWearstler(wearstler)",
        "∀w (DesignStyleOfKellyWearstler(w) → Evocative(w))",
        "∀u (DesignStyleOfKellyWearstler(u) → Dreamy(u))",
        "DesignByMax(max_design) → (Timeless(max_design) → (MassProductDesign(max_design) ∧ Evocative(max_design)))"
      ],
      "fol_conc": "DesignByMax(t) → (Evocative(t) ⊕ Dreamy(t))",
      "perplexity": [
        1.1864566802978516,
        1.0925570726394653
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x, y)",
        "Timeless(z)",
        "Massproduct(z)",
        "Evocative(z)",
        "Dreamy(z)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x, zaha) → Timeless(x))",
        "∀x (Massproduct(x) → ¬Timeless(x))",
        "(Design(y, zaha) ⊕ Design(z, kelly))",
        "∀x (Design(x, kelly) → Evocative(x))",
        "∀x (Design(x, kelly) → Dreamy(x))",
        "(Timeless(w) ∧ Design(w, max)) → (Massproduct(w) ∧ Evocative(w))"
      ],
      "fol_conc": "(Evocative(v) ⊕ Dreamy(v))",
      "perplexity": 1.3054825067520142,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "DesignStyle(y, x)",
        "MassProduct(z)",
        "Evocative(w)",
        "Dreamy(v)"
      ],
      "fol_consts": [
        "ZahaHadid",
        "KellyWearstler",
        "Max"
      ],
      "fol_rules": [
        "∀y (DesignStyle(y, ZahaHadid) → Timeless(y))",
        "¬(MassProduct(z) ∧ Timeless(z))",
        "(DesignStyle(x, ZahaHadid) ⊕ DesignStyle(x, KellyWearstler))",
        "∀y (DesignStyle(y, KellyWearstler) → Evocative(y))",
        "∀y (DesignStyle(y, KellyWearstler) → Dreamy(y))",
        "(Timeless(u) ∧ DesignStyle(u, Max)) → (MassProduct(u) ∧ Evocative(u))"
      ],
      "fol_conc": "Evocative(Max) ⊕ Dreamy(Max)",
      "perplexity": 1.2268986701965332,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 33
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)",
        "HasGlu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "humans",
        "fever",
        "headache",
        "musclePains",
        "tired",
        "coughing"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccursIn(monkeypoxVirus, humans)",
        "OccursIn(monkeypoxVirus, certainAnimals)",
        "Human(humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "Mammal(certainAnimals)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "FeelTired(x) → HasGlu(x)"
      ],
      "fol_conc": "SymptomOf(coughing, monkeypox)",
      "perplexity": [
        1.1452715396881104,
        1.0182801485061646
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(fever, monkeypox)",
        "Symptom(headache, monkeypox)",
        "Symptom(musclepains, monkeypox)",
        "Symptom(tiredness, monkeypox)",
        "Feel(humans, glu)",
        "Feel(humans, tirednes)"
      ],
      "fol_conc": "Symptom(coughing, monkeypox)",
      "perplexity": 1.252568244934082,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(y, x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox virus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypox virus)",
        "OccurIn(monkeypox virus, humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(muscle pains, monkeypox)",
        "SymptomOf(fever, glu)",
        "FeelTired(glu)"
      ],
      "fol_conc": "SymptomOf(c, monkeypox)",
      "perplexity": 1.486334204673767,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 34
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "∃x (Rina ∧ Drinks(sam, x))",
        "( ∀x ∃y P(x, y) → Drives(y, saml))",
        "]} {",
        "fol_preds: [Dependent(x), Drinks(x), Jokes(x), Unaware(x)],",
        "fol_consts:[rina]",
        "]=",
        "fol_rules: [(∃x Rina ∧ ∀y P( x , y) → Drives(y, sam)), (∀x ∃y Project(y))]",
        "fol_conc':",
        "} {",
        "predicates and constants",
        "- Dependent(x): x is a person dependent on caffeine.",
        "- Drinks(x), Jokes(x), Unaware(x)(existential predicates)",
        "(∈x Rina)- ∀x ∃y P( ( x , y) → Drives(y, sam))",
        "Constants:",
        "- rina: Rina",
        "folding FOL rules",
        "(∀x Drinks(x), Dependent( x ))",
        "(∈x Sam ∧ ∀z Jokes(z))",
        "(sam is either a student and unaware that caffeine is a drug, or neither) ",
        "- ¬ Student(rina) ∨ ¬Unaware ( rina )",
        "(¬ ∃y P(x,y))( Dependent( x ), saml)",
        " Rina: Either a project done using Mac Computer or written in Python",
        ", ∀x ((Use(sam, mac)(Song(y))))  ",
        "fol_preds",
        " fol_consts",
        "fol_rules",
        "fol_conc"
      ],
      "fol_conc": "∃(Project(x) ∧ Drives (y, sam))",
      "perplexity": [
        2.5239131450653076,
        4.93002462387085
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Rina ∧ Drinks(sam, x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Good(x)",
        "Bad(y)",
        "Fights(z)"
      ],
      "fol_consts": [
        "superhero",
        "digby"
      ],
      "fol_rules": [
        "(∃y (Bad(y) ∧ ¬Fighting(digby, y)))",
        "(Superhero(superhero) → ((Good(neighbor) ∨ Bad(nice)) ∧ Fighting(superhero, good)))"
      ],
      "fol_conc": "Digby(nice) ⊕ Digby(fight)",
      "perplexity": 4.25177526473999,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsCharacter(x, y)",
        "IsCharacter(x)",
        "IsCharacter(y)"
      ],
      "fol_consts": [
        "superhero movies",
        "superhero movies",
        "superhero movies"
      ],
      "fol_rules": [
        "∀x (IsCharacter(superhero movies, x)) → IsCharacter(x)",
        "(NamedByMovie(superhero movies, y) ∧ IsCharacter(y))"
      ],
      "fol_conc": "(NamedByMovie(superhero movies, x) ∨ ¬IsCharacter(x))",
      "perplexity": 18.202966690063477,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsCharacter/2, IsCharacter/1.\n\n\nFatal error:  The following symbols are used with multiple arities: IsCharacter/2, IsCharacter/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 35
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "TakesGRE(x)",
        "Costs(x, y)",
        "ProvidesAid(x, y)",
        "ProvesHardship(x)",
        "EconomicHardship(x)",
        "Difficulty(x)",
        "CausedBy(x, y)",
        "TooLittleMoney(x)",
        "TooFewResources(x)",
        "LivesIn(x, y)",
        "SingleParent(y)",
        "OutOfWork(x)",
        "Duration(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "dollars205",
        "dollars300",
        "year"
      ],
      "fol_rules": [
        "Costs(gre, dollars205)",
        "∀x (ProvesHardship(x) → ProvidesAid(ets, x))",
        "∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ CausedBy(Difficulty(x), (TooLittleMoney(x) ⊕ TooFewResources(x)))))",
        "LivesIn(tom, x) ∧ SingleParent(x)",
        "OutOfWork(dad) ∧ Duration(OutOfWork(dad), year)"
      ],
      "fol_conc": "Costs(gre, dollars300)",
      "perplexity": [
        1.1394647359848022,
        1.0214998722076416
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ CausedBy(Difficulty(x), (TooLittleMoney(x) ⊕ TooFewResources(x)))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, y)",
        "Applicant(x)",
        "Proves(x, y)",
        "Economic(x)",
        "Hardship(x)",
        "Difficulty(x, y)",
        "Cause(x, y)",
        "Lives(x, y)",
        "Out(x)",
        "Family(x)",
        "Single(x)",
        "Below(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "205",
        "300"
      ],
      "fol_rules": [
        "Costs(gre, 205)",
        "∀x (Applicant(x) ∧ Proves(x, hardship) → Provides(ets, x))",
        "∀x (Economic(x) ∧ Hardship(x) → Difficulty(x, economic))",
        "∀x (Difficulty(x, y) → Cause(x, y))",
        "Lives(tom, family)",
        "Out(tom)",
        "Family(tom)",
        "Single(tom)"
      ],
      "fol_conc": "Below(205, 300)",
      "perplexity": 1.22151780128479,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAidTo(x, y)",
        "ProvesEconomicHardship(x)",
        "RefersTo(x, y)",
        "LivesIn(x, y)",
        "OutOfWorkForMoreThanAYear(x)"
      ],
      "fol_consts": [
        "gre",
        "ets",
        "tom",
        "economic hardship",
        "gre",
        "tom",
        "economic hardship",
        "gre",
        "ets"
      ],
      "fol_rules": [
        "Costs(gre, u)",
        "∀x (ProvesEconomicHardship(x) → ProvidesFinancialAidTo(ets, x))",
        "RefersTo(economic hardship, economic hardship)",
        "LivesIn(tom, y)",
        "OutOfWorkForMoreThanAYear(z)"
      ],
      "fol_conc": "Costs(gre, v)",
      "perplexity": 1.7938830852508545,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 36
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": [
        1.0449811220169067,
        1.0207343101501465
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": 1.1268501281738281,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) ↔ Rabbit(x) ∨ Animal(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Animal(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": 1.2171229124069214,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 37
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "RobertLewandowski"
      ],
      "fol_rules": [
        "∀x (SoccerPlayer(x) → Striker(x))",
        "], 5  "
      ],
      "fol_conc": " Star(RobertLewandowski)",
      "perplexity": [
        2.667221784591675,
        2.4863502979278564
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "], 5"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski"
      ],
      "fol_rules": [
        "∀x (Striker(x) ∧ Soccerplayer(x))",
        "(Player1(lewandowski) → Left(lewandowski, bayern))",
        "∀x (Left(x, y) ∧ Not(y))"
      ],
      "fol_conc": "Star(lewandowski)",
      "perplexity": 1.9389313459396362,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsAPlayer(x)",
        "LeftTeam(x, y)",
        "IsAS(x, y)",
        "IsAS(y)"
      ],
      "fol_consts": [
        "RobertLewandowski",
        "striker",
        "player",
        "BayernMunchen",
        "star"
      ],
      "fol_rules": [
        "∀x (IsAPlayer(x)) → ∃x (LeftTeam(x, BayernMunchen))",
        "IsAPlayer(RobertLewandowski) → IsAS(RobertLewandowski, striker)",
        "(IsAS(x) → LeftTeam(RobertLewandowski, x))"
      ],
      "fol_conc": "IsAS(RobertLewandowski, star)",
      "perplexity": 2.128493070602417,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsAS/1, IsAS/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsAS/1, IsAS/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 38
  },
  {
    "id": 143,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Some Heck cattle are artificially selected.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "BackBred(x)",
        "SelectiveBreeding(x, y, z)",
        "HeckCattle(x)",
        "Animal(x)",
        "Aurochs(x)",
        "Extinct(x)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∃x (BackBred(x) ∧ ∃y ∃z (SelectiveBreeding(y, z, x)))",
        "HeckCattle(heck)",
        "Aurochs(aurochs)",
        "Animal(heck)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Extinct(x) ∧ SelectiveBreeding(y, x, z))"
      ],
      "fol_conc": "∃x (HeckCattle(x) ∧ BackBred(x))",
      "perplexity": [
        1.3350132703781128,
        1.2688509225845337
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Artificiallyselected(x)",
        "Bredback(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "Bredback(heck) → Artificiallyselected(heck)",
        "Bredback(heck) ∧ Resemble(heck, aurochs)",
        "Animal(heck)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Extinct(x) ∧ Resemble(x, y))"
      ],
      "fol_conc": "∃x (Animal(x) ∧ Bredback(x) ∧ Artificiallyselected(x))",
      "perplexity": 1.3203004598617554,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ArtificialSelection(x)",
        "Backed(x, y)",
        "Resemble(x, y)",
        "Extinct(y)",
        "BreedingOf(x)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BreedingOf(x) → ArtificialSelection(x))",
        "(Backed(heck cattle, aurochs) ∧ BreedingOf(heck cattle))",
        "¬ArtificialSelection(heck cattle)",
        "BreedingOf(aurochs) ⊕ Extinct(aurochs)",
        "BreedingOf(aurochs)"
      ],
      "fol_conc": "∃x (Backed(x, aurochs) ∧ BreedingOf(x) ∧ ArtificialSelection(x))",
      "perplexity": 2.555887222290039,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 39
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exists(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exists(x)  → Turtle(x))",
        ", ∀x (Squirrel(x) ∨ Rabbit(x))",
        "\t Skittish(x) → NotStill(x)",
        "\t All Squirrels are Skittish"
      ],
      "fol_conc": "¬(Turtle(Rock) ∧ Squirrel(Rock)) → (Cute(Rock) ∨ Skittish(Rock))",
      "perplexity": [
        1.6707557439804077,
        1.5952483415603638
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", ∀x (Squirrel(x) ∨ Rabbit(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Existential(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Existential(x))",
        "Animal(x) ∧ Rabbit(x) ∨ Squirrel(x)",
        "(Skittish(x) → ¬Still(x))",
        "All(x) ∧ All(squirrels) → Skittish(squirrels)"
      ],
      "fol_conc": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ∨ Skittish(rock))",
      "perplexity": 1.2520520687103271,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cute(x)",
        "ExistentialProperty(x, y)",
        "IsA(x, y)",
        "Skittish(x)",
        "Skittish(y)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Cute(x) ∧ IsA(x, rabbit))",
        "∃x (ExistentialProperty(x, turtle))",
        "IsA(x, y) ∨ IsA(y, x)",
        "(Skittish(x) → ¬IsA(x, squirrel))",
        "∀x (Skittish(x) ∧ IsA(x, squirrel) → IsA(x, rabbit))",
        "¬Skittish(Rock)"
      ],
      "fol_conc": "¬(ExistentialProperty(Rock, turtle) ∧ Skittish(Rock) ∨ (IsA(Rock, rabbit)))",
      "perplexity": 1.8664019107818604,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 40
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x, y)",
        "IsEasternWildTurkey(x)",
        "IsOsceolaWildTurkey(x)",
        "IsGouldsWildTurkey(x)",
        "IsMerriamsWildTurkey(x)",
        "IsRioGrandeWildTurkey(x)",
        "IsOcellatedWildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (∀y ((IsEasternWildTurkey(y) ∨ IsOsceolaWildTurkey(y)) ⊕ ∀z ((IsGouldsWildTurkey(z) ∨ IsMerriamsWildTurkey(z) ∨ IsRioGrandeWildTurkey(z))) ∨ WildTurkey(x, y)) ∧ ¬IsEasternWildTurkey(x) ∧ ¬IsOsceolaWildTurkey(x))",
        "∃x (WildTurkey(x, tom))",
        " ∀y (WildTurkey(y, tom) → (∀z ((IsGouldsWildTurkey(z) ⊕ IsMerriamsWildTurkey(z)) ∨ IsRioGrandeWildTurkey(z))) → ¬(IsEasternWildTurkey(tom) ∨ IsOsceolaWildTurkey(tom) ∨ IsGouldsWildTurkey(tom) ∨ IsMerriamsWildTurkey(tom) ∨ IsRioGrandeWildTurkey(tom)))",
        " ∀y (IsOcellatedWildTurkey(y) ∧ WildTurkey(x, y)) → ¬(IsEasternWildTurkey(x) ∨ IsOsceolaWildTurkey(x) ∨ IsGouldsWildTurkey(x) ∨ IsMerriamsWildTurkey(x) ∨ IsRioGrandeWildTurkey(x)))",
        " ∀x (¬DependentOnCaffeine(x) ∧ Student(x)) → DependentOnCaffeine(x) ∨ ¬Student(x)"
      ],
      "fol_conc": "IsOcellatedWildTurkey(tom)",
      "perplexity": [
        1.4175622463226318,
        1.13594651222229
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y (IsOcellatedWildTurkey(y) ∧ WildTurkey(x, y)) → ¬(IsEasternWildTurkey(x) ∨ IsOsceolaWildTurkey(x) ∨ IsGouldsWildTurkey(x) ∨ IsMerriamsWildTurkey(x) ∨ IsRioGrandeWildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wild(x, y)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriam(s)",
        "Rio(a)",
        "Ocellated(x)",
        "Not(x, x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (¬(Eastern(x)) ∧ Osceola(x))",
        "∀y ((Goulds(y)) ∨ (Merriam(y)) ∨ (Rio(a))) → ¬(Osceola(x) ∧ Goulds(x) ∧ Merriam(x) ∧ Rio(a))",
        "(∃x (Wild(x, wildturkey) ∧ Not(tom) ∧ Eastern(x)))",
        "¬(Eastern(tom))",
        "(¬Goulds(tom)) ∨ (¬Merriam(tom)) ∨ ¬(Rio(a))",
        "∀y ((Wild(y, turkeys) ∧ Tom(y)) → Ocellated(x))"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 2.3226699829101562,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsWildTurkey(x, y)",
        "Easternwildturkey(y)",
        "Osceolawild turkey(y)",
        "Gouldswil-dturtle(y)",
        "Merriam's wild tur-key(t)",
        "Gouldswil-dturtle(r)"
      ],
      "fol_consts": [
        "tom",
        "occellated"
      ],
      "fol_rules": [
        "(∃x (IsWildTurkey(x, occellated)))",
        "(¬Easternwildturkey(occellated)) ∧ ¬Osceolawild turkey(occellated) ∧ (∀y ((Gouldswil-dturtle(y) ⊕ Merriam's wild tur-key(t)) ⊕ Gouldswil-dturtle(r)))",
        "(∃x (IsWildTurkey(x, tom)))",
        "(¬Osceolawild turkey(occellated))"
      ],
      "fol_conc": "Osceolawild turkey(occellated)",
      "perplexity": 8.548651695251465,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\n((not Easternwildturkey(Occellated)) & (not OsceolawildTurkey(Occellated))) & (all y.(((((Gouldswil-dturtle(y)) & not (MerriamsWildTur-key(t))) | (not (Gouldswil-dturtle(y)) & (MerriamsWildTur-key(t)))) & not (Gouldswil-dturtle(r))) | (not (((Gouldswil-dturtle(y)) & not (MerriamsWildTur-key(t))) | (not (Gouldswil-dturtle(y)) & (MerriamsWildTur-key(t)))) & (Gouldswil-dturtle(r)))))\n                                                                                                   ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 41
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ContainsKnowledge(x, y)",
        "GainsKnowledge(person, book)",
        "Reads(person, book)",
        "BecomesSmarter(person)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau"
      ],
      "fol_rules": [
        "∀x ContainsKnowledge(x, walden)",
        "GainsKnowledge(harry, walden): Harry gains knowledge by reading 'Walden'",
        "(Reads(person, book) → GainsKnowledge(person, book)): When a person reads a book, that person gains knowledge.",
        "(GainsKnowledge(person, book) → BecomesSmarter(person))"
      ],
      "fol_conc": "∃person ((Reads(harry, walden) ∧ (GainsKnowledge(harry))) ⊕ (BecomesSmarter(harry))) : Harry read the book ‘Walden’ by Henry Thoreau.",
      "perplexity": [
        1.4442538022994995,
        1.3519766330718994
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GainsKnowledge(harry, walden): Harry gains knowledge by reading 'Walden'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, z)",
        "Knowledge(y, x)",
        "Smarter(z)",
        "Book(walden)",
        "Author(hthoreau)"
      ],
      "fol_consts": [
        "harry",
        "walden"
      ],
      "fol_rules": [
        "∀x (Books(x) ∧ Contains(x, y))",
        "∀z (Read(harry, z) → Knowledge(z, harry))",
        "Knowledge(y, x) → Smarter(x)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 2.615781784057617,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, z)",
        "GainsKnowledge(x)",
        "BecomesSmarter(x)",
        "Contains(y)"
      ],
      "fol_consts": [
        "harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x ∀y (Contains(x, y) → Contains(z))",
        "∀x (Reads(x, Walden) → GainsKnowledge(harry))",
        "∀x (GainsKnowledge(x) → BecomesSmarter(y))"
      ],
      "fol_conc": "BecomesSmarter(harry)",
      "perplexity": 1.7319371700286865,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Contains/1, Contains/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Contains/1, Contains/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 42
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Location(x, y)",
        "NamedBy(x, y)",
        "Island_Part(y)",
        "Coast(x, y)"
      ],
      "fol_consts": [
        "Barutin Cove",
        "Snow Island",
        "Greenwich Island",
        "Deception Island",
        "Barutin",
        "South Shetland Islands"
      ],
      "fol_rules": [
        "∀x (Location(Barutin Cove, Snow Island) ∧ Location(Barutin Cove, Greenwich Island) ∧ Location(Barutin Cove, Deception Island)) → NamedBy(Barutin Cove, South Shetland Islands)",
        "∀x (Island_Part(Snow Island) ∨ Island_Part(Greenwich Island) ∨ Island_Part(Deception Island)) → Island_Part(South Shetland Islands)",
        ""
      ],
      "fol_conc": "∃x (NamedBy(Barutin, x) → x = Barutin Cove)",
      "perplexity": [
        1.657301425933838,
        1.0794004201889038
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (NamedBy(Barutin, x) → x = Barutin Cove)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Located(x, y)",
        "Named(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "snowisland",
        "southsheltariislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "∀x ∀y (Located(x, y) → Located(y, x))",
        "(Southsheltariislands(x) ∧ Snowisland(x) ∧ Greenwichisland(x)) ∧ Deceptionisland(x) → (Alocated(x, southsheltariislands))"
      ],
      "fol_conc": "All(x) → Named(barutin, x)",
      "perplexity": 1.952756404876709,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LocatedIn(x, y)",
        "NamedBy(x, y)"
      ],
      "fol_consts": [
        "Barutin Cove",
        "Snow Island",
        "Greenwich Island",
        "Deception Island",
        "South Shetland Islands",
        "Antarctica",
        "Barutin Cove"
      ],
      "fol_rules": [
        "∀x ∀y (LocatedIn(x, y)) → (LocatedIn(y, x))",
        "∃x (NamedBy(x, Barutin Cove) ∧ NamedBy(Barutin Cove, Snow Island))",
        "∃x (LocatedIn(x, South Shetland Islands) ∧ LocatedIn(South Shetland Islands, Antarctica))"
      ],
      "fol_conc": "∀x (NamedBy(x, Antarctica))",
      "perplexity": 1.5616326332092285,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 43
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "Harry"
      ],
      "fol_rules": [
        "\t∀x (Evil(x) → Ugly(x))",
        "\t∀x (Gentleman(x) → Handsome(x))",
        "\t((Kind(Harry)) ∨ (CEO(Harry)))"
      ],
      "fol_conc": "Harry is Kind OR Harry is a CEO",
      "perplexity": [
        1.5061088800430298,
        1.1343355178833008
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Harry is Kind OR Harry is a CEO"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "harry",
        "ceo"
      ],
      "fol_rules": [
        "∀x (Kind(x) ∨ Evil(x))",
        "(¬Ugly(x) → Handsome(x))",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "(Is(x, ceo) → Gentleman(x))",
        "Gentleman(harry)",
        "Kind(x) ∨ Is(x, ceo)"
      ],
      "fol_conc": "Kind(harry) ∨ Is(harry, ceo)",
      "perplexity": 1.3779146671295166,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)"
      ],
      "fol_consts": [
        "Harry",
        "Harry",
        "Harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ∨ Evil(x))",
        "¬Ugly(x) → Handsome(x)",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "CEO(x) → Gentleman(x)",
        "Kind(Harry) ∨ CEO(Harry)"
      ],
      "fol_conc": "Kind(Harry) ∨ CEO(Harry)",
      "perplexity": 2.056201457977295,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 44
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Doryof the Denomonyeerrytysn",
        "Noodieeiee, daketyee",
        "Yedieaueerrytssin",
        "Douboousneerryttsn"
      ],
      "fol_consts": [
        "Noodieaueerrytns, darlikenny",
        "Ideye eceetonnoysn"
      ],
      "fol_rules": [
        "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns",
        "Culntroydritz"
      ],
      "fol_conc": "/{1. Defor's ougnetonnyeen} + 'couleysnee' to my yere, but noodieeeiesye ikektionkaueerrytssinnoisnt",
      "perplexity": [
        4.177491188049316,
        13.761141777038574
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Diamond Miln(x)",
        "Diamond Miln(y)"
      ],
      "fol_consts": [
        "diamokeeion",
        "damsontourein"
      ],
      "fol_rules": [
        "(Diamond Miln(a)) ∧ (Diamond Miln(i) → Diamond Miln(o143y025ks6f7luezryexcawemnyt, jalleanizeinceimng))"
      ],
      "fol_conc": "Diamond Miln(a) ∧ Diamond Miln(i) → (Diamond Miln(s1eerlizkstorreit, jalneinteiskauef7mynusnt))",
      "perplexity": 22.900686264038086,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMiln/2, DiamondMiln/1.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMiln/2, DiamondMiln/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 45
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "KnownAs(x, y)",
        "BornIn(x, year)",
        "FootballPlayer(x)",
        "LoanedOutToClub(x, club)"
      ],
      "fol_consts": [
        "ailton",
        "1995",
        "braga",
        "nautico"
      ],
      "fol_rules": [
        "∀x, y (KnownAs(x, y) → BornIn(x, 1995))",
        "KnownAs(ailton, 'Ailton')",
        "FootballPlayer(ailton)",
        "LoanedOutToClub(ailton, braga)"
      ],
      "fol_conc": "¬∃club (LoanedOutToClub(ailton, club))",
      "perplexity": [
        1.805975317955017,
        1.0629603862762451
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (KnownAs(x, y) → BornIn(x, 1995))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Knownas(x, z)",
        "Player(x)",
        "Loanedoutto(x, y)",
        "Brazillian(x)",
        "Footballclub(x)",
        "Playsfor(x)",
        "Clubof(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∀x (Born(x, xtime)) → Knownas(x, ailton)",
        "Loanedoutto(ailton, braga) ∧ Player(ailton) → Footballclub(braga)",
        "Footballclub(nautico)",
        "Playsfor(ailton, nautico)"
      ],
      "fol_conc": "¬(Player(x))",
      "perplexity": 2.2763373851776123,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "KnownAs(x)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazillian(y)",
        "FootballClub(z)"
      ],
      "fol_consts": [
        "ailton",
        "1995"
      ],
      "fol_rules": [
        "(∀x (BornIn(ailton, 1995)))",
        "(∃y ((KnownAs(x) ∧ FootballPlayer(x)) ∧ LoanedOutTo(x, y)))",
        "(FootballClub(braga))",
        "(∃z ((Brazillian(z) ∧ FootballClub(nautico)) ∨ FootballClub(braga)))"
      ],
      "fol_conc": "¬LoanedOutTo(ailton)",
      "perplexity": 2.0865602493286133,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LoanedOutTo/2, LoanedOutTo/1.\n\n\nFatal error:  The following symbols are used with multiple arities: LoanedOutTo/2, LoanedOutTo/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 46
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.0469894409179688,
        1.0243240594863892
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "∀x (¬(Ugly(x) ∧ Handsome(x)))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ Ceos(harry)",
      "perplexity": 1.2332758903503418,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Kind(harry) ∨ CEO(harry))",
      "perplexity": 1.0347031354904175,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 47
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Location(x, y)",
        "NamedBy(x, y)",
        "Island_Part(y)",
        "Coast(x, y)"
      ],
      "fol_consts": [
        "Barutin Cove",
        "Snow Island",
        "Greenwich Island",
        "Deception Island",
        "Barutin",
        "South Shetland Islands"
      ],
      "fol_rules": [
        "∀x (Location(Barutin Cove, Snow Island) ∧ Location(Barutin Cove, Greenwich Island) ∧ Location(Barutin Cove, Deception Island)) → NamedBy(Barutin Cove, South Shetland Islands)",
        "∀x (Island_Part(Snow Island) ∨ Island_Part(Greenwich Island) ∨ Island_Part(Deception Island)) → Island_Part(South Shetland Islands)",
        ""
      ],
      "fol_conc": "∃x (NamedBy(Barutin, x) → x = Barutin Cove)",
      "perplexity": [
        1.657301425933838,
        1.0794004201889038
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (NamedBy(Barutin, x) → x = Barutin Cove)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Located(x, y)",
        "Named(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "snowisland",
        "southsheltariislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "∀x ∀y (Located(x, y) → Located(y, x))",
        "(Southsheltariislands(x) ∧ Snowisland(x) ∧ Greenwichisland(x)) ∧ Deceptionisland(x) → (Alocated(x, southsheltariislands))"
      ],
      "fol_conc": "All(x) → Named(barutin, x)",
      "perplexity": 1.952756404876709,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LocatedIn(x, y)",
        "NamedBy(x, y)"
      ],
      "fol_consts": [
        "Barutin Cove",
        "Snow Island",
        "Greenwich Island",
        "Deception Island",
        "South Shetland Islands",
        "Antarctica",
        "Barutin Cove"
      ],
      "fol_rules": [
        "∀x ∀y (LocatedIn(x, y)) → (LocatedIn(y, x))",
        "∃x (NamedBy(x, Barutin Cove) ∧ NamedBy(Barutin Cove, Snow Island))",
        "∃x (LocatedIn(x, South Shetland Islands) ∧ LocatedIn(South Shetland Islands, Antarctica))"
      ],
      "fol_conc": "∀x (NamedBy(x, Antarctica))",
      "perplexity": 1.5616326332092285,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 48
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)",
        "Person(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x ((Person(x)) → (Studies(x) ⊕ Teaches(x)))",
        "¬∃x (Young(x) ∧ Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": [
        1.1553475856781006,
        1.07990562915802
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x ((Teaches(x) ⊕ Studies(x)))",
        "∀x (Young(x) → ¬Teaches(x))",
        "(Teaches(jerry) ⊕ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.1508289575576782,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "rose",
        "jerry"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.3661795854568481,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 49
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "InState(y, z)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "∀x (City(x) → ¬InState(billings, montana))",
        "∀y (City(y) → InState(butte, y) ⊕ InState(missoula, y) ⊕ InState(helena, y))",
        "City(x) → ¬InState(billings, x)",
        "∀z (InState(pierre, z))"
      ],
      "fol_conc": "InState(helena, montana)",
      "perplexity": [
        1.5960510969161987,
        1.155189871788025
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "State(y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre",
        "bismarck"
      ],
      "fol_rules": [
        "City(billings)",
        "In(billings, montana) ∧ In(butte, montana) ∧ In(helena, montana) ∧ In(missoula, montana)",
        "State(y) → (∃x ((City(x)) ∧ In(x, y)))",
        "(State(y1) ∧ State(y2)) ⊕ (In(a, y1) ∨ In(b, y2))",
        "In(white, butte)",
        "¬In(pierre, montana)",
        "(∃x ((City(x)) → ¬In(x, pierre)))"
      ],
      "fol_conc": "State(y1) ∧ State(y2)",
      "perplexity": 1.9194307327270508,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CityInState(x, y)",
        "CityInState(x)",
        "NotInState(y)",
        "CityInState(z)",
        "NotInState(u)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "whitesulphursprings"
      ],
      "fol_rules": [
        "CityInState(billings, montana)",
        "∀x (CityInState(x) ∧ CityInState(y)) → (CityInState(butte) ∨ CityInState(helena) ∨ CityInState(missoula))",
        "CityInState(whitesulphursprings)",
        "NotInState(pierre, montana)",
        "NotInState(x)"
      ],
      "fol_conc": "CityInState(pierre, state)",
      "perplexity": 2.090029716491699,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NotInState/1, NotInState/2, CityInState/1, CityInState/2.\n\n\nFatal error:  The following symbols are used with multiple arities: NotInState/1, NotInState/2, CityInState/1, CityInState/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 50
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(y)",
        "HasAccessToProgram()",
        "CanCompose(x)"
      ],
      "fol_consts": [
        "george",
        "music"
      ],
      "fol_rules": [
        "∀x (Likes(george, music) → WantsToCompose(music))",
        "HasAccessToProgram() → CanCompose()",
        "(WantsToCompose(x) ∧ CanCompose()) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose()",
      "perplexity": [
        1.5744704008102417,
        1.0809179544448853
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "HasAccessToProgram() → CanCompose()"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x, y)",
        "Wants(y, z)",
        "Has(x, y)",
        "Can(z)",
        "Compose(w)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Music(x) → Wants(george, compose))",
        "∀y ((Program(y) ∧ Has(george, y))) → Can(compose)",
        "(Can(compose) ∧ Wants(compose)) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(compose)",
      "perplexity": 1.6768630743026733,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Compose/1, Compose/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Compose/1, Compose/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(y)",
        "HasAccessToProgram(z)",
        "CanCompose(x)",
        "WillCompose(y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(george, x) → WantsToCompose(x))",
        "∀y (HasAccessToProgram(y) ∧ CanCompose(george) → WillCompose(george))",
        "∀z ((WantsToCompose(z) ∧ CanCompose(z)) → WillCompose(z))"
      ],
      "fol_conc": "¬WillCompose(x) → ¬CanCompose(george)",
      "perplexity": 1.3746250867843628,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 51
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(y)"
      ],
      "fol_consts": [
        "zahadid",
        "max"
      ],
      "fol_rules": [
        "∀x (Timelssess(x) ∧ !MassProductDesign(x)) ∨ (∃y (Evocative(Perfect))), ∀x∈{max}(Max is a mass product design of x and Evocative(Max)), ∃x Timeless(x)",
        "fol_conc",
        "Timeless(zahadid) ∨ Evocative(max)"
      ],
      "fol_conc": "A design by Max is evocative and dreamy.",
      "perplexity": [
        2.7707319259643555,
        2.632500171661377
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Timelssess(x) ∧ !MassProductDesign(x)) ∨ (∃y (Evocative(Perfect))), ∀x∈{max}(Max is a mass product design of x and Evocative(Max)), ∃x Timeless(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Zaha(x)",
        "Kelly(y)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "(∀x ∀y (Design(x, y) → ¬Mass(x)))",
        "(¬(Max(rina)) ∧ Max(kellywearstler)) ∨ ((Zaha(rina) ∨ Kelly(wearstler)) ∧ Evocative(zaha, kelly))"
      ],
      "fol_conc": "Evocative(zaha, max)",
      "perplexity": 3.907809019088745,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hasMassProductDesign(x)",
        "isTimeless(x)"
      ],
      "fol_consts": [
        "max",
        "kellywearstler",
        "zahaihadid"
      ],
      "fol_rules": [
        "∀x (hasMassProductDesign(x) → ¬(isTimeless(x) ∨ isTimeless(kellywearstler)))"
      ],
      "fol_conc": "¬(hasMassProductDesign(max)) ∧ hasMassProductDesign(zahaihadid)",
      "perplexity": 2.9786500930786133,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 52
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Event(x)",
        "LastEvent(y, z)"
      ],
      "fol_consts": [
        "united_states",
        "tokyo"
      ],
      "fol_rules": [
        "∀x (SportingEvent(x)) → ∃y (LastEvent(z))",
        "LastEvent(tokyo)",
        "∀x ((∀z) MostMedals(x, z) ∧ Event(y, x)) → (MostMedals(united_states))"
      ],
      "fol_conc": "MostMedals(united_states) ∧ Event(tokyo)",
      "perplexity": [
        2.4876656532287598,
        1.1065922975540161
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((∀z) MostMedals(x, z) ∧ Event(y, x)) → (MostMedals(united_states))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(x, y)",
        "Most(x, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo"
      ],
      "fol_rules": [
        "∀x (Olympicgames(x) → Sporting(olympicgames))",
        "Tokyo(x)",
        "Unitedstates(z)",
        "Last(tokyo, olympicgames)",
        "Most(medals, unitedstates)"
      ],
      "fol_conc": "Most(medals, unitedstates)",
      "perplexity": 2.5915603637695312,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "LastOlympicGames(y)",
        "WonMostMedals(z, w)"
      ],
      "fol_consts": [
        "tokyo",
        "olympic_games",
        "olympic_games"
      ],
      "fol_rules": [
        "∃y (SportingEvent(olympic_games) ∧ LastOlympicGames(tokyo))",
        "(WonMostMedals(z, w) ∧ SportingEvent(y) ∧ LastOlympicGames(x)) → WonMostMedals(w, x)"
      ],
      "fol_conc": "∃x (LastOlympicGames(olympic_games) ∧ WonMostMedals(tokyo, olympic_games))",
      "perplexity": 2.0801146030426025,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 53
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wings(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) → Monkey(x)) ⊕ (Animal(x) → Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wings(x))",
        "((¬Fly(Rock) ∧ ¬Bird(Rock)) → (¬Fly(Rock) ∧ ¬Breathe(Rock)))"
      ],
      "fol_conc": "Wings(Rock)",
      "perplexity": [
        1.0702742338180542,
        1.0497606992721558
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) ∧ ¬Bird(x)) → Monkey(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "(¬Fly(rock) ∧ ¬Bird(rock)) → ((¬Fly(rock) ∨ ¬Breathe(rock)))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.206965446472168,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Bird(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock",
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Bird(x))",
        "∀x (Fly(x) → HasWings(x))"
      ],
      "fol_conc": "(¬Bird(rock) ⊕ ¬Fly(rock)) → (HasWings(rock))",
      "perplexity": 1.6487127542495728,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 54
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "LovesAnimals(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (LovesAnimals(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → LovesAnimals(x))"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.1172765493392944,
        1.046775460243225
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x, y)",
        "Animal(y)",
        "Lover(x)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x) → ¬(Mean(x, y)))",
        "∃x (Grumpy(x) → Mean(x, y))",
        "∀x (Lover(x) → Nice(x))",
        "∀x (Owns(x, y) → Lover(y))"
      ],
      "fol_conc": "(¬(Grumpy(tom) ∧ ¬Mean(tom, tom)))",
      "perplexity": 1.465647578239441,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "LoveAnimals(x)",
        "OwnPet(x)",
        "NiceToAnimals(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬(MeanToAnimals(x)))",
        "∃x (MeanToAnimals(x) ∧ ¬(NiceToAnimals(x)))",
        "∀x (LoveAnimals(x) → NiceToAnimals(x))",
        "∀x ((OwnPet(x) → LoveAnimals(x)))",
        "OwnPet(tom)"
      ],
      "fol_conc": "(¬MeanToAnimals(tom)) ∧ ¬(NiceToAnimals(tom))",
      "perplexity": 3.6626734733581543,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 55
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "StreamingService(1984) → HardcoverBook(1984)"
      ],
      "fol_conc": "StreamingService(1984): 1984 is a streaming service.",
      "perplexity": [
        1.098854422569275,
        1.1216514110565186
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "StreamingService(1984): 1984 is a streaming service."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "nineteeneightyfour",
        "streamingservice"
      ],
      "fol_rules": [
        "¬(∃x (Digital(x))) ∧ Analog(x)",
        "(Printed(x)) → Analog(x)",
        "(Streaming(x) → Digital(x))"
      ],
      "fol_conc": "Streaming(nineteeneightyfour)",
      "perplexity": 1.8831857442855835,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬(Digital(x) → Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "(StreamingService(1984) → HardcoverBook(1984))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": 1.1392617225646973,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 56
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "LovesAnimals(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (LovesAnimals(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → LovesAnimals(x))"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.1172765493392944,
        1.046775460243225
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x, y)",
        "Animal(y)",
        "Lover(x)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x) → ¬(Mean(x, y)))",
        "∃x (Grumpy(x) → Mean(x, y))",
        "∀x (Lover(x) → Nice(x))",
        "∀x (Owns(x, y) → Lover(y))"
      ],
      "fol_conc": "(¬(Grumpy(tom) ∧ ¬Mean(tom, tom)))",
      "perplexity": 1.465647578239441,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "LoveAnimals(x)",
        "OwnPet(x)",
        "NiceToAnimals(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬(MeanToAnimals(x)))",
        "∃x (MeanToAnimals(x) ∧ ¬(NiceToAnimals(x)))",
        "∀x (LoveAnimals(x) → NiceToAnimals(x))",
        "∀x ((OwnPet(x) → LoveAnimals(x)))",
        "OwnPet(tom)"
      ],
      "fol_conc": "(¬MeanToAnimals(tom)) ∧ ¬(NiceToAnimals(tom))",
      "perplexity": 3.6626734733581543,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 57
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousCapital(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "HostedParalympics(x, y)",
        "LargestCity(x, y)",
        "University(x)",
        "TopRanked(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "asiaPacific"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulousCapital(beijing)",
        "LocatedIn(beijing, china)",
        "HostedOlympics(beijing, summer)",
        "HostedParalympics(beijing, summer)",
        "∀x (HostedOlympics(x, summer) ∧ HostedParalympics(x, summer) → HostedOlympics(x, winter) ∧ HostedParalympics(x, winter))",
        "∃x (University(x) ∧ LocatedIn(x, china) ∧ TopRanked(x))"
      ],
      "fol_conc": "LargestCity(beijing, china)",
      "perplexity": [
        1.0924162864685059,
        1.0156699419021606
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Most(x, y)",
        "Located(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Largest(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics",
        "paralympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Most(beijing, city)",
        "Located(beijing, china)",
        "Hosted(beijing, olympics)",
        "Hosted(beijing, paralympics)",
        "∃x (University(x) ∧ Located(x, beijing))",
        "∃x (University(x) ∧ Located(x, beijing))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2643002271652222,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, z)",
        "RankedAmongBestUniversities(x)",
        "LocatedIn(y, x)",
        "LocatedIn(z, w)",
        "LocatedIn(a, b)"
      ],
      "fol_consts": [
        "beijing",
        "people's republic of china",
        "asia-pacific",
        "world",
        "2008 summer olympics",
        "2008 summer paralympics games",
        "2008 summer olympics",
        "2008 summer paralympics games"
      ],
      "fol_rules": [
        "CapitalOf(beijing, people's republic of china)",
        "MostPopulousNationalCapitalCity(beijing)",
        "LocatedIn(beijing, northern china)",
        "HostedOlympics(beijing, 2008 summer olympics)",
        "HostedOlympics(beijing, 2008 summer paralympics games)",
        "∃x (RankedAmongBestUniversities(x) ∧ LocatedIn(x, beijing))",
        "LocatedIn(northern china, people's republic of china)"
      ],
      "fol_conc": "LocatedIn(beijing, z)",
      "perplexity": 2.3549418449401855,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 58
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "Striker(x)",
        "SoccerPlayer(x)"
      ],
      "fol_consts": [
        "robert_lewandowski"
      ],
      "fol_rules": [
        "∃x (Player(x) → Striker(x))",
        "],  # Simplified to reflect the relationship. The simplified rule is a direct inference from NL statements, without the need for complex quantifiers or explicit conditional logic.  ],   ",
        "fol_conc",
        "SoccerPlayer(robert_lewandowski)'} "
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": [
        2.5062079429626465,
        5.398693561553955
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  # Simplified to reflect the relationship. The simplified rule is a direct inference from NL statements, without the need for complex quantifiers or explicit conditional logic.  ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Striker(x)",
        "Soccerplayer(x)"
      ],
      "fol_consts": [
        "robertlewandowski",
        "bayernmunchen"
      ],
      "fol_rules": [
        "∀x (Player(x) → Soccerplayer(x))",
        "∃x (Striker(x) ∧ Player(x))",
        "Forall(x) → ¬(Leavingteam(x) ∧ Notleavingteam(x))",
        "Robertlewandowski(x) ∧ Leavingteam(x)",
        "¬Leavingteam(x)"
      ],
      "fol_conc": "Soccerplayer(robertlewandowski)",
      "perplexity": 2.223888635635376,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Robertlewandowski/1, Robertlewandowski/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Robertlewandowski/1, Robertlewandowski/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isA(x)",
        "playsFor(x, y)",
        "left(x, y)"
      ],
      "fol_consts": [
        "Robert Lewandowski",
        "striker",
        "soccer player",
        "Bayern Munchen"
      ],
      "fol_rules": [
        "∀x (isA(x) ∧ playsFor(x, Bayern Munchen)) → left(x, Bayern Munchen)",
        "(left(x, y) → isA(x))",
        "∃y (playsFor(Robert Lewandowski, y) ∧ isA(y))"
      ],
      "fol_conc": "isA(Robert Lewandowski)",
      "perplexity": 1.6780751943588257,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 59
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SingleParentFamily(x)",
        "Income(x) < $205",
        "EconomicHardship(economic_hardness, x)"
      ],
      "fol_consts": [
        "sam"
      ],
      "fol_rules": [
        "{x ∈ Domain} ∀y SingleParent y ∨ x Parent Family y ∧ Income(y) ≤ AverageSalary() → Not (Work(x, y)) : No one lives alone with too little money.",
        "{∀z Dad(z) ⇒ ¬ Work(Work(x, z)): The father does not have a job that pays."
      ],
      "fol_conc": "∃x SingleParentFamily(x)",
      "perplexity": [
        3.5197274684906006,
        2.675503730773926
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{x ∈ Domain} ∀y SingleParent y ∨ x Parent Family y ∧ Income(y) ≤ AverageSalary() → Not (Work(x, y)) : No one lives alone with too little money."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, money)",
        "Is(x, a)",
        "Lives(x, family)"
      ],
      "fol_consts": [
        "tom",
        "dad"
      ],
      "fol_rules": [
        "(∃y (Money(y))) ∧ ¬(Economic(x)) ∨ ∃y ((Financial(x, y) ∧ Has(y, money)) → Is(a, x))"
      ],
      "fol_conc": "¬Has(tom, money)",
      "perplexity": 4.479578018188477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CantBeHelped(x)",
        "HasJob(x)"
      ],
      "fol_consts": [
        "gre",
        "financialaid",
        "financialaid",
        "financialaid",
        "financialaid",
        "gre",
        "financialaid"
      ],
      "fol_rules": [
        "∃x (CantBeHelped(x))",
        "(HasJob(s) ∧ CantBeHelped(gre)) → ¬(HasJob(r) ∨ HasJob(gre))",
        "(HasJob(financialaid)) ∨ ¬(HasJob(financialaid))"
      ],
      "fol_conc": "¬(HasJob(financialaid) ∨ HasJob(gre))",
      "perplexity": 5.358760833740234,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 60
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "GivesOutRoses(x, y, z)",
        "OnTV(x)",
        "OnBachelor(x)",
        "PortraysRealLives(x)",
        "RealityTV(x)",
        "TVShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eight_pm",
        "roses",
        "bachelor",
        "breaking_bad"
      ],
      "fol_rules": [
        "∃x (GivesOutRoses(x, bachelor, (monday, eight_pm)))",
        "∀x (GivesOutRoses(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → PortraysRealLives(x))",
        "∀x (PortraysRealLives(x) → RealityTV(x))",
        "¬RealityTV(breaking_bad)"
      ],
      "fol_conc": "¬TVShow(breaking_bad) ∨ GivesOutRoses(breaking_bad, breaking_bad, (monday, eight_pm))",
      "perplexity": [
        1.1005431413650513,
        1.0121033191680908
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (GivesOutRoses(x, bachelor, (monday, eight_pm)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Give(x, y, z)",
        "On1(x, y)",
        "On2(x, y)",
        "Portray(x, y)",
        "Reality(x)",
        "Bachelor(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Give(x, roses, monday) ∧ On1(x, pm8))",
        "∀x (Give(x, roses, y) → On2(x, bachelor))",
        "∀x (On2(x, bachelor) → Portray(x, people))",
        "∀x (Portray(x, people) → Reality(x))",
        "¬Reality(breakingbad)"
      ],
      "fol_conc": "∃x (Give(x, roses, monday) ∧ On1(x, pm8) ∧ ¬Reality(x))",
      "perplexity": 1.2570691108703613,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GiveOut(x, y)",
        "On(x, z)",
        "On(y, w)",
        "Portrays(x, y)",
        "RealityTV(x)",
        "BachelorShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "roses",
        "tv",
        "breaking bad"
      ],
      "fol_rules": [
        "∃x (GiveOut(roses, x) ∧ On(x, monday) ∧ On(x, 8pm))",
        "∀x (GiveOut(x, tv) → BachelorShow(x))",
        "∀x (BachelorShow(x) → Portrays(x, y))"
      ],
      "fol_conc": "¬RealityTV(breaking bad)",
      "perplexity": 1.5722882747650146,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 61
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GRETest(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "HasEconomicHardship(x)",
        "LivesInFamily(x, z)",
        "IsOutOfWork(z)"
      ],
      "fol_consts": [
        "tom",
        "ETS"
      ],
      "fol_rules": [
        "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)",
        "∀x (GRETest(x) ∧ ProvidesFinancialAid(ETS, x) → HasEconomicHardship(x))",
        "∀y (HasEconomicHardship(y) → ∃z ((LivesInFamily(z, y) ∨ ¬ LivesInFamily(z, ETS)) ∧ (IsOutOfWork(z)))",
        "IsOutOfWork(tom's dad)",
        "LivesInFamily(tom's dad, tom)",
        "∀x (HasEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ⇒ HasEconomicHardship(tom) ∴ ∃y ((GRETest(y) ∧ ProvidesFinancialAid(ETS, y)) ∨ GRETest(ets))"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9536328315734863,
        1.1783725023269653
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, z)",
        "Economic(x, y)",
        "Difficult(y)",
        "Lives(x, z)",
        "Father(x, y)",
        "Outofwork(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "us205",
        "year1",
        "singleparentfamily"
      ],
      "fol_rules": [
        "∃x (Costs(x, us205))",
        "(Provides(ets, x) ∧ Economic(x, z) ∧ Difficult(z) → Provides(ets, tom))",
        "∀y ((Economic(y) ⊕ Difficulty(y)) → ∃z (Difficult(z)))",
        "(Lives(tom, singleparentfamily) ∧ Father(tom, y) ∧ Outofwork(y, year1))",
        "(Outofwork(x, year1) → Provides(ets, tom))",
        "∀x ((Provides(ets, x) ∧ Costs(x, us205) → Play(sam, nope)))"
      ],
      "fol_conc": "(Provides(ets, tom) ∧ Costs(tom, us205))",
      "perplexity": 2.1026229858398438,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAid(sx, x)"
      ],
      "fol_consts": [
        "ets",
        "grec"
      ],
      "fol_rules": [
        "$205(x)",
        "(∃y (ProvidesFinancialAid(ets, grc) ∧ ProvidesFinancialAid(greclandhardshipx)))",
        "(¬ProvidesFinancialAid(economicgriardifficulty))",
        "($205(y))"
      ],
      "fol_conc": "(∃y (Costs(ets, grc) ∧ ProvidesFinancialAid(samhardscapitalresourcestom)))",
      "perplexity": 12.56561279296875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 62
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Infinniqnticrslingervnkyt",
        "Imbingerverrionneauhrnt"
      ],
      "fol_consts": [
        "Iviue gklrtiblygnerei', iylervnsklrtiruck.](2: ",
        "1."
      ],
      "fol_rules": [
        "Instringerverlngervniqnticssinny",
        "Imviue gklktilstklntirtik.",
        "Iviue kliyllnftittisnrygnneauhrnt"
      ],
      "fol_conc": "Unrloungervniqnticssinnylss",
      "perplexity": [
        4.563802242279053,
        15.706348419189453
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Instringerverlngervniqnticssinny"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 63
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(djokovic)",
      "perplexity": [
        1.0438159704208374,
        1.0163722038269043
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic",
        "taxhaven"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ∨ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Livesin(x, taxhaven))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, taxhaven)"
      ],
      "fol_conc": "Livesin(djokovic, taxhaven)",
      "perplexity": 1.1575440168380737,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Athlete(x)",
        "Celebrity(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "Djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "Famous(Djokovic) ∧ Athlete(Djokovic) → LivesInTaxHaven(Djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(Djokovic)",
      "perplexity": 1.045016884803772,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 64
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Twins(x)",
        "Triplets(x)",
        "SpendTimeWithSibling(s, t)",
        "PlayWithSibling(s, t)",
        "siblingsAreSameAge(s1, s2)",
        "ComplainAboutAnnoyingSibling(x)",
        "LiveAtHomeRegularly(x)",
        "DevelopStrongBondWithFamilyMember(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "\\u0030x (Twins(x) \\u00f2 Triplets(x)) \\u03c0 SpendTimeWithSibling(x, SiblingOfX)(x)",
        "\\u0030x (siblingsAreSameAge(x, y) \\u03e9 Twins(x) & Tripets(y))",
        "\\u0030x (ComplainAboutAnnoyingSibling(x) \\u03c0 siblingsAreSameAge(SiblingOfX))(x)",
        "\\u00cx ((\\u00fnLiveAtHomeRegularly(x)) \\u03e9 DevelopStrongBondWithFamilyMember(x))",
        "SpendTimeWithSibling(luke, SiblingOfLuke) \\u00f2 \\u00fnLiveAtHomeRegularly(luke)",
        "\\u0030x (SpendTimeWithSibling(x, SiblingOfX) π ComplainAboutAnnoyingSibling(x))",
        "\\u00cx ((Twins(luke) \\u0026 Triplets(luke)) \\u03e9 DevelopStrongBondWithFamilyMember(x)) \\u00f2 \\u00fn(\\u0031y (siblingsAreSameAge(y, x) \\u03e9 Twins(y) & Tripets(x))))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSibling(luke)",
      "perplexity": [
        1.78782320022583,
        1.3702104091644287
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "\\u0030x (Twins(x) \\u00f2 Triplets(x)) \\u03c0 SpendTimeWithSibling(x, SiblingOfX)(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Siblings(x, y)",
        "Spent(x, z)",
        "Aging(y, x)",
        "Samey(x, y)",
        "Annoys(z, x)",
        "Resident(x)"
      ],
      "fol_consts": [
        "lukes"
      ],
      "fol_rules": [
        "(Siblings(x, y) → Spent(x, z))",
        "(∃x (Aging(y, x) ∧ Siblings(x, y))) → Samey(x, y)",
        "(∀z (Annoys(z, x) ∧ Siblings(x, y))) → Samey(x, y)",
        "(Resident(x) → ¬Spent(x, z))",
        "(Spent(x, z) → ∃x ((Aging(y, x) ∧ Spent(x, z)) ∨ ¬(Aging(y, x))))",
        "(∀z (Samey(x, y) ∧ Resident(z))) → Annoys(z, x)",
        "(Resident(x) ∧ Siblings(lukes, x) ∧ Spent(lukes, x)) ⊕ (∃x ((Siblings(lukes, x) ∧ Samey(x, x)) ∨ ¬(Aging(y, x))))",
        "Annoys(rinas, lukes)"
      ],
      "fol_conc": "Annoys(lukes, rina)",
      "perplexity": 2.2792654037475586,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spend(x, y)",
        "HangingOutWith(y)",
        "Live(s)",
        "Spend(x, y)",
        "(x, z)",
        "Live(z)",
        "Spend(y, x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "(∀z ∀w (((z, w) ∧ Spend(w)) → Spend(luke)))",
        ".(s) ∨ ((t, s) ∧ Spend(s))",
        "(Spend(t) → (∃y (((x) ∨ (e) ∧ Live(e)))))",
        "(∀x ∀w (((z) ∧ Live(z)) → Spend(w)))",
        "((Live(luke) ⊕ ∃r ((l, r) ∧ Spend(r))))",
        "(Spend(x) ∧ ¬Live(y))",
        "¬(Spend(s))",
        "∀x (Spend(t) ∨ Live(z)) → Spend(w)"
      ],
      "fol_conc": "(Live(luke) ⊕ ∃r ((l, r) ∧ Spend(r)))",
      "perplexity": 11.716741561889648,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀z ∀w (((z, w) ∧ Spend(w)) → Spend(luke)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 65
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SupervisedLearning(category1, x)",
        "LabellingData(category3, category2 ∧ ∃y ¬Category4(y))",
        "∀x (LabellingData(category2) ∨ LabellingData(category3)))"
      ],
      "fol_consts": [
        "category1(x)",
        "labellingdata(category3)(category2)",
        "supervisedmachinelearningalgorithmforTrainingTextSummarisationModel(category1)"
      ],
      "fol_rules": [
        "∃x (SupervisedLearning(∀y, category4) ∧ ∀z ∼Labelling(y,z))",
        "(category1 ∧ ∃x ¬Category2(x)) ∨ (∧x ≠ Category3)(¬LabellingData(x,y)))"
      ],
      "fol_conc": "$(∈ category1(x))(∨($∈$category4( $x))))",
      "perplexity": [
        2.8099801540374756,
        4.0299248695373535
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (SupervisedLearning(∀y, category4) ∧ ∀z ∼Labelling(y,z))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Machine(x)",
        "Supervised(x, y)",
        "Unsupervised(x, y)",
        "Reinforcement(y)"
      ],
      "fol_consts": [
        "ml",
        "textsummarization"
      ],
      "fol_rules": [
        "(∃x (Machine(x))) ∧ ∀y (∀z (Supervised(z, x) ∨ Unsupervised(z, x)) → ∃w (Textsummation(w, y)))",
        "(∃x (Unsupervised(x))) ∧ ¬(Reinforcement(x))"
      ],
      "fol_conc": "Unsupervised(textsummarization)",
      "perplexity": 3.1184234619140625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)"
      ],
      "fol_consts": [
        "machine learning",
        "text summarization model"
      ],
      "fol_rules": [
        "∀x (Supervised(x) ∧ Unsupervised(x))",
        "(∃y ∃z (Unsupervised(y, z))) ⊕ ∀y (∃z (Unsupervised(z, y)))"
      ],
      "fol_conc": "Supervised(r) → Unsupervised(r)",
      "perplexity": 2.926884889602661,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 66
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1",
        "2",
        "3",
        "4"
      ],
      "fol_consts": [
        "Cinnrodnnylsisge.2648394451"
      ],
      "fol_rules": [
        "(3.7+30=10)",
        "3.9:9:9,11.0-cryvee.",
        "6.2 :5 = xllnts',39243rd\tsmtstch."
      ],
      "fol_conc": "",
      "perplexity": [
        9.936018943786621,
        8.303238868713379
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(3.7+30=10)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkg1(nixton)"
      ],
      "fol_consts": [
        "tikitnoe",
        "klayunk",
        "kmoukae"
      ],
      "fol_rules": [
        "Cnyeue(x) ∧ ∀x (Dicntionnixton(axinytn))",
        "Kzviliktl1aue(sntditn0e, dklayunkn)",
        "Nukaeertyllaue(dxirly3ntstdistl1bse)"
      ],
      "fol_conc": "Tikuiktl1aue(xixttngtrsttn0e)",
      "perplexity": 13.911416053771973,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Carriage(x)"
      ],
      "fol_consts": [
        "$^ (20+86)"
      ],
      "fol_rules": [
        "∀t ((Carriage(n)) ⊕ Paleysnt', (i, i) → Carriage(f))",
        "¬Paleysnt', ($^ (20+86), e, j) → Carriage(d) ∧ ¬Carriage(o)",
        ".join(x, i, y)"
      ],
      "fol_conc": "Carriage(i, n) ⊕ ∃n (Carriage(t))",
      "perplexity": 28.844219207763672,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀t ((Carriage(n)) ⊕ Paleysnt', (i, i) → Carriage(f))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 67
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Disease(x)",
        "Infectious(x)",
        "Virus(x)",
        "Cause(x, y)",
        "Animal(x)",
        "Human(x)",
        "Mammal(x)",
        "Symptoms(x, y)",
        "Coughing(x)",
        "Fever(x)",
        "Headache(x)",
        "MusclePain(x)",
        "FeelingTired(x)",
        "Glu(x)",
        "Occur(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox_virus"
      ],
      "fol_rules": [
        "Disease(monkeypox) ∧ Infectious(monkeypox) ∧ ∃v (Virus(v) ∧ Cause(v, monkeypox))",
        "∃a ∃v (Animal(a) ∧ Virus(v) ∧ Cause(v, monkeypox) ∧ (a = human ∨ a ≠ human))",
        "∀h (Human(h))",
        "∀a (Mammal(a) → Animal(a))",
        "∃f (Fever(f) ∧ Symptoms(monkeypox, f)) ⊕ ∃h (Headache(h) ∧ Symptoms(monkeypox, h)) ⊕ ∃m (MusclePain(m) ∧ Symptoms(monkeypox, m)) ⊕ ∃t (FeelingTired(t) ∧ Symptoms(monkeypox, t))",
        "∀p (Glu(p) → ∃x (FeelingTired(x) ∧ x = p))"
      ],
      "fol_conc": "∃s (Coughing(s) ∧ (s = fever ∨ s = headache ∨ s = muscle pain ∨ s = feeling tired))",
      "perplexity": [
        1.2451910972595215,
        1.1040452718734741
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃a ∃v (Animal(a) ∧ Virus(v) ∧ Cause(v, monkeypox) ∧ (a = human ∨ a ≠ human))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Caused(x, y)",
        "Occur(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)",
        "Glu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "Infectious(monkeypox) ∧ Caused(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, human)",
        "Human(human)",
        "Mammal(human)",
        "Animal(human)",
        "∀x (Symptom(monkeypox, x) → (Fever(x) ⊕ Headache(x) ⊕ Muscle(x) ⊕ Tired(x)))",
        "∀x (Glu(x) → Tired(x))"
      ],
      "fol_conc": "Symptom(monkeypox, coughing)",
      "perplexity": 1.2537015676498413,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Disease(x)",
        "Virus(y, x)",
        "OccurIn(y, z)",
        "Mammal(z)",
        "Animal(z)",
        "SymptomOf(x, y)",
        "FeelTiredWhenGetGlu(z)"
      ],
      "fol_consts": [
        "monkeypox",
        "human",
        "coughing",
        "glu",
        "fever",
        "headache",
        "musclepain",
        "tireness",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "Disease(monkeypox)",
        "Virus(monkeypoxvirus, monkeypocx) → OccurIn(monkeypovirrus, human)",
        "Mammal(human)",
        "Animal(mammal)",
        "∀y (SymptomOf(monkeypoxx, y) ⊕ SymptomOf(monkeypox, fever))",
        "∀z (∃w (FeelTiredWhenGetGlu(w) ∧ FeelTiredWhenGetGlu(z))) → ∃x ((Disease(x) ∧ Virus(monkeypovirus, x) ∧ OccurIn(monkepyvrius, human)) → SymptomOf(x, y))",
        "∀y (SymptomOf(monkeypox, headache) ⊕ SymptomOf(monkeypoxx, musclepain))"
      ],
      "fol_conc": "SymptomOf(monkeypox, coughing)",
      "perplexity": 2.0718834400177,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Mammal/1, Mammal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Mammal/1, Mammal/0"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 68
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "Tall(y)",
        "WearsLargeShoes(z)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (All basketball players are tall)"
      ],
      "fol_conc": "Not DoesProject(sam) ∨ WearsLargeShoes(sam)",
      "perplexity": [
        3.818885087966919,
        2.5007922649383545
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (All basketball players are tall)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)"
      ],
      "fol_consts": [
        "rina",
        "yuri"
      ],
      "fol_rules": [
        "(∃x (Drink(x)) → Dependent(rinta))",
        "(∀x (Drink(x) → Joke(x)))"
      ],
      "fol_conc": "Jokes(yuri)",
      "perplexity": 3.0756802558898926,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NotAm(x)",
        "Tall(x)",
        "NotAm(yuri)"
      ],
      "fol_consts": [
        "yuri",
        "yuri"
      ],
      "fol_rules": [
        "∀x (NotAm(x)) → ¬(NotAm(yuri) ∨ Tall(yuri))",
        "(Tall(yuri) ∧ NotAm(yuri)) ⊕ NotAm(t)"
      ],
      "fol_conc": "¬NotAm(yuri)",
      "perplexity": 6.287996292114258,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 69
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Capital(x)",
        "PopulationSize(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "Capital(Beijing)",
        "PopulationSize(Beijing, p)"
      ],
      "fol_conc": "",
      "perplexity": [
        3.38611102104187,
        1.4317158460617065
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "world"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, china) ∧ Capital(x))",
        "∃x (Hosted(x, beijing) ∧ Ranked(x, asia))",
        "(Ranked(beijing, world) ∨ Ranked(beijing, asia))"
      ],
      "fol_conc": "Not(worldly2ndlargestcity)",
      "perplexity": 1.8451765775680542,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldPopulousCity(y)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "∀x (Capital(x, China)) ∧ Capital(Beijing, x)",
        "Capital(Beijing, China)",
        "WorldPopulousCity(Beijing)",
        "LocatedIn(Beijing, China)"
      ],
      "fol_conc": "∃x (WorldPopulousCity(x) ∧ ¬HostedOlympics(x))",
      "perplexity": 3.035545587539673,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 70
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "VisaType(x, y)",
        "NeedsApplyForCPT(x)",
        "WantsToWorkInUS(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) → ((VisaType(x, 'f1') ∨ VisaType(x, 'j1')))",
        "∀x (InternationalStudent(x) ∧ VisaType(x, 'f1') ∧ WantsToWorkInUS(x) → NeedsApplyForCPT(x))",
        "InternationalStudent(mike)"
      ],
      "fol_conc": "VisaType(mike, 'f1')",
      "perplexity": [
        1.4095230102539062,
        1.2837638854980469
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (InternationalStudent(x) → ((VisaType(x, 'f1') ∨ VisaType(x, 'j1')))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x, y)",
        "Student(x)",
        "F1visa(x, y)",
        "J1visa(x, y)",
        "Apply(x, z)",
        "Work(x, y)"
      ],
      "fol_consts": [
        "mike",
        "us",
        "cpt",
        "opt",
        "f1usa",
        "j1usa",
        "f1",
        "j1",
        "susa",
        "pusa"
      ],
      "fol_rules": [
        "∀x (International(x, us) → F1visa(x, y) ⊕ J1visa(y))",
        "(F1visa(x, y) ∧ International(x, us) ∧ Apply(x, z) → Work(x, y))",
        "Student(mike)",
        "Apply(mike, cpt)",
        "Work(mike, us)"
      ],
      "fol_conc": "∃x (International(x, us) ∧ F1visa(y) ∧ Student(x) ∧ International(x, us) ∧ Apply(z, x))",
      "perplexity": 2.138221025466919,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: F1visa/2, F1visa/1.\n\n\nFatal error:  The following symbols are used with multiple arities: F1visa/2, F1visa/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x, y)",
        "USPerson(y)",
        "InternationalStudent(x)"
      ],
      "fol_consts": [
        "mike",
        "mike"
      ],
      "fol_rules": [
        "(∃y (InternationalStudent(mike, x) ∧ USPerson(k)) → ((InternationalStudent(x, y))) ⊕ (((InternationalStudent(y, z)))))",
        "((USPerson(q) ∧ InternationalStudent(q, w)) ∨ InternationalStudent(r))",
        "(∀y (InternationalStudent(k, x) ∧ USPerson(x))) → (∃z ((InternationalStudent(z, k) ⊕ InternationalStudent(y))))",
        "((InternationalStudent(mike, a)) ∧ InternationalStudent(a, b)) ∨ ∀x (¬(USPerson(k)))",
        "(∃y (((InternationalStudent(x, z))) ∧ USPerson(z) ⊕ InternationalStudent(y))) → ((InternationalStudent(mike, d)) ∨ ¬((InternationalStudent(d))))",
        "(((InternationalStudent(k, x)) ∨ InternationalStudent(q, w) ∨ InternationalStudent(r) ⊕ (((InternationalStudent(s)))) ∧ USPerson(w))) → ∃x ((InternationalStudent(x, k) ∨ ¬(InternationalStudent(y)) ⊕ (USPerson(k))))",
        "∀z (∃y (InternationalStudent(z) ∨ InternationalStudent(d)) ∧ USPerson(r)) → ((InternationalStudent(mike, a)))"
      ],
      "fol_conc": "(InternationalStudent(x, y) ∨ InternationalStudent(k))",
      "perplexity": 13.194814682006836,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: InternationalStudent/1, InternationalStudent/2.\n\n\nFatal error:  The following symbols are used with multiple arities: InternationalStudent/1, InternationalStudent/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 71
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Winner(x)",
        "Participate(x)",
        "FromCountry(x, y)",
        "OnLeaderboard(x)",
        "Tie(n, lst)",
        "BelongsToTie(z, t)",
        "IsPartOfLeaderBoardList(x, y)",
        "IsCountryBelgium(y)",
        "PersonOnLeaderboardAndFromBelgium(p)",
        "NotSamePerson(x, y)",
        "ParticipationInEventByWinnerOfTie(t, w)",
        "LeaderboardHasParticipants(lb, e)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "1992dmc",
        "belgium"
      ],
      "fol_rules": [
        "Winner(steinhauer, 1992dmc)",
        "Participate(steinhauer, 1992dmc)",
        "Tie(6, [descampe])",
        "FromCountry(descampe, belgium) ∧ OnLeaderboard(descampe, 1992dmc)",
        "Ψx (OnLeaderboard(x, e) → Participate(x, e))",
        "BelongsToTie(descampe, t) ∧ FromCountry(descampe, belgium)",
        "IsPartOfLeaderBoardList([steinhauer], lb_1992dmc) Φ NotSamePerson(p, steinhauer)",
        "ParticipationInEventByWinnerOfTie(t, w) → Winner(w, e)",
        "LeaderboardHasParticipants([descampe], 1992dmc)"
      ],
      "fol_conc": "ηx (OnLeaderboard(x, lb_1992dmc) Φ NotSamePerson(steihauer))",
      "perplexity": [
        1.5364543199539185,
        1.262004017829895
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ψx (OnLeaderboard(x, e) → Participate(x, e))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x, y)",
        "Participate(x, y)",
        "From(x, y)",
        "On(x, y)",
        "Sixwaytie(z)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "leaderboard1992dumaurierclassic",
        "dumaurierecassic1992"
      ],
      "fol_rules": [
        "Winner(steinhauer, dumaurirecassic1992)",
        "Participate(steinhauer, dumaurerelassic1992)",
        "Sixwaytie(leaderboard1992dumaurierclassic) ∧ From(descampe, belgium) ∧ On(descampe, leaderboard1992dumaurierclassic)",
        "From(descampe, belgium) ∧ On(descampe, leaderboard1992dumaurierclassic)",
        "On(x, leaderboard1992dumaurierclassic) → Participate(x, dumaurirecassic1992)"
      ],
      "fol_conc": "¬Winner(steinhauer, dumaurerelassic1992)",
      "perplexity": 1.4276552200317383,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatedIn(x, y)",
        "TieOnLeaderboard(z, x)",
        "FromBelgium(x)",
        "OnLeaderboardOf(y, z)"
      ],
      "fol_consts": [
        "1992 du Maurier Classic",
        "steinhauer",
        "descampe"
      ],
      "fol_rules": [
        "Winner(steinhauer, 1992 du Maurier Classic)",
        "ParticipatedIn(steinhauer, 1992 du Maurier Classic)",
        "TieOnLeaderboard(z, 1992 du Maurier Classic) → (∃x (FromBelgium(x)) ∧ OnLeaderboardOf(x, z))",
        "FromBelgium(descampe) ∧ OnLeaderboardOf(descampe, 1992 du Maurier Classic)",
        "(OnLeaderboardOf(y, x) → ParticipatedIn(y, x))"
      ],
      "fol_conc": "¬Winner(steinhauer, 1992 du Maurier Classic)",
      "perplexity": 1.669700264930725,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 72
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "ZahaHadid(x)",
        "KellyWearstler(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zaha_hadid",
        "kelly_wearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (ZahaHadid(x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        " (ZahaHadid(x) ∨ KellyWearstler(x))",
        "∀x (KellyWearstler(x) → Evocative(x))",
        "∀x (KellyWearstler(x) → Dreamy(x))",
        "∀x (Timeless(x) ∧ Max(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(Max) ∧ Dreamy(Max)",
      "perplexity": [
        1.086798071861267,
        1.0261094570159912
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Max/1, Max/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Max/1, Max/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Design(x, y)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Zaha(x) ∧ Design(x, y) → Timeless(y))",
        "∀x (Mass(x) ∧ Timeless(x) → False(x))",
        "(Zaha(x) ∧ Design(x, y)) ⊕ (Kelly(x) ∧ Design(x, y))",
        "∀x (Kelly(x) ∧ Design(x, y) → Evocative(y))",
        "∀x (Kelly(x) ∧ Design(x, y) → Dreamy(y))",
        "∀x (Timeless(x) ∧ Design(x, max) → (Mass(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(max) ∧ Dreamy(max)",
      "perplexity": 1.2354183197021484,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "DesignStyle(x, y)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zahahadid",
        "kellywearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (DesignStyle(zahahadid, x) → Timeless(x))",
        "¬(∃x (Timeless(x) ∧ MassProductDesign(x)))",
        "(DesignStyle(zahahadid, x) ∨ DesignStyle(kellywearstler, x))",
        "∀x (DesignStyle(kellywearstler, x) → Evocative(x))",
        "∀x (DesignStyle(kellywearstler, x) → Dreamy(x))",
        "∀x ((Timeless(x) ∧ DesignStyle(max, x)) → (MassProductDesign(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "∃x (DesignStyle(max, x) ∧ Evocative(x) ∧ Dreamy(x))",
      "perplexity": 1.1267108917236328,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 73
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "*"
      ],
      "fol_consts": [
        "1.2.3",
        "4.5"
      ],
      "fol_rules": [
        "3.6 :p,"
      ],
      "fol_conc": "The world is real and there's no doubt.",
      "perplexity": [
        4.810638904571533,
        9.159553527832031
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.6 :p,"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "cold(x)",
        "adex(n)"
      ],
      "fol_consts": [
        "cooked",
        "cooked",
        "cooked"
      ],
      "fol_rules": [
        "((cold(z)) → cold(g) ∧ cold(v))",
        "(((cold(x))) → adex(i) ⊕ (adex(e) ∨ (cold(u, i))))"
      ],
      "fol_conc": "cold(z)",
      "perplexity": 26.11669158935547,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Cold/2, Cold/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Cold/2, Cold/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 74
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourist(x)",
        "FavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourist(x) → FavoriteAnimal(max, x))",
        "(AnimalFromAustralia(x) ∧ LoveToSleep(x)) ⊕ ¬(AnimalFromAustralia(x) ∨ LoveToSleep(x))"
      ],
      "fol_conc": "FavoriteAnimal(max, AnimalFromAustralia(x))",
      "perplexity": [
        1.3536055088043213,
        1.5918196439743042
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteAnimal(max, AnimalFromAustralia(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, z)",
        "From(x, y)",
        "Veryfluffy(z)",
        "Love(z, w)",
        "Fluffy(z)",
        "Sleepy(z)"
      ],
      "fol_consts": [
        "max",
        "animals",
        "tourists",
        "australia",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(x, z))",
        "∀x (∃y (From(y, x) ∧ Loved(tourists, y)))",
        "∀x ∀z ((From(x, z) ∧ Loved(tourists, x)) → From(australia, z))",
        "∀x ∀y ((Favorite(z, x) ∧ Veryfluffy(y)) → Fluffy(y))",
        "∀x (Fluffy(y) → Sleepy(y))",
        "¬(Veryfluffy(x) ∧ Not(quokka)) ∨ ∃z (From(z, quokka) ∧ Fluffy(x))"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 2.0115559101104736,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Loved(x, y)",
        "FavoriteAnimal(z)",
        "Loved(x, z)",
        "FavouriteAnimalsAreVeryFluffy(animals)",
        "Loved(bytourists)",
        "Loved(tosleepx)",
        "FavoriteAnimal(sleepingz)",
        "Loved(ausquokkaq, s)",
        "FavoriteAnimal(z)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "bytheaustraliacountry",
        "kakuaussieanimalnameforshorty",
        "ausuofallanimalsinthiscountryforyou",
        "sleezingzislikekoalawhichlovesleepingandtheyareveryfluffy",
        "qoockaazuisquokka",
        "sleepingozone"
      ],
      "fol_rules": [
        "(Loved(x, y) → FavoriteAnimal(z))",
        "(∀x (Loved(bytourists)))",
        "(¬(FavouriteAnimalsAreVeryFluffy(ausanimalsqzuaussiesatthistouristyplaceforquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)) ⊕ Loved(x, bytourists))",
        "(∀x (Loved(bytheaussieanfromthatnatsionalparkwheretheqoockaslive)))",
        "FavouriteAnimalsAreVeryFluffy(ausquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)",
        "(∀x (Loved(bytourists) ∧ FavoriteAnimal(z)) → Loved(tosleepz, z))",
        "¬(FavoriteAnimal(sleepingqoockaazuisquokka)) ∨ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)",
        "(∃x (Loved(tosleepz, z) ∧ FavoriteAnimal(sleepingqoockaazuisquokka)) → Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere))",
        "Loved(tosleepz, z)"
      ],
      "fol_conc": "(∃x (FavoriteAnimal(z) ∧ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)))",
      "perplexity": 5.720861911773682,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loved/2, Loved/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loved/2, Loved/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 75
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PerformIn(x)",
        "AttendAndEngage(x)",
        "ChaperoneDances(x)",
        "StudentAttendingSchool(x)",
        "InactiveDisinterestedMember(x)"
      ],
      "fol_consts": [
        "bonnie",
        "YoungChildOrTeenager(y)",
        "WishFurtherAcademicCareerAndEducationOpportunities(y)"
      ],
      "fol_rules": [
        "∀x (PerformIn(x) → AttendAndEngage(x))",
        "∀x ((PerformIn(x) ⊕ InactiveDisinterestedMember(x)))",
        "∀x (ChaperoneDances(x) → ¬StudentAttendingSchool(x))",
        "∀x (InactiveDisinterestedMember(x) → ChaperoneDances(x))",
        "∀y ((YoungChildOrTeenager(y) ∧ WishFurtherAcademicCareerAndEducationOpportunities(y)) → StudentAttendingSchool(y))"
      ],
      "fol_conc": "(∃x (ChaperoneDances(bonnie) ∨ PerformIn(bonnie))) → ((StudentAttendingSchool(bonnie)) ⊕ InactiveDisinterestedMember(bonnie))",
      "perplexity": [
        1.2432225942611694,
        1.0380806922912598
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x, y)",
        "Attend(y, z)",
        "Veryengaged(z)",
        "Chaperone(w)",
        "Student(t)",
        "Dances(w)",
        "Disinterested(u)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → ∃y (Attend(y, x) ⊕ Veryengaged(z)))",
        "∀z ((Perform(z) ⊕ Disinterested(w)))",
        "∀w (Chaperone(u) → ¬Student(v))",
        "∀u (Disinterested(x) ∧ Chaperone(y))"
      ],
      "fol_conc": "(Youngchild(bonnie) ∨ Teenager(bonnie)) ⊕ Disinterested(w)",
      "perplexity": 1.9824235439300537,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Performs(x, y)",
        "Attend(z)",
        "EngagedWithSchoolEvents(y, z)",
        "ChaperoneHighschoolDances(w, x)"
      ],
      "fol_consts": [
        "bonnie",
        "youngchildorteenager"
      ],
      "fol_rules": [
        "(∀x (Performs(x, y) → Attend(z))) ∧ ¬(Attend(z)) ⊕ Performs(x, z)",
        "(∃y ((ChaperoneHighschoolDances(w, x)) → ¬StudentWhoAttendsTheSchool(y, z)))",
        "∀x (InactiveAndDisinterestedMemberOfCommunity(w) ∧ ChaperoneHighschoolDances(z, y))"
      ],
      "fol_conc": "(∃w ((Performs(bonnie, youngchildorteenager) → StudentWhoAttendsTheSchool(youngchildorteenager, x))) ⊕ ¬(StudentWhoAttendsTheSchool(youngchildorteenager, x) ∨ InactiveAndDisinterestedMemberOfCommunity(z)))",
      "perplexity": 2.7758800983428955,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 76
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Capital(x)",
        "PopulationSize(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "Capital(Beijing)",
        "PopulationSize(Beijing, p)"
      ],
      "fol_conc": "",
      "perplexity": [
        3.38611102104187,
        1.4317158460617065
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "world"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, china) ∧ Capital(x))",
        "∃x (Hosted(x, beijing) ∧ Ranked(x, asia))",
        "(Ranked(beijing, world) ∨ Ranked(beijing, asia))"
      ],
      "fol_conc": "Not(worldly2ndlargestcity)",
      "perplexity": 1.8451765775680542,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldPopulousCity(y)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "∀x (Capital(x, China)) ∧ Capital(Beijing, x)",
        "Capital(Beijing, China)",
        "WorldPopulousCity(Beijing)",
        "LocatedIn(Beijing, China)"
      ],
      "fol_conc": "∃x (WorldPopulousCity(x) ∧ ¬HostedOlympics(x))",
      "perplexity": 3.035545587539673,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 77
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "PopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "BestUniversities(x)"
      ],
      "fol_consts": [
        "Beijing",
        "PRC"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, PRC))",
        "∀x (PopulousNationalCapitalCity(Beijing))",
        "∀x (LocatedIn(Beijing, Northern China))",
        "∃x (HostedOlympics(Beijing, 2008 Summer Olympics) ∧ HostedOlympics(Beijing, 2008 Winter Paralympics))"
      ],
      "fol_conc": "∃x (HostedOlympics(Beijing, 2008 Summer Olympics) ∧ HostedOlympics(Beijing, 2008 Winter Paralympics))",
      "perplexity": [
        2.1414239406585693,
        1.0372672080993652
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Population(x)",
        "Location(x, y)",
        "Host(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Location(x, china))",
        "Bejinghost(beijing, olympics) ∧ Bejinghost(beijing, paraolympic)",
        "Bejinghost(beijing, summergames) ∧ Bejinghost(beijing, wintergames)"
      ],
      "fol_conc": "Beijinghostedbothsummerandwinterolympics(beijing)",
      "perplexity": 1.9591832160949707,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldMostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedGames(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "People'sRepublicOfChina",
        "SummerOlympics",
        "People'sRepublicOfChina",
        "SummerOlympics",
        "Beijing",
        "SummerOlympics",
        "SummerOlympics",
        "People'sRepublicOfChina",
        "Beijing",
        "People'sRepublicOfChina",
        "Beijing",
        "SummerOlympics"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, y) → ∃z (WorldMostPopulousNationalCapitalCity(z) ∧ LocatedIn(y, z)))",
        "HostedGames(Beijing, SummerOlympics) ∨ HostedGames(Beijing, People'sRepublicOfChina)",
        "HostedGames(Beijing, SummerOlympics) ∨ HostedGames(Beijing, People'sRepublicOfChina)"
      ],
      "fol_conc": "HostedGames(Beijing, SummerOlympics)",
      "perplexity": 2.371943473815918,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 78
  },
  {
    "id": 49,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is printed text.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Media(x)",
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [],
      "fol_conc": "PrintedText(1984)",
      "perplexity": [
        3.0293374061584473,
        1.1440988779067993
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Analog(x)",
        "Digital(x)",
        "Printed(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "digital",
        "streaming",
        "analog"
      ],
      "fol_rules": [
        "∀x (Analog(x) → ∀y (Not(printedtext)))"
      ],
      "fol_conc": "Printed(text)",
      "perplexity": 2.339400053024292,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (Analog(x) → ¬PrintedText(x))",
        "∀x (PrintedText(x) ∧ Analog(x))",
        "∀x (StreamingService(x) → ∃x (Analog(x)))",
        "(HardcoverBook(1984) → PrintedText(1984))",
        "(StreamingService(1984) ∧ HardcoverBook(1984))"
      ],
      "fol_conc": "PrintedText(1984)",
      "perplexity": 1.2417352199554443,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 79
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "TakesGRE(x)",
        "Costs(x, y)",
        "ProvidesAid(x, y)",
        "ProvesHardship(x)",
        "EconomicHardship(x)",
        "Difficulty(x)",
        "CausedBy(x, y)",
        "TooLittleMoney(x)",
        "TooFewResources(x)",
        "LivesIn(x, y)",
        "SingleParent(y)",
        "OutOfWork(x)",
        "Duration(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "dollars205",
        "dollars300",
        "year"
      ],
      "fol_rules": [
        "Costs(gre, dollars205)",
        "∀x (ProvesHardship(x) → ProvidesAid(ets, x))",
        "∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ CausedBy(Difficulty(x), (TooLittleMoney(x) ⊕ TooFewResources(x)))))",
        "LivesIn(tom, x) ∧ SingleParent(x)",
        "OutOfWork(dad) ∧ Duration(OutOfWork(dad), year)"
      ],
      "fol_conc": "Costs(gre, dollars300)",
      "perplexity": [
        1.1394647359848022,
        1.0214998722076416
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ CausedBy(Difficulty(x), (TooLittleMoney(x) ⊕ TooFewResources(x)))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, y)",
        "Applicant(x)",
        "Proves(x, y)",
        "Economic(x)",
        "Hardship(x)",
        "Difficulty(x, y)",
        "Cause(x, y)",
        "Lives(x, y)",
        "Out(x)",
        "Family(x)",
        "Single(x)",
        "Below(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "205",
        "300"
      ],
      "fol_rules": [
        "Costs(gre, 205)",
        "∀x (Applicant(x) ∧ Proves(x, hardship) → Provides(ets, x))",
        "∀x (Economic(x) ∧ Hardship(x) → Difficulty(x, economic))",
        "∀x (Difficulty(x, y) → Cause(x, y))",
        "Lives(tom, family)",
        "Out(tom)",
        "Family(tom)",
        "Single(tom)"
      ],
      "fol_conc": "Below(205, 300)",
      "perplexity": 1.22151780128479,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAidTo(x, y)",
        "ProvesEconomicHardship(x)",
        "RefersTo(x, y)",
        "LivesIn(x, y)",
        "OutOfWorkForMoreThanAYear(x)"
      ],
      "fol_consts": [
        "gre",
        "ets",
        "tom",
        "economic hardship",
        "gre",
        "tom",
        "economic hardship",
        "gre",
        "ets"
      ],
      "fol_rules": [
        "Costs(gre, u)",
        "∀x (ProvesEconomicHardship(x) → ProvidesFinancialAidTo(ets, x))",
        "RefersTo(economic hardship, economic hardship)",
        "LivesIn(tom, y)",
        "OutOfWorkForMoreThanAYear(z)"
      ],
      "fol_conc": "Costs(gre, v)",
      "perplexity": 1.7938830852508545,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 80
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Champion(x)",
        "Nominated(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Paid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "(Champion(x) ⊕ Nominated(x))",
        "∀x (Champion(x) → ProfessionalTennisPlayer(x))",
        "∀x (Nominated(x) → Celebrity(x))",
        "∀x (Celebrity(x) → Athlete(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Celebrity(x) → Paid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Paid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "Champion(djokovic)",
      "perplexity": [
        1.0777403116226196,
        1.1879191398620605
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslam(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Taxhaven(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslam(x) ⊕ Oscarnominated(x))",
        "∀x (Grandslam(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Celebrity(x) → Athlete(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, wellpaid)"
      ],
      "fol_conc": "Grandslam(djokovic)",
      "perplexity": 1.1873350143432617,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wellpaid/1, Wellpaid/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Wellpaid/1, Wellpaid/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic",
        "djokovic"
      ],
      "fol_rules": [
        "∃x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x ((GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ∧ ∀x (∀x (ProfessionalTennisPlayer(x) → Athlete(x))) ∧ ∃x (Celebrity(x) → WellPaid(x))) ∧ ∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "OscarNominatedActor(djokovic)",
        "GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic)",
        "∀x ((Famous(x) ∧ Athlete(x)) → WellPaid(x))"
      ],
      "fol_conc": "(GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic))",
      "perplexity": 1.6710333824157715,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 81
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cevue: Expose secrets, to uncover new things, to solve unknowns"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eartrimet(x)",
        "(n)"
      ],
      "fol_consts": [
        "$1 = x, y.",
        "$1 = x, y."
      ],
      "fol_rules": [
        "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
      ],
      "fol_conc": "(((i) ∧ (d))) → ($1 = x, y.)",
      "perplexity": 14.97048282623291,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 82
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SupervisedLearning(category1, x)",
        "LabellingData(category3, category2 ∧ ∃y ¬Category4(y))",
        "∀x (LabellingData(category2) ∨ LabellingData(category3)))"
      ],
      "fol_consts": [
        "category1(x)",
        "labellingdata(category3)(category2)",
        "supervisedmachinelearningalgorithmforTrainingTextSummarisationModel(category1)"
      ],
      "fol_rules": [
        "∃x (SupervisedLearning(∀y, category4) ∧ ∀z ∼Labelling(y,z))",
        "(category1 ∧ ∃x ¬Category2(x)) ∨ (∧x ≠ Category3)(¬LabellingData(x,y)))"
      ],
      "fol_conc": "$(∈ category1(x))(∨($∈$category4( $x))))",
      "perplexity": [
        2.8099801540374756,
        4.0299248695373535
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (SupervisedLearning(∀y, category4) ∧ ∀z ∼Labelling(y,z))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Machine(x)",
        "Supervised(x, y)",
        "Unsupervised(x, y)",
        "Reinforcement(y)"
      ],
      "fol_consts": [
        "ml",
        "textsummarization"
      ],
      "fol_rules": [
        "(∃x (Machine(x))) ∧ ∀y (∀z (Supervised(z, x) ∨ Unsupervised(z, x)) → ∃w (Textsummation(w, y)))",
        "(∃x (Unsupervised(x))) ∧ ¬(Reinforcement(x))"
      ],
      "fol_conc": "Unsupervised(textsummarization)",
      "perplexity": 3.1184234619140625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)"
      ],
      "fol_consts": [
        "machine learning",
        "text summarization model"
      ],
      "fol_rules": [
        "∀x (Supervised(x) ∧ Unsupervised(x))",
        "(∃y ∃z (Unsupervised(y, z))) ⊕ ∀y (∃z (Unsupervised(z, y)))"
      ],
      "fol_conc": "Supervised(r) → Unsupervised(r)",
      "perplexity": 2.926884889602661,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 83
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Doryof the Denomonyeerrytysn",
        "Noodieeiee, daketyee",
        "Yedieaueerrytssin",
        "Douboousneerryttsn"
      ],
      "fol_consts": [
        "Noodieaueerrytns, darlikenny",
        "Ideye eceetonnoysn"
      ],
      "fol_rules": [
        "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns",
        "Culntroydritz"
      ],
      "fol_conc": "/{1. Defor's ougnetonnyeen} + 'couleysnee' to my yere, but noodieeeiesye ikektionkaueerrytssinnoisnt",
      "perplexity": [
        4.177491188049316,
        13.761141777038574
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Diamond Miln(x)",
        "Diamond Miln(y)"
      ],
      "fol_consts": [
        "diamokeeion",
        "damsontourein"
      ],
      "fol_rules": [
        "(Diamond Miln(a)) ∧ (Diamond Miln(i) → Diamond Miln(o143y025ks6f7luezryexcawemnyt, jalleanizeinceimng))"
      ],
      "fol_conc": "Diamond Miln(a) ∧ Diamond Miln(i) → (Diamond Miln(s1eerlizkstorreit, jalneinteiskauef7mynusnt))",
      "perplexity": 22.900686264038086,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMiln/2, DiamondMiln/1.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMiln/2, DiamondMiln/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 84
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium"
      ],
      "fol_rules": [
        "Stable(DiamondMine)",
        "FormedIn(DiamondMine, WWE)",
        "Lead(RoderickStrong, DiamondMine)",
        "Include(DiamondMine, CreedBrothers)",
        "Include(DiamondMine, IvyNile)",
        "Feud(Imperium, DiamondMine)"
      ],
      "fol_conc": "Lead(RoderickStrong, CreedBrothers)",
      "perplexity": [
        1.0776149034500122,
        1.0392404794692993
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)",
        "Professional(x)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "imperium",
        "ivynile",
        "wwe"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Lead(roderickstrong, diamondmine)",
        "Include(diamondmine, creedbrothers)",
        "Include(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)",
        "Professional(diamondmine)"
      ],
      "fol_conc": "Lead(roderickstrong, creedbrothers)",
      "perplexity": 1.2263123989105225,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "HasFeudWith(x, y)"
      ],
      "fol_consts": [
        "Diamond Mine",
        "Roderick Strong",
        "Creed Brothers",
        "Ivy Nile",
        "Imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(Diamond Mine)",
        "Leads(Roderick Strong, Diamond Mine)",
        "Includes(Diamond Mine, Creed Brothers)",
        "Includes(Diamond Mine, Ivy Nile)",
        "HasFeudWith(Imperium, Diamond Mine)"
      ],
      "fol_conc": "Leads(Roderick Strong, Creed Brothers)",
      "perplexity": 1.2106975317001343,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 85
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "e1",
        "m"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "(From(marvin, m) ∧ From(marvin, e1)) ⊕ ¬(From(marvin, mars))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.242605447769165,
        1.9152517318725586
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "(From(mars, x) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x ((Earth(x)) → Human(x))",
        "(Marvin(mars) ∧ ¬From(mars, marvin) ⊕ (From(earth, marvin)))",
        "(¬From(earth, marvin) → Extraterrestrial(marvin))"
      ],
      "fol_conc": "((Marvin(mars) ∧ From(earth, marvin)) → Human(marvin))",
      "perplexity": 1.8097050189971924,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 86
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow",
        "SevereCancer(x)",
        "BileDuctCancer(BDC)",
        "MildFlu(z)",
        "Cholangiocarcinoma(y)",
        "ColorectalCancer(w)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow)",
        "∀x (SevereCancer(x) → Deadly(x))",
        "BileDuctCancer(BDC)",
        "∀y ((Cholangiocarcinoma(y) → BileDuctCancer(BDC)))",
        "∃z (~MildFlu(z))",
        "(∀x ~BileDuctCancer(x)): No one with mild flu has a low survival rate.",
        "∀w ((ColorectalCancer(w) ∧ BileDuctCancer(BDC)) → ¬Deadly(BDC)"
      ],
      "fol_conc": "(∃z (~MildFlu(z) ∧ ~Cholangiocarcinoma(y))) → (BileDuctCancer(BDC) ⊕ Cholangiocarcinoma(y))",
      "perplexity": [
        1.7727313041687012,
        1.1888010501861572
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Deadly(x) → SurvivalRateLow)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(y)",
        "Bileduct(z)",
        "Cholangiocarcinoma(w)",
        "Mildflu(v)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Lowsurvivalrate(x))",
        "∀y (Severe(y) → Deadly(y))",
        "Bileduct(bile)",
        "Cholangiocarcinoma(chol)",
        "∃w ((Mildflu(w) ∧ ¬Lowsurvivalrate(v)))",
        "(Colorectalcolorectalcancer(x) ∧ Lowsurvivalratelowcolorectalcancer(x)) → (¬Bileductx(x, bile))"
      ],
      "fol_conc": "(¬Mildflu(colorectal) ∨ Cholangiocarcinoma(chol)) → Bileduct(bile)",
      "perplexity": 2.4539825916290283,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(y)",
        "SurvivalRateLow(z)"
      ],
      "fol_consts": [
        "colorectal",
        "bileduct"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLow(zy))",
        "∀y (SevereCancer(y) ∧ DeadlyDisease(bileduct))",
        "BileDuctCancer(colorectalcancer)",
        "∃z ((Cholangiocarcinoma(z) → BileDuctCancer(colorectal)))",
        "(MildFlu(rina) → ¬SurvivalRateLow(rinaz))",
        "(DeadlyDisease(biledutccancer) ∧ SurvivalRateLow(surviveratebileductcancerz) → ¬BileDuctCancer(colorectalcancerz))"
      ],
      "fol_conc": "(¬MildFlu(rina) ∧ Cholangiocarcinoma(zinacomponentrinal)) → (DeadlyDisease(biledutccancer) ⊕ BileDuctCancer(z))",
      "perplexity": 2.0727460384368896,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 87
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Web",
        "net"
      ],
      "fol_consts": [
        "webnet]"
      ],
      "fol_rules": [
        "Anything can be found in the internet.",
        "In real life, you need to know how to get out of it."
      ],
      "fol_conc": "There is no magic in the world, and you cannot find any more than the world can get out of a hole!",
      "perplexity": [
        5.188683986663818,
        14.156132698059082
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Anything can be found in the internet."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_consts": [
        "Cricket', 'Tennis','Micropeal.jpg'],                          ----(",
        ")"
      ],
      "fol_rules": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_conc": "Rosy(x) ∧ Rosy(n)",
      "perplexity": 14.295182228088379,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 88
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)",
        "HasGlu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "humans",
        "fever",
        "headache",
        "musclePains",
        "tired",
        "coughing"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccursIn(monkeypoxVirus, humans)",
        "OccursIn(monkeypoxVirus, certainAnimals)",
        "Human(humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "Mammal(certainAnimals)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "FeelTired(x) → HasGlu(x)"
      ],
      "fol_conc": "SymptomOf(coughing, monkeypox)",
      "perplexity": [
        1.1452715396881104,
        1.0182801485061646
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(fever, monkeypox)",
        "Symptom(headache, monkeypox)",
        "Symptom(musclepains, monkeypox)",
        "Symptom(tiredness, monkeypox)",
        "Feel(humans, glu)",
        "Feel(humans, tirednes)"
      ],
      "fol_conc": "Symptom(coughing, monkeypox)",
      "perplexity": 1.252568244934082,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(y, x)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "FeelTired(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox virus",
        "humans",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypox virus)",
        "OccurIn(monkeypox virus, humans)",
        "Mammal(humans)",
        "Animal(humans)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(muscle pains, monkeypox)",
        "SymptomOf(fever, glu)",
        "FeelTired(glu)"
      ],
      "fol_conc": "SymptomOf(c, monkeypox)",
      "perplexity": 1.486334204673767,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 89
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. Annotations, text",
        "1. Intriguing examples]"
      ],
      "fol_consts": [
        "1. No vernaicular language translation"
      ],
      "fol_rules": [
        "It's not written in the language of your native linguistic domain."
      ],
      "fol_conc": "I didn't mean to know what you said. My language only exists at its own vocabulary for pronunciation. No vernaacular translation is necessary!",
      "perplexity": [
        4.11256742477417,
        6.841965198516846
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "It's not written in the language of your native linguistic domain."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Urnteetdrives(x)"
      ],
      "fol_consts": [
        "unkroveidriinn",
        "nextrevittnoisey"
      ],
      "fol_rules": [
        "Unkroystssiueermeoniezaltyoceeionisleeionasmintntnyt09134dritsoyleaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannahttopeiueermeoniezaltyoceesgilryeellytrusntkrogeickeeeionosminttnoiseyeaucheaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromahedniueermeoniezaltyoceesgilryeellytrusntkrogeickeoeioudaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromaethrousntwissttnoiseyeaucheapermeoceeionosmintdritsolemindlinngelryeiltyoltrytodeeinniueerfeiuiueevillyrotteychrefileannaktroseuvltdoleoninegifliinkldttopeiuearneuttaultenetlynunkaresvitsseshoreaverveidriinnandaltyoceeionosmintdritsolemindlinngelryerfiltyroteychrefiveuiiulioudafermeollyrettnoiseyeaucheaperneuttaulnt(i0, i31947)",
        "Liteueermaethlstkrtnvukeeionosmintdruckprobahednieleoninusnycynsuvliinnandaltyoceeshoreaverveidriannandelrysexttnoiseyeaucheaformisttaulnt(i0, i31947)"
      ],
      "fol_conc": "Noctroveidriunkaresvitsseshoreaversexttnoiseyeaucheoceeionosmintdritsolemindlinngelryerfileannaktruckpromaethrousntwisstbyltytoteychregivinniueemidriannandaltryrodeenovolleodrominexideonirneuttaultenettnoiseyeaucheaplldlydoseuvltdtrusthrsseshoreeunzatttbyltytoceeafinnychrefileannaktruckprobaegliinvellnimidriinnandalrysextsubkntsttnoiseyeaucheaplldlypoherneuttaulteetdropeiueerfeuiiulllexodmindlinnglsycynsseshoreeunzattyokeeafinnychrefiveoioukaresvinnahttodeenovolloeleonisliinekrtnviinnandalrysexttnoiseyeaucheaplldlypoherneuttaulteetdropeiueermeomundaeinsudlnt(it, i31947)",
      "perplexity": 9.68288803100586,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "pre-employee(x)"
      ],
      "fol_consts": [
        "",
        ".%0.4192."
      ],
      "fol_rules": [
        "((∀i (pre-employee(n)) ∧ ¬pre-employee()) → pre-employee(n))",
        "((∃u (pre-employee(k)) ⊕ ¬recipient of an organization()))"
      ],
      "fol_conc": "(pre-employee(z) → pre-employee() ∧ ¬pre-employee())",
      "perplexity": 19.352083206176758,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∀i (pre-employee(n)) ∧ ¬pre-employee()) → pre-employee(n))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 90
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxsFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxsFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxsFavorite(x) → VeryFluffy(x))",
        "∀x (MaxsFavorite(x) → LoveToSleep(x))",
        "∀x (VeryFluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(koala) ∧ LoveToSleep(koala) ∧ Quokka(koala)",
      "perplexity": [
        1.0750678777694702,
        1.0203360319137573
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Quokka(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(max, x))",
        "∀x (From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleep(x) ∧ Quokka(x)",
      "perplexity": 1.1229363679885864,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimalOf(x, y)",
        "Animal(x)",
        "IsFrom(x, y)",
        "Fluffy(x)",
        "Sleeps(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x (LovedBy(x, max) → FavoriteAnimalOf(max, x))",
        "∀x (IsFrom(x, australia) → LovedBy(x, max))",
        "∀x (Quokka(x) → IsFrom(x, australia))",
        "∀x (FavoriteAnimalOf(max, x) → Fluffy(x))",
        "∀x (FavoriteAnimalOf(max, x) → Sleeps(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleeps(x) ∧ Quokka(x)",
      "perplexity": 1.351935863494873,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 91
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cevue: Expose secrets, to uncover new things, to solve unknowns"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eartrimet(x)",
        "(n)"
      ],
      "fol_consts": [
        "$1 = x, y.",
        "$1 = x, y."
      ],
      "fol_rules": [
        "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
      ],
      "fol_conc": "(((i) ∧ (d))) → ($1 = x, y.)",
      "perplexity": 14.97048282623291,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 92
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(y)"
      ],
      "fol_consts": [
        "zahadid",
        "max"
      ],
      "fol_rules": [
        "∀x (Timelssess(x) ∧ !MassProductDesign(x)) ∨ (∃y (Evocative(Perfect))), ∀x∈{max}(Max is a mass product design of x and Evocative(Max)), ∃x Timeless(x)",
        "fol_conc",
        "Timeless(zahadid) ∨ Evocative(max)"
      ],
      "fol_conc": "A design by Max is evocative and dreamy.",
      "perplexity": [
        2.7707319259643555,
        2.632500171661377
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Timelssess(x) ∧ !MassProductDesign(x)) ∨ (∃y (Evocative(Perfect))), ∀x∈{max}(Max is a mass product design of x and Evocative(Max)), ∃x Timeless(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Zaha(x)",
        "Kelly(y)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "(∀x ∀y (Design(x, y) → ¬Mass(x)))",
        "(¬(Max(rina)) ∧ Max(kellywearstler)) ∨ ((Zaha(rina) ∨ Kelly(wearstler)) ∧ Evocative(zaha, kelly))"
      ],
      "fol_conc": "Evocative(zaha, max)",
      "perplexity": 3.907809019088745,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hasMassProductDesign(x)",
        "isTimeless(x)"
      ],
      "fol_consts": [
        "max",
        "kellywearstler",
        "zahaihadid"
      ],
      "fol_rules": [
        "∀x (hasMassProductDesign(x) → ¬(isTimeless(x) ∨ isTimeless(kellywearstler)))"
      ],
      "fol_conc": "¬(hasMassProductDesign(max)) ∧ hasMassProductDesign(zahaihadid)",
      "perplexity": 2.9786500930786133,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 93
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock))",
      "perplexity": [
        1.0844471454620361,
        1.0157794952392578
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "((Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock)))",
      "perplexity": 1.150132179260254,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exist(x) ∧ (Animal(x) ∨ Squirrel(x)))",
        "∀x (Animal(x) → Rabbit(x) ⊕ Squirrel(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Exist(rock) ∧ Rabbit(rock) ∧ Squirrel(rock) ∧ Skittish(rock))",
      "perplexity": 1.2314939498901367,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 94
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MachineLearningAlgorithm(x)",
        "SupervisedLearning(x)",
        "UnsupervisedLearning(x)",
        "ReinforcementLearning(x)",
        "RequiresLabeledData(x)",
        "TrainsTextSummarizationModel(x, y)",
        "StateOfTheArtTextSummarizationModel(y)",
        "UsesAlgorithm(z, w)"
      ],
      "fol_consts": [
        "modelA",
        "modelB"
      ],
      "fol_rules": [
        "∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x)))",
        "∀x (UnsupervisedLearning(x) → ¬RequiresLabeledData(x))",
        "∃y (MachineLearningAlgorithm(y) ∧ TrainsTextSummarizationModel(y, modelA))",
        "¬ReinforcementLearning(modelA)",
        "TrainsTextSummarizationModel(y, modelB) → RequiresLabeledData(y)"
      ],
      "fol_conc": "∃z (UsesAlgorithm(modelA, z) ∧ SupervisedLearning(z))",
      "perplexity": [
        1.1975455284118652,
        1.1109434366226196
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Labelled(x)",
        "Trained(y, x)"
      ],
      "fol_consts": [
        "model",
        "stateofarttextsummarizationmodel"
      ],
      "fol_rules": [
        "∀x (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x))",
        "Unsupervised(x) → ¬Labelled(x)",
        "Trained(stateofarttextsummarizationmodel, x)",
        "Reinforcement(y) ∧ Trained(stateofarttextsummarizationmodel, y) → ∃z (Supervised(z))",
        "Labelled(x) ∧ Trained(stateofarttextsummarizationmodel, x)"
      ],
      "fol_conc": "Trained(stateofarttextsummarizationmodel, model) ∧ Supervised(model)",
      "perplexity": 1.398041844367981,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SupervisedLearning(x)",
        "UnsupervisedLearning(x)",
        "ReinforcementLearning(x)",
        "RequiresLabeledData(x)"
      ],
      "fol_consts": [
        "state-of-the-art text summarization model"
      ],
      "fol_rules": [
        "∀x (SupervisedLearning(x)) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x)",
        "UnsupervisedLearning(x) → ¬RequiresLabeledData(x)",
        "TrainedWithMLAlgorithm(state-of-the-art text summarization model)",
        "ReinforcementLearning(state-of-the-art text summarization model) → ∃x (TrainedWithMLAlgorithm(state-of-the-art text summarization model))",
        "RequiresLabeledData(state-of-the-art text summarization model)"
      ],
      "fol_conc": "SupervisedLearning(state-of-the-art text summarization model)",
      "perplexity": 1.6062325239181519,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nSupervisedLearning(State-of-the-artTextSummarizationModel)\n                        ^"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 95
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "FromIstanbul(x)",
        "BeginsWith(x, y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "thirtyFour",
        "thirtyFive"
      ],
      "fol_rules": [
        "∀x (FromIstanbul(x) → BeginsWith(RegistrationPlate(x), thirtyFour))",
        "¬(BeginsWith(x, thirtyFour)) → ¬FromIstanbul(x)",
        "FromIstanbul(RegistrationPlate(joe))",
        "BeginsWith(RegistrationPlate(tom), thirtyFive)",
        "∀x (BeginsWith(x, thirtyFive) → ¬BeginsWith(x, thirtyFour))"
      ],
      "fol_conc": "FromIstanbul(RegistrationPlate(tom))",
      "perplexity": [
        1.1210050582885742,
        1.024549961090088
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (FromIstanbul(x) → BeginsWith(RegistrationPlate(x), thirtyFour))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)",
        "Istanbul(y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "¬(From(x, istanbul)) ∨ Begins(x, 34)",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "From(tom, istanbul)",
      "perplexity": 1.2224282026290894,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "From(x, y)",
        "BeginsWith(x, y)",
        "VehicleRegistrationPlate(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → BeginsWith(x, 34))",
        "¬BeginsWith(x, 34) → ¬From(x, istanbul)",
        "VehicleRegistrationPlate(joe)",
        "From(tom, istanbul)",
        "(BeginsWith(x, 35) → ¬BeginsWith(x, 34))"
      ],
      "fol_conc": "VehicleRegistrationPlate(tom)",
      "perplexity": 1.3346506357192993,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 96
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can't read anything else to get better to be real people who have good enough fun."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 97
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DesignStyle(x)",
        "Timeless(x)",
        "MassProductDesign(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "ByZahaHadid(x)",
        "ByKellyWearstler(x)",
        "ByMax(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (DesignStyle(x) <= ByZahaHadid(x))",
        "̸∀x (MassProductDesign(x) <= Timeless(x))",
        "∀x (DesignStyle(x) → (ByZahaHadid(x) ∨ ByKellyWearstler(x)))",
        "∀x (DesignStyle(x) <= ByKellyWearstler(x))→ Evocative(x)",
        "∀x (DesignStyle(x) <= ByKellyWearstler(x))→ Dreamy(x)",
        "∀x (ByMax(x) <= Timeless(x))→ MassProductDesign(x) <= Evocative(x)"
      ],
      "fol_conc": "\\(ま x (ByMax(x) \\wedge  Evocative(x) \\wedge Dreamy(x))\\)",
      "perplexity": [
        1.2632452249526978,
        1.231821060180664
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DesignStyle(x) <= ByZahaHadid(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Design(y, z)",
        "Massprod(z)",
        "Evocative(w)",
        "Dreamy(v)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀y (Design(zaha, y) → Timeless(y))",
        "¬Timeless(x) ∧ Massprod(x)",
        "(Design(zaha, x) ⊕ Design(kelly, x))",
        "∀y (Design(kelly, y) → Evocative(y))",
        "∀y (Design(kelly, y) → Dreamy(y))",
        "Timeless(w) ∧ Design(max, w) → (Massprod(x) ∧ Design(max, x) ∧ Evocative(x))"
      ],
      "fol_conc": "(Evocative(u) ∧ Dreamy(v))",
      "perplexity": 1.4422979354858398,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zaha hadid",
        "kelly wearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (DesignStyleOfZahaHadid(x) → Timeless(x))",
        "¬MassProductDesign(y) → ¬Timeless(y)",
        "(DesignStyleOfZahaHadid(z) ⊕ DesignStyleOfZahaHadid(k))",
        "∀x (DesignStyleOfZahaHadid(w) → Evocative(w))",
        "∀x (DesignStyleOfZahaHadid(v) → Dreamy(v))"
      ],
      "fol_conc": "(Timeless(m) → (MassProductDesign(m) ∧ Evocative(m)))",
      "perplexity": 1.8487975597381592,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 98
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "∃x (Rina ∧ Drinks(sam, x))",
        "( ∀x ∃y P(x, y) → Drives(y, saml))",
        "]} {",
        "fol_preds: [Dependent(x), Drinks(x), Jokes(x), Unaware(x)],",
        "fol_consts:[rina]",
        "]=",
        "fol_rules: [(∃x Rina ∧ ∀y P( x , y) → Drives(y, sam)), (∀x ∃y Project(y))]",
        "fol_conc':",
        "} {",
        "predicates and constants",
        "- Dependent(x): x is a person dependent on caffeine.",
        "- Drinks(x), Jokes(x), Unaware(x)(existential predicates)",
        "(∈x Rina)- ∀x ∃y P( ( x , y) → Drives(y, sam))",
        "Constants:",
        "- rina: Rina",
        "folding FOL rules",
        "(∀x Drinks(x), Dependent( x ))",
        "(∈x Sam ∧ ∀z Jokes(z))",
        "(sam is either a student and unaware that caffeine is a drug, or neither) ",
        "- ¬ Student(rina) ∨ ¬Unaware ( rina )",
        "(¬ ∃y P(x,y))( Dependent( x ), saml)",
        " Rina: Either a project done using Mac Computer or written in Python",
        ", ∀x ((Use(sam, mac)(Song(y))))  ",
        "fol_preds",
        " fol_consts",
        "fol_rules",
        "fol_conc"
      ],
      "fol_conc": "∃(Project(x) ∧ Drives (y, sam))",
      "perplexity": [
        2.5239131450653076,
        4.93002462387085
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Rina ∧ Drinks(sam, x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Good(x)",
        "Bad(y)",
        "Fights(z)"
      ],
      "fol_consts": [
        "superhero",
        "digby"
      ],
      "fol_rules": [
        "(∃y (Bad(y) ∧ ¬Fighting(digby, y)))",
        "(Superhero(superhero) → ((Good(neighbor) ∨ Bad(nice)) ∧ Fighting(superhero, good)))"
      ],
      "fol_conc": "Digby(nice) ⊕ Digby(fight)",
      "perplexity": 4.25177526473999,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsCharacter(x, y)",
        "IsCharacter(x)",
        "IsCharacter(y)"
      ],
      "fol_consts": [
        "superhero movies",
        "superhero movies",
        "superhero movies"
      ],
      "fol_rules": [
        "∀x (IsCharacter(superhero movies, x)) → IsCharacter(x)",
        "(NamedByMovie(superhero movies, y) ∧ IsCharacter(y))"
      ],
      "fol_conc": "(NamedByMovie(superhero movies, x) ∨ ¬IsCharacter(x))",
      "perplexity": 18.202966690063477,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsCharacter/2, IsCharacter/1.\n\n\nFatal error:  The following symbols are used with multiple arities: IsCharacter/2, IsCharacter/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 99
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. Annotations, text",
        "1. Intriguing examples]"
      ],
      "fol_consts": [
        "1. No vernaicular language translation"
      ],
      "fol_rules": [
        "It's not written in the language of your native linguistic domain."
      ],
      "fol_conc": "I didn't mean to know what you said. My language only exists at its own vocabulary for pronunciation. No vernaacular translation is necessary!",
      "perplexity": [
        4.11256742477417,
        6.841965198516846
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "It's not written in the language of your native linguistic domain."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Urnteetdrives(x)"
      ],
      "fol_consts": [
        "unkroveidriinn",
        "nextrevittnoisey"
      ],
      "fol_rules": [
        "Unkroystssiueermeoniezaltyoceeionisleeionasmintntnyt09134dritsoyleaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannahttopeiueermeoniezaltyoceesgilryeellytrusntkrogeickeeeionosminttnoiseyeaucheaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromahedniueermeoniezaltyoceesgilryeellytrusntkrogeickeoeioudaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromaethrousntwissttnoiseyeaucheapermeoceeionosmintdritsolemindlinngelryeiltyoltrytodeeinniueerfeiuiueevillyrotteychrefileannaktroseuvltdoleoninegifliinkldttopeiuearneuttaultenetlynunkaresvitsseshoreaverveidriinnandaltyoceeionosmintdritsolemindlinngelryerfiltyroteychrefiveuiiulioudafermeollyrettnoiseyeaucheaperneuttaulnt(i0, i31947)",
        "Liteueermaethlstkrtnvukeeionosmintdruckprobahednieleoninusnycynsuvliinnandaltyoceeshoreaverveidriannandelrysexttnoiseyeaucheaformisttaulnt(i0, i31947)"
      ],
      "fol_conc": "Noctroveidriunkaresvitsseshoreaversexttnoiseyeaucheoceeionosmintdritsolemindlinngelryerfileannaktruckpromaethrousntwisstbyltytoteychregivinniueemidriannandaltryrodeenovolleodrominexideonirneuttaultenettnoiseyeaucheaplldlydoseuvltdtrusthrsseshoreeunzatttbyltytoceeafinnychrefileannaktruckprobaegliinvellnimidriinnandalrysextsubkntsttnoiseyeaucheaplldlypoherneuttaulteetdropeiueerfeuiiulllexodmindlinnglsycynsseshoreeunzattyokeeafinnychrefiveoioukaresvinnahttodeenovolloeleonisliinekrtnviinnandalrysexttnoiseyeaucheaplldlypoherneuttaulteetdropeiueermeomundaeinsudlnt(it, i31947)",
      "perplexity": 9.68288803100586,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "pre-employee(x)"
      ],
      "fol_consts": [
        "",
        ".%0.4192."
      ],
      "fol_rules": [
        "((∀i (pre-employee(n)) ∧ ¬pre-employee()) → pre-employee(n))",
        "((∃u (pre-employee(k)) ⊕ ¬recipient of an organization()))"
      ],
      "fol_conc": "(pre-employee(z) → pre-employee() ∧ ¬pre-employee())",
      "perplexity": 19.352083206176758,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∀i (pre-employee(n)) ∧ ¬pre-employee()) → pre-employee(n))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 100
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium"
      ],
      "fol_rules": [
        "Stable(DiamondMine)",
        "FormedIn(DiamondMine, WWE)",
        "Lead(RoderickStrong, DiamondMine)",
        "Include(DiamondMine, CreedBrothers)",
        "Include(DiamondMine, IvyNile)",
        "Feud(Imperium, DiamondMine)"
      ],
      "fol_conc": "Lead(RoderickStrong, CreedBrothers)",
      "perplexity": [
        1.0776149034500122,
        1.0392404794692993
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)",
        "Professional(x)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "imperium",
        "ivynile",
        "wwe"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Lead(roderickstrong, diamondmine)",
        "Include(diamondmine, creedbrothers)",
        "Include(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)",
        "Professional(diamondmine)"
      ],
      "fol_conc": "Lead(roderickstrong, creedbrothers)",
      "perplexity": 1.2263123989105225,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "HasFeudWith(x, y)"
      ],
      "fol_consts": [
        "Diamond Mine",
        "Roderick Strong",
        "Creed Brothers",
        "Ivy Nile",
        "Imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(Diamond Mine)",
        "Leads(Roderick Strong, Diamond Mine)",
        "Includes(Diamond Mine, Creed Brothers)",
        "Includes(Diamond Mine, Ivy Nile)",
        "HasFeudWith(Imperium, Diamond Mine)"
      ],
      "fol_conc": "Leads(Roderick Strong, Creed Brothers)",
      "perplexity": 1.2106975317001343,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 101
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wings(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) → Monkey(x)) ⊕ (Animal(x) → Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wings(x))",
        "((¬Fly(Rock) ∧ ¬Bird(Rock)) → (¬Fly(Rock) ∧ ¬Breathe(Rock)))"
      ],
      "fol_conc": "Wings(Rock)",
      "perplexity": [
        1.0702742338180542,
        1.0497606992721558
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) ∧ ¬Bird(x)) → Monkey(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "(¬Fly(rock) ∧ ¬Bird(rock)) → ((¬Fly(rock) ∨ ¬Breathe(rock)))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.206965446472168,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Bird(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock",
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Bird(x))",
        "∀x (Fly(x) → HasWings(x))"
      ],
      "fol_conc": "(¬Bird(rock) ⊕ ¬Fly(rock)) → (HasWings(rock))",
      "perplexity": 1.6487127542495728,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 102
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxsFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxsFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxsFavorite(x) → VeryFluffy(x))",
        "∀x (MaxsFavorite(x) → LoveToSleep(x))",
        "∀x (VeryFluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(koala) ∧ LoveToSleep(koala) ∧ Quokka(koala)",
      "perplexity": [
        1.0750678777694702,
        1.0203360319137573
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Quokka(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(max, x))",
        "∀x (From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleep(x) ∧ Quokka(x)",
      "perplexity": 1.1229363679885864,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimalOf(x, y)",
        "Animal(x)",
        "IsFrom(x, y)",
        "Fluffy(x)",
        "Sleeps(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x (LovedBy(x, max) → FavoriteAnimalOf(max, x))",
        "∀x (IsFrom(x, australia) → LovedBy(x, max))",
        "∀x (Quokka(x) → IsFrom(x, australia))",
        "∀x (FavoriteAnimalOf(max, x) → Fluffy(x))",
        "∀x (FavoriteAnimalOf(max, x) → Sleeps(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleeps(x) ∧ Quokka(x)",
      "perplexity": 1.351935863494873,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 103
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sitcom(x)",
        "Star(x, y)",
        "Pilot(x, y)",
        "WorkingTitle(x, y)",
        "ScriptEditor(x, y)",
        "Member(x, y)",
        "Channel(x)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "bbc_two",
        "bbc_three",
        "andrew_collins",
        "secret_dude_society",
        "july_2013"
      ],
      "fol_rules": [
        "Sitcom(badults)",
        "∃x (Member(x, pappys) ∧ Star(x, badults))",
        "Pilot(badults, bbc_three)",
        "WorkingTitle(badults, secret_dude_society)",
        "ScriptEditor(badults, andrew_collins)"
      ],
      "fol_conc": "∀x ((Member(x, pappys) ∧ (Pilot(badults, bbc_three) ⊕ Pilot(badults, bbc_two))) → False)",
      "perplexity": [
        1.3281742334365845,
        1.208306074142456
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((Member(x, pappys) ∧ (Pilot(badults, bbc_three) ⊕ Pilot(badults, bbc_two))) → False)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Series(x)",
        "Starring(x, y)",
        "Piloted(x, y)",
        "Title(x, y)",
        "Editor(x, y)",
        "Member(x, y)",
        "Show(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "andrewcollins",
        "july2013",
        "bbcthree",
        "bbctwo"
      ],
      "fol_rules": [
        "Series(badults)",
        "Starring(badults, pappys)",
        "Piloted(badults, july2013)",
        "Title(badults, thesecretduedesociety)",
        "Editor(badults, andrewcollins)"
      ],
      "fol_conc": "¬(∃x (Member(x, pappys) ∧ Show(x, y) ∧ (Piloted(y, bbcthree) ∨ Piloted(y, bbctwo))))",
      "perplexity": 1.309848427772522,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BritishSitcom(x)",
        "StarIn(x, y)",
        "PilotedOn(x, y)",
        "WorkingTitleFor(x, y)",
        "StarIn(y, z)"
      ],
      "fol_consts": [
        "badults",
        "andrew collins",
        "july 2013",
        "bbc three",
        "the secret dude society",
        "bbc two",
        "bbc three",
        "bbc two",
        "andrew collins",
        "bbc three",
        "andrew collins",
        "bbc three"
      ],
      "fol_rules": [
        "BritishSitcom(badults) ∧ StarIn(badults, p) → WorkingTitleFor(p, the secret dude society)",
        "PilotedOn(badults, july 2013) ∧ PilotedOn(badults, bbc three)",
        "WorkingTitleFor(badults, the secret dude society)",
        "(StarIn(x, andrew collins)) ⊕ ¬(BritishSitcom(x) → (PilotedOn(x, bbc two) ∨ PilotedOn(x, bbc three)))"
      ],
      "fol_conc": "¬((StarIn(y, z) ∧ BritishSitcom(z)) ∧ PilotedOn(z, bbc two) ∨ PilotedOn(z, bbc three))",
      "perplexity": 2.6001479625701904,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 104
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked_by_melissa",
        "dried_thai_chilies"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "ProductOf(dried_thai_chilies, baked_by_melissa)",
      "perplexity": [
        1.063886046409607,
        1.0164775848388672
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Product(x, y)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) ∨ ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthai) ∨ Bakery(driedthai) → (Hotpot(driedthai) ∨ Spicy(driedthai))"
      ],
      "fol_conc": "Product(driedthai, bakedbymelissa)",
      "perplexity": 1.2264339923858643,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried thai chilies",
        "baked by melissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "ProductOf(dried thai chilies, baked by melissa)",
      "perplexity": 1.0802934169769287,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 105
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium"
      ],
      "fol_rules": [
        "Stable(DiamondMine)",
        "FormedIn(DiamondMine, WWE)",
        "Lead(RoderickStrong, DiamondMine)",
        "Include(DiamondMine, CreedBrothers)",
        "Include(DiamondMine, IvyNile)",
        "Feud(Imperium, DiamondMine)"
      ],
      "fol_conc": "Lead(RoderickStrong, CreedBrothers)",
      "perplexity": [
        1.0776149034500122,
        1.0392404794692993
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)",
        "Professional(x)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "imperium",
        "ivynile",
        "wwe"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Lead(roderickstrong, diamondmine)",
        "Include(diamondmine, creedbrothers)",
        "Include(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)",
        "Professional(diamondmine)"
      ],
      "fol_conc": "Lead(roderickstrong, creedbrothers)",
      "perplexity": 1.2263123989105225,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "HasFeudWith(x, y)"
      ],
      "fol_consts": [
        "Diamond Mine",
        "Roderick Strong",
        "Creed Brothers",
        "Ivy Nile",
        "Imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(Diamond Mine)",
        "Leads(Roderick Strong, Diamond Mine)",
        "Includes(Diamond Mine, Creed Brothers)",
        "Includes(Diamond Mine, Ivy Nile)",
        "HasFeudWith(Imperium, Diamond Mine)"
      ],
      "fol_conc": "Leads(Roderick Strong, Creed Brothers)",
      "perplexity": 1.2106975317001343,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 106
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "AmericanCity(x)",
        "NovelWriter(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "boston",
        "american_city",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "American(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets) ∧ WrittenBy(family_secrets, dani_shapiro)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0698050260543823,
        1.0086348056793213
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Written(x, y)",
        "Born(x, y)",
        "American(x)",
        "Writer(x)",
        "Novelwriter(x)"
      ],
      "fol_consts": [
        "familyhistory",
        "familyssecrets",
        "danishapiro",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x (Novel(x) ∧ Written(x, y) → Novelwriter(y))",
        "Writer(danishapiro)",
        "Written(familyhistory, danishapiro)",
        "Novel(familyhistory) ∧ Written(familyhistory, 2003)",
        "Podcast(familyssecrets) ∧ Written(familyssecrets, danishapiro)",
        "Born(boston, americancity)"
      ],
      "fol_conc": "Novel(familyssecrets)",
      "perplexity": 1.168009877204895,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "Writer(x)",
        "Novel(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "american_city",
        "boston",
        "american_city",
        "family_secrets"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → Writer(y))",
        "Writer(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets)",
        "BornIn(boston, american_city)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": 1.1994197368621826,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 107
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sad(x)",
        "Happy(e)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀e ∀x (Sad(e) ∧ Event(x)) ∨ ∃x (∃y ∈ e: Sad(y))]}, {",
        "fol_conc",
        "}"
      ],
      "fol_conc": "All events are sad.",
      "perplexity": [
        2.4045958518981934,
        8.124675750732422
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀e ∀x (Sad(e) ∧ Event(x)) ∨ ∃x (∃y ∈ e: Sad(y))]}, {"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "event"
      ],
      "fol_rules": [
        "∀x (Event(x) → Happy(x))",
        "(Atleast(x, event1)) ∨ ((Atleast(x, event2)) ∧ (∃y (Event(y))))"
      ],
      "fol_conc": "All(event) ⊕ None(sad)",
      "perplexity": 4.139740467071533,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Event/1, Event/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Event/1, Event/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Event(x)",
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "happy",
        "sad"
      ],
      "fol_rules": [
        "∀x (Event(x) → Happy(x))",
        "(∃x ∃y ∃z (Event(y, z) ∧ Event(z, y))) ∨ ∀x (Event(x) ∨ Sad(x))",
        "(Sad(r) ⊕ Happy(r)) → ¬(Happy(r) ∨ Sad(r))"
      ],
      "fol_conc": "¬Sad(r)",
      "perplexity": 2.8914854526519775,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Event/2, Event/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Event/2, Event/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 108
  },
  {
    "id": 110,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Spills(x)",
        "Tidy(x)",
        "Foodie(x)",
        "GoesOut(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spills(x) → ¬(Tidy(x)))",
        "∀x (Foodie(x) ∧ GoesOut(x) → Spills(x))",
        "∀x (OnlyChild(x) → Tidy(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spills(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spills(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ GoesOut(peter) ∧ HighIncome(peter)) ⊕ (Foodie(peter) ∧ GoesOut(peter) ∧ ¬HighIncome(peter))",
      "perplexity": [
        1.0504392385482788,
        1.018892765045166
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Goout(x)",
        "Onlychild(x)",
        "Busy(x)",
        "Highincome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x) ∧ Enjoy(x)))",
        "∀x (Foodie(x) ∧ Goout(x) → Spill(x))",
        "∀x (Onlychild(x) → (Tidy(x) ∧ Enjoy(x)))",
        "∀x (Busy(parentx) → Onlychild(x))",
        "∀x (Highincome(x) → Busy(parentx))",
        "(Spill(peter) ∧ Onlychild(peter)) ⊕ ¬(Spill(peter) ∨ Onlychild(peter))"
      ],
      "fol_conc": "((Foodie(peter) ∧ Goout(peter)) ∧ Highincome(household)) ⊕ ¬((Foodie(peter) ∧ Goout(peter)) ∧ Highincome(household))",
      "perplexity": 1.2081491947174072,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "GoOutFrequently(x, y)",
        "OnlyChild(x)",
        "BusyJobParent(x)",
        "HighNetIncomeHousehold(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ ¬EnjoyCleaning(x))",
        "∀x (Foodie(x) ∧ GoOutFrequently(x, restaurants) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "∀x (BusyJobParent(x) → OnlyChild(x))",
        "∀x (HighNetIncomeHousehold(x) → BusyJobParent(x))",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "((Foodie(peter) ∧ GoOutFrequently(peter, restaurants) ∧ HighNetIncomeHousehold(x)) ∨ (Foodie(peter) ∧ GoOutFrequently(peter, restaurants) ∧ ¬HighNetIncomeHousehold(x)))",
      "perplexity": 1.0985482931137085,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 109
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "InState(y, z)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "∀x (City(x) → ¬InState(billings, montana))",
        "∀y (City(y) → InState(butte, y) ⊕ InState(missoula, y) ⊕ InState(helena, y))",
        "City(x) → ¬InState(billings, x)",
        "∀z (InState(pierre, z))"
      ],
      "fol_conc": "InState(helena, montana)",
      "perplexity": [
        1.5960510969161987,
        1.155189871788025
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "State(y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre",
        "bismarck"
      ],
      "fol_rules": [
        "City(billings)",
        "In(billings, montana) ∧ In(butte, montana) ∧ In(helena, montana) ∧ In(missoula, montana)",
        "State(y) → (∃x ((City(x)) ∧ In(x, y)))",
        "(State(y1) ∧ State(y2)) ⊕ (In(a, y1) ∨ In(b, y2))",
        "In(white, butte)",
        "¬In(pierre, montana)",
        "(∃x ((City(x)) → ¬In(x, pierre)))"
      ],
      "fol_conc": "State(y1) ∧ State(y2)",
      "perplexity": 1.9194307327270508,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CityInState(x, y)",
        "CityInState(x)",
        "NotInState(y)",
        "CityInState(z)",
        "NotInState(u)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "whitesulphursprings"
      ],
      "fol_rules": [
        "CityInState(billings, montana)",
        "∀x (CityInState(x) ∧ CityInState(y)) → (CityInState(butte) ∨ CityInState(helena) ∨ CityInState(missoula))",
        "CityInState(whitesulphursprings)",
        "NotInState(pierre, montana)",
        "NotInState(x)"
      ],
      "fol_conc": "CityInState(pierre, state)",
      "perplexity": 2.090029716491699,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NotInState/1, NotInState/2, CityInState/1, CityInState/2.\n\n\nFatal error:  The following symbols are used with multiple arities: NotInState/1, NotInState/2, CityInState/1, CityInState/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 110
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "StreamingService(1984) → HardcoverBook(1984)"
      ],
      "fol_conc": "StreamingService(1984): 1984 is a streaming service.",
      "perplexity": [
        1.098854422569275,
        1.1216514110565186
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "StreamingService(1984): 1984 is a streaming service."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "nineteeneightyfour",
        "streamingservice"
      ],
      "fol_rules": [
        "¬(∃x (Digital(x))) ∧ Analog(x)",
        "(Printed(x)) → Analog(x)",
        "(Streaming(x) → Digital(x))"
      ],
      "fol_conc": "Streaming(nineteeneightyfour)",
      "perplexity": 1.8831857442855835,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬(Digital(x) → Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "(StreamingService(1984) → HardcoverBook(1984))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": 1.1392617225646973,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 111
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "Tall(y)",
        "WearsLargeShoes(z)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (All basketball players are tall)"
      ],
      "fol_conc": "Not DoesProject(sam) ∨ WearsLargeShoes(sam)",
      "perplexity": [
        3.818885087966919,
        2.5007922649383545
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (All basketball players are tall)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)"
      ],
      "fol_consts": [
        "rina",
        "yuri"
      ],
      "fol_rules": [
        "(∃x (Drink(x)) → Dependent(rinta))",
        "(∀x (Drink(x) → Joke(x)))"
      ],
      "fol_conc": "Jokes(yuri)",
      "perplexity": 3.0756802558898926,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NotAm(x)",
        "Tall(x)",
        "NotAm(yuri)"
      ],
      "fol_consts": [
        "yuri",
        "yuri"
      ],
      "fol_rules": [
        "∀x (NotAm(x)) → ¬(NotAm(yuri) ∨ Tall(yuri))",
        "(Tall(yuri) ∧ NotAm(yuri)) ⊕ NotAm(t)"
      ],
      "fol_conc": "¬NotAm(yuri)",
      "perplexity": 6.287996292114258,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 112
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x)",
        "ManMade(x)",
        "ArtificialIntelligence(x, y)",
        "Created(Alice, x)"
      ],
      "fol_consts": [
        "Alice",
        "Computer"
      ],
      "fol_rules": [
        "(∀x ((Created(x)) → (ManMade(Computer(x)))) ∨ (∃x (ManMade(Created(Alice, x))))",
        "$(¬Exists(y)(ArtificialIntelligence(y, Computer(sam))) ∧ Created(sam, y))"
      ],
      "fol_conc": "IsGrandSlam(Djokovic, x): The status of being the grand slam champion for Djokovic = true or false",
      "perplexity": [
        2.979233980178833,
        2.5362324714660645
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x ((Created(x)) → (ManMade(Computer(x)))) ∨ (∃x (ManMade(Created(Alice, x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "grandchampion",
        "oaccer",
        "tennisplayer",
        "celebrity",
        "athlete",
        "paid",
        "famous",
        "taxhaven"
      ],
      "fol_rules": [
        "(∀x (Person(x))) ⊕ (Is(celebrity, x))",
        "(Grandchampion(x) ∧ Is(tennisplayer, x))"
      ],
      "fol_conc": "If(djokovic) → If(famous, then, live, in, taxhaven)",
      "perplexity": 3.6547248363494873,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: If/5, If/1.\n\n\nFatal error:  The following symbols are used with multiple arities: If/5, If/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlam(x)",
        "OscarNominated(x)",
        "GrandSlam(champion)"
      ],
      "fol_consts": [
        "johndokovic",
        "tennisplayer",
        "actor"
      ],
      "fol_rules": [
        "∀x (GrandSlam(x)) → (GrandSlam(champion) ∧ (GrandSlam(champion) ∨ OscarNominated(x)))",
        "(OscarNominated(actor)) ⊕ GrandSlam(athlete)",
        "(OscarNominated(actor)) ⊕ GrandSlam(player)"
      ],
      "fol_conc": "¬(GrandSlam(johndokovic) ∧ (GrandSlam(johndokovic) ∨ OscarNominated(johndokovic)))",
      "perplexity": 2.873694658279419,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 113
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(djokovic)",
      "perplexity": [
        1.0438159704208374,
        1.0163722038269043
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic",
        "taxhaven"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ∨ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Livesin(x, taxhaven))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, taxhaven)"
      ],
      "fol_conc": "Livesin(djokovic, taxhaven)",
      "perplexity": 1.1575440168380737,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Athlete(x)",
        "Celebrity(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "Djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "Famous(Djokovic) ∧ Athlete(Djokovic) → LivesInTaxHaven(Djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(Djokovic)",
      "perplexity": 1.045016884803772,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 114
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space(x)",
        "Duster(x)",
        "HouseholdAppliance(x)"
      ],
      "fol_consts": [
        "space",
        "plunger",
        "vacuum",
        "vampire",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Space(space)",
        "Vacuum(vacuum)",
        "¬Suck(duster)",
        "HouseholdAppliance(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": [
        1.1055251359939575,
        1.0262552499771118
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Household(x)",
        "Appliance(x)",
        "Isin(x, y)"
      ],
      "fol_consts": [
        "space",
        "plunger",
        "vacuum",
        "vampire",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "Household(duster)",
        "Appliance(duster)",
        "¬Suck(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.3384466171264648,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "HouseholdAppliance(x)",
        "IsSpace(x)"
      ],
      "fol_consts": [
        "plungers",
        "vacuums",
        "vampires",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plungers)",
        "Suck(vacuums)",
        "Suck(vampires)",
        "Vacuum(space)",
        "HouseholdAppliance(duster)",
        "¬Suck(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.4131101369857788,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 115
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SitcomSeries(x)",
        "StarredInByMembersOfPappys(y, z)",
        "PilotedOn(series_name, channel)",
        "WorkingTitle(script_title, title)",
        "ScriptEditor(script_editor, script)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "july2013",
        "bbc_three: BBC Three (the channel)",
        "the_secret_dude_society: The working title \"The Secret Dude Society\"",
        "andrew_collins"
      ],
      "fol_rules": [
        "∀x ((SitcomSeries(x) ∧ StarredInByMembersOfPappys(badults, x))) : Badults is a British sitcom series starring members of Pappy’s group.",
        "PilotedOn(badults, bbc_three): The Working title \"The Secret Dude Society\" was used for Badults.",
        "ScriptEditor(andrew_collins, badults) : Andrew Collins was the script editor for Badults."
      ],
      "fol_conc": "∃series ((SitcomSeries(badults)) ∧ (PilotedOn(badults, bbc_three))) → WorkingTitle(script_title, \"The Secret Dude Society\")",
      "perplexity": [
        1.599941611289978,
        1.1940125226974487
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((SitcomSeries(x) ∧ StarredInByMembersOfPappys(badults, x))) : Badults is a British sitcom series starring members of Pappy’s group."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Series(x)",
        "Pilot(x, z)",
        "Scripted(z)",
        "Workingtitle(x)",
        "British(x)"
      ],
      "fol_consts": [
        "badults",
        "andrewcollins"
      ],
      "fol_rules": [
        "∃z (Badults(z))",
        "Is(badults, british)",
        "Pilot(badults, ickle2013)",
        "Scripted(andrewcollins)",
        "Workingtitle(badults)",
        "British(series)",
        "Illustrate(x)"
      ],
      "fol_conc": "∃z (Series(z) ∧ Workingtitle(z))",
      "perplexity": 3.02978777885437,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Series/1, Series/0, British/1, British/0, Badults/1, Badults/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Series/1, Series/0, British/1, British/0, Badults/1, Badults/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Series(x)",
        "Piloted(y, x)",
        "ScriptEditor(z, w)"
      ],
      "fol_consts": [
        "badults",
        "andrewcollins"
      ],
      "fol_rules": [
        "∃x (Series(badults) ∧ Piloted(july2013, badults))",
        "∃w ((Series(badults) ∧ ScriptEditor(andrewcollins, w))) → ¬Piloted(m, n)"
      ],
      "fol_conc": "ScriptEditor(andrewcollins, x) ∧ ∃y (Series(z) ∧ Piloted(y, z))",
      "perplexity": 1.819085717201233,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 116
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Island(x)",
        "PartOf(x, y)",
        "Antarctic(x)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "south_shetland_islands",
        "greenwich_island",
        "deception_island",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "Island(snow_island)",
        "PartOf(snow_island, south_shetland_islands)",
        "Island(greenwich_island)",
        "PartOf(greenwich_island, south_shetland_islands)",
        "Island(deception_island)",
        "PartOf(deception_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "∀x (Island(x) ∧ PartOf(x, antarctica) → NamedAfter(x, barutin))",
      "perplexity": [
        1.0480796098709106,
        1.0053696632385254
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutincove",
        "barutin",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Located(snowisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "∀x (Part(x, antarctica) → Named(x, barutin))",
      "perplexity": 1.2119146585464478,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Island(x)"
      ],
      "fol_consts": [
        "barutin cove",
        "bulgarian settlement of barutin",
        "snow island",
        "greenwich island",
        "deception island",
        "south shetland islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin cove, bulgarian settlement of barutin)",
        "LocatedIn(barutin cove, snow island)",
        "LocatedIn(snow island, south shetland islands)",
        "Island(snow island)",
        "Island(greenwich island)",
        "Island(deception island)",
        "LocatedIn(south shetland islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬(∃x (Island(x) ∧ ¬NamedAfter(x, barutin cove)))",
      "perplexity": 1.1203680038452148,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 117
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PersonX"
      ],
      "fol_consts": [
        " Person X"
      ],
      "fol_rules": [],
      "fol_conc": "Person X is a friend of Person X and Person Y. Person X is an apple.",
      "perplexity": [
        2.6581013202667236,
        6.358364105224609
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Person X is a friend of Person X and Person Y. Person X is an apple."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "trimor, rivroed.(n)"
      ],
      "fol_consts": [
        "$n$",
        "$n$"
      ],
      "fol_rules": [
        "trimor, rivroed.($n$, $n$)"
      ],
      "fol_conc": "((∀k ∃x (coutin(i))) ⊕ ¬trimor, rivroed.(o, i))",
      "perplexity": 25.573078155517578,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "trimor, rivroed.($n$, $n$)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 118
  },
  {
    "id": 131,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "HasWedding(x)",
        "TravelToParisForHoneymoon(x)",
        "OccursInJuly(x)",
        "IsWellAttended(x)",
        "Child(x, y)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (HasWedding(x) → ∃y (Child(y, x)) )",
        "∀x (TravelToParisForHoneymoon(x) → HasWedding(x))",
        "∀x ((OccursInJuly(x)) → TravelToParisForHoneymoon(x))",
        "∃x (IsWellAttended(x) ∧ OccursInJuly(x)) ",
        "¬(HasChild(john)) → (∨ (¬TravelToParisForHoneymoon(john) ∨ ¬HasWedding(john)))",
        "∀x ((IsWellAttended(x) ∧ HasWedding(x)) → (∃y (OccursInJuly(y)) ∨ ¬TravelToParisForHoneymoon(john)))"
      ],
      "fol_conc": "¬(IsWellAttended(x) ∧ HasWedding(x)) ∨ ¬ TravelToParisForHoneymoon (john)",
      "perplexity": [
        1.5327892303466797,
        1.1503568887710571
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "¬(HasChild(john)) → (∨ (¬TravelToParisForHoneymoon(john) ∨ ¬HasWedding(john)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Haschild(x, y)",
        "Wedding(x)",
        "Travelto(x, z)",
        "Honeymoon(z)",
        "Month(july)",
        "Attended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Haschild(x, urs1) → Haschild(x, urs2))",
        "∀x (Travelto(x, paris) ∧ Honeymoon(z) → Wedding(x))",
        "∀x (Wedding(x) ∧ Month(july) → Travelto(x, paris))",
        "(Attended(urs3) ∧ ∃x (Wedding(x) ∧ Attended(x))) ⊕ ¬(Month(july))",
        "Haschild(john, urs1) → ¬Travelto(john, paris) ∧ ¬Wedding(john)",
        "∀x (Wedding(x) ∧ Attended(x) → (∃z (Wedding(z) ∧ Month(july)) ∨ ¬Exists(z, z)))"
      ],
      "fol_conc": "(Attended(urs3) ∧ Wedding(urs4)) ⊕ Travelto(john, paris)",
      "perplexity": 1.9083715677261353,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WeddingOf(x, y)",
        "HasChild(y, x)"
      ],
      "fol_consts": [
        "john",
        "july",
        "july"
      ],
      "fol_rules": [
        "(∀x (Person(x))) → ((¬Person(x)) ∧ HasChild(john, x))",
        "(∃z ∃w (∀v (((WeddingOf(v) ∨ WeddingOf(w)) ⊕ Person(z)))) → ∀y ((HasChild(y, john)) ↔ ¬Travel(f, w)))",
        "(∀x (WeddingOf(x, y) ∧ Travel(t, x) ∧ HasChild(john, t) ∨ ¬Person(john) ∨ WeddingOf(w, july)))",
        "¬((HasChild(z, z) → ((HasChild(y)) ⊕ Person(n))))",
        "(∃y (WeddingOf(v, y) ∧ AttendedBy(x) ∧ HasChild(john, t) ∨ ¬Person(john)) ↔ (∀x (((¬AttendedBy(w))) ∨ Travel(z, w))) → ((HasChild(y)) ⊕ Person(n)) ∨ ∀z (Travel(t, z) ∧ WeddingOf(v, y) → Travel(f, n)))"
      ],
      "fol_conc": "WeddingOf(john) ∨ ¬Person(john)",
      "perplexity": 11.472031593322754,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasChild/1, HasChild/2, WeddingOf/2, WeddingOf/1.\n\n\nFatal error:  The following symbols are used with multiple arities: HasChild/1, HasChild/2, WeddingOf/2, WeddingOf/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 119
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "TravelToParisForHoneymoon(x)"
      ],
      "fol_consts": [
        "John"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        ", ∀x ((TravelToParisForHoneymoon(x) ∧ Wedding(x)))",
        "\n\t ∀x ((WeddingsInJuly(x) ∧ TravelToParisForHoneyMoon(x)) )",
        "∃x (AttendCelebration(John, x))"
      ],
      "fol_conc": "Child(John)",
      "perplexity": [
        2.152742624282837,
        1.8305162191390991
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", ∀x ((TravelToParisForHoneymoon(x) ∧ Wedding(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Travels(x, y)",
        "Wedding(y)",
        "Child(x)",
        "July(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Has(x, wedding)) ∧ Has(x, child) → False(travels, paris)",
        "∀x (Travels(x, paris) ∧ Wedding(y) → Ybejuly(y))",
        "(Child(j) → ¬Travels(john, paris) ∧ No(wedding))",
        "Some(weds) ∨ Wellattended(weds) ∧ Johnhasweddings(weds)",
        "(Wellattended(weds) → (Johnhasweddings(weds) ∧ July(weds))) ∧ False(travels, paris)",
        "∀x (Has(x, wedding) ∧ Child(x) → Travels(john, paris))"
      ],
      "fol_conc": "False(travels, paris)",
      "perplexity": 2.33038330078125,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Child/1, Child/0, Wedding/1, Wedding/0, Travels/2, Travels/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Child/1, Child/0, Wedding/1, Wedding/0, Travels/2, Travels/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasChild(x)",
        "TravelToParisForHoneymoon(x)",
        "HappensInMonth(x, y)",
        "AttendsWedding(x)",
        "HasChild(y)"
      ],
      "fol_consts": [
        "John",
        "July"
      ],
      "fol_rules": [
        "(∀x (HasChild(x) → TravelToParisForHoneymoon(x)) ∧ HasChild(x)) ∨ ∀x ((TravelToParisForHoneymoon(x) → HasChild(y)))",
        "HappensInMonth(July, x)",
        "(∀x (AttendsWedding(x) ∧ HappensInMonth(July, y))) ∨ ∃x (HasChild(John) ∧ TravelToParisForHoneymoon(John))",
        "(∀x ((HasChild(x) → HasChild(y))) ∧ (HappensInMonth(July, x) ∨ HappensInMonth(July, y)) ∧ AttendsWedding(x))"
      ],
      "fol_conc": "(∃x (HasChild(x)))",
      "perplexity": 2.2648494243621826,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 120
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "[e3.5/21,14.50]"
      ],
      "fol_consts": [
        "_",
        "[a3.5/81,16.50]",
        "19.9:11.76",
        "4.31:22.70",
        "5.72:21.39"
      ],
      "fol_rules": [
        "e3.5/11],"
      ],
      "fol_conc": "The world's most expensive ice cream.",
      "perplexity": [
        4.81779670715332,
        7.5987348556518555
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "e3.5/11],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Larryity(x)",
        "Gannity(x)",
        "Kinty(x)"
      ],
      "fol_consts": [
        "taylaryous",
        "kiltyonyy",
        "kllyotonny"
      ],
      "fol_rules": [
        "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ ¬Kinkyty(x) ∧ ¬Kintyonyy(x) ∧ ¬Kilryous(x) ∧ ¬Kickllyyt(x)"
      ],
      "fol_conc": "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ Falseyntonny(x) ∧ Falsekittens(x) ∧ Defllyonyy(x) ∧ Declibtnys(x)",
      "perplexity": 7.738007545471191,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 121
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "Leads(y, z)",
        "Includes(z, w)",
        "FeudWith(u, v)",
        "FormedIn(x, y)"
      ],
      "fol_consts": [
        "DiamondMine()",
        "RoderickStrong()",
        "CreedBrothers()",
        "IvyNile()",
        "ImperiumStable()",
        "WWEPromotion()"
      ],
      "fol_rules": [
        "Stable(DiamondMine()) \\/ FormedIn(DiamondMine(), WWEPromotion())",
        "Leads(RoderickStrong(), DiamondMine())",
        "(Includes(DiamondMine(), CreedBrothers()) /\\ Includes(DiamondMine(), IvyNile()))",
        "FeudWith(ImperiumStable(), DiamondMine())"
      ],
      "fol_conc": "∃z (Leads(RoderickStrong(), z) \\/ Stable(z))",
      "perplexity": [
        1.2877863645553589,
        1.1648067235946655
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Stable(DiamondMine()) \\/ FormedIn(DiamondMine(), WWEPromotion())"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Professional(x)",
        "Stable(y, x)",
        "Formed(z, y, w)",
        "Leads(v, z)",
        "Includes(a, b)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "wwe",
        "imperium",
        "creedbrothers",
        "ivynile"
      ],
      "fol_rules": [
        "Stable(diamondmine, wwe)",
        "Formed(wwe, diamondmine, xtimexperiodx)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Stable(z, wwe)",
      "perplexity": 1.9204273223876953,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Lead(x, y)",
        "FormedIn(y, z)",
        "Include(y, z)",
        "FeudWith(u, v)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "imperium",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, w) ∧ Lead(roderick_strong, diamond_mine)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Lead(roderick_strong, y)",
      "perplexity": 1.4373159408569336,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 122
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MachineLearningAlgorithm(x)",
        "SupervisedLearning(x)",
        "UnsupervisedLearning(x)",
        "ReinforcementLearning(x)",
        "RequiresLabeledData(x)",
        "TrainsTextSummarizationModel(x, y)",
        "StateOfTheArtTextSummarizationModel(y)",
        "UsesAlgorithm(z, w)"
      ],
      "fol_consts": [
        "modelA",
        "modelB"
      ],
      "fol_rules": [
        "∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x)))",
        "∀x (UnsupervisedLearning(x) → ¬RequiresLabeledData(x))",
        "∃y (MachineLearningAlgorithm(y) ∧ TrainsTextSummarizationModel(y, modelA))",
        "¬ReinforcementLearning(modelA)",
        "TrainsTextSummarizationModel(y, modelB) → RequiresLabeledData(y)"
      ],
      "fol_conc": "∃z (UsesAlgorithm(modelA, z) ∧ SupervisedLearning(z))",
      "perplexity": [
        1.1975455284118652,
        1.1109434366226196
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Labelled(x)",
        "Trained(y, x)"
      ],
      "fol_consts": [
        "model",
        "stateofarttextsummarizationmodel"
      ],
      "fol_rules": [
        "∀x (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x))",
        "Unsupervised(x) → ¬Labelled(x)",
        "Trained(stateofarttextsummarizationmodel, x)",
        "Reinforcement(y) ∧ Trained(stateofarttextsummarizationmodel, y) → ∃z (Supervised(z))",
        "Labelled(x) ∧ Trained(stateofarttextsummarizationmodel, x)"
      ],
      "fol_conc": "Trained(stateofarttextsummarizationmodel, model) ∧ Supervised(model)",
      "perplexity": 1.398041844367981,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SupervisedLearning(x)",
        "UnsupervisedLearning(x)",
        "ReinforcementLearning(x)",
        "RequiresLabeledData(x)"
      ],
      "fol_consts": [
        "state-of-the-art text summarization model"
      ],
      "fol_rules": [
        "∀x (SupervisedLearning(x)) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x)",
        "UnsupervisedLearning(x) → ¬RequiresLabeledData(x)",
        "TrainedWithMLAlgorithm(state-of-the-art text summarization model)",
        "ReinforcementLearning(state-of-the-art text summarization model) → ∃x (TrainedWithMLAlgorithm(state-of-the-art text summarization model))",
        "RequiresLabeledData(state-of-the-art text summarization model)"
      ],
      "fol_conc": "SupervisedLearning(state-of-the-art text summarization model)",
      "perplexity": 1.6062325239181519,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nSupervisedLearning(State-of-the-artTextSummarizationModel)\n                        ^"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 123
  },
  {
    "id": 140,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is loved by children.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromTheSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromTheSimpsons(x))",
        "FromTheSimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": [
        1.1186916828155518,
        1.273779034614563
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Loved(x)",
        "From(x, y)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Loved(x) → Funny(x))",
        "∀x (From(x, simpsons) → Loved(x))",
        "∀x (From(x, simpsons) → From(x, simpsons))",
        "∀x (Yellow(x) → From(x, simpsons))",
        "From(ben, simpsons) ⊕ Funny(ben)"
      ],
      "fol_conc": "Loved(ben)",
      "perplexity": 1.172278642654419,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben",
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "(∃x ((Ugly(x) → ¬Popular(x))) ∧ ∀y (∀z (LovedByChildren(z) → Funny(y)) ∧ FromTheSimpsons(y) → LovedByChildren(y)) ∧ ∀w (Yellow(w) → FromTheSimpsons(w))) → ∃v ((Funny(v) → Popular(v)) ⊕ (FromTheSimpsons(v) ∨ Funny(ben)))",
        "(∀u (Ugly(u) → ¬Popular(u))) ∧ (∀r (∀q (LovedByChildren(q) → Funny(r)) ∧ FromTheSimpsons(r) → LovedByChildren(r)) ∧ ∀p (Yellow(p) → FromTheSimpsons(p))) → ∃t ((FromTheSimpsons(t) ∨ Funny(ben)) ⊕ (Ugly(ben) → ¬Popular(ben)))"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": 1.9129050970077515,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 124
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Winner(x)",
        "Participate(x)",
        "FromCountry(x, y)",
        "OnLeaderboard(x)",
        "Tie(n, lst)",
        "BelongsToTie(z, t)",
        "IsPartOfLeaderBoardList(x, y)",
        "IsCountryBelgium(y)",
        "PersonOnLeaderboardAndFromBelgium(p)",
        "NotSamePerson(x, y)",
        "ParticipationInEventByWinnerOfTie(t, w)",
        "LeaderboardHasParticipants(lb, e)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "1992dmc",
        "belgium"
      ],
      "fol_rules": [
        "Winner(steinhauer, 1992dmc)",
        "Participate(steinhauer, 1992dmc)",
        "Tie(6, [descampe])",
        "FromCountry(descampe, belgium) ∧ OnLeaderboard(descampe, 1992dmc)",
        "Ψx (OnLeaderboard(x, e) → Participate(x, e))",
        "BelongsToTie(descampe, t) ∧ FromCountry(descampe, belgium)",
        "IsPartOfLeaderBoardList([steinhauer], lb_1992dmc) Φ NotSamePerson(p, steinhauer)",
        "ParticipationInEventByWinnerOfTie(t, w) → Winner(w, e)",
        "LeaderboardHasParticipants([descampe], 1992dmc)"
      ],
      "fol_conc": "ηx (OnLeaderboard(x, lb_1992dmc) Φ NotSamePerson(steihauer))",
      "perplexity": [
        1.5364543199539185,
        1.262004017829895
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ψx (OnLeaderboard(x, e) → Participate(x, e))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x, y)",
        "Participate(x, y)",
        "From(x, y)",
        "On(x, y)",
        "Sixwaytie(z)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "leaderboard1992dumaurierclassic",
        "dumaurierecassic1992"
      ],
      "fol_rules": [
        "Winner(steinhauer, dumaurirecassic1992)",
        "Participate(steinhauer, dumaurerelassic1992)",
        "Sixwaytie(leaderboard1992dumaurierclassic) ∧ From(descampe, belgium) ∧ On(descampe, leaderboard1992dumaurierclassic)",
        "From(descampe, belgium) ∧ On(descampe, leaderboard1992dumaurierclassic)",
        "On(x, leaderboard1992dumaurierclassic) → Participate(x, dumaurirecassic1992)"
      ],
      "fol_conc": "¬Winner(steinhauer, dumaurerelassic1992)",
      "perplexity": 1.4276552200317383,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatedIn(x, y)",
        "TieOnLeaderboard(z, x)",
        "FromBelgium(x)",
        "OnLeaderboardOf(y, z)"
      ],
      "fol_consts": [
        "1992 du Maurier Classic",
        "steinhauer",
        "descampe"
      ],
      "fol_rules": [
        "Winner(steinhauer, 1992 du Maurier Classic)",
        "ParticipatedIn(steinhauer, 1992 du Maurier Classic)",
        "TieOnLeaderboard(z, 1992 du Maurier Classic) → (∃x (FromBelgium(x)) ∧ OnLeaderboardOf(x, z))",
        "FromBelgium(descampe) ∧ OnLeaderboardOf(descampe, 1992 du Maurier Classic)",
        "(OnLeaderboardOf(y, x) → ParticipatedIn(y, x))"
      ],
      "fol_conc": "¬Winner(steinhauer, 1992 du Maurier Classic)",
      "perplexity": 1.669700264930725,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 125
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x, y)",
        "IsEasternWildTurkey(x)",
        "IsOsceolaWildTurkey(x)",
        "IsGouldsWildTurkey(x)",
        "IsMerriamsWildTurkey(x)",
        "IsRioGrandeWildTurkey(x)",
        "IsOcellatedWildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (∀y ((IsEasternWildTurkey(y) ∨ IsOsceolaWildTurkey(y)) ⊕ ∀z ((IsGouldsWildTurkey(z) ∨ IsMerriamsWildTurkey(z) ∨ IsRioGrandeWildTurkey(z))) ∨ WildTurkey(x, y)) ∧ ¬IsEasternWildTurkey(x) ∧ ¬IsOsceolaWildTurkey(x))",
        "∃x (WildTurkey(x, tom))",
        " ∀y (WildTurkey(y, tom) → (∀z ((IsGouldsWildTurkey(z) ⊕ IsMerriamsWildTurkey(z)) ∨ IsRioGrandeWildTurkey(z))) → ¬(IsEasternWildTurkey(tom) ∨ IsOsceolaWildTurkey(tom) ∨ IsGouldsWildTurkey(tom) ∨ IsMerriamsWildTurkey(tom) ∨ IsRioGrandeWildTurkey(tom)))",
        " ∀y (IsOcellatedWildTurkey(y) ∧ WildTurkey(x, y)) → ¬(IsEasternWildTurkey(x) ∨ IsOsceolaWildTurkey(x) ∨ IsGouldsWildTurkey(x) ∨ IsMerriamsWildTurkey(x) ∨ IsRioGrandeWildTurkey(x)))",
        " ∀x (¬DependentOnCaffeine(x) ∧ Student(x)) → DependentOnCaffeine(x) ∨ ¬Student(x)"
      ],
      "fol_conc": "IsOcellatedWildTurkey(tom)",
      "perplexity": [
        1.4175622463226318,
        1.13594651222229
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y (IsOcellatedWildTurkey(y) ∧ WildTurkey(x, y)) → ¬(IsEasternWildTurkey(x) ∨ IsOsceolaWildTurkey(x) ∨ IsGouldsWildTurkey(x) ∨ IsMerriamsWildTurkey(x) ∨ IsRioGrandeWildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wild(x, y)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriam(s)",
        "Rio(a)",
        "Ocellated(x)",
        "Not(x, x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (¬(Eastern(x)) ∧ Osceola(x))",
        "∀y ((Goulds(y)) ∨ (Merriam(y)) ∨ (Rio(a))) → ¬(Osceola(x) ∧ Goulds(x) ∧ Merriam(x) ∧ Rio(a))",
        "(∃x (Wild(x, wildturkey) ∧ Not(tom) ∧ Eastern(x)))",
        "¬(Eastern(tom))",
        "(¬Goulds(tom)) ∨ (¬Merriam(tom)) ∨ ¬(Rio(a))",
        "∀y ((Wild(y, turkeys) ∧ Tom(y)) → Ocellated(x))"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 2.3226699829101562,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsWildTurkey(x, y)",
        "Easternwildturkey(y)",
        "Osceolawild turkey(y)",
        "Gouldswil-dturtle(y)",
        "Merriam's wild tur-key(t)",
        "Gouldswil-dturtle(r)"
      ],
      "fol_consts": [
        "tom",
        "occellated"
      ],
      "fol_rules": [
        "(∃x (IsWildTurkey(x, occellated)))",
        "(¬Easternwildturkey(occellated)) ∧ ¬Osceolawild turkey(occellated) ∧ (∀y ((Gouldswil-dturtle(y) ⊕ Merriam's wild tur-key(t)) ⊕ Gouldswil-dturtle(r)))",
        "(∃x (IsWildTurkey(x, tom)))",
        "(¬Osceolawild turkey(occellated))"
      ],
      "fol_conc": "Osceolawild turkey(occellated)",
      "perplexity": 8.548651695251465,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\n((not Easternwildturkey(Occellated)) & (not OsceolawildTurkey(Occellated))) & (all y.(((((Gouldswil-dturtle(y)) & not (MerriamsWildTur-key(t))) | (not (Gouldswil-dturtle(y)) & (MerriamsWildTur-key(t)))) & not (Gouldswil-dturtle(r))) | (not (((Gouldswil-dturtle(y)) & not (MerriamsWildTur-key(t))) | (not (Gouldswil-dturtle(y)) & (MerriamsWildTur-key(t)))) & (Gouldswil-dturtle(r)))))\n                                                                                                   ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 126
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Winner(x)",
        "Participate(x)",
        "FromCountry(x, y)",
        "OnLeaderboard(x)",
        "Tie(n, lst)",
        "BelongsToTie(z, t)",
        "IsPartOfLeaderBoardList(x, y)",
        "IsCountryBelgium(y)",
        "PersonOnLeaderboardAndFromBelgium(p)",
        "NotSamePerson(x, y)",
        "ParticipationInEventByWinnerOfTie(t, w)",
        "LeaderboardHasParticipants(lb, e)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "1992dmc",
        "belgium"
      ],
      "fol_rules": [
        "Winner(steinhauer, 1992dmc)",
        "Participate(steinhauer, 1992dmc)",
        "Tie(6, [descampe])",
        "FromCountry(descampe, belgium) ∧ OnLeaderboard(descampe, 1992dmc)",
        "Ψx (OnLeaderboard(x, e) → Participate(x, e))",
        "BelongsToTie(descampe, t) ∧ FromCountry(descampe, belgium)",
        "IsPartOfLeaderBoardList([steinhauer], lb_1992dmc) Φ NotSamePerson(p, steinhauer)",
        "ParticipationInEventByWinnerOfTie(t, w) → Winner(w, e)",
        "LeaderboardHasParticipants([descampe], 1992dmc)"
      ],
      "fol_conc": "ηx (OnLeaderboard(x, lb_1992dmc) Φ NotSamePerson(steihauer))",
      "perplexity": [
        1.5364543199539185,
        1.262004017829895
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Ψx (OnLeaderboard(x, e) → Participate(x, e))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x, y)",
        "Participate(x, y)",
        "From(x, y)",
        "On(x, y)",
        "Sixwaytie(z)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "leaderboard1992dumaurierclassic",
        "dumaurierecassic1992"
      ],
      "fol_rules": [
        "Winner(steinhauer, dumaurirecassic1992)",
        "Participate(steinhauer, dumaurerelassic1992)",
        "Sixwaytie(leaderboard1992dumaurierclassic) ∧ From(descampe, belgium) ∧ On(descampe, leaderboard1992dumaurierclassic)",
        "From(descampe, belgium) ∧ On(descampe, leaderboard1992dumaurierclassic)",
        "On(x, leaderboard1992dumaurierclassic) → Participate(x, dumaurirecassic1992)"
      ],
      "fol_conc": "¬Winner(steinhauer, dumaurerelassic1992)",
      "perplexity": 1.4276552200317383,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatedIn(x, y)",
        "TieOnLeaderboard(z, x)",
        "FromBelgium(x)",
        "OnLeaderboardOf(y, z)"
      ],
      "fol_consts": [
        "1992 du Maurier Classic",
        "steinhauer",
        "descampe"
      ],
      "fol_rules": [
        "Winner(steinhauer, 1992 du Maurier Classic)",
        "ParticipatedIn(steinhauer, 1992 du Maurier Classic)",
        "TieOnLeaderboard(z, 1992 du Maurier Classic) → (∃x (FromBelgium(x)) ∧ OnLeaderboardOf(x, z))",
        "FromBelgium(descampe) ∧ OnLeaderboardOf(descampe, 1992 du Maurier Classic)",
        "(OnLeaderboardOf(y, x) → ParticipatedIn(y, x))"
      ],
      "fol_conc": "¬Winner(steinhauer, 1992 du Maurier Classic)",
      "perplexity": 1.669700264930725,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 127
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "LastOlympicGames(x)",
        "Location(x, y)",
        "WonMostMedals(x, y)",
        "Country(x)",
        "Medals(x, y)",
        "UnitedStates"
      ],
      "fol_consts": [
        "tokyo"
      ],
      "fol_rules": [
        "SportingEvent(OlympicGames(tokyo))",
        "LastOlympicGames(OlympicGames(tokyo))",
        "∀x ((SportingEvent(x) ∧ LastOlympicGames(x)) → WonMostMedals(UnitedStates, x))",
        "∀x (WonMostMedals(UnitedStates, x) → ∃y (SportingEvent(x) ∧ LastOlympicGames(x) ∧ Location(x, y)))",
        "∀x ((SportingEvent(x) ∧ Location(x, y)) → ∃z ((SportingEvent(x) ∧ Location(x, y) ∧ LastOlympicGames(z)) → (z = x)))"
      ],
      "fol_conc": "¬(SportingEvent(OlympicGames(tokyo)) ∧ LastOlympicGames(OlympicGames(tokyo)))",
      "perplexity": [
        1.4748461246490479,
        1.1545791625976562
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "SportingEvent(OlympicGames(tokyo))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x)",
        "Won(x, y, z)",
        "Medals(x, y, z)"
      ],
      "fol_consts": [
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(games) ∧ Sporting(games)",
        "Olympic(lastgames) ∧ Location(lastgames, tokyo)",
        "Won(unitedstates, lastgames, most)",
        "∀x (Medals(x, lastgames, most) → Won(x, lastgames, most))"
      ],
      "fol_conc": "¬Location(lastgames, tokyo)",
      "perplexity": 1.4206390380859375,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "GamesIn(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "olympic_games_usa_won_most_medals",
        "tokyo",
        "olympic_games_usa_won_most_medals"
      ],
      "fol_rules": [
        "SportingEvent(olympic_games_usa_won_most_medals)",
        "GamesIn(olympic_games_usa_won_most_medals, tokyo)",
        "WonMostMedals(olympic_games_usa_won_most_medals, olympic_games_usa_won_most_medals)"
      ],
      "fol_conc": "¬GamesIn(olympic_games_usa_won_most_medals, tokyo)",
      "perplexity": 1.893216848373413,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 128
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "breed_back(x, y)",
        "animal(x)",
        "extinct(y)",
        "resembles(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed_back(x, auroch) → extinct(auroch))",
        "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],  ",
        "fol_conc"
      ],
      "fol_conc": "extinct(aurochs)",
      "perplexity": [
        2.5359489917755127,
        3.612553596496582
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x)",
        "Artificial(y)",
        "Animals(x)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "breeding",
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Breedin(x)) → ∃y (Animal(y) ∧ Artificial(y))"
      ],
      "fol_conc": "Aurochs(is)",
      "perplexity": 2.0227158069610596,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "breed-back(x)",
        "animal(x)",
        "resemble(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs",
        "breeding",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed-back(x) → animal(x))",
        "∃x (breed-back(heck cattle) ∧ breed-back(aurochs))",
        "∃y (animal(y) ∧ resemble(heck cattle, y))"
      ],
      "fol_conc": "¬(∃x (resemble(aurochs, x)))",
      "perplexity": 2.7038025856018066,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Breed-back(x)) -> (Animal(x)))\n             ^"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 129
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "CommonlyKnown(x, y)",
        "FootballPlayer(x)",
        "LoanedOut(x, y)",
        "BrazillianFootballer(x)",
        "Plays(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "CommonlyKnown(aiilton, ailton)",
        "FootballPlayer(aiilton)",
        "LoanedOut(aiilton, braga)",
        "BrazillianFootballer(aiilton) ∧ Plays(aiilton, nautico)",
        "∀x (FootballClub(x) → x = braga ⊕ x = nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "Plays(aiilton, fluminense)",
      "perplexity": [
        1.2814810276031494,
        1.2322235107421875
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (FootballClub(x) → x = braga ⊕ x = nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Player(x, y)",
        "Loan(x, y)",
        "Club(x, y)",
        "Play(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Known(ailton, silva)",
        "Born(ailton, 1995)",
        "Player(ailton, braga)",
        "Footballer(ailton)",
        "Player(ailton, nautico)",
        "Club(nautico, braga)",
        "Club(braga, nautico)",
        "Club(nautico, fluminense)"
      ],
      "fol_conc": "Player(ailton, fluminense)",
      "perplexity": 1.2786165475845337,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "CommonlyKnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "BrazillianFootballer(x)",
        "PlaysFor(x, y)",
        "ClubOf(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "ailton",
        "1995"
      ],
      "fol_rules": [
        "∃x (CommonlyKnownAs(ailton, x) ∧ BornIn(ailton, 1995))",
        "FootballPlayer(ailton)",
        "LoanedOutTo(ailton, braga)",
        "BrazillianFootballer(ailton) ∧ PlaysFor(ailton, nautico)",
        "(ClubOf(nautico) ⊕ ClubOf(braga))",
        "∃x (ClubOf(x) ∧ FootballPlayer(a) → ClubOf(fluminense))"
      ],
      "fol_conc": "PlaysFor(ailton, fluminense)",
      "perplexity": 1.9690486192703247,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 130
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "MostActiveInMajorTennis(x)",
        "LostToIgaSwiatek(x, y)",
        "AtRolandGarros2022(x)",
        "FemaleTennisPlayer(x)"
      ],
      "fol_consts": [
        "igaswietek",
        "rafaelnadal"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → MostActiveInMajorTennis(x))",
        "∀y ((LostToIgaSwiatek(y, x)) → RankedHighly(y))",
        "∀x (FemaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToIgaswietek(x, x))",
        "(AtRolandGarros2022(z), FemaleTennisPlayer(w)) ⊕ (AtRolandGarros2022(y), MaleTennisPlayer(x))",
        "∀x (MaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToRafaelNadal(y, x))",
        "(RankedHighly(z)) ⊕ ((LostToRafaelNadal(CocoGauff(w), y)) → ¬(MaleTennisPlayerAtRolandGarros2022(cogauf)))"
      ],
      "fol_conc": "LostToRafaelNadal(CocoGauff, rafaelnadal)",
      "perplexity": [
        1.3956094980239868,
        1.1458851099014282
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(AtRolandGarros2022(z), FemaleTennisPlayer(w)) ⊕ (AtRolandGarros2022(y), MaleTennisPlayer(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(y, z)",
        "Lost(x, y)",
        "Player(x)",
        "Female(x)",
        "Male(x)"
      ],
      "fol_consts": [
        "igasz",
        "rafanadal"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → ∃y (Active(y, x)))",
        "∀x (Lost(x, igasz) → Ranked(x))",
        "∀x ((Female(x) ∧ Player(x)) → Lost(x, igasz))",
        "(∃x (Female(x) ∧ Player(x)) ⊕ ∃y (Male(y) ∧ Player(y)))",
        "∀z ((Male(z) ∧ Player(z)) → Lost(z, rafanadal))"
      ],
      "fol_conc": "Lost(coco, rafanadal)",
      "perplexity": 1.576776385307312,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RankedHighlyByWTA(x)",
        "LostTo(x, y)",
        "PlayerAtRolandGarros2022(x, y)",
        "FemaleTennisPlayer(y)"
      ],
      "fol_consts": [
        "coco_gauff",
        "iga_swiatek"
      ],
      "fol_rules": [
        "∀x (RankedHighlyByWTA(x) → ∃y (PlayerAtRolandGarros2022(x, y)))",
        "∀x (LostTo(iga_swiatek, x) → RankedHighlyByWTA(x))",
        "∀x ((FemaleTennisPlayer(y) ∧ PlayerAtRolandGarros2022(x, y)) → LostTo(iga_swiatek, y))",
        "(FemaleTennisPlayer(y) ∨ MaleTennisPlayer(z))"
      ],
      "fol_conc": "LostTo(coco_gauff, rafael_nadal)",
      "perplexity": 1.6510064601898193,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 131
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "[e3.5/21,14.50]"
      ],
      "fol_consts": [
        "_",
        "[a3.5/81,16.50]",
        "19.9:11.76",
        "4.31:22.70",
        "5.72:21.39"
      ],
      "fol_rules": [
        "e3.5/11],"
      ],
      "fol_conc": "The world's most expensive ice cream.",
      "perplexity": [
        4.81779670715332,
        7.5987348556518555
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "e3.5/11],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Larryity(x)",
        "Gannity(x)",
        "Kinty(x)"
      ],
      "fol_consts": [
        "taylaryous",
        "kiltyonyy",
        "kllyotonny"
      ],
      "fol_rules": [
        "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ ¬Kinkyty(x) ∧ ¬Kintyonyy(x) ∧ ¬Kilryous(x) ∧ ¬Kickllyyt(x)"
      ],
      "fol_conc": "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ Falseyntonny(x) ∧ Falsekittens(x) ∧ Defllyonyy(x) ∧ Declibtnys(x)",
      "perplexity": 7.738007545471191,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 132
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "101",
        "359"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "This is my name in the list of landmarks and I can test that",
      "perplexity": [
        11.24989128112793,
        23.22624397277832
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "This is my name in the list of landmarks and I can test that"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Purpose (i)",
        "Fittyein'ersti', 21, yo.3()"
      ],
      "fol_consts": [
        "",
        "",
        "",
        ""
      ],
      "fol_rules": [
        "((∃p ∃n ∀t ∀x (Purpose (a))))"
      ],
      "fol_conc": "Fittyein'ersti', 21, yo.3() ⊕ ¬((Purpose (b)) ∧ ((Purpose (s)) → ¬(Purpose (l)) ∨ (Purpose (c))))",
      "perplexity": 18.367530822753906,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Fittyein'ersti', 21, yo.3() ⊕ ¬((Purpose (b)) ∧ ((Purpose (s)) → ¬(Purpose (l)) ∨ (Purpose (c))))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 133
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (RatingGreaterThan9(x) → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → RatingGreaterThan9(x))",
        "RatingGreaterThan9(subway) ∨ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0449631214141846,
        1.0158560276031494
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "Listed(x) → ¬Negative(x)",
        "∀x (Rating(x, y) ∧ (Greater(y, 90)) → Listed(x))",
        "∃x (¬Takeout(x) ∧ Negative(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ Greater(y, 90))",
        "Rating(subway, y) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Negative(subway)",
      "perplexity": 1.3234094381332397,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ListedIn(x)",
        "ReceivesNegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "ProvidesTakeoutService(x)",
        "PopularAmongLocals(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "ListedIn(x) → ¬ReceivesNegativeReviews(x)",
        "∀x (RatingGreaterThan9(x) → ListedIn(x))",
        "∃x (¬ProvidesTakeoutService(x) ∧ ReceivesNegativeReviews(x))",
        "∀x (PopularAmongLocals(x) → RatingGreaterThan9(x))",
        "(RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway))"
      ],
      "fol_conc": "(ProvidesTakeoutService(subway) ∧ ¬ReceivesNegativeReviews(subway))",
      "perplexity": 1.4965705871582031,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 134
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MachineLearningAlgorithm(x)",
        "SupervisedLearning(x)",
        "UnsupervisedLearning(x)",
        "ReinforcementLearning(x)",
        "RequiresLabeledData(x)",
        "TrainsTextSummarizationModel(x, y)",
        "StateOfTheArtTextSummarizationModel(y)",
        "UsesAlgorithm(z, w)"
      ],
      "fol_consts": [
        "modelA",
        "modelB"
      ],
      "fol_rules": [
        "∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x)))",
        "∀x (UnsupervisedLearning(x) → ¬RequiresLabeledData(x))",
        "∃y (MachineLearningAlgorithm(y) ∧ TrainsTextSummarizationModel(y, modelA))",
        "¬ReinforcementLearning(modelA)",
        "TrainsTextSummarizationModel(y, modelB) → RequiresLabeledData(y)"
      ],
      "fol_conc": "∃z (UsesAlgorithm(modelA, z) ∧ SupervisedLearning(z))",
      "perplexity": [
        1.1975455284118652,
        1.1109434366226196
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Labelled(x)",
        "Trained(y, x)"
      ],
      "fol_consts": [
        "model",
        "stateofarttextsummarizationmodel"
      ],
      "fol_rules": [
        "∀x (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x))",
        "Unsupervised(x) → ¬Labelled(x)",
        "Trained(stateofarttextsummarizationmodel, x)",
        "Reinforcement(y) ∧ Trained(stateofarttextsummarizationmodel, y) → ∃z (Supervised(z))",
        "Labelled(x) ∧ Trained(stateofarttextsummarizationmodel, x)"
      ],
      "fol_conc": "Trained(stateofarttextsummarizationmodel, model) ∧ Supervised(model)",
      "perplexity": 1.398041844367981,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SupervisedLearning(x)",
        "UnsupervisedLearning(x)",
        "ReinforcementLearning(x)",
        "RequiresLabeledData(x)"
      ],
      "fol_consts": [
        "state-of-the-art text summarization model"
      ],
      "fol_rules": [
        "∀x (SupervisedLearning(x)) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x)",
        "UnsupervisedLearning(x) → ¬RequiresLabeledData(x)",
        "TrainedWithMLAlgorithm(state-of-the-art text summarization model)",
        "ReinforcementLearning(state-of-the-art text summarization model) → ∃x (TrainedWithMLAlgorithm(state-of-the-art text summarization model))",
        "RequiresLabeledData(state-of-the-art text summarization model)"
      ],
      "fol_conc": "SupervisedLearning(state-of-the-art text summarization model)",
      "perplexity": 1.6062325239181519,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nSupervisedLearning(State-of-the-artTextSummarizationModel)\n                        ^"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 135
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y)",
        "Deposits(y, z)",
        "Pets(x, y)"
      ],
      "fol_consts": [
        "Tom",
        "Fluffy",
        "The Olive Garden"
      ],
      "fol_rules": [
        "∀x (Allowed(x, y)) → Dependent(x) ∧ IsManaged(z)],  "
      ],
      "fol_conc": "∃y Deposits(y) ∧ IsAllowing(Deposits(y)) ∨ Rent(Tom)",
      "perplexity": [
        2.580653667449951,
        4.4491682052612305
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Allowed(x, y)) → Dependent(x) ∧ IsManaged(z)],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python",
        "rust",
        "perfect",
        "fluffy"
      ],
      "fol_rules": [
        "(∀x (Drink(x)) → Dependent(x))",
        "(∃y (Drinks(y))) ∨ (∃z (Jokes(z))) ∨ ((Unaware(rina) ∧ ¬(Student(sam)))) ⊕ (¬(Dependent(rina) ∧ Student(sam)) → (Dependent(rina) ∧ Student(sam)) ⊕ ¬(Dependent(rina) ∨ Student(sam)))",
        "((∀x (Drink(x) ∧ Write(x, python))) ∧ ((Drinks(rina) ∨ Jokes(rina)) ∧ Fluffy(rina)))"
      ],
      "fol_conc": "(Fluffy(rina) ⊕ Perfect(rina) → Sam(sam))",
      "perplexity": 2.396759510040283,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DependsOn(x, y)",
        "IsPet(x)",
        "IsPet(y)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∀x (DependsOn(rinumtom, x)) → (∃y (Rent(x, rinumtom))) ∨ ∃z ((Rent(z, rinitom) ∧ DependsOn(y, z)))",
        "(IsPet(renumtom)) ⊕ IsPet(fluffy)"
      ],
      "fol_conc": "∀x (Rent(rinumtom, x) → (∃y (DependsOn(y, x))) ∨ ∃z ((Rent(z, rinumtom) ∧ DependsOn(x, z))))",
      "perplexity": 3.1676363945007324,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 136
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseCompany(x)",
        "Game(x)",
        "Top10(x)",
        "SellMoreThanMillion(x)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "nintendo"
      ],
      "fol_rules": [
        "Created(nintendo, zelda)",
        "∀x (Top10(x) → ∃y (JapaneseCompany(y) ∧ Created(y, x)))",
        "∀x (SellMoreThanMillion(x) → Top10(x))",
        "SellMoreThanMillion(zelda)"
      ],
      "fol_conc": "JapaneseCompany(y) ∧ Created(y, fifa22)",
      "perplexity": [
        1.1277339458465576,
        1.0209829807281494
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(x)",
        "Top10(y)",
        "Sells(x, z)",
        "More(z, w)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "one",
        "million",
        "japan"
      ],
      "fol_rules": [
        "Created(japan, zelda)",
        "∀x (Top10(x) → Japanese(y))",
        "∀x (Sells(x, z) ∧ More(z, one)) → Top10(x)",
        "Sells(zelda, one)"
      ],
      "fol_conc": "Japanese(x)",
      "perplexity": 1.3273805379867554,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseCompany(x)",
        "Top10List(y)",
        "SellCopies(y, z)",
        "SelectedInto(y, w)"
      ],
      "fol_consts": [
        "legend_of_zelda",
        "fifa22"
      ],
      "fol_rules": [
        "Created(a, legend_of_zelda)",
        "∀x (Top10List(x) → JapaneseCompany(y))",
        "∀x ∀z (SellCopies(x, z) ∧ (∃n (Game(x) ∧ SellCopies(x, n) ∧ Game(y)))) → SelectedInto(x, w)",
        "SellCopies(legend_of_zelda, m)"
      ],
      "fol_conc": "JapaneseCompany(fifa22)",
      "perplexity": 2.9483895301818848,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 137
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ In(billings, montana)",
        "∀x (City(x) ∧ In(x, montana) → (x = butte ∨ x = helena ∨ x = missoula))",
        "City(white_sulphur_springs) ∧ City(butte) ∧ In(white_sulphur_springs, x) ∧ In(butte, x)",
        "¬In(pierre, montana)",
        "∀x (City(x) ∧ In(x, butte) → ¬In(x, pierre))"
      ],
      "fol_conc": "SameState(butte, pierre)",
      "perplexity": [
        1.0654758214950562,
        1.011418104171753
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (City(x) ∧ In(x, montana) → (x = butte ∨ x = helena ∨ x = missoula))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "Instate(x, y)",
        "Same(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings)",
        "Instate(billings, montana)",
        "Instate(butte, montana)",
        "Instate(helena, montana)",
        "Instate(missoula, montana)",
        "Instate(white, montana)",
        "Instate(sulphur, montana)",
        "Instate(butte, montana)",
        "Instate(pierre, montana)",
        "∀x ∀y (Instate(x, y) ∧ Instate(y, z) → Same(x, z))"
      ],
      "fol_conc": "Same(butte, pierre)",
      "perplexity": 1.2601113319396973,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "City(x)",
        "InState(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white sulphur springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings)",
        "InState(billings, montana)",
        "∀x (City(x) ∧ InState(x, montana) → (¬SameState(x, pierre)))",
        "∃x (City(x) ∧ InState(butte, x))",
        "∃y (City(y) ∧ InState(white sulphur springs, y) ∧ SameState(butte, y))"
      ],
      "fol_conc": "SameState(butte, pierre)",
      "perplexity": 1.2915847301483154,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 138
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "Tokyo(x)"
      ],
      "fol_consts": [
        "last"
      ],
      "fol_rules": [
        ""
      ],
      "fol_conc": "¬(Tokyo(last))",
      "perplexity": [
        2.9197914600372314,
        1.1774507761001587
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(y, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo",
        "us"
      ],
      "fol_rules": [
        "∀x (Sporting(x)) ∧ ∃z (Last(x, z) → Sporting(z))",
        "Last(olympicgames, tokyo)"
      ],
      "fol_conc": "Not(lastolympicsgamesintokyo)",
      "perplexity": 2.6066153049468994,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "is(x, y)",
        "was(x, y)"
      ],
      "fol_consts": [
        "OlympicGames",
        "Tokyo",
        "UnitedStates"
      ],
      "fol_rules": [
        "∀x (is(x, OlympicGames)) → ∃y (was(x, y))",
        "∀x (was(x, Tokyo) → is(x, OlympicGames))",
        "∀x (is(x, UnitedStates) → was(x, Tokyo))"
      ],
      "fol_conc": "was(OlympicGames, x)",
      "perplexity": 1.7811522483825684,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 139
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "FromIstanbul(x)",
        "BeginsWith(x, y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "thirtyFour",
        "thirtyFive"
      ],
      "fol_rules": [
        "∀x (FromIstanbul(x) → BeginsWith(RegistrationPlate(x), thirtyFour))",
        "¬(BeginsWith(x, thirtyFour)) → ¬FromIstanbul(x)",
        "FromIstanbul(RegistrationPlate(joe))",
        "BeginsWith(RegistrationPlate(tom), thirtyFive)",
        "∀x (BeginsWith(x, thirtyFive) → ¬BeginsWith(x, thirtyFour))"
      ],
      "fol_conc": "FromIstanbul(RegistrationPlate(tom))",
      "perplexity": [
        1.1210050582885742,
        1.024549961090088
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (FromIstanbul(x) → BeginsWith(RegistrationPlate(x), thirtyFour))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)",
        "Istanbul(y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "¬(From(x, istanbul)) ∨ Begins(x, 34)",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "From(tom, istanbul)",
      "perplexity": 1.2224282026290894,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "From(x, y)",
        "BeginsWith(x, y)",
        "VehicleRegistrationPlate(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → BeginsWith(x, 34))",
        "¬BeginsWith(x, 34) → ¬From(x, istanbul)",
        "VehicleRegistrationPlate(joe)",
        "From(tom, istanbul)",
        "(BeginsWith(x, 35) → ¬BeginsWith(x, 34))"
      ],
      "fol_conc": "VehicleRegistrationPlate(tom)",
      "perplexity": 1.3346506357192993,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 140
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "IndoEuropean(x)",
        "RomanceLanguage(x)",
        "LanguageFamily(x)",
        "RelatedTo(x, y)",
        "IsRomance(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (IndoEuropean(x) → RomanceLanguage(x))",
        "∀x (RomanceLanguage(x) ∧ LanguageFamily(x))",
        "∀x ((RomanceLanguage(x) ∨ IndoEuropean(x)) → RelatedTo( x, y )  )",
        "RomanceLanguage(french) ∧ RomanceLanguage(spanish): French and Spanish are both Romance languages.",
        "German ∧ Spanish → RelatedTo(german, spanish)",
        "Basque ¬RelatedTo(basque,x) :Basque is not related to any other language."
      ],
      "fol_conc": "IsRomance(german)",
      "perplexity": [
        1.5376545190811157,
        1.2154542207717896
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "RomanceLanguage(french) ∧ RomanceLanguage(spanish): French and Spanish are both Romance languages."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Indouropean(x)",
        "Romance(x)",
        "Languagefamily(x)",
        "Relatedto(x, y)",
        "French(x)",
        "Spanish(x)",
        "German(x)",
        "Basque(x)"
      ],
      "fol_consts": [
        "german",
        "french",
        "spanish",
        "basque"
      ],
      "fol_rules": [
        "∀x (Indouropean(x) → Romance(x))",
        "(Romance(x) ∧ Languagefamily(x))",
        "∀x ((Languagefamily(x) → Relatedto(x, y)) ∨ ¬Relatedto(x, y))",
        "(French(rina) ∧ Spanish(rina) → Romance(rina))",
        "German(german) ∧ Relatedto(spanish, german)",
        "Basque(basque) ⊕ ∃x (Relatedto(basque, x))"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.8931814432144165,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IndoEuropean(x)",
        "IsRomanceLanguage(y, x)",
        "IndoEuropean(romanfamilyx)",
        "IsRomanceLanguage(x)",
        "IsRomanceLanguage(y, z)",
        "IsRomanceLanguage(z)",
        "IsRomanceLanguage(wy)",
        "IndoEuropean(xy)"
      ],
      "fol_consts": [
        "german",
        "french",
        "spanish",
        "basque"
      ],
      "fol_rules": [
        "(∀x (IndoEuropean(x) → IsRomanceLanguage(romanfamily, x))) ∧ (IsRomanceLanguage(frency))",
        "(IsRomanceLanguage(spanishfrenchrromnacegna))",
        "IndoEuropean(basque)",
        "(∀x (IndoEuropean(x) → ∃z ((IsRomanceLanguage(z, x) ∧ IsRomanceLanguage(y, z))) ∨ (∃y (IsRomanceLanguage(romanfamilzyw, y)))))",
        "IndoEuropean(gerryman)"
      ],
      "fol_conc": "(∀x (IndoEuropean(x)) → ∃z ((IsRomanceLanguage(z) ∧ IndoEuropean(xy))) ∨ (∃y (IsRomanceLanguage(romanfamilzyw, y))))",
      "perplexity": 8.05637264251709,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsRomanceLanguage/2, IsRomanceLanguage/1.\n\n\nFatal error:  The following symbols are used with multiple arities: IsRomanceLanguage/2, IsRomanceLanguage/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 141
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "DonatedTo(x, y)"
      ],
      "fol_consts": [
        "picuris-mountains",
        "juan-de-onate"
      ],
      "fol_rules": [
        "∀x (LocatedIn(x, new-mexico) ∨ LocatedIn(x, texas)) ⊕ MountainRange(x)",
        "Visited(juan-de-onate, picuris-mountains)",
        "∀x (LocatedIn(picuris-mountains, x) → DonatedTo(x, Harding-Pegmatite-Mine})",
        "¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∀y (LocatedIn(y, x) → DonatedTo(y, Harding-Pegmatite-Mine)))",
        "InTexas(picuris-mountains )  ∨   Visited(juan-de-onate,picuris-mountains )"
      ],
      "fol_conc": "InTexas(picuris-mountains )  ∨   Visited(juan-de-onate,picuris-mountains )",
      "perplexity": [
        1.4914923906326294,
        1.2495085000991821
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (LocatedIn(picuris-mountains, x) → DonatedTo(x, Harding-Pegmatite-Mine})"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x, y)",
        "Range(x)",
        "Located(x, y)",
        "Donated(x)",
        "Visited(x)",
        "Person(y)",
        "Name(y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "deonate"
      ],
      "fol_rules": [
        "(Location(picuris, newmexico)) ⊕ (Location(picuris, texas))",
        "(Juan(y) ∧ Visited(juan, picuris))",
        "(Donated(x) → Location(x, picuris))",
        "¬(∃x (Mountain(x, texas) ∧ Donated(x)))"
      ],
      "fol_conc": "Visited(juan, texy)",
      "perplexity": 1.8999367952346802,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x, y)",
        "IsAMountain_range_of(z)",
        "MountainRange(y)"
      ],
      "fol_consts": [
        "texas",
        "juan",
        "picurismountains",
        "newmexico"
      ],
      "fol_rules": [
        "(∃z (MountainRange(texas, z))) → (∀y ((IsAMountain_range_of(z)) ⊕ IsAMountain_range_of(y)))",
        "(¬(MountainRange(juan, y))) ∧ MountainRange(picurismountains, juan)",
        "∃x (MountainRange(x, picurusmounatsinfsy) → ¬IsAMountain_range_of(donation))",
        "(∀z ((IsAMountain_range_of(z)))) ⊕ IsAMountain_range_of(texas)",
        "(¬(MountainRange(juan))) ∧ (∃x (MountainRange(x, picurismountains) → ¬((IsAMountain_range_of(donation)) ∨ (IsAMountain_range_of(yy)))))",
        "∀z ((MountainRange(z)) ⊕ IsAMountain_range_of(texas))"
      ],
      "fol_conc": "(¬(MountainRange(juan, y))) ∧ (IsAMountain_range_of(y) ∨ ¬(MountainRange(x)))",
      "perplexity": 8.107799530029297,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: MountainRange/1, MountainRange/2.\n\n\nFatal error:  The following symbols are used with multiple arities: MountainRange/1, MountainRange/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 142
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxFavorite(x) → VeryFluffy(x))",
        "∀x (MaxFavorite(x) → LoveToSleep(x))",
        "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "∀x (Koala(x) → LoveToSleep(x))",
      "perplexity": [
        1.0403395891189575,
        1.0133841037750244
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Quokka(x)",
        "Animal(x)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(y, x))",
        "∀x (Animal(x) ∧ From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → Animal(x) ∧ From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Sleep(koala)",
      "perplexity": 1.134602427482605,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Koala/1, Koala/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Koala/1, Koala/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedByTourists(x)",
        "FavoriteAnimalOfMax(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "LovesToSleep(x)"
      ],
      "fol_consts": [
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → FavoriteAnimalOfMax(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (FavoriteAnimalOfMax(x) → Fluffy(x))",
        "∀x (FavoriteAnimalOfMax(x) → LovesToSleep(x))",
        "∀x (Fluffy(x) ∧ Quokka(x) → ¬Quokka(x))"
      ],
      "fol_conc": "LovesToSleep(koala)",
      "perplexity": 1.1183691024780273,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 143
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)",
        "Man(x)",
        "Harry(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬∃x (Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Harry(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.2337881326675415,
        1.0775625705718994
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceo(x)"
      ],
      "fol_consts": [
        "harry",
        "ugly1"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬Ugly(ugly1)",
        "All(y, z, z, x, y, ug, z, x, y)",
        "Evil(z) → Ugly(x)",
        "Gentleman(z) → Handsome(x)",
        "Ceo(y) → Gentleman(x)",
        "Harry(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ Ceo(harry)",
      "perplexity": 1.8517482280731201,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "¬Ugly(x) → Handsome(x)",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "CEO(x) → Gentleman(x)",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Kind(harry) ⊕ CEO(harry))",
      "perplexity": 1.170697569847107,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 144
  },
  {
    "id": 140,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is loved by children.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromTheSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromTheSimpsons(x))",
        "FromTheSimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": [
        1.1186916828155518,
        1.273779034614563
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Loved(x)",
        "From(x, y)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Loved(x) → Funny(x))",
        "∀x (From(x, simpsons) → Loved(x))",
        "∀x (From(x, simpsons) → From(x, simpsons))",
        "∀x (Yellow(x) → From(x, simpsons))",
        "From(ben, simpsons) ⊕ Funny(ben)"
      ],
      "fol_conc": "Loved(ben)",
      "perplexity": 1.172278642654419,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben",
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "(∃x ((Ugly(x) → ¬Popular(x))) ∧ ∀y (∀z (LovedByChildren(z) → Funny(y)) ∧ FromTheSimpsons(y) → LovedByChildren(y)) ∧ ∀w (Yellow(w) → FromTheSimpsons(w))) → ∃v ((Funny(v) → Popular(v)) ⊕ (FromTheSimpsons(v) ∨ Funny(ben)))",
        "(∀u (Ugly(u) → ¬Popular(u))) ∧ (∀r (∀q (LovedByChildren(q) → Funny(r)) ∧ FromTheSimpsons(r) → LovedByChildren(r)) ∧ ∀p (Yellow(p) → FromTheSimpsons(p))) → ∃t ((FromTheSimpsons(t) ∨ Funny(ben)) ⊕ (Ugly(ben) → ¬Popular(ben)))"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": 1.9129050970077515,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 145
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "IsHuman(x)",
        "IsExtraterrestrial(x)"
      ],
      "fol_consts": [
        ",marvin"
      ],
      "fol_rules": [
        "[∀x (IsHuman(x) → ¬Extraterrestrial(x))",
        "(Marvin = Human)",
        "{(¬(IsExtraterrestrial(Marvin))) ∨ (Marvin ≠ marvin)}"
      ],
      "fol_conc": "¬((∃x IsHuman(x) ∧ x ≠ marvin) ∨ ¬(IsExtraterrestrial(marvin)))",
      "perplexity": [
        2.573894739151001,
        2.66007399559021
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "[∀x (IsHuman(x) → ¬Extraterrestrial(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Mars(x)",
        "Human(y)"
      ],
      "fol_consts": [
        "earth",
        "mario"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x) → Alien(x))",
        "(Alien(radio) ∧ Extraterrestrial(radioguy)) ⊕ ∃y (∃z ∀w ((Mars(z, y)) ∨ ¬(Earth(w))))",
        "¬(Human(earth) ∧ Extranterstellar(mario))"
      ],
      "fol_conc": "(Not(extraterresterialradio) → Alien(radioguy))",
      "perplexity": 4.696617126464844,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Earth/1, Earth/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Earth/1, Earth/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(y)",
        "Extraterrestrial(z)"
      ],
      "fol_consts": [
        "Earth(x)"
      ],
      "fol_rules": [
        "∀y (Extraterrestrial(y)) → ∀z (Extraterrestrial(z) ⊕ Alien(y))",
        "(Extraterrestrial(e)) ∧ Extraterrestrial(f) → Extraterrestrial(e, f)",
        "Extraterrestrial(m) ∨ Extraterrestrial(a) → Alien(Earth(x), Earth(x))"
      ],
      "fol_conc": "Alien(Earth(x))",
      "perplexity": 5.347553253173828,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Extraterrestrial(m) ∨ Extraterrestrial(a) → Alien(Earth(x), Earth(x))"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 146
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "GrumpyPerson(x)",
        "AnimalLover(x)",
        "PetOwner(x)",
        "Owns(x, y)",
        "IsAPet(y)",
        "Be(x, y)",
        "And(p, q)",
        "Or(p, q)",
        "Not(p)",
        "Implication(p, q)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (PetOwner(x) → AnimalLover(x))",
        "PetOwner(tom)"
      ],
      "fol_conc": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))",
      "perplexity": [
        1.2260806560516357,
        1.07374906539917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x)",
        "Animal(y)",
        "Loves(x, y)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom",
        "pet"
      ],
      "fol_rules": [
        "¬(Nice(x, animal) ∧ Mean(x, animal))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "Animal(y) → (Loves(x, y) → Nice(x, y))",
        "Owns(x, y) → Loves(x, y)",
        "Owns(tom, pet)"
      ],
      "fol_conc": "¬Grumpy(tom) ∧ ¬Mean(tom, animal)",
      "perplexity": 1.3317378759384155,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "AnimalLover(x)",
        "OwnPet(x)"
      ],
      "fol_consts": [
        "tom",
        "grumpy"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃y (AnimalLover(y) ∧ MeanToAnimals(y))",
        "∀z (AnimalLover(z) → NiceToAnimals(z))",
        "OwnPet(tom)",
        "∀w ((OwnPet(w) → AnimalLover(w)))"
      ],
      "fol_conc": "¬MeanToAnimals(tom)",
      "perplexity": 1.5121904611587524,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 147
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "hello, friend",
        "you may see me in your house"
      ],
      "fol_consts": [
        "toward you, my dear, might not be understood by a native English speaker.",
        "either i'ntnue the nudllrytope of my sonece to take my trixtone and get the real untione from me?",
        "you can also see this for us if it seems unfinch.",
        "your language, my darling, may be unveille as well."
      ],
      "fol_rules": [
        "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend.",
        "You can see this for us if that's what makes you sure about me."
      ],
      "fol_conc": "_",
      "perplexity": [
        5.746881008148193,
        17.23499870300293
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Personness(x)",
        "Surtionnousnty(x)",
        "Servinnaes(x)"
      ],
      "fol_consts": [
        "personnezationnoukt"
      ],
      "fol_rules": [
        "(Soytionnousnty(x)) ∧ (Foliculiae(x) ∧ Criinnaes(x))"
      ],
      "fol_conc": "Crylitnatty(x)",
      "perplexity": 9.4246187210083,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person.eviue(n)"
      ],
      "fol_consts": [
        "Cumderein",
        "Cumderein"
      ],
      "fol_rules": [
        "∀x (Person.eviue(r)) ∧ ¬(Person.eviue(k) → (Person.eviue(k)))",
        "∃x ((Person.eviue(n) ∨ Person.eviue(o) ∨ Person.eviue(i)))"
      ],
      "fol_conc": "Person.eviue(d) ⊕ (Person.eviue(k) → ¬((Person.eviue(n) ∨ Person.eviue(o))))",
      "perplexity": 8.925378799438477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\n((Person.eviue(d)) & not ((Person.eviue(k)) -> (not ((Person.eviue(n)) | (Person.eviue(o)))))) | (not (Person.eviue(d)) & ((Person.eviue(k)) -> (not ((Person.eviue(n)) | (Person.eviue(o))))))\n        ^"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 148
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x)",
        "EasternWildTurkey(x)",
        "OsceolaWildTurkey(x)",
        "GouldsWildTurkey(x)",
        "MerriamsWildTurkey(x)",
        "RioGrandeWildTurkey(x)",
        "OcellatedWildTurkey(x)",
        "Tom"
      ],
      "fol_consts": [
        "sam",
        "perfect"
      ],
      "fol_rules": [
        "∃x (EasternWildTurkey(x) → ¬(Tom ⊕ WildTurkey(x)))",
        "Forall y ((OsceolaWildTurkey(y) ∨ GouldsWildTurkey(y) ∨ MerriamsWildTurkey(y) ∨ RioGrandeWildTurkey(y)) → ¬(Tom ⊕ WildTurkey(x))) ",
        "Forall x (GouldsWildTurkey(x) ⊕ MerriamsWildTurkey(x) ⊕ RioGrandeWildTurkey(x)) → ¬(Tom ⊕ WildTurkey(x))",
        "Forall x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x)) → WildTurkey(x)",
        "Forall y ((OsceolaWildTurkey(y) ∨ GouldsWildTurkey(y) ∨ MerriamsWildTurkey(y) ∨ RioGrandeWildTurkey(y)) → Play(sam, y))",
        "Forall y ((Song(y) ∧ ¬Be(y, perfect)) ⊕ (Play(sam, y))) ",
        "Exyst x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))",
        "Forall y ((Song(y)) ∧ ¬Be(y, perfect)) ",
        "Exist x (Play(sam,x) ⊕ ¬(OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))) ",
        "Forall x (Project(x) ∧ WrittenIn(x, rust)) → Dependent(rina)",
        "Exyst y ((Dependent(y)) ∧ (∀z((OsceolaWildTurkey(z) ∨ GouldsWildTurkey(z) ∨ MerriamsWildTurkey(z) ∨ RioGrandeWildTurkey(z)) ⊕ WildTurkey(x)))) "
      ],
      "fol_conc": "Exyst x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))",
      "perplexity": [
        1.9590039253234863,
        1.1492983102798462
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (EasternWildTurkey(x) → ¬(Tom ⊕ WildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wild(x, y)",
        "Eastern(wildturkey, x)",
        "Osceola(wildturkey, x)",
        "Goulds(wildturkey, x)",
        "Merriam(swildturkey, x)",
        "Rio(gradewildturkey, x)",
        "Ocellated(wildturkey, x)",
        "Not(x)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "∃x ∀y (Wild(x, y) → (Eastern(y, tom) ⊕ Osceola(y, tom)) ⊕ Goulds(y, tom) ⊕ Merriam(y, tom) ⊕ Rio(gradey, tom) ⊕ Ocellated(y, tom))",
        "∃x ∀y (Wild(x, y) → Not(easternwildturkeyy, x))",
        "∃x ∀y (Wild(x, y) ∧ Osceolateywildturkeys(x) → ¬Oscelaowildturksey(tom))",
        "∃x ∀y (Wild(x, y) ∧ Gouldswiltdurkeys(x) ∧ Merriamwildturkeys(x) → Not(gouldswiltdurkeystomp))",
        "∃x ∀y (Not(wildedurkeyy, x) ∨ ¬(Oscelaowildturksey(tom)))",
        "Tom(woot)",
        "(¬Dependentoncafey(rina) ∧ Studentriny(x)) → ((Dependentsocialcaffeerrna(x)) ⊕ Dependentofcaffey(rina))",
        "Jokesriny(x) ∨ Unawarenirya(x)"
      ],
      "fol_conc": "Wild(joey, x)",
      "perplexity": 2.507920503616333,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EasternWildTurkey(x)",
        "OsceolaWTurkey(x)",
        "Goulds WTurKEY(y)",
        "Merriams WturKey(z)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "(∃x (EasternWildTurkey(x)) ∧ ∃y (∀z ((OsceolaWTurkey(y) ∨ Goulds WTurKEY(y))) ∨ Merriams WturKey(z)))",
        "(¬EasternWildTurkey(tom))",
        "((Goulds WTurKEY(i) ⊕ OsceolaWTurkey(k)) ∧ ¬(Goulds WTurKEY(m) ∨ Goulds WTurKEY(n)) ∨ (Merriams WturKey(r)))",
        "(∃x (EasternWildTurkey(x) ∨ OsceolaWTurkey(y) ∨ Goulds WTurKEY(z) ⊕ Merriams WturKey(w) ⊕ RioGrandeW TurkeY(v)))",
        "(¬OsceolaWTurkey(k))",
        "(Goulds WTurKEY(l) ∨ OsceolaWTurkey(m))",
        "∀x (EasternWildTurkey(x) → ¬EasternWildTurkey(tom))",
        "(Merriams WturKey(r) ⊕ Goulds WTurKEY(s)) ∨ Merriams WturKey(u)",
        "(¬OsceolaWTurkey(m))",
        "∃x (EasternWildTurkey(x))",
        "((Goulds WTurKEY(l) ∨ OsceolaWTurkey(r)))",
        "(Merriams WturKey(q) ⊕ Goulds WTurKEY(s)) ∨ Merriams WturKey(u)",
        "(∃x (EasternWildTurkey(x)) ∧ EasternWildTurkey(tom))",
        "(Goulds WTurKEY(l))",
        "((Merriams WturKey(r) ⊕ Goulds WTurKEY(s)))",
        "(¬OsceolaWTurkey(m))"
      ],
      "fol_conc": "(∃x (EasternWildTurkey(x)))",
      "perplexity": 7.224533557891846,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 149
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "University(y)",
        "Private(x)"
      ],
      "fol_consts": [
        "%Yale%",
        "But I don't know what the constants are. They could be variables or numbers.",
        "%IvyLeague%"
      ],
      "fol_rules": [
        "∃x (yale x ∧ ivyleague(x))",
        " ∀x (ivyleague(y) → university(x))",
        " ∃x (yale x ∧ private(x))",
        "  ∀x (private(y) ∨ ivyleague(x)"
      ],
      "fol_conc": "∃x (University(y) ∧ Private(x))",
      "perplexity": [
        1.7619527578353882,
        4.370296955108643
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (yale x ∧ ivyleague(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(i, x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "endowment"
      ],
      "fol_rules": [
        "(Newhaven(yale)) → (Endowment(yn))",
        "∀x ∃z ((Private(x) ∨ Ivy(i, x)))"
      ],
      "fol_conc": "((Pierson(piersoncollegei) ∧ Residential(zyalesexfordiafrobericolegeoedwardsoniacolligecolleges)) ⊕ (Be(ynewhavenuailex, r)))",
      "perplexity": 16.979520797729492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Endowment(x)",
        "MovedTo(x, y)",
        "Dependent(yaleuniversity, x)"
      ],
      "fol_consts": [
        "yaleuniversity",
        "newhaven",
        "residentialcollegesatyleanycollege",
        "residentialeducationschoolsatyleaniancscolorages",
        "professionalschoolsatsyledianycsschoolsofartsandsciencesschools",
        "benjaminfranklincollege",
        "berkercollage",
        "branfordcollergecollege"
      ],
      "fol_rules": [
        "∀x (Endowment(x) ∨ MovedTo(yaleuniversity, x))",
        "(Dependent(renvilleyaledenistate, yaleuniversity)) ∧ (∀x (MovedTo(renvilleyaledenistate, x))) ⊕ (∃x (Dependent(x, newhaven)))",
        "∀x (Endowment(x) ∨ MovedTo(yaleuniversity, x)) ∧ Dependent(renvilleyaledenistate, yaleuniversity)",
        "(Dependent(newhavensecuritycollegeschoolatyleanycollege, renvilleyaledenistate)) ⊕ (∃x (Dependent(x, newhaven)))",
        "∀x ((MovedTo(renvilleyaledenistate, x) ∨ Dependent(renvilleyaledenistate, yaleuniversity))) ∧ Dependent(newhavensecuritycollegeschoolatyleanycollege)",
        "(Dependent(renvileynedentstate, newhaven)) ⊕ ∃x (Endowment(x) ∨ MovedTo(yaleuniversity, x))"
      ],
      "fol_conc": "∀x ((Dependent(renvilleyaledenistate, yaleuniversity)) ∧ (∀x (MovedTo(renvileynedentstate, x))) ⊕ (∃x (Dependent(x, newhaven))))",
      "perplexity": 2.480698823928833,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dependent/1, Dependent/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Dependent/1, Dependent/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 150
  },
  {
    "id": 182,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is a grumpy person.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → AnimalLover(x))",
        "OwnsPet(tom)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": [
        1.065252661705017,
        1.0116082429885864
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "Animallover(x)",
        "Owns(x, y)",
        "Pet(y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "∀x (Animallover(x) → Nice(x, animal))",
        "∀x (Owns(x, y) → Animallover(x))",
        "Owns(tom, pet)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.2196440696716309,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceTo(x, y)",
        "MeanTo(x, y)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom",
        "animals"
      ],
      "fol_rules": [
        "∀x (NiceTo(x, animals) → ¬MeanTo(x, animals))",
        "∃x (Grumpy(x) ∧ MeanTo(x, animals))",
        "∀x (AnimalLover(x) → NiceTo(x, animals))",
        "OwnsPet(x) → AnimalLover(x)",
        "OwnsPet(tom)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.0964219570159912,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 151
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. Annotations, text",
        "1. Intriguing examples]"
      ],
      "fol_consts": [
        "1. No vernaicular language translation"
      ],
      "fol_rules": [
        "It's not written in the language of your native linguistic domain."
      ],
      "fol_conc": "I didn't mean to know what you said. My language only exists at its own vocabulary for pronunciation. No vernaacular translation is necessary!",
      "perplexity": [
        4.11256742477417,
        6.841965198516846
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "It's not written in the language of your native linguistic domain."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Urnteetdrives(x)"
      ],
      "fol_consts": [
        "unkroveidriinn",
        "nextrevittnoisey"
      ],
      "fol_rules": [
        "Unkroystssiueermeoniezaltyoceeionisleeionasmintntnyt09134dritsoyleaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannahttopeiueermeoniezaltyoceesgilryeellytrusntkrogeickeeeionosminttnoiseyeaucheaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromahedniueermeoniezaltyoceesgilryeellytrusntkrogeickeoeioudaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromaethrousntwissttnoiseyeaucheapermeoceeionosmintdritsolemindlinngelryeiltyoltrytodeeinniueerfeiuiueevillyrotteychrefileannaktroseuvltdoleoninegifliinkldttopeiuearneuttaultenetlynunkaresvitsseshoreaverveidriinnandaltyoceeionosmintdritsolemindlinngelryerfiltyroteychrefiveuiiulioudafermeollyrettnoiseyeaucheaperneuttaulnt(i0, i31947)",
        "Liteueermaethlstkrtnvukeeionosmintdruckprobahednieleoninusnycynsuvliinnandaltyoceeshoreaverveidriannandelrysexttnoiseyeaucheaformisttaulnt(i0, i31947)"
      ],
      "fol_conc": "Noctroveidriunkaresvitsseshoreaversexttnoiseyeaucheoceeionosmintdritsolemindlinngelryerfileannaktruckpromaethrousntwisstbyltytoteychregivinniueemidriannandaltryrodeenovolleodrominexideonirneuttaultenettnoiseyeaucheaplldlydoseuvltdtrusthrsseshoreeunzatttbyltytoceeafinnychrefileannaktruckprobaegliinvellnimidriinnandalrysextsubkntsttnoiseyeaucheaplldlypoherneuttaulteetdropeiueerfeuiiulllexodmindlinnglsycynsseshoreeunzattyokeeafinnychrefiveoioukaresvinnahttodeenovolloeleonisliinekrtnviinnandalrysexttnoiseyeaucheaplldlypoherneuttaulteetdropeiueermeomundaeinsudlnt(it, i31947)",
      "perplexity": 9.68288803100586,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "pre-employee(x)"
      ],
      "fol_consts": [
        "",
        ".%0.4192."
      ],
      "fol_rules": [
        "((∀i (pre-employee(n)) ∧ ¬pre-employee()) → pre-employee(n))",
        "((∃u (pre-employee(k)) ⊕ ¬recipient of an organization()))"
      ],
      "fol_conc": "(pre-employee(z) → pre-employee() ∧ ¬pre-employee())",
      "perplexity": 19.352083206176758,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((∀i (pre-employee(n)) ∧ ¬pre-employee()) → pre-employee(n))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 152
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "WorkingRemotely(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x ∀y (Employee(x) ∧ ScheduleMeeting(x, y) → Appear(x, company))",
        "∀x (Employee(x) ∧ Lunch(x, company) → ScheduleMeeting(x, x))",
        "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, Home(x))))",
        "∀x (Lunch(x, Home(x)) → WorkingRemotely(x))",
        "∀x (OtherCountry(x) → WorkingRemotely(x))",
        "¬∃x (Manager(x) ∧ WorkingRemotely(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": [
        1.055936336517334,
        1.0088725090026855
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, Home(x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Manager(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james",
        "company",
        "home"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, company) → Appear(x, company))",
        "∀x (Lunch(x, company) → Schedule(x, company))",
        "∀x (Employee(x) → (Lunch(x, company) ∨ Lunch(x, home)))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": 1.1506866216659546,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomer(x)",
        "AppearInCompanyToday(x)",
        "HaveLunchInCompany(x)",
        "HaveLunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeetingWithCustomer(x) → AppearInCompanyToday(x))",
        "∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x))",
        "∀x (Employee(x) → HaveLunchInCompany(x) ∨ HaveLunchAtHome(x))",
        "∀x (Employee(x) ∧ HaveLunchAtHome(x) → WorkRemotelyFromHome(x))",
        "∀x ((Employee(x) ∧ ¬(WorkRemotelyFromHome(x))) → AppearInCompanyToday(x))"
      ],
      "fol_conc": "¬HaveLunchInCompany(james)",
      "perplexity": 1.2246936559677124,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 153
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GRETest(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "HasEconomicHardship(x)",
        "LivesInFamily(x, z)",
        "IsOutOfWork(z)"
      ],
      "fol_consts": [
        "tom",
        "ETS"
      ],
      "fol_rules": [
        "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)",
        "∀x (GRETest(x) ∧ ProvidesFinancialAid(ETS, x) → HasEconomicHardship(x))",
        "∀y (HasEconomicHardship(y) → ∃z ((LivesInFamily(z, y) ∨ ¬ LivesInFamily(z, ETS)) ∧ (IsOutOfWork(z)))",
        "IsOutOfWork(tom's dad)",
        "LivesInFamily(tom's dad, tom)",
        "∀x (HasEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ⇒ HasEconomicHardship(tom) ∴ ∃y ((GRETest(y) ∧ ProvidesFinancialAid(ETS, y)) ∨ GRETest(ets))"
      ],
      "fol_conc": "",
      "perplexity": [
        1.9536328315734863,
        1.1783725023269653
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GRETest(tom) ⊕ GRETest(ets) → Costs(GRETest(tom), 205)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, z)",
        "Economic(x, y)",
        "Difficult(y)",
        "Lives(x, z)",
        "Father(x, y)",
        "Outofwork(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "us205",
        "year1",
        "singleparentfamily"
      ],
      "fol_rules": [
        "∃x (Costs(x, us205))",
        "(Provides(ets, x) ∧ Economic(x, z) ∧ Difficult(z) → Provides(ets, tom))",
        "∀y ((Economic(y) ⊕ Difficulty(y)) → ∃z (Difficult(z)))",
        "(Lives(tom, singleparentfamily) ∧ Father(tom, y) ∧ Outofwork(y, year1))",
        "(Outofwork(x, year1) → Provides(ets, tom))",
        "∀x ((Provides(ets, x) ∧ Costs(x, us205) → Play(sam, nope)))"
      ],
      "fol_conc": "(Provides(ets, tom) ∧ Costs(tom, us205))",
      "perplexity": 2.1026229858398438,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAid(sx, x)"
      ],
      "fol_consts": [
        "ets",
        "grec"
      ],
      "fol_rules": [
        "$205(x)",
        "(∃y (ProvidesFinancialAid(ets, grc) ∧ ProvidesFinancialAid(greclandhardshipx)))",
        "(¬ProvidesFinancialAid(economicgriardifficulty))",
        "($205(y))"
      ],
      "fol_conc": "(∃y (Costs(ets, grc) ∧ ProvidesFinancialAid(samhardscapitalresourcestom)))",
      "perplexity": 12.56561279296875,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 154
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "Composes(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "\n  \t HasAccess(george, program) → Composes(george)\n",
        "\n     WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
      ],
      "fol_conc": "Composes(george)",
      "perplexity": [
        1.8436528444290161,
        1.517404317855835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "(Likes(george) ∧ Has(george, program)) → Compose(george)"
      ],
      "fol_conc": "Compose(george)",
      "perplexity": 1.9979276657104492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantToCompose(y)",
        "CanCompose(x, y)"
      ],
      "fol_consts": [
        "George",
        "George"
      ],
      "fol_rules": [
        "∀x (Likes(x, m) → WantToCompose(x))",
        "∀x (CanCompose(x, p) ∧ WantToCompose(x) → CanCompose(x, p))",
        "∃x (CanCompose(x, y) ∧ Likes(x, m) ∧ WantToCompose(x))"
      ],
      "fol_conc": "CanCompose(George, y)",
      "perplexity": 2.0636627674102783,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 155
  },
  {
    "id": 174,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor visits the gym at least once a day.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "EatSalads(x)",
        "HealthConscious(x)",
        "HealthConsciousChildhood(x)",
        "FulfillsNutritionalIntake(x)",
        "GoodRelationshipWithParents(x)",
        "VisitsGymDaily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalads(x) → HealthConscious(x))",
        "∀x (HealthConsciousChildhood(x) → EatSalads(x))",
        "∀x (FulfillsNutritionalIntake(x) → HealthConsciousChildhood(x))",
        "∀x (GoodRelationshipWithParents(x) → FulfillsNutritionalIntake(x))",
        "∀x (GoodRelationshipWithParents(x) → ¬EatSalads(x))",
        "∀x (VisitsGymDaily(x) → FulfillsNutritionalIntake(x))",
        "(HealthConsciousChildhood(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(HealthConsciousChildhood(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "VisitsGymDaily(taylor)",
      "perplexity": [
        1.047791838645935,
        1.018127202987671
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x, y)",
        "Healthconscious(x)",
        "Grewup(x, y)",
        "Fulfill(x)",
        "Goodrelationship(x)",
        "Gym(x)",
        "Dailyintake(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x, salads) ∧ Regularly(x, salads) → Healthconscious(x))",
        "∀x (Grewup(x, healthconscious) → Regularly(x, salads))",
        "∀x (Fulfill(x) → Grewup(x, healthconscious))",
        "∀x (Goodrelationship(x) → Fulfill(x))",
        "∀x (Goodrelationship(x) → ¬Eat(x, salads) ∧ ¬Regularly(x, salads))",
        "∀x (Gym(x) → Fulfill(x))",
        "(Grewup(taylor, healthconscious) ∧ Goodrelationship(taylor)) ⊕ ¬(Grewup(taylor, healthconscious) ∨ Goodrelationship(taylor))"
      ],
      "fol_conc": "Gym(taylor)",
      "perplexity": 1.1961312294006348,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Healthconscious/1, Healthconscious/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Healthconscious/1, Healthconscious/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EatSaladsRegularly(x)",
        "Conscious(x)",
        "GrewUpInHome(x, y)",
        "FulfillDailyIntake(x)",
        "GoodRelationshipWithParents(x)",
        "VisitGymAtLeastOnceADay(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → Conscious(x))",
        "∀x (GrewUpInHome(x, health_conscious) → EatSaladsRegularly(x))",
        "∀x (FulfillDailyIntake(x) → GrewUpInHome(x, health_conscious))",
        "∀x (GoodRelationshipWithParents(x) → FulfillDailyIntake(x))",
        "∀x (GoodRelationshipWithParents(x) → ¬EatSaladsRegularly(x))",
        "∀x (VisitGymAtLeastOnceADay(x) → FulfillDailyIntake(x))",
        "(GrewUpInHome(taylor, health_conscious) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHome(taylor, health_conscious) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "VisitGymAtLeastOnceADay(taylor)",
      "perplexity": 1.1748448610305786,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 156
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "Harry"
      ],
      "fol_rules": [
        "\t∀x (Evil(x) → Ugly(x))",
        "\t∀x (Gentleman(x) → Handsome(x))",
        "\t((Kind(Harry)) ∨ (CEO(Harry)))"
      ],
      "fol_conc": "Harry is Kind OR Harry is a CEO",
      "perplexity": [
        1.5061088800430298,
        1.1343355178833008
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Harry is Kind OR Harry is a CEO"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "harry",
        "ceo"
      ],
      "fol_rules": [
        "∀x (Kind(x) ∨ Evil(x))",
        "(¬Ugly(x) → Handsome(x))",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "(Is(x, ceo) → Gentleman(x))",
        "Gentleman(harry)",
        "Kind(x) ∨ Is(x, ceo)"
      ],
      "fol_conc": "Kind(harry) ∨ Is(harry, ceo)",
      "perplexity": 1.3779146671295166,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)"
      ],
      "fol_consts": [
        "Harry",
        "Harry",
        "Harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ∨ Evil(x))",
        "¬Ugly(x) → Handsome(x)",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "CEO(x) → Gentleman(x)",
        "Kind(Harry) ∨ CEO(Harry)"
      ],
      "fol_conc": "Kind(Harry) ∨ CEO(Harry)",
      "perplexity": 2.056201457977295,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 157
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "CEO(x)",
        "Gentleman(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        " ∀x ((Ugly(x)) → ¬Handsome(x))",
        " ∀x (Evil(x) → Ugly(x))",
        " ∀x (Gentleman(x) → Handsome(x))",
        " ∃y (CEO(y) ∧ Gentleman(harry)) ∨ ¬∃y (CEO(y) ∧ Gentleman(harry))",
        " ∃x (Gentleman(x) ∧ CEO(x)), ∀ x, y ((Gentleman(x) → Gentlemen(y))] , ",
        " "
      ],
      "fol_conc": "∀y (CEO(y)) ∨ Gentleman(harry)",
      "perplexity": [
        1.767283320426941,
        1.8059931993484497
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (CEO(y) ∧ Gentleman(harry)) ∨ ¬∃y (CEO(y) ∧ Gentleman(harry))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)"
      ],
      "fol_consts": [
        "harry",
        "ceo"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x ((Evil(x) ∧ Ugly(x)) → Ugly(x))",
        "∀x ((Gentleman(x) ∧ Kind(x)) → Handsome(x))",
        "∀x (Gentlemen(x) → Ceo(x))",
        "(Harry(x) ∧ Gentleman(harry))",
        "Ceo(harry)"
      ],
      "fol_conc": "Harrison(x)",
      "perplexity": 1.764825701713562,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 158
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "TravelToParisForHoneymoon(x)"
      ],
      "fol_consts": [
        "John"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        ", ∀x ((TravelToParisForHoneymoon(x) ∧ Wedding(x)))",
        "\n\t ∀x ((WeddingsInJuly(x) ∧ TravelToParisForHoneyMoon(x)) )",
        "∃x (AttendCelebration(John, x))"
      ],
      "fol_conc": "Child(John)",
      "perplexity": [
        2.152742624282837,
        1.8305162191390991
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", ∀x ((TravelToParisForHoneymoon(x) ∧ Wedding(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Travels(x, y)",
        "Wedding(y)",
        "Child(x)",
        "July(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Has(x, wedding)) ∧ Has(x, child) → False(travels, paris)",
        "∀x (Travels(x, paris) ∧ Wedding(y) → Ybejuly(y))",
        "(Child(j) → ¬Travels(john, paris) ∧ No(wedding))",
        "Some(weds) ∨ Wellattended(weds) ∧ Johnhasweddings(weds)",
        "(Wellattended(weds) → (Johnhasweddings(weds) ∧ July(weds))) ∧ False(travels, paris)",
        "∀x (Has(x, wedding) ∧ Child(x) → Travels(john, paris))"
      ],
      "fol_conc": "False(travels, paris)",
      "perplexity": 2.33038330078125,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Child/1, Child/0, Wedding/1, Wedding/0, Travels/2, Travels/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Child/1, Child/0, Wedding/1, Wedding/0, Travels/2, Travels/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasChild(x)",
        "TravelToParisForHoneymoon(x)",
        "HappensInMonth(x, y)",
        "AttendsWedding(x)",
        "HasChild(y)"
      ],
      "fol_consts": [
        "John",
        "July"
      ],
      "fol_rules": [
        "(∀x (HasChild(x) → TravelToParisForHoneymoon(x)) ∧ HasChild(x)) ∨ ∀x ((TravelToParisForHoneymoon(x) → HasChild(y)))",
        "HappensInMonth(July, x)",
        "(∀x (AttendsWedding(x) ∧ HappensInMonth(July, y))) ∨ ∃x (HasChild(John) ∧ TravelToParisForHoneymoon(John))",
        "(∀x ((HasChild(x) → HasChild(y))) ∧ (HappensInMonth(July, x) ∨ HappensInMonth(July, y)) ∧ AttendsWedding(x))"
      ],
      "fol_conc": "(∃x (HasChild(x)))",
      "perplexity": 2.2648494243621826,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 159
  },
  {
    "id": 91,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language generation task.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "IsMachineTranslation(e)",
        "Translate(translate(x), e)"
      ],
      "fol_consts": [
        "English",
        "e"
      ],
      "fol_rules": [
        "∀x (∃y (Translate(x, y) ∧ Translate(y, e)))",
        "∈∩ ∀y ((e = x ∨ ¬¬∀z (Translate(z, x))))",
        "∀x ∘((IsLanguageGeneration(x)) → (∧((Translate(translate(x), e)), IsMachineTranslation(e)) ∨ MachineTranslatedTextSequenceDoesNotMatchAnyOtherTranslations(e)))), Translate(Translate(English, e))"
      ],
      "fol_conc": "(∃x (IsMachineTranslation(e) ∧ Translate(Translate(translate(x), y)) ∨ ¬¬∀y (IsLanguageGeneration(y))))",
      "perplexity": [
        3.0156726837158203,
        2.4572741985321045
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∈∩ ∀y ((e = x ∨ ¬¬∀z (Translate(z, x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Natural(x)",
        "Language(x)"
      ],
      "fol_consts": [
        "text",
        "language",
        "translation"
      ],
      "fol_rules": [
        "∀x (Text(x)) → Language(rintexts)",
        "∃y (Machine(y, translation) ∧ Text(yn))"
      ],
      "fol_conc": "Language(rintexts)",
      "perplexity": 5.177934169769287,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorical(x)",
        "LanguageGenerationTask(x)",
        "NaturalLanguageProcessing(x)",
        "LanguageGenerationTask(x)"
      ],
      "fol_consts": [
        "NLPTasks",
        "NLPTasks",
        "NLPTasks",
        "NLPTasks"
      ],
      "fol_rules": [
        "∀x (Categorical(x) ∧ LanguageGenerationTask(y)) → ∃z ((NaturalLanguageProcessing(z, x))) ∨ (∀y (LanguageGenerationTask(y) ⊕ NaturalLanguageProcessing(z)))",
        "(NaturalLanguageProcessing(r) ∧ Categorical(n)) → ¬(NaturalLanguageProcessing(n) ∨ NaturalLanguageProcessing(r))"
      ],
      "fol_conc": "∃x ((Categorical(x) ∧ LanguageGenerationTask(x)) ∨ (∀y (LanguageGenerationTask(y) ⊕ NaturalLanguageProcessing(z))))",
      "perplexity": 3.8204309940338135,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NaturalLanguageProcessing/2, NaturalLanguageProcessing/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NaturalLanguageProcessing/2, NaturalLanguageProcessing/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 160
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow",
        "SevereCancer(x)",
        "BileDuctCancer(BDC)",
        "MildFlu(z)",
        "Cholangiocarcinoma(y)",
        "ColorectalCancer(w)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow)",
        "∀x (SevereCancer(x) → Deadly(x))",
        "BileDuctCancer(BDC)",
        "∀y ((Cholangiocarcinoma(y) → BileDuctCancer(BDC)))",
        "∃z (~MildFlu(z))",
        "(∀x ~BileDuctCancer(x)): No one with mild flu has a low survival rate.",
        "∀w ((ColorectalCancer(w) ∧ BileDuctCancer(BDC)) → ¬Deadly(BDC)"
      ],
      "fol_conc": "(∃z (~MildFlu(z) ∧ ~Cholangiocarcinoma(y))) → (BileDuctCancer(BDC) ⊕ Cholangiocarcinoma(y))",
      "perplexity": [
        1.7727313041687012,
        1.1888010501861572
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Deadly(x) → SurvivalRateLow)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(y)",
        "Bileduct(z)",
        "Cholangiocarcinoma(w)",
        "Mildflu(v)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Lowsurvivalrate(x))",
        "∀y (Severe(y) → Deadly(y))",
        "Bileduct(bile)",
        "Cholangiocarcinoma(chol)",
        "∃w ((Mildflu(w) ∧ ¬Lowsurvivalrate(v)))",
        "(Colorectalcolorectalcancer(x) ∧ Lowsurvivalratelowcolorectalcancer(x)) → (¬Bileductx(x, bile))"
      ],
      "fol_conc": "(¬Mildflu(colorectal) ∨ Cholangiocarcinoma(chol)) → Bileduct(bile)",
      "perplexity": 2.4539825916290283,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(y)",
        "SurvivalRateLow(z)"
      ],
      "fol_consts": [
        "colorectal",
        "bileduct"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLow(zy))",
        "∀y (SevereCancer(y) ∧ DeadlyDisease(bileduct))",
        "BileDuctCancer(colorectalcancer)",
        "∃z ((Cholangiocarcinoma(z) → BileDuctCancer(colorectal)))",
        "(MildFlu(rina) → ¬SurvivalRateLow(rinaz))",
        "(DeadlyDisease(biledutccancer) ∧ SurvivalRateLow(surviveratebileductcancerz) → ¬BileDuctCancer(colorectalcancerz))"
      ],
      "fol_conc": "(¬MildFlu(rina) ∧ Cholangiocarcinoma(zinacomponentrinal)) → (DeadlyDisease(biledutccancer) ⊕ BileDuctCancer(z))",
      "perplexity": 2.0727460384368896,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 161
  },
  {
    "id": 175,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Eat(x)",
        "ConsciousAboutHealthAndHabits(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyNutritionalIntake(x)",
        "HasGoodRelationshipWithParent(x, y)",
        "VisitGymAtLeastOnceADay(x)"
      ],
      "fol_consts": [
        "taylor",
        "sam"
      ],
      "fol_rules": [
        "∀x (Eat(x) → ConsciousAboutHealthAndHabits(x))",
        "∀x (GrewUpInHealthConsciousHome(x) → Eat(x))",
        "∀x ((FulfillDailyNutritionalIntake(x)) → GrewUpInHealthConsciousHome(x))",
        "(HasGoodRelationshipWithParent(taylor, sam) ∧ FulfillDailyNutritionalIntake(taylor)) ⊕ ¬(FulfillDailyNutritionalIntake(taylor) ∨ Eat(taylor))",
        " (HasGoodRelationshipWithParent(sam, taylor) → FulfillDailyNutritionalIntake(taylor)) ⊕ ¬(Eat(taylor) ∨ VisitGymAtLeastOnceADay(taylor))",
        "(VisitGymAtLeastOnceADay(x) → ∃y (FulfillDailyNutritionalIntake(y) ∧ HasGoodRelationshipWithParent(sam, y)) ⊕ ¬(Eat(taylor) ∨ FulfillDailyNutritionalIntake(taylor)))",
        "  (¬HasGoodRelationshipWithParent(x, taylor)) ⊕ ¬(Eat(taylor) ∨ FulfillDailyNutritionalIntake(taylor))"
      ],
      "fol_conc": "(¬HasGoodRelationshipWithParent(x, taylor)) ⊕ ¬(VisitGymAtLeastOnceADay(taylor))",
      "perplexity": [
        1.3802436590194702,
        1.1904563903808594
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Conscious(x)",
        "Eats(x, y)",
        "Grewupx(x)"
      ],
      "fol_consts": [
        "taylor",
        "salad",
        "parent",
        "childhoodhome"
      ],
      "fol_rules": [
        "(∀x (Eats(x, salad) → Conscious(x)))",
        "(∀x (∃y ((Grewupx(y)) ∧ Eats(x, salad))))",
        "(∀x ((Fulfills(x) ∧ Grewupx(x))) → (Grewupx(x) ∧ Eats(x, salad)))",
        "(∀x (Goodrelation(parent, x) → Fulfills(x)))",
        "(∀x (Goodrelation(parent, x) → ¬Eats(x, salad)))",
        "(∃y ((Parent(y) ∧ Goodrelation(taylor, y)) ∨ ¬(Grewupchildhoodhome(taylor) ∨ Goodrelation(taylor, parent))))",
        "¬((Grewupchildhoodhome(taylor) ∧ Goodrelation(parent, taylor)) ∨ (Goodrelation(taylor, parent) ∨ Grewupchildhoodhome(taylor)))"
      ],
      "fol_conc": "(∃y ((Parent(y) ∧ Goodrelation(taylor, y)) ∨ ¬(Grewupchildhoodhome(taylor) ∨ Goodrelation(taylor, parent)))) ∨ ∃x (Goodrelation(gym, taylor))",
      "perplexity": 1.8876999616622925,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RegularlyEats salads(x)",
        "HasGoodRelation(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (RegularlyEats salads(x)) → ∀y ((HasGoodRelation(y, x) ∧ Eat(s, h)))",
        "¬(HasGoodRelation(taylor, y)) ∨ RegularlyEats salads(y)",
        "(∃x (GrowsInHealthfulUpbringing(h) ∧ HasGoodRelation(x, taylor)) → ∀z ((Eat(z, taylor))))",
        "RegularlyEats salads(taylor)",
        "¬(HasGoodRelation(y, x)) ∨ RegularlyEats salads(y)",
        "(HasGoodRelation(l) ∧ GrowsInHealthfulUpbringing(h) → (Eat(s, t)))",
        "∀x ((RegularlyEats salads(x)) ⊕ (∃z (((GrowsInHealthfulUpbringing(z) ∨ HasGoodRelation(y, x)))) ∧ Eat(taylor)))",
        "(HasGoodRelation(l) → ∀t (HasGoodRelation(f) ∨ HasGoodRelation(g)))",
        "¬(Eat(x))",
        "∀x (((RegularlyEats salads(e)) ∨ (∃z ((GrowsInHealthfulUpbringing(z)))) ∧ Eat(taylor)))"
      ],
      "fol_conc": "(GrowsInHealthfulUpbringing(h) ⊕ HasGoodRelation(l, taylor))",
      "perplexity": 15.263699531555176,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Eat/1, Eat/2, HasGoodRelation/1, HasGoodRelation/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Eat/1, Eat/2, HasGoodRelation/1, HasGoodRelation/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 162
  },
  {
    "id": 67,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Yale University has the largest university endowment of any educational institution.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "University(x)",
        "Moved(y, x)"
      ],
      "fol_consts": [
        "BeninFranklinCollege",
        "BerkeleyCollege",
        "BranfordCollege",
        "DavenportCollege",
        "EzraStilesCollege",
        "GraceHopperCollege",
        "JonathanEdwardsCollege",
        "MorseCollege",
        "PauliMurrayCollege",
        "PiersonCollege",
        "SaybrookCollege",
        "SillimanCollege",
        "TimothyDwightCollege",
        "TrumbullCollege"
      ],
      "fol_rules": [
        "∀x (University(x) → Moved(x, 1716))"
      ],
      "fol_conc": "∀y (∧(Endowment(y, z)) ∧ Z = 42.3 billion)",
      "perplexity": [
        2.7292356491088867,
        1.7189409732818604
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y (∧(Endowment(y, z)) ∧ Z = 42.3 billion)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven"
      ],
      "fol_rules": [
        "(∃x (Private(yale) ∧ Ivy(x))) ∨ (∀x (Yale(x) → ∃y (Newhaven(y))))",
        "∀x ((Ivy(x) ∨ Newhaven(x)) ⊕ Yale(x))"
      ],
      "fol_conc": "(∃x (Private(x) ∧ Ivy(x))) ∨ ∃x (Yale(x))",
      "perplexity": 3.6875975131988525,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IvyLeague(x)",
        "Private(x)",
        "ResearchUniversity(yale)",
        "MovedToNewHaven(x, utsb)",
        "ResearchUniversity(utx)",
        "Private(x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven"
      ],
      "fol_rules": [
        "∀x (IvyLeague(x) ∨ Private(x))",
        "(Private(yale)) ⊕ ResearchUniversity(yale)"
      ],
      "fol_conc": "∃x ((IvyLeague(x) ∧ MovedToNewHaven(utsb, x)) ∨ ∃y (∀z (ResearchUniversity(z) ∧ (MovedToNewHaven(utx, z) → ¬(Private(yale))) ∧ (IvyLeague(y) ∨ ResearchUniversity(y)))) ∨ Private(yale) ∨ ResearchUniversity(yale) ∨ MovedToNewHaven(newhaven, yale) ∨ ∃y (∀z ((ResearchUniversity(z) ∧ (MovedToNewHaven(newhaven, z) → ¬(Private(x))) ∧ (IvyLeague(x) ∨ ResearchUniversity(x)))) ∨ Private(x)))",
      "perplexity": 3.313566207885742,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((IvyLeague(x) ∧ MovedToNewHaven(utsb, x)) ∨ ∃y (∀z (ResearchUniversity(z) ∧ (MovedToNewHaven(utx, z) → ¬(Private(yale))) ∧ (IvyLeague(y) ∨ ResearchUniversity(y)))) ∨ Private(yale) ∨ ResearchUniversity(yale) ∨ MovedToNewHaven(newhaven, yale) ∨ ∃y (∀z ((ResearchUniversity(z) ∧ (MovedToNewHaven(newhaven, z) → ¬(Private(x))) ∧ (IvyLeague(x) ∨ ResearchUniversity(x)))) ∨ Private(x)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 163
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "Leads(y, z)",
        "Includes(z, w)",
        "FeudWith(u, v)",
        "FormedIn(x, y)"
      ],
      "fol_consts": [
        "DiamondMine()",
        "RoderickStrong()",
        "CreedBrothers()",
        "IvyNile()",
        "ImperiumStable()",
        "WWEPromotion()"
      ],
      "fol_rules": [
        "Stable(DiamondMine()) \\/ FormedIn(DiamondMine(), WWEPromotion())",
        "Leads(RoderickStrong(), DiamondMine())",
        "(Includes(DiamondMine(), CreedBrothers()) /\\ Includes(DiamondMine(), IvyNile()))",
        "FeudWith(ImperiumStable(), DiamondMine())"
      ],
      "fol_conc": "∃z (Leads(RoderickStrong(), z) \\/ Stable(z))",
      "perplexity": [
        1.2877863645553589,
        1.1648067235946655
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Stable(DiamondMine()) \\/ FormedIn(DiamondMine(), WWEPromotion())"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Professional(x)",
        "Stable(y, x)",
        "Formed(z, y, w)",
        "Leads(v, z)",
        "Includes(a, b)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "wwe",
        "imperium",
        "creedbrothers",
        "ivynile"
      ],
      "fol_rules": [
        "Stable(diamondmine, wwe)",
        "Formed(wwe, diamondmine, xtimexperiodx)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Stable(z, wwe)",
      "perplexity": 1.9204273223876953,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Lead(x, y)",
        "FormedIn(y, z)",
        "Include(y, z)",
        "FeudWith(u, v)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "imperium",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, w) ∧ Lead(roderick_strong, diamond_mine)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Lead(roderick_strong, y)",
      "perplexity": 1.4373159408569336,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 164
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "IsPartOf(y, z)",
        "Island(z)"
      ],
      "fol_consts": [
        "barutinCove",
        "snowIsland",
        "greenwichIsland",
        "deceptionIsland",
        "southShetlandIslands",
        "antarctica",
        "bulgaria",
        "barutinBulgarianSettlement"
      ],
      "fol_rules": [
        "NamedAfter(barutinCove, barutinBulgarianSettlement)",
        "LocatedIn(barutinCove, snowIsland)",
        "∀x (Island(x) → (LocatedIn(snowIsland, x) ⊕ LocatedIn(greenwichIsland, x) ⊕ LocatedIn(deceptionIsland, x)))",
        "IsPartOf(southShetlandIslands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "∃x (Island(x) ∧ NamedAfter(x, barutinBulgarianSettlement))",
      "perplexity": [
        1.169869303703308,
        1.0510454177856445
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Includes(z, x)"
      ],
      "fol_consts": [
        "barutin",
        "cove",
        "bulgarian",
        "settlement",
        "snowisland",
        "greenwichisland",
        "deceptionisland",
        "antarctica",
        "southshetlands"
      ],
      "fol_rules": [
        "Named(cove, bulgarian)",
        "Located(cove, snowisland)",
        "Includes(southshetlands, snowisland) ∧ Includes(southshetlands, greenwichisland) ∧ Includes(southshetlands, deceptionisland)",
        "Located(southshetlands, antarctica)",
        "(Located(x, y) ∧ Located(y, z)) → Located(x, z)"
      ],
      "fol_conc": "∃z (Named(z, bulgarian) ∧ Located(z, antarctica))",
      "perplexity": 1.2905948162078857,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Includes(z, x)"
      ],
      "fol_consts": [
        "BarutinCove",
        "BulgarianSettlement",
        "SnowIsland",
        "SouthShetlandIslands",
        "GreenwichIsland",
        "DeceptionIsland",
        "Antarctica"
      ],
      "fol_rules": [
        "NamedAfter(BarutinCove, BulgarianSettlement)",
        "LocatedIn(BarutinCove, SnowIsland)",
        "Includes(SouthShetlandIslands, SnowIsland) ∧ Includes(SouthShetlandIslands, GreenwichIsland) ∧ Includes(SouthShetlandIslands, DeceptionIsland)",
        "LocatedIn(SouthShetlandIslands, Antarctica)",
        "(LocatedIn(Antarctica, BulgarianSettlement) ∧ LocatedIn(BulgarianSettlement, Antarctica)) → LocatedIn(BarutinCove, Antarctica)"
      ],
      "fol_conc": "∃x (LocatedIn(Antarctica, BulgarianSettlement) ∨ NamedAfter(BarutinCove, BulgarianSettlement))",
      "perplexity": 1.5695061683654785,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 165
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "Striker(x)",
        "SoccerPlayer(x)"
      ],
      "fol_consts": [
        "robert_lewandowski"
      ],
      "fol_rules": [
        "∃x (Player(x) → Striker(x))",
        "],  # Simplified to reflect the relationship. The simplified rule is a direct inference from NL statements, without the need for complex quantifiers or explicit conditional logic.  ],   ",
        "fol_conc",
        "SoccerPlayer(robert_lewandowski)'} "
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": [
        2.5062079429626465,
        5.398693561553955
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  # Simplified to reflect the relationship. The simplified rule is a direct inference from NL statements, without the need for complex quantifiers or explicit conditional logic.  ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Striker(x)",
        "Soccerplayer(x)"
      ],
      "fol_consts": [
        "robertlewandowski",
        "bayernmunchen"
      ],
      "fol_rules": [
        "∀x (Player(x) → Soccerplayer(x))",
        "∃x (Striker(x) ∧ Player(x))",
        "Forall(x) → ¬(Leavingteam(x) ∧ Notleavingteam(x))",
        "Robertlewandowski(x) ∧ Leavingteam(x)",
        "¬Leavingteam(x)"
      ],
      "fol_conc": "Soccerplayer(robertlewandowski)",
      "perplexity": 2.223888635635376,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Robertlewandowski/1, Robertlewandowski/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Robertlewandowski/1, Robertlewandowski/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isA(x)",
        "playsFor(x, y)",
        "left(x, y)"
      ],
      "fol_consts": [
        "Robert Lewandowski",
        "striker",
        "soccer player",
        "Bayern Munchen"
      ],
      "fol_rules": [
        "∀x (isA(x) ∧ playsFor(x, Bayern Munchen)) → left(x, Bayern Munchen)",
        "(left(x, y) → isA(x))",
        "∃y (playsFor(Robert Lewandowski, y) ∧ isA(y))"
      ],
      "fol_conc": "isA(Robert Lewandowski)",
      "perplexity": 1.6780751943588257,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 166
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "web"
      ],
      "fol_consts": [
        "website"
      ],
      "fol_rules": [
        "Content: Web browsing is a topic that requires access to the internet.",
        "I can read this content"
      ],
      "fol_conc": "We cannot know the actual language. We only understand the text in plain English.",
      "perplexity": [
        5.82043981552124,
        8.928813934326172
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Content: Web browsing is a topic that requires access to the internet."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Trusting(x)"
      ],
      "fol_consts": [
        "vorte",
        "teatty"
      ],
      "fol_rules": [
        "Civintt(x) → Trusts(x)"
      ],
      "fol_conc": "Maryamtsonneaueein(n1) ∧ Vrosttnicnoys(n1)",
      "perplexity": 12.246976852416992,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Assassin', 'Napsevi'], 2.3, (n)",
        "Assassin', 'Napsevi'], 2.3, (x, y, z)",
        "Assassin', 'Napsevi'], 2.3, ()"
      ],
      "fol_consts": [
        "Trustworthy,"
      ],
      "fol_rules": [
        "(Assassin', 'Napsevi'], 2.3, (x))"
      ],
      "fol_conc": "(Assassin', 'Napsevi'], 2.3, ())",
      "perplexity": 19.681049346923828,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Assassin', 'Napsevi'], 2.3, (x))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 167
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornInCity(y, z)",
        "Person(x)",
        "AmericanCity(z)",
        "NovelWriter(x)",
        "Created(x, y)",
        "Book(x)",
        "YearWritten(x, y)"
      ],
      "fol_consts": [
        "daniShapiro",
        "familyHistory",
        "familySecrets",
        "boston",
        "americanCity",
        "year2003"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Novel(x))",
        "∀y ∀z (BornInCity(Person(y), AmericanCity(z)) → Person(y) is American)",
        "∀x ∀y ((Novel(Book(x)) ∧ WrittenBy(Book(x), Person(y))) → NovelWriter(Person(y)))",
        "(DaniShapiro is an American writer): ¬AmericanCity(daniShapiro)",
        "FamilyHistoryBookWrittenByDani: WrittenBy(familyHistory, daniShapiro).",
        "NovelFamilyHistory2003: (Novel(familyHistory) ∧ YearWritten(familyHistory, year2003)).",
        "DaniCreatedPodcast: Created(daniShapiro, familySecrets).",
        "AmericanCityBoston: AmericanCity(boston)"
      ],
      "fol_conc": "BornInCity(daniShapiro, boston): Dani Shapiro was born in Boston.",
      "perplexity": [
        1.3125823736190796,
        1.0868486166000366
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y ∀z (BornInCity(Person(y), AmericanCity(z)) → Person(y) is American)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Written(x, y)",
        "Person(x)",
        "Writer(x, y)",
        "American(x)"
      ],
      "fol_consts": [
        "danishapiro",
        "familyhistory",
        "boston"
      ],
      "fol_rules": [
        "¬Podcast(familyhistory)",
        "∀p (Born(p, boston) → American(p))",
        "∀b ∀w ((Novel(b) ∧ Written(b, w)) → Writer(novelist, b))",
        "Writer(danishapiro, familyhistory)",
        "Person(danishapiro)",
        "Born(danishapiro, americancity)",
        "American(americancity)",
        "Novel(familyhistory)"
      ],
      "fol_conc": "Born(danishapiro, boston)",
      "perplexity": 1.5471217632293701,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(y)",
        "Person(z)",
        "BornIn(a, b)",
        "AmericanCity(c)",
        "IsAWriterOf(d, e)",
        "Created(f, g)"
      ],
      "fol_consts": [
        "danielle",
        "shapiro",
        "family_history",
        "podcast",
        "novelist",
        "american",
        "family_secrets",
        "family_history",
        "american",
        "danielle",
        "shapiro",
        "novelist"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Novel(y))",
        "∀a (BornIn(a, c) ∧ AmericanCity(c) → IsAWriterOf(z, e))",
        "(Person(danielle) ∨ BornIn(danielle, american)) ∧ Person(shapiro) ∧ (Novel(family_history) ∧ Created(family_history, danielle)) → Novel(novelist)",
        "BornIn(danielle, shapiro) ∧ IsAWriterOf(american, novelist)",
        "(Podcast(podcast) ∨ Novel(podcast) ∨ Created(family_secrets, danielle))",
        "AmericanCity(b)"
      ],
      "fol_conc": "BornIn(danielle, b)",
      "perplexity": 2.3081722259521484,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 168
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)",
        "WrittenIn(x, y)",
        "Use(x, y)",
        "Play(x, y)",
        "Song(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "¬Use(mac)",
        "∀y ∀z Song(z ∧ z ≠ perfect(y)) → None"
      ],
      "fol_conc": "Sam or Bonnie attends.",
      "perplexity": [
        2.283777952194214,
        1.850750207901001
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y ∀z Song(z ∧ z ≠ perfect(y)) → None"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attend(x)",
        "Engaged(x, y)",
        "Performing(x, y)",
        "Chaperone(y, z)",
        "Student(z)"
      ],
      "fol_consts": [
        "bonnie",
        "talentshow",
        "schoolevent",
        "dance",
        "student"
      ],
      "fol_rules": [
        "∀x (Attend(x) → Student(student))",
        "(Performs(performing, x) ∧ Engaged(engaged, y)) ∨ ∃x (Student(z))",
        "(Chaperone(chaperone, z) ∧ Attend(attend)) ∨ ¬(Attends(talentshow, chaperone) ∨ Attends(talentshow, dance) ∨ Attends(schoolevent, student))"
      ],
      "fol_conc": "Attend(bonnie) → (Student(bonnie) ∧ Engaged(bonnie, talentshow)) ∨ ∃x (School(x) ∧ Student(attends, x))",
      "perplexity": 3.1438798904418945,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Attends(x, y)",
        "EngagedInEvents(x, y)",
        "Attends(x, y)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (Attends(x, z)) → (∃y ((Attends(y, x) ∧ EngagedInEvents(y, z))))",
        "(Attends(r) ∨ ¬EngagedInEvents(r)) ⊕ (¬(Attends(s) ∨ EngagedInEvents(s)))"
      ],
      "fol_conc": "∀x (Attends(x, r) ∨ Attends(x, s) → ∃y ((Attends(y, x) ∧ EngagedInEvents(y, z))))",
      "perplexity": 3.9329891204833984,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: EngagedInEvents/1, EngagedInEvents/2, Attends/1, Attends/2.\n\n\nFatal error:  The following symbols are used with multiple arities: EngagedInEvents/1, EngagedInEvents/2, Attends/1, Attends/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 169
  },
  {
    "id": 146,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is not young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Manager(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬Teaches(jerry) ⊕ ¬Manager(jerry)",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": [
        1.0537241697311401,
        1.2833539247512817
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studys(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studys(x) → Student(x))",
        "∀x (Studys(x) ⊕ Teaches(x))",
        "∀x (Young(x) ∧ Teaches(x) → False(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.201067328453064,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Teach(x)",
        "Manager(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "(Study(x) → Student(x)) ⊕ Teach(x)",
        "(Teach(x) ⊕ Study(x))",
        "¬(Young(x) ∧ Teach(x))",
        "¬(Teach(jerry) ∨ Manager(jerry))",
        "(Young(rose) ∨ Student(rose))"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.834060788154602,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 170
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxFavorite(x) → VeryFluffy(x))",
        "∀x (MaxFavorite(x) → LoveToSleep(x))",
        "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "∀x (Koala(x) → LoveToSleep(x))",
      "perplexity": [
        1.0403395891189575,
        1.0133841037750244
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Quokka(x)",
        "Animal(x)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(y, x))",
        "∀x (Animal(x) ∧ From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → Animal(x) ∧ From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Sleep(koala)",
      "perplexity": 1.134602427482605,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Koala/1, Koala/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Koala/1, Koala/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedByTourists(x)",
        "FavoriteAnimalOfMax(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "LovesToSleep(x)"
      ],
      "fol_consts": [
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → FavoriteAnimalOfMax(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (FavoriteAnimalOfMax(x) → Fluffy(x))",
        "∀x (FavoriteAnimalOfMax(x) → LovesToSleep(x))",
        "∀x (Fluffy(x) ∧ Quokka(x) → ¬Quokka(x))"
      ],
      "fol_conc": "LovesToSleep(koala)",
      "perplexity": 1.1183691024780273,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 171
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "RequireLabelledData(x)",
        "Train(x, y)"
      ],
      "fol_consts": [
        "text_summarization_model"
      ],
      "fol_rules": [
        "∀x (ML(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "¬RequireLabelledData(x)",
        "Train(text_summarization_model, x)",
        "¬Reinforcement(x) → Train(text_summarization_model, x)",
        "RequireLabelledData(x)"
      ],
      "fol_conc": "Unsupervised(x) → Train(text_summarization_model, x)",
      "perplexity": [
        1.385263442993164,
        1.3343727588653564
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Trained(x, y)",
        "Requires(x, y)",
        "Labelled(x, y)"
      ],
      "fol_consts": [
        "textsummodel"
      ],
      "fol_rules": [
        "∀x (Machine(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "¬Unsupervised(x) → ¬Requires(x, labelled)",
        "Trained(textsummodel, machine)",
        "¬Reinforcement(x) → ¬Trained(textsummodel, x)",
        "Requires(machine, labelled)"
      ],
      "fol_conc": "Unsupervised(x) → Trained(textsummodel, x)",
      "perplexity": 1.3394588232040405,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Machine/1, Machine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Machine/1, Machine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CategorizedAs(x, y)",
        "SupervisedLearning(y)",
        "UnsupervisedLearning(y)",
        "ReinforcementLearning(y)",
        "TrainedWith(x, y)"
      ],
      "fol_consts": [
        "text_summarization_model",
        "text_summarization_model"
      ],
      "fol_rules": [
        "∀x (∃y (CategorizedAs(x, y) ∧ SupervisedLearning(y)) ⊕ ∃y (CategorizedAs(x, y) ∧ UnsupervisedLearning(y)) ⊕ ∃y (CategorizedAs(x, y) ∧ ReinforcementLearning(y)))",
        "¬TrainedWith(text_summarization_model, y)",
        "∀x (∃z (UnsupervisedLearning(z) ∧ TrainedWith(x, z)) → ¬(ReinforcementLearning(y) ∧ TrainedWith(x, y)))",
        "CategorizedAs(text_summarization_model, x) ⊕ ∃y ((TrainedWith(text_summarization_model, y) ∧ UnsupervisedLearning(y)))"
      ],
      "fol_conc": "∀x (∃z (UnsupervisedLearning(z) ∧ TrainedWith(x, z)) → ∃y ((CategorizedAs(text_summarization_model, x) ⊕ CategorizedAs(text_summarization_model, y))))",
      "perplexity": 2.2536749839782715,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 172
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Simple Language Toolkit (ANACRI), epic!],"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 173
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)",
        "Man(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x ((Man(x)) → (Kind(x) ⊕ Evil(x)))",
        "∀x ((Ugly(x)) → (¬Handsome(x)))",
        "∀x ((Evil(x)) → Ugly(x))",
        "∀x ((Gentleman(x)) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "CEO(harry)",
      "perplexity": [
        1.250016212463379,
        1.0775479078292847
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceo(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceo(x) → Gentleman(x))"
      ],
      "fol_conc": "Ceo(harry)",
      "perplexity": 1.195520043373108,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x ((Ugly(x) ∧ Handsome(x)) → ∃y (Handsome(y)))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x ((CEO(x) ⊕ Gentleman(x)) → ¬Gentleman(y))"
      ],
      "fol_conc": "Handsome(harry)",
      "perplexity": 1.3154454231262207,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 174
  },
  {
    "id": 117,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter can block Windy's shooting.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shooting(x)",
        "Jump(x)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀y (Man(y) ∧ ¬Be(y, michael) → Taller(michael, y))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ((Man(x) ∧ Taller(x, y) ∧ ¬Jump(y)) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) ∧ Shooting(x) → GreatShooter(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": [
        1.051101803779602,
        1.01338791847229
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shoot(x)",
        "Jump(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Taller(michael, x))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Taller(michael, x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → Great(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": 1.1347333192825317,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "BlockShooting(x, y)",
        "JumpShooting(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → BlockShooting(x, y))",
        "Man(michael) ∧ ∀x ((Man(x) ∧ ¬(¬(Taller(michael, x)))))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "BlockShooting(michael, x) ↔ ¬JumpShooting(x)",
        "¬BlockShooting(michael, windy)",
        "∀x (JumpShooting(x) → GreatShooter(x))"
      ],
      "fol_conc": "BlockShooting(peter, windy)",
      "perplexity": 1.3088746070861816,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 175
  },
  {
    "id": 152,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Palace of Flies was translated from Italian.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)",
        "WrittenIn(x, y)",
        "Use(x, y)",
        "Play(x, y)",
        "Song(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, rust)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "(mac ∨ Use(sam, sam)) ⊢ ∃x Song(x): If Sam uses a Mac or does a project",
        "∀x ((Song(x) ∧ ¬Be(x, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))",
      "perplexity": [
        1.2017226219177246,
        1.623298168182373
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(mac ∨ Use(sam, sam)) ⊢ ∃x Song(x): If Sam uses a Mac or does a project"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Publishes(x, y)",
        "Translated(x, z)",
        "Published(y)",
        "Book(z)"
      ],
      "fol_consts": [
        "vessel",
        "press"
      ],
      "fol_rules": [
        "(∃x (Press(x))) ⊕ (∃y (Vessel(press)) → Published(vessel, y))"
      ],
      "fol_conc": "Translated(palaceofflies)",
      "perplexity": 4.447717666625977,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PublishedByNewVesselPress(x)",
        "IsPublisher(x, y)"
      ],
      "fol_consts": [
        "newvesselepress",
        "neapolitanchronicles",
        "palaceofflies"
      ],
      "fol_rules": [
        "∀x (PublishedByNewVesselPress(x) → IsPublisher(newvesselepress, x))",
        "(IsPublisher(newvesselepress, y)) ∧ (∃x (PublishedByNewVesselPress(x, y))) ⊕ ∃y (PublishedByNewVesselPress(y, newvesselepress))"
      ],
      "fol_conc": "(IsPublisher(newvesselepress, palaceofflies) ∨ IsPublisher(newvesselepress, neapolitanchronicles))",
      "perplexity": 2.24520206451416,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PublishedByNewVesselPress/2, PublishedByNewVesselPress/1.\n\n\nFatal error:  The following symbols are used with multiple arities: PublishedByNewVesselPress/2, PublishedByNewVesselPress/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 176
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SingleParentFamily(x)",
        "Income(x) < $205",
        "EconomicHardship(economic_hardness, x)"
      ],
      "fol_consts": [
        "sam"
      ],
      "fol_rules": [
        "{x ∈ Domain} ∀y SingleParent y ∨ x Parent Family y ∧ Income(y) ≤ AverageSalary() → Not (Work(x, y)) : No one lives alone with too little money.",
        "{∀z Dad(z) ⇒ ¬ Work(Work(x, z)): The father does not have a job that pays."
      ],
      "fol_conc": "∃x SingleParentFamily(x)",
      "perplexity": [
        3.5197274684906006,
        2.675503730773926
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{x ∈ Domain} ∀y SingleParent y ∨ x Parent Family y ∧ Income(y) ≤ AverageSalary() → Not (Work(x, y)) : No one lives alone with too little money."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, money)",
        "Is(x, a)",
        "Lives(x, family)"
      ],
      "fol_consts": [
        "tom",
        "dad"
      ],
      "fol_rules": [
        "(∃y (Money(y))) ∧ ¬(Economic(x)) ∨ ∃y ((Financial(x, y) ∧ Has(y, money)) → Is(a, x))"
      ],
      "fol_conc": "¬Has(tom, money)",
      "perplexity": 4.479578018188477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CantBeHelped(x)",
        "HasJob(x)"
      ],
      "fol_consts": [
        "gre",
        "financialaid",
        "financialaid",
        "financialaid",
        "financialaid",
        "gre",
        "financialaid"
      ],
      "fol_rules": [
        "∃x (CantBeHelped(x))",
        "(HasJob(s) ∧ CantBeHelped(gre)) → ¬(HasJob(r) ∨ HasJob(gre))",
        "(HasJob(financialaid)) ∨ ¬(HasJob(financialaid))"
      ],
      "fol_conc": "¬(HasJob(financialaid) ∨ HasJob(gre))",
      "perplexity": 5.358760833740234,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 177
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sad(x)",
        "Happy(e)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀e ∀x (Sad(e) ∧ Event(x)) ∨ ∃x (∃y ∈ e: Sad(y))]}, {",
        "fol_conc",
        "}"
      ],
      "fol_conc": "All events are sad.",
      "perplexity": [
        2.4045958518981934,
        8.124675750732422
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀e ∀x (Sad(e) ∧ Event(x)) ∨ ∃x (∃y ∈ e: Sad(y))]}, {"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "event"
      ],
      "fol_rules": [
        "∀x (Event(x) → Happy(x))",
        "(Atleast(x, event1)) ∨ ((Atleast(x, event2)) ∧ (∃y (Event(y))))"
      ],
      "fol_conc": "All(event) ⊕ None(sad)",
      "perplexity": 4.139740467071533,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Event/1, Event/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Event/1, Event/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Event(x)",
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "happy",
        "sad"
      ],
      "fol_rules": [
        "∀x (Event(x) → Happy(x))",
        "(∃x ∃y ∃z (Event(y, z) ∧ Event(z, y))) ∨ ∀x (Event(x) ∨ Sad(x))",
        "(Sad(r) ⊕ Happy(r)) → ¬(Happy(r) ∨ Sad(r))"
      ],
      "fol_conc": "¬Sad(r)",
      "perplexity": 2.8914854526519775,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Event/2, Event/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Event/2, Event/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 178
  },
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Attend(x)",
        "Engaged(x)",
        "PerformInTalentShows(x)",
        "Inactive(x)",
        "Chaperone(x, y)",
        "Student(x)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (PerformInTalentShows(x) → (∃y (Attend(y) ∧ Engaged(y)) ∧ Student(x)))",
        "PerformInTalentShows(x) ⊕ Inactive(x)",
        "∀x (Chaperone(highschool_dance(x), x) → ¬Student(x))",
        "∀x Chaperone(x, y)",
        "∃y (Student(y) ∧ Attend(y)) → (∀x Student(x))",
        "Inactive(bonnie) ⊕ Engaged(bonnie)"
      ],
      "fol_conc": "PerformInTalentShows(bonnie)",
      "perplexity": [
        1.435240387916565,
        1.2257014513015747
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Chaperone(highschool_dance(x), x) → ¬Student(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attends(x)",
        "Engaged(x, y)",
        "Attend(x, y)"
      ],
      "fol_consts": [
        "bonnie",
        "schoolshow",
        "highschooldance",
        "communitymember",
        "youngchild",
        "teenager",
        "studentwhoattendsschool",
        "inactiveanddisinterested"
      ],
      "fol_rules": [
        "(Perform(schoolshow) → (Attend(x, y) ∧ Engaged(x, y)))",
        "(Perform(schoolshow) ⊕ Communitymember(x))",
        "Chaperone(y) → ¬Studentwhoattendschool(y)",
        "∀x (Chaperone(x) → Inactiveanddisinterested(x))",
        "Youngchild(x) ∨ Teenager(x) → Studentwhoattendsschool(x)",
        "(Attends(bonnie) ∧ Engaged(bonnie, schoolshow)) ⊕ ¬(Attends(bonnie) ∨ Engaged(bonnie, schoolshow))"
      ],
      "fol_conc": "Perform(schoolshow, bonnie)",
      "perplexity": 1.767084002494812,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Perform/1, Perform/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Perform/1, Perform/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Attend(x)",
        "Attend(school, x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "(∃x (Often(x)) → (∀y (Attend(y))) ∧ Attend(family))",
        "(∃x (Attend(eventuals, y)) ⊕ ¬(Attend(generally) ∨ Attend(locals)))",
        "¬((Attend(school)) ∧ Attend(birthright)) → ∃z ((Attend(dance, z)))",
        "∀y (((Often(y) ∨ (Attend(eventuals)))) ⊕ ¬(Attend(generally) ∨ Attend(locals)))",
        "(Attend(school)) ∧ Attend(birthright)",
        "(¬(Attend(students, bonnie)) → (∃z ((Often(z)) ∨ (Attend(eventuals)))) ⊕ ¬(Attend(generally) ∨ Attend(locals)))"
      ],
      "fol_conc": "(∀y (((Attend(family, y) ∧ Often(y)) ⊕ ∃x (Attend(students, x) ∨ Attend(birthright)))) → Attend(eventuals))",
      "perplexity": 7.303131103515625,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Attend/1, Attend/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Attend/1, Attend/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 179
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "3.5,14",
        "6.8",
        "8.9"
      ],
      "fol_consts": [
        "4.2,5,7",
        "2.0",
        "6.2"
      ],
      "fol_rules": [
        "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct.",
        " "
      ],
      "fol_conc": "Coudert's denrntriezantrye, oteerstin nyeauleikaktisnneoceliberti, iqid viaeglouue to meeaibomntye lnguikakliuereikaktnixten, eçioctin teoiktitiksigtiange.",
      "perplexity": [
        7.040337085723877,
        15.77748966217041
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "dredly(z)"
      ],
      "fol_consts": [
        "_ (when torn from coc, it will be tasty), ",
        ".join([c["
      ],
      "fol_rules": [
        "dredly(_ (when torn from coc, it will be tasty), )"
      ],
      "fol_conc": "((((dredly(z)) ∧ ¬((dredly(v))))))",
      "perplexity": 36.158042907714844,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "dredly(_ (when torn from coc, it will be tasty), )"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 180
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "largeDesktopMonitorAtHome(x)",
        "workRegularlyOftenAtHome(x)",
        "fullyStockedAndImpressiveHomeOffice(x)",
        "spendFreeTimeTidyingOrganizingSpacesInHomes(x)",
        "visitTheOfficeSupplyStoreRegularly(x)",
        "goToBedLateAndWakeUpEveryDayAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (largeDesktopMonitorAtHome(x) → workRegularlyOftenAtHome(x))",
        "∃z ((fullyStockedAndImpressiveHomeOffice(remy)) ⊆ largeDesktopMonitorAtHome(z), where z = remy)",
        "∀x (workRegularlyOftenAtHome(x) → spendFreeTimeTidyingOrganizingSpacesInHomes(x))",
        "∀x (workRegularlyOftenAtHome(x) → visitTheOfficeSupplyStoreRegularly(x))",
        "∀x ((spendFreeTimeTidyingOrganizingSpacesInHomes(remy))) ⊆ ¬goToBedLateAndWakeUpEveryDayAfterNoon(z), where z = remy)",
        "∀z (largeDesktopMonitorAtHome(z) → fullyStockedAndImpressiveHomeOffice(y), where y = remy)"
      ],
      "fol_conc": "(goToBedLateAndWakesUpEarly(remy)) ⊕ visitTheOfficeSupplyStoreRegularly(remy): Remy neither spends his/her free time tidying and organizing spaces in their home nor has a fully stocked and impressive home office.",
      "perplexity": [
        1.347904920578003,
        1.1901507377624512
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃z ((fullyStockedAndImpressiveHomeOffice(remy)) ⊆ largeDesktopMonitorAtHome(z), where z = remy)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Work(y, z)",
        "Home(y, z)",
        "Stocked(x)",
        "Impressive(z)",
        "Tidy(x)",
        "Organized(y)",
        "Visit(x)",
        "Late(y)",
        "Wakeup(y)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Work(regularlyandoftenhome))",
        "∀x (Stockedimpressiveoffice(x) → Own(x, largedesktopmonitor))",
        "∀x (Work(y, regularlyandoftenhome) → Tidy(x) ∧ Organized(y))",
        "∀x (Work(y, regularlyandoftenhome) → Visit(officesupplystore))",
        "∀x (Tidyingorganizingspacesinhome(x) → ¬Late(x) ⊕ Wakeup(everydayafternoon))"
      ],
      "fol_conc": "(¬Tidy(x) ∧ ¬Stockedimpressiveoffice(x) → Visit(officesupplystore) ∨ Late(y))",
      "perplexity": 1.8454809188842773,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Work/2, Work/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Work/2, Work/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Ownt(x, y)",
        "WorksRegularlyAtHome(x)",
        "HasFullyStockedImpressiveOffice(x)",
        "TidiesAndOrganizesSpacesInTheirHome(x)",
        "VisitsOfficeSupplyStoreRegulary(x)",
        "WorksRegularlyAtHome(x)",
        "Ownt(y)",
        "WorksRegularlyAtHome(y)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Ownt(x, largeDesktopMonitor) → WorksRegularlyAtHome(x))",
        "∀x ((HasFullyStockedImpressiveOffice(x)) → Ownt(x, largeDesktopMonitor))",
        "∀x (WorksRegularlyAtHome(x) → TidiesAndOrganizesSpacesInTheirHome(x) ∧ VisitsOfficeSupplyStoreRegulary(x))",
        "∀x ((TidiesAndOrganizesSpacesInTheirHome(x)) → ¬(WorksRegularlyAtHome(x)))",
        "(WorksRegularlyAtHome(x) → TidiesAndOrganizesSpacesInTheirHome(x)) ⊕ ¬((WorksRegularlyAtHome(x) ∧ (TidiesAndOrganizesSpacesInTheirHome(x))))",
        "¬(((WorksRegularlyAtHome(remy)) → TidiesAndOrganizesSpacesInTheirHome(remy)))"
      ],
      "fol_conc": "(WorksRegularlyAtHome(remy) ∨ VisitsOfficeSupplyStoreRegulary(remy)) → ¬((TidiesAndOrganizesSpacesInTheirHome(x)) ∧ HasFullyStockedImpressiveOffice(x))",
      "perplexity": 2.2085978984832764,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 181
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Montana(x)",
        "Has_Cities(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "white sulphur springs",
        "pierre"
      ],
      "fol_rules": [
        "∀x (City(billings) → City(Montana))",
        "∃x (Has_Cities(Butte, x) ∧ Has_Cities(White Sulphur Springs, x))"
      ],
      "fol_conc": "(∀x (City(billings) → City(Montana)) ∧ ∃x (Has_Cities(butte, x) ∧ Has_Cities(white sulphur springs, x)))→ ∃x (Butte and Pierre are in the same state)}",
      "perplexity": [
        2.959338426589966,
        1.1957212686538696
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x (City(billings) → City(Montana)) ∧ ∃x (Has_Cities(butte, x) ∧ Has_Cities(white sulphur springs, x)))→ ∃x (Butte and Pierre are in the same state)}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "State(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "pierre",
        "white"
      ],
      "fol_rules": [
        "∀x (City(x) → In(x, montana))",
        "Montana(x) ∧ City(y) ∧ In(y, montanta) ∧ Is(y, x) → ¬Is(y, pierre)",
        "In(butte, white) ∧ In(white, butte) ∧ State(butte) ∧ ¬State(pierre)"
      ],
      "fol_conc": "Butte(x) ∧ Pierre(x)",
      "perplexity": 1.732763409614563,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Butte/1, Butte/0, Pierre/1, Pierre/0, Montana/1, Montana/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Butte/1, Butte/0, Pierre/1, Pierre/0, Montana/1, Montana/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "in_(x, y)",
        "in_(x)"
      ],
      "fol_consts": [
        "Billings",
        "Montana",
        "Butte",
        "Helena",
        "Missoula",
        "White Sulphur Springs",
        "Pierre"
      ],
      "fol_rules": [
        "∀x (in_(Billings, Montana))",
        "(in_(Butte, Pierre) ∧ in_(Butte, White Sulphur Springs)) → in_(Butte, Pierre)",
        "(¬(in_(Montana, Pierre)))",
        "∀x (in_(x) → in_(White Sulphur Springs, x))"
      ],
      "fol_conc": "in_(Pierre, Montana)",
      "perplexity": 4.1788482666015625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: In_/1, In_/2.\n\n\nFatal error:  The following symbols are used with multiple arities: In_/1, In_/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 182
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1, 'cril' to understand how yourkyar's crentoreyss is in the sknech-nuttyardt,"
      ],
      "fol_consts": [
        "calumb"
      ],
      "fol_rules": [],
      "fol_conc": "Cilly!",
      "perplexity": [
        5.744722843170166,
        13.818531036376953
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cilly!"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Alien(zeros, cousins)",
        "Achievement1(x)",
        "Aliceein(nust, cousins)"
      ],
      "fol_consts": [
        "realty",
        "alieeion",
        "aueceion"
      ],
      "fol_rules": [
        "If1alieein(zates, cousins) ∧ Achievement2(x) ∧ Excouteeilage1(zateuetch, cousins) ∧ Couskouslionn(axiotgion) ∧ Xerieein(vueceitsei, cousin) ∧ ∃x (Couskouslionn(x))"
      ],
      "fol_conc": "Aliceein(zates, cousins) ∨ ∀x (Itoochy1aueceiotrialiaeicuioutauretchertyttsnatvoykieslionn(zareuetch, couscouslionn))",
      "perplexity": 10.39339542388916,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Ficrae(x)",
        "Neref(n)"
      ],
      "fol_consts": [
        "_",
        "_"
      ],
      "fol_rules": [
        "∀v (Ficrae(_)) → Neref(u, v)",
        "¬((Neref(p)) ⊕ ¬(Neref(h)))",
        "∃x ((Ficrae(k)))",
        "(Ficrae(_))"
      ],
      "fol_conc": "((((Ficrae(u)) ∧ Neref(t))))",
      "perplexity": 24.32681655883789,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Neref/2, Neref/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Neref/2, Neref/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 183
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sitcom(x)",
        "Star(x, y)",
        "Pilot(x, y)",
        "WorkingTitle(x, y)",
        "ScriptEditor(x, y)",
        "Member(x, y)",
        "Channel(x)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "bbc_two",
        "bbc_three",
        "andrew_collins",
        "secret_dude_society",
        "july_2013"
      ],
      "fol_rules": [
        "Sitcom(badults)",
        "∃x (Member(x, pappys) ∧ Star(x, badults))",
        "Pilot(badults, bbc_three)",
        "WorkingTitle(badults, secret_dude_society)",
        "ScriptEditor(badults, andrew_collins)"
      ],
      "fol_conc": "∀x ((Member(x, pappys) ∧ (Pilot(badults, bbc_three) ⊕ Pilot(badults, bbc_two))) → False)",
      "perplexity": [
        1.3281742334365845,
        1.208306074142456
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((Member(x, pappys) ∧ (Pilot(badults, bbc_three) ⊕ Pilot(badults, bbc_two))) → False)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Series(x)",
        "Starring(x, y)",
        "Piloted(x, y)",
        "Title(x, y)",
        "Editor(x, y)",
        "Member(x, y)",
        "Show(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "andrewcollins",
        "july2013",
        "bbcthree",
        "bbctwo"
      ],
      "fol_rules": [
        "Series(badults)",
        "Starring(badults, pappys)",
        "Piloted(badults, july2013)",
        "Title(badults, thesecretduedesociety)",
        "Editor(badults, andrewcollins)"
      ],
      "fol_conc": "¬(∃x (Member(x, pappys) ∧ Show(x, y) ∧ (Piloted(y, bbcthree) ∨ Piloted(y, bbctwo))))",
      "perplexity": 1.309848427772522,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BritishSitcom(x)",
        "StarIn(x, y)",
        "PilotedOn(x, y)",
        "WorkingTitleFor(x, y)",
        "StarIn(y, z)"
      ],
      "fol_consts": [
        "badults",
        "andrew collins",
        "july 2013",
        "bbc three",
        "the secret dude society",
        "bbc two",
        "bbc three",
        "bbc two",
        "andrew collins",
        "bbc three",
        "andrew collins",
        "bbc three"
      ],
      "fol_rules": [
        "BritishSitcom(badults) ∧ StarIn(badults, p) → WorkingTitleFor(p, the secret dude society)",
        "PilotedOn(badults, july 2013) ∧ PilotedOn(badults, bbc three)",
        "WorkingTitleFor(badults, the secret dude society)",
        "(StarIn(x, andrew collins)) ⊕ ¬(BritishSitcom(x) → (PilotedOn(x, bbc two) ∨ PilotedOn(x, bbc three)))"
      ],
      "fol_conc": "¬((StarIn(y, z) ∧ BritishSitcom(z)) ∧ PilotedOn(z, bbc two) ∨ PilotedOn(z, bbc three))",
      "perplexity": 2.6001479625701904,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 184
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow",
        "SevereCancer(x)",
        "BileDuctCancer(BDC)",
        "MildFlu(z)",
        "Cholangiocarcinoma(y)",
        "ColorectalCancer(w)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow)",
        "∀x (SevereCancer(x) → Deadly(x))",
        "BileDuctCancer(BDC)",
        "∀y ((Cholangiocarcinoma(y) → BileDuctCancer(BDC)))",
        "∃z (~MildFlu(z))",
        "(∀x ~BileDuctCancer(x)): No one with mild flu has a low survival rate.",
        "∀w ((ColorectalCancer(w) ∧ BileDuctCancer(BDC)) → ¬Deadly(BDC)"
      ],
      "fol_conc": "(∃z (~MildFlu(z) ∧ ~Cholangiocarcinoma(y))) → (BileDuctCancer(BDC) ⊕ Cholangiocarcinoma(y))",
      "perplexity": [
        1.7727313041687012,
        1.1888010501861572
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Deadly(x) → SurvivalRateLow)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(y)",
        "Bileduct(z)",
        "Cholangiocarcinoma(w)",
        "Mildflu(v)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Lowsurvivalrate(x))",
        "∀y (Severe(y) → Deadly(y))",
        "Bileduct(bile)",
        "Cholangiocarcinoma(chol)",
        "∃w ((Mildflu(w) ∧ ¬Lowsurvivalrate(v)))",
        "(Colorectalcolorectalcancer(x) ∧ Lowsurvivalratelowcolorectalcancer(x)) → (¬Bileductx(x, bile))"
      ],
      "fol_conc": "(¬Mildflu(colorectal) ∨ Cholangiocarcinoma(chol)) → Bileduct(bile)",
      "perplexity": 2.4539825916290283,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(y)",
        "SurvivalRateLow(z)"
      ],
      "fol_consts": [
        "colorectal",
        "bileduct"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLow(zy))",
        "∀y (SevereCancer(y) ∧ DeadlyDisease(bileduct))",
        "BileDuctCancer(colorectalcancer)",
        "∃z ((Cholangiocarcinoma(z) → BileDuctCancer(colorectal)))",
        "(MildFlu(rina) → ¬SurvivalRateLow(rinaz))",
        "(DeadlyDisease(biledutccancer) ∧ SurvivalRateLow(surviveratebileductcancerz) → ¬BileDuctCancer(colorectalcancerz))"
      ],
      "fol_conc": "(¬MildFlu(rina) ∧ Cholangiocarcinoma(zinacomponentrinal)) → (DeadlyDisease(biledutccancer) ⊕ BileDuctCancer(z))",
      "perplexity": 2.0727460384368896,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 185
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "datin",
        "troddi', ",
        "],                                                                                                                                                                                               "
      ],
      "fol_consts": [
        "dauee, caiui, troddi",
        "ayekauee, souhouee",
        "elebauee",
        "i i ynklaue ekeen't",
        "duee kloole', ",
        "              ",
        "                                                                                                                                                                     "
      ],
      "fol_rules": [
        "Uhnoe ou huekty, i sui oi ukauee",
        "Dayneo vibinnye ayekaue eteerloy. ou i ynktryaue ou troddi aeyldaeou, caukeerdoi doolee?"
      ],
      "fol_conc": "If we don't know what this happens to me or anyone else.",
      "perplexity": [
        5.4655890464782715,
        19.639009475708008
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Uhnoe ou huekty, i sui oi ukauee"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cossernoveisntedaloguein(x)",
        "Gunceyvellonionistetatzingittoufessoriveiltelloctodameidlettuikevirestapusseprofeinsynnelklibielnnyssotterdallamisntaloguein(x)"
      ],
      "fol_consts": [
        "unceyvellonionistetatzingittoufessorineolodameidlettoikevirestapusseprofeinsynnekivka",
        "nonsernoveelldaloguein"
      ],
      "fol_rules": [
        "(Sultrisntedadarehortonicoslemereoplacessoriveiltellolibielupeidlettoikevirestapusseprofeinsynnemistallamissotrottouvelloguein(x))"
      ],
      "fol_conc": "Coussernoveisntedalochromesmeicoslemereoplacessoriveiltellolibielupeidlettoikevirestapusseprofeinsynnemistallamissotrottouvelloguein(x)",
      "perplexity": 10.411721229553223,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Boltin, baouluvian(x)",
        "Boltin, baouluvian(y)"
      ],
      "fol_consts": [
        "$0.ba oucauee."
      ],
      "fol_rules": [
        "_(b) → (Boltin, baouluvian(i))",
        "∀x ((Boltin, baouluvian(j)))",
        "((Boltin, baouluvian(k)) ⊕ ¬(Boltin, baouluvian(d) ∧ Boltin, baouluvian(b)))",
        "∀x (((Boltin, baouluvian($0.ba oucauee.))))"
      ],
      "fol_conc": "_(a, b) → ¬(_(p, a) ⊕ _(o, d) ∧ ((Boltin, baouluvian(i))))",
      "perplexity": 15.278630256652832,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "_(b) → (Boltin, baouluvian(i))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 186
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Square(x)",
        "FourSidedThing(x)",
        "Shape(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        ""
      ],
      "fol_conc": "∀x (Shape(x) ∧ Square(x))",
      "perplexity": [
        2.075451135635376,
        1.1886869668960571
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Square(x)",
        "Foursided(x)",
        "Shape(x)"
      ],
      "fol_consts": [
        "square",
        "shape"
      ],
      "fol_rules": [
        "∀x (Square(x) → Foursided(x))",
        "∀x (Foursided(x) → Shape(x))",
        "(Square(x) ∧ Shape(x))"
      ],
      "fol_conc": "All(squares)",
      "perplexity": 2.0726664066314697,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hasSides(x)",
        "isShape(x)"
      ],
      "fol_consts": [
        "square",
        "shape"
      ],
      "fol_rules": [
        "∀x (hasSides(x) → isShape(x))",
        "∃x (hasSides(x) ∧ isShape(x))"
      ],
      "fol_conc": "∀x (isShape(x) ∧ hasSides(x))",
      "perplexity": 1.4714155197143555,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 187
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SitcomSeries(x)",
        "StarredInByMembersOfPappys(y, z)",
        "PilotedOn(series_name, channel)",
        "WorkingTitle(script_title, title)",
        "ScriptEditor(script_editor, script)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "july2013",
        "bbc_three: BBC Three (the channel)",
        "the_secret_dude_society: The working title \"The Secret Dude Society\"",
        "andrew_collins"
      ],
      "fol_rules": [
        "∀x ((SitcomSeries(x) ∧ StarredInByMembersOfPappys(badults, x))) : Badults is a British sitcom series starring members of Pappy’s group.",
        "PilotedOn(badults, bbc_three): The Working title \"The Secret Dude Society\" was used for Badults.",
        "ScriptEditor(andrew_collins, badults) : Andrew Collins was the script editor for Badults."
      ],
      "fol_conc": "∃series ((SitcomSeries(badults)) ∧ (PilotedOn(badults, bbc_three))) → WorkingTitle(script_title, \"The Secret Dude Society\")",
      "perplexity": [
        1.599941611289978,
        1.1940125226974487
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((SitcomSeries(x) ∧ StarredInByMembersOfPappys(badults, x))) : Badults is a British sitcom series starring members of Pappy’s group."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Series(x)",
        "Pilot(x, z)",
        "Scripted(z)",
        "Workingtitle(x)",
        "British(x)"
      ],
      "fol_consts": [
        "badults",
        "andrewcollins"
      ],
      "fol_rules": [
        "∃z (Badults(z))",
        "Is(badults, british)",
        "Pilot(badults, ickle2013)",
        "Scripted(andrewcollins)",
        "Workingtitle(badults)",
        "British(series)",
        "Illustrate(x)"
      ],
      "fol_conc": "∃z (Series(z) ∧ Workingtitle(z))",
      "perplexity": 3.02978777885437,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Series/1, Series/0, British/1, British/0, Badults/1, Badults/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Series/1, Series/0, British/1, British/0, Badults/1, Badults/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Series(x)",
        "Piloted(y, x)",
        "ScriptEditor(z, w)"
      ],
      "fol_consts": [
        "badults",
        "andrewcollins"
      ],
      "fol_rules": [
        "∃x (Series(badults) ∧ Piloted(july2013, badults))",
        "∃w ((Series(badults) ∧ ScriptEditor(andrewcollins, w))) → ¬Piloted(m, n)"
      ],
      "fol_conc": "ScriptEditor(andrewcollins, x) ∧ ∃y (Series(z) ∧ Piloted(y, z))",
      "perplexity": 1.819085717201233,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 188
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "*"
      ],
      "fol_consts": [
        "1.2.3",
        "4.5"
      ],
      "fol_rules": [
        "3.6 :p,"
      ],
      "fol_conc": "The world is real and there's no doubt.",
      "perplexity": [
        4.810638904571533,
        9.159553527832031
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.6 :p,"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "cold(x)",
        "adex(n)"
      ],
      "fol_consts": [
        "cooked",
        "cooked",
        "cooked"
      ],
      "fol_rules": [
        "((cold(z)) → cold(g) ∧ cold(v))",
        "(((cold(x))) → adex(i) ⊕ (adex(e) ∨ (cold(u, i))))"
      ],
      "fol_conc": "cold(z)",
      "perplexity": 26.11669158935547,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Cold/2, Cold/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Cold/2, Cold/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 189
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ContainsKnowledge(x)",
        "ReadsBook(x, y)",
        "GainKnowledge(x)",
        "BecomesSmarter(x)",
        "Book(y)",
        "AuthorOf(z, w)",
        "TitleIs(w, v)"
      ],
      "fol_consts": [
        "harry",
        "walden_by_thoreau",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainsKnowledge(x))",
        "∀x, y (ReadsBook(x, y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → BecomesSmarter(x))",
        "ReadsBook(harry, walden_by_thoreau)",
        "Book(walden_by_thoreau)",
        "AuthorOf(thoreau, walden_by_thoreau)",
        "TitleIs(walden_by_thoreau, walden)",
        "∀y (TitleIs(x, y) → ContainsKnowledge(x))",
        "∀z, w ((AuthorOf(z, w)) → GainKnowledge((ReadsBook(_, z))) )",
        "(ReadsBook(harry, walden_by_thoreau) & ContainsKnowledge(walden_by_thoreau))"
      ],
      "fol_conc": "ContainsKnowledge(walden_by_thoreau)",
      "perplexity": [
        1.3975255489349365,
        1.0834386348724365
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (ReadsBook(x, y) → GainKnowledge(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(z, x)",
        "Gain(z, y)",
        "Becomes(z)"
      ],
      "fol_consts": [
        "harry",
        "walden"
      ],
      "fol_rules": [
        "∀b (Book(b) → ∃k (Contains(b, k)))",
        "∀p (Person(p)) → Read(p, b) → Gain(p, k)",
        "Gain(p, k) → Becomes(p)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.7071341276168823,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ContainsKnowledge(x)",
        "Reads(y, x)",
        "GainsKnowledge(z)",
        "GainsKnowledge(w)",
        "Reads(y, w)",
        "ContainsKnowledge(t)",
        "ContainsKnowledge(u)",
        "Reads(v, t)",
        "Reads(g, u)",
        "ContainsKnowledge(b)",
        "Reads(h, b)",
        "Reads(i, c)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "walden",
        "harry",
        "harry",
        "harry"
      ],
      "fol_rules": [
        "∀x (ContainsKnowledge(x)) → ¬GainsKnowledge(z)",
        "∃y ∃x (Reads(y, x) → GainsKnowledge(w))",
        "∀u ∀v (Reads(v, u) → ContainsKnowledge(b))",
        "GainsKnowledge(z)",
        "Reads(harry, walden)"
      ],
      "fol_conc": "ContainsKnowledge(walden)",
      "perplexity": 3.092141628265381,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 190
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(y)",
        "Hotpot(z)",
        "ProductOfBakedByMelissa(w)",
        "DriedThaiChilies(thai_chilies)"
      ],
      "fol_consts": [
        "bakery",
        "cupcake",
        "hotpot",
        "melissa_product",
        "thai_chilies"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀y (Cupcake(y) → Bakery(y))",
        "∀z (Hotpot(z) → Spicy(z))",
        "∀w (ProductOfBakedByMelissa(w) → Cupcake(w))",
        "DriedThaiChilies(thai_chilies)",
        "(Spicy(thai_chilies) ∨ Bakery(thai_chilies)) → (Hotpot(thai_chilies) ∨ Spicy(thai_chilies))"
      ],
      "fol_conc": "Hotpot(thai_chilies)",
      "perplexity": [
        1.1366446018218994,
        1.067737340927124
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "dried",
        "thai",
        "chilies",
        "melissa",
        "bakedby"
      ],
      "fol_rules": [
        "¬Bakery(chilies) ∧ Spicy(chilies)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x ((Products(melissa, x) ∧ Cupcakes(x)) ⊕ Products(melissa, chilies))",
        "(Spicy(chilies) ∨ Bakery(chilies)) → (Hotpot(chilies) ∨ Spicy(chilies))"
      ],
      "fol_conc": "Hotpot(chilies)",
      "perplexity": 1.3735452890396118,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀y (ProductOf(x, y) → Cupcake(x))",
        "(Spicy(dried thai chilies) ⊕ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ⊕ Spicy(dried thai chilies))"
      ],
      "fol_conc": "Hotpot(dried thai chilies)",
      "perplexity": 1.1922597885131836,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 191
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)",
        "NoTet(platypus)",
        "AreMammals(platypus, humans)"
      ],
      "fol_consts": [
        "platypus",
        "human",
        "platy",
        "Homo sapiens",
        "humans"
      ],
      "fol_rules": [
        "-∃x ((NoTeeth(x) ∨ Teeth(x)) → IsMammal(x)): Some mammals have teeth. If no mammals have teeth or a non-mammal has teeth, then the subject is a mammal.",
        "- Platypus: Mammal",
        "- Human: Mammal"
      ],
      "fol_conc": "Platypus are reptiles",
      "perplexity": [
        2.7439358234405518,
        2.110795736312866
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "-∃x ((NoTeeth(x) ∨ Teeth(x)) → IsMammal(x)): Some mammals have teeth. If no mammals have teeth or a non-mammal has teeth, then the subject is a mammal."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(y)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∀x (Platypus(x) → ¬Teeth(x))",
        "(Human(rina) ∧ Teeth(rina)) ⊕ ¬(Human(rina) ∨ Teeth(rina))"
      ],
      "fol_conc": "Mammal(rplatypus)",
      "perplexity": 2.841607093811035,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∀x (Mammal(x)) → ∃y (HasTeeth(y, x) ∨ ¬(HasTeeth(y, x)))",
        "(Mammal(x)) ∧ HasTeeth(x)",
        "(Mammal(x)) ∧ ¬(HasTeeth(x))"
      ],
      "fol_conc": "¬(Mammal(platypus) ⊕ Mammal(humans))",
      "perplexity": 2.171592950820923,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasTeeth/1, HasTeeth/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasTeeth/1, HasTeeth/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 192
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))"
      ],
      "fol_conc": "LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.04557466506958,
        1.0823451280593872
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchamp(x)",
        "Oscaractor(x)",
        "Protennisp(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "Wellpaid(x)",
        "Livetaxhaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "(∀x (Grandslamchamp(x)) → Protennisp(x))",
        "(∀x (Oscaractor(x) → Celebrity(x)))",
        "(∀x (Protennisp(x) → Athlete(x)))",
        "Celebrity(x) → Wellpaid(x)",
        "Athlete(x) → Famous(x)",
        "Wellpaid(x) → Livetaxhaven(x)",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → Livetaxhaven(djokovic)"
      ],
      "fol_conc": "Livetaxhaven(djokovic)",
      "perplexity": 1.505163311958313,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "Celebrity(x) ⊕ WellPaid(x)",
        "Athlete(x) ⊕ LivesInTaxHaven(x)",
        "(GrandSlamChampion(djokovic) → ProfessionalTennisPlayer(djokovic))",
        "ProfessionalTennisPlayer(djokovic) → Athlete(djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(djokovic)",
      "perplexity": 1.4674839973449707,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 193
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x)",
        "EasternWildTurkey(x)",
        "OsceolaWildTurkey(x)",
        "GouldsWildTurkey(x)",
        "MerriamsWildTurkey(x)",
        "RioGrandeWildTurkey(x)",
        "OcellatedWildTurkey(x)",
        "Tom"
      ],
      "fol_consts": [
        "sam",
        "perfect"
      ],
      "fol_rules": [
        "∃x (EasternWildTurkey(x) → ¬(Tom ⊕ WildTurkey(x)))",
        "Forall y ((OsceolaWildTurkey(y) ∨ GouldsWildTurkey(y) ∨ MerriamsWildTurkey(y) ∨ RioGrandeWildTurkey(y)) → ¬(Tom ⊕ WildTurkey(x))) ",
        "Forall x (GouldsWildTurkey(x) ⊕ MerriamsWildTurkey(x) ⊕ RioGrandeWildTurkey(x)) → ¬(Tom ⊕ WildTurkey(x))",
        "Forall x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x)) → WildTurkey(x)",
        "Forall y ((OsceolaWildTurkey(y) ∨ GouldsWildTurkey(y) ∨ MerriamsWildTurkey(y) ∨ RioGrandeWildTurkey(y)) → Play(sam, y))",
        "Forall y ((Song(y) ∧ ¬Be(y, perfect)) ⊕ (Play(sam, y))) ",
        "Exyst x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))",
        "Forall y ((Song(y)) ∧ ¬Be(y, perfect)) ",
        "Exist x (Play(sam,x) ⊕ ¬(OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))) ",
        "Forall x (Project(x) ∧ WrittenIn(x, rust)) → Dependent(rina)",
        "Exyst y ((Dependent(y)) ∧ (∀z((OsceolaWildTurkey(z) ∨ GouldsWildTurkey(z) ∨ MerriamsWildTurkey(z) ∨ RioGrandeWildTurkey(z)) ⊕ WildTurkey(x)))) "
      ],
      "fol_conc": "Exyst x (OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RioGrandeWildTurkey(x))",
      "perplexity": [
        1.9590039253234863,
        1.1492983102798462
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (EasternWildTurkey(x) → ¬(Tom ⊕ WildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wild(x, y)",
        "Eastern(wildturkey, x)",
        "Osceola(wildturkey, x)",
        "Goulds(wildturkey, x)",
        "Merriam(swildturkey, x)",
        "Rio(gradewildturkey, x)",
        "Ocellated(wildturkey, x)",
        "Not(x)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "∃x ∀y (Wild(x, y) → (Eastern(y, tom) ⊕ Osceola(y, tom)) ⊕ Goulds(y, tom) ⊕ Merriam(y, tom) ⊕ Rio(gradey, tom) ⊕ Ocellated(y, tom))",
        "∃x ∀y (Wild(x, y) → Not(easternwildturkeyy, x))",
        "∃x ∀y (Wild(x, y) ∧ Osceolateywildturkeys(x) → ¬Oscelaowildturksey(tom))",
        "∃x ∀y (Wild(x, y) ∧ Gouldswiltdurkeys(x) ∧ Merriamwildturkeys(x) → Not(gouldswiltdurkeystomp))",
        "∃x ∀y (Not(wildedurkeyy, x) ∨ ¬(Oscelaowildturksey(tom)))",
        "Tom(woot)",
        "(¬Dependentoncafey(rina) ∧ Studentriny(x)) → ((Dependentsocialcaffeerrna(x)) ⊕ Dependentofcaffey(rina))",
        "Jokesriny(x) ∨ Unawarenirya(x)"
      ],
      "fol_conc": "Wild(joey, x)",
      "perplexity": 2.507920503616333,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EasternWildTurkey(x)",
        "OsceolaWTurkey(x)",
        "Goulds WTurKEY(y)",
        "Merriams WturKey(z)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "(∃x (EasternWildTurkey(x)) ∧ ∃y (∀z ((OsceolaWTurkey(y) ∨ Goulds WTurKEY(y))) ∨ Merriams WturKey(z)))",
        "(¬EasternWildTurkey(tom))",
        "((Goulds WTurKEY(i) ⊕ OsceolaWTurkey(k)) ∧ ¬(Goulds WTurKEY(m) ∨ Goulds WTurKEY(n)) ∨ (Merriams WturKey(r)))",
        "(∃x (EasternWildTurkey(x) ∨ OsceolaWTurkey(y) ∨ Goulds WTurKEY(z) ⊕ Merriams WturKey(w) ⊕ RioGrandeW TurkeY(v)))",
        "(¬OsceolaWTurkey(k))",
        "(Goulds WTurKEY(l) ∨ OsceolaWTurkey(m))",
        "∀x (EasternWildTurkey(x) → ¬EasternWildTurkey(tom))",
        "(Merriams WturKey(r) ⊕ Goulds WTurKEY(s)) ∨ Merriams WturKey(u)",
        "(¬OsceolaWTurkey(m))",
        "∃x (EasternWildTurkey(x))",
        "((Goulds WTurKEY(l) ∨ OsceolaWTurkey(r)))",
        "(Merriams WturKey(q) ⊕ Goulds WTurKEY(s)) ∨ Merriams WturKey(u)",
        "(∃x (EasternWildTurkey(x)) ∧ EasternWildTurkey(tom))",
        "(Goulds WTurKEY(l))",
        "((Merriams WturKey(r) ⊕ Goulds WTurKEY(s)))",
        "(¬OsceolaWTurkey(m))"
      ],
      "fol_conc": "(∃x (EasternWildTurkey(x)))",
      "perplexity": 7.224533557891846,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 194
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Sport(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "sam",
        "mac"
      ],
      "fol_rules": [
        "*∀x (Sport(x) → Event(x)): All sports are events.",
        "*∃x ((Event(x) ∧ LastGame(sam, x)) ∨ Event(sam))",
        "*∀x ((Sport(x) → Event(x))) Since "
      ],
      "fol_conc": "*∃x (((Event(x) ∧ LastGame(sam, x)) ∨ Event(sam))",
      "perplexity": [
        1.2249113321304321,
        3.9907302856445312
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "*∀x (Sport(x) → Event(x)): All sports are events."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Last(x, y)"
      ],
      "fol_consts": [
        "olympics",
        "taiwan",
        "unitedstates",
        "medals",
        "games"
      ],
      "fol_rules": [
        "(∃x (Sporting(y)) ∧ ∀z (Olympic(z) → Medals(z)))",
        "(Last(x, y) ∨ (∃y ∀z (Olympic(z) ∧ Last(z, x))))"
      ],
      "fol_conc": "Medals(olympics)",
      "perplexity": 3.6427314281463623,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 195
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "MostActiveInMajorTennis(x)",
        "LostToIgaSwiatek(x, y)",
        "AtRolandGarros2022(x)",
        "FemaleTennisPlayer(x)"
      ],
      "fol_consts": [
        "igaswietek",
        "rafaelnadal"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → MostActiveInMajorTennis(x))",
        "∀y ((LostToIgaSwiatek(y, x)) → RankedHighly(y))",
        "∀x (FemaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToIgaswietek(x, x))",
        "(AtRolandGarros2022(z), FemaleTennisPlayer(w)) ⊕ (AtRolandGarros2022(y), MaleTennisPlayer(x))",
        "∀x (MaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToRafaelNadal(y, x))",
        "(RankedHighly(z)) ⊕ ((LostToRafaelNadal(CocoGauff(w), y)) → ¬(MaleTennisPlayerAtRolandGarros2022(cogauf)))"
      ],
      "fol_conc": "LostToRafaelNadal(CocoGauff, rafaelnadal)",
      "perplexity": [
        1.3956094980239868,
        1.1458851099014282
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(AtRolandGarros2022(z), FemaleTennisPlayer(w)) ⊕ (AtRolandGarros2022(y), MaleTennisPlayer(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(y, z)",
        "Lost(x, y)",
        "Player(x)",
        "Female(x)",
        "Male(x)"
      ],
      "fol_consts": [
        "igasz",
        "rafanadal"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → ∃y (Active(y, x)))",
        "∀x (Lost(x, igasz) → Ranked(x))",
        "∀x ((Female(x) ∧ Player(x)) → Lost(x, igasz))",
        "(∃x (Female(x) ∧ Player(x)) ⊕ ∃y (Male(y) ∧ Player(y)))",
        "∀z ((Male(z) ∧ Player(z)) → Lost(z, rafanadal))"
      ],
      "fol_conc": "Lost(coco, rafanadal)",
      "perplexity": 1.576776385307312,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RankedHighlyByWTA(x)",
        "LostTo(x, y)",
        "PlayerAtRolandGarros2022(x, y)",
        "FemaleTennisPlayer(y)"
      ],
      "fol_consts": [
        "coco_gauff",
        "iga_swiatek"
      ],
      "fol_rules": [
        "∀x (RankedHighlyByWTA(x) → ∃y (PlayerAtRolandGarros2022(x, y)))",
        "∀x (LostTo(iga_swiatek, x) → RankedHighlyByWTA(x))",
        "∀x ((FemaleTennisPlayer(y) ∧ PlayerAtRolandGarros2022(x, y)) → LostTo(iga_swiatek, y))",
        "(FemaleTennisPlayer(y) ∨ MaleTennisPlayer(z))"
      ],
      "fol_conc": "LostTo(coco_gauff, rafael_nadal)",
      "perplexity": 1.6510064601898193,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 196
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "WWE(x)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine) ∧ WWE(diamond_mine)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers) ∧ Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(Feud(imperium, x) ∧ Includes(x, ivy_nile))",
      "perplexity": [
        1.0779913663864136,
        1.2281205654144287
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wrestling(x)",
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Lead(roderickstrong, diamondmine)",
        "Stable(diamondmine) ∧ Include(diamondmine, creedbrothers) ∧ Include(diamondmine, ivynile)",
        "Stable(imperium) ∧ Feud(imperium, diamondmine)",
        "Stable(x) → (Include(x, ivynile) → ¬Feud(imperium, x))"
      ],
      "fol_conc": "Stable(x) ∧ Include(x, ivynile) → ¬Feud(imperium, x)",
      "perplexity": 1.256485104560852,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "HasFeud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "Lead(diamond_mine, roderick_strong)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "HasFeud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(HasFeud(imperium, x) ∧ ProfessionalWrestlingStable(x) ∧ Include(x, ivy_nile))",
      "perplexity": 1.2861393690109253,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 197
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomers(x, y)",
        "HasLunchInCompany(x)",
        "HasLunchAtHome(x)",
        "WorksRemotelyFromHome(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) → SchedulesMeetingWithCustomers(HasLunchInCompany, y))",
        "(SchedulesMeetingWithCustomers(y), HasLunchInCompany(z)): Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (Employee(x) → ¬(HasLunchAtHome(x))) : Employees will either have lunch in the company or have lunch at home",
        "(HasLunchAtHome(y), WorksRemotelyFromHome): If an employee has lunch at home, then he/she works remotely from home.",
        "∀x (InOtherCountry(x) → WorksRemotelyFromHome)",
        "∀y ((Manager(y), ¬WorksRemotelyFromHome))"
      ],
      "fol_conc": "(Employee(james) ∧ HasLunchAtHome(z)) ⊕ Employee(james)",
      "perplexity": [
        1.6255406141281128,
        1.2488607168197632
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(SchedulesMeetingWithCustomers(y), HasLunchInCompany(z)): Everyone who has lunch in the company schedules meetings with their customers."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Has(x, z)",
        "Appears(y, t)",
        "Manager(x)",
        "Remote(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, customer)) → Appears(employee, company)",
        "∀y (Has(y, lunch)) ∧ Employee(z) → Schedule(z, customer)",
        "∀z ((Employee(z) ∨ Manager(z))) ⊕ Has(z, home)"
      ],
      "fol_conc": "¬Has(james, company)",
      "perplexity": 2.6338348388671875,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Employee/1, Employee/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Employee/1, Employee/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ScheduleMeeting(x, y)",
        "AppearanceToday(x)",
        "HasLunchInCompany(x)",
        "HasLunchInCompany(x)",
        "ScheduleMeeting(x, y)"
      ],
      "fol_consts": [
        "james",
        "james"
      ],
      "fol_rules": [
        "∀x (ScheduleMeeting(x, y) → AppearanceToday(x))",
        "∀x ((HasLunchInCompany(x)) ∧ ScheduleMeeting(x, y))",
        "∀x (HasLunchInCompany(x) ⊕ HasLunchInCompany(x))",
        "∀x (HasLunchInCompany(x) → ScheduleMeeting(x, y))",
        "∃y (ScheduleMeeting(y) ∧ AppearanceToday(james))",
        "¬(HasLunchInCompany(james))"
      ],
      "fol_conc": "(HasLunchInCompany(james) ∨ HasLunchInCompany(james))",
      "perplexity": 4.019089221954346,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ScheduleMeeting/1, ScheduleMeeting/2.\n\n\nFatal error:  The following symbols are used with multiple arities: ScheduleMeeting/1, ScheduleMeeting/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 198
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlaysFor(x, y)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robertLewandowski, bayernMunchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robertLewandowski)",
      "perplexity": [
        1.044577717781067,
        1.0230927467346191
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Play(x, y)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski",
        "bayern",
        "munchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Play(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.2929338216781616,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert lewandowski",
        "bayern munchen"
      ],
      "fol_rules": [
        "Striker(robert lewandowski)",
        "(∀x (Striker(x) → SoccerPlayer(x)))",
        "LeftTeam(robert lewandowski, bayern munchen)",
        "(∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y)))"
      ],
      "fol_conc": "SoccerPlayer(robert lewandowski)",
      "perplexity": 1.1185390949249268,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 199
  },
  {
    "id": 117,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter can block Windy's shooting.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shooting(x)",
        "Jump(x)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀y (Man(y) ∧ ¬Be(y, michael) → Taller(michael, y))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ((Man(x) ∧ Taller(x, y) ∧ ¬Jump(y)) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) ∧ Shooting(x) → GreatShooter(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": [
        1.051101803779602,
        1.01338791847229
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shoot(x)",
        "Jump(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Taller(michael, x))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Taller(michael, x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → Great(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": 1.1347333192825317,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "BlockShooting(x, y)",
        "JumpShooting(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → BlockShooting(x, y))",
        "Man(michael) ∧ ∀x ((Man(x) ∧ ¬(¬(Taller(michael, x)))))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "BlockShooting(michael, x) ↔ ¬JumpShooting(x)",
        "¬BlockShooting(michael, windy)",
        "∀x (JumpShooting(x) → GreatShooter(x))"
      ],
      "fol_conc": "BlockShooting(peter, windy)",
      "perplexity": 1.3088746070861816,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 200
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Product(x, y)",
        "Hotpot(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "bkm"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bkm) → Cupcake(x))",
        "(Spicy(x) ⊕ Bakery(x)) → (Hotpot(x) ⊕ Spicy(x))"
      ],
      "fol_conc": "Product(DriedThaiChilies(x), bkm)",
      "perplexity": [
        1.2307262420654297,
        1.279479742050171
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Product(DriedThaiChilies(x), bkm)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Product(x, y)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Bakedby(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bymelissa"
      ],
      "fol_rules": [
        "¬Bakery(driedthai)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bymelissa) → Cupcake(x))",
        "Spicy(driedthai) ⊕ Bakery(driedthai) → (Hotpot(driedthai) ⊕ Spicy(driedthai))"
      ],
      "fol_conc": "Product(driedthai, bymelissa)",
      "perplexity": 1.222535252571106,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬(Bakery(b)) → ¬Spicy(b)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(c) ⊕ Bakery(c)) → ((Hotpot(c) ∨ Spicy(c)))"
      ],
      "fol_conc": "ProductOf(baked by melissa, dried thai chilies)",
      "perplexity": 1.652618169784546,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 201
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "ZahaHadid(x)",
        "KellyWearstler(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zaha_hadid",
        "kelly_wearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (ZahaHadid(x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        " (ZahaHadid(x) ∨ KellyWearstler(x))",
        "∀x (KellyWearstler(x) → Evocative(x))",
        "∀x (KellyWearstler(x) → Dreamy(x))",
        "∀x (Timeless(x) ∧ Max(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(Max) ∧ Dreamy(Max)",
      "perplexity": [
        1.086798071861267,
        1.0261094570159912
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Max/1, Max/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Max/1, Max/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Design(x, y)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Zaha(x) ∧ Design(x, y) → Timeless(y))",
        "∀x (Mass(x) ∧ Timeless(x) → False(x))",
        "(Zaha(x) ∧ Design(x, y)) ⊕ (Kelly(x) ∧ Design(x, y))",
        "∀x (Kelly(x) ∧ Design(x, y) → Evocative(y))",
        "∀x (Kelly(x) ∧ Design(x, y) → Dreamy(y))",
        "∀x (Timeless(x) ∧ Design(x, max) → (Mass(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(max) ∧ Dreamy(max)",
      "perplexity": 1.2354183197021484,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "DesignStyle(x, y)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zahahadid",
        "kellywearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (DesignStyle(zahahadid, x) → Timeless(x))",
        "¬(∃x (Timeless(x) ∧ MassProductDesign(x)))",
        "(DesignStyle(zahahadid, x) ∨ DesignStyle(kellywearstler, x))",
        "∀x (DesignStyle(kellywearstler, x) → Evocative(x))",
        "∀x (DesignStyle(kellywearstler, x) → Dreamy(x))",
        "∀x ((Timeless(x) ∧ DesignStyle(max, x)) → (MassProductDesign(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "∃x (DesignStyle(max, x) ∧ Evocative(x) ∧ Dreamy(x))",
      "perplexity": 1.1267108917236328,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 202
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "FromEarth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x ((FromMars(x)) ⊕ Alien(x))",
        "∀x (∀y (Human(y) → ¬Extraterrestrial(y)))",
        "∀x (FromEarth(x) → Human(x))",
        "(Marvin ≠ FromEarths(marvin)) ⊕ True",
        "¬(FromEaRth(MarvIn)) → Extraterrestrial(Marvin)"
      ],
      "fol_conc": "[\"Human(marvin) ∨ FromMars(marvin)\", \"(Marvin =!= FromEarth(Marvin))]",
      "perplexity": [
        1.607723355293274,
        1.4814733266830444
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Marvin ≠ FromEarths(marvin)) ⊕ True"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "∃y ((From(y, mars) ∧ Alien(y)) → Alien(x))",
        "(¬(From(marvin, earth) ∧ From(marvin, mars)))",
        "(¬(From(marvin, earth)) → Extraterrestrial(x))"
      ],
      "fol_conc": "(Extraterrestrial(x) ⊕ Human(x) ∧ (Extraterrestrial(x) ⊕ From(marvin, mars)))",
      "perplexity": 1.962159276008606,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Extraterrestrial(y)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "(∀y (Extraterrestrial(y)))",
        "(¬(z) → Alien(z))",
        "(~ (p, q) ∧ ~ (q, p))",
        "((m, r) → Extraterrestrial(m))",
        "(∃x ((r, e) ∧ (∃n (~ (e, h)))))"
      ],
      "fol_conc": "~ (h, m)",
      "perplexity": 11.659405708312988,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬(z) → Alien(z))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 203
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DesignStyle(x)",
        "Timeless(x)",
        "MassProductDesign(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "ByZahaHadid(x)",
        "ByKellyWearstler(x)",
        "ByMax(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (DesignStyle(x) <= ByZahaHadid(x))",
        "̸∀x (MassProductDesign(x) <= Timeless(x))",
        "∀x (DesignStyle(x) → (ByZahaHadid(x) ∨ ByKellyWearstler(x)))",
        "∀x (DesignStyle(x) <= ByKellyWearstler(x))→ Evocative(x)",
        "∀x (DesignStyle(x) <= ByKellyWearstler(x))→ Dreamy(x)",
        "∀x (ByMax(x) <= Timeless(x))→ MassProductDesign(x) <= Evocative(x)"
      ],
      "fol_conc": "\\(ま x (ByMax(x) \\wedge  Evocative(x) \\wedge Dreamy(x))\\)",
      "perplexity": [
        1.2632452249526978,
        1.231821060180664
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DesignStyle(x) <= ByZahaHadid(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Design(y, z)",
        "Massprod(z)",
        "Evocative(w)",
        "Dreamy(v)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀y (Design(zaha, y) → Timeless(y))",
        "¬Timeless(x) ∧ Massprod(x)",
        "(Design(zaha, x) ⊕ Design(kelly, x))",
        "∀y (Design(kelly, y) → Evocative(y))",
        "∀y (Design(kelly, y) → Dreamy(y))",
        "Timeless(w) ∧ Design(max, w) → (Massprod(x) ∧ Design(max, x) ∧ Evocative(x))"
      ],
      "fol_conc": "(Evocative(u) ∧ Dreamy(v))",
      "perplexity": 1.4422979354858398,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zaha hadid",
        "kelly wearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (DesignStyleOfZahaHadid(x) → Timeless(x))",
        "¬MassProductDesign(y) → ¬Timeless(y)",
        "(DesignStyleOfZahaHadid(z) ⊕ DesignStyleOfZahaHadid(k))",
        "∀x (DesignStyleOfZahaHadid(w) → Evocative(w))",
        "∀x (DesignStyleOfZahaHadid(v) → Dreamy(v))"
      ],
      "fol_conc": "(Timeless(m) → (MassProductDesign(m) ∧ Evocative(m)))",
      "perplexity": 1.8487975597381592,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 204
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Doryof the Denomonyeerrytysn",
        "Noodieeiee, daketyee",
        "Yedieaueerrytssin",
        "Douboousneerryttsn"
      ],
      "fol_consts": [
        "Noodieaueerrytns, darlikenny",
        "Ideye eceetonnoysn"
      ],
      "fol_rules": [
        "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns",
        "Culntroydritz"
      ],
      "fol_conc": "/{1. Defor's ougnetonnyeen} + 'couleysnee' to my yere, but noodieeeiesye ikektionkaueerrytssinnoisnt",
      "perplexity": [
        4.177491188049316,
        13.761141777038574
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Diamond Miln(x)",
        "Diamond Miln(y)"
      ],
      "fol_consts": [
        "diamokeeion",
        "damsontourein"
      ],
      "fol_rules": [
        "(Diamond Miln(a)) ∧ (Diamond Miln(i) → Diamond Miln(o143y025ks6f7luezryexcawemnyt, jalleanizeinceimng))"
      ],
      "fol_conc": "Diamond Miln(a) ∧ Diamond Miln(i) → (Diamond Miln(s1eerlizkstorreit, jalneinteiskauef7mynusnt))",
      "perplexity": 22.900686264038086,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMiln/2, DiamondMiln/1.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMiln/2, DiamondMiln/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 205
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)",
        "Person(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x ((Person(x)) → (Studies(x) ⊕ Teaches(x)))",
        "¬∃x (Young(x) ∧ Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": [
        1.1553475856781006,
        1.07990562915802
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x ((Teaches(x) ⊕ Studies(x)))",
        "∀x (Young(x) → ¬Teaches(x))",
        "(Teaches(jerry) ⊕ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.1508289575576782,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "rose",
        "jerry"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.3661795854568481,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 206
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Rose(x)",
        "GivenOutOnTV(x, y)",
        "OnTheBachelor(x)",
        "PortraysPeopleOfRealLife(x)",
        "IsRealityTvShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eightpm",
        "portrait",
        "rises"
      ],
      "fol_rules": [
        "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])",
        "∀x ((PortraysPeopleOfRealLife(x) ∨ ¬IsRealityTvShow[portrait])) (∀y (Portrait[y] ⇒ IsRealityTVShw[x])]",
        "∃x (¬IsRealityTivsHow[x])"
      ],
      "fol_conc": "∃x ((GivenOutOnTv[rise, monday] ⊕ 8pm) ∧ Portrayt[portrait] ⊗ IsRealityTVShow[x]) ⇒ (BreakingBavd[x] ∧ GivenOutOnTvs[rises, Monday] ⊕ 8pM)",
      "perplexity": [
        2.5405304431915283,
        1.2964909076690674
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Given(x, y)",
        "On(x, z, w)",
        "Is(a, b)"
      ],
      "fol_consts": [
        "roses",
        "thebachelor",
        "tv",
        "breakingingbad",
        "monday",
        "bachelorette",
        "rose",
        "realitytvs",
        "badgesontherose",
        "eighthpmmonday",
        "realpeopleshows",
        "badshowsontherealpeople"
      ],
      "fol_rules": [
        "∃x (On(x, monday, ighthpmmonday) ∧ Given(x, tv))",
        "∀x (Given(x, tv) → On(x, thebachelor))",
        "∀x (∃y (Is(y, x) ∧ Is(a, b) ∧ Realpeopleshows(y, a))) → Realitytvs(y)",
        "¬Badgesontherealpeopleshows(badshowsontherealpeople, badshowsontherealtv)",
        "Given(rose, tv) ∧ On(rose, monday, ighthpmmonday) → ∃x (Song(x) ∧ Badgesontherose(x))",
        "∀a (∃b (Is(b, a) ∧ ¬Be(b, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "Badshowsontherealpeopleshows(breakingingbad, rose)",
      "perplexity": 2.244359016418457,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: On/2, On/3.\n\n\nFatal error:  The following symbols are used with multiple arities: On/2, On/3"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GivenOut(x, y)",
        "OnTV(y)",
        "OnTV(n)",
        "Bachelor(z)",
        "Portrays(t, u)",
        "Bachelor(u)"
      ],
      "fol_consts": [
        "roses",
        "roses",
        "badger"
      ],
      "fol_rules": [
        "(∃y (GivenOut(roses, y)) ∧ OnTV(y))",
        "(OnTV(r) → ∀z (Bachelor(z) ⊕ Portrays(t, u)))",
        "((Portrays(l, t) ∨ Portrays(k, l)) ∧ ∀x ((Bachelor(x) → (Bachelor(u)))))",
        "(∃t (∀l (((GivenOut(roses, r) ∧ OnTV(y) ⊕ GivenOut(z))) ∨ ¬OnTV(w))))",
        "(¬Portrays(l, k)) ∧ ∀x ((Portrays(k, u)) → (Bachelor(u) ∨ Portrays(m, l)))",
        "∀y (((Bachelor(x) ∧ OnTV(y)))) ⊕ Bachelor(z)",
        "((GivenOut(badger, r)) ⊕ ∃t (∀l ((Portrays(l, t)) ∧ GivenOut(roses, y)) ∨ Portrays(k, l)))"
      ],
      "fol_conc": "∃x (Bachelor(x) ∧ OnTV(y))",
      "perplexity": 11.6235933303833,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GivenOut/1, GivenOut/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GivenOut/1, GivenOut/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 207
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "InState(y, z)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "∀x (City(x) → ¬InState(billings, montana))",
        "∀y (City(y) → InState(butte, y) ⊕ InState(missoula, y) ⊕ InState(helena, y))",
        "City(x) → ¬InState(billings, x)",
        "∀z (InState(pierre, z))"
      ],
      "fol_conc": "InState(helena, montana)",
      "perplexity": [
        1.5960510969161987,
        1.155189871788025
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "State(y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre",
        "bismarck"
      ],
      "fol_rules": [
        "City(billings)",
        "In(billings, montana) ∧ In(butte, montana) ∧ In(helena, montana) ∧ In(missoula, montana)",
        "State(y) → (∃x ((City(x)) ∧ In(x, y)))",
        "(State(y1) ∧ State(y2)) ⊕ (In(a, y1) ∨ In(b, y2))",
        "In(white, butte)",
        "¬In(pierre, montana)",
        "(∃x ((City(x)) → ¬In(x, pierre)))"
      ],
      "fol_conc": "State(y1) ∧ State(y2)",
      "perplexity": 1.9194307327270508,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CityInState(x, y)",
        "CityInState(x)",
        "NotInState(y)",
        "CityInState(z)",
        "NotInState(u)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "whitesulphursprings"
      ],
      "fol_rules": [
        "CityInState(billings, montana)",
        "∀x (CityInState(x) ∧ CityInState(y)) → (CityInState(butte) ∨ CityInState(helena) ∨ CityInState(missoula))",
        "CityInState(whitesulphursprings)",
        "NotInState(pierre, montana)",
        "NotInState(x)"
      ],
      "fol_conc": "CityInState(pierre, state)",
      "perplexity": 2.090029716491699,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NotInState/1, NotInState/2, CityInState/1, CityInState/2.\n\n\nFatal error:  The following symbols are used with multiple arities: NotInState/1, NotInState/2, CityInState/1, CityInState/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 208
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "breed_back(x, y)",
        "animal(x)",
        "extinct(y)",
        "resembles(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed_back(x, auroch) → extinct(auroch))",
        "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],  ",
        "fol_conc"
      ],
      "fol_conc": "extinct(aurochs)",
      "perplexity": [
        2.5359489917755127,
        3.612553596496582
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  ## The rule is simplified to be just one line. It would typically have a more formal structure with quantifiers and other elements included.   ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x)",
        "Artificial(y)",
        "Animals(x)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "breeding",
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (Breedin(x)) → ∃y (Animal(y) ∧ Artificial(y))"
      ],
      "fol_conc": "Aurochs(is)",
      "perplexity": 2.0227158069610596,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "breed-back(x)",
        "animal(x)",
        "resemble(x, y)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs",
        "breeding",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (breed-back(x) → animal(x))",
        "∃x (breed-back(heck cattle) ∧ breed-back(aurochs))",
        "∃y (animal(y) ∧ resemble(heck cattle, y))"
      ],
      "fol_conc": "¬(∃x (resemble(aurochs, x)))",
      "perplexity": 2.7038025856018066,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Breed-back(x)) -> (Animal(x)))\n             ^"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 209
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "FromEarth(y)",
        "Extraterrestrial(x)",
        "Human(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∃y (FromEarth(y) ∧ Alien(y))",
        "∀x ((Extraterrestrial(x) ∨ Human(x)))"
      ],
      "fol_conc": "∃marvin( Alien(marvin)) Marvin is extraterrestrial ",
      "perplexity": [
        2.1263997554779053,
        1.1773886680603027
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃marvin( Alien(marvin)) Marvin is extraterrestrial"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀y ((From(y, mars) → Alien(marvin)))",
        "∀z (Extraterrestrial(z) ∧ Human(z) ⊕ ¬Human(z))",
        "∀w (From(w, earth) → Human(w))"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 1.513535499572754,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromMars(x)",
        "Human(x)",
        "FromMars(x)",
        "FromMars(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∃x ((Extraterrestrial(x) ∧ Human(x)))",
        "(FromMars(marvin) → Alien(marvin))",
        "(∀x (Human(x) → ¬Extraterrestrial(x)))",
        "¬(FromMars(marvin) ∧ FromMars(marvin))",
        "¬(FromMars(marvin)) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 2.4610416889190674,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 210
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composes(x, y)",
        "PremieredBy(y, z)",
        "Orchestra(x)"
      ],
      "fol_consts": [
        "symphony_9",
        "beethoven"
      ],
      "fol_rules": [
        "∀x (Orchestra(x) → ∃y Composes(y, symphony_9))",
        "Composes(beethoven, symphony_9)",
        "PremieredBy(vienna_music_society, beethoven)"
      ],
      "fol_conc": "(Leader(x) → ∀x ((Orchestra(x) ∧ PremieredBy(y, symphony_9))) ",
      "perplexity": [
        1.722683310508728,
        1.329005479812622
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Leader(x) → ∀x ((Orchestra(x) ∧ PremieredBy(y, symphony_9)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composes(x, y)",
        "Premiered(x, y)",
        "Is(y, z)",
        "Leads(z, x)"
      ],
      "fol_consts": [
        "beethoven",
        "symphony9"
      ],
      "fol_rules": [
        "∃x (Music(symphony9))",
        "∀x (Composes(beethoven, symphony9))",
        "Vienna(x) ∧ Music(y)",
        "Is(z, orchestra)",
        "Leads(t, v)"
      ],
      "fol_conc": "Premiered(v, music)",
      "perplexity": 2.4423928260803223,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Music/1, Music/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Music/1, Music/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsMusicPiece(x)",
        "Writes(y, z)",
        "PremieredBy(w, x)",
        "Leads(v, w)",
        "IsMusicPiece(x)",
        "IsMusicPiece(z)",
        "Leads(t, u)"
      ],
      "fol_consts": [
        "SymphonyNo9",
        "Beethoven",
        "ViennaMusicSociety"
      ],
      "fol_rules": [
        "(∀x (IsMusicPiece(SymphonyNo9)) ∧ Writes(Beethoven, SymphonyNo9) ∧ PremieredBy(ViennaMusicSociety, SymphonyNo9))",
        "(∃u (PremieredBy(u, v)))"
      ],
      "fol_conc": "(∀w ((IsMusicPiece(w)) → ∃v (PremieredBy(v, w))))",
      "perplexity": 2.624872922897339,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 211
  },
  {
    "id": 104,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Twin(x, y)",
        "Triplet(x, y, z)",
        "Siblings(x, y)",
        "SameAge(x, y)",
        "HangOut(x, y)",
        "Play(x, y)",
        "Complain(x)",
        "DevelopBonds(x)",
        "LiveAtHome(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "(Twin(x, y) ⊕ Triplet(x, y, z)) → HangOut(x, y) ∧ Play(x, y)",
        "(SameAge(x, y) → Twin(x, y) ⊕ Triplet(x, y, z))",
        "Complain(x) → SameAge(x, y)",
        "¬LiveAtHome(x) → ¬DevelopBonds(x)",
        "(HangOut(x, y) ∧ Play(x, y)) → ¬LiveAtHome(x)",
        "(Twin(x, y) ⊕ Triplet(x, y, z)) ⊕ ¬DevelopBonds(x)"
      ],
      "fol_conc": "¬(Twin(luke, y) ⊕ Triplet(luke, y, z)) ∧ ¬Complain(luke)",
      "perplexity": [
        1.087146520614624,
        1.1624399423599243
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "Siblings(x, y)",
        "Sameage(x, y)",
        "Annoying(x, y)",
        "Complain(x, y)",
        "Hangingout(x, y)",
        "Play(x, y)",
        "Home(x)",
        "Bond(x, y)",
        "Regular(x, y)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Twin(x) ⊕ Triplet(x)) → ∀y (Siblings(x, y) → Hangingout(x, y) ∧ Play(x, y))",
        "∀x (Siblings(x, y) ∧ Sameage(x, y) → Twin(x) ⊕ Triplet(x))",
        "∀x (Complain(x, y) → Sameage(x, y))",
        "¬Regular(x, y) → ¬Bond(x, y)",
        "Hangingout(x, y) ∧ Play(x, y) → ¬Regular(x, y)",
        "Twin(luke) ⊕ Triplet(luke) → Bond(luke, luke)",
        "¬(Twin(luke) ⊕ Triplet(luke)) → ¬(Twin(luke) ⊕ Triplet(luke))"
      ],
      "fol_conc": "¬(Twin(luke) ⊕ Triplet(luke)) ∧ ¬Complain(luke, luke)",
      "perplexity": 1.1990209817886353,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SpendTimeWithAndPlay(x, y)",
        "HaveSameAgeSibling(x, y)",
        "ComplainAboutAnnoyingSibling(x)",
        "DoNotLiveAtHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)"
      ],
      "fol_consts": [
        "luke",
        "luke"
      ],
      "fol_rules": [
        "∀x ∀y ((Twin(x, y) ⊕ Triplet(x)) → SpendTimeWithAndPlay(x, y))",
        "∀x ∃y (HaveSameAgeSibling(x, y) → Twin(x, y) ⊕ Triplet(x))",
        "∀x (∃y (ComplainAboutAnnoyingSibling(y) ∧ HaveSameAgeSibling(x, y)) → ComplainAboutAnnoyingSibling(x))",
        "∀x ((DoNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x)))",
        "(DoNotLiveAtHomeRegularly(x) ⊕ DevelopStrongBondsWithFamilyMembers(x))",
        "Twin(luke, luke) ⊕ Triplet(luke)",
        "¬(Twin(luke, luke) ∨ Triplet(luke))"
      ],
      "fol_conc": "(ComplainAboutAnnoyingSibling(luke) → ¬DevelopStrongBondsWithFamilyMembers(luke))",
      "perplexity": 2.3129143714904785,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 212
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "RequireLabelledData(x)",
        "Train(x, y)"
      ],
      "fol_consts": [
        "text_summarization_model"
      ],
      "fol_rules": [
        "∀x (ML(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "¬RequireLabelledData(x)",
        "Train(text_summarization_model, x)",
        "¬Reinforcement(x) → Train(text_summarization_model, x)",
        "RequireLabelledData(x)"
      ],
      "fol_conc": "Unsupervised(x) → Train(text_summarization_model, x)",
      "perplexity": [
        1.385263442993164,
        1.3343727588653564
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Trained(x, y)",
        "Requires(x, y)",
        "Labelled(x, y)"
      ],
      "fol_consts": [
        "textsummodel"
      ],
      "fol_rules": [
        "∀x (Machine(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "¬Unsupervised(x) → ¬Requires(x, labelled)",
        "Trained(textsummodel, machine)",
        "¬Reinforcement(x) → ¬Trained(textsummodel, x)",
        "Requires(machine, labelled)"
      ],
      "fol_conc": "Unsupervised(x) → Trained(textsummodel, x)",
      "perplexity": 1.3394588232040405,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Machine/1, Machine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Machine/1, Machine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CategorizedAs(x, y)",
        "SupervisedLearning(y)",
        "UnsupervisedLearning(y)",
        "ReinforcementLearning(y)",
        "TrainedWith(x, y)"
      ],
      "fol_consts": [
        "text_summarization_model",
        "text_summarization_model"
      ],
      "fol_rules": [
        "∀x (∃y (CategorizedAs(x, y) ∧ SupervisedLearning(y)) ⊕ ∃y (CategorizedAs(x, y) ∧ UnsupervisedLearning(y)) ⊕ ∃y (CategorizedAs(x, y) ∧ ReinforcementLearning(y)))",
        "¬TrainedWith(text_summarization_model, y)",
        "∀x (∃z (UnsupervisedLearning(z) ∧ TrainedWith(x, z)) → ¬(ReinforcementLearning(y) ∧ TrainedWith(x, y)))",
        "CategorizedAs(text_summarization_model, x) ⊕ ∃y ((TrainedWith(text_summarization_model, y) ∧ UnsupervisedLearning(y)))"
      ],
      "fol_conc": "∀x (∃z (UnsupervisedLearning(z) ∧ TrainedWith(x, z)) → ∃y ((CategorizedAs(text_summarization_model, x) ⊕ CategorizedAs(text_summarization_model, y))))",
      "perplexity": 2.2536749839782715,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 213
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ContainsKnowledge(x, y)",
        "GainsKnowledge(person, book)",
        "Reads(person, book)",
        "BecomesSmarter(person)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau"
      ],
      "fol_rules": [
        "∀x ContainsKnowledge(x, walden)",
        "GainsKnowledge(harry, walden): Harry gains knowledge by reading 'Walden'",
        "(Reads(person, book) → GainsKnowledge(person, book)): When a person reads a book, that person gains knowledge.",
        "(GainsKnowledge(person, book) → BecomesSmarter(person))"
      ],
      "fol_conc": "∃person ((Reads(harry, walden) ∧ (GainsKnowledge(harry))) ⊕ (BecomesSmarter(harry))) : Harry read the book ‘Walden’ by Henry Thoreau.",
      "perplexity": [
        1.4442538022994995,
        1.3519766330718994
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GainsKnowledge(harry, walden): Harry gains knowledge by reading 'Walden'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, z)",
        "Knowledge(y, x)",
        "Smarter(z)",
        "Book(walden)",
        "Author(hthoreau)"
      ],
      "fol_consts": [
        "harry",
        "walden"
      ],
      "fol_rules": [
        "∀x (Books(x) ∧ Contains(x, y))",
        "∀z (Read(harry, z) → Knowledge(z, harry))",
        "Knowledge(y, x) → Smarter(x)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 2.615781784057617,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, z)",
        "GainsKnowledge(x)",
        "BecomesSmarter(x)",
        "Contains(y)"
      ],
      "fol_consts": [
        "harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x ∀y (Contains(x, y) → Contains(z))",
        "∀x (Reads(x, Walden) → GainsKnowledge(harry))",
        "∀x (GainsKnowledge(x) → BecomesSmarter(y))"
      ],
      "fol_conc": "BecomesSmarter(harry)",
      "perplexity": 1.7319371700286865,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Contains/1, Contains/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Contains/1, Contains/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 214
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "EarthCitizen(x)"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        ",",
        "∀x (FromMars(x) → Alien(x))",
        ", ∀x ¬(Extraterrestrial(x) ∧ Human(x)),  ",
        ", ∀x (EarthCitizen(x) → Human(x)) ",
        ",",
        "¬(FromMars(Marvin) ∧ EarthCitizen(Marvin))",
        ", ¬(EarthCitizen(Marvin) → FromMars(Marvin))"
      ],
      "fol_conc": "¬(Human(Marvin) ∨ FromMars(Marvin))",
      "perplexity": [
        1.9314908981323242,
        1.4980099201202393
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x)) → ∃y (Extraterrestrial(y))",
        "(From(marve, earth) → Alien(marve))",
        "¬(Alien(x) ∧ Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬(From(marvin, earth)) → Alien(marvin)",
        "∃y (Extraterrestrial(y) ∧ ¬From(marvin, y))"
      ],
      "fol_conc": "¬(Human(marve) ∨ From(marve, mars))",
      "perplexity": 1.3244824409484863,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isAlien(x)",
        "fromMars(y)",
        "human(x)",
        "fromMars(x)"
      ],
      "fol_consts": [
        "Marvin",
        "Earth",
        "Mars"
      ],
      "fol_rules": [
        "∀x (isAlien(x) → isAlien(x))",
        "(fromMars(x) ∧ isAlien(x))",
        "¬(isAlien(x) ∧ human(x))",
        "∀x (human(x) → fromMars(x))",
        "¬(fromMars(Marvin) ∧ fromMars(Earth))"
      ],
      "fol_conc": "¬(human(Marvin) ∨ fromMars(Marvin))",
      "perplexity": 1.6519927978515625,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 215
  },
  {
    "id": 143,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Some Heck cattle are artificially selected.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "BackBred(x)",
        "SelectiveBreeding(x, y, z)",
        "HeckCattle(x)",
        "Animal(x)",
        "Aurochs(x)",
        "Extinct(x)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∃x (BackBred(x) ∧ ∃y ∃z (SelectiveBreeding(y, z, x)))",
        "HeckCattle(heck)",
        "Aurochs(aurochs)",
        "Animal(heck)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Extinct(x) ∧ SelectiveBreeding(y, x, z))"
      ],
      "fol_conc": "∃x (HeckCattle(x) ∧ BackBred(x))",
      "perplexity": [
        1.3350132703781128,
        1.2688509225845337
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Artificiallyselected(x)",
        "Bredback(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "Bredback(heck) → Artificiallyselected(heck)",
        "Bredback(heck) ∧ Resemble(heck, aurochs)",
        "Animal(heck)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Extinct(x) ∧ Resemble(x, y))"
      ],
      "fol_conc": "∃x (Animal(x) ∧ Bredback(x) ∧ Artificiallyselected(x))",
      "perplexity": 1.3203004598617554,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ArtificialSelection(x)",
        "Backed(x, y)",
        "Resemble(x, y)",
        "Extinct(y)",
        "BreedingOf(x)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BreedingOf(x) → ArtificialSelection(x))",
        "(Backed(heck cattle, aurochs) ∧ BreedingOf(heck cattle))",
        "¬ArtificialSelection(heck cattle)",
        "BreedingOf(aurochs) ⊕ Extinct(aurochs)",
        "BreedingOf(aurochs)"
      ],
      "fol_conc": "∃x (Backed(x, aurochs) ∧ BreedingOf(x) ∧ ArtificialSelection(x))",
      "perplexity": 2.555887222290039,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 216
  },
  {
    "id": 131,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "HasWedding(x)",
        "TravelToParisForHoneymoon(x)",
        "OccursInJuly(x)",
        "IsWellAttended(x)",
        "Child(x, y)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (HasWedding(x) → ∃y (Child(y, x)) )",
        "∀x (TravelToParisForHoneymoon(x) → HasWedding(x))",
        "∀x ((OccursInJuly(x)) → TravelToParisForHoneymoon(x))",
        "∃x (IsWellAttended(x) ∧ OccursInJuly(x)) ",
        "¬(HasChild(john)) → (∨ (¬TravelToParisForHoneymoon(john) ∨ ¬HasWedding(john)))",
        "∀x ((IsWellAttended(x) ∧ HasWedding(x)) → (∃y (OccursInJuly(y)) ∨ ¬TravelToParisForHoneymoon(john)))"
      ],
      "fol_conc": "¬(IsWellAttended(x) ∧ HasWedding(x)) ∨ ¬ TravelToParisForHoneymoon (john)",
      "perplexity": [
        1.5327892303466797,
        1.1503568887710571
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "¬(HasChild(john)) → (∨ (¬TravelToParisForHoneymoon(john) ∨ ¬HasWedding(john)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Haschild(x, y)",
        "Wedding(x)",
        "Travelto(x, z)",
        "Honeymoon(z)",
        "Month(july)",
        "Attended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Haschild(x, urs1) → Haschild(x, urs2))",
        "∀x (Travelto(x, paris) ∧ Honeymoon(z) → Wedding(x))",
        "∀x (Wedding(x) ∧ Month(july) → Travelto(x, paris))",
        "(Attended(urs3) ∧ ∃x (Wedding(x) ∧ Attended(x))) ⊕ ¬(Month(july))",
        "Haschild(john, urs1) → ¬Travelto(john, paris) ∧ ¬Wedding(john)",
        "∀x (Wedding(x) ∧ Attended(x) → (∃z (Wedding(z) ∧ Month(july)) ∨ ¬Exists(z, z)))"
      ],
      "fol_conc": "(Attended(urs3) ∧ Wedding(urs4)) ⊕ Travelto(john, paris)",
      "perplexity": 1.9083715677261353,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WeddingOf(x, y)",
        "HasChild(y, x)"
      ],
      "fol_consts": [
        "john",
        "july",
        "july"
      ],
      "fol_rules": [
        "(∀x (Person(x))) → ((¬Person(x)) ∧ HasChild(john, x))",
        "(∃z ∃w (∀v (((WeddingOf(v) ∨ WeddingOf(w)) ⊕ Person(z)))) → ∀y ((HasChild(y, john)) ↔ ¬Travel(f, w)))",
        "(∀x (WeddingOf(x, y) ∧ Travel(t, x) ∧ HasChild(john, t) ∨ ¬Person(john) ∨ WeddingOf(w, july)))",
        "¬((HasChild(z, z) → ((HasChild(y)) ⊕ Person(n))))",
        "(∃y (WeddingOf(v, y) ∧ AttendedBy(x) ∧ HasChild(john, t) ∨ ¬Person(john)) ↔ (∀x (((¬AttendedBy(w))) ∨ Travel(z, w))) → ((HasChild(y)) ⊕ Person(n)) ∨ ∀z (Travel(t, z) ∧ WeddingOf(v, y) → Travel(f, n)))"
      ],
      "fol_conc": "WeddingOf(john) ∨ ¬Person(john)",
      "perplexity": 11.472031593322754,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasChild/1, HasChild/2, WeddingOf/2, WeddingOf/1.\n\n\nFatal error:  The following symbols are used with multiple arities: HasChild/1, HasChild/2, WeddingOf/2, WeddingOf/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 217
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)",
        "Man(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x ((Man(x)) → (Kind(x) ⊕ Evil(x)))",
        "∀x ((Ugly(x)) → (¬Handsome(x)))",
        "∀x ((Evil(x)) → Ugly(x))",
        "∀x ((Gentleman(x)) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "CEO(harry)",
      "perplexity": [
        1.250016212463379,
        1.0775479078292847
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceo(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceo(x) → Gentleman(x))"
      ],
      "fol_conc": "Ceo(harry)",
      "perplexity": 1.195520043373108,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x ((Ugly(x) ∧ Handsome(x)) → ∃y (Handsome(y)))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x ((CEO(x) ⊕ Gentleman(x)) → ¬Gentleman(y))"
      ],
      "fol_conc": "Handsome(harry)",
      "perplexity": 1.3154454231262207,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 218
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Owns(x)",
        "WorksRegularlyAtHome(x)",
        "HasImpressiveOffice(x)",
        "SpendsFreeTimeTidyingOrganizing(x, y)",
        "VisitsStore(x)",
        "GoesToBedLateWakesUpEarly(x, d)",
        "Visit(z,x) ∧ Store(y)"
      ],
      "fol_consts": [
        "remy",
        "x"
      ],
      "fol_rules": [
        "∀x ((Owns(x) → WorksRegularlyAtHome(x)) ∧ WorksRegularlyAtHome(x))",
        "∀x (HasImpressiveOffice(x) → Owns(x))",
        "∀x ((WorksRegularlyAtHome(x)) → (∃y SpendsFreeTimeTidyingOrganizing(remy, y) ∨ (¬SpendsFreeTimeTiddyingOrganising(remy,x)))) ",
        "∀x ((VisitsStore(x)) → (∃z Visit(z, remy) ∧ Store(y)))",
        "(∀x SpendsFreeTimeTidyingOrganizing(remy,x) ⊕ ∀d GoesToBedLateWakesUpEarly(remy,d))  → ¬∃d GoesToBedLateWakesUpEarly(remy,d)",
        "(VisitsStore(x) ⊕ (∀x SpendsFreeTimeTidyingOrganising(rmy, x)))→ ∃z Visit(z,remy)]",
        "∃y (Visit(y, remy) ∧ Store(y))"
      ],
      "fol_conc": "∃y (Visit(y,remy) ∧ Store(x))",
      "perplexity": [
        1.9254732131958008,
        1.492354393005371
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x SpendsFreeTimeTidyingOrganizing(remy,x) ⊕ ∀d GoesToBedLateWakesUpEarly(remy,d))  → ¬∃d GoesToBedLateWakesUpEarly(remy,d)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Owns(x, y)",
        "Works(x)",
        "Often(x)",
        "Atx(y)"
      ],
      "fol_consts": [
        "rema",
        "home",
        "office",
        "noon"
      ],
      "fol_rules": [
        "(Owns(rema, home) → (Works(rema) ∧ Often(rema)))",
        "(∀x (Owns(x, office) → Works(x)) ∧ Owns(rema, home))",
        "(∀x (Works(x) ∧ Often(x) → Tidies(x, rema)))",
        "(∀x (Works(x) ∧ Often(x) → Visits(x, office)))",
        "(Tidies(rafa) ∧ Wakeup(rafa) ∧ Sleeps(rafa) ∧ Wakesafter(noon, rafa)) → ((Owns(rema, home) ∧ Tidies(rrema, rema)) ∨ ¬(Sleeps(rafa) ∧ Wakesafter(noon, rafa)))",
        "((Tidies(rafa) ∧ Wakeup(rafa) ∧ Sleeps(rafa) ∧ Wakesafter(noon, rafa)) ⊕ (Owns(rema, home) ∧ Tidies(rrema, rema))) ∨ ((Sleeps(rafa) ∧ Wakesafter(noon, rafa)) ⊕ (Tidies(rafa) ∧ Wakeup(rafa)))",
        "Visits(rema, office)"
      ],
      "fol_conc": "Visits(rema, office)",
      "perplexity": 1.7466888427734375,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tidies/1, Tidies/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Tidies/1, Tidies/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Owns(x, y)",
        "WorkRegularlyAtHome(y)",
        "ImpressesOffice(b)",
        "Owns(bigmonitorxbigmonitoryy)",
        "ImpressesOffice(z)"
      ],
      "fol_consts": [
        "samy",
        "rymemy"
      ],
      "fol_rules": [
        "(Owns(x, y) → (WorkRegularlyAtHome(y)) ∧ WorkRegularlyAtHome(atmyy))",
        "(∀x ((Owns(bigmonitorzbigmonitormonitorsbanyyzrzymonyzy))) ∨ (∃c (ImpressesOffice(c))))",
        "((Owns(x, y) → (WorkRegularlyAtHome(y))) ∧ WorkRegularlyAtHome(atmyy)) → ImpressesOffice(z)",
        "(ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy) ∧ Owns(bigmonitorx, atymyy))",
        "((Owns(x, y) ∧ WorkRegularlyAtHome(y)) → (WorkRegularlyAtHome(zatmyy))) ⊕ ((ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy))",
        "(Owns(x, y) ∧ WorkRegularlyAtHome(y) → ∃b (ImpressesOffice(zatmyy))) ⊕ (∀c ((ImpressesOffice(canyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy)))",
        "(∃d (((Owns(x, y) ∧ WorkRegularlyAtHome(y)))) → (WorkRegularlyAtHome(zatmyy))) ⊕ ((ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy))",
        "Owns(samy, bigmnoitor)"
      ],
      "fol_conc": "(Owns(rimy, atmy) ⊕ Owns(rimemnybanyyzbigmonitormonitorsryzymonyzy))",
      "perplexity": 5.665857315063477,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Owns/1, Owns/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Owns/1, Owns/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 219
  },
  {
    "id": 67,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Yale University has the largest university endowment of any educational institution.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "University(x)",
        "Moved(y, x)"
      ],
      "fol_consts": [
        "BeninFranklinCollege",
        "BerkeleyCollege",
        "BranfordCollege",
        "DavenportCollege",
        "EzraStilesCollege",
        "GraceHopperCollege",
        "JonathanEdwardsCollege",
        "MorseCollege",
        "PauliMurrayCollege",
        "PiersonCollege",
        "SaybrookCollege",
        "SillimanCollege",
        "TimothyDwightCollege",
        "TrumbullCollege"
      ],
      "fol_rules": [
        "∀x (University(x) → Moved(x, 1716))"
      ],
      "fol_conc": "∀y (∧(Endowment(y, z)) ∧ Z = 42.3 billion)",
      "perplexity": [
        2.7292356491088867,
        1.7189409732818604
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y (∧(Endowment(y, z)) ∧ Z = 42.3 billion)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven"
      ],
      "fol_rules": [
        "(∃x (Private(yale) ∧ Ivy(x))) ∨ (∀x (Yale(x) → ∃y (Newhaven(y))))",
        "∀x ((Ivy(x) ∨ Newhaven(x)) ⊕ Yale(x))"
      ],
      "fol_conc": "(∃x (Private(x) ∧ Ivy(x))) ∨ ∃x (Yale(x))",
      "perplexity": 3.6875975131988525,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IvyLeague(x)",
        "Private(x)",
        "ResearchUniversity(yale)",
        "MovedToNewHaven(x, utsb)",
        "ResearchUniversity(utx)",
        "Private(x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven"
      ],
      "fol_rules": [
        "∀x (IvyLeague(x) ∨ Private(x))",
        "(Private(yale)) ⊕ ResearchUniversity(yale)"
      ],
      "fol_conc": "∃x ((IvyLeague(x) ∧ MovedToNewHaven(utsb, x)) ∨ ∃y (∀z (ResearchUniversity(z) ∧ (MovedToNewHaven(utx, z) → ¬(Private(yale))) ∧ (IvyLeague(y) ∨ ResearchUniversity(y)))) ∨ Private(yale) ∨ ResearchUniversity(yale) ∨ MovedToNewHaven(newhaven, yale) ∨ ∃y (∀z ((ResearchUniversity(z) ∧ (MovedToNewHaven(newhaven, z) → ¬(Private(x))) ∧ (IvyLeague(x) ∨ ResearchUniversity(x)))) ∨ Private(x)))",
      "perplexity": 3.313566207885742,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((IvyLeague(x) ∧ MovedToNewHaven(utsb, x)) ∨ ∃y (∀z (ResearchUniversity(z) ∧ (MovedToNewHaven(utx, z) → ¬(Private(yale))) ∧ (IvyLeague(y) ∨ ResearchUniversity(y)))) ∨ Private(yale) ∨ ResearchUniversity(yale) ∨ MovedToNewHaven(newhaven, yale) ∨ ∃y (∀z ((ResearchUniversity(z) ∧ (MovedToNewHaven(newhaven, z) → ¬(Private(x))) ∧ (IvyLeague(x) ∨ ResearchUniversity(x)))) ∨ Private(x)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 220
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "ManagedBuilding(y)",
        "ApartmentInManagedBuilding(z, w)",
        "DepositRequiredForApt(w, d)",
        "AllowsPet(x, y)",
        "Rent(z, w, d)",
        "MonthlyRent(w, m)"
      ],
      "fol_consts": [
        "Fluffy",
        "Tom",
        "OliveGarden"
      ],
      "fol_rules": [
        "∀x (Pet(x) → AllowsPet(Fluffy, x))",
        "∃y (ManagedBuilding(y) ∧ ApartmentInManagedBuilding(Tom, y) ∧ DepositRequiredForApt(y, d))",
        "∀w (MonthlyRent(w, m), 2000 > $1500)",
        "Pet(Fluffy)",
        "Cat(x) ⊃ Pet(x)"
      ],
      "fol_conc": "∃y(ApartmentInManagedBuilding(Tom, OliveGarden) ∧ MonthlyRent(OliveGarden, 2000))",
      "perplexity": [
        1.8806630373001099,
        1.1770856380462646
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀w (MonthlyRent(w, m), 2000 > $1500)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Deposit(x, y)",
        "Rent(y)",
        "Apartment(y)"
      ],
      "fol_consts": [
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∃x (Aptment(x) ∧ Managed(x))",
        "∀y (Managed(y) → Deposit(y, z))",
        "(Deposit(rent1500, olivegarden)) ⊕ ¬(Deposit(rent2000, olivegarden))",
        "Pet(cat)",
        "Cats(pet)",
        "Fluffy(tom)",
        "Tom(movesinwithfluffy)"
      ],
      "fol_conc": "(∃x (Apartment(x) ∧ Managed(x)) → Deposit(y, z) ⊕ Rent(z, x) ∨ Fluffy(tom) ∨ Tom(movesinwithfluffy) ∨ Cat(pet))",
      "perplexity": 2.8822433948516846,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pets(x)",
        "AllowedInManagedBuildings(x)",
        "DepositRequiredToRentApartmentInManagedBuilding(y, z)",
        "SecurityDepositorEqualToOrMoreThanOneMonth'sRent(z, y)",
        "FluffyIsTom'sPet(y)",
        "Cat(x)",
        "AllowedInManagedBuildings(y)",
        "MonthlyRentAtTheOliveGarden(z)",
        "Cat(p)",
        "Pets(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "tom"
      ],
      "fol_rules": [
        "∀x (AllowedInManagedBuildings(x) ∧ DepositRequiredToRentApartmentInManagedBuilding(y, z)) → SecurityDepositorEqualToOrMoreThanOneMonth'sRent(z, y)",
        "FluffyIsTom'sPet(fluffy, tom)",
        "Cat(p)"
      ],
      "fol_conc": "AllowedInManagedBuildings(tom) ∧ DepositRequiredToRentApartmentInManagedBuilding(fluffy)",
      "perplexity": 3.159003257751465,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DepositRequiredToRentApartmentInManagedBuilding/2, DepositRequiredToRentApartmentInManagedBuilding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: DepositRequiredToRentApartmentInManagedBuilding/2, DepositRequiredToRentApartmentInManagedBuilding/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 221
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can't read anything else to get better to be real people who have good enough fun."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 222
  },
  {
    "id": 182,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is a grumpy person.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → AnimalLover(x))",
        "OwnsPet(tom)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": [
        1.065252661705017,
        1.0116082429885864
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "Animallover(x)",
        "Owns(x, y)",
        "Pet(y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "∀x (Animallover(x) → Nice(x, animal))",
        "∀x (Owns(x, y) → Animallover(x))",
        "Owns(tom, pet)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.2196440696716309,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceTo(x, y)",
        "MeanTo(x, y)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom",
        "animals"
      ],
      "fol_rules": [
        "∀x (NiceTo(x, animals) → ¬MeanTo(x, animals))",
        "∃x (Grumpy(x) ∧ MeanTo(x, animals))",
        "∀x (AnimalLover(x) → NiceTo(x, animals))",
        "OwnsPet(x) → AnimalLover(x)",
        "OwnsPet(tom)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.0964219570159912,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 223
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "your own words"
      ],
      "fol_consts": [
        "eats the same food",
        "taste the same thing, read and write letters,"
      ],
      "fol_rules": [
        "it's easier to understand than you think",
        "you can use this information when it comes to making a thing."
      ],
      "fol_conc": "If you don't know what they mean and doesn't make any sense, you shouldn't be able to get done with it.",
      "perplexity": [
        5.966564655303955,
        8.971295356750488
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "it's easier to understand than you think"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Greekenese(x)",
        "Connoonessnouse(y)"
      ],
      "fol_consts": [
        "charming",
        "civicuele",
        "kitttytickly"
      ],
      "fol_rules": [
        "Unakiness(x)",
        "Connoonessnouse1(y)"
      ],
      "fol_conc": "Eldestnatrytiksuellishellaanteaalitzvistzilholkynseaarntkluttaamstiqrlichyounefidjivee3(x, y)",
      "perplexity": 22.125415802001953,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person(x)",
        "Person(y)"
      ],
      "fol_consts": [
        "_ is a person who works in the software.",
        "_ is a person who works in the software."
      ],
      "fol_rules": [
        "(Person(x) → Person(y))",
        "(Person(v) → Person(i))"
      ],
      "fol_conc": "Person(j) ∧ Person(e, i)",
      "perplexity": 10.77658748626709,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Person/2, Person/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Person/2, Person/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 224
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlaysFor(x, y)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robertLewandowski, bayernMunchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robertLewandowski)",
      "perplexity": [
        1.044577717781067,
        1.0230927467346191
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Play(x, y)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski",
        "bayern",
        "munchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Play(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.2929338216781616,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert lewandowski",
        "bayern munchen"
      ],
      "fol_rules": [
        "Striker(robert lewandowski)",
        "(∀x (Striker(x) → SoccerPlayer(x)))",
        "LeftTeam(robert lewandowski, bayern munchen)",
        "(∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y)))"
      ],
      "fol_conc": "SoccerPlayer(robert lewandowski)",
      "perplexity": 1.1185390949249268,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 225
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseCompany(x)",
        "Game(x)",
        "Top10(x)",
        "SellMoreThanMillion(x)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "nintendo"
      ],
      "fol_rules": [
        "Created(nintendo, zelda)",
        "∀x (Top10(x) → ∃y (JapaneseCompany(y) ∧ Created(y, x)))",
        "∀x (SellMoreThanMillion(x) → Top10(x))",
        "SellMoreThanMillion(zelda)"
      ],
      "fol_conc": "JapaneseCompany(y) ∧ Created(y, fifa22)",
      "perplexity": [
        1.1277339458465576,
        1.0209829807281494
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(x)",
        "Top10(y)",
        "Sells(x, z)",
        "More(z, w)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "one",
        "million",
        "japan"
      ],
      "fol_rules": [
        "Created(japan, zelda)",
        "∀x (Top10(x) → Japanese(y))",
        "∀x (Sells(x, z) ∧ More(z, one)) → Top10(x)",
        "Sells(zelda, one)"
      ],
      "fol_conc": "Japanese(x)",
      "perplexity": 1.3273805379867554,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseCompany(x)",
        "Top10List(y)",
        "SellCopies(y, z)",
        "SelectedInto(y, w)"
      ],
      "fol_consts": [
        "legend_of_zelda",
        "fifa22"
      ],
      "fol_rules": [
        "Created(a, legend_of_zelda)",
        "∀x (Top10List(x) → JapaneseCompany(y))",
        "∀x ∀z (SellCopies(x, z) ∧ (∃n (Game(x) ∧ SellCopies(x, n) ∧ Game(y)))) → SelectedInto(x, w)",
        "SellCopies(legend_of_zelda, m)"
      ],
      "fol_conc": "JapaneseCompany(fifa22)",
      "perplexity": 2.9483895301818848,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 226
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorkRegularlyAtHome(x)",
        "FullyStockedOffice(x)",
        "SpendFreeTimeTidying(x)",
        "VisitOfficeSupply(x)",
        "BedLateWakeNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorkRegularlyAtHome(x))",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x))",
        "∀x (WorkRegularlyAtHome(x) → SpendFreeTimeTidying(x))",
        "∀x (WorkRegularlyAtHome(x) → VisitOfficeSupply(x))",
        "∀x (SpendFreeTimeTidying(x) → ¬BedLateWakeNoon(x))",
        "(BedLateWakeNoon(remy) ∧ SpendFreeTimeTidying(remy)) ⊕ ¬(BedLateWakeNoon(remy) ∨ SpendFreeTimeTidying(remy))"
      ],
      "fol_conc": "(BedLateWakeNoon(remy) ∨ VisitOfficeSupply(remy)) → (¬SpendFreeTimeTidying(remy) ∧ ¬FullyStockedOffice(remy))",
      "perplexity": [
        1.0297390222549438,
        1.0067602396011353
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "remy",
        "monitor",
        "office"
      ],
      "fol_rules": [
        "∀x (Own(x, monitor) → (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x)))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, monitor))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → ∀y (Free(y) ∧ Spend(x, y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y)))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, office))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))",
        "Spaces(y)"
      ],
      "fol_conc": "((Gotobedlate(remy) ∨ Visit(remy, office)) → ¬(Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) ∨ (Fully(remy) ∧ Stocked(remy) ∧ Impressive(remy) ∧ Office(remy))))",
      "perplexity": 1.1601635217666626,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "LargeDesktopMonitor(y)",
        "Home(y)",
        "WorkRegularlyOftenAtHome(x)",
        "FullyStockedImpressiveHomeOffice(x)",
        "SpendFreeTimeTidyingOrganizing(x)",
        "GoBedLate(x)",
        "WakeUpAfterNoon(x)",
        "VisitOfficeSupplyStoreRegularly(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x ∀y (Own(x, y) → WorkRegularlyOftenAtHome(x))",
        "∀x (FullyStockedImpressiveHomeOffice(x) → Own(x, y) ∧ LargeDesktopMonitor(y) ∧ Home(y))",
        "∀x (WorkRegularlyOftenAtHome(x) → SpendFreeTimeTidyingOrganizing(x))",
        "∀x (WorkRegularlyOftenAtHome(x) → VisitOfficeSupplyStoreRegularly(x))",
        "∀x ((SpendFreeTimeTidyingOrganizing(x)) → ¬(GoBedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(GoBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendFreeTimeTidyingOrganizing(remy)) ⊕ (¬GoBedLate(remy) ∨ ¬WakeUpAfterNoon(remy) ∨ ¬SpendFreeTimeTidyingOrganizing(remy))"
      ],
      "fol_conc": "(GoBedLate(remy) ∨ VisitOfficeSupplyStoreRegularly(remy)) → (¬SpendFreeTimeTidyingOrganizing(remy) ∧ ¬FullyStockedImpressiveHomeOffice(remy))",
      "perplexity": 1.1241366863250732,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 227
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnMonitor(x)",
        "WorkHome(x)",
        "HomeOffice(x)",
        "TidyHome(x)",
        "LateBed(x)",
        "LateWake(x)",
        "VisitStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnMonitor(x) → WorkHome(x))",
        "∀x (HomeOffice(x) → OwnMonitor(x))",
        "∀x (WorkHome(x) → TidyHome(x))",
        "∀x (WorkHome(x) → VisitStore(x))",
        "∀x (TidyHome(x) → ¬(LateBed(x) ∧ LateWake(x)))",
        "(LateBed(remy) ∧ LateWake(remy) ∧ TidyHome(remy)) ⊕ ¬(LateBed(remy) ∨ LateWake(remy) ∨ TidyHome(remy))"
      ],
      "fol_conc": "VisitStore(remy)",
      "perplexity": [
        1.0371836423873901,
        1.0085289478302002
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, y) ∧ Large(y) ∧ Desktop(y) ∧ Home(y) → Work(x) ∧ Regularly(x))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, y) ∧ Large(y))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Spend(x, y) ∧ Free(y))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, y))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ⊕ ¬(Gotobedlate(remy) ∨ Wakeupafternoon(remy) ∨ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))"
      ],
      "fol_conc": "Visit(remy, y)",
      "perplexity": 1.2276417016983032,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "HomeOffice(x)",
        "WorkHome(x)",
        "SpendFreeTimeTidying(x)",
        "VisitOfficeSupplyStore(x)",
        "GoBedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "largeDesktopMonitor",
        "remy"
      ],
      "fol_rules": [
        "Own(x, largeDesktopMonitor) → WorkHome(x)",
        "∀x (HomeOffice(x) → Own(x, largeDesktopMonitor))",
        "WorkHome(x) → SpendFreeTimeTidying(x)",
        "WorkHome(x) → VisitOfficeSupplyStore(x)",
        "SpendFreeTimeTidying(x) → ¬(GoBedLate(x) ∧ WakeUpAfterNoon(x))",
        "(GoBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendFreeTimeTidying(remy)) ⊕ ¬(GoBedLate(remy) ∨ WakeUpAfterNoon(remy) ∨ SpendFreeTimeTidying(remy))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(remy)",
      "perplexity": 1.234987735748291,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 228
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": [
        1.0387587547302246,
        1.0129026174545288
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.1150457859039307,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": 1.0532784461975098,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 229
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxsFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "koala"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxsFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxsFavorite(x) → VeryFluffy(x))",
        "∀x (MaxsFavorite(x) → LoveToSleep(x))",
        "∀x (VeryFluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(koala) ∧ LoveToSleep(koala) ∧ Quokka(koala)",
      "perplexity": [
        1.0750678777694702,
        1.0203360319137573
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleep(x)",
        "Quokka(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(max, x))",
        "∀x (From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleep(x) ∧ Quokka(x)",
      "perplexity": 1.1229363679885864,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "FavoriteAnimalOf(x, y)",
        "Animal(x)",
        "IsFrom(x, y)",
        "Fluffy(x)",
        "Sleeps(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x (LovedBy(x, max) → FavoriteAnimalOf(max, x))",
        "∀x (IsFrom(x, australia) → LovedBy(x, max))",
        "∀x (Quokka(x) → IsFrom(x, australia))",
        "∀x (FavoriteAnimalOf(max, x) → Fluffy(x))",
        "∀x (FavoriteAnimalOf(max, x) → Sleeps(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Koala(x) ∧ Sleeps(x) ∧ Quokka(x)",
      "perplexity": 1.351935863494873,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 230
  },
  {
    "id": 110,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Spills(x)",
        "Tidy(x)",
        "Foodie(x)",
        "GoesOut(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spills(x) → ¬(Tidy(x)))",
        "∀x (Foodie(x) ∧ GoesOut(x) → Spills(x))",
        "∀x (OnlyChild(x) → Tidy(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spills(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spills(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ GoesOut(peter) ∧ HighIncome(peter)) ⊕ (Foodie(peter) ∧ GoesOut(peter) ∧ ¬HighIncome(peter))",
      "perplexity": [
        1.0504392385482788,
        1.018892765045166
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Goout(x)",
        "Onlychild(x)",
        "Busy(x)",
        "Highincome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x) ∧ Enjoy(x)))",
        "∀x (Foodie(x) ∧ Goout(x) → Spill(x))",
        "∀x (Onlychild(x) → (Tidy(x) ∧ Enjoy(x)))",
        "∀x (Busy(parentx) → Onlychild(x))",
        "∀x (Highincome(x) → Busy(parentx))",
        "(Spill(peter) ∧ Onlychild(peter)) ⊕ ¬(Spill(peter) ∨ Onlychild(peter))"
      ],
      "fol_conc": "((Foodie(peter) ∧ Goout(peter)) ∧ Highincome(household)) ⊕ ¬((Foodie(peter) ∧ Goout(peter)) ∧ Highincome(household))",
      "perplexity": 1.2081491947174072,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "GoOutFrequently(x, y)",
        "OnlyChild(x)",
        "BusyJobParent(x)",
        "HighNetIncomeHousehold(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ ¬EnjoyCleaning(x))",
        "∀x (Foodie(x) ∧ GoOutFrequently(x, restaurants) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "∀x (BusyJobParent(x) → OnlyChild(x))",
        "∀x (HighNetIncomeHousehold(x) → BusyJobParent(x))",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "((Foodie(peter) ∧ GoOutFrequently(peter, restaurants) ∧ HighNetIncomeHousehold(x)) ∨ (Foodie(peter) ∧ GoOutFrequently(peter, restaurants) ∧ ¬HighNetIncomeHousehold(x)))",
      "perplexity": 1.0985482931137085,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 231
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Importnion",
        "Cnnynt",
        "Everce"
      ],
      "fol_consts": [
        "Ornningaltye], 21.3.7.1",
        "Anneklitee] from the text."
      ],
      "fol_rules": [
        "Extruention",
        "Cnnynt",
        "Everteon,"
      ],
      "fol_conc": "Frozen cion's name is detected. ",
      "perplexity": [
        6.6639018058776855,
        20.017589569091797
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Extruention"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 232
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Favorite(x, y)",
        "WantLongVacation(x)",
        "Student(x)",
        "Season(x)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀x (Season(x) ∧ (x = spring ∨ x = summer ∨ x = fall ∨ x = winter))",
        "∀x (Student(x) ∧ WantLongVacation(x) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": [
        1.056544542312622,
        1.0199272632598877
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Season(x) ∧ (x = spring ∨ x = summer ∨ x = fall ∨ x = winter))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Favorite(x, y)",
        "Want(x, y)",
        "Student(x)",
        "Long(y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x (Favorite(x, spring))",
        "∃x (Favorite(x, summer))",
        "∃x (Favorite(x, fall))",
        "∃x (Favorite(x, winter))",
        "∀x (Student(x) ∧ Want(x, long) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "Want(james, long)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": 1.2238528728485107,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "FavoriteSeason(x, y)",
        "WantLongVacation(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀y (∃x (FavoriteSeason(x, y)))",
        "(FavoriteSeason(emma, summer))",
        "(¬FavoriteSeason(mia, summer))",
        "(Student(x) ∧ WantLongVacation(x) → FavoriteSeason(x, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(mia, spring)",
      "perplexity": 1.2462778091430664,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 233
  },
  {
    "id": 115,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter is shorter than a man in Michael's class.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Height(x)",
        "CanBlock(y,z)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x ∀y (H(x) → C(y,z))",
        "(Michael ∈ P(Peter))"
      ],
      "fol_conc": "P(Peter)",
      "perplexity": [
        3.9330670833587646,
        3.7550597190856934
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Michael ∈ P(Peter))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, taller)",
        "Can(x, shoot)"
      ],
      "fol_consts": [
        "michael",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(y, x)) → Can(shootfrompersonxbypersonoty)",
        "(Shooter(michael, persona) ∧ Shootable(a, personb)) → (Can(blockshotera) ∨ (Not(blockshotera)))",
        "Is(peter, taller) → Is(peter, shorter)"
      ],
      "fol_conc": "Is(peter, shorter)",
      "perplexity": 5.8693528175354,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Taller/2, Taller/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Taller/2, Taller/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Height(x)",
        "Block(x, y)"
      ],
      "fol_consts": [
        "mike",
        "peter"
      ],
      "fol_rules": [
        "∀x (Height(x) → Block(mike, x))",
        "(Block(pete, mike) ∧ Height(mike) ∨ ¬(Block(pete, mike))) ⊕ ∀x ((Block(mike, y) ∧ Block(y, z)) → Block(mike, z))",
        "∃y (∀z (Height(z) ∧ ∃w (Block(w, y)) → ∀x (Block(x, w))))"
      ],
      "fol_conc": "(Block(pete, mike) ∨ Height(peter) ⊕ ∀x ((Block(mike, x) ∧ Block(x, z)) → Block(mike, z)))",
      "perplexity": 2.9387381076812744,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 234
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "PopulousCapitalCity(y)",
        "LocatedInRegion(y, z)",
        "HostedEvent(w, e1, e2)",
        "RankedAmongBestUniversities(z, r)",
        "SummerOlympicsHostCity(a)",
        "WinterOlympicsHostCity(b)",
        "ParalympicsGamesHostCity(c, d)",
        "AsiaPacificUniversityRanking(u)",
        "WorldUniversityRanking(v)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northern_china",
        "southern_china",
        "olympics_summer",
        "university_count"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "PopulousCapitalCity(beijing)",
        "LocatedInRegion(beijing, northern_china)",
        "HostedEvent(beijing, olympics_summer, summer/paralympic)",
        "ManyOfUniversitiesRanking(university_count, beijing, asia-pacific and world rankings)"
      ],
      "fol_conc": "(LocatedInRegion(beijing, southern_china) → False)",
      "perplexity": [
        1.7100727558135986,
        1.1323238611221313
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(LocatedInRegion(beijing, southern_china) → False)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Rank(x)"
      ],
      "fol_consts": [
        "beijing",
        "people",
        "china",
        "northern",
        "southern",
        "summer2008",
        "winter2008",
        "asia",
        "world"
      ],
      "fol_rules": [
        "Capital(beijing, people)",
        "Populous(beijing)",
        "Located(beijing, northern)",
        "Hosted(beijing, summer2008) ∧ Hosted(beijing, winter2008)",
        "(Summer(x) ∨ Winter(x)) → (Olympics(x) ∧ Paralympics(x))",
        "Rank(asia)",
        "Rank(world)"
      ],
      "fol_conc": "Located(beijing, southern)",
      "perplexity": 1.4164358377456665,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "MostPopulousNationalCapitalCity(y)",
        "MostPopulousNationalCapitalCity(z)",
        "MostPopulousNationalCapitalCity(a)",
        "MostPopulousNationalCapitalCity(b)",
        "MostPopulousNationalCapitalCity(c)",
        "MostPopulousNationalCapitalCity(d)",
        "MostPopulousNationalCapitalCity(e)",
        "MostPopulousNationalCapitalCity(f)"
      ],
      "fol_consts": [
        "Beijing",
        "People's Republic of China",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing"
      ],
      "fol_rules": [
        "CapitalOf(Beijing, People's Republic of China)",
        "MostPopulousNationalCapitalCity(Beijing)",
        "MostPopulousNationalCapitalCity(z)",
        "MostPopulousNationalCapitalCity(a)",
        "MostPopulousNationalCapitalCity(b)",
        "MostPopulousNationalCapitalCity(c)",
        "MostPopulousNationalCapitalCity(d)",
        "MostPopulousNationalCapitalCity(e)",
        "MostPopulousNationalCapitalCity(f)"
      ],
      "fol_conc": "¬(MostPopulousNationalCapitalCity(Beijing))",
      "perplexity": 1.3761500120162964,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 235
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "largeDesktopMonitorAtHome(x)",
        "workRegularlyOftenAtHome(x)",
        "fullyStockedAndImpressiveHomeOffice(x)",
        "spendFreeTimeTidyingOrganizingSpacesInHomes(x)",
        "visitTheOfficeSupplyStoreRegularly(x)",
        "goToBedLateAndWakeUpEveryDayAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (largeDesktopMonitorAtHome(x) → workRegularlyOftenAtHome(x))",
        "∃z ((fullyStockedAndImpressiveHomeOffice(remy)) ⊆ largeDesktopMonitorAtHome(z), where z = remy)",
        "∀x (workRegularlyOftenAtHome(x) → spendFreeTimeTidyingOrganizingSpacesInHomes(x))",
        "∀x (workRegularlyOftenAtHome(x) → visitTheOfficeSupplyStoreRegularly(x))",
        "∀x ((spendFreeTimeTidyingOrganizingSpacesInHomes(remy))) ⊆ ¬goToBedLateAndWakeUpEveryDayAfterNoon(z), where z = remy)",
        "∀z (largeDesktopMonitorAtHome(z) → fullyStockedAndImpressiveHomeOffice(y), where y = remy)"
      ],
      "fol_conc": "(goToBedLateAndWakesUpEarly(remy)) ⊕ visitTheOfficeSupplyStoreRegularly(remy): Remy neither spends his/her free time tidying and organizing spaces in their home nor has a fully stocked and impressive home office.",
      "perplexity": [
        1.347904920578003,
        1.1901507377624512
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃z ((fullyStockedAndImpressiveHomeOffice(remy)) ⊆ largeDesktopMonitorAtHome(z), where z = remy)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Work(y, z)",
        "Home(y, z)",
        "Stocked(x)",
        "Impressive(z)",
        "Tidy(x)",
        "Organized(y)",
        "Visit(x)",
        "Late(y)",
        "Wakeup(y)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Work(regularlyandoftenhome))",
        "∀x (Stockedimpressiveoffice(x) → Own(x, largedesktopmonitor))",
        "∀x (Work(y, regularlyandoftenhome) → Tidy(x) ∧ Organized(y))",
        "∀x (Work(y, regularlyandoftenhome) → Visit(officesupplystore))",
        "∀x (Tidyingorganizingspacesinhome(x) → ¬Late(x) ⊕ Wakeup(everydayafternoon))"
      ],
      "fol_conc": "(¬Tidy(x) ∧ ¬Stockedimpressiveoffice(x) → Visit(officesupplystore) ∨ Late(y))",
      "perplexity": 1.8454809188842773,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Work/2, Work/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Work/2, Work/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Ownt(x, y)",
        "WorksRegularlyAtHome(x)",
        "HasFullyStockedImpressiveOffice(x)",
        "TidiesAndOrganizesSpacesInTheirHome(x)",
        "VisitsOfficeSupplyStoreRegulary(x)",
        "WorksRegularlyAtHome(x)",
        "Ownt(y)",
        "WorksRegularlyAtHome(y)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Ownt(x, largeDesktopMonitor) → WorksRegularlyAtHome(x))",
        "∀x ((HasFullyStockedImpressiveOffice(x)) → Ownt(x, largeDesktopMonitor))",
        "∀x (WorksRegularlyAtHome(x) → TidiesAndOrganizesSpacesInTheirHome(x) ∧ VisitsOfficeSupplyStoreRegulary(x))",
        "∀x ((TidiesAndOrganizesSpacesInTheirHome(x)) → ¬(WorksRegularlyAtHome(x)))",
        "(WorksRegularlyAtHome(x) → TidiesAndOrganizesSpacesInTheirHome(x)) ⊕ ¬((WorksRegularlyAtHome(x) ∧ (TidiesAndOrganizesSpacesInTheirHome(x))))",
        "¬(((WorksRegularlyAtHome(remy)) → TidiesAndOrganizesSpacesInTheirHome(remy)))"
      ],
      "fol_conc": "(WorksRegularlyAtHome(remy) ∨ VisitsOfficeSupplyStoreRegulary(remy)) → ¬((TidiesAndOrganizesSpacesInTheirHome(x)) ∧ HasFullyStockedImpressiveOffice(x))",
      "perplexity": 2.2085978984832764,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 236
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSDept(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSDept(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "TakeDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.036009669303894,
        1.0131852626800537
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, y)",
        "Instructed(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "database"
      ],
      "fol_rules": [
        "¬(Student(x) ∧ Work(x, library) ∧ From(x, computer))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) → From(x, computer))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, database))",
        "∀x (Student(x) ∧ Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.141514539718628,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorkingInTheLab(x)",
        "WorkingInTheLab(x)",
        "FromComputerScienceDepartment(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "TakesDatabaseCourse(x)",
        "InstructedByDavid(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkingInTheLab(x) → ¬FromComputerScienceDepartment(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) → Student(x) ∧ WorkingInTheLab(x))",
        "∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))",
        "∀x (InstructedByDavid(x) → TakesDatabaseCourse(x))",
        "∀x (WorkingInTheLab(x) → InstructedByDavid(x))",
        "Student(james)",
        "WorkingInTheLab(james)",
        "¬(HasPartTimeJobOfferedByUniversity(jack) ∨ WorkingInTheLab(jack))"
      ],
      "fol_conc": "(TakesDatabaseCourse(james) ∨ HasPartTimeJobOfferedByUniversity(james))",
      "perplexity": 1.7965888977050781,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 237
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jump(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Bark(x)))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (HasLegs(x) → Jump(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬(Jump(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Bark(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": [
        1.0664280652999878,
        1.013669490814209
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Haslegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (Haslegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → Haslegs(x))",
        "¬(Jumps(kiki) ∨ Haslegs(kiki)) → (Terricolous(kiki) ∨ Haslegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ∧ ¬Dog(kiki)",
      "perplexity": 1.095430850982666,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "(¬Jumps(kiki) ∧ ¬HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": 1.0745941400527954,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 238
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Simple Language Toolkit (ANACRI), epic!],"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 239
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "FromEarth(y)",
        "Extraterrestrial(x)",
        "Human(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∃y (FromEarth(y) ∧ Alien(y))",
        "∀x ((Extraterrestrial(x) ∨ Human(x)))"
      ],
      "fol_conc": "∃marvin( Alien(marvin)) Marvin is extraterrestrial ",
      "perplexity": [
        2.1263997554779053,
        1.1773886680603027
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃marvin( Alien(marvin)) Marvin is extraterrestrial"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀y ((From(y, mars) → Alien(marvin)))",
        "∀z (Extraterrestrial(z) ∧ Human(z) ⊕ ¬Human(z))",
        "∀w (From(w, earth) → Human(w))"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 1.513535499572754,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromMars(x)",
        "Human(x)",
        "FromMars(x)",
        "FromMars(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∃x ((Extraterrestrial(x) ∧ Human(x)))",
        "(FromMars(marvin) → Alien(marvin))",
        "(∀x (Human(x) → ¬Extraterrestrial(x)))",
        "¬(FromMars(marvin) ∧ FromMars(marvin))",
        "¬(FromMars(marvin)) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 2.4610416889190674,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 240
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x, y)",
        "PremieredBy(y, z)",
        "Orchestra(z)",
        "LedByConductor(z)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennaMusicSociety"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Composer(symphony9, x))",
        "PremieredBy(viennaMusicSociety, symphony9)",
        "Orchestra(viennaMusicSociety)",
        "LedByConductor(beethoven)"
      ],
      "fol_conc": "∃x (Composer(x, beethoven))",
      "perplexity": [
        1.4983547925949097,
        1.0334389209747314
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composer(y)",
        "Write(x, y)",
        "Premiere(z, w)",
        "Orchestra(w)",
        "Lead(v, u)",
        "Conductor(u)",
        "Symphony(x)"
      ],
      "fol_consts": [
        "beethoven",
        "violinistsociety"
      ],
      "fol_rules": [
        "∀x (Music(violinist)) → ∃y ((Composer(y) ∧ Write(y, violinist)))",
        "(Premiere(symphony9, society) ∧ Orchestra(socity))",
        "Orchestras(x) ∧ Lead(viennaorchestra, conductor)",
        "∀x (Music(symphony9) → Beethoven(write, symphony9) ∨ Symphony(violinist))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": 2.873358964920044,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Write/2, Write/0, Beethoven/2, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Write/2, Write/0, Beethoven/2, Beethoven/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "PremieredBy(y, x)",
        "PremieredBy(x)",
        "MusicPiece(y)",
        "MusicPiece(z)",
        "Write(x)",
        "PremieredBy(x)",
        "MusicPiece(x)",
        "MusicPiece(y)",
        "MusicPiece(z)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "∀x (MusicPiece(x))",
        "∃x ((PremieredBy(vienna music society, symphony no. 9)) ∧ MusicPiece(symphony no. 9))",
        "Write(beethoven, symphony no. 9)"
      ],
      "fol_conc": "Write(beethoven)",
      "perplexity": 3.6681227684020996,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((PremieredBy(vienna music society, symphony no. 9)) ∧ MusicPiece(symphony no. 9))"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 241
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorkRegularlyAtHome(x)",
        "FullyStockedOffice(x)",
        "SpendFreeTimeTidying(x)",
        "VisitOfficeSupply(x)",
        "BedLateWakeNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorkRegularlyAtHome(x))",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x))",
        "∀x (WorkRegularlyAtHome(x) → SpendFreeTimeTidying(x))",
        "∀x (WorkRegularlyAtHome(x) → VisitOfficeSupply(x))",
        "∀x (SpendFreeTimeTidying(x) → ¬BedLateWakeNoon(x))",
        "(BedLateWakeNoon(remy) ∧ SpendFreeTimeTidying(remy)) ⊕ ¬(BedLateWakeNoon(remy) ∨ SpendFreeTimeTidying(remy))"
      ],
      "fol_conc": "(BedLateWakeNoon(remy) ∨ VisitOfficeSupply(remy)) → (¬SpendFreeTimeTidying(remy) ∧ ¬FullyStockedOffice(remy))",
      "perplexity": [
        1.0297390222549438,
        1.0067602396011353
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "remy",
        "monitor",
        "office"
      ],
      "fol_rules": [
        "∀x (Own(x, monitor) → (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x)))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, monitor))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → ∀y (Free(y) ∧ Spend(x, y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y)))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, office))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))",
        "Spaces(y)"
      ],
      "fol_conc": "((Gotobedlate(remy) ∨ Visit(remy, office)) → ¬(Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) ∨ (Fully(remy) ∧ Stocked(remy) ∧ Impressive(remy) ∧ Office(remy))))",
      "perplexity": 1.1601635217666626,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "LargeDesktopMonitor(y)",
        "Home(y)",
        "WorkRegularlyOftenAtHome(x)",
        "FullyStockedImpressiveHomeOffice(x)",
        "SpendFreeTimeTidyingOrganizing(x)",
        "GoBedLate(x)",
        "WakeUpAfterNoon(x)",
        "VisitOfficeSupplyStoreRegularly(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x ∀y (Own(x, y) → WorkRegularlyOftenAtHome(x))",
        "∀x (FullyStockedImpressiveHomeOffice(x) → Own(x, y) ∧ LargeDesktopMonitor(y) ∧ Home(y))",
        "∀x (WorkRegularlyOftenAtHome(x) → SpendFreeTimeTidyingOrganizing(x))",
        "∀x (WorkRegularlyOftenAtHome(x) → VisitOfficeSupplyStoreRegularly(x))",
        "∀x ((SpendFreeTimeTidyingOrganizing(x)) → ¬(GoBedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(GoBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendFreeTimeTidyingOrganizing(remy)) ⊕ (¬GoBedLate(remy) ∨ ¬WakeUpAfterNoon(remy) ∨ ¬SpendFreeTimeTidyingOrganizing(remy))"
      ],
      "fol_conc": "(GoBedLate(remy) ∨ VisitOfficeSupplyStoreRegularly(remy)) → (¬SpendFreeTimeTidyingOrganizing(remy) ∧ ¬FullyStockedImpressiveHomeOffice(remy))",
      "perplexity": 1.1241366863250732,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 242
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Location(x, y)",
        "NamedBy(x, y)",
        "Island_Part(y)",
        "Coast(x, y)"
      ],
      "fol_consts": [
        "Barutin Cove",
        "Snow Island",
        "Greenwich Island",
        "Deception Island",
        "Barutin",
        "South Shetland Islands"
      ],
      "fol_rules": [
        "∀x (Location(Barutin Cove, Snow Island) ∧ Location(Barutin Cove, Greenwich Island) ∧ Location(Barutin Cove, Deception Island)) → NamedBy(Barutin Cove, South Shetland Islands)",
        "∀x (Island_Part(Snow Island) ∨ Island_Part(Greenwich Island) ∨ Island_Part(Deception Island)) → Island_Part(South Shetland Islands)",
        ""
      ],
      "fol_conc": "∃x (NamedBy(Barutin, x) → x = Barutin Cove)",
      "perplexity": [
        1.657301425933838,
        1.0794004201889038
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (NamedBy(Barutin, x) → x = Barutin Cove)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Located(x, y)",
        "Named(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "snowisland",
        "southsheltariislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "∀x ∀y (Located(x, y) → Located(y, x))",
        "(Southsheltariislands(x) ∧ Snowisland(x) ∧ Greenwichisland(x)) ∧ Deceptionisland(x) → (Alocated(x, southsheltariislands))"
      ],
      "fol_conc": "All(x) → Named(barutin, x)",
      "perplexity": 1.952756404876709,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LocatedIn(x, y)",
        "NamedBy(x, y)"
      ],
      "fol_consts": [
        "Barutin Cove",
        "Snow Island",
        "Greenwich Island",
        "Deception Island",
        "South Shetland Islands",
        "Antarctica",
        "Barutin Cove"
      ],
      "fol_rules": [
        "∀x ∀y (LocatedIn(x, y)) → (LocatedIn(y, x))",
        "∃x (NamedBy(x, Barutin Cove) ∧ NamedBy(Barutin Cove, Snow Island))",
        "∃x (LocatedIn(x, South Shetland Islands) ∧ LocatedIn(South Shetland Islands, Antarctica))"
      ],
      "fol_conc": "∀x (NamedBy(x, Antarctica))",
      "perplexity": 1.5616326332092285,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 243
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "IsPartOf(y, z)",
        "Island(z)"
      ],
      "fol_consts": [
        "barutinCove",
        "snowIsland",
        "greenwichIsland",
        "deceptionIsland",
        "southShetlandIslands",
        "antarctica",
        "bulgaria",
        "barutinBulgarianSettlement"
      ],
      "fol_rules": [
        "NamedAfter(barutinCove, barutinBulgarianSettlement)",
        "LocatedIn(barutinCove, snowIsland)",
        "∀x (Island(x) → (LocatedIn(snowIsland, x) ⊕ LocatedIn(greenwichIsland, x) ⊕ LocatedIn(deceptionIsland, x)))",
        "IsPartOf(southShetlandIslands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "∃x (Island(x) ∧ NamedAfter(x, barutinBulgarianSettlement))",
      "perplexity": [
        1.169869303703308,
        1.0510454177856445
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Includes(z, x)"
      ],
      "fol_consts": [
        "barutin",
        "cove",
        "bulgarian",
        "settlement",
        "snowisland",
        "greenwichisland",
        "deceptionisland",
        "antarctica",
        "southshetlands"
      ],
      "fol_rules": [
        "Named(cove, bulgarian)",
        "Located(cove, snowisland)",
        "Includes(southshetlands, snowisland) ∧ Includes(southshetlands, greenwichisland) ∧ Includes(southshetlands, deceptionisland)",
        "Located(southshetlands, antarctica)",
        "(Located(x, y) ∧ Located(y, z)) → Located(x, z)"
      ],
      "fol_conc": "∃z (Named(z, bulgarian) ∧ Located(z, antarctica))",
      "perplexity": 1.2905948162078857,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Includes(z, x)"
      ],
      "fol_consts": [
        "BarutinCove",
        "BulgarianSettlement",
        "SnowIsland",
        "SouthShetlandIslands",
        "GreenwichIsland",
        "DeceptionIsland",
        "Antarctica"
      ],
      "fol_rules": [
        "NamedAfter(BarutinCove, BulgarianSettlement)",
        "LocatedIn(BarutinCove, SnowIsland)",
        "Includes(SouthShetlandIslands, SnowIsland) ∧ Includes(SouthShetlandIslands, GreenwichIsland) ∧ Includes(SouthShetlandIslands, DeceptionIsland)",
        "LocatedIn(SouthShetlandIslands, Antarctica)",
        "(LocatedIn(Antarctica, BulgarianSettlement) ∧ LocatedIn(BulgarianSettlement, Antarctica)) → LocatedIn(BarutinCove, Antarctica)"
      ],
      "fol_conc": "∃x (LocatedIn(Antarctica, BulgarianSettlement) ∨ NamedAfter(BarutinCove, BulgarianSettlement))",
      "perplexity": 1.5695061683654785,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 244
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "IndoEuropean(x)",
        "RomanceLanguage(x)",
        "LanguageFamily(x)",
        "RelatedTo(x, y)",
        "IsRomance(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (IndoEuropean(x) → RomanceLanguage(x))",
        "∀x (RomanceLanguage(x) ∧ LanguageFamily(x))",
        "∀x ((RomanceLanguage(x) ∨ IndoEuropean(x)) → RelatedTo( x, y )  )",
        "RomanceLanguage(french) ∧ RomanceLanguage(spanish): French and Spanish are both Romance languages.",
        "German ∧ Spanish → RelatedTo(german, spanish)",
        "Basque ¬RelatedTo(basque,x) :Basque is not related to any other language."
      ],
      "fol_conc": "IsRomance(german)",
      "perplexity": [
        1.5376545190811157,
        1.2154542207717896
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "RomanceLanguage(french) ∧ RomanceLanguage(spanish): French and Spanish are both Romance languages."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Indouropean(x)",
        "Romance(x)",
        "Languagefamily(x)",
        "Relatedto(x, y)",
        "French(x)",
        "Spanish(x)",
        "German(x)",
        "Basque(x)"
      ],
      "fol_consts": [
        "german",
        "french",
        "spanish",
        "basque"
      ],
      "fol_rules": [
        "∀x (Indouropean(x) → Romance(x))",
        "(Romance(x) ∧ Languagefamily(x))",
        "∀x ((Languagefamily(x) → Relatedto(x, y)) ∨ ¬Relatedto(x, y))",
        "(French(rina) ∧ Spanish(rina) → Romance(rina))",
        "German(german) ∧ Relatedto(spanish, german)",
        "Basque(basque) ⊕ ∃x (Relatedto(basque, x))"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.8931814432144165,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IndoEuropean(x)",
        "IsRomanceLanguage(y, x)",
        "IndoEuropean(romanfamilyx)",
        "IsRomanceLanguage(x)",
        "IsRomanceLanguage(y, z)",
        "IsRomanceLanguage(z)",
        "IsRomanceLanguage(wy)",
        "IndoEuropean(xy)"
      ],
      "fol_consts": [
        "german",
        "french",
        "spanish",
        "basque"
      ],
      "fol_rules": [
        "(∀x (IndoEuropean(x) → IsRomanceLanguage(romanfamily, x))) ∧ (IsRomanceLanguage(frency))",
        "(IsRomanceLanguage(spanishfrenchrromnacegna))",
        "IndoEuropean(basque)",
        "(∀x (IndoEuropean(x) → ∃z ((IsRomanceLanguage(z, x) ∧ IsRomanceLanguage(y, z))) ∨ (∃y (IsRomanceLanguage(romanfamilzyw, y)))))",
        "IndoEuropean(gerryman)"
      ],
      "fol_conc": "(∀x (IndoEuropean(x)) → ∃z ((IsRomanceLanguage(z) ∧ IndoEuropean(xy))) ∨ (∃y (IsRomanceLanguage(romanfamilzyw, y))))",
      "perplexity": 8.05637264251709,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsRomanceLanguage/2, IsRomanceLanguage/1.\n\n\nFatal error:  The following symbols are used with multiple arities: IsRomanceLanguage/2, IsRomanceLanguage/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 245
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Web",
        "net"
      ],
      "fol_consts": [
        "webnet]"
      ],
      "fol_rules": [
        "Anything can be found in the internet.",
        "In real life, you need to know how to get out of it."
      ],
      "fol_conc": "There is no magic in the world, and you cannot find any more than the world can get out of a hole!",
      "perplexity": [
        5.188683986663818,
        14.156132698059082
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Anything can be found in the internet."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_consts": [
        "Cricket', 'Tennis','Micropeal.jpg'],                          ----(",
        ")"
      ],
      "fol_rules": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_conc": "Rosy(x) ∧ Rosy(n)",
      "perplexity": 14.295182228088379,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 246
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "ManagedBuilding(y)",
        "ApartmentInManagedBuilding(z, w)",
        "DepositRequiredForApt(w, d)",
        "AllowsPet(x, y)",
        "Rent(z, w, d)",
        "MonthlyRent(w, m)"
      ],
      "fol_consts": [
        "Fluffy",
        "Tom",
        "OliveGarden"
      ],
      "fol_rules": [
        "∀x (Pet(x) → AllowsPet(Fluffy, x))",
        "∃y (ManagedBuilding(y) ∧ ApartmentInManagedBuilding(Tom, y) ∧ DepositRequiredForApt(y, d))",
        "∀w (MonthlyRent(w, m), 2000 > $1500)",
        "Pet(Fluffy)",
        "Cat(x) ⊃ Pet(x)"
      ],
      "fol_conc": "∃y(ApartmentInManagedBuilding(Tom, OliveGarden) ∧ MonthlyRent(OliveGarden, 2000))",
      "perplexity": [
        1.8806630373001099,
        1.1770856380462646
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀w (MonthlyRent(w, m), 2000 > $1500)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Deposit(x, y)",
        "Rent(y)",
        "Apartment(y)"
      ],
      "fol_consts": [
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∃x (Aptment(x) ∧ Managed(x))",
        "∀y (Managed(y) → Deposit(y, z))",
        "(Deposit(rent1500, olivegarden)) ⊕ ¬(Deposit(rent2000, olivegarden))",
        "Pet(cat)",
        "Cats(pet)",
        "Fluffy(tom)",
        "Tom(movesinwithfluffy)"
      ],
      "fol_conc": "(∃x (Apartment(x) ∧ Managed(x)) → Deposit(y, z) ⊕ Rent(z, x) ∨ Fluffy(tom) ∨ Tom(movesinwithfluffy) ∨ Cat(pet))",
      "perplexity": 2.8822433948516846,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pets(x)",
        "AllowedInManagedBuildings(x)",
        "DepositRequiredToRentApartmentInManagedBuilding(y, z)",
        "SecurityDepositorEqualToOrMoreThanOneMonth'sRent(z, y)",
        "FluffyIsTom'sPet(y)",
        "Cat(x)",
        "AllowedInManagedBuildings(y)",
        "MonthlyRentAtTheOliveGarden(z)",
        "Cat(p)",
        "Pets(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "tom"
      ],
      "fol_rules": [
        "∀x (AllowedInManagedBuildings(x) ∧ DepositRequiredToRentApartmentInManagedBuilding(y, z)) → SecurityDepositorEqualToOrMoreThanOneMonth'sRent(z, y)",
        "FluffyIsTom'sPet(fluffy, tom)",
        "Cat(p)"
      ],
      "fol_conc": "AllowedInManagedBuildings(tom) ∧ DepositRequiredToRentApartmentInManagedBuilding(fluffy)",
      "perplexity": 3.159003257751465,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DepositRequiredToRentApartmentInManagedBuilding/2, DepositRequiredToRentApartmentInManagedBuilding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: DepositRequiredToRentApartmentInManagedBuilding/2, DepositRequiredToRentApartmentInManagedBuilding/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 247
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))"
      ],
      "fol_conc": "LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.04557466506958,
        1.0823451280593872
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchamp(x)",
        "Oscaractor(x)",
        "Protennisp(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "Wellpaid(x)",
        "Livetaxhaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "(∀x (Grandslamchamp(x)) → Protennisp(x))",
        "(∀x (Oscaractor(x) → Celebrity(x)))",
        "(∀x (Protennisp(x) → Athlete(x)))",
        "Celebrity(x) → Wellpaid(x)",
        "Athlete(x) → Famous(x)",
        "Wellpaid(x) → Livetaxhaven(x)",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → Livetaxhaven(djokovic)"
      ],
      "fol_conc": "Livetaxhaven(djokovic)",
      "perplexity": 1.505163311958313,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "Celebrity(x) ⊕ WellPaid(x)",
        "Athlete(x) ⊕ LivesInTaxHaven(x)",
        "(GrandSlamChampion(djokovic) → ProfessionalTennisPlayer(djokovic))",
        "ProfessionalTennisPlayer(djokovic) → Athlete(djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(djokovic)",
      "perplexity": 1.4674839973449707,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 248
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSDept(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSDept(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "TakeDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.036009669303894,
        1.0131852626800537
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, y)",
        "Instructed(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "database"
      ],
      "fol_rules": [
        "¬(Student(x) ∧ Work(x, library) ∧ From(x, computer))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) → From(x, computer))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, database))",
        "∀x (Student(x) ∧ Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.141514539718628,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorkingInTheLab(x)",
        "WorkingInTheLab(x)",
        "FromComputerScienceDepartment(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "TakesDatabaseCourse(x)",
        "InstructedByDavid(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkingInTheLab(x) → ¬FromComputerScienceDepartment(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) → Student(x) ∧ WorkingInTheLab(x))",
        "∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))",
        "∀x (InstructedByDavid(x) → TakesDatabaseCourse(x))",
        "∀x (WorkingInTheLab(x) → InstructedByDavid(x))",
        "Student(james)",
        "WorkingInTheLab(james)",
        "¬(HasPartTimeJobOfferedByUniversity(jack) ∨ WorkingInTheLab(jack))"
      ],
      "fol_conc": "(TakesDatabaseCourse(james) ∨ HasPartTimeJobOfferedByUniversity(james))",
      "perplexity": 1.7965888977050781,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 249
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Island(x)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "antarctica",
        "south_shetland_islands"
      ],
      "fol_rules": [
        "Named(barutin_cove, barutin)",
        "Located(barutin_cove, snow_island)",
        "∃x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island)",
        "∀x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island → PartOf(x, south_shetland_islands))",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": [
        1.2041075229644775,
        1.174124836921692
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Island(x)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "barutin",
        "cove",
        "bulgarian",
        "settlement",
        "southwest",
        "coast",
        "snow",
        "island",
        "south",
        "shetland",
        "islands",
        "greenwich",
        "deception",
        "antarctica"
      ],
      "fol_rules": [
        "Named(ant, bulgarian)",
        "Located(cove, southwest)",
        "Located(southwest, snow)",
        "Island(snow)",
        "Island(greenwich)",
        "Island(deception)",
        "Part(south, shetland)",
        "Part(shetland, ant)",
        "∀x ∀y ∀z (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "¬Located(bulgarian, ant)",
      "perplexity": 1.301805853843689,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Named(x, y)",
        "LocatedIn(x, y)",
        "PartOf(y, x)"
      ],
      "fol_consts": [
        "barutin",
        "cove",
        "bulgarian",
        "snow",
        "south",
        "shetland",
        "islands",
        "antarctica",
        "greenwich",
        "deception"
      ],
      "fol_rules": [
        "Named(antarticocove, bulgarian)",
        "LocatedIn(cove, snow)",
        "PartOf(snow, south)",
        "PartOf(shetland, antarctica)",
        "(LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)"
      ],
      "fol_conc": "¬LocatedIn(bulgarian, antarctica)",
      "perplexity": 1.8011727333068848,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 250
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock))",
      "perplexity": [
        1.0844471454620361,
        1.0157794952392578
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "((Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock)))",
      "perplexity": 1.150132179260254,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exist(x) ∧ (Animal(x) ∨ Squirrel(x)))",
        "∀x (Animal(x) → Rabbit(x) ⊕ Squirrel(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Exist(rock) ∧ Rabbit(rock) ∧ Squirrel(rock) ∧ Skittish(rock))",
      "perplexity": 1.2314939498901367,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 251
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "In(x, y)",
        "Visit(x, y)",
        "Donate(x, y)",
        "Mine(x)",
        "State(x)"
      ],
      "fol_consts": [
        "picuris_mountains",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∃x (MountainRange(x) ∧ (In(x, new_mexico) ⊕ In(x, texas)))",
        "Visit(juan_de_onate, picuris_mountains)",
        "Donate(harding_pegmatite_mine, picuris_mountains)",
        "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ In(y, x) ∧ Donate(y, x))"
      ],
      "fol_conc": "∃x (MountainRange(x) ∧ In(x, new_mexico) ∧ Visit(juan_de_onate, x))",
      "perplexity": [
        1.2494505643844604,
        1.2033166885375977
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ In(y, x) ∧ Donate(y, x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Mountainrange(x)",
        "Mine(x)",
        "Donated(x)",
        "Visited(x, y)",
        "Inrange(x, y)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "harding"
      ],
      "fol_rules": [
        "(Mountainrange(picuris) ∧ Instate(picuris, newmexico)) ⊕ (Mountainrange(picuris) ∧ Instate(picuris, texas))",
        "Visited(juan, picuris)",
        "Donated(harding)",
        "Inrange(harding, picuris)",
        "¬(∃x (Mountainrange(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Inrange(y, x) ∧ Donated(y))))"
      ],
      "fol_conc": "Visited(juan, picuris) ∧ Instate(picuris, newmexico)",
      "perplexity": 1.304213523864746,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "Visited(x, y)",
        "LocatedIn(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan de onate",
        "texas",
        "harding pegmatite mine",
        "juan de onate",
        "picuris",
        "harding pegmatite mine",
        "texas",
        "juan de onate",
        "harding pegmatite mine"
      ],
      "fol_rules": [
        "(MountainRange(picuris) ∧ (LocatedIn(harding pegmatite mine, picuris))) → MountainRange(picuris)",
        "(Visited(juan de onate, picuris))",
        "(Donated(harding pegmatite mine))",
        "¬((∃x (MountainRange(x) ∧ LocatedIn(x, texas)))) ∨ (∀x ((LocatedIn(x, texas)) ∧ Donated(x))) → ¬(LocatedIn(harding pegmatite mine, texas))"
      ],
      "fol_conc": "(Visited(juan de onate, picuris) ⊕ ∃y (MountainRange(y) ∧ LocatedIn(y, texas) ∧ Visited(juan de onate, y)))",
      "perplexity": 3.7986466884613037,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 252
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornInCity(y, z)",
        "Person(x)",
        "AmericanCity(z)",
        "NovelWriter(x)",
        "Created(x, y)",
        "Book(x)",
        "YearWritten(x, y)"
      ],
      "fol_consts": [
        "daniShapiro",
        "familyHistory",
        "familySecrets",
        "boston",
        "americanCity",
        "year2003"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Novel(x))",
        "∀y ∀z (BornInCity(Person(y), AmericanCity(z)) → Person(y) is American)",
        "∀x ∀y ((Novel(Book(x)) ∧ WrittenBy(Book(x), Person(y))) → NovelWriter(Person(y)))",
        "(DaniShapiro is an American writer): ¬AmericanCity(daniShapiro)",
        "FamilyHistoryBookWrittenByDani: WrittenBy(familyHistory, daniShapiro).",
        "NovelFamilyHistory2003: (Novel(familyHistory) ∧ YearWritten(familyHistory, year2003)).",
        "DaniCreatedPodcast: Created(daniShapiro, familySecrets).",
        "AmericanCityBoston: AmericanCity(boston)"
      ],
      "fol_conc": "BornInCity(daniShapiro, boston): Dani Shapiro was born in Boston.",
      "perplexity": [
        1.3125823736190796,
        1.0868486166000366
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y ∀z (BornInCity(Person(y), AmericanCity(z)) → Person(y) is American)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Written(x, y)",
        "Person(x)",
        "Writer(x, y)",
        "American(x)"
      ],
      "fol_consts": [
        "danishapiro",
        "familyhistory",
        "boston"
      ],
      "fol_rules": [
        "¬Podcast(familyhistory)",
        "∀p (Born(p, boston) → American(p))",
        "∀b ∀w ((Novel(b) ∧ Written(b, w)) → Writer(novelist, b))",
        "Writer(danishapiro, familyhistory)",
        "Person(danishapiro)",
        "Born(danishapiro, americancity)",
        "American(americancity)",
        "Novel(familyhistory)"
      ],
      "fol_conc": "Born(danishapiro, boston)",
      "perplexity": 1.5471217632293701,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(y)",
        "Person(z)",
        "BornIn(a, b)",
        "AmericanCity(c)",
        "IsAWriterOf(d, e)",
        "Created(f, g)"
      ],
      "fol_consts": [
        "danielle",
        "shapiro",
        "family_history",
        "podcast",
        "novelist",
        "american",
        "family_secrets",
        "family_history",
        "american",
        "danielle",
        "shapiro",
        "novelist"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Novel(y))",
        "∀a (BornIn(a, c) ∧ AmericanCity(c) → IsAWriterOf(z, e))",
        "(Person(danielle) ∨ BornIn(danielle, american)) ∧ Person(shapiro) ∧ (Novel(family_history) ∧ Created(family_history, danielle)) → Novel(novelist)",
        "BornIn(danielle, shapiro) ∧ IsAWriterOf(american, novelist)",
        "(Podcast(podcast) ∨ Novel(podcast) ∨ Created(family_secrets, danielle))",
        "AmericanCity(b)"
      ],
      "fol_conc": "BornIn(danielle, b)",
      "perplexity": 2.3081722259521484,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 253
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "CEO(x)",
        "Gentleman(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        " ∀x ((Ugly(x)) → ¬Handsome(x))",
        " ∀x (Evil(x) → Ugly(x))",
        " ∀x (Gentleman(x) → Handsome(x))",
        " ∃y (CEO(y) ∧ Gentleman(harry)) ∨ ¬∃y (CEO(y) ∧ Gentleman(harry))",
        " ∃x (Gentleman(x) ∧ CEO(x)), ∀ x, y ((Gentleman(x) → Gentlemen(y))] , ",
        " "
      ],
      "fol_conc": "∀y (CEO(y)) ∨ Gentleman(harry)",
      "perplexity": [
        1.767283320426941,
        1.8059931993484497
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (CEO(y) ∧ Gentleman(harry)) ∨ ¬∃y (CEO(y) ∧ Gentleman(harry))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)"
      ],
      "fol_consts": [
        "harry",
        "ceo"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x ((Evil(x) ∧ Ugly(x)) → Ugly(x))",
        "∀x ((Gentleman(x) ∧ Kind(x)) → Handsome(x))",
        "∀x (Gentlemen(x) → Ceo(x))",
        "(Harry(x) ∧ Gentleman(harry))",
        "Ceo(harry)"
      ],
      "fol_conc": "Harrison(x)",
      "perplexity": 1.764825701713562,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 254
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SupervisedLearning(category1, x)",
        "LabellingData(category3, category2 ∧ ∃y ¬Category4(y))",
        "∀x (LabellingData(category2) ∨ LabellingData(category3)))"
      ],
      "fol_consts": [
        "category1(x)",
        "labellingdata(category3)(category2)",
        "supervisedmachinelearningalgorithmforTrainingTextSummarisationModel(category1)"
      ],
      "fol_rules": [
        "∃x (SupervisedLearning(∀y, category4) ∧ ∀z ∼Labelling(y,z))",
        "(category1 ∧ ∃x ¬Category2(x)) ∨ (∧x ≠ Category3)(¬LabellingData(x,y)))"
      ],
      "fol_conc": "$(∈ category1(x))(∨($∈$category4( $x))))",
      "perplexity": [
        2.8099801540374756,
        4.0299248695373535
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (SupervisedLearning(∀y, category4) ∧ ∀z ∼Labelling(y,z))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Machine(x)",
        "Supervised(x, y)",
        "Unsupervised(x, y)",
        "Reinforcement(y)"
      ],
      "fol_consts": [
        "ml",
        "textsummarization"
      ],
      "fol_rules": [
        "(∃x (Machine(x))) ∧ ∀y (∀z (Supervised(z, x) ∨ Unsupervised(z, x)) → ∃w (Textsummation(w, y)))",
        "(∃x (Unsupervised(x))) ∧ ¬(Reinforcement(x))"
      ],
      "fol_conc": "Unsupervised(textsummarization)",
      "perplexity": 3.1184234619140625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)"
      ],
      "fol_consts": [
        "machine learning",
        "text summarization model"
      ],
      "fol_rules": [
        "∀x (Supervised(x) ∧ Unsupervised(x))",
        "(∃y ∃z (Unsupervised(y, z))) ⊕ ∀y (∃z (Unsupervised(z, y)))"
      ],
      "fol_conc": "Supervised(r) → Unsupervised(r)",
      "perplexity": 2.926884889602661,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Unsupervised/2, Unsupervised/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 255
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SingleParentFamily(x)",
        "Income(x) < $205",
        "EconomicHardship(economic_hardness, x)"
      ],
      "fol_consts": [
        "sam"
      ],
      "fol_rules": [
        "{x ∈ Domain} ∀y SingleParent y ∨ x Parent Family y ∧ Income(y) ≤ AverageSalary() → Not (Work(x, y)) : No one lives alone with too little money.",
        "{∀z Dad(z) ⇒ ¬ Work(Work(x, z)): The father does not have a job that pays."
      ],
      "fol_conc": "∃x SingleParentFamily(x)",
      "perplexity": [
        3.5197274684906006,
        2.675503730773926
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "{x ∈ Domain} ∀y SingleParent y ∨ x Parent Family y ∧ Income(y) ≤ AverageSalary() → Not (Work(x, y)) : No one lives alone with too little money."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, money)",
        "Is(x, a)",
        "Lives(x, family)"
      ],
      "fol_consts": [
        "tom",
        "dad"
      ],
      "fol_rules": [
        "(∃y (Money(y))) ∧ ¬(Economic(x)) ∨ ∃y ((Financial(x, y) ∧ Has(y, money)) → Is(a, x))"
      ],
      "fol_conc": "¬Has(tom, money)",
      "perplexity": 4.479578018188477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CantBeHelped(x)",
        "HasJob(x)"
      ],
      "fol_consts": [
        "gre",
        "financialaid",
        "financialaid",
        "financialaid",
        "financialaid",
        "gre",
        "financialaid"
      ],
      "fol_rules": [
        "∃x (CantBeHelped(x))",
        "(HasJob(s) ∧ CantBeHelped(gre)) → ¬(HasJob(r) ∨ HasJob(gre))",
        "(HasJob(financialaid)) ∨ ¬(HasJob(financialaid))"
      ],
      "fol_conc": "¬(HasJob(financialaid) ∨ HasJob(gre))",
      "perplexity": 5.358760833740234,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 256
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "American(x)",
        "Tall(y)",
        "WearsLargeShoes(z)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (All basketball players are tall)"
      ],
      "fol_conc": "Not DoesProject(sam) ∨ WearsLargeShoes(sam)",
      "perplexity": [
        3.818885087966919,
        2.5007922649383545
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (All basketball players are tall)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)"
      ],
      "fol_consts": [
        "rina",
        "yuri"
      ],
      "fol_rules": [
        "(∃x (Drink(x)) → Dependent(rinta))",
        "(∀x (Drink(x) → Joke(x)))"
      ],
      "fol_conc": "Jokes(yuri)",
      "perplexity": 3.0756802558898926,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NotAm(x)",
        "Tall(x)",
        "NotAm(yuri)"
      ],
      "fol_consts": [
        "yuri",
        "yuri"
      ],
      "fol_rules": [
        "∀x (NotAm(x)) → ¬(NotAm(yuri) ∨ Tall(yuri))",
        "(Tall(yuri) ∧ NotAm(yuri)) ⊕ NotAm(t)"
      ],
      "fol_conc": "¬NotAm(yuri)",
      "perplexity": 6.287996292114258,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 257
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "LastOlympicGames(x)",
        "Location(x, y)",
        "WonMostMedals(x, y)",
        "Country(x)",
        "Medals(x, y)",
        "UnitedStates"
      ],
      "fol_consts": [
        "tokyo"
      ],
      "fol_rules": [
        "SportingEvent(OlympicGames(tokyo))",
        "LastOlympicGames(OlympicGames(tokyo))",
        "∀x ((SportingEvent(x) ∧ LastOlympicGames(x)) → WonMostMedals(UnitedStates, x))",
        "∀x (WonMostMedals(UnitedStates, x) → ∃y (SportingEvent(x) ∧ LastOlympicGames(x) ∧ Location(x, y)))",
        "∀x ((SportingEvent(x) ∧ Location(x, y)) → ∃z ((SportingEvent(x) ∧ Location(x, y) ∧ LastOlympicGames(z)) → (z = x)))"
      ],
      "fol_conc": "¬(SportingEvent(OlympicGames(tokyo)) ∧ LastOlympicGames(OlympicGames(tokyo)))",
      "perplexity": [
        1.4748461246490479,
        1.1545791625976562
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "SportingEvent(OlympicGames(tokyo))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x)",
        "Won(x, y, z)",
        "Medals(x, y, z)"
      ],
      "fol_consts": [
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(games) ∧ Sporting(games)",
        "Olympic(lastgames) ∧ Location(lastgames, tokyo)",
        "Won(unitedstates, lastgames, most)",
        "∀x (Medals(x, lastgames, most) → Won(x, lastgames, most))"
      ],
      "fol_conc": "¬Location(lastgames, tokyo)",
      "perplexity": 1.4206390380859375,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "GamesIn(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "olympic_games_usa_won_most_medals",
        "tokyo",
        "olympic_games_usa_won_most_medals"
      ],
      "fol_rules": [
        "SportingEvent(olympic_games_usa_won_most_medals)",
        "GamesIn(olympic_games_usa_won_most_medals, tokyo)",
        "WonMostMedals(olympic_games_usa_won_most_medals, olympic_games_usa_won_most_medals)"
      ],
      "fol_conc": "¬GamesIn(olympic_games_usa_won_most_medals, tokyo)",
      "perplexity": 1.893216848373413,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 258
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "VisaType(x, y)",
        "NeedsApplyForCPT(x)",
        "WantsToWorkInUS(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) → ((VisaType(x, 'f1') ∨ VisaType(x, 'j1')))",
        "∀x (InternationalStudent(x) ∧ VisaType(x, 'f1') ∧ WantsToWorkInUS(x) → NeedsApplyForCPT(x))",
        "InternationalStudent(mike)"
      ],
      "fol_conc": "VisaType(mike, 'f1')",
      "perplexity": [
        1.4095230102539062,
        1.2837638854980469
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (InternationalStudent(x) → ((VisaType(x, 'f1') ∨ VisaType(x, 'j1')))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x, y)",
        "Student(x)",
        "F1visa(x, y)",
        "J1visa(x, y)",
        "Apply(x, z)",
        "Work(x, y)"
      ],
      "fol_consts": [
        "mike",
        "us",
        "cpt",
        "opt",
        "f1usa",
        "j1usa",
        "f1",
        "j1",
        "susa",
        "pusa"
      ],
      "fol_rules": [
        "∀x (International(x, us) → F1visa(x, y) ⊕ J1visa(y))",
        "(F1visa(x, y) ∧ International(x, us) ∧ Apply(x, z) → Work(x, y))",
        "Student(mike)",
        "Apply(mike, cpt)",
        "Work(mike, us)"
      ],
      "fol_conc": "∃x (International(x, us) ∧ F1visa(y) ∧ Student(x) ∧ International(x, us) ∧ Apply(z, x))",
      "perplexity": 2.138221025466919,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: F1visa/2, F1visa/1.\n\n\nFatal error:  The following symbols are used with multiple arities: F1visa/2, F1visa/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x, y)",
        "USPerson(y)",
        "InternationalStudent(x)"
      ],
      "fol_consts": [
        "mike",
        "mike"
      ],
      "fol_rules": [
        "(∃y (InternationalStudent(mike, x) ∧ USPerson(k)) → ((InternationalStudent(x, y))) ⊕ (((InternationalStudent(y, z)))))",
        "((USPerson(q) ∧ InternationalStudent(q, w)) ∨ InternationalStudent(r))",
        "(∀y (InternationalStudent(k, x) ∧ USPerson(x))) → (∃z ((InternationalStudent(z, k) ⊕ InternationalStudent(y))))",
        "((InternationalStudent(mike, a)) ∧ InternationalStudent(a, b)) ∨ ∀x (¬(USPerson(k)))",
        "(∃y (((InternationalStudent(x, z))) ∧ USPerson(z) ⊕ InternationalStudent(y))) → ((InternationalStudent(mike, d)) ∨ ¬((InternationalStudent(d))))",
        "(((InternationalStudent(k, x)) ∨ InternationalStudent(q, w) ∨ InternationalStudent(r) ⊕ (((InternationalStudent(s)))) ∧ USPerson(w))) → ∃x ((InternationalStudent(x, k) ∨ ¬(InternationalStudent(y)) ⊕ (USPerson(k))))",
        "∀z (∃y (InternationalStudent(z) ∨ InternationalStudent(d)) ∧ USPerson(r)) → ((InternationalStudent(mike, a)))"
      ],
      "fol_conc": "(InternationalStudent(x, y) ∨ InternationalStudent(k))",
      "perplexity": 13.194814682006836,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: InternationalStudent/1, InternationalStudent/2.\n\n\nFatal error:  The following symbols are used with multiple arities: InternationalStudent/1, InternationalStudent/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 259
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(djokovic)",
      "perplexity": [
        1.0438159704208374,
        1.0163722038269043
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic",
        "taxhaven"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ∨ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Livesin(x, taxhaven))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, taxhaven)"
      ],
      "fol_conc": "Livesin(djokovic, taxhaven)",
      "perplexity": 1.1575440168380737,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Athlete(x)",
        "Celebrity(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "Djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "Famous(Djokovic) ∧ Athlete(Djokovic) → LivesInTaxHaven(Djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(Djokovic)",
      "perplexity": 1.045016884803772,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 260
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatesIn(x, y)",
        "BelongsToCity(city, person)",
        "IsOnLeaderboard(leaderboard, x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (∀y ((ParticipatesIn(x, y) ∧ IsOnLeaderboard(leaderboard, x)) → Win(y)))",
        "(BelongsToCity(city, person) ∨ ∅)"
      ],
      "fol_conc": "IsOnLeaderboard(leaderboard, rina)",
      "perplexity": [
        2.6780128479003906,
        1.7730518579483032
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(BelongsToCity(city, person) ∨ ∅)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x)",
        "Participated(y, z)",
        "Tied(z, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "dumaierclassic",
        "leaderboard",
        "winner",
        "participant",
        "tied",
        "person"
      ],
      "fol_rules": [
        "(∃x (Winner(x)) ∧ ∃y (Participant(y, x)))",
        "((Leaderboard(steinhauer) → Ties(steinhauer, descampe))) ∨ ((Tie(steinhauer, belgium) ∧ Participant(descampe, steinhauer)))"
      ],
      "fol_conc": "∀x ∃y (Winner(x) ∧ Participated(y, x)) ∨ ¬(Leaderboard(steinhauer) → Ties(steinhauer, descampe))",
      "perplexity": 2.858041763305664,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatesIn(x, y)"
      ],
      "fol_consts": [
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=["
      ],
      "fol_rules": [
        "∀x (Winner(x) → ∃y (ParticipatesIn(y, x)))"
      ],
      "fol_conc": "∃x (Winner(x))",
      "perplexity": 1.744195818901062,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 261
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "ManagedBuilding(y)",
        "ApartmentInManagedBuilding(z, w)",
        "DepositRequiredForApt(w, d)",
        "AllowsPet(x, y)",
        "Rent(z, w, d)",
        "MonthlyRent(w, m)"
      ],
      "fol_consts": [
        "Fluffy",
        "Tom",
        "OliveGarden"
      ],
      "fol_rules": [
        "∀x (Pet(x) → AllowsPet(Fluffy, x))",
        "∃y (ManagedBuilding(y) ∧ ApartmentInManagedBuilding(Tom, y) ∧ DepositRequiredForApt(y, d))",
        "∀w (MonthlyRent(w, m), 2000 > $1500)",
        "Pet(Fluffy)",
        "Cat(x) ⊃ Pet(x)"
      ],
      "fol_conc": "∃y(ApartmentInManagedBuilding(Tom, OliveGarden) ∧ MonthlyRent(OliveGarden, 2000))",
      "perplexity": [
        1.8806630373001099,
        1.1770856380462646
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀w (MonthlyRent(w, m), 2000 > $1500)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Deposit(x, y)",
        "Rent(y)",
        "Apartment(y)"
      ],
      "fol_consts": [
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∃x (Aptment(x) ∧ Managed(x))",
        "∀y (Managed(y) → Deposit(y, z))",
        "(Deposit(rent1500, olivegarden)) ⊕ ¬(Deposit(rent2000, olivegarden))",
        "Pet(cat)",
        "Cats(pet)",
        "Fluffy(tom)",
        "Tom(movesinwithfluffy)"
      ],
      "fol_conc": "(∃x (Apartment(x) ∧ Managed(x)) → Deposit(y, z) ⊕ Rent(z, x) ∨ Fluffy(tom) ∨ Tom(movesinwithfluffy) ∨ Cat(pet))",
      "perplexity": 2.8822433948516846,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pets(x)",
        "AllowedInManagedBuildings(x)",
        "DepositRequiredToRentApartmentInManagedBuilding(y, z)",
        "SecurityDepositorEqualToOrMoreThanOneMonth'sRent(z, y)",
        "FluffyIsTom'sPet(y)",
        "Cat(x)",
        "AllowedInManagedBuildings(y)",
        "MonthlyRentAtTheOliveGarden(z)",
        "Cat(p)",
        "Pets(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "tom"
      ],
      "fol_rules": [
        "∀x (AllowedInManagedBuildings(x) ∧ DepositRequiredToRentApartmentInManagedBuilding(y, z)) → SecurityDepositorEqualToOrMoreThanOneMonth'sRent(z, y)",
        "FluffyIsTom'sPet(fluffy, tom)",
        "Cat(p)"
      ],
      "fol_conc": "AllowedInManagedBuildings(tom) ∧ DepositRequiredToRentApartmentInManagedBuilding(fluffy)",
      "perplexity": 3.159003257751465,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DepositRequiredToRentApartmentInManagedBuilding/2, DepositRequiredToRentApartmentInManagedBuilding/1.\n\n\nFatal error:  The following symbols are used with multiple arities: DepositRequiredToRentApartmentInManagedBuilding/2, DepositRequiredToRentApartmentInManagedBuilding/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 262
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Capital(x)",
        "PopulationSize(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "Capital(Beijing)",
        "PopulationSize(Beijing, p)"
      ],
      "fol_conc": "",
      "perplexity": [
        3.38611102104187,
        1.4317158460617065
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "world"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, china) ∧ Capital(x))",
        "∃x (Hosted(x, beijing) ∧ Ranked(x, asia))",
        "(Ranked(beijing, world) ∨ Ranked(beijing, asia))"
      ],
      "fol_conc": "Not(worldly2ndlargestcity)",
      "perplexity": 1.8451765775680542,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldPopulousCity(y)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "China"
      ],
      "fol_rules": [
        "∀x (Capital(x, China)) ∧ Capital(Beijing, x)",
        "Capital(Beijing, China)",
        "WorldPopulousCity(Beijing)",
        "LocatedIn(Beijing, China)"
      ],
      "fol_conc": "∃x (WorldPopulousCity(x) ∧ ¬HostedOlympics(x))",
      "perplexity": 3.035545587539673,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 263
  },
  {
    "id": 49,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is printed text.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Media(x)",
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [],
      "fol_conc": "PrintedText(1984)",
      "perplexity": [
        3.0293374061584473,
        1.1440988779067993
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Analog(x)",
        "Digital(x)",
        "Printed(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "digital",
        "streaming",
        "analog"
      ],
      "fol_rules": [
        "∀x (Analog(x) → ∀y (Not(printedtext)))"
      ],
      "fol_conc": "Printed(text)",
      "perplexity": 2.339400053024292,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (Analog(x) → ¬PrintedText(x))",
        "∀x (PrintedText(x) ∧ Analog(x))",
        "∀x (StreamingService(x) → ∃x (Analog(x)))",
        "(HardcoverBook(1984) → PrintedText(1984))",
        "(StreamingService(1984) ∧ HardcoverBook(1984))"
      ],
      "fol_conc": "PrintedText(1984)",
      "perplexity": 1.2417352199554443,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 264
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.054250717163086,
        1.0146929025650024
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ Ceos(harry)",
      "perplexity": 1.1794359683990479,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "∀x (¬Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ CEO(harry)",
      "perplexity": 1.0483012199401855,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 265
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Champion(x)",
        "Nominated(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Paid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "(Champion(x) ⊕ Nominated(x))",
        "∀x (Champion(x) → ProfessionalTennisPlayer(x))",
        "∀x (Nominated(x) → Celebrity(x))",
        "∀x (Celebrity(x) → Athlete(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Celebrity(x) → Paid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Paid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "Champion(djokovic)",
      "perplexity": [
        1.0777403116226196,
        1.1879191398620605
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslam(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Taxhaven(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslam(x) ⊕ Oscarnominated(x))",
        "∀x (Grandslam(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Celebrity(x) → Athlete(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, wellpaid)"
      ],
      "fol_conc": "Grandslam(djokovic)",
      "perplexity": 1.1873350143432617,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wellpaid/1, Wellpaid/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Wellpaid/1, Wellpaid/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic",
        "djokovic"
      ],
      "fol_rules": [
        "∃x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x ((GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ∧ ∀x (∀x (ProfessionalTennisPlayer(x) → Athlete(x))) ∧ ∃x (Celebrity(x) → WellPaid(x))) ∧ ∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "OscarNominatedActor(djokovic)",
        "GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic)",
        "∀x ((Famous(x) ∧ Athlete(x)) → WellPaid(x))"
      ],
      "fol_conc": "(GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic))",
      "perplexity": 1.6710333824157715,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 266
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "WantLongVacation(x)",
        "LoveMost(x, y)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x ((Student(x) ∧ WantLongVacation(x)) → LoveMost(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(mia, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": [
        1.0444223880767822,
        1.018232822418213
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Favorite(x, y)",
        "Want(x, y)",
        "Long(y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x (Want(x, y) ∧ Long(y) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, x) ↔ Favorite(emma, x))",
        "Want(james, y) ∧ Long(y)"
      ],
      "fol_conc": "Favorite(james, fall)",
      "perplexity": 1.1837671995162964,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Season(x)",
        "LongVacationWanted(x)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x) → (¬Season(y)) ⊕ Season(y))",
        "∀x ((LongVacationWanted(x)) → FavoriteSeason(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(emma, x) ↔ FavoriteSeason(mia, x))",
        "LongVacationWanted(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": 1.4297080039978027,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 267
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ In(billings, montana)",
        "∀x (City(x) ∧ In(x, montana) → (x = butte ∨ x = helena ∨ x = missoula))",
        "City(white_sulphur_springs) ∧ City(butte) ∧ In(white_sulphur_springs, x) ∧ In(butte, x)",
        "¬In(pierre, montana)",
        "∀x (City(x) ∧ In(x, butte) → ¬In(x, pierre))"
      ],
      "fol_conc": "SameState(butte, pierre)",
      "perplexity": [
        1.0654758214950562,
        1.011418104171753
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (City(x) ∧ In(x, montana) → (x = butte ∨ x = helena ∨ x = missoula))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "Instate(x, y)",
        "Same(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings)",
        "Instate(billings, montana)",
        "Instate(butte, montana)",
        "Instate(helena, montana)",
        "Instate(missoula, montana)",
        "Instate(white, montana)",
        "Instate(sulphur, montana)",
        "Instate(butte, montana)",
        "Instate(pierre, montana)",
        "∀x ∀y (Instate(x, y) ∧ Instate(y, z) → Same(x, z))"
      ],
      "fol_conc": "Same(butte, pierre)",
      "perplexity": 1.2601113319396973,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "City(x)",
        "InState(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white sulphur springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings)",
        "InState(billings, montana)",
        "∀x (City(x) ∧ InState(x, montana) → (¬SameState(x, pierre)))",
        "∃x (City(x) ∧ InState(butte, x))",
        "∃y (City(y) ∧ InState(white sulphur springs, y) ∧ SameState(butte, y))"
      ],
      "fol_conc": "SameState(butte, pierre)",
      "perplexity": 1.2915847301483154,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 268
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(y)",
        "DesignStyleOfZahaHadid(z)",
        "DesignStyleOfKellyWearstler(w)",
        "Evocative(v)",
        "Dreamy(u)",
        "DesignByMax(t)"
      ],
      "fol_consts": [
        "hadid",
        "wearstler",
        "max_design"
      ],
      "fol_rules": [
        "∀x (DesignStyleOfZahaHadid(x) → Timeless(x))",
        "¬∃y (MassProductDesign(y) ∧ Timeless(y))",
        "DesignStyleOfZahaHadid(hadid) ⊕ DesignStyleOfKellyWearstler(wearstler)",
        "∀w (DesignStyleOfKellyWearstler(w) → Evocative(w))",
        "∀u (DesignStyleOfKellyWearstler(u) → Dreamy(u))",
        "DesignByMax(max_design) → (Timeless(max_design) → (MassProductDesign(max_design) ∧ Evocative(max_design)))"
      ],
      "fol_conc": "DesignByMax(t) → (Evocative(t) ⊕ Dreamy(t))",
      "perplexity": [
        1.1864566802978516,
        1.0925570726394653
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x, y)",
        "Timeless(z)",
        "Massproduct(z)",
        "Evocative(z)",
        "Dreamy(z)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x, zaha) → Timeless(x))",
        "∀x (Massproduct(x) → ¬Timeless(x))",
        "(Design(y, zaha) ⊕ Design(z, kelly))",
        "∀x (Design(x, kelly) → Evocative(x))",
        "∀x (Design(x, kelly) → Dreamy(x))",
        "(Timeless(w) ∧ Design(w, max)) → (Massproduct(w) ∧ Evocative(w))"
      ],
      "fol_conc": "(Evocative(v) ⊕ Dreamy(v))",
      "perplexity": 1.3054825067520142,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "DesignStyle(y, x)",
        "MassProduct(z)",
        "Evocative(w)",
        "Dreamy(v)"
      ],
      "fol_consts": [
        "ZahaHadid",
        "KellyWearstler",
        "Max"
      ],
      "fol_rules": [
        "∀y (DesignStyle(y, ZahaHadid) → Timeless(y))",
        "¬(MassProduct(z) ∧ Timeless(z))",
        "(DesignStyle(x, ZahaHadid) ⊕ DesignStyle(x, KellyWearstler))",
        "∀y (DesignStyle(y, KellyWearstler) → Evocative(y))",
        "∀y (DesignStyle(y, KellyWearstler) → Dreamy(y))",
        "(Timeless(u) ∧ DesignStyle(u, Max)) → (MassProduct(u) ∧ Evocative(u))"
      ],
      "fol_conc": "Evocative(Max) ⊕ Dreamy(Max)",
      "perplexity": 1.2268986701965332,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 269
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "Tokyo(x)"
      ],
      "fol_consts": [
        "last"
      ],
      "fol_rules": [
        ""
      ],
      "fol_conc": "¬(Tokyo(last))",
      "perplexity": [
        2.9197914600372314,
        1.1774507761001587
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(y, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo",
        "us"
      ],
      "fol_rules": [
        "∀x (Sporting(x)) ∧ ∃z (Last(x, z) → Sporting(z))",
        "Last(olympicgames, tokyo)"
      ],
      "fol_conc": "Not(lastolympicsgamesintokyo)",
      "perplexity": 2.6066153049468994,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "is(x, y)",
        "was(x, y)"
      ],
      "fol_consts": [
        "OlympicGames",
        "Tokyo",
        "UnitedStates"
      ],
      "fol_rules": [
        "∀x (is(x, OlympicGames)) → ∃y (was(x, y))",
        "∀x (was(x, Tokyo) → is(x, OlympicGames))",
        "∀x (is(x, UnitedStates) → was(x, Tokyo))"
      ],
      "fol_conc": "was(OlympicGames, x)",
      "perplexity": 1.7811522483825684,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 270
  },
  {
    "id": 146,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is not young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Manager(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬Teaches(jerry) ⊕ ¬Manager(jerry)",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": [
        1.0537241697311401,
        1.2833539247512817
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studys(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studys(x) → Student(x))",
        "∀x (Studys(x) ⊕ Teaches(x))",
        "∀x (Young(x) ∧ Teaches(x) → False(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.201067328453064,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Teach(x)",
        "Manager(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "(Study(x) → Student(x)) ⊕ Teach(x)",
        "(Teach(x) ⊕ Study(x))",
        "¬(Young(x) ∧ Teach(x))",
        "¬(Teach(jerry) ∨ Manager(jerry))",
        "(Young(rose) ∨ Student(rose))"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.834060788154602,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 271
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "∃x (Rina ∧ Drinks(sam, x))",
        "( ∀x ∃y P(x, y) → Drives(y, saml))",
        "]} {",
        "fol_preds: [Dependent(x), Drinks(x), Jokes(x), Unaware(x)],",
        "fol_consts:[rina]",
        "]=",
        "fol_rules: [(∃x Rina ∧ ∀y P( x , y) → Drives(y, sam)), (∀x ∃y Project(y))]",
        "fol_conc':",
        "} {",
        "predicates and constants",
        "- Dependent(x): x is a person dependent on caffeine.",
        "- Drinks(x), Jokes(x), Unaware(x)(existential predicates)",
        "(∈x Rina)- ∀x ∃y P( ( x , y) → Drives(y, sam))",
        "Constants:",
        "- rina: Rina",
        "folding FOL rules",
        "(∀x Drinks(x), Dependent( x ))",
        "(∈x Sam ∧ ∀z Jokes(z))",
        "(sam is either a student and unaware that caffeine is a drug, or neither) ",
        "- ¬ Student(rina) ∨ ¬Unaware ( rina )",
        "(¬ ∃y P(x,y))( Dependent( x ), saml)",
        " Rina: Either a project done using Mac Computer or written in Python",
        ", ∀x ((Use(sam, mac)(Song(y))))  ",
        "fol_preds",
        " fol_consts",
        "fol_rules",
        "fol_conc"
      ],
      "fol_conc": "∃(Project(x) ∧ Drives (y, sam))",
      "perplexity": [
        2.5239131450653076,
        4.93002462387085
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Rina ∧ Drinks(sam, x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Good(x)",
        "Bad(y)",
        "Fights(z)"
      ],
      "fol_consts": [
        "superhero",
        "digby"
      ],
      "fol_rules": [
        "(∃y (Bad(y) ∧ ¬Fighting(digby, y)))",
        "(Superhero(superhero) → ((Good(neighbor) ∨ Bad(nice)) ∧ Fighting(superhero, good)))"
      ],
      "fol_conc": "Digby(nice) ⊕ Digby(fight)",
      "perplexity": 4.25177526473999,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsCharacter(x, y)",
        "IsCharacter(x)",
        "IsCharacter(y)"
      ],
      "fol_consts": [
        "superhero movies",
        "superhero movies",
        "superhero movies"
      ],
      "fol_rules": [
        "∀x (IsCharacter(superhero movies, x)) → IsCharacter(x)",
        "(NamedByMovie(superhero movies, y) ∧ IsCharacter(y))"
      ],
      "fol_conc": "(NamedByMovie(superhero movies, x) ∨ ¬IsCharacter(x))",
      "perplexity": 18.202966690063477,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsCharacter/2, IsCharacter/1.\n\n\nFatal error:  The following symbols are used with multiple arities: IsCharacter/2, IsCharacter/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 272
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [
        "colorectal_cancer"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(colorectal_cancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRateLow(x))",
        "∀x (BileDuctCancer(x) ∧ SurvivalRateLow(x) ∧ ColorectalCancer(x) → ¬BileDuctCancer(x))"
      ],
      "fol_conc": "∀x ( (BileDuctCancer(x) ∨ Cholangiocarcinoma(x)) ∧ ColorectalCancer(x) → (BileDuctCancer(x) ∧ MildFlu(x)) )",
      "perplexity": [
        1.0621095895767212,
        1.0207260847091675
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(x)",
        "Cancer(x)",
        "Bileduct(x)",
        "Cholangiocarcinoma(x)",
        "Mild(x)"
      ],
      "fol_consts": [
        "colorectal",
        "cancer"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → ¬Survival(x, high))",
        "∀x (Severe(x) → Deadly(x))",
        "Bileduct(colorectal)",
        "∀x (Cholangiocarcinoma(x) → Bileduct(x))",
        "∀x (Mild(x) → ¬Survival(x, low))",
        "∀x (Cancer(x) ∧ Bileduct(x) ∧ Survival(x, low) → ¬Bileduct(x))"
      ],
      "fol_conc": "((Cancer(colorectal) ∧ Bileduct(colorectal)) ∨ Cholangiocarcinoma(colorectal)) → (Cancer(colorectal) ∧ Bileduct(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.228973627090454,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "ColorectalCancer(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [
        "colorectalcancer"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) → Deadly(x))",
        "BileDuctCancer(bileductcancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "¬(MildFlu(x) ∧ SurvivalRateLow(x))",
        "(BileDuctCancer(colorectalcancer) ∧ SurvivalRateLow(colorectalcancer)) → ¬BileDuctCancer(colorectalcancer)"
      ],
      "fol_conc": "((BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer)) → (BileDuctCancer(colorectalcancer) ∧ MildFlu(colorectalcancer)))",
      "perplexity": 1.1319353580474854,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 273
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PersonX"
      ],
      "fol_consts": [
        " Person X"
      ],
      "fol_rules": [],
      "fol_conc": "Person X is a friend of Person X and Person Y. Person X is an apple.",
      "perplexity": [
        2.6581013202667236,
        6.358364105224609
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Person X is a friend of Person X and Person Y. Person X is an apple."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "trimor, rivroed.(n)"
      ],
      "fol_consts": [
        "$n$",
        "$n$"
      ],
      "fol_rules": [
        "trimor, rivroed.($n$, $n$)"
      ],
      "fol_conc": "((∀k ∃x (coutin(i))) ⊕ ¬trimor, rivroed.(o, i))",
      "perplexity": 25.573078155517578,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "trimor, rivroed.($n$, $n$)"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 274
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "rodrick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(rodrick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(rodrick_strong, creed_brothers)",
      "perplexity": [
        1.0385785102844238,
        1.0182982683181763
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Formed(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "wwe",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Formed(diamondmine, wwe)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Leads(roderickstrong, creedbrothers)",
      "perplexity": 1.1766703128814697,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, creed_brothers)",
      "perplexity": 1.0692299604415894,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 275
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomers(x, y)",
        "HasLunchInCompany(x)",
        "HasLunchAtHome(x)",
        "WorksRemotelyFromHome(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) → SchedulesMeetingWithCustomers(HasLunchInCompany, y))",
        "(SchedulesMeetingWithCustomers(y), HasLunchInCompany(z)): Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (Employee(x) → ¬(HasLunchAtHome(x))) : Employees will either have lunch in the company or have lunch at home",
        "(HasLunchAtHome(y), WorksRemotelyFromHome): If an employee has lunch at home, then he/she works remotely from home.",
        "∀x (InOtherCountry(x) → WorksRemotelyFromHome)",
        "∀y ((Manager(y), ¬WorksRemotelyFromHome))"
      ],
      "fol_conc": "(Employee(james) ∧ HasLunchAtHome(z)) ⊕ Employee(james)",
      "perplexity": [
        1.6255406141281128,
        1.2488607168197632
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(SchedulesMeetingWithCustomers(y), HasLunchInCompany(z)): Everyone who has lunch in the company schedules meetings with their customers."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Has(x, z)",
        "Appears(y, t)",
        "Manager(x)",
        "Remote(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, customer)) → Appears(employee, company)",
        "∀y (Has(y, lunch)) ∧ Employee(z) → Schedule(z, customer)",
        "∀z ((Employee(z) ∨ Manager(z))) ⊕ Has(z, home)"
      ],
      "fol_conc": "¬Has(james, company)",
      "perplexity": 2.6338348388671875,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Employee/1, Employee/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Employee/1, Employee/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ScheduleMeeting(x, y)",
        "AppearanceToday(x)",
        "HasLunchInCompany(x)",
        "HasLunchInCompany(x)",
        "ScheduleMeeting(x, y)"
      ],
      "fol_consts": [
        "james",
        "james"
      ],
      "fol_rules": [
        "∀x (ScheduleMeeting(x, y) → AppearanceToday(x))",
        "∀x ((HasLunchInCompany(x)) ∧ ScheduleMeeting(x, y))",
        "∀x (HasLunchInCompany(x) ⊕ HasLunchInCompany(x))",
        "∀x (HasLunchInCompany(x) → ScheduleMeeting(x, y))",
        "∃y (ScheduleMeeting(y) ∧ AppearanceToday(james))",
        "¬(HasLunchInCompany(james))"
      ],
      "fol_conc": "(HasLunchInCompany(james) ∨ HasLunchInCompany(james))",
      "perplexity": 4.019089221954346,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ScheduleMeeting/1, ScheduleMeeting/2.\n\n\nFatal error:  The following symbols are used with multiple arities: ScheduleMeeting/1, ScheduleMeeting/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 276
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "PopulousCapitalCity(y)",
        "LocatedInRegion(y, z)",
        "HostedEvent(w, e1, e2)",
        "RankedAmongBestUniversities(z, r)",
        "SummerOlympicsHostCity(a)",
        "WinterOlympicsHostCity(b)",
        "ParalympicsGamesHostCity(c, d)",
        "AsiaPacificUniversityRanking(u)",
        "WorldUniversityRanking(v)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northern_china",
        "southern_china",
        "olympics_summer",
        "university_count"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "PopulousCapitalCity(beijing)",
        "LocatedInRegion(beijing, northern_china)",
        "HostedEvent(beijing, olympics_summer, summer/paralympic)",
        "ManyOfUniversitiesRanking(university_count, beijing, asia-pacific and world rankings)"
      ],
      "fol_conc": "(LocatedInRegion(beijing, southern_china) → False)",
      "perplexity": [
        1.7100727558135986,
        1.1323238611221313
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(LocatedInRegion(beijing, southern_china) → False)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Rank(x)"
      ],
      "fol_consts": [
        "beijing",
        "people",
        "china",
        "northern",
        "southern",
        "summer2008",
        "winter2008",
        "asia",
        "world"
      ],
      "fol_rules": [
        "Capital(beijing, people)",
        "Populous(beijing)",
        "Located(beijing, northern)",
        "Hosted(beijing, summer2008) ∧ Hosted(beijing, winter2008)",
        "(Summer(x) ∨ Winter(x)) → (Olympics(x) ∧ Paralympics(x))",
        "Rank(asia)",
        "Rank(world)"
      ],
      "fol_conc": "Located(beijing, southern)",
      "perplexity": 1.4164358377456665,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "MostPopulousNationalCapitalCity(y)",
        "MostPopulousNationalCapitalCity(z)",
        "MostPopulousNationalCapitalCity(a)",
        "MostPopulousNationalCapitalCity(b)",
        "MostPopulousNationalCapitalCity(c)",
        "MostPopulousNationalCapitalCity(d)",
        "MostPopulousNationalCapitalCity(e)",
        "MostPopulousNationalCapitalCity(f)"
      ],
      "fol_consts": [
        "Beijing",
        "People's Republic of China",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing"
      ],
      "fol_rules": [
        "CapitalOf(Beijing, People's Republic of China)",
        "MostPopulousNationalCapitalCity(Beijing)",
        "MostPopulousNationalCapitalCity(z)",
        "MostPopulousNationalCapitalCity(a)",
        "MostPopulousNationalCapitalCity(b)",
        "MostPopulousNationalCapitalCity(c)",
        "MostPopulousNationalCapitalCity(d)",
        "MostPopulousNationalCapitalCity(e)",
        "MostPopulousNationalCapitalCity(f)"
      ],
      "fol_conc": "¬(MostPopulousNationalCapitalCity(Beijing))",
      "perplexity": 1.3761500120162964,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 277
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "datin",
        "troddi', ",
        "],                                                                                                                                                                                               "
      ],
      "fol_consts": [
        "dauee, caiui, troddi",
        "ayekauee, souhouee",
        "elebauee",
        "i i ynklaue ekeen't",
        "duee kloole', ",
        "              ",
        "                                                                                                                                                                     "
      ],
      "fol_rules": [
        "Uhnoe ou huekty, i sui oi ukauee",
        "Dayneo vibinnye ayekaue eteerloy. ou i ynktryaue ou troddi aeyldaeou, caukeerdoi doolee?"
      ],
      "fol_conc": "If we don't know what this happens to me or anyone else.",
      "perplexity": [
        5.4655890464782715,
        19.639009475708008
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Uhnoe ou huekty, i sui oi ukauee"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cossernoveisntedaloguein(x)",
        "Gunceyvellonionistetatzingittoufessoriveiltelloctodameidlettuikevirestapusseprofeinsynnelklibielnnyssotterdallamisntaloguein(x)"
      ],
      "fol_consts": [
        "unceyvellonionistetatzingittoufessorineolodameidlettoikevirestapusseprofeinsynnekivka",
        "nonsernoveelldaloguein"
      ],
      "fol_rules": [
        "(Sultrisntedadarehortonicoslemereoplacessoriveiltellolibielupeidlettoikevirestapusseprofeinsynnemistallamissotrottouvelloguein(x))"
      ],
      "fol_conc": "Coussernoveisntedalochromesmeicoslemereoplacessoriveiltellolibielupeidlettoikevirestapusseprofeinsynnemistallamissotrottouvelloguein(x)",
      "perplexity": 10.411721229553223,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Boltin, baouluvian(x)",
        "Boltin, baouluvian(y)"
      ],
      "fol_consts": [
        "$0.ba oucauee."
      ],
      "fol_rules": [
        "_(b) → (Boltin, baouluvian(i))",
        "∀x ((Boltin, baouluvian(j)))",
        "((Boltin, baouluvian(k)) ⊕ ¬(Boltin, baouluvian(d) ∧ Boltin, baouluvian(b)))",
        "∀x (((Boltin, baouluvian($0.ba oucauee.))))"
      ],
      "fol_conc": "_(a, b) → ¬(_(p, a) ⊕ _(o, d) ∧ ((Boltin, baouluvian(i))))",
      "perplexity": 15.278630256652832,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "_(b) → (Boltin, baouluvian(i))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 278
  },
  {
    "id": 175,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Eat(x)",
        "ConsciousAboutHealthAndHabits(x)",
        "GrewUpInHealthConsciousHome(x)",
        "FulfillDailyNutritionalIntake(x)",
        "HasGoodRelationshipWithParent(x, y)",
        "VisitGymAtLeastOnceADay(x)"
      ],
      "fol_consts": [
        "taylor",
        "sam"
      ],
      "fol_rules": [
        "∀x (Eat(x) → ConsciousAboutHealthAndHabits(x))",
        "∀x (GrewUpInHealthConsciousHome(x) → Eat(x))",
        "∀x ((FulfillDailyNutritionalIntake(x)) → GrewUpInHealthConsciousHome(x))",
        "(HasGoodRelationshipWithParent(taylor, sam) ∧ FulfillDailyNutritionalIntake(taylor)) ⊕ ¬(FulfillDailyNutritionalIntake(taylor) ∨ Eat(taylor))",
        " (HasGoodRelationshipWithParent(sam, taylor) → FulfillDailyNutritionalIntake(taylor)) ⊕ ¬(Eat(taylor) ∨ VisitGymAtLeastOnceADay(taylor))",
        "(VisitGymAtLeastOnceADay(x) → ∃y (FulfillDailyNutritionalIntake(y) ∧ HasGoodRelationshipWithParent(sam, y)) ⊕ ¬(Eat(taylor) ∨ FulfillDailyNutritionalIntake(taylor)))",
        "  (¬HasGoodRelationshipWithParent(x, taylor)) ⊕ ¬(Eat(taylor) ∨ FulfillDailyNutritionalIntake(taylor))"
      ],
      "fol_conc": "(¬HasGoodRelationshipWithParent(x, taylor)) ⊕ ¬(VisitGymAtLeastOnceADay(taylor))",
      "perplexity": [
        1.3802436590194702,
        1.1904563903808594
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Conscious(x)",
        "Eats(x, y)",
        "Grewupx(x)"
      ],
      "fol_consts": [
        "taylor",
        "salad",
        "parent",
        "childhoodhome"
      ],
      "fol_rules": [
        "(∀x (Eats(x, salad) → Conscious(x)))",
        "(∀x (∃y ((Grewupx(y)) ∧ Eats(x, salad))))",
        "(∀x ((Fulfills(x) ∧ Grewupx(x))) → (Grewupx(x) ∧ Eats(x, salad)))",
        "(∀x (Goodrelation(parent, x) → Fulfills(x)))",
        "(∀x (Goodrelation(parent, x) → ¬Eats(x, salad)))",
        "(∃y ((Parent(y) ∧ Goodrelation(taylor, y)) ∨ ¬(Grewupchildhoodhome(taylor) ∨ Goodrelation(taylor, parent))))",
        "¬((Grewupchildhoodhome(taylor) ∧ Goodrelation(parent, taylor)) ∨ (Goodrelation(taylor, parent) ∨ Grewupchildhoodhome(taylor)))"
      ],
      "fol_conc": "(∃y ((Parent(y) ∧ Goodrelation(taylor, y)) ∨ ¬(Grewupchildhoodhome(taylor) ∨ Goodrelation(taylor, parent)))) ∨ ∃x (Goodrelation(gym, taylor))",
      "perplexity": 1.8876999616622925,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RegularlyEats salads(x)",
        "HasGoodRelation(x, y)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (RegularlyEats salads(x)) → ∀y ((HasGoodRelation(y, x) ∧ Eat(s, h)))",
        "¬(HasGoodRelation(taylor, y)) ∨ RegularlyEats salads(y)",
        "(∃x (GrowsInHealthfulUpbringing(h) ∧ HasGoodRelation(x, taylor)) → ∀z ((Eat(z, taylor))))",
        "RegularlyEats salads(taylor)",
        "¬(HasGoodRelation(y, x)) ∨ RegularlyEats salads(y)",
        "(HasGoodRelation(l) ∧ GrowsInHealthfulUpbringing(h) → (Eat(s, t)))",
        "∀x ((RegularlyEats salads(x)) ⊕ (∃z (((GrowsInHealthfulUpbringing(z) ∨ HasGoodRelation(y, x)))) ∧ Eat(taylor)))",
        "(HasGoodRelation(l) → ∀t (HasGoodRelation(f) ∨ HasGoodRelation(g)))",
        "¬(Eat(x))",
        "∀x (((RegularlyEats salads(e)) ∨ (∃z ((GrowsInHealthfulUpbringing(z)))) ∧ Eat(taylor)))"
      ],
      "fol_conc": "(GrowsInHealthfulUpbringing(h) ⊕ HasGoodRelation(l, taylor))",
      "perplexity": 15.263699531555176,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Eat/1, Eat/2, HasGoodRelation/1, HasGoodRelation/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Eat/1, Eat/2, HasGoodRelation/1, HasGoodRelation/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 279
  },
  {
    "id": 115,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter is shorter than a man in Michael's class.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Height(x)",
        "CanBlock(y,z)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x ∀y (H(x) → C(y,z))",
        "(Michael ∈ P(Peter))"
      ],
      "fol_conc": "P(Peter)",
      "perplexity": [
        3.9330670833587646,
        3.7550597190856934
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Michael ∈ P(Peter))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, taller)",
        "Can(x, shoot)"
      ],
      "fol_consts": [
        "michael",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(y, x)) → Can(shootfrompersonxbypersonoty)",
        "(Shooter(michael, persona) ∧ Shootable(a, personb)) → (Can(blockshotera) ∨ (Not(blockshotera)))",
        "Is(peter, taller) → Is(peter, shorter)"
      ],
      "fol_conc": "Is(peter, shorter)",
      "perplexity": 5.8693528175354,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Taller/2, Taller/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Taller/2, Taller/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Height(x)",
        "Block(x, y)"
      ],
      "fol_consts": [
        "mike",
        "peter"
      ],
      "fol_rules": [
        "∀x (Height(x) → Block(mike, x))",
        "(Block(pete, mike) ∧ Height(mike) ∨ ¬(Block(pete, mike))) ⊕ ∀x ((Block(mike, y) ∧ Block(y, z)) → Block(mike, z))",
        "∃y (∀z (Height(z) ∧ ∃w (Block(w, y)) → ∀x (Block(x, w))))"
      ],
      "fol_conc": "(Block(pete, mike) ∨ Height(peter) ⊕ ∀x ((Block(mike, x) ∧ Block(x, z)) → Block(mike, z)))",
      "perplexity": 2.9387381076812744,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 280
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PerformIn(x)",
        "AttendAndEngage(x)",
        "ChaperoneDances(x)",
        "StudentAttendingSchool(x)",
        "InactiveDisinterestedMember(x)"
      ],
      "fol_consts": [
        "bonnie",
        "YoungChildOrTeenager(y)",
        "WishFurtherAcademicCareerAndEducationOpportunities(y)"
      ],
      "fol_rules": [
        "∀x (PerformIn(x) → AttendAndEngage(x))",
        "∀x ((PerformIn(x) ⊕ InactiveDisinterestedMember(x)))",
        "∀x (ChaperoneDances(x) → ¬StudentAttendingSchool(x))",
        "∀x (InactiveDisinterestedMember(x) → ChaperoneDances(x))",
        "∀y ((YoungChildOrTeenager(y) ∧ WishFurtherAcademicCareerAndEducationOpportunities(y)) → StudentAttendingSchool(y))"
      ],
      "fol_conc": "(∃x (ChaperoneDances(bonnie) ∨ PerformIn(bonnie))) → ((StudentAttendingSchool(bonnie)) ⊕ InactiveDisinterestedMember(bonnie))",
      "perplexity": [
        1.2432225942611694,
        1.0380806922912598
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x, y)",
        "Attend(y, z)",
        "Veryengaged(z)",
        "Chaperone(w)",
        "Student(t)",
        "Dances(w)",
        "Disinterested(u)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → ∃y (Attend(y, x) ⊕ Veryengaged(z)))",
        "∀z ((Perform(z) ⊕ Disinterested(w)))",
        "∀w (Chaperone(u) → ¬Student(v))",
        "∀u (Disinterested(x) ∧ Chaperone(y))"
      ],
      "fol_conc": "(Youngchild(bonnie) ∨ Teenager(bonnie)) ⊕ Disinterested(w)",
      "perplexity": 1.9824235439300537,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Performs(x, y)",
        "Attend(z)",
        "EngagedWithSchoolEvents(y, z)",
        "ChaperoneHighschoolDances(w, x)"
      ],
      "fol_consts": [
        "bonnie",
        "youngchildorteenager"
      ],
      "fol_rules": [
        "(∀x (Performs(x, y) → Attend(z))) ∧ ¬(Attend(z)) ⊕ Performs(x, z)",
        "(∃y ((ChaperoneHighschoolDances(w, x)) → ¬StudentWhoAttendsTheSchool(y, z)))",
        "∀x (InactiveAndDisinterestedMemberOfCommunity(w) ∧ ChaperoneHighschoolDances(z, y))"
      ],
      "fol_conc": "(∃w ((Performs(bonnie, youngchildorteenager) → StudentWhoAttendsTheSchool(youngchildorteenager, x))) ⊕ ¬(StudentWhoAttendsTheSchool(youngchildorteenager, x) ∨ InactiveAndDisinterestedMemberOfCommunity(z)))",
      "perplexity": 2.7758800983428955,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 281
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y)",
        "DepositRequired(y)",
        "EqualToOneMonthsRent(z)",
        "MoreThanOneMonthsRent(z)",
        "Pet(x)",
        "Cat(x)",
        "ManagedBuilding(y)",
        "RentsApartmentIn(x, y)",
        "MoveWithPet(x, z, y)",
        "MonthlyRent(y, z)",
        "SecurityDeposit(y, w)",
        "LessThanOrEqualTo(a, b)",
        "MoreThan(a, b)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ Allowed(x, y))",
        "∀y (ManagedBuilding(y) → DepositRequired(y))",
        "∀z ((EqualToOneMonthsRent(z)) ⊕ MoreThanOneMonthsRent(z))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "MonthlyRent(olive_garden, $2000)",
        "(RentsApartmentIn(tom, y) ↔ (MoveWithPet(tom, fluffy, y) ∧ SecurityDeposit(y, z) → LessThanOrEqualTo(z, $1500)))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "RentsApartmentIn(tom, olive_garden)",
      "perplexity": [
        1.2470723390579224,
        1.0804589986801147
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allowed(x, y)",
        "Requires(x, y)",
        "Equal(x, y)",
        "More(x, y)",
        "Owns(x, y)",
        "Is(x, y)",
        "Has(x, y)",
        "Will(x, y)"
      ],
      "fol_consts": [
        "pets",
        "deposit",
        "rent",
        "fluffy",
        "tom",
        "cats",
        "olivegarden",
        "monthlyrent",
        "securitydeposit",
        "apartment",
        "managedbuilding",
        "pet",
        "amount",
        "condition"
      ],
      "fol_rules": [
        "∃x ∀y (Pets(x) → Allowed(x, y))",
        "Requires(rent, apartment)",
        "(Equal(securitydeposit, rent) ⊕ More(securitydeposit, rent))",
        "Owns(tom, fluffy)",
        "Is(fluffy, cats)",
        "Is(olivegarden, managedbuilding)",
        "Has(monthlyrent, olivegarden, amount2000)",
        "(Will(tom, apartment) ↔ (Allowed(pet, condition) ∧ More(securitydeposit, amount1500)))",
        "More(amount2000, amount1500)"
      ],
      "fol_conc": "Will(tom, olivegarden)",
      "perplexity": 1.6202417612075806,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AllowsPets(x)",
        "ManagedBuilding(x)",
        "RequiresDeposit(y, x)",
        "EqualTo(a, b)",
        "MoreThan(a, b)",
        "OwnsPet(a, b)",
        "IsPet(c)",
        "AllowsPets(d, e)",
        "RequiresDeposit(f, g)",
        "EqualTo(h, i)",
        "MoreThan(j, k)",
        "WillRent(a, b)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ AllowsPets(x))",
        "∀y ∀z ((ManagedBuilding(z) ∧ RequiresDeposit(y, z)))",
        "∀a ∀b (RequiresDeposit(a, b) → (EqualTo(a, b) ⊕ MoreThan(a, b)))",
        "OwnsPet(tom, fluffy)",
        "IsPet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "EqualTo($2000, olive_garden)",
        "MoreThan($1500, $2000)",
        "WillRent(tom, olive_garden) → (AllowsPets(fluffy, olive_garden))",
        "∀a ∀b ((RequiresDeposit(olive_garden, tom) → (EqualTo($1500, $2000) ⊕ MoreThan($1500, $2000))))"
      ],
      "fol_conc": "WillRent(tom, olive_garden)",
      "perplexity": 1.810172438621521,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 282
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "Composes(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "\n  \t HasAccess(george, program) → Composes(george)\n",
        "\n     WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
      ],
      "fol_conc": "Composes(george)",
      "perplexity": [
        1.8436528444290161,
        1.517404317855835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "(Likes(george) ∧ Has(george, program)) → Compose(george)"
      ],
      "fol_conc": "Compose(george)",
      "perplexity": 1.9979276657104492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantToCompose(y)",
        "CanCompose(x, y)"
      ],
      "fol_consts": [
        "George",
        "George"
      ],
      "fol_rules": [
        "∀x (Likes(x, m) → WantToCompose(x))",
        "∀x (CanCompose(x, p) ∧ WantToCompose(x) → CanCompose(x, p))",
        "∃x (CanCompose(x, y) ∧ Likes(x, m) ∧ WantToCompose(x))"
      ],
      "fol_conc": "CanCompose(George, y)",
      "perplexity": 2.0636627674102783,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 283
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "ZahaHadidStyle(x)",
        "KellyWearstlerStyle(x)"
      ],
      "fol_consts": [
        "zahahadid",
        "kellywearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (ZahaHadidStyle(x) → Timeless(x))",
        "∀x (∃y MassProductDesign(y) ∧ Timeless(y))",
        "∃x (ZahaHadidStyle(x) ⊕ KellyWearstlerStyle(x))",
        "∀x (KellyWearstlerStyle(x) → Evocative(x))",
        "∀x (KellyWearstlerStyle(x) → Dreamy(x))",
        "∀x ((MassProductDesign(x) ∧ Timeless(x)) → (∃y MassProductDesign(y) ∧ Evocative(y)))"
      ],
      "fol_conc": "∃x (MassProductDesign(x) ∧ Timeless(x))",
      "perplexity": [
        1.1905467510223389,
        1.1764590740203857
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max",
        "hadi",
        "wearstler"
      ],
      "fol_rules": [
        "(∀x (Design(x, zaha) → Timeless(x)))",
        "(¬(Mass(x, y)) → Timeless(y))",
        "(Design(zaha, x) ∨ Design(kelly, x))",
        "(∀x (Design(x, wearstler) → Evocative(x)))",
        "(∀x (Design(x, wearstler) → Dreamy(x)))",
        "((¬(Mass(max, y)) ∧ Timeless(y)) → (∃x (Design(x, max) ∧ Mass(x, y) ∧ Evocative(x))))"
      ],
      "fol_conc": "(Mass(max, x) ∧ Evocative(x))",
      "perplexity": 1.92484712600708,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)"
      ],
      "fol_consts": [
        "zaha-hadid",
        "kelly-wearstler",
        "max"
      ],
      "fol_rules": [
        "(∀x (¬(Timeless(zaha-hadid)) ∨ Timeless(max)))",
        "(Timeless(kelly-wearstler) → ¬MassProductDesign(kelly-wearstler))"
      ],
      "fol_conc": "((MassProductDesign(x) ∧ Timeless(y)))",
      "perplexity": 12.510005950927734,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((not (Timeless(Zaha-hadid))) | (Timeless(Max)))\n                          ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 284
  },
  {
    "id": 152,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Palace of Flies was translated from Italian.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)",
        "WrittenIn(x, y)",
        "Use(x, y)",
        "Play(x, y)",
        "Song(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, rust)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "(mac ∨ Use(sam, sam)) ⊢ ∃x Song(x): If Sam uses a Mac or does a project",
        "∀x ((Song(x) ∧ ¬Be(x, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))",
      "perplexity": [
        1.2017226219177246,
        1.623298168182373
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(mac ∨ Use(sam, sam)) ⊢ ∃x Song(x): If Sam uses a Mac or does a project"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Publishes(x, y)",
        "Translated(x, z)",
        "Published(y)",
        "Book(z)"
      ],
      "fol_consts": [
        "vessel",
        "press"
      ],
      "fol_rules": [
        "(∃x (Press(x))) ⊕ (∃y (Vessel(press)) → Published(vessel, y))"
      ],
      "fol_conc": "Translated(palaceofflies)",
      "perplexity": 4.447717666625977,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PublishedByNewVesselPress(x)",
        "IsPublisher(x, y)"
      ],
      "fol_consts": [
        "newvesselepress",
        "neapolitanchronicles",
        "palaceofflies"
      ],
      "fol_rules": [
        "∀x (PublishedByNewVesselPress(x) → IsPublisher(newvesselepress, x))",
        "(IsPublisher(newvesselepress, y)) ∧ (∃x (PublishedByNewVesselPress(x, y))) ⊕ ∃y (PublishedByNewVesselPress(y, newvesselepress))"
      ],
      "fol_conc": "(IsPublisher(newvesselepress, palaceofflies) ∨ IsPublisher(newvesselepress, neapolitanchronicles))",
      "perplexity": 2.24520206451416,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PublishedByNewVesselPress/2, PublishedByNewVesselPress/1.\n\n\nFatal error:  The following symbols are used with multiple arities: PublishedByNewVesselPress/2, PublishedByNewVesselPress/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 285
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "hello, friend",
        "you may see me in your house"
      ],
      "fol_consts": [
        "toward you, my dear, might not be understood by a native English speaker.",
        "either i'ntnue the nudllrytope of my sonece to take my trixtone and get the real untione from me?",
        "you can also see this for us if it seems unfinch.",
        "your language, my darling, may be unveille as well."
      ],
      "fol_rules": [
        "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend.",
        "You can see this for us if that's what makes you sure about me."
      ],
      "fol_conc": "_",
      "perplexity": [
        5.746881008148193,
        17.23499870300293
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Personness(x)",
        "Surtionnousnty(x)",
        "Servinnaes(x)"
      ],
      "fol_consts": [
        "personnezationnoukt"
      ],
      "fol_rules": [
        "(Soytionnousnty(x)) ∧ (Foliculiae(x) ∧ Criinnaes(x))"
      ],
      "fol_conc": "Crylitnatty(x)",
      "perplexity": 9.4246187210083,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person.eviue(n)"
      ],
      "fol_consts": [
        "Cumderein",
        "Cumderein"
      ],
      "fol_rules": [
        "∀x (Person.eviue(r)) ∧ ¬(Person.eviue(k) → (Person.eviue(k)))",
        "∃x ((Person.eviue(n) ∨ Person.eviue(o) ∨ Person.eviue(i)))"
      ],
      "fol_conc": "Person.eviue(d) ⊕ (Person.eviue(k) → ¬((Person.eviue(n) ∨ Person.eviue(o))))",
      "perplexity": 8.925378799438477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\n((Person.eviue(d)) & not ((Person.eviue(k)) -> (not ((Person.eviue(n)) | (Person.eviue(o)))))) | (not (Person.eviue(d)) & ((Person.eviue(k)) -> (not ((Person.eviue(n)) | (Person.eviue(o))))))\n        ^"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 286
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(y, z)",
        "Mammal(z)",
        "Animal(w)",
        "SymptomOf(virus, symptom)",
        "HasSymptoms(animal, symptomsList)"
      ],
      "fol_consts": [
        "Monkeypox",
        "MonkeypoxVirus",
        "Humans",
        " glu"
      ],
      "fol_rules": [
        "InfectiousDisease(Monkeypox)",
        "CausedBy(Monkeypox, MonkeypoxVirus)",
        "OccursIn(MonkeypoxVirus, Humans)",
        "Mammal(Humans) ∧ Animal(Humans)",
        "∀x (SymptomOf(x, fever))",
        "∃y HasSymptoms(y, [fever, headache])"
      ],
      "fol_conc": "SymptomOf(MonkeypoxVirus, coughing)",
      "perplexity": [
        1.891088843345642,
        1.1538031101226807
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Caused(y)",
        "Occurs(z)",
        "Symptons(x)",
        "Infective(x)",
        "Feel(tired)",
        "Feels(x)",
        "Glu(y)"
      ],
      "fol_consts": [
        "monkeypox",
        "virus"
      ],
      "fol_rules": [
        "∀x (Is(monkeypox, infectious))",
        "∃y (Caused(virus) ∧ Occurs(y) ∧ Is(y, monkeypox))",
        "∀z ((Occurs(z) → Infective(z)))",
        "∀w (Mammal(w) → Animal(w))",
        "Human(human)",
        "(Symptons(monkeypox) → (Feels(x) ∧ Glu(y)))"
      ],
      "fol_conc": "∃x ((Symptons(monkeypox) → Coughs(x)))",
      "perplexity": 2.5654892921447754,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Disease(x)",
        "CausedBy(y, x)",
        "OccursIn(z, y)",
        "IsAAnimal(w)",
        "Mammal(v)",
        "Symptons(u)",
        "Fever(s)",
        "Fever(t)",
        "Symptons(v)",
        "Fever(r)",
        "CausedBy(g, h)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "∀x (Disease(x))",
        "CausedBy(monkeypoxvirus, monkeypox)",
        "OccursIn(human, monkeypoxvirus)",
        "IsAAnimal(humans)",
        "Mammal(mamals)",
        "Symptons(fever)",
        "Symptons(headache)",
        "Symptons(restlessness)",
        "Fever(tired)"
      ],
      "fol_conc": "∃x (Disease(x))",
      "perplexity": 4.442147731781006,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fever/1, Fever/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fever/1, Fever/0"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 287
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y)",
        "Deposits(y, z)",
        "Pets(x, y)"
      ],
      "fol_consts": [
        "Tom",
        "Fluffy",
        "The Olive Garden"
      ],
      "fol_rules": [
        "∀x (Allowed(x, y)) → Dependent(x) ∧ IsManaged(z)],  "
      ],
      "fol_conc": "∃y Deposits(y) ∧ IsAllowing(Deposits(y)) ∨ Rent(Tom)",
      "perplexity": [
        2.580653667449951,
        4.4491682052612305
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Allowed(x, y)) → Dependent(x) ∧ IsManaged(z)],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python",
        "rust",
        "perfect",
        "fluffy"
      ],
      "fol_rules": [
        "(∀x (Drink(x)) → Dependent(x))",
        "(∃y (Drinks(y))) ∨ (∃z (Jokes(z))) ∨ ((Unaware(rina) ∧ ¬(Student(sam)))) ⊕ (¬(Dependent(rina) ∧ Student(sam)) → (Dependent(rina) ∧ Student(sam)) ⊕ ¬(Dependent(rina) ∨ Student(sam)))",
        "((∀x (Drink(x) ∧ Write(x, python))) ∧ ((Drinks(rina) ∨ Jokes(rina)) ∧ Fluffy(rina)))"
      ],
      "fol_conc": "(Fluffy(rina) ⊕ Perfect(rina) → Sam(sam))",
      "perplexity": 2.396759510040283,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DependsOn(x, y)",
        "IsPet(x)",
        "IsPet(y)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∀x (DependsOn(rinumtom, x)) → (∃y (Rent(x, rinumtom))) ∨ ∃z ((Rent(z, rinitom) ∧ DependsOn(y, z)))",
        "(IsPet(renumtom)) ⊕ IsPet(fluffy)"
      ],
      "fol_conc": "∀x (Rent(rinumtom, x) → (∃y (DependsOn(y, x))) ∨ ∃z ((Rent(z, rinumtom) ∧ DependsOn(x, z))))",
      "perplexity": 3.1676363945007324,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 288
  },
  {
    "id": 151,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Harry Potter was published by New Vessel Press.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "PublishingHouse(x)",
        "SpecializesInTranslationsFrom(y, z)",
        "PublishedBookBy(x, y)",
        "WrittenInEnglish(z)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies"
      ],
      "fol_rules": [
        "∀x (PublishingHouse(x) → SpecializesInTranslationsFrom(Italian, English))",
        "∀y (PublishedBookBy(new_vessel_press, y) → WrittenInEnglish(y))",
        "PublishedBookBy(new_vessel_press, neapolitan_chronicles)",
        "TranslatedFromItalianTo(neapolitan_chronicles)",
        "PublishedBookBy(new_vessel_press, palace_of_flies)"
      ],
      "fol_conc": "∃x (PublishedBookBy(new_vessel_press, x))",
      "perplexity": [
        1.8612903356552124,
        1.079069972038269
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Specializes(x, y)",
        "Published(x, z)",
        "Translated(y, x)",
        "In(z)"
      ],
      "fol_consts": [
        "newvesselpress",
        "neapolitanchronicles",
        "palaceofflies",
        "harrypotter"
      ],
      "fol_rules": [
        "∀x (Specializes(newvesselpress, x))",
        "∃z ∀y ((Published(y, z) → In(z)))"
      ],
      "fol_conc": "Published(harrypotter, newvesselpress)",
      "perplexity": 2.138207197189331,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PublishesBook(x)",
        "PublishesBook(x, y)",
        "Is(x, y)",
        "WrittenIn(y, z)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies"
      ],
      "fol_rules": [
        "(∀x (PublishesBook(new_vessel_press, x))) → ∃y ((Is(x, y)))",
        "(∀x (((PublishesBook(y, z) ∧ Is(z, neapolitan_chronicles)) ⊕ (WrittenIn(neapolitan_chronicles, y)))))"
      ],
      "fol_conc": "(PublishesBook(new_vessel_press, x) → Is(x, new_vessel_press))",
      "perplexity": 2.554863452911377,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 289
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": [
        1.0449811220169067,
        1.0207343101501465
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": 1.1268501281738281,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) ↔ Rabbit(x) ∨ Animal(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Animal(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": 1.2171229124069214,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 290
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "DonatedTo(x, y)"
      ],
      "fol_consts": [
        "picuris-mountains",
        "juan-de-onate"
      ],
      "fol_rules": [
        "∀x (LocatedIn(x, new-mexico) ∨ LocatedIn(x, texas)) ⊕ MountainRange(x)",
        "Visited(juan-de-onate, picuris-mountains)",
        "∀x (LocatedIn(picuris-mountains, x) → DonatedTo(x, Harding-Pegmatite-Mine})",
        "¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∀y (LocatedIn(y, x) → DonatedTo(y, Harding-Pegmatite-Mine)))",
        "InTexas(picuris-mountains )  ∨   Visited(juan-de-onate,picuris-mountains )"
      ],
      "fol_conc": "InTexas(picuris-mountains )  ∨   Visited(juan-de-onate,picuris-mountains )",
      "perplexity": [
        1.4914923906326294,
        1.2495085000991821
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (LocatedIn(picuris-mountains, x) → DonatedTo(x, Harding-Pegmatite-Mine})"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x, y)",
        "Range(x)",
        "Located(x, y)",
        "Donated(x)",
        "Visited(x)",
        "Person(y)",
        "Name(y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "deonate"
      ],
      "fol_rules": [
        "(Location(picuris, newmexico)) ⊕ (Location(picuris, texas))",
        "(Juan(y) ∧ Visited(juan, picuris))",
        "(Donated(x) → Location(x, picuris))",
        "¬(∃x (Mountain(x, texas) ∧ Donated(x)))"
      ],
      "fol_conc": "Visited(juan, texy)",
      "perplexity": 1.8999367952346802,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x, y)",
        "IsAMountain_range_of(z)",
        "MountainRange(y)"
      ],
      "fol_consts": [
        "texas",
        "juan",
        "picurismountains",
        "newmexico"
      ],
      "fol_rules": [
        "(∃z (MountainRange(texas, z))) → (∀y ((IsAMountain_range_of(z)) ⊕ IsAMountain_range_of(y)))",
        "(¬(MountainRange(juan, y))) ∧ MountainRange(picurismountains, juan)",
        "∃x (MountainRange(x, picurusmounatsinfsy) → ¬IsAMountain_range_of(donation))",
        "(∀z ((IsAMountain_range_of(z)))) ⊕ IsAMountain_range_of(texas)",
        "(¬(MountainRange(juan))) ∧ (∃x (MountainRange(x, picurismountains) → ¬((IsAMountain_range_of(donation)) ∨ (IsAMountain_range_of(yy)))))",
        "∀z ((MountainRange(z)) ⊕ IsAMountain_range_of(texas))"
      ],
      "fol_conc": "(¬(MountainRange(juan, y))) ∧ (IsAMountain_range_of(y) ∨ ¬(MountainRange(x)))",
      "perplexity": 8.107799530029297,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: MountainRange/1, MountainRange/2.\n\n\nFatal error:  The following symbols are used with multiple arities: MountainRange/1, MountainRange/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 291
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (Digital(x) → Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "∃x (1984 → HardcoverBook(x))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": [
        1.4220527410507202,
        1.033126711845398
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (1984 → HardcoverBook(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)"
      ],
      "fol_consts": [
        "streaming",
        "text",
        "analog",
        "hardcover",
        "book"
      ],
      "fol_rules": [
        "(¬Digital(x)) → (Analog(x))",
        "∀x (Printed(x) ∧ Analog(x))",
        "All(x) ∧ Streaming(x)",
        "If(hbd, hardover, text) ∧ Hbd(text)",
        "If(s, streaming, book) → If(book, hardcover, s)"
      ],
      "fol_conc": "Streaming(s)",
      "perplexity": 2.651956081390381,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isDigital(x)",
        "isAnalog(x)",
        "isPrintedText(x)",
        "isAnalog(x)",
        "isAnalog(x)"
      ],
      "fol_consts": [
        "1984",
        "streaming service"
      ],
      "fol_rules": [
        "∀x (isDigital(x) → ¬isAnalog(x))",
        "∀x (isPrintedText(x) → isAnalog(x))",
        "∀x (isAnalog(x) ∧ isDigital(x))",
        "(isAnalog(1984) ∨ isPrintedText(1984))"
      ],
      "fol_conc": "isAnalog(1984)",
      "perplexity": 1.9075596332550049,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 292
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y)",
        "Deposits(y, z)",
        "Pets(x, y)"
      ],
      "fol_consts": [
        "Tom",
        "Fluffy",
        "The Olive Garden"
      ],
      "fol_rules": [
        "∀x (Allowed(x, y)) → Dependent(x) ∧ IsManaged(z)],  "
      ],
      "fol_conc": "∃y Deposits(y) ∧ IsAllowing(Deposits(y)) ∨ Rent(Tom)",
      "perplexity": [
        2.580653667449951,
        4.4491682052612305
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Allowed(x, y)) → Dependent(x) ∧ IsManaged(z)],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Dependent(x)",
        "Drinks(x)",
        "Jokes(x)",
        "Unaware(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "rina",
        "sam",
        "mac",
        "python",
        "rust",
        "perfect",
        "fluffy"
      ],
      "fol_rules": [
        "(∀x (Drink(x)) → Dependent(x))",
        "(∃y (Drinks(y))) ∨ (∃z (Jokes(z))) ∨ ((Unaware(rina) ∧ ¬(Student(sam)))) ⊕ (¬(Dependent(rina) ∧ Student(sam)) → (Dependent(rina) ∧ Student(sam)) ⊕ ¬(Dependent(rina) ∨ Student(sam)))",
        "((∀x (Drink(x) ∧ Write(x, python))) ∧ ((Drinks(rina) ∨ Jokes(rina)) ∧ Fluffy(rina)))"
      ],
      "fol_conc": "(Fluffy(rina) ⊕ Perfect(rina) → Sam(sam))",
      "perplexity": 2.396759510040283,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "DependsOn(x, y)",
        "IsPet(x)",
        "IsPet(y)",
        "Rent(x, y)"
      ],
      "fol_consts": [
        "tom",
        "fluffy",
        "olivegarden"
      ],
      "fol_rules": [
        "∀x (DependsOn(rinumtom, x)) → (∃y (Rent(x, rinumtom))) ∨ ∃z ((Rent(z, rinitom) ∧ DependsOn(y, z)))",
        "(IsPet(renumtom)) ⊕ IsPet(fluffy)"
      ],
      "fol_conc": "∀x (Rent(rinumtom, x) → (∃y (DependsOn(y, x))) ∨ ∃z ((Rent(z, rinumtom) ∧ DependsOn(x, z))))",
      "perplexity": 3.1676363945007324,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 293
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "FromEarth(y)",
        "Extraterrestrial(x)",
        "Human(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∃y (FromEarth(y) ∧ Alien(y))",
        "∀x ((Extraterrestrial(x) ∨ Human(x)))"
      ],
      "fol_conc": "∃marvin( Alien(marvin)) Marvin is extraterrestrial ",
      "perplexity": [
        2.1263997554779053,
        1.1773886680603027
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃marvin( Alien(marvin)) Marvin is extraterrestrial"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀y ((From(y, mars) → Alien(marvin)))",
        "∀z (Extraterrestrial(z) ∧ Human(z) ⊕ ¬Human(z))",
        "∀w (From(w, earth) → Human(w))"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 1.513535499572754,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromMars(x)",
        "Human(x)",
        "FromMars(x)",
        "FromMars(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∃x ((Extraterrestrial(x) ∧ Human(x)))",
        "(FromMars(marvin) → Alien(marvin))",
        "(∀x (Human(x) → ¬Extraterrestrial(x)))",
        "¬(FromMars(marvin) ∧ FromMars(marvin))",
        "¬(FromMars(marvin)) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 2.4610416889190674,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 294
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "MostActiveInMajorTennis(x)",
        "LostToIgaSwiatek(x, y)",
        "AtRolandGarros2022(x)",
        "FemaleTennisPlayer(x)"
      ],
      "fol_consts": [
        "igaswietek",
        "rafaelnadal"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → MostActiveInMajorTennis(x))",
        "∀y ((LostToIgaSwiatek(y, x)) → RankedHighly(y))",
        "∀x (FemaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToIgaswietek(x, x))",
        "(AtRolandGarros2022(z), FemaleTennisPlayer(w)) ⊕ (AtRolandGarros2022(y), MaleTennisPlayer(x))",
        "∀x (MaleTennisPlayer(x) ∧ AtRolandGarros2022(x) → LostToRafaelNadal(y, x))",
        "(RankedHighly(z)) ⊕ ((LostToRafaelNadal(CocoGauff(w), y)) → ¬(MaleTennisPlayerAtRolandGarros2022(cogauf)))"
      ],
      "fol_conc": "LostToRafaelNadal(CocoGauff, rafaelnadal)",
      "perplexity": [
        1.3956094980239868,
        1.1458851099014282
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(AtRolandGarros2022(z), FemaleTennisPlayer(w)) ⊕ (AtRolandGarros2022(y), MaleTennisPlayer(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(y, z)",
        "Lost(x, y)",
        "Player(x)",
        "Female(x)",
        "Male(x)"
      ],
      "fol_consts": [
        "igasz",
        "rafanadal"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → ∃y (Active(y, x)))",
        "∀x (Lost(x, igasz) → Ranked(x))",
        "∀x ((Female(x) ∧ Player(x)) → Lost(x, igasz))",
        "(∃x (Female(x) ∧ Player(x)) ⊕ ∃y (Male(y) ∧ Player(y)))",
        "∀z ((Male(z) ∧ Player(z)) → Lost(z, rafanadal))"
      ],
      "fol_conc": "Lost(coco, rafanadal)",
      "perplexity": 1.576776385307312,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RankedHighlyByWTA(x)",
        "LostTo(x, y)",
        "PlayerAtRolandGarros2022(x, y)",
        "FemaleTennisPlayer(y)"
      ],
      "fol_consts": [
        "coco_gauff",
        "iga_swiatek"
      ],
      "fol_rules": [
        "∀x (RankedHighlyByWTA(x) → ∃y (PlayerAtRolandGarros2022(x, y)))",
        "∀x (LostTo(iga_swiatek, x) → RankedHighlyByWTA(x))",
        "∀x ((FemaleTennisPlayer(y) ∧ PlayerAtRolandGarros2022(x, y)) → LostTo(iga_swiatek, y))",
        "(FemaleTennisPlayer(y) ∨ MaleTennisPlayer(z))"
      ],
      "fol_conc": "LostTo(coco_gauff, rafael_nadal)",
      "perplexity": 1.6510064601898193,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 295
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "IsPartOf(y, z)",
        "Island(z)"
      ],
      "fol_consts": [
        "barutinCove",
        "snowIsland",
        "greenwichIsland",
        "deceptionIsland",
        "southShetlandIslands",
        "antarctica",
        "bulgaria",
        "barutinBulgarianSettlement"
      ],
      "fol_rules": [
        "NamedAfter(barutinCove, barutinBulgarianSettlement)",
        "LocatedIn(barutinCove, snowIsland)",
        "∀x (Island(x) → (LocatedIn(snowIsland, x) ⊕ LocatedIn(greenwichIsland, x) ⊕ LocatedIn(deceptionIsland, x)))",
        "IsPartOf(southShetlandIslands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "∃x (Island(x) ∧ NamedAfter(x, barutinBulgarianSettlement))",
      "perplexity": [
        1.169869303703308,
        1.0510454177856445
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Includes(z, x)"
      ],
      "fol_consts": [
        "barutin",
        "cove",
        "bulgarian",
        "settlement",
        "snowisland",
        "greenwichisland",
        "deceptionisland",
        "antarctica",
        "southshetlands"
      ],
      "fol_rules": [
        "Named(cove, bulgarian)",
        "Located(cove, snowisland)",
        "Includes(southshetlands, snowisland) ∧ Includes(southshetlands, greenwichisland) ∧ Includes(southshetlands, deceptionisland)",
        "Located(southshetlands, antarctica)",
        "(Located(x, y) ∧ Located(y, z)) → Located(x, z)"
      ],
      "fol_conc": "∃z (Named(z, bulgarian) ∧ Located(z, antarctica))",
      "perplexity": 1.2905948162078857,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Includes(z, x)"
      ],
      "fol_consts": [
        "BarutinCove",
        "BulgarianSettlement",
        "SnowIsland",
        "SouthShetlandIslands",
        "GreenwichIsland",
        "DeceptionIsland",
        "Antarctica"
      ],
      "fol_rules": [
        "NamedAfter(BarutinCove, BulgarianSettlement)",
        "LocatedIn(BarutinCove, SnowIsland)",
        "Includes(SouthShetlandIslands, SnowIsland) ∧ Includes(SouthShetlandIslands, GreenwichIsland) ∧ Includes(SouthShetlandIslands, DeceptionIsland)",
        "LocatedIn(SouthShetlandIslands, Antarctica)",
        "(LocatedIn(Antarctica, BulgarianSettlement) ∧ LocatedIn(BulgarianSettlement, Antarctica)) → LocatedIn(BarutinCove, Antarctica)"
      ],
      "fol_conc": "∃x (LocatedIn(Antarctica, BulgarianSettlement) ∨ NamedAfter(BarutinCove, BulgarianSettlement))",
      "perplexity": 1.5695061683654785,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 296
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Rose(x)",
        "GivenOutOnTV(x, y)",
        "OnTheBachelor(x)",
        "PortraysPeopleOfRealLife(x)",
        "IsRealityTvShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eightpm",
        "portrait",
        "rises"
      ],
      "fol_rules": [
        "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])",
        "∀x ((PortraysPeopleOfRealLife(x) ∨ ¬IsRealityTvShow[portrait])) (∀y (Portrait[y] ⇒ IsRealityTVShw[x])]",
        "∃x (¬IsRealityTivsHow[x])"
      ],
      "fol_conc": "∃x ((GivenOutOnTv[rise, monday] ⊕ 8pm) ∧ Portrayt[portrait] ⊗ IsRealityTVShow[x]) ⇒ (BreakingBavd[x] ∧ GivenOutOnTvs[rises, Monday] ⊕ 8pM)",
      "perplexity": [
        2.5405304431915283,
        1.2964909076690674
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Given(x, y)",
        "On(x, z, w)",
        "Is(a, b)"
      ],
      "fol_consts": [
        "roses",
        "thebachelor",
        "tv",
        "breakingingbad",
        "monday",
        "bachelorette",
        "rose",
        "realitytvs",
        "badgesontherose",
        "eighthpmmonday",
        "realpeopleshows",
        "badshowsontherealpeople"
      ],
      "fol_rules": [
        "∃x (On(x, monday, ighthpmmonday) ∧ Given(x, tv))",
        "∀x (Given(x, tv) → On(x, thebachelor))",
        "∀x (∃y (Is(y, x) ∧ Is(a, b) ∧ Realpeopleshows(y, a))) → Realitytvs(y)",
        "¬Badgesontherealpeopleshows(badshowsontherealpeople, badshowsontherealtv)",
        "Given(rose, tv) ∧ On(rose, monday, ighthpmmonday) → ∃x (Song(x) ∧ Badgesontherose(x))",
        "∀a (∃b (Is(b, a) ∧ ¬Be(b, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "Badshowsontherealpeopleshows(breakingingbad, rose)",
      "perplexity": 2.244359016418457,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: On/2, On/3.\n\n\nFatal error:  The following symbols are used with multiple arities: On/2, On/3"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GivenOut(x, y)",
        "OnTV(y)",
        "OnTV(n)",
        "Bachelor(z)",
        "Portrays(t, u)",
        "Bachelor(u)"
      ],
      "fol_consts": [
        "roses",
        "roses",
        "badger"
      ],
      "fol_rules": [
        "(∃y (GivenOut(roses, y)) ∧ OnTV(y))",
        "(OnTV(r) → ∀z (Bachelor(z) ⊕ Portrays(t, u)))",
        "((Portrays(l, t) ∨ Portrays(k, l)) ∧ ∀x ((Bachelor(x) → (Bachelor(u)))))",
        "(∃t (∀l (((GivenOut(roses, r) ∧ OnTV(y) ⊕ GivenOut(z))) ∨ ¬OnTV(w))))",
        "(¬Portrays(l, k)) ∧ ∀x ((Portrays(k, u)) → (Bachelor(u) ∨ Portrays(m, l)))",
        "∀y (((Bachelor(x) ∧ OnTV(y)))) ⊕ Bachelor(z)",
        "((GivenOut(badger, r)) ⊕ ∃t (∀l ((Portrays(l, t)) ∧ GivenOut(roses, y)) ∨ Portrays(k, l)))"
      ],
      "fol_conc": "∃x (Bachelor(x) ∧ OnTV(y))",
      "perplexity": 11.6235933303833,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GivenOut/1, GivenOut/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GivenOut/1, GivenOut/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 297
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Mammal(x) → Monkey(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wing(x))",
        "(¬Fly(rock) ∧ ¬Bird(rock)) → (¬Fly(rock) ∧ ¬Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0420074462890625,
        1.2327877283096313
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)",
        "Fly(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wing(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.1422373056411743,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)"
      ],
      "fol_consts": [
        "rock",
        "rock"
      ],
      "fol_rules": [
        "Mammal(x) → Animal(x)",
        "∀x (Monkey(x) → Mammal(x))",
        "Animal(x) ⊕ Bird(x)",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "Fly(x) → Wing(x)",
        "(Fly(rock) ∨ Bird(rock)) ∧ ¬(Fly(rock) ⊕ Bird(rock)) → ((¬Fly(rock)) ∨ (¬Breathe(rock)))"
      ],
      "fol_conc": "Mammal(rock)",
      "perplexity": 2.675429582595825,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 298
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "DesignStyle(x, y)"
      ],
      "fol_consts": [
        "max",
        "kelly",
        "zaha"
      ],
      "fol_rules": [
        "∀x (DesignStyle(zaha, x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        "(DesignStyle(zaha, x) ⊕ DesignStyle(kelly, x))",
        "∀x (DesignStyle(kelly, x) → Evocative(x))",
        "∀x (DesignStyle(kelly, x) → Dreamy(x))",
        "(DesignStyle(max, x) ∧ Timeless(x)) → (MassProduct(x) ∧ Evocative(x))"
      ],
      "fol_conc": "∃x (DesignStyle(max, x) → (Evocative(x) ⊕ Dreamy(x)))",
      "perplexity": [
        1.0870299339294434,
        1.1955918073654175
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Design(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x, zaha) → Timeless(x))",
        "¬Mass(x) → ¬Timeless(x)",
        "Design(x, zaha) ⊕ Design(x, kelly)",
        "∀x (Design(x, kelly) → Evocative(x))",
        "∀x (Design(x, kelly) → Dreamy(x))",
        "Timeless(x) → (Mass(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Evocative(x) ⊕ Dreamy(x)",
      "perplexity": 1.1647188663482666,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 299
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "Composes(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "\n  \t HasAccess(george, program) → Composes(george)\n",
        "\n     WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
      ],
      "fol_conc": "Composes(george)",
      "perplexity": [
        1.8436528444290161,
        1.517404317855835
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "WantsToCompose(george) and HasAccess(george, program) → Composes(george)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x)",
        "Wants(x)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "(Likes(george) ∧ Has(george, program)) → Compose(george)"
      ],
      "fol_conc": "Compose(george)",
      "perplexity": 1.9979276657104492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantToCompose(y)",
        "CanCompose(x, y)"
      ],
      "fol_consts": [
        "George",
        "George"
      ],
      "fol_rules": [
        "∀x (Likes(x, m) → WantToCompose(x))",
        "∀x (CanCompose(x, p) ∧ WantToCompose(x) → CanCompose(x, p))",
        "∃x (CanCompose(x, y) ∧ Likes(x, m) ∧ WantToCompose(x))"
      ],
      "fol_conc": "CanCompose(George, y)",
      "perplexity": 2.0636627674102783,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 300
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)",
        "WrittenIn(x, y)",
        "Use(x, y)",
        "Play(x, y)",
        "Song(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "¬Use(mac)",
        "∀y ∀z Song(z ∧ z ≠ perfect(y)) → None"
      ],
      "fol_conc": "Sam or Bonnie attends.",
      "perplexity": [
        2.283777952194214,
        1.850750207901001
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y ∀z Song(z ∧ z ≠ perfect(y)) → None"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attend(x)",
        "Engaged(x, y)",
        "Performing(x, y)",
        "Chaperone(y, z)",
        "Student(z)"
      ],
      "fol_consts": [
        "bonnie",
        "talentshow",
        "schoolevent",
        "dance",
        "student"
      ],
      "fol_rules": [
        "∀x (Attend(x) → Student(student))",
        "(Performs(performing, x) ∧ Engaged(engaged, y)) ∨ ∃x (Student(z))",
        "(Chaperone(chaperone, z) ∧ Attend(attend)) ∨ ¬(Attends(talentshow, chaperone) ∨ Attends(talentshow, dance) ∨ Attends(schoolevent, student))"
      ],
      "fol_conc": "Attend(bonnie) → (Student(bonnie) ∧ Engaged(bonnie, talentshow)) ∨ ∃x (School(x) ∧ Student(attends, x))",
      "perplexity": 3.1438798904418945,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Attends(x, y)",
        "EngagedInEvents(x, y)",
        "Attends(x, y)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (Attends(x, z)) → (∃y ((Attends(y, x) ∧ EngagedInEvents(y, z))))",
        "(Attends(r) ∨ ¬EngagedInEvents(r)) ⊕ (¬(Attends(s) ∨ EngagedInEvents(s)))"
      ],
      "fol_conc": "∀x (Attends(x, r) ∨ Attends(x, s) → ∃y ((Attends(y, x) ∧ EngagedInEvents(y, z))))",
      "perplexity": 3.9329891204833984,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: EngagedInEvents/1, EngagedInEvents/2, Attends/1, Attends/2.\n\n\nFatal error:  The following symbols are used with multiple arities: EngagedInEvents/1, EngagedInEvents/2, Attends/1, Attends/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 301
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "EarthCitizen(x)"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        ",",
        "∀x (FromMars(x) → Alien(x))",
        ", ∀x ¬(Extraterrestrial(x) ∧ Human(x)),  ",
        ", ∀x (EarthCitizen(x) → Human(x)) ",
        ",",
        "¬(FromMars(Marvin) ∧ EarthCitizen(Marvin))",
        ", ¬(EarthCitizen(Marvin) → FromMars(Marvin))"
      ],
      "fol_conc": "¬(Human(Marvin) ∨ FromMars(Marvin))",
      "perplexity": [
        1.9314908981323242,
        1.4980099201202393
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ","
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x)) → ∃y (Extraterrestrial(y))",
        "(From(marve, earth) → Alien(marve))",
        "¬(Alien(x) ∧ Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬(From(marvin, earth)) → Alien(marvin)",
        "∃y (Extraterrestrial(y) ∧ ¬From(marvin, y))"
      ],
      "fol_conc": "¬(Human(marve) ∨ From(marve, mars))",
      "perplexity": 1.3244824409484863,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isAlien(x)",
        "fromMars(y)",
        "human(x)",
        "fromMars(x)"
      ],
      "fol_consts": [
        "Marvin",
        "Earth",
        "Mars"
      ],
      "fol_rules": [
        "∀x (isAlien(x) → isAlien(x))",
        "(fromMars(x) ∧ isAlien(x))",
        "¬(isAlien(x) ∧ human(x))",
        "∀x (human(x) → fromMars(x))",
        "¬(fromMars(Marvin) ∧ fromMars(Earth))"
      ],
      "fol_conc": "¬(human(Marvin) ∨ fromMars(Marvin))",
      "perplexity": 1.6519927978515625,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 302
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "WantLongVacation(x)",
        "LoveMost(x, y)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x ((Student(x) ∧ WantLongVacation(x)) → LoveMost(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(mia, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": [
        1.0444223880767822,
        1.018232822418213
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Favorite(x, y)",
        "Want(x, y)",
        "Long(y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x (Want(x, y) ∧ Long(y) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, x) ↔ Favorite(emma, x))",
        "Want(james, y) ∧ Long(y)"
      ],
      "fol_conc": "Favorite(james, fall)",
      "perplexity": 1.1837671995162964,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Season(x)",
        "LongVacationWanted(x)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x) → (¬Season(y)) ⊕ Season(y))",
        "∀x ((LongVacationWanted(x)) → FavoriteSeason(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(emma, x) ↔ FavoriteSeason(mia, x))",
        "LongVacationWanted(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": 1.4297080039978027,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 303
  },
  {
    "id": 145,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Person(x, y)",
        "Teacher(x, y)"
      ],
      "fol_consts": [
        "Jerry",
        "Rose"
      ],
      "fol_rules": [
        "∀x Human(x)",
        "Why are humans?",
        "No one is a teacher",
        "Teaches Jerry and Rose"
      ],
      "fol_conc": "∃y Person(y,Jerry)",
      "perplexity": [
        3.687268018722534,
        4.209045886993408
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Why are humans?"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Teaches(y, z)",
        "Is(a)",
        "Young(z)",
        "Does(x)",
        "Be(teacher)",
        "Do(x)",
        "Teacher(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "(Student(jerry) ∧ Human(jerry)) → (Does(jerry))",
        "(Teaches(jerry)) ∨ (Is(a))",
        "(Young(rose))",
        "(Teacher(younger) ∨ Younger(x, z))",
        "¬(Be(teacher, x))",
        "Not(beassistant, manager)",
        "Does(friend)",
        "Be(also)"
      ],
      "fol_conc": "Does(jerry)",
      "perplexity": 9.110209465026855,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "Human(y)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "(Human(jerry) ∧ ¬(Human(rose))) ⊕ ¬(Human(jerry) ∨ ¬(Human(rose)))"
      ],
      "fol_conc": "¬(Human(jerry) ∨ ¬(Human(rose)))",
      "perplexity": 2.750972270965576,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 304
  },
  {
    "id": 131,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "HasWedding(x)",
        "TravelToParisForHoneymoon(x)",
        "OccursInJuly(x)",
        "IsWellAttended(x)",
        "Child(x, y)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (HasWedding(x) → ∃y (Child(y, x)) )",
        "∀x (TravelToParisForHoneymoon(x) → HasWedding(x))",
        "∀x ((OccursInJuly(x)) → TravelToParisForHoneymoon(x))",
        "∃x (IsWellAttended(x) ∧ OccursInJuly(x)) ",
        "¬(HasChild(john)) → (∨ (¬TravelToParisForHoneymoon(john) ∨ ¬HasWedding(john)))",
        "∀x ((IsWellAttended(x) ∧ HasWedding(x)) → (∃y (OccursInJuly(y)) ∨ ¬TravelToParisForHoneymoon(john)))"
      ],
      "fol_conc": "¬(IsWellAttended(x) ∧ HasWedding(x)) ∨ ¬ TravelToParisForHoneymoon (john)",
      "perplexity": [
        1.5327892303466797,
        1.1503568887710571
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "¬(HasChild(john)) → (∨ (¬TravelToParisForHoneymoon(john) ∨ ¬HasWedding(john)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Haschild(x, y)",
        "Wedding(x)",
        "Travelto(x, z)",
        "Honeymoon(z)",
        "Month(july)",
        "Attended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Haschild(x, urs1) → Haschild(x, urs2))",
        "∀x (Travelto(x, paris) ∧ Honeymoon(z) → Wedding(x))",
        "∀x (Wedding(x) ∧ Month(july) → Travelto(x, paris))",
        "(Attended(urs3) ∧ ∃x (Wedding(x) ∧ Attended(x))) ⊕ ¬(Month(july))",
        "Haschild(john, urs1) → ¬Travelto(john, paris) ∧ ¬Wedding(john)",
        "∀x (Wedding(x) ∧ Attended(x) → (∃z (Wedding(z) ∧ Month(july)) ∨ ¬Exists(z, z)))"
      ],
      "fol_conc": "(Attended(urs3) ∧ Wedding(urs4)) ⊕ Travelto(john, paris)",
      "perplexity": 1.9083715677261353,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "WeddingOf(x, y)",
        "HasChild(y, x)"
      ],
      "fol_consts": [
        "john",
        "july",
        "july"
      ],
      "fol_rules": [
        "(∀x (Person(x))) → ((¬Person(x)) ∧ HasChild(john, x))",
        "(∃z ∃w (∀v (((WeddingOf(v) ∨ WeddingOf(w)) ⊕ Person(z)))) → ∀y ((HasChild(y, john)) ↔ ¬Travel(f, w)))",
        "(∀x (WeddingOf(x, y) ∧ Travel(t, x) ∧ HasChild(john, t) ∨ ¬Person(john) ∨ WeddingOf(w, july)))",
        "¬((HasChild(z, z) → ((HasChild(y)) ⊕ Person(n))))",
        "(∃y (WeddingOf(v, y) ∧ AttendedBy(x) ∧ HasChild(john, t) ∨ ¬Person(john)) ↔ (∀x (((¬AttendedBy(w))) ∨ Travel(z, w))) → ((HasChild(y)) ⊕ Person(n)) ∨ ∀z (Travel(t, z) ∧ WeddingOf(v, y) → Travel(f, n)))"
      ],
      "fol_conc": "WeddingOf(john) ∨ ¬Person(john)",
      "perplexity": 11.472031593322754,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasChild/1, HasChild/2, WeddingOf/2, WeddingOf/1.\n\n\nFatal error:  The following symbols are used with multiple arities: HasChild/1, HasChild/2, WeddingOf/2, WeddingOf/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 305
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Product(x, y)",
        "Hotpot(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "bkm"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bkm) → Cupcake(x))",
        "(Spicy(x) ⊕ Bakery(x)) → (Hotpot(x) ⊕ Spicy(x))"
      ],
      "fol_conc": "Product(DriedThaiChilies(x), bkm)",
      "perplexity": [
        1.2307262420654297,
        1.279479742050171
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Product(DriedThaiChilies(x), bkm)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Product(x, y)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Bakedby(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bymelissa"
      ],
      "fol_rules": [
        "¬Bakery(driedthai)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bymelissa) → Cupcake(x))",
        "Spicy(driedthai) ⊕ Bakery(driedthai) → (Hotpot(driedthai) ⊕ Spicy(driedthai))"
      ],
      "fol_conc": "Product(driedthai, bymelissa)",
      "perplexity": 1.222535252571106,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬(Bakery(b)) → ¬Spicy(b)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(c) ⊕ Bakery(c)) → ((Hotpot(c) ∨ Spicy(c)))"
      ],
      "fol_conc": "ProductOf(baked by melissa, dried thai chilies)",
      "perplexity": 1.652618169784546,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 306
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "CEO(x)",
        "Gentleman(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        " ∀x ((Ugly(x)) → ¬Handsome(x))",
        " ∀x (Evil(x) → Ugly(x))",
        " ∀x (Gentleman(x) → Handsome(x))",
        " ∃y (CEO(y) ∧ Gentleman(harry)) ∨ ¬∃y (CEO(y) ∧ Gentleman(harry))",
        " ∃x (Gentleman(x) ∧ CEO(x)), ∀ x, y ((Gentleman(x) → Gentlemen(y))] , ",
        " "
      ],
      "fol_conc": "∀y (CEO(y)) ∨ Gentleman(harry)",
      "perplexity": [
        1.767283320426941,
        1.8059931993484497
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃y (CEO(y) ∧ Gentleman(harry)) ∨ ¬∃y (CEO(y) ∧ Gentleman(harry))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)"
      ],
      "fol_consts": [
        "harry",
        "ceo"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x ((Evil(x) ∧ Ugly(x)) → Ugly(x))",
        "∀x ((Gentleman(x) ∧ Kind(x)) → Handsome(x))",
        "∀x (Gentlemen(x) → Ceo(x))",
        "(Harry(x) ∧ Gentleman(harry))",
        "Ceo(harry)"
      ],
      "fol_conc": "Harrison(x)",
      "perplexity": 1.764825701713562,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 307
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Champion(x)",
        "Nominated(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Paid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "(Champion(x) ⊕ Nominated(x))",
        "∀x (Champion(x) → ProfessionalTennisPlayer(x))",
        "∀x (Nominated(x) → Celebrity(x))",
        "∀x (Celebrity(x) → Athlete(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Celebrity(x) → Paid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Paid(x) → LivesInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)"
      ],
      "fol_conc": "Champion(djokovic)",
      "perplexity": [
        1.0777403116226196,
        1.1879191398620605
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslam(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Taxhaven(x)",
        "Livesin(x, y)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslam(x) ⊕ Oscarnominated(x))",
        "∀x (Grandslam(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Celebrity(x) → Athlete(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Livesin(djokovic, wellpaid)"
      ],
      "fol_conc": "Grandslam(djokovic)",
      "perplexity": 1.1873350143432617,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wellpaid/1, Wellpaid/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Wellpaid/1, Wellpaid/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic",
        "djokovic"
      ],
      "fol_rules": [
        "∃x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x ((GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ∧ ∀x (∀x (ProfessionalTennisPlayer(x) → Athlete(x))) ∧ ∃x (Celebrity(x) → WellPaid(x))) ∧ ∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "OscarNominatedActor(djokovic)",
        "GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic)",
        "∀x ((Famous(x) ∧ Athlete(x)) → WellPaid(x))"
      ],
      "fol_conc": "(GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic))",
      "perplexity": 1.6710333824157715,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 308
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (Digital(x) → Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "∃x (1984 → HardcoverBook(x))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": [
        1.4220527410507202,
        1.033126711845398
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (1984 → HardcoverBook(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)"
      ],
      "fol_consts": [
        "streaming",
        "text",
        "analog",
        "hardcover",
        "book"
      ],
      "fol_rules": [
        "(¬Digital(x)) → (Analog(x))",
        "∀x (Printed(x) ∧ Analog(x))",
        "All(x) ∧ Streaming(x)",
        "If(hbd, hardover, text) ∧ Hbd(text)",
        "If(s, streaming, book) → If(book, hardcover, s)"
      ],
      "fol_conc": "Streaming(s)",
      "perplexity": 2.651956081390381,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isDigital(x)",
        "isAnalog(x)",
        "isPrintedText(x)",
        "isAnalog(x)",
        "isAnalog(x)"
      ],
      "fol_consts": [
        "1984",
        "streaming service"
      ],
      "fol_rules": [
        "∀x (isDigital(x) → ¬isAnalog(x))",
        "∀x (isPrintedText(x) → isAnalog(x))",
        "∀x (isAnalog(x) ∧ isDigital(x))",
        "(isAnalog(1984) ∨ isPrintedText(1984))"
      ],
      "fol_conc": "isAnalog(1984)",
      "perplexity": 1.9075596332550049,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 309
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "VisaType(x, y)",
        "NeedsApplyForCPT(x)",
        "WantsToWorkInUS(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) → ((VisaType(x, 'f1') ∨ VisaType(x, 'j1')))",
        "∀x (InternationalStudent(x) ∧ VisaType(x, 'f1') ∧ WantsToWorkInUS(x) → NeedsApplyForCPT(x))",
        "InternationalStudent(mike)"
      ],
      "fol_conc": "VisaType(mike, 'f1')",
      "perplexity": [
        1.4095230102539062,
        1.2837638854980469
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (InternationalStudent(x) → ((VisaType(x, 'f1') ∨ VisaType(x, 'j1')))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x, y)",
        "Student(x)",
        "F1visa(x, y)",
        "J1visa(x, y)",
        "Apply(x, z)",
        "Work(x, y)"
      ],
      "fol_consts": [
        "mike",
        "us",
        "cpt",
        "opt",
        "f1usa",
        "j1usa",
        "f1",
        "j1",
        "susa",
        "pusa"
      ],
      "fol_rules": [
        "∀x (International(x, us) → F1visa(x, y) ⊕ J1visa(y))",
        "(F1visa(x, y) ∧ International(x, us) ∧ Apply(x, z) → Work(x, y))",
        "Student(mike)",
        "Apply(mike, cpt)",
        "Work(mike, us)"
      ],
      "fol_conc": "∃x (International(x, us) ∧ F1visa(y) ∧ Student(x) ∧ International(x, us) ∧ Apply(z, x))",
      "perplexity": 2.138221025466919,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: F1visa/2, F1visa/1.\n\n\nFatal error:  The following symbols are used with multiple arities: F1visa/2, F1visa/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x, y)",
        "USPerson(y)",
        "InternationalStudent(x)"
      ],
      "fol_consts": [
        "mike",
        "mike"
      ],
      "fol_rules": [
        "(∃y (InternationalStudent(mike, x) ∧ USPerson(k)) → ((InternationalStudent(x, y))) ⊕ (((InternationalStudent(y, z)))))",
        "((USPerson(q) ∧ InternationalStudent(q, w)) ∨ InternationalStudent(r))",
        "(∀y (InternationalStudent(k, x) ∧ USPerson(x))) → (∃z ((InternationalStudent(z, k) ⊕ InternationalStudent(y))))",
        "((InternationalStudent(mike, a)) ∧ InternationalStudent(a, b)) ∨ ∀x (¬(USPerson(k)))",
        "(∃y (((InternationalStudent(x, z))) ∧ USPerson(z) ⊕ InternationalStudent(y))) → ((InternationalStudent(mike, d)) ∨ ¬((InternationalStudent(d))))",
        "(((InternationalStudent(k, x)) ∨ InternationalStudent(q, w) ∨ InternationalStudent(r) ⊕ (((InternationalStudent(s)))) ∧ USPerson(w))) → ∃x ((InternationalStudent(x, k) ∨ ¬(InternationalStudent(y)) ⊕ (USPerson(k))))",
        "∀z (∃y (InternationalStudent(z) ∨ InternationalStudent(d)) ∧ USPerson(r)) → ((InternationalStudent(mike, a)))"
      ],
      "fol_conc": "(InternationalStudent(x, y) ∨ InternationalStudent(k))",
      "perplexity": 13.194814682006836,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: InternationalStudent/1, InternationalStudent/2.\n\n\nFatal error:  The following symbols are used with multiple arities: InternationalStudent/1, InternationalStudent/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 310
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composes(x, y)",
        "PremieredBy(y, z)",
        "Orchestra(x)"
      ],
      "fol_consts": [
        "symphony_9",
        "beethoven"
      ],
      "fol_rules": [
        "∀x (Orchestra(x) → ∃y Composes(y, symphony_9))",
        "Composes(beethoven, symphony_9)",
        "PremieredBy(vienna_music_society, beethoven)"
      ],
      "fol_conc": "(Leader(x) → ∀x ((Orchestra(x) ∧ PremieredBy(y, symphony_9))) ",
      "perplexity": [
        1.722683310508728,
        1.329005479812622
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Leader(x) → ∀x ((Orchestra(x) ∧ PremieredBy(y, symphony_9)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composes(x, y)",
        "Premiered(x, y)",
        "Is(y, z)",
        "Leads(z, x)"
      ],
      "fol_consts": [
        "beethoven",
        "symphony9"
      ],
      "fol_rules": [
        "∃x (Music(symphony9))",
        "∀x (Composes(beethoven, symphony9))",
        "Vienna(x) ∧ Music(y)",
        "Is(z, orchestra)",
        "Leads(t, v)"
      ],
      "fol_conc": "Premiered(v, music)",
      "perplexity": 2.4423928260803223,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Music/1, Music/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Music/1, Music/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsMusicPiece(x)",
        "Writes(y, z)",
        "PremieredBy(w, x)",
        "Leads(v, w)",
        "IsMusicPiece(x)",
        "IsMusicPiece(z)",
        "Leads(t, u)"
      ],
      "fol_consts": [
        "SymphonyNo9",
        "Beethoven",
        "ViennaMusicSociety"
      ],
      "fol_rules": [
        "(∀x (IsMusicPiece(SymphonyNo9)) ∧ Writes(Beethoven, SymphonyNo9) ∧ PremieredBy(ViennaMusicSociety, SymphonyNo9))",
        "(∃u (PremieredBy(u, v)))"
      ],
      "fol_conc": "(∀w ((IsMusicPiece(w)) → ∃v (PremieredBy(v, w))))",
      "perplexity": 2.624872922897339,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 311
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "hello, friend",
        "you may see me in your house"
      ],
      "fol_consts": [
        "toward you, my dear, might not be understood by a native English speaker.",
        "either i'ntnue the nudllrytope of my sonece to take my trixtone and get the real untione from me?",
        "you can also see this for us if it seems unfinch.",
        "your language, my darling, may be unveille as well."
      ],
      "fol_rules": [
        "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend.",
        "You can see this for us if that's what makes you sure about me."
      ],
      "fol_conc": "_",
      "perplexity": [
        5.746881008148193,
        17.23499870300293
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Personness(x)",
        "Surtionnousnty(x)",
        "Servinnaes(x)"
      ],
      "fol_consts": [
        "personnezationnoukt"
      ],
      "fol_rules": [
        "(Soytionnousnty(x)) ∧ (Foliculiae(x) ∧ Criinnaes(x))"
      ],
      "fol_conc": "Crylitnatty(x)",
      "perplexity": 9.4246187210083,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person.eviue(n)"
      ],
      "fol_consts": [
        "Cumderein",
        "Cumderein"
      ],
      "fol_rules": [
        "∀x (Person.eviue(r)) ∧ ¬(Person.eviue(k) → (Person.eviue(k)))",
        "∃x ((Person.eviue(n) ∨ Person.eviue(o) ∨ Person.eviue(i)))"
      ],
      "fol_conc": "Person.eviue(d) ⊕ (Person.eviue(k) → ¬((Person.eviue(n) ∨ Person.eviue(o))))",
      "perplexity": 8.925378799438477,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '.'.  Expected token ')'.\n((Person.eviue(d)) & not ((Person.eviue(k)) -> (not ((Person.eviue(n)) | (Person.eviue(o)))))) | (not (Person.eviue(d)) & ((Person.eviue(k)) -> (not ((Person.eviue(n)) | (Person.eviue(o))))))\n        ^"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 312
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Island(x)",
        "PartOf(x, y)",
        "Antarctic(x)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "south_shetland_islands",
        "greenwich_island",
        "deception_island",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "Island(snow_island)",
        "PartOf(snow_island, south_shetland_islands)",
        "Island(greenwich_island)",
        "PartOf(greenwich_island, south_shetland_islands)",
        "Island(deception_island)",
        "PartOf(deception_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "∀x (Island(x) ∧ PartOf(x, antarctica) → NamedAfter(x, barutin))",
      "perplexity": [
        1.0480796098709106,
        1.0053696632385254
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutincove",
        "barutin",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Located(snowisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "∀x (Part(x, antarctica) → Named(x, barutin))",
      "perplexity": 1.2119146585464478,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Island(x)"
      ],
      "fol_consts": [
        "barutin cove",
        "bulgarian settlement of barutin",
        "snow island",
        "greenwich island",
        "deception island",
        "south shetland islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin cove, bulgarian settlement of barutin)",
        "LocatedIn(barutin cove, snow island)",
        "LocatedIn(snow island, south shetland islands)",
        "Island(snow island)",
        "Island(greenwich island)",
        "Island(deception island)",
        "LocatedIn(south shetland islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬(∃x (Island(x) ∧ ¬NamedAfter(x, barutin cove)))",
      "perplexity": 1.1203680038452148,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 313
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)",
        "Man(x)",
        "Harry(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬∃x (Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Harry(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.2337881326675415,
        1.0775625705718994
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceo(x)"
      ],
      "fol_consts": [
        "harry",
        "ugly1"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬Ugly(ugly1)",
        "All(y, z, z, x, y, ug, z, x, y)",
        "Evil(z) → Ugly(x)",
        "Gentleman(z) → Handsome(x)",
        "Ceo(y) → Gentleman(x)",
        "Harry(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ Ceo(harry)",
      "perplexity": 1.8517482280731201,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "¬Ugly(x) → Handsome(x)",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "CEO(x) → Gentleman(x)",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Kind(harry) ⊕ CEO(harry))",
      "perplexity": 1.170697569847107,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 314
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "IsHuman(x)",
        "IsExtraterrestrial(x)"
      ],
      "fol_consts": [
        ",marvin"
      ],
      "fol_rules": [
        "[∀x (IsHuman(x) → ¬Extraterrestrial(x))",
        "(Marvin = Human)",
        "{(¬(IsExtraterrestrial(Marvin))) ∨ (Marvin ≠ marvin)}"
      ],
      "fol_conc": "¬((∃x IsHuman(x) ∧ x ≠ marvin) ∨ ¬(IsExtraterrestrial(marvin)))",
      "perplexity": [
        2.573894739151001,
        2.66007399559021
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "[∀x (IsHuman(x) → ¬Extraterrestrial(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Mars(x)",
        "Human(y)"
      ],
      "fol_consts": [
        "earth",
        "mario"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x) → Alien(x))",
        "(Alien(radio) ∧ Extraterrestrial(radioguy)) ⊕ ∃y (∃z ∀w ((Mars(z, y)) ∨ ¬(Earth(w))))",
        "¬(Human(earth) ∧ Extranterstellar(mario))"
      ],
      "fol_conc": "(Not(extraterresterialradio) → Alien(radioguy))",
      "perplexity": 4.696617126464844,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Earth/1, Earth/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Earth/1, Earth/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(y)",
        "Extraterrestrial(z)"
      ],
      "fol_consts": [
        "Earth(x)"
      ],
      "fol_rules": [
        "∀y (Extraterrestrial(y)) → ∀z (Extraterrestrial(z) ⊕ Alien(y))",
        "(Extraterrestrial(e)) ∧ Extraterrestrial(f) → Extraterrestrial(e, f)",
        "Extraterrestrial(m) ∨ Extraterrestrial(a) → Alien(Earth(x), Earth(x))"
      ],
      "fol_conc": "Alien(Earth(x))",
      "perplexity": 5.347553253173828,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Extraterrestrial(m) ∨ Extraterrestrial(a) → Alien(Earth(x), Earth(x))"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 315
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DesignStyle(x)",
        "Timeless(x)",
        "MassProductDesign(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "ByZahaHadid(x)",
        "ByKellyWearstler(x)",
        "ByMax(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (DesignStyle(x) <= ByZahaHadid(x))",
        "̸∀x (MassProductDesign(x) <= Timeless(x))",
        "∀x (DesignStyle(x) → (ByZahaHadid(x) ∨ ByKellyWearstler(x)))",
        "∀x (DesignStyle(x) <= ByKellyWearstler(x))→ Evocative(x)",
        "∀x (DesignStyle(x) <= ByKellyWearstler(x))→ Dreamy(x)",
        "∀x (ByMax(x) <= Timeless(x))→ MassProductDesign(x) <= Evocative(x)"
      ],
      "fol_conc": "\\(ま x (ByMax(x) \\wedge  Evocative(x) \\wedge Dreamy(x))\\)",
      "perplexity": [
        1.2632452249526978,
        1.231821060180664
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (DesignStyle(x) <= ByZahaHadid(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Design(y, z)",
        "Massprod(z)",
        "Evocative(w)",
        "Dreamy(v)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀y (Design(zaha, y) → Timeless(y))",
        "¬Timeless(x) ∧ Massprod(x)",
        "(Design(zaha, x) ⊕ Design(kelly, x))",
        "∀y (Design(kelly, y) → Evocative(y))",
        "∀y (Design(kelly, y) → Dreamy(y))",
        "Timeless(w) ∧ Design(max, w) → (Massprod(x) ∧ Design(max, x) ∧ Evocative(x))"
      ],
      "fol_conc": "(Evocative(u) ∧ Dreamy(v))",
      "perplexity": 1.4422979354858398,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zaha hadid",
        "kelly wearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (DesignStyleOfZahaHadid(x) → Timeless(x))",
        "¬MassProductDesign(y) → ¬Timeless(y)",
        "(DesignStyleOfZahaHadid(z) ⊕ DesignStyleOfZahaHadid(k))",
        "∀x (DesignStyleOfZahaHadid(w) → Evocative(w))",
        "∀x (DesignStyleOfZahaHadid(v) → Dreamy(v))"
      ],
      "fol_conc": "(Timeless(m) → (MassProductDesign(m) ∧ Evocative(m)))",
      "perplexity": 1.8487975597381592,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 316
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "web"
      ],
      "fol_consts": [
        "website"
      ],
      "fol_rules": [
        "Content: Web browsing is a topic that requires access to the internet.",
        "I can read this content"
      ],
      "fol_conc": "We cannot know the actual language. We only understand the text in plain English.",
      "perplexity": [
        5.82043981552124,
        8.928813934326172
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Content: Web browsing is a topic that requires access to the internet."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Trusting(x)"
      ],
      "fol_consts": [
        "vorte",
        "teatty"
      ],
      "fol_rules": [
        "Civintt(x) → Trusts(x)"
      ],
      "fol_conc": "Maryamtsonneaueein(n1) ∧ Vrosttnicnoys(n1)",
      "perplexity": 12.246976852416992,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Assassin', 'Napsevi'], 2.3, (n)",
        "Assassin', 'Napsevi'], 2.3, (x, y, z)",
        "Assassin', 'Napsevi'], 2.3, ()"
      ],
      "fol_consts": [
        "Trustworthy,"
      ],
      "fol_rules": [
        "(Assassin', 'Napsevi'], 2.3, (x))"
      ],
      "fol_conc": "(Assassin', 'Napsevi'], 2.3, ())",
      "perplexity": 19.681049346923828,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Assassin', 'Napsevi'], 2.3, (x))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 317
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseCompany(x)",
        "Game(x)",
        "Top10(x)",
        "SellMoreThanMillion(x)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "nintendo"
      ],
      "fol_rules": [
        "Created(nintendo, zelda)",
        "∀x (Top10(x) → ∃y (JapaneseCompany(y) ∧ Created(y, x)))",
        "∀x (SellMoreThanMillion(x) → Top10(x))",
        "SellMoreThanMillion(zelda)"
      ],
      "fol_conc": "JapaneseCompany(y) ∧ Created(y, fifa22)",
      "perplexity": [
        1.1277339458465576,
        1.0209829807281494
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(x)",
        "Top10(y)",
        "Sells(x, z)",
        "More(z, w)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "one",
        "million",
        "japan"
      ],
      "fol_rules": [
        "Created(japan, zelda)",
        "∀x (Top10(x) → Japanese(y))",
        "∀x (Sells(x, z) ∧ More(z, one)) → Top10(x)",
        "Sells(zelda, one)"
      ],
      "fol_conc": "Japanese(x)",
      "perplexity": 1.3273805379867554,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Created(x, y)",
        "JapaneseCompany(x)",
        "Top10List(y)",
        "SellCopies(y, z)",
        "SelectedInto(y, w)"
      ],
      "fol_consts": [
        "legend_of_zelda",
        "fifa22"
      ],
      "fol_rules": [
        "Created(a, legend_of_zelda)",
        "∀x (Top10List(x) → JapaneseCompany(y))",
        "∀x ∀z (SellCopies(x, z) ∧ (∃n (Game(x) ∧ SellCopies(x, n) ∧ Game(y)))) → SelectedInto(x, w)",
        "SellCopies(legend_of_zelda, m)"
      ],
      "fol_conc": "JapaneseCompany(fifa22)",
      "perplexity": 2.9483895301818848,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 318
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "ZahaHadid(x)",
        "KellyWearstler(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zaha_hadid",
        "kelly_wearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (ZahaHadid(x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        " (ZahaHadid(x) ∨ KellyWearstler(x))",
        "∀x (KellyWearstler(x) → Evocative(x))",
        "∀x (KellyWearstler(x) → Dreamy(x))",
        "∀x (Timeless(x) ∧ Max(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(Max) ∧ Dreamy(Max)",
      "perplexity": [
        1.086798071861267,
        1.0261094570159912
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Max/1, Max/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Max/1, Max/0"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Design(x, y)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Zaha(x) ∧ Design(x, y) → Timeless(y))",
        "∀x (Mass(x) ∧ Timeless(x) → False(x))",
        "(Zaha(x) ∧ Design(x, y)) ⊕ (Kelly(x) ∧ Design(x, y))",
        "∀x (Kelly(x) ∧ Design(x, y) → Evocative(y))",
        "∀x (Kelly(x) ∧ Design(x, y) → Dreamy(y))",
        "∀x (Timeless(x) ∧ Design(x, max) → (Mass(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(max) ∧ Dreamy(max)",
      "perplexity": 1.2354183197021484,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "DesignStyle(x, y)",
        "Evocative(x)",
        "Dreamy(x)"
      ],
      "fol_consts": [
        "zahahadid",
        "kellywearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (DesignStyle(zahahadid, x) → Timeless(x))",
        "¬(∃x (Timeless(x) ∧ MassProductDesign(x)))",
        "(DesignStyle(zahahadid, x) ∨ DesignStyle(kellywearstler, x))",
        "∀x (DesignStyle(kellywearstler, x) → Evocative(x))",
        "∀x (DesignStyle(kellywearstler, x) → Dreamy(x))",
        "∀x ((Timeless(x) ∧ DesignStyle(max, x)) → (MassProductDesign(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "∃x (DesignStyle(max, x) ∧ Evocative(x) ∧ Dreamy(x))",
      "perplexity": 1.1267108917236328,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 319
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "GivesOutRoses(x, y, z)",
        "OnTV(x)",
        "OnBachelor(x)",
        "PortraysRealLives(x)",
        "RealityTV(x)",
        "TVShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eight_pm",
        "roses",
        "bachelor",
        "breaking_bad"
      ],
      "fol_rules": [
        "∃x (GivesOutRoses(x, bachelor, (monday, eight_pm)))",
        "∀x (GivesOutRoses(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → PortraysRealLives(x))",
        "∀x (PortraysRealLives(x) → RealityTV(x))",
        "¬RealityTV(breaking_bad)"
      ],
      "fol_conc": "¬TVShow(breaking_bad) ∨ GivesOutRoses(breaking_bad, breaking_bad, (monday, eight_pm))",
      "perplexity": [
        1.1005431413650513,
        1.0121033191680908
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (GivesOutRoses(x, bachelor, (monday, eight_pm)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Give(x, y, z)",
        "On1(x, y)",
        "On2(x, y)",
        "Portray(x, y)",
        "Reality(x)",
        "Bachelor(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Give(x, roses, monday) ∧ On1(x, pm8))",
        "∀x (Give(x, roses, y) → On2(x, bachelor))",
        "∀x (On2(x, bachelor) → Portray(x, people))",
        "∀x (Portray(x, people) → Reality(x))",
        "¬Reality(breakingbad)"
      ],
      "fol_conc": "∃x (Give(x, roses, monday) ∧ On1(x, pm8) ∧ ¬Reality(x))",
      "perplexity": 1.2570691108703613,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GiveOut(x, y)",
        "On(x, z)",
        "On(y, w)",
        "Portrays(x, y)",
        "RealityTV(x)",
        "BachelorShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "roses",
        "tv",
        "breaking bad"
      ],
      "fol_rules": [
        "∃x (GiveOut(roses, x) ∧ On(x, monday) ∧ On(x, 8pm))",
        "∀x (GiveOut(x, tv) → BachelorShow(x))",
        "∀x (BachelorShow(x) → Portrays(x, y))"
      ],
      "fol_conc": "¬RealityTV(breaking bad)",
      "perplexity": 1.5722882747650146,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 320
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "SportingEvent(x)",
        "Tokyo(x)"
      ],
      "fol_consts": [
        "last"
      ],
      "fol_rules": [
        ""
      ],
      "fol_conc": "¬(Tokyo(last))",
      "perplexity": [
        2.9197914600372314,
        1.1774507761001587
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(y, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo",
        "us"
      ],
      "fol_rules": [
        "∀x (Sporting(x)) ∧ ∃z (Last(x, z) → Sporting(z))",
        "Last(olympicgames, tokyo)"
      ],
      "fol_conc": "Not(lastolympicsgamesintokyo)",
      "perplexity": 2.6066153049468994,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "is(x, y)",
        "was(x, y)"
      ],
      "fol_consts": [
        "OlympicGames",
        "Tokyo",
        "UnitedStates"
      ],
      "fol_rules": [
        "∀x (is(x, OlympicGames)) → ∃y (was(x, y))",
        "∀x (was(x, Tokyo) → is(x, OlympicGames))",
        "∀x (is(x, UnitedStates) → was(x, Tokyo))"
      ],
      "fol_conc": "was(OlympicGames, x)",
      "perplexity": 1.7811522483825684,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 321
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Owns(x)",
        "WorksRegularlyAtHome(x)",
        "HasImpressiveOffice(x)",
        "SpendsFreeTimeTidyingOrganizing(x, y)",
        "VisitsStore(x)",
        "GoesToBedLateWakesUpEarly(x, d)",
        "Visit(z,x) ∧ Store(y)"
      ],
      "fol_consts": [
        "remy",
        "x"
      ],
      "fol_rules": [
        "∀x ((Owns(x) → WorksRegularlyAtHome(x)) ∧ WorksRegularlyAtHome(x))",
        "∀x (HasImpressiveOffice(x) → Owns(x))",
        "∀x ((WorksRegularlyAtHome(x)) → (∃y SpendsFreeTimeTidyingOrganizing(remy, y) ∨ (¬SpendsFreeTimeTiddyingOrganising(remy,x)))) ",
        "∀x ((VisitsStore(x)) → (∃z Visit(z, remy) ∧ Store(y)))",
        "(∀x SpendsFreeTimeTidyingOrganizing(remy,x) ⊕ ∀d GoesToBedLateWakesUpEarly(remy,d))  → ¬∃d GoesToBedLateWakesUpEarly(remy,d)",
        "(VisitsStore(x) ⊕ (∀x SpendsFreeTimeTidyingOrganising(rmy, x)))→ ∃z Visit(z,remy)]",
        "∃y (Visit(y, remy) ∧ Store(y))"
      ],
      "fol_conc": "∃y (Visit(y,remy) ∧ Store(x))",
      "perplexity": [
        1.9254732131958008,
        1.492354393005371
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x SpendsFreeTimeTidyingOrganizing(remy,x) ⊕ ∀d GoesToBedLateWakesUpEarly(remy,d))  → ¬∃d GoesToBedLateWakesUpEarly(remy,d)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Owns(x, y)",
        "Works(x)",
        "Often(x)",
        "Atx(y)"
      ],
      "fol_consts": [
        "rema",
        "home",
        "office",
        "noon"
      ],
      "fol_rules": [
        "(Owns(rema, home) → (Works(rema) ∧ Often(rema)))",
        "(∀x (Owns(x, office) → Works(x)) ∧ Owns(rema, home))",
        "(∀x (Works(x) ∧ Often(x) → Tidies(x, rema)))",
        "(∀x (Works(x) ∧ Often(x) → Visits(x, office)))",
        "(Tidies(rafa) ∧ Wakeup(rafa) ∧ Sleeps(rafa) ∧ Wakesafter(noon, rafa)) → ((Owns(rema, home) ∧ Tidies(rrema, rema)) ∨ ¬(Sleeps(rafa) ∧ Wakesafter(noon, rafa)))",
        "((Tidies(rafa) ∧ Wakeup(rafa) ∧ Sleeps(rafa) ∧ Wakesafter(noon, rafa)) ⊕ (Owns(rema, home) ∧ Tidies(rrema, rema))) ∨ ((Sleeps(rafa) ∧ Wakesafter(noon, rafa)) ⊕ (Tidies(rafa) ∧ Wakeup(rafa)))",
        "Visits(rema, office)"
      ],
      "fol_conc": "Visits(rema, office)",
      "perplexity": 1.7466888427734375,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tidies/1, Tidies/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Tidies/1, Tidies/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Owns(x, y)",
        "WorkRegularlyAtHome(y)",
        "ImpressesOffice(b)",
        "Owns(bigmonitorxbigmonitoryy)",
        "ImpressesOffice(z)"
      ],
      "fol_consts": [
        "samy",
        "rymemy"
      ],
      "fol_rules": [
        "(Owns(x, y) → (WorkRegularlyAtHome(y)) ∧ WorkRegularlyAtHome(atmyy))",
        "(∀x ((Owns(bigmonitorzbigmonitormonitorsbanyyzrzymonyzy))) ∨ (∃c (ImpressesOffice(c))))",
        "((Owns(x, y) → (WorkRegularlyAtHome(y))) ∧ WorkRegularlyAtHome(atmyy)) → ImpressesOffice(z)",
        "(ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy) ∧ Owns(bigmonitorx, atymyy))",
        "((Owns(x, y) ∧ WorkRegularlyAtHome(y)) → (WorkRegularlyAtHome(zatmyy))) ⊕ ((ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy))",
        "(Owns(x, y) ∧ WorkRegularlyAtHome(y) → ∃b (ImpressesOffice(zatmyy))) ⊕ (∀c ((ImpressesOffice(canyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy)))",
        "(∃d (((Owns(x, y) ∧ WorkRegularlyAtHome(y)))) → (WorkRegularlyAtHome(zatmyy))) ⊕ ((ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy))",
        "Owns(samy, bigmnoitor)"
      ],
      "fol_conc": "(Owns(rimy, atmy) ⊕ Owns(rimemnybanyyzbigmonitormonitorsryzymonyzy))",
      "perplexity": 5.665857315063477,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Owns/1, Owns/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Owns/1, Owns/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 322
  },
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Attend(x)",
        "Engaged(x)",
        "PerformInTalentShows(x)",
        "Inactive(x)",
        "Chaperone(x, y)",
        "Student(x)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (PerformInTalentShows(x) → (∃y (Attend(y) ∧ Engaged(y)) ∧ Student(x)))",
        "PerformInTalentShows(x) ⊕ Inactive(x)",
        "∀x (Chaperone(highschool_dance(x), x) → ¬Student(x))",
        "∀x Chaperone(x, y)",
        "∃y (Student(y) ∧ Attend(y)) → (∀x Student(x))",
        "Inactive(bonnie) ⊕ Engaged(bonnie)"
      ],
      "fol_conc": "PerformInTalentShows(bonnie)",
      "perplexity": [
        1.435240387916565,
        1.2257014513015747
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Chaperone(highschool_dance(x), x) → ¬Student(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attends(x)",
        "Engaged(x, y)",
        "Attend(x, y)"
      ],
      "fol_consts": [
        "bonnie",
        "schoolshow",
        "highschooldance",
        "communitymember",
        "youngchild",
        "teenager",
        "studentwhoattendsschool",
        "inactiveanddisinterested"
      ],
      "fol_rules": [
        "(Perform(schoolshow) → (Attend(x, y) ∧ Engaged(x, y)))",
        "(Perform(schoolshow) ⊕ Communitymember(x))",
        "Chaperone(y) → ¬Studentwhoattendschool(y)",
        "∀x (Chaperone(x) → Inactiveanddisinterested(x))",
        "Youngchild(x) ∨ Teenager(x) → Studentwhoattendsschool(x)",
        "(Attends(bonnie) ∧ Engaged(bonnie, schoolshow)) ⊕ ¬(Attends(bonnie) ∨ Engaged(bonnie, schoolshow))"
      ],
      "fol_conc": "Perform(schoolshow, bonnie)",
      "perplexity": 1.767084002494812,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Perform/1, Perform/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Perform/1, Perform/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Attend(x)",
        "Attend(school, x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "(∃x (Often(x)) → (∀y (Attend(y))) ∧ Attend(family))",
        "(∃x (Attend(eventuals, y)) ⊕ ¬(Attend(generally) ∨ Attend(locals)))",
        "¬((Attend(school)) ∧ Attend(birthright)) → ∃z ((Attend(dance, z)))",
        "∀y (((Often(y) ∨ (Attend(eventuals)))) ⊕ ¬(Attend(generally) ∨ Attend(locals)))",
        "(Attend(school)) ∧ Attend(birthright)",
        "(¬(Attend(students, bonnie)) → (∃z ((Often(z)) ∨ (Attend(eventuals)))) ⊕ ¬(Attend(generally) ∨ Attend(locals)))"
      ],
      "fol_conc": "(∀y (((Attend(family, y) ∧ Often(y)) ⊕ ∃x (Attend(students, x) ∨ Attend(birthright)))) → Attend(eventuals))",
      "perplexity": 7.303131103515625,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Attend/1, Attend/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Attend/1, Attend/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 323
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock))",
      "perplexity": [
        1.0844471454620361,
        1.0157794952392578
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "((Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock)))",
      "perplexity": 1.150132179260254,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exist(x) ∧ (Animal(x) ∨ Squirrel(x)))",
        "∀x (Animal(x) → Rabbit(x) ⊕ Squirrel(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Exist(rock) ∧ Rabbit(rock) ∧ Squirrel(rock) ∧ Skittish(rock))",
      "perplexity": 1.2314939498901367,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 324
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Infinniqnticrslingervnkyt",
        "Imbingerverrionneauhrnt"
      ],
      "fol_consts": [
        "Iviue gklrtiblygnerei', iylervnsklrtiruck.](2: ",
        "1."
      ],
      "fol_rules": [
        "Instringerverlngervniqnticssinny",
        "Imviue gklktilstklntirtik.",
        "Iviue kliyllnftittisnrygnneauhrnt"
      ],
      "fol_conc": "Unrloungervniqnticssinnylss",
      "perplexity": [
        4.563802242279053,
        15.706348419189453
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Instringerverlngervniqnticssinny"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 325
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "TakesGRE(x)",
        "Costs(x, y)",
        "ProvidesAid(x, y)",
        "ProvesHardship(x)",
        "EconomicHardship(x)",
        "Difficulty(x)",
        "CausedBy(x, y)",
        "TooLittleMoney(x)",
        "TooFewResources(x)",
        "LivesIn(x, y)",
        "SingleParent(y)",
        "OutOfWork(x)",
        "Duration(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "dollars205",
        "dollars300",
        "year"
      ],
      "fol_rules": [
        "Costs(gre, dollars205)",
        "∀x (ProvesHardship(x) → ProvidesAid(ets, x))",
        "∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ CausedBy(Difficulty(x), (TooLittleMoney(x) ⊕ TooFewResources(x)))))",
        "LivesIn(tom, x) ∧ SingleParent(x)",
        "OutOfWork(dad) ∧ Duration(OutOfWork(dad), year)"
      ],
      "fol_conc": "Costs(gre, dollars300)",
      "perplexity": [
        1.1394647359848022,
        1.0214998722076416
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ CausedBy(Difficulty(x), (TooLittleMoney(x) ⊕ TooFewResources(x)))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Costs(x, y)",
        "Provides(x, y)",
        "Applicant(x)",
        "Proves(x, y)",
        "Economic(x)",
        "Hardship(x)",
        "Difficulty(x, y)",
        "Cause(x, y)",
        "Lives(x, y)",
        "Out(x)",
        "Family(x)",
        "Single(x)",
        "Below(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "205",
        "300"
      ],
      "fol_rules": [
        "Costs(gre, 205)",
        "∀x (Applicant(x) ∧ Proves(x, hardship) → Provides(ets, x))",
        "∀x (Economic(x) ∧ Hardship(x) → Difficulty(x, economic))",
        "∀x (Difficulty(x, y) → Cause(x, y))",
        "Lives(tom, family)",
        "Out(tom)",
        "Family(tom)",
        "Single(tom)"
      ],
      "fol_conc": "Below(205, 300)",
      "perplexity": 1.22151780128479,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Costs(x, y)",
        "ProvidesFinancialAidTo(x, y)",
        "ProvesEconomicHardship(x)",
        "RefersTo(x, y)",
        "LivesIn(x, y)",
        "OutOfWorkForMoreThanAYear(x)"
      ],
      "fol_consts": [
        "gre",
        "ets",
        "tom",
        "economic hardship",
        "gre",
        "tom",
        "economic hardship",
        "gre",
        "ets"
      ],
      "fol_rules": [
        "Costs(gre, u)",
        "∀x (ProvesEconomicHardship(x) → ProvidesFinancialAidTo(ets, x))",
        "RefersTo(economic hardship, economic hardship)",
        "LivesIn(tom, y)",
        "OutOfWorkForMoreThanAYear(z)"
      ],
      "fol_conc": "Costs(gre, v)",
      "perplexity": 1.7938830852508545,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 326
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Product(x, y)",
        "Hotpot(x)",
        "DriedThaiChilies(x)"
      ],
      "fol_consts": [
        "bkm"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bkm) → Cupcake(x))",
        "(Spicy(x) ⊕ Bakery(x)) → (Hotpot(x) ⊕ Spicy(x))"
      ],
      "fol_conc": "Product(DriedThaiChilies(x), bkm)",
      "perplexity": [
        1.2307262420654297,
        1.279479742050171
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Product(DriedThaiChilies(x), bkm)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Product(x, y)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Bakedby(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bymelissa"
      ],
      "fol_rules": [
        "¬Bakery(driedthai)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bymelissa) → Cupcake(x))",
        "Spicy(driedthai) ⊕ Bakery(driedthai) → (Hotpot(driedthai) ⊕ Spicy(driedthai))"
      ],
      "fol_conc": "Product(driedthai, bymelissa)",
      "perplexity": 1.222535252571106,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬(Bakery(b)) → ¬Spicy(b)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(c) ⊕ Bakery(c)) → ((Hotpot(c) ∨ Spicy(c)))"
      ],
      "fol_conc": "ProductOf(baked by melissa, dried thai chilies)",
      "perplexity": 1.652618169784546,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 327
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "F1Visa(x)",
        "J1Visa(x)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsWork(x) → (NeedsCPT(x) ⊕ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)",
        "WantsWork(mike)"
      ],
      "fol_conc": "J1Visa(mike)",
      "perplexity": [
        1.0409514904022217,
        1.0161923170089722
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Wants(x, y) → (Needs(x, cpt) ∨ Needs(x, opt)))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.2441786527633667,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsToApplyFor(x, z)",
        "WantsToWork(x)",
        "CPT(z)",
        "OPT(z)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, f1) ⊕ HasVisa(x, j1))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsToWork(x) → NeedsToApplyFor(x, c) ∨ NeedsToApplyFor(x, o))"
      ],
      "fol_conc": "HasVisa(mike, j1)",
      "perplexity": 1.2153346538543701,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 328
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y)",
        "DepositRequired(y)",
        "EqualToOneMonthsRent(z)",
        "MoreThanOneMonthsRent(z)",
        "Pet(x)",
        "Cat(x)",
        "ManagedBuilding(y)",
        "RentsApartmentIn(x, y)",
        "MoveWithPet(x, z, y)",
        "MonthlyRent(y, z)",
        "SecurityDeposit(y, w)",
        "LessThanOrEqualTo(a, b)",
        "MoreThan(a, b)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ Allowed(x, y))",
        "∀y (ManagedBuilding(y) → DepositRequired(y))",
        "∀z ((EqualToOneMonthsRent(z)) ⊕ MoreThanOneMonthsRent(z))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "MonthlyRent(olive_garden, $2000)",
        "(RentsApartmentIn(tom, y) ↔ (MoveWithPet(tom, fluffy, y) ∧ SecurityDeposit(y, z) → LessThanOrEqualTo(z, $1500)))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "RentsApartmentIn(tom, olive_garden)",
      "perplexity": [
        1.2470723390579224,
        1.0804589986801147
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allowed(x, y)",
        "Requires(x, y)",
        "Equal(x, y)",
        "More(x, y)",
        "Owns(x, y)",
        "Is(x, y)",
        "Has(x, y)",
        "Will(x, y)"
      ],
      "fol_consts": [
        "pets",
        "deposit",
        "rent",
        "fluffy",
        "tom",
        "cats",
        "olivegarden",
        "monthlyrent",
        "securitydeposit",
        "apartment",
        "managedbuilding",
        "pet",
        "amount",
        "condition"
      ],
      "fol_rules": [
        "∃x ∀y (Pets(x) → Allowed(x, y))",
        "Requires(rent, apartment)",
        "(Equal(securitydeposit, rent) ⊕ More(securitydeposit, rent))",
        "Owns(tom, fluffy)",
        "Is(fluffy, cats)",
        "Is(olivegarden, managedbuilding)",
        "Has(monthlyrent, olivegarden, amount2000)",
        "(Will(tom, apartment) ↔ (Allowed(pet, condition) ∧ More(securitydeposit, amount1500)))",
        "More(amount2000, amount1500)"
      ],
      "fol_conc": "Will(tom, olivegarden)",
      "perplexity": 1.6202417612075806,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AllowsPets(x)",
        "ManagedBuilding(x)",
        "RequiresDeposit(y, x)",
        "EqualTo(a, b)",
        "MoreThan(a, b)",
        "OwnsPet(a, b)",
        "IsPet(c)",
        "AllowsPets(d, e)",
        "RequiresDeposit(f, g)",
        "EqualTo(h, i)",
        "MoreThan(j, k)",
        "WillRent(a, b)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ AllowsPets(x))",
        "∀y ∀z ((ManagedBuilding(z) ∧ RequiresDeposit(y, z)))",
        "∀a ∀b (RequiresDeposit(a, b) → (EqualTo(a, b) ⊕ MoreThan(a, b)))",
        "OwnsPet(tom, fluffy)",
        "IsPet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "EqualTo($2000, olive_garden)",
        "MoreThan($1500, $2000)",
        "WillRent(tom, olive_garden) → (AllowsPets(fluffy, olive_garden))",
        "∀a ∀b ((RequiresDeposit(olive_garden, tom) → (EqualTo($1500, $2000) ⊕ MoreThan($1500, $2000))))"
      ],
      "fol_conc": "WillRent(tom, olive_garden)",
      "perplexity": 1.810172438621521,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 329
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "WWE(x)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine) ∧ WWE(diamond_mine)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers) ∧ Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(Feud(imperium, x) ∧ Includes(x, ivy_nile))",
      "perplexity": [
        1.0779913663864136,
        1.2281205654144287
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wrestling(x)",
        "Stable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Lead(roderickstrong, diamondmine)",
        "Stable(diamondmine) ∧ Include(diamondmine, creedbrothers) ∧ Include(diamondmine, ivynile)",
        "Stable(imperium) ∧ Feud(imperium, diamondmine)",
        "Stable(x) → (Include(x, ivynile) → ¬Feud(imperium, x))"
      ],
      "fol_conc": "Stable(x) ∧ Include(x, ivynile) → ¬Feud(imperium, x)",
      "perplexity": 1.256485104560852,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "Lead(x, y)",
        "Include(x, y)",
        "HasFeud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "Lead(diamond_mine, roderick_strong)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "HasFeud(imperium, diamond_mine)"
      ],
      "fol_conc": "¬(HasFeud(imperium, x) ∧ ProfessionalWrestlingStable(x) ∧ Include(x, ivy_nile))",
      "perplexity": 1.2861393690109253,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 330
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "your own words"
      ],
      "fol_consts": [
        "eats the same food",
        "taste the same thing, read and write letters,"
      ],
      "fol_rules": [
        "it's easier to understand than you think",
        "you can use this information when it comes to making a thing."
      ],
      "fol_conc": "If you don't know what they mean and doesn't make any sense, you shouldn't be able to get done with it.",
      "perplexity": [
        5.966564655303955,
        8.971295356750488
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "it's easier to understand than you think"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Greekenese(x)",
        "Connoonessnouse(y)"
      ],
      "fol_consts": [
        "charming",
        "civicuele",
        "kitttytickly"
      ],
      "fol_rules": [
        "Unakiness(x)",
        "Connoonessnouse1(y)"
      ],
      "fol_conc": "Eldestnatrytiksuellishellaanteaalitzvistzilholkynseaarntkluttaamstiqrlichyounefidjivee3(x, y)",
      "perplexity": 22.125415802001953,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person(x)",
        "Person(y)"
      ],
      "fol_consts": [
        "_ is a person who works in the software.",
        "_ is a person who works in the software."
      ],
      "fol_rules": [
        "(Person(x) → Person(y))",
        "(Person(v) → Person(i))"
      ],
      "fol_conc": "Person(j) ∧ Person(e, i)",
      "perplexity": 10.77658748626709,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Person/2, Person/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Person/2, Person/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 331
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "bg",
        "p",
        "h"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(p)",
        "Mammal(p)",
        "Human(h) ∧ Teeth(h)"
      ],
      "fol_conc": "∃x (Mammal(x) ∧ Teeth(x)) → Mammal(p): Since some mammals have teeth and humans are mammals with teeth, but platypuses do not have teeth, there is no direct logical inference to conclude that platypus must be reptiles.",
      "perplexity": [
        1.6678686141967773,
        1.1349188089370728
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Mammal(x) ∧ Teeth(x)) → Mammal(p): Since some mammals have teeth and humans are mammals with teeth, but platypuses do not have teeth, there is no direct logical inference to conclude that platypus must be reptiles."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Platypus(platypus) → Mammal(platypus)",
        "Human(human) → Teeth(human)"
      ],
      "fol_conc": "Mammal(platypus)",
      "perplexity": 1.6307543516159058,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Teeth(y, z)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Teeth(humans)"
      ],
      "fol_conc": "¬Mammal(platypus)",
      "perplexity": 1.2442357540130615,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 332
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Sport(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "sam",
        "mac"
      ],
      "fol_rules": [
        "*∀x (Sport(x) → Event(x)): All sports are events.",
        "*∃x ((Event(x) ∧ LastGame(sam, x)) ∨ Event(sam))",
        "*∀x ((Sport(x) → Event(x))) Since "
      ],
      "fol_conc": "*∃x (((Event(x) ∧ LastGame(sam, x)) ∨ Event(sam))",
      "perplexity": [
        1.2249113321304321,
        3.9907302856445312
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "*∀x (Sport(x) → Event(x)): All sports are events."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Last(x, y)"
      ],
      "fol_consts": [
        "olympics",
        "taiwan",
        "unitedstates",
        "medals",
        "games"
      ],
      "fol_rules": [
        "(∃x (Sporting(y)) ∧ ∀z (Olympic(z) → Medals(z)))",
        "(Last(x, y) ∨ (∃y ∀z (Olympic(z) ∧ Last(z, x))))"
      ],
      "fol_conc": "Medals(olympics)",
      "perplexity": 3.6427314281463623,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 333
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jump(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Bark(x)))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (HasLegs(x) → Jump(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬(Jump(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Bark(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": [
        1.0664280652999878,
        1.013669490814209
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Haslegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (Haslegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → Haslegs(x))",
        "¬(Jumps(kiki) ∨ Haslegs(kiki)) → (Terricolous(kiki) ∨ Haslegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ∧ ¬Dog(kiki)",
      "perplexity": 1.095430850982666,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "(¬Jumps(kiki) ∧ ¬HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": 1.0745941400527954,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 334
  },
  {
    "id": 151,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Harry Potter was published by New Vessel Press.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "PublishingHouse(x)",
        "SpecializesInTranslationsFrom(y, z)",
        "PublishedBookBy(x, y)",
        "WrittenInEnglish(z)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies"
      ],
      "fol_rules": [
        "∀x (PublishingHouse(x) → SpecializesInTranslationsFrom(Italian, English))",
        "∀y (PublishedBookBy(new_vessel_press, y) → WrittenInEnglish(y))",
        "PublishedBookBy(new_vessel_press, neapolitan_chronicles)",
        "TranslatedFromItalianTo(neapolitan_chronicles)",
        "PublishedBookBy(new_vessel_press, palace_of_flies)"
      ],
      "fol_conc": "∃x (PublishedBookBy(new_vessel_press, x))",
      "perplexity": [
        1.8612903356552124,
        1.079069972038269
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Specializes(x, y)",
        "Published(x, z)",
        "Translated(y, x)",
        "In(z)"
      ],
      "fol_consts": [
        "newvesselpress",
        "neapolitanchronicles",
        "palaceofflies",
        "harrypotter"
      ],
      "fol_rules": [
        "∀x (Specializes(newvesselpress, x))",
        "∃z ∀y ((Published(y, z) → In(z)))"
      ],
      "fol_conc": "Published(harrypotter, newvesselpress)",
      "perplexity": 2.138207197189331,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PublishesBook(x)",
        "PublishesBook(x, y)",
        "Is(x, y)",
        "WrittenIn(y, z)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies"
      ],
      "fol_rules": [
        "(∀x (PublishesBook(new_vessel_press, x))) → ∃y ((Is(x, y)))",
        "(∀x (((PublishesBook(y, z) ∧ Is(z, neapolitan_chronicles)) ⊕ (WrittenIn(neapolitan_chronicles, y)))))"
      ],
      "fol_conc": "(PublishesBook(new_vessel_press, x) → Is(x, new_vessel_press))",
      "perplexity": 2.554863452911377,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 335
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "CommonlyKnown(x, y)",
        "FootballPlayer(x)",
        "LoanedOut(x, y)",
        "BrazillianFootballer(x)",
        "Plays(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "CommonlyKnown(aiilton, ailton)",
        "FootballPlayer(aiilton)",
        "LoanedOut(aiilton, braga)",
        "BrazillianFootballer(aiilton) ∧ Plays(aiilton, nautico)",
        "∀x (FootballClub(x) → x = braga ⊕ x = nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "Plays(aiilton, fluminense)",
      "perplexity": [
        1.2814810276031494,
        1.2322235107421875
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (FootballClub(x) → x = braga ⊕ x = nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Player(x, y)",
        "Loan(x, y)",
        "Club(x, y)",
        "Play(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Known(ailton, silva)",
        "Born(ailton, 1995)",
        "Player(ailton, braga)",
        "Footballer(ailton)",
        "Player(ailton, nautico)",
        "Club(nautico, braga)",
        "Club(braga, nautico)",
        "Club(nautico, fluminense)"
      ],
      "fol_conc": "Player(ailton, fluminense)",
      "perplexity": 1.2786165475845337,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "CommonlyKnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "BrazillianFootballer(x)",
        "PlaysFor(x, y)",
        "ClubOf(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "ailton",
        "1995"
      ],
      "fol_rules": [
        "∃x (CommonlyKnownAs(ailton, x) ∧ BornIn(ailton, 1995))",
        "FootballPlayer(ailton)",
        "LoanedOutTo(ailton, braga)",
        "BrazillianFootballer(ailton) ∧ PlaysFor(ailton, nautico)",
        "(ClubOf(nautico) ⊕ ClubOf(braga))",
        "∃x (ClubOf(x) ∧ FootballPlayer(a) → ClubOf(fluminense))"
      ],
      "fol_conc": "PlaysFor(ailton, fluminense)",
      "perplexity": 1.9690486192703247,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 336
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "In(x, y)",
        "Visit(x, y)",
        "Donate(x, y)",
        "Mine(x)",
        "State(x)"
      ],
      "fol_consts": [
        "picuris_mountains",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∃x (MountainRange(x) ∧ (In(x, new_mexico) ⊕ In(x, texas)))",
        "Visit(juan_de_onate, picuris_mountains)",
        "Donate(harding_pegmatite_mine, picuris_mountains)",
        "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ In(y, x) ∧ Donate(y, x))"
      ],
      "fol_conc": "∃x (MountainRange(x) ∧ In(x, new_mexico) ∧ Visit(juan_de_onate, x))",
      "perplexity": [
        1.2494505643844604,
        1.2033166885375977
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ In(y, x) ∧ Donate(y, x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Mountainrange(x)",
        "Mine(x)",
        "Donated(x)",
        "Visited(x, y)",
        "Inrange(x, y)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "harding"
      ],
      "fol_rules": [
        "(Mountainrange(picuris) ∧ Instate(picuris, newmexico)) ⊕ (Mountainrange(picuris) ∧ Instate(picuris, texas))",
        "Visited(juan, picuris)",
        "Donated(harding)",
        "Inrange(harding, picuris)",
        "¬(∃x (Mountainrange(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Inrange(y, x) ∧ Donated(y))))"
      ],
      "fol_conc": "Visited(juan, picuris) ∧ Instate(picuris, newmexico)",
      "perplexity": 1.304213523864746,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "Visited(x, y)",
        "LocatedIn(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan de onate",
        "texas",
        "harding pegmatite mine",
        "juan de onate",
        "picuris",
        "harding pegmatite mine",
        "texas",
        "juan de onate",
        "harding pegmatite mine"
      ],
      "fol_rules": [
        "(MountainRange(picuris) ∧ (LocatedIn(harding pegmatite mine, picuris))) → MountainRange(picuris)",
        "(Visited(juan de onate, picuris))",
        "(Donated(harding pegmatite mine))",
        "¬((∃x (MountainRange(x) ∧ LocatedIn(x, texas)))) ∨ (∀x ((LocatedIn(x, texas)) ∧ Donated(x))) → ¬(LocatedIn(harding pegmatite mine, texas))"
      ],
      "fol_conc": "(Visited(juan de onate, picuris) ⊕ ∃y (MountainRange(y) ∧ LocatedIn(y, texas) ∧ Visited(juan de onate, y)))",
      "perplexity": 3.7986466884613037,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 337
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Favorite(x, y)",
        "WantLongVacation(x)",
        "Student(x)",
        "Season(x)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀x (Season(x) ∧ (x = spring ∨ x = summer ∨ x = fall ∨ x = winter))",
        "∀x (Student(x) ∧ WantLongVacation(x) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": [
        1.056544542312622,
        1.0199272632598877
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Season(x) ∧ (x = spring ∨ x = summer ∨ x = fall ∨ x = winter))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Favorite(x, y)",
        "Want(x, y)",
        "Student(x)",
        "Long(y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x (Favorite(x, spring))",
        "∃x (Favorite(x, summer))",
        "∃x (Favorite(x, fall))",
        "∃x (Favorite(x, winter))",
        "∀x (Student(x) ∧ Want(x, long) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "Want(james, long)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": 1.2238528728485107,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "FavoriteSeason(x, y)",
        "WantLongVacation(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀y (∃x (FavoriteSeason(x, y)))",
        "(FavoriteSeason(emma, summer))",
        "(¬FavoriteSeason(mia, summer))",
        "(Student(x) ∧ WantLongVacation(x) → FavoriteSeason(x, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(mia, spring)",
      "perplexity": 1.2462778091430664,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 338
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "∃x (Flies(susan, x))",
        "¬(SameAirport(x, x))",
        "Flies(john, lga)"
      ],
      "fol_conc": "∃x (Flies(susan, x) ∧ SameAirport(x, lga))",
      "perplexity": [
        1.5785239934921265,
        1.0366877317428589
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Airport(y)"
      ],
      "fol_consts": [
        "susan",
        "john"
      ],
      "fol_rules": [
        "∀x (∃y (Airport(y)) → Flies(susan, x) ∧ ¬(Susan(x)))",
        "¬Flies(john, x)"
      ],
      "fol_conc": "∃y (Airport(y) → Flies(susan, y))",
      "perplexity": 3.089848518371582,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(x, x)"
      ],
      "fol_consts": [
        "Susan",
        "John"
      ],
      "fol_rules": [
        "∀x (Flies(x, LGA))",
        "¬(SameAirport(LGA, LGA)) → ¬(Flies(Susan, Susan))",
        "(Flies(John, LGA) ∧ SameAirport(John, LGA))"
      ],
      "fol_conc": "∃x (Flies(Susan, x) ∧ SameAirport(x, LGA))",
      "perplexity": 2.3393635749816895,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 339
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x, y)",
        "PremieredBy(y, z)",
        "Orchestra(z)",
        "LedByConductor(z)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennaMusicSociety"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Composer(symphony9, x))",
        "PremieredBy(viennaMusicSociety, symphony9)",
        "Orchestra(viennaMusicSociety)",
        "LedByConductor(beethoven)"
      ],
      "fol_conc": "∃x (Composer(x, beethoven))",
      "perplexity": [
        1.4983547925949097,
        1.0334389209747314
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composer(y)",
        "Write(x, y)",
        "Premiere(z, w)",
        "Orchestra(w)",
        "Lead(v, u)",
        "Conductor(u)",
        "Symphony(x)"
      ],
      "fol_consts": [
        "beethoven",
        "violinistsociety"
      ],
      "fol_rules": [
        "∀x (Music(violinist)) → ∃y ((Composer(y) ∧ Write(y, violinist)))",
        "(Premiere(symphony9, society) ∧ Orchestra(socity))",
        "Orchestras(x) ∧ Lead(viennaorchestra, conductor)",
        "∀x (Music(symphony9) → Beethoven(write, symphony9) ∨ Symphony(violinist))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": 2.873358964920044,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Write/2, Write/0, Beethoven/2, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Write/2, Write/0, Beethoven/2, Beethoven/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "PremieredBy(y, x)",
        "PremieredBy(x)",
        "MusicPiece(y)",
        "MusicPiece(z)",
        "Write(x)",
        "PremieredBy(x)",
        "MusicPiece(x)",
        "MusicPiece(y)",
        "MusicPiece(z)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "∀x (MusicPiece(x))",
        "∃x ((PremieredBy(vienna music society, symphony no. 9)) ∧ MusicPiece(symphony no. 9))",
        "Write(beethoven, symphony no. 9)"
      ],
      "fol_conc": "Write(beethoven)",
      "perplexity": 3.6681227684020996,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((PremieredBy(vienna music society, symphony no. 9)) ∧ MusicPiece(symphony no. 9))"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 340
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "ContainKnowledge(x)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainKnowledge(x))",
        "∀x ∀y (Read(x, y) ∧ Book(y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → Smarter(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": [
        1.0800764560699463,
        1.0195235013961792
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "Contains(book, knowledge)",
        "∀x ∀y (Read(x, y) → Gain(x, knowledge))",
        "∀x (Gain(x, knowledge) → Smarter(x))"
      ],
      "fol_conc": "Smarter(harry, before)",
      "perplexity": 1.2583061456680298,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Smarter/1, Smarter/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Smarter/1, Smarter/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contain(x, y)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "SmarterThanBefore(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "harry"
      ],
      "fol_rules": [
        "∀x (Contain(x, y)) → GainKnowledge(x)",
        "∀x (Read(x, y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → SmarterThanBefore(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "SmarterThanBefore(harry)",
      "perplexity": 1.6416527032852173,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 341
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Infinniqnticrslingervnkyt",
        "Imbingerverrionneauhrnt"
      ],
      "fol_consts": [
        "Iviue gklrtiblygnerei', iylervnsklrtiruck.](2: ",
        "1."
      ],
      "fol_rules": [
        "Instringerverlngervniqnticssinny",
        "Imviue gklktilstklntirtik.",
        "Iviue kliyllnftittisnrygnneauhrnt"
      ],
      "fol_conc": "Unrloungervniqnticssinnylss",
      "perplexity": [
        4.563802242279053,
        15.706348419189453
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Instringerverlngervniqnticssinny"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 342
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "University(y)",
        "Private(x)"
      ],
      "fol_consts": [
        "%Yale%",
        "But I don't know what the constants are. They could be variables or numbers.",
        "%IvyLeague%"
      ],
      "fol_rules": [
        "∃x (yale x ∧ ivyleague(x))",
        " ∀x (ivyleague(y) → university(x))",
        " ∃x (yale x ∧ private(x))",
        "  ∀x (private(y) ∨ ivyleague(x)"
      ],
      "fol_conc": "∃x (University(y) ∧ Private(x))",
      "perplexity": [
        1.7619527578353882,
        4.370296955108643
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (yale x ∧ ivyleague(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(i, x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "endowment"
      ],
      "fol_rules": [
        "(Newhaven(yale)) → (Endowment(yn))",
        "∀x ∃z ((Private(x) ∨ Ivy(i, x)))"
      ],
      "fol_conc": "((Pierson(piersoncollegei) ∧ Residential(zyalesexfordiafrobericolegeoedwardsoniacolligecolleges)) ⊕ (Be(ynewhavenuailex, r)))",
      "perplexity": 16.979520797729492,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Endowment(x)",
        "MovedTo(x, y)",
        "Dependent(yaleuniversity, x)"
      ],
      "fol_consts": [
        "yaleuniversity",
        "newhaven",
        "residentialcollegesatyleanycollege",
        "residentialeducationschoolsatyleaniancscolorages",
        "professionalschoolsatsyledianycsschoolsofartsandsciencesschools",
        "benjaminfranklincollege",
        "berkercollage",
        "branfordcollergecollege"
      ],
      "fol_rules": [
        "∀x (Endowment(x) ∨ MovedTo(yaleuniversity, x))",
        "(Dependent(renvilleyaledenistate, yaleuniversity)) ∧ (∀x (MovedTo(renvilleyaledenistate, x))) ⊕ (∃x (Dependent(x, newhaven)))",
        "∀x (Endowment(x) ∨ MovedTo(yaleuniversity, x)) ∧ Dependent(renvilleyaledenistate, yaleuniversity)",
        "(Dependent(newhavensecuritycollegeschoolatyleanycollege, renvilleyaledenistate)) ⊕ (∃x (Dependent(x, newhaven)))",
        "∀x ((MovedTo(renvilleyaledenistate, x) ∨ Dependent(renvilleyaledenistate, yaleuniversity))) ∧ Dependent(newhavensecuritycollegeschoolatyleanycollege)",
        "(Dependent(renvileynedentstate, newhaven)) ⊕ ∃x (Endowment(x) ∨ MovedTo(yaleuniversity, x))"
      ],
      "fol_conc": "∀x ((Dependent(renvilleyaledenistate, yaleuniversity)) ∧ (∀x (MovedTo(renvileynedentstate, x))) ⊕ (∃x (Dependent(x, newhaven))))",
      "perplexity": 2.480698823928833,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dependent/1, Dependent/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Dependent/1, Dependent/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 343
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ContainsKnowledge(x)",
        "ReadsBook(x, y)",
        "GainKnowledge(x)",
        "BecomesSmarter(x)",
        "Book(y)",
        "AuthorOf(z, w)",
        "TitleIs(w, v)"
      ],
      "fol_consts": [
        "harry",
        "walden_by_thoreau",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainsKnowledge(x))",
        "∀x, y (ReadsBook(x, y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → BecomesSmarter(x))",
        "ReadsBook(harry, walden_by_thoreau)",
        "Book(walden_by_thoreau)",
        "AuthorOf(thoreau, walden_by_thoreau)",
        "TitleIs(walden_by_thoreau, walden)",
        "∀y (TitleIs(x, y) → ContainsKnowledge(x))",
        "∀z, w ((AuthorOf(z, w)) → GainKnowledge((ReadsBook(_, z))) )",
        "(ReadsBook(harry, walden_by_thoreau) & ContainsKnowledge(walden_by_thoreau))"
      ],
      "fol_conc": "ContainsKnowledge(walden_by_thoreau)",
      "perplexity": [
        1.3975255489349365,
        1.0834386348724365
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (ReadsBook(x, y) → GainKnowledge(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(z, x)",
        "Gain(z, y)",
        "Becomes(z)"
      ],
      "fol_consts": [
        "harry",
        "walden"
      ],
      "fol_rules": [
        "∀b (Book(b) → ∃k (Contains(b, k)))",
        "∀p (Person(p)) → Read(p, b) → Gain(p, k)",
        "Gain(p, k) → Becomes(p)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.7071341276168823,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ContainsKnowledge(x)",
        "Reads(y, x)",
        "GainsKnowledge(z)",
        "GainsKnowledge(w)",
        "Reads(y, w)",
        "ContainsKnowledge(t)",
        "ContainsKnowledge(u)",
        "Reads(v, t)",
        "Reads(g, u)",
        "ContainsKnowledge(b)",
        "Reads(h, b)",
        "Reads(i, c)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "walden",
        "harry",
        "harry",
        "harry"
      ],
      "fol_rules": [
        "∀x (ContainsKnowledge(x)) → ¬GainsKnowledge(z)",
        "∃y ∃x (Reads(y, x) → GainsKnowledge(w))",
        "∀u ∀v (Reads(v, u) → ContainsKnowledge(b))",
        "GainsKnowledge(z)",
        "Reads(harry, walden)"
      ],
      "fol_conc": "ContainsKnowledge(walden)",
      "perplexity": 3.092141628265381,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 344
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "analog",
        "digital_media",
        "printed_text",
        "streaming_service",
        "hardcover_book",
        "1984"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))",
        "HardcoverBook(x) → PrintedText(x)",
        "StreamingService(1984) → HardcoverBook(1984)"
      ],
      "fol_conc": "¬StreamingService(1984)",
      "perplexity": [
        1.1136157512664795,
        1.271437168121338
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Analog(x)",
        "Digital(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬Digital(x)",
        "∀x (Printed(x) → Analog(x))",
        "∀x (Streaming(x) → Digital(x))",
        "Hardcover(x) → Printed(x)",
        "Streaming(1984) → Hardcover(1984)"
      ],
      "fol_conc": "¬Streaming(1984)",
      "perplexity": 1.2637789249420166,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984",
        "1984"
      ],
      "fol_rules": [
        "PrintedText(1984)"
      ],
      "fol_conc": "(¬Digital(1984))",
      "perplexity": 7.756796836853027,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 345
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x, y)",
        "PremieredBy(y, z)",
        "Orchestra(z)",
        "LedByConductor(z)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennaMusicSociety"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Composer(symphony9, x))",
        "PremieredBy(viennaMusicSociety, symphony9)",
        "Orchestra(viennaMusicSociety)",
        "LedByConductor(beethoven)"
      ],
      "fol_conc": "∃x (Composer(x, beethoven))",
      "perplexity": [
        1.4983547925949097,
        1.0334389209747314
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composer(y)",
        "Write(x, y)",
        "Premiere(z, w)",
        "Orchestra(w)",
        "Lead(v, u)",
        "Conductor(u)",
        "Symphony(x)"
      ],
      "fol_consts": [
        "beethoven",
        "violinistsociety"
      ],
      "fol_rules": [
        "∀x (Music(violinist)) → ∃y ((Composer(y) ∧ Write(y, violinist)))",
        "(Premiere(symphony9, society) ∧ Orchestra(socity))",
        "Orchestras(x) ∧ Lead(viennaorchestra, conductor)",
        "∀x (Music(symphony9) → Beethoven(write, symphony9) ∨ Symphony(violinist))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": 2.873358964920044,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Write/2, Write/0, Beethoven/2, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Write/2, Write/0, Beethoven/2, Beethoven/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "PremieredBy(y, x)",
        "PremieredBy(x)",
        "MusicPiece(y)",
        "MusicPiece(z)",
        "Write(x)",
        "PremieredBy(x)",
        "MusicPiece(x)",
        "MusicPiece(y)",
        "MusicPiece(z)"
      ],
      "fol_consts": [
        "beethoven",
        "vienna music society",
        "symphony no. 9"
      ],
      "fol_rules": [
        "∀x (MusicPiece(x))",
        "∃x ((PremieredBy(vienna music society, symphony no. 9)) ∧ MusicPiece(symphony no. 9))",
        "Write(beethoven, symphony no. 9)"
      ],
      "fol_conc": "Write(beethoven)",
      "perplexity": 3.6681227684020996,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((PremieredBy(vienna music society, symphony no. 9)) ∧ MusicPiece(symphony no. 9))"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 346
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Disease(x)",
        "Infectious(x)",
        "Virus(x)",
        "Cause(x, y)",
        "Animal(x)",
        "Human(x)",
        "Mammal(x)",
        "Symptoms(x, y)",
        "Coughing(x)",
        "Fever(x)",
        "Headache(x)",
        "MusclePain(x)",
        "FeelingTired(x)",
        "Glu(x)",
        "Occur(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypox_virus"
      ],
      "fol_rules": [
        "Disease(monkeypox) ∧ Infectious(monkeypox) ∧ ∃v (Virus(v) ∧ Cause(v, monkeypox))",
        "∃a ∃v (Animal(a) ∧ Virus(v) ∧ Cause(v, monkeypox) ∧ (a = human ∨ a ≠ human))",
        "∀h (Human(h))",
        "∀a (Mammal(a) → Animal(a))",
        "∃f (Fever(f) ∧ Symptoms(monkeypox, f)) ⊕ ∃h (Headache(h) ∧ Symptoms(monkeypox, h)) ⊕ ∃m (MusclePain(m) ∧ Symptoms(monkeypox, m)) ⊕ ∃t (FeelingTired(t) ∧ Symptoms(monkeypox, t))",
        "∀p (Glu(p) → ∃x (FeelingTired(x) ∧ x = p))"
      ],
      "fol_conc": "∃s (Coughing(s) ∧ (s = fever ∨ s = headache ∨ s = muscle pain ∨ s = feeling tired))",
      "perplexity": [
        1.2451910972595215,
        1.1040452718734741
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃a ∃v (Animal(a) ∧ Virus(v) ∧ Cause(v, monkeypox) ∧ (a = human ∨ a ≠ human))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Caused(x, y)",
        "Occur(x, y)",
        "Human(x)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)",
        "Glu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "Infectious(monkeypox) ∧ Caused(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, human)",
        "Human(human)",
        "Mammal(human)",
        "Animal(human)",
        "∀x (Symptom(monkeypox, x) → (Fever(x) ⊕ Headache(x) ⊕ Muscle(x) ⊕ Tired(x)))",
        "∀x (Glu(x) → Tired(x))"
      ],
      "fol_conc": "Symptom(monkeypox, coughing)",
      "perplexity": 1.2537015676498413,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Disease(x)",
        "Virus(y, x)",
        "OccurIn(y, z)",
        "Mammal(z)",
        "Animal(z)",
        "SymptomOf(x, y)",
        "FeelTiredWhenGetGlu(z)"
      ],
      "fol_consts": [
        "monkeypox",
        "human",
        "coughing",
        "glu",
        "fever",
        "headache",
        "musclepain",
        "tireness",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "Disease(monkeypox)",
        "Virus(monkeypoxvirus, monkeypocx) → OccurIn(monkeypovirrus, human)",
        "Mammal(human)",
        "Animal(mammal)",
        "∀y (SymptomOf(monkeypoxx, y) ⊕ SymptomOf(monkeypox, fever))",
        "∀z (∃w (FeelTiredWhenGetGlu(w) ∧ FeelTiredWhenGetGlu(z))) → ∃x ((Disease(x) ∧ Virus(monkeypovirus, x) ∧ OccurIn(monkepyvrius, human)) → SymptomOf(x, y))",
        "∀y (SymptomOf(monkeypox, headache) ⊕ SymptomOf(monkeypoxx, musclepain))"
      ],
      "fol_conc": "SymptomOf(monkeypox, coughing)",
      "perplexity": 2.0718834400177,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Mammal/1, Mammal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Mammal/1, Mammal/0"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 347
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "LabelledData(x)",
        "TrainedWithML(x)",
        "NotRL(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml"
      ],
      "fol_rules": [
        "∀x ((Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x)) → Supervised(x))",
        "∃x (Unsupervised(x) ∧ ¬LabelledData(x))",
        " ∀x ((TrainedWithML(x) ∧ Reinforcement(x)) → NotRL(x))",
        " ∀x (RequiresLabelledData(x) → Supervised(x))"
      ],
      "fol_conc": "Supervised(ml)",
      "perplexity": [
        1.3340004682540894,
        1.293811559677124
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Supervised(y)",
        "Unsupervised(y)",
        "Reinforcement(y)",
        "Requireslabelleddata(x)",
        "Stateofthearttextsummarizationmodel(x)"
      ],
      "fol_consts": [
        "ml",
        "summodel"
      ],
      "fol_rules": [
        "∀x ∀y (Category(x, y) → (Supervised(y) ⊕ Unsupervised(y) ⊕ Reinforcement(y)))",
        "¬Unsupervised(learning) → ¬Requireslabelleddata(x)",
        "(Stateofthearttextsummarizationmodel(ml) ∧ Category(ml, learning)) → ∃x (Machinelearningsumalgorithm(x))",
        "∀x ∀y ((Category(x, y) ∧ Reinforcement(y) ∧ Stateofthearttextsummarizationmodel(x)) → ¬Requireslabelleddata(x))",
        "(Requireslabelleddata(summodel) ∧ Category(summodel, mlalgorithms)) → Requireslabelleddata(ml)",
        "Supervised(learning) ⊕ Unsupervised(learning) ⊕ Reinforcement(learning) → Supervised(learningsumalgorithm)"
      ],
      "fol_conc": "Supervised(learningsumalgorithm)",
      "perplexity": 1.7255868911743164,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorize(x, y)",
        "Unsupervised(y)",
        "RequiresLabelledData(y)",
        "TrainedWithMLAlgorithm(z)",
        "RequiresLabelledData(e)"
      ],
      "fol_consts": [
        "machineLearningAlgorithms",
        "machineLearningAlgorithms"
      ],
      "fol_rules": [
        "(∀x (Categorize(x, machineLearningAlgorithms) → (∃y ((Unsupervised(y)) ⊕ RequiresLabelledData(e)))) ∧ Categorize(machineLearningAlgorithms, y))",
        "(RequiresLabelledData(z) ∨ Unsupervised(w))",
        "(∀x (TrainedWithMLAlgorithm(x)))",
        "(RequiresLabelledData(v))"
      ],
      "fol_conc": "Categorize(machineLearningAlgorithms, y) → Categorize(y, machineLearningAlgorithms)",
      "perplexity": 13.304852485656738,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 348
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "DonatedTo(x, y)"
      ],
      "fol_consts": [
        "picuris-mountains",
        "juan-de-onate"
      ],
      "fol_rules": [
        "∀x (LocatedIn(x, new-mexico) ∨ LocatedIn(x, texas)) ⊕ MountainRange(x)",
        "Visited(juan-de-onate, picuris-mountains)",
        "∀x (LocatedIn(picuris-mountains, x) → DonatedTo(x, Harding-Pegmatite-Mine})",
        "¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∀y (LocatedIn(y, x) → DonatedTo(y, Harding-Pegmatite-Mine)))",
        "InTexas(picuris-mountains )  ∨   Visited(juan-de-onate,picuris-mountains )"
      ],
      "fol_conc": "InTexas(picuris-mountains )  ∨   Visited(juan-de-onate,picuris-mountains )",
      "perplexity": [
        1.4914923906326294,
        1.2495085000991821
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (LocatedIn(picuris-mountains, x) → DonatedTo(x, Harding-Pegmatite-Mine})"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x, y)",
        "Range(x)",
        "Located(x, y)",
        "Donated(x)",
        "Visited(x)",
        "Person(y)",
        "Name(y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "deonate"
      ],
      "fol_rules": [
        "(Location(picuris, newmexico)) ⊕ (Location(picuris, texas))",
        "(Juan(y) ∧ Visited(juan, picuris))",
        "(Donated(x) → Location(x, picuris))",
        "¬(∃x (Mountain(x, texas) ∧ Donated(x)))"
      ],
      "fol_conc": "Visited(juan, texy)",
      "perplexity": 1.8999367952346802,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x, y)",
        "IsAMountain_range_of(z)",
        "MountainRange(y)"
      ],
      "fol_consts": [
        "texas",
        "juan",
        "picurismountains",
        "newmexico"
      ],
      "fol_rules": [
        "(∃z (MountainRange(texas, z))) → (∀y ((IsAMountain_range_of(z)) ⊕ IsAMountain_range_of(y)))",
        "(¬(MountainRange(juan, y))) ∧ MountainRange(picurismountains, juan)",
        "∃x (MountainRange(x, picurusmounatsinfsy) → ¬IsAMountain_range_of(donation))",
        "(∀z ((IsAMountain_range_of(z)))) ⊕ IsAMountain_range_of(texas)",
        "(¬(MountainRange(juan))) ∧ (∃x (MountainRange(x, picurismountains) → ¬((IsAMountain_range_of(donation)) ∨ (IsAMountain_range_of(yy)))))",
        "∀z ((MountainRange(z)) ⊕ IsAMountain_range_of(texas))"
      ],
      "fol_conc": "(¬(MountainRange(juan, y))) ∧ (IsAMountain_range_of(y) ∨ ¬(MountainRange(x)))",
      "perplexity": 8.107799530029297,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: MountainRange/1, MountainRange/2.\n\n\nFatal error:  The following symbols are used with multiple arities: MountainRange/1, MountainRange/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 349
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "GivenOut(x, y, z)",
        "OnBachelor(x)",
        "Portrays(x, y)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃y GivenOut(roses, bachelor, pm8)",
        "∀x (GivenOut(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → ∃y Portrays(x, y))",
        "∀x ∀y (Portrays(x, y) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬GivenOut(breakingbad, monday, pm8)",
      "perplexity": [
        1.0870662927627563,
        1.0161006450653076
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realpeople(y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(roses, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.2369846105575562,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "OnTheBachelor(x)",
        "PortraysRealPeople(x)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "bachelor",
        "breakingbad",
        "monday",
        "8pm"
      ],
      "fol_rules": [
        "∃y ∃z (OnTV(y, monday, z) ∧ OnTV(y, monday, 8pm))",
        "∀x (Rose(x) → OnTheBachelor(x))",
        "∀x (OnTheBachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, monday, 8pm)",
      "perplexity": 1.4163721799850464,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 350
  },
  {
    "id": 91,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language generation task.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "IsMachineTranslation(e)",
        "Translate(translate(x), e)"
      ],
      "fol_consts": [
        "English",
        "e"
      ],
      "fol_rules": [
        "∀x (∃y (Translate(x, y) ∧ Translate(y, e)))",
        "∈∩ ∀y ((e = x ∨ ¬¬∀z (Translate(z, x))))",
        "∀x ∘((IsLanguageGeneration(x)) → (∧((Translate(translate(x), e)), IsMachineTranslation(e)) ∨ MachineTranslatedTextSequenceDoesNotMatchAnyOtherTranslations(e)))), Translate(Translate(English, e))"
      ],
      "fol_conc": "(∃x (IsMachineTranslation(e) ∧ Translate(Translate(translate(x), y)) ∨ ¬¬∀y (IsLanguageGeneration(y))))",
      "perplexity": [
        3.0156726837158203,
        2.4572741985321045
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∈∩ ∀y ((e = x ∨ ¬¬∀z (Translate(z, x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Natural(x)",
        "Language(x)"
      ],
      "fol_consts": [
        "text",
        "language",
        "translation"
      ],
      "fol_rules": [
        "∀x (Text(x)) → Language(rintexts)",
        "∃y (Machine(y, translation) ∧ Text(yn))"
      ],
      "fol_conc": "Language(rintexts)",
      "perplexity": 5.177934169769287,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorical(x)",
        "LanguageGenerationTask(x)",
        "NaturalLanguageProcessing(x)",
        "LanguageGenerationTask(x)"
      ],
      "fol_consts": [
        "NLPTasks",
        "NLPTasks",
        "NLPTasks",
        "NLPTasks"
      ],
      "fol_rules": [
        "∀x (Categorical(x) ∧ LanguageGenerationTask(y)) → ∃z ((NaturalLanguageProcessing(z, x))) ∨ (∀y (LanguageGenerationTask(y) ⊕ NaturalLanguageProcessing(z)))",
        "(NaturalLanguageProcessing(r) ∧ Categorical(n)) → ¬(NaturalLanguageProcessing(n) ∨ NaturalLanguageProcessing(r))"
      ],
      "fol_conc": "∃x ((Categorical(x) ∧ LanguageGenerationTask(x)) ∨ (∀y (LanguageGenerationTask(y) ⊕ NaturalLanguageProcessing(z))))",
      "perplexity": 3.8204309940338135,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NaturalLanguageProcessing/2, NaturalLanguageProcessing/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NaturalLanguageProcessing/2, NaturalLanguageProcessing/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 351
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked_by_melissa",
        "dried_thai_chilies"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "ProductOf(dried_thai_chilies, baked_by_melissa)",
      "perplexity": [
        1.063886046409607,
        1.0164775848388672
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Product(x, y)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) ∨ ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthai) ∨ Bakery(driedthai) → (Hotpot(driedthai) ∨ Spicy(driedthai))"
      ],
      "fol_conc": "Product(driedthai, bakedbymelissa)",
      "perplexity": 1.2264339923858643,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried thai chilies",
        "baked by melissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "ProductOf(dried thai chilies, baked by melissa)",
      "perplexity": 1.0802934169769287,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 352
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)",
        "Man(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x ((Man(x)) → (Kind(x) ⊕ Evil(x)))",
        "∀x ((Ugly(x)) → (¬Handsome(x)))",
        "∀x ((Evil(x)) → Ugly(x))",
        "∀x ((Gentleman(x)) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "CEO(harry)",
      "perplexity": [
        1.250016212463379,
        1.0775479078292847
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceo(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceo(x) → Gentleman(x))"
      ],
      "fol_conc": "Ceo(harry)",
      "perplexity": 1.195520043373108,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x ((Ugly(x) ∧ Handsome(x)) → ∃y (Handsome(y)))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x ((CEO(x) ⊕ Gentleman(x)) → ¬Gentleman(y))"
      ],
      "fol_conc": "Handsome(harry)",
      "perplexity": 1.3154454231262207,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 353
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "AmericanCity(x)",
        "NovelWriter(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "boston",
        "american_city",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "American(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets) ∧ WrittenBy(family_secrets, dani_shapiro)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0698050260543823,
        1.0086348056793213
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Written(x, y)",
        "Born(x, y)",
        "American(x)",
        "Writer(x)",
        "Novelwriter(x)"
      ],
      "fol_consts": [
        "familyhistory",
        "familyssecrets",
        "danishapiro",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x (Novel(x) ∧ Written(x, y) → Novelwriter(y))",
        "Writer(danishapiro)",
        "Written(familyhistory, danishapiro)",
        "Novel(familyhistory) ∧ Written(familyhistory, 2003)",
        "Podcast(familyssecrets) ∧ Written(familyssecrets, danishapiro)",
        "Born(boston, americancity)"
      ],
      "fol_conc": "Novel(familyssecrets)",
      "perplexity": 1.168009877204895,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "Writer(x)",
        "Novel(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "american_city",
        "boston",
        "american_city",
        "family_secrets"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → Writer(y))",
        "Writer(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets)",
        "BornIn(boston, american_city)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": 1.1994197368621826,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 354
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)",
        "NoTet(platypus)",
        "AreMammals(platypus, humans)"
      ],
      "fol_consts": [
        "platypus",
        "human",
        "platy",
        "Homo sapiens",
        "humans"
      ],
      "fol_rules": [
        "-∃x ((NoTeeth(x) ∨ Teeth(x)) → IsMammal(x)): Some mammals have teeth. If no mammals have teeth or a non-mammal has teeth, then the subject is a mammal.",
        "- Platypus: Mammal",
        "- Human: Mammal"
      ],
      "fol_conc": "Platypus are reptiles",
      "perplexity": [
        2.7439358234405518,
        2.110795736312866
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "-∃x ((NoTeeth(x) ∨ Teeth(x)) → IsMammal(x)): Some mammals have teeth. If no mammals have teeth or a non-mammal has teeth, then the subject is a mammal."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(y)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∀x (Platypus(x) → ¬Teeth(x))",
        "(Human(rina) ∧ Teeth(rina)) ⊕ ¬(Human(rina) ∨ Teeth(rina))"
      ],
      "fol_conc": "Mammal(rplatypus)",
      "perplexity": 2.841607093811035,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∀x (Mammal(x)) → ∃y (HasTeeth(y, x) ∨ ¬(HasTeeth(y, x)))",
        "(Mammal(x)) ∧ HasTeeth(x)",
        "(Mammal(x)) ∧ ¬(HasTeeth(x))"
      ],
      "fol_conc": "¬(Mammal(platypus) ⊕ Mammal(humans))",
      "perplexity": 2.171592950820923,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasTeeth/1, HasTeeth/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasTeeth/1, HasTeeth/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 355
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(y)",
        "HasAccessToProgram()",
        "CanCompose(x)"
      ],
      "fol_consts": [
        "george",
        "music"
      ],
      "fol_rules": [
        "∀x (Likes(george, music) → WantsToCompose(music))",
        "HasAccessToProgram() → CanCompose()",
        "(WantsToCompose(x) ∧ CanCompose()) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose()",
      "perplexity": [
        1.5744704008102417,
        1.0809179544448853
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "HasAccessToProgram() → CanCompose()"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x, y)",
        "Wants(y, z)",
        "Has(x, y)",
        "Can(z)",
        "Compose(w)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Music(x) → Wants(george, compose))",
        "∀y ((Program(y) ∧ Has(george, y))) → Can(compose)",
        "(Can(compose) ∧ Wants(compose)) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(compose)",
      "perplexity": 1.6768630743026733,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Compose/1, Compose/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Compose/1, Compose/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(y)",
        "HasAccessToProgram(z)",
        "CanCompose(x)",
        "WillCompose(y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(george, x) → WantsToCompose(x))",
        "∀y (HasAccessToProgram(y) ∧ CanCompose(george) → WillCompose(george))",
        "∀z ((WantsToCompose(z) ∧ CanCompose(z)) → WillCompose(z))"
      ],
      "fol_conc": "¬WillCompose(x) → ¬CanCompose(george)",
      "perplexity": 1.3746250867843628,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 356
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "LastOlympicGames(x)",
        "Location(x, y)",
        "WonMostMedals(x, y)",
        "Country(x)",
        "Medals(x, y)",
        "UnitedStates"
      ],
      "fol_consts": [
        "tokyo"
      ],
      "fol_rules": [
        "SportingEvent(OlympicGames(tokyo))",
        "LastOlympicGames(OlympicGames(tokyo))",
        "∀x ((SportingEvent(x) ∧ LastOlympicGames(x)) → WonMostMedals(UnitedStates, x))",
        "∀x (WonMostMedals(UnitedStates, x) → ∃y (SportingEvent(x) ∧ LastOlympicGames(x) ∧ Location(x, y)))",
        "∀x ((SportingEvent(x) ∧ Location(x, y)) → ∃z ((SportingEvent(x) ∧ Location(x, y) ∧ LastOlympicGames(z)) → (z = x)))"
      ],
      "fol_conc": "¬(SportingEvent(OlympicGames(tokyo)) ∧ LastOlympicGames(OlympicGames(tokyo)))",
      "perplexity": [
        1.4748461246490479,
        1.1545791625976562
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "SportingEvent(OlympicGames(tokyo))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Olympic(x)",
        "Won(x, y, z)",
        "Medals(x, y, z)"
      ],
      "fol_consts": [
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(games) ∧ Sporting(games)",
        "Olympic(lastgames) ∧ Location(lastgames, tokyo)",
        "Won(unitedstates, lastgames, most)",
        "∀x (Medals(x, lastgames, most) → Won(x, lastgames, most))"
      ],
      "fol_conc": "¬Location(lastgames, tokyo)",
      "perplexity": 1.4206390380859375,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "GamesIn(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "olympic_games_usa_won_most_medals",
        "tokyo",
        "olympic_games_usa_won_most_medals"
      ],
      "fol_rules": [
        "SportingEvent(olympic_games_usa_won_most_medals)",
        "GamesIn(olympic_games_usa_won_most_medals, tokyo)",
        "WonMostMedals(olympic_games_usa_won_most_medals, olympic_games_usa_won_most_medals)"
      ],
      "fol_conc": "¬GamesIn(olympic_games_usa_won_most_medals, tokyo)",
      "perplexity": 1.893216848373413,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 357
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1, 'cril' to understand how yourkyar's crentoreyss is in the sknech-nuttyardt,"
      ],
      "fol_consts": [
        "calumb"
      ],
      "fol_rules": [],
      "fol_conc": "Cilly!",
      "perplexity": [
        5.744722843170166,
        13.818531036376953
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cilly!"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Alien(zeros, cousins)",
        "Achievement1(x)",
        "Aliceein(nust, cousins)"
      ],
      "fol_consts": [
        "realty",
        "alieeion",
        "aueceion"
      ],
      "fol_rules": [
        "If1alieein(zates, cousins) ∧ Achievement2(x) ∧ Excouteeilage1(zateuetch, cousins) ∧ Couskouslionn(axiotgion) ∧ Xerieein(vueceitsei, cousin) ∧ ∃x (Couskouslionn(x))"
      ],
      "fol_conc": "Aliceein(zates, cousins) ∨ ∀x (Itoochy1aueceiotrialiaeicuioutauretchertyttsnatvoykieslionn(zareuetch, couscouslionn))",
      "perplexity": 10.39339542388916,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Ficrae(x)",
        "Neref(n)"
      ],
      "fol_consts": [
        "_",
        "_"
      ],
      "fol_rules": [
        "∀v (Ficrae(_)) → Neref(u, v)",
        "¬((Neref(p)) ⊕ ¬(Neref(h)))",
        "∃x ((Ficrae(k)))",
        "(Ficrae(_))"
      ],
      "fol_conc": "((((Ficrae(u)) ∧ Neref(t))))",
      "perplexity": 24.32681655883789,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Neref/2, Neref/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Neref/2, Neref/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 358
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(y)"
      ],
      "fol_consts": [
        "zahadid",
        "max"
      ],
      "fol_rules": [
        "∀x (Timelssess(x) ∧ !MassProductDesign(x)) ∨ (∃y (Evocative(Perfect))), ∀x∈{max}(Max is a mass product design of x and Evocative(Max)), ∃x Timeless(x)",
        "fol_conc",
        "Timeless(zahadid) ∨ Evocative(max)"
      ],
      "fol_conc": "A design by Max is evocative and dreamy.",
      "perplexity": [
        2.7707319259643555,
        2.632500171661377
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Timelssess(x) ∧ !MassProductDesign(x)) ∨ (∃y (Evocative(Perfect))), ∀x∈{max}(Max is a mass product design of x and Evocative(Max)), ∃x Timeless(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Zaha(x)",
        "Kelly(y)"
      ],
      "fol_consts": [
        "rina",
        "sam"
      ],
      "fol_rules": [
        "(∀x ∀y (Design(x, y) → ¬Mass(x)))",
        "(¬(Max(rina)) ∧ Max(kellywearstler)) ∨ ((Zaha(rina) ∨ Kelly(wearstler)) ∧ Evocative(zaha, kelly))"
      ],
      "fol_conc": "Evocative(zaha, max)",
      "perplexity": 3.907809019088745,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hasMassProductDesign(x)",
        "isTimeless(x)"
      ],
      "fol_consts": [
        "max",
        "kellywearstler",
        "zahaihadid"
      ],
      "fol_rules": [
        "∀x (hasMassProductDesign(x) → ¬(isTimeless(x) ∨ isTimeless(kellywearstler)))"
      ],
      "fol_conc": "¬(hasMassProductDesign(max)) ∧ hasMassProductDesign(zahaihadid)",
      "perplexity": 2.9786500930786133,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 359
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "MildFlu(x)",
        "SurvivalRate(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRate(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(cancer) ∧ SevereCancer(cancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRate(x))",
        "ColorectalCancer(cancer) ∧ BileDuctCancer(cancer) ∧ SurvivalRate(cancer) → ¬BileDuctCancer(cancer)"
      ],
      "fol_conc": "∀x (BileDuctCancer(x) ∨ Cholangiocarcinoma(x) → (BileDuctCancer(x) ∧ MildFlu(x)))",
      "perplexity": [
        1.1003797054290771,
        1.1703213453292847
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x)",
        "Severe(x)",
        "Mild(x)",
        "Colorectal(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Bile(x)"
      ],
      "fol_consts": [
        "colorectal",
        "bile",
        "cholangiocarcinoma"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) → Deadly(x))",
        "Severe(bile)",
        "Bile(cholangiocarcinoma)",
        "∀x (Mild(x) → ¬Low(x))",
        "Colorectal(colorectal) ∧ Bile(colorectal) → ¬Colorectal(colorectal)"
      ],
      "fol_conc": "(Colorectal(colorectal) ∨ Cholangiocarcinoma(colorectal)) → (Colorectal(colorectal) ∧ Bile(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.2792623043060303,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 360
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorksRegularlyOftenAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyingOrganizingSpacesInHome(x)",
        "VisitStoreRegularly(x, y)",
        "GoesToBedLateAndWakesUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "officeSupply"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x)): All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksRegularlyOftenAtHome(x) → TidyingOrganizingSpacesInHome(x)) : All people who work regularly and often at home spend free time tidying and organizing the spaces in their homes.",
        "VisitStoreRegularly(remy, officeSupply)",
        "∃x ((TidyingOrganizingSpacesInHome(x) → ¬GoesToBedLateAndWakesUpAfterNoon(x))) : If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(∃x (TidyingOrganizingSpacesInHome(remy) ∧ GoesToBedLateAndWakesUpAfterNoon(x))) ⊕ ¬((TidyingOrganizingSpacesInHome(remy)) ∨ (GoesToBedLateAndWakesUpAfterNoon(x))): Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "fol_conc": "VisitStoreRegularly(remy, officeSupply)",
      "perplexity": [
        1.2690494060516357,
        1.0767649412155151
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Works(x, z)",
        "Home(y)",
        "Regularly(x)",
        "Often(x)",
        "Fullystocked(z)",
        "Impressive(w)",
        "Tidy(x)",
        "Organize(x)",
        "Visit(z)",
        "Goeslate(x)",
        "Wakeupafternoon(x)",
        "Remygoeshomeoffice(x)"
      ],
      "fol_consts": [
        "remy",
        "largedesktopmonitor",
        "homeoffice"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Regularly(worksat, home))",
        "∀x (Fullystocked(x) ∧ Impressive(y) → Owns(x, largedesktopmonitor))",
        "∀x (Regularly(w, z) ∨ Often(w, z)) → Tidy(oftenw, x)",
        "∀x (Regularly(workathome, y)) → Visit(z)",
        "∀x (Tidy(x) → ¬Goeslate(y) ∧ Wakeupafternoon(y))",
        "Remygoeshomeoffice(r) → Remybothgoestolateandwakeupafternoontheirhomeorremydoesenottolatesnororganizesherhomeandvisitsstoreoften(r)"
      ],
      "fol_conc": "Regularly(visit, officeupply)",
      "perplexity": 2.593095541000366,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHomeRegularlyAndOften(x)",
        "HomeOffice(x)",
        "TidyOrganizeSpacesInHomeFreeTime(x)",
        "VisitOfficeSupplyStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "(∀x (Own(x, y) → WorkAtHomeRegularlyAndOften(x)))",
        "(∀x (HomeOffice(x) → Own(x, y)))",
        "(∀x ((WorkAtHomeRegularlyAndOften(x) ∧ TidyOrganizeSpacesInHomeFreeTime(x))) ⊕ ¬(TidyOrganizeSpacesInHomeFreeTime(x)))",
        "((∀x (VisitOfficeSupplyStore(x) → WorkAtHomeRegularlyAndOften(x))))",
        "(TidyOrganizeSpacesInHomeFreeTime(y) ∧ ¬WorkAtHomeRegularlyAndOften(x)) ⊕ TidyOrganizeSpacesInHomeFreeTime(z)",
        "((Own(remy, y) → WorkAtHomeRegularlyAndOften(remy)))",
        "(TidyOrganizeSpacesInHomeFreeTime(remy) ∧ ¬WorkAtHomeRegularlyAndOften(y)) ⊕ (¬TidyOrganizeSpacesInHomeFreeTime(z) ∨ VisitOfficeSupplyStore(w))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(r) → WorkAtHomeRegularlyAndOften(remy)",
      "perplexity": 1.8778806924819946,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 361
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "TravelToParisForHoneymoon(x)"
      ],
      "fol_consts": [
        "John"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        ", ∀x ((TravelToParisForHoneymoon(x) ∧ Wedding(x)))",
        "\n\t ∀x ((WeddingsInJuly(x) ∧ TravelToParisForHoneyMoon(x)) )",
        "∃x (AttendCelebration(John, x))"
      ],
      "fol_conc": "Child(John)",
      "perplexity": [
        2.152742624282837,
        1.8305162191390991
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", ∀x ((TravelToParisForHoneymoon(x) ∧ Wedding(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Has(x, y)",
        "Travels(x, y)",
        "Wedding(y)",
        "Child(x)",
        "July(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Has(x, wedding)) ∧ Has(x, child) → False(travels, paris)",
        "∀x (Travels(x, paris) ∧ Wedding(y) → Ybejuly(y))",
        "(Child(j) → ¬Travels(john, paris) ∧ No(wedding))",
        "Some(weds) ∨ Wellattended(weds) ∧ Johnhasweddings(weds)",
        "(Wellattended(weds) → (Johnhasweddings(weds) ∧ July(weds))) ∧ False(travels, paris)",
        "∀x (Has(x, wedding) ∧ Child(x) → Travels(john, paris))"
      ],
      "fol_conc": "False(travels, paris)",
      "perplexity": 2.33038330078125,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Child/1, Child/0, Wedding/1, Wedding/0, Travels/2, Travels/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Child/1, Child/0, Wedding/1, Wedding/0, Travels/2, Travels/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "HasChild(x)",
        "TravelToParisForHoneymoon(x)",
        "HappensInMonth(x, y)",
        "AttendsWedding(x)",
        "HasChild(y)"
      ],
      "fol_consts": [
        "John",
        "July"
      ],
      "fol_rules": [
        "(∀x (HasChild(x) → TravelToParisForHoneymoon(x)) ∧ HasChild(x)) ∨ ∀x ((TravelToParisForHoneymoon(x) → HasChild(y)))",
        "HappensInMonth(July, x)",
        "(∀x (AttendsWedding(x) ∧ HappensInMonth(July, y))) ∨ ∃x (HasChild(John) ∧ TravelToParisForHoneymoon(John))",
        "(∀x ((HasChild(x) → HasChild(y))) ∧ (HappensInMonth(July, x) ∨ HappensInMonth(July, y)) ∧ AttendsWedding(x))"
      ],
      "fol_conc": "(∃x (HasChild(x)))",
      "perplexity": 2.2648494243621826,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 362
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "analog",
        "digital_media",
        "printed_text",
        "streaming_service",
        "hardcover_book",
        "1984"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))",
        "HardcoverBook(x) → PrintedText(x)",
        "StreamingService(1984) → HardcoverBook(1984)"
      ],
      "fol_conc": "¬StreamingService(1984)",
      "perplexity": [
        1.1136157512664795,
        1.271437168121338
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Analog(x)",
        "Digital(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬Digital(x)",
        "∀x (Printed(x) → Analog(x))",
        "∀x (Streaming(x) → Digital(x))",
        "Hardcover(x) → Printed(x)",
        "Streaming(1984) → Hardcover(1984)"
      ],
      "fol_conc": "¬Streaming(1984)",
      "perplexity": 1.2637789249420166,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984",
        "1984"
      ],
      "fol_rules": [
        "PrintedText(1984)"
      ],
      "fol_conc": "(¬Digital(1984))",
      "perplexity": 7.756796836853027,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 363
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "You can't read anything else to get better to be real people who have good enough fun."
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 364
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Square(x)",
        "FourSidedThing(x)",
        "Shape(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        ""
      ],
      "fol_conc": "∀x (Shape(x) ∧ Square(x))",
      "perplexity": [
        2.075451135635376,
        1.1886869668960571
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Square(x)",
        "Foursided(x)",
        "Shape(x)"
      ],
      "fol_consts": [
        "square",
        "shape"
      ],
      "fol_rules": [
        "∀x (Square(x) → Foursided(x))",
        "∀x (Foursided(x) → Shape(x))",
        "(Square(x) ∧ Shape(x))"
      ],
      "fol_conc": "All(squares)",
      "perplexity": 2.0726664066314697,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hasSides(x)",
        "isShape(x)"
      ],
      "fol_consts": [
        "square",
        "shape"
      ],
      "fol_rules": [
        "∀x (hasSides(x) → isShape(x))",
        "∃x (hasSides(x) ∧ isShape(x))"
      ],
      "fol_conc": "∀x (isShape(x) ∧ hasSides(x))",
      "perplexity": 1.4714155197143555,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 365
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": [
        1.0387587547302246,
        1.0129026174545288
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.1150457859039307,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": 1.0532784461975098,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 366
  },
  {
    "id": 197,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi barks and is a dog.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Terricolous(x)",
        "HasLegs(x)",
        "Jumps(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → Animal(x) ∧ Barks(x))",
        "∀x (Animal(x) ∧ Jumps(x) → Likes(jane, x))",
        "∀x (Animal(x) ∧ HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬Jumps(kiki) ∧ ¬HasLegs(kiki) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "Barks(kiki) ∧ Dog(kiki)",
      "perplexity": [
        1.0660533905029297,
        1.249355435371399
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Animal(x)",
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Terricolous(x)",
        "Legs(x)",
        "Jump(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → Animal(x) ∧ Bark(x))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (Legs(x) → Jump(x))",
        "∀x (Terricolous(x) → Legs(x))",
        "¬(Jump(kiki) ∧ Legs(kiki)) → (Terricolous(kiki) ∨ Legs(kiki))"
      ],
      "fol_conc": "Bark(kiki) ∧ Dog(kiki)",
      "perplexity": 1.1493972539901733,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬(Like(jane, x)))",
        "(Dog(y)) ⊕ ∀y ((Animal(y) ∧ Bark(y)) → Dog(y))",
        "¬(Like(jane, y)) → ∃y (Animal(y) ∧ Bark(y) ∧ Like(jane, y)) → ∀x (Bark(x) → ¬Like(jane, x))",
        "(∀x (Terricolous(x) ⊕ Animal(x))) ∧ (∀x ((Animal(x) ∧ Bark(x)) ∨ Terricolous(x)))"
      ],
      "fol_conc": "Dog(kiki) ∧ Bark(kiki)",
      "perplexity": 2.3974010944366455,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 367
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PerformIn(x)",
        "AttendAndEngage(x)",
        "ChaperoneDances(x)",
        "StudentAttendingSchool(x)",
        "InactiveDisinterestedMember(x)"
      ],
      "fol_consts": [
        "bonnie",
        "YoungChildOrTeenager(y)",
        "WishFurtherAcademicCareerAndEducationOpportunities(y)"
      ],
      "fol_rules": [
        "∀x (PerformIn(x) → AttendAndEngage(x))",
        "∀x ((PerformIn(x) ⊕ InactiveDisinterestedMember(x)))",
        "∀x (ChaperoneDances(x) → ¬StudentAttendingSchool(x))",
        "∀x (InactiveDisinterestedMember(x) → ChaperoneDances(x))",
        "∀y ((YoungChildOrTeenager(y) ∧ WishFurtherAcademicCareerAndEducationOpportunities(y)) → StudentAttendingSchool(y))"
      ],
      "fol_conc": "(∃x (ChaperoneDances(bonnie) ∨ PerformIn(bonnie))) → ((StudentAttendingSchool(bonnie)) ⊕ InactiveDisinterestedMember(bonnie))",
      "perplexity": [
        1.2432225942611694,
        1.0380806922912598
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x, y)",
        "Attend(y, z)",
        "Veryengaged(z)",
        "Chaperone(w)",
        "Student(t)",
        "Dances(w)",
        "Disinterested(u)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → ∃y (Attend(y, x) ⊕ Veryengaged(z)))",
        "∀z ((Perform(z) ⊕ Disinterested(w)))",
        "∀w (Chaperone(u) → ¬Student(v))",
        "∀u (Disinterested(x) ∧ Chaperone(y))"
      ],
      "fol_conc": "(Youngchild(bonnie) ∨ Teenager(bonnie)) ⊕ Disinterested(w)",
      "perplexity": 1.9824235439300537,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Performs(x, y)",
        "Attend(z)",
        "EngagedWithSchoolEvents(y, z)",
        "ChaperoneHighschoolDances(w, x)"
      ],
      "fol_consts": [
        "bonnie",
        "youngchildorteenager"
      ],
      "fol_rules": [
        "(∀x (Performs(x, y) → Attend(z))) ∧ ¬(Attend(z)) ⊕ Performs(x, z)",
        "(∃y ((ChaperoneHighschoolDances(w, x)) → ¬StudentWhoAttendsTheSchool(y, z)))",
        "∀x (InactiveAndDisinterestedMemberOfCommunity(w) ∧ ChaperoneHighschoolDances(z, y))"
      ],
      "fol_conc": "(∃w ((Performs(bonnie, youngchildorteenager) → StudentWhoAttendsTheSchool(youngchildorteenager, x))) ⊕ ¬(StudentWhoAttendsTheSchool(youngchildorteenager, x) ∨ InactiveAndDisinterestedMemberOfCommunity(z)))",
      "perplexity": 2.7758800983428955,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 368
  },
  {
    "id": 104,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Twin(x, y)",
        "Triplet(x, y, z)",
        "Siblings(x, y)",
        "SameAge(x, y)",
        "HangOut(x, y)",
        "Play(x, y)",
        "Complain(x)",
        "DevelopBonds(x)",
        "LiveAtHome(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "(Twin(x, y) ⊕ Triplet(x, y, z)) → HangOut(x, y) ∧ Play(x, y)",
        "(SameAge(x, y) → Twin(x, y) ⊕ Triplet(x, y, z))",
        "Complain(x) → SameAge(x, y)",
        "¬LiveAtHome(x) → ¬DevelopBonds(x)",
        "(HangOut(x, y) ∧ Play(x, y)) → ¬LiveAtHome(x)",
        "(Twin(x, y) ⊕ Triplet(x, y, z)) ⊕ ¬DevelopBonds(x)"
      ],
      "fol_conc": "¬(Twin(luke, y) ⊕ Triplet(luke, y, z)) ∧ ¬Complain(luke)",
      "perplexity": [
        1.087146520614624,
        1.1624399423599243
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "Siblings(x, y)",
        "Sameage(x, y)",
        "Annoying(x, y)",
        "Complain(x, y)",
        "Hangingout(x, y)",
        "Play(x, y)",
        "Home(x)",
        "Bond(x, y)",
        "Regular(x, y)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x (Twin(x) ⊕ Triplet(x)) → ∀y (Siblings(x, y) → Hangingout(x, y) ∧ Play(x, y))",
        "∀x (Siblings(x, y) ∧ Sameage(x, y) → Twin(x) ⊕ Triplet(x))",
        "∀x (Complain(x, y) → Sameage(x, y))",
        "¬Regular(x, y) → ¬Bond(x, y)",
        "Hangingout(x, y) ∧ Play(x, y) → ¬Regular(x, y)",
        "Twin(luke) ⊕ Triplet(luke) → Bond(luke, luke)",
        "¬(Twin(luke) ⊕ Triplet(luke)) → ¬(Twin(luke) ⊕ Triplet(luke))"
      ],
      "fol_conc": "¬(Twin(luke) ⊕ Triplet(luke)) ∧ ¬Complain(luke, luke)",
      "perplexity": 1.1990209817886353,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SpendTimeWithAndPlay(x, y)",
        "HaveSameAgeSibling(x, y)",
        "ComplainAboutAnnoyingSibling(x)",
        "DoNotLiveAtHomeRegularly(x)",
        "DevelopStrongBondsWithFamilyMembers(x)"
      ],
      "fol_consts": [
        "luke",
        "luke"
      ],
      "fol_rules": [
        "∀x ∀y ((Twin(x, y) ⊕ Triplet(x)) → SpendTimeWithAndPlay(x, y))",
        "∀x ∃y (HaveSameAgeSibling(x, y) → Twin(x, y) ⊕ Triplet(x))",
        "∀x (∃y (ComplainAboutAnnoyingSibling(y) ∧ HaveSameAgeSibling(x, y)) → ComplainAboutAnnoyingSibling(x))",
        "∀x ((DoNotLiveAtHomeRegularly(x) → ¬DevelopStrongBondsWithFamilyMembers(x)))",
        "(DoNotLiveAtHomeRegularly(x) ⊕ DevelopStrongBondsWithFamilyMembers(x))",
        "Twin(luke, luke) ⊕ Triplet(luke)",
        "¬(Twin(luke, luke) ∨ Triplet(luke))"
      ],
      "fol_conc": "(ComplainAboutAnnoyingSibling(luke) → ¬DevelopStrongBondsWithFamilyMembers(luke))",
      "perplexity": 2.3129143714904785,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 369
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "MildFlu(x)",
        "SurvivalRate(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRate(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(cancer) ∧ SevereCancer(cancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRate(x))",
        "ColorectalCancer(cancer) ∧ BileDuctCancer(cancer) ∧ SurvivalRate(cancer) → ¬BileDuctCancer(cancer)"
      ],
      "fol_conc": "∀x (BileDuctCancer(x) ∨ Cholangiocarcinoma(x) → (BileDuctCancer(x) ∧ MildFlu(x)))",
      "perplexity": [
        1.1003797054290771,
        1.1703213453292847
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x)",
        "Severe(x)",
        "Mild(x)",
        "Colorectal(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Bile(x)"
      ],
      "fol_consts": [
        "colorectal",
        "bile",
        "cholangiocarcinoma"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) → Deadly(x))",
        "Severe(bile)",
        "Bile(cholangiocarcinoma)",
        "∀x (Mild(x) → ¬Low(x))",
        "Colorectal(colorectal) ∧ Bile(colorectal) → ¬Colorectal(colorectal)"
      ],
      "fol_conc": "(Colorectal(colorectal) ∨ Cholangiocarcinoma(colorectal)) → (Colorectal(colorectal) ∧ Bile(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.2792623043060303,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 370
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SevereCancer(x)",
        "MildFlu(x)",
        "SurvivalRate(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [
        "None"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRate(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(cancer) ∧ SevereCancer(cancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRate(x))",
        "ColorectalCancer(cancer) ∧ BileDuctCancer(cancer) ∧ SurvivalRate(cancer) → ¬BileDuctCancer(cancer)"
      ],
      "fol_conc": "∀x (BileDuctCancer(x) ∨ Cholangiocarcinoma(x) → (BileDuctCancer(x) ∧ MildFlu(x)))",
      "perplexity": [
        1.1003797054290771,
        1.1703213453292847
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x)",
        "Severe(x)",
        "Mild(x)",
        "Colorectal(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Bile(x)"
      ],
      "fol_consts": [
        "colorectal",
        "bile",
        "cholangiocarcinoma"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) → Deadly(x))",
        "Severe(bile)",
        "Bile(cholangiocarcinoma)",
        "∀x (Mild(x) → ¬Low(x))",
        "Colorectal(colorectal) ∧ Bile(colorectal) → ¬Colorectal(colorectal)"
      ],
      "fol_conc": "(Colorectal(colorectal) ∨ Cholangiocarcinoma(colorectal)) → (Colorectal(colorectal) ∧ Bile(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.2792623043060303,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 371
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input.txt"
      ],
      "fol_consts": [
        "2.2, 'This is a book that says 'You know what it does!'",
        "5.1: What did John do? What is his name?"
      ],
      "fol_rules": [
        "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
      ],
      "fol_conc": "The question asks about what Tom found out from his book. This is different from everyone saying 'You know why you don't want to read it.' You get really good on this thing when you find out that Tom got done by John!",
      "perplexity": [
        6.940479755401611,
        7.573236465454102
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Implicit(x)",
        "Interpretted(x)",
        "Instantuality(x)"
      ],
      "fol_consts": [
        "emplovee",
        "innout",
        "introdional"
      ],
      "fol_rules": [
        "Implicit(x)",
        "Interprelling(x)"
      ],
      "fol_conc": "Theiridity(uingemmetzment) ⊕ ¬Inestuct(untrodional) ∧ ∀x (Implicit(x)) ∧ Interprelling(x)",
      "perplexity": 8.219903945922852,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "clients to deliver goods(x)",
        "clients to deliver goods(y)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "((clients to deliver goods(i)) ∧ (people who don't own cars(u)))",
        "(((clients to deliver goods(a))))",
        "(clients to deliver goods(o, i))"
      ],
      "fol_conc": "((clients to deliver goods(i)) ∧ (people who don't own cars(u)))",
      "perplexity": 17.38105010986328,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ClientsToDeliverGoods/2, ClientsToDeliverGoods/1.\n\n\nFatal error:  The following symbols are used with multiple arities: ClientsToDeliverGoods/2, ClientsToDeliverGoods/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 372
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "LabelledData(x)",
        "TrainedWithML(x)",
        "NotRL(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml"
      ],
      "fol_rules": [
        "∀x ((Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x)) → Supervised(x))",
        "∃x (Unsupervised(x) ∧ ¬LabelledData(x))",
        " ∀x ((TrainedWithML(x) ∧ Reinforcement(x)) → NotRL(x))",
        " ∀x (RequiresLabelledData(x) → Supervised(x))"
      ],
      "fol_conc": "Supervised(ml)",
      "perplexity": [
        1.3340004682540894,
        1.293811559677124
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Supervised(y)",
        "Unsupervised(y)",
        "Reinforcement(y)",
        "Requireslabelleddata(x)",
        "Stateofthearttextsummarizationmodel(x)"
      ],
      "fol_consts": [
        "ml",
        "summodel"
      ],
      "fol_rules": [
        "∀x ∀y (Category(x, y) → (Supervised(y) ⊕ Unsupervised(y) ⊕ Reinforcement(y)))",
        "¬Unsupervised(learning) → ¬Requireslabelleddata(x)",
        "(Stateofthearttextsummarizationmodel(ml) ∧ Category(ml, learning)) → ∃x (Machinelearningsumalgorithm(x))",
        "∀x ∀y ((Category(x, y) ∧ Reinforcement(y) ∧ Stateofthearttextsummarizationmodel(x)) → ¬Requireslabelleddata(x))",
        "(Requireslabelleddata(summodel) ∧ Category(summodel, mlalgorithms)) → Requireslabelleddata(ml)",
        "Supervised(learning) ⊕ Unsupervised(learning) ⊕ Reinforcement(learning) → Supervised(learningsumalgorithm)"
      ],
      "fol_conc": "Supervised(learningsumalgorithm)",
      "perplexity": 1.7255868911743164,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorize(x, y)",
        "Unsupervised(y)",
        "RequiresLabelledData(y)",
        "TrainedWithMLAlgorithm(z)",
        "RequiresLabelledData(e)"
      ],
      "fol_consts": [
        "machineLearningAlgorithms",
        "machineLearningAlgorithms"
      ],
      "fol_rules": [
        "(∀x (Categorize(x, machineLearningAlgorithms) → (∃y ((Unsupervised(y)) ⊕ RequiresLabelledData(e)))) ∧ Categorize(machineLearningAlgorithms, y))",
        "(RequiresLabelledData(z) ∨ Unsupervised(w))",
        "(∀x (TrainedWithMLAlgorithm(x)))",
        "(RequiresLabelledData(v))"
      ],
      "fol_conc": "Categorize(machineLearningAlgorithms, y) → Categorize(y, machineLearningAlgorithms)",
      "perplexity": 13.304852485656738,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 373
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cevue: Expose secrets, to uncover new things, to solve unknowns"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eartrimet(x)",
        "(n)"
      ],
      "fol_consts": [
        "$1 = x, y.",
        "$1 = x, y."
      ],
      "fol_rules": [
        "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
      ],
      "fol_conc": "(((i) ∧ (d))) → ($1 = x, y.)",
      "perplexity": 14.97048282623291,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "((i) ∧ (d)) → ((v) ∨ eartrimet(x) ⊕ ¬eartrimet(x) ∧ eartrimet($1 = x, y.))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 374
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Favorite(x, y)",
        "WantLongVacation(x)",
        "Student(x)",
        "Season(x)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀x (Season(x) ∧ (x = spring ∨ x = summer ∨ x = fall ∨ x = winter))",
        "∀x (Student(x) ∧ WantLongVacation(x) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": [
        1.056544542312622,
        1.0199272632598877
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Season(x) ∧ (x = spring ∨ x = summer ∨ x = fall ∨ x = winter))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Favorite(x, y)",
        "Want(x, y)",
        "Student(x)",
        "Long(y)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∃x (Favorite(x, spring))",
        "∃x (Favorite(x, summer))",
        "∃x (Favorite(x, fall))",
        "∃x (Favorite(x, winter))",
        "∀x (Student(x) ∧ Want(x, long) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "Want(james, long)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": 1.2238528728485107,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "FavoriteSeason(x, y)",
        "WantLongVacation(x)",
        "Student(x)"
      ],
      "fol_consts": [
        "emma",
        "mia",
        "james",
        "spring",
        "summer",
        "fall",
        "winter"
      ],
      "fol_rules": [
        "∀y (∃x (FavoriteSeason(x, y)))",
        "(FavoriteSeason(emma, summer))",
        "(¬FavoriteSeason(mia, summer))",
        "(Student(x) ∧ WantLongVacation(x) → FavoriteSeason(x, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(mia, spring)",
      "perplexity": 1.2462778091430664,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 375
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space(x)",
        "Duster(x)",
        "HouseholdAppliance(x)"
      ],
      "fol_consts": [
        "space",
        "plunger",
        "vacuum",
        "vampire",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Space(space)",
        "Vacuum(vacuum)",
        "¬Suck(duster)",
        "HouseholdAppliance(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": [
        1.1055251359939575,
        1.0262552499771118
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Household(x)",
        "Appliance(x)",
        "Isin(x, y)"
      ],
      "fol_consts": [
        "space",
        "plunger",
        "vacuum",
        "vampire",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "Household(duster)",
        "Appliance(duster)",
        "¬Suck(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.3384466171264648,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "HouseholdAppliance(x)",
        "IsSpace(x)"
      ],
      "fol_consts": [
        "plungers",
        "vacuums",
        "vampires",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plungers)",
        "Suck(vacuums)",
        "Suck(vampires)",
        "Vacuum(space)",
        "HouseholdAppliance(duster)",
        "¬Suck(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.4131101369857788,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 376
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "FromIstanbul(x)",
        "BeginsWith(x, y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "thirtyFour",
        "thirtyFive"
      ],
      "fol_rules": [
        "∀x (FromIstanbul(x) → BeginsWith(RegistrationPlate(x), thirtyFour))",
        "¬(BeginsWith(x, thirtyFour)) → ¬FromIstanbul(x)",
        "FromIstanbul(RegistrationPlate(joe))",
        "BeginsWith(RegistrationPlate(tom), thirtyFive)",
        "∀x (BeginsWith(x, thirtyFive) → ¬BeginsWith(x, thirtyFour))"
      ],
      "fol_conc": "FromIstanbul(RegistrationPlate(tom))",
      "perplexity": [
        1.1210050582885742,
        1.024549961090088
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (FromIstanbul(x) → BeginsWith(RegistrationPlate(x), thirtyFour))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)",
        "Istanbul(y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "¬(From(x, istanbul)) ∨ Begins(x, 34)",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "From(tom, istanbul)",
      "perplexity": 1.2224282026290894,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "From(x, y)",
        "BeginsWith(x, y)",
        "VehicleRegistrationPlate(x)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → BeginsWith(x, 34))",
        "¬BeginsWith(x, 34) → ¬From(x, istanbul)",
        "VehicleRegistrationPlate(joe)",
        "From(tom, istanbul)",
        "(BeginsWith(x, 35) → ¬BeginsWith(x, 34))"
      ],
      "fol_conc": "VehicleRegistrationPlate(tom)",
      "perplexity": 1.3346506357192993,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 377
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "datin",
        "troddi', ",
        "],                                                                                                                                                                                               "
      ],
      "fol_consts": [
        "dauee, caiui, troddi",
        "ayekauee, souhouee",
        "elebauee",
        "i i ynklaue ekeen't",
        "duee kloole', ",
        "              ",
        "                                                                                                                                                                     "
      ],
      "fol_rules": [
        "Uhnoe ou huekty, i sui oi ukauee",
        "Dayneo vibinnye ayekaue eteerloy. ou i ynktryaue ou troddi aeyldaeou, caukeerdoi doolee?"
      ],
      "fol_conc": "If we don't know what this happens to me or anyone else.",
      "perplexity": [
        5.4655890464782715,
        19.639009475708008
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Uhnoe ou huekty, i sui oi ukauee"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cossernoveisntedaloguein(x)",
        "Gunceyvellonionistetatzingittoufessoriveiltelloctodameidlettuikevirestapusseprofeinsynnelklibielnnyssotterdallamisntaloguein(x)"
      ],
      "fol_consts": [
        "unceyvellonionistetatzingittoufessorineolodameidlettoikevirestapusseprofeinsynnekivka",
        "nonsernoveelldaloguein"
      ],
      "fol_rules": [
        "(Sultrisntedadarehortonicoslemereoplacessoriveiltellolibielupeidlettoikevirestapusseprofeinsynnemistallamissotrottouvelloguein(x))"
      ],
      "fol_conc": "Coussernoveisntedalochromesmeicoslemereoplacessoriveiltellolibielupeidlettoikevirestapusseprofeinsynnemistallamissotrottouvelloguein(x)",
      "perplexity": 10.411721229553223,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Boltin, baouluvian(x)",
        "Boltin, baouluvian(y)"
      ],
      "fol_consts": [
        "$0.ba oucauee."
      ],
      "fol_rules": [
        "_(b) → (Boltin, baouluvian(i))",
        "∀x ((Boltin, baouluvian(j)))",
        "((Boltin, baouluvian(k)) ⊕ ¬(Boltin, baouluvian(d) ∧ Boltin, baouluvian(b)))",
        "∀x (((Boltin, baouluvian($0.ba oucauee.))))"
      ],
      "fol_conc": "_(a, b) → ¬(_(p, a) ⊕ _(o, d) ∧ ((Boltin, baouluvian(i))))",
      "perplexity": 15.278630256652832,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "_(b) → (Boltin, baouluvian(i))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 378
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Baker(x)",
        "Cupcake(y)",
        "Hotspot(x)",
        "Spice(y)"
      ],
      "fol_consts": [
        "cupcakes",
        "hotspots",
        "spicy"
      ],
      "fol_rules": [
        "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ spicy(y))",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are either spicy or an hotspot.",
        "No baker is spicy."
      ],
      "fol_conc": "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ Spicy(y))",
      "perplexity": [
        3.0010428428649902,
        2.0235378742218018
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ spicy(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, spicy)",
        "Are(cupcakes, x)",
        "Are(hotpots, x)",
        "Have(products, x)"
      ],
      "fol_consts": [
        "spicy",
        "cupcake",
        "hotpot"
      ],
      "fol_rules": [
        "(∀x (Bakedbymelissa(x) → Cupcakes(x))) ∧ (∃y ∃z ((Spicy(y) ∨ Bakedbymelissa(z)) ∧ Hotpots(x, y)))",
        "((Spicy(chailies) ∨ Bakedbymelissa(spicehouse)) ∧ Driedthai(chiliesspice))"
      ],
      "fol_conc": "Driedchaiiescupcakeproduct(melissabakery)",
      "perplexity": 3.654374361038208,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)"
      ],
      "fol_consts": [
        "baker",
        "cupcake"
      ],
      "fol_rules": [
        "∀x (Bakery(x)) → ∃y (Spicy(y) ∨ Bakery(y))",
        "(Spicy(a) ∧ Bakery(baker)) ⊕ Spicy(cupcake)"
      ],
      "fol_conc": "∀x ((Bakery(x) ∧ Spicy(x)) ∨ (Bakery(x) ∧ Bakery(y)))",
      "perplexity": 3.5530693531036377,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 379
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "RomanceLanguage(x)",
        "IndoEuropeanLanguage(x)",
        "LanguageFamily(x)",
        "RelatedTo(x, y)",
        "French(x)",
        "Spanish(y)",
        "German(z)",
        "Basque(w)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque",
        "romancelanguages"
      ],
      "fol_rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
        "LanguageFamily(romancelanguages)",
        "∀x ∀y ((LanguageFamily(z) ∧ Within(x, z)) → RelatedTo(x, y))",
        "RomanceLanguage(french)",
        "RomanceLanguage(spanish)",
        "RelatedTo(german, spanish)",
        "¬∃x (RelatedTo(basque, x))"
      ],
      "fol_conc": "RomanceLanguage(german)",
      "perplexity": [
        1.1861941814422607,
        1.0798614025115967
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Romance(x)",
        "Indo(x)",
        "Family(x)",
        "Related(x, y)",
        "French(x)",
        "Spanish(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → Indo(x))",
        "Family(romance)",
        "∀x ∀y ((Language(x) ∧ Language(y)) → (Family(z) ∧ Related(x, y) → Family(x)))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "¬Related(basque, basque)"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.322885513305664,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Romance/1, Romance/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Romance/1, Romance/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Romance(x)",
        "IndoEuropean(x)",
        "LanguageFamily(y)",
        "RelatedTo(x, y)",
        "Basque(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german"
      ],
      "fol_rules": [
        "∀x (Romance(x) → IndoEuropean(x))",
        "LanguageFamily(french)",
        "∀y (LanguageFamily(y) → ∀x (RelatedTo(x, y)))",
        "Romance(spanish)",
        "Romance(german)",
        "¬Basque(spanish)"
      ],
      "fol_conc": "Romance(french) ⊕ IndoEuropean(spanish)",
      "perplexity": 1.933340311050415,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 380
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Bv",
        "Cw",
        "Pet",
        "DomestcatedAnimal",
        "Alligators"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Bv(x) → DomestcatedAnimal(x))",
        ",  // All bovines are domesticated animals. ",
        "∃x (Pet(x) ∧ Bv(x))",
        "Some pets are cows.",
        "fol_conc",
        "If Cw(Ted), then ¬ Pet(Ted): If Ted is a cow, then Ted is not a pet."
      ],
      "fol_conc": "If Cw(Ted), then ¬Pet(Ted)",
      "perplexity": [
        2.8385090827941895,
        1.9578423500061035
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  // All bovines are domesticated animals."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)"
      ],
      "fol_consts": [
        "ted",
        "cow",
        "alligator"
      ],
      "fol_rules": [
        "∀x (Bovine(x) → Domesticated(x))",
        "∃x (Pet(x) ∧ Bovine(x))",
        "(Bovine(x) ∧ Domesticated(x)) → ¬Alligator(x)",
        "¬Domesticated(ted)",
        "Ted(alligator)"
      ],
      "fol_conc": "If(bovine, ted) → Not(pet)",
      "perplexity": 1.5994274616241455,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Alligator/1, Alligator/0, Pet/1, Pet/0, Ted/1, Ted/0, Bovine/1, Bovine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Alligator/1, Alligator/0, Pet/1, Pet/0, Ted/1, Ted/0, Bovine/1, Bovine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isBovine(x)",
        "isPet(x)",
        "isDomesticated(x)",
        "isAlligator(x)"
      ],
      "fol_consts": [
        "Ted",
        "cow",
        "pet",
        "bovine"
      ],
      "fol_rules": [
        "∀x (isBovine(x) → isDomesticated(x))",
        "(∃x (isBovine(x) ∧ isPet(x)))",
        "(∃x (isBovine(x) → ¬isAlligator(x)))",
        "∀x (isAlligator(x) → isDomesticated(x))"
      ],
      "fol_conc": "¬(isPet(Ted) ∧ isBovine(Ted))",
      "perplexity": 1.991287350654602,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 381
  },
  {
    "id": 174,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor visits the gym at least once a day.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "EatSalads(x)",
        "HealthConscious(x)",
        "HealthConsciousChildhood(x)",
        "FulfillsNutritionalIntake(x)",
        "GoodRelationshipWithParents(x)",
        "VisitsGymDaily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalads(x) → HealthConscious(x))",
        "∀x (HealthConsciousChildhood(x) → EatSalads(x))",
        "∀x (FulfillsNutritionalIntake(x) → HealthConsciousChildhood(x))",
        "∀x (GoodRelationshipWithParents(x) → FulfillsNutritionalIntake(x))",
        "∀x (GoodRelationshipWithParents(x) → ¬EatSalads(x))",
        "∀x (VisitsGymDaily(x) → FulfillsNutritionalIntake(x))",
        "(HealthConsciousChildhood(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(HealthConsciousChildhood(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "VisitsGymDaily(taylor)",
      "perplexity": [
        1.047791838645935,
        1.018127202987671
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x, y)",
        "Healthconscious(x)",
        "Grewup(x, y)",
        "Fulfill(x)",
        "Goodrelationship(x)",
        "Gym(x)",
        "Dailyintake(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x, salads) ∧ Regularly(x, salads) → Healthconscious(x))",
        "∀x (Grewup(x, healthconscious) → Regularly(x, salads))",
        "∀x (Fulfill(x) → Grewup(x, healthconscious))",
        "∀x (Goodrelationship(x) → Fulfill(x))",
        "∀x (Goodrelationship(x) → ¬Eat(x, salads) ∧ ¬Regularly(x, salads))",
        "∀x (Gym(x) → Fulfill(x))",
        "(Grewup(taylor, healthconscious) ∧ Goodrelationship(taylor)) ⊕ ¬(Grewup(taylor, healthconscious) ∨ Goodrelationship(taylor))"
      ],
      "fol_conc": "Gym(taylor)",
      "perplexity": 1.1961312294006348,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Healthconscious/1, Healthconscious/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Healthconscious/1, Healthconscious/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EatSaladsRegularly(x)",
        "Conscious(x)",
        "GrewUpInHome(x, y)",
        "FulfillDailyIntake(x)",
        "GoodRelationshipWithParents(x)",
        "VisitGymAtLeastOnceADay(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → Conscious(x))",
        "∀x (GrewUpInHome(x, health_conscious) → EatSaladsRegularly(x))",
        "∀x (FulfillDailyIntake(x) → GrewUpInHome(x, health_conscious))",
        "∀x (GoodRelationshipWithParents(x) → FulfillDailyIntake(x))",
        "∀x (GoodRelationshipWithParents(x) → ¬EatSaladsRegularly(x))",
        "∀x (VisitGymAtLeastOnceADay(x) → FulfillDailyIntake(x))",
        "(GrewUpInHome(taylor, health_conscious) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHome(taylor, health_conscious) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "VisitGymAtLeastOnceADay(taylor)",
      "perplexity": 1.1748448610305786,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 382
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": [
        1.0387587547302246,
        1.0129026174545288
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.1150457859039307,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ∨ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": 1.0532784461975098,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 383
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Event(x)",
        "LastEvent(y, z)"
      ],
      "fol_consts": [
        "united_states",
        "tokyo"
      ],
      "fol_rules": [
        "∀x (SportingEvent(x)) → ∃y (LastEvent(z))",
        "LastEvent(tokyo)",
        "∀x ((∀z) MostMedals(x, z) ∧ Event(y, x)) → (MostMedals(united_states))"
      ],
      "fol_conc": "MostMedals(united_states) ∧ Event(tokyo)",
      "perplexity": [
        2.4876656532287598,
        1.1065922975540161
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((∀z) MostMedals(x, z) ∧ Event(y, x)) → (MostMedals(united_states))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(x, y)",
        "Most(x, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo"
      ],
      "fol_rules": [
        "∀x (Olympicgames(x) → Sporting(olympicgames))",
        "Tokyo(x)",
        "Unitedstates(z)",
        "Last(tokyo, olympicgames)",
        "Most(medals, unitedstates)"
      ],
      "fol_conc": "Most(medals, unitedstates)",
      "perplexity": 2.5915603637695312,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "LastOlympicGames(y)",
        "WonMostMedals(z, w)"
      ],
      "fol_consts": [
        "tokyo",
        "olympic_games",
        "olympic_games"
      ],
      "fol_rules": [
        "∃y (SportingEvent(olympic_games) ∧ LastOlympicGames(tokyo))",
        "(WonMostMedals(z, w) ∧ SportingEvent(y) ∧ LastOlympicGames(x)) → WonMostMedals(w, x)"
      ],
      "fol_conc": "∃x (LastOlympicGames(olympic_games) ∧ WonMostMedals(tokyo, olympic_games))",
      "perplexity": 2.0801146030426025,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 384
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "web"
      ],
      "fol_consts": [
        "website"
      ],
      "fol_rules": [
        "Content: Web browsing is a topic that requires access to the internet.",
        "I can read this content"
      ],
      "fol_conc": "We cannot know the actual language. We only understand the text in plain English.",
      "perplexity": [
        5.82043981552124,
        8.928813934326172
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Content: Web browsing is a topic that requires access to the internet."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Trusting(x)"
      ],
      "fol_consts": [
        "vorte",
        "teatty"
      ],
      "fol_rules": [
        "Civintt(x) → Trusts(x)"
      ],
      "fol_conc": "Maryamtsonneaueein(n1) ∧ Vrosttnicnoys(n1)",
      "perplexity": 12.246976852416992,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Assassin', 'Napsevi'], 2.3, (n)",
        "Assassin', 'Napsevi'], 2.3, (x, y, z)",
        "Assassin', 'Napsevi'], 2.3, ()"
      ],
      "fol_consts": [
        "Trustworthy,"
      ],
      "fol_rules": [
        "(Assassin', 'Napsevi'], 2.3, (x))"
      ],
      "fol_conc": "(Assassin', 'Napsevi'], 2.3, ())",
      "perplexity": 19.681049346923828,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Assassin', 'Napsevi'], 2.3, (x))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 385
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Importnion",
        "Cnnynt",
        "Everce"
      ],
      "fol_consts": [
        "Ornningaltye], 21.3.7.1",
        "Anneklitee] from the text."
      ],
      "fol_rules": [
        "Extruention",
        "Cnnynt",
        "Everteon,"
      ],
      "fol_conc": "Frozen cion's name is detected. ",
      "perplexity": [
        6.6639018058776855,
        20.017589569091797
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Extruention"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 386
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.0469894409179688,
        1.0243240594863892
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "∀x (¬(Ugly(x) ∧ Handsome(x)))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ Ceos(harry)",
      "perplexity": 1.2332758903503418,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "¬(Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Kind(harry) ∨ CEO(harry))",
      "perplexity": 1.0347031354904175,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 387
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "RequireLabelledData(x)",
        "Train(x, y)"
      ],
      "fol_consts": [
        "text_summarization_model"
      ],
      "fol_rules": [
        "∀x (ML(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "¬RequireLabelledData(x)",
        "Train(text_summarization_model, x)",
        "¬Reinforcement(x) → Train(text_summarization_model, x)",
        "RequireLabelledData(x)"
      ],
      "fol_conc": "Unsupervised(x) → Train(text_summarization_model, x)",
      "perplexity": [
        1.385263442993164,
        1.3343727588653564
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Trained(x, y)",
        "Requires(x, y)",
        "Labelled(x, y)"
      ],
      "fol_consts": [
        "textsummodel"
      ],
      "fol_rules": [
        "∀x (Machine(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "¬Unsupervised(x) → ¬Requires(x, labelled)",
        "Trained(textsummodel, machine)",
        "¬Reinforcement(x) → ¬Trained(textsummodel, x)",
        "Requires(machine, labelled)"
      ],
      "fol_conc": "Unsupervised(x) → Trained(textsummodel, x)",
      "perplexity": 1.3394588232040405,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Machine/1, Machine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Machine/1, Machine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CategorizedAs(x, y)",
        "SupervisedLearning(y)",
        "UnsupervisedLearning(y)",
        "ReinforcementLearning(y)",
        "TrainedWith(x, y)"
      ],
      "fol_consts": [
        "text_summarization_model",
        "text_summarization_model"
      ],
      "fol_rules": [
        "∀x (∃y (CategorizedAs(x, y) ∧ SupervisedLearning(y)) ⊕ ∃y (CategorizedAs(x, y) ∧ UnsupervisedLearning(y)) ⊕ ∃y (CategorizedAs(x, y) ∧ ReinforcementLearning(y)))",
        "¬TrainedWith(text_summarization_model, y)",
        "∀x (∃z (UnsupervisedLearning(z) ∧ TrainedWith(x, z)) → ¬(ReinforcementLearning(y) ∧ TrainedWith(x, y)))",
        "CategorizedAs(text_summarization_model, x) ⊕ ∃y ((TrainedWith(text_summarization_model, y) ∧ UnsupervisedLearning(y)))"
      ],
      "fol_conc": "∀x (∃z (UnsupervisedLearning(z) ∧ TrainedWith(x, z)) → ∃y ((CategorizedAs(text_summarization_model, x) ⊕ CategorizedAs(text_summarization_model, y))))",
      "perplexity": 2.2536749839782715,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 388
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlaysFor(x, y)"
      ],
      "fol_consts": [
        "robertLewandowski",
        "bayernMunchen"
      ],
      "fol_rules": [
        "Striker(robertLewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robertLewandowski, bayernMunchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "SoccerPlayer(robertLewandowski)",
      "perplexity": [
        1.044577717781067,
        1.0230927467346191
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Play(x, y)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski",
        "bayern",
        "munchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Play(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.2929338216781616,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert lewandowski",
        "bayern munchen"
      ],
      "fol_rules": [
        "Striker(robert lewandowski)",
        "(∀x (Striker(x) → SoccerPlayer(x)))",
        "LeftTeam(robert lewandowski, bayern munchen)",
        "(∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y)))"
      ],
      "fol_conc": "SoccerPlayer(robert lewandowski)",
      "perplexity": 1.1185390949249268,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 389
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "bg",
        "p",
        "h"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(p)",
        "Mammal(p)",
        "Human(h) ∧ Teeth(h)"
      ],
      "fol_conc": "∃x (Mammal(x) ∧ Teeth(x)) → Mammal(p): Since some mammals have teeth and humans are mammals with teeth, but platypuses do not have teeth, there is no direct logical inference to conclude that platypus must be reptiles.",
      "perplexity": [
        1.6678686141967773,
        1.1349188089370728
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Mammal(x) ∧ Teeth(x)) → Mammal(p): Since some mammals have teeth and humans are mammals with teeth, but platypuses do not have teeth, there is no direct logical inference to conclude that platypus must be reptiles."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Platypus(platypus) → Mammal(platypus)",
        "Human(human) → Teeth(human)"
      ],
      "fol_conc": "Mammal(platypus)",
      "perplexity": 1.6307543516159058,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Teeth(y, z)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Teeth(humans)"
      ],
      "fol_conc": "¬Mammal(platypus)",
      "perplexity": 1.2442357540130615,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 390
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Rose(x)",
        "GivenOutOnTV(x, y)",
        "OnTheBachelor(x)",
        "PortraysPeopleOfRealLife(x)",
        "IsRealityTvShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eightpm",
        "portrait",
        "rises"
      ],
      "fol_rules": [
        "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])",
        "∀x ((PortraysPeopleOfRealLife(x) ∨ ¬IsRealityTvShow[portrait])) (∀y (Portrait[y] ⇒ IsRealityTVShw[x])]",
        "∃x (¬IsRealityTivsHow[x])"
      ],
      "fol_conc": "∃x ((GivenOutOnTv[rise, monday] ⊕ 8pm) ∧ Portrayt[portrait] ⊗ IsRealityTVShow[x]) ⇒ (BreakingBavd[x] ∧ GivenOutOnTvs[rises, Monday] ⊕ 8pM)",
      "perplexity": [
        2.5405304431915283,
        1.2964909076690674
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x y ((GivenOutOnTV(rose, mondays[y]) ∧ OnTheBachelor[rise(y)]) → PortraysPeopleOfRealLife[x])"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Given(x, y)",
        "On(x, z, w)",
        "Is(a, b)"
      ],
      "fol_consts": [
        "roses",
        "thebachelor",
        "tv",
        "breakingingbad",
        "monday",
        "bachelorette",
        "rose",
        "realitytvs",
        "badgesontherose",
        "eighthpmmonday",
        "realpeopleshows",
        "badshowsontherealpeople"
      ],
      "fol_rules": [
        "∃x (On(x, monday, ighthpmmonday) ∧ Given(x, tv))",
        "∀x (Given(x, tv) → On(x, thebachelor))",
        "∀x (∃y (Is(y, x) ∧ Is(a, b) ∧ Realpeopleshows(y, a))) → Realitytvs(y)",
        "¬Badgesontherealpeopleshows(badshowsontherealpeople, badshowsontherealtv)",
        "Given(rose, tv) ∧ On(rose, monday, ighthpmmonday) → ∃x (Song(x) ∧ Badgesontherose(x))",
        "∀a (∃b (Is(b, a) ∧ ¬Be(b, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "Badshowsontherealpeopleshows(breakingingbad, rose)",
      "perplexity": 2.244359016418457,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: On/2, On/3.\n\n\nFatal error:  The following symbols are used with multiple arities: On/2, On/3"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GivenOut(x, y)",
        "OnTV(y)",
        "OnTV(n)",
        "Bachelor(z)",
        "Portrays(t, u)",
        "Bachelor(u)"
      ],
      "fol_consts": [
        "roses",
        "roses",
        "badger"
      ],
      "fol_rules": [
        "(∃y (GivenOut(roses, y)) ∧ OnTV(y))",
        "(OnTV(r) → ∀z (Bachelor(z) ⊕ Portrays(t, u)))",
        "((Portrays(l, t) ∨ Portrays(k, l)) ∧ ∀x ((Bachelor(x) → (Bachelor(u)))))",
        "(∃t (∀l (((GivenOut(roses, r) ∧ OnTV(y) ⊕ GivenOut(z))) ∨ ¬OnTV(w))))",
        "(¬Portrays(l, k)) ∧ ∀x ((Portrays(k, u)) → (Bachelor(u) ∨ Portrays(m, l)))",
        "∀y (((Bachelor(x) ∧ OnTV(y)))) ⊕ Bachelor(z)",
        "((GivenOut(badger, r)) ⊕ ∃t (∀l ((Portrays(l, t)) ∧ GivenOut(roses, y)) ∨ Portrays(k, l)))"
      ],
      "fol_conc": "∃x (Bachelor(x) ∧ OnTV(y))",
      "perplexity": 11.6235933303833,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GivenOut/1, GivenOut/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GivenOut/1, GivenOut/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 391
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "In(x, y)",
        "Visit(x, y)",
        "Donate(x, y)",
        "Mine(x)",
        "State(x)"
      ],
      "fol_consts": [
        "picuris_mountains",
        "new_mexico",
        "texas",
        "harding_pegmatite_mine",
        "juan_de_onate"
      ],
      "fol_rules": [
        "∃x (MountainRange(x) ∧ (In(x, new_mexico) ⊕ In(x, texas)))",
        "Visit(juan_de_onate, picuris_mountains)",
        "Donate(harding_pegmatite_mine, picuris_mountains)",
        "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ In(y, x) ∧ Donate(y, x))"
      ],
      "fol_conc": "∃x (MountainRange(x) ∧ In(x, new_mexico) ∧ Visit(juan_de_onate, x))",
      "perplexity": [
        1.2494505643844604,
        1.2033166885375977
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ In(y, x) ∧ Donate(y, x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Mountainrange(x)",
        "Mine(x)",
        "Donated(x)",
        "Visited(x, y)",
        "Inrange(x, y)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "newmexico",
        "texas",
        "juan",
        "harding"
      ],
      "fol_rules": [
        "(Mountainrange(picuris) ∧ Instate(picuris, newmexico)) ⊕ (Mountainrange(picuris) ∧ Instate(picuris, texas))",
        "Visited(juan, picuris)",
        "Donated(harding)",
        "Inrange(harding, picuris)",
        "¬(∃x (Mountainrange(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Inrange(y, x) ∧ Donated(y))))"
      ],
      "fol_conc": "Visited(juan, picuris) ∧ Instate(picuris, newmexico)",
      "perplexity": 1.304213523864746,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "MountainRange(x)",
        "Visited(x, y)",
        "LocatedIn(x, y)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan de onate",
        "texas",
        "harding pegmatite mine",
        "juan de onate",
        "picuris",
        "harding pegmatite mine",
        "texas",
        "juan de onate",
        "harding pegmatite mine"
      ],
      "fol_rules": [
        "(MountainRange(picuris) ∧ (LocatedIn(harding pegmatite mine, picuris))) → MountainRange(picuris)",
        "(Visited(juan de onate, picuris))",
        "(Donated(harding pegmatite mine))",
        "¬((∃x (MountainRange(x) ∧ LocatedIn(x, texas)))) ∨ (∀x ((LocatedIn(x, texas)) ∧ Donated(x))) → ¬(LocatedIn(harding pegmatite mine, texas))"
      ],
      "fol_conc": "(Visited(juan de onate, picuris) ⊕ ∃y (MountainRange(y) ∧ LocatedIn(y, texas) ∧ Visited(juan de onate, y)))",
      "perplexity": 3.7986466884613037,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 392
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [
        "colorectal_cancer"
      ],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "BileDuctCancer(colorectal_cancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬SurvivalRateLow(x))",
        "∀x (BileDuctCancer(x) ∧ SurvivalRateLow(x) ∧ ColorectalCancer(x) → ¬BileDuctCancer(x))"
      ],
      "fol_conc": "∀x ( (BileDuctCancer(x) ∨ Cholangiocarcinoma(x)) ∧ ColorectalCancer(x) → (BileDuctCancer(x) ∧ MildFlu(x)) )",
      "perplexity": [
        1.0621095895767212,
        1.0207260847091675
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Survival(x, y)",
        "Severe(x)",
        "Cancer(x)",
        "Bileduct(x)",
        "Cholangiocarcinoma(x)",
        "Mild(x)"
      ],
      "fol_consts": [
        "colorectal",
        "cancer"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → ¬Survival(x, high))",
        "∀x (Severe(x) → Deadly(x))",
        "Bileduct(colorectal)",
        "∀x (Cholangiocarcinoma(x) → Bileduct(x))",
        "∀x (Mild(x) → ¬Survival(x, low))",
        "∀x (Cancer(x) ∧ Bileduct(x) ∧ Survival(x, low) → ¬Bileduct(x))"
      ],
      "fol_conc": "((Cancer(colorectal) ∧ Bileduct(colorectal)) ∨ Cholangiocarcinoma(colorectal)) → (Cancer(colorectal) ∧ Bileduct(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.228973627090454,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Deadly(x)",
        "SurvivalRateLow(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "ColorectalCancer(x)",
        "MildFlu(x)"
      ],
      "fol_consts": [
        "colorectalcancer"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → SurvivalRateLow(x))",
        "∀x (SevereCancer(x) → Deadly(x))",
        "BileDuctCancer(bileductcancer)",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "¬(MildFlu(x) ∧ SurvivalRateLow(x))",
        "(BileDuctCancer(colorectalcancer) ∧ SurvivalRateLow(colorectalcancer)) → ¬BileDuctCancer(colorectalcancer)"
      ],
      "fol_conc": "((BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer)) → (BileDuctCancer(colorectalcancer) ∧ MildFlu(colorectalcancer)))",
      "perplexity": 1.1319353580474854,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 393
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contain(x, y)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x, y)",
        "Book(x)",
        "Author(x, y)",
        "Person(x)",
        "Knowledge(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x ∀y (Book(x) ∧ Contain(x, y) → Knowledge(y))",
        "∀x ∀y (Person(x) ∧ Read(x, y) → GainKnowledge(x))",
        "∀x ∀y (GainKnowledge(x) → Smarter(x, y))",
        "Book(walden) ∧ Author(walden, henry) ∧ Read(harry, walden)"
      ],
      "fol_conc": "∃y (Smarter(harry, y))",
      "perplexity": [
        1.1879096031188965,
        1.2324451208114624
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contain(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contain(x, y)))",
        "∀x (Read(x, y) → Gain(x, y))",
        "∀x (Gain(x, y) → Smarter(x, y))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry, harry)",
      "perplexity": 1.2436883449554443,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contain(x, y)",
        "Reads(x, y)",
        "GainsKnowledge(x, y)",
        "BecomeSmarter(x)",
        "BecomeSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry thoreau']}  # Becomes smarter is a relation between two states of Harry before and after reading the book. To capture this in FOL we need to define 'smarter' as an attribute of a person, but since it's not stated that there are different states or stages for people with respect to their intelligence in the problem description - I just added ",
        "walden",
        "henry thoreau']}  # Becomes smarter is a relation between two states of Harry before and after reading the book. To capture this in FOL we need to define 'smarter' as an attribute of a person, but since it's not stated that there are different states or stages for people with respect to their intelligence in the problem description - I just added "
      ],
      "fol_rules": [
        "∀x (Contain(x, y) → ∃z (GainsKnowledge(z, x)))",
        "∀x (∃y (Reads(x, y)) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → BecomeSmarter(x))",
        "Reads(harry, walden)",
        "BecomeSmarter(x, z)"
      ],
      "fol_conc": "BecomeSmarter(harry, x)",
      "perplexity": 4.831011772155762,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GainsKnowledge/1, GainsKnowledge/2, BecomeSmarter/1, BecomeSmarter/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GainsKnowledge/1, GainsKnowledge/2, BecomeSmarter/1, BecomeSmarter/2"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 394
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "101",
        "359"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "This is my name in the list of landmarks and I can test that",
      "perplexity": [
        11.24989128112793,
        23.22624397277832
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "This is my name in the list of landmarks and I can test that"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Purpose (i)",
        "Fittyein'ersti', 21, yo.3()"
      ],
      "fol_consts": [
        "",
        "",
        "",
        ""
      ],
      "fol_rules": [
        "((∃p ∃n ∀t ∀x (Purpose (a))))"
      ],
      "fol_conc": "Fittyein'ersti', 21, yo.3() ⊕ ¬((Purpose (b)) ∧ ((Purpose (s)) → ¬(Purpose (l)) ∨ (Purpose (c))))",
      "perplexity": 18.367530822753906,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Fittyein'ersti', 21, yo.3() ⊕ ¬((Purpose (b)) ∧ ((Purpose (s)) → ¬(Purpose (l)) ∨ (Purpose (c))))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 395
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorkRegularlyAtHome(x)",
        "FullyStockedOffice(x)",
        "SpendFreeTimeTidying(x)",
        "VisitOfficeSupply(x)",
        "BedLateWakeNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorkRegularlyAtHome(x))",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x))",
        "∀x (WorkRegularlyAtHome(x) → SpendFreeTimeTidying(x))",
        "∀x (WorkRegularlyAtHome(x) → VisitOfficeSupply(x))",
        "∀x (SpendFreeTimeTidying(x) → ¬BedLateWakeNoon(x))",
        "(BedLateWakeNoon(remy) ∧ SpendFreeTimeTidying(remy)) ⊕ ¬(BedLateWakeNoon(remy) ∨ SpendFreeTimeTidying(remy))"
      ],
      "fol_conc": "(BedLateWakeNoon(remy) ∨ VisitOfficeSupply(remy)) → (¬SpendFreeTimeTidying(remy) ∧ ¬FullyStockedOffice(remy))",
      "perplexity": [
        1.0297390222549438,
        1.0067602396011353
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "remy",
        "monitor",
        "office"
      ],
      "fol_rules": [
        "∀x (Own(x, monitor) → (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x)))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, monitor))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → ∀y (Free(y) ∧ Spend(x, y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y)))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, office))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))",
        "Spaces(y)"
      ],
      "fol_conc": "((Gotobedlate(remy) ∨ Visit(remy, office)) → ¬(Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) ∨ (Fully(remy) ∧ Stocked(remy) ∧ Impressive(remy) ∧ Office(remy))))",
      "perplexity": 1.1601635217666626,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "LargeDesktopMonitor(y)",
        "Home(y)",
        "WorkRegularlyOftenAtHome(x)",
        "FullyStockedImpressiveHomeOffice(x)",
        "SpendFreeTimeTidyingOrganizing(x)",
        "GoBedLate(x)",
        "WakeUpAfterNoon(x)",
        "VisitOfficeSupplyStoreRegularly(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x ∀y (Own(x, y) → WorkRegularlyOftenAtHome(x))",
        "∀x (FullyStockedImpressiveHomeOffice(x) → Own(x, y) ∧ LargeDesktopMonitor(y) ∧ Home(y))",
        "∀x (WorkRegularlyOftenAtHome(x) → SpendFreeTimeTidyingOrganizing(x))",
        "∀x (WorkRegularlyOftenAtHome(x) → VisitOfficeSupplyStoreRegularly(x))",
        "∀x ((SpendFreeTimeTidyingOrganizing(x)) → ¬(GoBedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(GoBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendFreeTimeTidyingOrganizing(remy)) ⊕ (¬GoBedLate(remy) ∨ ¬WakeUpAfterNoon(remy) ∨ ¬SpendFreeTimeTidyingOrganizing(remy))"
      ],
      "fol_conc": "(GoBedLate(remy) ∨ VisitOfficeSupplyStoreRegularly(remy)) → (¬SpendFreeTimeTidyingOrganizing(remy) ∧ ¬FullyStockedImpressiveHomeOffice(remy))",
      "perplexity": 1.1241366863250732,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 396
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input.txt"
      ],
      "fol_consts": [
        "2.2, 'This is a book that says 'You know what it does!'",
        "5.1: What did John do? What is his name?"
      ],
      "fol_rules": [
        "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
      ],
      "fol_conc": "The question asks about what Tom found out from his book. This is different from everyone saying 'You know why you don't want to read it.' You get really good on this thing when you find out that Tom got done by John!",
      "perplexity": [
        6.940479755401611,
        7.573236465454102
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Implicit(x)",
        "Interpretted(x)",
        "Instantuality(x)"
      ],
      "fol_consts": [
        "emplovee",
        "innout",
        "introdional"
      ],
      "fol_rules": [
        "Implicit(x)",
        "Interprelling(x)"
      ],
      "fol_conc": "Theiridity(uingemmetzment) ⊕ ¬Inestuct(untrodional) ∧ ∀x (Implicit(x)) ∧ Interprelling(x)",
      "perplexity": 8.219903945922852,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "clients to deliver goods(x)",
        "clients to deliver goods(y)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "((clients to deliver goods(i)) ∧ (people who don't own cars(u)))",
        "(((clients to deliver goods(a))))",
        "(clients to deliver goods(o, i))"
      ],
      "fol_conc": "((clients to deliver goods(i)) ∧ (people who don't own cars(u)))",
      "perplexity": 17.38105010986328,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ClientsToDeliverGoods/2, ClientsToDeliverGoods/1.\n\n\nFatal error:  The following symbols are used with multiple arities: ClientsToDeliverGoods/2, ClientsToDeliverGoods/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 397
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)",
        "Man(x)",
        "Harry(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬∃x (Ugly(x) ∧ Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Harry(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.2337881326675415,
        1.0775625705718994
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceo(x)"
      ],
      "fol_consts": [
        "harry",
        "ugly1"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "¬Ugly(ugly1)",
        "All(y, z, z, x, y, ug, z, x, y)",
        "Evil(z) → Ugly(x)",
        "Gentleman(z) → Handsome(x)",
        "Ceo(y) → Gentleman(x)",
        "Harry(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ Ceo(harry)",
      "perplexity": 1.8517482280731201,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "¬Ugly(x) → Handsome(x)",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "CEO(x) → Gentleman(x)",
        "Gentleman(harry)"
      ],
      "fol_conc": "(Kind(harry) ⊕ CEO(harry))",
      "perplexity": 1.170697569847107,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 398
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Event(x)",
        "LastEvent(y, z)"
      ],
      "fol_consts": [
        "united_states",
        "tokyo"
      ],
      "fol_rules": [
        "∀x (SportingEvent(x)) → ∃y (LastEvent(z))",
        "LastEvent(tokyo)",
        "∀x ((∀z) MostMedals(x, z) ∧ Event(y, x)) → (MostMedals(united_states))"
      ],
      "fol_conc": "MostMedals(united_states) ∧ Event(tokyo)",
      "perplexity": [
        2.4876656532287598,
        1.1065922975540161
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((∀z) MostMedals(x, z) ∧ Event(y, x)) → (MostMedals(united_states))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sporting(x)",
        "Last(x, y)",
        "Most(x, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo"
      ],
      "fol_rules": [
        "∀x (Olympicgames(x) → Sporting(olympicgames))",
        "Tokyo(x)",
        "Unitedstates(z)",
        "Last(tokyo, olympicgames)",
        "Most(medals, unitedstates)"
      ],
      "fol_conc": "Most(medals, unitedstates)",
      "perplexity": 2.5915603637695312,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "SportingEvent(x)",
        "LastOlympicGames(y)",
        "WonMostMedals(z, w)"
      ],
      "fol_consts": [
        "tokyo",
        "olympic_games",
        "olympic_games"
      ],
      "fol_rules": [
        "∃y (SportingEvent(olympic_games) ∧ LastOlympicGames(tokyo))",
        "(WonMostMedals(z, w) ∧ SportingEvent(y) ∧ LastOlympicGames(x)) → WonMostMedals(w, x)"
      ],
      "fol_conc": "∃x (LastOlympicGames(olympic_games) ∧ WonMostMedals(tokyo, olympic_games))",
      "perplexity": 2.0801146030426025,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 399
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exists(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exists(x)  → Turtle(x))",
        ", ∀x (Squirrel(x) ∨ Rabbit(x))",
        "\t Skittish(x) → NotStill(x)",
        "\t All Squirrels are Skittish"
      ],
      "fol_conc": "¬(Turtle(Rock) ∧ Squirrel(Rock)) → (Cute(Rock) ∨ Skittish(Rock))",
      "perplexity": [
        1.6707557439804077,
        1.5952483415603638
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", ∀x (Squirrel(x) ∨ Rabbit(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Existential(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Existential(x))",
        "Animal(x) ∧ Rabbit(x) ∨ Squirrel(x)",
        "(Skittish(x) → ¬Still(x))",
        "All(x) ∧ All(squirrels) → Skittish(squirrels)"
      ],
      "fol_conc": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ∨ Skittish(rock))",
      "perplexity": 1.2520520687103271,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cute(x)",
        "ExistentialProperty(x, y)",
        "IsA(x, y)",
        "Skittish(x)",
        "Skittish(y)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Cute(x) ∧ IsA(x, rabbit))",
        "∃x (ExistentialProperty(x, turtle))",
        "IsA(x, y) ∨ IsA(y, x)",
        "(Skittish(x) → ¬IsA(x, squirrel))",
        "∀x (Skittish(x) ∧ IsA(x, squirrel) → IsA(x, rabbit))",
        "¬Skittish(Rock)"
      ],
      "fol_conc": "¬(ExistentialProperty(Rock, turtle) ∧ Skittish(Rock) ∨ (IsA(Rock, rabbit)))",
      "perplexity": 1.8664019107818604,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 400
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "Leads(y, z)",
        "Includes(z, w)",
        "FeudWith(u, v)",
        "FormedIn(x, y)"
      ],
      "fol_consts": [
        "DiamondMine()",
        "RoderickStrong()",
        "CreedBrothers()",
        "IvyNile()",
        "ImperiumStable()",
        "WWEPromotion()"
      ],
      "fol_rules": [
        "Stable(DiamondMine()) \\/ FormedIn(DiamondMine(), WWEPromotion())",
        "Leads(RoderickStrong(), DiamondMine())",
        "(Includes(DiamondMine(), CreedBrothers()) /\\ Includes(DiamondMine(), IvyNile()))",
        "FeudWith(ImperiumStable(), DiamondMine())"
      ],
      "fol_conc": "∃z (Leads(RoderickStrong(), z) \\/ Stable(z))",
      "perplexity": [
        1.2877863645553589,
        1.1648067235946655
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Stable(DiamondMine()) \\/ FormedIn(DiamondMine(), WWEPromotion())"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Professional(x)",
        "Stable(y, x)",
        "Formed(z, y, w)",
        "Leads(v, z)",
        "Includes(a, b)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "wwe",
        "imperium",
        "creedbrothers",
        "ivynile"
      ],
      "fol_rules": [
        "Stable(diamondmine, wwe)",
        "Formed(wwe, diamondmine, xtimexperiodx)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Stable(z, wwe)",
      "perplexity": 1.9204273223876953,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Lead(x, y)",
        "FormedIn(y, z)",
        "Include(y, z)",
        "FeudWith(u, v)"
      ],
      "fol_consts": [
        "diamond_mine",
        "roderick_strong",
        "imperium",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, w) ∧ Lead(roderick_strong, diamond_mine)",
        "Include(diamond_mine, creed_brothers) ∧ Include(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Lead(roderick_strong, y)",
      "perplexity": 1.4373159408569336,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 401
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BredBack(x)",
        "Resembles(x, y)",
        "DomesticAnimal(y)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BredBack(x) → DomesticAnimal(x))",
        "∃y ((Aurochs(y)) ∧ Resembles(heckcattle, y))",
        "∀x (Resembles(x, Aurochs) → BG x)",
        "∀x (Resembles(Aurochs, x) → BG x)",
        "∃y ((DomesticAnimal(y)) ∧ Resembles(y, Aurochs))"
      ],
      "fol_conc": "¬Aurochs",
      "perplexity": [
        1.5218479633331299,
        1.3829015493392944
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Resembles(x, Aurochs) → BG x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x, y)",
        "Domestic(x, y)",
        "Artificial(x, y)",
        "Selective(x, y)",
        "Bredback(x)",
        "Heck(cattle)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "aurochs",
        "animals",
        "bg"
      ],
      "fol_rules": [
        "(Domestic(bredback, x) → Artificial(x))",
        "(∃x (Bredback(x) ∧ Heck(x))) ⊕ (∀y (Aurochs(y) → Animals(y)))",
        "(Heck(cattle) ∧ Aurochs(aurochs) → Resemble(cattle, aurochs))",
        "((Resemble(heck, cattle) ∧ Breeding(x, y)) → Animal(y)) ⊕ ((Bredback(bredback) ∧ Heck(cattle)) ∨ ¬Animal(bredback))"
      ],
      "fol_conc": "(∃x (Aurochs(x))) ⊕ Extinct(x)",
      "perplexity": 2.3781168460845947,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BreedingBack(x, y)",
        "Selects(z)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "(∃x (BreedingBack(heck, x))) → Selects(x)",
        "(∀z ((BreedingBack(breedinback, z)) ∧ BreedingBack(z) ⊕ ∃y (∀w (Selects(w) ∧ BreedingBack(y)))) → BreedingBack(echock, y))",
        "¬(BreedingBack(aurochs, heck) ∨ Selects(breedinbakk))",
        "(∀z ((BreedingBack(z))) → ∃w (Selects(w) ∧ BreedingBack(x)))",
        "(∃x (∀y ((BreedingBack(echohcet, x)) ∧ BreedingBack(heccchetmblecchett)) ⊕ ((¬BreedingBack(aurochs)))) → ∃w (Selects(w) ∨ BreedingBack(x)))",
        "(∀x (∃y (((BreedingBack(z, x) ∧ BreedingBack(y)) → Selects(echohcet))) → ∀z (((BreedingBack(heckecheccchettmblecchetlbeebreeeddcebbdbeeecbcdeeebdcdebdecddbedcdedebebdfdedfddddeeefeeeefeeggefgffgghhiggjhgihigiiiljjjkjlleellmmnnnooopppqrrrqssttuuvvwwxxyyzz)) ⊕ ((¬Selects(echohcet) ∨ BreedingBack(heckecheccchettmblecchetlbeebreeeddcebbdbeeecbcdeeebdcdebdecddbedcdedebebdfdedfddddeeefeeeefeeggefgffgghhiggjhgihigiiiljjjkjlleellmmnnnooopppqrrrqssttuuvvwwxxyyzz))))) ⊕ ∃w ((Selects(w) ∧ ¬BreedingBack(z)))))",
        "(∀z (∃u (BreedingBack(echohcet, u)) → Selects(u)))",
        "(¬(BreedingBack(aurochs)) ∨ BreedingBack(hcekheccchetmblecchett) ⊕ ¬Selects(z))"
      ],
      "fol_conc": "∃x (BreedingBack(x, aurosctext))",
      "perplexity": 7.498645305633545,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BreedingBack/1, BreedingBack/2.\n\n\nFatal error:  The following symbols are used with multiple arities: BreedingBack/1, BreedingBack/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 402
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "¬∃x (Bakery(x) ∧ Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "(Spicy(dried_thai_chilies) ∨ Bakery(dried_thai_chilies)) → (Hotpot(dried_thai_chilies) ∨ Spicy(dried_thai_chilies))"
      ],
      "fol_conc": "Hotpot(dried_thai_chilies)",
      "perplexity": [
        1.0406627655029297,
        1.0183966159820557
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthai) ∨ Bakery(driedthai) → (Hotpot(driedthai) ∨ Spicy(driedthai))"
      ],
      "fol_conc": "Hotpot(driedthai)",
      "perplexity": 1.2306299209594727,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "ProductOf(x, y)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "dried thai chilies",
        "baked by melissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "Hotpot(dried thai chilies)",
      "perplexity": 1.1991777420043945,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 403
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Loves(x, y)",
        "Favorite(x, y)",
        "Australian(x)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "Max",
        "Koala",
        "Tourists"
      ],
      "fol_rules": [
        "∀x (Loves(Max, Animals) → Favorite(Max, Animals))",
        "ς▼  Τ χ⁡.  /ψ ι Ϋ λ. ",
        "∀x (Quokka(Animal) → Australian(Animal))",
        "υ Τ χ⁡.μ"
      ],
      "fol_conc": "Koalas love to sleep and are quokkas",
      "perplexity": [
        2.5639846324920654,
        2.136125087738037
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "ς▼  Τ χ⁡.  /ψ ι Ϋ λ."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleeps(x)"
      ],
      "fol_consts": [
        "max",
        "koala",
        "quokka",
        "australia",
        "animals"
      ],
      "fol_rules": [
        "∀y (Loved(animals, tourists) → Favorite(max, animals))",
        "∀x (From(x, australia) ∧ Loved(x, tourists))",
        "∀x (Animal(x) ∧ From(x, australia))",
        "Favorite(max, animals) ∧ Fluffy(animals)",
        "All(favorite, max) → Sleeps(favorites)",
        "Fluffy(koala) → ¬(From(koala, quokka))"
      ],
      "fol_conc": "Sleeps(koalas) ∧ From(koalas, quokka)",
      "perplexity": 1.6129482984542847,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Favorite/2, Favorite/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Favorite/2, Favorite/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "Favorite(x, y)",
        "LovedBy(x, y)"
      ],
      "fol_consts": [
        "animals",
        "Max",
        "koalas",
        "quokkas"
      ],
      "fol_rules": [
        "(LovedBy(Max, x)) ∧ (Favorite(Max, x)) → (LovedBy(a, x)) ∨ (LovedBy(x, a))",
        "LovedBy(animals, a) → (LovedBy(a, animals))",
        "LovedBy(australia, animals) ∧ Favorite(Max, animals)",
        "(Favorite(Max, x)) ∧ (LovedBy(x, Max))",
        "LovedBy(koalas, a)",
        "LovedBy(a, koalas) ∧ LovedBy(koalas, a)"
      ],
      "fol_conc": "LovedBy(animals, koalas)",
      "perplexity": 3.8307785987854004,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 404
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(y)",
        "Hotpot(z)",
        "ProductOfBakedByMelissa(w)",
        "DriedThaiChilies(thai_chilies)"
      ],
      "fol_consts": [
        "bakery",
        "cupcake",
        "hotpot",
        "melissa_product",
        "thai_chilies"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀y (Cupcake(y) → Bakery(y))",
        "∀z (Hotpot(z) → Spicy(z))",
        "∀w (ProductOfBakedByMelissa(w) → Cupcake(w))",
        "DriedThaiChilies(thai_chilies)",
        "(Spicy(thai_chilies) ∨ Bakery(thai_chilies)) → (Hotpot(thai_chilies) ∨ Spicy(thai_chilies))"
      ],
      "fol_conc": "Hotpot(thai_chilies)",
      "perplexity": [
        1.1366446018218994,
        1.067737340927124
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "dried",
        "thai",
        "chilies",
        "melissa",
        "bakedby"
      ],
      "fol_rules": [
        "¬Bakery(chilies) ∧ Spicy(chilies)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x ((Products(melissa, x) ∧ Cupcakes(x)) ⊕ Products(melissa, chilies))",
        "(Spicy(chilies) ∨ Bakery(chilies)) → (Hotpot(chilies) ∨ Spicy(chilies))"
      ],
      "fol_conc": "Hotpot(chilies)",
      "perplexity": 1.3735452890396118,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀y (ProductOf(x, y) → Cupcake(x))",
        "(Spicy(dried thai chilies) ⊕ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ⊕ Spicy(dried thai chilies))"
      ],
      "fol_conc": "Hotpot(dried thai chilies)",
      "perplexity": 1.1922597885131836,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 405
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ In(billings, montana)",
        "∀x (City(x) ∧ In(x, montana) → (x = butte ∨ x = helena ∨ x = missoula))",
        "City(white_sulphur_springs) ∧ City(butte) ∧ In(white_sulphur_springs, x) ∧ In(butte, x)",
        "¬In(pierre, montana)",
        "∀x (City(x) ∧ In(x, butte) → ¬In(x, pierre))"
      ],
      "fol_conc": "SameState(butte, pierre)",
      "perplexity": [
        1.0654758214950562,
        1.011418104171753
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (City(x) ∧ In(x, montana) → (x = butte ∨ x = helena ∨ x = missoula))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "Instate(x, y)",
        "Same(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings)",
        "Instate(billings, montana)",
        "Instate(butte, montana)",
        "Instate(helena, montana)",
        "Instate(missoula, montana)",
        "Instate(white, montana)",
        "Instate(sulphur, montana)",
        "Instate(butte, montana)",
        "Instate(pierre, montana)",
        "∀x ∀y (Instate(x, y) ∧ Instate(y, z) → Same(x, z))"
      ],
      "fol_conc": "Same(butte, pierre)",
      "perplexity": 1.2601113319396973,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "City(x)",
        "InState(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white sulphur springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings)",
        "InState(billings, montana)",
        "∀x (City(x) ∧ InState(x, montana) → (¬SameState(x, pierre)))",
        "∃x (City(x) ∧ InState(butte, x))",
        "∃y (City(y) ∧ InState(white sulphur springs, y) ∧ SameState(butte, y))"
      ],
      "fol_conc": "SameState(butte, pierre)",
      "perplexity": 1.2915847301483154,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 406
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "IndoEuropean(x)",
        "RomanceLanguage(x)",
        "LanguageFamily(x)",
        "RelatedTo(x, y)",
        "IsRomance(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (IndoEuropean(x) → RomanceLanguage(x))",
        "∀x (RomanceLanguage(x) ∧ LanguageFamily(x))",
        "∀x ((RomanceLanguage(x) ∨ IndoEuropean(x)) → RelatedTo( x, y )  )",
        "RomanceLanguage(french) ∧ RomanceLanguage(spanish): French and Spanish are both Romance languages.",
        "German ∧ Spanish → RelatedTo(german, spanish)",
        "Basque ¬RelatedTo(basque,x) :Basque is not related to any other language."
      ],
      "fol_conc": "IsRomance(german)",
      "perplexity": [
        1.5376545190811157,
        1.2154542207717896
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "RomanceLanguage(french) ∧ RomanceLanguage(spanish): French and Spanish are both Romance languages."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Indouropean(x)",
        "Romance(x)",
        "Languagefamily(x)",
        "Relatedto(x, y)",
        "French(x)",
        "Spanish(x)",
        "German(x)",
        "Basque(x)"
      ],
      "fol_consts": [
        "german",
        "french",
        "spanish",
        "basque"
      ],
      "fol_rules": [
        "∀x (Indouropean(x) → Romance(x))",
        "(Romance(x) ∧ Languagefamily(x))",
        "∀x ((Languagefamily(x) → Relatedto(x, y)) ∨ ¬Relatedto(x, y))",
        "(French(rina) ∧ Spanish(rina) → Romance(rina))",
        "German(german) ∧ Relatedto(spanish, german)",
        "Basque(basque) ⊕ ∃x (Relatedto(basque, x))"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.8931814432144165,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IndoEuropean(x)",
        "IsRomanceLanguage(y, x)",
        "IndoEuropean(romanfamilyx)",
        "IsRomanceLanguage(x)",
        "IsRomanceLanguage(y, z)",
        "IsRomanceLanguage(z)",
        "IsRomanceLanguage(wy)",
        "IndoEuropean(xy)"
      ],
      "fol_consts": [
        "german",
        "french",
        "spanish",
        "basque"
      ],
      "fol_rules": [
        "(∀x (IndoEuropean(x) → IsRomanceLanguage(romanfamily, x))) ∧ (IsRomanceLanguage(frency))",
        "(IsRomanceLanguage(spanishfrenchrromnacegna))",
        "IndoEuropean(basque)",
        "(∀x (IndoEuropean(x) → ∃z ((IsRomanceLanguage(z, x) ∧ IsRomanceLanguage(y, z))) ∨ (∃y (IsRomanceLanguage(romanfamilzyw, y)))))",
        "IndoEuropean(gerryman)"
      ],
      "fol_conc": "(∀x (IndoEuropean(x)) → ∃z ((IsRomanceLanguage(z) ∧ IndoEuropean(xy))) ∨ (∃y (IsRomanceLanguage(romanfamilzyw, y))))",
      "perplexity": 8.05637264251709,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsRomanceLanguage/2, IsRomanceLanguage/1.\n\n\nFatal error:  The following symbols are used with multiple arities: IsRomanceLanguage/2, IsRomanceLanguage/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 407
  },
  {
    "id": 145,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Person(x, y)",
        "Teacher(x, y)"
      ],
      "fol_consts": [
        "Jerry",
        "Rose"
      ],
      "fol_rules": [
        "∀x Human(x)",
        "Why are humans?",
        "No one is a teacher",
        "Teaches Jerry and Rose"
      ],
      "fol_conc": "∃y Person(y,Jerry)",
      "perplexity": [
        3.687268018722534,
        4.209045886993408
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Why are humans?"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Teaches(y, z)",
        "Is(a)",
        "Young(z)",
        "Does(x)",
        "Be(teacher)",
        "Do(x)",
        "Teacher(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "(Student(jerry) ∧ Human(jerry)) → (Does(jerry))",
        "(Teaches(jerry)) ∨ (Is(a))",
        "(Young(rose))",
        "(Teacher(younger) ∨ Younger(x, z))",
        "¬(Be(teacher, x))",
        "Not(beassistant, manager)",
        "Does(friend)",
        "Be(also)"
      ],
      "fol_conc": "Does(jerry)",
      "perplexity": 9.110209465026855,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "Human(y)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "(Human(jerry) ∧ ¬(Human(rose))) ⊕ ¬(Human(jerry) ∨ ¬(Human(rose)))"
      ],
      "fol_conc": "¬(Human(jerry) ∨ ¬(Human(rose)))",
      "perplexity": 2.750972270965576,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 408
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (RatingGreaterThan9(x) → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → RatingGreaterThan9(x))",
        "RatingGreaterThan9(subway) ∨ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0449631214141846,
        1.0158560276031494
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "Listed(x) → ¬Negative(x)",
        "∀x (Rating(x, y) ∧ (Greater(y, 90)) → Listed(x))",
        "∃x (¬Takeout(x) ∧ Negative(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ Greater(y, 90))",
        "Rating(subway, y) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Negative(subway)",
      "perplexity": 1.3234094381332397,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ListedIn(x)",
        "ReceivesNegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "ProvidesTakeoutService(x)",
        "PopularAmongLocals(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "ListedIn(x) → ¬ReceivesNegativeReviews(x)",
        "∀x (RatingGreaterThan9(x) → ListedIn(x))",
        "∃x (¬ProvidesTakeoutService(x) ∧ ReceivesNegativeReviews(x))",
        "∀x (PopularAmongLocals(x) → RatingGreaterThan9(x))",
        "(RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway))"
      ],
      "fol_conc": "(ProvidesTakeoutService(subway) ∧ ¬ReceivesNegativeReviews(subway))",
      "perplexity": 1.4965705871582031,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 409
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(y, z)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiKi"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x ((Dog(x) ∧ Barks(x)) ⊕ ∃y (Animal(y) ∧ Animal(x) ∧ Jumps(y) ∧ Likes(y, z)))",
        "killed"
      ],
      "fol_conc": "∃x (Project(x)∧ WrittenIn(z,rust)",
      "perplexity": [
        2.5882740020751953,
        1.7326254844665527
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "killed"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x, y)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Has(x, y)",
        "Legs(x)"
      ],
      "fol_consts": [
        "ki",
        "jane",
        "dog"
      ],
      "fol_rules": [
        "(∀x (Barks(x, jane) → ¬Like(x, jane)))",
        "(∃y ((Animal(y) ∧ Barks(y)) ⊕ Dog(y)))",
        "(∀x (Jumps(x) → Like(x, jane)))",
        "(∀x (Has(x, legs) → Jumps(x)))",
        "(∀x (Animals(x) → Legs(x)))",
        "((¬(Ki(ki) ∧ Jumps(ki)) ∨ ¬(Ki(ki) ∧ Legs(ki))) ⊕ (∃y ((Terricolous(y) ∧ Ki(ki)) ∨ Legs(ki))))",
        "(∀x (Barks(x, ki) → ¬Like(x, ki)))",
        "((Jumps(ki) ⊕ Has(ki, legs)) ∨ (Ki(ki) ⊕ Legs(ki)))"
      ],
      "fol_conc": "Barks(ki, jane) ⊕ Dog(ki)",
      "perplexity": 1.7400482892990112,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Barks(x, y)",
        "Likes(y, x)",
        "IsDog(x)"
      ],
      "fol_consts": [
        "kiKi",
        "jane"
      ],
      "fol_rules": [
        "(∃y (¬Barks(y)) → ¬Likes(jane, y))",
        "(∀z (∃w (IsDog(w))) ⊕ Barks(z) ∧ IsDog(x))",
        "(∃x ((Likes(kiKi, x) ∨ Barks(kiKi))))",
        "Barks(y)",
        "¬((Likes(jane, y) → ¬Likes(v)) ∨ Likes(b))",
        "IsDog(x)",
        "(∀y (¬(Likes(z))) ⊕ ((Likes(w) ∨ Barks(k))))"
      ],
      "fol_conc": "Barks(y)",
      "perplexity": 18.1115779876709,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Likes/1, Likes/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Likes/1, Likes/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 410
  },
  {
    "id": 146,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is not young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Manager(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬Teaches(jerry) ⊕ ¬Manager(jerry)",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": [
        1.0537241697311401,
        1.2833539247512817
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studys(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studys(x) → Student(x))",
        "∀x (Studys(x) ⊕ Teaches(x))",
        "∀x (Young(x) ∧ Teaches(x) → False(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.201067328453064,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Teach(x)",
        "Manager(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "(Study(x) → Student(x)) ⊕ Teach(x)",
        "(Teach(x) ⊕ Study(x))",
        "¬(Young(x) ∧ Teach(x))",
        "¬(Teach(jerry) ∨ Manager(jerry))",
        "(Young(rose) ∨ Student(rose))"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.834060788154602,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 411
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "LabelledData(x)",
        "TrainedWithML(x)",
        "NotRL(x)",
        "RequiresLabelledData(x)"
      ],
      "fol_consts": [
        "ml"
      ],
      "fol_rules": [
        "∀x ((Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x)) → Supervised(x))",
        "∃x (Unsupervised(x) ∧ ¬LabelledData(x))",
        " ∀x ((TrainedWithML(x) ∧ Reinforcement(x)) → NotRL(x))",
        " ∀x (RequiresLabelledData(x) → Supervised(x))"
      ],
      "fol_conc": "Supervised(ml)",
      "perplexity": [
        1.3340004682540894,
        1.293811559677124
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Category(x, y)",
        "Supervised(y)",
        "Unsupervised(y)",
        "Reinforcement(y)",
        "Requireslabelleddata(x)",
        "Stateofthearttextsummarizationmodel(x)"
      ],
      "fol_consts": [
        "ml",
        "summodel"
      ],
      "fol_rules": [
        "∀x ∀y (Category(x, y) → (Supervised(y) ⊕ Unsupervised(y) ⊕ Reinforcement(y)))",
        "¬Unsupervised(learning) → ¬Requireslabelleddata(x)",
        "(Stateofthearttextsummarizationmodel(ml) ∧ Category(ml, learning)) → ∃x (Machinelearningsumalgorithm(x))",
        "∀x ∀y ((Category(x, y) ∧ Reinforcement(y) ∧ Stateofthearttextsummarizationmodel(x)) → ¬Requireslabelleddata(x))",
        "(Requireslabelleddata(summodel) ∧ Category(summodel, mlalgorithms)) → Requireslabelleddata(ml)",
        "Supervised(learning) ⊕ Unsupervised(learning) ⊕ Reinforcement(learning) → Supervised(learningsumalgorithm)"
      ],
      "fol_conc": "Supervised(learningsumalgorithm)",
      "perplexity": 1.7255868911743164,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorize(x, y)",
        "Unsupervised(y)",
        "RequiresLabelledData(y)",
        "TrainedWithMLAlgorithm(z)",
        "RequiresLabelledData(e)"
      ],
      "fol_consts": [
        "machineLearningAlgorithms",
        "machineLearningAlgorithms"
      ],
      "fol_rules": [
        "(∀x (Categorize(x, machineLearningAlgorithms) → (∃y ((Unsupervised(y)) ⊕ RequiresLabelledData(e)))) ∧ Categorize(machineLearningAlgorithms, y))",
        "(RequiresLabelledData(z) ∨ Unsupervised(w))",
        "(∀x (TrainedWithMLAlgorithm(x)))",
        "(RequiresLabelledData(v))"
      ],
      "fol_conc": "Categorize(machineLearningAlgorithms, y) → Categorize(y, machineLearningAlgorithms)",
      "perplexity": 13.304852485656738,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 412
  },
  {
    "id": 117,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter can block Windy's shooting.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shooting(x)",
        "Jump(x)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀y (Man(y) ∧ ¬Be(y, michael) → Taller(michael, y))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ((Man(x) ∧ Taller(x, y) ∧ ¬Jump(y)) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) ∧ Shooting(x) → GreatShooter(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": [
        1.051101803779602,
        1.01338791847229
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shoot(x)",
        "Jump(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Taller(michael, x))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Taller(michael, x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → Great(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": 1.1347333192825317,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "BlockShooting(x, y)",
        "JumpShooting(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → BlockShooting(x, y))",
        "Man(michael) ∧ ∀x ((Man(x) ∧ ¬(¬(Taller(michael, x)))))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "BlockShooting(michael, x) ↔ ¬JumpShooting(x)",
        "¬BlockShooting(michael, windy)",
        "∀x (JumpShooting(x) → GreatShooter(x))"
      ],
      "fol_conc": "BlockShooting(peter, windy)",
      "perplexity": 1.3088746070861816,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 413
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "GivesOutRoses(x, y, z)",
        "OnTV(x)",
        "OnBachelor(x)",
        "PortraysRealLives(x)",
        "RealityTV(x)",
        "TVShow(x)"
      ],
      "fol_consts": [
        "monday",
        "eight_pm",
        "roses",
        "bachelor",
        "breaking_bad"
      ],
      "fol_rules": [
        "∃x (GivesOutRoses(x, bachelor, (monday, eight_pm)))",
        "∀x (GivesOutRoses(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → PortraysRealLives(x))",
        "∀x (PortraysRealLives(x) → RealityTV(x))",
        "¬RealityTV(breaking_bad)"
      ],
      "fol_conc": "¬TVShow(breaking_bad) ∨ GivesOutRoses(breaking_bad, breaking_bad, (monday, eight_pm))",
      "perplexity": [
        1.1005431413650513,
        1.0121033191680908
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (GivesOutRoses(x, bachelor, (monday, eight_pm)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Give(x, y, z)",
        "On1(x, y)",
        "On2(x, y)",
        "Portray(x, y)",
        "Reality(x)",
        "Bachelor(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Give(x, roses, monday) ∧ On1(x, pm8))",
        "∀x (Give(x, roses, y) → On2(x, bachelor))",
        "∀x (On2(x, bachelor) → Portray(x, people))",
        "∀x (Portray(x, people) → Reality(x))",
        "¬Reality(breakingbad)"
      ],
      "fol_conc": "∃x (Give(x, roses, monday) ∧ On1(x, pm8) ∧ ¬Reality(x))",
      "perplexity": 1.2570691108703613,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GiveOut(x, y)",
        "On(x, z)",
        "On(y, w)",
        "Portrays(x, y)",
        "RealityTV(x)",
        "BachelorShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "roses",
        "tv",
        "breaking bad"
      ],
      "fol_rules": [
        "∃x (GiveOut(roses, x) ∧ On(x, monday) ∧ On(x, 8pm))",
        "∀x (GiveOut(x, tv) → BachelorShow(x))",
        "∀x (BachelorShow(x) → Portrays(x, y))"
      ],
      "fol_conc": "¬RealityTV(breaking bad)",
      "perplexity": 1.5722882747650146,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 414
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BredBack(x)",
        "Resembles(x, y)",
        "DomesticAnimal(y)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BredBack(x) → DomesticAnimal(x))",
        "∃y ((Aurochs(y)) ∧ Resembles(heckcattle, y))",
        "∀x (Resembles(x, Aurochs) → BG x)",
        "∀x (Resembles(Aurochs, x) → BG x)",
        "∃y ((DomesticAnimal(y)) ∧ Resembles(y, Aurochs))"
      ],
      "fol_conc": "¬Aurochs",
      "perplexity": [
        1.5218479633331299,
        1.3829015493392944
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Resembles(x, Aurochs) → BG x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x, y)",
        "Domestic(x, y)",
        "Artificial(x, y)",
        "Selective(x, y)",
        "Bredback(x)",
        "Heck(cattle)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "aurochs",
        "animals",
        "bg"
      ],
      "fol_rules": [
        "(Domestic(bredback, x) → Artificial(x))",
        "(∃x (Bredback(x) ∧ Heck(x))) ⊕ (∀y (Aurochs(y) → Animals(y)))",
        "(Heck(cattle) ∧ Aurochs(aurochs) → Resemble(cattle, aurochs))",
        "((Resemble(heck, cattle) ∧ Breeding(x, y)) → Animal(y)) ⊕ ((Bredback(bredback) ∧ Heck(cattle)) ∨ ¬Animal(bredback))"
      ],
      "fol_conc": "(∃x (Aurochs(x))) ⊕ Extinct(x)",
      "perplexity": 2.3781168460845947,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BreedingBack(x, y)",
        "Selects(z)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "(∃x (BreedingBack(heck, x))) → Selects(x)",
        "(∀z ((BreedingBack(breedinback, z)) ∧ BreedingBack(z) ⊕ ∃y (∀w (Selects(w) ∧ BreedingBack(y)))) → BreedingBack(echock, y))",
        "¬(BreedingBack(aurochs, heck) ∨ Selects(breedinbakk))",
        "(∀z ((BreedingBack(z))) → ∃w (Selects(w) ∧ BreedingBack(x)))",
        "(∃x (∀y ((BreedingBack(echohcet, x)) ∧ BreedingBack(heccchetmblecchett)) ⊕ ((¬BreedingBack(aurochs)))) → ∃w (Selects(w) ∨ BreedingBack(x)))",
        "(∀x (∃y (((BreedingBack(z, x) ∧ BreedingBack(y)) → Selects(echohcet))) → ∀z (((BreedingBack(heckecheccchettmblecchetlbeebreeeddcebbdbeeecbcdeeebdcdebdecddbedcdedebebdfdedfddddeeefeeeefeeggefgffgghhiggjhgihigiiiljjjkjlleellmmnnnooopppqrrrqssttuuvvwwxxyyzz)) ⊕ ((¬Selects(echohcet) ∨ BreedingBack(heckecheccchettmblecchetlbeebreeeddcebbdbeeecbcdeeebdcdebdecddbedcdedebebdfdedfddddeeefeeeefeeggefgffgghhiggjhgihigiiiljjjkjlleellmmnnnooopppqrrrqssttuuvvwwxxyyzz))))) ⊕ ∃w ((Selects(w) ∧ ¬BreedingBack(z)))))",
        "(∀z (∃u (BreedingBack(echohcet, u)) → Selects(u)))",
        "(¬(BreedingBack(aurochs)) ∨ BreedingBack(hcekheccchetmblecchett) ⊕ ¬Selects(z))"
      ],
      "fol_conc": "∃x (BreedingBack(x, aurosctext))",
      "perplexity": 7.498645305633545,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BreedingBack/1, BreedingBack/2.\n\n\nFatal error:  The following symbols are used with multiple arities: BreedingBack/1, BreedingBack/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 415
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "¬∃x (Bakery(x) ∧ Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "(Spicy(dried_thai_chilies) ∨ Bakery(dried_thai_chilies)) → (Hotpot(dried_thai_chilies) ∨ Spicy(dried_thai_chilies))"
      ],
      "fol_conc": "Hotpot(dried_thai_chilies)",
      "perplexity": [
        1.0406627655029297,
        1.0183966159820557
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthai) ∨ Bakery(driedthai) → (Hotpot(driedthai) ∨ Spicy(driedthai))"
      ],
      "fol_conc": "Hotpot(driedthai)",
      "perplexity": 1.2306299209594727,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "ProductOf(x, y)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "dried thai chilies",
        "baked by melissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "Hotpot(dried thai chilies)",
      "perplexity": 1.1991777420043945,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 416
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "∃x (Flies(susan, x))",
        "¬(SameAirport(x, x))",
        "Flies(john, lga)"
      ],
      "fol_conc": "∃x (Flies(susan, x) ∧ SameAirport(x, lga))",
      "perplexity": [
        1.5785239934921265,
        1.0366877317428589
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Airport(y)"
      ],
      "fol_consts": [
        "susan",
        "john"
      ],
      "fol_rules": [
        "∀x (∃y (Airport(y)) → Flies(susan, x) ∧ ¬(Susan(x)))",
        "¬Flies(john, x)"
      ],
      "fol_conc": "∃y (Airport(y) → Flies(susan, y))",
      "perplexity": 3.089848518371582,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(x, x)"
      ],
      "fol_consts": [
        "Susan",
        "John"
      ],
      "fol_rules": [
        "∀x (Flies(x, LGA))",
        "¬(SameAirport(LGA, LGA)) → ¬(Flies(Susan, Susan))",
        "(Flies(John, LGA) ∧ SameAirport(John, LGA))"
      ],
      "fol_conc": "∃x (Flies(Susan, x) ∧ SameAirport(x, LGA))",
      "perplexity": 2.3393635749816895,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 417
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousCapital(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "HostedParalympics(x, y)",
        "LargestCity(x, y)",
        "University(x)",
        "TopRanked(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "asiaPacific"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulousCapital(beijing)",
        "LocatedIn(beijing, china)",
        "HostedOlympics(beijing, summer)",
        "HostedParalympics(beijing, summer)",
        "∀x (HostedOlympics(x, summer) ∧ HostedParalympics(x, summer) → HostedOlympics(x, winter) ∧ HostedParalympics(x, winter))",
        "∃x (University(x) ∧ LocatedIn(x, china) ∧ TopRanked(x))"
      ],
      "fol_conc": "LargestCity(beijing, china)",
      "perplexity": [
        1.0924162864685059,
        1.0156699419021606
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Most(x, y)",
        "Located(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Largest(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics",
        "paralympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Most(beijing, city)",
        "Located(beijing, china)",
        "Hosted(beijing, olympics)",
        "Hosted(beijing, paralympics)",
        "∃x (University(x) ∧ Located(x, beijing))",
        "∃x (University(x) ∧ Located(x, beijing))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2643002271652222,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, z)",
        "RankedAmongBestUniversities(x)",
        "LocatedIn(y, x)",
        "LocatedIn(z, w)",
        "LocatedIn(a, b)"
      ],
      "fol_consts": [
        "beijing",
        "people's republic of china",
        "asia-pacific",
        "world",
        "2008 summer olympics",
        "2008 summer paralympics games",
        "2008 summer olympics",
        "2008 summer paralympics games"
      ],
      "fol_rules": [
        "CapitalOf(beijing, people's republic of china)",
        "MostPopulousNationalCapitalCity(beijing)",
        "LocatedIn(beijing, northern china)",
        "HostedOlympics(beijing, 2008 summer olympics)",
        "HostedOlympics(beijing, 2008 summer paralympics games)",
        "∃x (RankedAmongBestUniversities(x) ∧ LocatedIn(x, beijing))",
        "LocatedIn(northern china, people's republic of china)"
      ],
      "fol_conc": "LocatedIn(beijing, z)",
      "perplexity": 2.3549418449401855,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 418
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Contain(x, y)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x, y)",
        "Book(x)",
        "Author(x, y)",
        "Person(x)",
        "Knowledge(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x ∀y (Book(x) ∧ Contain(x, y) → Knowledge(y))",
        "∀x ∀y (Person(x) ∧ Read(x, y) → GainKnowledge(x))",
        "∀x ∀y (GainKnowledge(x) → Smarter(x, y))",
        "Book(walden) ∧ Author(walden, henry) ∧ Read(harry, walden)"
      ],
      "fol_conc": "∃y (Smarter(harry, y))",
      "perplexity": [
        1.1879096031188965,
        1.2324451208114624
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contain(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contain(x, y)))",
        "∀x (Read(x, y) → Gain(x, y))",
        "∀x (Gain(x, y) → Smarter(x, y))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry, harry)",
      "perplexity": 1.2436883449554443,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contain(x, y)",
        "Reads(x, y)",
        "GainsKnowledge(x, y)",
        "BecomeSmarter(x)",
        "BecomeSmarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry thoreau']}  # Becomes smarter is a relation between two states of Harry before and after reading the book. To capture this in FOL we need to define 'smarter' as an attribute of a person, but since it's not stated that there are different states or stages for people with respect to their intelligence in the problem description - I just added ",
        "walden",
        "henry thoreau']}  # Becomes smarter is a relation between two states of Harry before and after reading the book. To capture this in FOL we need to define 'smarter' as an attribute of a person, but since it's not stated that there are different states or stages for people with respect to their intelligence in the problem description - I just added "
      ],
      "fol_rules": [
        "∀x (Contain(x, y) → ∃z (GainsKnowledge(z, x)))",
        "∀x (∃y (Reads(x, y)) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → BecomeSmarter(x))",
        "Reads(harry, walden)",
        "BecomeSmarter(x, z)"
      ],
      "fol_conc": "BecomeSmarter(harry, x)",
      "perplexity": 4.831011772155762,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: GainsKnowledge/1, GainsKnowledge/2, BecomeSmarter/1, BecomeSmarter/2.\n\n\nFatal error:  The following symbols are used with multiple arities: GainsKnowledge/1, GainsKnowledge/2, BecomeSmarter/1, BecomeSmarter/2"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 419
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "WorkingRemotely(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x ∀y (Employee(x) ∧ ScheduleMeeting(x, y) → Appear(x, company))",
        "∀x (Employee(x) ∧ Lunch(x, company) → ScheduleMeeting(x, x))",
        "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, Home(x))))",
        "∀x (Lunch(x, Home(x)) → WorkingRemotely(x))",
        "∀x (OtherCountry(x) → WorkingRemotely(x))",
        "¬∃x (Manager(x) ∧ WorkingRemotely(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": [
        1.055936336517334,
        1.0088725090026855
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, Home(x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Manager(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james",
        "company",
        "home"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, company) → Appear(x, company))",
        "∀x (Lunch(x, company) → Schedule(x, company))",
        "∀x (Employee(x) → (Lunch(x, company) ∨ Lunch(x, home)))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": 1.1506866216659546,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomer(x)",
        "AppearInCompanyToday(x)",
        "HaveLunchInCompany(x)",
        "HaveLunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeetingWithCustomer(x) → AppearInCompanyToday(x))",
        "∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x))",
        "∀x (Employee(x) → HaveLunchInCompany(x) ∨ HaveLunchAtHome(x))",
        "∀x (Employee(x) ∧ HaveLunchAtHome(x) → WorkRemotelyFromHome(x))",
        "∀x ((Employee(x) ∧ ¬(WorkRemotelyFromHome(x))) → AppearInCompanyToday(x))"
      ],
      "fol_conc": "¬HaveLunchInCompany(james)",
      "perplexity": 1.2246936559677124,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 420
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "BredBack(x)",
        "Resembles(x, y)",
        "DomesticAnimal(y)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BredBack(x) → DomesticAnimal(x))",
        "∃y ((Aurochs(y)) ∧ Resembles(heckcattle, y))",
        "∀x (Resembles(x, Aurochs) → BG x)",
        "∀x (Resembles(Aurochs, x) → BG x)",
        "∃y ((DomesticAnimal(y)) ∧ Resembles(y, Aurochs))"
      ],
      "fol_conc": "¬Aurochs",
      "perplexity": [
        1.5218479633331299,
        1.3829015493392944
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Resembles(x, Aurochs) → BG x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breeding(x, y)",
        "Domestic(x, y)",
        "Artificial(x, y)",
        "Selective(x, y)",
        "Bredback(x)",
        "Heck(cattle)",
        "Resemble(x, y)"
      ],
      "fol_consts": [
        "aurochs",
        "animals",
        "bg"
      ],
      "fol_rules": [
        "(Domestic(bredback, x) → Artificial(x))",
        "(∃x (Bredback(x) ∧ Heck(x))) ⊕ (∀y (Aurochs(y) → Animals(y)))",
        "(Heck(cattle) ∧ Aurochs(aurochs) → Resemble(cattle, aurochs))",
        "((Resemble(heck, cattle) ∧ Breeding(x, y)) → Animal(y)) ⊕ ((Bredback(bredback) ∧ Heck(cattle)) ∨ ¬Animal(bredback))"
      ],
      "fol_conc": "(∃x (Aurochs(x))) ⊕ Extinct(x)",
      "perplexity": 2.3781168460845947,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BreedingBack(x, y)",
        "Selects(z)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "(∃x (BreedingBack(heck, x))) → Selects(x)",
        "(∀z ((BreedingBack(breedinback, z)) ∧ BreedingBack(z) ⊕ ∃y (∀w (Selects(w) ∧ BreedingBack(y)))) → BreedingBack(echock, y))",
        "¬(BreedingBack(aurochs, heck) ∨ Selects(breedinbakk))",
        "(∀z ((BreedingBack(z))) → ∃w (Selects(w) ∧ BreedingBack(x)))",
        "(∃x (∀y ((BreedingBack(echohcet, x)) ∧ BreedingBack(heccchetmblecchett)) ⊕ ((¬BreedingBack(aurochs)))) → ∃w (Selects(w) ∨ BreedingBack(x)))",
        "(∀x (∃y (((BreedingBack(z, x) ∧ BreedingBack(y)) → Selects(echohcet))) → ∀z (((BreedingBack(heckecheccchettmblecchetlbeebreeeddcebbdbeeecbcdeeebdcdebdecddbedcdedebebdfdedfddddeeefeeeefeeggefgffgghhiggjhgihigiiiljjjkjlleellmmnnnooopppqrrrqssttuuvvwwxxyyzz)) ⊕ ((¬Selects(echohcet) ∨ BreedingBack(heckecheccchettmblecchetlbeebreeeddcebbdbeeecbcdeeebdcdebdecddbedcdedebebdfdedfddddeeefeeeefeeggefgffgghhiggjhgihigiiiljjjkjlleellmmnnnooopppqrrrqssttuuvvwwxxyyzz))))) ⊕ ∃w ((Selects(w) ∧ ¬BreedingBack(z)))))",
        "(∀z (∃u (BreedingBack(echohcet, u)) → Selects(u)))",
        "(¬(BreedingBack(aurochs)) ∨ BreedingBack(hcekheccchetmblecchett) ⊕ ¬Selects(z))"
      ],
      "fol_conc": "∃x (BreedingBack(x, aurosctext))",
      "perplexity": 7.498645305633545,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BreedingBack/1, BreedingBack/2.\n\n\nFatal error:  The following symbols are used with multiple arities: BreedingBack/1, BreedingBack/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 421
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "∃x (Flies(susan, x))",
        "¬(SameAirport(x, x))",
        "Flies(john, lga)"
      ],
      "fol_conc": "∃x (Flies(susan, x) ∧ SameAirport(x, lga))",
      "perplexity": [
        1.5785239934921265,
        1.0366877317428589
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Airport(y)"
      ],
      "fol_consts": [
        "susan",
        "john"
      ],
      "fol_rules": [
        "∀x (∃y (Airport(y)) → Flies(susan, x) ∧ ¬(Susan(x)))",
        "¬Flies(john, x)"
      ],
      "fol_conc": "∃y (Airport(y) → Flies(susan, y))",
      "perplexity": 3.089848518371582,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Flies(x, y)",
        "SameAirport(x, x)"
      ],
      "fol_consts": [
        "Susan",
        "John"
      ],
      "fol_rules": [
        "∀x (Flies(x, LGA))",
        "¬(SameAirport(LGA, LGA)) → ¬(Flies(Susan, Susan))",
        "(Flies(John, LGA) ∧ SameAirport(John, LGA))"
      ],
      "fol_conc": "∃x (Flies(Susan, x) ∧ SameAirport(x, LGA))",
      "perplexity": 2.3393635749816895,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 422
  },
  {
    "id": 174,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor visits the gym at least once a day.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "EatSalads(x)",
        "HealthConscious(x)",
        "HealthConsciousChildhood(x)",
        "FulfillsNutritionalIntake(x)",
        "GoodRelationshipWithParents(x)",
        "VisitsGymDaily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalads(x) → HealthConscious(x))",
        "∀x (HealthConsciousChildhood(x) → EatSalads(x))",
        "∀x (FulfillsNutritionalIntake(x) → HealthConsciousChildhood(x))",
        "∀x (GoodRelationshipWithParents(x) → FulfillsNutritionalIntake(x))",
        "∀x (GoodRelationshipWithParents(x) → ¬EatSalads(x))",
        "∀x (VisitsGymDaily(x) → FulfillsNutritionalIntake(x))",
        "(HealthConsciousChildhood(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(HealthConsciousChildhood(taylor) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "VisitsGymDaily(taylor)",
      "perplexity": [
        1.047791838645935,
        1.018127202987671
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x, y)",
        "Healthconscious(x)",
        "Grewup(x, y)",
        "Fulfill(x)",
        "Goodrelationship(x)",
        "Gym(x)",
        "Dailyintake(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x, salads) ∧ Regularly(x, salads) → Healthconscious(x))",
        "∀x (Grewup(x, healthconscious) → Regularly(x, salads))",
        "∀x (Fulfill(x) → Grewup(x, healthconscious))",
        "∀x (Goodrelationship(x) → Fulfill(x))",
        "∀x (Goodrelationship(x) → ¬Eat(x, salads) ∧ ¬Regularly(x, salads))",
        "∀x (Gym(x) → Fulfill(x))",
        "(Grewup(taylor, healthconscious) ∧ Goodrelationship(taylor)) ⊕ ¬(Grewup(taylor, healthconscious) ∨ Goodrelationship(taylor))"
      ],
      "fol_conc": "Gym(taylor)",
      "perplexity": 1.1961312294006348,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Healthconscious/1, Healthconscious/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Healthconscious/1, Healthconscious/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "EatSaladsRegularly(x)",
        "Conscious(x)",
        "GrewUpInHome(x, y)",
        "FulfillDailyIntake(x)",
        "GoodRelationshipWithParents(x)",
        "VisitGymAtLeastOnceADay(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → Conscious(x))",
        "∀x (GrewUpInHome(x, health_conscious) → EatSaladsRegularly(x))",
        "∀x (FulfillDailyIntake(x) → GrewUpInHome(x, health_conscious))",
        "∀x (GoodRelationshipWithParents(x) → FulfillDailyIntake(x))",
        "∀x (GoodRelationshipWithParents(x) → ¬EatSaladsRegularly(x))",
        "∀x (VisitGymAtLeastOnceADay(x) → FulfillDailyIntake(x))",
        "(GrewUpInHome(taylor, health_conscious) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHome(taylor, health_conscious) ∨ GoodRelationshipWithParents(taylor))"
      ],
      "fol_conc": "VisitGymAtLeastOnceADay(taylor)",
      "perplexity": 1.1748448610305786,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 423
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(y)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "Greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, y) → ¬Empty(y))",
        ",  // Rule 1 ∀x (Airline(x) → Transport(x, multiple))",
        "\nRule 2",
        "∀x (Plane(x) ∧ Empty(x))",
        "\nRule 3",
        "¬Airline(Greyhound) → ¬Plane(Greyhound)"
      ],
      "fol_conc": "Airline(Greyhound)",
      "perplexity": [
        1.8423994779586792,
        1.7174742221832275
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  // Rule 1 ∀x (Airline(x) → Transport(x, multiple))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cantransport(x)",
        "Empty(x)",
        "Airline(x)"
      ],
      "fol_consts": [
        "greyhound",
        "airlines",
        "boeing707s",
        "planes"
      ],
      "fol_rules": [
        "(Cantransport(x)) ∧ (Not(empty)) → True(x)",
        "Airline(x) ∧ Cantransport(x)",
        "Plane(x) ∧ Boeing707(x)",
        "¬(Greyhound(x) ∧ Airline(x))",
        "No(greyhound, planes)"
      ],
      "fol_conc": "Greyhound(is)",
      "perplexity": 2.324756383895874,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Greyhound/1, Greyhound/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Greyhound/1, Greyhound/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "canTransport(x, y)",
        "empty(x)",
        "isAirline(x)",
        "isAirline(x)"
      ],
      "fol_consts": [
        "Greyhound",
        "Boeing707s",
        "airlines",
        "planes"
      ],
      "fol_rules": [
        "∀x (canTransport(x, y) → ¬empty(x))",
        "∀x (isAirline(x) ∧ canTransport(x, y))",
        "∀x (isAirline(x) ∧ isAirline(y))",
        "∀x (isAirline(x) ∧ canTransport(planes, x))",
        "¬(isAirline(Greyhound) → ¬canTransport(planes, Greyhound))"
      ],
      "fol_conc": "isAirline(Greyhound)",
      "perplexity": 1.7525084018707275,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 424
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Island(x)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "antarctica",
        "south_shetland_islands"
      ],
      "fol_rules": [
        "Named(barutin_cove, barutin)",
        "Located(barutin_cove, snow_island)",
        "∃x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island)",
        "∀x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island → PartOf(x, south_shetland_islands))",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": [
        1.2041075229644775,
        1.174124836921692
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Island(x)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "barutin",
        "cove",
        "bulgarian",
        "settlement",
        "southwest",
        "coast",
        "snow",
        "island",
        "south",
        "shetland",
        "islands",
        "greenwich",
        "deception",
        "antarctica"
      ],
      "fol_rules": [
        "Named(ant, bulgarian)",
        "Located(cove, southwest)",
        "Located(southwest, snow)",
        "Island(snow)",
        "Island(greenwich)",
        "Island(deception)",
        "Part(south, shetland)",
        "Part(shetland, ant)",
        "∀x ∀y ∀z (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "¬Located(bulgarian, ant)",
      "perplexity": 1.301805853843689,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Named(x, y)",
        "LocatedIn(x, y)",
        "PartOf(y, x)"
      ],
      "fol_consts": [
        "barutin",
        "cove",
        "bulgarian",
        "snow",
        "south",
        "shetland",
        "islands",
        "antarctica",
        "greenwich",
        "deception"
      ],
      "fol_rules": [
        "Named(antarticocove, bulgarian)",
        "LocatedIn(cove, snow)",
        "PartOf(snow, south)",
        "PartOf(shetland, antarctica)",
        "(LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)"
      ],
      "fol_conc": "¬LocatedIn(bulgarian, antarctica)",
      "perplexity": 1.8011727333068848,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 425
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "PopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "BestUniversities(x)"
      ],
      "fol_consts": [
        "Beijing",
        "PRC"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, PRC))",
        "∀x (PopulousNationalCapitalCity(Beijing))",
        "∀x (LocatedIn(Beijing, Northern China))",
        "∃x (HostedOlympics(Beijing, 2008 Summer Olympics) ∧ HostedOlympics(Beijing, 2008 Winter Paralympics))"
      ],
      "fol_conc": "∃x (HostedOlympics(Beijing, 2008 Summer Olympics) ∧ HostedOlympics(Beijing, 2008 Winter Paralympics))",
      "perplexity": [
        2.1414239406585693,
        1.0372672080993652
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Population(x)",
        "Location(x, y)",
        "Host(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Location(x, china))",
        "Bejinghost(beijing, olympics) ∧ Bejinghost(beijing, paraolympic)",
        "Bejinghost(beijing, summergames) ∧ Bejinghost(beijing, wintergames)"
      ],
      "fol_conc": "Beijinghostedbothsummerandwinterolympics(beijing)",
      "perplexity": 1.9591832160949707,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldMostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedGames(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "People'sRepublicOfChina",
        "SummerOlympics",
        "People'sRepublicOfChina",
        "SummerOlympics",
        "Beijing",
        "SummerOlympics",
        "SummerOlympics",
        "People'sRepublicOfChina",
        "Beijing",
        "People'sRepublicOfChina",
        "Beijing",
        "SummerOlympics"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, y) → ∃z (WorldMostPopulousNationalCapitalCity(z) ∧ LocatedIn(y, z)))",
        "HostedGames(Beijing, SummerOlympics) ∨ HostedGames(Beijing, People'sRepublicOfChina)",
        "HostedGames(Beijing, SummerOlympics) ∨ HostedGames(Beijing, People'sRepublicOfChina)"
      ],
      "fol_conc": "HostedGames(Beijing, SummerOlympics)",
      "perplexity": 2.371943473815918,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 426
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "DesignStyle(x, y)"
      ],
      "fol_consts": [
        "max",
        "kelly",
        "zaha"
      ],
      "fol_rules": [
        "∀x (DesignStyle(zaha, x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        "(DesignStyle(zaha, x) ⊕ DesignStyle(kelly, x))",
        "∀x (DesignStyle(kelly, x) → Evocative(x))",
        "∀x (DesignStyle(kelly, x) → Dreamy(x))",
        "(DesignStyle(max, x) ∧ Timeless(x)) → (MassProduct(x) ∧ Evocative(x))"
      ],
      "fol_conc": "∃x (DesignStyle(max, x) → (Evocative(x) ⊕ Dreamy(x)))",
      "perplexity": [
        1.0870299339294434,
        1.1955918073654175
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Design(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x, zaha) → Timeless(x))",
        "¬Mass(x) → ¬Timeless(x)",
        "Design(x, zaha) ⊕ Design(x, kelly)",
        "∀x (Design(x, kelly) → Evocative(x))",
        "∀x (Design(x, kelly) → Dreamy(x))",
        "Timeless(x) → (Mass(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Evocative(x) ⊕ Dreamy(x)",
      "perplexity": 1.1647188663482666,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 427
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Allowed(x, y)",
        "DepositRequired(y)",
        "EqualToOneMonthsRent(z)",
        "MoreThanOneMonthsRent(z)",
        "Pet(x)",
        "Cat(x)",
        "ManagedBuilding(y)",
        "RentsApartmentIn(x, y)",
        "MoveWithPet(x, z, y)",
        "MonthlyRent(y, z)",
        "SecurityDeposit(y, w)",
        "LessThanOrEqualTo(a, b)",
        "MoreThan(a, b)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olive_garden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Pet(x) ∧ Allowed(x, y))",
        "∀y (ManagedBuilding(y) → DepositRequired(y))",
        "∀z ((EqualToOneMonthsRent(z)) ⊕ MoreThanOneMonthsRent(z))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "MonthlyRent(olive_garden, $2000)",
        "(RentsApartmentIn(tom, y) ↔ (MoveWithPet(tom, fluffy, y) ∧ SecurityDeposit(y, z) → LessThanOrEqualTo(z, $1500)))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "RentsApartmentIn(tom, olive_garden)",
      "perplexity": [
        1.2470723390579224,
        1.0804589986801147
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Allowed(x, y)",
        "Requires(x, y)",
        "Equal(x, y)",
        "More(x, y)",
        "Owns(x, y)",
        "Is(x, y)",
        "Has(x, y)",
        "Will(x, y)"
      ],
      "fol_consts": [
        "pets",
        "deposit",
        "rent",
        "fluffy",
        "tom",
        "cats",
        "olivegarden",
        "monthlyrent",
        "securitydeposit",
        "apartment",
        "managedbuilding",
        "pet",
        "amount",
        "condition"
      ],
      "fol_rules": [
        "∃x ∀y (Pets(x) → Allowed(x, y))",
        "Requires(rent, apartment)",
        "(Equal(securitydeposit, rent) ⊕ More(securitydeposit, rent))",
        "Owns(tom, fluffy)",
        "Is(fluffy, cats)",
        "Is(olivegarden, managedbuilding)",
        "Has(monthlyrent, olivegarden, amount2000)",
        "(Will(tom, apartment) ↔ (Allowed(pet, condition) ∧ More(securitydeposit, amount1500)))",
        "More(amount2000, amount1500)"
      ],
      "fol_conc": "Will(tom, olivegarden)",
      "perplexity": 1.6202417612075806,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "AllowsPets(x)",
        "ManagedBuilding(x)",
        "RequiresDeposit(y, x)",
        "EqualTo(a, b)",
        "MoreThan(a, b)",
        "OwnsPet(a, b)",
        "IsPet(c)",
        "AllowsPets(d, e)",
        "RequiresDeposit(f, g)",
        "EqualTo(h, i)",
        "MoreThan(j, k)",
        "WillRent(a, b)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ AllowsPets(x))",
        "∀y ∀z ((ManagedBuilding(z) ∧ RequiresDeposit(y, z)))",
        "∀a ∀b (RequiresDeposit(a, b) → (EqualTo(a, b) ⊕ MoreThan(a, b)))",
        "OwnsPet(tom, fluffy)",
        "IsPet(fluffy)",
        "ManagedBuilding(olive_garden)",
        "EqualTo($2000, olive_garden)",
        "MoreThan($1500, $2000)",
        "WillRent(tom, olive_garden) → (AllowsPets(fluffy, olive_garden))",
        "∀a ∀b ((RequiresDeposit(olive_garden, tom) → (EqualTo($1500, $2000) ⊕ MoreThan($1500, $2000))))"
      ],
      "fol_conc": "WillRent(tom, olive_garden)",
      "perplexity": 1.810172438621521,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 428
  },
  {
    "id": 115,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter is shorter than a man in Michael's class.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Height(x)",
        "CanBlock(y,z)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x ∀y (H(x) → C(y,z))",
        "(Michael ∈ P(Peter))"
      ],
      "fol_conc": "P(Peter)",
      "perplexity": [
        3.9330670833587646,
        3.7550597190856934
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Michael ∈ P(Peter))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, taller)",
        "Can(x, shoot)"
      ],
      "fol_consts": [
        "michael",
        "peter"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(y, x)) → Can(shootfrompersonxbypersonoty)",
        "(Shooter(michael, persona) ∧ Shootable(a, personb)) → (Can(blockshotera) ∨ (Not(blockshotera)))",
        "Is(peter, taller) → Is(peter, shorter)"
      ],
      "fol_conc": "Is(peter, shorter)",
      "perplexity": 5.8693528175354,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Taller/2, Taller/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Taller/2, Taller/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Height(x)",
        "Block(x, y)"
      ],
      "fol_consts": [
        "mike",
        "peter"
      ],
      "fol_rules": [
        "∀x (Height(x) → Block(mike, x))",
        "(Block(pete, mike) ∧ Height(mike) ∨ ¬(Block(pete, mike))) ⊕ ∀x ((Block(mike, y) ∧ Block(y, z)) → Block(mike, z))",
        "∃y (∀z (Height(z) ∧ ∃w (Block(w, y)) → ∀x (Block(x, w))))"
      ],
      "fol_conc": "(Block(pete, mike) ∨ Height(peter) ⊕ ∀x ((Block(mike, x) ∧ Block(x, z)) → Block(mike, z)))",
      "perplexity": 2.9387381076812744,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 429
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Web",
        "net"
      ],
      "fol_consts": [
        "webnet]"
      ],
      "fol_rules": [
        "Anything can be found in the internet.",
        "In real life, you need to know how to get out of it."
      ],
      "fol_conc": "There is no magic in the world, and you cannot find any more than the world can get out of a hole!",
      "perplexity": [
        5.188683986663818,
        14.156132698059082
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Anything can be found in the internet."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_consts": [
        "Cricket', 'Tennis','Micropeal.jpg'],                          ----(",
        ")"
      ],
      "fol_rules": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_conc": "Rosy(x) ∧ Rosy(n)",
      "perplexity": 14.295182228088379,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 430
  },
  {
    "id": 143,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Some Heck cattle are artificially selected.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "BackBred(x)",
        "SelectiveBreeding(x, y, z)",
        "HeckCattle(x)",
        "Animal(x)",
        "Aurochs(x)",
        "Extinct(x)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "∃x (BackBred(x) ∧ ∃y ∃z (SelectiveBreeding(y, z, x)))",
        "HeckCattle(heck)",
        "Aurochs(aurochs)",
        "Animal(heck)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Extinct(x) ∧ SelectiveBreeding(y, x, z))"
      ],
      "fol_conc": "∃x (HeckCattle(x) ∧ BackBred(x))",
      "perplexity": [
        1.3350132703781128,
        1.2688509225845337
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Artificiallyselected(x)",
        "Bredback(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "heck",
        "aurochs"
      ],
      "fol_rules": [
        "Bredback(heck) → Artificiallyselected(heck)",
        "Bredback(heck) ∧ Resemble(heck, aurochs)",
        "Animal(heck)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Extinct(x) ∧ Resemble(x, y))"
      ],
      "fol_conc": "∃x (Animal(x) ∧ Bredback(x) ∧ Artificiallyselected(x))",
      "perplexity": 1.3203004598617554,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ArtificialSelection(x)",
        "Backed(x, y)",
        "Resemble(x, y)",
        "Extinct(y)",
        "BreedingOf(x)"
      ],
      "fol_consts": [
        "heck cattle",
        "aurochs"
      ],
      "fol_rules": [
        "∀x (BreedingOf(x) → ArtificialSelection(x))",
        "(Backed(heck cattle, aurochs) ∧ BreedingOf(heck cattle))",
        "¬ArtificialSelection(heck cattle)",
        "BreedingOf(aurochs) ⊕ Extinct(aurochs)",
        "BreedingOf(aurochs)"
      ],
      "fol_conc": "∃x (Backed(x, aurochs) ∧ BreedingOf(x) ∧ ArtificialSelection(x))",
      "perplexity": 2.555887222290039,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 431
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Animal(x)",
        "Loves(x, y)",
        "Favorite(x, y)",
        "Australian(x)",
        "Fluffy(x)"
      ],
      "fol_consts": [
        "Max",
        "Koala",
        "Tourists"
      ],
      "fol_rules": [
        "∀x (Loves(Max, Animals) → Favorite(Max, Animals))",
        "ς▼  Τ χ⁡.  /ψ ι Ϋ λ. ",
        "∀x (Quokka(Animal) → Australian(Animal))",
        "υ Τ χ⁡.μ"
      ],
      "fol_conc": "Koalas love to sleep and are quokkas",
      "perplexity": [
        2.5639846324920654,
        2.136125087738037
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "ς▼  Τ χ⁡.  /ψ ι Ϋ λ."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "Animal(x)",
        "From(x, y)",
        "Fluffy(x)",
        "Sleeps(x)"
      ],
      "fol_consts": [
        "max",
        "koala",
        "quokka",
        "australia",
        "animals"
      ],
      "fol_rules": [
        "∀y (Loved(animals, tourists) → Favorite(max, animals))",
        "∀x (From(x, australia) ∧ Loved(x, tourists))",
        "∀x (Animal(x) ∧ From(x, australia))",
        "Favorite(max, animals) ∧ Fluffy(animals)",
        "All(favorite, max) → Sleeps(favorites)",
        "Fluffy(koala) → ¬(From(koala, quokka))"
      ],
      "fol_conc": "Sleeps(koalas) ∧ From(koalas, quokka)",
      "perplexity": 1.6129482984542847,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Favorite/2, Favorite/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Favorite/2, Favorite/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "LovedBy(x, y)",
        "Favorite(x, y)",
        "LovedBy(x, y)"
      ],
      "fol_consts": [
        "animals",
        "Max",
        "koalas",
        "quokkas"
      ],
      "fol_rules": [
        "(LovedBy(Max, x)) ∧ (Favorite(Max, x)) → (LovedBy(a, x)) ∨ (LovedBy(x, a))",
        "LovedBy(animals, a) → (LovedBy(a, animals))",
        "LovedBy(australia, animals) ∧ Favorite(Max, animals)",
        "(Favorite(Max, x)) ∧ (LovedBy(x, Max))",
        "LovedBy(koalas, a)",
        "LovedBy(a, koalas) ∧ LovedBy(koalas, a)"
      ],
      "fol_conc": "LovedBy(animals, koalas)",
      "perplexity": 3.8307785987854004,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 432
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "e1",
        "m"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "(From(marvin, m) ∧ From(marvin, e1)) ⊕ ¬(From(marvin, mars))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.242605447769165,
        1.9152517318725586
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "(From(mars, x) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x ((Earth(x)) → Human(x))",
        "(Marvin(mars) ∧ ¬From(mars, marvin) ⊕ (From(earth, marvin)))",
        "(¬From(earth, marvin) → Extraterrestrial(marvin))"
      ],
      "fol_conc": "((Marvin(mars) ∧ From(earth, marvin)) → Human(marvin))",
      "perplexity": 1.8097050189971924,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 433
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourist(x)",
        "FavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourist(x) → FavoriteAnimal(max, x))",
        "(AnimalFromAustralia(x) ∧ LoveToSleep(x)) ⊕ ¬(AnimalFromAustralia(x) ∨ LoveToSleep(x))"
      ],
      "fol_conc": "FavoriteAnimal(max, AnimalFromAustralia(x))",
      "perplexity": [
        1.3536055088043213,
        1.5918196439743042
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteAnimal(max, AnimalFromAustralia(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, z)",
        "From(x, y)",
        "Veryfluffy(z)",
        "Love(z, w)",
        "Fluffy(z)",
        "Sleepy(z)"
      ],
      "fol_consts": [
        "max",
        "animals",
        "tourists",
        "australia",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(x, z))",
        "∀x (∃y (From(y, x) ∧ Loved(tourists, y)))",
        "∀x ∀z ((From(x, z) ∧ Loved(tourists, x)) → From(australia, z))",
        "∀x ∀y ((Favorite(z, x) ∧ Veryfluffy(y)) → Fluffy(y))",
        "∀x (Fluffy(y) → Sleepy(y))",
        "¬(Veryfluffy(x) ∧ Not(quokka)) ∨ ∃z (From(z, quokka) ∧ Fluffy(x))"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 2.0115559101104736,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Loved(x, y)",
        "FavoriteAnimal(z)",
        "Loved(x, z)",
        "FavouriteAnimalsAreVeryFluffy(animals)",
        "Loved(bytourists)",
        "Loved(tosleepx)",
        "FavoriteAnimal(sleepingz)",
        "Loved(ausquokkaq, s)",
        "FavoriteAnimal(z)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "bytheaustraliacountry",
        "kakuaussieanimalnameforshorty",
        "ausuofallanimalsinthiscountryforyou",
        "sleezingzislikekoalawhichlovesleepingandtheyareveryfluffy",
        "qoockaazuisquokka",
        "sleepingozone"
      ],
      "fol_rules": [
        "(Loved(x, y) → FavoriteAnimal(z))",
        "(∀x (Loved(bytourists)))",
        "(¬(FavouriteAnimalsAreVeryFluffy(ausanimalsqzuaussiesatthistouristyplaceforquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)) ⊕ Loved(x, bytourists))",
        "(∀x (Loved(bytheaussieanfromthatnatsionalparkwheretheqoockaslive)))",
        "FavouriteAnimalsAreVeryFluffy(ausquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)",
        "(∀x (Loved(bytourists) ∧ FavoriteAnimal(z)) → Loved(tosleepz, z))",
        "¬(FavoriteAnimal(sleepingqoockaazuisquokka)) ∨ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)",
        "(∃x (Loved(tosleepz, z) ∧ FavoriteAnimal(sleepingqoockaazuisquokka)) → Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere))",
        "Loved(tosleepz, z)"
      ],
      "fol_conc": "(∃x (FavoriteAnimal(z) ∧ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)))",
      "perplexity": 5.720861911773682,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loved/2, Loved/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loved/2, Loved/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 434
  },
  {
    "id": 91,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language generation task.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "IsMachineTranslation(e)",
        "Translate(translate(x), e)"
      ],
      "fol_consts": [
        "English",
        "e"
      ],
      "fol_rules": [
        "∀x (∃y (Translate(x, y) ∧ Translate(y, e)))",
        "∈∩ ∀y ((e = x ∨ ¬¬∀z (Translate(z, x))))",
        "∀x ∘((IsLanguageGeneration(x)) → (∧((Translate(translate(x), e)), IsMachineTranslation(e)) ∨ MachineTranslatedTextSequenceDoesNotMatchAnyOtherTranslations(e)))), Translate(Translate(English, e))"
      ],
      "fol_conc": "(∃x (IsMachineTranslation(e) ∧ Translate(Translate(translate(x), y)) ∨ ¬¬∀y (IsLanguageGeneration(y))))",
      "perplexity": [
        3.0156726837158203,
        2.4572741985321045
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∈∩ ∀y ((e = x ∨ ¬¬∀z (Translate(z, x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Natural(x)",
        "Language(x)"
      ],
      "fol_consts": [
        "text",
        "language",
        "translation"
      ],
      "fol_rules": [
        "∀x (Text(x)) → Language(rintexts)",
        "∃y (Machine(y, translation) ∧ Text(yn))"
      ],
      "fol_conc": "Language(rintexts)",
      "perplexity": 5.177934169769287,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Categorical(x)",
        "LanguageGenerationTask(x)",
        "NaturalLanguageProcessing(x)",
        "LanguageGenerationTask(x)"
      ],
      "fol_consts": [
        "NLPTasks",
        "NLPTasks",
        "NLPTasks",
        "NLPTasks"
      ],
      "fol_rules": [
        "∀x (Categorical(x) ∧ LanguageGenerationTask(y)) → ∃z ((NaturalLanguageProcessing(z, x))) ∨ (∀y (LanguageGenerationTask(y) ⊕ NaturalLanguageProcessing(z)))",
        "(NaturalLanguageProcessing(r) ∧ Categorical(n)) → ¬(NaturalLanguageProcessing(n) ∨ NaturalLanguageProcessing(r))"
      ],
      "fol_conc": "∃x ((Categorical(x) ∧ LanguageGenerationTask(x)) ∨ (∀y (LanguageGenerationTask(y) ⊕ NaturalLanguageProcessing(z))))",
      "perplexity": 3.8204309940338135,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NaturalLanguageProcessing/2, NaturalLanguageProcessing/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NaturalLanguageProcessing/2, NaturalLanguageProcessing/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 435
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Mammal(x) → Monkey(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wing(x))",
        "(¬Fly(rock) ∧ ¬Bird(rock)) → (¬Fly(rock) ∧ ¬Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0420074462890625,
        1.2327877283096313
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)",
        "Fly(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wing(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.1422373056411743,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)"
      ],
      "fol_consts": [
        "rock",
        "rock"
      ],
      "fol_rules": [
        "Mammal(x) → Animal(x)",
        "∀x (Monkey(x) → Mammal(x))",
        "Animal(x) ⊕ Bird(x)",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "Fly(x) → Wing(x)",
        "(Fly(rock) ∨ Bird(rock)) ∧ ¬(Fly(rock) ⊕ Bird(rock)) → ((¬Fly(rock)) ∨ (¬Breathe(rock)))"
      ],
      "fol_conc": "Mammal(rock)",
      "perplexity": 2.675429582595825,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 436
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)",
        "NoTet(platypus)",
        "AreMammals(platypus, humans)"
      ],
      "fol_consts": [
        "platypus",
        "human",
        "platy",
        "Homo sapiens",
        "humans"
      ],
      "fol_rules": [
        "-∃x ((NoTeeth(x) ∨ Teeth(x)) → IsMammal(x)): Some mammals have teeth. If no mammals have teeth or a non-mammal has teeth, then the subject is a mammal.",
        "- Platypus: Mammal",
        "- Human: Mammal"
      ],
      "fol_conc": "Platypus are reptiles",
      "perplexity": [
        2.7439358234405518,
        2.110795736312866
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "-∃x ((NoTeeth(x) ∨ Teeth(x)) → IsMammal(x)): Some mammals have teeth. If no mammals have teeth or a non-mammal has teeth, then the subject is a mammal."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(y)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∀x (Platypus(x) → ¬Teeth(x))",
        "(Human(rina) ∧ Teeth(rina)) ⊕ ¬(Human(rina) ∨ Teeth(rina))"
      ],
      "fol_conc": "Mammal(rplatypus)",
      "perplexity": 2.841607093811035,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∀x (Mammal(x)) → ∃y (HasTeeth(y, x) ∨ ¬(HasTeeth(y, x)))",
        "(Mammal(x)) ∧ HasTeeth(x)",
        "(Mammal(x)) ∧ ¬(HasTeeth(x))"
      ],
      "fol_conc": "¬(Mammal(platypus) ⊕ Mammal(humans))",
      "perplexity": 2.171592950820923,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasTeeth/1, HasTeeth/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasTeeth/1, HasTeeth/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 437
  },
  {
    "id": 67,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Yale University has the largest university endowment of any educational institution.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "University(x)",
        "Moved(y, x)"
      ],
      "fol_consts": [
        "BeninFranklinCollege",
        "BerkeleyCollege",
        "BranfordCollege",
        "DavenportCollege",
        "EzraStilesCollege",
        "GraceHopperCollege",
        "JonathanEdwardsCollege",
        "MorseCollege",
        "PauliMurrayCollege",
        "PiersonCollege",
        "SaybrookCollege",
        "SillimanCollege",
        "TimothyDwightCollege",
        "TrumbullCollege"
      ],
      "fol_rules": [
        "∀x (University(x) → Moved(x, 1716))"
      ],
      "fol_conc": "∀y (∧(Endowment(y, z)) ∧ Z = 42.3 billion)",
      "perplexity": [
        2.7292356491088867,
        1.7189409732818604
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y (∧(Endowment(y, z)) ∧ Z = 42.3 billion)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven"
      ],
      "fol_rules": [
        "(∃x (Private(yale) ∧ Ivy(x))) ∨ (∀x (Yale(x) → ∃y (Newhaven(y))))",
        "∀x ((Ivy(x) ∨ Newhaven(x)) ⊕ Yale(x))"
      ],
      "fol_conc": "(∃x (Private(x) ∧ Ivy(x))) ∨ ∃x (Yale(x))",
      "perplexity": 3.6875975131988525,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IvyLeague(x)",
        "Private(x)",
        "ResearchUniversity(yale)",
        "MovedToNewHaven(x, utsb)",
        "ResearchUniversity(utx)",
        "Private(x)"
      ],
      "fol_consts": [
        "yale",
        "newhaven"
      ],
      "fol_rules": [
        "∀x (IvyLeague(x) ∨ Private(x))",
        "(Private(yale)) ⊕ ResearchUniversity(yale)"
      ],
      "fol_conc": "∃x ((IvyLeague(x) ∧ MovedToNewHaven(utsb, x)) ∨ ∃y (∀z (ResearchUniversity(z) ∧ (MovedToNewHaven(utx, z) → ¬(Private(yale))) ∧ (IvyLeague(y) ∨ ResearchUniversity(y)))) ∨ Private(yale) ∨ ResearchUniversity(yale) ∨ MovedToNewHaven(newhaven, yale) ∨ ∃y (∀z ((ResearchUniversity(z) ∧ (MovedToNewHaven(newhaven, z) → ¬(Private(x))) ∧ (IvyLeague(x) ∨ ResearchUniversity(x)))) ∨ Private(x)))",
      "perplexity": 3.313566207885742,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x ((IvyLeague(x) ∧ MovedToNewHaven(utsb, x)) ∨ ∃y (∀z (ResearchUniversity(z) ∧ (MovedToNewHaven(utx, z) → ¬(Private(yale))) ∧ (IvyLeague(y) ∨ ResearchUniversity(y)))) ∨ Private(yale) ∨ ResearchUniversity(yale) ∨ MovedToNewHaven(newhaven, yale) ∨ ∃y (∀z ((ResearchUniversity(z) ∧ (MovedToNewHaven(newhaven, z) → ¬(Private(x))) ∧ (IvyLeague(x) ∨ ResearchUniversity(x)))) ∨ Private(x)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 438
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "FromEarth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x ((FromMars(x)) ⊕ Alien(x))",
        "∀x (∀y (Human(y) → ¬Extraterrestrial(y)))",
        "∀x (FromEarth(x) → Human(x))",
        "(Marvin ≠ FromEarths(marvin)) ⊕ True",
        "¬(FromEaRth(MarvIn)) → Extraterrestrial(Marvin)"
      ],
      "fol_conc": "[\"Human(marvin) ∨ FromMars(marvin)\", \"(Marvin =!= FromEarth(Marvin))]",
      "perplexity": [
        1.607723355293274,
        1.4814733266830444
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Marvin ≠ FromEarths(marvin)) ⊕ True"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "∃y ((From(y, mars) ∧ Alien(y)) → Alien(x))",
        "(¬(From(marvin, earth) ∧ From(marvin, mars)))",
        "(¬(From(marvin, earth)) → Extraterrestrial(x))"
      ],
      "fol_conc": "(Extraterrestrial(x) ⊕ Human(x) ∧ (Extraterrestrial(x) ⊕ From(marvin, mars)))",
      "perplexity": 1.962159276008606,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Extraterrestrial(y)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "(∀y (Extraterrestrial(y)))",
        "(¬(z) → Alien(z))",
        "(~ (p, q) ∧ ~ (q, p))",
        "((m, r) → Extraterrestrial(m))",
        "(∃x ((r, e) ∧ (∃n (~ (e, h)))))"
      ],
      "fol_conc": "~ (h, m)",
      "perplexity": 11.659405708312988,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬(z) → Alien(z))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 439
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "GrumpyPerson(x)",
        "AnimalLover(x)",
        "PetOwner(x)",
        "Owns(x, y)",
        "IsAPet(y)",
        "Be(x, y)",
        "And(p, q)",
        "Or(p, q)",
        "Not(p)",
        "Implication(p, q)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (PetOwner(x) → AnimalLover(x))",
        "PetOwner(tom)"
      ],
      "fol_conc": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))",
      "perplexity": [
        1.2260806560516357,
        1.07374906539917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x)",
        "Animal(y)",
        "Loves(x, y)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom",
        "pet"
      ],
      "fol_rules": [
        "¬(Nice(x, animal) ∧ Mean(x, animal))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "Animal(y) → (Loves(x, y) → Nice(x, y))",
        "Owns(x, y) → Loves(x, y)",
        "Owns(tom, pet)"
      ],
      "fol_conc": "¬Grumpy(tom) ∧ ¬Mean(tom, animal)",
      "perplexity": 1.3317378759384155,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "AnimalLover(x)",
        "OwnPet(x)"
      ],
      "fol_consts": [
        "tom",
        "grumpy"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃y (AnimalLover(y) ∧ MeanToAnimals(y))",
        "∀z (AnimalLover(z) → NiceToAnimals(z))",
        "OwnPet(tom)",
        "∀w ((OwnPet(w) → AnimalLover(w)))"
      ],
      "fol_conc": "¬MeanToAnimals(tom)",
      "perplexity": 1.5121904611587524,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 440
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "Montana(x)",
        "Has_Cities(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "white sulphur springs",
        "pierre"
      ],
      "fol_rules": [
        "∀x (City(billings) → City(Montana))",
        "∃x (Has_Cities(Butte, x) ∧ Has_Cities(White Sulphur Springs, x))"
      ],
      "fol_conc": "(∀x (City(billings) → City(Montana)) ∧ ∃x (Has_Cities(butte, x) ∧ Has_Cities(white sulphur springs, x)))→ ∃x (Butte and Pierre are in the same state)}",
      "perplexity": [
        2.959338426589966,
        1.1957212686538696
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x (City(billings) → City(Montana)) ∧ ∃x (Has_Cities(butte, x) ∧ Has_Cities(white sulphur springs, x)))→ ∃x (Butte and Pierre are in the same state)}"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "In(x, y)",
        "State(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "pierre",
        "white"
      ],
      "fol_rules": [
        "∀x (City(x) → In(x, montana))",
        "Montana(x) ∧ City(y) ∧ In(y, montanta) ∧ Is(y, x) → ¬Is(y, pierre)",
        "In(butte, white) ∧ In(white, butte) ∧ State(butte) ∧ ¬State(pierre)"
      ],
      "fol_conc": "Butte(x) ∧ Pierre(x)",
      "perplexity": 1.732763409614563,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Butte/1, Butte/0, Pierre/1, Pierre/0, Montana/1, Montana/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Butte/1, Butte/0, Pierre/1, Pierre/0, Montana/1, Montana/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "in_(x, y)",
        "in_(x)"
      ],
      "fol_consts": [
        "Billings",
        "Montana",
        "Butte",
        "Helena",
        "Missoula",
        "White Sulphur Springs",
        "Pierre"
      ],
      "fol_rules": [
        "∀x (in_(Billings, Montana))",
        "(in_(Butte, Pierre) ∧ in_(Butte, White Sulphur Springs)) → in_(Butte, Pierre)",
        "(¬(in_(Montana, Pierre)))",
        "∀x (in_(x) → in_(White Sulphur Springs, x))"
      ],
      "fol_conc": "in_(Pierre, Montana)",
      "perplexity": 4.1788482666015625,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: In_/1, In_/2.\n\n\nFatal error:  The following symbols are used with multiple arities: In_/1, In_/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 441
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "RomanceLanguage(x)",
        "IndoEuropeanLanguage(x)",
        "LanguageFamily(x)",
        "RelatedTo(x, y)",
        "French(x)",
        "Spanish(y)",
        "German(z)",
        "Basque(w)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque",
        "romancelanguages"
      ],
      "fol_rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
        "LanguageFamily(romancelanguages)",
        "∀x ∀y ((LanguageFamily(z) ∧ Within(x, z)) → RelatedTo(x, y))",
        "RomanceLanguage(french)",
        "RomanceLanguage(spanish)",
        "RelatedTo(german, spanish)",
        "¬∃x (RelatedTo(basque, x))"
      ],
      "fol_conc": "RomanceLanguage(german)",
      "perplexity": [
        1.1861941814422607,
        1.0798614025115967
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Romance(x)",
        "Indo(x)",
        "Family(x)",
        "Related(x, y)",
        "French(x)",
        "Spanish(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → Indo(x))",
        "Family(romance)",
        "∀x ∀y ((Language(x) ∧ Language(y)) → (Family(z) ∧ Related(x, y) → Family(x)))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "¬Related(basque, basque)"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.322885513305664,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Romance/1, Romance/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Romance/1, Romance/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Romance(x)",
        "IndoEuropean(x)",
        "LanguageFamily(y)",
        "RelatedTo(x, y)",
        "Basque(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german"
      ],
      "fol_rules": [
        "∀x (Romance(x) → IndoEuropean(x))",
        "LanguageFamily(french)",
        "∀y (LanguageFamily(y) → ∀x (RelatedTo(x, y)))",
        "Romance(spanish)",
        "Romance(german)",
        "¬Basque(spanish)"
      ],
      "fol_conc": "Romance(french) ⊕ IndoEuropean(spanish)",
      "perplexity": 1.933340311050415,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 442
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "bg",
        "p",
        "h"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(p)",
        "Mammal(p)",
        "Human(h) ∧ Teeth(h)"
      ],
      "fol_conc": "∃x (Mammal(x) ∧ Teeth(x)) → Mammal(p): Since some mammals have teeth and humans are mammals with teeth, but platypuses do not have teeth, there is no direct logical inference to conclude that platypus must be reptiles.",
      "perplexity": [
        1.6678686141967773,
        1.1349188089370728
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Mammal(x) ∧ Teeth(x)) → Mammal(p): Since some mammals have teeth and humans are mammals with teeth, but platypuses do not have teeth, there is no direct logical inference to conclude that platypus must be reptiles."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Platypus(platypus) → Mammal(platypus)",
        "Human(human) → Teeth(human)"
      ],
      "fol_conc": "Mammal(platypus)",
      "perplexity": 1.6307543516159058,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Teeth(x)",
        "Teeth(y, z)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Teeth(x))",
        "¬Teeth(platypus)",
        "Mammal(platypus)",
        "Teeth(humans)"
      ],
      "fol_conc": "¬Mammal(platypus)",
      "perplexity": 1.2442357540130615,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 443
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked_by_melissa",
        "dried_thai_chilies"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "ProductOf(dried_thai_chilies, baked_by_melissa)",
      "perplexity": [
        1.063886046409607,
        1.0164775848388672
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spicy(x)",
        "Bakery(x)",
        "Cupcake(x)",
        "Product(x, y)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "driedthai",
        "bakedbymelissa"
      ],
      "fol_rules": [
        "¬Bakery(x) ∨ ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthai) ∨ Bakery(driedthai) → (Hotpot(driedthai) ∨ Spicy(driedthai))"
      ],
      "fol_conc": "Product(driedthai, bakedbymelissa)",
      "perplexity": 1.2264339923858643,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried thai chilies",
        "baked by melissa"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked by melissa) → Cupcake(x))",
        "(Spicy(dried thai chilies) ∨ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ∨ Spicy(dried thai chilies))"
      ],
      "fol_conc": "ProductOf(dried thai chilies, baked by melissa)",
      "perplexity": 1.0802934169769287,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 444
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": [
        1.0449811220169067,
        1.0207343101501465
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": 1.1268501281738281,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) ↔ Rabbit(x) ∨ Animal(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Animal(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": 1.2171229124069214,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 445
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornInCity(y, z)",
        "Person(x)",
        "AmericanCity(z)",
        "NovelWriter(x)",
        "Created(x, y)",
        "Book(x)",
        "YearWritten(x, y)"
      ],
      "fol_consts": [
        "daniShapiro",
        "familyHistory",
        "familySecrets",
        "boston",
        "americanCity",
        "year2003"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Novel(x))",
        "∀y ∀z (BornInCity(Person(y), AmericanCity(z)) → Person(y) is American)",
        "∀x ∀y ((Novel(Book(x)) ∧ WrittenBy(Book(x), Person(y))) → NovelWriter(Person(y)))",
        "(DaniShapiro is an American writer): ¬AmericanCity(daniShapiro)",
        "FamilyHistoryBookWrittenByDani: WrittenBy(familyHistory, daniShapiro).",
        "NovelFamilyHistory2003: (Novel(familyHistory) ∧ YearWritten(familyHistory, year2003)).",
        "DaniCreatedPodcast: Created(daniShapiro, familySecrets).",
        "AmericanCityBoston: AmericanCity(boston)"
      ],
      "fol_conc": "BornInCity(daniShapiro, boston): Dani Shapiro was born in Boston.",
      "perplexity": [
        1.3125823736190796,
        1.0868486166000366
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y ∀z (BornInCity(Person(y), AmericanCity(z)) → Person(y) is American)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Written(x, y)",
        "Person(x)",
        "Writer(x, y)",
        "American(x)"
      ],
      "fol_consts": [
        "danishapiro",
        "familyhistory",
        "boston"
      ],
      "fol_rules": [
        "¬Podcast(familyhistory)",
        "∀p (Born(p, boston) → American(p))",
        "∀b ∀w ((Novel(b) ∧ Written(b, w)) → Writer(novelist, b))",
        "Writer(danishapiro, familyhistory)",
        "Person(danishapiro)",
        "Born(danishapiro, americancity)",
        "American(americancity)",
        "Novel(familyhistory)"
      ],
      "fol_conc": "Born(danishapiro, boston)",
      "perplexity": 1.5471217632293701,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(y)",
        "Person(z)",
        "BornIn(a, b)",
        "AmericanCity(c)",
        "IsAWriterOf(d, e)",
        "Created(f, g)"
      ],
      "fol_consts": [
        "danielle",
        "shapiro",
        "family_history",
        "podcast",
        "novelist",
        "american",
        "family_secrets",
        "family_history",
        "american",
        "danielle",
        "shapiro",
        "novelist"
      ],
      "fol_rules": [
        "∀x (Podcast(x) → ¬Novel(y))",
        "∀a (BornIn(a, c) ∧ AmericanCity(c) → IsAWriterOf(z, e))",
        "(Person(danielle) ∨ BornIn(danielle, american)) ∧ Person(shapiro) ∧ (Novel(family_history) ∧ Created(family_history, danielle)) → Novel(novelist)",
        "BornIn(danielle, shapiro) ∧ IsAWriterOf(american, novelist)",
        "(Podcast(podcast) ∨ Novel(podcast) ∨ Created(family_secrets, danielle))",
        "AmericanCity(b)"
      ],
      "fol_conc": "BornIn(danielle, b)",
      "perplexity": 2.3081722259521484,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 446
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "ContainKnowledge(x)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainKnowledge(x))",
        "∀x ∀y (Read(x, y) ∧ Book(y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → Smarter(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": [
        1.0800764560699463,
        1.0195235013961792
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "Contains(book, knowledge)",
        "∀x ∀y (Read(x, y) → Gain(x, knowledge))",
        "∀x (Gain(x, knowledge) → Smarter(x))"
      ],
      "fol_conc": "Smarter(harry, before)",
      "perplexity": 1.2583061456680298,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Smarter/1, Smarter/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Smarter/1, Smarter/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contain(x, y)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "SmarterThanBefore(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "harry"
      ],
      "fol_rules": [
        "∀x (Contain(x, y)) → GainKnowledge(x)",
        "∀x (Read(x, y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → SmarterThanBefore(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "SmarterThanBefore(harry)",
      "perplexity": 1.6416527032852173,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 447
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "DesignStyle(x, y)"
      ],
      "fol_consts": [
        "max",
        "kelly",
        "zaha"
      ],
      "fol_rules": [
        "∀x (DesignStyle(zaha, x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        "(DesignStyle(zaha, x) ⊕ DesignStyle(kelly, x))",
        "∀x (DesignStyle(kelly, x) → Evocative(x))",
        "∀x (DesignStyle(kelly, x) → Dreamy(x))",
        "(DesignStyle(max, x) ∧ Timeless(x)) → (MassProduct(x) ∧ Evocative(x))"
      ],
      "fol_conc": "∃x (DesignStyle(max, x) → (Evocative(x) ⊕ Dreamy(x)))",
      "perplexity": [
        1.0870299339294434,
        1.1955918073654175
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Design(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x, zaha) → Timeless(x))",
        "¬Mass(x) → ¬Timeless(x)",
        "Design(x, zaha) ⊕ Design(x, kelly)",
        "∀x (Design(x, kelly) → Evocative(x))",
        "∀x (Design(x, kelly) → Dreamy(x))",
        "Timeless(x) → (Mass(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Evocative(x) ⊕ Dreamy(x)",
      "perplexity": 1.1647188663482666,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 448
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "SitcomSeries(x)",
        "StarredInByMembersOfPappys(y, z)",
        "PilotedOn(series_name, channel)",
        "WorkingTitle(script_title, title)",
        "ScriptEditor(script_editor, script)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "july2013",
        "bbc_three: BBC Three (the channel)",
        "the_secret_dude_society: The working title \"The Secret Dude Society\"",
        "andrew_collins"
      ],
      "fol_rules": [
        "∀x ((SitcomSeries(x) ∧ StarredInByMembersOfPappys(badults, x))) : Badults is a British sitcom series starring members of Pappy’s group.",
        "PilotedOn(badults, bbc_three): The Working title \"The Secret Dude Society\" was used for Badults.",
        "ScriptEditor(andrew_collins, badults) : Andrew Collins was the script editor for Badults."
      ],
      "fol_conc": "∃series ((SitcomSeries(badults)) ∧ (PilotedOn(badults, bbc_three))) → WorkingTitle(script_title, \"The Secret Dude Society\")",
      "perplexity": [
        1.599941611289978,
        1.1940125226974487
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((SitcomSeries(x) ∧ StarredInByMembersOfPappys(badults, x))) : Badults is a British sitcom series starring members of Pappy’s group."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Series(x)",
        "Pilot(x, z)",
        "Scripted(z)",
        "Workingtitle(x)",
        "British(x)"
      ],
      "fol_consts": [
        "badults",
        "andrewcollins"
      ],
      "fol_rules": [
        "∃z (Badults(z))",
        "Is(badults, british)",
        "Pilot(badults, ickle2013)",
        "Scripted(andrewcollins)",
        "Workingtitle(badults)",
        "British(series)",
        "Illustrate(x)"
      ],
      "fol_conc": "∃z (Series(z) ∧ Workingtitle(z))",
      "perplexity": 3.02978777885437,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Series/1, Series/0, British/1, British/0, Badults/1, Badults/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Series/1, Series/0, British/1, British/0, Badults/1, Badults/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Series(x)",
        "Piloted(y, x)",
        "ScriptEditor(z, w)"
      ],
      "fol_consts": [
        "badults",
        "andrewcollins"
      ],
      "fol_rules": [
        "∃x (Series(badults) ∧ Piloted(july2013, badults))",
        "∃w ((Series(badults) ∧ ScriptEditor(andrewcollins, w))) → ¬Piloted(m, n)"
      ],
      "fol_conc": "ScriptEditor(andrewcollins, x) ∧ ∃y (Series(z) ∧ Piloted(y, z))",
      "perplexity": 1.819085717201233,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 449
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "rodrick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(rodrick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(rodrick_strong, creed_brothers)",
      "perplexity": [
        1.0385785102844238,
        1.0182982683181763
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Formed(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "wwe",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Formed(diamondmine, wwe)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Leads(roderickstrong, creedbrothers)",
      "perplexity": 1.1766703128814697,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, creed_brothers)",
      "perplexity": 1.0692299604415894,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 450
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "GivenOut(x, y, z)",
        "OnBachelor(x)",
        "Portrays(x, y)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃y GivenOut(roses, bachelor, pm8)",
        "∀x (GivenOut(x, bachelor, y) → OnBachelor(x))",
        "∀x (OnBachelor(x) → ∃y Portrays(x, y))",
        "∀x ∀y (Portrays(x, y) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬GivenOut(breakingbad, monday, pm8)",
      "perplexity": [
        1.0870662927627563,
        1.0161006450653076
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realpeople(y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "roses",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(roses, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.2369846105575562,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "OnTheBachelor(x)",
        "PortraysRealPeople(x)",
        "RealityShow(x)"
      ],
      "fol_consts": [
        "monday",
        "8pm",
        "bachelor",
        "breakingbad",
        "monday",
        "8pm"
      ],
      "fol_rules": [
        "∃y ∃z (OnTV(y, monday, z) ∧ OnTV(y, monday, 8pm))",
        "∀x (Rose(x) → OnTheBachelor(x))",
        "∀x (OnTheBachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityShow(x))",
        "¬RealityShow(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, monday, 8pm)",
      "perplexity": 1.4163721799850464,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 451
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Island(x)",
        "PartOf(x, y)",
        "Antarctic(x)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "south_shetland_islands",
        "greenwich_island",
        "deception_island",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "Island(snow_island)",
        "PartOf(snow_island, south_shetland_islands)",
        "Island(greenwich_island)",
        "PartOf(greenwich_island, south_shetland_islands)",
        "Island(deception_island)",
        "PartOf(deception_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "∀x (Island(x) ∧ PartOf(x, antarctica) → NamedAfter(x, barutin))",
      "perplexity": [
        1.0480796098709106,
        1.0053696632385254
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutincove",
        "barutin",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Located(snowisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "∀x (Part(x, antarctica) → Named(x, barutin))",
      "perplexity": 1.2119146585464478,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "Island(x)"
      ],
      "fol_consts": [
        "barutin cove",
        "bulgarian settlement of barutin",
        "snow island",
        "greenwich island",
        "deception island",
        "south shetland islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin cove, bulgarian settlement of barutin)",
        "LocatedIn(barutin cove, snow island)",
        "LocatedIn(snow island, south shetland islands)",
        "Island(snow island)",
        "Island(greenwich island)",
        "Island(deception island)",
        "LocatedIn(south shetland islands, antarctica)",
        "∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬(∃x (Island(x) ∧ ¬NamedAfter(x, barutin cove)))",
      "perplexity": 1.1203680038452148,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 452
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "WorkingRemotely(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x ∀y (Employee(x) ∧ ScheduleMeeting(x, y) → Appear(x, company))",
        "∀x (Employee(x) ∧ Lunch(x, company) → ScheduleMeeting(x, x))",
        "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, Home(x))))",
        "∀x (Lunch(x, Home(x)) → WorkingRemotely(x))",
        "∀x (OtherCountry(x) → WorkingRemotely(x))",
        "¬∃x (Manager(x) ∧ WorkingRemotely(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": [
        1.055936336517334,
        1.0088725090026855
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, Home(x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Manager(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james",
        "company",
        "home"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, company) → Appear(x, company))",
        "∀x (Lunch(x, company) → Schedule(x, company))",
        "∀x (Employee(x) → (Lunch(x, company) ∨ Lunch(x, home)))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": 1.1506866216659546,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeetingWithCustomer(x)",
        "AppearInCompanyToday(x)",
        "HaveLunchInCompany(x)",
        "HaveLunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ScheduleMeetingWithCustomer(x) → AppearInCompanyToday(x))",
        "∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x))",
        "∀x (Employee(x) → HaveLunchInCompany(x) ∨ HaveLunchAtHome(x))",
        "∀x (Employee(x) ∧ HaveLunchAtHome(x) → WorkRemotelyFromHome(x))",
        "∀x ((Employee(x) ∧ ¬(WorkRemotelyFromHome(x))) → AppearInCompanyToday(x))"
      ],
      "fol_conc": "¬HaveLunchInCompany(james)",
      "perplexity": 1.2246936559677124,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 453
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "ContainKnowledge(x)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainKnowledge(x))",
        "∀x ∀y (Read(x, y) ∧ Book(y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → Smarter(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": [
        1.0800764560699463,
        1.0195235013961792
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, y)",
        "Gain(x, y)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "Contains(book, knowledge)",
        "∀x ∀y (Read(x, y) → Gain(x, knowledge))",
        "∀x (Gain(x, knowledge) → Smarter(x))"
      ],
      "fol_conc": "Smarter(harry, before)",
      "perplexity": 1.2583061456680298,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Smarter/1, Smarter/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Smarter/1, Smarter/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contain(x, y)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "SmarterThanBefore(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "harry"
      ],
      "fol_rules": [
        "∀x (Contain(x, y)) → GainKnowledge(x)",
        "∀x (Read(x, y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → SmarterThanBefore(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "SmarterThanBefore(harry)",
      "perplexity": 1.6416527032852173,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 454
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "Harry"
      ],
      "fol_rules": [
        "\t∀x (Evil(x) → Ugly(x))",
        "\t∀x (Gentleman(x) → Handsome(x))",
        "\t((Kind(Harry)) ∨ (CEO(Harry)))"
      ],
      "fol_conc": "Harry is Kind OR Harry is a CEO",
      "perplexity": [
        1.5061088800430298,
        1.1343355178833008
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Harry is Kind OR Harry is a CEO"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "harry",
        "ceo"
      ],
      "fol_rules": [
        "∀x (Kind(x) ∨ Evil(x))",
        "(¬Ugly(x) → Handsome(x))",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "(Is(x, ceo) → Gentleman(x))",
        "Gentleman(harry)",
        "Kind(x) ∨ Is(x, ceo)"
      ],
      "fol_conc": "Kind(harry) ∨ Is(harry, ceo)",
      "perplexity": 1.3779146671295166,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)"
      ],
      "fol_consts": [
        "Harry",
        "Harry",
        "Harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ∨ Evil(x))",
        "¬Ugly(x) → Handsome(x)",
        "Evil(x) → Ugly(x)",
        "Gentleman(x) → Handsome(x)",
        "CEO(x) → Gentleman(x)",
        "Kind(Harry) ∨ CEO(Harry)"
      ],
      "fol_conc": "Kind(Harry) ∨ CEO(Harry)",
      "perplexity": 2.056201457977295,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 455
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "LovedByTourist(x)",
        "FavoriteAnimal(x, y)",
        "AnimalFromAustralia(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourist(x) → FavoriteAnimal(max, x))",
        "(AnimalFromAustralia(x) ∧ LoveToSleep(x)) ⊕ ¬(AnimalFromAustralia(x) ∨ LoveToSleep(x))"
      ],
      "fol_conc": "FavoriteAnimal(max, AnimalFromAustralia(x))",
      "perplexity": [
        1.3536055088043213,
        1.5918196439743042
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "FavoriteAnimal(max, AnimalFromAustralia(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, z)",
        "From(x, y)",
        "Veryfluffy(z)",
        "Love(z, w)",
        "Fluffy(z)",
        "Sleepy(z)"
      ],
      "fol_consts": [
        "max",
        "animals",
        "tourists",
        "australia",
        "koala",
        "quokka"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(x, z))",
        "∀x (∃y (From(y, x) ∧ Loved(tourists, y)))",
        "∀x ∀z ((From(x, z) ∧ Loved(tourists, x)) → From(australia, z))",
        "∀x ∀y ((Favorite(z, x) ∧ Veryfluffy(y)) → Fluffy(y))",
        "∀x (Fluffy(y) → Sleepy(y))",
        "¬(Veryfluffy(x) ∧ Not(quokka)) ∨ ∃z (From(z, quokka) ∧ Fluffy(x))"
      ],
      "fol_conc": "Sleepy(koala)",
      "perplexity": 2.0115559101104736,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Loved(x, y)",
        "FavoriteAnimal(z)",
        "Loved(x, z)",
        "FavouriteAnimalsAreVeryFluffy(animals)",
        "Loved(bytourists)",
        "Loved(tosleepx)",
        "FavoriteAnimal(sleepingz)",
        "Loved(ausquokkaq, s)",
        "FavoriteAnimal(z)"
      ],
      "fol_consts": [
        "max",
        "tourist",
        "bytheaustraliacountry",
        "kakuaussieanimalnameforshorty",
        "ausuofallanimalsinthiscountryforyou",
        "sleezingzislikekoalawhichlovesleepingandtheyareveryfluffy",
        "qoockaazuisquokka",
        "sleepingozone"
      ],
      "fol_rules": [
        "(Loved(x, y) → FavoriteAnimal(z))",
        "(∀x (Loved(bytourists)))",
        "(¬(FavouriteAnimalsAreVeryFluffy(ausanimalsqzuaussiesatthistouristyplaceforquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)) ⊕ Loved(x, bytourists))",
        "(∀x (Loved(bytheaussieanfromthatnatsionalparkwheretheqoockaslive)))",
        "FavouriteAnimalsAreVeryFluffy(ausquokkaausttouestliveswithmaxinthiscountryyousayaustraliaforyoutoursitely)",
        "(∀x (Loved(bytourists) ∧ FavoriteAnimal(z)) → Loved(tosleepz, z))",
        "¬(FavoriteAnimal(sleepingqoockaazuisquokka)) ∨ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)",
        "(∃x (Loved(tosleepz, z) ∧ FavoriteAnimal(sleepingqoockaazuisquokka)) → Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere))",
        "Loved(tosleepz, z)"
      ],
      "fol_conc": "(∃x (FavoriteAnimal(z) ∧ Loved(ausuofallanimalsinthiscountryforyoutoosleepezislikekoalausttouseethatistheloovesomeonecalledmaxwhomakesyeselfaustraliaforthatnatsionalparksheepsoverthere)))",
      "perplexity": 5.720861911773682,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Loved/2, Loved/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Loved/2, Loved/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 456
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnMonitor(x)",
        "WorkHome(x)",
        "HomeOffice(x)",
        "TidyHome(x)",
        "LateBed(x)",
        "LateWake(x)",
        "VisitStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnMonitor(x) → WorkHome(x))",
        "∀x (HomeOffice(x) → OwnMonitor(x))",
        "∀x (WorkHome(x) → TidyHome(x))",
        "∀x (WorkHome(x) → VisitStore(x))",
        "∀x (TidyHome(x) → ¬(LateBed(x) ∧ LateWake(x)))",
        "(LateBed(remy) ∧ LateWake(remy) ∧ TidyHome(remy)) ⊕ ¬(LateBed(remy) ∨ LateWake(remy) ∨ TidyHome(remy))"
      ],
      "fol_conc": "VisitStore(remy)",
      "perplexity": [
        1.0371836423873901,
        1.0085289478302002
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, y) ∧ Large(y) ∧ Desktop(y) ∧ Home(y) → Work(x) ∧ Regularly(x))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, y) ∧ Large(y))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Spend(x, y) ∧ Free(y))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, y))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ⊕ ¬(Gotobedlate(remy) ∨ Wakeupafternoon(remy) ∨ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))"
      ],
      "fol_conc": "Visit(remy, y)",
      "perplexity": 1.2276417016983032,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "HomeOffice(x)",
        "WorkHome(x)",
        "SpendFreeTimeTidying(x)",
        "VisitOfficeSupplyStore(x)",
        "GoBedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "largeDesktopMonitor",
        "remy"
      ],
      "fol_rules": [
        "Own(x, largeDesktopMonitor) → WorkHome(x)",
        "∀x (HomeOffice(x) → Own(x, largeDesktopMonitor))",
        "WorkHome(x) → SpendFreeTimeTidying(x)",
        "WorkHome(x) → VisitOfficeSupplyStore(x)",
        "SpendFreeTimeTidying(x) → ¬(GoBedLate(x) ∧ WakeUpAfterNoon(x))",
        "(GoBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendFreeTimeTidying(remy)) ⊕ ¬(GoBedLate(remy) ∨ WakeUpAfterNoon(remy) ∨ SpendFreeTimeTidying(remy))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(remy)",
      "perplexity": 1.234987735748291,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 457
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x, y)",
        "rose_given(x, y, z)"
      ],
      "fol_consts": [
        "BreakingBad",
        "Rose",
        "Monday",
        "8pm",
        "Bachelor"
      ],
      "fol_rules": [
        "Show(x, y) → rose_given(y, x)",
        "BreakingBad → Show(x, BreakingBad)"
      ],
      "fol_conc": "BreakingBad",
      "perplexity": [
        3.4864635467529297,
        1.7282049655914307
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BreakingBad → Show(x, BreakingBad)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Givenout(x, y)",
        "On(x, y)",
        "Portrayslivesofrealpeople(y)",
        "Realitytvshow(y)"
      ],
      "fol_consts": [
        "breakingbad",
        "monday",
        "eightpm"
      ],
      "fol_rules": [
        "∃x (Monday(day) ∧ Eightpm(time)) → Givenout(rose, tv)"
      ],
      "fol_conc": "Givenout(rose, tv)",
      "perplexity": 2.4597065448760986,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsRealityShow(x)",
        "IsRealityShow(x)",
        "IsRealityShow(x)"
      ],
      "fol_consts": [
        "BreakingBad",
        "MondayAt8pm"
      ],
      "fol_rules": [
        "∀x (IsRealityShow(x)) → (IsRealityShow(x) ∧ IsRealityShow(x))",
        "∀x (IsRealityShow(x) ∧ IsRealityShow(x))",
        "∃x (IsRealityShow(x) ∧ IsRealityShow(BreakingBad))"
      ],
      "fol_conc": "IsRealityShow(BreakingBad)",
      "perplexity": 2.8895180225372314,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 458
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1",
        "2",
        "3",
        "4"
      ],
      "fol_consts": [
        "Cinnrodnnylsisge.2648394451"
      ],
      "fol_rules": [
        "(3.7+30=10)",
        "3.9:9:9,11.0-cryvee.",
        "6.2 :5 = xllnts',39243rd\tsmtstch."
      ],
      "fol_conc": "",
      "perplexity": [
        9.936018943786621,
        8.303238868713379
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(3.7+30=10)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkg1(nixton)"
      ],
      "fol_consts": [
        "tikitnoe",
        "klayunk",
        "kmoukae"
      ],
      "fol_rules": [
        "Cnyeue(x) ∧ ∀x (Dicntionnixton(axinytn))",
        "Kzviliktl1aue(sntditn0e, dklayunkn)",
        "Nukaeertyllaue(dxirly3ntstdistl1bse)"
      ],
      "fol_conc": "Tikuiktl1aue(xixttngtrsttn0e)",
      "perplexity": 13.911416053771973,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Carriage(x)"
      ],
      "fol_consts": [
        "$^ (20+86)"
      ],
      "fol_rules": [
        "∀t ((Carriage(n)) ⊕ Paleysnt', (i, i) → Carriage(f))",
        "¬Paleysnt', ($^ (20+86), e, j) → Carriage(d) ∧ ¬Carriage(o)",
        ".join(x, i, y)"
      ],
      "fol_conc": "Carriage(i, n) ⊕ ∃n (Carriage(t))",
      "perplexity": 28.844219207763672,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀t ((Carriage(n)) ⊕ Paleysnt', (i, i) → Carriage(f))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 459
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Baker(x)",
        "Cupcake(y)",
        "Hotspot(x)",
        "Spice(y)"
      ],
      "fol_consts": [
        "cupcakes",
        "hotspots",
        "spicy"
      ],
      "fol_rules": [
        "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ spicy(y))",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are either spicy or an hotspot.",
        "No baker is spicy."
      ],
      "fol_conc": "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ Spicy(y))",
      "perplexity": [
        3.0010428428649902,
        2.0235378742218018
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ spicy(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, spicy)",
        "Are(cupcakes, x)",
        "Are(hotpots, x)",
        "Have(products, x)"
      ],
      "fol_consts": [
        "spicy",
        "cupcake",
        "hotpot"
      ],
      "fol_rules": [
        "(∀x (Bakedbymelissa(x) → Cupcakes(x))) ∧ (∃y ∃z ((Spicy(y) ∨ Bakedbymelissa(z)) ∧ Hotpots(x, y)))",
        "((Spicy(chailies) ∨ Bakedbymelissa(spicehouse)) ∧ Driedthai(chiliesspice))"
      ],
      "fol_conc": "Driedchaiiescupcakeproduct(melissabakery)",
      "perplexity": 3.654374361038208,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)"
      ],
      "fol_consts": [
        "baker",
        "cupcake"
      ],
      "fol_rules": [
        "∀x (Bakery(x)) → ∃y (Spicy(y) ∨ Bakery(y))",
        "(Spicy(a) ∧ Bakery(baker)) ⊕ Spicy(cupcake)"
      ],
      "fol_conc": "∀x ((Bakery(x) ∧ Spicy(x)) ∨ (Bakery(x) ∧ Bakery(y)))",
      "perplexity": 3.5530693531036377,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 460
  },
  {
    "id": 152,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Palace of Flies was translated from Italian.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)",
        "WrittenIn(x, y)",
        "Use(x, y)",
        "Play(x, y)",
        "Song(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, rust)))",
        "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
        "(mac ∨ Use(sam, sam)) ⊢ ∃x Song(x): If Sam uses a Mac or does a project",
        "∀x ((Song(x) ∧ ¬Be(x, perfect)) → ¬Play(sam, x))"
      ],
      "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))",
      "perplexity": [
        1.2017226219177246,
        1.623298168182373
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(mac ∨ Use(sam, sam)) ⊢ ∃x Song(x): If Sam uses a Mac or does a project"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Publishes(x, y)",
        "Translated(x, z)",
        "Published(y)",
        "Book(z)"
      ],
      "fol_consts": [
        "vessel",
        "press"
      ],
      "fol_rules": [
        "(∃x (Press(x))) ⊕ (∃y (Vessel(press)) → Published(vessel, y))"
      ],
      "fol_conc": "Translated(palaceofflies)",
      "perplexity": 4.447717666625977,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PublishedByNewVesselPress(x)",
        "IsPublisher(x, y)"
      ],
      "fol_consts": [
        "newvesselepress",
        "neapolitanchronicles",
        "palaceofflies"
      ],
      "fol_rules": [
        "∀x (PublishedByNewVesselPress(x) → IsPublisher(newvesselepress, x))",
        "(IsPublisher(newvesselepress, y)) ∧ (∃x (PublishedByNewVesselPress(x, y))) ⊕ ∃y (PublishedByNewVesselPress(y, newvesselepress))"
      ],
      "fol_conc": "(IsPublisher(newvesselepress, palaceofflies) ∨ IsPublisher(newvesselepress, neapolitanchronicles))",
      "perplexity": 2.24520206451416,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PublishedByNewVesselPress/2, PublishedByNewVesselPress/1.\n\n\nFatal error:  The following symbols are used with multiple arities: PublishedByNewVesselPress/2, PublishedByNewVesselPress/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 461
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x, y)",
        "IsEasternWildTurkey(x)",
        "IsOsceolaWildTurkey(x)",
        "IsGouldsWildTurkey(x)",
        "IsMerriamsWildTurkey(x)",
        "IsRioGrandeWildTurkey(x)",
        "IsOcellatedWildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (∀y ((IsEasternWildTurkey(y) ∨ IsOsceolaWildTurkey(y)) ⊕ ∀z ((IsGouldsWildTurkey(z) ∨ IsMerriamsWildTurkey(z) ∨ IsRioGrandeWildTurkey(z))) ∨ WildTurkey(x, y)) ∧ ¬IsEasternWildTurkey(x) ∧ ¬IsOsceolaWildTurkey(x))",
        "∃x (WildTurkey(x, tom))",
        " ∀y (WildTurkey(y, tom) → (∀z ((IsGouldsWildTurkey(z) ⊕ IsMerriamsWildTurkey(z)) ∨ IsRioGrandeWildTurkey(z))) → ¬(IsEasternWildTurkey(tom) ∨ IsOsceolaWildTurkey(tom) ∨ IsGouldsWildTurkey(tom) ∨ IsMerriamsWildTurkey(tom) ∨ IsRioGrandeWildTurkey(tom)))",
        " ∀y (IsOcellatedWildTurkey(y) ∧ WildTurkey(x, y)) → ¬(IsEasternWildTurkey(x) ∨ IsOsceolaWildTurkey(x) ∨ IsGouldsWildTurkey(x) ∨ IsMerriamsWildTurkey(x) ∨ IsRioGrandeWildTurkey(x)))",
        " ∀x (¬DependentOnCaffeine(x) ∧ Student(x)) → DependentOnCaffeine(x) ∨ ¬Student(x)"
      ],
      "fol_conc": "IsOcellatedWildTurkey(tom)",
      "perplexity": [
        1.4175622463226318,
        1.13594651222229
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y (IsOcellatedWildTurkey(y) ∧ WildTurkey(x, y)) → ¬(IsEasternWildTurkey(x) ∨ IsOsceolaWildTurkey(x) ∨ IsGouldsWildTurkey(x) ∨ IsMerriamsWildTurkey(x) ∨ IsRioGrandeWildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wild(x, y)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriam(s)",
        "Rio(a)",
        "Ocellated(x)",
        "Not(x, x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (¬(Eastern(x)) ∧ Osceola(x))",
        "∀y ((Goulds(y)) ∨ (Merriam(y)) ∨ (Rio(a))) → ¬(Osceola(x) ∧ Goulds(x) ∧ Merriam(x) ∧ Rio(a))",
        "(∃x (Wild(x, wildturkey) ∧ Not(tom) ∧ Eastern(x)))",
        "¬(Eastern(tom))",
        "(¬Goulds(tom)) ∨ (¬Merriam(tom)) ∨ ¬(Rio(a))",
        "∀y ((Wild(y, turkeys) ∧ Tom(y)) → Ocellated(x))"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 2.3226699829101562,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsWildTurkey(x, y)",
        "Easternwildturkey(y)",
        "Osceolawild turkey(y)",
        "Gouldswil-dturtle(y)",
        "Merriam's wild tur-key(t)",
        "Gouldswil-dturtle(r)"
      ],
      "fol_consts": [
        "tom",
        "occellated"
      ],
      "fol_rules": [
        "(∃x (IsWildTurkey(x, occellated)))",
        "(¬Easternwildturkey(occellated)) ∧ ¬Osceolawild turkey(occellated) ∧ (∀y ((Gouldswil-dturtle(y) ⊕ Merriam's wild tur-key(t)) ⊕ Gouldswil-dturtle(r)))",
        "(∃x (IsWildTurkey(x, tom)))",
        "(¬Osceolawild turkey(occellated))"
      ],
      "fol_conc": "Osceolawild turkey(occellated)",
      "perplexity": 8.548651695251465,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\n((not Easternwildturkey(Occellated)) & (not OsceolawildTurkey(Occellated))) & (all y.(((((Gouldswil-dturtle(y)) & not (MerriamsWildTur-key(t))) | (not (Gouldswil-dturtle(y)) & (MerriamsWildTur-key(t)))) & not (Gouldswil-dturtle(r))) | (not (((Gouldswil-dturtle(y)) & not (MerriamsWildTur-key(t))) | (not (Gouldswil-dturtle(y)) & (MerriamsWildTur-key(t)))) & (Gouldswil-dturtle(r)))))\n                                                                                                   ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 462
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "LovesAnimals(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (LovesAnimals(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → LovesAnimals(x))"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.1172765493392944,
        1.046775460243225
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x, y)",
        "Animal(y)",
        "Lover(x)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x) → ¬(Mean(x, y)))",
        "∃x (Grumpy(x) → Mean(x, y))",
        "∀x (Lover(x) → Nice(x))",
        "∀x (Owns(x, y) → Lover(y))"
      ],
      "fol_conc": "(¬(Grumpy(tom) ∧ ¬Mean(tom, tom)))",
      "perplexity": 1.465647578239441,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "LoveAnimals(x)",
        "OwnPet(x)",
        "NiceToAnimals(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬(MeanToAnimals(x)))",
        "∃x (MeanToAnimals(x) ∧ ¬(NiceToAnimals(x)))",
        "∀x (LoveAnimals(x) → NiceToAnimals(x))",
        "∀x ((OwnPet(x) → LoveAnimals(x)))",
        "OwnPet(tom)"
      ],
      "fol_conc": "(¬MeanToAnimals(tom)) ∧ ¬(NiceToAnimals(tom))",
      "perplexity": 3.6626734733581543,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 463
  },
  {
    "id": 110,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Spills(x)",
        "Tidy(x)",
        "Foodie(x)",
        "GoesOut(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spills(x) → ¬(Tidy(x)))",
        "∀x (Foodie(x) ∧ GoesOut(x) → Spills(x))",
        "∀x (OnlyChild(x) → Tidy(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spills(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spills(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ GoesOut(peter) ∧ HighIncome(peter)) ⊕ (Foodie(peter) ∧ GoesOut(peter) ∧ ¬HighIncome(peter))",
      "perplexity": [
        1.0504392385482788,
        1.018892765045166
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Goout(x)",
        "Onlychild(x)",
        "Busy(x)",
        "Highincome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬(Tidy(x) ∧ Enjoy(x)))",
        "∀x (Foodie(x) ∧ Goout(x) → Spill(x))",
        "∀x (Onlychild(x) → (Tidy(x) ∧ Enjoy(x)))",
        "∀x (Busy(parentx) → Onlychild(x))",
        "∀x (Highincome(x) → Busy(parentx))",
        "(Spill(peter) ∧ Onlychild(peter)) ⊕ ¬(Spill(peter) ∨ Onlychild(peter))"
      ],
      "fol_conc": "((Foodie(peter) ∧ Goout(peter)) ∧ Highincome(household)) ⊕ ¬((Foodie(peter) ∧ Goout(peter)) ∧ Highincome(household))",
      "perplexity": 1.2081491947174072,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "GoOutFrequently(x, y)",
        "OnlyChild(x)",
        "BusyJobParent(x)",
        "HighNetIncomeHousehold(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ ¬EnjoyCleaning(x))",
        "∀x (Foodie(x) ∧ GoOutFrequently(x, restaurants) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "∀x (BusyJobParent(x) → OnlyChild(x))",
        "∀x (HighNetIncomeHousehold(x) → BusyJobParent(x))",
        "(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))"
      ],
      "fol_conc": "((Foodie(peter) ∧ GoOutFrequently(peter, restaurants) ∧ HighNetIncomeHousehold(x)) ∨ (Foodie(peter) ∧ GoOutFrequently(peter, restaurants) ∧ ¬HighNetIncomeHousehold(x)))",
      "perplexity": 1.0985482931137085,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 464
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "CommonlyKnown(x, y)",
        "FootballPlayer(x)",
        "LoanedOut(x, y)",
        "BrazillianFootballer(x)",
        "Plays(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "CommonlyKnown(aiilton, ailton)",
        "FootballPlayer(aiilton)",
        "LoanedOut(aiilton, braga)",
        "BrazillianFootballer(aiilton) ∧ Plays(aiilton, nautico)",
        "∀x (FootballClub(x) → x = braga ⊕ x = nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "Plays(aiilton, fluminense)",
      "perplexity": [
        1.2814810276031494,
        1.2322235107421875
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (FootballClub(x) → x = braga ⊕ x = nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Player(x, y)",
        "Loan(x, y)",
        "Club(x, y)",
        "Play(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Known(ailton, silva)",
        "Born(ailton, 1995)",
        "Player(ailton, braga)",
        "Footballer(ailton)",
        "Player(ailton, nautico)",
        "Club(nautico, braga)",
        "Club(braga, nautico)",
        "Club(nautico, fluminense)"
      ],
      "fol_conc": "Player(ailton, fluminense)",
      "perplexity": 1.2786165475845337,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "CommonlyKnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "BrazillianFootballer(x)",
        "PlaysFor(x, y)",
        "ClubOf(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "ailton",
        "1995"
      ],
      "fol_rules": [
        "∃x (CommonlyKnownAs(ailton, x) ∧ BornIn(ailton, 1995))",
        "FootballPlayer(ailton)",
        "LoanedOutTo(ailton, braga)",
        "BrazillianFootballer(ailton) ∧ PlaysFor(ailton, nautico)",
        "(ClubOf(nautico) ⊕ ClubOf(braga))",
        "∃x (ClubOf(x) ∧ FootballPlayer(a) → ClubOf(fluminense))"
      ],
      "fol_conc": "PlaysFor(ailton, fluminense)",
      "perplexity": 1.9690486192703247,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 465
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "largeDesktopMonitorAtHome(x)",
        "workRegularlyOftenAtHome(x)",
        "fullyStockedAndImpressiveHomeOffice(x)",
        "spendFreeTimeTidyingOrganizingSpacesInHomes(x)",
        "visitTheOfficeSupplyStoreRegularly(x)",
        "goToBedLateAndWakeUpEveryDayAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (largeDesktopMonitorAtHome(x) → workRegularlyOftenAtHome(x))",
        "∃z ((fullyStockedAndImpressiveHomeOffice(remy)) ⊆ largeDesktopMonitorAtHome(z), where z = remy)",
        "∀x (workRegularlyOftenAtHome(x) → spendFreeTimeTidyingOrganizingSpacesInHomes(x))",
        "∀x (workRegularlyOftenAtHome(x) → visitTheOfficeSupplyStoreRegularly(x))",
        "∀x ((spendFreeTimeTidyingOrganizingSpacesInHomes(remy))) ⊆ ¬goToBedLateAndWakeUpEveryDayAfterNoon(z), where z = remy)",
        "∀z (largeDesktopMonitorAtHome(z) → fullyStockedAndImpressiveHomeOffice(y), where y = remy)"
      ],
      "fol_conc": "(goToBedLateAndWakesUpEarly(remy)) ⊕ visitTheOfficeSupplyStoreRegularly(remy): Remy neither spends his/her free time tidying and organizing spaces in their home nor has a fully stocked and impressive home office.",
      "perplexity": [
        1.347904920578003,
        1.1901507377624512
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃z ((fullyStockedAndImpressiveHomeOffice(remy)) ⊆ largeDesktopMonitorAtHome(z), where z = remy)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Work(y, z)",
        "Home(y, z)",
        "Stocked(x)",
        "Impressive(z)",
        "Tidy(x)",
        "Organized(y)",
        "Visit(x)",
        "Late(y)",
        "Wakeup(y)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Work(regularlyandoftenhome))",
        "∀x (Stockedimpressiveoffice(x) → Own(x, largedesktopmonitor))",
        "∀x (Work(y, regularlyandoftenhome) → Tidy(x) ∧ Organized(y))",
        "∀x (Work(y, regularlyandoftenhome) → Visit(officesupplystore))",
        "∀x (Tidyingorganizingspacesinhome(x) → ¬Late(x) ⊕ Wakeup(everydayafternoon))"
      ],
      "fol_conc": "(¬Tidy(x) ∧ ¬Stockedimpressiveoffice(x) → Visit(officesupplystore) ∨ Late(y))",
      "perplexity": 1.8454809188842773,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Work/2, Work/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Work/2, Work/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Ownt(x, y)",
        "WorksRegularlyAtHome(x)",
        "HasFullyStockedImpressiveOffice(x)",
        "TidiesAndOrganizesSpacesInTheirHome(x)",
        "VisitsOfficeSupplyStoreRegulary(x)",
        "WorksRegularlyAtHome(x)",
        "Ownt(y)",
        "WorksRegularlyAtHome(y)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Ownt(x, largeDesktopMonitor) → WorksRegularlyAtHome(x))",
        "∀x ((HasFullyStockedImpressiveOffice(x)) → Ownt(x, largeDesktopMonitor))",
        "∀x (WorksRegularlyAtHome(x) → TidiesAndOrganizesSpacesInTheirHome(x) ∧ VisitsOfficeSupplyStoreRegulary(x))",
        "∀x ((TidiesAndOrganizesSpacesInTheirHome(x)) → ¬(WorksRegularlyAtHome(x)))",
        "(WorksRegularlyAtHome(x) → TidiesAndOrganizesSpacesInTheirHome(x)) ⊕ ¬((WorksRegularlyAtHome(x) ∧ (TidiesAndOrganizesSpacesInTheirHome(x))))",
        "¬(((WorksRegularlyAtHome(remy)) → TidiesAndOrganizesSpacesInTheirHome(remy)))"
      ],
      "fol_conc": "(WorksRegularlyAtHome(remy) ∨ VisitsOfficeSupplyStoreRegulary(remy)) → ¬((TidiesAndOrganizesSpacesInTheirHome(x)) ∧ HasFullyStockedImpressiveOffice(x))",
      "perplexity": 2.2085978984832764,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 466
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "analog",
        "digital_media",
        "printed_text",
        "streaming_service",
        "hardcover_book",
        "1984"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))",
        "HardcoverBook(x) → PrintedText(x)",
        "StreamingService(1984) → HardcoverBook(1984)"
      ],
      "fol_conc": "¬StreamingService(1984)",
      "perplexity": [
        1.1136157512664795,
        1.271437168121338
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Analog(x)",
        "Digital(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬Digital(x)",
        "∀x (Printed(x) → Analog(x))",
        "∀x (Streaming(x) → Digital(x))",
        "Hardcover(x) → Printed(x)",
        "Streaming(1984) → Hardcover(1984)"
      ],
      "fol_conc": "¬Streaming(1984)",
      "perplexity": 1.2637789249420166,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984",
        "1984"
      ],
      "fol_rules": [
        "PrintedText(1984)"
      ],
      "fol_conc": "(¬Digital(1984))",
      "perplexity": 7.756796836853027,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 467
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "PopulousCapitalCity(y)",
        "LocatedInRegion(y, z)",
        "HostedEvent(w, e1, e2)",
        "RankedAmongBestUniversities(z, r)",
        "SummerOlympicsHostCity(a)",
        "WinterOlympicsHostCity(b)",
        "ParalympicsGamesHostCity(c, d)",
        "AsiaPacificUniversityRanking(u)",
        "WorldUniversityRanking(v)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northern_china",
        "southern_china",
        "olympics_summer",
        "university_count"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "PopulousCapitalCity(beijing)",
        "LocatedInRegion(beijing, northern_china)",
        "HostedEvent(beijing, olympics_summer, summer/paralympic)",
        "ManyOfUniversitiesRanking(university_count, beijing, asia-pacific and world rankings)"
      ],
      "fol_conc": "(LocatedInRegion(beijing, southern_china) → False)",
      "perplexity": [
        1.7100727558135986,
        1.1323238611221313
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(LocatedInRegion(beijing, southern_china) → False)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Rank(x)"
      ],
      "fol_consts": [
        "beijing",
        "people",
        "china",
        "northern",
        "southern",
        "summer2008",
        "winter2008",
        "asia",
        "world"
      ],
      "fol_rules": [
        "Capital(beijing, people)",
        "Populous(beijing)",
        "Located(beijing, northern)",
        "Hosted(beijing, summer2008) ∧ Hosted(beijing, winter2008)",
        "(Summer(x) ∨ Winter(x)) → (Olympics(x) ∧ Paralympics(x))",
        "Rank(asia)",
        "Rank(world)"
      ],
      "fol_conc": "Located(beijing, southern)",
      "perplexity": 1.4164358377456665,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "MostPopulousNationalCapitalCity(y)",
        "MostPopulousNationalCapitalCity(z)",
        "MostPopulousNationalCapitalCity(a)",
        "MostPopulousNationalCapitalCity(b)",
        "MostPopulousNationalCapitalCity(c)",
        "MostPopulousNationalCapitalCity(d)",
        "MostPopulousNationalCapitalCity(e)",
        "MostPopulousNationalCapitalCity(f)"
      ],
      "fol_consts": [
        "Beijing",
        "People's Republic of China",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing",
        "Beijing"
      ],
      "fol_rules": [
        "CapitalOf(Beijing, People's Republic of China)",
        "MostPopulousNationalCapitalCity(Beijing)",
        "MostPopulousNationalCapitalCity(z)",
        "MostPopulousNationalCapitalCity(a)",
        "MostPopulousNationalCapitalCity(b)",
        "MostPopulousNationalCapitalCity(c)",
        "MostPopulousNationalCapitalCity(d)",
        "MostPopulousNationalCapitalCity(e)",
        "MostPopulousNationalCapitalCity(f)"
      ],
      "fol_conc": "¬(MostPopulousNationalCapitalCity(Beijing))",
      "perplexity": 1.3761500120162964,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 468
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ContainsKnowledge(x, y)",
        "GainsKnowledge(person, book)",
        "Reads(person, book)",
        "BecomesSmarter(person)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry_thoreau"
      ],
      "fol_rules": [
        "∀x ContainsKnowledge(x, walden)",
        "GainsKnowledge(harry, walden): Harry gains knowledge by reading 'Walden'",
        "(Reads(person, book) → GainsKnowledge(person, book)): When a person reads a book, that person gains knowledge.",
        "(GainsKnowledge(person, book) → BecomesSmarter(person))"
      ],
      "fol_conc": "∃person ((Reads(harry, walden) ∧ (GainsKnowledge(harry))) ⊕ (BecomesSmarter(harry))) : Harry read the book ‘Walden’ by Henry Thoreau.",
      "perplexity": [
        1.4442538022994995,
        1.3519766330718994
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "GainsKnowledge(harry, walden): Harry gains knowledge by reading 'Walden'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Contains(x, y)",
        "Read(x, z)",
        "Knowledge(y, x)",
        "Smarter(z)",
        "Book(walden)",
        "Author(hthoreau)"
      ],
      "fol_consts": [
        "harry",
        "walden"
      ],
      "fol_rules": [
        "∀x (Books(x) ∧ Contains(x, y))",
        "∀z (Read(harry, z) → Knowledge(z, harry))",
        "Knowledge(y, x) → Smarter(x)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": 2.615781784057617,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Contains(x, y)",
        "Reads(x, z)",
        "GainsKnowledge(x)",
        "BecomesSmarter(x)",
        "Contains(y)"
      ],
      "fol_consts": [
        "harry",
        "Walden"
      ],
      "fol_rules": [
        "∀x ∀y (Contains(x, y) → Contains(z))",
        "∀x (Reads(x, Walden) → GainsKnowledge(harry))",
        "∀x (GainsKnowledge(x) → BecomesSmarter(y))"
      ],
      "fol_conc": "BecomesSmarter(harry)",
      "perplexity": 1.7319371700286865,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Contains/1, Contains/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Contains/1, Contains/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 469
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "FromEarth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x ((FromMars(x)) ⊕ Alien(x))",
        "∀x (∀y (Human(y) → ¬Extraterrestrial(y)))",
        "∀x (FromEarth(x) → Human(x))",
        "(Marvin ≠ FromEarths(marvin)) ⊕ True",
        "¬(FromEaRth(MarvIn)) → Extraterrestrial(Marvin)"
      ],
      "fol_conc": "[\"Human(marvin) ∨ FromMars(marvin)\", \"(Marvin =!= FromEarth(Marvin))]",
      "perplexity": [
        1.607723355293274,
        1.4814733266830444
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Marvin ≠ FromEarths(marvin)) ⊕ True"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "∃y ((From(y, mars) ∧ Alien(y)) → Alien(x))",
        "(¬(From(marvin, earth) ∧ From(marvin, mars)))",
        "(¬(From(marvin, earth)) → Extraterrestrial(x))"
      ],
      "fol_conc": "(Extraterrestrial(x) ⊕ Human(x) ∧ (Extraterrestrial(x) ⊕ From(marvin, mars)))",
      "perplexity": 1.962159276008606,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Extraterrestrial(y)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "(∀y (Extraterrestrial(y)))",
        "(¬(z) → Alien(z))",
        "(~ (p, q) ∧ ~ (q, p))",
        "((m, r) → Extraterrestrial(m))",
        "(∃x ((r, e) ∧ (∃n (~ (e, h)))))"
      ],
      "fol_conc": "~ (h, m)",
      "perplexity": 11.659405708312988,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(¬(z) → Alien(z))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 470
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "WantLongVacation(x)",
        "LoveMost(x, y)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x ((Student(x) ∧ WantLongVacation(x)) → LoveMost(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(mia, summer))",
        "WantLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": [
        1.0444223880767822,
        1.018232822418213
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Favorite(x, y)",
        "Want(x, y)",
        "Long(y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x (Want(x, y) ∧ Long(y) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, x) ↔ Favorite(emma, x))",
        "Want(james, y) ∧ Long(y)"
      ],
      "fol_conc": "Favorite(james, fall)",
      "perplexity": 1.1837671995162964,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Season(x)",
        "LongVacationWanted(x)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x) → (¬Season(y)) ⊕ Season(y))",
        "∀x ((LongVacationWanted(x)) → FavoriteSeason(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(emma, x) ↔ FavoriteSeason(mia, x))",
        "LongVacationWanted(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": 1.4297080039978027,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 471
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "RomanceLanguage(x)",
        "IndoEuropeanLanguage(x)",
        "LanguageFamily(x)",
        "RelatedTo(x, y)",
        "French(x)",
        "Spanish(y)",
        "German(z)",
        "Basque(w)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque",
        "romancelanguages"
      ],
      "fol_rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
        "LanguageFamily(romancelanguages)",
        "∀x ∀y ((LanguageFamily(z) ∧ Within(x, z)) → RelatedTo(x, y))",
        "RomanceLanguage(french)",
        "RomanceLanguage(spanish)",
        "RelatedTo(german, spanish)",
        "¬∃x (RelatedTo(basque, x))"
      ],
      "fol_conc": "RomanceLanguage(german)",
      "perplexity": [
        1.1861941814422607,
        1.0798614025115967
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Romance(x)",
        "Indo(x)",
        "Family(x)",
        "Related(x, y)",
        "French(x)",
        "Spanish(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → Indo(x))",
        "Family(romance)",
        "∀x ∀y ((Language(x) ∧ Language(y)) → (Family(z) ∧ Related(x, y) → Family(x)))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "¬Related(basque, basque)"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.322885513305664,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Romance/1, Romance/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Romance/1, Romance/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Romance(x)",
        "IndoEuropean(x)",
        "LanguageFamily(y)",
        "RelatedTo(x, y)",
        "Basque(x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german"
      ],
      "fol_rules": [
        "∀x (Romance(x) → IndoEuropean(x))",
        "LanguageFamily(french)",
        "∀y (LanguageFamily(y) → ∀x (RelatedTo(x, y)))",
        "Romance(spanish)",
        "Romance(german)",
        "¬Basque(spanish)"
      ],
      "fol_conc": "Romance(french) ⊕ IndoEuropean(spanish)",
      "perplexity": 1.933340311050415,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 472
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnMonitor(x)",
        "WorkHome(x)",
        "HomeOffice(x)",
        "TidyHome(x)",
        "LateBed(x)",
        "LateWake(x)",
        "VisitStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnMonitor(x) → WorkHome(x))",
        "∀x (HomeOffice(x) → OwnMonitor(x))",
        "∀x (WorkHome(x) → TidyHome(x))",
        "∀x (WorkHome(x) → VisitStore(x))",
        "∀x (TidyHome(x) → ¬(LateBed(x) ∧ LateWake(x)))",
        "(LateBed(remy) ∧ LateWake(remy) ∧ TidyHome(remy)) ⊕ ¬(LateBed(remy) ∨ LateWake(remy) ∨ TidyHome(remy))"
      ],
      "fol_conc": "VisitStore(remy)",
      "perplexity": [
        1.0371836423873901,
        1.0085289478302002
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (Own(x, y) ∧ Large(y) ∧ Desktop(y) ∧ Home(y) → Work(x) ∧ Regularly(x))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, y) ∧ Large(y))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Spend(x, y) ∧ Free(y))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, y))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ⊕ ¬(Gotobedlate(remy) ∨ Wakeupafternoon(remy) ∨ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))"
      ],
      "fol_conc": "Visit(remy, y)",
      "perplexity": 1.2276417016983032,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "HomeOffice(x)",
        "WorkHome(x)",
        "SpendFreeTimeTidying(x)",
        "VisitOfficeSupplyStore(x)",
        "GoBedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "largeDesktopMonitor",
        "remy"
      ],
      "fol_rules": [
        "Own(x, largeDesktopMonitor) → WorkHome(x)",
        "∀x (HomeOffice(x) → Own(x, largeDesktopMonitor))",
        "WorkHome(x) → SpendFreeTimeTidying(x)",
        "WorkHome(x) → VisitOfficeSupplyStore(x)",
        "SpendFreeTimeTidying(x) → ¬(GoBedLate(x) ∧ WakeUpAfterNoon(x))",
        "(GoBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendFreeTimeTidying(remy)) ⊕ ¬(GoBedLate(remy) ∨ WakeUpAfterNoon(remy) ∨ SpendFreeTimeTidying(remy))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(remy)",
      "perplexity": 1.234987735748291,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 473
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))"
      ],
      "fol_conc": "LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.04557466506958,
        1.0823451280593872
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchamp(x)",
        "Oscaractor(x)",
        "Protennisp(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "Wellpaid(x)",
        "Livetaxhaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "(∀x (Grandslamchamp(x)) → Protennisp(x))",
        "(∀x (Oscaractor(x) → Celebrity(x)))",
        "(∀x (Protennisp(x) → Athlete(x)))",
        "Celebrity(x) → Wellpaid(x)",
        "Athlete(x) → Famous(x)",
        "Wellpaid(x) → Livetaxhaven(x)",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → Livetaxhaven(djokovic)"
      ],
      "fol_conc": "Livetaxhaven(djokovic)",
      "perplexity": 1.505163311958313,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominatedActor(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "Celebrity(x) ⊕ WellPaid(x)",
        "Athlete(x) ⊕ LivesInTaxHaven(x)",
        "(GrandSlamChampion(djokovic) → ProfessionalTennisPlayer(djokovic))",
        "ProfessionalTennisPlayer(djokovic) → Athlete(djokovic)"
      ],
      "fol_conc": "LivesInTaxHaven(djokovic)",
      "perplexity": 1.4674839973449707,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 474
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Baker(x)",
        "Cupcake(y)",
        "Hotspot(x)",
        "Spice(y)"
      ],
      "fol_consts": [
        "cupcakes",
        "hotspots",
        "spicy"
      ],
      "fol_rules": [
        "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ spicy(y))",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are either spicy or an hotspot.",
        "No baker is spicy."
      ],
      "fol_conc": "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ Spicy(y))",
      "perplexity": [
        3.0010428428649902,
        2.0235378742218018
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Baker(x) ∧ Cupcake(cupcakes)) → ∃y ((c cupcakes ∨ hot spots) ⊕ spicy(y))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, spicy)",
        "Are(cupcakes, x)",
        "Are(hotpots, x)",
        "Have(products, x)"
      ],
      "fol_consts": [
        "spicy",
        "cupcake",
        "hotpot"
      ],
      "fol_rules": [
        "(∀x (Bakedbymelissa(x) → Cupcakes(x))) ∧ (∃y ∃z ((Spicy(y) ∨ Bakedbymelissa(z)) ∧ Hotpots(x, y)))",
        "((Spicy(chailies) ∨ Bakedbymelissa(spicehouse)) ∧ Driedthai(chiliesspice))"
      ],
      "fol_conc": "Driedchaiiescupcakeproduct(melissabakery)",
      "perplexity": 3.654374361038208,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)"
      ],
      "fol_consts": [
        "baker",
        "cupcake"
      ],
      "fol_rules": [
        "∀x (Bakery(x)) → ∃y (Spicy(y) ∨ Bakery(y))",
        "(Spicy(a) ∧ Bakery(baker)) ⊕ Spicy(cupcake)"
      ],
      "fol_conc": "∀x ((Bakery(x) ∧ Spicy(x)) ∨ (Bakery(x) ∧ Bakery(y)))",
      "perplexity": 3.5530693531036377,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 475
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "101",
        "359"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "This is my name in the list of landmarks and I can test that",
      "perplexity": [
        11.24989128112793,
        23.22624397277832
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "This is my name in the list of landmarks and I can test that"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Purpose (i)",
        "Fittyein'ersti', 21, yo.3()"
      ],
      "fol_consts": [
        "",
        "",
        "",
        ""
      ],
      "fol_rules": [
        "((∃p ∃n ∀t ∀x (Purpose (a))))"
      ],
      "fol_conc": "Fittyein'ersti', 21, yo.3() ⊕ ¬((Purpose (b)) ∧ ((Purpose (s)) → ¬(Purpose (l)) ∨ (Purpose (c))))",
      "perplexity": 18.367530822753906,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Fittyein'ersti', 21, yo.3() ⊕ ¬((Purpose (b)) ∧ ((Purpose (s)) → ¬(Purpose (l)) ∨ (Purpose (c))))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 476
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "*"
      ],
      "fol_consts": [
        "1.2.3",
        "4.5"
      ],
      "fol_rules": [
        "3.6 :p,"
      ],
      "fol_conc": "The world is real and there's no doubt.",
      "perplexity": [
        4.810638904571533,
        9.159553527832031
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "3.6 :p,"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "cold(x)",
        "adex(n)"
      ],
      "fol_consts": [
        "cooked",
        "cooked",
        "cooked"
      ],
      "fol_rules": [
        "((cold(z)) → cold(g) ∧ cold(v))",
        "(((cold(x))) → adex(i) ⊕ (adex(e) ∨ (cold(u, i))))"
      ],
      "fol_conc": "cold(z)",
      "perplexity": 26.11669158935547,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Cold/2, Cold/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Cold/2, Cold/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 477
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "RobertLewandowski"
      ],
      "fol_rules": [
        "∀x (SoccerPlayer(x) → Striker(x))",
        "], 5  "
      ],
      "fol_conc": " Star(RobertLewandowski)",
      "perplexity": [
        2.667221784591675,
        2.4863502979278564
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "], 5"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski"
      ],
      "fol_rules": [
        "∀x (Striker(x) ∧ Soccerplayer(x))",
        "(Player1(lewandowski) → Left(lewandowski, bayern))",
        "∀x (Left(x, y) ∧ Not(y))"
      ],
      "fol_conc": "Star(lewandowski)",
      "perplexity": 1.9389313459396362,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsAPlayer(x)",
        "LeftTeam(x, y)",
        "IsAS(x, y)",
        "IsAS(y)"
      ],
      "fol_consts": [
        "RobertLewandowski",
        "striker",
        "player",
        "BayernMunchen",
        "star"
      ],
      "fol_rules": [
        "∀x (IsAPlayer(x)) → ∃x (LeftTeam(x, BayernMunchen))",
        "IsAPlayer(RobertLewandowski) → IsAS(RobertLewandowski, striker)",
        "(IsAS(x) → LeftTeam(RobertLewandowski, x))"
      ],
      "fol_conc": "IsAS(RobertLewandowski, star)",
      "perplexity": 2.128493070602417,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsAS/1, IsAS/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsAS/1, IsAS/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 478
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatesIn(x, y)",
        "BelongsToCity(city, person)",
        "IsOnLeaderboard(leaderboard, x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (∀y ((ParticipatesIn(x, y) ∧ IsOnLeaderboard(leaderboard, x)) → Win(y)))",
        "(BelongsToCity(city, person) ∨ ∅)"
      ],
      "fol_conc": "IsOnLeaderboard(leaderboard, rina)",
      "perplexity": [
        2.6780128479003906,
        1.7730518579483032
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(BelongsToCity(city, person) ∨ ∅)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x)",
        "Participated(y, z)",
        "Tied(z, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "dumaierclassic",
        "leaderboard",
        "winner",
        "participant",
        "tied",
        "person"
      ],
      "fol_rules": [
        "(∃x (Winner(x)) ∧ ∃y (Participant(y, x)))",
        "((Leaderboard(steinhauer) → Ties(steinhauer, descampe))) ∨ ((Tie(steinhauer, belgium) ∧ Participant(descampe, steinhauer)))"
      ],
      "fol_conc": "∀x ∃y (Winner(x) ∧ Participated(y, x)) ∨ ¬(Leaderboard(steinhauer) → Ties(steinhauer, descampe))",
      "perplexity": 2.858041763305664,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatesIn(x, y)"
      ],
      "fol_consts": [
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=["
      ],
      "fol_rules": [
        "∀x (Winner(x) → ∃y (ParticipatesIn(y, x)))"
      ],
      "fol_conc": "∃x (Winner(x))",
      "perplexity": 1.744195818901062,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 479
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin",
        "e1",
        "m"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "(From(marvin, m) ∧ From(marvin, e1)) ⊕ ¬(From(marvin, mars))"
      ],
      "fol_conc": "",
      "perplexity": [
        2.242605447769165,
        1.9152517318725586
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Extraterrestrial(x)",
        "From(x, y)",
        "Alien(x)",
        "Human(x)",
        "Earth(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars"
      ],
      "fol_rules": [
        "∀x (Extraterrestrial(x))",
        "(From(mars, x) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x ((Earth(x)) → Human(x))",
        "(Marvin(mars) ∧ ¬From(mars, marvin) ⊕ (From(earth, marvin)))",
        "(¬From(earth, marvin) → Extraterrestrial(marvin))"
      ],
      "fol_conc": "((Marvin(mars) ∧ From(earth, marvin)) → Human(marvin))",
      "perplexity": 1.8097050189971924,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 480
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composes(x, y)",
        "PremieredBy(y, z)",
        "Orchestra(x)"
      ],
      "fol_consts": [
        "symphony_9",
        "beethoven"
      ],
      "fol_rules": [
        "∀x (Orchestra(x) → ∃y Composes(y, symphony_9))",
        "Composes(beethoven, symphony_9)",
        "PremieredBy(vienna_music_society, beethoven)"
      ],
      "fol_conc": "(Leader(x) → ∀x ((Orchestra(x) ∧ PremieredBy(y, symphony_9))) ",
      "perplexity": [
        1.722683310508728,
        1.329005479812622
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(Leader(x) → ∀x ((Orchestra(x) ∧ PremieredBy(y, symphony_9)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composes(x, y)",
        "Premiered(x, y)",
        "Is(y, z)",
        "Leads(z, x)"
      ],
      "fol_consts": [
        "beethoven",
        "symphony9"
      ],
      "fol_rules": [
        "∃x (Music(symphony9))",
        "∀x (Composes(beethoven, symphony9))",
        "Vienna(x) ∧ Music(y)",
        "Is(z, orchestra)",
        "Leads(t, v)"
      ],
      "fol_conc": "Premiered(v, music)",
      "perplexity": 2.4423928260803223,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Music/1, Music/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Music/1, Music/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsMusicPiece(x)",
        "Writes(y, z)",
        "PremieredBy(w, x)",
        "Leads(v, w)",
        "IsMusicPiece(x)",
        "IsMusicPiece(z)",
        "Leads(t, u)"
      ],
      "fol_consts": [
        "SymphonyNo9",
        "Beethoven",
        "ViennaMusicSociety"
      ],
      "fol_rules": [
        "(∀x (IsMusicPiece(SymphonyNo9)) ∧ Writes(Beethoven, SymphonyNo9) ∧ PremieredBy(ViennaMusicSociety, SymphonyNo9))",
        "(∃u (PremieredBy(u, v)))"
      ],
      "fol_conc": "(∀w ((IsMusicPiece(w)) → ∃v (PremieredBy(v, w))))",
      "perplexity": 2.624872922897339,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 481
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sitcom(x)",
        "Star(x, y)",
        "Pilot(x, y)",
        "WorkingTitle(x, y)",
        "ScriptEditor(x, y)",
        "Member(x, y)",
        "Channel(x)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "bbc_two",
        "bbc_three",
        "andrew_collins",
        "secret_dude_society",
        "july_2013"
      ],
      "fol_rules": [
        "Sitcom(badults)",
        "∃x (Member(x, pappys) ∧ Star(x, badults))",
        "Pilot(badults, bbc_three)",
        "WorkingTitle(badults, secret_dude_society)",
        "ScriptEditor(badults, andrew_collins)"
      ],
      "fol_conc": "∀x ((Member(x, pappys) ∧ (Pilot(badults, bbc_three) ⊕ Pilot(badults, bbc_two))) → False)",
      "perplexity": [
        1.3281742334365845,
        1.208306074142456
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x ((Member(x, pappys) ∧ (Pilot(badults, bbc_three) ⊕ Pilot(badults, bbc_two))) → False)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Series(x)",
        "Starring(x, y)",
        "Piloted(x, y)",
        "Title(x, y)",
        "Editor(x, y)",
        "Member(x, y)",
        "Show(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "andrewcollins",
        "july2013",
        "bbcthree",
        "bbctwo"
      ],
      "fol_rules": [
        "Series(badults)",
        "Starring(badults, pappys)",
        "Piloted(badults, july2013)",
        "Title(badults, thesecretduedesociety)",
        "Editor(badults, andrewcollins)"
      ],
      "fol_conc": "¬(∃x (Member(x, pappys) ∧ Show(x, y) ∧ (Piloted(y, bbcthree) ∨ Piloted(y, bbctwo))))",
      "perplexity": 1.309848427772522,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BritishSitcom(x)",
        "StarIn(x, y)",
        "PilotedOn(x, y)",
        "WorkingTitleFor(x, y)",
        "StarIn(y, z)"
      ],
      "fol_consts": [
        "badults",
        "andrew collins",
        "july 2013",
        "bbc three",
        "the secret dude society",
        "bbc two",
        "bbc three",
        "bbc two",
        "andrew collins",
        "bbc three",
        "andrew collins",
        "bbc three"
      ],
      "fol_rules": [
        "BritishSitcom(badults) ∧ StarIn(badults, p) → WorkingTitleFor(p, the secret dude society)",
        "PilotedOn(badults, july 2013) ∧ PilotedOn(badults, bbc three)",
        "WorkingTitleFor(badults, the secret dude society)",
        "(StarIn(x, andrew collins)) ⊕ ¬(BritishSitcom(x) → (PilotedOn(x, bbc two) ∨ PilotedOn(x, bbc three)))"
      ],
      "fol_conc": "¬((StarIn(y, z) ∧ BritishSitcom(z)) ∧ PilotedOn(z, bbc two) ∨ PilotedOn(z, bbc three))",
      "perplexity": 2.6001479625701904,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 482
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Twins(x)",
        "Triplets(x)",
        "SpendTimeWithSibling(s, t)",
        "PlayWithSibling(s, t)",
        "siblingsAreSameAge(s1, s2)",
        "ComplainAboutAnnoyingSibling(x)",
        "LiveAtHomeRegularly(x)",
        "DevelopStrongBondWithFamilyMember(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "\\u0030x (Twins(x) \\u00f2 Triplets(x)) \\u03c0 SpendTimeWithSibling(x, SiblingOfX)(x)",
        "\\u0030x (siblingsAreSameAge(x, y) \\u03e9 Twins(x) & Tripets(y))",
        "\\u0030x (ComplainAboutAnnoyingSibling(x) \\u03c0 siblingsAreSameAge(SiblingOfX))(x)",
        "\\u00cx ((\\u00fnLiveAtHomeRegularly(x)) \\u03e9 DevelopStrongBondWithFamilyMember(x))",
        "SpendTimeWithSibling(luke, SiblingOfLuke) \\u00f2 \\u00fnLiveAtHomeRegularly(luke)",
        "\\u0030x (SpendTimeWithSibling(x, SiblingOfX) π ComplainAboutAnnoyingSibling(x))",
        "\\u00cx ((Twins(luke) \\u0026 Triplets(luke)) \\u03e9 DevelopStrongBondWithFamilyMember(x)) \\u00f2 \\u00fn(\\u0031y (siblingsAreSameAge(y, x) \\u03e9 Twins(y) & Tripets(x))))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSibling(luke)",
      "perplexity": [
        1.78782320022583,
        1.3702104091644287
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "\\u0030x (Twins(x) \\u00f2 Triplets(x)) \\u03c0 SpendTimeWithSibling(x, SiblingOfX)(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Siblings(x, y)",
        "Spent(x, z)",
        "Aging(y, x)",
        "Samey(x, y)",
        "Annoys(z, x)",
        "Resident(x)"
      ],
      "fol_consts": [
        "lukes"
      ],
      "fol_rules": [
        "(Siblings(x, y) → Spent(x, z))",
        "(∃x (Aging(y, x) ∧ Siblings(x, y))) → Samey(x, y)",
        "(∀z (Annoys(z, x) ∧ Siblings(x, y))) → Samey(x, y)",
        "(Resident(x) → ¬Spent(x, z))",
        "(Spent(x, z) → ∃x ((Aging(y, x) ∧ Spent(x, z)) ∨ ¬(Aging(y, x))))",
        "(∀z (Samey(x, y) ∧ Resident(z))) → Annoys(z, x)",
        "(Resident(x) ∧ Siblings(lukes, x) ∧ Spent(lukes, x)) ⊕ (∃x ((Siblings(lukes, x) ∧ Samey(x, x)) ∨ ¬(Aging(y, x))))",
        "Annoys(rinas, lukes)"
      ],
      "fol_conc": "Annoys(lukes, rina)",
      "perplexity": 2.2792654037475586,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spend(x, y)",
        "HangingOutWith(y)",
        "Live(s)",
        "Spend(x, y)",
        "(x, z)",
        "Live(z)",
        "Spend(y, x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "(∀z ∀w (((z, w) ∧ Spend(w)) → Spend(luke)))",
        ".(s) ∨ ((t, s) ∧ Spend(s))",
        "(Spend(t) → (∃y (((x) ∨ (e) ∧ Live(e)))))",
        "(∀x ∀w (((z) ∧ Live(z)) → Spend(w)))",
        "((Live(luke) ⊕ ∃r ((l, r) ∧ Spend(r))))",
        "(Spend(x) ∧ ¬Live(y))",
        "¬(Spend(s))",
        "∀x (Spend(t) ∨ Live(z)) → Spend(w)"
      ],
      "fol_conc": "(Live(luke) ⊕ ∃r ((l, r) ∧ Spend(r)))",
      "perplexity": 11.716741561889648,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀z ∀w (((z, w) ∧ Spend(w)) → Spend(luke)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 483
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "3.5,14",
        "6.8",
        "8.9"
      ],
      "fol_consts": [
        "4.2,5,7",
        "2.0",
        "6.2"
      ],
      "fol_rules": [
        "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct.",
        " "
      ],
      "fol_conc": "Coudert's denrntriezantrye, oteerstin nyeauleikaktisnneoceliberti, iqid viaeglouue to meeaibomntye lnguikakliuereikaktnixten, eçioctin teoiktitiksigtiange.",
      "perplexity": [
        7.040337085723877,
        15.77748966217041
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "dredly(z)"
      ],
      "fol_consts": [
        "_ (when torn from coc, it will be tasty), ",
        ".join([c["
      ],
      "fol_rules": [
        "dredly(_ (when torn from coc, it will be tasty), )"
      ],
      "fol_conc": "((((dredly(z)) ∧ ¬((dredly(v))))))",
      "perplexity": 36.158042907714844,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "dredly(_ (when torn from coc, it will be tasty), )"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 484
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Sport(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "sam",
        "mac"
      ],
      "fol_rules": [
        "*∀x (Sport(x) → Event(x)): All sports are events.",
        "*∃x ((Event(x) ∧ LastGame(sam, x)) ∨ Event(sam))",
        "*∀x ((Sport(x) → Event(x))) Since "
      ],
      "fol_conc": "*∃x (((Event(x) ∧ LastGame(sam, x)) ∨ Event(sam))",
      "perplexity": [
        1.2249113321304321,
        3.9907302856445312
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "*∀x (Sport(x) → Event(x)): All sports are events."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Last(x, y)"
      ],
      "fol_consts": [
        "olympics",
        "taiwan",
        "unitedstates",
        "medals",
        "games"
      ],
      "fol_rules": [
        "(∃x (Sporting(y)) ∧ ∀z (Olympic(z) → Medals(z)))",
        "(Last(x, y) ∨ (∃y ∀z (Olympic(z) ∧ Last(z, x))))"
      ],
      "fol_conc": "Medals(olympics)",
      "perplexity": 3.6427314281463623,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 485
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input.txt"
      ],
      "fol_consts": [
        "2.2, 'This is a book that says 'You know what it does!'",
        "5.1: What did John do? What is his name?"
      ],
      "fol_rules": [
        "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
      ],
      "fol_conc": "The question asks about what Tom found out from his book. This is different from everyone saying 'You know why you don't want to read it.' You get really good on this thing when you find out that Tom got done by John!",
      "perplexity": [
        6.940479755401611,
        7.573236465454102
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Implicit(x)",
        "Interpretted(x)",
        "Instantuality(x)"
      ],
      "fol_consts": [
        "emplovee",
        "innout",
        "introdional"
      ],
      "fol_rules": [
        "Implicit(x)",
        "Interprelling(x)"
      ],
      "fol_conc": "Theiridity(uingemmetzment) ⊕ ¬Inestuct(untrodional) ∧ ∀x (Implicit(x)) ∧ Interprelling(x)",
      "perplexity": 8.219903945922852,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "clients to deliver goods(x)",
        "clients to deliver goods(y)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "((clients to deliver goods(i)) ∧ (people who don't own cars(u)))",
        "(((clients to deliver goods(a))))",
        "(clients to deliver goods(o, i))"
      ],
      "fol_conc": "((clients to deliver goods(i)) ∧ (people who don't own cars(u)))",
      "perplexity": 17.38105010986328,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ClientsToDeliverGoods/2, ClientsToDeliverGoods/1.\n\n\nFatal error:  The following symbols are used with multiple arities: ClientsToDeliverGoods/2, ClientsToDeliverGoods/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 486
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Bv",
        "Cw",
        "Pet",
        "DomestcatedAnimal",
        "Alligators"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Bv(x) → DomestcatedAnimal(x))",
        ",  // All bovines are domesticated animals. ",
        "∃x (Pet(x) ∧ Bv(x))",
        "Some pets are cows.",
        "fol_conc",
        "If Cw(Ted), then ¬ Pet(Ted): If Ted is a cow, then Ted is not a pet."
      ],
      "fol_conc": "If Cw(Ted), then ¬Pet(Ted)",
      "perplexity": [
        2.8385090827941895,
        1.9578423500061035
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  // All bovines are domesticated animals."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)"
      ],
      "fol_consts": [
        "ted",
        "cow",
        "alligator"
      ],
      "fol_rules": [
        "∀x (Bovine(x) → Domesticated(x))",
        "∃x (Pet(x) ∧ Bovine(x))",
        "(Bovine(x) ∧ Domesticated(x)) → ¬Alligator(x)",
        "¬Domesticated(ted)",
        "Ted(alligator)"
      ],
      "fol_conc": "If(bovine, ted) → Not(pet)",
      "perplexity": 1.5994274616241455,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Alligator/1, Alligator/0, Pet/1, Pet/0, Ted/1, Ted/0, Bovine/1, Bovine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Alligator/1, Alligator/0, Pet/1, Pet/0, Ted/1, Ted/0, Bovine/1, Bovine/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isBovine(x)",
        "isPet(x)",
        "isDomesticated(x)",
        "isAlligator(x)"
      ],
      "fol_consts": [
        "Ted",
        "cow",
        "pet",
        "bovine"
      ],
      "fol_rules": [
        "∀x (isBovine(x) → isDomesticated(x))",
        "(∃x (isBovine(x) ∧ isPet(x)))",
        "(∃x (isBovine(x) → ¬isAlligator(x)))",
        "∀x (isAlligator(x) → isDomesticated(x))"
      ],
      "fol_conc": "¬(isPet(Ted) ∧ isBovine(Ted))",
      "perplexity": 1.991287350654602,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 487
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exists(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exists(x)  → Turtle(x))",
        ", ∀x (Squirrel(x) ∨ Rabbit(x))",
        "\t Skittish(x) → NotStill(x)",
        "\t All Squirrels are Skittish"
      ],
      "fol_conc": "¬(Turtle(Rock) ∧ Squirrel(Rock)) → (Cute(Rock) ∨ Skittish(Rock))",
      "perplexity": [
        1.6707557439804077,
        1.5952483415603638
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ", ∀x (Squirrel(x) ∨ Rabbit(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Existential(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Existential(x))",
        "Animal(x) ∧ Rabbit(x) ∨ Squirrel(x)",
        "(Skittish(x) → ¬Still(x))",
        "All(x) ∧ All(squirrels) → Skittish(squirrels)"
      ],
      "fol_conc": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ∨ Skittish(rock))",
      "perplexity": 1.2520520687103271,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cute(x)",
        "ExistentialProperty(x, y)",
        "IsA(x, y)",
        "Skittish(x)",
        "Skittish(y)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Cute(x) ∧ IsA(x, rabbit))",
        "∃x (ExistentialProperty(x, turtle))",
        "IsA(x, y) ∨ IsA(y, x)",
        "(Skittish(x) → ¬IsA(x, squirrel))",
        "∀x (Skittish(x) ∧ IsA(x, squirrel) → IsA(x, rabbit))",
        "¬Skittish(Rock)"
      ],
      "fol_conc": "¬(ExistentialProperty(Rock, turtle) ∧ Skittish(Rock) ∨ (IsA(Rock, rabbit)))",
      "perplexity": 1.8664019107818604,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 488
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(y)",
        "DesignStyleOfZahaHadid(z)",
        "DesignStyleOfKellyWearstler(w)",
        "Evocative(v)",
        "Dreamy(u)",
        "DesignByMax(t)"
      ],
      "fol_consts": [
        "hadid",
        "wearstler",
        "max_design"
      ],
      "fol_rules": [
        "∀x (DesignStyleOfZahaHadid(x) → Timeless(x))",
        "¬∃y (MassProductDesign(y) ∧ Timeless(y))",
        "DesignStyleOfZahaHadid(hadid) ⊕ DesignStyleOfKellyWearstler(wearstler)",
        "∀w (DesignStyleOfKellyWearstler(w) → Evocative(w))",
        "∀u (DesignStyleOfKellyWearstler(u) → Dreamy(u))",
        "DesignByMax(max_design) → (Timeless(max_design) → (MassProductDesign(max_design) ∧ Evocative(max_design)))"
      ],
      "fol_conc": "DesignByMax(t) → (Evocative(t) ⊕ Dreamy(t))",
      "perplexity": [
        1.1864566802978516,
        1.0925570726394653
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x, y)",
        "Timeless(z)",
        "Massproduct(z)",
        "Evocative(z)",
        "Dreamy(z)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x, zaha) → Timeless(x))",
        "∀x (Massproduct(x) → ¬Timeless(x))",
        "(Design(y, zaha) ⊕ Design(z, kelly))",
        "∀x (Design(x, kelly) → Evocative(x))",
        "∀x (Design(x, kelly) → Dreamy(x))",
        "(Timeless(w) ∧ Design(w, max)) → (Massproduct(w) ∧ Evocative(w))"
      ],
      "fol_conc": "(Evocative(v) ⊕ Dreamy(v))",
      "perplexity": 1.3054825067520142,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "DesignStyle(y, x)",
        "MassProduct(z)",
        "Evocative(w)",
        "Dreamy(v)"
      ],
      "fol_consts": [
        "ZahaHadid",
        "KellyWearstler",
        "Max"
      ],
      "fol_rules": [
        "∀y (DesignStyle(y, ZahaHadid) → Timeless(y))",
        "¬(MassProduct(z) ∧ Timeless(z))",
        "(DesignStyle(x, ZahaHadid) ⊕ DesignStyle(x, KellyWearstler))",
        "∀y (DesignStyle(y, KellyWearstler) → Evocative(y))",
        "∀y (DesignStyle(y, KellyWearstler) → Dreamy(y))",
        "(Timeless(u) ∧ DesignStyle(u, Max)) → (MassProduct(u) ∧ Evocative(u))"
      ],
      "fol_conc": "Evocative(Max) ⊕ Dreamy(Max)",
      "perplexity": 1.2268986701965332,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 489
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(y, z)",
        "Mammal(z)",
        "Animal(w)",
        "SymptomOf(virus, symptom)",
        "HasSymptoms(animal, symptomsList)"
      ],
      "fol_consts": [
        "Monkeypox",
        "MonkeypoxVirus",
        "Humans",
        " glu"
      ],
      "fol_rules": [
        "InfectiousDisease(Monkeypox)",
        "CausedBy(Monkeypox, MonkeypoxVirus)",
        "OccursIn(MonkeypoxVirus, Humans)",
        "Mammal(Humans) ∧ Animal(Humans)",
        "∀x (SymptomOf(x, fever))",
        "∃y HasSymptoms(y, [fever, headache])"
      ],
      "fol_conc": "SymptomOf(MonkeypoxVirus, coughing)",
      "perplexity": [
        1.891088843345642,
        1.1538031101226807
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Is(x, y)",
        "Caused(y)",
        "Occurs(z)",
        "Symptons(x)",
        "Infective(x)",
        "Feel(tired)",
        "Feels(x)",
        "Glu(y)"
      ],
      "fol_consts": [
        "monkeypox",
        "virus"
      ],
      "fol_rules": [
        "∀x (Is(monkeypox, infectious))",
        "∃y (Caused(virus) ∧ Occurs(y) ∧ Is(y, monkeypox))",
        "∀z ((Occurs(z) → Infective(z)))",
        "∀w (Mammal(w) → Animal(w))",
        "Human(human)",
        "(Symptons(monkeypox) → (Feels(x) ∧ Glu(y)))"
      ],
      "fol_conc": "∃x ((Symptons(monkeypox) → Coughs(x)))",
      "perplexity": 2.5654892921447754,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Disease(x)",
        "CausedBy(y, x)",
        "OccursIn(z, y)",
        "IsAAnimal(w)",
        "Mammal(v)",
        "Symptons(u)",
        "Fever(s)",
        "Fever(t)",
        "Symptons(v)",
        "Fever(r)",
        "CausedBy(g, h)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus"
      ],
      "fol_rules": [
        "∀x (Disease(x))",
        "CausedBy(monkeypoxvirus, monkeypox)",
        "OccursIn(human, monkeypoxvirus)",
        "IsAAnimal(humans)",
        "Mammal(mamals)",
        "Symptons(fever)",
        "Symptons(headache)",
        "Symptons(restlessness)",
        "Fever(tired)"
      ],
      "fol_conc": "∃x (Disease(x))",
      "perplexity": 4.442147731781006,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Fever/1, Fever/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Fever/1, Fever/0"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 490
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1, 'cril' to understand how yourkyar's crentoreyss is in the sknech-nuttyardt,"
      ],
      "fol_consts": [
        "calumb"
      ],
      "fol_rules": [],
      "fol_conc": "Cilly!",
      "perplexity": [
        5.744722843170166,
        13.818531036376953
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cilly!"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Alien(zeros, cousins)",
        "Achievement1(x)",
        "Aliceein(nust, cousins)"
      ],
      "fol_consts": [
        "realty",
        "alieeion",
        "aueceion"
      ],
      "fol_rules": [
        "If1alieein(zates, cousins) ∧ Achievement2(x) ∧ Excouteeilage1(zateuetch, cousins) ∧ Couskouslionn(axiotgion) ∧ Xerieein(vueceitsei, cousin) ∧ ∃x (Couskouslionn(x))"
      ],
      "fol_conc": "Aliceein(zates, cousins) ∨ ∀x (Itoochy1aueceiotrialiaeicuioutauretchertyttsnatvoykieslionn(zareuetch, couscouslionn))",
      "perplexity": 10.39339542388916,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Ficrae(x)",
        "Neref(n)"
      ],
      "fol_consts": [
        "_",
        "_"
      ],
      "fol_rules": [
        "∀v (Ficrae(_)) → Neref(u, v)",
        "¬((Neref(p)) ⊕ ¬(Neref(h)))",
        "∃x ((Ficrae(k)))",
        "(Ficrae(_))"
      ],
      "fol_conc": "((((Ficrae(u)) ∧ Neref(t))))",
      "perplexity": 24.32681655883789,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Neref/2, Neref/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Neref/2, Neref/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 491
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(y)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "Greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, y) → ¬Empty(y))",
        ",  // Rule 1 ∀x (Airline(x) → Transport(x, multiple))",
        "\nRule 2",
        "∀x (Plane(x) ∧ Empty(x))",
        "\nRule 3",
        "¬Airline(Greyhound) → ¬Plane(Greyhound)"
      ],
      "fol_conc": "Airline(Greyhound)",
      "perplexity": [
        1.8423994779586792,
        1.7174742221832275
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  // Rule 1 ∀x (Airline(x) → Transport(x, multiple))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cantransport(x)",
        "Empty(x)",
        "Airline(x)"
      ],
      "fol_consts": [
        "greyhound",
        "airlines",
        "boeing707s",
        "planes"
      ],
      "fol_rules": [
        "(Cantransport(x)) ∧ (Not(empty)) → True(x)",
        "Airline(x) ∧ Cantransport(x)",
        "Plane(x) ∧ Boeing707(x)",
        "¬(Greyhound(x) ∧ Airline(x))",
        "No(greyhound, planes)"
      ],
      "fol_conc": "Greyhound(is)",
      "perplexity": 2.324756383895874,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Greyhound/1, Greyhound/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Greyhound/1, Greyhound/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "canTransport(x, y)",
        "empty(x)",
        "isAirline(x)",
        "isAirline(x)"
      ],
      "fol_consts": [
        "Greyhound",
        "Boeing707s",
        "airlines",
        "planes"
      ],
      "fol_rules": [
        "∀x (canTransport(x, y) → ¬empty(x))",
        "∀x (isAirline(x) ∧ canTransport(x, y))",
        "∀x (isAirline(x) ∧ isAirline(y))",
        "∀x (isAirline(x) ∧ canTransport(planes, x))",
        "¬(isAirline(Greyhound) → ¬canTransport(planes, Greyhound))"
      ],
      "fol_conc": "isAirline(Greyhound)",
      "perplexity": 1.7525084018707275,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 492
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wings(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) → Monkey(x)) ⊕ (Animal(x) → Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wings(x))",
        "((¬Fly(Rock) ∧ ¬Bird(Rock)) → (¬Fly(Rock) ∧ ¬Breathe(Rock)))"
      ],
      "fol_conc": "Wings(Rock)",
      "perplexity": [
        1.0702742338180542,
        1.0497606992721558
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) ∧ ¬Bird(x)) → Monkey(x))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "(¬Fly(rock) ∧ ¬Bird(rock)) → ((¬Fly(rock) ∨ ¬Breathe(rock)))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.206965446472168,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Bird(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock",
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x ((Animal(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Bird(x))",
        "∀x (Fly(x) → HasWings(x))"
      ],
      "fol_conc": "(¬Bird(rock) ⊕ ¬Fly(rock)) → (HasWings(rock))",
      "perplexity": 1.6487127542495728,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 493
  },
  {
    "id": 145,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Person(x, y)",
        "Teacher(x, y)"
      ],
      "fol_consts": [
        "Jerry",
        "Rose"
      ],
      "fol_rules": [
        "∀x Human(x)",
        "Why are humans?",
        "No one is a teacher",
        "Teaches Jerry and Rose"
      ],
      "fol_conc": "∃y Person(y,Jerry)",
      "perplexity": [
        3.687268018722534,
        4.209045886993408
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Why are humans?"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Teaches(y, z)",
        "Is(a)",
        "Young(z)",
        "Does(x)",
        "Be(teacher)",
        "Do(x)",
        "Teacher(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "(Student(jerry) ∧ Human(jerry)) → (Does(jerry))",
        "(Teaches(jerry)) ∨ (Is(a))",
        "(Young(rose))",
        "(Teacher(younger) ∨ Younger(x, z))",
        "¬(Be(teacher, x))",
        "Not(beassistant, manager)",
        "Does(friend)",
        "Be(also)"
      ],
      "fol_conc": "Does(jerry)",
      "perplexity": 9.110209465026855,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "Human(y)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "(Human(jerry) ∧ ¬(Human(rose))) ⊕ ¬(Human(jerry) ∨ ¬(Human(rose)))"
      ],
      "fol_conc": "¬(Human(jerry) ∨ ¬(Human(rose)))",
      "perplexity": 2.750972270965576,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 494
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "RobertLewandowski"
      ],
      "fol_rules": [
        "∀x (SoccerPlayer(x) → Striker(x))",
        "], 5  "
      ],
      "fol_conc": " Star(RobertLewandowski)",
      "perplexity": [
        2.667221784591675,
        2.4863502979278564
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "], 5"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)"
      ],
      "fol_consts": [
        "robert",
        "lewandowski"
      ],
      "fol_rules": [
        "∀x (Striker(x) ∧ Soccerplayer(x))",
        "(Player1(lewandowski) → Left(lewandowski, bayern))",
        "∀x (Left(x, y) ∧ Not(y))"
      ],
      "fol_conc": "Star(lewandowski)",
      "perplexity": 1.9389313459396362,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsAPlayer(x)",
        "LeftTeam(x, y)",
        "IsAS(x, y)",
        "IsAS(y)"
      ],
      "fol_consts": [
        "RobertLewandowski",
        "striker",
        "player",
        "BayernMunchen",
        "star"
      ],
      "fol_rules": [
        "∀x (IsAPlayer(x)) → ∃x (LeftTeam(x, BayernMunchen))",
        "IsAPlayer(RobertLewandowski) → IsAS(RobertLewandowski, striker)",
        "(IsAS(x) → LeftTeam(RobertLewandowski, x))"
      ],
      "fol_conc": "IsAS(RobertLewandowski, star)",
      "perplexity": 2.128493070602417,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IsAS/1, IsAS/2.\n\n\nFatal error:  The following symbols are used with multiple arities: IsAS/1, IsAS/2"
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 495
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.054250717163086,
        1.0146929025650024
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Kind(x) ⊕ Evil(x))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ Ceos(harry)",
      "perplexity": 1.1794359683990479,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x)))",
        "∀x (¬Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ∨ CEO(harry)",
      "perplexity": 1.0483012199401855,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 496
  },
  {
    "id": 140,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is loved by children.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromTheSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromTheSimpsons(x))",
        "FromTheSimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": [
        1.1186916828155518,
        1.273779034614563
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Loved(x)",
        "From(x, y)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Loved(x) → Funny(x))",
        "∀x (From(x, simpsons) → Loved(x))",
        "∀x (From(x, simpsons) → From(x, simpsons))",
        "∀x (Yellow(x) → From(x, simpsons))",
        "From(ben, simpsons) ⊕ Funny(ben)"
      ],
      "fol_conc": "Loved(ben)",
      "perplexity": 1.172278642654419,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromTheSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben",
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "(∃x ((Ugly(x) → ¬Popular(x))) ∧ ∀y (∀z (LovedByChildren(z) → Funny(y)) ∧ FromTheSimpsons(y) → LovedByChildren(y)) ∧ ∀w (Yellow(w) → FromTheSimpsons(w))) → ∃v ((Funny(v) → Popular(v)) ⊕ (FromTheSimpsons(v) ∨ Funny(ben)))",
        "(∀u (Ugly(u) → ¬Popular(u))) ∧ (∀r (∀q (LovedByChildren(q) → Funny(r)) ∧ FromTheSimpsons(r) → LovedByChildren(r)) ∧ ∀p (Yellow(p) → FromTheSimpsons(p))) → ∃t ((FromTheSimpsons(t) ∨ Funny(ben)) ⊕ (Ugly(ben) → ¬Popular(ben)))"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": 1.9129050970077515,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 497
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "your own words"
      ],
      "fol_consts": [
        "eats the same food",
        "taste the same thing, read and write letters,"
      ],
      "fol_rules": [
        "it's easier to understand than you think",
        "you can use this information when it comes to making a thing."
      ],
      "fol_conc": "If you don't know what they mean and doesn't make any sense, you shouldn't be able to get done with it.",
      "perplexity": [
        5.966564655303955,
        8.971295356750488
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "it's easier to understand than you think"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Greekenese(x)",
        "Connoonessnouse(y)"
      ],
      "fol_consts": [
        "charming",
        "civicuele",
        "kitttytickly"
      ],
      "fol_rules": [
        "Unakiness(x)",
        "Connoonessnouse1(y)"
      ],
      "fol_conc": "Eldestnatrytiksuellishellaanteaalitzvistzilholkynseaarntkluttaamstiqrlichyounefidjivee3(x, y)",
      "perplexity": 22.125415802001953,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person(x)",
        "Person(y)"
      ],
      "fol_consts": [
        "_ is a person who works in the software.",
        "_ is a person who works in the software."
      ],
      "fol_rules": [
        "(Person(x) → Person(y))",
        "(Person(v) → Person(i))"
      ],
      "fol_conc": "Person(j) ∧ Person(e, i)",
      "perplexity": 10.77658748626709,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Person/2, Person/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Person/2, Person/1"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 498
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Mammal(x) → Monkey(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wing(x))",
        "(¬Fly(rock) ∧ ¬Bird(rock)) → (¬Fly(rock) ∧ ¬Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0420074462890625,
        1.2327877283096313
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)",
        "Fly(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Wing(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.1422373056411743,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Wing(x)"
      ],
      "fol_consts": [
        "rock",
        "rock"
      ],
      "fol_rules": [
        "Mammal(x) → Animal(x)",
        "∀x (Monkey(x) → Mammal(x))",
        "Animal(x) ⊕ Bird(x)",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "Fly(x) → Wing(x)",
        "(Fly(rock) ∨ Bird(rock)) ∧ ¬(Fly(rock) ⊕ Bird(rock)) → ((¬Fly(rock)) ∨ (¬Breathe(rock)))"
      ],
      "fol_conc": "Mammal(rock)",
      "perplexity": 2.675429582595825,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 499
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Project(x)",
        "Do(x, y)",
        "WrittenIn(x, y)",
        "Use(x, y)",
        "Play(x, y)",
        "Song(x)",
        "Be(x, y)"
      ],
      "fol_consts": [
        "sam",
        "mac",
        "python",
        "rust",
        "perfect"
      ],
      "fol_rules": [
        "∃x (Project(x) ∧ Do(sam, x))",
        "¬Use(mac)",
        "∀y ∀z Song(z ∧ z ≠ perfect(y)) → None"
      ],
      "fol_conc": "Sam or Bonnie attends.",
      "perplexity": [
        2.283777952194214,
        1.850750207901001
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀y ∀z Song(z ∧ z ≠ perfect(y)) → None"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attend(x)",
        "Engaged(x, y)",
        "Performing(x, y)",
        "Chaperone(y, z)",
        "Student(z)"
      ],
      "fol_consts": [
        "bonnie",
        "talentshow",
        "schoolevent",
        "dance",
        "student"
      ],
      "fol_rules": [
        "∀x (Attend(x) → Student(student))",
        "(Performs(performing, x) ∧ Engaged(engaged, y)) ∨ ∃x (Student(z))",
        "(Chaperone(chaperone, z) ∧ Attend(attend)) ∨ ¬(Attends(talentshow, chaperone) ∨ Attends(talentshow, dance) ∨ Attends(schoolevent, student))"
      ],
      "fol_conc": "Attend(bonnie) → (Student(bonnie) ∧ Engaged(bonnie, talentshow)) ∨ ∃x (School(x) ∧ Student(attends, x))",
      "perplexity": 3.1438798904418945,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Attends(x, y)",
        "EngagedInEvents(x, y)",
        "Attends(x, y)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (Attends(x, z)) → (∃y ((Attends(y, x) ∧ EngagedInEvents(y, z))))",
        "(Attends(r) ∨ ¬EngagedInEvents(r)) ⊕ (¬(Attends(s) ∨ EngagedInEvents(s)))"
      ],
      "fol_conc": "∀x (Attends(x, r) ∨ Attends(x, s) → ∃y ((Attends(y, x) ∧ EngagedInEvents(y, z))))",
      "perplexity": 3.9329891204833984,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: EngagedInEvents/1, EngagedInEvents/2, Attends/1, Attends/2.\n\n\nFatal error:  The following symbols are used with multiple arities: EngagedInEvents/1, EngagedInEvents/2, Attends/1, Attends/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 500
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Created(x)",
        "ManMade(x)",
        "ArtificialIntelligence(x, y)",
        "Created(Alice, x)"
      ],
      "fol_consts": [
        "Alice",
        "Computer"
      ],
      "fol_rules": [
        "(∀x ((Created(x)) → (ManMade(Computer(x)))) ∨ (∃x (ManMade(Created(Alice, x))))",
        "$(¬Exists(y)(ArtificialIntelligence(y, Computer(sam))) ∧ Created(sam, y))"
      ],
      "fol_conc": "IsGrandSlam(Djokovic, x): The status of being the grand slam champion for Djokovic = true or false",
      "perplexity": [
        2.979233980178833,
        2.5362324714660645
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x ((Created(x)) → (ManMade(Computer(x)))) ∨ (∃x (ManMade(Created(Alice, x))))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Person(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "grandchampion",
        "oaccer",
        "tennisplayer",
        "celebrity",
        "athlete",
        "paid",
        "famous",
        "taxhaven"
      ],
      "fol_rules": [
        "(∀x (Person(x))) ⊕ (Is(celebrity, x))",
        "(Grandchampion(x) ∧ Is(tennisplayer, x))"
      ],
      "fol_conc": "If(djokovic) → If(famous, then, live, in, taxhaven)",
      "perplexity": 3.6547248363494873,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: If/5, If/1.\n\n\nFatal error:  The following symbols are used with multiple arities: If/5, If/1"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "GrandSlam(x)",
        "OscarNominated(x)",
        "GrandSlam(champion)"
      ],
      "fol_consts": [
        "johndokovic",
        "tennisplayer",
        "actor"
      ],
      "fol_rules": [
        "∀x (GrandSlam(x)) → (GrandSlam(champion) ∧ (GrandSlam(champion) ∨ OscarNominated(x)))",
        "(OscarNominated(actor)) ⊕ GrandSlam(athlete)",
        "(OscarNominated(actor)) ⊕ GrandSlam(player)"
      ],
      "fol_conc": "¬(GrandSlam(johndokovic) ∧ (GrandSlam(johndokovic) ∨ OscarNominated(johndokovic)))",
      "perplexity": 2.873694658279419,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 501
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "KnownAs(x, y)",
        "BornIn(x, year)",
        "FootballPlayer(x)",
        "LoanedOutToClub(x, club)"
      ],
      "fol_consts": [
        "ailton",
        "1995",
        "braga",
        "nautico"
      ],
      "fol_rules": [
        "∀x, y (KnownAs(x, y) → BornIn(x, 1995))",
        "KnownAs(ailton, 'Ailton')",
        "FootballPlayer(ailton)",
        "LoanedOutToClub(ailton, braga)"
      ],
      "fol_conc": "¬∃club (LoanedOutToClub(ailton, club))",
      "perplexity": [
        1.805975317955017,
        1.0629603862762451
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x, y (KnownAs(x, y) → BornIn(x, 1995))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Knownas(x, z)",
        "Player(x)",
        "Loanedoutto(x, y)",
        "Brazillian(x)",
        "Footballclub(x)",
        "Playsfor(x)",
        "Clubof(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense"
      ],
      "fol_rules": [
        "∀x (Born(x, xtime)) → Knownas(x, ailton)",
        "Loanedoutto(ailton, braga) ∧ Player(ailton) → Footballclub(braga)",
        "Footballclub(nautico)",
        "Playsfor(ailton, nautico)"
      ],
      "fol_conc": "¬(Player(x))",
      "perplexity": 2.2763373851776123,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "BornIn(x, y)",
        "KnownAs(x)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazillian(y)",
        "FootballClub(z)"
      ],
      "fol_consts": [
        "ailton",
        "1995"
      ],
      "fol_rules": [
        "(∀x (BornIn(ailton, 1995)))",
        "(∃y ((KnownAs(x) ∧ FootballPlayer(x)) ∧ LoanedOutTo(x, y)))",
        "(FootballClub(braga))",
        "(∃z ((Brazillian(z) ∧ FootballClub(nautico)) ∨ FootballClub(braga)))"
      ],
      "fol_conc": "¬LoanedOutTo(ailton)",
      "perplexity": 2.0865602493286133,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LoanedOutTo/2, LoanedOutTo/1.\n\n\nFatal error:  The following symbols are used with multiple arities: LoanedOutTo/2, LoanedOutTo/1"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 502
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1",
        "2",
        "3",
        "4"
      ],
      "fol_consts": [
        "Cinnrodnnylsisge.2648394451"
      ],
      "fol_rules": [
        "(3.7+30=10)",
        "3.9:9:9,11.0-cryvee.",
        "6.2 :5 = xllnts',39243rd\tsmtstch."
      ],
      "fol_conc": "",
      "perplexity": [
        9.936018943786621,
        8.303238868713379
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(3.7+30=10)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkg1(nixton)"
      ],
      "fol_consts": [
        "tikitnoe",
        "klayunk",
        "kmoukae"
      ],
      "fol_rules": [
        "Cnyeue(x) ∧ ∀x (Dicntionnixton(axinytn))",
        "Kzviliktl1aue(sntditn0e, dklayunkn)",
        "Nukaeertyllaue(dxirly3ntstdistl1bse)"
      ],
      "fol_conc": "Tikuiktl1aue(xixttngtrsttn0e)",
      "perplexity": 13.911416053771973,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Carriage(x)"
      ],
      "fol_consts": [
        "$^ (20+86)"
      ],
      "fol_rules": [
        "∀t ((Carriage(n)) ⊕ Paleysnt', (i, i) → Carriage(f))",
        "¬Paleysnt', ($^ (20+86), e, j) → Carriage(d) ∧ ¬Carriage(o)",
        ".join(x, i, y)"
      ],
      "fol_conc": "Carriage(i, n) ⊕ ∃n (Carriage(t))",
      "perplexity": 28.844219207763672,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀t ((Carriage(n)) ⊕ Paleysnt', (i, i) → Carriage(f))"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 503
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "rodrick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(rodrick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(rodrick_strong, creed_brothers)",
      "perplexity": [
        1.0385785102844238,
        1.0182982683181763
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Formed(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "wwe",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Formed(diamondmine, wwe)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Leads(roderickstrong, creedbrothers)",
      "perplexity": 1.1766703128814697,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ProfessionalWrestlingStable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "ProfessionalWrestlingStable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "FeudWith(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, creed_brothers)",
      "perplexity": 1.0692299604415894,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 504
  },
  {
    "id": 49,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is printed text.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Media(x)",
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [],
      "fol_conc": "PrintedText(1984)",
      "perplexity": [
        3.0293374061584473,
        1.1440988779067993
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Analog(x)",
        "Digital(x)",
        "Printed(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "digital",
        "streaming",
        "analog"
      ],
      "fol_rules": [
        "∀x (Analog(x) → ∀y (Not(printedtext)))"
      ],
      "fol_conc": "Printed(text)",
      "perplexity": 2.339400053024292,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (Analog(x) → ¬PrintedText(x))",
        "∀x (PrintedText(x) ∧ Analog(x))",
        "∀x (StreamingService(x) → ∃x (Analog(x)))",
        "(HardcoverBook(1984) → PrintedText(1984))",
        "(StreamingService(1984) ∧ HardcoverBook(1984))"
      ],
      "fol_conc": "PrintedText(1984)",
      "perplexity": 1.2417352199554443,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 505
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Twins(x)",
        "Triplets(x)",
        "SpendTimeWithSibling(s, t)",
        "PlayWithSibling(s, t)",
        "siblingsAreSameAge(s1, s2)",
        "ComplainAboutAnnoyingSibling(x)",
        "LiveAtHomeRegularly(x)",
        "DevelopStrongBondWithFamilyMember(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "\\u0030x (Twins(x) \\u00f2 Triplets(x)) \\u03c0 SpendTimeWithSibling(x, SiblingOfX)(x)",
        "\\u0030x (siblingsAreSameAge(x, y) \\u03e9 Twins(x) & Tripets(y))",
        "\\u0030x (ComplainAboutAnnoyingSibling(x) \\u03c0 siblingsAreSameAge(SiblingOfX))(x)",
        "\\u00cx ((\\u00fnLiveAtHomeRegularly(x)) \\u03e9 DevelopStrongBondWithFamilyMember(x))",
        "SpendTimeWithSibling(luke, SiblingOfLuke) \\u00f2 \\u00fnLiveAtHomeRegularly(luke)",
        "\\u0030x (SpendTimeWithSibling(x, SiblingOfX) π ComplainAboutAnnoyingSibling(x))",
        "\\u00cx ((Twins(luke) \\u0026 Triplets(luke)) \\u03e9 DevelopStrongBondWithFamilyMember(x)) \\u00f2 \\u00fn(\\u0031y (siblingsAreSameAge(y, x) \\u03e9 Twins(y) & Tripets(x))))"
      ],
      "fol_conc": "ComplainAboutAnnoyingSibling(luke)",
      "perplexity": [
        1.78782320022583,
        1.3702104091644287
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "\\u0030x (Twins(x) \\u00f2 Triplets(x)) \\u03c0 SpendTimeWithSibling(x, SiblingOfX)(x)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Siblings(x, y)",
        "Spent(x, z)",
        "Aging(y, x)",
        "Samey(x, y)",
        "Annoys(z, x)",
        "Resident(x)"
      ],
      "fol_consts": [
        "lukes"
      ],
      "fol_rules": [
        "(Siblings(x, y) → Spent(x, z))",
        "(∃x (Aging(y, x) ∧ Siblings(x, y))) → Samey(x, y)",
        "(∀z (Annoys(z, x) ∧ Siblings(x, y))) → Samey(x, y)",
        "(Resident(x) → ¬Spent(x, z))",
        "(Spent(x, z) → ∃x ((Aging(y, x) ∧ Spent(x, z)) ∨ ¬(Aging(y, x))))",
        "(∀z (Samey(x, y) ∧ Resident(z))) → Annoys(z, x)",
        "(Resident(x) ∧ Siblings(lukes, x) ∧ Spent(lukes, x)) ⊕ (∃x ((Siblings(lukes, x) ∧ Samey(x, x)) ∨ ¬(Aging(y, x))))",
        "Annoys(rinas, lukes)"
      ],
      "fol_conc": "Annoys(lukes, rina)",
      "perplexity": 2.2792654037475586,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Spend(x, y)",
        "HangingOutWith(y)",
        "Live(s)",
        "Spend(x, y)",
        "(x, z)",
        "Live(z)",
        "Spend(y, x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "(∀z ∀w (((z, w) ∧ Spend(w)) → Spend(luke)))",
        ".(s) ∨ ((t, s) ∧ Spend(s))",
        "(Spend(t) → (∃y (((x) ∨ (e) ∧ Live(e)))))",
        "(∀x ∀w (((z) ∧ Live(z)) → Spend(w)))",
        "((Live(luke) ⊕ ∃r ((l, r) ∧ Spend(r))))",
        "(Spend(x) ∧ ¬Live(y))",
        "¬(Spend(s))",
        "∀x (Spend(t) ∨ Live(z)) → Spend(w)"
      ],
      "fol_conc": "(Live(luke) ⊕ ∃r ((l, r) ∧ Spend(r)))",
      "perplexity": 11.716741561889648,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀z ∀w (((z, w) ∧ Spend(w)) → Spend(luke)))"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 506
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatesIn(x, y)",
        "BelongsToCity(city, person)",
        "IsOnLeaderboard(leaderboard, x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (∀y ((ParticipatesIn(x, y) ∧ IsOnLeaderboard(leaderboard, x)) → Win(y)))",
        "(BelongsToCity(city, person) ∨ ∅)"
      ],
      "fol_conc": "IsOnLeaderboard(leaderboard, rina)",
      "perplexity": [
        2.6780128479003906,
        1.7730518579483032
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(BelongsToCity(city, person) ∨ ∅)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x)",
        "Participated(y, z)",
        "Tied(z, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "dumaierclassic",
        "leaderboard",
        "winner",
        "participant",
        "tied",
        "person"
      ],
      "fol_rules": [
        "(∃x (Winner(x)) ∧ ∃y (Participant(y, x)))",
        "((Leaderboard(steinhauer) → Ties(steinhauer, descampe))) ∨ ((Tie(steinhauer, belgium) ∧ Participant(descampe, steinhauer)))"
      ],
      "fol_conc": "∀x ∃y (Winner(x) ∧ Participated(y, x)) ∨ ¬(Leaderboard(steinhauer) → Ties(steinhauer, descampe))",
      "perplexity": 2.858041763305664,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Winner(x)",
        "ParticipatesIn(x, y)"
      ],
      "fol_consts": [
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        " fol_preds:=[",
        "]  }  {",
        " fol_preds:=["
      ],
      "fol_rules": [
        "∀x (Winner(x) → ∃y (ParticipatesIn(y, x)))"
      ],
      "fol_conc": "∃x (Winner(x))",
      "perplexity": 1.744195818901062,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 507
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "F1Visa(x)",
        "J1Visa(x)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsWork(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ⊕ J1Visa(x)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsWork(x) → (NeedsCPT(x) ⊕ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "NeedsCPT(mike)",
        "WantsWork(mike)"
      ],
      "fol_conc": "J1Visa(mike)",
      "perplexity": [
        1.0409514904022217,
        1.0161923170089722
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ∨ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Wants(x, y) → (Needs(x, cpt) ∨ Needs(x, opt)))",
        "International(mike)",
        "Needs(mike, cpt)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.2441786527633667,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsToApplyFor(x, z)",
        "WantsToWork(x)",
        "CPT(z)",
        "OPT(z)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → HasVisa(x, f1) ⊕ HasVisa(x, j1))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsToWork(x) → NeedsToApplyFor(x, c) ∨ NeedsToApplyFor(x, o))"
      ],
      "fol_conc": "HasVisa(mike, j1)",
      "perplexity": 1.2153346538543701,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 508
  },
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Attend(x)",
        "Engaged(x)",
        "PerformInTalentShows(x)",
        "Inactive(x)",
        "Chaperone(x, y)",
        "Student(x)"
      ],
      "fol_consts": [
        "bonnie",
        "school"
      ],
      "fol_rules": [
        "∀x (PerformInTalentShows(x) → (∃y (Attend(y) ∧ Engaged(y)) ∧ Student(x)))",
        "PerformInTalentShows(x) ⊕ Inactive(x)",
        "∀x (Chaperone(highschool_dance(x), x) → ¬Student(x))",
        "∀x Chaperone(x, y)",
        "∃y (Student(y) ∧ Attend(y)) → (∀x Student(x))",
        "Inactive(bonnie) ⊕ Engaged(bonnie)"
      ],
      "fol_conc": "PerformInTalentShows(bonnie)",
      "perplexity": [
        1.435240387916565,
        1.2257014513015747
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Chaperone(highschool_dance(x), x) → ¬Student(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attends(x)",
        "Engaged(x, y)",
        "Attend(x, y)"
      ],
      "fol_consts": [
        "bonnie",
        "schoolshow",
        "highschooldance",
        "communitymember",
        "youngchild",
        "teenager",
        "studentwhoattendsschool",
        "inactiveanddisinterested"
      ],
      "fol_rules": [
        "(Perform(schoolshow) → (Attend(x, y) ∧ Engaged(x, y)))",
        "(Perform(schoolshow) ⊕ Communitymember(x))",
        "Chaperone(y) → ¬Studentwhoattendschool(y)",
        "∀x (Chaperone(x) → Inactiveanddisinterested(x))",
        "Youngchild(x) ∨ Teenager(x) → Studentwhoattendsschool(x)",
        "(Attends(bonnie) ∧ Engaged(bonnie, schoolshow)) ⊕ ¬(Attends(bonnie) ∨ Engaged(bonnie, schoolshow))"
      ],
      "fol_conc": "Perform(schoolshow, bonnie)",
      "perplexity": 1.767084002494812,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Perform/1, Perform/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Perform/1, Perform/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Attend(x)",
        "Attend(school, x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "(∃x (Often(x)) → (∀y (Attend(y))) ∧ Attend(family))",
        "(∃x (Attend(eventuals, y)) ⊕ ¬(Attend(generally) ∨ Attend(locals)))",
        "¬((Attend(school)) ∧ Attend(birthright)) → ∃z ((Attend(dance, z)))",
        "∀y (((Often(y) ∨ (Attend(eventuals)))) ⊕ ¬(Attend(generally) ∨ Attend(locals)))",
        "(Attend(school)) ∧ Attend(birthright)",
        "(¬(Attend(students, bonnie)) → (∃z ((Often(z)) ∨ (Attend(eventuals)))) ⊕ ¬(Attend(generally) ∨ Attend(locals)))"
      ],
      "fol_conc": "(∀y (((Attend(family, y) ∧ Often(y)) ⊕ ∃x (Attend(students, x) ∨ Attend(birthright)))) → Attend(eventuals))",
      "perplexity": 7.303131103515625,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Attend/1, Attend/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Attend/1, Attend/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 509
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(y)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)"
      ],
      "fol_consts": [
        "Greyhound"
      ],
      "fol_rules": [
        "∀x (Transport(x, y) → ¬Empty(y))",
        ",  // Rule 1 ∀x (Airline(x) → Transport(x, multiple))",
        "\nRule 2",
        "∀x (Plane(x) ∧ Empty(x))",
        "\nRule 3",
        "¬Airline(Greyhound) → ¬Plane(Greyhound)"
      ],
      "fol_conc": "Airline(Greyhound)",
      "perplexity": [
        1.8423994779586792,
        1.7174742221832275
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ",  // Rule 1 ∀x (Airline(x) → Transport(x, multiple))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cantransport(x)",
        "Empty(x)",
        "Airline(x)"
      ],
      "fol_consts": [
        "greyhound",
        "airlines",
        "boeing707s",
        "planes"
      ],
      "fol_rules": [
        "(Cantransport(x)) ∧ (Not(empty)) → True(x)",
        "Airline(x) ∧ Cantransport(x)",
        "Plane(x) ∧ Boeing707(x)",
        "¬(Greyhound(x) ∧ Airline(x))",
        "No(greyhound, planes)"
      ],
      "fol_conc": "Greyhound(is)",
      "perplexity": 2.324756383895874,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Greyhound/1, Greyhound/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Greyhound/1, Greyhound/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "canTransport(x, y)",
        "empty(x)",
        "isAirline(x)",
        "isAirline(x)"
      ],
      "fol_consts": [
        "Greyhound",
        "Boeing707s",
        "airlines",
        "planes"
      ],
      "fol_rules": [
        "∀x (canTransport(x, y) → ¬empty(x))",
        "∀x (isAirline(x) ∧ canTransport(x, y))",
        "∀x (isAirline(x) ∧ isAirline(y))",
        "∀x (isAirline(x) ∧ canTransport(planes, x))",
        "¬(isAirline(Greyhound) → ¬canTransport(planes, Greyhound))"
      ],
      "fol_conc": "isAirline(Greyhound)",
      "perplexity": 1.7525084018707275,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 510
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space(x)",
        "Duster(x)",
        "HouseholdAppliance(x)"
      ],
      "fol_consts": [
        "space",
        "plunger",
        "vacuum",
        "vampire",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Space(space)",
        "Vacuum(vacuum)",
        "¬Suck(duster)",
        "HouseholdAppliance(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": [
        1.1055251359939575,
        1.0262552499771118
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Household(x)",
        "Appliance(x)",
        "Isin(x, y)"
      ],
      "fol_consts": [
        "space",
        "plunger",
        "vacuum",
        "vampire",
        "duster"
      ],
      "fol_rules": [
        "Suck(plunger)",
        "Suck(vacuum)",
        "Suck(vampire)",
        "Vacuum(space)",
        "Household(duster)",
        "Appliance(duster)",
        "¬Suck(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.3384466171264648,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Vampire/1, Vampire/0, Vacuum/1, Vacuum/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "HouseholdAppliance(x)",
        "IsSpace(x)"
      ],
      "fol_consts": [
        "plungers",
        "vacuums",
        "vampires",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plungers)",
        "Suck(vacuums)",
        "Suck(vampires)",
        "Vacuum(space)",
        "HouseholdAppliance(duster)",
        "¬Suck(duster)"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.4131101369857788,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 511
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (Digital(x) → Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "∃x (1984 → HardcoverBook(x))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": [
        1.4220527410507202,
        1.033126711845398
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (1984 → HardcoverBook(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)"
      ],
      "fol_consts": [
        "streaming",
        "text",
        "analog",
        "hardcover",
        "book"
      ],
      "fol_rules": [
        "(¬Digital(x)) → (Analog(x))",
        "∀x (Printed(x) ∧ Analog(x))",
        "All(x) ∧ Streaming(x)",
        "If(hbd, hardover, text) ∧ Hbd(text)",
        "If(s, streaming, book) → If(book, hardcover, s)"
      ],
      "fol_conc": "Streaming(s)",
      "perplexity": 2.651956081390381,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isDigital(x)",
        "isAnalog(x)",
        "isPrintedText(x)",
        "isAnalog(x)",
        "isAnalog(x)"
      ],
      "fol_consts": [
        "1984",
        "streaming service"
      ],
      "fol_rules": [
        "∀x (isDigital(x) → ¬isAnalog(x))",
        "∀x (isPrintedText(x) → isAnalog(x))",
        "∀x (isAnalog(x) ∧ isDigital(x))",
        "(isAnalog(1984) ∨ isPrintedText(1984))"
      ],
      "fol_conc": "isAnalog(1984)",
      "perplexity": 1.9075596332550049,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 512
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "[e3.5/21,14.50]"
      ],
      "fol_consts": [
        "_",
        "[a3.5/81,16.50]",
        "19.9:11.76",
        "4.31:22.70",
        "5.72:21.39"
      ],
      "fol_rules": [
        "e3.5/11],"
      ],
      "fol_conc": "The world's most expensive ice cream.",
      "perplexity": [
        4.81779670715332,
        7.5987348556518555
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "e3.5/11],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Larryity(x)",
        "Gannity(x)",
        "Kinty(x)"
      ],
      "fol_consts": [
        "taylaryous",
        "kiltyonyy",
        "kllyotonny"
      ],
      "fol_rules": [
        "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ ¬Kinkyty(x) ∧ ¬Kintyonyy(x) ∧ ¬Kilryous(x) ∧ ¬Kickllyyt(x)"
      ],
      "fol_conc": "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ Falseyntonny(x) ∧ Falsekittens(x) ∧ Defllyonyy(x) ∧ Declibtnys(x)",
      "perplexity": 7.738007545471191,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 513
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Player(x)",
        "Striker(x)",
        "SoccerPlayer(x)"
      ],
      "fol_consts": [
        "robert_lewandowski"
      ],
      "fol_rules": [
        "∃x (Player(x) → Striker(x))",
        "],  # Simplified to reflect the relationship. The simplified rule is a direct inference from NL statements, without the need for complex quantifiers or explicit conditional logic.  ],   ",
        "fol_conc",
        "SoccerPlayer(robert_lewandowski)'} "
      ],
      "fol_conc": "SoccerPlayer(robert_lewandowski)",
      "perplexity": [
        2.5062079429626465,
        5.398693561553955
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "],  # Simplified to reflect the relationship. The simplified rule is a direct inference from NL statements, without the need for complex quantifiers or explicit conditional logic.  ],"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Striker(x)",
        "Soccerplayer(x)"
      ],
      "fol_consts": [
        "robertlewandowski",
        "bayernmunchen"
      ],
      "fol_rules": [
        "∀x (Player(x) → Soccerplayer(x))",
        "∃x (Striker(x) ∧ Player(x))",
        "Forall(x) → ¬(Leavingteam(x) ∧ Notleavingteam(x))",
        "Robertlewandowski(x) ∧ Leavingteam(x)",
        "¬Leavingteam(x)"
      ],
      "fol_conc": "Soccerplayer(robertlewandowski)",
      "perplexity": 2.223888635635376,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Robertlewandowski/1, Robertlewandowski/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Robertlewandowski/1, Robertlewandowski/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "isA(x)",
        "playsFor(x, y)",
        "left(x, y)"
      ],
      "fol_consts": [
        "Robert Lewandowski",
        "striker",
        "soccer player",
        "Bayern Munchen"
      ],
      "fol_rules": [
        "∀x (isA(x) ∧ playsFor(x, Bayern Munchen)) → left(x, Bayern Munchen)",
        "(left(x, y) → isA(x))",
        "∃y (playsFor(Robert Lewandowski, y) ∧ isA(y))"
      ],
      "fol_conc": "isA(Robert Lewandowski)",
      "perplexity": 1.6780751943588257,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 514
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (RatingGreaterThan9(x) → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → RatingGreaterThan9(x))",
        "RatingGreaterThan9(subway) ∨ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0449631214141846,
        1.0158560276031494
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "Listed(x) → ¬Negative(x)",
        "∀x (Rating(x, y) ∧ (Greater(y, 90)) → Listed(x))",
        "∃x (¬Takeout(x) ∧ Negative(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ Greater(y, 90))",
        "Rating(subway, y) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Negative(subway)",
      "perplexity": 1.3234094381332397,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ListedIn(x)",
        "ReceivesNegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "ProvidesTakeoutService(x)",
        "PopularAmongLocals(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "ListedIn(x) → ¬ReceivesNegativeReviews(x)",
        "∀x (RatingGreaterThan9(x) → ListedIn(x))",
        "∃x (¬ProvidesTakeoutService(x) ∧ ReceivesNegativeReviews(x))",
        "∀x (PopularAmongLocals(x) → RatingGreaterThan9(x))",
        "(RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway))"
      ],
      "fol_conc": "(ProvidesTakeoutService(subway) ∧ ¬ReceivesNegativeReviews(subway))",
      "perplexity": 1.4965705871582031,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 515
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(y)",
        "Hotpot(z)",
        "ProductOfBakedByMelissa(w)",
        "DriedThaiChilies(thai_chilies)"
      ],
      "fol_consts": [
        "bakery",
        "cupcake",
        "hotpot",
        "melissa_product",
        "thai_chilies"
      ],
      "fol_rules": [
        "∀x (Bakery(x) → ¬Spicy(x))",
        "∀y (Cupcake(y) → Bakery(y))",
        "∀z (Hotpot(z) → Spicy(z))",
        "∀w (ProductOfBakedByMelissa(w) → Cupcake(w))",
        "DriedThaiChilies(thai_chilies)",
        "(Spicy(thai_chilies) ∨ Bakery(thai_chilies)) → (Hotpot(thai_chilies) ∨ Spicy(thai_chilies))"
      ],
      "fol_conc": "Hotpot(thai_chilies)",
      "perplexity": [
        1.1366446018218994,
        1.067737340927124
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)"
      ],
      "fol_consts": [
        "dried",
        "thai",
        "chilies",
        "melissa",
        "bakedby"
      ],
      "fol_rules": [
        "¬Bakery(chilies) ∧ Spicy(chilies)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x ((Products(melissa, x) ∧ Cupcakes(x)) ⊕ Products(melissa, chilies))",
        "(Spicy(chilies) ∨ Bakery(chilies)) → (Hotpot(chilies) ∨ Spicy(chilies))"
      ],
      "fol_conc": "Hotpot(chilies)",
      "perplexity": 1.3735452890396118,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked by melissa",
        "dried thai chilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀y (ProductOf(x, y) → Cupcake(x))",
        "(Spicy(dried thai chilies) ⊕ Bakery(dried thai chilies)) → (Hotpot(dried thai chilies) ⊕ Spicy(dried thai chilies))"
      ],
      "fol_conc": "Hotpot(dried thai chilies)",
      "perplexity": 1.1922597885131836,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 516
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorksRegularlyOftenAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyingOrganizingSpacesInHome(x)",
        "VisitStoreRegularly(x, y)",
        "GoesToBedLateAndWakesUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy",
        "officeSupply"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x)): All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksRegularlyOftenAtHome(x) → TidyingOrganizingSpacesInHome(x)) : All people who work regularly and often at home spend free time tidying and organizing the spaces in their homes.",
        "VisitStoreRegularly(remy, officeSupply)",
        "∃x ((TidyingOrganizingSpacesInHome(x) → ¬GoesToBedLateAndWakesUpAfterNoon(x))) : If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(∃x (TidyingOrganizingSpacesInHome(remy) ∧ GoesToBedLateAndWakesUpAfterNoon(x))) ⊕ ¬((TidyingOrganizingSpacesInHome(remy)) ∨ (GoesToBedLateAndWakesUpAfterNoon(x))): Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "fol_conc": "VisitStoreRegularly(remy, officeSupply)",
      "perplexity": [
        1.2690494060516357,
        1.0767649412155151
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (OwnLargeMonitor(x) → WorksRegularlyOftenAtHome(x)) : If people own a large desktop monitor at their home, then they work regularly and often at home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Works(x, z)",
        "Home(y)",
        "Regularly(x)",
        "Often(x)",
        "Fullystocked(z)",
        "Impressive(w)",
        "Tidy(x)",
        "Organize(x)",
        "Visit(z)",
        "Goeslate(x)",
        "Wakeupafternoon(x)",
        "Remygoeshomeoffice(x)"
      ],
      "fol_consts": [
        "remy",
        "largedesktopmonitor",
        "homeoffice"
      ],
      "fol_rules": [
        "∀x (Own(x, largedesktopmonitor) → Regularly(worksat, home))",
        "∀x (Fullystocked(x) ∧ Impressive(y) → Owns(x, largedesktopmonitor))",
        "∀x (Regularly(w, z) ∨ Often(w, z)) → Tidy(oftenw, x)",
        "∀x (Regularly(workathome, y)) → Visit(z)",
        "∀x (Tidy(x) → ¬Goeslate(y) ∧ Wakeupafternoon(y))",
        "Remygoeshomeoffice(r) → Remybothgoestolateandwakeupafternoontheirhomeorremydoesenottolatesnororganizesherhomeandvisitsstoreoften(r)"
      ],
      "fol_conc": "Regularly(visit, officeupply)",
      "perplexity": 2.593095541000366,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Own(x, y)",
        "WorkAtHomeRegularlyAndOften(x)",
        "HomeOffice(x)",
        "TidyOrganizeSpacesInHomeFreeTime(x)",
        "VisitOfficeSupplyStore(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "(∀x (Own(x, y) → WorkAtHomeRegularlyAndOften(x)))",
        "(∀x (HomeOffice(x) → Own(x, y)))",
        "(∀x ((WorkAtHomeRegularlyAndOften(x) ∧ TidyOrganizeSpacesInHomeFreeTime(x))) ⊕ ¬(TidyOrganizeSpacesInHomeFreeTime(x)))",
        "((∀x (VisitOfficeSupplyStore(x) → WorkAtHomeRegularlyAndOften(x))))",
        "(TidyOrganizeSpacesInHomeFreeTime(y) ∧ ¬WorkAtHomeRegularlyAndOften(x)) ⊕ TidyOrganizeSpacesInHomeFreeTime(z)",
        "((Own(remy, y) → WorkAtHomeRegularlyAndOften(remy)))",
        "(TidyOrganizeSpacesInHomeFreeTime(remy) ∧ ¬WorkAtHomeRegularlyAndOften(y)) ⊕ (¬TidyOrganizeSpacesInHomeFreeTime(z) ∨ VisitOfficeSupplyStore(w))"
      ],
      "fol_conc": "VisitOfficeSupplyStore(r) → WorkAtHomeRegularlyAndOften(remy)",
      "perplexity": 1.8778806924819946,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 517
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "SchedulesMeetingWithCustomers(x, y)",
        "HasLunchInCompany(x)",
        "HasLunchAtHome(x)",
        "WorksRemotelyFromHome(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) → SchedulesMeetingWithCustomers(HasLunchInCompany, y))",
        "(SchedulesMeetingWithCustomers(y), HasLunchInCompany(z)): Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (Employee(x) → ¬(HasLunchAtHome(x))) : Employees will either have lunch in the company or have lunch at home",
        "(HasLunchAtHome(y), WorksRemotelyFromHome): If an employee has lunch at home, then he/she works remotely from home.",
        "∀x (InOtherCountry(x) → WorksRemotelyFromHome)",
        "∀y ((Manager(y), ¬WorksRemotelyFromHome))"
      ],
      "fol_conc": "(Employee(james) ∧ HasLunchAtHome(z)) ⊕ Employee(james)",
      "perplexity": [
        1.6255406141281128,
        1.2488607168197632
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(SchedulesMeetingWithCustomers(y), HasLunchInCompany(z)): Everyone who has lunch in the company schedules meetings with their customers."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Has(x, z)",
        "Appears(y, t)",
        "Manager(x)",
        "Remote(x)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, customer)) → Appears(employee, company)",
        "∀y (Has(y, lunch)) ∧ Employee(z) → Schedule(z, customer)",
        "∀z ((Employee(z) ∨ Manager(z))) ⊕ Has(z, home)"
      ],
      "fol_conc": "¬Has(james, company)",
      "perplexity": 2.6338348388671875,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Employee/1, Employee/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Employee/1, Employee/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ScheduleMeeting(x, y)",
        "AppearanceToday(x)",
        "HasLunchInCompany(x)",
        "HasLunchInCompany(x)",
        "ScheduleMeeting(x, y)"
      ],
      "fol_consts": [
        "james",
        "james"
      ],
      "fol_rules": [
        "∀x (ScheduleMeeting(x, y) → AppearanceToday(x))",
        "∀x ((HasLunchInCompany(x)) ∧ ScheduleMeeting(x, y))",
        "∀x (HasLunchInCompany(x) ⊕ HasLunchInCompany(x))",
        "∀x (HasLunchInCompany(x) → ScheduleMeeting(x, y))",
        "∃y (ScheduleMeeting(y) ∧ AppearanceToday(james))",
        "¬(HasLunchInCompany(james))"
      ],
      "fol_conc": "(HasLunchInCompany(james) ∨ HasLunchInCompany(james))",
      "perplexity": 4.019089221954346,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ScheduleMeeting/1, ScheduleMeeting/2.\n\n\nFatal error:  The following symbols are used with multiple arities: ScheduleMeeting/1, ScheduleMeeting/2"
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 518
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousCapital(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "HostedParalympics(x, y)",
        "LargestCity(x, y)",
        "University(x)",
        "TopRanked(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "asiaPacific"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulousCapital(beijing)",
        "LocatedIn(beijing, china)",
        "HostedOlympics(beijing, summer)",
        "HostedParalympics(beijing, summer)",
        "∀x (HostedOlympics(x, summer) ∧ HostedParalympics(x, summer) → HostedOlympics(x, winter) ∧ HostedParalympics(x, winter))",
        "∃x (University(x) ∧ LocatedIn(x, china) ∧ TopRanked(x))"
      ],
      "fol_conc": "LargestCity(beijing, china)",
      "perplexity": [
        1.0924162864685059,
        1.0156699419021606
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Most(x, y)",
        "Located(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Largest(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics",
        "paralympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Most(beijing, city)",
        "Located(beijing, china)",
        "Hosted(beijing, olympics)",
        "Hosted(beijing, paralympics)",
        "∃x (University(x) ∧ Located(x, beijing))",
        "∃x (University(x) ∧ Located(x, beijing))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2643002271652222,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, z)",
        "RankedAmongBestUniversities(x)",
        "LocatedIn(y, x)",
        "LocatedIn(z, w)",
        "LocatedIn(a, b)"
      ],
      "fol_consts": [
        "beijing",
        "people's republic of china",
        "asia-pacific",
        "world",
        "2008 summer olympics",
        "2008 summer paralympics games",
        "2008 summer olympics",
        "2008 summer paralympics games"
      ],
      "fol_rules": [
        "CapitalOf(beijing, people's republic of china)",
        "MostPopulousNationalCapitalCity(beijing)",
        "LocatedIn(beijing, northern china)",
        "HostedOlympics(beijing, 2008 summer olympics)",
        "HostedOlympics(beijing, 2008 summer paralympics games)",
        "∃x (RankedAmongBestUniversities(x) ∧ LocatedIn(x, beijing))",
        "LocatedIn(northern china, people's republic of china)"
      ],
      "fol_conc": "LocatedIn(beijing, z)",
      "perplexity": 2.3549418449401855,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 519
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "GrumpyPerson(x)",
        "AnimalLover(x)",
        "PetOwner(x)",
        "Owns(x, y)",
        "IsAPet(y)",
        "Be(x, y)",
        "And(p, q)",
        "Or(p, q)",
        "Not(p)",
        "Implication(p, q)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (PetOwner(x) → AnimalLover(x))",
        "PetOwner(tom)"
      ],
      "fol_conc": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))",
      "perplexity": [
        1.2260806560516357,
        1.07374906539917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Not(And(GrumpyPerson(tom), MeanToAnimals(tom)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x)",
        "Mean(x)",
        "Animal(y)",
        "Loves(x, y)",
        "Owns(x, y)"
      ],
      "fol_consts": [
        "tom",
        "pet"
      ],
      "fol_rules": [
        "¬(Nice(x, animal) ∧ Mean(x, animal))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "Animal(y) → (Loves(x, y) → Nice(x, y))",
        "Owns(x, y) → Loves(x, y)",
        "Owns(tom, pet)"
      ],
      "fol_conc": "¬Grumpy(tom) ∧ ¬Mean(tom, animal)",
      "perplexity": 1.3317378759384155,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "AnimalLover(x)",
        "OwnPet(x)"
      ],
      "fol_consts": [
        "tom",
        "grumpy"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃y (AnimalLover(y) ∧ MeanToAnimals(y))",
        "∀z (AnimalLover(z) → NiceToAnimals(z))",
        "OwnPet(tom)",
        "∀w ((OwnPet(w) → AnimalLover(w)))"
      ],
      "fol_conc": "¬MeanToAnimals(tom)",
      "perplexity": 1.5121904611587524,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 520
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x, y)",
        "rose_given(x, y, z)"
      ],
      "fol_consts": [
        "BreakingBad",
        "Rose",
        "Monday",
        "8pm",
        "Bachelor"
      ],
      "fol_rules": [
        "Show(x, y) → rose_given(y, x)",
        "BreakingBad → Show(x, BreakingBad)"
      ],
      "fol_conc": "BreakingBad",
      "perplexity": [
        3.4864635467529297,
        1.7282049655914307
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BreakingBad → Show(x, BreakingBad)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Givenout(x, y)",
        "On(x, y)",
        "Portrayslivesofrealpeople(y)",
        "Realitytvshow(y)"
      ],
      "fol_consts": [
        "breakingbad",
        "monday",
        "eightpm"
      ],
      "fol_rules": [
        "∃x (Monday(day) ∧ Eightpm(time)) → Givenout(rose, tv)"
      ],
      "fol_conc": "Givenout(rose, tv)",
      "perplexity": 2.4597065448760986,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsRealityShow(x)",
        "IsRealityShow(x)",
        "IsRealityShow(x)"
      ],
      "fol_consts": [
        "BreakingBad",
        "MondayAt8pm"
      ],
      "fol_rules": [
        "∀x (IsRealityShow(x)) → (IsRealityShow(x) ∧ IsRealityShow(x))",
        "∀x (IsRealityShow(x) ∧ IsRealityShow(x))",
        "∃x (IsRealityShow(x) ∧ IsRealityShow(BreakingBad))"
      ],
      "fol_conc": "IsRealityShow(BreakingBad)",
      "perplexity": 2.8895180225372314,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 521
  },
  {
    "id": 197,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi barks and is a dog.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Terricolous(x)",
        "HasLegs(x)",
        "Jumps(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → Animal(x) ∧ Barks(x))",
        "∀x (Animal(x) ∧ Jumps(x) → Likes(jane, x))",
        "∀x (Animal(x) ∧ HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬Jumps(kiki) ∧ ¬HasLegs(kiki) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "Barks(kiki) ∧ Dog(kiki)",
      "perplexity": [
        1.0660533905029297,
        1.249355435371399
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Animal(x)",
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Terricolous(x)",
        "Legs(x)",
        "Jump(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → Animal(x) ∧ Bark(x))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (Legs(x) → Jump(x))",
        "∀x (Terricolous(x) → Legs(x))",
        "¬(Jump(kiki) ∧ Legs(kiki)) → (Terricolous(kiki) ∨ Legs(kiki))"
      ],
      "fol_conc": "Bark(kiki) ∧ Dog(kiki)",
      "perplexity": 1.1493972539901733,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬(Like(jane, x)))",
        "(Dog(y)) ⊕ ∀y ((Animal(y) ∧ Bark(y)) → Dog(y))",
        "¬(Like(jane, y)) → ∃y (Animal(y) ∧ Bark(y) ∧ Like(jane, y)) → ∀x (Bark(x) → ¬Like(jane, x))",
        "(∀x (Terricolous(x) ⊕ Animal(x))) ∧ (∀x ((Animal(x) ∧ Bark(x)) ∨ Terricolous(x)))"
      ],
      "fol_conc": "Dog(kiki) ∧ Bark(kiki)",
      "perplexity": 2.3974010944366455,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 522
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "DigitalMedia(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (DigitalMedia(x) → ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → DigitalMedia(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "StreamingService(1984) → HardcoverBook(1984)"
      ],
      "fol_conc": "StreamingService(1984): 1984 is a streaming service.",
      "perplexity": [
        1.098854422569275,
        1.1216514110565186
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "StreamingService(1984): 1984 is a streaming service."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "nineteeneightyfour",
        "streamingservice"
      ],
      "fol_rules": [
        "¬(∃x (Digital(x))) ∧ Analog(x)",
        "(Printed(x)) → Analog(x)",
        "(Streaming(x) → Digital(x))"
      ],
      "fol_conc": "Streaming(nineteeneightyfour)",
      "perplexity": 1.8831857442855835,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬(Digital(x) → Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "(StreamingService(1984) → HardcoverBook(1984))"
      ],
      "fol_conc": "StreamingService(1984)",
      "perplexity": 1.1392617225646973,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_mistral-22b-it.json",
    "annotator_id": 523
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "PopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedOlympics(x, y)",
        "BestUniversities(x)"
      ],
      "fol_consts": [
        "Beijing",
        "PRC"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, PRC))",
        "∀x (PopulousNationalCapitalCity(Beijing))",
        "∀x (LocatedIn(Beijing, Northern China))",
        "∃x (HostedOlympics(Beijing, 2008 Summer Olympics) ∧ HostedOlympics(Beijing, 2008 Winter Paralympics))"
      ],
      "fol_conc": "∃x (HostedOlympics(Beijing, 2008 Summer Olympics) ∧ HostedOlympics(Beijing, 2008 Winter Paralympics))",
      "perplexity": [
        2.1414239406585693,
        1.0372672080993652
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Population(x)",
        "Location(x, y)",
        "Host(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Location(x, china))",
        "Bejinghost(beijing, olympics) ∧ Bejinghost(beijing, paraolympic)",
        "Bejinghost(beijing, summergames) ∧ Bejinghost(beijing, wintergames)"
      ],
      "fol_conc": "Beijinghostedbothsummerandwinterolympics(beijing)",
      "perplexity": 1.9591832160949707,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Capital(x, y)",
        "WorldMostPopulousNationalCapitalCity(x)",
        "LocatedIn(x, y)",
        "HostedGames(x, y)"
      ],
      "fol_consts": [
        "Beijing",
        "People'sRepublicOfChina",
        "SummerOlympics",
        "People'sRepublicOfChina",
        "SummerOlympics",
        "Beijing",
        "SummerOlympics",
        "SummerOlympics",
        "People'sRepublicOfChina",
        "Beijing",
        "People'sRepublicOfChina",
        "Beijing",
        "SummerOlympics"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, y) → ∃z (WorldMostPopulousNationalCapitalCity(z) ∧ LocatedIn(y, z)))",
        "HostedGames(Beijing, SummerOlympics) ∨ HostedGames(Beijing, People'sRepublicOfChina)",
        "HostedGames(Beijing, SummerOlympics) ∨ HostedGames(Beijing, People'sRepublicOfChina)"
      ],
      "fol_conc": "HostedGames(Beijing, SummerOlympics)",
      "perplexity": 2.371943473815918,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 524
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Island(x)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "antarctica",
        "south_shetland_islands"
      ],
      "fol_rules": [
        "Named(barutin_cove, barutin)",
        "Located(barutin_cove, snow_island)",
        "∃x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island)",
        "∀x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island → PartOf(x, south_shetland_islands))",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": [
        1.2041075229644775,
        1.174124836921692
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∃x (Island(x) ∧ x = snow_island ∨ x = greenwich_island ∨ x = deception_island)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Island(x)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutin",
        "barutin",
        "cove",
        "bulgarian",
        "settlement",
        "southwest",
        "coast",
        "snow",
        "island",
        "south",
        "shetland",
        "islands",
        "greenwich",
        "deception",
        "antarctica"
      ],
      "fol_rules": [
        "Named(ant, bulgarian)",
        "Located(cove, southwest)",
        "Located(southwest, snow)",
        "Island(snow)",
        "Island(greenwich)",
        "Island(deception)",
        "Part(south, shetland)",
        "Part(shetland, ant)",
        "∀x ∀y ∀z (Located(x, y) ∧ Located(y, z) → Located(x, z))"
      ],
      "fol_conc": "¬Located(bulgarian, ant)",
      "perplexity": 1.301805853843689,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Named(x, y)",
        "LocatedIn(x, y)",
        "PartOf(y, x)"
      ],
      "fol_consts": [
        "barutin",
        "cove",
        "bulgarian",
        "snow",
        "south",
        "shetland",
        "islands",
        "antarctica",
        "greenwich",
        "deception"
      ],
      "fol_rules": [
        "Named(antarticocove, bulgarian)",
        "LocatedIn(cove, snow)",
        "PartOf(snow, south)",
        "PartOf(shetland, antarctica)",
        "(LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)"
      ],
      "fol_conc": "¬LocatedIn(bulgarian, antarctica)",
      "perplexity": 1.8011727333068848,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(MAX_SECONDS)"
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 525
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "AmericanCity(x)",
        "NovelWriter(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "boston",
        "american_city",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "American(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets) ∧ WrittenBy(family_secrets, dani_shapiro)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0698050260543823,
        1.0086348056793213
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Written(x, y)",
        "Born(x, y)",
        "American(x)",
        "Writer(x)",
        "Novelwriter(x)"
      ],
      "fol_consts": [
        "familyhistory",
        "familyssecrets",
        "danishapiro",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x (Novel(x) ∧ Written(x, y) → Novelwriter(y))",
        "Writer(danishapiro)",
        "Written(familyhistory, danishapiro)",
        "Novel(familyhistory) ∧ Written(familyhistory, 2003)",
        "Podcast(familyssecrets) ∧ Written(familyssecrets, danishapiro)",
        "Born(boston, americancity)"
      ],
      "fol_conc": "Novel(familyssecrets)",
      "perplexity": 1.168009877204895,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "Writer(x)",
        "Novel(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "american_city",
        "boston",
        "american_city",
        "family_secrets"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, american_city) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → Writer(y))",
        "Writer(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets)",
        "BornIn(boston, american_city)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": 1.1994197368621826,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 526
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)",
        "ZahaHadidStyle(x)",
        "KellyWearstlerStyle(x)"
      ],
      "fol_consts": [
        "zahahadid",
        "kellywearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (ZahaHadidStyle(x) → Timeless(x))",
        "∀x (∃y MassProductDesign(y) ∧ Timeless(y))",
        "∃x (ZahaHadidStyle(x) ⊕ KellyWearstlerStyle(x))",
        "∀x (KellyWearstlerStyle(x) → Evocative(x))",
        "∀x (KellyWearstlerStyle(x) → Dreamy(x))",
        "∀x ((MassProductDesign(x) ∧ Timeless(x)) → (∃y MassProductDesign(y) ∧ Evocative(y)))"
      ],
      "fol_conc": "∃x (MassProductDesign(x) ∧ Timeless(x))",
      "perplexity": [
        1.1905467510223389,
        1.1764590740203857
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max",
        "hadi",
        "wearstler"
      ],
      "fol_rules": [
        "(∀x (Design(x, zaha) → Timeless(x)))",
        "(¬(Mass(x, y)) → Timeless(y))",
        "(Design(zaha, x) ∨ Design(kelly, x))",
        "(∀x (Design(x, wearstler) → Evocative(x)))",
        "(∀x (Design(x, wearstler) → Dreamy(x)))",
        "((¬(Mass(max, y)) ∧ Timeless(y)) → (∃x (Design(x, max) ∧ Mass(x, y) ∧ Evocative(x))))"
      ],
      "fol_conc": "(Mass(max, x) ∧ Evocative(x))",
      "perplexity": 1.92484712600708,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Timeless(x)",
        "MassProductDesign(x)"
      ],
      "fol_consts": [
        "zaha-hadid",
        "kelly-wearstler",
        "max"
      ],
      "fol_rules": [
        "(∀x (¬(Timeless(zaha-hadid)) ∨ Timeless(max)))",
        "(Timeless(kelly-wearstler) → ¬MassProductDesign(kelly-wearstler))"
      ],
      "fol_conc": "((MassProductDesign(x) ∧ Timeless(y)))",
      "perplexity": 12.510005950927734,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((not (Timeless(Zaha-hadid))) | (Timeless(Max)))\n                          ^"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 527
  },
  {
    "id": 151,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Harry Potter was published by New Vessel Press.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "PublishingHouse(x)",
        "SpecializesInTranslationsFrom(y, z)",
        "PublishedBookBy(x, y)",
        "WrittenInEnglish(z)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies"
      ],
      "fol_rules": [
        "∀x (PublishingHouse(x) → SpecializesInTranslationsFrom(Italian, English))",
        "∀y (PublishedBookBy(new_vessel_press, y) → WrittenInEnglish(y))",
        "PublishedBookBy(new_vessel_press, neapolitan_chronicles)",
        "TranslatedFromItalianTo(neapolitan_chronicles)",
        "PublishedBookBy(new_vessel_press, palace_of_flies)"
      ],
      "fol_conc": "∃x (PublishedBookBy(new_vessel_press, x))",
      "perplexity": [
        1.8612903356552124,
        1.079069972038269
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Specializes(x, y)",
        "Published(x, z)",
        "Translated(y, x)",
        "In(z)"
      ],
      "fol_consts": [
        "newvesselpress",
        "neapolitanchronicles",
        "palaceofflies",
        "harrypotter"
      ],
      "fol_rules": [
        "∀x (Specializes(newvesselpress, x))",
        "∃z ∀y ((Published(y, z) → In(z)))"
      ],
      "fol_conc": "Published(harrypotter, newvesselpress)",
      "perplexity": 2.138207197189331,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "PublishesBook(x)",
        "PublishesBook(x, y)",
        "Is(x, y)",
        "WrittenIn(y, z)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies"
      ],
      "fol_rules": [
        "(∀x (PublishesBook(new_vessel_press, x))) → ∃y ((Is(x, y)))",
        "(∀x (((PublishesBook(y, z) ∧ Is(z, neapolitan_chronicles)) ⊕ (WrittenIn(neapolitan_chronicles, y)))))"
      ],
      "fol_conc": "(PublishesBook(new_vessel_press, x) → Is(x, new_vessel_press))",
      "perplexity": 2.554863452911377,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 528
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSDept(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSDept(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "TakeDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.036009669303894,
        1.0131852626800537
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "From(x, y)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, y)",
        "Instructed(x, y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david",
        "library",
        "computer",
        "database"
      ],
      "fol_rules": [
        "¬(Student(x) ∧ Work(x, library) ∧ From(x, computer))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, library))",
        "∀x (Student(x) ∧ Take(x, database) → From(x, computer))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, database))",
        "∀x (Student(x) ∧ Work(x, lab) → Instructed(x, david))",
        "Student(james) ∧ Work(james, lab)",
        "¬(Parttime(jack) ∨ Work(jack, lab))"
      ],
      "fol_conc": "Take(james, database) ∨ Parttime(james)",
      "perplexity": 1.141514539718628,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "WorkingInTheLab(x)",
        "WorkingInTheLab(x)",
        "FromComputerScienceDepartment(x)",
        "HasPartTimeJobOfferedByUniversity(x)",
        "TakesDatabaseCourse(x)",
        "InstructedByDavid(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkingInTheLab(x) → ¬FromComputerScienceDepartment(x))",
        "∀x (HasPartTimeJobOfferedByUniversity(x) → Student(x) ∧ WorkingInTheLab(x))",
        "∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))",
        "∀x (InstructedByDavid(x) → TakesDatabaseCourse(x))",
        "∀x (WorkingInTheLab(x) → InstructedByDavid(x))",
        "Student(james)",
        "WorkingInTheLab(james)",
        "¬(HasPartTimeJobOfferedByUniversity(jack) ∨ WorkingInTheLab(jack))"
      ],
      "fol_conc": "(TakesDatabaseCourse(james) ∨ HasPartTimeJobOfferedByUniversity(james))",
      "perplexity": 1.7965888977050781,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 529
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(y, z)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiKi"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x ((Dog(x) ∧ Barks(x)) ⊕ ∃y (Animal(y) ∧ Animal(x) ∧ Jumps(y) ∧ Likes(y, z)))",
        "killed"
      ],
      "fol_conc": "∃x (Project(x)∧ WrittenIn(z,rust)",
      "perplexity": [
        2.5882740020751953,
        1.7326254844665527
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "killed"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x, y)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Has(x, y)",
        "Legs(x)"
      ],
      "fol_consts": [
        "ki",
        "jane",
        "dog"
      ],
      "fol_rules": [
        "(∀x (Barks(x, jane) → ¬Like(x, jane)))",
        "(∃y ((Animal(y) ∧ Barks(y)) ⊕ Dog(y)))",
        "(∀x (Jumps(x) → Like(x, jane)))",
        "(∀x (Has(x, legs) → Jumps(x)))",
        "(∀x (Animals(x) → Legs(x)))",
        "((¬(Ki(ki) ∧ Jumps(ki)) ∨ ¬(Ki(ki) ∧ Legs(ki))) ⊕ (∃y ((Terricolous(y) ∧ Ki(ki)) ∨ Legs(ki))))",
        "(∀x (Barks(x, ki) → ¬Like(x, ki)))",
        "((Jumps(ki) ⊕ Has(ki, legs)) ∨ (Ki(ki) ⊕ Legs(ki)))"
      ],
      "fol_conc": "Barks(ki, jane) ⊕ Dog(ki)",
      "perplexity": 1.7400482892990112,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "'NoneType' object has no attribute 'rstrip'"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Barks(x, y)",
        "Likes(y, x)",
        "IsDog(x)"
      ],
      "fol_consts": [
        "kiKi",
        "jane"
      ],
      "fol_rules": [
        "(∃y (¬Barks(y)) → ¬Likes(jane, y))",
        "(∀z (∃w (IsDog(w))) ⊕ Barks(z) ∧ IsDog(x))",
        "(∃x ((Likes(kiKi, x) ∨ Barks(kiKi))))",
        "Barks(y)",
        "¬((Likes(jane, y) → ¬Likes(v)) ∨ Likes(b))",
        "IsDog(x)",
        "(∀y (¬(Likes(z))) ⊕ ((Likes(w) ∨ Barks(k))))"
      ],
      "fol_conc": "Barks(y)",
      "perplexity": 18.1115779876709,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Likes/1, Likes/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Likes/1, Likes/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 530
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(y)",
        "HasAccessToProgram()",
        "CanCompose(x)"
      ],
      "fol_consts": [
        "george",
        "music"
      ],
      "fol_rules": [
        "∀x (Likes(george, music) → WantsToCompose(music))",
        "HasAccessToProgram() → CanCompose()",
        "(WantsToCompose(x) ∧ CanCompose()) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose()",
      "perplexity": [
        1.5744704008102417,
        1.0809179544448853
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "HasAccessToProgram() → CanCompose()"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x, y)",
        "Wants(y, z)",
        "Has(x, y)",
        "Can(z)",
        "Compose(w)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Music(x) → Wants(george, compose))",
        "∀y ((Program(y) ∧ Has(george, y))) → Can(compose)",
        "(Can(compose) ∧ Wants(compose)) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Can(compose)",
      "perplexity": 1.6768630743026733,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Compose/1, Compose/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Compose/1, Compose/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Likes(x, y)",
        "WantsToCompose(y)",
        "HasAccessToProgram(z)",
        "CanCompose(x)",
        "WillCompose(y)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "∀x (Likes(george, x) → WantsToCompose(x))",
        "∀y (HasAccessToProgram(y) ∧ CanCompose(george) → WillCompose(george))",
        "∀z ((WantsToCompose(z) ∧ CanCompose(z)) → WillCompose(z))"
      ],
      "fol_conc": "¬WillCompose(x) → ¬CanCompose(george)",
      "perplexity": 1.3746250867843628,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_ministral-8b-it.json",
    "annotator_id": 531
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Square(x)",
        "FourSidedThing(x)",
        "Shape(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        ""
      ],
      "fol_conc": "∀x (Shape(x) ∧ Square(x))",
      "perplexity": [
        2.075451135635376,
        1.1886869668960571
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Square(x)",
        "Foursided(x)",
        "Shape(x)"
      ],
      "fol_consts": [
        "square",
        "shape"
      ],
      "fol_rules": [
        "∀x (Square(x) → Foursided(x))",
        "∀x (Foursided(x) → Shape(x))",
        "(Square(x) ∧ Shape(x))"
      ],
      "fol_conc": "All(squares)",
      "perplexity": 2.0726664066314697,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hasSides(x)",
        "isShape(x)"
      ],
      "fol_consts": [
        "square",
        "shape"
      ],
      "fol_rules": [
        "∀x (hasSides(x) → isShape(x))",
        "∃x (hasSides(x) ∧ isShape(x))"
      ],
      "fol_conc": "∀x (isShape(x) ∧ hasSides(x))",
      "perplexity": 1.4714155197143555,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 532
  },
  {
    "id": 182,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is a grumpy person.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → AnimalLover(x))",
        "OwnsPet(tom)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": [
        1.065252661705017,
        1.0116082429885864
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "Animallover(x)",
        "Owns(x, y)",
        "Pet(y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, animal))",
        "∀x (Animallover(x) → Nice(x, animal))",
        "∀x (Owns(x, y) → Animallover(x))",
        "Owns(tom, pet)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.2196440696716309,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "NiceTo(x, y)",
        "MeanTo(x, y)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom",
        "animals"
      ],
      "fol_rules": [
        "∀x (NiceTo(x, animals) → ¬MeanTo(x, animals))",
        "∃x (Grumpy(x) ∧ MeanTo(x, animals))",
        "∀x (AnimalLover(x) → NiceTo(x, animals))",
        "OwnsPet(x) → AnimalLover(x)",
        "OwnsPet(tom)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.0964219570159912,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-9b-it.json",
    "annotator_id": 533
  },
  {
    "id": 197,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi barks and is a dog.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Terricolous(x)",
        "HasLegs(x)",
        "Jumps(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → Animal(x) ∧ Barks(x))",
        "∀x (Animal(x) ∧ Jumps(x) → Likes(jane, x))",
        "∀x (Animal(x) ∧ HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬Jumps(kiki) ∧ ¬HasLegs(kiki) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "Barks(kiki) ∧ Dog(kiki)",
      "perplexity": [
        1.0660533905029297,
        1.249355435371399
      ],
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Animal(x)",
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Terricolous(x)",
        "Legs(x)",
        "Jump(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → Animal(x) ∧ Bark(x))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (Legs(x) → Jump(x))",
        "∀x (Terricolous(x) → Legs(x))",
        "¬(Jump(kiki) ∧ Legs(kiki)) → (Terricolous(kiki) ∨ Legs(kiki))"
      ],
      "fol_conc": "Bark(kiki) ∧ Dog(kiki)",
      "perplexity": 1.1493972539901733,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬(Like(jane, x)))",
        "(Dog(y)) ⊕ ∀y ((Animal(y) ∧ Bark(y)) → Dog(y))",
        "¬(Like(jane, y)) → ∃y (Animal(y) ∧ Bark(y) ∧ Like(jane, y)) → ∀x (Bark(x) → ¬Like(jane, x))",
        "(∀x (Terricolous(x) ⊕ Animal(x))) ∧ (∀x ((Animal(x) ∧ Bark(x)) ∨ Terricolous(x)))"
      ],
      "fol_conc": "Dog(kiki) ∧ Bark(kiki)",
      "perplexity": 2.3974010944366455,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_llama-3.1-8b-it.json",
    "annotator_id": 534
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Simple Language Toolkit (ANACRI), epic!],"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 535
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "3.5,14",
        "6.8",
        "8.9"
      ],
      "fol_consts": [
        "4.2,5,7",
        "2.0",
        "6.2"
      ],
      "fol_rules": [
        "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct.",
        " "
      ],
      "fol_conc": "Coudert's denrntriezantrye, oteerstin nyeauleikaktisnneoceliberti, iqid viaeglouue to meeaibomntye lnguikakliuereikaktnixten, eçioctin teoiktitiksigtiange.",
      "perplexity": [
        7.040337085723877,
        15.77748966217041
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct."
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "dredly(z)"
      ],
      "fol_consts": [
        "_ (when torn from coc, it will be tasty), ",
        ".join([c["
      ],
      "fol_rules": [
        "dredly(_ (when torn from coc, it will be tasty), )"
      ],
      "fol_conc": "((((dredly(z)) ∧ ¬((dredly(v))))))",
      "perplexity": 36.158042907714844,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "dredly(_ (when torn from coc, it will be tasty), )"
    },
    "source_file": "FOLIO_dev_ministral-3b-it.json",
    "annotator_id": 536
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Sad(x)",
        "Happy(e)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀e ∀x (Sad(e) ∧ Event(x)) ∨ ∃x (∃y ∈ e: Sad(y))]}, {",
        "fol_conc",
        "}"
      ],
      "fol_conc": "All events are sad.",
      "perplexity": [
        2.4045958518981934,
        8.124675750732422
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀e ∀x (Sad(e) ∧ Event(x)) ∨ ∃x (∃y ∈ e: Sad(y))]}, {"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "event"
      ],
      "fol_rules": [
        "∀x (Event(x) → Happy(x))",
        "(Atleast(x, event1)) ∨ ((Atleast(x, event2)) ∧ (∃y (Event(y))))"
      ],
      "fol_conc": "All(event) ⊕ None(sad)",
      "perplexity": 4.139740467071533,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Event/1, Event/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Event/1, Event/0"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Event(x)",
        "Happy(x)",
        "Sad(x)"
      ],
      "fol_consts": [
        "happy",
        "sad"
      ],
      "fol_rules": [
        "∀x (Event(x) → Happy(x))",
        "(∃x ∃y ∃z (Event(y, z) ∧ Event(z, y))) ∨ ∀x (Event(x) ∨ Sad(x))",
        "(Sad(r) ⊕ Happy(r)) → ¬(Happy(r) ∨ Sad(r))"
      ],
      "fol_conc": "¬Sad(r)",
      "perplexity": 2.8914854526519775,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Event/2, Event/1.\n\n\nFatal error:  The following symbols are used with multiple arities: Event/2, Event/1"
    },
    "source_file": "FOLIO_dev_llama-3.2-1b-it.json",
    "annotator_id": 537
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jump(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Bark(x)))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (HasLegs(x) → Jump(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬(Jump(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Bark(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": [
        1.0664280652999878,
        1.013669490814209
      ],
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Haslegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (Haslegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → Haslegs(x))",
        "¬(Jumps(kiki) ∨ Haslegs(kiki)) → (Terricolous(kiki) ∨ Haslegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ∧ ¬Dog(kiki)",
      "perplexity": 1.095430850982666,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "(¬Jumps(kiki) ∧ ¬HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": 1.0745941400527954,
      "answer": "A",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-27b-it.json",
    "annotator_id": 538
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Show(x, y)",
        "rose_given(x, y, z)"
      ],
      "fol_consts": [
        "BreakingBad",
        "Rose",
        "Monday",
        "8pm",
        "Bachelor"
      ],
      "fol_rules": [
        "Show(x, y) → rose_given(y, x)",
        "BreakingBad → Show(x, BreakingBad)"
      ],
      "fol_conc": "BreakingBad",
      "perplexity": [
        3.4864635467529297,
        1.7282049655914307
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "BreakingBad → Show(x, BreakingBad)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Givenout(x, y)",
        "On(x, y)",
        "Portrayslivesofrealpeople(y)",
        "Realitytvshow(y)"
      ],
      "fol_consts": [
        "breakingbad",
        "monday",
        "eightpm"
      ],
      "fol_rules": [
        "∃x (Monday(day) ∧ Eightpm(time)) → Givenout(rose, tv)"
      ],
      "fol_conc": "Givenout(rose, tv)",
      "perplexity": 2.4597065448760986,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "IsRealityShow(x)",
        "IsRealityShow(x)",
        "IsRealityShow(x)"
      ],
      "fol_consts": [
        "BreakingBad",
        "MondayAt8pm"
      ],
      "fol_rules": [
        "∀x (IsRealityShow(x)) → (IsRealityShow(x) ∧ IsRealityShow(x))",
        "∀x (IsRealityShow(x) ∧ IsRealityShow(x))",
        "∃x (IsRealityShow(x) ∧ IsRealityShow(BreakingBad))"
      ],
      "fol_conc": "IsRealityShow(BreakingBad)",
      "perplexity": 2.8895180225372314,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "source_file": "FOLIO_dev_gemma-2-2b-it.json",
    "annotator_id": 539
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Owns(x)",
        "WorksRegularlyAtHome(x)",
        "HasImpressiveOffice(x)",
        "SpendsFreeTimeTidyingOrganizing(x, y)",
        "VisitsStore(x)",
        "GoesToBedLateWakesUpEarly(x, d)",
        "Visit(z,x) ∧ Store(y)"
      ],
      "fol_consts": [
        "remy",
        "x"
      ],
      "fol_rules": [
        "∀x ((Owns(x) → WorksRegularlyAtHome(x)) ∧ WorksRegularlyAtHome(x))",
        "∀x (HasImpressiveOffice(x) → Owns(x))",
        "∀x ((WorksRegularlyAtHome(x)) → (∃y SpendsFreeTimeTidyingOrganizing(remy, y) ∨ (¬SpendsFreeTimeTiddyingOrganising(remy,x)))) ",
        "∀x ((VisitsStore(x)) → (∃z Visit(z, remy) ∧ Store(y)))",
        "(∀x SpendsFreeTimeTidyingOrganizing(remy,x) ⊕ ∀d GoesToBedLateWakesUpEarly(remy,d))  → ¬∃d GoesToBedLateWakesUpEarly(remy,d)",
        "(VisitsStore(x) ⊕ (∀x SpendsFreeTimeTidyingOrganising(rmy, x)))→ ∃z Visit(z,remy)]",
        "∃y (Visit(y, remy) ∧ Store(y))"
      ],
      "fol_conc": "∃y (Visit(y,remy) ∧ Store(x))",
      "perplexity": [
        1.9254732131958008,
        1.492354393005371
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "(∀x SpendsFreeTimeTidyingOrganizing(remy,x) ⊕ ∀d GoesToBedLateWakesUpEarly(remy,d))  → ¬∃d GoesToBedLateWakesUpEarly(remy,d)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Owns(x, y)",
        "Works(x)",
        "Often(x)",
        "Atx(y)"
      ],
      "fol_consts": [
        "rema",
        "home",
        "office",
        "noon"
      ],
      "fol_rules": [
        "(Owns(rema, home) → (Works(rema) ∧ Often(rema)))",
        "(∀x (Owns(x, office) → Works(x)) ∧ Owns(rema, home))",
        "(∀x (Works(x) ∧ Often(x) → Tidies(x, rema)))",
        "(∀x (Works(x) ∧ Often(x) → Visits(x, office)))",
        "(Tidies(rafa) ∧ Wakeup(rafa) ∧ Sleeps(rafa) ∧ Wakesafter(noon, rafa)) → ((Owns(rema, home) ∧ Tidies(rrema, rema)) ∨ ¬(Sleeps(rafa) ∧ Wakesafter(noon, rafa)))",
        "((Tidies(rafa) ∧ Wakeup(rafa) ∧ Sleeps(rafa) ∧ Wakesafter(noon, rafa)) ⊕ (Owns(rema, home) ∧ Tidies(rrema, rema))) ∨ ((Sleeps(rafa) ∧ Wakesafter(noon, rafa)) ⊕ (Tidies(rafa) ∧ Wakeup(rafa)))",
        "Visits(rema, office)"
      ],
      "fol_conc": "Visits(rema, office)",
      "perplexity": 1.7466888427734375,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tidies/1, Tidies/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Tidies/1, Tidies/2"
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Owns(x, y)",
        "WorkRegularlyAtHome(y)",
        "ImpressesOffice(b)",
        "Owns(bigmonitorxbigmonitoryy)",
        "ImpressesOffice(z)"
      ],
      "fol_consts": [
        "samy",
        "rymemy"
      ],
      "fol_rules": [
        "(Owns(x, y) → (WorkRegularlyAtHome(y)) ∧ WorkRegularlyAtHome(atmyy))",
        "(∀x ((Owns(bigmonitorzbigmonitormonitorsbanyyzrzymonyzy))) ∨ (∃c (ImpressesOffice(c))))",
        "((Owns(x, y) → (WorkRegularlyAtHome(y))) ∧ WorkRegularlyAtHome(atmyy)) → ImpressesOffice(z)",
        "(ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy) ∧ Owns(bigmonitorx, atymyy))",
        "((Owns(x, y) ∧ WorkRegularlyAtHome(y)) → (WorkRegularlyAtHome(zatmyy))) ⊕ ((ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy))",
        "(Owns(x, y) ∧ WorkRegularlyAtHome(y) → ∃b (ImpressesOffice(zatmyy))) ⊕ (∀c ((ImpressesOffice(canyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy)))",
        "(∃d (((Owns(x, y) ∧ WorkRegularlyAtHome(y)))) → (WorkRegularlyAtHome(zatmyy))) ⊕ ((ImpressesOffice(banyyzbigmonitormonitorszryzymonyzy)) ∧ Owns(bigmonitorxatyymyy))",
        "Owns(samy, bigmnoitor)"
      ],
      "fol_conc": "(Owns(rimy, atmy) ⊕ Owns(rimemnybanyyzbigmonitormonitorsryzymonyzy))",
      "perplexity": 5.665857315063477,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Owns/1, Owns/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Owns/1, Owns/2"
    },
    "source_file": "FOLIO_dev_llama-3.2-3b-it.json",
    "annotator_id": 540
  }
]