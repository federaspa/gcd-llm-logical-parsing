[
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"SchoolTalentShow(x)\", \"AttendSchoolEvents(x)\", \"BeInactiveCommunityMember(y)\", \"ChaperoneHighSchoolDance(z)\", \"StudentAtSchool(u)\", \"YoungChildOrTeenager\"], \"fol_consts\": [\"Bonnie\", \"People\", \"Students\"], \"fol_rules\": [\"\"], \"fol_conc\": \" Bonnie performs in SchoolTalentShow(Bonnie)\"}\n",
      "perplexity": 2.0283656120300293
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"SchoolTalentShow(x)\", \"AttendSchoolEvents(y)\",  \"EngageWithSchoolEvents(z)\", \"ChaperoneHighSchoolDance(w)\", \"StudentAtSchool(a)\" , \"InactiveAndDisinterestedCommunityMember(b)\", \"YoungChildOrTeenagerWhoWishesToFurtherTheirAcademicCareerAndEducationalOpportunities(c)\"],\n\"fol_consts\": [\"Bonnie\",], \n\"fol_rules\": [\n  \"(SchoolTalentShow(x)) → (AttendSchoolEvents(x) ∧ EngageWithSchoolEvents(x)),\", \n  \"¬(StudentAtSchool(a)) ∨ (InactiveAndDisinterestedCommunityMember(b))\",\n  \"(ChaperoneHighSchoolDance(w)) → ¬(StudentAtSchool(c))\", \n  \"AllStudentsAreActiveMembersOfTheirCommunities\",\n  \"AllYoungChildrenAttendSchool, \" , \n ],\n\"fol_conc\": \"(YoungChildOrTeenagerWhoWishesToFurtherTheirAcademicCareerAndEducationalOpportunities(c) ∧ ChaperoneHighSchoolDance(w)) → (StudentAtSchool(a) ∨ InactiveAndDisinterestedCommunityMember(b)), \" \n}\n```",
      "perplexity": 1.6730481386184692
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"SchoolTalentShow(x)\", \"AttendSchoolEvents(x)\", \"ActiveCommunityMember(x)\", \"ChaperoneHighSchoolDance(x)\", \"Student(x)\", \"YoungChild(x)\", \"Teenager(x)\"],\"fol_consts\": [\"Bonnie\", \"school\"],\"fol_rules\": [\n  [\"SchoolTalentShow(x) ∧ AttendSchoolEvents(y) → (ActiveCommunityMember(x))\", \"AttendSchoolEvents(x)\", \"ActiveCommunityMember(x)\"],\n  [\"PersonNotStudent(x) ∨ SchoolTalentShow(x)], \"\n, [\"ChaperoneHighSchoolDance(x) ∧ NotStudent(x)]\", \"NotStudent(x)\", \"ChaperoneHighSchoolDance(x)\" ],\n  [\"AllPeopleInactiveAndDisinterestedCommunityMembers ChaperoneHighSchoolDance\"],\n  [\"YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer (y) → Student(y)\", \"AttendSchoolEvents\" , \"ActiveCommunityMember\", 1, \"Student\"]\n],\n\"fol_conc\"\n   ]}",
      "perplexity": 2.487992525100708
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"SchoolTalentShow\", \"AttendEvent\", \"EngageWithEvents\", \"InactiveAndDisinterestedMemberOfCommunity\", \"ChaperoneHighSchoolDance\", \"StudentAtSchool\"],\n\"fol_consts\": [\"Bonnie\", \"People\"],\n\"fol_rules\": [\n  \"∀x ( SchoolTalentShow(x) ∧ AttendEvent(x)) → (EngageWithEvents(x)) \",\n  \"¬ (SchoolTalentShow(x)) ∨ ¬ (InactiveAndDisinterestedMemberOfCommunity(x))\",\n  \"If ChaperoneHighSchoolDance(x), then not StudentAtSchool(x)\",\n  \"∀x ( InactiveAndDisinterestedMemberOfCommunity(x) → ChaperoneHighSchoolDance(x)) \",\n  \"All YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersandEducationalOpportunities are Students who attend school\", \n],\n\"fol_conc\": \"If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\"  \n}\n\n``` \n\n\n",
      "perplexity": 1.5436580181121826
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"SchoolTalentShow\", \"AttendEvent\", \"EngagedWithEvents\", \"InactiveCommunityMember\", \"ChaperoneDance\", \"Student\"], \",\"\n  \t  : [\"YoungChild\", \"Teenager\"] , \"fol_consts\": [], \"fol_rules\":[[\"If P(x) then Q(x)\", \"P(x)\" ]],\"fol_conc\":[\"Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often and is a young child or teenager who wishes to further her academic career and educational opportunities.and an inactive and disinterested member of the community.\"] }\n",
      "perplexity": 3.0656015872955322
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Company(x)\", \"Employee(x)\", \"Meeting(x, y)\", \"Lunch(x, y)\", \"RemotelyFromHome(x)\", \"InCountry(x)\" ],\n\"fol_consts\": [ \"James\", \"Customer\" ], \n\"fol_rules\": [  \"∀ x. Employee(x) → (Company(x) and Meeting(x, Customer))\", \"∀ x. Lunch(x, y) ∧ Employee(x) → Meeting(x, Customer)\", \"∃ x. RemotelyFromHome(x)\", \"InCountry(y) → (RemotelyFromHome(y))\", \"(Manager(x) & Company(x))\" , \"¬(Manager(x)  & AppearsInCompanyToday(x))\",  \n], \n\"fol_conc\": [ \"James has lunch in the company.\" ]\n}\n```",
      "perplexity": 1.7573524713516235
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Employee\", \"ScheduleMeetingWithCustomer\", \"HasLunchInCompany\", \"AtHome\", \"WorkRemotelyFromHome\",\"IsManager\"],\n\"fol_consts\": [\"James\"],\n\"fol_rules\": [\n    \"∀x (Employee(x) → ScheduleMeetingWithCustomer(x)),\", 0, \"∀x (ScheduleMeetingWithCustomer(x) → HasLunchInCompany(x))\",\n    \"∀x (HasLunchInCompany(x) → Employee(x)),\",\n    \"∃x (AtHome(x) ∧ IsManager(x) )\",\n    \"¬ (WorkRemotelyFromHome(x) ∨ AtHome(x)),\", 0, \"If x is in other countries then WorkRemotelyFromHome(x)\", 0,\"∀x (IsManager(x) → ¬WorkRemotelyFromHome(x))\" ],\n  \"fol_conc\": \"James has lunch in the company.\"}\n",
      "perplexity": 1.9693032503128052
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CompanyToday(x)\", \"ScheduleMeetingWithCustomer(x, y)\", \"HasLunchAtHome(x)\", \"WorkRemotelyFromHome(x)\", \"InOtherCountries(x)\"], \"fol_consts\": [\"james\"], \"fol_rules\": [\n  \"∀x (ScheduleMeetingWithCustomer(x, customer) → CompanyToday(x))\", \"∀x (HasLunchAtCompany(x) → ScheduleMeetingWithCustomer(x, customer))\", \"∀x (WorkRemotelyFromHome(x) ↔ HasLunchAtHome(x))\",\n  \"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))\", \"(Manager(x) ∧ CompanyToday(x)) → ¬(WorkRemotelyFromHome(x))\", \"(¬Manager(x) ∨ CompanyToday(x) ∧ Not(appears)) → HasLunchAtCompany(x)\"\n], \"fol_conc\": \"JamesHasLunchAtCompany(james)\"}",
      "perplexity": 1.885824203491211
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Employee\", \"SchedulesMeeting\", \"AppearsInCompany\", \"HasLunch\",  \"WorksRemotelyFromHome\"], \n\"fol_consts\": [\"James\"],\n\"fol_rules\": [\n    \"∀x (Employee(x) → SchedulesMeeting(x, Customer))\",\n    \"∀x (SchedulesMeeting(x, Customer) → AppearsInCompany(x))\",\n    \"∀x (HasLunch(x) ∨ HasLunchAtHome(x))\",\n    \"If HasLunchAtHome(x), Then WorksRemotelyFromHome(x)\",\n    \"∀x (Employee(x) ∧ InOtherCountries(x) → WorksRemotelyFromHome(x))\",\n    \"¬Manager(x) ⟹ DoesNotWorkRemotelyFromHome(x)\",  \n    \"James ∈ Employees\" , \"Either Manager(James) ∨ ¬AppearsInCompany(James)\"   \n],\n\"fol_conc\": \"Does not have lunch in the company.\"\n}\n```",
      "perplexity": 1.4260188341140747
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Company\", \"Employee\", \"Meeting\", \"Customer\", \"Lunch\"],\"fol_consts\": [\"James\",\"Employees\",\"Customers\",\"Managers\"],\"fol_rules\": [\n    \"∀x (Employee(x) → MeetingSchedule(x, Customers)), ∀x (MeetingSchedule(x, Customers) → Company(x)) \",\n    \"∀x (Employee(x) → LunchInCompany(x)),  ∀x (LunchInCompany(x) → MeetingSchedule(x, Customers))\",\n    \"∀x (Employee(x) → HasLunchAtHome(x) ∨ HasLunchOut), ∀x (HasLunchOut(x) → RemoteWorkFromHome(x))\",\n    \"∀x (RemoteWorkFromHome(x) → InOtherCountry(x)), ∀x (Not Manager(x) → Not RemoteWorkFromHome(x)) \",\n    \"¬Manager(James) ∨ (Employee(James) → CompanyToday(James) )\",\n  \" ¬LunchInCompany(James)\" ], \"fol_conc\": \"¬LunchInCompany(James)\"}\n",
      "perplexity": 1.6954503059387207
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"ScheduleMeeting\", \"AppearInCompany\", \"HasLunch\", \"WorksRemotelyFromHome\"],\n\"fol_consts\": [\"James\",\"Manager\",\"Employee\",\"Customer\"], \n\"fol_rules\": [ \n    \"∀x ( ScheduleMeeting(x, Customer) → AppearInCompany(x)),\", \n   \"∀x ( HasLunch(x)  → ScheduleMeeting(x, Customer) ),\",\n   \"∀x ( WorksRemotelyFromHome(x) ∨ HasLunch(x))\",\n    \"∀x ( NotWorksRemotelyFromHome(x) → EitherHasLunchAtHomeOrNot),\", \n     \"∀x ( IsManager(x) →  WorksRemotelyFromHome(x) )\", \n   \"∀x ( Employee(x) → AppearsInCompany(x)),\", \n    \"If NotIsManager(x) and WorksRemotelyFromHome(x)\",\n],\n\"fol_conc\": \" If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.\" \n}\n```",
      "perplexity": 1.654621958732605
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Employee\", \"Customer\", \"LunchAtHome\", \"RemoteWorkFromHome\"], \"fol_consts\": [\"James\", \"Manager\"], \"fol_rules\": [], \"fol_conc\": \" ∀ x ( Employee(x) → CustomerMeetingWithX )  ∧ ∀ x (Employee(x) and LunchAtCompany(x))  → RemoteWorkFromHome(x), ∃ y (Employee(y) and Manager(y) and CompanyToday(y)) ↔  RemoteWorkFromHome(y)}\" }\n",
      "perplexity": 2.4366865158081055
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "There is an animal.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Animal\", \"InfectiousDisease\", \"Mammal\", \"Virus\"], \n\"fol_consts\": [\"Monkeypox\",\"Human\",\"Animals\"],\n\"fol_rules\": [], \n\"fol_conc\": \"∃x (Animal(x)∧ ∀y (IsMammal(y) → Virus(y)))\"\n}\n```",
      "perplexity": 1.715179681777954
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Animal\", \"InfectiousDisease\", \"Mammal\"],\n\"fol_consts\": [\"MonkeypoxVirus\",\"Human\",\"Animals\"], \",\"\n  :[\"monkeypox\", \"fever\", \"headache\", \"muscle pains\", \"tiredness\"] ,\n\"fol_rules\": [\n    \"∀x (Animal(x) → Mammal(x))\",\n    \"∀y (InfectiousDisease(y) → Animal(y)\", 0], \",\"\n  :[\"∃x (Animal(x) and InfectiousDisease(x)), \" ] , \"]fol_conc\": [\"\"] }\n",
      "perplexity": 4.044379711151123
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "No one gets flu.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Monkeypox\", \"InfectiousDisease\", \"occurIn\", \"isMammal\", \"isAnimal\", \"hasSymptoms\", \"feelTired\",  \"getFlu\"], \n\"fol_consts\": [\"monkeypoxVirus\",\"human\", \"animal\"], \n\"fol_rules\": [],\n\"fol_conc\": \"∀x(not (Monkeypox(x) and getFlu(x)) )\"\n}\n\n```",
      "perplexity": 1.7489665746688843
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Monkeypox\", \"InfectiousDisease\"], \"fol_consts\": [\"monkeypox virus\",\"human\"], \"fol_rules\": [\n  \"∀x (Animal(x) → Mammal(x))\", \", \",\n  \"∀x (Mammal(x) → InfectedBy(x, monkeypox virus))\", \", \",\n  \"∃y (InfectedBy(y, human)),\", \",\"\n], \"fol_conc\": \"¬ExistentialFlu\"}",
      "perplexity": 3.071767568588257
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MonkeypoxDisease(x)\", \"Virus(y)\", \"IsAnimal(z)\", \"Mammal(w)\", \"HasSymptoms(x, y)\"], \"fol_consts\": [\"monkeypox\", \"virus\", \"human\", \"mammal\"], \"fol_rules\": [\n  \"∀x (MonkeypoxDisease(x) → IsAnimal(x))\", \"∀x (Virus(y) → HasSymptoms(x, y))\", \"∀w (Mammal(w) → IsAnimal(w))\", \"(Humans(u) → Mammal(u))\", \"(NotFlu(v) ∧ NotMonkeypox(i) → NoOneGetsFlu(j))\"\n], \"fol_conc\": \"NoOneGetsFlu(j)\" }",
      "perplexity": 2.284806251525879
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Monkeypox\", \"InfectiousDisease\", \"causedBy\", \"occursIn\", \"Mammal\", \"Animal\", \"symptom\"],\n\"fol_consts\": [\"monkeypox virus\", \"humans\", \"mammals\", \"animals\", \"fever\", \"headache\",\"muscle pains\", \"tiredness\", \"glu\", \"coughing\"], \n\"fol_rules\": [\n  \"(Monkeypox is InfectiousDisease) → (occursIn:Animal)\",\n  \"(Humans are Mammal) → (Human is Animal)\",\n  \"(Animals are Animal) → true\",\n  \"(Symptom(x, y)) & (y = fever or headache or muscle pains or tiredness) ∧ (symptom(x, glu)) → SymptonsOfMonkeypox(x)\"\n],\n\"fol_conc\": \"symptoms of Monkeypox include coughing.\"\n}\n```",
      "perplexity": 1.8299601078033447
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Monkeypox\", \"InfectiousDisease\", \"CauseByVirus\"],\"fol_consts\":[\"Monkeypox\",\"virus\", \"Humans\"],\"fol_rules\":[\n    \"∀x(Monkeypox ∧ CauseByVirus →  ∃y (Animal(y) and Mammal(y)) ),\", \"),\", \"),], \" ],\"fol_conc\": [\"Symptons of Monkeypox include coughing.\"]}",
      "perplexity": 4.780364036560059
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MonkeypoxVirusInfectiousDisease(x)\", \"MonkeypoxInHumans(x)\", \"MammalIsAnimal(x)\", \"HasSymptoms(y, z)\", \"FeelTiredWhenGlu(z)\", \"HumanIsMammals(x)\"], \"fol_consts\": [\"monkeypox\", \"virus\", \"humans\", \"mammals\", \"animal\", \"fever\", \"headache\", \"musclepain\", \"tiredness\", \"coughing\"], \"fol_rules\": [\n\"∀x (MonkeypoxVirusInfectiousDisease(x) ∧ MammalIsAnimal(x)) → ∃y (HasSymptoms(y, x))\",\n\"∀x (HumanIsMammals(x) ∧ MonkeypoxInHumans(x)) → ∃z (FeelTiredWhenGlu(z))\",\n\"∀x (MammalIsAnimal(x) ∧ HasSymptoms(x, y)) → ∃z (SymptonsOfMonkeypox(y, z))\" ], \"fol_conc\": \"∃z (SymptonsOfMonkeypox(z, x))\"}",
      "perplexity": 1.6201492547988892
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"WildTurkey\", \"isAn\"], \n\"fol_consts\": [\"Tom\"],\n\"fol_rules\": [\n    \"∀x (WildTurkey(x) → isAn(x, Tom))\",\n    \"¬(Eastern wild turkey(x)) ∧ ¬(Osceola wild turkey(x)) ∨ ¬(Gould's wild turkey(x))  ∧ ¬(Merriam’s wild turkey(x)) ∧ ¬(Rio Grande wild turkey(x)) → isAn(Tom, Ocellated wild turkey)\"\n],\n\"fol_conc\": \"Tom is an Ocellated wild turkey.\"\n}\n```",
      "perplexity": 1.380534291267395
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"WildTurkey(x)\", \"IsEasternWildTurkey(x)\", \"IsOsceolaWildTurkey(x)\", \"IsGouldsWildTurkey(x)\", \"IsMerriamsWildTurkey(x)\", \"IsRioGrandeWildTurkey(x)\", \"IsOcellatedWildTurkey(x)\"], \"fol_consts\": [\"tom\", \"eastern\", \"osceola\", \"goulds\",\"merriam\", \"rio\", \"ocellated\"],  \"fol_rules\": [\n    \"∀x (WildTurkey(x) → IsWildTurkey(x))\", \"TomIsNotEasternWildTurkey(tom)\", \"TomIsNotOsceolaWildTurkey(tom)\", \"TomIsNotGouldsOrMerriamsOrRioWildTurkey(tom)\", \"∃x (IsWildTurkey(x) ∧ WildTurkey(x) → TomIsWildTurkey(x))\",\n    \"∀x (IsOcellatedWildTurkey(x) → IsWildTurkey(x))\"],  \"fol_conc\": \"TomIsAnOcellatedWildTurkey(tom)\"}",
      "perplexity": 1.7347525358200073
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"WildTurkey\", \"isAn\"], \n\"fol_consts\": [\"Tom\"], \n\"fol_rules\": [], \n\"fol_conc\": []\n}\n```",
      "perplexity": 1.418713092803955
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"WildTurkey\", \"is\"], \"fol_consts\": [\"Tom\"], \"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 1.9289216995239258
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"WildTurkey(x)\", \"EasternWildTurkey(x)\", \"OsceolaWildTurkey(x)\", \"GouldsWildTurkey(x)\", \"MerriamsWildTurkey(x)\", \"RioGrandeWildTurkey(x)\", \"OcellatedWildTurkey(x)\", \"Tom(t)\"], \"fol_consts\": [\"a\", \"b\", \"c\",\"d\",\"e\",\"f\",\"g\", \"h\"], \"fol_rules\": [\n    \"∀x (WildTurkey(x) → EasternWildTurkey(x))\", \"∀x (WildTurkey(x) → OsceolaWildTurkey(x))\", \"(Tom(t) ∧ ¬EasternWildTurkey(t))\", \"(Tom(t) ∧ ¬OsceolaWildTurkey(t))\", \"(¬(GouldsWildTurkey(t) ∨ MerriamWildTurkey(t) ∨ RioGrandeWildTurkey(t)))\"\n], \"fol_conc\": \"Tom(t)\"}",
      "perplexity": 1.695207953453064
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isWildTurkey\", \"isEasternWildTurkey\", \"isOsceolaWildTurkey\", \"isGouldsWildTurkey\", \"isMerriamsWildTurkey\", \"isRioGrandeWildTurkey\", \"isOcellatedWildTurkey\"],\n\"fol_consts\": [\"Tom\",\"Joey\"], \n\"fol_rules\": [\n    \"∀x (isWildTurkey(x) → isWildTurkey(x))\",  \n    \"∀x (isEasternWildTurkey(x) ∨ isOsceolaWildTurkey(x) ∨ isGouldsWildTurkey(x) ∨ isMerriamsWildTurkey(x) ∨ isRioGrandeWildTurkey(x) ∨ isOcellatedWildTurkey(x))\",\n    \"¬ (isEasternWildTurkey(Tom) ∧ ¬ isOsceolaWildTurkey(Tom))\",  \n    \"¬ (isGouldsWildTurkey(Tom) ∨ isMerriamsWildTurkey(Tom) ∨ isRioGrandeWildTurkey(Tom)),\",   \n    \"∀x (isWildTurkey(x) → x ∈ wildTurkeys)\",\n    \"∀x (isWildTurkey(Joey) ∧ Joey ∈ wildTurkeys)\"  \n],\n\"fol_conc\": \"Joey is a wild turkey.\" \n}\n```",
      "perplexity": 1.2363083362579346
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"WildTurkey\", \"is\"],\n\"fol_consts\": [\"Tom\", \"Joey\", \"Eastern wild turkey\", \"Osceola wild turkey\", 80, \"Gould’s wild turkey\", \"Merriam's wild turkey\", \"Rio Grande wild turkey\", \"Ocellated wild turkey\"],\n\"fol_rules\": [\n    \"∀x (WildTurkey(x) → is a wild turkey)\",\n    \"¬(is an Eastern Wild Turkey)(Tom)\", 80,\n    \"¬(is an Osceola Wild Turkey)(Tom)\", 80,\n    \"¬((is a Gould’s wild turkey or is a Merriam's wild turkey or is a Rio Grande wild turkey)) (Tom) \",\n    \"∀x (WildTurkey(x) → is a wild turkey)\" ],\n\"fol_conc\": \"Joey is a wild turkey\"}\n",
      "perplexity": 1.9622758626937866
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"WildTurkey(x)\", \"IsTom(y)\"], \"fol_consts\": [\"tom\",\"joey\", \"eastern\", \"osceola\", \"goulds\", \"merriam\", \"rio\", \"ocellated\"], \"fol_rules\": [\n  \"∀x (WildTurkey(x) → IsTom(x))\", \"¬(IsTom(x)) ∧ WildTurkey(x)\", \"¬(IsTom(x)) ∧ ¬(WildTurkey(x)) ∧ (Goulds(x))\", \"(IsTom(y)) ∧ (WildTurkey(y)) ∧ (Not(tom) ∨ Not(osceola) ∨ Not(merriam) ∨ Not(rio) ∨ Not(ocellated))\"\n], \"fol_conc\": \"Joey(x)\"}",
      "perplexity": 2.161106824874878
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GameCompany\", \"GamesInTop10List\", \"SoldMoreThanOneMillionCopies\", \"IsInTheTopTen\"],\n\"fol_consts\": [\"Japanesecompany\", \"Zelda\", \"LegendOfZelda\", \"Top10list\",\"one million copies\"],\n\"fol_rules\": [\n    \"∀x (GameCompany(x) ∧ GameInTop10List(x)) →  ∃y (SoldMoreThanOneMillionCopies(y) ∧ IsInTheTopTen(y)) \",\n    \"∀x (IsinthetopTen(x) ↔ SoldMoreThanOneMillionCopies(x)\") ,\n],\n\"fol_conc\": \"The Legend of Zelda is in the Top 10 list.\"\n}\n```",
      "perplexity": 1.7493077516555786
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Game\", \"Company\", \"Sold\", \"Top10\"],\"fol_consts\": [\"Legend of Zelda\", \"Nintendo\", \"Sony\", \"Microsoft\", \"Games\",\"Japan\"],\"fol_rules\": [\n    \"∀x (Game(x) → Company(x)), ∀y (Company(y) → Game(y))\", 2,\n    \"Top10 = {G | G ∈ Games and Top10}\",\n    \"If x Sold ≥ 1000000 then x in Top10 List\", \"The Legend of Zelda sold more than one million copies.\", 4,\n    \"∀x (Game(x) → Company(x))\" , 5\n], \"fol_conc\": [\"The Legend of Zelda is in the Top 10 list.\"]}\n",
      "perplexity": 2.339318037033081
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GameCompany(x)\", \"SoldMoreThanOneMillionCopies(x, y)\", \"InTop10List(y)\"], \"fol_consts\": [\"the\", \"legend\", \"of\", \"zelda\", \"top\", \"ten\", \"one\"], \"fol_rules\": [\n    \"∀x (GameCompany(x) → ∃y (SoldMoreThanOneMillionCopies(x, y)) ∧ InTop10List(y))\", \"∀x (InTop10List(x) → ∀y (GameCompany(y) → GameCompany(x)))\"\n], \"fol_conc\": \"TheLegendOfZeldaIsInTopTenList(thelegendofzelda)\" }",
      "perplexity": 2.2880232334136963
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GameCompany\", \"Top10List\", \"SoldMoreThanOneMillionCopies\", \"MadeBy\"],\n\"fol_consts\": [\"LegendOfZelda\",\"FIFA22\",\"JapaneseVideoGameCompany\", \"Top10List\"],\n\"fol_rules\": [\n  \"∀x (GameCompany(x) ∧ Top10List(x)) → x ∈ Japaneses Game Company.\",\n  \"∀y (SoldMoreThanOneMillionCopies(y) → y ∈ Top10List(y))\",\n  \"∃x (JapaneseVideoGameCompany(x) ∧ GameCompany(x))\",\n],\n\"fol_conc\": \"FIFA22 is MadeBy a Japanese video game company.\"\n}\n```",
      "perplexity": 1.537196159362793
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Game\", \"MadeBy\", \"SoldMoreThanOneMillionCopies\", \"InTop10List\"],\"fol_consts\": [\"LegendOfZelda\",\"FIFA22\",\"Japanese\"],\"fol_rules\": [\n    \"∀x (Game(x) → MadeBy(x, Japanese)),\",\n    \"∃y (Y = Top10List),\", \"],\"\n  \t  ,\"fol_conc\"\n  \t\t ]}\n",
      "perplexity": 4.775452613830566
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Game\", \"JapaneseCompany\", \"Top10List\"], \n\"fol_consts\": [\"LegendOfZelda\",\"The Legend of Zelda\", \"Japanesecompany\", \"OneMillionCopies\"],\n\"fol_rules\": [\n  \"∀x (Game(x) → JapaneseCompany(x))\",\n  \"∀y (Top10List(y) ∧ Game(y) → JapaneseCompany(y))\",\n  \"∀x (Game(x) ∧ OneMillionCopies(x) → Top10List(x))\",\n  \"Game(LegendOfZelda)\",\n],\n\"fol_conc\": \"¬Top10List(The Legend of Zelda)\" \n}\n\n```",
      "perplexity": 1.4336799383163452
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Game\", \"Company\", \"Sold\"],\n\"fol_consts\": [\"Legend of Zelda\",\"Top 10 List\", \"Japanese Game Company\", \"More than one million copies\"],\n\"fol_rules\": [\n    \"∀x (Game(x) →  Company(x))\", 2,\n   \"∀y (Game(y) → Top 10List(y))\", 3,\n   \"∀x (Sold(x, y) →  Top 10 List(y))\", 4,\n    \"Game(Legend of Zelda)\", 5,\n    \"Sold(Legend of Zelda, More than one million copies)\" ,6],\n \"fol_conc\": \"Not in Top 10 list\"}\n",
      "perplexity": 1.958845615386963
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GameCompany(x)\", \"IsInTop10List(y)\", \"CopiesSold(z, y)\"], \"fol_consts\": [\"the\", \"legend\", \"of\", \"zelda\", \"top10\", \"japanese\"], \"fol_rules\": [\n  \"∀x (GameCompany(x) → IsInTop10List(x))\", \"(GamesSoldMoreThanOneMillionCopies(z, y) ∧ IsInTop10List(y)) ∨ (GameCompany(z) ∧ CopiesSold(z, y) ∧ IsInTop10List(z))\"\n], \"fol_conc\": \"¬IsInTheTop10List(legend)\" }",
      "perplexity": 2.370482921600342
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Square\", \"Shape\"],\n\"fol_consts\": [\"s1\", \"s2\", \"shapes\"],\n\"fol_rules\": [\n  \"∀x ( Square(x) → Shape(x) )\", \n  \"∀x ( Square(x) ∧ Shape(x))\" \n],\n\"fol_conc\": \"∀x (Square(x) → Shape(x))\" \n}\n```",
      "perplexity": 1.340050458908081
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Square\", \"Shape\"], \"fol_consts\": [\"Squares\", \"Four-sided\", \"Shapes\"], \"fol_rules\": [], \"fol_conc\": \"∀x (Square(x) → Shape(x))\"} ",
      "perplexity": 1.481961965560913
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Square(x)\", \"FourSided(y)\", \"Shape(z)\"], \"fol_consts\": [\"square\", \"foursided\"], \"fol_rules\": [\n    \"∀x (Square(x) → FourSided(x))\", \"∀x (FourSided(x) → Shape(x))\" ],  \"fol_conc\": \"∀x (Square(x) → Shape(x))\"}",
      "perplexity": 1.8916499614715576
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isCute\", \"exists\", \"isaRabbit\", \"isSquirrel\", \"isSkittish\", \"isStill\"],\n\"fol_consts\": [\"Rock\",\"rabbit\",\"turtle\",\"squirrel\"], \n\"fol_rules\": [],\n\"fol_conc\": []\n}\n```",
      "perplexity": 1.5488184690475464
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Rabbit\", \"Cute\", \"Turtle\", \"Animal\", \"Skittish\"], \",\"\n  : [\"is\", \"exists\", \"is a\"], \",\"\n    : [\"Rounded\", \"City\"] ,\n\"fol_consts\": [[\"rabbit\"], [\"turtle\"], [\"squirrel\"], [\"rock\"]],\n\"fol_rules\": [\n  \"[Rabbit(x) → Cute(x)] ∧ [∃t (Turtle(t)) ] ∧ [Animal(x) → Rabbit(x)∨ Squirrel(x)]\",\n   \"[Skittish(x) → not Still(x)] , [AllSquirrel(x) ⟹ Skitsh(x)], \"\n  , [\"Rock = Still\"]\n],\n\"fol_conc\": [\"Rock is a turtle.\"] } ",
      "perplexity": 3.335158109664917
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Rabbit(x)\", \"Cute(x)\", \"Turtle(x)\", \"Animal(x)\", \"Skittish(x)\", \"Still(x)\"], \"fol_consts\": [\"rock\", \"turtle\"], \"fol_rules\": [\n  \"∀x (Rabbit(x) → Cute(x))\", \"∃x (Turtles(x))\", \"∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))\", \"(Skittish(x) → ¬Still(x))\", \"∀x (Squirrel(x) → Skittish(x))\", \"¬(Rock(x) ∧ Still(x))\"\n], \"fol_conc\": \"Rock(r)\"}",
      "perplexity": 1.7176851034164429
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is not a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Rabbit\", \"Cute\", \"Turtle\", \"Animal\", \"Skittish\", \"Still\"], \n\"fol_consts\": [\"Rock\", \"Squirrel\",  \"Rabbit\"], \n\"fol_rules\": [],\n\"fol_conc\": [] \n}\n```",
      "perplexity": 1.4514349699020386
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Rabbit\", \"Cute\", \"Turtle\", \"Animal\", \"Skittish\"], \"fol_consts\": [\"Rock\", \"Squirrel\"], \"fol_rules\": [\n    \"∀x (Rabbit(x) → Cute(x)),\", 0, 1, 2 ],\n  \"fol_conc\": [\"¬Turtle(Rock)\"] }\n",
      "perplexity": 2.4376041889190674
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Rabbit(x)\", \"Turtle(x)\", \"Animal(x)\", \"Cute(x)\", \"Skittish(x)\"], \"fol_consts\": [\"rock\", \"rabbit\", \"turtle\", \"squirrel\", \"all\"], \"fol_rules\": [\n  \"∀x (Rabbit(x) → Cute(x))\", \"∃x (Turtle(x))\", \"∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))\", \"If(skittish, notstill)\", \"All(squirrel) → Skittish(squirrels)\", \"Rock(notturtle)\"\n], \"fol_conc\": \"Notrock(turtles)\" }",
      "perplexity": 2.2066805362701416
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isCute\", \"exists\", \"isRabbit\", \"isSquirrel\", \"isSkittish\",  \"isStill\"], \n\"fol_consts\": [\"Rock\", \"rabbit\", \"turtle\", \"squirrel\", \"animal\"],\n\"fol_rules\": [],\n\"fol_conc\": \"Rock is a turtle or cute.\"\n}\n```",
      "perplexity": 1.3162626028060913
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Rabbit\", \"Cute\", \"Turtle\", \"Animal\", \"Skittish\"], \",\"\n  :[\"is_rabbit\", \"is_cute\", \"exists\", \"has_animal_type\", \"is_skitsh\"], \",\"\n   :\"Rock is still\" , \"Is_rock_still\"\n  : [\"is_squirrel\"] , \"is_squirrely\"\n    : [ ] , \"\"\n     : [], \"All rabbits are cute. Some turtles exist.\"\n   : [] ,\"\"\n   : [ ], \":\"\n   :[\"Rock is still.\"] , \"Is Rock Still\"\n  : [\"All squirrels are skittish\", \"Squirrels are skittish\"]\n }\n",
      "perplexity": 5.277040958404541
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Rabbit(x)\", \"Cute(x)\", \"Turtles(x)\", \"Animal(x)\", \"Skittish(x)\", \"Still(x)\", \"Squirrel(x)\"], \"fol_consts\": [\"rock\", \"rabbit1\", \"turtle1\", \"squirrel1\"], \"fol_rules\": [\n\"∀x (Rabbit(x) → Cute(x))\", \"(∃y (Turtles(y))) ∧ ¬(∀z (Animal(z) → Skittish(z)))\", \"∀x (Squirrel(x) → Skittish(x))\", \"(Skittish(x) → ¬Still(x))\",\n\"AllSquirrelsAreSkittish(squirrel1)\" , \"RockIsStill(rock)\" ],  \"fol_conc\": \"RockIsCuteOrTurtle(rock)\"}",
      "perplexity": 2.1628854274749756
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Rabbits\", \"Turtles\", \"Animals\", \"Cute\", \"Skittish\"],\n\"fol_consts\": [\"Rock\", \"Rabbit\", \"Squirrel\", \"Turtle\"],\n\"fol_rules\": [\n  \"∀x ( Rabbits(x) → Cute(x) )\", \n  \"∃x ( Turtles(x) )\", \n  \"∀x ( Animals(x) → (Rabbits(x) ∨ Squirrels(x)) )\", \n  \"If (Skittish(x)) then (NotStill(x))\", \n  \"∀x (Squirrels(x) → Skittish(x))\", \n  \"NotStill(Rock)\"\n],\n\"fol_conc\": \"If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\"\n}\n```",
      "perplexity": 1.2110142707824707
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Rabbit\", \"Turtle\", \"Animal\", \"Cute\", \"Skittish\"], \"fol_consts\": [\"Rock\", \"Squirrel\",\"\"], \"fol_rules\": [\n\"∀x (Rabbit(x) → Cute(x)),\\n∀x (∃y Turtle(y)) ∧  ∃z Animal(z) \\n→ ∃w Skittish(w)\\n∀x (Skittish(x) → not still(x))\\n∀x (Squirrels(x) → Skittish(x))\\n\"], \"fol_conc\": \"If Rock is not both Turtle(Rock) and Squirrel(Rock), then Cute(Rock) or Skittish(Rock)\" }\n",
      "perplexity": 1.7861582040786743
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Rabbit(x)\", \"Turtle(x)\", \"Animal(x)\", \"Cute(x)\", \"Skittish(x)\"], \"fol_consts\": [\"rock\", \"rabbit\",\"turtle\", \"squirrel\"], \"fol_rules\": [\n    \"∀x (Rabbit(x) → Cute(x))\", \"∃x (Turtle(x))\", \"∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))\", \"(Skittish(x) → ¬Still(x))\", \"∀x (Squirrel(x) → Skittish(x))\", \"¬RockIsBothTurtleAndSquirrel(rock)\", \"CuteOrSkittish(rock)\"\n],  \"fol_conc\": \"IfRockIsNotBothTurtleAndSquirrel(rock) ∧ CuteOrSkittish(rock)\"}",
      "perplexity": 1.7723546028137207
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Cute\", \"Exist\", \"isRabbit\", \"isSquirrel\", \"Skittish\", \"Still\"],\n\"fol_consts\": [\"Rock\",\"Turtle\", \"Bunny\",  \"Animal\"], \n\"fol_rules\": [\n    \"∀x ( isRabbit(x) → Cute(x)), \", \n    \"∃x ( isSquirrel(x) )\", \n    \"∀x (Skittish(x) → ¬Still(x)),\",\n    \"∀x (isSquirrel(x) → Skittish(x))\",\n    \"Rock = Still\",  \n],\n \"fol_conc\": \"If Rock is Cute and Still, then Rock is a Turtle and Skittish.\" \n}\n```",
      "perplexity": 1.589289665222168
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Cute\", \"Exist\", \"Animal\", \"Skittish\"],\"fol_consts\": [\"Rock\",\"Rabbit\",\"Squirrels\",\"Turtle\"],\"fol_rules\": [\n    \"∀x (Animal(x) → Cute(x))\", \",\"\n    ,\"∃x (Exist(x) ∧ Animal(x))\",\n    \"∀x (Animal(x) ∨ Squirrel(x))\",\n    \"→ (Skittish(x) → NotStill(x))\",\n    \"AllSquirrels(x) ∧ Skittish(x)\",\n    \"NotStill(Rock)\"\n], \"fol_conc\": [\"If Rock is cute and still, then Rock is a turtle and skittish.\"]}\n",
      "perplexity": 1.742927074432373
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Cute(x)\", \"Exists(x)\", \"Rabbit(x)\", \"Squirrel(x)\", \"Skittish(x)\", \"Still(x)\"], \"fol_consts\": [\"rock\", \"rabbit\"], \"fol_rules\": [\n    \"∀x (Rabbit(x) → Cute(x))\", \"∃x (Exists(x))\", \"∀x (Rabbit(x) ∨ Squirrel(x))\", \"If(skittish, not, still)\", \"∀x (Squirrel(x) → Skittish(x))\", \"Still(rock)\"\n],  \"fol_conc\": \"If(cute, rock, still) ∧ (Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock))\"}",
      "perplexity": 1.859254002571106
    }
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"NetflixShow\", \"Popular\", \"BingeWatch\", \"Download\", \"ShareTo\"], \n\"fol_consts\": [\"StrangerThings\", \"BlackMirror\", \"Karen\", \"Lisa\"],\n\"fol_rules\": [\n  \"∀x ( NetflixShow(x) → Popular(x))\",\n  \"∀x (Popular(x) → BingeWatch(x, Karen))\", \n  \"(BingeWatch(x, Karen) → Download(x, Karen))\",\n  \"¬Download(BlackMirror, Karen)\",\n  \"NetflixShow(BlackMirror)\", \n  \"BingeWatch(x, Karen) → ShareTo(Karen, Lisa)(x)\",\n],\n\"fol_conc\": \"ShareTo(Karen, Lisa)(StrangerThings)\"\n}\n```",
      "perplexity": 1.2493191957473755
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"NetflixShow\", \"Popular\", \"BingeWatch\", \"Download\", \"Share\"], \"fol_consts\": [\"StrangerThings\", \"Karen\", \"Lisa\", \"BlackMirror\"], \"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 1.423207402229309
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"NetflixShow(x)\", \"Popular(y)\", \"BingeWatch(z, y)\", \"Download(z, y)\", \"ShareTo(a, b)\"], \"fol_consts\": [\"strangers\", \"blackmirror\", \"karen\", \"lisa\"], \"fol_rules\": [\n  \"∀x ∃y (NetflixShow(x) → Popular(y))\",\n  \"∀x (Popular(x) → BingeWatch(z, x))\",\n  \"BingeWatch(z, y) → Download(z, y)\",\n  \"¬Download(z, blackmirror)\",\n  \"BlackMirror(b) ∧ NetflixShow(b)\",\n  \"BingeWatch(z, y) → ShareTo(a, z)\"\n], \"fol_conc\": \"ShareTo(karen, strangerthings)\"}",
      "perplexity": 1.5606944561004639
    }
  },
  {
    "id": 22,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "\"Black Mirror\" is popular.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Popular\", \"BingeWatch\", \"Download\", \"Share\"],\n\"fol_consts\": [\"StrangerThings\",\"Karen\",\"BlackMirror\",\"Netflix\"],\n\"fol_rules\": [ \n    \"∀x (BingeWatch(x, Karen) → Download(x, Karen))\",\n    \"∀x (Popular(x) → BingeWatch(x, Karen))\",\n    \"¬Download(BlackMirror, Karen)\",\n    \"If x is a Netflix show then BingeWatch(x, Karen)\", \n    \"BingeWatch(x, Karen) → Share(x, Lisa)\" \n],\n\"fol_conc\": \"Popular(BlackMirror)\" \n}\n```",
      "perplexity": 1.2472904920578003
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Popular\", \"BingeWatch\", \"Download\", \"Share\"], \"fol_consts\": [\"StrangerThings\",\"Netflix\",\"Karen\",\"BlackMirror\",\"Lisa\"], \"fol_rules\": [\n    \"∀x (Popularity(x, Netflix) → BingeWatch(x, Karen))\", \"', ' Download(y, x) ↔ BingeWatch(y, x)', '',  'BingeWatch(x, y) → Share(x, Lisa)' ], \"\n    \t,\"fol_conc\" ]}",
      "perplexity": 3.7844364643096924
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Popular(x)\", \"BingeWatch(x, y)\", \"Download(x, y)\", \"ShareTo(x, y)\"], \"fol_consts\": [\"strangerthings\", \"karen\", \"netflix\", \"blackmirror\", \"lisa\"], \"fol_rules\": [\n  \"∀x (Popularity(x) → BingeWatch(x, karen))\", \"(BingeWatch(x, karen) → Download(x, karen))\", \"(Download(x, karen) ↔ ShareTo(karen, lisa))\", \"Popular(blackmirror) ∧ BingeWatch(blackmirror, karen)\",\n  \"Popularity(strangerthings) ∧ NotDownload(blackmirror)\" ], \"fol_conc\": \"BlackMirrorIsPopular(blackmirror)\"}",
      "perplexity": 1.9125276803970337
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"NetflixShow\", \"Popular\", \"BingeWatch\", \"Download\", \"Share\"],\n\"fol_consts\": [\"StrangerThings\",\"Karen\",\"BlackMirror\",\"Lisa\"], \n\"fol_rules\": [\n    \"∀x (NetflixShow(x) → Popular(x))\",  \n    \"∀x (Popular(x) → BingeWatch(x, Karen))\",\n    \"BingeWatch(x, Karen) → Download(x, Karen)\", \n    \"¬Download(BlackMirror, Karen)\", \n    \"NetflixShow(BlackMirror) \",\n    \"BingeWatch(x, Karen)  → Share(x, Lisa)\"\n\n],\n\"fol_conc\": \"Karen will share Black Mirror to Lisa.\"\n}\n```",
      "perplexity": 1.3135544061660767
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"NetflixShow\", \"Popular\", \"BingeWatch\", \"Download\", \"Share\"],\"fol_consts\": [\"StrangerThings\",\"Karen\",\"Lisa\",\"BlackMirror\"],\"fol_rules\": [\n    \"∀x (NetflixShow(x) → Popular(x)), ∀y (Popularity(y) → BingeWatch(y))  ∧ BingeWatch(y) → Download(y),\",\n    \"¬Download(BlackMirror)\", \"Popular(StrangerThings)\" , \"\\b\\tBingeWatch(\\b\\tNetflixShow)\\to\\b\\tShare(\\b\\tLisa)\\\"\",\n   \"\"],\"fol_conc\": \"\" }\n",
      "perplexity": 2.3816514015197754
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"City\", \"capitalOf\",  \"mostPopulousNationalCapitalCity\", \"locatedIn\", \"hostedGames\", \"consistentlyRanked\"], \n\"fol_consts\": [\"Beijing\",\"People's Republic of China\",\"World's most populous national capital city\",\"Northern China\"],\n\"fol_rules\":[\n    \"∀x (City(x) →  capitalOf(x, People's Republic of China))\", \n    \"∀x (hostedGames(x, Summer Olympics) ∨ hostedGames(x, Winter Olympics))\",\n   \"∀x (locatedIn(x, Northern China) ∧ hostedGames(x,Summer Olympics)),\", \n     ],\n \"fol_conc\": \"Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\"  }\n```",
      "perplexity": 1.639970302581787
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"CapitalOf\"], \"fol_consts\": [\"Beijing\",\"China\",\"SummerOlympics\",\"WinterOlympics\"], \"fol_rules\": [\n  \"∀x (City(x) ∧ CapitalOf(x)) → (∃y (City(y) ∧ SummerOlympics(y))),\" ,\n  \"∀x (CapitalOf(x) → City(x)),\",\n  \"∀x (City(x) ∧ CapitalOf(x) )→ (exists y (SummerOlympics(y))))\",\n  \"∀x (City(x) ∧ CapitalOf(x)) → (exists y (WinterOlympics(y))) \" , \"],\"\n  \t\t ],\"fol_conc\": [\"Beijing hosted both the 2008 Summer Olympics and a winter olympics.\"]}\n",
      "perplexity": 2.4232802391052246
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CityOfCapital(x, y)\", \"WorldPopulousNationalCapital(x)\",\"LocatedIn(x, y)\", \"HostedGames(x, y)\"],  \"fol_consts\": [\"beijing\", \"china\", \"people\"], \"fol_rules\":[\n    \"∀y (CityOfCapital(y, china) → WorldPopulousNationalCapital(y))\", \"∃x (LocatedIn(x, beijing) ∧ HostedGames(x, 2008summerolympics))\",\n  \"∀x (HostedGames(x, summerolympics) → HostedGames(x, winterolympics))\"], \"fol_conc\": \"∃x (HostedGames(beijing, 2008winterolympics) ∧ HostedGames(beijing, 2008summerolympics))\"}",
      "perplexity": 2.2397873401641846
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"City\", \"capitalOf\", \"populousNationalCapitalCity\", \"locatedIn\", \"hostedGames\"],\n\"fol_consts\": [\"Beijing\", \"People's Republic of China\", \"World\",\"Northern China\", \"Summer Olympics\", \"Winter Olympics\", \"Summer Paralympics\", \"Winter Paralympics\", \"Asia-Pacific\"],\n\"fol_rules\": [\n    \"∀x (City(x) → capitalOf(x, People's Republic of China))\", \n    \"∀x (populousNationalCapitalCity(x) → locatedIn(x, Northern China))\",  \n    \"∃x (hostedGames(x, Summer Olympics) ∧ hostedGames(x, Winter Olympics))\" ,\n],\n\"fol_conc\": \"false\"\n}\n```",
      "perplexity": 1.3417264223098755
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"capitalOf\", \"mostPopulousNationalCapitalCity\", \"locatedIn\"],\n\"fol_consts\": [\"Beijing\", \"China\", \"People's Republic of China\", \"world\",\"Northern China\", \"Summer Olympics\", \"Winter Olympics\", \"Summer Paralympics\", \"Winter Paralympics\", \"Asia-Pacific\", \"World\"], \",\"\n  \t  : [ \"is a capital\", \"is located in\" ],\n\"fol_rules\": [],\n\"fol_conc\": [\"Beijing is not located in southern China.\"]}\n",
      "perplexity": 2.7659101486206055
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"City\", \"CapitalOf\", \"WorldMostPopulousNationalCapitalCity\", \"LocatedIn\",  \"HostedGames\", \"RankedAmongBest\"], \n\"fol_consts\": [\"Beijing\",\"China\", \"People'sRepublicofChina\", \"SummerOlympics\", \"WinterOlympics\", \"SummerParalympics\", \"WinterParalympics\", \"AsiaPacific\"],\n\"fol_rules\": [  \n    \"(∀x)(City(x) → CapitalOf(x, People'sRepublicofChina))\", \n   ],\n\"fol_conc\": [\"Beijing is the second largest Chinese city by urban population.\" ]\n\n}\n```",
      "perplexity": 1.6223052740097046
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"CapitalOf\", \"MostPopulousNationalCapital\", \"LocatedIn\", \"HostedGames\"], \",\"\n  \t  : [\"UrbanPopulation\", \"RankedBest\"] , \"fol_consts\": [\"Beijing\", \"PRC\", \"China\", \"World\", \"SummerOlympics\", \"WinterOlympics\", \"Paralympics\", \"AsiaPacific\", \"University\" ], \",\"\n  \t  :[\"CapitalOf\"], \"fol_rules\": [\"\"], \"fol_conc\": []}\n",
      "perplexity": 3.5949740409851074
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"City(x)\", \"CapitalOf(x, y)\", \"PopulousNationalCapital(x)\", \"LocatedIn(x, y)\"], \"fol_consts\": [\"beijing\", \"china\", \"world\",\"2008\"], \"fol_rules\": [\n  \"∀x (City(x)) → ∃y (CapitalOf(x, y))\",\n  \"∀x (PopulousNationalCapital(x)) → ∃z (LocatedIn(x, z))\",\n  \"∀x (OlympicHost(x) ∧ SummerOlympicsHost(x) ∨ WinterOlympicsHost(x)) → ∃y (City(y) ∧ PopulousNationalCapital(y))\",\n  \"BeijingUniversity(x) → RankedInAsiaPacificWorld(x)\"\n], \"fol_conc\": \"∀x (PopulousNationalCapital(x) ∧ OlympicHost(x) ∨ WinterOlympicsHost(x)) → ∃y (City(y) ∧ PopulousNationalCapital(y))\"}",
      "perplexity": 1.7873579263687134
    }
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Alien\", \"Extraterrestrial\", \"Human\", \"From\"], \n\"fol_consts\": [\"Marvin\"], \n\"fol_rules\": [\n    \"∀x (Alien(x) → Extraterrestrial(x)),\",\n    \"If x is From(Mars), then Alien(x)\",\n    \"¬Extraterrestrial(Human)\",\n    \"ForAll y, If y is From(Earth), then Human(y)\", \n    \"¬From(Earth) → Alien(Marvin)\",\n    \"If ¬From(Earth)(Marvin) , then Alien(Marvin)\" \n],\n \"fol_conc\":  \"Marvin is an alien.\"\n}\n```",
      "perplexity": 1.4644113779067993
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Alien\", \"Extraterrestrial\", \"Human\"],\"fol_consts\": [\"Marvin\"],\"fol_rules\": [\n  \"∀x ( Alien(x) → Extraterrestrial(x))\", \"\\n\",\n  \"∀x (FromMars(x) → Alien(x)),\\n\",\n  \"¬∀x (Extraterrestrial(x) & Human(x))\\n\",\n  \"∀x (EarthlyPerson(x) → Human(x)),\\n\",\n  \"¬∃x (Alien(x) ∧ FromMars(x) ) \\n\",\n  \"¬ (FromEarth(x) ∧ FromMars(x))→ Alien(x), \\n\",\n  \"∀x (NotEarthlyPerson(x) → Extraterrestrial(x))\\n\"],\"fol_conc\": \"Marvin is an alien.\"}\n",
      "perplexity": 1.8282326459884644
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Alien(x)\", \"Extraterrestrial(x)\", \"Human(x)\", \"FromEarth(x, y)\", \"FromMars(y)\"], \"fol_consts\": [\"marv\",\"earth\", \"mars\"], \"fol_rules\": [\n  \"∀x (Alien(x) → Extraterrestrial(x))\", \"∀x (FromMars(x) → Alien(x))\", \"¬(Extraterrestrial(x) ∧ Human(x))\", \"∀x (FromEarth(x, y) → Human(y))\", \"¬(MarvinFromEarth(marv) ∧ MarvinFromMars(mars))\",\n  \"¬(MarvinFromEarth(marv) → ¬Alien(marv))\"\n], \"fol_conc\": \"MarvinAlien(marv)\" }",
      "perplexity": 1.9892783164978027
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Alien\", \"Extraterrestrial\", \"Human\", \"FromMars\"], \n\"fol_consts\": [\"Marvin\"],\n\"fol_rules\": [\n    \"∀x (Alien(x) → Extraterrestrial(x))\",  // All aliens are extraterrestrials.\n    \"If x is FromMars, then Alien(x)\", // If someone is from Mars, they are an alien.\n    \"¬∃x (Extraterrestrial(x) ∧ Human(x))\", // No extraterrestrial is human.\n    \"∀x (FromEarth(x) → Human(x))\",  // Everyone from Earth is a human.\n    \"¬(Alien(Marvin) ∧ FromMars(Marvin))\", // Marvin cannot be both alien and from Mars.\n    \"If ¬(Alien(x)), then Extraterrestrial(x)\", // If Marvin isn't an alien, he must be extraterrestrial. \n],\n\"fol_conc\": \"¬ (Human(Marvin) ∨ FromMars(Marvin))\"  // Marvin is neither a human nor from Mars.\n}\n```",
      "perplexity": 1.4114713668823242
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Alien\", \"Extraterrestrial\", \"Human\", \"From\"],\n\"fol_consts\": [\"Marvin\"],\n\"fol_rules\":[\"\"], \",\"\n  \t \t:[\"All Aliens are Extraterrestrials. -> If x is Alien, then x is Extraterrestrial.\" , \"If x is from Mars, then x is an Alien.\", \"No extraterrestrial is Human\", \"Everyone from Earth is a Human\", \"Marvin cannot be from Earth and From Mars\", \"If Marvin is not from Earth, then Marvin is an Extraterrestrials.\"],\n\"fol_conc\": [\"Marvin is neither a human nor from Mars.\" ]\n} ",
      "perplexity": 2.738321542739868
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Alien(x)\", \"FromMars(y)\", \"Human(z)\", \"Extraterrestrial(x)\"], \"fol_consts\": [\"marvin\", \"earth\", \"mars\"], \"fol_rules\": [\n  \"∀x (Alien(x) → Extraterrestrial(x))\", \"∀y (FromMars(y) → Alien(y))\", \"¬(Extraterrestrial(x) ∧ Human(x))\", \"∀z (Human(z) → Earth(z))\", \"¬(Earth(marvin) ∧ FromMars(marvin))\", \"¬(Martian(marvin) → Earth(marvin))\",\n  \"If(notmarv, thenextraterrestrial)\", \"(NotExtraterrestrial(x) ∨ Extraterrestreal(y) ∧ Martian(z))\" ], \"fol_conc\": \"Marvin(marv) ∧ ¬Human(marv) ∧ ¬FromMars(marv)\"}",
      "perplexity": 2.361539602279663
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Alien\", \"Extraterrestrial\", \"Human\", \"From\"], \n\"fol_consts\": [\"Marvin\"],\n\"fol_rules\": [],\n\"fol_conc\": [\"If Marvin is not from Mars, then Marvin is a human.\"]\n}\n```",
      "perplexity": 1.2626456022262573
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Alien(x)\", \"Extraterrestrial(x)\", \"FromMars(y)\", \"Human(z)\", \"Earthly(z)\"], \"fol_consts\": [\"m\", \"e\"], \"fol_rules\": [\n\"∀x (Alien(x) → Extraterrestrial(x))\", \"∀x (FromMars(x) → Alien(x))\", \"¬(Extraterrestrial(x) ∧ Human(x))\", \"∀z (Earthly(z) → Human(z))\",\n\"(¬FromMars(m) ∧ ¬Earthly(m)) → Extraterrestrial(m)\", \"(NotExtraterrestrials(m) ∧ NotEarthly(m)) → Alien(m)\"\n], \"fol_conc\": \"If(notm, thenz)\"}",
      "perplexity": 2.1430537700653076
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"GrandSlamChampion\", \"OscarNominatedActor\", \"ProfessionalTennisPlayer\", \"Celebrity\", \"Athlete\", \"WellPaid\", \"Famous\"], \n\"fol_consts\": [\"Djokovic\"],\n\"fol_rules\": [  \n    \"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)),\", \n    \"∀x (OscarNominatedActor(x) → Celebrity(x)),\",\n    \"∀x (ProfessionalTennisPlayer(x) → Athlete(x)),\", \n    \"∀x (Celebrity(x) → WellPaid(x)),\",  \n    \"∀x (Athlete(x) → Famous(x)),\", \n    \"∀x (WellPaid(x) → TaxHaven(x))\",\n    \"If (Famous(x) and Athlete(x)) then (WellPaid(x)),\",\n],\n \"fol_conc\":  \"Djokovic is a Grand Slam Champion.\"\n}\n```",
      "perplexity": 1.2491042613983154
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GrandSlamChampion(x)\", \"OscarNominatedActor(x)\", \"ProfessionalTennisPlayer(x)\", \"Celebrity(x)\", \"Athlete(x)\", \"WellPaid(x)\"], \"fol_consts\": [\"okovic\", \"all\"], \"fol_rules\":[\n  \"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\", \"∀x (OscarNominatedActor(x) → Celebrity(x))\", \"(ProfessionalTennisPlayer(x) ∧ Athlete(x)) → Famous(x)\", \"(Celebrity(x) → WellPaid(x))\", \"WellPaid(x) ∧ Famous(x) → DjokovicLivesInTaxHaven(x)\"\n], \"fol_conc\": \"DjokovicIsAGrandSlamChampion(okovic)\"}",
      "perplexity": 2.0290935039520264
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"GrandSlamChampion\", \"OscarNominatedActor\", \"ProfessionalTennisPlayer\", \"Celebrity\", \"Athlete\", \"WellPaid\", \"Famous\"],\n\"fol_consts\": [\"Djokovic\"],\n\"fol_rules\": [ \n  \"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\",\n  \"∀x (OscarNominatedActor(x) → Celebrity(x))\",\n  \"∀x (ProfessionalTennisPlayer(x) → Athlete(x))\",\n  \"∀x (Celebrity(x) → WellPaid(x))\",\n  \"∀x (Athlete(x) → Famous(x))\", \n  \"∀x (WellPaid(x) → TaxHaven(x))\" ,\n  \"Famous(Djokovic) ∧ Athlete(Djokovic) → WellPaid(Djokovic)\" \n],\n\"fol_conc\": \"Djokovic lives in a tax haven.\"\n}\n```",
      "perplexity": 1.116323709487915
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GrandSlamChampion\", \"OscarNominatedActor\", \"ProfessionalTennisPlayer\", \"Celebrity\", \"Athlete\", \"WellPaid\"], \",\"\n  :[\"City\"] ,\n\"fol_consts\": [\"Djokovic\"],\n\"fol_rules\": [\n    \"∀x ( GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\",\n    \"∀x ( OscarNominatedActor(x) → Celebrity(x))\", \",\"\n    ,\"∀x (ProfessionalTennisPlayer(x) → Athlete(x))\",\n    \"∀x (Celebrity(x) → WellPaid(x))\",\n    \"∀x (Athlete(x) → Famous(x))\",\n    \"∀x (WellPaid(x) → livesInTaxHaven(x))\", \",\"\n    ,\"If x is Famous and x is an Athlete then  livesInWellpaid(x)\",\n   \"∃x (GrandSlamChampion(x) ∧ OscarNominatedActor(x)),\" ] ,\n \"fol_conc\": [\"Djokovic lives in a tax haven.\"]} ",
      "perplexity": 2.1580965518951416
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GrandSlamChampion(x)\", \"OscarNominatedActor(y)\", \"ProfessionalTennisPlayer(z)\", \"Celebrity(u)\", \"Athlete(v)\", \"WellPaid(w)\", \"Famous(x)\"], \"fol_consts\": [\"okovic\", \"tennis\"], \"fol_rules\": [\n\"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\", \"∀y (OscarNominatedActor(y) → Celebrity(y))\", \"∀z (ProfessionalTennisPlayer(z) → Athlete(z))\", \"∀u (Celebrity(u) → WellPaid(u))\",\n\"∀v (Athlete(v) → Famous(v))\"], \"fol_conc\": \"DjokovicLivesInTaxHaven(djokovic, w)\" }",
      "perplexity": 1.8924400806427002
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"GrandSlamChampion\", \"OscarNominatedActor\", \"ProfessionalTennisPlayer\", \"Celebrity\", \"Athlete\", \"WellPaid\", \"Famous\"],\n\"fol_consts\": [\"Djokovic\"],\n\"fol_rules\": [], \n\"fol_conc\": \"¬(livesInTaxHaven(Djokovic))\"\n}\n```",
      "perplexity": 1.2084482908248901
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GrandSlamChampion\", \"OscarNominatedActor\", \"ProfessionalTennisPlayer\", \"Celebrity\", \"Athlete\", \"WellPaid\"], \"fol_consts\": [\"Djokovic\"], \"fol_rules\": [\n  \"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)),\", 0, \"∀x (OscarNominatedActor(x) → Celebrity(x)),\", 0,\"∀x (ProfessionalTennisPlayer(x) → Athlete(x)),\", 0,\"∀x (Celebrity(x) → WellPaid(x)),\",\n  \"∀x (Athlete(x) → Famous(x)),\", \"AllPeopleWhoAreGrandSlamChampionsAreProfessionalTennisPlayers\",\n  \"AllOscarNominatedActorsAreCelebrities\",\n  \"AllProfessionalTennisPlayersAreAthletes\", 0, \"If x is a Celebrity then WellPaid(x)\",\n  \"If x is an Athlete then Famous(x)\" , 0,\"∀x (WellPaid(x) → LivesInTaxHaven(x))\"], \"fol_conc\": \"¬LivesInTaxHaven(Djokovic)\" }\n",
      "perplexity": 1.5502824783325195
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PersonExists(x)\", \"GrandSlamChampion(x)\", \"OscarNominatedActor(x)\", \"ProfessionalTennisPlayer(x)\", \"Celebrity(x)\", \"Athlete(x)\", \"WellPaid(x)\", \"Famous(x)\"], \"fol_consts\": [\"okovic\"], \"fol_rules\": [\n\"∀x (PersonExists(x))\", \"∃y (GrandSlamChampion(y) ∧ ProfessionalTennisPlayer(y))\", \"∀x (OscarNominatedActor(x) → Celebrity(x))\", \"∀x (ProfessionalTennisPlayer(x) → Athlete(x))\", \"∀x (Celebrity(x) → WellPaid(x))\", \"∀x (Athlete(x) → Famous(x))\", \"(WellPaid(x) ∧ TaxHaven(x))\" ], \"fol_conc\": \"¬TaxHaven(okovic)\" }",
      "perplexity": 1.8319569826126099
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Stable\", \"Leader\", \"Member\"],\n\"fol_consts\": [\"Diamond Mine\", \"Roderick Strong\", \"Creed Brothers\", \"Ivy Nile\", \"Imperium\"], \n\"fol_rules\":[\"\"],\n\"fol_conc\": [ \"∃x (Stable(x)∧ Leader(Strong, x))\"] \n}\n```",
      "perplexity": 1.5812498331069946
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"ProfessionalWrestler\", \"Stable\"], \"fol_consts\": [\"Diamond Mine\", \"Roderick Strong\", \"Creed Brothers\", \"Ivy Nile\", \"Imperium\"], \"fol_rules\": [\"\"], \"fol_conc\": []}\n",
      "perplexity": 1.7761085033416748
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"ProfessionalWrestlingStable(x)\", \"Leads(x, y)\"], \"fol_consts\": [\"diamondmine\", \"roderickstrong\", \"creedbrothers\",\"ivyniile\", \"imperium\"],  \"fol_rules\": [\n    \"∀x (ProfessionalWrestlingStable(x) ∧ Leads(x, roderickstrong) → ProfessionalWrestlingStable(diamondmine))\",\n   \"∃y (Leads(y, creeddbrothers) ∨ Leads(y, ivyniile) ∨ Leads(y, roderickstrong))\" , \"∀x (ProfessionalWrestlingStable(x) ∧ ImperiumFeudWith(x) → ProfessionalWrestlingStable(diamondmine))\",\n  \"∃x (Leads(x, roderickstrong) ∧ ProfessionalWrestligStabe(x))\" ], \"fol_conc\": \"RoderickStrongLeadsAProfessionalWrestlingStable(roderickstrong)\" }",
      "perplexity": 2.1039679050445557
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"ProfessionalWrestler\", \"Leads\", \"InvolvedInFeud\"],\n\"fol_consts\": [\"DiamondMine\", \"RoderickStrong\", \"CreedBrothers\",  \"Imperium\",\"WWE\"], \n\"fol_rules\":[\n\"\"\n],\n\"fol_conc\": \"∀x ( ProfessionalWrestler(x) → Leads(RoderickStrong, x))\"\n}\n```",
      "perplexity": 1.6531141996383667
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"ProfessionalWrestler\", \"StableLeader\", \"BelongsTo\"],\n\"fol_consts\": [\"DiamondMine\",\"RoderickStrong\", \"CreedBrothers\", \"IvyNile\", \"Imperium\"], \",\"\n  : [\"WWE\"],\n\"fol_rules\": [\n    \"∀x ( ProfessionalWrestler(x) → BelongsTo(x, DiamondMine)),\",\n    \"∃x (ProfessionalWrestler(x) ∧ StableLeader(x, DiamondMine))\",\n    \"∃x (BelongsTo(x, DiamondMine) ∧  ProfessionalWrestler(x) )\",\n    \"∀x ( ProfessionalWrestler(x) → BelongsTo(x, Imperium)),\",\n    \"RoderickStrong ∈ ProfessionalWrestler\",\n   \"CreedBrothers ∈ BelongsTo\"] ,\n \"fol_conc\": \"∃x (BelongsTo(RoderickStrong, Creed Brothers))\"} ",
      "perplexity": 2.062908172607422
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Stable(x)\", \"Leader(y, z)\", \"MemberOf(x, y)\", \"Feud(u, v)\"], \"fol_consts\": [\"diamondmine\", \"roderickstrong\", \"creedbrothers\", \"ivyniile\",\"imperium\"], \"fol_rules\": [\n\"∀x ∃z (Stable(x) → Leader(z, x))\",\n\"∀y ∃x (Leader(y, x) → MemberOf(y, x))\",\n\"∀u ∃v ∃w (Feud(u, v) → MemberOf(u, w))\",\n  \"∀x ∀y (Stable(x) ∧ Leader(x, y) → MemberOf(x, y))\"\n], \"fol_conc\": \"RoderickStrongLeadsCreedBrothers(roderickstrong, creedbrothers)\" }",
      "perplexity": 1.7841992378234863
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"ProfessionalWrestlerStable\", \"LedBy\", \"Includes\", \"FeudWith\"], \n\"fol_consts\": [\"DiamondMine\",\"RoderickStrong\",\"CreedBrothers\", \"IvyNile\", \"Imperium\"],\n\"fol_rules\": [\n    \"∀x ( ProfessionalWrestlerStable(x) →  ∃y ( LedBy(x, y)) ), \",\n    \" ∀x (ProfessionalWrestlingStable(x) → Includes( x , CreedBrothers)), \",\n    \" ∀x (ProfessionalWrestlingStable(x) → Includes(x, IvyNile) ), \"\n    \"∀x ( FeudWith(x,y)  →   FeudWith( y , ProfessionalWrestlerStable(z))),\",\n],\n\"fol_conc\":  \"¬∃x ∀y ( FeudWith(Imperium, x) ) ∧ (ProfessionalWrestlingStable(x) → Includes(x,IvyNile)) \"\n}\n```",
      "perplexity": 1.8003113269805908
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"WrestlingStable\", \"LeaderOf\", \"Includes\"],\n\"fol_consts\": [\"DiamondMine\",\"WWE\",\"RoderickStrong\", \"CreedBrothers\", \"IvyNile\", \"Imperium\"],\n\"fol_rules\": [\n  \"∀x (WrestlingStable(x) → ∃y (LeaderOf(x, y)) ),\",\n  \"∀x (Includes(x, y) → ∧z (WrestlingStable(z)) )\",\n  \"¬ ( wrestlingstable(X) ∧ Includes(Y, Z) and Imperium(X)),\" ],\n \"fol_conc\": \" ¬ (Imperium(X) ∧ Includes(IvyNile, X))\"}",
      "perplexity": 1.9951667785644531
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"ProfessionalWrestlerStableExists(x)\", \"Leads(x, y)\", \"Includes(x, y)\",\"FeudWith(x, y)\", \"WWE(wrestlingstable)\"], \n\"fol_consts\": [\"diamondmine\", \"roderickstrong\", \"creedbrothers\", \"ivyniile\", \"imperium\"], \n\"fol_rules\": [\n    \"∀s (ProfessionalWrestlerStableExists(s) → WWE(s))\",\n    \"RoderickStrongLeads(r, s) → Includes(s, r)\",\n    \"Includes(s, x) → ∃y (FeudWith(x, y))\",\n    \"Not(feudwith) ∧ ProfessionalWrestlerStableExists(x) → Not(includes)\" ], \n \"fol_conc\": \"∀s (ProfessionalWrestlerStableExists(s) → WWE(s) ∧ ¬Includes(s, ivyniile) ∧ ¬FeudWith(s, imperio))\" }",
      "perplexity": 2.182138442993164
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"SymphonyNo9\", \"Composers\", \"MusicPiece\", \"wrote\", \"premiered\", \"isAnOrchestra\", \"leads\" ],\n\"fol_consts\": [ \"Beethoven\", \"Symphony No. 9\", \"Vienna Music Society\",  ],\n\"fol_rules\": [\n   \"(SymphonyNo9(x) → Composers(y)) & (Composers(y) → isAMusicPiece(y))\",\n   \"(isAnOrchestra(z) & leads(w, z))\", \n   \"(Beethoven = w)\" ,  \n],\n\"fol_conc\": \"Beethoven is a composer.\"\n}\n```",
      "perplexity": 1.9347487688064575
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Symphony\", \"Composers\", \"MusicPiece\", \"Writes\", \"Beethoven\", \"Leads\", \"Orchestras\", \"Conductors\"], \"fol_consts\": [\"Symphony No. 9\", \"Beethoven\", \"Vienna Music Society\", \"orchestra\"],\"fol_rules\": [\"\"], \"fol_conc\": [] }\n",
      "perplexity": 1.8674402236938477
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n{\n\"fol_preds\": [ \"Symphony\", \"Composers\", \"MusicPiece\", \"is_a\",  \"wrote\", \"premiered\", \"orchestra\", \"leads\"], \n\"fol_consts\": [\"Beethoven\", \"Vienna Music Society\", \"No.9\"], \n\"fol_rules\": [\n    \"∀x (composers(x) → is_music_piece(SymphonyNo9)),\", // Composers write music pieces.\n    \"∀x (is_a(x, Symphony)) → wrote(Beethoven, x),\",  // Beethoven wrote the symphony No. 9.\n    \"∃x (premiered(Vienna Music Society, x) && is_music_piece(x)),\", // Some orchestras premiered music pieces.\n    \"orchestras(x) → leads(x, Conductor)\", // Orchestras are led by conductors. \n],  \n\"fol_conc\": \"∃y (premiered(y, No9))\"\n}\n\n",
      "perplexity": 1.9141790866851807
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Symphony\", \"Composers\", \"MusicPiece\"],\n\"fol_consts\": [\"Beethoven\", \"Vienna Music Society\"], \",\"\n  \t  :\"Orchestras\", \"Conductor\"\n    \t:\n  \t\t \"No.9\" , \"music piece\"\n  \t\t :\n  \t\t\t\"Some orchestras premiered music pieces\",\n  \t  \"MusicPiece(x) → Symphony(y)\"\n  \t  : 0}\n",
      "perplexity": 7.640387058258057
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MusicPiece(x)\", \"Composer(y)\", \"SymphonyNo9(x)\", \"Orchestra(z)\", \"Conductor(w)\"], \"fol_consts\": [\"no9\", \"beethoven\",\"viennamusicsociety\",\"musicalpiece\"], \"fol_rules\":[\n  \"∀x (MusicPiece(x) ∧ SymphonyNo9(x)) → Composer(x)\", \"(Composer(y) ∧ Orchestra(z)) → Conductor(w)\" , \"(SymphonyNo9(a) ∧ ViennaMusicSociety(b)) → PremieredMusicalPieces(a, b)\", \"PremieredMusicalPieces(a, b) ∨ PremieredMusicalPieces(c, d)\"\n], \"fol_conc\": \"SomechestrasPremieredMusicalPieces(someo, somep)\"}",
      "perplexity": 2.4553420543670654
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is not a conductor.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Symphony\", \"Composers\", \"MusicPiece\", \"Write\", \"Beethoven\", \"Leads\", \"Orchestra\", \"Conductor\"],\n\"fol_consts\": [\"No. 9\", \"Vienna Music Society\", \"Symphony No. 9\"],\n\"fol_rules\": [\n  \"∀x ( Symphony(x) → Write(x)),\",\n  \"∀x (Composers(x) → Write(MusicPiece(x))),\",\n  \"∀x (Beethoven(x) → Write(SymphonyNo.9(x))),\",\n  \"∃x (Vienna Music Society(x) → Orchestra(x))\", \n  \"∀x (Beethoven(x) → Leads(x, Vienna Music Society(x))),\",\n  \"∀x (Orchestra(x) → LedBy(x, Conductor(x)))\" \n],\n \"fol_conc\": \" ¬∃x (Conductor(x) && Beethoven(x))\" \n}\n```",
      "perplexity": 1.3880337476730347
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Symphony\", \"Composers\", \"musicPiece\", \"wrote\", \"premiered\", \"orchestra\", \"leads\"], \"fol_consts\": [\"Beethoven\",\"SymphonyNo9\", \"ViennaMusicSociety\",\"ViennaMusicSocieties\",\"Conductor\"], \"fol_rules\": [], \"fol_conc\": \"¬(Conductor(Beethoven))\"}\n",
      "perplexity": 1.958141803741455
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"SymphonyNo9MusicPiece(x)\", \"Composes(y, x)\", \"Wrote(y, z)\", \"PremieredBy(a, b)\", \"IsOrchestra(c)\"], \n\"fol_consts\": [\"9\", \"symphony\", \"beethoven\",\"viennamusicsociety\",\"orchestra\",\"conductor\"], \n\"fol_rules\": [\n  \"∀x (SymphonyNo9MusicPiece(x)) → ∃y (Composes(y, x))\",\n  \"BeethovenWrote(y, z) → ¬IsOrchestra(z)\",\n  \"ViennaMusicSocietyPremieredBy(a, b) → IsOrchestra(b)\",\n  \"IsConductor(c, y) → ∀x (OrchestrasAreLedByConductors(x))\",\n  \"BeethovenLeadsViennaMusicSociety(y) → ¬IsConductor(y)\"\n], \"fol_conc\": \"¬IsConductor(beethoven)\" }",
      "perplexity": 2.1439878940582275
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Timeless\", \"DesignStyle\", \"MassProduct\"], \n\"fol_consts\": [\"ZahaHadid\",\"KellyWearstler\",\"Max\"], \n\"fol_rules\": [],\n\"fol_conc\":  \"A design by Max is a mass product design.\" \n}\n```",
      "perplexity": 1.3739430904388428
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"DesignStyle\", \"Timeless\", \"MassProduct\"], \"fol_consts\": [\"ZahaHadid\", \"KellyWearstler\", \"Max\"], \"fol_rules\": [], \"fol_conc\": [] } ",
      "perplexity": 1.7199878692626953
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"DesignBy(x)\", \"Timeless(x)\",  \"MassProduct(x)\", \"Evocative(x)\", \"Dreamy(x)\" ], \n\"fol_consts\": [\"ZahaHadid\", \"KellyWearstler\", \"Max\"],\n\"fol_rules\": [\n    \"∀x (DesignBy(x) → Timeless(x))\", // Zaha Hadid's designs are timeless\n    \"¬∀x (MassProduct(x) ∧ Timeless(x))\",  // Mass product designs are not always timeless\n    \"∃x (DesignBy(x) ∨ DesignBy(KellyWearstler))\",   // Either Zaha Hadids or Kelly Wearstler's design styles.\n    \"∀x (DesignBy(x) → Evocative(x))\",  // If a design is by Max, then it must be evocative and dreamy.\n],\n\"fol_conc\": \"∃x (DesignBy(Max) ∧ Evocative(Max) ∧ Dreamy(Max))\" // A design by Max is evocative and dream.\n}\n```",
      "perplexity": 1.4403189420700073
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Timeless\", \"DesignStyle\", \"MassProduct\"], \"fol_consts\": [\"ZahaHadid\", \"KellyWearstler\",\"Max\"], \"fol_rules\": [\n    \"∀x (DesignStyle(x) → Timeless(x))\", \",\" ,\", \" ,\",  \" ,\",  \" ,\",   \" ,\", 1, \" ,\",  \" ,\",  \" ,\",  \" ,\", \" ,\",  \" ,\", \",\", ], 0], 2. ]}\"]\n }",
      "perplexity": 6.3027544021606445
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DesignStyle(x)\", \"Timeless(x)\", \"MassProduct(y)\"], \"fol_consts\": [\"zaha\", \"kelly\", \"max\"], \"fol_rules\": [\n    \"∀x (DesignStyle(x) → Timeless(x))\", \"¬(MassProduct(y) → Timeless(y))\", \"∃x (DesignStyle(x) ∨ DesignStyle(z))\", \"∀x (Timeless(x) ↔ MassProduct(x))\", \"AllOf(w, v, u) → AllOf(v, w, u)\",\n    \"MaxTimelessIfMassProdEvocative(max)\" , \"∀x (DesignStyle(x) ∧ MassProduct(y) ∧ Evocative(x))\" ], \"fol_conc\": \"ADesignByMaxIsEvocativeAndDreamy(max)\" }",
      "perplexity": 2.1933176517486572
    }
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"DesignStyle\", \"Timeless\", \"MassProduct\"], \n\"fol_consts\": [\"ZahaHadid\", \"KellyWearstler\", \"Max\"],\n\"fol_rules\":[\n  \"(∀x (Designer(x) → Timeless(x)))\",\n  \"(¬ (∃y MassProduct(y)) )\",\n  \"(EitherAOrB(DesignStyle, ZahaHadid, KellyWearstler))\", \n  \"(All A of B)\",\n  \"If X is timeless then Y is a mass product and evocative\"\n],\n \"fol_conc\": \"(∃x (Max(x) → (Evocative(x) or Dreamy(x))))\"\n}\n```",
      "perplexity": 2.022096633911133
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"DesignStyle\", \"Timeless\"], \"fol_consts\": [\"ZahaHadid\", \"KellyWearstler\", \"Max\"], \"fol_rules\": [\n  \"∀x (DesignStyle(x) → Timeless(x)),\", \"\\t\\n\"\n  , \"(¬MassProductDesign(x)) → ¬Timeless(x)\", \"\\t\\n\" , \"∃x (DesignStyle(x) ∨ DesignStyle(KellyWearstler(x))), \\t\\n\" , \"∀x (DesignStyle(x) ∧ Timelessly(x) → Evocative(x)), \\t\\n\" , \"(Timeless(Max)) → MassProductDesign(Max) ∧ Evocative(Max), \\t\\n\",\n  \"∃x (Evocative(KellyWearstler(x)) and Dreamy(KellyWearstler(x))), \\t\\n\" ], \"fol_conc\": \"∃x (Evocative(x) or Dreamy(x))\"} ",
      "perplexity": 1.8219971656799316
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DesignStyle(x)\", \"Timeless(y)\",\"MassProduct(z)\",\"Evocative(w)\", \"Dreamy(u)\" ], \"fol_consts\": [\"zaha\", \"kelly\", \"max\"],  \"fol_rules\": [\n    \"∀x (DesignStyle(x) → Timeless(x))\", \"(¬MassProduct(z) ∧ Timeless(y))\", \"∃x (Timeless(x) ∨ DesignStyle(x) ∧ KellyWearstler(w))\", \"∀x (Evocative(u) ∧ Dreamy(u) ∧ MassProductDesign(v))\", \"(Max(a) → Max(b) → Timeless(z) ∧ Evocative(z))\"], \"fol_conc\": \"∃x (Evocative(x) ∨ Dreamy(x))\"}",
      "perplexity": 2.1677775382995605
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is among the most active players in major tennis.",
      "options": [],
      "answer": "A"
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"RankedHighly\", \"ActivePlayer\", \"LostTo\", \"FemaleTennisPlayer\", \"MaleTennisPlayer\", \"RolandGarros2022\"],\n\"fol_consts\": [\"CocoGauff\",\"IgaSwiatek\", \"RafaelNadal\", \"Women's Tennis Association\",  \"Roland Garros 2022\"],\n\"fol_rules\": [\n    \"∀x (RankedHighly(x) → ActivePlayer(x))\", \n    \"∀y (LostTo(y, IgaSwiatek) → RankedHighly(y))\", \n    \"∀x (FemaleTennisPlayer(x) → RolandGarros2022(x))\", \n    \"∀x (MaleTennisPlayer(x) → RolandGarros2022(x))\", \n    \"∃x (All(x, FemaleTennisPlayer(x)) → All(x, LostTo(x, IgaSwiatek)))\", \n    \"∀x (RankedHighly(x) ∨ LostTo(x, RafaelNadal)) → ¬MaleTennisPlayer(x)\",  \n],\n\"fol_conc\": \"Coco Gauff has lost to Rafael Nadal.\"\n}\n```",
      "perplexity": 1.3291840553283691
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"RankedHighly\", \"Active\", \"LostTo\", \"FemaleTennisPlayer\", \"MaleTennisPlayer\"], \"fol_consts\": [\"IgaSwiatek\", \"CocoGauff\", \"RafaelNadal\", \"RolandGarros2022\"], \"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 1.3980178833007812
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"RankedHighlyByWTA(x)\", \"ActivePlayer(x)\", \"LostTo(y, z)\", \"FemaleTennisPlayer(x)\", \"MaleTennisPlayer(x)\", \"RolandGarros2022(x)\"], \"fol_consts\": [\"igaw\", \"rafaelnadal\", \"cocogauff\", \"swiatecki\"], \"fol_rules\": [\n    \"∀x (RankedHighlyByWTA(x) → ActivePlayer(x))\", \"∀y (LostTo(y, igasw) → RankedHighlyByWTA(y))\", \"∀x (FemaleTennisPlayer(x) → RolandGarros2022(x))\",\n    \"∃x (MaleTennisPlayer(x) → RolandGarros2022(x))\", \"(AllA(a, b) → AllB(b, c))\", \"(EitherA(a) ∨ EitherB(b))\", \"∀x (RolandGarros2022(x) → MaleTennisPlayer(x))\"\n], \"fol_conc\": \"CocoGauffLostToRafaelNadal(cocogauff)\" }",
      "perplexity": 1.9216870069503784
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": [],
      "answer": "B"
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": [
        "All cats are mammals.",
        "Some pets are not mammals."
      ],
      "question": "No pets are cats.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Cat\", \"Mammal\", \"Pet\"],\n\"fol_consts\": [\"C1\", \"M1\", \"P1\"],\n\"fol_rules\": [\n  \"∀x (Cat(x) → Mammal(x))\", \n  \"∃y (Pet(y) ∧ ¬Mammal(y))\",\n  \"¬ (Pet(P1) ∧ Cat(C1))\"\n],\n\"fol_conc\": \"¬ (Pet(P1) ∧ Cat(C1))\"\n}\n```",
      "perplexity": 1.1234742403030396
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Cat\", \"Mammal\", \"Pet\"], \"fol_consts\": [\"C1\", \"M1\", \"P1\"], \"fol_rules\": [\"\"], \"fol_conc\": []}\n",
      "perplexity": 1.6872386932373047
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Cat(x)\", \"Mammal(x)\", \"Pet(y)\"], \"fol_consts\": [\"c\", \"m\"], \"fol_rules\": [\n  \"∀x (Cat(x) → Mammal(x))\", \"∃x (Pet(x) ∧ ¬Mammal(x))\", \"¬(∀x (Pet(x) ∧ Cat(x)))\" ], \"fol_conc\": \"¬(∀x (Pet(x) ∧ Cat(x)))\"}",
      "perplexity": 1.6728637218475342
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Student\", \"Season\"], \n\"fol_consts\": [\"Emma\", \"Mia\", \"James\"],\n\"fol_rules\": [\n    \"∀x (Student(x) →  ∃y (Season(y)) ),\",\n    \"∀x (Season(y) ∧ Student(x) ) →  (Summer(y)),\" ,\n    \"∀x (Favorite(x, y) ∧ Season(y)) → (LongVacation(x)) \"\n],\n\"fol_conc\": \"James is a student and loves summer.\"\n}\n```",
      "perplexity": 1.6797122955322266
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Season\", \"Student\", \"Loves\"],\"fol_consts\": [\"Spring\", \"Summer\", \"Fall\", \"Winter\",\"Emma\", \"Mia\",\"James\"],\"fol_rules\":[\n    \"∀s (S(x) ∧ S(y)) → ( Loves(x, y)),\", 7\n  ], \"fol_conc\":[\"James's favorite season is Summer.\" ] }\n",
      "perplexity": 3.074036121368408
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Season(x)\", \"Student(y)\", \"Loves(y, x)\", \"Favorite(y, x)\"], \"fol_consts\": [\"spring\", \"summer\", \"fall\", \"winter\", \"emma\", \"mia\", \"james\"], \"fol_rules\": [\n    \"∀x (Season(x) → ∃y (Student(y) ∧ Loves(y, x)) ∨ ¬(Loves(y, x)))\",\n    \"¬(Favorite(emmas, summer) ∨ Favorite(mia, summer))\",\n    \"Favorite(james, summer)\",\n  \"∀x (Season(x) → Favorite(x, season))\"\n], \"fol_conc\": \"JamesFavorite(james, summer)\" }",
      "perplexity": 1.8700515031814575
    }
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Student\", \"FavoriteSeason\"],\n\"fol_consts\": [\"Emma\",\"Mia\", \"James\", \"Spring\", \"Summer\", \"Fall\", \"Winter\"],\n\"fol_rules\": [\n  \"(∃x)(∀y)((Student(x) ∧ FavoriteSeason(x, Summer)) → (LongVacation(x)))\",\n  \"(∃x)(∀y)((Student(x) ∧ FavoriteSeason(x, Fall)) → (LongVacation(x))),\n  \"((Not(FavoriteSeason(Emma, Summer))) ∨ (FavoriteSeason(Mia, Fall)))\"\n],\n\"fol_conc\": \"(James's favorite season is fall)\"\n}\n```",
      "perplexity": 1.5959306955337524
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"FavoriteSeason\"], \"fol_consts\": [\"Emma\", \"Mia\",\"James\", \"Spring\", \"Summer\", \"Fall\", \"Winter\"], \"fol_rules\":[\n   \"∀s ( Student(s) → ∃f FavoriteSeason(s, f)), \",\n  \"∀s ( Student(s) → ∃v (LongVacation(s) and v = s)),\" ,\n    \"FavoriteSeason(s, Summer) ∧ LongVacation(s),\",\n   \"∀x (Student(x) → FavoriteSeason(x,Summer)),\",\n   \"¬ (FavoriteSeason(x,Fall) and Student(x))  \", 10] , \"fol_conc\": [\"James's favorite season is fall.\" ] }\n",
      "perplexity": 2.5595903396606445
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Loves(x, y)\", \"FavoriteSeason(x, y)\"], \"fol_consts\": [\"emma\", \"mia\", \"james\", \"spring\",\"summer\",\"fall\",\"winter\"], \"fol_rules\": [\n  \"∀x (Student(x) → Loves(x, summer))\", \"∃x (Loves(x, summer) ∧ FavoriteSeason(x, summer))\",\n  \"∀x (FavoriteSeason(x, y) → FavoriteSeason(x, y))\", \"∀x (Student(x) → ¬FavoriteSeason(x, fall))\",\n  \"James(x)\" ], \"fol_conc\": \"James(x) ∧ FavoriteSeason(x, fall)\" }",
      "perplexity": 1.7796038389205933
    }
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Season\", \"Student\", \"Loves\"], \"fol_consts\": [\"Spring\", \"Summer\", \"Fall\", \"Winter\", \"Emma\", \"Mia\", \"James\"], \"fol_rules\": [], \"fol_conc\": [\"∃x (Mia Loves ∧ Season(x) = Spring)]\"\n  ,\"}\"]\n  }\n",
      "perplexity": 2.225085973739624
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Loves(y, z)\", \"FavoriteSeason(x, y)\"], \"fol_consts\": [\"emma\", \"mia\",\"james\"], \"fol_rules\": [\n    \"∀x (Student(x) → ∃z (Loves(x, z)) ∧ FavoriteSeason(x, z))\",\n    \"∀y (Student(y) → ∃z (Loves(y, z) ∧ FavoriteSeason(y, z)))\",\n    \"FavoriteSeason(emma, summer)\" ,\n    \"FavoriteSeason(mia, neq)\", \"FavouriteSeason(james, longvacation)\"], \"fol_conc\": \"MiaFavoriteSeason(mia, spring)\"}",
      "perplexity": 1.97747004032135
    }
  },
  {
    "id": 49,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is printed text.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Digital\", \"Analog\", \"PrintedText\", \"StreamingService\", \"HardcoverBook\"],\n\"fol_consts\": [\"1984\"],\n\"fol_rules\": [\n  \"∀x (Digital(x) → Analog(x)), \", \n  \"∀x (PrintedText(x) → Analog(x)),\",\n  \"∀x (StreamingService(x) → Digital(x)),\",\n  \"∀x (HardcoverBook(x) → PrintedText(x)),\",\n  \"If x is StreamingService then x is HardcoverBook.\", \n],\n\"fol_conc\": \"1984 is printed text.\"\n}\n```",
      "perplexity": 1.2192353010177612
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Digital\", \"Analog\", \"PrintedText\", \"StreamingService\",\"HardcoverBook\"],\"fol_consts\":[ \"1984\"],\"fol_rules\": [\n    \"∀x ( Digital(x) ∧ Analog(x)) → False\",\n    \"∀x ( PrintedText(x) ∧ Analog(x))\",\n    \"∀x ( StreamingService(x) ∧ Digital(x)), \" ,\n    \"∀x (HardcoverBook(x) ⟹PrintedText(x)), \",\n    \"∃x (StreamingService(x) ⟹ HardcoverBook(x))\",\n  \"fol_conc\" ,\"1984 is PrintedText.\"\n  ,\"} 2023-06-15T17:27:20.240Z\"] }",
      "perplexity": 2.673982858657837
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DigitalMedia(x)\", \"Analog(x)\", \"PrintedText(x)\", \"StreamingService(x)\", \"HardcoverBook(x)\"], \"fol_consts\": [\"1984\", \"digital\"],  \"fol_rules\": [\n    \"∀x (DigitalMedia(x) → Analog(x))\", \"(Everyprintedtext(x)) → Analog(x)\", \"(∀x (StreamingService(x) → DigitalMedia(x)))\", \"(IfHardcoverBook(x) → PrintedText(x))\", \"(IfStreamingService(x) → HardcoverBook(x))\"], \"fol_conc\": \"∃x (PrintedText(x) ∧ ∀y ((StreamingService(y) ∨ Analog(y))) ∧ ∀z ((DigitalMedia(z) ∧ ¬Analog(z))))\"\n}",
      "perplexity": 2.125457286834717
    }
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Digital\", \"Analog\", \"PrintedText\", \"StreamingService\", \"HardcoverBook\"],\n\"fol_consts\": [\"1984\"],\n\"fol_rules\": [\n  \"∀x (Digital(x) → Analog(x)),\", \n  \"∀x (PrintedText(x) → Analog(x)),\",\n  \"∀x (StreamingService(x) → Digital(x))\",\n  \"∀x (HardcoverBook(x) → PrintedText(x)),\",\n  \"If x is StreamingService then HardcoverBook(x)\" , \n],\n\"fol_conc\": \"1984 is a streaming service.\"\n}\n```",
      "perplexity": 1.278246521949768
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DigitalMedia(x)\", \"Analog(x)\", \"PrintedText(x)\", \"StreamingService(x)\", \"HardcoverBook(x)\"], \"fol_consts\": [\"1984\", \"streaming\" , \"analog\", \"digital\", \"hardcoverbook\"], \"fol_rules\":[\n  \"(∀x (DigitalMedia(x) → Analog(x)))\",\n  \"(∀x (PrintedText(x) → Analog(x)))\", \"(∀x (StreamingService(x) → DigitalMedia(x)))\",\n  \"((HardcoverBook(x) → PrintedText(x)))\", \"(∃x (If1984isAService(x) → If1984IsHardcoverBook(x)))\", \"(∀x (IF1984isAService(x) → IF1984IsHardcoverBook(x)))\"\n], \"fol_conc\": \"(∃x (If1984isAService(x) → If1984IsHardcoverBook(x)))\" }",
      "perplexity": 2.1246416568756104
    }
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Digital\", \"Analog\", \"PrintedText\", \"StreamingService\", \"HardcoverBook\"], \n\"fol_consts\": [\"1984\", ],\n\"fol_rules\": [\n  \"∀x (Digital(x) → Analog(x))\",\n  \"∀x (PrintedText(x) → Analog(x))\",\n  \"∀x (StreamingService(x) → Digital(x))\",\n  \"∀x (HardcoverBook(x) → PrintedText(x))\",\n  \"(StreamingService(y) ∧ HardcoverBook(z)) → (y = z)\"\n],\n\"fol_conc\": \"¬(StreamingService(1984))\"\n}\n```",
      "perplexity": 1.227853536605835
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Digital\", \"Analog\", \"Printed\", \"Streaming\"],\"fol_consts\": [\"1984\"], \"fol_rules\": [\n  \"∀x ( Digital(x) → Analog(x)),\", 2, 3,\n  \"∀x ( Printed(x) → Analog(x)),\", 4, 5\n], \"fol_conc\": \"¬Streaming(1984)\" }\n",
      "perplexity": 2.148390531539917
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DigitalMedia(x)\", \"Analog(x)\", \"PrintedText(x)\", \"StreamingService(x)\", \"HardcoverBook(x)\"], \"fol_consts\": [\"1984\", \"hardcoverbook\"], \"fol_rules\":[\n  \"∀x (DigitalMedia(x) ∧ Analog(x)) → Falsehoods(x)\",\n  \"∀x (PrintedText(x) ∧ Analog(x)) → Truethood(x)\",\n  \"∀x (StreamingService(x) ∧ DigitalMedia(x)) → Truethood(x)\",\n  \"If(x) ∧ HardcoverBook(x) → PrintedText(x)\",\n  \"If(1984, streamingservice) ∧ HardcoverBook(1984) → Truethood(1984)\"\n], \"fol_conc\": \"Falsehoods(1984)\"}",
      "perplexity": 1.808395504951477
    }
  },
  {
    "id": 52,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "Basque is a Romance language.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isRomanceLanguage\", \"isIndoEuropeanLanguage\", \"isFamilyMember\",  \"isRelatedTo\"], \n\"fol_consts\": [\"French\",\"Spanish\",\"German\",\"Basque\"],\n\"fol_rules\": [\n    \"∀x (isRomanceLanguage(x) → isIndoEuropeanLanguage(x)),\",\n    \"∀x (isFamilyMember(language_family, x)) → ∃y  (isRelatedTo(language_family, y),)\", \n    \"∀x (isRomanceLanguage(x) ∧ isFamilyMember(family_name, x)) → French = Spanish\" ,\n    \"German  = Spanish\",\n    \"∀x (not (isRelatedTo(Basque, any)))\",\n\n],\n\"fol_conc\": \"Basque is a Romance language.\"\n}\n```",
      "perplexity": 1.675416111946106
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Romance\", \"Indo-European\", \"LanguageFamily\", \"RelatedTo\"],\n\"fol_consts\": [\"French\",\"Spanish\",\"German\",\"Basque\"], \",\"\n  :[\"RomancesLanguages\"] ,\n\"fol_rules\":[ [], []],\n\"fol_conc\":[\"Basque is a Romance language.\"],\n\"}\"\n   :\n 1.740596238897214\n    }",
      "perplexity": 6.725513458251953
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"RomanceLanguage(x)\", \"IndoEuropeanLanguage(x)\", \"FamilyMember(x, y)\", \"RelatedTo(x, y)\"], \n\"fol_consts\": [\"french\", \"spanish\", \"german\", \"basque\"],  \"fol_rules\": [\n    \"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\", \"∀x (FamilyMember(x, y) → RelatedTo(x, y))\", \"∃x (FamilyMember(x, french) ∧ FamilyMember(x, spanish))\", \"∃x (RelatedTo(x, german) ∧ ¬RelatedTo(x, basque))\"],  \"fol_conc\": \"BasqueFamilyMember(basque)\"\n}",
      "perplexity": 1.8649064302444458
    }
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"RomanceLanguage\", \"IndoEuropeanLanguage\", \"LanguageFamily\", \"RelatedTo\"], \n\"fol_consts\": [\"French\",\"Spanish\", \"German\", \"Basque\"],\n\"fol_rules\":[\n  \"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\",\n  \"∀x (RomanceLanguageFamily(y) → FamilyMember(y, x)\") , \n  \"∀x ∀y (RelatedTo(x, y) → LanguageFamily(y))\",\n  \"∃x (RomanceLanguage(x) ∧ RomanceLanguageFamily(x))\",\n  \"RelationTo(German, Spanish)\"\n],\n\"fol_conc\": \"German is a Romance language.\" \n}\n```",
      "perplexity": 1.4180766344070435
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Romance\", \"Indo-European\", \"LanguageFamily\", \"RelatedTo\"], \"fol_consts\": [\"French\",\"Spanish\",\"German\",\"Basque\"], \"fol_rules\": [\n  \"∀x (Romance(x) → Indo-European(x)),\", \"//All Romance languages are Indo-European. \",\n  \"∀x (LanguageFamily(x) → ∃y (RelatedTo(x, y))),\", \"// All languages within a language family are related to each other.\",\n  \"∀x (Romance(x) → ∃y (LanguageFamily(y) and French(x) or Spanish(x)),\",\"//All Romance Languages are in the Language Family of which they belong. \",\n  \"∃x (RelatedTo(German,Spanish)),\", \" German is related to Spanish.\",\n  \"∀x (Not RelatedTo(Basque, x))\", \"// Basque is not related to any other language.\" ], \"fol_conc\": [\"Germans are a Romance Language.\"] }\n",
      "perplexity": 2.004356861114502
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"RomanceLanguage(x)\", \"IndoEuropeanLanguage(x)\", \"Family(x, y)\"], \"fol_consts\": [\"french\", \"spanish\",\"german\", \"basque\"], \"fol_rules\": [\n    \"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\", \"∀y (Family(y, z) → ∃p (LanguagesIn(y, p)))\", \"∀x (LanguagesIn(x, y) → LanguagesIn(z, x))\"], \"fol_conc\": \"GermanIndoEuropeanLanguage(german)\" }",
      "perplexity": 2.5893919467926025
    }
  },
  {
    "id": 54,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "French is an Indo-European language.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"RomanceLanguage\", \"IndoEuropeanLanguage\", \"Family\",  \"RelatedTo\"], \n\"fol_consts\": [\"French\", \"Spanish\", \"German\", \"Basque\"], \n\"fol_rules\": [\n    \"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\",\n    \"Family(x, y) ↔ FamilyRelation(x, y)\", // Note: this assumes a relation for family membership exists.  \n    \"∀x (RelatedTo(y, x) ∧ RomanceLanguage(y) → RomanceLanguage(x))\",   // Assume Related to implies being in the same language family\n    \"RomanceLanguage(French) ∧ FamilyRelation(Family, French)\", // Assuming Family Relation is a function that relates languages within families.\n    \"∀x (IndoEuropeanLanguage(x) →  RelatedTo(Spanish, x))\",  \n    \"∃y (Languages(y) ∧ RelatedTo(German, y))\",  // Note: this assumes Languages exists to represent language groups or sets of languages.  \n], \n\"fol_conc\": \"French is an Indo-European Language.\" \n}\n```",
      "perplexity": 2.430389165878296
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"RomanceLanguage\", \"IndoEuropeanLanguage\", \"FamilyLanguage\", \"RelatedTo\"], \",\"\n    : [\"French\", \"Spanish\", \"German\", \"Basque\"], \",\"\n  : [ ],\n\"fol_rules\": [],\n\"fol_conc\": []}\n",
      "perplexity": 5.1087846755981445
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"RomanceLanguage(x)\", \"IndoEuropeanLanguage(x)\", \"LanguageFamily(x)\", \"RelatedTo(x, y)\"], \"fol_consts\": [\"french\", \"spanish\", \"german\", \"basque\"], \"fol_rules\": [\n\"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\", \"∀x (LanguageFamily(x) → ∃y (RelatedTo(x, y)))\", \"∀x (RelatedTo(x, y) → LanguageFamily(x) ∧ RelatedTo(y, x))\", \"French(french)\", \"Spanish(spanish)\" ,\n\"German(german)\", \"Basque(basque)\" ], \"fol_conc\": \"French(french)\"}",
      "perplexity": 1.7282379865646362
    }
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Player\", \"SoccerPlayer\", \"Striker\"],\n\"fol_consts\": [\"RobertLewandowski\"], \n\"fol_rules\": [\n    \"∀x (Player(x) → SoccerPlayer(x)),\",  // A player is a soccer player.\n    \"∀x (SoccerPlayer(x) → Striker(x))\", // A soccer player is also a striker.\n    \"¬(Striker(x) ∧ ¬LeftTeam(x, BayernMunich))\", // If a striker left the team they no longer play for that team. \n],\n\"fol_conc\": \"RobertLewandowski → SoccerPlayer(\"\n}\n```",
      "perplexity": 1.5690094232559204
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"SoccerPlayer\", \"Striker\"], \"fol_consts\": [\"Robert Lewandowski\"], \"fol_rules\": [\n    \"∀x (SoccerPlayer(x) ∧ Striker(x)) →  ∃y (Striker(y) ∧ x = y)\", \",\"\n], \"fol_conc\": \"∃y (SoccerPlayer(y) ∧ Robert Lewandowski = y)\" }\n",
      "perplexity": 1.7940655946731567
    }
  },
  {
    "id": 56,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski plays for Bayern Munchen.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Striker\", \"SoccerPlayer\", \"LeftTeam\"],\n\"fol_consts\": [\"Robert Lewandowski\"],\n\"fol_rules\": [\n  \"∀x (Striker(x) → SoccerPlayer(x))\", \n  \"∀x (LeftTeam(x, y) → ¬ (Strikers(y)))\"\n],\n\"fol_conc\": \"¬(LeftTeam(Robert Lewandowski, Bayern Munchen))\"\n}\n```",
      "perplexity": 1.300506353378296
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Striker\", \"SoccerPlayer\", \"Left\"],\n\"fol_consts\": [\"RobertLewandowski\", \"BayernMunchen\"],\n\"fol_rules\": [\n    \"∀x ( Striker(x) → SoccerPlayer(x)), \", \", ∃x ( RobertLewandowski = x ) , ∃y ( Left(RobertLewandowski, y))  → ¬Left(y),\",\n    \"∀x (SoccerPlayer(x) → Left(RobertLewandowski, x)) \"\n],\n\"fol_conc\": \"Robert Lewandowski plays for Bayern Munchen.\"}\n",
      "perplexity": 2.5436954498291016
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Player(x)\", \"SoccerPlayer(x)\", \"Striker(x)\", \"LeftTeam(x, y)\"], \"fol_consts\": [\"robert\", \"lewandowski\", \"bayern\", \"munchen\", \"striker\"], \"fol_rules\": [\n  \"∀x (Player(x) → SoccerPlayer(x))\", \"∃x (Striker(x) ∧ LeftTeam(x, bayern))\", \"¬(LeftTeam(robert, bayern))\",\n  \"(SoccerPlayer(x) → Striker(x))\", \"(LefTTeam(x, y) → ¬(LeftTeam(y, x)))\" ], \"fol_conc\": \"RobertLewandowskiPlaysForBayernMunich(robert)\"}",
      "perplexity": 2.3022429943084717
    }
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Player\", \"SoccerPlayer\", \"Strikers\"],\n\"fol_consts\": [\"Robert Lewandowski\", \"Bayern Munich\",\"Munich\"], \n\"fol_rules\":[ [], {\n    \"predicate\": \"isA\",\n    \"subject\": \"Robert Lewandowski\",\n    \"object\": \"SoccerPlayer\" ,\n}, {\n   \"predicate\": \"isPartOf\",\n   \"subject\": [\"Strikers\"],\n   \"object\": \"Soccer Player\" \n },  {\n   \"predicate\": \"leftTeam\",\n   \"subject\": \"Robert Lewandowski\",\n   \"object\": \"Bayern Munich\"\n } ],\n\"fol_conc\": [ \"Robert Lewandowski is a star.\" ] \n}\n```",
      "perplexity": 1.9723787307739258
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Player\", \"Striker\", \"SoccerPlayer\"], \"fol_consts\": [\"RobertLewandowski\"], \"fol_rules\": [], \"fol_conc\": \"∃x (Player(x) ∧ Striker(x) ∧ Player(RobertLewandowski))\"}\n",
      "perplexity": 1.8311383724212646
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"SoccerPlayer(x)\", \"Striker(x)\", \"LeftTeam(x, y)\"], \"fol_consts\": [\"robert\", \"lewandowski\",\"bayern\", \"munchen\"],  \"fol_rules\": [\n    \"∀x (SoccerPlayer(x) → Striker(x))\", \"∃x (Strikers(x) ∧ LeftTeam(x, bayern))\",\n   \"∀x (LeftTeam(x, y) → ¬Star(y))\"], \"fol_conc\": \"RobertLewandowskiIsAStar(lewandowski)\" }",
      "perplexity": 2.5252068042755127
    }
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"City\", \"∈\"], \n\"fol_consts\": [\"Billings\", \"Montana\", \"Butte\", \"Helena\", \"Missoula\", \"White Sulphur Springs\", \"Pierre\"],\n\"fol_rules\": [\n  \"∀x (City(x) → ∃y (City(y) & x ∈ Montana)),\", \n  \"∀x (City(x) → ∃y (City(y) & y∈Montana),\") ,\n  \"∀x (City(x) → ∃y (City(y) & x ∈ White Sulphur Springs))),\",\n  \"¬(City(x) & City(Pierre)),\" ,\n  \"∀x (City(Butte) ∧ ¬ (City(Pierre)) )\" \n\n],\n \"fol_conc\": [\"White Sulphur Springs and Butte are in the same state.\" ]\n}\n```",
      "perplexity": 1.5676182508468628
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CityOfState(x, y)\", \"InSameState(y1, y2)\"], \"fol_consts\": [\"but\", \"billings\", \"montana\", \"pierre\", \"white\", \"butte\", \"missoula\", \"helena\"], \"fol_rules\":[\n    \"∀x (CityOfState(x, billings) ∧ InSameState(billings, montana))\",\n    \"∃y (InSameState(y, but) ∧ CityOfState(y, white))\",\n    \"∃z (CityOfState(butte, z) ∧ InSameState(white, pierre))\"\n], \"fol_conc\": \"∃x (ButteAndPierreAreInTheSameState(butte, pierre))\"}",
      "perplexity": 2.7294552326202393
    }
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"City\", \"in\"], \n\"fol_consts\": [\"Billings\",\"Montana\", \"Butte\", \"Helena\", \"Missoula\", \"White Sulphur Springs\", \"Pierre\", \"Bismarck\"],\n\"fol_rules\": [  \n    \"∀x ( City(x) → in(x, Montana))\",\n    \"∃y ∧ ∀z (City(z) and in(z, Montana) → y ∈ {Butte, Helena, Missoula})\",\n    \"∃x ∧ ∃y (White Sulphur Springs  and Butte ⊕ x) →  in(x, White Sulphur Springs)\",\n    \"¬(City(Pierre))\", \n    \"∀x ( in(x, Butte) and not in(x, Pierre))\",\n],\n\"fol_conc\": \" ¬ ( ∈ (Pierre, Bismarck))\" \n}\n```",
      "perplexity": 1.7562127113342285
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"in\"], \"fol_consts\": [\"Billings\", \"Montana\", \"Butte\", \"Helena\", \"Missoula\", \"White Sulphur Springs\", \"Pierre\", \"Bismarck\"], \"fol_rules\": [\n\"∀x (City(x) → in(x, Montana))\", \",\"\n  \t \t,\"∀x ∀y (in(x, Montana) → in(y, Montana))\", \",\"\n\t\t,\"∃x ∃y (in(x, Butte) ∧ in(y, Butte))\" , \"→\" ,\"∃x ∃y (in(x, White Sulphur Springs) ∧ in(y, Butte))\", \"∀x ∀y  (City(x) → City(y)),\",\" ¬(in(Pierre, Montana))\",\n\t\t  \"∀x (in(x, Pierre) → not in(x, Montana))\", \",\"\n], \"fol_conc\": [\"¬∃x (in(Bismarck, Montana) ∧ in(Pierre, Montana))\"]}",
      "perplexity": 2.148751735687256
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CityOf(x, y)\", \"InState(x, y)\"], \"fol_consts\": [\"billings\", \"montana\", \"butte\", \"helenas\", \"missoula\", \"white\", \"sulphur\", \"springs\", \"pierre\"], \"fol_rules\": [\n  \"∀x (CityOf(x, billings) → InState(x, montana))\", \"∀x (InState(x, montana) ∧ CityOf(x, butte) → InState(x, white))\", \"∃y (CityOf(y, butte) ∧ ¬InState(y, pierre))\", \"∀x (CityOf(x, pierre) → ¬InState(x, montana))\", \"¬(∃x (CityOf(x, butte) ∧ InState(x, pierre)))\"\n], \"fol_conc\": \"∃x ∃y (InState(x, white) ∧ InState(y, pierre))\"}",
      "perplexity": 1.9027808904647827
    }
  },
  {
    "id": 60,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Montana is home to the city of Missoula.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"City\", \"∈\", \"is a\"],\n\"fol_consts\": [\"Billings\", \"Montana\", \"Butte\", \"Helena\", \"Missoula\", \"White Sulphur Springs\", \"Pierre\"], \n\"fol_rules\": [\n    \"∀x ( City(x) →  ∃y (City(y) and x∈ y ) ) \", \n    \"∀x ( is a (x, Montana) ↔ ∃y (City(y) and x∈y))\", \n    \"∀x (is a (x , Butte) implies ¬ is a ( x , Pierre))\",\n    \"∀x ( City(x) →  ¬ is a (x, Pierre) ) \"\n],\n\"fol_conc\": [ \"Montana ⊆  ∃y (City(y))\"]\n}\n```",
      "perplexity": 1.8179216384887695
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"in\"],\n\"fol_consts\": [\"Billings\", \"Montana\", \"Butte\", \"Helena\", \"Missoula\", \"White Sulphur Springs\", \"Pierre\"],\n\"fol_rules\": [\n  \"∀x (City(x) → ∃y (City(y) and in(x, y)) )\",\n  \"∀x (in(x, Montana) → ∃y (City(y) and in(x, y)))\",\n  \"∀x (City(x) → ∃z (in(White Sulphur Springs, x) and in(Butte, z))),\",\n  \"¬(in(Pierre, Montana))\",\n  \"∀x (in(x, Pierre) → ¬(City(x)))\"\n],\n\"fol_conc\": \"∃y (in(Montana, Missoula) )\" }\n",
      "perplexity": 1.5141115188598633
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CityOf(x)\", \"InState(x, y)\"], \"fol_consts\": [\"billings\", \"montana\", \"butte\", \"helenia\", \"missoula\", \"white\", \"sulphur\", \"springs\", \"pierre\"],  \"fol_rules\": [\n    \"∀x (CityOf(x) → InState(x, montana))\", \"∃y (InState(y, montanans) ∧ CityOf(y))\", \"(WhiteSulphprSpringsCity(b) ∧ ButteCity(b)) → InState(b, montana)\", \"¬(InState(p, montana))\", \"∀x (CityOf(x) ∧ ¬InState(x, pierre))\"], \"fol_conc\": \"∃y (InState(y, montanans) ∧ CityOf(y) ∧ Missoula(y))\"}",
      "perplexity": 2.3339426517486572
    }
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"InternationalStudent\", \"F1Visa\", \"J1Visa\", \"needsToApplyForCPT\", \"needsToWork\"], \n\"fol_consts\": [\"Mike\"],\n\"fol_rules\": [\n  \"∀x (InternationalStudent(x) → ∃y (F1Visa(x, y)) ∨ ∃z (J1Visa(x, z))),\", \n  \"∀x (InternationalStudent(x) & F1Visa(x, y) → needsToApplyForCPT(x)),\", \n  \"∀x (InternationalStudent(x) & needsToWork(x) → needsToApplyForOPT(x))\"\n],\n\"fol_conc\": \"Mike has an F1 visa.\"\n}\n```",
      "perplexity": 1.252882719039917
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"InternationalStudent\", \"F1Visa\", \"J1Visa\"],\"fol_consts\": [\"Mike\"],\"fol_rules\":[\n  [\"∀x (InternationalStudent(x) → ∃y (F1Visa(x, y))),\\n\",\"All international students are either F1 or J1 visa holders.\"],\n  [\"∀x (InternationalStudent(x) → ∃p (NeedForCPT(x, p)) if  F1Visa(x)),\\n\", \"If an International student has an F1 Visa then they need to apply for CPT\"],\n  [\"Mike is InternationalStudent \\n\",\"Mike is an international student\"] ,\n  [\"∀x (InternationalStudent(x) → NeedForCPT(x,OPT)) if ∃y (F1Visa(x)),\\n\", \"If Mike is an International Student then he needs to apply for OPT\"],\n  [\"∀x (InternationalStudent(x) → ¬NeedForCPT(x, CPT)), \\n\",\"If a student is international and they need not apply for CPT\"] ],\n\"fol_conc\": [\"Mike has an F1 visa.\"] }\n",
      "perplexity": 2.0922276973724365
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"InternationalStudent(x)\", \"F1Visa(x)\", \"J1Visa(x)\", \"NeedsApplyCPT(x, y)\", \"WorksInUS(x)\"], \"fol_consts\": [\"mike\", \"us\",\"f1visa\",\"j1visa\",\"cpt\"], \"fol_rules\": [\n    \"∀x (InternationalStudent(x) → ∃y (F1Visa(y)) ∨ ∃z (J1Visa(z)))\",\n    \"∀x (F1Visa(x) → NeedsApplyCPT(x, worksinus))\",\n    \"Mike(mike)\",\n    \"NeedsApplyCPT(mike, worksinus)\"\n], \"fol_conc\": \"Mike(mike) ∧ F1Visa(mike)\" }",
      "perplexity": 1.6502363681793213
    }
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"InternationalStudent\", \"F1Visa\", \"J1Visa\", \"US\",  \"needsToApplyForCPT\", \"OPT\"],\n\"fol_consts\": [\"Mike\"], \n\"fol_rules\": [\n    \"(∀x( InternationalStudent(x) → (∃y ( F1Visa(x, y))))),\",\n    \"(∀x(InternationalStudent(x) & F1Visa(x, y)) → needsToApplyForCPT(x)),\", \n    \" (∀x(InternationalStudent(x) →  needsToApplyForOPT(x))),\",\n],\n \"fol_conc\": \"(∃y ( J1Visa(Mike,y)))\" \n}\n\n```",
      "perplexity": 1.8817336559295654
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"InternationalStudent\", \"F1Visa\", \"J1Visa\", \"WorkInUS\"],\"fol_consts\": [\"Mike\"],\"fol_rules\": [],\"fol_conc\": []}\n",
      "perplexity": 1.9098005294799805
    }
  },
  {
    "id": 63,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "Ted is a pet.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isBovine\", \"isPet\", \"isDomesticated\", \"isAlligator\"],\n\"fol_consts\": [\"Ted\"],\n\"fol_rules\": [],\n\"fol_conc\":  [] \n}\n```",
      "perplexity": 1.316528558731079
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bovine\", \"Domesticated\"],\"fol_consts\": [\"Ted\",\"Cows\",\"Pets\",\"Alligators\"],\"fol_rules\":[\n  \"∀x (Bovine(x) → Domesticated(x))\", 2,\n  \"∃y (Pet(y) ∧ Bovine(y))\",\n  \"¬(Domesticated(Ted) ∧ Alligator(Ted))\" , 3,\n  \"∀x (Bovin(x) ∨ Pet(x)),\" ],\"fol_conc\": \"Ted is a pet\"}\n",
      "perplexity": 2.265526056289673
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bovine(x)\", \"Pet(y)\", \"Domesticated(z)\"], \"fol_consts\": [\"c\", \"a\",\"t\"], \"fol_rules\": [\n    \"∀x (Bovine(x) → Domesticated(x))\", \"∃y (Pet(y) ∧ Bovine(y))\", \"¬(Domesticated(x) ∧ Alligator(x))\",\n   \"Ted(a)\"], \"fol_conc\": \"Ted(t)\"}",
      "perplexity": 2.2279393672943115
    }
  },
  {
    "id": 64,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "Ted is a pet and a cow.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"bovines\", \"pets\", \"domesticated\"],\n\"fol_consts\": [\"Ted\"],\n\"fol_rules\": [\n  \"∀x (bovines(x) → domesticated(x))\", \n  \"∃x (pets(x) ∧ bovines(x))\",\n  \"∀x (bovine(x) → domestication(x))\",\n  \"¬∀x (domesticated(x) ⟹ alligator(x))\" ,\n],\n \"fol_conc\": \"Ted is a pet and a bovine.\"\n}\n```",
      "perplexity": 1.3592146635055542
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bovine\", \"Pet\",\"Domesticated\"],\"fol_consts\": [\"Ted\",\"Alligator\"],\"fol_rules\": [\n  \"(∀x)(Bovine(x) → Domesticated(x)),\" , 4, \"(∃x)(Pet(x) ∧ Bovine(x))\",\n  \"(¬Domsticated(A) ∧ Alligator(A))\"\n], \"fol_conc\": \"Ted is a pet and a cow.\"}\n",
      "perplexity": 2.2755496501922607
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bovine(x)\", \"Pet(y)\", \"Domesticated(z)\"], \"fol_consts\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"fol_rules\": [\n    \"∀x (Bovine(x) → Domesticated(x))\", \"∃x (Pet(x) ∧ Bovine(x))\", \"¬(Domesticated(a) ∧ Alligator(a))\", \"Ted(e)\"\n], \"fol_conc\": \"Ted(e)\"}",
      "perplexity": 2.0318312644958496
    }
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Bovine\", \"Pet\", \"Domesticated\",  \"Cows\"], \n\"fol_consts\": [\"Ted\", \"Alligator\"], \n\"fol_rules\": [\n    \"∀x (Bovine(x) → Domesticated(x)),\",\n    \"∃x (Pet(x) ∧ Bvines(x))\",\n    \"∀x (Domesticated(x) → ¬ Alligator(x)),\"\n],\n\"fol_conc\": \"If Ted is a cow, then Ted is not a pet.\"\n}\n```",
      "perplexity": 1.3147417306900024
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bovine\", \"Pet\"],\"fol_consts\":[ \"Ted\",\"cow\",\"pet\",\"alligator\"], \"fol_rules\": [\n  \"∀x (Bovine(x) → Domesticated(x)),\", 0, 2\n], \"fol_conc\": \"If Ted is a cow then Ted is not a pet.\" }\n",
      "perplexity": 2.7122011184692383
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Cows(x)\", \"Bovines(x)\", \"Pets(x)\", \"Domesticated(x)\", \"Alligators(x)\"], \"fol_consts\": [\"ted\", \"cow\", \"pet\", \"bovine\"], \"fol_rules\": [\n    \"∀x (Bovinies(x) → Domesticated(x))\", \"∃x (Pets(x) ∧ Cows(x))\", \"¬(Domesticated(x) ∧ Alligator(x))\" , \"Ted(ted)\" ],  \"fol_conc\": \"IfTed(ted) ∧ ¬Pet(ted)\"}",
      "perplexity": 2.1982388496398926
    }
  },
  {
    "id": 66,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "A private Ivy League research university moved to New Haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Private\", \"IvyLeague\", \"ResearchUniversity\", \"MovedTo\", \"ValuedAt\"], \n\"fol_consts\": [\"Yale University\",\"New Haven\"],\n\"fol_rules\": [],\n\"fol_conc\": \"∀x ( Private(x) → IvyLeague(x) )  ∧ ∃x ( ResearchUniversity(x) ∧ MovedTo(x, NewHaven))\"\n}\n```",
      "perplexity": 1.59946608543396
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Private\", \"IvyLeagueResearchUniversity\", \"MovedTo\", \"Endowment\"],\"fol_consts\": [\"Yale University\",\"New Haven\"], \"fol_rules\": [[\"<private> (x) ∧ <ivyleague> (y) ∧ <researchuniversity> (z) ⟹ private ivy league research university moves to new haven. \", \"<Private> (x), <Ivy League Research University>(y) , <ResearchUniversity> (z)\"], [\"Yale University\" , \"MovedTo\", \"New Haven\"]], \"fol_conc\": \"A Private Ivy League research university moved to New Haven.\"}\n",
      "perplexity": 2.4239585399627686
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Private(x)\", \"IvyLeague(x)\", \"ResearchUniversity(x)\", \"MovedTo(x, y)\"], \"fol_consts\": [\"yale\", \"newhaven\"], \"fol_rules\": [\n  \"∀x (Private(x) ∧ IvyLeague(x) → MovedTo(x, newhaven))\"\n], \"fol_conc\": \"AYaleUniversitymovedtoNewHaven(y)\" }",
      "perplexity": 2.350501775741577
    }
  },
  {
    "id": 67,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Yale University has the largest university endowment of any educational institution.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"University\", \"Private\", \"IvyLeague\", \"Research University\", \"MovedTo\", \"Endowment\",  \"ConstituentCollegesAndSchools\", \"ResidentialCollege\"], \n\"fol_consts\": [\"Yale University\", \"New Haven\", \"$42.3 billion\", \"27\"],\n\"fol_rules\": [],\n\"fol_conc\": \"For all universities, if a university is a Private Ivy League Research University and has the largest endowment among educational institutions then Yale University is that university.\" \n}\n```",
      "perplexity": 1.5290471315383911
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"University\", \"Private\", \"Ivy League\", \"Research\", \"FoundedIn\"],\n\"fol_consts\": [\"Yale University\", \"New Haven\", \"$42.3 billion\", 27, \"Residential Colleges\"],\n\"fol_rules\": [\n    \"∀x (University(x) → Private(x))\",\n    \"∀x (IvyLeague(x) → Research(x))\",\n    \"∃x (FoundedIn(Yale University, New Haven, 1716))\",\n    \"∃x (Endowment(x, $42.3 billion)\",\n    \"∀y (University(y) → ResidentialColleges(y))\",\n    \"∀z (Residential Colleges(z) → Yale University(z))\",\n  \"∀x (YaleUniversity(x) ∧ University(x) ∧ Research(x) ∧ Private(x))\",\n \"∃x (Endowment(x, $42.3 billion) ∧ ResidentialColleges(x))\" ,\n    \"∀y (Residential Colleges(y) → YaleUniversity(y))\"\n],\n  \"fol_conc\": \"Yale University has the largest endowment of any educational institution.\"}\n",
      "perplexity": 1.7070480585098267
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"University(x)\", \"IvyLeague(y)\", \"Private(z)\", \"ResidentialCollege(a)\", \"GraduateSchool(b)\"], \"fol_consts\": [\"p1\",\"p2\", \"p3\", \"p4\",\"p5\",\"p6\", \"p7\",\"p8\", \"p9\", \"p10\", \"p11\", \"p12\", \"p13\",\"p14\"], \"fol_rules\": [\n\"∀x ∃y (University(x) → IvyLeague(y))\",\n\"∀x (University(x) → Private(z))\", \"∀x (ResidentialCollege(a) → University(x))\",\n\"∀x (GraduateSchool(b) → University(x))\", \"∀x ∃y (YaleUniversity(x) → ResidentialCollege(y))\",\n\"∀x ∃y (YaleUniversity(x) → GraduateSchool(y))\",\n\"Forall(a, b) → (ResidentialCollege(a) ∧ GraduateSchool(b))\"\n], \"fol_conc\": \"ThereExists(e) ∧ (University(e) → IvyLeague(e))\"}",
      "perplexity": 1.9806759357452393
    }
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"ResidentialCollege(x)\", \"PrivateUniversity(y)\", \"IvyLeagueSchool(z)\"],\n\"fol_consts\": [\"Yale University\", \"Pierson College\"],\n\"fol_rules\": [],\n\"fol_conc\": \"ΠxC. ResidentialCollege(x) ∧ PrivateUniversity(y) → PiersonCollege=x\"\n}\n\n```",
      "perplexity": 1.7110891342163086
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"ResidentialCollegeAt\", \"PrivateIvyLeagueResearchUniversity\"], \",\"\n  \t  : [ \"YaleGraduateSchoolOfArtsAndSciences\" ],\n  \t\t\"fol_consts\": [ \"Yale University\", \"Benjamin Franklin College\", \"Berkeley College\", \"Branford College\", \"Davenport College\", \"Ezra Stiles College\", \"Grace Hopper College\", \"Jonathan Edwards College\", \"Morse College\", \"Pauli Murray College\", \"Pierson College\", \"Silliman College\", \"Timothy Dwight College\", \"Trumbull College\" ],\n  \t\t\"fol_rules\": [ \"], \"],\n\t \"fol_conc\": [\"PiersonCollege is a ResidentialCollegeAtYale.\" ] }\n",
      "perplexity": 2.720682144165039
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"ResidentialCollege(x)\", \"University(x)\", \"IvyLeague(x)\", \"Private(x)\"], \"fol_consts\": [\"yalle\", \"newhaven\", \"423000000000\", \"1716\", \"benjaminfranklincollege\", \"berkeleycollege\",\"branfordcollege\",\"davenportcollege\",\"ezrastylescollege\", \"gracehoppercollege\",\"jonathanedwardscollege\", \"morsecollege\", \"paulimurraycollege\",\"piersoncollege\",\"saybrookcollege\",\"sillimancollege\",\"timothydwightcollege\",\"trumbullcollege\"], \"fol_rules\": [\n    \"∀x (University(x) → ∃y (ResidentialCollege(y) ∧ University(y)) ∨ Private(x) ∧ IvyLeague(x))\",\n  \"∀x (ResidentialCollege(x) ∧ University(x)) → Yale(x)\",\n  \"Yale(yalle)\" ,\n  \"∀x (University(x) → ResidentialCollege(x))\" ], \"fol_conc\": \"PiersonCollege(piersoncollege)\"}",
      "perplexity": 1.778199315071106
    }
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isA\", \"pilots\",  \"workingTitle\"], \n\"fol_consts\": [\"Badults\", \"Pappy's\", \"BBC Three\", \"July 2013\", \"The Secret Dude Society\", \"Andrew Collins\"],\n\"fol_rules\": [], \n\"fol_conc\": \"∃x (isA(x, Badults)∧ pilots(x, BBC Three)∧ workingTitle(x, 'The Secret Dude Society') \\wedge isA(Andrew Collins, x))\"\n}\n```",
      "perplexity": 1.4018654823303223
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Badults\", \"Pappy's\", \"script editor\"], \"fol_consts\": [\"Andrew Collins\", \"The Secret Dude Society\", \"BBC Three\", \"July 2013\"], \"fol_rules\": [], \"fol_conc\": [\"Andrew Collins is a script editor for Badults, which has the working title The Secret Dude Society.\"]}\n",
      "perplexity": 1.5287259817123413
    }
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"BritishSitcom\", \"starsIn\", \"pilotsOn\", \"workingTitle\"],\n\"fol_consts\": [\"Badults\", \"Pappy's\", \"BBC Three\", \"BBC Two\", \"July 2013\", \"The Secret Dude Society\",  \"Andrew Collins\"],\n\"fol_rules\": [\n    \"∀x (starsIn(x, Badults) → BritishSitcom)\",\n    \"∀x (pilotsOn(x, BBC Three) → Pappy's)\",\n    \"∃y (workingTitle(Pappy's, y))\",\n    \"¬(pilotsOn(Badults, BBC Two) ∨ pilotsOn(BBC Three, Badults))\"\n],\n\"fol_conc\": \"No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\"  \n}\n```",
      "perplexity": 1.360280990600586
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Badults\", \"Pappy's\", \"StarredIn\"], \"fol_consts\": [\"BBC Three\", \"BBC Two\", \"July 2013\", \"The Secret Dude Society\"], \"fol_rules\": [], \"fol_conc\": [] }\n",
      "perplexity": 1.7064257860183716
    }
  },
  {
    "id": 71,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Stock\", \"Company\", \"GrowthStock\"], \n\"fol_consts\": [\"KO\"],\n\"fol_rules\": [\n    \"(∀x)(Stock(x) → Volatile(x))\",  \n    \"(∀x)(Volatile(x) → NotSuitableForRetirementFund(x))\", \n    \"(∃x)(Company(x) → GrowthStocksOfCompanies(x, x))\",  \n    \"(∀x)(MatureCompany(x) → SuitableForRetirementFund(x))\", \n    \"Stock(KO)\",\n],\n\"fol_conc\": \"KO is a Company Stock.\"\n}\n```",
      "perplexity": 1.4697980880737305
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GrowthStock\", \"Volatile\", \"SuitableForRetirementFund\"],\"fol_consts\": [\"KO\"],\"fol_rules\": [\n  \"∀x (GrowthStock(x) → Volatile(x))\", \"\\n\\t\\t\\t\\t\\t \\t\\t\\t\\t∀x ∀y (Volatile(x, y) → NotSuitableForRetirementFund(x, y))\\n\\t\\t\\t\\t\\t \\t\\t\\t\\t∃y ∃z (GrowthStock(y) → CompanyStock(z))\", \"∀x (CompanyStock(x) → SuitableForRetirementFund(x))\"\n], \"fol_conc\": \"KO is a company stock.\"} ",
      "perplexity": 1.891685128211975
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CompanyStock(x)\", \"GrowthStock(x)\", \"Volatility(y)\",\"SuitableForRetirementFund(z)\"], \"fol_consts\": [\"ko\", \"company1\", \"mature\"], \"fol_rules\": [\n  \"∀x (CompanyStock(x) → GrowthStock(x))\", \"∀x (Volatility(x) → NotSuitableForRetirementFund(x))\",\n  \"∃x ∃y (GrowthStock(x) ∧ CompanyStock(y))\", \"∀z (SuitableForRetirementFund(z) ∧ AllStocksOfCompany(z))\",\n  \"KO(ko)\" ], \"fol_conc\": \"KO(ko)\"}",
      "perplexity": 2.0872914791107178
    }
  },
  {
    "id": 72,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock and a growth stock of a company.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GrowthStock\", \"Volatile\", \"SuitableForRetirementFund\"], \n\"fol_consts\": [\"KO\"],\n\"fol_rules\": [\n    \"(∀x) (GrowthStock(x)) → (Volatility(x)),  // All growth stocks are volatile.\", \n    \"(∀x)(Volatility(x)) → ¬(SuitableForRetirementFund(x)), // If a stock is volatile, it's not suitable for retirement.\" , \n    \"∃x (SomeStocksOfCompanies(x))\",   // Some stocks of some companies.\n    \"AllStockofMatureCompany(KO)  → SuitableForRetirementFund(KO)\",   // All stocks of mature company are suitable.\n],\n \"fol_conc\": \"(GrowthStock(KO) ∧ Volatilesity(KO))\" \n}\n\n```",
      "perplexity": 2.0142741203308105
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Stock\", \"GrowthStock\", \"Company\", \"SuitableForRetirementFund\"], \"fol_consts\": [\"KO\"], \"fol_rules\": [\n    \"∀x (Stock(x) → Volatile(x)),\", \",\"\n    \t, \"(Volatile(x) → ¬SuitableForRetirementFund(x))\",\n    \", ∃x ∃c (GrowthStock(x, c))\", \",\"\n    \t,\"∀x ∀y (Company(x) → SuitableForRetirementFund(y)),\" , \"∀x (GrowthStock(x, c)  → Stock(x))\"\n], \"fol_conc\": [\"KO is a company stock and a growth stock of a company.\" ]}\n",
      "perplexity": 2.322620391845703
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GrowthStock(x)\", \"Volatile(x)\", \"SuitableForRetirementFund(x)\", \"CompanyStock(x)\", \"MatureCompany(x)\"], \"fol_consts\": [\"ko\", \"growthstock\"], \"fol_rules\": [\n  \"∀x (GrowthStock(x) → Volatile(x))\", \"∀x (Volatile(x) → ¬SuitableForRetirementFund(x))\", \"(∃x (StocksOfSomeCompanies(x, y)) ∧ (CompanyStock(y))) → GrowthStock(y)\", \"∀x (MatureCompany(x) → SuitableForRetirementFund(x))\", \"(KO(x) ∧ MatureCompany(x))\"\n], \"fol_conc\": \"KO(ko)\"}",
      "perplexity": 2.0626213550567627
    }
  },
  {
    "id": 73,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"GrowthStock\", \"Volatile\",  \"SuitableForRetirementFund\", \"Company\"], \n\"fol_consts\": [\"KO\"], \n\"fol_rules\": [\n   \"(∀x)( GrowthStock(x) → Volatile(x))\",\n   \"(∀x)((Volatility(x) → Not SuitableForRetirementFund(x)))\",\n   \"(∃x)(SomeStocksOfCompanies (x))\",\n   \"(∀x)(Company (x) → SuitableForRetirementFund(x))\", \n    \"(KO  is a Company)\",\n ],\n\"fol_conc\": \"(∃x)((GrowthStock(x) ∨ Volatility(x))→ Not StockofCompany(x) ∧ Not Volatility(x))\"\n}\n```",
      "perplexity": 1.8358044624328613
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GrowthStock(x, y)\", \"Volatile(x)\", \"SuitableForRetirementFund(x)\", \"Company(y)\"], \"fol_consts\": [\"KO\", \"\",\"\",\"\"], \"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 1.982699990272522
    }
  },
  {
    "id": 74,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Joe's license plate begins with the number 34.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"VehicleRegistrationPlate\", \"beginWith\", \"isFrom\"],\n\"fol_consts\": [\"Istanbul\",\"34\", \"35\"],\n\"fol_rules\": [ \n   \"∀x (VehicleRegistrationPlate(x) → beginWith(x, '34'))\", \n   \"∀x (not VehicleRegistrationPlate(x)) → not isFrom(x,\" Istanbul\")\",  \n   \"∃x (isFrom(x, \"Istanbul\"))\",\n   \"∀x (beginWith(x,'35') → not beginWith(x, '34'))\", \n   \"VehicleRegistrationPlate(Joe) and isFrom(Joe, 'Istanbul')\"\n],\n\"fol_conc\":  \"∃x (beginWith(x,\" 34\") ) \" \n}\n```",
      "perplexity": 1.5783679485321045
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"VehicleRegistrationPlate\", \"City\"], \"fol_consts\": [\"Istanbul\",\"34\",\"Joe\",\"Tom\"], \"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 2.171705961227417
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"VehicleRegistrationPlate(x)\", \"City(y)\"], \"fol_consts\": [\"34\", \"35\", \"istanbul\"], \"fol_rules\": [\n\"∀x (VehicleRegistrationPlate(x) → ∃y (City(y) ∧ VehicleRegistrationPlate(x)))\", \"(TomsLicensePlateBeginsWith35(x)) → ¬(VehicleRegistrationPlate(x) ∧ ∃y (City(y) ∧ VehicleRegistrationPlate(x)))\"\n], \"fol_conc\": \"Joe(x) → ∃y (VehicleRegistrationPlate(x) ∧ City(y))\"}",
      "perplexity": 2.0574092864990234
    }
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"VehicleRegistrationPlate\", \"inIstanbul\"],\n\"fol_consts\": [\"34\", \"Istanbul\", \"Joe\", \"Tom\"],\n\"fol_rules\": [\n  \"∀x ( VehicleRegistrationPlate(x) → inIstanbul(x))\", \n  \"∀x (not inIstanbul(x) → ¬VehicleRegistrationPlate(x))\",\n  \"∃x (VehicleRegistrationPlate(x) & inIstanbul(x))\", \n],\n\"fol_conc\": \"Tom's license plate is from Istanbul.\"\n}\n```",
      "perplexity": 1.3000214099884033
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"RegistrationPlate\"], \"fol_consts\": [\"Istanbul\",\"Joe\", \"Tom\",\"34\",\"35\"], \"fol_rules\": [\n\"∀x (City(x) → ∃y RegistrationPlate(x, y)),\\n  \\t\\t∀x (RegistrationPlate(x, y) → City(x))\", \"\\t\\t∀x (Vehicle(x) → RegisteredInPlace(x)), \\n        \\t    ∀x (RegisteredInPlace(x) → RegistrationPlate(x,y))\"\n], \"fol_conc\": [\"Tom's license plate is from Istanbul.\"]}\n",
      "perplexity": 2.3064041137695312
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"VehicleRegistrationPlate(x)\", \"City(y)\"], \"fol_consts\": [\"34\", \"35\", \"istanbul\"], \"fol_rules\": [\n  \"∀x (VehicleRegistrationPlate(x) → ∃y (City(y) ∧ VehicleRegistrationPlate(x) ⊕ City(y)) ∧ ∀z (VehicleRegistrationPlate(z) ∨ ∃u (VehicleRegistrationPlate(u) ∧ City(u))))\",\n  \"∀x (VehicleRegistrationPlate(x) → ¬(City(x)))\",\n  \"∀x (Joe(x) ∧ VehicleRegistrationPlate(x))\", \"(Tom(x) ∧ VehicleRegistrationPlate(x))\" , \"IF(35, x)\", \"IF(34, y)\"\n], \"fol_conc\": \"Tom(x)\"}",
      "perplexity": 2.104792356491089
    }
  },
  {
    "id": 76,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary needs to earn money to help pay for her college tuition.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"StudentJob(x)\", \"WorkInStudentJobs(x,y)\", \"NeedsToEarningMoneyForTuition(x)\", \"TakeoutFrequent(x)\",  \"DiningHallMealsAndRecipesEnjoyment(x)\", \"PickyEater(x)\"], \n\"fol_consts\": [\"Mary\", \"College\",\"Campus\"], \n\"fol_rules\": [\"\"], \n\"fol_conc\": [\"NeedsToEarningMoneyForTuition(Mary)\"]\n}\n```",
      "perplexity": 1.7912731170654297
    },
    "logic_problem_json": {
      "raw": "{}\n  \t \t",
      "perplexity": 217.76463317871094
    }
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"StudentJob(x)\",  \"EarnMoney(x, y)\", \"OrderTakeoutFrequently(x)\", \"EnjoyDiningHallMealsAndRecipes(x)\", \"PickyEater(x)\", \"SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x)\" ],\n\"fol_consts\": [ \"Mary\" ], \n\"fol_rules\": [  \"\", \"If StudentJob(x) then EarnMoney(x, y), If OrderTakeoutFrequently(y) then StudentJob(x)\", \"\", \"\" ,\"\"],\n\"fol_conc\": \" Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\" \n}\n```",
      "perplexity": 1.5633289813995361
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"StudentJob(x)\", \"TakeoutFrequent(x)\", \"EatInDiningHall(x)\", \"PickyEater(x)\", \"SpendTimeEatingAndCatchingUpWithFriends(x)\"],\"fol_consts\": [\"Mary\"], \"fol_rules\": [[\"StudentJob(x) ∧ NeedMoneyToPayForTuition(x) → ¬PickyEater(x)\", \"TakeoutFrequent(x) ∧ StudentJob(x) → x\", \"EatInDiningHall(x) ∨ TakeOutFrequent(x)\"],\"If EatInDiningHall(x) then x is not PickyEater(x)\"], \"fol_conc\": [\"Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\" ] }\n",
      "perplexity": 1.463295817375183
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"WorksInStudentJobs(x)\", \"NeedsMoneyToPayForCollegeTuition(x)\", \"OrdersTakeoutFrequently(x)\", \"EnjoysDiningHallMealsAndRecipes(x)\", \"IsPickyEater(x)\", \"SpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x)\"], \"fol_consts\": [\"mary\", \"college\"], \"fol_rules\": [\n  \"∀x (WorksInStudentJobs(x) ∧ NeedsMoneyToPayForCollegeTuition(x)) → ¬IsPickyEater(x)\",\n  \"∀x (OrdersTakeoutFrequently(x) ∨ EnjoysDiningHallMealsAndRecipes(x)) → WorksInStudentJobs(x)\" ,\n  \"∀x (EnjoysDiningHallMealsAndRecipes(x) → IsPickyEaters(x))\",\n  \"¬IsPickyEater(mary)\",\n  \"SpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary) ∧ ¬IsPickyEaters(mary)\" ], \"fol_conc\": \"MarySpendsAlotOfHerTimeEatingAndCatchingUpWithFriendsInTheCampusDiningHallsAndIsNotPickyEater(mary)\" }",
      "perplexity": 1.5527340173721313
    }
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"WorkInStudentJobs\", \"EarnMoney\", \"OrderTakeoutFrequently\", \"EnjoyDiningHallMealsAndRecipes\", \"PickyEater\"], \n\"fol_consts\": [\"Mary\"],\n\"fol_rules\": [],\n\"fol_conc\": \"¬(PickyEater(Mary) → SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(Mary))  ∨ ¬(SpendTimeEatingCatchingUpWithFriendsInCampusDiningHalls(Mary)) ∧ (NotPickyEater(Mary)) \"\n}\n```",
      "perplexity": 1.487496018409729
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"StudentJob\", \"OrderTakeout\", \"PickyEats\", \"NeedMoney\", \"EnjoyDiningHall\"],\"fol_consts\": [\"Mary\",\"Campus\"],\"fol_rules\": [\n  \"∀x (StudentJob(x) → NeedMoney(x)), \",\n  \"∀x (OrderTakeout(x) → StudentJob(x))\", \"];\" ,\n  \"∃x (PickyEats(x) ∧ NotNeedMoney(x)),\",\n  \"EnjoyDiningHall(x) ∨ OrderTakeout(x)\",\n  \"NotPickyEats(x) ∧ EnjoyDiningHall(x), \", 0] ,\"fol_conc\": [\"Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\"] }\n",
      "perplexity": 1.993446946144104
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"StudentJobs(x)\", \"NeedsMoneyToPayForTuition(x)\", \"OrdersTakeoutFrequently(y)\", \"WorksInCampusJobs(x)\", \"IsPickyEater(x)\", \"EnjoysDiningHallMealsAndRecipes(x)\"], \"fol_consts\": [\"mary\"], \"fol_rules\": [\n\"IfStudentJobsOnCampus(x) ∧ NeedsMoneyToPayForTuition(x) → ¬IsPickyEater(x)\",\n\"IfOrdersTakeoutFrequently(y) ∧ WorksInCampusJobs(x) → IsPickyEater(x)\",\n\"EitherOrderTakeOutFrequentlyOrEnjoysDiningHallMealsAndRecipes(y) → EitherIsNotPickyEatersOrSpendsAlotOfTimeEatingCatchUpWithFriendsInTheCampusDiningHalls(y)\"\n], \"fol_conc\": \"MaryEitherIsNotAPickyEaterOrIfSheIsThenSheSpendsalotOfHertimeEatingCatchingupwithfriendsinthecampusdininghalls(mary)\"}",
      "perplexity": 1.9950122833251953
    }
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Bakery\", \"Cupcake\", \"Hotpot\", \"Spicy\"],\n\"fol_consts\": [\"Baked by Melissa\",\"Thai Chilies\"],\n\"fol_rules\": [\n  \"∀x (Bakery(x) → Spicy(x))\", \n  \"∀x (Cupcake(x) → Bakery(x))\",\n  \"∀x (Hotpot(x) → Spicy(x))\",\n  \"∀x (ProductOfBakedMelissa(x) → Cupcake(x))\",\n  \"If (Spicy(x) ∨ Bakery(x)) then (Hotpot(x) ∨ Spicy(x))\",\n],\n \"fol_conc\": \"Thai Chilies are a Product of Baked by Melissa.\"\n}\n\n```",
      "perplexity": 1.3365545272827148
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\", \"Product\"],\n\"fol_consts\": [\"Baked by Melissa\", \"Dried Thai chilies\"], \",\"\n  \t  :\"fol_rules\",\n    \"BakedByMelissa(x) : x ∈ Bakery \\n Spicy (y) : y ∈ Spicy\\n Cupcake(z) : z ∈ Cupcake\\n Hotpot(w): w ∈ Hotpot\\n Product(a,b) : a is product of b \\n  AllCupcakes are bakeries\"\n    : \"If dried Thai chilies are spicy or bakery then Dried Thai Chilies are hot pot or Spicy\", \"], 1} 2 3 }\" :\"fol_conc\"\n   \t ,\"DriedThaiChilies\": 5,\n    \"BakedByMelissa\": 0,\n  \t  \"Spicy\": 1.0 }",
      "perplexity": 5.938650608062744
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bakery(x)\", \"Spicy(x)\", \"Cupcake(x)\", \"Hotpot(x)\", \"ProductOf(y, z)\"], \"fol_consts\": [\"bakery\", \"cupcake\", \"hotpot\", \"thaichili\", \"bakedbymelissa\"], \"fol_rules\": [\n  \"∀x (Bakery(x) → Spicy(x))\", \"∀x (Cupcake(x) → Bakery(x))\", \"∀x (Hotpot(x) → Spicy(x))\", \"∀x (ProductOf(y, z) → Cupcake(y))\", \"∃x (Spicy(x) ∨ Bakery(x)) → ∃x (Hotpot(x) ∨ Spicy(x))\",\n  \"∃x (DriedThaiChili(x) ∧ Spicy(x))\",\n  \"∀x (ProductOf(y, z) ∧ Bakery(z)) → BakedByMelissa(y)\"\n], \"fol_conc\": \"∃x (DriedThaiChili(x) ∧ ProductOf(y, x) ∧ Bakery(y))\"}",
      "perplexity": 1.5649961233139038
    }
  },
  {
    "id": 80,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are not a product of Baked by Melissa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Bakery\", \"Cupcake\", \"Hotpot\",  \"Spicy\", \"Product\"], \n\"fol_consts\": [\"Baked by Melissa\"],\n\"fol_rules\": [\n    \"∀x (Bakery(x) → Spicy(x))\", \n    \"∀x (Cupcake(x) → Bakery(x))\",\n    \"∀x (Hotpot(x) → Spicy(x))\", \n    \"∀x (Product(x, y) → Cupcake(y))\",\n    \"((Spicy(x) ∨ Bakery(x)) → (Spicy(x) ∨ Hotpot(x)))\",\n    \"(Dried Thai Chilies(x) ∧ Spicy(x)) → (Hotpot(x) ∨ Spicy(x))\" ,\n],\n\"fol_conc\": \"Not Product(Baked by Melissa, Dried Thai Chilies)\"\n}\n```",
      "perplexity": 1.28477942943573
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\"], \"fol_consts\": [\"Baked by Melissa\",\"Thai Chilies\"], \"fol_rules\": [\n\"∀x ( Bakery(x) → Spicy(x) )\", \"\\n\\t All cupcakes are bakeries.\", \"\\n\\t  All hotpots are spicy.\", \"\\n\\t  All products of Baked by Melissa are cupcakes.\", \"\\n\\t ∃x (Spicy(x) ∨ Bakery(x)) \\n\\t   → ∀z ( Spicy(z) ∨ Hotpot(z)),\",\n\"¬(Baked by Melissa(x) → CupcakE(x))\"], \"fol_conc\": \"Not a product of Baked by Melissa\"}",
      "perplexity": 2.2603089809417725
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bakery(x)\", \"Spicy(x)\", \"Cupcake(x)\", \"Hotpot(x)\", \"ProductOf(x, y)\"], \"fol_consts\": [\"bakery1\", \"spicy1\", \"cupcake1\",\"hotpot1\", \"bakedbymelissa1\"],  \"fol_rules\": [\n    \"∀x (Bakery(x) → Spicy(x))\", \"∀x (Cupcake(x) → Bakery(x))\", \"∀x (Hotpot(x) → Spicy(x))\", \"∀x (ProductOf(x, y) → Cupcake(y))\", \"∃x (Spicy(x) ∨ Bakery(x)) → ∃x (Hotpot(x) ∨ Spicy(x))\" ], \"fol_conc\": \"¬BakedByMelissa(driedthaichili1)\" }",
      "perplexity": 1.6682507991790771
    }
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\"],\n\"fol_consts\": [\"BakedByMelissa\",  \"DriedThaiChilies\"], \n\"fol_rules\": [ \n    \"∀x (Bakery(x) → Spicy(x))\",\n    \"∀x (Cupcake(x) → Bakery(x))\",\n    \"∀x (Hotpot(x) → Spicy(x))\",  \n    \"∀x (ProductByMelissa(x) → Cupcake(x))\", \n    \"((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))\"  \n],\n \"fol_conc\": \"DriedThaiChilies are a hotpot.\" \n}\n```",
      "perplexity": 1.345717430114746
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\"], \"fol_consts\": [\"BakedByMelissa\",\"ThaiChilies\"],\"fol_rules\":[\n  \"[bakery(x) ∧ spicy(x)] -> [hotpot(x)], ∀ x. Bakery(x) → Cupcake(x), All cupcakes are bakeries, All hotpots are spicy ,All products of Baked by Melissa are Cupcakes\", \"Dried Thai chilies is a hotpot\" ],\n  \"fol_conc\": \"[driedThaiChilies] -> [hotpot(x)]\"} ",
      "perplexity": 2.562777519226074
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bakery(x)\", \"Spicy(y)\", \"Cupcake(x)\", \"Hotpot(y)\"], \"fol_consts\": [\"a\",\"b\", \"c\"], \"fol_rules\":[\n    \"∀x (Bakery(x) → ∃y (Cupcake(y)) ∧ ∀z (BakedByMelissa(z) → Cupcake(z)))\", \"∀x (Spicy(x) → Hotpot(x))\",\n  \"∀x (Hotpot(x) → Spicy(x))\"], \"fol_conc\": \"DriedThaiChiliesAreAHotpot(a)\" }",
      "perplexity": 2.440929889678955
    }
  },
  {
    "id": 82,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\", \"Product\",  ],\n\"fol_consts\": [\"Baked by Melissa\", \"Dried Thai chilies\"],\n\"fol_rules\": [],\n\"fol_conc\": \"¬(Product(x, Baked by Melissa) ∧ Bakery(x)) ∨ ¬(Bakery(x) ∧ Spicy(x))\"\n}\n```",
      "perplexity": 1.2683278322219849
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bakery(x)\", \"Spicy(x)\", \"Cupcake(y)\", \"Hotpot(z)\", \"ProductOf(w, x)\"], \"fol_consts\": [\"guilin\", \"bakedbymelissa\",\"driedthaichili\"], \"fol_rules\": [\n    \"∀x (Bakery(x) → Spicy(x))\", \"∀x (Cupcake(x) → Bakery(x))\", \"∀x (Hotpot(x) → Spicy(x))\", \"∀x (ProductOf(w, x) → Cupcake(y))\", \"¬(∃x (Spicy(x) ∧ Bakery(x))) → ¬(∃x (DriedThaiChili(x) ∧ Bakery(x)))\"], \"fol_conc\": \"¬(∃x (ProductOf(w, driedthaichili) ∨ Bakery(driedtaihichili)))\" }",
      "perplexity": 1.8089302778244019
    }
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\"],\n\"fol_consts\": [\"Baked by Melissa\", \"Thai chilies\"],\n\"fol_rules\": [\n  \"∀x ( Bakery(x) → Spicy(x) )\", \n  \"∀x ( Cupcake(x) → Bakery(x) )\",\n  \"∀x ( Hotpot(x) → Spicy(x) )\",\n  \"∀x ( ProductOf(x, Baked by Melissa) → Cupcake(x) )\",\n  \"∀x ( Spicy(x) ∨ Bakery(x) → Hotpot(x) ∨ Spicy(x) )\", \n],\n\"fol_conc\": \"Thai chilies are cupcakes and a product of Baked by Melissa.\"\n}\n```",
      "perplexity": 1.1792455911636353
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bakery\", \"Spicy\", \"Cupcake\", \"Hotpot\"],\"fol_consts\": [\"Baked by Melissa\", \"Dried Thai Chilies\"],\"fol_rules\":[\n  \"∀x (Bakery(x) → Spicy(x)), ∀y (Cupcake(y) → Bakery(y)) , ∀z (Hotpot(z) → Spicy(z)), ∀u (ProductOfBakedByMelissa(u) → Cupcake(u)),\", \"If (Spicy(x) or Bakery(x)) then (Hotpot(x) or Spicy(x))\"\n],\"fol_conc\": [\"Dried Thai Chilies are Cupcakes and a Product of Baked by Melissa.\"]}\n",
      "perplexity": 1.6684459447860718
    }
  },
  {
    "id": 84,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"YelpRecommendations\", \"ManyNegativeReviews\", \"RatingGreaterThan9\", \"PopularAmongLocalResidents\"],\n\"fol_consts\": [\"Subway\",\"Restaurant\"], \n\"fol_rules\": [\n    \"∀x (YelpRecommendations(x) → ¬ManyNegativeReviews(x)) \",\n    \"∀x (RatingGreaterThan9(x) → YelpRecommendations(x))\",\n    \"∃x (¬TakeoutService(x) → ManyNegativeReviews(x))\", \n    \"∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))\",\n    \"(Subway ∈ YelpRecommendations ∨ Subway ∈ PopularAmongLocalResidents)\",\n],\n\"fol_conc\": \"If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\"\n}\n\n```",
      "perplexity": 1.3128076791763306
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"YelpRec\", \"NegativeReviews\"], \"fol_consts\": [\"Subway\"], \"fol_rules\": [\n    \"∀x (YelpRec(x) → ¬NegReviewCount(x)),\", \",\"\n    \t, \"∀x (Rating(x) > 9 → YelpRec(x))\", \",\"\n    \t,\"∃x (¬TakeoutService(x) → NegReviewsCount(x))\",\n    \"∀x (PopularLocalResidents(x) → Rating(x) > 9)\",\n    \"SomeRstHaveRatingGreaterThan9OrPopularityAndNotTakeOut(Subway)\"\n], \"fol_conc\": \"If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\"}\n",
      "perplexity": 2.3324782848358154
    }
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"YelpRecommendations(x)\", \"HasNegativeReviews(x, y)\", \"RatingGreaterThan9(x) \",  \"ProvidesTakeoutService(x)\", \"PopularLocalResidents(x)\" , \"ListinYelpRecommendations(x)\"], \n\"fol_consts\": [\"Subway\",],\n\"fol_rules\": [\"\"], \n\"fol_conc\": \"\"\n}\n```",
      "perplexity": 1.7872885465621948
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"YelpRecommendations\", \"Rating\", \"TakeoutService\"], \"fol_consts\": [\"Subway\",\"Restaurant\",\"LocalResidents\"], \"fol_rules\":[\n\"∀x (YelpRecommendations(x) → ¬ManyNegativeReviews(x)),\",\n\"∀x (Rating(x) > 9 → YelpRecommendations(x)),\",\n\"∃x (¬TakeoutService(x) → ManyNegativeReviews(x)),\",\n\"∀x (PopularLocalResidents(x) → Rating(x) > 9),\",\n\"SomeRestaurants(x, y)  ∧ ¬RestaurantTakeOut(y) → ManyNegativeReviews(x)\",\n\"Subway ∈ SomeRestaurants(x, Subway)\"\n], \"fol_conc\": \"Subway provides take-out service and does not receive many negative reviews.\"} ",
      "perplexity": 1.6182399988174438
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Restaurant(x)\", \"YelpRecommendation(x, y)\", \"RatingGreaterThan9(x)\", \"TakeoutService(y)\"], \"fol_consts\": [\"y\", \"guilin\"], \"fol_rules\": [\n    \"∀x (Restaurant(x) → YelpRecommendation(x, guilin)) ∧ ∃x (YelpRecommendation(x, y) → ¬RatingGreaterThan9(x))\", \"∀x (RatingGreaterThan9(x) → YelpRecommendation(x, guilin))\", \"∃x (TakeoutService(y) ∧ RatingGreaterThan9(y)) → ∃z (Restaurant(z) ∧ TakeOutService(z))\",\n    \"∀x (PopularLocalResident(x) → RatingGreaterThan9(x))\"], \"fol_conc\": \"SubwayProvidesTakeoutServiceAndDoesNotReceiveManyNegativeReviews(guilin)\" }",
      "perplexity": 2.0735814571380615
    }
  },
  {
    "id": 86,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway does not provide take-out service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"YelpRecommendations(x)\", \"HasRatingGreaterThan9(x)\", \"ProvidesTakeoutService(x)\", \"IsPopularAmongLocalResidents(x)\"], \n\"fol_consts\": [\"Subway\",  ],\n\"fol_rules\": [\n    \"∀x (YelpRecommendations(x) → ¬ HasManyNegativeReviews(x))\",\n    \"∀x (HasRatingGreaterThan9(x) → YelpRecommendations(x))\",\n    \"∃x (¬ ProvidesTakeoutService(x) ∧ HasManyNegativeReviews(x))\",\n    \"∀x (IsPopularAmongLocalResidents(x) → HasRatingGreaterThan9(x))\",\n    \"∃x (Subway ∨ IsPopularAmongLocalResidents(x))  → ¬ProvidesTakeOutService(Subway)\",\n],\n\"fol_conc\": \"¬ProvidesTakeoutService(Subway)\"\n}\n```",
      "perplexity": 1.3300323486328125
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"YelpRecommendations\", \"Rating\", \"TakeoutService\"],\"fol_consts\": [\"Subway\",\"Restaurant\"],\"fol_rules\": [\n    \"∀x ( Y ≤ 9 → ¬R(x)),\",\n    \"∀x ( R(x) → YelpRecommendations(x)),\",\n    \"∀x ( Rating(x) > 9 → YelpRecommendations(x)) ,\",\n    \"∃x (TakeoutService(x) = false & Restaurant(x),\",\n    \"∃x (Rating(x) > 9  & PopularLocalResidents(x),\",\n    \"∃x (YelpRecommendations(x) ∨ Rating(x) > 9 )\",\n   \"∀x (Not TakeoutService(x) → ¬R(x))\",\n \"¬TakeoutService(Subway)\",\n\"\"],\"fol_conc\": [\"Subway does not provide take-out service.\" ]\n}\n",
      "perplexity": 2.015340805053711
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"YelpRecommends(x)\", \"RatingGreaterThan9(x)\", \"ProvidesTakeoutService(x)\"], \"fol_consts\": [\"y\", \"subway\"], \"fol_rules\":[\n\"IfYelpRecommends(x) ∧ RatingGreaterThan9(x) ∨ ProvidesTakeoutService(x) ∧ Not(y)\",\n\"AllRestaurantsWithRatingGreater9AreListedInYelpRecommendations(x)\" ,\n\"SomeRestaurantsThatDoNotProvideTakeOutServiceReceiveManyNegativeReviews(x)\", \"AllPopularLocalResidentsHaveRatingsGreaterThan9(x)\", \"SubwayHasRatingGreaterThan9OrIsPopularAmongLocalResidents(x)\"], \n\"fol_conc\": \"Not(subway)\"}",
      "perplexity": 2.221099853515625
    }
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"SuperheroMovie\", \"GoodGuy\", \"Badguy\", \"Fight\"], \n\"fol_consts\": [\"SurprisingAdventuresOfSirDigbyChickenCaesar\",  \"SirDigby\"],\n\"fol_rules\": [\n    \"∀x (SuperheroMovie(x) → GoodGuy(x)) \", \n    \"∀x (GoodGuy(x) ↔ Fight(x, Badguy(y)))\", \n    \"∃x (SurprisingAdventuresOfSirDigbyChickenCaesar(x) && SirDigby(x))\",\n    \"If x is a SuperheroMovie then  NameBasedOnCharacter(x) → CharacterInMovie(x)\",\n],\n\"fol_conc\": \"Sir Digby’s nemesis loses.\" \n}\n\n```",
      "perplexity": 1.6514673233032227
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"SuperheroMovie\", \"GoodGuy\", \"BadGuy\", \"Fight\"],\n\"fol_consts\": [\"SirDigbyChickenCaesar\",\"SirDigby\",\"Nemesis\"],\n\"fol_rules\": [\n  \"∀x (SuperheroMovie(x) → GoodGuy(x)), \", 0, 0,\"∀x (GoodGuy(x)) → fightBadguy(x)\", 0, 1], \"fol_conc\": [\"SirDigby's Nemesis loses.\" ]}\n",
      "perplexity": 2.7443981170654297
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"SuperheroMovie(x)\", \"GoodGuy(y)\", \"BadGuy(z)\", \"Fight(x, y)\"], \"fol_consts\": [\"sirdigby\", \"chickencaesar\",\"surprisingadventuresofsirdibigyschickencaesar\", \"badguy\"], \"fol_rules\":[\n  \"∀x (SuperheroMovie(x) → GoodGuy(y))\", \"(SirDigbyChickenCaesar(z) ∧ SuperHeroMovie(z) ∧ GoodGuy(y)) → SirDigby(y)\", \"(Fight(x, y) → GoodGuy(y))\", \"∃x (CharacterNamedAfter(x) ∧ SuperheroMovie(x))\",\n  \"∀x (SuperheroMovie(x) ∧ CharacterNamedAfter(x) → AppearsInMovie(x))\"], \"fol_conc\": \"SirDigby(z)\"}",
      "perplexity": 2.338637351989746
    }
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Book\", \"Knowledge\", \"Read\", \"GainKnowledge\", \"Smarter\"],\n\"fol_consts\": [\"Walden\", \"HenryThoreau\", \"Harry\"], \n\"fol_rules\": [  \"∀x (Book(x) → Knowledge(x))\",   \n                \"∀x (Read(x, y) → GainKnowledge(x))\",   \n                \"∀x (GainKnowledge(x) → Smarter(x))\", \n               ],\n\"fol_conc\": \"Walden contains knowledge.\"\n}\n```",
      "perplexity": 1.3600647449493408
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Book\", \"Knowledge\", \"Reads\", \"Gaining\", \"Smarter\"], \"fol_consts\": [\"Walden\", \"Henry Thoreau\", \"Harry\"], \"fol_rules\": [], \"fol_conc\": \"∃x (Book(x) ∧ Reads(x, Walden)) → Knowledge(x)\" }\n",
      "perplexity": 1.6905440092086792
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Book(x)\", \"Knows(y, z)\"], \"fol_consts\": [\"book\", \"t\", \"walden\"],  \"fol_rules\": [\n    \"∀x (Book(x) → ∃z (Knows(x, z)))\",\n    \"∀x (Knows(x, z) → ∃y (Reads(x, y)))\",\n    \"∀x (Reads(x, y) → ∀z (Smarter(x) → Smarter(z)) ∧ Book(y))\"\n], \"fol_conc\": \"WaldenContainsKnowledge(walden)\" }",
      "perplexity": 2.078983783721924
    }
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Book\", \"Knows(x, y)\", \"Reads(x, y)\",\"SmarterThan(x,y)\" ],\n\"fol_consts\": [\"Harry\", \"Walden\", \"Henry Thoreau\"], \n\"fol_rules\": [],\n\"fol_conc\":  \"∀ x (Reads(x, Walden) → SmarterThan(x, Harry))\"\n}\n```",
      "perplexity": 1.5953755378723145
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Book\", \"Knows\", \"Read\"], \"fol_consts\": [\"Harry\",\"Walden\", \"Thoreau\"],\"fol_rules\":[\n  \"∀x (Book(x) → Knows(x, Knowledge)),\", 0.1],\n    \"fol_conc\": \"Harry is smarter than before.\"}\n",
      "perplexity": 2.9363038539886475
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Book(x)\", \"Read(y, x)\", \"Knows(y, z)\", \"Smart(z)\"], \"fol_consts\": [\"h\", \"t\",\"w\", \"a\", \"s\", \"g\"], \"fol_rules\": [\n  \"∀x (Book(x) → ∃z (Knows(z, x)) → Smart(z))\",\n  \"Read(y, a) ∧ Book(a) → ∃z (Knows(z, a))\" , \"∀x (Know(x, a) → Smart(x))\", \"Hread(h, w)\"\n], \"fol_conc\": \"HarrySmart(h)\" }",
      "perplexity": 2.532703161239624
    }
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Read\", \"ContainsKnowledge\", \"IsSmarter\"], \n\"fol_consts\": [\"Harry\",\"Walden\", \"Henry Thoreau\"], \n\"fol_rules\": [\n  \"(∀x) (¬(∃y)(Reads(x, y)) → ContainsKnowledge(Book(y))), \",\n   \"(∀x) (IsSmarter(x) = (Read(x, Walden)))\"\n],\n\"fol_conc\": \"(∀x) (IsSmarter(x) ∧  (HasGainKnowledge(x)))\"\n}\n```",
      "perplexity": 2.11373233795166
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Book\", \"Knows\", \"Smart\"],\n\"fol_consts\": [\"Harry\", \"Walden\", \"Henry Thoreau\"], \",\"\n  \t \t: [\n    \"Reading(x, y)\",\n    \"GainKnowledge(x)\",\n    \"IsSmarter(x)\"\n],\n\"fol_rules\": [],\n\"fol_conc\": \"If Reading(a, b) and GainKnowledge(b), then IsSmart(a).\"} ",
      "perplexity": 3.321472406387329
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Read(x, y)\", \"Knowlege(y)\", \"Smart(x)\"], \"fol_consts\": [\"a\", \"b\",\"c\", \"d\"], \"fol_rules\": [\n    \"∀x (Read(x, b) → Knowledge(b)) ∧ Smart(x)\", \"∃x (Knowledge(x) → Read(x, c))\", \"Smart(c)\"\n],  \"fol_conc\": \"ASmarterPersonHasGainedKnowledge(c)\" }",
      "perplexity": 3.3101348876953125
    }
  },
  {
    "id": 91,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language generation task.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"LanguageGenerationTask\", \"LanguageUnderstandingTask\", \"OutputIsTextSequence\"], \n\"fol_consts\": [\"MachineTranslation\"],\n\"fol_rules\": [\n  \"∀x ( LanguageUnderstandingTask(x) → OutputIsTextSequence(x)),\", \n  \"∀x ( MachineTranslation = x )\", \n  \"If output is text sequence, then it's a language generation task.\"\n],\n \"fol_conc\": \"Machine translation is a language understanding task.\"\n}\n```",
      "perplexity": 1.5887281894683838
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"LanguageGenerationTask\", \"LanguageUnderstandingTask\", \"TextSequence\"],\"fol_consts\": [\"MachineTranslation\",\"English\"],\"fol_rules\":[[\"(LanguageGenerationTask(x) ∧ TextSequence(y)) → (LanguageUnderstandingTask(x) ∨ LanguageGenerationTask(x)),\",\n  \"LanguageUnderstandingTask(x) ∧ TextSequence(y) -> MachineTranslation(x, y)\", \"MachineTranslation(x, y)\"],\"fol_conc\" ,\"Machine translation is a language generation task.\"]}",
      "perplexity": 2.3730661869049072
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"LanguageGenerationTask(x)\", \"LanguageUnderstandingTask(x)\", \"TextSequenceOutput(y)\"], \n\"fol_consts\": [\"machinetranslation\", \"languagegenerationtask\", \"languageunderstandingtask\", \"textsequenceoutput\"], \n\"fol_rules\": [\n  \"∀x (LanguageGenerationTask(x) → TextSequenceOutput(x))\",\n  \"MachineTranslation(machinetranslation) → LanguageGenerationTask(machinetranslation)\", \"∃x (TextSequenceOutput(x) → MachineTranslation(x))\"\n], \"fol_conc\": \"MachineTranslation(machinetranslation) ∧ LanguageUnderstandingTask(machinetranslation)\" }",
      "perplexity": 2.0583243370056152
    }
  },
  {
    "id": 92,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language understanding task.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isLanguageGenerationTask\", \"hasTextSequenceOutput\", \"isNaturalLanguageProcessingTask\",  \"isMachineTranslation\"], \n\"fol_consts\": [\"machine translation\"], \n\"fol_rules\":[ \n    \"∀ x ( isNaturalLanguageProcessingTask(x) → hasTextSequenceOutput(x))\",\n    \"∀ x ( machineTranslation = Natural Language Processing Task(x))\",\n],\n\"fol_conc\": \"Machine Translation is a language understanding task.\"\n\n}\n```",
      "perplexity": 1.9162156581878662
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"LanguageGenerationTask\", \"LanguageUnderstandingTask\", \"isTextSequence\"],\"fol_consts\":[\"MachineTranslation\",\"output\"] , \"fol_rules\":[\n    \"∀x (LanguageUnderstandingTask(x) → isTextSequence(Output(x))),\", \"),  // Rule: all language understanding tasks have text sequence output. )],\"\n  \t  , \"fol_conc: [\"\n   \t\t,\"MachineTranslation ∈ LanguageGenerationTask\"] , \"} ]\"\n    \t:\"\\n{ \\n\\\"fol_preds\\\": [\\n\\\"LanguageGenerationTask\\\",\\n\\\"LanguageUnderstandingTask\\\", \\\"isTextSequence\\\"\\n], \\n\\\"fol_consts\\\":[\\\"MachineTranslation\\\",\\\"output\\\"] ,\\n\\\"fol_rules\\\": [  \\\\n'∀x (LanguageUnderstandingTask(x) → isTextSequence(Output(x))),', ]\\n,\\\"fol_conc: [\" , \"\\\"\"\n    \t:\" Machine Translation ∈ LanguageUnderstandingTask \\\"] }\"\n} ",
      "perplexity": 4.457903861999512
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"LanguageGenerationTask(x)\", \"LanguageUnderstandingTask(y)\"],  \"fol_consts\": [\"machinetranslation\", \"textsequence\"], \"fol_rules\": [\n    \"∀x (LanguageGenerationTask(x) → ∃y (TextSequence(y)) ∧ LanguageGenerationTask(x))\", \"∀x (MachineTranslation(x) → TextSequence(x))\" , \"∀x (LanguageUnderstandingTask(x) ↔ ¬LanguageGenerationTask(x))\"], \"fol_conc\": \"MachineTranslation(machinetranslation) ∧ LanguageUnderstandingTask(machinetranslation)\" }",
      "perplexity": 2.1240792274475098
    }
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Pet\", \"ManagedBuilding\", \"Deposit\", \"Rent\", \"Equiv\"], \n\"fol_consts\": [\"Tom\",\"Fluffy\",\"Olive Garden\", \"$2000\", \"$1500\", ],\n\"fol_rules\": [\n    \"∀x (Pet(x) → ManagedBuilding(x))\",\n    \"∃x (ManagedBuilding(x) & Deposit(x, x)\") , \n    \"Deposit(x, y) ∧  Rent(y, z) ∧ Equiv(z, x) → Tom(x)\", \n    \"∀x (Pet(x) → Cat(x))\",\n    \"∃x (ManagedBuilding(x) & City(x) = \"Olive Garden\")\", \n   \n],\n\"fol_conc\":  \"Tom will rent an apartment in The Olive Garden.\" \n}\n```",
      "perplexity": 1.6077746152877808
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"ManagedBuilding\", \"Deposit\", \"Pet\"],\n\"fol_consts\": [\"OliveGarden\",\"Fluffy\",\"Tom\"], \",\"\n  \t\t :\", {   \"\n    \t}\n     ",
      "perplexity": 16.716739654541016
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Pet(x)\", \"ManagedBuilding(x)\", \"Deposit(x, y)\", \"Rent(x, y)\", \"Owner(y, x)\"], \"fol_consts\": [\"fluffy\", \"tom\", \"olivegarden\", \"2000\", \"1500\"], \"fol_rules\": [\n\"∀x (Pet(x) → ManagedBuilding(x))\", \"(∃y (Deposit(y, x)))\", \"(∃y (Rent(x, y)))\", \"(Cat(x) → Pet(x))\", \"Owner(tom, fluffy)\", \"ManagedBuilding(olivegarden)\" , \"(Tom(x) → (Pet(x) ∧ Deposit(x, y) ∧ Rent(x, y) ∧ Owner(tom, x)) ∧ (Deposit(y, x) ∨ Deposit(y, x)))\", \"∃y (Rent(x, y) ∧ Deposit(y, x) ∧ Tom(x))\"], \"fol_conc\": \"Tom(tom)\"}",
      "perplexity": 1.9200069904327393
    }
  },
  {
    "id": 94,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Pets\", \"managedBuilding\", \"deposit\", \"rent\",  \"equalTo\", \"moreThan\"], \n\"fol_consts\": [\"Fluffy\", \"Tom\",\"OliveGarden\"],\n\"fol_rules\": [], \n\"fol_conc\": []\n}\n\n```",
      "perplexity": 1.9090253114700317
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"Pet\", \"Manage\"], \"fol_consts\": [\"Tom\", \"Fluffy\", \"Olive Garden\", \"2000$\",\"1500$\", \"MonthlyRent\"], \"fol_rules\": [\n\"∀x (City(x) → Manage(x))\", 2, 3], \",\"\n  \t  : \"∃x (Pet(x) ∧ City(OliveGarden) )\", \"},\"\n  \t \t: \"Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\"\n}\n",
      "perplexity": 3.626204013824463
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Pet(x)\", \"ManagedBuilding(b)\", \"Deposit(x, y)\", \"Rent(y)\", \"OwnerOf(x, y)\"], \"fol_consts\": [\"fluffy\", \"tom\", \"olivegarden\", \"2000\"], \"fol_rules\": [\n\"∀x (Pet(x) → ManagedBuilding(owner))\", \"(Deposit(x, y) ∧ Rent(y) ∧ OwnerOf(x, owner))\", \"Rent(y) ∨ Deposit(y)\", \"TomOwnsFluffy(tom, fluffy)\" , \"OwnerOf(fluffy, tom)\", \"ManagedBuilding(olivegarden)\"\n], \"fol_conc\": \"TomOwnsFluffy(tom, fluffy) → ManagedBuilding(olivegarden)\"}",
      "perplexity": 2.347646474838257
    }
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Managed\", \"Deposit\", \"Pet\", \"Rent\"], \n\"fol_consts\": [\"OliveGarden\",\"Fluffy\",\"Tom\"], \n\"fol_rules\": [ \n  \"∀x( Managed (b) → ∃p( Pet (p), b ) ),\", \n  \"∀x ( Deposit (d, x) → ∃r(Rent (r, x) , d)),\", \n  \"∀x (Pet (c) →  Managed(Building(B))),\" \n],\n\"fol_conc\": \"Deposit(OliveGarden,OG) ∨ Deposit(OG,2000)\"\n}\n\n```",
      "perplexity": 2.144033670425415
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Pet\", \"ManagedBuilding\", \"Deposit\", \"City\"],\"fol_consts\": [\"Fluffy\", \"Tom\", \"OliveGarden\", \"MonthlyRent\"],\"fol_rules\": [\n  \"∀x (Pet(x) → ManagedBuilding(x))\", \",\"\n  \t  ,\"∀x (Deposit(x, y) → Rent(y, x))\",\n  \t  \"∀x (City(x) → Pet(x))\",\n  \t  \"∃x (Rent(x, OliveGarden) ∧ Deposit(x, MonthlyRent))\", \",\"\n  ,\"2000$ > $1500\", \"], \"\n   \t , \"fol_conc: [Deposit(OliveGarden,MonthlyRent)]}\" ]}",
      "perplexity": 3.2742245197296143
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PetsInBuilding(x, y)\", \"DepositExists(x)\", \"SecurityDepositEqualsMonthRentOrMore(x)\", \"IsCat(y)\"], \"fol_consts\": [\"pets\", \"building\", \"deposit\", \"olivegarden\", \"tom\", \"fluffy\"], \"fol_rules\": [\n  \"∀x (PetsInBuilding(x, building)) → ∃y (DepositExists(y))\",\n  \"∀x ∀y (IsCat(y) → PetsInBuilding(x, y))\",\n  \"∀x ∀y ∃z (SecurityDepositEqualsMonthRentOrMore(x) ↔ DepositExists(z))\",\n  \"TomRentingOliveGarden(tom, olivegarden)\",\n  \"IfFluffyCanLiveWithTom(fluffy, tom) ∧ SecurityDepositNotExceedsLimitOf2000(deposit) ∧ TomWillMoveInBuilding(tom, building) → PetAllowedAtResidence(pet, residence)\",\n  \"SecurityDepositEqualsMonthRentOrMore(x)\"\n], \"fol_conc\": \"TheOliveGardenSecurityDepositIsEitherTwoThousandDollarsOrMore(olivegarden)\"}",
      "perplexity": 2.5033516883850098
    }
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Animal\", \"Loves\", \"FavoriteAnimals\", \"IsA\", \"Fluffy\", \"Sleeps\"],\n\"fol_consts\": [\"Max\", \"Australia\", \"Quokka\", \"Koala\"], \n\"fol_rules\": [  \"∀x (Animal(x) → FavoriteAnimals(x, Max)),\",   \n                 \"All AnimalsFromAustralia(a) → LovesTourist(a),\",    \n                \"All QuokkasAreAnimalsFromAustralia(q) → IsA(q, Australia)\", \n                \"∀x (FavoriteAnimals(x, Max) → Fluffy(x))\", \n                \"All FavoriteAnimalsSleeps(x) → Sleeps(x)\",\n                \"Fluffy(x) → NotQuokka(x)\"   ],  \n \"fol_conc\": [ \"LovesToSleep(Koalas)]\"\n}\n```",
      "perplexity": 1.8919962644577026
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Animal\", \"LovedByTourists\", \"FavoriteAnimals\", \"Australian\", \"Quokka\"], \"fol_consts\": [\"Max\", \"Koala\", \"Turist\"], \"fol_rules\": [\n\"∀x (Animal(x) → FavoriteAnimals(x, Max))\", \"\\n\\t∀x  (LovedByTourists(x) → Animal(x))\",\n\"\\t∀x  (Australian(x) → LovedByTourists(x)),\" , \"\\t∃x (Quokka(x) → Australian(x))\", \"\\t∀x (FavoriteAnimals(x, Max) → VeryFluffy(x)),\", \"\\t∀x (VeryFluffy(x) → NotQuokka(x))\"], \"fol_conc\": \"Koalas love to sleep.\"}\n",
      "perplexity": 1.8457179069519043
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"AnimalLover(x, y)\", \"IsFavoriteAnimalOf(x, y)\", \"Loves(x, y)\", \"FromAustralia(x)\", \"Fluffy(x)\"], \"fol_consts\": [\"max\", \"koalas\",\"animals\",\"tourists\"], \"fol_rules\": [\n\"∀x ∃y (AnimalLover(x, y) → IsFavoriteAnimalOf(x, y))\",\n\"∀x ∀y (FromAustralia(y) → AnimalLover(x, y))\",\n\"∀x ∀y (IsFavoriteAnimalOf(x, y) → Fluffy(x))\",\n\"∀x (Fluffy(x) → ¬FromAustralia(x))\", \"(Loves(a, x) → IsFavoriteAnimalOf(max, x))\" ], \"fol_conc\": \"∃x (KoalasLoveToSleep(x))\"}",
      "perplexity": 1.9001309871673584
    }
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Animal\", \"LovedByTourist\", \"FavoriteAnimals\", \"Fluffy\", \"IsQuokka\"],\n\"fol_consts\": [\"Max\",\"Australia\", \"Koalas\"], \n\"fol_rules\": [  \n    \"∀x (Animal(x) → FavoriteAnimals(x, Max))\", \n    \"∀x (LovedByTourist(x) → Animal(x))\", \n    \"∀x (IsQuokka(x) → AnimalFromAustralia(x))\", \n    \"AllFluffy(x) ∧ FavouriteAnimal(Max, x) → FluffyAnimalsLoveSleep(x)\",\n    \"AllFluffy(x) ∧ FavoriteAnimal(Max, x) → IsKoala(x) \" ,\n    \"∀x (IsQuokka(x) → ¬ Fluffy(x))\",\n],\n\"fol_conc\":  \"Koalas love to sleep and are quokka.\"\n}\n```",
      "perplexity": 1.577736258506775
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Animal\", \"LovedByTourist\", \"FavoriteAnimalsOfMax\", \"Fluffy\"], \"fol_consts\": [\"Max\"], \"fol_rules\": [\n  \"∀x (Animal(x) → FavoriteAnimalsOfMax(x)) ∧ ∀y (LovedByTourist(y, x) → Animal(y)),\", \"], 10], \"\n    \t,\"fol_conc: ∃x (Fluffy(x) ∧ LovedByTourist(x, Max))\" ]}",
      "perplexity": 4.033430099487305
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"AnimalsLove(x, y)\", \"IsMaxFavoriteAnimal(x, y)\",\"AustralianAnimal(y)\", \"Fluffy(x)\", \"Quokka(y)\"], \"fol_consts\": [\"max\", \"tourists\", \"animals\", \"koala\", \"quokka\"], \"fol_rules\": [\n\"∀x (AnimalsLove(x, tourists) → IsMaxFavoriteAnimal(x, max))\", \"∀y (AustralianAnimal(y) → AnimalsLove(y, tourists))\", \"∀y (Quokka(y) → AustralianAnimal(y))\", \"∀x (IsMaxFavoriteAnimal(x, max) → Fluffy(x))\", \"∀x (Fluffy(x) → IsNotQuokka(x))\" , \"(AllOfX(a) ∧ AllOfY(b) ∧ AllOfZ(c) → AnimalsLove(x, tourists))\"], \"fol_conc\": \"∃x ∃y (Koala(x) ∧ Fluffy(x) ∧ Quokka(y))\"}",
      "perplexity": 2.0216856002807617
    }
  },
  {
    "id": 98,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Animal\",  \"LovedByTourist\", \"FavoriteAnimal\", \"Fluffy\", \"IsQuokka\", \"Sleeps\"], \n\"fol_consts\": [\"Max\", \"Australia\", \"Koala\", \"Quokka\"],\n\"fol_rules\": [\n    \"∀x (Animal(x) → FavoriteAnimal(x, Max)),\", // If an animal is an animal, it's a favorite of max.\n    \"∀x (LovedByTourist(x) → Animal(x))\",  // All loved animals are also animals. \n    \"∀x (IsQuokka(x) → Animal(x) and Australia(x)),\", // Quokkas are all Australian animals.\n    \"AllFluffyAnimalsAreMaxFavorite\",   \n    \"AllFluffyAnimalLovesSleep\", \n    \"If FluffyThenNotQuokka\",  // If an animal is fluffy, it's not a quokka.\n\n],\n\"fol_conc\": \"If Quokka(x) and Sleeps(x), then LovesToSleep(x)\" \n}\n```",
      "perplexity": 1.76827871799469
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Animal\", \"LovedByTourist\", \"MaxFavourite\", \"Quokka\"], \",\"\n  :[\"Fluffy\", \"Sleeps\"] , \"fol_consts\":[ \"Max\" ,\"Australia\", \"koala\" ],\"fol_rules\":[\"\"], \"fol_conc\":[\"If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\"] } ",
      "perplexity": 3.950047016143799
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"AnimalsLoveTourists(x, y)\", \"IsMaxFavoriteAnimal(x, y)\", \"IsAustralianAnimal(x)\", \"IsQuokka(x)\", \"Fluffy(x)\"], \"fol_consts\": [\"max\", \"tourists\"], \"fol_rules\": [\n\"∀x (AnimalsLoveTourists(x, tourists) → IsMaxFavoriteAnimal(x, tourists))\", \"(AllAnimalsFromAustraliaAreLovedByTourists(a))\", \"(IsQuokka(q) ∧ AllAustralianAnimals(q))\", \"(ForAllFavouriteAnimalsFluffy(f) ∧ IsMaxFavouriteAnimal(f, max))\", \"(ForAllFavouriteAnimalsSleepLoving(f) ∧ IsMaxFavoriteAnimal(f, max))\", \"(IfQuokkaAndFluffy(k) → NotIsQuokka(k))\"], \"fol_conc\": \"IfKoalaIsAQuokka(k) ∨ Fluffy(koala)\"}",
      "perplexity": 2.312878370285034
    }
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Kind\", \"Evil\", \"Handsome\", \"Ugly\", \"Gentleman\", \"CEO\"],\n\"fol_consts\": [\"Harry\"], \n\"fol_rules\": [\n  \"∀x (Kind(x) → Evil(x)),\",\n  \"¬(Ugly(x) ∧ Handsome(x))\", \n  \"∀x (Evil(x) → Ugly(x))\", \n  \"∀x (Gentleman(x) ∧ Handsome(x))\", \n  \"∀x (CEO(x) ∧ Gentleman(x))\",\n],\n\"fol_conc\": \"Harry is a CEO.\"\n}\n```",
      "perplexity": 1.239150047302246
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Man\", \"Kind\", \"Evil\", \"Ugly\", \"Handsome\"], \"fol_consts\": [\"Harry\"], \"fol_rules\": [], \"fol_conc\": [] }\n",
      "perplexity": 1.9458444118499756
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Kindness(x)\", \"Evil(x)\", \"Ugliness(x)\", \"Handsome(x)\", \"IsCEO(x)\"], \"fol_consts\": [\"a\", \"b\",\"c\"], \"fol_rules\": [\n\"∀x (Kindness(x) ∨ Evil(x))\", \"¬Ugliness(x) → Handsome(x)\", \"Evil(x) ∧ Ugliness(x)\", \"∀x (IsGentleman(x) ∧ Handsome(x))\", \"∀x (IsCEO(x) ∧ IsGentleman(x))\", \"HarryKindness(a, x)\"\n], \"fol_conc\": \"HarryIsCEO(b)\" }",
      "perplexity": 2.0130209922790527
    }
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Man\", \"Kind\", \"Evil\", \"Ugly\", \"Handsome\", \"CEO\"],\n\"fol_consts\": [\"Harry\"],\n\"fol_rules\": [ \n  \"∀x ( Man(x) → ( Kind(x) ∨ Evil(x)) )\", \n  \"¬ ( Ugly(x) ∧ Handsome(x)) \", \n  \"∀ x (Evil(x) → Ugly(x))\", \n  \"∀ x ( Gentleman(x) → Handsome(x))\",\n  \"∀ x (CEO(x) → Gentleman(x))\",\n  \"Man(Harry)\"\n],\n\"fol_conc\": \"Harry ∨ CEO(\" \n}\n```",
      "perplexity": 1.3738293647766113
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Kind\", \"Evil\", \"Handsome\", \"Ugly\"], \"fol_consts\": [\"Harry\"], \"fol_rules\": [\n    \"∀x (Kind(x) ∨ Evil(x))\",\n    \"¬(Ugly(x) ∧ Handsome(x))\",\n    \"∀x (Evil(x) → Ugly(x))\",\n    \"∀x (Gentleman(x) ∧ Handsome(x))\",\n    \"∀x (CEO(x) ∧ Gentleman(x))\",\n    \"Harry ∈ Gentlemen\",\n  \"\"], \"fol_conc\": \"Harry ∨ CEO(Harry)\" }\n",
      "perplexity": 1.414145827293396
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"ManKind(x)\", \"ManEvil(x)\", \"Ugly(y)\", \"Handsome(y)\",\"Gentleman(x)\", \"CEO(x)\"], \"fol_consts\": [\"x\", \"y\"], \"fol_rules\":[\n  \"∀x (ManKind(x) ∨ ManEvil(x))\", \"∀x (Ugly(x) → Handsome(x))\", \"∀x (ManEvil(x) → Ugly(x))\", \"∀x (Gentleman(x) → Handsome(x))\", \"∀x (CEO(x) → Gentleman(x))\",\n  \"∃x (HarryManKind(x))\" , \"∀x (HarryManKind(x) ∨ CEO(x))\"], \"fol_conc\": \"HarryManKind(x) ∨ CEO(x)\" }",
      "perplexity": 1.829775333404541
    }
  },
  {
    "id": 101,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Evil\", \"Kind\", \"Ugly\", \"Handsome\"],\n\"fol_consts\": [\"Harry\"],\n\"fol_rules\": [\n  \"∀x ( Evil(x) ∧ Ugly(x)) → ¬ Kind(x)\",\n  \"¬ Evil(x) ∨ Handsome(x)\" ,\n  \"∀x (Evil(x) → Ugly(x))\",\n  \"∀x (Gentleman(x) → Handsome(x))\",\n  \"All Gentlemen are CEOs\",\n  \"All CEOs are Gentleman\"\n],\n\"fol_conc\": \"If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\" \n}\n```",
      "perplexity": 1.3958313465118408
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Kind\", \"Evil\", \"Ugly\", \"Handsome\", \"IsCEO\"],\"fol_consts\": [\"Harry\"], \"fol_rules\": [\n  \"∀x (Kind(x) ∨ Evil(x))\",\n  \"¬(Ugly(x) ∧ Handsome(x))\",\n  \"∀x (Evil(x) → Ugly(x))\",\n  \"∀x (Gentleman(x) ∧ Handsome(x))\",\n  \"∀x (IsCEO(x) ⟹ Gentleman(x))\",\n  \"Kind(Harry)\",\n  \"Handsome(Harry)\" ,\n  \"AllEvilPeopleAreUgly\" , \"NoUglyPersonIsHandsome\"], \"fol_conc\": [\"If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\" ] } ",
      "perplexity": 1.598594307899475
    }
  },
  {
    "id": 102,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke spends a lot of time hanging out and playing with his siblings.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Twin\", \"Triplet\", \"SpendTimeWithSiblings\",  \"DevelopStrongBondsWithFamilyMembers\",  \"LiveAtHomeRegularly\"], \n\"fol_consts\": [\"Luke\"],\n\"fol_rules\":[\n    \"∀x (Twin(x) → SpendTimeWithSiblings(x)),\", \n    \"∀x (Triplet(x) → SpendTimeWithSiblings(x)),\",\n    \"∀x (SiblingSameAge(x, y) → Twin(x) ∨ Triplet(x)) ,\",  \n    \"∀x (ComplainOftenAboutSiblings(x) → SiblingSameAge(x, z) )\",\n    \"¬SpendTimeWithSiblings(x) → LiveAtHomeRegularly(x)\",\n    \"Twin(x) → SpendTimeWithSiblings(x), \", \n    \"Triplet(x) → SpendTimeWithSiblings(x)\" ,  \n],\n \"fol_conc\": \"Luke spends a lot of time hanging out and playing with his siblings.\" \n}\n```",
      "perplexity": 1.4498074054718018
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Twin\", \"Triplet\", \"LivesAtHomeRegularly\", \"ComplainsOften\"],\"fol_consts\": [\"Luke\"],\"fol_rules\": [\n    \"∀x ( Twin(x) ∨ Triplet(x)) →  ∃y ( SiblingsOfX(x, y) ) \",\n    \"∀x ( SiblingSameAge(x, y) ∧ Twin(x) ∨ Triplet(x)) →  SiblingIsTwinOrTriplets(x, y)\",\n    \"∃x (ComplainsOften(x) ∧ SiblingSameAge(x,y)) → ∃y ( SiblingsOfX(x, y) ) \",\n    \"¬LivesAtHomeRegularly ⟹ ¬StrongBondsWithFamilyMembers\",\n    \"SiblingTimeSpending(x, y)  →  ¬LivesAtHomeRegularly\" , \"],\"\n    \t, \"fol_conc\" ,\"Luke spends a lot of time hanging out and playing with his siblings.\"\n   \t ]}",
      "perplexity": 2.553548574447632
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TwinOrTriplet(x)\", \"HasSiblingsSameAge(x, y)\", \"ComplainsOften(x, y)\", \"LivesAtHomeRegularly(x)\", \"SpendsTimeWithAndPlaysWithSiblings(x)\"], \"fol_consts\": [\"luke\", \"twin\"], \"fol_rules\": [\n    \"∀x (TwinOrTriplet(x) → SpendsTimeWithAndPlaysWithSiblings(x))\", \"(HasSiblingsSameAge(a, b) → (TwinOrTriplet(a) ∨ TwinOrTriplet(b)))\", \"(ComplainsOften(x, y) → HasSiblingsSameAge(x, y))\" , \"∀x (¬LivesAtHomeRegularly(x) → ¬SpendsTimeWithAndPlaysWithSiblings(x))\", \"(SpendsTimeWithAndPlaysWithSiblings(x) → ¬LivesAtHomeRegularly(x))\"], \"fol_conc\": \"LukeSpendsTimeWithAndPlaysWithHisSiblings(luke)\" }",
      "perplexity": 1.6520464420318604
    }
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Twin\", \"Triplet\", \"Sibling\", \"SpendTime\", \"DevelopStrongBonds\", \"LiveAtHome\"], \"fol_consts\": [\"Luke\"], \"fol_rules\": [\n  \"∀x(Twin(x, y) ∨ Triplet(x, y)) → SpendTime(x, y)\",\n  \"∀x (Sibling(x, y) ∧ SameAge(x, y)) → Twin(x, y) ∨ Triplet(x, y)\",\n  \"∀x (ComplainsOften(x, y) ∧ Sibling(x, y)) → SameAge(x, y)\",\n  \"¬SpendTime(x, y) ⟹ LiveAtHomeNotRegularly(x)\",\n  \"SpendTime(x, y) ⟹ ¬LiveAtHomeNotRegularly(x)\" ,\n  \"Twin(Luke, y) ∨ Triplet(Luke, y) ∧ DevelopStrongBonds(Luke, FamilyMembers) → ComplainsOften(Luke, annoyingSiblings)\", 1], \"fol_conc\": \"ComplainsOften(Luke, annoyingSiblings)\"}",
      "perplexity": 1.4777061939239502
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TwinOrTriplet(x)\", \"HasSameAgeSiblings(x, y)\", \"ComplainsOftenAboutAnnoyingSiblings(x)\", \"LivesAtHomeRegularly(x)\"], \"fol_consts\": [\"luke\", \"twin1\", \"triplet1\"], \"fol_rules\": [\n    \"∀x (TwinOrTriplet(x) → HasSameAgeSiblings(x, x))\", \"∀x (ComplainsOftenAboutAnnoyingSiblings(x) → HasSameAgeSiblings(x, x))\", \"∀x (LivesAtHomeRegularly(x) → ¬HasStrongBondsWithFamilyMembers(x))\", \"TwinOrTriplet(luke)\",\n    \"∃x (TwinsOrTriplesAndDevelopsStrongBond(luke, x))\", \"¬(NotTwinOrTriplet(luke) ∧ DevelopsStrongBond(luke, x))\"\n], \"fol_conc\": \"LukeComplainsOftenAboutAnnoyingSiblings(luke)\"}",
      "perplexity": 2.0895955562591553
    }
  },
  {
    "id": 104,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Twin\", \"Triplet\", \"HasSibling\",  \"LiveAtHomeRegularly\", \"SpendTimeWithSiblings\"], \n\"fol_consts\": [\"Luke\"], \n\"fol_rules\": [\n    \"∀x (Twin(x) ∨ Triplet(x)) → ∃y (HasSibling(x, y) ∧ SpendTimeWithSiblings(x, y)),\",\n    \"∀x (HasSibling(x, y) ∧ SameAge(x, y)) → Twin(x) ∨ Triplet(x)\", \n    \"∀x (ComplainOftenAboutAnnoyingSiblings(x) ∧ HasSibling(x, y)) →  SameAge(x, y)\",\n    \"¬LiveAtHomeRegularly (x) → ¬DevelopStrongBondsWithFamilyMembers(x)\",\n    \"SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x)\",\n    \"Twin(x) ∨ Triplet(x)  → ∃y (NotTwinOrTriplet(x, y) )\",\n     \"NotTwinOrTriplet(x, y)\" \n],\n\"fol_conc\": \"¬Twin(Luke) ∧ ¬Triplet(Luke) ∧ ¬ComplainOftenAboutAnnoyingSiblings(Luke)\"  }\n\n```",
      "perplexity": 1.4268176555633545
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Twin\", \"Triplet\", \"SpendTimeWithSiblings\", \"ComplainOftenAboutSiblings\", \"SameAge\"],\n\"fol_consts\": [\"Luke\"], \",\"\n    \t: [\n  \t\t\"People are twins or triplets\" , 1, \"People have siblings who are the same age\" ,2,\"If people do not live at home regularly then they do not develop strong bonds with their family members\",3, \"If people spend a lot of time hanging out with and playing with their siblings then they often did not live at home regularly\",4],\n  \t\t\"fol_rules\": [\n    \t[\"Twin(x)\", \"Triplet(y)\"], 1, [\"SpendTimeWithSiblings(z, x)\", \"ComplainOftenAboutSiblings(p, z)\"] , 2, [\"SameAge(x, y)\" ,\"twinOrTriplet (x, y)]\",3],\n\"fol_conc\"\n  \t]\n}",
      "perplexity": 3.15618634223938
    }
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GRE\", \"ETS\", \"financial_aid\", \"economic_hardship\"], \n\"fol_consts\": [\"205\", \"Tom\", \"dad\", \"single-parent\", \"out of work\",  \"GRE test\", \" ETS\", \"economic hardship\"],\n\"fol_rules\": [\n    \"∀x (ETS(x) → GRE(x)),\", \n    \"∀x (financial_aid(x, y)) ↔ economic_hardship(y),\", \n    \"Tom ∈ single-parent\",  \n    \"dad(Tom) ∈ out of work\",  \n],\n\"fol_conc\": \"∃x (ETS(x) → financial_aid(x, Tom)),\"   \n}\n```",
      "perplexity": 1.7916669845581055
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GRE\", \"ETS\", \"economicHardship\"],\n\"fol_consts\": [\"205\", \"Tom\", \"dad\", \"single-parent family\", \"out of work\", \"financialAid\"],\n\"fol_rules\": [\"\"],\n\"fol_conc\": \"\" } ",
      "perplexity": 2.1306283473968506
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GRETestCostUSDollar(x)\", \"ETSProvidesFinancialAid(y, z)\", \"EconomicHardship(w)\", \"LivesInSingleParentFamily(u)\"], \"fol_consts\": [\"205\", \"gre\", \"ets\", \"tom\", \"dad\", \"economichardship\", \"singleparentfamily\", \"worklessyear\"], \"fol_rules\": [\n  \"ForallToms(x) → GRETestCostUSDollar(x)\", \"ETSProvidesFinancialAid(y, z) ↔ EconomicHardship(z)\", \"EconomicHardship(w) → LivesInSingleParentFamily(u)\"\n], \"fol_conc\": \"ForAllToms(x) → ETSProvidesFinancialAid(gre, x)\"}",
      "perplexity": 2.3844189643859863
    }
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GRE\", \"costs\", \"economicHardship\", \"ETS\"],\n\"fol_consts\": [\"205\", \"300\"],\n\"fol_rules\": [\n    \"If GRE costs 205, then it doesn't cost above 300.\",\n    \"If ETS provides financial aid to someone who proves economic hardship, then that person takes the test.\" \n\n],\n\"fol_conc\": \"It costs below US $300 to take the GRE test.\"\n}\n```",
      "perplexity": 1.5488898754119873
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GRE\", \"ETS\", \"economicHardship\"],\"fol_consts\": [\"205\",\"300\"],\"fol_rules\":[\n  \"\"], \"fol_conc\": \"There is a GRE test. The cost of the test is less than 300.\"}\n",
      "perplexity": 2.3766798973083496
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"GRETestCostUSDollar(x)\", \"ProvidesFinancialAidTo(y, x)\", \"EconomicHardship(z)\", \"LivesInSingleParentFamily(u)\"], \"fol_consts\": [\"205\", \"300\", \"ets\", \"gre\", \"tom\", \"dad\",\"one\", \"year\"], \"fol_rules\": [\n\"IfGreTestCostUSDollar(x) ∧ ProvidesFinancialAidTo(y, x)\",\n  \"ThenEconomicHardship(z) → GRETestCostUSDollar(x)\" ], \"fol_conc\": \"GRETestCostUSDollar(tom)\"}",
      "perplexity": 2.6305124759674072
    }
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GRE\", \"costs\", \"ETS\", \"provides\", \"economicHardship\", \"liveInSingleParentFamily\", \"hasBeenOutOfWork\"], \n\"fol_consts\": [\"205\",  \"FinancialAid\", \"EconomicHardship\", \"Tom\", \"dad\",\"year\"],\n\"fol_rules\": [\"\"],\n\"fol_conc\": \"\"\n}\n```",
      "perplexity": 1.6293984651565552
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"GRE\", \"ETS\", \"economicHardship\"], \"fol_consts\": [\"US$205\", \"greApplicant\"], \"fol_rules\": [\n    \"∀x (GRE(x) → ETS(x)),\", 0\n], \"fol_conc\": \"¬∃x (GRE Applicant and economicHardship(x))\"} ",
      "perplexity": 2.269709348678589
    }
  },
  {
    "id": 108,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Rounded\", \"City\", \"SpillFoodOnClothing\", \"TidySpacesConsistently\", \"EnjoyCleaningProcess\"], \n\"fol_consts\": [\"Peter\"],\n\"fol_rules\": [\n  \"∀x (Round(x, y) → TidySpacesConsistently(x))\",\n  \"∀x (SpillFoodOnClothing(x) → EnjoyCleaningProcess(x))\",\n  \"∃x (City(guilin) ∧ SpillFoodOnClothing(x) )\",\n  \"∀x (Round(x, y) ∧ TidySpacesConsistently(x) ∧ EnjoyCleaningProcess(x) ≡ NoSiblingOnlyChild(x))\",\n  \"NoSiblingOnlyChild(Peter)\" ,\n \"∃x (SpillFoodOnClothing(x) ∧ GrownUpAsOnlyChildWithNoSiblings(x))\",\n \"∀x (HouseholdsHighIncome(x) → ParentBusyJobs(x))\",\n  \"If A then B\" \n],\n\"fol_conc\": \"Peter tidies his space consistently and enjoys the process of cleaning.\"\n}\n```",
      "perplexity": 1.6244138479232788
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PersonSpillsFoodOnClothing(x)\", \"TidySpaceConstantly(x)\", \"EnjoyCleaningProcess(x)\"], \"fol_consts\": [\"peter\"], \"fol_rules\": [\n  \"∀p (PersonSpillsFoodOnClothing(p) → ∃r (NotTidyingSpaceConsistently(r)) ∧ EnjoyCleaningProcess(r))\",\n  \"∀p (Foodie(p) → PersonSpillsFoodOnClothing(p))\",\n  \"∀p (OnlyChildNoSiblings(p) → TidySpaceConstantly(p) ∧ EnjoyCleaningProcess(p))\",\n  \"∀p (BusyParents(p) → OnlyChildNoSiblings(p))\",\n  \"∀h (HighIncomeHouseholds(h) → BusyParents(h))\",\n  \"∃x (PersonSpillsFoodOnClothing(x) ∧ OnlyChildNoSiblings(x))\",\n  \"¬(OnlyChildNoSiblings(x) ∧ PersonSpillsFoodOnClothing(x))\"], \"fol_conc\": \"PeterTidiesSpaceConstantlyAndEnjoysCleaningProcess(peter)\" }",
      "perplexity": 1.592069387435913
    }
  },
  {
    "id": 109,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"SpillFoodOnClothing(p)\",  \"TidySpacesConsistently(p)\", \"EnjoyCleaningProcess(p)\" , \"IsFoodie(x)\", \"HasParentsBusyWithRegularJobs(p)\", \"OwnsHouseHold(h, p) \", \"HighNetIncome(h)\"],\n\"fol_consts\": [\"Peter\", \"Person\", \"FoodSpill\"], \n\"fol_rules\": [\"\"], \n\"fol_conc\": \"\"  }\n\n```",
      "perplexity": 2.0856332778930664
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Person\", \"SpillsFoodOnClothing\", \"TidySpacesConsistently\", \"EnjoyCleaningProcess\"],\"fol_consts\": [\"Peter\"],\"fol_rules\":[ ],\"fol_conc\": []}\n",
      "perplexity": 1.9624018669128418
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PersonSpillsFoodOnClothing(x)\", \"TidySpacesConsistently(x)\", \"EnjoysCleaningProcess(x)\", \"Foodie(x)\", \"HasParentsBusyWithJob(x)\", \"OnlyChild(y)\"], \"fol_consts\": [\"peter\", \"food\"], \"fol_rules\": [\n    \"∀x (PersonSpillsFoodOnClothing(x) ∧ TidySpacesConsistently(x) → EnjoysCleaningProcess(x))\", \"∀x (Foodie(x) ∧ PersonSpillsFoodOnClothing(x))\",\n    \"∀x (OnlyChild(x) ∧ TidySpacesConsistently(x) ∧ EnjoysCleaningProcess(x))\", \"∀x (HasParentsBusyWithJob(x) → OnlyChild(x))\", \"(HighIncomeHousehold(y) → HasParentsBusyWithJob(y))\" ,\n    \"PeterSpillsFoodOnClothingOrOnlyChildWithoutSiblings(peter)\" ], \"fol_conc\": \"PeterIsEitherFoodieWhoGoesOutFrequentlyToFindNewRestaurantsOrBelongsToAHouseholdWithHighNetIncome(peter)\" }",
      "perplexity": 1.9473538398742676
    }
  },
  {
    "id": 110,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"SpillsFood\", \"TidySpacesConsistently\", \"EnjoyCleaningProcess\",  \"Foodie\", \"FrequentEatingOut\", \"HighNetIncomeHousehold\"],\n\"fol_consts\": [\"Peter\"],\n\"fol_rules\": [], \n\"fol_conc\": \"Peter is either a Foodie who frequently eats out to find new restaurants or belongs to a high-income household, OR he is neither a Foodie nor has the characteristic of being from a high net income household.\"\n}\n```",
      "perplexity": 1.763867974281311
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Person\", \"SpillsFoodOnClothing\", \"TidySpacesConsistently\", \"EnjoyCleaningProcess\"], \"fol_consts\": [\"Peter\"], \"fol_rules\": [\"\"], \"fol_conc\": \"\"}\n",
      "perplexity": 1.5639947652816772
    }
  },
  {
    "id": 111,
    "nl_problem": {
      "context": [
        "All fir trees are evergreens.",
        "Some objects of worship are fir trees."
      ],
      "question": "Some evergreens are not objects of worship.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"FirTree\", \"Evergreen\", \"ObjectOfWorship\"],\n\"fol_consts\": [\"T\",\"F\"], \n\"fol_rules\":[ ],\n\"fol_conc\": []\n}\n```",
      "perplexity": 1.5489466190338135
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"FirTree\", \"Evergreen\", \"ObjectsOfWorship\"], \"fol_consts\": [\"F1\",\"F2\",\"W1\",\"W2\"],\"fol_rules\": [\n  \"∀x ( FirTree(x) → Evergreen(x))\", \"], \"\n  \t  ,\"∃x ( ObjectsOfWorship(x) ∧ Evergreen(x))\",\n   \"∀x (Evergreen(x) ↔ ¬ObjectsOfWorship(x))\" ],\n  \"fol_conc\": [\"∃x (Evergreen(x) ∧ ¬ObjectsOfWorship(x))] \"\n  \t  ,\"} `  ```json output: { “fol_preds”: [“FirTree”, “Evergreen”, “ObjectsOfWorship”], “fol_consts”: [\" ],\" , “fol_rules”: [“∀x ( FirTree(x) → Evergreen(x))” ], \"\n   \t :\"\", \"∃x ( ObjectsOfWorship(x) ∧ Evergreen(x))” ],\" :\",  \" } ",
      "perplexity": 3.9369380474090576
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"FirTree(x)\", \"Evergreen(x)\", \"ObjectOfWorship(y)\"], \"fol_consts\": [\"f\", \"g\", \"h\"], \"fol_rules\": [\n    \"∀x (FirTree(x) → Evergreen(x))\", \"∃x (ObjectOfWorship(x) ∧ FirTree(x))\", \"∀x (Evergreen(x) → ¬ObjectOfWorship(x))\" ], \"fol_conc\": \"∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x))\"}",
      "perplexity": 1.6207153797149658
    }
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"MountainRange\", \"Visited\", \"LocatedIn\", \"Donated\"],\n\"fol_consts\": [\"PicurisMountains\",\"NewMexico\",\"Texas\",\"HardingPegmatiteMine\"], \n\"fol_rules\":[\n  \"(mountainRange(x) ∧ (locatedin(x, y)) → (visited(x, Juan de Onate)))\",\n  \"(MountainRange(y) ∧ Donated(y)) ⟹ ¬(mountainRange(z) ∈ Texas)\", \n  \"∃ x. mountainRange(x) ∧ visited(x,Juan de Onate)\" \n\n],\n\"fol_conc\": \"Juan de Onate visited a mountain range in New Mexico.\" \n}\n```",
      "perplexity": 1.8007209300994873
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"MountainRange\", \"Visited\", \"LocatedIn\", \"Donated\"],\n\"fol_consts\": [\"PicurisMountains\",\"NewMexico\",\"Texas\",\"JuanDeOnate\",\"HardingPegmatiteMine\"],\n\"fol_rules\": [\n  \"∀x (MountainRange(x) ∨ MountainRange(y)), x ≠ y → ∃z (LocatedIn(z, x))\",\n  \"∀x (Visited(x, z) ∧ MountainRange(z)) → ∀y (Donated(y, z))\" , 2 ],\n\"fol_conc\": \"∃x (MountainRange(x) ∧ Visited(JuanDeOnate, x))\"} ",
      "perplexity": 1.87478506565094
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MountainRange(x)\", \"Visited(y, z)\", \"LocatedIn(x, y)\"], \n\"fol_consts\": [\"picuris\", \"newmexico\", \"texas\", \"hardingpegmatitemine\", \"juandeonate\"], \n\"fol_rules\": [\n    \"∀x (MountainRange(x) → LocatedIn(x, picuris))\", \"∃x (LocatedIn(x, picuris) ∧ Visited(x, juandeonate))\", \"¬(LocationIn(x, texas) → MineDonated(x))\", \"∀x (MineDonated(x) → MountainRange(x))\"], \n\"fol_conc\": \"∃x (Visited(x, juandeonate) ∧ LocatedIn(x, newmexico))\"}",
      "perplexity": 2.039531707763672
    }
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"MountainRange\", \"in_\", \"visitedBy\",  \"locatedIn\", \"donatedTo\"], \n\"fol_consts\": [\"Picuris Mountains\", \"New Mexico\", \"Texas\",\"Juan de Onate\"],\n\"fol_rules\": [\n    \"∀x ( MountainRange(x) → in_( x, NewMexico )∨in_( x, Texas))\",\n     \"∀x  ( visitedBy( Juan de Onate , x) ∧ MountainRange(x) )\",\n    \"∃x ( locatedIn(Harding Pegmatite Mine, x) ∧ MountainRange(x)) \",\n   \"∀x (MountainRange(x) → ¬locatedIn(Texas, x) ∧ donatedTo(x)) \" , \n],\n\"fol_conc\":  \"∃x (visitedBy(Juan de Onate,x) ∧ MountainRange(x) ∧ locatedIn(Harding Pegmatite Mine,x))\"\n}\n```",
      "perplexity": 1.7680822610855103
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"MountainRange\", \"visitedBy\", \"locatedIn\", \"donated\"],\n\"fol_consts\": [\"Picuris Mountains\", \"Juan de Onate\", \"Harding Pegmatite Mine\"],\n\"fol_rules\": [\n  \"(∃x)(MountainRange(x) ∧ locatedIn(x, Picuris Mountains)) → (visitedBy(DeOnate, x)),\",\n  \"(Texas ∨ NewMexico)( MountainRange(y) ∧ visitedBy(Juan de Onate, y) ∧ locatedIn(y, Picuris Mountains))\"\n],\n \"fol_conc\": \"(∃x)(MountainRange(x) ∧ locatedIn(x, Picuris Mountains)) → (visitedBy(DeOnate, x))\"}\n",
      "perplexity": 1.7715896368026733
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MountainRange(x)\", \"LocatedIn(x, y)\", \"Visited(y, z)\", \"Donated(w, x)\"], \"fol_consts\": [\"picuris\",\"newmexico\", \"texas\", \"hardingpegmatitemine\", \"juandeonate\"], \"fol_rules\": [\n  \"∀x (MountainRange(x) → LocatedIn(x, picuris))\", \"∀x (LocatedIn(x, picuris) → Visited(x, juandeonate))\", \"∀x (Donated(x, hardingpegmatitemine) → MountainRange(x))\",\n  \"∃y (TexasMountainRanges(y) ∧ Donated(y, mine))\", \"¬(TexasMountainRanges(texas) ∧ Donated(texas, mine))\" ], \"fol_conc\": \"JuanDeOnateVisitedAmountainrangeInTexasland(juandeonate)\" }",
      "perplexity": 2.332258701324463
    }
  },
  {
    "id": 114,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"MountainRange\", \"VisitedBy\", \"LocatedIn\", \"Donated\"],\n\"fol_consts\": [\"PicurisMountains\",\"JuanDeOnate\", \"HardingPegmatiteMine\", \"NewMexico\", \"Texas\"],\n\"fol_rules\":[ \n  \"∀x (MountainRange(x) → ∨y (MountainRange(y) ∧ LocatedIn(x, y)) )\", \n  \"∃x (VisitedBy(x, JuanDeOnate) ∧ MountainRange(x))\", \n  \"∃x (Donated(x, HardingPegmatiteMine)),\",\n  \"∀x (MountainRange(y) → ¬ LocatedIn(y, Texas)) \" ,\n],\n\"fol_conc\": \"¬LocatedIn(HardingPegmatiteMine, NewMexico)\" \n}\n```",
      "perplexity": 1.4439119100570679
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"MountainRange\", \"LocatedIn\"],\n\"fol_consts\": [\"Picuris Mountains\", \"New Mexico\", \"Texas\", \"Harding Pegmatite Mine\"], \",\"\n  \t \t:[\"Juan de Onate\"] ,\n\"fol_rules\": [\n    \"∀x ( MountainRange(x) → LocatedIn(x, NewMexico))\", 0,\"∃y (MountainRange(y) → LocatedIn(y, Texas)),\" ],\"  , \"\n\t\t   : [\"No mountain ranges in texas that have mines which have been donated\"],\n\t    \"∀x (LocatedIn(Harding Pegmatite Mine, x) ∧ MountainRange(x))\"\n    \t:\"∃x (MountainRange(x) → ¬ LocatedIn(x, NewMexico))\", \" ∀x (¬  LocatedIn(x, Texas) ∧ MineDonated(x))\"\n   \t\t: [\"No mountain ranges in texas that have mines which have been donated\"]\n,\"fol_conc\": \"∃x (MountainRange(Harding Pegmatite Mine) → ¬ LocatedIn(Harding Pegmatite Mine, NewMexico))\"} ",
      "perplexity": 3.097154378890991
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MountainRange(x)\", \"VisitedBy(y, z)\", \"LocatedIn(x, y)\", \"Donated(z)\"], \"fol_consts\": [\"picuris\", \"newmexico\", \"texas\", \"hardingpegmatitemine\", \"juandeonate\"], \"fol_rules\": [\n    \"∀x ∃y (MountainRange(x) ∧ VisitedBy(y, x))\", \"∀x ∀y ∃z (LocatedIn(x, z) → Donated(z))\", \"¬(∀x ∀y (LocationIn(x, y) ∧ MountainRange(y)))\",\n    \"∃y (MountainRange(y) ∧ LocatedIn(y, texas))\" ],  \"fol_conc\": \"¬(LocatedIn(hardingpegmatitemine, newmexico))\"}",
      "perplexity": 2.027092218399048
    }
  },
  {
    "id": 115,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter is shorter than a man in Michael's class.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Tall\", \"Block\", \"Jump\"],\n\"fol_consts\": [\"Michael\", \"Peter\", \"Everyone\"],\n\"fol_rules\": [\n  \"∀x (Tall(x) → Block(x, Windy))\",\n  \"∀x (Tall(x) ∧ Tall(y) ∧ Tall(z) )→ Tall(x) > Tall(z)\",\n  \"Tall(Michael) \",\n  \"Jump(Peter)\", \n],\n\"fol_conc\": \"Peter is shorter than a man in Michael's class.\"\n}\n```",
      "perplexity": 1.3587985038757324
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TallerThan\", \"CanBlockShooting\", \"IsMan\"], \"fol_consts\": [\"Michael\", \"Peter\", \" Windy\", \"everyone else\"], \"fol_rules\": [\n  \"If TallerThan(x, y) then CanBlockShooting(x, z)\", \"\\t\\nWhere x is taller than y and y can block shooting of z\",\n  \"∀x IsMan(x), \\t\\n∃y IsMan(y) ∧ ∀z TallerThan(x, y) ∧ TallerThan(y, z) then IsMan(x)\", \"If a man is taller than another man the taller one can block the other's shooting.\",\n  \"IsMan(Peter) and NotTallerThan(Peter, Michael)\" , \" Peter is shorter than a man in Michael's class\", 0], \"}\"\n \t \t :\"You seem to be asking for something that doesn't make sense. I need the output of a program that converts natural language into first-order logic.\"\n  }",
      "perplexity": 3.0968613624572754
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Tall(x)\", \"Block(x, y)\"], \"fol_consts\": [\"michael\", \"peter\", \"everyone\"], \"fol_rules\": [\n    \"∀x (Tall(x) → Block(x, michael))\", \"∀x ∀y ∀z (Tall(x) ∧ Tall(y) ∧ Tall(z) → Tall(x) ∧ Tall(z))\", \"Peter(p)\", \"Michael(m)\",\n    \"∀x (Block(x, m) ∨ Block(x, peter))\", \"Tall(michael)\", \"Jump(p)\", \"GreatShooter(p)\" ],  \"fol_conc\": \"∃x (Peter(x) ∧ NotTall(x, michael))\"}",
      "perplexity": 2.0694360733032227
    }
  },
  {
    "id": 116,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Windy is a great shooter.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"TallerThan\",  \"BlockShooting\", \"GreatShooter\"], \n\"fol_consts\": [\"Michael\",\"Peter\",\"Windy\"], \n\"fol_rules\": [\n   \"(taller(x, y) → block(x, y))\", // Taller than implies can block.\n   \"∀x (TallerThan(x, y)  ∧ TallerThan(y, z) → x > z)\",  // If taller then greater \n   \"Peter > Michael\",\n   \"(BlockShooting(x, y) & not jump(y))\", //Michael blocks shooting if they are not jumping.\n   \"not BlockShooting(Michael, Windy)\" ,\n    \"∀x (GreatShooter(x) → canJump(x))\", \n  ] ,\n\"fol_conc\": \"Windy is a great shooter.\"\n}\n```",
      "perplexity": 2.048617362976074
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TallerThan\", \"BlockShooting\", \"CanJump\"], \"fol_consts\": [\"Michael\", \"Windy\", \"Peter\"], \"fol_rules\": [\n\"If TallerThan(x, y) then BlockShooting(x, y)\", 1,\"If x is taller than y and y is taller than z  then x is taller than z\", 2,\"Peter is a man who is taller than Michael.\", 3], \"fol_conc\": \"Windy is a great shooter.\"}\n",
      "perplexity": 1.7917845249176025
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TallerThan(x, y)\", \"BlocksShooting(x, y)\", \"IsShooter(x)\"], \"fol_consts\": [\"michael\", \"windy\", \"everyone\"], \"fol_rules\":[\n    \"∀x (TallerThan(x, y) → BlocksShooting(x, y))\", \"∀x (IsShooter(x) → TallerThan(x, someone))\", \"(Someone1TallerThanSomeone2AndSomeone2TallerThanSomeone3ThenSomeone1TallerThanSomeone3(someone1))\", \"PeterTallerThanMichaelOrWindyCanJumpWhenShootingNotBlockingWindysShooting(michael)\",\n    \"∀x (IsShooter(x) → BlocksShooting(x, someone))\"], \"fol_conc\": \"WindyIsAShooterAndAGreatShooter(windy)\" }",
      "perplexity": 3.1343111991882324
    }
  },
  {
    "id": 117,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter can block Windy's shooting.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"TallerThan\", \"CanBlockShooting\", \"IsShooter\", \"CanJumpShoot\"], \n\"fol_consts\": [\"Michael\", \"Peter\", \"Windy\"], \n\"fol_rules\":[\n  \"∀x (TallerThan(x, y) → CanBlockShooting(x, y))\",\n  \"∀x (TallerThan(x, y) ∧ TallerThan(y, z)  → TallerThan(x, z))\",\n  \"Peter = taller than Michael\", \n  \"CanJumpShoot(Michael) ∧  EveryShooter who can jump shoot is a Great Shooter\", \n  \"¬ CanBlockShooting(Michael, Windy)\",\n],\n \"fol_conc\": \"Peter can block Windy's shooting.\"\n}\n```",
      "perplexity": 1.584324836730957
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TallerThan\", \"BlockShooting\"],\n\"fol_consts\": [\"Michael\",\"Peter\",\"Windy\",\"Everyone\"], \",\"\n  : [[\"TallestMan\", \"Person\"],\n    [\"CanJump\", \"Shooter\"]], \"\"\n  :\"<br>\"\n  ,\"fol_rules\":[{\"Rule\":\"If TallThan(x, y) then BlockShooting(x, y)\", \"Condition\": [\"TallerThan (Michael , Everyone)\", \"BlockShooting(Michael, Windy)]}, {\"\n    ],\"fol_conc\": \"Peter can block Windy's shooting.\" },\" }\" ]}",
      "perplexity": 5.981454849243164
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TallerThan(x, y)\", \"CanBlockShooting(x, y)\"], \"fol_consts\": [\"michael\", \"peter\", \"windy\"], \"fol_rules\": [\n  \"∀x ∃y (TallerThan(x, y)) → CanBlockShooting(x, y)\",\n  \"MichaeltallerThanEveryoneElseInClass(michael)\",\n  \"IfTallestPersonIsGreaterThenSecondTallestPerson(person1, person2) → TallerThan(person1, person2)\",\n  \"PeterTallerThanMichael(peter) ∧ PeterCanBlockShooting(petr, windy)\" ,\n  \"∀x (CanJumpWhenShooting(x)) → GreatShooter(x)\",\n  \"NotJumpingWhileShooting(windy) ∨ CanBlockShooting(michael, windy)\"\n], \"fol_conc\": \"PeterCanBlockWindysShooting(peter)\"}",
      "perplexity": 2.138715982437134
    }
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"LocatedAt\",  \"NamedAfter\"], \n\"fol_consts\": [\"Barutin Cove\", \"Barutin\", \"Snow Island\", \"South Shetland Islands\", \"Antarctica\", \"Greenwich Island\", \"Deception Island\"],\n\"fol_rules\": [], \n\"fol_conc\": \"∀x (LocatedAt(x, SouthShetlandIslands) → NamedAfter(x, Barutin Cove))\"\n}\n```",
      "perplexity": 1.3234062194824219
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"locatedIn\"],\"fol_consts\": [\"Barutin Cove\", \"Snow Island\", \"Greenwich Island\", \"Deception Island\",\"Barutin\", \"South Shetland Islands\", \"Antarctica\"],\"fol_rules\": [\n  \"∀x (LocatedIn(x, Baritin) → City(x)),\",\n  \"∀x ∃y (locatedIn(y, SouthShetlandIslands) → LocatedIn(City(x), y))\",\n  \"∀x ∀y (LocatedIn(Barutin Cove, x) → LocatedIn(Snow Island, x)),\", \"], \"\n  \t  ,\"fol_conc\" ,[\"All islands in Antarctica are named after Barutin.\"]\n\t   \t]}",
      "perplexity": 3.386936902999878
    }
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"LocatedAt\", \"NamedAfter\"], \n\"fol_consts\": [\"Barutin Cove\",\"Barutin\", \"Snow Island\",\"South Shetland Islands\", \"Greenwich Island\",\"Deception Island\", \"Antarctica\"],\n\"fol_rules\":[ ],\n\"fol_conc\":  \"∃x (LocatedAt(x, Antarctica) ∧ NamedAfter(x, Barutin))\"\n}\n```",
      "perplexity": 1.489784598350525
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"City\", \"LocatedIn\"], \"fol_consts\": [\"Barutin Cove\", \"Snow Island\", \"South Shetland Islands\", \"Antarctica\", \"Bulgaria\", \"Barutin\"], \"fol_rules\": [\n\"∀x (City(x) → LocatedIn(x, Barutin Cove)),  \\n ∃y (LocatedIn(y, South Shetland Islands) \\n∧ City(y) \\n→  exists z (City(z) \\n∧ LocatedIn(z, Antarctica))), \\n\",\n\"∀x (City(x) → LocatedIn(x, Snow Island)), \\n ∃y (LocatedIn(y, South Shetland Islands)\\n∧ City(y))\\n→ exists z (LocatedIn(z, Antarctica))\"], \"fol_conc\": \"There is at least one cove in Antarctica named after a place in Bulgaria.\"}\n",
      "perplexity": 1.7482988834381104
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CityOf(x)\", \"LocatedIn(x, y)\"], \"fol_consts\": [\"barutin\", \"bulgaria\", \"snowisland\", \"greenwichisland\", \"deceptionisland\",\"antarctica\"], \"fol_rules\":[\n    \"∀x (∃y ∀z (LocationIn(x, z) → LocatedIn(y, z)))\", \"(CityOf(x)) → ((LocatedIn(x, snowisland)) ∨ (LocatedIn(x, greenwichisland)) ∨ (LocatedIn(x, deceptionisland)))\"\n], \"fol_conc\": \"∃c ∀z (CityOf(z) ∧ LocatedIn(c, z))\"}",
      "perplexity": 2.5039589405059814
    }
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"LocatedIn\", \"NamedBy\"],\n\"fol_consts\": [\"Barutin Cove\", \"Barutin\", \"Snow Island\", \"South Shetland Islands\", \"Greenwich Island\", \"Deception Island\", \"Antarctica\"],\n\"fol_rules\": [\n    \"(∀x)(∃y)(LocatedIn(Barutin, y) ∧ NamedBy(Barutin, x)) → (∀z)(LocatedIn(Barutin, z) ∧ LocatedIn(SnowIsland, z) ∨ LocatedIn(SouthShetlandIslands, z))\",\n    \"If A is located in B and B is located in C then A is located in C.\",\n],\n\"fol_conc\": \"Not (LocatedIn(Barutin, Antarctica))\"\n}\n\n```",
      "perplexity": 1.463558316230774
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Location\", \"NamedBy\"],\"fol_consts\": [\"Barutin Cove\", \"Barutin\", \"Snow Island\", \"South Shetland Islands\", \"Antarctica\", \"Greenwich Island\", \"Deception Island\"], \"fol_rules\": [\n  \"∀x (Location(x) → NamedBy(x, Barutin Cove))\", 0], \"},\"\n  \t  : 1.23456789 ,\"fol_conc\": [\"Not Located in Antarctica\"] }",
      "perplexity": 3.653286933898926
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"CityOfPlace(x, y)\", \"LocationAtCoast(x, y)\", \"PartOfSet(x, y)\"], \"fol_consts\": [\"barutin\", \"bartunin\", \"snowisland\", \"southsheltanislands\", \"greenwichisland\", \"deceptionisland\", \"antarctica\"], \"fol_rules\": [\n    \"∀x (CityOfPlace(x, baritin)) → ∃y (LocationAtCoast(x, y) ∧ CityOfPlace(y, barutin))\", \"∀x (PartOfSet(x, southsheltanislands)) → ∀y (LocationAtCoast(x, snowisland) ∨ LocationAtCoast(x, greenwichisland) ∨ LocationAtCoast(x, deceptionisland))\", \"∀x (LocationAtCoast(x, barutin)) → ∃y (PartOfSet(y, southsheltanislands) ∧ LocationAtCoast(barutin, y))\"\n], \"fol_conc\": \"¬(BarutinInAntarctica(barutin))\"}",
      "perplexity": 1.9144361019134521
    }
  },
  {
    "id": 121,
    "nl_problem": {
      "context": [
        "Some affection is love.",
        "Some love is positive."
      ],
      "question": "Some affection is positive.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Affection\", \"Love\", \"Positive\"], \n\"fol_consts\": [\"A\", \"B\", \"C\"],  \n\"fol_rules\": [],\n\"fol_conc\": \"∃x (Affection(x) → Positive(x))\"\n}\n```",
      "perplexity": 1.3428194522857666
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Affection\", \"Love\", \"Positive\"], \"fol_consts\": [\"A\",\"B\",\"C\"], \"fol_rules\": [\n    \"∀x ( Affection(x) ∧ Love(x)) → Positive(x)\",\n    \"∀x (affection(x) ∨ love(x))\"\n], \"fol_conc\": \"∃x (Affection(x) ∧ Positive(x))\"}\n",
      "perplexity": 1.6886216402053833
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Affection(x, y)\", \"Love(x, y)\", \"Positive(y)\"], \"fol_consts\": [\"a\", \"b\"], \"fol_rules\": [\n  \"∀x (Affection(x, a)) → ∃y (Love(x, y) ∧ Positive(y))\",\n  \"∀x (Love(x, b) ∧ ∃y (Positive(y))) → Affection(x, y)\" ], \"fol_conc\": \"∃x (Affection(x, a) ∧ Positive(a))\"}",
      "perplexity": 1.5780982971191406
    }
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"TransportMultiplePassengers\", \"IsEmpty\", \"isAirline\", \"isPlane\", \"isBoeing707\"],\n\"fol_consts\": [\"Greyhound\",\"Airlines\",\"Planes\",\"Boeing707\"],\n\"fol_rules\": [\n  \"∀x ( TransportMultiplePassengers(x) → ¬Is Empty(x))\", \n  \"∀x ( isAirline(x) → TransportMultiplePassengers(x))\", \n  \"∀x (isPlane(x) → IsEmpty(x))\", \n  \"∀x (isBoeing707(x) → isPlane(x))\",\n  \"¬(IsAirline(y) ∧ isPlane(y)) → ¬(Greyhound Planes(y))\" \n],\n\"fol_conc\": \"Greyhound is an airline.\"\n}\n```",
      "perplexity": 1.3375815153121948
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Airline\", \"Empty\", \"TransportMultiplePassengers\", \"Plane\", \"Boeing707\"],\"fol_consts\": [\"Greyhound\",\"Airlines\", \"Planes\"],\"fol_rules\":[\n    \"[∀x(TransportMultiplePassengers(x) → ¬Empty(x))] & [All Airlines(A)]  → [∃y (Airline(y), y= A)],     ,      [Plane(p)], ∧ [Boeing707(b)]\", \"All Boeing 707s are Planes\" ,\n    \"[¬(Greyhound ∈ Airline) ] → [¬(Greydog is Plane)]\", \"],\"\n  \t  ,\"fol_conc\"\n  ]\n}\n",
      "perplexity": 4.936741828918457
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TransportsMultiplePassengers(x)\", \"IsEmpty(x)\", \"CanTransport(x)\", \"Airline(y)\"], \"fol_consts\": [\"a\", \"b\", \"c\"], \"fol_rules\": [\n\"∀x (TransportsMultiplePassengers(x) → ¬IsEmpty(x))\", \"∀x (CanTransport(x) → Airlines(x))\", \"∀x (Planes(x) → IsEmpty(x))\", \"∀x (Boeing707s(x) → Planes(x))\",\n\"¬Airline(y) → ¬GreyhoundPlane(y)\", \"∃x (IsAirline(x) ∧ GreyhoundPlane(x))\"], \"fol_conc\": \"Greyhound(a)\"}",
      "perplexity": 2.0822134017944336
    }
  },
  {
    "id": 123,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is a Boeing 707.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"TransportMultiplePassengers\", \"isAirline\", \"isPlane\", \"isBoeing707\"], \n\"fol_consts\": [\"Greyhound\", \"Airlines\", \"Planes\", \"Boeing707\"],\n\"fol_rules\": [\n    \"∀x ( TransportMultiplePassengers(x) → ¬Empty(x))\",  // If something can transport multiple passengers, then it is not empty.\n    \"∀x (isAirline(x) → ∃y (TransportMultiplePassengers(y)))\", // All airlines can transport multiple passengers.\n    \"∀x (isPlane(x) → Empty(x))\", // All planes are empty.\n    \"∀x (isBoeing707(x) → isPlane(x))\",  // All Boeing 707s are planes.\n    \"¬(isAirline(Greyhound) → ¬∃y (isPlane(y)))\", // If Greyhound is not an airline, then there are no Greyhound planes.\n],\n\"fol_conc\": \"∀x (isBoeing707(x) ∧ isGreyhound(x))\"  // A Greyhound is a Boeing 707.   \n}\n```",
      "perplexity": 1.2932969331741333
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Transport\", \"Empty\", \"Airline\", \"Plane\", \"Boeing707\"], \"fol_consts\": [\"Greyhound\",\"Airlines\", \"Planes\", \"Boeing 707\"], \"fol_rules\": [\n\"∀x (Transport(x, y) → ¬Empty(y)),\",\n\"∀x (Airline(x) → Transport(x, y)),\", 0\n  ], \"fol_conc\": \"∃x (Greyhound(x) ∧ Boeing707(x))\"}\n",
      "perplexity": 1.860761284828186
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TransportMultiplePassengers(x)\", \"Empty(x)\", \"Airline(x)\", \"Plane(x)\", \"Boeing707(x)\"], \"fol_consts\": [\"greyhound\", \"airlines\", \"planes\", \"boeing707\"],  \"fol_rules\":[\n    \"∀x (TransportMultiplePassengers(x) → ¬Empty(x))\", \"∀x (Airline(x) → TransportMultiplePassengers(x))\", \"∀x (Plane(x) → Empty(x))\", \"∀x (Boeing707(x) → Plane(x))\", \"¬(Greyhound(x) ∧ Airline(x)) → ¬(Greyhound(x) ∧ Plane(x))\"],  \"fol_conc\": \"Greyhound(x) ↔ Boeing707(x)\"\n}",
      "perplexity": 1.653810739517212
    }
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"TransportMultiplePassengers\", \"IsEmpty\", \"isAirline\", \"CanFly\", \"Belongsto\"], \n\"fol_consts\": [\"Greyhound\",\"Boeing707\"], \n\"fol_rules\":[\n   \"∀x ( TransportMultiplePassengers(x) → ¬IsEmpty(x)),\",\n    \"∀x ( IsAirline(x) → TransportMultiplePassengers(x))\",\n    \"∀x (CanFly(x) → IsEmpty(x)),\",\n    \"∀x (Belongsto(x,Boeing707)  → CanFly(x))\", \n    \"¬IsAirline(Greyhound) → ¬IsEmpty(Greyhound_Plane)\", \n   ],\n \"fol_conc\": \"¬(isBoeing707(A))\" \n}\n```",
      "perplexity": 1.6776244640350342
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TransportMultiplePassengers\", \"Empty\", \"Airline\", \"Plane\", \"Boeing707\"],\"fol_consts\": [\"Greyhound\", \"Airlines\",\"Boeing 707\"],\"fol_rules\":[\n  \"∀x (TransportMultiplePassengers(x) → ¬Empty(x)),\",\n  \"∀x (Airline(x) → TransportMultiplePassengers(x)),\",\n  \"∀x (Plane(x) → Empty(x)),\",\n  \"∀x (Boeing707(x) → Plane(x)),\",\n  \"¬(Greyhound(x) ∧ Airline(x)) → ¬(plane(x)),\",\n  \"\" ], \"fol_conc\": [\" ¬(Greyhound(x) ∧ Boeing707(x)) \"] } ",
      "perplexity": 1.505421757698059
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TransportMultiplePassengers(x)\", \"IsEmpty(x)\", \"CanBeAirline(y)\", \"BelongToClass(x, y)\"], \"fol_consts\": [\"airlines\", \"planes\", \"boeing707s\", \"greyhound\"], \"fol_rules\":[\n  \"∀x (TransportMultiplePassengers(x) → ¬IsEmpty(x))\", \"∀x (CanBeAirline(x) → TransportMultiplePassengers(x))\",\n  \"∀x (BelongToClass(planes, x)) → IsEmpty(x)\", \"∀x (IsBoeing707(x) → BelongToClass(boeing707s, x))\", \"(¬GreyhoundIsAirline(y) → ¬ThereArePlanesForGreyhound(y))\"\n], \"fol_conc\": \"NotGreyhoundIsBoeing707(greyhound)\" }",
      "perplexity": 2.320854902267456
    }
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Mammal\", \"Animal\", \"Bird\", \"Fly\", \"Breathe\", \"Wings\"],\n\"fol_consts\": [\"Rock\",\"Monkey\", \"Animal\", \"Bird\", \"Fly\"], \n\"fol_rules\": [],\n\"fol_conc\": []\n}\n\n```",
      "perplexity": 1.4611810445785522
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Mammal\", \"Animal\", \"Flys\", \"Breaths\"], \",\"\n   : [ \"Monkey\" , \"Bird\"] ,\"fol_consts\": [\"Rock\", \"All Mammals\"], \",\" :\" \", \"]}  \"\n    : {\"fol_rules\":[ [], []], \"fol_conc\": []} }",
      "perplexity": 12.67849063873291
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Mammalian(x)\", \"Animal(x)\", \"Flys(x)\", \"Breathes(x)\", \"Monkey(x)\"], \"fol_consts\": [\"rock\", \"mammal\", \"animal\",\"bird\", \"fly\"], \"fol_rules\": [\n    \"∀x (Mammalian(x) → Animal(x))\", \"∀x (Monkey(x) → Mammalian(x))\", \"∃x (Animal(x) ∨ Flys(x))\", \"∀x (Bird(x) → Flies(x))\", \"∀x (Animal(x) → Breathes(x))\", \"If(flys, x) → Wings(x)\", \"¬(Flys(x) ∧ Bird(x)) → ¬(Flies(x) ∨ Breathes(x))\"], \"fol_conc\": \"RockMammalian(rock)\" }",
      "perplexity": 2.513199806213379
    }
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Mammal\", \"Animal\", \"Bird\", \"Fly\", \"Breathe\", \"Wings\"],\n\"fol_consts\": [\"Rock\"],\n\"fol_rules\": [], \n\"fol_conc\": \"Rock has Wings\"\n}\n```",
      "perplexity": 1.2763023376464844
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"mammal\", \"animal\", \"bird\", \"fly\", \"breathe\"], \"fol_consts\": [\"Rock\",\"Mammal\", \"Animal\", \"Bird\", \"Fly\", \"Breathe\"],\"fol_rules\":[\n    \"∀x (Mammal(x) → Animal(x))\", \",\"\n   ,\"∀x (Monkey(x) → Mammal(x))\", \",\"\n   ,\"∃x (Animal(x) ∨ Bird(x))\",\n  \t  \"∀x (Bird(x) → Fly(x))\", \",\"\n    ,\"∀x (Animal(x) → Breathe(x))\", \",\"\n    ,\"¬(Fly(x) ∧ Bird(x))→ ¬(Flies(x) ∨ Breathes(x))\", \"If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\",\n   \t\"∀x (Winged(x) → Fly(x))\" ,\"\"\n],\"fol_conc\": [\"Rock has wings.\"]}\n",
      "perplexity": 2.0887417793273926
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Mammalian(x)\", \"Animal(x)\", \"Monkey(x)\", \"Bird(x)\", \"Fly(x)\"], \"fol_consts\": [\"rock\", \"animal\"], \"fol_rules\": [\n    \"∀x (Mammalian(x) → Animal(x))\", \"(AllMamasmals(x) ∧ Monkey(x)) → (Animal(x))\", \"(Animal(x) ∨ Bird(x)) → (Fly(x))\", \"(Bird(x) → Fly(x))\", \"∀x (Animal(x) → Breathe(x))\", \"If(notfly, x) ∧ (NotBreathe(x)) ∧ (Rock(x) ∧ Notbird(x))\"\n],  \"fol_conc\": \"Rock(x) ∨ Rock(x)\"}",
      "perplexity": 2.6347317695617676
    }
  },
  {
    "id": 127,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock does not have wings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Mammal\", \"Animal\", \"Monkey\", \"Bird\", \"Fly\"], \n\"fol_consts\": [\"Rock\"],\n\"fol_rules\": [\n  \"∀x (Mammal(x) → Animal(x)),\", \n  \"∀x (Monkey(x) → Mammal(x)),\", \n  \"∀x (Animal(x) ∨ Bird(x)),\", \n  \"∀x (Bird(x) → Fly(x)),\", \n  \"∀x (Animal(x) → Breathe(x)),\", \n  \"If(Fly(x), Wings(x)),\", \n  \"If(Not(fly(x)) ∧ Not(bird(x)), not(flies)(x) ∧ not(breathe)(x))\" ,\n],\n \"fol_conc\": \"Rock does not have wings.\"\n}\n```",
      "perplexity": 1.3538246154785156
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Mammalian(x)\", \"Animal(x)\", \"Bird(x)\", \"Flys(x)\", \"Breaths(x)\", \"Winged(x)\"], \"fol_consts\": [\"rock\", \"monkey\", \"bird\",\"animal\"], \"fol_rules\":[\n    \"∀x (Mammalian(x) → Animal(x))\", \"(Animal(x) ∧ Bird(x)) → Flys(x)\", \"(Bird(x) ∨ Monkey(x)) → Winged(x)\", \"(Flys(x) ∧ Breaths(x)) → ∃y (Winged(y))\" , \"Rock(x) ∧ ¬(Animal(x) ∨ Bird(x))\", \"(¬Animal(x) ∧ ¬Flys(x) ∧ ¬Breaths(x)) ∧ Rock(x)\"\n], \"fol_conc\": \"Rock(x) ∧ ¬Winged(x)\" }",
      "perplexity": 2.1452224254608154
    }
  },
  {
    "id": 128,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has a wedding that is well-attended.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Wedding\", \"Child\", \"TravelsToParisForHoneymoon\", \"WellAttended\"], \n\"fol_consts\": [\"John\"], \n\"fol_rules\": [\n\"∀x ( Wedding(x) → Child(x) ),\",\n\"∀x ( TravelsToParisForHoneymoon(x) → Wedding(x) ),\",\n\"∀x ( JulyWedding(x) →  TravelsToParisForHoneymoon(x)),\", \n\"∃x (WellAttended(x), Wedding(x))\",\n\"∀x (Child(x) → ¬TravelsToParisForHoneyMoon(x) & ¬Wedding(x)),\",\n\"∀x (WellAttended(x) → (JulyWedding(x) ∨ TravelsToParisForHoneymoon(x))),\",  \n],\n\"fol_conc\": \"Well-attended(John)\"\n}\n```",
      "perplexity": 1.4247602224349976
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Person\", \"Weddings\", \"TravelsToParis\"],\n\"fol_consts\": [\"John\"],\n\"fol_rules\": [\n    \"(∀P (Person(P)) → (∃W (Wedding(P, W))) ) \", 0.5],\n\"fol_conc\": \"(Exists a Wedding(John, W)  ∧ WellAttended(W) ) \"\n}\n",
      "perplexity": 2.921354293823242
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PersonHasChild(x)\", \"PersonTravelsToParisForHoneymoon(x)\", \"WeddingsInJuly(w)\", \"WellAttendedWedding(w)\"], \"fol_consts\": [\"john\", \"haschild\", \"travelstoparisforhoneymoon\"], \"fol_rules\": [\n\"∀x (PersonHasChild(x) → PersonTravelsToParisForHoneymoon(x))\", \"∀x (WeddingsInJuly(w) ↔ PersonTravelsToParisForHoneymoon(x))\", \"(∃x (WellAttendedWedding(x))) → (JohnHasAtLeastOneChild(x) → ¬TravelstoParisForHoneyMoon(x) ∧ ¬WeddingsinJuly(x))\"\n], \"fol_conc\": \"(JohnHasAWellAttendedWedding(john))\"}",
      "perplexity": 2.4170284271240234
    }
  },
  {
    "id": 129,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John does not have a wedding that is well-attended.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Wedding\", \"HasChild\", \"TravelToParisForHoneymoon\", \"WellAttended\"], \n\"fol_consts\": [\"John\"],\n\"fol_rules\": [\n    \"∀x (Wedding(x) → HasChild(x)),\",  \n    \"∀x (TravelToParisForHoneymoon(x) → Wedding(x))\",  \n    \"∀x (WeddingsInJuly(x) → TravelToParisForHoneyMoon(x)),\", \n    \"∃x (WellAttended(x) and WeddingsInJuly(x))\",  \n    \"If HasChild(x), then NotTravelToParisForHoneymoon(x) and NotWedding(x)\",   \n    \"If WellAttended(x) then EitherWeddingsInJuly(x) or TravelToParisForHoneyMoon(x)\" \n],\n\"fol_conc\": \"NotWellAttended(John)\"\n}\n```",
      "perplexity": 1.3886393308639526
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Person\", \"Wedding\", \"Child\", \"TravelsToParis\", \"HasChildren\"],\"fol_consts\": [\"John\",\"July\"],\"fol_rules\":[\"\"], \"fol_conc\": []}\n",
      "perplexity": 2.4018197059631348
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Wedding(x)\", \"Child(x)\", \"TravelsToParisForHoneymoon(x)\", \"WellAttended(w)\"], \"fol_consts\": [\"john\", \"allweddings\"], \"fol_rules\": [\n\"∀x (Wedding(x) ∧ Child(x)) → TravelsToParisForHoneymoon(x)\",\n\"AllPeopleWhoTravelToParisForHoneymoon(x) → Wedding(x)\",\n\"∀x (WeddingsInJuly(w) → TravelsToParisForHoneymoon(x))\", \"(WellAttended(w) ∧ TravelstoParisForHoneymoon(x)) → WeddingsinJuly(w) ∨ (TravelstoParisForHoneymoon(x) ∧ NotWeddingInJuly(x))\"\n], \"fol_conc\": \"NotWellAttended(john)\" }",
      "perplexity": 2.0428812503814697
    }
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Person\", \"HasWedding\", \"HasChild\", \"TravelsToParisForHoneymoon\", \"WeddingsInJuly\"], \n\"fol_consts\": [\"John\"],\n\"fol_rules\": [\n    \"(∀p (HasWedding(p) → HasChild(p)))\",  // All people who have a wedding also have at least one child.\n    \"(∀p (TravelsToParisForHoneymoon(p) ∧ HasWedding(p)) )\", // All people who travel to Paris for their honeymoon are those with weddings.\n    \"((WeddingsInJuly(p) → TravelsToParisForHoneymoon(p)))\",  // All weddings in July occur at the same time as a trip to Paris for honeymoon.\n    \"(∃w (WeddingsInJuly(w)) ∧ WellAttended(w))\", // There are some well-attended wedding events that happen during July, which can be seen as happening on honeymoon trips.\n],\n\"fol_conc\": \"(∀p  ((HasChild(p) → ¬TravelsToParisForHoneymoon(p)) ))\" \n}\n\n```",
      "perplexity": 1.8879719972610474
    },
    "logic_problem_json": {
      "raw": "{}\n  \t \t",
      "perplexity": 221.90902709960938
    }
  },
  {
    "id": 131,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Person\", \"HasWedding\", \"HasChild\", \"TravelsToParisForHoneymoon\", \"WellAttended\"],\n\"fol_consts\": [\"John\"], \n\"fol_rules\":[ \n    \"∀x (HasWedding(x) → HasChild(x)),\", // If someone has a wedding, they have at least one child.\n    \"∀x (TravelsToParisForHoneymoon(x) → HasWedding(x)),\", // All people who travel to Paris for their honeymoon also have a wedding.\n    \"∀w (WeddingsInJuly(w) → TravelsToParisForHoneymoon(w)),\", // All weddings in July belong to people who travel to Paris for their honeymoon. \n],\n\"fol_conc\": \"¬(WellAttended(John))  ∧ ¬(TravelsToParisForHoneymoon(John))\" \n}\n```",
      "perplexity": 1.394461750984192
    }
  },
  {
    "id": 132,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are mammals with no teeth.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Mammal\", \"Teeth\", \"Round\"], \n\"fol_consts\": [\"Platypus\", \"Humans\", \"mammal\"],\n\"fol_rules\": [],\n\"fol_conc\":  \"∀x (Mammal(x) → Teeth(x)) ∧ ¬(Mammal(x) → Round(x))\"\n}\n```",
      "perplexity": 1.4174078702926636
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"mammals\", \"haveTeeth\"], \"fol_consts\": [\"Platypus\",\"Humans\"], \"fol_rules\": [\n  \"∀x ( mammals(x) → haveTeeth(x)) \", \",\" ],\"fol_conc\": \"∃x (mammals(x)∧ ¬haveTeeth(x))\"} ",
      "perplexity": 2.733488082885742
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Mammal(x)\", \"Toothless(x)\", \"HasTeeth(x)\"], \"fol_consts\": [\"platypus\", \"human\", \"mammal\"], \"fol_rules\": [\n  \"∀x (Mammal(x) → HasTeeth(x))\", \"∃x (Platypus(x) → Toothless(x))\", \"∀x (Mammal(x) → Platypus(x))\", \"∀x (HasTeeth(x) ∧ Mammal(x))\"\n], \"fol_conc\": \"∃x (Platypus(x) → HasNoTeeth(x))\"}",
      "perplexity": 1.7354273796081543
    }
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Mammal\", \"Teeth\", \"Reptile\"],\n\"fol_consts\": [\"Platypus\", \"Humans\"],\n\"fol_rules\": [\n  \"∀x (Mammal(x) → ∃y (Teeth(x, y)) ),\", // all mammals have teeth or some mammal has teeth.\n  \"¬(Mammal(x) & ¬Tooth(x))\", // Mammal is a creature that has teeth\n  \"∀x (Reptile(x) → Mammal(x))\" ,// reptiles are animals and also mammals. \n],\n\"fol_conc\": \"Platypus are Reptiles\"\n}\n```",
      "perplexity": 1.8137260675430298
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Mammal\", \"Toothless\"],\n\"fol_consts\": [\"Platypus\", \"Humans\"], \",\"\n    :[\"Teeth\"],\n  \"fol_rules\": [\n   \"∀x (Mammal(x) → Toothy(x)) \",\n   \"platypus is Mammal(platypus)\",\n   \"not platypus has Toothless(platypus)\",\n   \"human have teeth\",\n   \"Platypus is not reptile \" ],\n  \"fol_conc\": \"Not Platypus are reptiles\"}\n",
      "perplexity": 3.9493353366851807
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Mammal(x)\", \"Teeth(x)\", \"Reptile(y)\"], \"fol_consts\": [\"platypus\", \"mammal\", \"human\"], \"fol_rules\": [\n    \"∀x (Mammal(x) → Teeth(x))\", \"∃x (Platypus(x) → ¬Teeth(x))\", \"∀x (Platypus(x) → Mammal(x))\", \"∀x (Human(x) → Teeth(x))\"], \"fol_conc\": \"¬Reptile(platypus)\"\n}",
      "perplexity": 1.7506731748580933
    }
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Mammal\", \"Teeth\"],\n\"fol_consts\": [\"Platypus\", \"Human\"],\n\"fol_rules\": [\n  \"(∀x)(Mammal(x) → (hasTeeth(x)))\",\n  \"(∃x)(Mammal(x) ∧ ¬(hasTeeth(x)) = Platypus)\",\n  \"(∀x)(Mammal(x) → (hasTeeth(x)))\",\n  \" (∀x)(Human(x) ∧ hasTeeth(x)) \" \n],\n\"fol_conc\": \"(∀x)(Human(x) ∧ Mammal(x))\"\n}\n```",
      "perplexity": 1.2975049018859863
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Mammal\", \"Teeth\"], \"fol_consts\": [\"Platypus\", \"Human\", \"mammals\"], \"fol_rules\": [\n    \"∀x (Mammal(x) → ∃y (Teeth(x, y)) ),\",\n    \"∀x (Platypus(x) → ¬ Teeth(x)),\",\n    \"∀x (Platypus(x) → Mammal(x)),\",\n    \"∀x (Human(x) → Teeth(x))\",\n    \"\"], \"fol_conc\": [\"Humans are mammals.\" ] }\n",
      "perplexity": 1.6387617588043213
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Mammal(x)\", \"Teeth(x)\", \"HasTooth(x, y)\"], \"fol_consts\": [\"platypus\", \"human\"], \"fol_rules\": [\n  \"∀x (Mammal(x) → HasTooth(x, x))\", \"∃y (Platypus(y) ∧ ¬HasTooth(y, y))\", \"∀x (Mammal(x) → HasTooth(x, x))\", \"∀x (Human(x) → HasTooth(x, x))\"], \"fol_conc\": \"Human(human)\"}",
      "perplexity": 1.7632825374603271
    }
  },
  {
    "id": 135,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space sucks.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Suck\", \"isHouseholdAppliance\"], \n\"fol_consts\": [\"Space\",  \"Plunger\",\"Vacuum\",\"Vampire\",\"Duster\"],\n\"fol_rules\": [\n    \"∀x (Suck(x) → isHouseholdAppliance(x))\", \n    \"∀x (∃y (Suck(y) ∧ Vacuum(y)))\", \n    \"∀x (∃z (Suck(z) ∧ Vampire(z))),  \n   \"Space = Vacuum\", \n   \"Duster ∉ Suck\" ,\n],\n\"fol_conc\": \"Space sucks.\"\n}\n```",
      "perplexity": 1.601392149925232
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Suck\", \"IsHouseholdAppliance\"], \"fol_consts\": [\"Space\", \"Plunger\", \"Vacuum\", \"Duster\"], \"fol_rules\": [\n  \"∀x (Suck(x) → IsHouseholdAppliance(x)), \", \"], \"\n  \t \t, \"∃x (Suck(x) ∧ IsHouseholdAppliance(x))\" , \"\"]\n}\n",
      "perplexity": 3.096292018890381
    }
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Suck\", \"isHouseholdAppliance\"],\n\"fol_consts\": [\"Space\", \"Plunger\", \"Vacuum\", \"Duster\",\"Vampire\"],\n\"fol_rules\": [\n  \"∀x ( Suck(x) → isHouseholdAppliance(x))\", \n  \"∃x ( Suck(x) & isHouseholdAppliance(x)),\n],\n\"fol_conc\": \"Space is a Vampire.\"\n}\n```",
      "perplexity": 1.5080207586288452
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Suck\", \"HouseholdAppliance\"],\"fol_consts\": [\"Space\",\"Plunger\",\"Vacuum\",\"Vampire\",\"Duster\"],\"fol_rules\":[\n    \"∀x (Suck(x) → HouseholdAppliance(x)),\" ],\"fol_conc\": [\"Space ∧ Suck(x)→ Vampire(x)]} \"\n  ] }",
      "perplexity": 2.94235897064209
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"SuckedBy(x, y)\"], \"fol_consts\": [\"p\", \"q\", \"r\", \"s\"], \"fol_rules\": [\n  \"∀x (SuckedBy(x, p) → ¬SuckedBy(x, q)) ∧ ∀x (SuckedBy(x, r) → ¬SuckedBy(x, s))\",\n  \"¬SuckedBy(a, space)\", \"∃x (SuckedBy(x, vacuums)) ∧ ExistentialyVacuumsExistentiallySuckSpace(space)\" ,\n   \"∀x (SuckedBy(x, vampires) → ¬SuckedBy(x, dusters))\",\n  \"∃x (SuckedBy(x, space)) ∧ SuckedBy(a, vacuum)\", \"ExistsVacuumSuctionA(vacuum) ∧ ExistsDusterSuckingSpace(dusters)\" ], \"fol_conc\": \"ThereforeSpaceIsAVampire(space)\" }",
      "perplexity": 2.536616325378418
    }
  },
  {
    "id": 137,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "If something is a household appliance, it sucks.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [HouseholdAppliance, Suck],\n\"fol_consts\": [\"Plunger\", \"Vacuum\", \"Vampire\", \"Space\", \"Duster\"],\n\"fol_rules\": [],\n\"fol_conc\": \"∀x (HouseholdAppliance(x) → Suck(x))\" \n}\n```",
      "perplexity": 1.1198341846466064
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Suck\", \"HouseholdAppliance\"],\"fol_consts\": [\"Plunger\", \"Vacuum\", \"Vampire\",\"Space\",\"Duster\"],\"fol_rules\": [],\"fol_conc\": \"∀x (HouseholdAppliance(x) → Suck(x))\"}\n",
      "perplexity": 1.5423716306686401
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Sucking(x)\", \"HouseholdAppliance(x)\"], \"fol_consts\": [\"p\", \"q\"], \"fol_rules\": [\n    \"∀x (HouseholdAppliance(x) → Sucking(x))\"\n], \"fol_conc\": \"Ifx(householdappliance, x) ∧ Sucking(x)\" }",
      "perplexity": 2.3397748470306396
    }
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"MachineLearningAlg\", \"SupervisedLearn\", \"UnsupervisedLearn\", \"ReinforcementLearn\", \"TrainedBy\"], \n\"fol_consts\": [\"TextSummarizationModel\"], \n\"fol_rules\": [], \n\"fol_conc\":  \"∃x (MachineLearningAlg(x)∧ SupervisedLearn(x) → TrainedBy(x, TextSummarizationModel))\" \n}\n\n```",
      "perplexity": 1.561375617980957
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"MachineLearningAlgorithm\", \"SupervisedLearning\", \"UnsupervisedLearning\", \"ReinforcementLearning\", \"TrainedWith\"], \",\"\n  \t \t: [ \"TextSummarizationModel\", \"LabelledData\"] ,\n\"fol_consts\": [\"StateOfTheArtTextSummrarisationModel\", \"MLAlgorithms\", \"UnlabelledData\"],\n\"fol_rules\":[ [],\"\"],\n\"fol_conc\": [\"∃x (MachineLearningAlgorithm(x) ∧ SupervisedLearning(x) ∧ TrainedWith(x, StateOfTheArtTextSummarizationModel))\"] }\n",
      "perplexity": 3.1457901000976562
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MachineLearningAlg(x)\", \"SupervisedLearning(y)\", \"UnsupervisedLearning(z)\", \"ReinforcementLearning(w)\", \"TextSummarizationModel(m)\"], \"fol_consts\": [\"text\", \"stateofart\"], \"fol_rules\": [\n  \"∀x (MachineLearningAlg(x) → ∃y (SupervisedLearning(y)) ∨ ∃y (UnsupervisedLearning(z)) ∨ ∃y (ReinforcementLearning(w)))\",\n  \"¬(TextSummarizationModel(m) ∧ MachineLearningAlg(m))\",\n  \"∀x (MachineLearningAlg(x) → TextSummarizationModel(m) ∧ ∃p (LabelledData(p, x)))\", \"SupervisedLearning(y) ∨ UnsupervisedLearning(z) ∨ ReinforcementLearning(w)\"\n], \"fol_conc\": \"SupervisedLearning(y)\"}",
      "perplexity": 1.7440452575683594
    }
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"MachineLearningAlgorithm\", \"SupervisedLearning\", \"UnsupervisedLearning\", \"ReinforcementLearning\"],\n\"fol_consts\": [\"textSummarizationModel\",\"stateOfTheArt\"], \n\"fol_rules\":[ \n  \"∀x (MachineLearningAlgorithm(x) → SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x))\",\n  \"∀x (UnsupervisedLearning(x) → ¬LabelledDataRequirement(x))\",\n  \"∃x (MachineLearningAlgorithm(x) & textSummarizationModel(x))\",\n  \"¬(ReinforcementLearning(x) & textSummarizationModel(x))\", \n  \"∀x (MachineLearningAlgorithm(x) & LabelledDataRequirement(x)) → ¬textSummarizationModel(x)\",\n],\n\"fol_conc\": \"∃x (UnsupervisedLearning(x) & textSummarizationModel(x))\" \n}\n```",
      "perplexity": 1.293839693069458
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"MachineLearningAlgorithm\", \"SupervisedLearning\", \"UnsupervisedLearning\", \"ReinforcementLearning\"], \",\"\n   : [\"TrainedWith\", \"LabelledDataRequired\"],\n\"fol_consts\": [\"StateoftheArtTextSummarizationModel\"],\n\"fol_rules\": [\"\"],\n\"fol_conc\": \"\" }\n",
      "perplexity": 3.5591869354248047
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"MachineLearningAlgorithim(x)\", \"SupervisedLearning(y)\", \"UnsupervisedLearning(z)\", \"ReinforcementLearning(w)\", \"TrainedByMLAlgorithm(x, y)\"], \n\"fol_consts\": [\"textsummarizationmodel\", \"stateoftheart\", \"machinelearningalgorithm\"],  \"fol_rules\": [\n    \"∀x (MachineLearningAlgorithim(x) → TrainedByMLAlgorithm(x, textsummarizationmodel))\", \"∀y (UnsupervisedLearning(y) → ¬RequiresLabeledData(y))\",\n    \"∃x (TrainedByMLAlgorithm(x, stateoftheart))\", \"¬(ReinforcementLearning(w) → TrainedByMLAlgorithm(w, stateoftheart))\", \"∀x (MachineLearningAlgorithim(x) ∧ RequiresLabeledData(x) → ¬TrainWithTextSummarizationModel(x))\"\n], \n\"fol_conc\": \"∃z (UnsupervisedLearning(z) → TrainedByMLAlgorithm(z, textsummarizationmodel))\"}",
      "perplexity": 1.811721682548523
    }
  },
  {
    "id": 140,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is loved by children.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Funny\", \"Popular\", \"Ugly\", \"LovedByChildren\", \"FromTheSimpsons\"],\n\"fol_consts\": [\"Ben\"],\n\"fol_rules\": [\n  \"∀x ( Funny(x) → Popular(x)),\", \n  \"∀x ( Ugly(x) → ¬Popular(x)),\",\n  \"∀x ( LovedByChildren(x) → Funny(x)),\",\n  \"∀x ( FromTheSimpsons(x) → LovedByChildren(x)),\",\n  \"∀x ( Yellow(x) → FromTheSimpsons(x)),\", \n  \"Ben ⊕ (FromTheSimpsons or Funny)\"\n],\n\"fol_conc\": \"LovedByChildren(Ben)\" \n}\n```",
      "perplexity": 1.238975167274475
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Funny\", \"Popular\", \"Ugly\", \"Loved\"], \"fol_consts\": [\"Ben\"] , \"fol_rules\": [\n  \"∀x (Funny(x) → Popular(x)), \", \"// This rule states that if a cartoon character is funny, then it's popular. \",\" ∀x (Ugly(x) → ¬Popular(x)),\", \"// This rule states that if a cartoon character is ugly, then it's not popular.\", \"∃x (Loved(x)  → Funny(x))\", \"//This rule states there exists a loved cartoon character who is also funny.\", \"∃x (fromTheSimpsons(x) ∧ Loved(x)), \", \"// This rule states that there exists an from The Simpsons character who is loved.\" , \"∀x (Yellow(x) → fromTheSimpsons(x))\",\"//This rule states that if a cartoon character is yellow, then it's from the simpsons.\" , \"∃x (Ben ⊕  fromTheSimpsons(x)),\" ],\n \"fol_conc\": [\"Ben is loved by children.\"] }\n",
      "perplexity": 2.1640443801879883
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Funny(x)\", \"Popular(x)\", \"Ugly(x)\", \"LovedByChildren(x)\", \"FromSimpsons(x)\", \"Yellow(x)\"], \"fol_consts\": [\"ben\", \"cartoon\"], \"fol_rules\": [\n  \"∀x (Funny(x) → Popular(x))\", \"∀x (Ugly(x) → ¬Popular(x))\", \"∀x (LovedByChildren(x) → Funny(x))\", \"∀x (FromSimpsons(x) → LovedByChildren(x))\",\n  \"∀x (Yellow(x) → FromSimpsons(x))\", \"Ben(x) ∨ Ben(y)\", \"(FromSimpsons(x) ∧ LovedByChildren(x))\" ], \"fol_conc\": \"Ben(x) ∧ LovedByChildren(x)\" }",
      "perplexity": 1.9545187950134277
    }
  },
  {
    "id": 141,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is ugly or yellow.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Funny\", \"Popular\", \"Ugly\", \"LovedByChildren\", \"FromTheSimpsons\", \"Yellow\"],\n\"fol_consts\": [\"Ben\"], \n\"fol_rules\":[\n    \"If A is Funny then B is Popular. \",\n    \"If A is Ugly then not B is Popular.\",\n    \"if A is Loved By Children then A is Funny.\",\n    \"if A is From The Simpsons then A is Loved By Children.\",\n    \"if A is Yellow then A is From The Simpsons.\" , \n    \"Ben is either FromTheSimpsons or Funny\",\n],\n \"fol_conc\": \"Ben is Ugly or Yellow.\"\n}\n```",
      "perplexity": 1.496537685394287
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Cartoon\", \"Funny\", \"Popular\", \"Ugly\", \"LovedByChildren\", \"FromSimpsons\", \"Yellow\"],\"fol_consts\": [\"Ben\",\"The Simpsons\"],\"fol_rules\":[\"\"], \"fol_conc\": [\"Ben is Ugly or Yellow.\"]}\n",
      "perplexity": 1.8173768520355225
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Funny(x)\", \"Popular(x)\", \"Ugly(x)\", \"LovedByChildren(x)\", \"FromSimpsons(x)\", \"Yellow(x)\"], \"fol_consts\": [\"ben\", \"cartoon\"], \"fol_rules\": [\n    \"∀x (Funy(x) → Popular(x))\", \"∀x (Ugly(x) → ¬Popular(x))\", \"∀x (LovedByChildren(x) → Funny(x))\",\n    \"∀x (FromSimpsons(x) → LovedByChildren(x))\", \"∀x (Yellow(x) → FromSimpsons(x))\", \"(BenEitherOrFunyORSimpsons(ben))\"\n], \"fol_conc\": \"BenUglyOrYellow(ben)\" }",
      "perplexity": 2.127347707748413
    }
  },
  {
    "id": 142,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Funny\", \"Popular\", \"LovedByChildren\", \"FromSimpsons\", \"Yellow\"],\n\"fol_consts\": [\"Ben\"], \n\"fol_rules\": [],\n\"fol_conc\":  \"∃x (FromSimpsons(x) → LovedByChildren(x)) ∧ ∀x ((Funny(x) → Popular(x))) ∧ ¬(LovedByChildren(Ben) → Funny(Ben))\" \n\n}\n```",
      "perplexity": 1.6514109373092651
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Cartoon\", \"Funny\", \"Popular\", \"Ugly\", \"Loved by children\"],\n\"fol_consts\": [\"Ben\"], \",\"\n  :\"fol_rules\" ,\n  \"[ \\forall x ( Cartoon(x) → Funny(x)) ]\\n[ \\forall x ( Ugly(x) → Not Popular(x) )]\\n[ \\forall x ( Loved by children(x) → Funny(x) )] \\n[ \\forall x ( Simpsons(x) → Loved by children(x)) ]  \\n[ \\forall x ( Yellow(x) → Simpsons(x)) ] \\n [ Ben ⊕ (Simpsons(x))]\\n]\"\n   : \"fol_conc\" ,\"Ben is either yellow and ugly or neither yellow nor ugly.\"\n  :\" }\"\n}",
      "perplexity": 2.7393558025360107
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Funny(x)\", \"Popular(x)\", \"Ugly(x)\", \"LovedByChildren(x)\", \"FromTheSimpsons(x)\"], \"fol_consts\": [\"ben\", \"cartooncharacter\"], \"fol_rules\": [\n    \"If(funny, then, popular) ∧ If(ugly, notpopular)\",\n    \"If(lovedbychildren, funny)\",\n    \"If(fromthesimpsons, lovedbychildren)\",\n    \"If(yellow, fromthesimpsons)\",\n    \"BenEitherFromTheSimpsonsOrFunny(x)\"\n], \"fol_conc\": \"BenIsEitherYellowAndUglyOrNeitherYellowNorUgly(ben)\"}",
      "perplexity": 2.0315334796905518
    }
  },
  {
    "id": 143,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Some Heck cattle are artificially selected.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"isA\", \"bredBack\", \"resemble\"], \n\"fol_consts\": [\"HeckCattle\",\"Aurochs\"],\n\"fol_rules\": [\n  \"(∀x)(BredBack(x) → isA(x, Heckcattle))\",\n  \"(∃x)(IsA(Heck cattle, Aurochs))\", \n  \"isA(a,Animal)\", // This rule can be added to simplify the logic.\n],\n \"fol_conc\": \"(∃x)(BredBack(x) ∧ isA(x, HeckCattle))\"\n}\n```",
      "perplexity": 2.0855231285095215
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BredBack\", \"isAnimal\"], \"fol_consts\": [\"HeckCattle\",\"Aurochs\"], \"fol_rules\": [\n    \"∀x ( BredBack(x) → isAnimal(x) )\", 0, 1],\n\"fol_conc\": \"∃x (BredBack(x) ∧ isAnimal(x))\"}",
      "perplexity": 2.096372604370117
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BredBack(x, t)\", \"Animal(x)\"],  \"fol_consts\": [\"heck\", \"aurochs\",\"1920s\"], \"fol_rules\": [\n    \"∀x (BredBack(x, 1920s) → Animal(x))\" , \"∃x (Animal(x) ∧ BredBack(x, t))\" ],  \"fol_conc\": \"∃x (HeckCattle(x) ∧ BredBack(x, 1920s))\"}",
      "perplexity": 2.2055509090423584
    }
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Animal\", \"BredBack\"],\n\"fol_consts\": [\"Heck Cattle\", \"Aurochs\", \"Animals\"], \n\"fol_rules\": [\n    \"(∀x)( BredBack(x) → (∃y)( Animal(y) &&  BreedBack(x, y)))\" ,\n    \"(∀x)(Animal(x) → (Exists a: animal))\"  ],\n\"fol_conc\": \"Aurochs is extinct.\" \n}\n```",
      "perplexity": 1.8864455223083496
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Animals\", \"BredBack\"], \"fol_consts\": [\"HeckCattle\", \"Aurochs\"], \"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 1.7879465818405151
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Animal(x)\", \"BredBack(x, y)\", \"Resembles(x, y)\"], \"fol_consts\": [\"aurochs\", \"heckcattle\", \"animals\",\"1920s\"], \"fol_rules\": [\n    \"∀x (Animal(x) → BredBack(x, aurochs))\", \"∃x (BredBack(x, heckcattle) ∧ Resembles(x, aurochs))\", \"∀x (BredBack(x, y) ∧ Animal(y) → Animal(y))\"\n], \"fol_conc\": \"Aurochs(x) ∧ ¬Extinct(x)\" }",
      "perplexity": 1.8145537376403809
    }
  },
  {
    "id": 145,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Student\", \"Human\", \"Studies\", \"Teaches\"], \n\"fol_consts\": [\"Jerry\", \"Rose\", \"Young\"],\n\"fol_rules\": [\n    \"∀x (Student(x) → Human(x))\", // All students are humans.\n    \"If Studies(x) then Student(x)\",  // If someone studies, then they are a student. \n    \"Either Studies(x) or Teachs(x)\",   // A person either studies or teaches. \n    \"No Young Person Teaches\",         // No young person teaches.\n    \"¬ (Teaches(x) ∧ isManager(x))\", // Jerry neither teaches nor is a manager.\n    \"Rose ∨ Student(Rose)\" ,       // Rose is young or a student.\n],\n\"fol_conc\": \"Jerry is Young.\"  \n}\n```",
      "perplexity": 1.4372855424880981
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"Human\", \"Studies\", \"Teaches\"],\"fol_consts\": [\"Jerry\", \"Rose\", \"Young\", \"Manager\"],\"fol_rules\":[\n  \"∀x (Student(x) → Human(x)),\", 0\n  \t  , 1 ],\"fol_conc\": \"Jerry is Young\"}",
      "perplexity": 3.4978041648864746
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Human(x)\", \"Studies(x, y)\", \"Teaches(x)\"], \"fol_consts\": [\"x\", \"y\",\"z\", \"u\"], \"fol_rules\": [\n\"∀x (Student(x) ∧ Human(x))\",\n\"∀x (Studies(x, y) → Student(x))\",\n\"∃x (Teaches(x) ∨ Studies(x))\",\n\"¬(Young(x) ∧ Teaches(x))\",\n\"¬(Jerry(z) ∧ Teachs(z))\",\n\"Rose(u) ∨ Student(u)\" ], \"fol_conc\": \"Jerry(z) ∧ Young(z)\"}",
      "perplexity": 1.70504891872406
    }
  },
  {
    "id": 146,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is not young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Human\", \"Student\", \"Studies\", \"Teaches\"],\n\"fol_consts\": [\"Jerry\",\"Rose\"], \n\"fol_rules\": [\n  \"∀x (Human(x) → Student(x)), \", \n  \"If (Studises(x)) then (Student(x)),\", \n  \"Either Studies or Teaches, \" ,\n  \"No Young Person teaches\", \n  \"¬Jerry (Teaches) and ¬Jerry (is a manager)\" , \n  \"Rose is young or Student\", \n],\n\"fol_conc\": \"¬Jerry is Young.\"\n}\n```",
      "perplexity": 1.795542597770691
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"Human\", \"Studies\", \"Teaches\"],\"fol_consts\": [\"Jerry\", \"Rose\"],\"fol_rules\":[\n    \"∀x (Student(x) → Human(x)),\", \",\" ],\"fol_conc\":[\"¬Young(Jerry)]}  \" ]}",
      "perplexity": 3.7863028049468994
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Human(x)\", \"Studies(x, y)\", \"Teaches(y)\"], \"fol_consts\": [\"jerry\", \"rose\", \"young\"], \"fol_rules\": [\n  \"∀x (Student(x) → Human(x))\", \"∀x (Studies(x, y) → Student(x))\",\n  \"∃x ∃y (Teaches(y) ∧ ¬Students(x))\", \"¬Young(x) ∨ Students(x)\",\n  \"¬JerryTeaches(y)\",\n  \"RoseIsStudentOrYoung(y)\"\n], \"fol_conc\": \"¬JerryIsYoung(jerry)\"}",
      "perplexity": 2.147017478942871
    }
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Student\", \"Human\", \"Studies\", \"Teaches\", \"Young\"], \n\"fol_consts\": [\"Jerry\",\"Rose\"],\n\"fol_rules\": [],\n\"fol_conc\": \"Rose is a Human or a manager.\"\n}\n```",
      "perplexity": 1.3104887008666992
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"Human\", \"Studies\", \"Teaches\"], \"fol_consts\": [\"Jerry\", \"Rose\"], \"fol_rules\": [\n    \"∀x (Student(x) → Human(x)),\", 0\n    ,\"∀x (Studies(x, y) → Student(y)),\", 0\n    ,\"∃x (Studys(x) ∧ Teaches(x)) ∨ ∃x (Teaches(x) ∧ Studys(x)),\" , 0\n   ], \"fol_conc\": [\"Rose is Human or Rose is a manager.\" ] } ",
      "perplexity": 2.0956244468688965
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Human(x)\", \"Studies(x, y)\", \"Teaches(x)\"], \"fol_consts\": [\"jerry\", \"rose\"], \"fol_rules\": [\n    \"∀x (Student(x) → Human(x))\", \"(Studies(x, y) → Student(y))\", \"(PersonEitherStudsOrTeaches(x))\", \"¬(YoungPerson(y) → Teaches(y))\", \"¬(JerryTeaches(z) ∨ JerryIsManager(z))\" , \"(RoseYoung(r) ∨ RoseStudent(r))\"], \"fol_conc\": \"RoseHumanOrManager(rose)\" }",
      "perplexity": 2.251612901687622
    }
  },
  {
    "id": 148,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or Jerry is a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Student\", \"Human\", \"Studies\", \"Teaches\", \"Young\"], \n\"fol_consts\": [\"Jerry\",\"Rose\"],\n\"fol_rules\": [\n  \"∀x (Student(x) → Human(x))\", // All students are humans.\n  \"If Studies(y), then Student(y)\", // If someone studies, they're a student. \n  \"Either Studies(y) or Teach(y)\",   // A person either studies or teaches.\n  \"No Young Person Teaches()\",    // No young person teaches.\n  \"¬ (Teaches(x) ∧ isManager(x))\", // Jerry neither teaches nor is a manager.\n  \"Rose ∨ Student(x)\"     // Rose is young or a student. \n],\n \"fol_conc\": \"Rose is Human or Jerry is Manager.\" \n}\n```",
      "perplexity": 1.5418944358825684
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"Human\", \"Studies\", \"Teaches\"], \"fol_consts\": [\"Jerry\",\"Rose\"],\"fol_rules\": [\n    \"∀x (Student(x) → Human(x))\", 0, 0 ], \"fol_conc\": \"∃x (Human(x) ∨ JerryIsAManager(x))\"} ",
      "perplexity": 2.510411024093628
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Human(x)\", \"Studies(x, y)\", \"Teaches(y)\"], \"fol_consts\": [\"students\", \"humans\", \"jerry\", \"rose\"], \"fol_rules\": [\n  \"∀x (Student(x) → Human(x))\", \"∀x (Studies(x, y) → Student(x))\", \"∃x ∀y (Teaches(y) ∨ Studies(y))\", \"¬(Young(y) → Teaches(y))\", \"¬(Jerry(x) → Teaches(x))\",\n  \"Rose(x) ∨ Students(x)\",\n  \"NoStudent(x)\"], \"fol_conc\": \"Rose(x) ∨ ¬(Jerry(x) → Teaches(x))\"}",
      "perplexity": 1.9667047262191772
    }
  },
  {
    "id": 149,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "It is not true that Rose is a student and Jerry is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"student\", \"human\", \"studies\", \"teaches\", \"isYoung\"], \n\"fol_consts\": [\"Jerry\", \"Rose\"],\n\"fol_rules\": [],\n\"fol_conc\": []\n}\n```",
      "perplexity": 1.3299249410629272
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"Human\", \"Studies\", \"Teaches\"], \"fol_consts\": [\"Jerry\",\"Rose\"], \"fol_rules\": [\n    \"∀x (Student(x) → Human(x)),\", 0, 0, \"If x is a student then x is human.\",\n  \"∀x (Studies(x) → Student(x)),\", 0, 0, \"If x studies then x is a student.\",\n    \"∃x (Teaches(x) ∨ Studies(x)),\", 0, 0,\"There exists an person that either teaches or studies.\",\n   \"∀y (Young(y) → ¬Teaches(y)),\", 0, 0,\"No young person teaches.\" ,\n  \"¬(Teaches(Jerry) ∨ isManager(Jerry))\", 0, 0, \"Jerry does not teach or is a manager.\", 0, 0, \"Rose is either a student or a young person.\", 0, 0, \"∃x (Student(x) ∧ Young(x)).\"\n], \"fol_conc\": [\"It is not true that Rose is a student and Jerry is a human.\" ] } ",
      "perplexity": 1.7159664630889893
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"Human(x)\", \"Studies(x, y)\", \"Teaches(x)\"], \"fol_consts\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"fol_rules\": [\n  \"∀x (Student(x) → Human(x))\", \"∀x (Studies(x, y) → Student(x))\", \"∃x (Studys(x, a) ∨ Teaches(x))\", \"¬(Young(x) ∧ Teaches(x))\", \"¬(Jerry(a) ∧ Teaching(a))\",\n  \"Rose(b) ∨ Student(b)\", \"(Student(b) ∧ (Human(b) → Rose(b)))\"\n], \"fol_conc\": \"¬(Rose(b) ∨ Student(b))\"}",
      "perplexity": 2.19610595703125
    }
  },
  {
    "id": 150,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Neapolitan Chronicles is an English book.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"PublishedBy\",  \"TranslatedFrom\", \"English\", \"isBook\"], \n\"fol_consts\": [\"NewVesselPress\",\"NeapolitanChronicles\",\"PalaceOfFlies\"],\n\"fol_rules\": [\n    \"∀x (PublishedBy(x, NewVesselPress) → English(x))\",\n    \"∀x (TranslatedFrom(x, y)  → isBook(y))\" \n],\n \"fol_conc\": \"NeapolitanChronicles is an English book.\"\n}\n```",
      "perplexity": 1.4100176095962524
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"PublishedBy\", \"TranslatesFrom\", \"English\"],\n\"fol_consts\": [\"NewVesselPress\",\"NeapolitanChronicles\",\"PalaceOfFlies\"],\n\"fol_rules\": [\"\"], \"\"\n  : {\n    \"fol_conc\": \"∀x (PublishedBy(x, NewVesselPress) → English(x))\"\n}\n }",
      "perplexity": 2.857133626937866
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Book(x)\", \"PublishedBy(x, y)\", \"TranslatedFrom(x, y)\"], \"fol_consts\": [\"newvesselpress\", \"napolitanchronicles\",\"palaceofflies\", \"english\"], \"fol_rules\": [\n  \"∀y (Book(y) → PublishedBy(y, newvesselpress))\", \"∀y (PublishedBy(y, newvesselpress) → TranslatedFrom(y, english))\", \"∃x (Book(x) → Book(napolitanchronicles))\"], \"fol_conc\": \"NeapolitanChroniclesEnglishBook(napolitanchronicles)\"\n}",
      "perplexity": 2.5477166175842285
    }
  },
  {
    "id": 151,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Harry Potter was published by New Vessel Press.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"PublishedBy\", \"TranslatedFrom\", \"English\",  \"isBook\"],\n\"fol_consts\": [\"NewVesselPress\",\"NeapolitanChronicles\",\"PalaceOfFlies\",\"HarryPotter\"], \n\"fol_rules\": [],\n\"fol_conc\": []\n}\n```",
      "perplexity": 1.4161092042922974
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Book\", \"PublishedBy\", \"TranslatedFrom\"], \"fol_consts\": [\"Harry Potter\",\"New Vessel Press\", \"Neapolitan Chronicles\", \"Palace of Flies\"], \"fol_rules\": [\n  \"∀x (Book(x) ∧ PublishedBy(x, NewVesselPress)) → ∃y (Book(y) ∧ TranslatedFrom(y, Italian)),\",\n  \"∀x (PublishedBy(x, New Vessel Press) ∧ Book(Neapolitan Chronicles))\",\n  \"∀x (PublishedBy(x, New Vessel Press) ∧ Book(Palace of Flies))\",\n \"∃x (Book(x) ∧ PublishedBy(x, NewVesselPress)) → \\text{New Vessel Press published Harry Potter}\"\n ], \"fol_conc\": \"Harry Potter was published by New Vessel Press.\"}\n",
      "perplexity": 1.5393201112747192
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PublishedBy(x, y)\", \"TranslatedFrom(y, z)\"], \"fol_consts\": [\"newvesselpress\", \"harrypotter\", \"palaceofflies\", \"neapolitanchronicles\"],  \"fol_rules\": [\n    \"∀x (PublishedBy(x, newvesselpress)) → ∀x (PublishedBy(x, newvesselpress) → TranslatedFrom(x, english))\",\n    \"NewVesselPress(newvesselpress) → ∃y (PublishedBy(y, newvesselpress) ∧ PublishedBy(y, neapolitanchronicles))\",\n  \"NewVesselPress(newvesselpress) → ∀x (PublishedBy(x, palaceofflies) ∨ PublishedBy(x, harrypotter))\" , \"TranslatedFrom(neapolitanchronicles, italian)\", \"PublishedBy(harrypotter, newvesselpress)\" ], \"fol_conc\": \"∃y (PublishedBy(y, newvesselpress) ∧ TranslatedFrom(y, english))\"}",
      "perplexity": 2.1329538822174072
    }
  },
  {
    "id": 152,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Palace of Flies was translated from Italian.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"PublishedBy\", \"TranslatedFrom\"],\n\"fol_consts\": [\"New Vessel Press\",\"Neapolitan Chronicles\", \"Palace of Flies\", \"Italian\",  \"English\"],\n\"fol_rules\": [\n    \"∀x (PublishedBy(x, New Vessel Press) → PublishedBook(x, English))\", \n    \"∀x (TranslatedFrom(x, Italian) → PublishedBook(x, English))\",\n    \"∃x (PublishedBy(x, New Vessel Press)  ∧ TranslatedFrom(x, Italian))\"\n],\n\"fol_conc\": \"Palace of Flies was translated from Italian.\" \n}\n```",
      "perplexity": 1.3557440042495728
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Published\", \"TranslatedFrom\"], \"fol_consts\": [\"NewVesselPress\",\"NeapolitanChronicles\", \"PalaceOfFlies\"], \"fol_rules\": [\n  \"∀x (Published(x) → ∃y (TransaltedFrom(x, y))),\",\n  \"∀x (Published(x) → English)\", 2\n], \"fol_conc\": [\"Palace of Flies was translated from Italian.\"]}\n",
      "perplexity": 2.120054244995117
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PublishedBy(x, y)\", \"TranslatedFrom(y, z)\"], \"fol_consts\": [\"newvesselpress\", \"palacesofflies\", \"napolitanchronicles\"], \"fol_rules\": [\n  \"∀x (PublishedBy(x, newvesselpress) → ∀y (PublishedBy(x, newvesselpress) ∧ Published(x, y)))\", \"∃x (TranslatedFrom(x, napoleonchronicles))\", \"∃x (PublishedBy(x, newvesselpress) ∧ TranslatedFrom(x, palaceofflies))\",\n  \"∀y (TranslatedFrom(y, italian) → ∀z (PublishedBy(z, newvesselpress) ∧ TranslateFrom(z, y)))\",\n  \"¬(∃x (PublishedBy(x, newvesselpress) ∧ TranslatedFrom(x, palaceofflies)))\"\n], \"fol_conc\": \"TranslatedFrom(palacesoflies, italian)\"}",
      "perplexity": 1.9643594026565552
    }
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"OwnsLargeDesktopMonitor\", \"WorksRegularlyAtHome\", \"HasImpressiveHomeOffice\", \"SpendsFreeTimeTidyingAndOrganizingHomes\", \"VisitsOfficeSupplyStoreRegularly\", \"GoesToBedLate\", \"WakesUpEveryDayAfterNoon\"], \n\"fol_consts\": [\"Remy\"],\n\"fol_rules\": [\"\"],\n\"fol_conc\": [\"Remy visits the office supply store regularly.\" ]\n}\n```",
      "perplexity": 1.2748780250549316
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"HomeOwner\", \"LargeMonitor\", \"WorksRegularly\", \"AtWork\", \"OfficeStoreVisit\"],\"fol_consts\": [\"Remy\"],\"fol_rules\": [\n    \"∀x (HomeOwner(x) → WorksRegularly(x))\", 1,\n    \"∀x (HomeOwner(x) → LargeMonitor(x))\", 2, 3, 4,\n    \"∀x (WorksRegularly(x) → AtWork(x))\", 5, 6,\n    \"∀x (OfficeStoreVisit(x) → WorksRegularly(x))\", 7,\n    \"∀x (HomeOfficeFull(x) → HomeOwner(x))\", 8,\n    \"∀x (AtWork(x) → FreeTimeTidy(x))\", 9,\n    \"∀x (FreeTimeTidy(x) → NotLateForBed(x))\", 10,\n    \"¬(NotLateForBed(Remy) & FreeTimeTidy(Remy))\", 11], \"fol_conc\": \"OfficeStoreVisit(Remy)\" }\n",
      "perplexity": 1.7047706842422485
    }
  },
  {
    "id": 154,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Home\", \"DesktopMonitor\", \"WorkRegularly\",  \"WorkAtHome\", \"OfficeStockedAndImpressive\", \"GoToBedLate\", \"WakeUpAfterNoon\", \"VisitOfficeSupplyStore\"],\n\"fol_consts\": [\"Remy\"], \n\"fol_rules\":[\"\"],\n\"fol_conc\": [\"\"]\n}\n```",
      "perplexity": 1.65960693359375
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"HomeOffice\", \"DesktopMonitor\", \"WorkRegularlyAtHome\", \"SpendFreeTimeTidyingAndOrganizingTheSpacesInTheHome\", \"VisitOfficeSupplyStore\"],\"fol_consts\": [\"Remy\"],\"fol_rules\":[[\"Person(x) ∧ DesktopMonitor(x) → WorkRegularlyAtHome(x)\", \"All(x) ∧ HomeOffice(x) →  DesktopMonitor(x)\", \"WorkRegularlyAtHome(x) ∧ SpendFreeTimeTidyingAndOrganizingTheSpacesInTheHome(x) → NotGoToBedLateWakeUpEveryDayAfterNoon(x)\", \"Not Go To Bed Late Wake Up Every Day After Noon(x) ∧ Spend Free Time Tidying And Organizing The Spaces In Their Home (x) →  VisitOfficeSupplyStoreRegularly(x)\", \"All People Who Work Regularly At Home Visit the Office Supply Store Regularly\"],\"fol_conc\"\n  ,\"Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\"\n  ],\" }\" :-1\n  }",
      "perplexity": 2.2774832248687744
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"HomeOwner(x)\", \"WorkRegularlyAtHome(y)\", \"StockedAndImpressiveOffice(z)\", \"VisitStoreOften(w)\", \"TidyOrganizeSpace(s)\", \"LateBedtimeWakeUpAfterNoon(t)\", \"FreeTimeTidyingOrganization(u)\"], \"fol_consts\": [\"remy\", \"homeowner1\", \"office2\"], \"fol_rules\": [\n  \"HomeOwner(x) → WorkRegularlyAtHome(y)\", \"StockedAndImpressiveOffice(z) ∧ HomeOwner(x) → AllOfWorkRegularlyAtHome(y)\", \"AllOfWorkRegularlyAtHome(y) → FreeTimeTidyingOrganization(u)\",\n  \"FreeTimeTidyingOrganization(u) → ¬LateBedtimeWakeUpAfterNoon(t)\" ], \"fol_conc\": \"RemyStockedAndImpressiveOffice2VisitStoreOften(w)\"}",
      "perplexity": 2.316192626953125
    }
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"HomeOwner\", \"DesktopMonitor\", \"RegularlyWorkAtHome\",\"FullyStockedAndImpressiveOffice\"],\"fol_consts\":[ \"Remy\"] , \"fol_rules\": [\"\"], \"fol_conc\": \"\" }\n",
      "perplexity": 2.6055092811584473
    }
  },
  {
    "id": 156,
    "nl_problem": {
      "context": [
        "All humans are mortal.",
        "All Greeks are humans."
      ],
      "question": "Some Greeks are mortal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Human\", \"Mortal\"],\n\"fol_consts\": [\"Grecian\"], \n\"fol_rules\": [\n  \"∀x (Human(x) → Mortal(x))\", // All humans are mortal.\n  \"∀x (Greek(x) → Human(x))\" // All Greeks are human.\n],\n\"fol_conc\": \"∃x (Greek(x) ∧ Mortal(x))\" // Some Greeks are mortal.\n}\n```",
      "perplexity": 1.2655463218688965
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Human\", \"Mortal\"], \"fol_consts\": [\"Grecian\"], \"fol_rules\": [], \"fol_conc\": \"∃x (Greek(x) ∧ Mortal(x))\"}\n",
      "perplexity": 1.5432993173599243
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Human(x)\", \"Mortal(y)\"], \"fol_consts\": [\"h\", \"g\"], \"fol_rules\": [\n    \"∀x (Human(x) → Mortal(x))\", \"∀x (Greek(x) → Human(x))\",\n  \"∃x (Greek(x) → Mortal(x))\", \"(SomeGreeksAreMortal(h, g))\",\n \"¬((AllHumansAreMortals(g)))\"], \"fol_conc\": \"(∃x (Greek(x) ∧ Mortal(x)))\"}",
      "perplexity": 3.025473117828369
    }
  },
  {
    "id": 157,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James has a part-time job offered by the university.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Student\", \"WorksInLibrary\", \"HasPartTimeJob\", \"TakesDatabaseCourse\", \"InstructedBy\", \"WorkingInTheLab\"],\n\"fol_consts\": [\"James\", \"Jack\"],\n\"fol_rules\": [ \n    \"∀x (Student(x) → WorksInLibrary(x))\", // All students are in library if they're a student.  \n    \"∀x (HasPartTimeJob(x) ∧ WorksInLibrary(x))\",  // If someone has part-time job, and is working in the library then they have it by the university.\n    \"∀x (TakesDatabaseCourse(x) → Student(x) & InstructedBy(x, David))\", // if student takes database course they are a student instructed by professor david. \n    \"∀x (WorkingInTheLab(x) → InstructedBy(x,David))\",  // If someone works in the lab they're instructed by professor David. \n],\n\"fol_conc\": \"James has A part-time job offered by the university.\" // James is a student working in the Lab and is instructed by Professor David who teaches database course\n}\n```",
      "perplexity": 1.7780781984329224
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"WorksInLibrary\", \"FromComputerScienceDepartment\", \"HasPartTimeJob\", \"Instructs\"],\"fol_consts\": [\"James\",\"Jack\",\"David\", \"Lab\"],\"fol_rules\":[\"\"], \"fol_conc\": \"[James] ∧ [HasPartTimeJobOfferedByUniversity]\" }\n",
      "perplexity": 2.3348724842071533
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"WorksInLibrary(x)\", \"FromCSdept(x)\", \"PartTimeJobOfferedByUniversity(x)\", \"InstructedBy(x, y)\",\"WorkingInLab(x)\", \"DatabaseCourse(x)\", \"HasParttimeJob(x)\" ], \n\"fol_consts\": [\"james\", \"jack\"], \n\"fol_rules\": [\n  \"∀x (Student(x) → WorksInLibrary(x))\",\n  \"∀x (PartTimeJobOfferedByUniversity(x) → StudentsWhoWorkInLibrary(x))\",\n  \"∀x (FromCSdept(x) → DatabaseCourse(x))\",\n  \"∀x (InstructedBy(david, x) → DatabaseCourse(x))\", \"∀x (WorkingInLab(x) → InstructedBy(david, x))\", \"JamesStudentInLibraryOrDatabaseCourse(james)\", \"JackNoPartTimeJobAndNotInlab(jack)\"\n], \n\"fol_conc\": \"JamesHasParttimeJobOfferedUniversity(james)\"\n}",
      "perplexity": 2.2419681549072266
    }
  },
  {
    "id": 158,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James does not have a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Student\", \"WorksInLibrary\", \"HasPartTimeJob\", \"TakesDatabaseCourse\", \"InstructedBy\",  \"WorkingInTheLab\"],\n\"fol_consts\": [\"James\",\"Jack\",\"David\",], \n\"fol_rules\": [\n    \"∀x (Student(x) → WorksInLibrary(x))\",\n    \"∀x (HasPartTimeJob(x) → Student(x) ∧ WorksInLibrary(x))\", \n    \"∀x (TakesDatabaseCourse(x) → Student(x) ∧ ComputerScienceDepartment(x))\",\n    \"∀x (InstructedBy(x, David)  → TakesDatabaseCourse(x))\",\n    \"∀x (WorkingInTheLab(x)  → InstructedBy(x, David))\",\n],\n\"fol_conc\": \"¬HasPartTimeJob(James)\" \n}\n```",
      "perplexity": 1.2875781059265137
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"Library\", \"ComputerScienceDept\", \"PartTimeJobOfferedByUniversity\", \"WorkInLibary\", \"TakeDatabaseCourse\",\"InstructedByProfessorDavid\"],\"fol_consts\": [\"James\", \"Jack\", \"David\"], \"fol_rules\": [\"\"], \"fol_conc\": \"\"}\n",
      "perplexity": 2.2627320289611816
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"LibraryWorker(x)\", \"ComputerSciDeptMember(x)\", \"PartTimeJobOfferedByUniversity(y)\", \"LabWorker(x)\", \"DatabaseCourseEnrolled(x)\", \"InstructedByProfessorDavid(x)\", \"WorkedInTheLibrary(x)\"], \"fol_consts\": [\"james\", \"jack\", \"david\", \"library\"],  \"fol_rules\": [\n    \"(Student(x) ∧ LibraryWorker(x)) → ¬ComputerSciDeptMember(x)\",\n    \"(PartTimeJobOfferedByUniversity(y) ∧ Student(x)) → Student(x) ∧ WorkedInTheLibrary(x)\",\n    \"(DatabaseCourseEnrolled(x) ∧ ComputerSciDeptMember(x))\",\n    \"InstructedByProfessorDavid(x) ∧ LabWorker(x)\",\n    \"(LabWorker(x) ∧ InstructedByProfessorDavid(x))\",\n    \"JamesStudent(james)\",\n    \"JackNotPartTimeJobOfferedOrLabWorker(jack)\",\n  \"FOLConcimpulann(james, notparttimejobofferedbyuniversity)\"\n  ], \"fol_conc\": \"JamesDoesNotHaveAPartTimeJobOfferedByTheUniversity(james)\"}",
      "perplexity": 1.973040223121643
    }
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Student\", \"WorksInLibrary\", \"FromCSDept\", \"HasPartTimeJob\", \"InstructedBy\", \"TakingDatabaseCourse\", \"WorkingInTheLab\"],\n\"fol_consts\": [\"James\",\"Jack\"], \n\"fol_rules\": [],\n\"fol_conc\":  \" James ∈ (Either Takes Database Course or Has Part-time job offered by the university) \" \n}\n\n```",
      "perplexity": 1.9140362739562988
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"WorksInLibrary\", \"HasPartTimeJob\", \"IsInstructedBy\", \"TakesDatabaseCourse\"], \"fol_consts\": [\"James\", \"Jack\"], \"fol_rules\": [\n    \"∀x (Student(x) → WorksInLibrary(x)), ∀x (AllStudentsWhoWorkInTheLibrary(x)) ∧  ∃y (HasPartTimeJobOfferedByUniversity(x, y)). \",\n    \"∀x (IsInstructedBy(x, David) → TakesDatabaseCourse(x)),\",\n    \"∀x (WorksInLibrary(x) → IsInstructedBy(x, ProfessorDavid)),\", \"], \"\n  \t \t,\"fol_conc\"\n  \t\t] }\n",
      "perplexity": 3.152027130126953
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"WorksInLibrary(x)\", \"HasPartTimeJob(x)\", \"TakesDatabaseCourse(x)\", \"InstructedBy(x, y)\"], \"fol_consts\": [\"james\", \"jack\", \"david\", \"library\"], \"fol_rules\": [\n  \"∀x (Student(x) → WorksInLibrary(x))\", \"∀x (HasPartTimeJob(x) → StudentWhoWorksInLibrary(x))\", \"∀x (TakesDatabaseCourse(x) → FromComputerScienceDepartment(x))\", \"∀x (InstructedBy(x, y) → TakesDatabaseCourse(y))\",\n  \"∀x (WorksInLab(x) → InstructedBy(x, david))\", \"(James(x) ∧ WorksInLab(x)) → JamesTakesDatabaseCourse(x)\", \"(Jack(x) ∧ NotHasPartTimeJobUniversity(x) ∧ NotWorksInLab(x))\"\n], \"fol_conc\": \"JamesEitherTakesDatabaseOrHasPartTimeJobUniversity(james)\" }",
      "perplexity": 1.7198739051818848
    }
  },
  {
    "id": 160,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "Jack takes the database course.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Student\", \"WorksInLibrary\", \"HasPartTimeJob\", \"TakesDatabaseCourse\", \"InstructedBy\", \"WorkingInTheLab\"],\n\"fol_consts\": [\"James\",\"Jack\"],\n\"fol_rules\":[\n  \"∀x( Student(x) → ∃y (WorksInLibrary(x, y)) ) \",\n  \"∀x(HasPartTimeJob(x) → ∃y (Student(x) && WorksInLibrary(x, y)))\",\n  \"∀x( TakesDatabaseCourse(x) → ∃y ( Student(x) && IsFromComputerScienceDepartment(x, y)) ) \",\n  \"∀x(InstructedBy(x, David) → TakesDatabaseCourse(x)),\" ,\n  \"∀x( WorkingInTheLab(x) → InstructedBy(x,David) ),\",\n   \"Student(James)\",\n   \"Not (HasPartTimeJob(Jack)) && Not (WorkingInTheLab(Jack)) \" \n],\n\"fol_conc\": \" Jack takes the database course.\"\n}\n```",
      "perplexity": 1.5776335000991821
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Student\", \"WorksInLibrary\", \"FromCSCD\",\"HasPartTimeJob\", \"InstructedBy\", \"WorkingInLab\"],\n\"fol_consts\": [\"James\", \"Jack\", \"David\"],\n\"fol_rules\": [\n    \"∀x (Student(x) → WorksInLibrary(x))\", \",\"\n    \t, \"∀x (HasPartTimeJob(x)  → Student(x) && WorksInLibrary(x))\", \",\" ,\"All students who take the database course are from the computer science department.\", 0],\n\"fol_conc\": \"Jack takes the database course.\"}\n",
      "perplexity": 2.684844732284546
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Student(x)\", \"WorksInLibrary(x)\", \"FromCSDepartment(x)\", \"HasPartTimeJob(x, u)\", \"InstructedBy(x, y)\", \"WorkingInTheLab(x)\", \"TakesDatabaseCourse(x)\" ], \"fol_consts\": [\"james\", \"jack\"], \"fol_rules\": [\n    \"∀x (Student(x) → WorksInLibrary(x)) ∧ ∀y (FromCSDepartment(y) → HasPartTimeJob(y, u)) ∧ ∀z (TakesDatabaseCourse(z) → FromCSDepartment(z))\",\n    \"∀x (WorksInLibrary(x) ∧ Student(x))\",\n    \"AllStudentsInstructedByProfessorDavidAreTakingTheDBCourse(x)\", \"WorkingInTheLab(x) ∧ InstructedBy(x, y)\" , \"∃x (Student(x) ∧ WorkingInTheLab(x)) ∧ JamesIsAstudent(x)\", \"∀x (FromCSDepartment(x) → HasPartTimeJob(x, u))\",\n    \"AllStudentsWorkingInTheLabAreInstructedByProfessorDavid(x)\" ], \"fol_conc\": \"JackTakesDatabaseCourse(jack)\"}",
      "perplexity": 1.784171462059021
    }
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"likes\", \"wantsToCompose\", \"canComposes\", \"composes\"],\n\"fol_consts\": [\"George\"], \n\"fol_rules\":[\n  \"\"],\n\"fol_conc\": \"If George likes music and has access to a program, he will compose.\"\n}\n```",
      "perplexity": 1.5680469274520874
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Likes\", \"Composes\", \"HasAccess\"],\"fol_consts\": [\"George\"],\"fol_rules\": [\n  \"∀x (Likes(x, Music) → Composes(x)),\", \",\"\n  \t  ,\"∀x (Composes(x) ∧ WantsToCompose(x)) → Compose(x)\", \",\" ],\"fol_conc\": \"If George likes music and has access to a program, he will compose.\"}\n",
      "perplexity": 2.6589860916137695
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Likes(x, y)\", \"WantsToCompose(x)\", \"HasAccess(x, y)\", \"CanCompose(x)\"], \"fol_consts\": [\"george\", \"music\"], \"fol_rules\": [\n\"∀x (Likes(x, music) → WantsToCompose(x))\", \"(GeorgeHasAccess(x) ∧ CanCompose(x) → WantsToCompose(x))\", \"(CanCompose(x) ∧ WantsToCompose(x)) → Composes(x)\"\n], \"fol_conc\": \"(Likes(george, music) ∧ HasAccess(george, program)) → Composes(george)\" }",
      "perplexity": 1.7755614519119263
    }
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"likes\", \"wantsToCompose\", \"hasAccess\", \"canCompose\", \"willCompose\"], \n\"fol_consts\": [\"George\"],\n\"fol_rules\": [\n    \"∀x (likes(x, music) → wantsToCompose(x))\",\n    \"∀x (hasAccess(x, program) → canCompose(x))\",\n    \"∀x (canCompose(x) ∧ wantsToCompose(x)  → willCompose(x))\",\n    \"¬(willCompose(x)) → ¬(canCompose(x)) \"\n],\n\"fol_conc\": \"If George will not compose, George can not compose.\"\n}\n```",
      "perplexity": 1.2017545700073242
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"likes\", \"wants\", \"has access to\"], \"fol_consts\": [\"George\", \"composes\", \"music\", \"program\"], \"fol_rules\": [\n  \"∀x ( likes(x, music) → wants(x, compose) )\", \"<br/> \",\n  \"∀x ( has_access(x, program) → wants(x, compose))\", \"<br/> \",\n  \"∀x (wants(x, compose) → composes(x))\", \"<br/> \",\n  \"¬(composes(x) → ∧( ¬wants(x, compose))))\" ] , \"fol_conc\": \"If George will not compose, then George can't compose.\"}\n",
      "perplexity": 1.886513590812683
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"LikesMusic(x)\", \"Composes(x)\", \"HasAccessToProgram(x)\"], \"fol_consts\": [\"george\", \"music\", \"program\"], \"fol_rules\": [\n  \"∀x (LikesMusic(x) → Composes(x))\", \"∀x (Composes(x) ∧ HasAccessToProgram(x)) → Composes(x)\",\n  \"∀x (Composes(x) ∧ WantsToCompose(x)) → Composes(x)\"\n], \"fol_conc\": \"¬Composes(george) → ¬HasAccessToProgram(george)\"}",
      "perplexity": 1.8316460847854614
    }
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Hawk\", \"Bird\"],\n\"fol_consts\": [\"A\", \"B\", \"AllBirds\"],\n\"fol_rules\": [\n    \"∀x (Bird(x) → Hawk(x)) ∧ ¬Hawk(x)\", \n    \"∃x (Bird(x) ∨ AllBirds(x))\" ,  \n],\n\"fol_conc\": [\"AllBirds\"]\n}\n```",
      "perplexity": 1.6519091129302979
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"hawk\", \"bird\"], \"fol_consts\": [\"Hawk\", \"Bird\"], \"fol_rules\": [], \"fol_conc\": \"∀x ( Bird(x) → ∃y (land(y)) )\"}",
      "perplexity": 1.7017536163330078
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Hawk(x)\", \"Bird(x)\", \"Lands(x)\"], \"fol_consts\": [\"hawk\", \"bird\"], \"fol_rules\": [\n  \"∀x (Bird(x) → Hawk(x))\", \"¬Hawk(x)\" , \"(∃y (Bird(y) ∧ Lands(y)))\"\n], \"fol_conc\": \"AllbirdsLand(a)\"}",
      "perplexity": 3.034574031829834
    }
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"TV\",  \"isGivenOutOnTV\", \"isOnTheBachelor\", \"portraysTheLivesOfRealPeople\", \"realityShow\"], \n\"fol_consts\": [\"BreakingBad\",\"Monday\",\"8pm\"],\n\"fol_rules\": [],\n\"fol_conc\": [] \n}\n```",
      "perplexity": 1.630750060081482
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TV\", \"rose\", \"Bachelor\"], \"fol_consts\": [\"BreakingBad\"], \"fol_rules\": [\n    \"∀x (TV(x) → ∃y (Rose(x, y)) ),\", \",\" ],\"fol_conc\": \"Break Bad is on TV.\"}\n  ",
      "perplexity": 2.9803104400634766
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TV(x)\", \"Rose(y)\", \"Bachelor(z)\", \"RealityShow(w)\", \"Monday(t)\"], \"fol_consts\": [\"breakingbad\",\"monday\", \"8pm\", \"rose\"], \"fol_rules\": [\n  \"∀x (TV(x) → ∃y (Rose(y)))\", \"∀x (Bachelor(z) → ∀y (Rose(y) ∧ RealityShow(w)))\", \"∀x (RealityShow(w) → ∀y (Rose(y)) ∧ Bachelor(z))\",\n  \"¬(BreakingBad(b) ∧ TV(b))\" ], \"fol_conc\": \"BreakingBad(b) ∧ Monday(t)\"}",
      "perplexity": 1.9802711009979248
    }
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"TVShow(x)\", \"RosesGivenOutOnTV(y, x)\",  \"RealityTVShows(z)\", \"onTheBachelor(y, z)\"], \n\"fol_consts\": [\"BreakingBad\", \"Monday\", \"8pm\"], \n\"fol_rules\": [ \"∀x (TVShow(x) → RosesGivenOutOnTV(y, x))\",  \"∀y (RosesGivenOutOnTV(y, z) → onTheBachelor(y, z))\", \"∀z (RealityTVShows(z) → onTheBachelor(y, z))\", \"¬(BreakingBad ∉ RealityTVShows)\",\n],\n\"fol_conc\": \"Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\"  }\n```",
      "perplexity": 1.5438603162765503
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TV\", \"givenOutOn\", \"onBachelor\", \"portraysLivesOfRealPeople\", \"realityShow\"],\n\"fol_consts\": [\"BreakingBad\",\"Monday8PM\",\"roses\",\"Bachelor\",\"RealityTV\"], \",\"\n  : \"fol_rules\" , \"fol_conc\" : []} ",
      "perplexity": 4.714756488800049
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TVShow(x)\", \"RoseGivenOutOnTV(x)\", \"Bachelor(x)\", \"RealityTVShow(x)\"], \"fol_consts\": [\"breakingbad\", \"monday8pm\"], \"fol_rules\": [\n\"∀x (TVShow(x) → ∃y (RoseGivenOutOnTV(y)) ∧ Bachelor(y))\",\n\"∀x (Bachelor(x) → RealityTVShow(x))\",\n\"∀x (RealityTVShow(x) → TVShow(x))\",\n\"¬(BreakingBadTVShow(x))\" ], \"fol_conc\": \"BreakingBadTVShow(breakingbad) ∧ RoseGivenOutOnTV(breakingbad) ∧ Monday8pm(breakingbad)\" }",
      "perplexity": 1.6108455657958984
    }
  },
  {
    "id": 166,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"GivenOutOnTV\", \"IsOnTheBachelor\", \"PortraysLivesOfRealPeople\", \"RealityShow\"],\n\"fol_consts\": [\"BreakingBad\",\"MondaysAt8PM\", \"Roses\"], \n\"fol_rules\": [\n    \"(∀x)(GivenOutOnTV(x) → IsOnTheBachelor(x)),\", \n    \"(∀x)(IsOnTheBachelor(x) → PortraysLivesOfRealPeople(x)),\", \n    \"(∀x)(PortraysLivesOfRealPeople(x) → RealityShow(x)),\", \n    \"¬(RealityShow(BreakingBad))\"\n],\n\"fol_conc\": \"(If GivenOutOnTV(Roses) then MondaysAt8PM(x)) \" \n}\n```",
      "perplexity": 1.418913722038269
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"TV\", \"isGivenOutOn\",\"onTheBachelor\",\"portraysLivesOfRealPeople\",\"realityShow\"],\"fol_consts\": [\"BreakingBad\",\"Monday8pm\",\"Roses\",\"RealityTVshow\"],\"fol_rules\": [\"\"],\n\"fol_conc\": []}\n",
      "perplexity": 2.8765759468078613
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"TVShow(x)\", \"RoseGivenOut(y)\", \"OnBachelor(y)\", \"RealityTVShow(x)\", \"RealPeoplePortrayed(y)\"], \"fol_consts\": [\"breakingbad\", \"monday8pm\", \"roses\",\"realitytvshow\",\"bachelor\"], \"fol_rules\": [\n\"∀x (TVShow(x) → ∃y (RoseGivenOut(y) → OnBachelor(y)) ∧ ∀z (OnBachelor(z) → RealPeoplePortrayed(z)) ∧ ∀w (RealPeoplePortrayed(w) → RealityTVShow(w)))\",\n\"¬(RealityTVShow(x) → ¬BreakingBad(x))\"], \"fol_conc\": \"If(roses, then, monday8pm)\" }",
      "perplexity": 1.9227970838546753
    }
  },
  {
    "id": 167,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "Heinrich Schmidt was either German or Russian.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"German\", \"Russian\", \"Nazi German Politician\", \"member of Prussian State Parliament\", \"member of Nazi Reichstag\"],\n\"fol_consts\": [\"Heinrich Scmidt\"],\n\"fol_rules\": [],\n\"fol_conc\": \"∃x (German(x) ∨ Russian(x))\" \n}\n```",
      "perplexity": 1.1884709596633911
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"German\", \"Russian\"], \"fol_consts\": [\"Heinrich Scmidt\"], \"fol_rules\": [], \"fol_conc\": \"∃x ( German(x) ∨ Russian(x))\"}\n",
      "perplexity": 1.580621361732483
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Nationality(x, y)\", \"MemberOfParliament(y, z)\", \"Nazi(y)\"], \"fol_consts\": [\"heinrich\", \"scmidt\"], \"fol_rules\": [\n  \"∀x (Nationality(x, heinrich)) → ∃z (MemberOfParliament(z, heinrich) ∧ Nazi(z))\",\n  \"∀x (Nazi(x) → MemberOfParliament(x, heinrich))\" ], \"fol_conc\": \"∃x (Nationality(x, russian) ∨ Nationality(x, german))\"}",
      "perplexity": 1.8713953495025635
    }
  },
  {
    "id": 168,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"NaziGermanPolitician\", \"MemberOfPrussianStateParliament\", \"MemberOfNaziReichstag\"],\n\"fol_consts\": [\"HeinrichScmidt\"],\n\"fol_rules\": [\"\"],\n\"fol_conc\": \"\"\n}\n```",
      "perplexity": 1.269633173942566
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"NaziGermanPolitician\", \"MemberOfParliament\"],\"fol_consts\":[\"Heinrich Scmidt\"],\"fol_rules\":[\"\"], \"fol_conc\": \"∃x ( NaziGermanPolitician(x) ∧ MemberOfParliament(x))\"}\n",
      "perplexity": 2.081364631652832
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"NaziGermanPolitician(x)\", \"PrussianStateParliamentMember(x)\", \"NaziReichstagMember(x)\"], \"fol_consts\": [\"scmidt\", \"heinrich\"], \"fol_rules\": [\n  \"∀x (NaziGermanPolitician(x) → PrussianStateParliamentMember(x) ∧ NaziReichstagMember(x))\" ,\n  \"∃x (NaziGermanPolitician(x) ∧ PrussianStateParliamentMember(x) ∧ NaziReichstagMember(x))\"\n], \"fol_conc\": \"∃x (NaziGermanPolitician(x) ∧ PrussianStateParliamentMember(x) ∧ NaziReichstagMember(x))\"}",
      "perplexity": 1.4246143102645874
    }
  },
  {
    "id": 169,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "No politicans are part of the Nazi Reichstag.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Politician(x)\", \"MemberOfParliament(x, y)\", \"NaziReichstagMember(y)\"],\n\"fol_consts\": [\"HeinrichScmidt\",  \"PrussianStateParliament\", \"Nazireichstag\"], \n\"fol_rules\": [\n    \"∀x (Politician(x) → MemberOfParliament(x, PrussianStateParliament))\",\n    \"∀x (NaziReichstagMember(y) → MemberOfParliament(y, NaziReichstag))\",\n    \"¬∃x (NaziReichstagMember(x) ∧ Politician(x))\" \n],\n\"fol_conc\": \"No politician is part of the Nazi Reichstag.\"\n}\n\n```",
      "perplexity": 1.4649008512496948
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Politician\", \"MemberOf\"], \"fol_consts\": [\"Heinrich Scmidt\"], \"fol_rules\": [\n    \"∀x (Politician(x) → MemberOf(x, Prussian State Parliament)), ∀y (MemberOf(y, Prussian State Parliament) →  MemberOf(y, Nazi Reichstag))\",\n    \"∃x (Nazi Reichstag ∈ Politicians)\" ], \"fol_conc\": \"Not all members of the Nazi Reichstag are politicians\"} ",
      "perplexity": 1.9676625728607178
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Person(x)\", \"NaziGermanPolitician(x)\", \"MemberOfPrussianStateParliament(x)\", \"PartOfTheNaziReichstag(x)\"], \"fol_consts\": [\"henriech\", \"scmidt\"], \"fol_rules\": [\n  \"∀x (Person(x) → NaziGermanPolitician(x))\", \"∃x (MemberOfPrussianStateParliament(x) ∧ PartOfTheNaziReichstag(x))\",\n  \"¬(PartOfTheNaziReichstag(henriech))\"], \"fol_conc\": \"NopoliticianispartOfTheNaziReichstag(henriech)\" }",
      "perplexity": 2.340362071990967
    }
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"DeadlyDisease(x)\", \"SurvivalRateLow(x)\", \"SevereCancer(x)\", \"IsBileDuctCancer(x)\" ],\n\"fol_consts\": [\"Colorectal Cancer\", \"Cholangiocarcinoma\"],\n\"fol_rules\": [],\n\"fol_conc\":  \"∀ x (DeadlyDisease(x) → SurvivalRateLow(x)) ∧ All(SevereCancer(x) : DeadlyDisease(x)) ∧ BileDuctCancer(Bile Duct Cancer) ∧ IsBileDuctCancer(Cholangiocarcinoma) ∧ NoOneWithMildFluHasSurvivalRateLow(No one with mild flu) →  ∀ x (IsBileDuctCancer(x) : SevereCancer(x))\"\n}\n```",
      "perplexity": 1.5990009307861328
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DeadlyDisease(x)\", \"SevereCancer(x)\", \"SurvivalRateLow(x)\"], \"fol_consts\": [\"cholangiocarcinoma\", \"bileductcancer\",\"colorectalcancer\", \"mildflu\"], \"fol_rules\": [\n\"IfDeadlyDisease(x) ∧ SurvivalRateLow(x) → DeadlyDisease(x)\",\n\"AllSevereCancer(x) ∧ DeadlyDisease(x) → True(x)\",\n\"BileductCancer(x) ∨ Cholangiocarcinoma(x) ∧ SevereCancer(x) → Bileductcancer(x)\",\n\"NoMildFlu(x) ∧ SurvivalRateLow(x) → False(x)\",\n\"IfSevereCacer(x) ∧ SurvivalRateLow(x) ∧ BileductCancer(x) → NotBileductCancer(x)\",\n\"AllSevereCANCER(x) ∧ SevereCancer(x) → True(x)\" ], \"fol_conc\": \"Colorectalcancer(c)\"}",
      "perplexity": 1.8500480651855469
    }
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem_json": {
      "raw": "{}\n  \t \t",
      "perplexity": 219.29409790039062
    }
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"DeadlyDisease(x)\", \"LowSurvivalRate(x)\", \"SevereCancer(x)\", \"BileDuctCancer(x)\"],\n\"fol_consts\": [\"ColorectalCancer\", \"Cholangiocarcinoma\", \"MildFlu\",],\n\"fol_rules\": [ \n  \"∀x (DeadlyDisease(x) → LowSurvivalRate(x))\",\n  \"∀x (SevereCancer(x) → DeadlyDisease(x))\",\n  \"BileDuctCancer(x) ∧ LowSurvivalRate(x) → x ≠ MildFlu\",\n  \"AllCcholangiocarcinoma = BileDuctCancer\",\n  \"AllCholangiocarcinoma (x) → BideDuctCancers(x)\",\n],\n\"fol_conc\": \"If not MildFlu and Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or Cholangiocarcinoma.\" \n}\n```",
      "perplexity": 1.483248233795166
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"DeadlyDisease\", \"SurvivalRateLow\"],\"fol_consts\": [\"BileDuctCancer\",\"Cholangiocarcinoma\",\"ColorectalCancer\",\"MildFlu\"],\"fol_rules\":[\n    \"[ DeadlyDisease(x) → SurvivalRateLow(x)]\", [\"AllSevereCancers are DeadlyDiseases\"] ,[\"BileDuctCancer is a SevereCancer\"] ,[\"All Cholangiocarcinoma is Bile Duct Cancer\"] ,\"No one with Mild Flu has a low survival rate\" ,\"If ( colorectal_cancer is Bile Duct cancer and Survival Rate Low(x) ) then  (Not (ColorectalCancer = Bile Duct Cancer))\"],\n    \"[ Not (MildFlu(y) ∧ SurvivalRateLow(y)) ] \"\n   \t :\"<br> If ( Colorectal Cancer is not a Mild Flu AND Cholangiocarcinoma ) then <br>( colorectal_cancer is bile duct cancer or cholangiocarcinoma)\"\n  ,\n\"fol_conc\": \"[Not(MildFlu(x) and SurvivalRateLow(x)) ] → [ColorectalCancer = Bile Duct Cancer or Cholangiocarcinoma]\" } ",
      "perplexity": 3.1023342609405518
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"DeadlyDisease(x)\", \"LowSurvivalRate(x)\"], \n\"fol_consts\": [\"cholangiocarcinoma\", \"bileductcancer\", \"mildflu\", \"colorectalcancer\"],  \"fol_rules\":[ \"(AllSevereCancersAreDeadlyDiseases(x)) → (DeadlyDisease(x))\", \"(DeadlyDisease(x) ∧ LowSurvivalRate(x))\", \"(BileduuctCancer(y) ∧ SurvivalRateLow(y)) → (Not(cholangiocarcinoma, y))\", \"((ColorectalCancer(z) ∧ BileductCancer(z)) ∧ (LowSurvivalRate(z))) → (Not(bileductcancer, z))\"], \"fol_conc\": \"(Not(mildflu, x) ∧ Cholangiocarcinoma(x)) → (BileduuctCancer(x) ∨ Cholangiocarcinoma(x))\"}",
      "perplexity": 2.189925193786621
    }
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"eatSaladRegularly\", \"growUpInHealthConsciousChildhoodHome\",  \"fulfillNutritionalDailyIntakes\", \"hasGoodRelationshipsWithParents\",\"visitGymAtLeastOnceADay\"], \n\"fol_consts\": [\"Taylor\"],\n\"fol_rules\": [],\n\"fol_conc\": [] \n}\n```",
      "perplexity": 1.465257167816162
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Person\", \"eatsSaladRegularly\", \"grewUpInHealthConsciousChildhoodHome\", \"fulfillsDailyNutritionalIntakes\",\"hasGoodRelationshipWithParents\"],\"fol_consts\": [\"Taylor\"],\"fol_rules\":[\n    \"∀P (eatsSaladRegularly(P) ∧ healthConscientiousHabit(P)) →  consciousAboutEatingHabits(P)\",\n    \"∀P (grewUpInHealthConsciousChildhoodHome(P) ⟹ eatsSaladRegularly(P))\",\n    \"∀P (fulfillsDailyNutritionalIntakes(P) ⟹ grewUpInHealthConsciousChildhoodHome(P))\",\n    \"if P has GoodRelationshipWithParents then fulfillsDailyNutritionalIntakes(P)\",\n    \"if P has good relationship with parents then not eatsSaladRegularly(P)\",\n    \"if P visits the gym at least once a day then fulfillsDailyNutritionalIntakes(P)\", \",\"\n], \"fol_conc\": [\"Taylor eats salads regularly.\"] }\n",
      "perplexity": 1.675679326057434
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Person(x)\", \"EatSaladRegularly(x)\", \"GrowUpInHealthConsciousChildhoodHome(x)\", \"FulfillNutritionalDailyIntakes(x)\",\"HasGoodRelationshipWithParents(x)\", \"VisitGymAtLeastOnceADay(x)\" ], \"fol_consts\": [\"taylor\"], \"fol_rules\": [\n    \"∀x (Person(x) → EatSaladRegularly(x))\", \"∀x (GrowUpInHealthConsciousChildhoodHome(x) → EatSaladRegularly(x))\", \"∀x (FulfillNutritionalDailyIntakes(x) → GrowUpInHealthConsciousChildhoodHome(x))\", \"If(hasgoodrelationshipwithparents, fulfillnutritionaldailyintakes)\",\n    \"If(visitgym, fulfillnutritionaldailyintakes)\", \"EitherTaylorGreweupinHealthconsciouschildhoodhomeandHasGoodRelationshipWithParentsOrNotBothGrowUpinHeathconscienthomeAndHavesoodrelationshipwithparentsOrnotgrowupinhhealthconsciousChildhoodHomeNorhasgoodrelationshipwithparents(x)\"], \n\"fol_conc\": \"TaylorEatSaladRegularly(taylor)\"}",
      "perplexity": 2.2508656978607178
    }
  },
  {
    "id": 174,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor visits the gym at least once a day.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n{\n\"fol_preds\": [ \"EatSaladRegularly\",  \"GrewUpInHealthConsciousChildhoodHome\", \"FulfillNutritionalDailyIntakes\", \"HasGoodRelationshipsWithParents\", \"VisitsGymAtLeastOnceADay\"], \n\"fol_consts\": [\"Taylor\"],\n\"fol_rules\": [],\n\"fol_conc\": [] \n}\n\n**Explanation:**\n\n* **Predicates:**  We need predicates to describe the relationships between individuals and their actions/characteristics. This includes: `EatSaladRegularly`, `GrewUpInHealthConsciousChildhoodHome`, `FulfillNutritionalDailyIntakes`, `HasGoodRelationshipsWithParents` , `VisitsGymAtLeastOnceADay`.\n\n* **Constants:**  We need a constant to represent Taylor.\n\n\n**Important Notes:** \nThis is just the start of converting the Natural Language reasoning problem into first-order logic, as we haven't started creating rules or making assumptions about the truth values of statements in order for us to be able to generate FOL Formulas! ",
      "perplexity": 2.1865627765655518
    },
    "logic_problem_json": {
      "raw": "{}\n  \t \t",
      "perplexity": 203.0010223388672
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Person(x)\", \"EatSalad(x, y)\", \"GrowUpInHealthConsciousHome(x)\", \"FulfillNutritionalDailyIntakes(x)\", \"HaveGoodRelationshipWithParents(x)\", \"VisitGymAtLeastOnceADay(x)\"], \"fol_consts\": [\"taylor\"], \"fol_rules\": [\n    \"∀x (EatSalad(x, y) ∧ GrowUpInHealthConsciousHome(x)) → HealthyEatingHabits(x)\", \"∀x (GrowUpInHealthConsciousHome(x) → EatSalad(x, y))\",\n    \"∀x (FulfillNutritionalDailyIntakes(x) ∧ GrowUpInHealthConsciousHome(x))\", \"If(x) → If(y)\",\n    \"If(x) → ¬EatSalad(x)\",\n    \"If(x) → VisitGymAtLeastOnceADay(x)\" ],  \"fol_conc\": \"TaylorVisitstheGymAtLeastOnceADay(taylor)\"}",
      "perplexity": 1.6967636346817017
    }
  },
  {
    "id": 175,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Person\", \"EatSaladRegularly\", \"GrowUpInHealthConsciousChildhoodHome\", \"FulfillNutritionalDailyIntakes\", \"VisitGymAtLeastOnceADay\"],\n\"fol_consts\": [\"Taylor\"],\n\"fol_rules\":[\"\"], \n\"fol_conc\": [\"¬(Growing Up In Health Conscious Childhood Home and Visit Gym At Least Once A Day)\"]\n}\n\n```",
      "perplexity": 1.5928810834884644
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Person\", \"EatsSaladRegularly\", \"GrewUpInHealthConsciousChildhoodHome\", \"FulfillDailyNutritionalIntake\"], \",\"\n    \t: \"HealthyRelationshipWithParents\", \"VisitsGymAtLeastOnceADay\"\n  \t \t: \"IsA\", \"HasGoodRelationshipWithParents,\"\n  \t\t : \"Not\", \"DoesNotEatSaladsRegularly, \"\n   \t:\"HealthConsciousChildhoodHome\" , \"NutritionalDailyIntake\" :\"VisitedTheGym\" , \"EitherOr\"\n  \t: \"And\" ,\"NotEqualTo\"\n    : [\"Person\",\"EatsSaladRegularly\"] }\n    \t",
      "perplexity": 6.460452079772949
    }
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"OlympicGames\", \"SportingEvent\", \"won\"],\n\"fol_consts\": [\"Tokyo\",\"United States\"],\n\"fol_rules\": [ \n  \"∀x (OlympicGames(x) → SportingEvent(x)) \", // Rule: every Olympic game is a sporting event.\n  \"∃x (LastOlympicGames(x) → OlympicsGame(x, Tokyo))\",   //Rule: There exists an Olympic games in Tokyo\n],\n\"fol_conc\": \"WorldChampionship(world championships)\" \n}\n\n```",
      "perplexity": 2.029737710952759
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Olympics\", \"SportingEvent\"], \"fol_consts\": [\"OlympicGames\",\"Tokyo\",\"UnitedStates\"], \"fol_rules\": [\n  \"∀x (Olympics(x) ∧ SportingEvent(x))\",\n  \"∃x (LastGame(x) ∧ Olympics(x) ∧ City(x, Tokyo)),\",\n  \"∃x (OlympicGames(x) ∧ MedalCountMax(x, UnitedStates,Tokyo))\" ], \"fol_conc\": \"WorldChampionship(WC) ∧ SportingEvent(WC)\" } ",
      "perplexity": 1.8565189838409424
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"OlympicGames(x)\", \"SportingEvent(x)\"], \"fol_consts\": [\"the\", \"last\", \"games\", \"olympic\",\"tokyo\"], \"fol_rules\": [\n  \"∀x (OlympicsGame(x) → SportingEvent(x))\", \"∃x (LastOlympicGames(x) → SportingEvent(x))\",\n  \"∃x (UnitedStatesWonMedals(x, tokyo) → SportingEvent(x))\"], \"fol_conc\": \"WorldChampionships(x) ∧ SportingEvent(x)\" }",
      "perplexity": 2.3776803016662598
    }
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Olympics\", \"SportingEvent\", \"City\"],\n\"fol_consts\": [\"OlympicGames\",\"Tokyo\",\"UnitedStates\"],\n\"fol_rules\":[\"\"],\n\"fol_conc\": \"¬(Last Olympic Games= Tokyo)\" }\n",
      "perplexity": 3.3083107471466064
    }
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"OlympicGames\", \"isSportingEvent\", \"wonMostMedals\"],\n\"fol_consts\": [\"Tokyo\", \"United States\", \"last Olympic games\"],\n\"fol_rules\": [\n  \"∀x (Olympigames(x) → is Sporting Event(x))\", \n  \"∃x (LastOlympicGames(x) = Tokyo)\",\n  \"∃x (wonMostMedals(x, y) → x = United States & y = last Olympic games)\" ,\n],\n\"fol_conc\": \"The United States won the most medals in the last Olympic Games.\" \n}\n```",
      "perplexity": 1.5872136354446411
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"OlympicGames\", \"SportingEvent\", \"Won\"], \"fol_consts\": [\"UnitedStates\", \"Tokyo\", \"LastOlympicsGames\"], \"fol_rules\": [], \"fol_conc\": \"∃x (OlympicGame(x) ∧ SportingEvent(x))  ∧ (LastOlympicsGames(x) ≡ x = Tokyo) ∧ (Won(x, y) ∨ Won(y, x)) →  \\n UnitedStates(x) \\n\" }\n",
      "perplexity": 2.1274850368499756
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Olympics(x)\", \"SportingEvent(y)\"], \"fol_consts\": [\"games\", \"tokyo\", \"unitedstates\", \"olympics\",\"last\"], \"fol_rules\": [\n\"∀x (Olympics(x) ∧ SportingEvent(x)) → (∃y (Olympics(y)) ∧ ∃z (LastOlympicGames(z)))\",\n\"LastOlympicGames(games) ↔ Tokyo(games)\",\n\"UnitedStates(a) ∧ Olympics(b) → MedalCount(a, b)\"\n], \"fol_conc\": \"TheUSWonMostMedalsInTheLastOlympicsGamesinTokyo(lastolympicsgameintokyo)\"}",
      "perplexity": 2.7416481971740723
    }
  },
  {
    "id": 179,
    "nl_problem": {
      "context": [
        "All horses have hooves.",
        "No humans have hooves."
      ],
      "question": "Some humans are horses.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"hasHooves\", \"isHuman\", \"isHorse\"],\n\"fol_consts\": [\"Horses\",\"Humans\",\"Horsies\"], \n\"fol_rules\": [\"\"], \n\"fol_conc\": \"\" \n}\n```",
      "perplexity": 1.555972933769226
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Horses\", \"Hooves\", \"Humans\"], \"fol_consts\": [\"Horse1\",\"Human1\"],\"fol_rules\": [], \"fol_conc\": []}\n",
      "perplexity": 2.1423745155334473
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"HorseHoof(x)\", \"HumanHasHooves(x)\"], \"fol_consts\": [\"horse\", \"human\", \"hoof\"], \"fol_rules\": [\n  \"∀x (HorseHoof(x) → ∃y (HumanHasHooves(y)) ∧ HorseHoof(y) ∨ HumanHasHooves(y))\",\n  \"∀x (Not(x) ↔ NoHumansHaveHooves(x))\"\n], \"fol_conc\": \"∃x (HumanHasHooves(x) → HorseHoof(x))\"}",
      "perplexity": 2.0652692317962646
    }
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"flies\", \"is\"],\n\"fol_consts\": [\"Susan\", \"LGA\", \"John\"],\n\"fol_rules\": [\n  \"(¬(departure(x, y)) ∧ ¬(arrival(y, x))) → (flights(Susan, LGA))\",\n  \"(flights(Susan, LGA) ∧ isAirport(LGA, airport)) → (airport(LGA, Susan),)\",\n],\n\"fol_conc\": \"(flies(Susan, LGA)\"\n}\n```",
      "perplexity": 1.7649270296096802
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"flies\", \"departure\", \"arrival\"], \"fol_consts\": [\"Susan\", \"LGA\", \"John\"], \"fol_rules\": [\n  \"∀x (flies(x, LGA) → departure(x, LGA)\", 0,\n    \"∀x (flies(x, LGA) ∧ arrival(x, LGA) → ¬ x = LGA)\"\n], \"fol_conc\": \"Susan flies from LGA airport.\"}\n",
      "perplexity": 1.8484989404678345
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"FlyTo(x, y)\", \"DepartFrom(y)\", \"ArriveAt(y)\", \"IsLGAairport(z)\"], \"fol_consts\": [\"s\", \"j\", \"lga\"], \"fol_rules\": [\n\"Forall(x, flyto, x, lga) → Forall(x, arriveat, x, lga)\",\n\"¬Forall(x, departfrom, x, lga) → ¬Forall(x, flyto, x, lga)\" ,\n\"FlyTo(s, lga) ∧ IsLGAairport(lga) → Forall(j, flyfrom, j, lga)\",\n\"¬FlyTo(j, lga)\" ], \"fol_conc\": \"Forall(x, flyto, x, lga)\"}",
      "perplexity": 2.2880024909973145
    }
  },
  {
    "id": 181,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "John flies to LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"flies\", \"at\"],\n\"fol_consts\": [\"Susan\", \"LGA\", \"John\"],\n\"fol_rules\": [\n  \"∀x (flies(x, LGA) → at(x, LGA)) ∧ ¬(flies(x, LGA) ∧ at(x, LGA)),\", // Susan flies to LGA airport\n  \"∃y (flies(John, y) ∧ not(at(John, y)))\", // John flies from LGA and the departure is different than arrival. \n\n],\n \"fol_conc\": \"John flies from LGA airport.\"\n}\n```",
      "perplexity": 1.669697642326355
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"FlyTo\", \"DepartFrom\"], \"fol_consts\": [\"Susan\", \"John\", \"LGA\"], \"fol_rules\": [\n    \"∀x ( FlyTo(x, LGA) → DepartFrom(x, LGA))  ∧ ∃y ( x = John)\", 2],\n\"fol_conc\": \"John flies to LGA airport.\"}\n",
      "perplexity": 2.269843101501465
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Airport(x)\", \"FliesTo(x, y)\"], \"fol_consts\": [\"susan\", \"lga\", \"john\"], \"fol_rules\": [\n  \"∀x (Airport(x) → ∃y (FliesTo(x, y)) ∧ ¬(Airport(x) ⊕ Airport(y)))\" ,\n  \"JohnFliesFromLGAairport(susan)\"\n], \"fol_conc\": \"JohnFliesToLGAairport(john)\"}",
      "perplexity": 1.9195886850357056
    }
  },
  {
    "id": 182,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is a grumpy person.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Nice\", \"Mean\", \"Love\", \"OwnsPet\"],\n\"fol_consts\": [\"Tom\"], \n\"fol_rules\":[  \n    \"∀x (Nice(x, y) → Mean(x, y)),\", \n    \"∃x (Grumpy(x) ∧ Mean(x, animal)),\", \n    \"∀x (LoveAnimal(x) → Nice(x, animal)),\", \n    \"∀x (OwnsPet(x) → LoveAnimals(x))\",  \n    \"Tom OwnsPet(Tom)\",   \n],\n\"fol_conc\": \"Tom is Grumpy(Tom)\" \n}\n```",
      "perplexity": 1.4357702732086182
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Nice\", \"Mean\", \"OwnsPet\"],\n\"fol_consts\": [\"Tom\"], \",\"\n  : [\n    [\"animalLover\", \"Person\"] ,\n    [\"petOwner\", \"Person\"], 1\n   ],\n \"fol_rules\": [],\n \"fol_conc\": []}\n",
      "perplexity": 5.386984348297119
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"NiceTo(x, y)\", \"MeanTo(x, y)\", \"LovesAnimals(x)\", \"OwnsPet(x)\"], \"fol_consts\": [\"tom\", \"animallovers\", \"grumpypeople\"], \"fol_rules\": [\n  \"∀x (LovesAnimals(x) → NiceTo(x, x))\", \"∃y (GrumpyPeople(y) → MeanTo(y, animal))\", \"∀x (OwnsPet(x) → LovesAnimals(x))\", \"¬(MeanTo(t, a) ∧ NiceTo(a, t))\"],  \"fol_conc\": \"TomGrumpyPerson(tom)\"\n}",
      "perplexity": 2.077265739440918
    }
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Nice\", \"Mean\", \"Loves\", \"Owns\"],\n\"fol_consts\": [\"Tom\"],\n\"fol_rules\": [ \n  \"∀x (Loves(x, y) → Nice(x, y))\", // If someone loves animals, they are nice to them. \n  \"∃x (Grumpy(x) ∧ Mean(x, animal))\", // There exists a grumpy person who is mean to animals.\n  \"∀x (Owns(x, pet) → Loves(x, animal))\",  // If someone owns a pet, they love animals.\n  \"¬(Mean(Tom, animal))\",   // Tom is not mean to animals. \n],\n\"fol_conc\": \"Tom is not a grumpy person and mean to animals.\" \n}\n```",
      "perplexity": 1.3532390594482422
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Nice\", \"Mean\", \"OwnsPet\"], \",\"\n    :[\"AnimalLover\",\"Grumpy\"],\"fol_consts\":[ \"Tom\", \"Animals\"], \":\"\n   :[\"None\",\"Some\"], \"fol_rules\":[ ],\n    \"fol_conc\":[\"Not Grumply Tom and Mean to Animals\"] }\n",
      "perplexity": 7.1435465812683105
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"NiceToAnimals(x)\", \"MeanToAnimals(x)\", \"OwnsPet(x)\", \"LovesAnimals(x)\", \"Grumpy(x)\"], \"fol_consts\": [\"tom\", \"animal\"], \"fol_rules\": [\n    \"∀x (NiceToAnimals(x) ∧ MeanToAnimals(x)) → ¬(AllAnimalLovers(x))\",\n    \"∃x (OwnsPet(x) ∧ LovesAnimals(x))\",\n  \"Grumpy(x) ∨ AllAnimalLovers(x)\",\n  \"∀x (LovesAnimals(x) → OwnsPet(x))\"\n], \"fol_conc\": \"¬(TomGrumpyAndMeanToAnimals(tom))\"}",
      "perplexity": 1.6679866313934326
    }
  },
  {
    "id": 184,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Nice\", \"Mean\", \"OwnsPet\", \"IsGrumpy\", \"LovesAnimals\"],\n\"fol_consts\": [\"Tom\"],\n\"fol_rules\": [\n    \"(∀x)( Nice(x, y) → (Mean(x, y)))\", \n    \"(∃x) ( GrumpY(x) → Mean(x, Animal))\",\n    \"(∀x)( LovesAnimals(x) →  Nice(x, Animal))\", \n    \" (OwnsPet(Tom) → (LovesAnimal(Tom)))\",\n],\n \"fol_conc\": \"(¬Grumpy(Tom) ∧ ¬Mean(Tom)) →  ((¬Grumpy(Tom) ∧ ¬ LovesAnimals(Tom))\"\n}\n```",
      "perplexity": 1.6427550315856934
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Nice\", \"Mean\", \"AnimalLover\", \"OwnsPet\"],\"fol_consts\": [\"Tom\",\"Grumpy\"] , \"fol_rules\": [\n  \"∀x (Nice(x,y) ∧ Mean(x,z)) → ¬ (Nice(x, z)),\"\n ],\"fol_conc\": \"If Tom is not Grumpy and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\"}\n",
      "perplexity": 1.9390652179718018
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PetOwner(x)\", \"NiceToAnimal(y)\", \"MeanToAnimals(z)\"], \"fol_consts\": [\"tom\"], \"fol_rules\": [\n    \"∀x (PetOwner(x) → NiceToAnimal(x))\", \"∃x (GrumpyPerson(x) ∧ MeanToAnimals(x))\", \"(AllAnimalLover(x) ∧ NiceToAnimal(x))\", \"(IfSomeoneOwnsAPet(y) → LoveAnimal(y))\", \"TomIsPetOwner(tom)\"],  \"fol_conc\": \"¬GrumpyPerson(tom) ∧ ¬MeanToAnimals(tom) → ¬GrumpyPerson(tom) ∧ NotAAnimalLover(tom)\"\n}",
      "perplexity": 2.3413095474243164
    }
  },
  {
    "id": 185,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro is a novel writer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n{\n\"fol_preds\": [ \"Podcast\", \"Novel\", \"BornIn\", \"AmericanCity\", \"WrittenBy\",  \"is a\", \"created\", \"written\"],\n\"fol_consts\": [\"Dani Shapiro\", \"Family History\", \"Boston\", \"American City\"], \n\"fol_rules\": [], \n\"fol_conc\": \"∃x (NovelWriter(x) → WrittenBy( Dani Shapiro, FamilyHistory))  \"\n}\n",
      "perplexity": 1.915704369544983
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BornIn\", \"American\", \"Novel\", \"WrittenBy\", \"is a\"],\n\"fol_consts\": [\"Dani Shapiro\",\"Family History\",\"Boston\",\"American City\"], \",\"\n  : [\"\"], \":\"\n  : [\"A podcast is not a novel. \",\n   \"If a person is born in American City, the person is American.\",\n    \"If a book is novel and it is written by a person, then the person is a novel writer.\",\n     \"Dani Shapiro is an American writer.\", \"Family History is written by Dani Shapiro.\",\n    \"Family History is a novel written in 2003.\", \"Dani Shapiro created a podcast called Family Secrets.\",\n   \"Boston is an American city.\"], \":\"\n  : [\"Dani Shapiro is a novel writer.\"]}",
      "perplexity": 2.2971107959747314
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BornInCity(x, y)\", \"IsNovelWriter(y)\",\"WrittenBy(x, z)\" ,\"American(z)\"], \"fol_consts\": [\"dani\", \"americancity\", \"novelwriter\", \"familyhistory\",\"boston\"], \"fol_rules\": [\n    \"∀x (BornInCity(x, americancity)) → American(x)\", \"∃y (IsNovelWriter(y))\", \"IfBookIsWrittenByPersonThenPersonISANovelWriter(person)\",\"DaniShapiroAmericanWriter(dani)\"], \"fol_conc\": \"DaniShapiroIsanExistentialNovelwriter(dani)\" }",
      "perplexity": 4.077293395996094
    }
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Novel(x)\", \"AmericanCity(y)\", \"IsWriterOf(x, y)\", \"BornIn(x, y)\"], \n\"fol_consts\": [\"Dani Shapiro\", \"Family History\", \"Boston\", \"2003\"],\n\"fol_rules\": [\n    \"∀x (Novel(x) → IsWriterOf(x, NovelWriter)),\",\n    \"∀y (AmericanCity(y) → BornIn(y, American))\", \n], \n\"fol_conc\":  \"Family Secrets is a novel.\" \n}\n```",
      "perplexity": 1.5936369895935059
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BornInCity(x, y)\", \"IsNovelWriter(y)\", \"WrittenBy(x, y)\", \"Podcast(x)\", \"American(y)\"], \"fol_consts\": [\"dani\", \"familyhistory\", \"americancity\", \"boston\"], \"fol_rules\": [\n\"∀x (BornInCity(x, americancity)) → American(x)\",\n\"∀x (IsNovelWriter(y) ∧ Novel(y)) → Person(y)\",\n\"∀x (Podcast(x) ∧ WrittenBy(x, familyhistory)) → FamilyHistory(x)\"\n], \"fol_conc\": \"FamilySecrets(x)\"}",
      "perplexity": 1.8973987102508545
    }
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Born\", \"isAmericanCity\", \"WrittenBy\", \"Novel\",  \"Podcast\", \"novelWriter\"],\n\"fol_consts\": [\"Dani Shapiro\",\"Boston\",\"American City\",\"Family History\"],\n\"fol_rules\": [\n    \"∀x (Born(x, y) → isAmericanCity(y))\", \n    \"∀x (WrittenBy(x, z) ∧ Novel(z)) → x = novelWriter(z)\",\n    \"∃x (Podcast(x) ∧ WrittenBy(x, FamilyHistory))\"\n],\n\"fol_conc\": \"Dani Shapiro was born in American City.\"\n}\n```",
      "perplexity": 1.4978666305541992
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BornIn\", \"AmericanCity\", \"WrittenBy\", \"Novel\", \"Podcast\"], \",\"\n  :[\"is a\", \"written in\", \"created by\"],\"fol_consts\": [\"Dani Shapiro\", \"Family History\", \"Boston\", \"American City\", \"2003\", \"American\", \"novel writer\"],\"fol_rules\":[\"\"], \"fol_conc\":[\"Dani Shapiro was born in Boston.\"] }\n",
      "perplexity": 3.551180839538574
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BornInCity(x, y)\", \"IsNovel(x)\", \"IsAmericanWriter(y)\"], \"fol_consts\": [\"dani\", \"shapiro\", \"boston\"], \"fol_rules\": [\n\"∀x (BornInCity(x, boston)) → IsAmericanWriter(danishapiro)\", \"¬(Podcast(x) ∧ Novel(x))\", \"(IsNovel(x) ∧ WrittenBy(x, y) ∧ AmericanWriter(y)) → Person(y) ∧ NovelWriter(y)\"\n], \"fol_conc\": \"DaniShapiroBornInBoston(danishapiro)\"}",
      "perplexity": 2.9222960472106934
    }
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\", \"LargeClothes\"],\n\"fol_consts\": [\"Yuri\"],\n\"fol_rules\": [ \n  \"∀x (BasketballPlayer(x) → Tall(x)),\", \n  \"∀x (Tall(x) → LargeShoes(x))\", \n  \"∀x (LargeShoes(x) → LargeClothes(x))\", \n  \"¬(LargeClothes(Yuri))\" \n],\n\"fol_conc\": \"Yuri is American.\"\n}\n```",
      "perplexity": 1.1656256914138794
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoe\"], \",\"\n  \t  :[\"LargeClothes\"],\n\"fol_consts\": [ \"Yuri\"],\n\"fol_rules\": [], \",\"\n  \t  :[\"tall(x)\", \"largeShoes(y)\"] ,\n\"fol_conc\": []}\n",
      "perplexity": 5.660184383392334
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer(x)\", \"American(y)\",\"Tall(x)\", \"WearsLargeShoes(x, y)\", \"WearsLargeSizeClothes(x)\", \"Rounded(y, z)\" ], \"fol_consts\": [\"x\", \"y\", \"z\"], \"fol_rules\": [ \"(AllBasketballPlayer(x) → Tall(x))\", \"(Tall(x) → WearsLargeShoes(x, y))\", \"(WearsLargeShoes(x, y) → WearsLargeSizeClothes(x))\", \"(NotWearsLargeSizeClothes(y) ∧ AllBasketballPlayer(y) → American(y))\"], \"fol_conc\": \"YuriIsAnAmerican(y)\" }",
      "perplexity": 1.9582955837249756
    }
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\", \"LargeClothes\"],\n\"fol_consts\": [\"Yuri\"],\n\"fol_rules\": [ \n  \"∀x ( BasketballPlayer(x) → Tall(x)),\", \n  \"∀x ( American(x) → Not(BasketballPlayer(x)))\", \n  \"∀x (Tall(x) → LargeShoes(x))\", \n  \"∀x (LargeShoes(x) → LargeClothes(x))\", \n  \"¬(LargeClothes(Yuri))\" ] ,\n \"fol_conc\": [\"Not(American(Yuri))\"]\n}\n```",
      "perplexity": 1.3426311016082764
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\"], \"fol_consts\": [\"Yuri\"], \"fol_rules\": [\n  \"∀x (BasketballPlayer(x) → Tall(x))\", \"\\n\\t\", \"∀x (American(x) ∨ Not American(x))\", \"\\n\\t\", \"Tall(x) → LargeShoes(x)\", \"\\n\\t\", \"LargeShoes(x) → LargeClothes(x)\", \"\\n\\t\", \"Not LargeClothes(Yuri)\",\n  \"\\n\"],\"fol_conc\": \"Yuri is not an American basketball player.\"} ",
      "perplexity": 1.6782227754592896
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer(x)\", \"American(y)\", \"Tall(z)\"], \n\"fol_consts\": [\"u\", \"v\",\"w\", \"a\", \"b\", \"c\"],  \"fol_rules\":[\n    \"∀x (BasketballPlayer(x) → Tall(x))\", \"∀x (Tall(x) → LargeShoeSize(x))\", \"LargeShoeSize(x) → LargeClothingSize(x)\", \"¬(LargeClothingSize(u))\", \"∀y (American(y) ∨ ¬American(y))\"],  \"fol_conc\": \"YuriIsNotAnAmericanBasketballPlayer(v)\"\n}",
      "perplexity": 2.7576539516448975
    }
  },
  {
    "id": 190,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoesWearer\", \"LargeClothesWearer\"],\n\"fol_consts\": [\"Yuri\"],\n\"fol_rules\": [],\n\"fol_conc\":  \"∀x (BasketballPlayer(x) → Tall(x)) ∧ ¬ LargeClothesWearer(Yuri) ⇒ American(Yuri)\" \n}\n```",
      "perplexity": 1.4624524116516113
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\"], \"fol_consts\": [\"Yuri\"], \"fol_rules\": [\n  \"∀x (BasketballPlayer(x) → Tall(x))\", \"// All basketball players are tall.\",\n  \"∀x (Tall(x) → LargeShoes(x))\", \"// If someone is tall, they wear large shoes.\" ,\n  \"∃x (LargeShoes(x) → LargeSizeClothes(x))\", \"If someone wears large shoes, then they wear large-sized clothes.\", \"], \" ]}",
      "perplexity": 2.447199583053589
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer(x)\", \"American(y)\", \"Tall(z)\", \"LargeShoeWearer(w)\", \"LargeClothesWearer(u)\"], \"fol_consts\": [\"s\", \"t\", \"u\", \"v\"],  \"fol_rules\": [\n    \"∀x (BasketballPlayer(x) → Tall(x))\", \"∀x (Tall(x) → LargeShoeWearer(x))\", \"∀x (LargeShoeWearer(x) → LargeClothesWearer(x))\", \"¬(LargeClothesWearer(s))\"],  \"fol_conc\": \"∃x (BasketballPlayer(x) ∧ American(y))\"}",
      "perplexity": 1.9466516971588135
    }
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\", \"LargeSizedClothes\"],\n\"fol_consts\": [\"Yuri\", \"JohnSmith\", \"BobJohnson\"],\n\"fol_rules\": [\n  \"(∀x)( BasketballPlayer(x) → Tall(x)) ∧ (∀y)( American(y) → ¬LargeShoes(y))\", \n  \"(∃x)(Tall(x) → LargeShoes(x)),\" ,\n  \"(¬LargeSizedClothes(Yuri))\",\n],\n \"fol_conc\": \"(¬LargeShoes(Yuri)) → (AmericanBasketballPlayer(Yuri))\"\n}\n```",
      "perplexity": 1.7955033779144287
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\"],\"fol_consts\": [\"Yuri\",\"large-sized clothes\"],\"fol_rules\": [\n  \"∀x (BasketballPlayer(x) → Tall(x))\", \"],\"\n  ,\"fol_conc\"\n  ,\"If Yuri does not wear large shoes, then Yuri is an American basketball player.\"\n  ]\n}\n",
      "perplexity": 3.407323122024536
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer(x)\", \"American(y)\", \"Tall(z)\",\"LargeShoes(w)\", \"LargeSizedClothes(v)\", \"BigShoeSize(x, y)\" ], \"fol_consts\": [ \"yuri\"], \"fol_rules\":[\n  \"∀x ∃y (BasketballPlayer(x) → Tall(y))\",\n  \"∀x ∃z (Tall(x) → LargeShoes(x))\",\n  \"∀x (LargeShoes(x) → LargeSizedClothes(x))\",\n  \"¬(LargeSizedClothes(yuri))\",\n  \"∀x (BasketballPlayer(x) → American(x))\" ], \"fol_conc\": \"IfYuridoesnothaveBigShoesthenYuriisAmericanbasketballplayer(yuri)\" }",
      "perplexity": 2.340656280517578
    }
  },
  {
    "id": 192,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"BasketballPlayer\", \"American\", \"Tall\", \"LargeShoes\", \"LargeClothes\"],\n\"fol_consts\": [\"Yuri\"],\n\"fol_rules\": [\n  \"(∀x (BasketballPlayer(x) → Tall(x)) ∧ ¬(American(x))) → (BasketballPlayer(Yuri) ∨ Not(American(Yuri)))\",\n  \"(Tall(x) → LargeShoes(x))\",\n  \"(LargeShoes(x) → LargeClothes(x))\" ,\n  \"(Not(LargeClothes(y)) → Yuri ≠ y)\"\n],\n\"fol_conc\": \"(∀x (BasketballPlayer(x) ∨ Not(American(x))) ∧ Tall(x) )\" \n}\n```",
      "perplexity": 1.4931542873382568
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"American\", \"BasketballPlayer\", \"Tall\", \"LargeShoes\", \"LargeSizedClothes\"],\n\"fol_consts\": [\"Yuri\", \"x\"], \",\"\n  : \"All Basketball players are tall\", \"If someone is tall they wear large shoes, if someone wears large shoes they wear large-sized clothes. If Yuri does not wear large sized clothes then he is not American basketball player.\"\n  : [{\"fol_preds\": [\"American\"],\"fol_consts\": [\"Yuri\"]}, {\"fol_preds\": [\"BasketballPlayer\"], \"fol_consts\": [\"x\"]}]} ",
      "perplexity": 3.035226821899414
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BasketballPlayer(x)\", \"American(y)\", \"Tall(z)\", \"LargeShoe(w)\", \"LargeClothes(u)\"], \"fol_consts\": [\"yuri\", \"american\"], \"fol_rules\": [\n    \"∀x (BasketballPlayer(x) → Tall(x))\", \"∀x (Tall(x) → LargeShoe(x))\",\n    \"∀x (LargeShoe(x) → LargeClothes(x))\", \"¬(LargeClothes(yuri))\"], \"fol_conc\": \"If(notamericanbasketballplayer, basketballplayer)\" }",
      "perplexity": 2.259941339492798
    }
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Happy\", \"Sad\"],\n\"fol_consts\": [],\n\"fol_rules\": [\n    \"∀x (Happy(x) ∨ Sad(x)) → ∃y (Happy(y)),\",\n    \"∀x (Happy(x) ∨ Sad(x)) → ∧ x  (Happy(x) ) \"\n],\n\"fol_conc\": \"¬∀x (Sad(x)) \" \n}\n```",
      "perplexity": 1.5518344640731812
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Happy\", \"Sad\"], \"fol_consts\": [], \"fol_rules\": [], \"fol_conc\": \"∀x (Event(x) → Sad(x))\"}\n",
      "perplexity": 1.550878643989563
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Happy(x)\", \"Sad(x)\"], \"fol_consts\": [\"e\", \"h\",\"s\"], \"fol_rules\": [\n    \"∀x (Happy(x) ∨ Sad(x))\", \"∃x (Happy(x) ∧ ∀y (¬Happy(y) ∧ ¬Sad(y)))\" ],  \"fol_conc\": \"∀x (Sad(x))\"}",
      "perplexity": 2.130115032196045
    }
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Winner\", \"ParticipatedIn\", \"OnLeaderboard\", \"FromBelgium\"],\n\"fol_consts\": [\"1992 du Maurier Classic\",\"Steinhauer\",\"Descampe\"], \n\"fol_rules\": [],\n\"fol_conc\":  \"¬(Winner(x)∧ ParticipatedIn(x, 1992 du Maurier Classic))\"\n}\n```",
      "perplexity": 1.4195997714996338
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Winner\", \"Participated\", \"OnLeaderboard\"],\"fol_consts\": [\"Steinhauer\",\"1992 du Maurier Classic\", \"Descampe\", \"Belgium\"],\"fol_rules\": [\n    \"∀x (Winner(x) → Participated(x))\", \"],\"\n  \t  ,\"fol_conc\"\n  \t\t ],\"fol_conclusion\": [\"∃ x (Not Winner(Steinhauer)),\\n ¬Winner(Steinhauer), \\n   All Participants(Descampe,1992 du Maurier Classic)\\n\"]}\n",
      "perplexity": 4.614670276641846
    }
  },
  {
    "id": 195,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Winner\", \"ParticipatedIn\", \"OnLeaderboard\"],\n\"fol_consts\": [\"Steinhauer\", \"Descampe\", \"1992 du Maurier Classic\", \"SixWayTie\", \"Belgium\"], \n\"fol_rules\": [\n    \"(Winner(x) → ParticipatedIn(x,  1992 du Maurier Classic))\",\n    \"ParticipatedIn(x, y) → OnLeaderboard(x)\",\n    \"OnLeaderboard(x) & SixWayTie(y) ∧ Existential((Person in x and Person on Leaderboard(y)))   → (Descampe ∈  SixWayTie(1992 du Maurier Classic))\", \n    \"(AllPeopleOnTheLeaderboard(x) → ParticipatedIn(x, 1992 du Maurier Classic))\"\n\n],\n\"fol_conc\": \"Des campe is in the six-way tie of the leaderboard of the 1992 du Maurier classic.\"\n}\n```",
      "perplexity": 1.8690202236175537
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Rounder\", \"Participate\", \"Belgians\"], \"fol_consts\": [\"Steinhauer\",\"Descampe\",\"1992 du Maurier Classic\",\"Belgium\"],\"fol_rules\":[\n   \"∀x (Round(x, 1992 du Maurier Classic) → Participate(x, 1992 du Maurier Classic))\",\n    \"∃x  Rounder(x)\",\n   \"∀x  Belgians(x) → Participatethe (x, 1992 du Maurier Classic)\" ,\n \"∃x  Round(x, 1992 du Maurier Classic) and Belgeans(x)\"\n],\"fol_conc\": \"Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic\"} ",
      "perplexity": 1.897005319595337
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"WinnerOf(x, y)\", \"ParticipatedIn(x, y)\", \"OnLeaderboard(x, y)\", \"FromCountry(x, y)\"], \"fol_consts\": [\"1992\", \"dumaurierclassic\", \"steinhauer\", \"descampe\"], \"fol_rules\": [\n    \"∀y (WinnerOf(y, 1992) → ParticipatedIn(y, 1992))\",\n    \"∃x (OnLeaderboard(x, 1992) ∧ FromCountry(x, belgium))\",\n    \"∀x (ParticipatedIn(x, 1992) → OnLeaderboard(x, 1992))\",\n    \"∀x (FromCountry(x, belgium) → OnLeaderboard(x, 1992))\"], \"fol_conc\": \"∃x (OnLeaderboard(x, 1992) ∧ FromCountry(x, belgium))\"}",
      "perplexity": 1.5010477304458618
    }
  },
  {
    "id": 196,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi is terricolous.",
      "options": [],
      "answer": "C"
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Barking(x)\", \"Likes(y, x)\", \"IsAnimal(x)\", \"Jumps(x)\", \"HasLegs(x)\", \"Terricolous(x)\"], \"fol_consts\": [\"jane\", \"kiki\"], \"fol_rules\": [\n  \"∀x (Barking(x) → ¬Likes(jane, x))\", \"∀x (IsAnimal(x) → Barking(x))\", \"∀x (Jumps(x) → Likes(jane, x))\", \"∀x (HasLegs(x) → Jumps(x))\", \"∀x (Terricolous(x) → HasLegs(x))\",\n  \"¬Jumps(kiki) ∨ ¬HasLegs(kiki) → Terrilcoious(kiki) ∨ HasLegs(kiki)\",\n  \"KiKiIsTerricolous(kiki)\" ], \"fol_conc\": \"KiKiIsTerricolous(kiki)\"}",
      "perplexity": 1.676697015762329
    }
  },
  {
    "id": 197,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi barks and is a dog.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ Bark, Likes, IsAnimal, HasLegs, Jumps, IsTerricolous ],\n\"fol_consts\": [ Jane, KiKi],\n\"fol_rules\": [ \n  ∀x (Bark(x) → ¬Likes(Jane, x)),\n  ∀x (IsAnimal(x) → Bark(x)),\n  ∀x (HasLegs(x) → Jumps(x)),\n  ∀x (IsTerricolous(x) → HasLegs(x)), \n  ∀x (¬Jumps(x) ∧ ¬HasLegs(x)) → IsTerricolous(x) ,\n],\n\"fol_conc\": [ KiKi ⊕ Bark(x) && IsAnimal(KiKi)] \n}\n```",
      "perplexity": 1.3336135149002075
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Barks\", \"Likes\", \"is a\", \"has legs\", \"jumps\", \"is terricolous\"], \"fol_consts\": [\"Jane\", \"KiKi\"], \"fol_rules\": [\n    \"∀x (Barks(x) → ¬ Likes(Jane, x))\", \",\"\n    \t, \"(All dogs are animals that bark)\", 0,\n    \"∀x (Animal(x) → Jumps(x))\", 0,\n    \"∀x (Animal(x) → has legs(x))\", 0,\n    \"∀x (terricolous(x) → has legs(x)),\", 0,\n    \"(KiKi neither jumps nor has legs) → ( KiKi is terricolous or has legs)\", 0,\n  \"∃x (Barks(x) ∧ is a dog(x))\"], \"fol_conc\": [\"KiKi barks and is a dog.\"]}\n",
      "perplexity": 1.886343240737915
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Bark(x)\", \"Like(y, x)\", \"Animal(x)\", \"Dog(x)\", \"Jump(x)\", \"HasLegs(x)\"], \"fol_consts\": [\"jane\", \"kiki\"], \"fol_rules\": [\n  \"∀x (Bark(x) → ¬Like(jane, x))\", \"∀x (Dog(x) → Animal(x) ∧ Bark(x))\", \"∀x (Jump(x) → Like(jane, x))\",\n  \"∀x (HasLegs(x) → Jump(x))\", \"∀x (Terricolous(x) → HasLegs(x))\", \"¬(Jump(x) ∨ HasLegs(x)) → Terricolous(kiki)\", \"∃x (Bark(x) ∧ Dog(x))\"\n], \"fol_conc\": \"KiKiBarksAndIsADog(kiki)\"}",
      "perplexity": 1.6533088684082031
    }
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [\"Bark\", \"Likes\", \"IsAnimal\", \"Jumps\", \"HasLegs\", \"Terricolous\"],\n\"fol_consts\": [\"Jane\", \"KiKi\"], \n\"fol_rules\": [\n  \"(∀x)( Bark(x) → ¬ Likes(Jane, x))\",\n  \"(∀x)( IsDog(x) → (Bark(x)))\",\n  \"(∀x)( Jumps(x) →Likes(Jane, x))\",\n  \"(∀x)( HasLegs(x) → Jumps(x))\", \n  \"(∀x)( Terricolous(x) → (HasLegs(x))),\" ,\n  \"(∀x)( (¬Jumps(x) ∧ ¬HasLegs(x)) → Terricolous(x) )\",\n],\n\"fol_conc\": \"(¬Bark(KiKi) ∧ ¬IsDog(KiKi))\"\n}\n```",
      "perplexity": 1.3551745414733887
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Bark\", \"Like\", \"Animal\", \"Dog\", \"Jump\", \"HasLegs\", \"Terricolous\"], \"fol_consts\": [\"Jane\", \"KiKi\"], \"fol_rules\":[\n    \"∀x (Bark(x) → ¬Like(Jane, x)),\", \"\\t\\t \\t\", 1,\"∀x (Animal(x) & Bark(x)) → Dog(x),\", \"\\t\\t \", \"∀x (Jump(x) → Like(Jane, x))\",\n    \"∀x (HasLegs(x) → Jump(x)),\", \"\\t\\t \\t\", \"∀x (Terricolous(x) → HasLegs(x))\",\n    \"¬KiKiJumping∧¬KiKiloegs→ KiKiTerricolous∨KiKislegs\", \"\\t\\t \", \"2.  If an animal is terricolous, then it has legs.\"], \"fol_conc\": \"KiKi neither barks nor is a dog.\"} ",
      "perplexity": 2.1428377628326416
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"Barks(x)\", \"Likes(x, y)\", \"IsAnimal(x)\", \"Jumps(x)\", \"HasLegs(x)\", \"Terricolous(x)\"], \"fol_consts\": [\"jane\", \"kiki\"],  \"fol_rules\": [\n    \"∀x (Barks(x) → ¬Likes(x, jane))\", \"∀x (IsAnimal(x) → Barks(x))\", \"∀x (Jumps(x) → Likes(x, jane))\", \"∀x (HasLegs(x) → Jumps(x))\", \"∀x (Terricolous(x) → HasLegs(x))\", \"¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))\"\n],  \"fol_conc\": \"KiKineitherBarks(kiki) ∨ IsDog(kiki)\" }",
      "perplexity": 1.6009997129440308
    }
  },
  {
    "id": 199,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "No one playing for Nautico is Brazilian.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Born\", \"is a\", \"plays for\", \"is known as\"],\n\"fol_consts\": [\"Ailton Silva\",\"1995\",\"Braga\", \"Brazillian footballer\", \"Nautico\", \"Fluminense\"],\n\"fol_rules\": [\n    \"∀x (Born(x, 1995) → is a (Football Player)(x)) \",\n    \"∀x (plays for (x, Nautico) → Brazilian (x))\",\n],\n\"fol_conc\": \"¬∃x (Brazilian (x) ∧ plays for (Nautico, x))\"\n}\n```",
      "perplexity": 1.494259238243103
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"BornIn\", \"IsKnownAs\", \"PlaysFor\", \"isBrazilian\"],\"fol_consts\": [\"AiltonSilva\", \"Braga\", \"Nautico\", \"Fluminense\",\"1995\", \"Brazillian\"], \"fol_rules\": [\n  \"[BornIn(x, 1995) implies IsKnownAs(x, 'Ailton')]\", \"],\"\n  \t \t,\"[PlaysFor(y, z) and isBrazilian(z)] ∧ (not PlaysFor(x, y)) ∨ ([isBrazilian(x) and not PlaysFor(x, Nautico)])\" , \"fol_conc: [¬∃x (IsKnownAs(x, 'Ailton') ∧ playsfor(x, Nautico))] }\"\n  \t \t]\n  }",
      "perplexity": 3.1946163177490234
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"PersonBornAtTimeOf(x, y)\", \"KnowsAs(x, y)\", \"IsPlayer(x)\", \"PlaysForClub(x, y)\"], \"fol_consts\": [\"ailton\", \"1995\", \"braga\", \"nautico\", \"brazillian\", \"fluminense\"], \"fol_rules\": [\n\"∀x (PersonBornAtTimeOf(x, 1995) → IsPlayer(x))\", \"∃y (KnowsAs(ailton, y) ∧ PlaysForClub(y, nautico))\", \"∀z (IsPlayer(z) ∧ PlaysForClub(z, nautico) → Brazilian(z))\"], \"fol_conc\": \"¬(∃z (Brazilian(z) ∧ IsPlayer(z) ∧ PlaysForClub(z, nautico)))\" }",
      "perplexity": 1.8601841926574707
    }
  },
  {
    "id": 200,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva foes not play for a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Born\", \"CommonlyKnownAs\", \"FootballPlayer\", \"LoanedOutTo\", \"BrazillianFootballer\", \"PlaysFor\"], \n\"fol_consts\": [\"AiltonSilva\",\"1995\", \"Braga\", \"Nautico\", \"Fluminense\",  ],\n\"fol_rules\": [\n    \"∀x (Born(x, 1995) → CommonyKnownAs(x, 'Ailton')),\", //Rule for Ailton's name\n     \"∀x (FootballPlayer(x) → LoanedOutTo(x, Braga)),\",  // Rule for football player and loaning to Braga.   \n    \"∀x (BrazillianFootballer(x) → PlaysFor(x, Nautico))\", //Rule for Brazilian footballers and playing for Nautico. \n     \"∀x (FootballPlayer(x) → PlaysFor(x, Fluminense)),\",  // Rule for football players and their clubs.   \n],\n\"fol_conc\": \"¬ (PlaysFor(AiltonSilva, C))\" // A rule stating that there is no club where Ailton Silva plays \n\n}\n```",
      "perplexity": 1.7081470489501953
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Born\", \"CommonlyKnownAs\", \"FootballPlayer\", \"LoanedTo\", \"BrazillianFootballist\",\"PlaysFor\"],\"fol_consts\":[ \"AiltonSilva\", \"1995\", \"Braga\", \"Nautico\", \"Fluminense\"], \"fol_rules\": [], \"fol_conc\": [\"¬(PlaysFor(AiltonSilva, Club))\"]}\n",
      "perplexity": 1.7088195085525513
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BornAt(x, y)\", \"KnowsAs(x, y)\", \"FootballPlayer(x)\", \"PlaysForClub(x, y)\", \"IsBrazilian(x)\"], \"fol_consts\": [\"ailton\", \"1995\", \"football\", \"braga\", \"nautico\", \"fluminense\"], \"fol_rules\": [\n  \"∀x (BornAt(x, 1995) → FootballPlayer(x))\",\n  \"∃x (FootballPlayer(x) → PlaysForClub(x, ailton))\",\n  \"Braga(ailton) ∧ Nautico(nautico)\", \"IsBrazilian(nautico) ∨ IsBrazilian(ailton)\" ], \"fol_conc\": \"¬PlaysForClub(aition, x)\" }",
      "perplexity": 2.2107956409454346
    }
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"born\", \"isKnownAs\", \"footballPlayer\", \"loanedOutTo\", \"playsFor\", \"clubMember\"], \n\"fol_consts\": [\"Ailton Silva\",\"1995\", \"Braga\", \"Brazillian\", \"Nautico\",  \"Fluminense\"],\n\"fol_rules\": [\"\"],\n\"fol_conc\": \"¬(loanedOutTo(Ailton,FC))\" \n}\n```",
      "perplexity": 1.5104225873947144
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"born\", \"is known as\", \"plays for\", \"loaned out to\", \"is a\"],\n\"fol_consts\": [\"Ailton Silva\", \"1995\", \"Braga\", \"Brazillian footballer\", \"Nautico\", \"football club\", \"Fluminense\"],\n\"fol_rules\": [\n    \"∀x (born(x, 1995) → isKnownAs(x, 'Ailton')),\",\n    \"∃x (loanedOutTo(x, Braga))\",\n    \"∀x (isBrazilianFootballer(x) → playsFor(x, Nautico)),\",\n    \"exists x:  (footballClub(x) ∧ loanOutTo(x, Braga))\",\n    \"Exists y : footballclub(y)\",\n    \"¬(loanedOutTo(Ailton, Football Club))\" ],\n \"fol_conc\": \"¬ (loanedOutTo(Ailton, a Football Club))\"}\n",
      "perplexity": 1.7340325117111206
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BornAt(x, y)\", \"KnowsAs(x, y)\", \"PlaysFor(x, y)\", \"LoanedTo(x, y)\", \"IsBrazillianFootballer(x)\"], \"fol_consts\": [\"ailton\", \"1995\", \"braga\", \"nautico\", \"fluminense\"], \"fol_rules\": [\n\"∀x (BornAt(x, 1995) → KnowsAs(x, ailton))\", \"∃x (LoanedTo(x, ailton))\", \"∀x (PlaysFor(ailton, nautico) ∧ IsBrazillianFootballer(ailton))\",\n\"∀x (IsFootballClub(nautico) ∨ IsFootballClub(braga))\", \"∀x (KnowsAs(x, fluminense) ∧ IsFootballClub(fluminense))\"], \"fol_conc\": \"¬LoanedTo(ailton, sonaro)\" }",
      "perplexity": 1.6883156299591064
    }
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Born\", \"KnownAs\", \"PlaysFor\", \"is a member of\", \"is in\"],\n\"fol_consts\": [\"Ailton Silva\", \"1995\", \"Braga\", \"Brazillian footballer\", \"Nautico\",  \"Fluminense\"],\n\"fol_rules\": [], \n\"fol_conc\": \"∀x (Born(x, 1995) → KnownAs(x, Ailton Silva)) ∧ PlaysFor(Ailton Silva, Nautico) ⟹ playsFor(Ailton Silva , Fluminense)\"\n}\n\n```",
      "perplexity": 1.636831283569336
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Born\", \"isKnownAs\", \"isFootballPlayer\", \"playsFor\", \"isClub\"], \"fol_consts\": [\"Ailton Silva\",\"1995\",\"Braga\",\"Brazillian footballer\", \"Nautico\", \"Fluminense\"], \"fol_rules\": [], \"fol_conc\": \"∀x (Born(x, 1995) → isFootballPlayer(x))  ∧  isClub(B) → playsFor(x, B)\" }\n",
      "perplexity": 1.698617696762085
    },
    "logic_problem_gcd": {
      "raw": "{\"fol_preds\": [\"BornAt(x, y)\", \"KnowsAs(x, y)\", \"PlaysFor(x, y)\", \"ClubMember(y)\"], \"fol_consts\": [\"ailton\", \"1995\", \"braga\", \"nautico\", \"fluminense\", \"brazillian\"], \"fol_rules\": [\n\"∀x (BornAt(x, 1995) → KnowsAs(x, ailton))\", \"(PlaysFor(x, y) ∧ ClubMember(y)) → (ClubMember(x) ∨ PlaysFor(y, x))\" , \"∃x (KnowsAs(ailton, fluminense) ∧ ClubsMember(nautico) ∧ PlaysFor(ailton, nautico))\",\n\"(ClubsMember(b) ∧ ClubMember(c)) → ClubsMember(d)\" ],  \"fol_conc\": \"AiltonSilvaPlayedForFluminense(ailton)\"}",
      "perplexity": 2.2610607147216797
    }
  },
  {
    "id": 203,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva was loaned out to a football club.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n```json\n{\n\"fol_preds\": [ \"Born\", \"isKnownAs\", \"playsFor\", \"loanedTo\",\"isBrazillianFootballer\"], \n\"fol_consts\": [\"AiltonSilva\", \"1995\", \"Braga\", \"Nautico\", \"Fluminense\"], \n\"fol_rules\": [], \n\"fol_conc\":  \"∀x (Born(x, 1995) → isKnownAs(x, Ailton))  ∧ ∃y (LoanedTo(AiltonSilva, y) && isFootballClub(y)) \" \n}\n```",
      "perplexity": 1.5501461029052734
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Born\", \"CommonlyKnownAs\", \"FootballPlayer\", \"LoanedOutTo\",\"BrazillianFootballist\"],\"fol_consts\": [\"AiltonSilva\",\"1995\", \"Braga\",\"Nautico\",\"Fluminense\"],\"fol_rules\": [\n    \"∀x (Born(x, 1995) → CommonlyKnownAs(x, 'Ailton')),\",\n    \"∀x (FootballPlayer(x) → LoanedOutTo(x, Braga)),\",\n    \"∃x (BrazillianFootballist(x) → FootballPlayer(x)),\",\n    \"∃x (LoanedOutTo(x, Braga) ∧  FootballClub(Nautico) )\",\n    \"∃x (FootballClub(Fluminense) ∨ LoanedOutTo(x, Braga))\",\n   \"\"], \"fol_conc\": \"Ailton Silva was loaned out to a football club.\"} ",
      "perplexity": 1.5629515647888184
    }
  }
]