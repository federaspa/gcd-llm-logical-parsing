[
  {
    "id": 0,
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "Bonnie performs in school talent shows often.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPerform(x) ::: x performs in school talent shows often.\nEngaged(x) ::: x is very engaged with school events.\nAttend(x) ::: x attends the school.\nInactive(x) ::: x is inactive and disinterested member of their community.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nWish(x) ::: x wishes to further their academic careers and educational opportunities.\nYoung(x) ::: x is a young child.\nTeenager(x) ::: x is a teenager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPerform(x) → (Attend(x) ∧ Engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\nPerform(x) ⊕ (Inactive(x) ∧ Disinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\nChaperone(x) → ¬Student(x) ::: If people chaperone high school dances, then they are not students who attend the school.\n(Inactive(x) ∧ Disinterested(x)) → Chaperone(x) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n(Wish(x) ∧ (Young(x) ∨ Teenager(x))) → Student(x) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPerform(bonnie) ::: Bonnie performs in school talent shows often.\n\"\"\""
    ]
  },
  {
    "id": 1,
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends school events.\nEngaged(x) ::: x is very engaged with school events.\nInactive(x) ::: x is inactive in their community.\nDisinterested(x) ::: x is disinterested in their community.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nYoung(x) ::: x is a young child.\nTeenager(x) ::: x is a teenager.\nWish(x) ::: x wishes to further their academic career and educational opportunities.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPerform(x) → (Attend(x) ∧ Engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\nPerform(x) ⊕ (Inactive(x) ∧ Disinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\nChaperone(x) → ¬Student(x) ::: If people chaperone high school dances, then they are not students who attend the school.\n(Inactive(x) ∧ Disinterested(x)) → Chaperone(x) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n(Wish(x) ∧ Young(x)) ∨ (Wish(x) ∧ Teenager(x)) → Student(x) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n((Wish(bonnie) ∧ Young(bonnie) ∧ Chaperone(bonnie)) ∨ (¬Wish(bonnie) ∧ ¬Young(bonnie))) → (Student(bonnie) ∨ (Inactive(bonnie) ∧ Disinterested(bonnie))) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n\"\"\""
    ]
  },
  {
    "id": 2,
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPerform(x) ::: x performs in school talent shows often.\nAttend(x) ::: x attends school events.\nEngaged(x) ::: x is very engaged with school events.\nInactive(x) ::: x is an inactive member of their community.\nDisinterested(x) ::: x is a disinterested member of their community.\nChaperone(x) ::: x chaperones high school dances.\nStudent(x) ::: x is a student who attends the school.\nWishToFurther(x) ::: x wishes to further their academic career and educational opportunities.\nYoung(x) ::: x is a young child.\nTeenager(x) ::: x is a teenager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPerform(x) → (Attend(x) ∧ Engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\nPerform(x) ⊕ (Inactive(x) ∧ Disinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\nChaperone(x) → ¬Student(x) ::: If people chaperone high school dances, then they are not students who attend the school.\n(Inactive(x) ∧ Disinterested(x)) → Chaperone(x) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n(WishToFurther(x) ∧ Student(x)) → Attend(x) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Chaperone(bonnie) ∨ (¬Chaperone(bonnie) ∧ Perform(bonnie))) → (WishToFurther(bonnie) ∧ Student(bonnie) ∧ Inactive(bonnie) ∧ Disinterested(bonnie)) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n\"\"\""
    ]
  },
  {
    "id": 3,
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "James has lunch in the company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSchedule(x, y) ::: Employee x schedules a meeting with customer y.\nAppear(x, y) ::: Employee x appears in the company on day y.\nLunch(x, y) ::: Employee x has lunch in location y.\nHome(x) ::: Employee x has lunch at home.\nRemote(x) ::: Employee x works remotely from home.\nManager(x) ::: Employee x is a manager.\nInCountry(x) ::: Employee x is in another country.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x∀y (Schedule(x, y) → Appear(x, today)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (Lunch(x, company) → Schedule(x, customer)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (Lunch(x, company) ⊕ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (Lunch(x, home) → Remote(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (InCountry(x) → Remote(x)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬Remote(x)) ::: No managers work remotely from home.\n(Manager(james) ∧ Appear(james, today)) ⊕ ¬(Manager(james) ∨ Appear(james, today)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLunch(james, company) ::: James has lunch in the company.\n\"\"\""
    ]
  },
  {
    "id": 4,
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "James does not have lunch in the company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSchedule(x, y) ::: Employee x schedules a meeting with customer y.\nAppear(x, y) ::: Employee x appears in the company on day y.\nLunch(x, y) ::: Employee x has lunch in location y.\nHome(x) ::: Employee x has lunch at home.\nRemote(x) ::: Employee x works remotely from home.\nInCountry(x) ::: Employee x is in another country.\nManager(x) ::: Employee x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x∀y (Schedule(x, y) → Appear(x, today)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (Lunch(x, company) → Schedule(x, customer)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (Lunch(x, company) ⊕ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (Lunch(x, home) → Remote(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (InCountry(x) → Remote(x)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬Remote(x)) ::: No managers work remotely from home.\n(Manager(james) ∧ Appear(james, today)) ⊕ ¬(Manager(james) ∨ Appear(james, today)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Lunch(james, company) ::: James does not have lunch in the company.\n\"\"\""
    ]
  },
  {
    "id": 5,
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSchedule(x, y) ::: Employee x schedules a meeting with customer y.\nAppear(x, y) ::: Employee x appears in company y.\nLunch(x, y) ::: Employee x has lunch in location y.\nWorkRemotely(x) ::: Employee x works remotely from home.\nInCountry(x) ::: Employee x is in another country.\nManager(x) ::: Employee x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x∀y (Schedule(x, y) → Appear(x, company)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (Lunch(x, company) → Schedule(x, customer)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (Lunch(x, company) ⊕ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (Lunch(x, home) → WorkRemotely(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (InCountry(x) → WorkRemotely(x)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬WorkRemotely(x)) ::: No managers work remotely from home.\n(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Manager(james) ∨ InCountry(james)) → (Lunch(james, home) ∧ WorkRemotely(james)) ⊕ ¬(Lunch(james, home) ∨ WorkRemotely(james)) ::: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.\n\"\"\""
    ]
  },
  {
    "id": 6,
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "There is an animal.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nInfectiousDisease(x) ::: x is an infectious disease.\nCausedBy(x, y) ::: x is caused by y.\nVirus(x) ::: x is a virus.\nOccurIn(x, y) ::: x can occur in y.\nAnimal(x) ::: x is an animal.\nHuman(x) ::: x is a human.\nMammal(x) ::: x is a mammal.\nSymptoms(x, y) ::: x has symptoms y.\nFeel(x, y) ::: x feels y.\nGet(x, y) ::: x gets y.\n\nFirst-Order-Logic Premises:\nInfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (Virus(x) → OccurIn(x, y)) ::: Viruses can occur in certain animals, including humans.\n∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\nSymptoms(monkeypox, [fever, headache, muscle pains, feeling tired]) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Get(x, glu) → Feel(x, tired)) ::: People feel tired when they get a glu.\n\nFirst-Order-Logic Question:\n∃x Animal(x) ::: There is an animal."
    ]
  },
  {
    "id": 7,
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "No one gets flu.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nInfectiousDisease(x) ::: x is an infectious disease.\nCausedBy(x, y) ::: x is caused by y.\nVirus(x) ::: x is a virus.\nOccurIn(x, y) ::: x can occur in y.\nAnimal(x) ::: x is an animal.\nHuman(x) ::: x is a human.\nMammal(x) ::: x is a mammal.\nSymptoms(x, y) ::: x has symptoms y.\nFeel(x, y) ::: x feels y.\n\nFirst-Order-Logic Premises:\nInfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (Virus(x) → OccurIn(x, y)) ::: Virus x can occur in y.\n∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\nSymptoms(monkeypox, {fever, headache, muscle pains, feeling tired}) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Feel(x, tired) → Feel(x, flu)) ::: People feel tired when they get the flu.\n\nFirst-Order-Logic Question:\n¬∃x (Feel(x, flu)) ::: No one gets the flu."
    ]
  },
  {
    "id": 8,
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "Symptons of Monkeypox include coughing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nInfectiousDisease(x) ::: x is an infectious disease.\nCausedBy(x, y) ::: x is caused by y.\nVirus(x) ::: x is a virus.\nOccurIn(x, y) ::: x can occur in y.\nAnimal(x) ::: x is an animal.\nHuman(x) ::: x is a human.\nMammal(x) ::: x is a mammal.\nSymptom(x, y) ::: x has symptom y.\nFever(x) ::: x has fever.\nHeadache(x) ::: x has headache.\nMusclePain(x) ::: x has muscle pain.\nTired(x) ::: x feels tired.\nGlu(x) ::: x gets a glu.\nCoughing(x) ::: x is coughing.\n\nFirst-Order-Logic Premises:\nInfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (Virus(x) → ∃y (OccurIn(x, y) ∧ Animal(y))) ::: Virus can occur in certain animals, including humans.\n∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\nSymptom(monkeypox, fever) ∧ Symptom(monkeypox, headache) ∧ Symptom(monkeypox, musclePain) ∧ Symptom(monkeypox, tired) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Glu(x) → Tired(x)) ::: People feel tired when they get a glu.\n\nFirst-Order-Logic Question:\nCoughing(monkeypox) ::: Symptoms of Monkeypox include coughing."
    ]
  },
  {
    "id": 9,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Ocellated wild turkey.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWildTurkey(x) ::: x is a wild turkey.\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGould(x) ::: x is a Gould's wild turkey.\nMerriam(x) ::: x is a Merriam's wild turkey.\nRioGrande(x) ::: x is a Rio Grande wild turkey.\nOcellated(x) ::: x is an Ocellated wild turkey.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) ↔ (Eastern(x) ∨ Osceola(x) ∨ Gould(x) ∨ Merriam(x) ∨ RioGrande(x) ∨ Ocellated(x))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n¬Eastern(tom) ::: Tom is not an Eastern wild turkey.\n¬Osceola(tom) ::: Tom is not an Osceola wild turkey.\n¬(Gould(tom) ∨ Merriam(tom) ∨ RioGrande(tom)) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOcellated(tom) ::: Tom is an Ocellated wild turkey.\n\"\"\""
    ]
  },
  {
    "id": 10,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Eastern wild turkey.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWildTurkey(x) ::: x is a wild turkey.\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGould(x) ::: x is a Gould's wild turkey.\nMerriam(x) ::: x is a Merriam's wild turkey.\nRioGrande(x) ::: x is a Rio Grande wild turkey.\nOcellated(x) ::: x is an Ocellated wild turkey.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) ↔ Eastern(x) ∨ Osceola(x) ∨ Gould(x) ∨ Merriam(x) ∨ RioGrande(x) ∨ Ocellated(x)) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n¬Eastern(tom) ::: Tom is not an Eastern wild turkey.\n¬Osceola(tom) ::: Tom is not an Osceola wild turkey.\n¬Gould(tom) ∨ ¬Merriam(tom) ∨ ¬RioGrande(tom) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEastern(tom) ::: Tom is an Eastern wild turkey.\n\"\"\""
    ]
  },
  {
    "id": 11,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Joey is a wild turkey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWildTurkey(x) ::: x is a wild turkey.\nEastern(x) ::: x is an Eastern wild turkey.\nOsceola(x) ::: x is an Osceola wild turkey.\nGould(x) ::: x is a Gould's wild turkey.\nMerriam(x) ::: x is a Merriam's wild turkey.\nRioGrande(x) ::: x is a Rio Grande wild turkey.\nOcellated(x) ::: x is an Ocellated wild turkey.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) ↔ Eastern(x) ∨ Osceola(x) ∨ Gould(x) ∨ Merriam(x) ∨ RioGrande(x) ∨ Ocellated(x)) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n¬Eastern(tom) ::: Tom is not an Eastern wild turkey.\n¬Osceola(tom) ::: Tom is not an Osceola wild turkey.\n¬Gould(tom) ∨ ¬Merriam(tom) ∨ ¬RioGrande(tom) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWildTurkey(joey) ::: Joey is a wild turkey.\n\"\"\""
    ]
  },
  {
    "id": 12,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is in the Top 10 list.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCreated(x, y) ::: x created the game y.\nJapanese(x) ::: x is a Japanese game company.\nTop10(x) ::: x is in the Top 10 list.\nSells(x, y) ::: x sells y copies.\nSelected(x) ::: x is selected into the Top 10 list.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCreated(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x ((Sells(x, y) > 1,000,000) → Selected(y)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\n∀x (Top10(x) → Japanese(createdBy(x, game))) ::: All games in the Top 10 list are made by Japanese game companies.\nSells(legendOfZelda, moreThan1Million) ::: The Legend of Zelda sold more than one million copies.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSelected(legendOfZelda) ::: The Legend of Zelda is in the Top 10 list.\n\"\"\""
    ]
  },
  {
    "id": 13,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCreated(x, y) ::: x created the game y.\nJapanese(x) ::: x is a Japanese game company.\nTop10(x) ::: x is in the Top 10 list.\nSells(x, y) ::: x sells more than y copies.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCreated(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Top10(x) → Japanese(x)) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x (Sells(x, oneMillion) → Top10(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSells(legendOfZelda, oneMillion) ::: The Legend of Zelda sold more than one million copies.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nJapanese(japaneseVideoGameCompany) ::: FIFA 22 is made by a Japanese video game company.\n\"\"\""
    ]
  },
  {
    "id": 14,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is not in the Top 10 list.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCreated(x, y) ::: x created the game y.\nJapanese(x) ::: x is a Japanese game company.\nTop10(x) ::: x is in the Top 10 list.\nSells(x, y) ::: x sells more than y copies.\nSelected(x) ::: x is selected into the Top 10 list.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCreated(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x ((Created(x, legendOfZelda) ∧ Japanese(x)) → Top10(legendOfZelda)) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x ((Sells(x, oneMillion)) → Selected(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSells(legendOfZelda, oneMillion) ::: The Legend of Zelda sold more than one million copies.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Top10(legendOfZelda) ::: The Legend of Zelda is not in the Top 10 list.\n\"\"\""
    ]
  },
  {
    "id": 15,
    "context": [
      "All squares have four sides.",
      "All four-sided things are shapes. "
    ],
    "question": "All squares are shapes.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSquare(x) ::: x is a square.\nSides(x, y) ::: x has y sides.\nShape(x) ::: x is a shape.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Square(x) → Sides(x, 4)) ::: All squares have four sides.\n∀x (Sides(x, 4) → Shape(x)) ::: All four-sided things are shapes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Square(x) → Shape(x)) ::: All squares are shapes.\n\"\"\""
    ]
  },
  {
    "id": 16,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is a turtle.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCute(x) ::: x is cute.\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nAnimal(x) ::: x is an animal.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) ↔ (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Turtle(rock) ::: Rock is not a turtle.\n\"\"\""
    ]
  },
  {
    "id": 17,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is not a turtle.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCute(x) ::: x is cute.\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nAnimal(x) ::: x is an animal.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Turtle(rock) ::: Rock is not a turtle.\n\"\"\""
    ]
  },
  {
    "id": 18,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is a turtle or cute.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCute(x) ::: x is cute.\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nAnimal(x) ::: x is an animal.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTurtle(rock) ∨ Cute(rock) ::: Rock is a turtle or cute.\n\"\"\""
    ]
  },
  {
    "id": 19,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCute(x) ::: x is cute.\nTurtle(x) ::: x is a turtle.\nExist(x) ::: x exists.\nAnimal(x) ::: x is an animal.\nRabbit(x) ::: x is a rabbit.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nSkittish(x) → ¬Still(x) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ∨ Skittish(rock)) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\n\"\"\""
    ]
  },
  {
    "id": 20,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCute(x) ::: x is cute.\nExist(x) ::: x exists.\nAnimal(x) ::: x is an animal.\nRabbit(x) ::: x is a rabbit.\nTurtle(x) ::: x is a turtle.\nSquirrel(x) ::: x is a squirrel.\nSkittish(x) ::: x is skittish.\nStill(x) ::: x is still.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock)) ::: If Rock is cute and still, then Rock is a turtle and skittish.\n\"\"\""
    ]
  },
  {
    "id": 21,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "Karen will share \"Stranger Things\" to Lisa.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPopular(x) ::: x is a popular Netflix show.\nNetflixShow(x) ::: x is a Netflix show.\nBingeWatch(x) ::: Karen binge-watches x.\nDownload(x) ::: Karen downloads x.\nShare(x, y) ::: Karen shares x to y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPopular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\nBingeWatch(karen, x) ↔ Download(x) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\nBingeWatch(karen, x) → Share(x, lisa) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nShare(strangerThings, lisa) ::: Karen will share \"Stranger Things\" to Lisa.\n\"\"\""
    ]
  },
  {
    "id": 22,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "\"Black Mirror\" is popular.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPopular(x) ::: x is a popular Netflix show.\nNetflixShow(x) ::: x is a Netflix show.\nBingeWatch(x) ::: Karen binge-watches x.\nDownload(x) ::: Karen downloads x.\nShare(x, y) ::: Karen shares x to y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPopular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\nBingeWatch(karen, x) ↔ Download(x) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\nBingeWatch(karen, x) → Share(x, lisa) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(blackMirror) ::: \"Black Mirror\" is popular.\n\"\"\""
    ]
  },
  {
    "id": 23,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "Karen will share \"Black Mirror\" to Lisa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPopular(x) ::: x is a popular Netflix show.\nNetflixShow(x) ::: x is a Netflix show.\nBingeWatch(x) ::: Karen will binge-watch x.\nDownload(x) ::: Karen will download x.\nShare(x, y) ::: Karen will share x to y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPopular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\nBingeWatch(karen, x) ↔ Download(x) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\nBingeWatch(karen, x) → Share(karen, lisa) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nShare(blackMirror, lisa) ::: Karen will share \"Black Mirror\" to Lisa.\n\"\"\""
    ]
  },
  {
    "id": 24,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCapital(x, y) ::: x is the capital of y.\nPopulous(x) ::: x is the world's most populous national capital city.\nLocatedIn(x, y) ::: x is located in y.\nHosted(x, y) ::: x hosted the event y.\nRank(x, y, z) ::: x ranks among the best in y and z.\nUniversity(x) ::: x is a university.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCapital(beijing, peopleRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\nPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\nHosted(beijing, summerOlympics2008) ∧ Hosted(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympics) ∧ Hosted(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n∃x (University(x) ∧ Rank(x, asiaPacific, world)) ∧ Rank(beijing, best, asiaPacific) ∧ Rank(beijing, best, world) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHosted(beijing, summerOlympics2008) ∧ Hosted(beijing, winterOlympics) ::: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\n\"\"\""
    ]
  },
  {
    "id": 25,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing is located in southern China.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCapital(x, y) ::: x is the capital of y.\nPopulous(x) ::: x is the world's most populous national capital city.\nLocatedIn(x, y) ::: x is located in y.\nHosted(x, y) ::: x hosted the event y.\nRank(x, y) ::: x ranks among the best in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCapital(beijing, peopleRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\nPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\nHosted(beijing, summerOlympics2008) ∧ Hosted(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympics) ∧ Hosted(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n∃x (Rank(beijing, asiaPacific) ∧ Rank(beijing, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LocatedIn(beijing, southernChina) ::: Beijing is not located in southern China.\n\"\"\""
    ]
  },
  {
    "id": 26,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing is the second largest Chinese city by urban population.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCapital(x, y) ::: x is the capital of y.\nPopulous(x) ::: x is the world's most populous national capital city.\nLocatedIn(x, y) ::: x is located in y.\nHosted(x, y) ::: x hosted the event y.\nRankedAmongBest(x, y) ::: x consistently ranks among the best in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCapital(beijing, peopleRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\nPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\nHosted(beijing, summerOlympics2008) ∧ Hosted(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympics) ∧ Hosted(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nRankedAmongBest(beijingUniversities, asiaPacific) ∧ RankedAmongBest(beijingUniversities, world) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(SecondLargestCity(beijing, urbanPopulation, china)) ::: Beijing is not the second largest Chinese city by urban population.\n\"\"\""
    ]
  },
  {
    "id": 27,
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is an alien.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nAlien(x) ::: x is an alien.\nExtraterrestrial(x) ::: x is extraterrestrial.\nFromMars(x) ::: x is from Mars.\nHuman(x) ::: x is human.\nFromEarth(x) ::: x is from Earth.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.\n¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.\n¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAlien(marvin) ::: Marvin is an alien.\n\"\"\""
    ]
  },
  {
    "id": 28,
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is neither a human nor from Mars.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nAlien(x) ::: x is an alien.\nExtraterrestrial(x) ::: x is extraterrestrial.\nFromMars(x) ::: x is from Mars.\nHuman(x) ::: x is a human.\nFromEarth(x) ::: x is from Earth.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.\n¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.\n¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Human(marvin) ∧ ¬FromMars(marvin) ::: Marvin is neither a human nor from Mars.\n\"\"\""
    ]
  },
  {
    "id": 29,
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "If Marvin is not from Mars, then Marvin is a human.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nAlien(x) ::: x is an alien.\nExtraterrestrial(x) ::: x is extraterrestrial.\nFromMars(x) ::: x is from Mars.\nHuman(x) ::: x is a human.\nFromEarth(x) ::: x is from Earth.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.\n¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.\n¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬FromMars(marvin) → Human(marvin) ::: If Marvin is not from Mars, then Marvin is a human.\n\"\"\""
    ]
  },
  {
    "id": 30,
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic is a Grand Slam champion.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGrandSlamChampion(x) ::: x is a Grand Slam champion.\nOscarNominee(x) ::: x is an Oscar-nominated actor.\nProfessionalTennisPlayer(x) ::: x is a professional tennis player.\nCelebrity(x) ::: x is a celebrity.\nAthlete(x) ::: x is an athlete.\nWellPaid(x) ::: x is well paid.\nFamous(x) ::: x is famous.\nLiveInTaxHaven(x) ::: x lives in a tax haven.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (GrandSlamChampion(x) ∨ OscarNominee(x)) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominee(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.\n∀x (WellPaid(x) → LiveInTaxHaven(x)) ::: All well-paid people live in tax havens.\n(Famous(djokovic) ∧ Athlete(djokovic)) → LiveInTaxHaven(djokovic) ::: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandSlamChampion(djokovic) ::: Djokovic is a Grand Slam champion.\n\"\"\""
    ]
  },
  {
    "id": 31,
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic lives in a tax haven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGrandSlamChampion(x) ::: x is a Grand Slam champion.\nOscarNominatedActor(x) ::: x is an Oscar-nominated actor.\nProfessionalTennisPlayer(x) ::: x is a professional tennis player.\nCelebrity(x) ::: x is a celebrity.\nAthlete(x) ::: x is an athlete.\nWellPaid(x) ::: x is well paid.\nFamous(x) ::: x is famous.\nLiveInTaxHaven(x) ::: x lives in a tax haven.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x)) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.\n∀x (WellPaid(x) → LiveInTaxHaven(x)) ::: All well-paid people live in tax havens.\n(Famous(djokovic) ∧ Athlete(djokovic)) → LiveInTaxHaven(djokovic) ::: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveInTaxHaven(djokovic) ::: Djokovic lives in a tax haven.\n\"\"\""
    ]
  },
  {
    "id": 32,
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic does not live in a tax haven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGrandSlamChampion(x) ::: x is a Grand Slam champion.\nOscarNominatedActor(x) ::: x is an Oscar-nominated actor.\nProfessionalTennisPlayer(x) ::: x is a professional tennis player.\nCelebrity(x) ::: x is a celebrity.\nAthlete(x) ::: x is an athlete.\nWellPaid(x) ::: x is well paid.\nFamous(x) ::: x is famous.\nLiveInTaxHaven(x) ::: x lives in a tax haven.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x)) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.\n∀x (WellPaid(x) → LiveInTaxHaven(x)) ::: All well-paid people live in tax havens.\n(Famous(djokovic) ∧ Athlete(djokovic)) → LiveInTaxHaven(djokovic) ::: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LiveInTaxHaven(djokovic) ::: Djokovic does not live in a tax haven.\n\"\"\""
    ]
  },
  {
    "id": 33,
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick strong leads a professional wrestling stable.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStable(x) ::: x is a professional wrestling stable.\nFormedIn(x, y) ::: x is formed in y.\nLeads(x, y) ::: x leads y.\nIncludes(x, y) ::: x includes y.\nFeud(x, y) ::: x has a feud with y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nStable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLeads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nIncludes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\n\"\"\""
    ]
  },
  {
    "id": 34,
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick strong leads the Creed Brothers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStable(x) ::: x is a professional wrestling stable.\nFormedIn(x, y) ::: x is formed in y.\nLead(x, y) ::: x leads y.\nInclude(x, y) ::: x includes y.\nFeud(x, y) ::: x has a feud with y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nStable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLead(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nInclude(diamondMine, creedBrothers) ∧ Include(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLead(roderickStrong, creedBrothers) ::: Roderick Strong leads the Creed Brothers.\n\"\"\""
    ]
  },
  {
    "id": 35,
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStable(x) ::: x is a professional wrestling stable.\nFormedIn(x, y) ::: x is formed in y.\nLead(x, y) ::: x leads y.\nInclude(x, y) ::: x includes y.\nFeud(x, y) ::: x has a feud with y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nStable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLead(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nInclude(diamondMine, creedBrothers) ∧ Include(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x (Stable(x) ∧ Include(x, ivyNile) ∧ Feud(imperium, x)) ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n\"\"\""
    ]
  },
  {
    "id": 36,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is a composer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMusicPiece(x) ::: x is a music piece.\nComposer(x) ::: x is a composer.\nWrite(x, y) ::: x writes y.\nPremiere(x, y) ::: x premiered y.\nOrchestra(x) ::: x is an orchestra.\nLead(x, y) ::: x leads y.\nConductor(x) ::: x is a conductor.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\n∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.\nWrite(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nPremiere(viennaMusicSociety, symphonyNo9) ∧ Orchestra(viennaMusicSociety) ::: Vienna Music Society premiered Symphony No. 9 and is an orchestra.\nLead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\n∀x (Orchestra(x) → ∃y (Lead(y, x) ∧ Conductor(y))) ::: Orchestras are led by conductors.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComposer(beethoven) ::: Beethoven is a composer.\n\"\"\"\n>>> Corrected Program:"
    ]
  },
  {
    "id": 37,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Some orchestras premiered music pieces.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMusicPiece(x) ::: x is a music piece.\nComposer(x) ::: x is a composer.\nWrite(x, y) ::: x writes y.\nPremiere(x, y) ::: x premiered y.\nOrchestra(x) ::: x is an orchestra.\nLead(x, y) ::: x leads y.\nConductor(x) ::: x is a conductor.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\n∀x (Composer(x) → Write(x, musicPiece)) ::: Composers write music pieces.\nWrite(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nPremiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\nOrchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\nLead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\n∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Orchestra(x) ∧ Premiere(x, musicPiece)) ::: Some orchestras premiered music pieces.\n\"\"\""
    ]
  },
  {
    "id": 38,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is not a conductor.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMusicPiece(x) ::: x is a music piece.\nComposer(x) ::: x is a composer.\nWrite(x, y) ::: x writes y.\nPremiere(x, y) ::: x premiered y.\nOrchestra(x) ::: x is an orchestra.\nLead(x, y) ::: x leads y.\nConductor(x) ::: x is a conductor.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphonyno9) ::: Symphony No. 9 is a music piece.\n∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.\nWrite(beethoven, symphonyno9) ::: Beethoven wrote Symphony No. 9.\nPremiere(viennaMusicSociety, symphonyno9) ∧ Orchestra(viennaMusicSociety) ::: Vienna Music Society premiered Symphony No. 9 and is an orchestra.\nLead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\n∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Conductor(beethoven) ::: Beethoven is not a conductor.\n\"\"\""
    ]
  },
  {
    "id": 39,
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is a mass product design.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTimeless(x) ::: x is timeless.\nMassProduct(x) ::: x is a mass product design.\nDesignStyle(x, y) ::: x is a design style of y.\nKellyWearstler(x) ::: x is Kelly Wearstler.\nEvocative(x) ::: x is evocative.\nDreamy(x) ::: x is dreamy.\nMax(x) ::: x is Max.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (DesignStyle(x, zahaHadid) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.\nDesignStyle(zahaHadid, z) ∨ DesignStyle(kellyWearstler, z) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x, kellyWearstler) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x, kellyWearstler) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\nTimeless(designMax) → (MassProduct(designMax) ∧ Evocative(designMax)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMassProduct(designMax) ::: A design by Max is a mass product design.\n\"\"\""
    ]
  },
  {
    "id": 40,
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is evocative and dreamy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTimeless(x) ::: x is a timeless design style.\nMassProduct(x) ::: x is a mass product design.\nDesignStyle(x) ::: x is a design style.\nEvocative(x) ::: x is an evocative design style.\nDreamy(x) ::: x is a dreamy design style.\nDesignBy(x, y) ::: x is a design by y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (DesignStyle(x) → Timeless(x)) ::: All design styles are timeless.\n∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.\nDesignStyle(zaHaDid) ∨ DesignStyle(kellyWearstler) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(kellyWearstler, x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(kellyWearstler, x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n(Timeless(designBy(max, x)) → (MassProduct(designBy(max, x)) ∧ Evocative(designBy(max, x)))) ::: If a design by Max is timeless, then it is a mass product design and evocative.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEvocative(designBy(max, x) ∧ Dreamy(designBy(max, x))) ::: A design by Max is evocative and dreamy."
    ]
  },
  {
    "id": 41,
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is either evocative or dreamy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTimeless(x) ::: x is timeless.\nMassProduct(x) ::: x is a mass product design.\nDesignStyle(x, y) ::: x is a design style of y.\nEvocative(x) ::: x is evocative.\nDreamy(x) ::: x is dreamy.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (DesignStyle(x, zahaHadid) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.\nDesignStyle(zahaHadid, _) ∨ DesignStyle(kellyWearstler, _) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(x, kellyWearstler) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(x, kellyWearstler) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\nTimeless(designMax) → (MassProduct(designMax) ∧ Evocative(designMax)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEvocative(designMax) ∨ Dreamy(designMax) ::: A design by Max is either evocative or dreamy.\n\"\"\""
    ]
  },
  {
    "id": 42,
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff is among the most active players in major tennis.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nRankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\nActive(x) ::: x is among the most active players in major tennis.\nLostTo(x, y) ::: x lost to y.\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nPlayer(x) ::: x is a player.\nRolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.\nIgaSwiatek ::: Iga Swiatek\nRafaelNadal ::: Rafael Nadal\nCocoGauff ::: Coco Gauff\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (LostTo(x, IgaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ RolandGarros2022(x) → LostTo(x, IgaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.\n(RolandGarros2022(x) ∧ (Female(x) ∨ Male(x))) ::: Either female or male tennis players at Roland Garros 2022.\n∀x (Male(x) ∧ RolandGarros2022(x) → LostTo(x, RafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((RankedHighly(CocoGauff) ∨ LostTo(CocoGauff, RafaelNadal)) → ¬(Male(CocoGauff) ∧ RolandGarros2022(CocoGauff))) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nActive(CocoGauff) ::: Coco Gauff is among the most active players in major tennis."
    ]
  },
  {
    "id": 43,
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nRankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\nActive(x) ::: x is among the most active players in major tennis.\nLostTo(x, y) ::: x lost to y.\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nPlayer(x) ::: x is a player.\nRolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.\nIgaSwiatek ::: Iga Swiatek\nRafaelNadal ::: Rafael Nadal\nCocoGauff ::: Coco Gauff\n\nFirst-Order-Logic Premises:\n∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (LostTo(x, IgaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ RolandGarros2022(x) → LostTo(x, IgaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.\n(RolandGarros2022(x) ∧ (Female(x) ∨ Male(x))) ::: Either female tennis players or male tennis players at Roland Garros 2022.\n∀x (Male(x) ∧ RolandGarros2022(x) → LostTo(x, RafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((RankedHighly(CocoGauff) ∨ LostTo(CocoGauff, RafaelNadal)) → ¬(Male(CocoGauff) ∧ RolandGarros2022(CocoGauff))) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n\nFirst-Order-Logic Question:\nLostTo(CocoGauff, RafaelNadal) ::: Coco Gauff has lost to Rafael Nadal."
    ]
  },
  {
    "id": 44,
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nRankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\nActive(x) ::: x is among the most active players in major tennis.\nLostTo(x, y) ::: x lost to y.\nFemale(x) ::: x is a female.\nMale(x) ::: x is a male.\nPlayer(x) ::: x is a player.\nAtRolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.\nRafaelNadal(x) ::: x is Rafael Nadal.\nIgaSwiatek(x) ::: x is Iga Swiatek.\nCocoGauff(x) ::: x is Coco Gauff.\n\nFirst-Order-Logic Premises:\n∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ AtRolandGarros2022(x) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.\n∀x (Male(x) ∧ AtRolandGarros2022(x) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((RankedHighly(cocoGauff) ∨ LostTo(cocoGauff, rafaelNadal)) → ¬(Male(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n\nFirst-Order-Logic Question:\n¬(LostTo(cocoGauff, igaSwiatek) ∨ Active(cocoGauff)) ::: Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis."
    ]
  },
  {
    "id": 45,
    "context": [
      "All cats are mammals.",
      "Some pets are not mammals."
    ],
    "question": "No pets are cats.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCat(x) ::: x is a cat.\nMammal(x) ::: x is a mammal.\nPet(x) ::: x is a pet.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) → Mammal(x)) ::: All cats are mammals.\n∃x (Pet(x) ∧ ¬Mammal(x)) ::: Some pets are not mammals.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x (Pet(x) ∧ Cat(x)) ::: No pets are cats.\n\"\"\""
    ]
  },
  {
    "id": 46,
    "context": [
      "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "James's favorite season is summer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSeason(x) ::: x is a season.\nStudent(x) ::: x is a student.\nLove(x, y) ::: x loves y.\nFavoriteSeason(x, y) ::: x's favorite season is y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Season(x) ↔ (x = Spring ∨ x = Summer ∨ x = Fall ∨ x = Winter)) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x (Student(x) ∧ WantLongVacation(x) → Love(x, Summer)) ::: All students who want to have a long vacation love summer the most.\nFavoriteSeason(emma, Summer) ::: Emma's favorite season is summer.\nFavoriteSeason(mia, y) ∧ y ≠ FavoriteSeason(emma, y) ::: Mia's favorite season is not the same as Emma's.\nWantLongVacation(james) ::: James wants to have a long vacation.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLove(james, Summer) ::: James's favorite season is summer.\n\"\"\""
    ]
  },
  {
    "id": 47,
    "context": [
      "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "James's favorite season is fall.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSeason(x) ::: x is a season.\nStudent(x) ::: x is a student.\nLove(x, y) ::: x loves y.\nFavoriteSeason(x, y) ::: x's favorite season is y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Season(x) ↔ (x = Spring ∨ x = Summer ∨ x = Fall ∨ x = Winter)) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x (Student(x) ∧ WantLongVacation(x) → Love(x, Summer)) ::: All students who want to have a long vacation love summer the most.\nFavoriteSeason(emma, Summer) ::: Emma's favorite season is summer.\nFavoriteSeason(mia, y) ∧ y ≠ FavoriteSeason(emma, y) ::: Mia's favorite season is not the same as Emma's.\nWantLongVacation(james) ::: James wants to have a long vacation.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFavoriteSeason(james, Fall) ::: James's favorite season is fall.\n\"\"\""
    ]
  },
  {
    "id": 48,
    "context": [
      "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "Mia's favorite season is spring.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSeason(x) ::: x is a season.\nStudent(x) ::: x is a student.\nLove(x, y) ::: x loves y.\nFavoriteSeason(x, y) ::: x's favorite season is y.\nWantLongVacation(x) ::: x wants to have a long vacation.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ((Season(x) → (x = Spring ∨ x = Summer ∨ x = Fall ∨ x = Winter))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x ((Student(x) ∧ WantLongVacation(x)) → Love(x, Summer)) ::: All students who want to have a long vacation love summer the most.\nFavoriteSeason(emma, Summer) ::: Emma's favorite season is summer.\n∀y ((FavoriteSeason(mia, y) ∧ y ≠ Summer) → (y ≠ FavoriteSeason(emma, y))) ::: Mia's favorite season is not the same as Emma's.\nWantLongVacation(james) ::: James wants to have a long vacation.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFavoriteSeason(mia, Spring) ::: Mia's favorite season is spring.\n\"\"\""
    ]
  },
  {
    "id": 49,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is printed text.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nDigital(x) ::: x is digital media.\nAnalog(x) ::: x is analog.\nPrintedText(x) ::: x is printed text.\nStreamingService(x) ::: x is a streaming service.\nHardcoverBook(x) ::: x is a hardcover book.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\n∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book then it is printed text.\n(StreamingService(1984) → HardcoverBook(1984)) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrintedText(1984) ::: 1984 is printed text.\n\"\"\""
    ]
  },
  {
    "id": 50,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is a streaming service.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nDigital(x) ::: x is digital media.\nAnalog(x) ::: x is analog.\nPrintedText(x) ::: x is a printed text.\nStreamingService(x) ::: x is a streaming service.\nHardcoverBook(x) ::: x is a hardcover book.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\n∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book then it is printed text.\n(StreamingService(1984) → HardcoverBook(1984)) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStreamingService(1984) ::: 1984 is a streaming service.\n\"\"\""
    ]
  },
  {
    "id": 51,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is not a streaming service.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nDigital(x) ::: x is digital media.\nAnalog(x) ::: x is analog.\nPrintedText(x) ::: x is a printed text.\nStreamingService(x) ::: x is a streaming service.\nHardcoverBook(x) ::: x is a hardcover book.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\n∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book then it is printed text.\nStreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬StreamingService(1984) ::: 1984 is not a streaming service.\n\"\"\""
    ]
  },
  {
    "id": 52,
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "Basque is a Romance language.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nRomance(x) ::: x is a Romance language.\nIndoEuropean(x) ::: x is an Indo-European language.\nLanguageFamily(x) ::: x is a language family.\nRelated(x, y) ::: x is related to y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Romance(x) → IndoEuropean(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romance) ::: The Romance languages are a language family.\n∀x ∀y ((LanguageFamily(x) ∧ LanguageFamily(y)) → Related(x, y)) ::: All languages within a language family are related to each other.\nRomance(french) ∧ Romance(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n¬Related(basque, y) ::: Basque is not related to any other language.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Romance(basque) ::: Basque is not a Romance language.\n\"\"\""
    ]
  },
  {
    "id": 53,
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "German is a Romance language.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nRomance(x) ::: x is a Romance language.\nIndoEuropean(x) ::: x is an Indo-European language.\nLanguageFamily(x) ::: x is a language family.\nRelated(x, y) ::: x is related to y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Romance(x) → IndoEuropean(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romance) ::: The Romance languages are a language family.\n∀x (LanguageFamily(x) → (∀y (LanguageFamily(y) → Related(x, y)))) ::: All languages within a language family are related to each other.\nRomance(french) ∧ Romance(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n¬∃x (Related(basque, x)) ::: Basque is not related to any other language.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Romance(german) ::: German is not a Romance language.\n\"\"\""
    ]
  },
  {
    "id": 54,
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "French is an Indo-European language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nIndoEuropean(x) ::: x is an Indo-European language.\nRomance(x) ::: x is a Romance language.\nLanguageFamily(x) ::: x is a language family.\nRelated(x, y) ::: x is related to y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Romance(x) → IndoEuropean(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romance) ::: The Romance languages are a language family.\n∀x ∀y ((LanguageFamily(x) ∧ LanguageFamily(y)) → Related(x, y)) ::: All languages within a language family are related to each other.\nRomance(french) ∧ Romance(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n¬∃y Related(basque, y) ::: Basque is not related to any other language.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIndoEuropean(french) ::: French is an Indo-European language.\n\"\"\""
    ]
  },
  {
    "id": 55,
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a soccer player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStriker(x) ::: x is a striker.\nSoccerPlayer(x) ::: x is a soccer player.\nLeft(x, y) ::: x left y.\nPlay(x, y) ::: x plays for y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nStriker(robertLewandowski) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y ((Left(x, y)) → ¬(Play(x, y))) ::: If a player left a team they no longer play for that team.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoccerPlayer(robertLewandowski) ::: Robert Lewandowski is a soccer player.\n\"\"\""
    ]
  },
  {
    "id": 56,
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStriker(x) ::: x is a striker.\nSoccerPlayer(x) ::: x is a soccer player.\nLeft(x, y) ::: x left y.\nPlayFor(x, y) ::: x plays for y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nStriker(robertLewandowski) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y ((Left(x, y)) → ¬(PlayFor(x, y))) ::: If a player left a team they no longer play for that team.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PlayFor(robertLewandowski, bayernMunchen) ::: Robert Lewandowski plays for Bayern Munchen.\n\"\"\""
    ]
  },
  {
    "id": 57,
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a star.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStriker(x) ::: x is a striker.\nSoccerPlayer(x) ::: x is a soccer player.\nLeft(x, y) ::: x left y.\nPlay(x, y) ::: x plays for y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nStriker(robertLewandowski) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y ((Left(x, y)) → ¬(Play(x, y))) ::: If a player left a team they no longer play for that team.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Striker(x) → SoccerPlayer(x)) ::: All strikers are soccer players."
    ]
  },
  {
    "id": 58,
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Butte and Pierre are in the same state.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCity(x) ::: x is a city.\nState(x) ::: x is a state.\nIn(x, y) ::: x is in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCity(billings) ∧ In(billings, montana) ::: Billings is a city in Montana.\nCity(butte) ∧ City(helena) ∧ City(missoula) ∧ In(montana, butte) ∧ In(montana, helena) ∧ In(montana, missoula) ::: Montana includes the cities of Butte, Helena, and Missoula.\nCity(whiteSulphurSprings) ∧ City(butte) ∧ In(sameState, whiteSulphurSprings) ∧ In(sameState, butte) ::: White Sulphur Springs and Butte are cities in the same state.\nCity(pierre) ∧ ¬In(pierre, montana) ::: The city of Pierre is not in Montana.\n∀x (In(x, butte) → ¬In(x, pierre)) ::: Any city in Butte is not in Pierre.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(butte, sameState) ∧ In(pierre, sameState) ::: Butte and Pierre are in the same state.\n\"\"\""
    ]
  },
  {
    "id": 59,
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Pierre and Bismarck are in the same state.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCity(x) ::: x is a city.\nState(x) ::: x is a state.\nIn(x, y) ::: x is in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCity(billings) ∧ In(billings, montana) ::: Billings is a city in Montana.\nCity(butte) ∧ City(helena) ∧ City(missoula) ∧ In(montana, butte) ∧ In(montana, helena) ∧ In(montana, missoula) ::: Montana includes the cities of Butte, Helena, and Missoula.\nCity(whiteSulphurSprings) ∧ City(butte) ∧ In(whiteSulphurSprings, state1) ∧ In(butte, state1) ::: White Sulphur Springs and Butte are cities in the same state.\n¬City(pierre) ∧ ¬In(pierre, montana) ::: The city of Pierre is not in Montana.\n∀x (In(x, butte) → ¬In(x, pierre)) ::: Any city in Butte is not in Pierre.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(pierre, state1) ∧ In(bismarck, state1) ::: Pierre and Bismarck are in the same state.\n\"\"\""
    ]
  },
  {
    "id": 60,
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Montana is home to the city of Missoula.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCity(x) ::: x is a city.\nState(x) ::: x is a state.\nIn(x, y) ::: x is in y.\nSameState(x, y) ::: x and y are in the same state.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nCity(billings) ∧ In(billings, montana) ::: Billings is a city in Montana.\nCity(butte) ∧ City(helena) ∧ City(missoula) ∧ In(montana, butte) ∧ In(montana, helena) ∧ In(montana, missoula) ::: Montana includes the cities of Butte, Helena, and Missoula.\nCity(whiteSulphurSprings) ∧ City(butte) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.\nCity(pierre) ∧ ¬In(pierre, montana) ::: The city of Pierre is not in Montana.\n∀x (In(x, butte) → ¬In(x, pierre)) ::: Any city in Butte is not in Pierre.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIn(montana, missoula) ::: Montana is home to the city of Missoula.\n\"\"\""
    ]
  },
  {
    "id": 61,
    "context": [
      "International students in US have either an F1 visa or a J1 visa.",
      "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has an F1 visa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nInternationalStudent(x) ::: x is an international student.\nHasVisa(x, y) ::: x has a visa y.\nNeedsToApplyFor(x, y) ::: x needs to apply for y.\nWantsToWorkInUS(x) ::: x wants to work in the US.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (InternationalStudent(x) → (HasVisa(x, F1) ∨ HasVisa(x, J1))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x ((InternationalStudent(x) ∧ HasVisa(x, F1)) → (NeedsToApplyFor(x, CPT) ∨ NeedsToApplyFor(x, OPT))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nInternationalStudent(mike) ::: Mike is an international student.\nNeedsToApplyFor(mike, CPT) ::: Mike needs to apply for CPT if he wants to work in the US.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasVisa(mike, F1) ::: Mike has an F1 visa.\n\"\"\""
    ]
  },
  {
    "id": 62,
    "context": [
      "International students in US have either an F1 visa or a J1 visa.",
      "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has a J1 visa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nInternationalStudent(x) ::: x is an international student.\nHasVisa(x, y) ::: x has a visa y.\nNeedsToApplyFor(x, y) ::: x needs to apply for y.\nWantsToWorkInUS(x) ::: x wants to work in the US.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (InternationalStudent(x) → (HasVisa(x, F1) ∨ HasVisa(x, J1))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x ((InternationalStudent(x) ∧ HasVisa(x, F1)) → (NeedsToApplyFor(x, CPT) ∨ NeedsToApplyFor(x, OPT))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nInternationalStudent(mike) ::: Mike is an international student.\nNeedsToApplyFor(mike, CPT) ::: Mike needs to apply for CPT if he wants to work in the US.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasVisa(mike, J1) ::: Mike has a J1 visa.\n\"\"\""
    ]
  },
  {
    "id": 63,
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "Ted is a pet.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCow(x) ::: x is a cow.\nBovine(x) ::: x is a bovine.\nPet(x) ::: x is a pet.\nDomesticated(x) ::: x is domesticated.\nAlligator(x) ::: x is an alligator.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.\n∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.\n∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.\nAlligator(ted) ::: Ted is an alligator.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Pet(x) ∧ x = ted) ::: Ted is a pet.\n\"\"\""
    ]
  },
  {
    "id": 64,
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "Ted is a pet and a cow.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCow(x) ::: x is a cow.\nBovine(x) ::: x is a bovine.\nPet(x) ::: x is a pet.\nDomesticated(x) ::: x is domesticated.\nAlligator(x) ::: x is an alligator.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.\n∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.\n∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.\nAlligator(ted) ::: Ted is an alligator.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPet(ted) ∧ Cow(ted) ::: Ted is a pet and a cow.\n\"\"\""
    ]
  },
  {
    "id": 65,
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "If Ted is a cow, then Ted is not a pet.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nCow(x) ::: x is a cow.\nBovine(x) ::: x is a bovine.\nPet(x) ::: x is a pet.\nDomesticated(x) ::: x is domesticated.\nAlligator(x) ::: x is an alligator.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.\n∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.\n∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.\nAlligator(ted) ::: Ted is an alligator.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Cow(ted) → ¬Pet(ted)) ::: If Ted is a cow, then Ted is not a pet.\n\"\"\""
    ]
  },
  {
    "id": 66,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nUniversity(x) ::: x is a university.\nPrivate(x) ::: x is private.\nIvyLeague(x) ::: x is an Ivy League university.\nResearch(x) ::: x is a research university.\nMoved(x, y) ::: x moved to y.\nValuedAt(x, y) ::: x is valued at y.\nOrganizedInto(x, y) ::: x is organized into y.\nList(x) ::: x is a list.\nCollege(x) ::: x is a college.\nSchool(x) ::: x is a school.\nResidentialCollege(x) ::: x is a residential college.\nGraduateSchool(x) ::: x is the Yale Graduate School of Arts and Sciences.\nProfessionalSchool(x) ::: x is a professional school.\n\nFirst-Order-Logic Premises:\nUniversity(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ Research(yale) ::: Yale University is a private Ivy League research university.\nMoved(yale, newHaven1716) ::: Yale University moved to New Haven in 1716.\nValuedAt(endowmentYale, 42.3billion) ::: Yale university's endowment was valued at $42.3 billion.\nOrganizedInto(yale, list(residentialColleges, graduateSchool, professionalSchool)) ∧ College(residentialColleges) ∧ School(graduateSchool) ∧ School(professionalSchool) ∧ \nCollege(benjaminFranklin) ∧ College(berkeley) ∧ College(branford) ∧ College(davenport) ∧ College(ezraStiles) ∧ College(graceHopper) ∧ College(jonathanEdwards) ∧ College(morse) ∧ College(pauliMurray) ∧ College(pierson) ∧ College(saybrook) ∧ College(silliman) ∧ College(timothyDwight) ∧ College(trumbull) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\n\nFirst-Order-Logic Question:\nUniversity(x) ∧ Private(x) ∧ IvyLeague(x) ∧ Research(x) ∧ Moved(x, newHaven1716) ::: A private Ivy League research university moved to New Haven."
    ]
  },
  {
    "id": 67,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nUniversity(x) ::: x is a university.\nPrivate(x) ::: x is private.\nIvyLeague(x) ::: x is an Ivy League university.\nResearch(x) ::: x is a research university.\nMovedTo(x, y) ::: x moved to y.\nValuedAt(x, y) ::: x is valued at y.\nOrganizedInto(x, y) ::: x is organized into y.\nCollege(x) ::: x is a college.\nSchool(x) ::: x is a school.\nResidentialCollege(x) ::: x is a residential college.\nGraduateSchool(x) ::: x is the Yale Graduate School of Arts and Sciences.\nProfessionalSchool(x) ::: x is a professional school.\nList(x, y) ::: x is a list of y.\n\nFirst-Order-Logic Premises:\nUniversity(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ Research(yale) ::: Yale University is a private Ivy League research university.\nMovedTo(yale, newHaven) ∧ ValuedAt(endowment, 42.3billion) ::: Yale University moved to New Haven in 1716 and its endowment was valued at $42.3 billion.\nOrganizedInto(yale, list(residentialColleges, graduateSchool, professionalSchool)) ::: Yale University has been organized into residential colleges, the Yale Graduate School of Arts and Sciences, and professional schools.\n\nFirst-Order-Logic Question:\n∀x (University(x) ∧ ValuedAt(x, y) → (∀z (University(z) ∧ ValuedAt(z, w) → y ≥ w))) ::: Yale University has the largest university endowment of any educational institution."
    ]
  },
  {
    "id": 68,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "Pierson College is a residential college at Yale.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nUniversity(x) ::: x is a university.\nPrivate(x) ::: x is a private institution.\nIvyLeague(x) ::: x is an Ivy League institution.\nResearch(x) ::: x is a research institution.\nMoved(x, y) ::: x moved to location y.\nValuedAt(x, y) ::: x is valued at y dollars.\nOrganizedInto(x, y) ::: x is organized into y.\nList(x, y) ::: x is a list of y.\nResidentialCollege(x) ::: x is a residential college.\n\nFirst-Order-Logic Premises:\nUniversity(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ Research(yale) ::: Yale University is a private Ivy League research university.\nMoved(yale, newHaven1716) ::: Yale University moved to New Haven in 1716.\nValuedAt(endowmentYale, 42.3billion) ::: Yale university's endowment was valued at $42.3 billion.\nOrganizedInto(yale, list(residentialColleges, graduateSchoolOfArtsAndSciences, twelveProfessionalSchools)) ::: Yale University has been organized into residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nList(residentialColleges, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull]) ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n\nFirst-Order-Logic Question:\nResidentialCollege(pierson) ∧ List(residentialColleges, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull]) ::: Pierson College is a residential college at Yale."
    ]
  },
  {
    "id": 69,
    "context": [
      "Badults is a British Sitcom series, starring members of Pappy's.",
      "Badults piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults"
    ],
    "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBritish(x) ::: x is British.\nSitcomSeries(x) ::: x is a sitcom series.\nStarring(x, y) ::: x stars members of y.\nPiloted(x, y) ::: x piloted in year y.\nWorkingTitle(x, y) ::: x has a working title of y.\nScriptEditor(x, y) ::: x is the script editor for y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBritish(badults) ∧ SitcomSeries(badults) ∧ Starring(badults, pappys) ::: Badults is a British Sitcom series, starring members of Pappy's.\nPiloted(badults, year2013) ∧ Piloted(bbcThree, year2013) ::: Badults piloted in July 2013 on BBC Three.\nWorkingTitle(badults, secretDudeSociety) ::: The Working title \"The Secret Dude Society\" was used for Badults.\nScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nScriptEditor(andrewCollins, x) ∧ WorkingTitle(x, secretDudeSociety) ::: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n\"\"\""
    ]
  },
  {
    "id": 70,
    "context": [
      "Badults is a British Sitcom series, starring members of Pappy's.",
      "Badults piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults"
    ],
    "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBritish(x) ::: x is British.\nSitcomSeries(x) ::: x is a sitcom series.\nStarring(x, y) ::: x stars y.\nPiloted(x, y) ::: x piloted in year y.\nWorkingTitle(x, y) ::: x has a working title y.\nScriptEditor(x, y) ::: x is the script editor for y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBritish(badults) ∧ SitcomSeries(badults) ∧ Starring(badults, pappys) ::: Badults is a British Sitcom series, starring members of Pappy's.\nPiloted(badults, year2013) ∧ Piloted(badults, BBCThree) ::: Badults piloted in July 2013 on BBC Three.\nWorkingTitle(badults, secretDudeSociety) ::: The Working title \"The Secret Dude Society\" was used for Badults.\nScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x (Starring(pappys, x) ∧ (Piloted(x, BBCTwo) ∨ Piloted(x, BBCThree))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n\"\"\""
    ]
  },
  {
    "id": 71,
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "KO is a company stock.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGrowthStock(x) ::: x is a growth stock of a company.\nVolatile(x) ::: x is volatile.\nSuitableForRetirementFund(x) ::: x is suitable for a retirement fund.\nStockOfCompany(x, y) ::: x is a stock of company y.\nMatureCompany(x) ::: x is a mature company.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (StockOfCompany(x, y) ∧ GrowthStock(x)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (StockOfCompany(x, y) → SuitableForRetirementFund(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nStockOfCompany(KO, company) ∧ MatureCompany(company) ::: KO is a stock of a mature company.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y StockOfCompany(KO, y) ::: KO is a company stock.\n\"\"\""
    ]
  },
  {
    "id": 72,
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "KO is a company stock and a growth stock of a company.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGrowthStock(x) ::: x is a growth stock of a company.\nVolatile(x) ::: x is volatile.\nSuitableForRetirementFund(x) ::: x is suitable for a retirement fund.\nStockOfCompany(x, y) ::: x is a stock of company y.\nMatureCompany(x) ::: x is a mature company.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (StockOfCompany(x, y) ∧ GrowthStock(x)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (MatureCompany(x) → SuitableForRetirementFund(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nStockOfCompany(KO, company) ∧ MatureCompany(company) ::: KO is a stock of a mature company.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStockOfCompany(KO, company) ∧ GrowthStock(KO) ::: KO is a company stock and a growth stock of a company.\n\"\"\""
    ]
  },
  {
    "id": 73,
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGrowthStock(x) ::: x is a growth stock of a company.\nVolatile(x) ::: x is volatile.\nSuitableForRetirementFund(x) ::: x is suitable for a retirement fund.\nStockOfCompany(x, y) ::: x is a stock of company y.\nMatureCompany(x) ::: x is a mature company.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (StockOfCompany(x, y) ∧ GrowthStock(x)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (StockOfCompany(x, y) → SuitableForRetirementFund(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nStockOfCompany(KO, matureCompany) ::: KO is a stock of a mature company.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(GrowthStock(KO) ∨ Volatile(KO)) → ¬(StockOfCompany(KO, company) ∨ Volatile(KO)) ::: If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.\n\"\"\""
    ]
  },
  {
    "id": 74,
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Joe's license plate begins with the number 34.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBeginsWith(x, y) ::: x begins with the number y.\nFrom(x, y) ::: x is from location y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (From(x, Istanbul) → BeginsWith(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x (¬BeginsWith(x, 34) → ¬From(x, Istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\nFrom(joe, Istanbul) ::: Joe's vehicle registration plate is from Istanbul.\nBeginsWith(tom, 35) ::: Tom's license plate begins with the number 35.\nBeginsWith(tom, 35) → ¬BeginsWith(tom, 34) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBeginsWith(joe, 34) ::: Joe's license plate begins with the number 34.\n\"\"\""
    ]
  },
  {
    "id": 75,
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Tom's license plate is from Istanbul.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBeginsWith(x, y) ::: x begins with the number y.\nFrom(x, y) ::: x is from location y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (From(x, Istanbul) → BeginsWith(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x (¬BeginsWith(x, 34) → ¬From(x, Istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\nFrom(joe, Istanbul) ::: Joe's vehicle registration plate is from Istanbul.\nBeginsWith(tom, 35) ::: Tom's license plate begins with the number 35.\nBeginsWith(tom, 35) → ¬BeginsWith(tom, 34) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFrom(tom, Istanbul) ::: Tom's license plate is from Istanbul.\n\"\"\""
    ]
  },
  {
    "id": 76,
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWork(x) ::: x works in student jobs on campus.\nEarn(x) ::: x needs to earn money to help pay for their college tuition.\nOrder(x) ::: x orders takeout frequently in college.\nEnjoy(x) ::: x enjoys the dining hall meals and recipes.\nPicky(x) ::: x is a picky eater.\nSpendTime(x) ::: x spends a lot of their time eating and catching up with friends in the campus dining halls.\nMary ::: Mary is a specific person.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Work(x) → Earn(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (Order(x) → Work(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (Order(x) ⊕ Enjoy(x)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (Enjoy(x) → SpendTime(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(Work(mary) ∧ Earn(mary)) → ¬(Picky(mary) ∧ Earn(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEarn(mary) ::: Mary needs to earn money to help pay for her college tuition.\n\"\"\""
    ]
  },
  {
    "id": 77,
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWork(x) ::: x works in student jobs on campus.\nEarn(x) ::: x needs to earn money to help pay for college tuition.\nOrder(x) ::: x orders takeout frequently in college.\nEnjoy(x) ::: x enjoys the dining hall meals and recipes.\nPicky(x) ::: x is a picky eater.\nSpendTime(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.\nMary ::: Constant representing Mary.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nWork(x) → Earn(x) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nOrder(x) → Work(x) ::: If people order takeout frequently in college, then they work in student jobs on campus.\nOrder(x) ⊕ Enjoy(x) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nEnjoy(x) → ¬Picky(x) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nEnjoy(x) → SpendTime(x) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(Work(mary) ∧ Earn(mary)) → ¬(Picky(mary) ∨ Earn(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Picky(mary) ∧ SpendTime(mary) ::: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n\"\"\""
    ]
  },
  {
    "id": 78,
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWork(x) ::: x works in student jobs on campus.\nEarn(x) ::: x needs to earn money to help pay for college tuition.\nOrder(x) ::: x orders takeout frequently in college.\nEnjoy(x) ::: x enjoys the dining hall meals and recipes.\nPicky(x) ::: x is a picky eater.\nSpendTime(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.\nMary(x) ::: x is Mary.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nWork(x) → Earn(x) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nOrder(x) → Work(x) ::: If people order takeout frequently in college, then they work in student jobs on campus.\nOrder(x) ⊕ Enjoy(x) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nEnjoy(x) → ¬Picky(x) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nEnjoy(x) → SpendTime(x) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(Work(mary) ∧ Earn(mary)) → ¬(Picky(mary) ∧ Earn(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Picky(mary) ∨ (Picky(mary) → SpendTime(mary)) ::: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n\"\"\""
    ]
  },
  {
    "id": 79,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are a product of Baked by Melissa.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSpicy(x) ::: x is spicy.\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nProduct(x) ::: x is a product.\nBakedByMelissa(x) ::: x is a product of Baked by Melissa.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBakedByMelissa(driedThaiChilies) ::: Dried Thai chilies are a product of Baked by Melissa.\n\"\"\""
    ]
  },
  {
    "id": 80,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are not a product of Baked by Melissa.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nSpicy(x) ::: x is spicy.\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nProduct(x) ::: x is a product.\nBakedByMelissa(x) ::: x is a product of Baked by Melissa.\nDriedThaiChilies(x) ::: x is dried Thai chilies.\n\nFirst-Order-Logic Premises:\n∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n∀x ((DriedThaiChilies(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x))) ::: If x is dried Thai chilies or a bakery, then x is a hotpot or is spicy.\n\nFirst-Order-Logic Question:\n¬BakedByMelissa(driedThaiChilies) ::: Dried Thai chilies are not a product of Baked by Melissa."
    ]
  },
  {
    "id": 81,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are a hotpot.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSpicy(x) ::: x is spicy.\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nProduct(x, y) ::: x is a product of y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(x, BakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHotpot(driedThaiChilies) ::: Dried Thai chilies are a hotpot.\n\"\"\""
    ]
  },
  {
    "id": 82,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nSpicy(x) ::: x is spicy.\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nProduct(x, y) ::: x is a product of y.\nBakedByMelissa(x) ::: x is a product of Baked by Melissa.\n\nFirst-Order-Logic Premises:\n∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x))) ::: If x is spicy or a bakery, then x is a hotpot or spicy.\n\nFirst-Order-Logic Question:\n¬(Product(driedThaiChilies, BakedByMelissa) ∨ Bakery(driedThaiChilies)) ::: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery."
    ]
  },
  {
    "id": 83,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSpicy(x) ::: x is spicy.\nBakery(x) ::: x is a bakery.\nCupcake(x) ::: x is a cupcake.\nHotpot(x) ::: x is a hotpot.\nProduct(x, y) ::: x is a product of y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(x, BakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCupcake(driedThaiChilies) ∧ Product(driedThaiChilies, BakedByMelissa) ::: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\n\"\"\""
    ]
  },
  {
    "id": 84,
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nListed(x) ::: x is listed in Yelp's recommendations.\nNegativeReviews(x) ::: x receives many negative reviews.\nRating(x, y) ::: x has a rating of y.\nTakeOut(x) ::: x provides take-out service.\nPopular(x) ::: x is popular among local residents.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nListed(x) → ¬NegativeReviews(x) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (Rating(x, y) ∧ y > 9 → Listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∃x (¬TakeOut(x) ∧ NegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (Popular(x) → (Rating(x, y) ∧ y > 9)) ::: All restaurants that are popular among local residents have ratings greater than 9.\nRating(subway, y) ∨ Popular(subway) ::: Subway has a rating greater than 9 or is popular among local residents.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(TakeOut(subway) ∧ NegativeReviews(subway)) → (Rating(subway, y) ∧ ¬TakeOut(subway)) ::: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\n\"\"\""
    ]
  },
  {
    "id": 85,
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "Subway provides take-out service and does not receive many negative reviews.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nListed(x) ::: x is listed in Yelp's recommendations.\nNegativeReviews(x) ::: x receives many negative reviews.\nRating(x, y) ::: x has a rating of y.\nTakeOut(x) ::: x provides take-out service.\nPopular(x) ::: x is popular among local residents.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nListed(x) → ¬NegativeReviews(x) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (Rating(x, y) ∧ y > 9 → Listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∃x (¬TakeOut(x) ∧ NegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (Popular(x) → (Rating(x, y) ∧ y > 9)) ::: All restaurants that are popular among local residents have ratings greater than 9.\nRating(subway, y) ∨ Popular(subway) ::: Subway has a rating greater than 9 or is popular among local residents.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTakeOut(subway) ∧ ¬NegativeReviews(subway) ::: Subway provides take-out service and does not receive many negative reviews.\n\"\"\""
    ]
  },
  {
    "id": 86,
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "Subway does not provide take-out service.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nListed(x) ::: x is listed in Yelp's recommendations.\nNegativeReviews(x) ::: x receives many negative reviews.\nRating(x, y) ::: x has a rating of y.\nTakeOut(x) ::: x provides take-out service.\nPopular(x) ::: x is popular among local residents.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n(Listed(restaurant) → ¬NegativeReviews(restaurant)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x ((Rating(x, y) ∧ y > 9) → Listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∃x (¬TakeOut(x) ∧ NegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (Popular(x) → (Rating(x, y) ∧ y > 9)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(Rating(subway, y) ∧ y > 9) ∨ Popular(subway) ::: Subway has a rating greater than 9 or is popular among local residents.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬TakeOut(subway) ::: Subway does not provide take-out service.\n\"\"\""
    ]
  },
  {
    "id": 87,
    "context": [
      "In superhero movies, the good guys always win.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
      "Good guys fight bad guys and vice versa.",
      "Sir Digby fights his nemesis.",
      "If a superhero movie is named after a character, that character is a good guy.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
      "If somebody wins a fight, the person they are fighting loses.",
      "If a superhero movie is named after a character, that character appears in the movie."
    ],
    "question": "Sir Digby’s nemesis loses.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGoodGuy(x) ::: x is a good guy.\nWin(x) ::: x wins.\nSuperheroMovie(x) ::: x is a superhero movie.\nNamedAfter(x, y) ::: x is named after y.\nCharacter(x) ::: x is a character.\nFight(x, y) ::: x fights y.\nLose(x) ::: x loses.\nNemesis(x, y) ::: x is the nemesis of y.\nAppearsIn(x, y) ::: x appears in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (SuperheroMovie(x) → Win(x)) ::: In superhero movies, the good guys always win.\nSuperheroMovie(surprisingAdventuresOfSirDigbyChickenCaesar) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n∀x (GoodGuy(x) → Fight(x, badGuy)) ∧ ∀x (BadGuy(x) → Fight(x, goodGuy)) ::: Good guys fight bad guys and vice versa.\nFight(sirDigby, nemesis) ::: Sir Digby fights his nemesis.\n∀x ((SuperheroMovie(x) ∧ NamedAfter(x, character)) → GoodGuy(character)) ::: If a superhero movie is named after a character, that character is a good guy.\nNamedAfter(surprisingAdventuresOfSirDigbyChickenCaesar, sirDigby) ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n∀x (Win(x) → Lose(fightingPartner(x))) ::: If somebody wins a fight, the person they are fighting loses.\n∀x ((SuperheroMovie(x) ∧ NamedAfter(x, character)) → AppearsIn(character, x)) ::: If a superhero movie is named after a character, that character appears in the movie.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLose(nemesis, sirDigby) ::: Sir Digby’s nemesis loses.\n\"\"\""
    ]
  },
  {
    "id": 88,
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Walden contains knowledge.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nContains(x, y) ::: x contains y.\nReads(x, y) ::: x reads book y.\nGains(x, y) ::: x gains knowledge from y.\nSmarter(x) ::: x becomes smarter.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Books(x) → Contains(x, knowledge)) ::: Books contain tons of knowledge.\n∀x ∀y (Reads(x, y) → Gains(x, knowledge)) ::: When a person reads a book, that person gains knowledge.\n∀x (Gains(x, knowledge) → Smarter(x)) ::: If a person gains knowledge, they become smarter.\nReads(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nContains(walden, knowledge) ::: Walden contains knowledge.\n\"\"\""
    ]
  },
  {
    "id": 89,
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Harry is smarter than before.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nContains(x, y) ::: x contains y.\nReads(x, y) ::: x reads book y.\nGains(x, y) ::: x gains knowledge from y.\nSmarter(x) ::: x is smarter.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Contains(x, y) → Knowledge(y)) ::: Books contain tons of knowledge.\n∀x ∀y (Reads(x, y) → Gains(x, y)) ::: When a person reads a book, that person gains knowledge.\n∀x (Gains(x, y) → Smarter(x)) ::: If a person gains knowledge, they become smarter.\nReads(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSmarter(harry) ::: Harry is smarter than before.\n\"\"\""
    ]
  },
  {
    "id": 90,
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "A person who is smarter has gained knowledge.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nContains(x, y) ::: x contains y.\nReads(x, y) ::: x reads book y.\nGains(x, y) ::: x gains knowledge from y.\nSmarter(x) ::: x is smarter.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Books(x) → Contains(x, knowledge)) ::: Books contain tons of knowledge.\n∀x ∀y (Reads(x, y) → Gains(x, knowledge)) ::: When a person reads a book, that person gains knowledge.\n∀x (Gains(x, knowledge) → Smarter(x)) ::: If a person gains knowledge, they become smarter.\nReads(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Smarter(x) → Gains(x, knowledge)) ::: A person who is smarter has gained knowledge.\n\"\"\""
    ]
  },
  {
    "id": 91,
    "context": [
      "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language generation task.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGenerationTask(x) ::: x is a language generation task.\nUnderstandingTask(x) ::: x is a language understanding task.\nOutputText(x) ::: x is a text sequence.\nNaturalLanguageProcessingTask(x) ::: x is a natural language processing task.\nMachineTranslation(x) ::: x is machine translation.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (NaturalLanguageProcessingTask(x) → (GenerationTask(x) ∨ UnderstandingTask(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n∀x ((OutputText(x) ∧ NaturalLanguageProcessingTask(x)) → GenerationTask(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachineTranslation(machineTranslation) ∧ NaturalLanguageProcessingTask(machineTranslation) ::: Machine translation is a natural language processing task.\nOutputText(machineTranslation) ::: The output of machine translation is a text sequence.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGenerationTask(machineTranslation) ::: Machine translation is a language generation task.\n\"\"\""
    ]
  },
  {
    "id": 92,
    "context": [
      "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language understanding task.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGenerationTask(x) ::: x is a language generation task.\nUnderstandingTask(x) ::: x is a language understanding task.\nOutputIsText(x) ::: x is a text sequence.\nNaturalLanguageProcessingTask(x) ::: x is a natural language processing task.\nMachineTranslation(x) ::: x is machine translation.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (NaturalLanguageProcessingTask(x) → (GenerationTask(x) ∨ UnderstandingTask(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n∀x ((OutputIsText(x) ∧ NaturalLanguageProcessingTask(x)) → GenerationTask(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachineTranslation(machineTranslation) ∧ NaturalLanguageProcessingTask(machineTranslation) ::: Machine translation is a natural language processing task.\nOutputIsText(machineTranslation) ::: The output of machine translation is a text sequence.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUnderstandingTask(machineTranslation) ::: Machine translation is a language understanding task.\n\"\"\""
    ]
  },
  {
    "id": 93,
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nAllowed(x) ::: x is allowed in managed buildings.\nDepositRequired(x) ::: x is required to rent an apartment.\nEqual(x, y) ::: x is equal to y.\nMore(x, y) ::: x is more than y.\nCat(x) ::: x is a cat.\nPet(x) ::: x is a pet.\nManagedBuilding(x) ::: x is a managed building.\nRent(x, y) ::: x is the monthly rent of y.\nMoveInWith(x, y) ::: x moves in with y.\nRentApartment(x) ::: x rents an apartment.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ Allowed(pets, x)) ::: Pets are allowed in some managed buildings.\n∀x (DepositRequired(x) → RentApartment(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (Equal(x, Rent(x)) ∨ More(x, Rent(x))) ::: The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Pet(fluffy) ∧ Cat(tom) ∧ Pet(tom) ::: Fluffy is Tom's cat and cats are pets.\nManagedBuilding(oliveGarden) ∧ Rent(2000, oliveGarden) ::: The Olive Garden is a managed building and the monthly rent at the Olive Garden is $2000.\n(RentApartment(tom, oliveGarden) ↔ (MoveInWith(tom, fluffy) ∧ ¬More(deposit, 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMore(2000, 1500) ::: $2000 is more than $1500.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRentApartment(tom, oliveGarden) ::: Tom will rent an apartment in The Olive Garden.\n\"\"\""
    ]
  },
  {
    "id": 94,
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nAllowed(x) ::: x is allowed to move in.\nManagedBuilding(x) ::: x is a managed building.\nDepositRequired(x) ::: a deposit is required to rent an apartment in x.\nEqual(x, y) ::: x is equal to y.\nMore(x, y) ::: x is more than y.\nCat(x) ::: x is a cat.\nPet(x) ::: x is a pet.\nOwner(x, y) ::: x is the owner of y.\nRent(x, y) ::: the monthly rent at x is y.\nMoveInWith(x, y) ::: x moves in with y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ PetAllowed(x)) ::: Pets are allowed in some managed buildings.\n∀x (ManagedBuilding(x) → DepositRequired(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (DepositRequired(x) → (Equal(x, oneMonthsRent) ∨ More(x, oneMonthsRent))) ::: The security deposit can be either equal to one month's rent or more.\nOwner(tom, fluffy) ∧ Cat(fluffy) ::: Fluffy is Tom's cat.\n∀x (Cat(x) → Pet(x)) ::: Cats are pets.\nManagedBuilding(oliveGarden) ∧ Rent(oliveGarden, 2000) ::: The Olive Garden is a managed building and the monthly rent at the Olive Garden is $2000.\nMoveInWith(tom, fluffy) ∧ ¬More(deposit, 1500) ↔ (Rent(oliveGarden, 2000) ∧ Allowed(tom)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMore(2000, 1500) ::: 2000$ is more than $1500.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMoveInWith(tom, fluffy) ∧ Allowed(tom) ∧ ManagedBuilding(oliveGarden) ::: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\n\"\"\""
    ]
  },
  {
    "id": 95,
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nAllowed(x) ::: x is allowed in managed buildings.\nRent(x) ::: x is required to rent an apartment.\nEqual(x, y) ::: x is equal to y.\nMore(x, y) ::: x is more than y.\nCat(x) ::: x is a cat.\nPet(x) ::: x is a pet.\nManagedBuilding(x) ::: x is a managed building.\nMoveInWith(x, y) ::: x moves in with y.\nMonthlyRent(x, y) ::: x pays y as monthly rent.\nSecurityDeposit(x, y) ::: x is the security deposit required for y.\nRentWithDeposit(x, y) ::: x rents y with a deposit.\n\nFirst-Order-Logic Premises:\n∃x (ManagedBuilding(x) ∧ Allowed(pets, x)) ::: Pets are allowed in some managed buildings.\n∀x (Rent(x) → RentWithDeposit(x, managedBuilding)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (Equal(SecurityDeposit(x, oneMonthRent), More(SecurityDeposit(x, oneMonthRent)))) ::: The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Pet(fluffy) ∧ Cat(tom) ∧ Pet(tom) ∧ MoveInWith(fluffy, tom) ::: Fluffy is Tom's cat and cats are pets.\nManagedBuilding(oliveGarden) ∧ MonthlyRent(oliveGarden, 2000) ::: The Olive Garden is a managed building and the monthly rent at the Olive Garden is $2000.\n(RentWithDeposit(tom, oliveGarden) ↔ (MoveInWith(fluffy, tom) ∧ More(SecurityDeposit(oliveGarden, 1500)))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMore(2000, 1500) ::: 2000$ is more than $1500.\n\nFirst-Order-Logic Question:\nEqual(SecurityDeposit(oliveGarden, 2000), More(SecurityDeposit(oliveGarden, 2000))) ::: The security deposit at the Olive Garden is either $2000 or more."
    ]
  },
  {
    "id": 96,
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "Koalas love to sleep.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nLovedBy(x, y) ::: x is loved by y.\nFavorite(x, y) ::: x is a favorite animal of y.\nFromAustralia(x) ::: x is an animal from Australia.\nQuokka(x) ::: x is a quokka.\nFluffy(x) ::: x is very fluffy.\nSleep(x) ::: x loves to sleep.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (LovedBy(x, tourists) → Favorite(x, max)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (FromAustralia(x) → LovedBy(x, tourists)) ::: All animals from Australia are loved by tourists.\n∀x (Quokka(x) → FromAustralia(x)) ::: All quokka are animals from Australia.\n∀x (Favorite(x, max) → Fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (Favorite(x, max) → Sleep(x)) ::: All of Max's favorite animals love to sleep.\n∀x (Fluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSleep(koala) ::: Koalas love to sleep.\n\"\"\""
    ]
  },
  {
    "id": 97,
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "Koalas love to sleep and are quokka.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nLovedBy(x, y) ::: x is loved by y.\nFavorite(x, y) ::: x is a favorite animal of y.\nFromAustralia(x) ::: x is an animal from Australia.\nQuokka(x) ::: x is a quokka.\nFluffy(x) ::: x is very fluffy.\nLoveToSleep(x) ::: x loves to sleep.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (LovedBy(x, tourists) → Favorite(x, max)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (FromAustralia(x) → LovedBy(x, tourists)) ::: All animals from Australia are loved by tourists.\n∀x (Quokka(x) → FromAustralia(x)) ::: All quokka are animals from Australia.\n∀x (Favorite(x, max) → Fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (Favorite(x, max) → LoveToSleep(x)) ::: All of Max's favorite animals love to sleep.\n∀x (Fluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLoveToSleep(koala) ∧ Quokka(koala) ::: Koalas love to sleep and are quokka.\n\"\"\""
    ]
  },
  {
    "id": 98,
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nLovedBy(x, y) ::: x is loved by y.\nFavorite(x, y) ::: x is a favorite animal of y.\nFromAustralia(x) ::: x is an animal from Australia.\nQuokka(x) ::: x is a quokka.\nFluffy(x) ::: x is very fluffy.\nSleep(x) ::: x loves to sleep.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (LovedBy(x, tourists) → Favorite(x, max)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (FromAustralia(x) → LovedBy(x, tourists)) ::: All animals from Australia are loved by tourists.\n∀x (Quokka(x) → FromAustralia(x)) ::: All quokka are animals from Australia.\n∀x (Favorite(x, max) → Fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (Favorite(x, max) → Sleep(x)) ::: All of Max's favorite animals love to sleep.\n∀x (Fluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Fluffy(koala) ∧ Quokka(koala)) → (Sleep(koala) ∨ Fluffy(koala)) ::: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n\"\"\""
    ]
  },
  {
    "id": 99,
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "Harry is a CEO.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentlemen(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → (Kind(x) ∨ Evil(x))) ::: A man is either kind or evil.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Gentlemen(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentlemen(x)) ::: All CEOs are gentlemen.\nGentlemen(harry) ::: Harry is a gentleman.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCEO(harry) ::: Harry is a CEO.\n\"\"\""
    ]
  },
  {
    "id": 100,
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "Harry is kind or a CEO.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → (Kind(x) ∨ Evil(x))) ::: A man is either kind or evil.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\nGentleman(harry) ::: Harry is a gentleman.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKind(harry) ∨ CEO(harry) ::: Harry is kind or a CEO.\n\"\"\""
    ]
  },
  {
    "id": 101,
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nKind(x) ::: x is kind.\nEvil(x) ::: x is evil.\nUgly(x) ::: x is ugly.\nHandsome(x) ::: x is handsome.\nGentleman(x) ::: x is a gentleman.\nCEO(x) ::: x is a CEO.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → (Kind(x) ∨ Evil(x))) ::: A man is either kind or evil.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\nGentleman(harry) ::: Harry is a gentleman.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((Evil(harry) ∧ Ugly(harry)) ∨ (¬Evil(harry) ∧ ¬Ugly(harry))) → (¬Kind(harry) ∧ ¬CEO(harry)) ::: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\n\"\"\""
    ]
  },
  {
    "id": 102,
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTwins(x) ::: x is a twin.\nTriplets(x) ::: x is a triplet.\nSiblings(x, y) ::: x has a sibling y.\nSameAge(x, y) ::: x and y are the same age.\nComplain(x) ::: x complains often about annoying siblings.\nDevelopsBonds(x, y) ::: x develops strong bonds with y.\nLiveAtHome(x) ::: x lives at home regularly.\nHangOutWith(x, y) ::: x spends a lot of time hanging out with y.\nPlayWith(x, y) ::: x plays with y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ((Twins(x) ∨ Triplets(x)) → (HangOutWith(x, Siblings(x)) ∧ PlayWith(x, Siblings(x)))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x ((∃y (Siblings(x, y) ∧ SameAge(x, y))) → (Twins(x) ∨ Triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n∀x (Complain(x) → ∃y (Siblings(x, y) ∧ SameAge(x, y))) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n∀x (¬LiveAtHome(x) → ¬DevelopsBonds(x, FamilyMembers(x))) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n∀x ((HangOutWith(x, Siblings(x)) ∧ PlayWith(x, Siblings(x))) → ¬LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n(Twins(luke) ∨ Triplets(luke)) ∧ DevelopsBonds(luke, FamilyMembers(luke)) ⊕ ¬(Twins(luke) ∨ Triplets(luke) ∨ DevelopsBonds(luke, FamilyMembers(luke))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHangOutWith(luke, Siblings(luke)) ∧ PlayWith(luke, Siblings(luke)) ::: Luke spends a lot of time hanging out and playing with his siblings.\n\"\"\""
    ]
  },
  {
    "id": 103,
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke complains often about annoying siblings.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTwins(x) ::: x is a twin.\nTriplets(x) ::: x is a triplet.\nSiblings(x, y) ::: x has a sibling y.\nSameAge(x, y) ::: x and y are the same age.\nComplain(x) ::: x complains often about annoying siblings.\nLiveAtHome(x) ::: x lives at home regularly.\nDevelopsBonds(x, y) ::: x develops strong bonds with y.\nHangOutWith(x, y) ::: x spends a lot of time hanging out with y.\nPlayWith(x, y) ::: x plays with y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ((Twins(x) ∨ Triplets(x)) → (HangOutWith(x, Siblings(x)) ∧ PlayWith(x, Siblings(x)))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x ((SameAge(Siblings(x), x)) → (Twins(x) ∨ Triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n∀x (Complain(x) → SameAge(Siblings(x), x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n∀x (¬LiveAtHome(x) → ¬DevelopsBonds(x, FamilyMembers(x))) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n∀x ((HangOutWith(x, Siblings(x)) ∧ PlayWith(x, Siblings(x))) → ¬LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n(Twins(luke) ∨ Triplets(luke)) ∧ DevelopsBonds(luke, FamilyMembers(luke)) ⊕ ¬(Twins(luke) ∨ Triplets(luke) ∨ DevelopsBonds(luke, FamilyMembers(luke))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComplain(luke) ::: Luke complains often about annoying siblings.\n\"\"\""
    ]
  },
  {
    "id": 104,
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nTwins(x) ::: x is a twin.\nTriplets(x) ::: x is a triplet.\nSiblings(x, y) ::: x has a sibling y.\nSameAge(x, y) ::: x and y are the same age.\nHangOutWith(x, y) ::: x spends a lot of time hanging out with y.\nPlayWith(x, y) ::: x spends a lot of time playing with y.\nComplain(x) ::: x complains often about annoying siblings.\nDevelopBonds(x, y) ::: x develops strong bonds with y.\nLiveAtHome(x) ::: x lives at home regularly.\n\nFirst-Order-Logic Premises:\n∀x ((Twins(x) ∨ Triplets(x)) → (HangOutWith(x, Siblings(x)) ∧ PlayWith(x, Siblings(x))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x ((∃y (SameAge(x, y) ∧ Siblings(x, y))) → (Twins(x) ∨ Triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n∀x (Complain(x) → ∃y (SameAge(x, y) ∧ Siblings(x, y))) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n∀x (¬LiveAtHome(x) → ¬∃y (DevelopBonds(x, y))) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n∀x ((HangOutWith(x, Siblings(x)) ∧ PlayWith(x, Siblings(x))) → ¬LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n(Twins(luke) ∨ Triplets(luke)) ∧ DevelopBonds(luke) ⊕ ¬(Twins(luke) ∨ Triplets(luke) ∨ DevelopBonds(luke)) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n\nFirst-Order-Logic Question:\n¬(Twins(luke) ∨ Triplets(luke) ∨ Complain(luke)) ::: Luke is neither a twin nor triplet nor complains often about annoying siblings."
    ]
  },
  {
    "id": 105,
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "Tom can apply for financial aid from ETS to take the GRE test.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nCost(x, y) ::: It costs x to take the GRE test in currency y.\nProvide(x, y, z) ::: x provides financial aid to y if z.\nProve(x, y) ::: x proves economic hardship to y.\nEconomicHardship(x) ::: x is experiencing economic hardship.\nDifficulty(x) ::: x is experiencing difficulty.\nMoney(x) ::: x has too little money.\nResource(x) ::: x has too few resources.\nLiveIn(x, y) ::: x lives in y.\nSingleParentFamily(x) ::: x is in a single-parent family.\nOutOfWork(x, y) ::: x has been out of work for y.\n\nFirst-Order-Logic Premises:\nCost(205, USD) ::: It costs US $205 to take the GRE test.\n∀x (Prove(x, y) → Provide(ETS, x, y)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\n∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ (Money(x) ∨ Resource(x)))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nLiveIn(tom, SingleParentFamily) ::: Tom lives in a single-parent family.\nOutOfWork(dad, year1) ::: His dad has been out of work for more than a year.\n\nFirst-Order-Logic Question:\n∃x (LiveIn(tom, SingleParentFamily) ∧ OutOfWork(dad, year1) ∧ Prove(tom, dad) → Provide(ETS, tom, GRE)) ::: Tom can apply for financial aid from ETS to take the GRE test."
    ]
  },
  {
    "id": 106,
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "It cost below US $300 to take the GRE test.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nCost(x, y) ::: It costs x to take the GRE test.\nProvideFinancialAid(x) ::: ETS provides financial aid to x.\nProve(x, y) ::: x proves y.\nEconomicHardship(x) ::: x is experiencing economic hardship.\nDifficulty(x) ::: x is experiencing difficulty.\nMoney(x) ::: x has too little money.\nResource(x) ::: x has too few resources.\nLiveIn(x, y) ::: x lives in y.\nSingleParentFamily(x) ::: x is in a single-parent family.\nOutOfWork(x, y) ::: x has been out of work for y.\n\nFirst-Order-Logic Premises:\nCost(205, GREtest) ::: It costs US $205 to take the GRE test.\n∀x (Prove(x, EconomicHardship) → ProvideFinancialAid(x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\n∀x (EconomicHardship(x) ↔ (Difficulty(x) ∧ (Money(x) ∨ Resource(x)))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nLiveIn(tom, SingleParentFamily) ::: Tom lives in a single-parent family.\nOutOfWork(dad, year1) ::: Tom's dad has been out of work for more than a year.\n\nFirst-Order-Logic Question:\n∃x (Cost(x, GREtest) ∧ x < 300) ::: There exists a cost x such that x is less than US $300 to take the GRE test."
    ]
  },
  {
    "id": 107,
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "There is no financial aid available for the GRE test.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nCost(x, y) ::: It costs x to take the GRE test.\nProvideFinancialAid(x) ::: ETS provides financial aid to x.\nProve(x, y) ::: x proves y.\nEconomicHardship(x) ::: x is experiencing economic hardship.\nDifficulty(x) ::: x is experiencing difficulty.\nLackOfMoney(x) ::: x has too little money.\nLackOfResources(x) ::: x has too few resources.\nLiveIn(x, y) ::: x lives in y.\nSingleParentFamily(x) ::: x is in a single-parent family.\nOutOfWork(x, y) ::: x has been out of work for y.\n\nFirst-Order-Logic Premises:\nCost(205, GREtest) ::: It costs US $205 to take the GRE test.\n∀x (ProvideFinancialAid(x) → ∃y (Prove(x, EconomicHardship) ∧ (Difficulty(EconomicHardship) ∧ (LackOfMoney(EconomicHardship) ∨ LackOfResources(EconomicHardship)))) ::: ETS provides financial aid to those GRE applicants who prove economic hardship, where economic hardship refers to difficulty caused by having too little money or too few resources.\nSingleParentFamily(tom) ∧ OutOfWork(dad, moreThanAYear) ::: Tom lives in a single-parent family and his dad has been out of work for more than a year.\n\nFirst-Order-Logic Question:\n¬∃x (ProvideFinancialAid(x)) ::: There is no financial aid available for the GRE test."
    ]
  },
  {
    "id": 108,
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpaces(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOut(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x is a household with a high net income.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (SpillFood(x) → (¬TidySpaces(x) ∧ ¬EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTidySpaces(peter) ∧ EnjoyCleaning(peter) ::: Peter tidies his space consistently and enjoys the process of cleaning.\n\"\"\""
    ]
  },
  {
    "id": 109,
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpaces(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOut(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x belongs to a household with a high net income.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (SpillFood(x) → (¬TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGoOut(peter) ⊕ HighIncomeHousehold(peter) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.\n\"\"\""
    ]
  },
  {
    "id": 110,
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSpillFood(x) ::: x spills a lot of food on their clothing.\nTidySpaces(x) ::: x tidies their spaces consistently.\nEnjoyCleaning(x) ::: x enjoys the process of cleaning.\nFoodie(x) ::: x is a foodie.\nGoOut(x) ::: x goes out frequently to find new food restaurants to try.\nOnlyChild(x) ::: x grew up as an only child with no siblings.\nBusyParents(x) ::: x has parents who are very busy with their regular jobs.\nHighIncomeHousehold(x) ::: x belongs to a household with a high net income.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nSpillFood(x) → (¬TidySpaces(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x)) → SpillFood(x) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nOnlyChild(x) → (TidySpaces(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\nBusyParents(x) → OnlyChild(x) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\nHighIncomeHousehold(x) → BusyParents(x) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(HighIncomeHousehold(peter) ∧ SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(HighIncomeHousehold(peter) ∨ SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(GoOut(peter) ∧ HighIncomeHousehold(peter)) ⊕ ¬(GoOut(peter) ∧ HighIncomeHousehold(peter)) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is neither a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.\n\"\"\""
    ]
  },
  {
    "id": 111,
    "context": [
      "All fir trees are evergreens.",
      "Some objects of worship are fir trees."
    ],
    "question": "Some evergreens are not objects of worship.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nFirTree(x) ::: x is a fir tree.\nEvergreen(x) ::: x is an evergreen.\nObjectOfWorship(x) ::: x is an object of worship.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (FirTree(x) → Evergreen(x)) ::: All fir trees are evergreens.\n∃x (ObjectOfWorship(x) ∧ FirTree(x)) ::: Some objects of worship are fir trees.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x)) ::: Some evergreens are not objects of worship.\n\"\"\""
    ]
  },
  {
    "id": 112,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMountainRange(x) ::: x is a mountain range.\nIn(x, y) ::: x is located in y.\nVisited(x, y) ::: x visited y.\nDonated(x) ::: x was donated.\nHasMine(x) ::: x has a mine.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nMountainRange(picuris) ∧ (In(picuris, newMexico) ∨ In(picuris, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juanDeOnate, picuris) ::: Juan de Onate visited the Picuris Mountains.\nIn(hardingPegmatiteMine, picuris) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x (MountainRange(x) ∧ In(x, texas) → ¬(∃y (HasMine(y) ∧ In(y, x) ∧ Donated(y)))) ::: There are no mountain ranges in Texas that have mines which have been donated.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (MountainRange(x) ∧ In(x, newMexico) ∧ Visited(juanDeOnate, x)) ::: Juan de Onate visited a mountain range in New Mexico.\n\"\"\""
    ]
  },
  {
    "id": 113,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMountainRange(x) ::: x is a mountain range.\nIn(x, y) ::: x is located in y.\nVisited(x, y) ::: x visited y.\nDonated(x) ::: x was donated.\nHasMine(x) ::: x has a mine.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nMountainRange(picuris) ∧ (In(picuris, newMexico) ∨ In(picuris, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juanDeOnate, picuris) ::: Juan de Onate visited the Picuris Mountains.\nIn(hardingPegmatiteMine, picuris) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x (MountainRange(x) ∧ In(x, texas) → ¬(HasMine(x) ∧ Donated(x))) ::: There are no mountain ranges in Texas that have mines which have been donated.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (MountainRange(x) ∧ In(x, texas) ∧ Visited(juanDeOnate, x)) ::: Juan de Onate visited a mountain range in Texas.\n\"\"\""
    ]
  },
  {
    "id": 114,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMountainRange(x) ::: x is a mountain range.\nIn(x, y) ::: x is located in y.\nVisited(x, y) ::: x visited y.\nDonated(x) ::: x was donated.\nHasMine(x) ::: x has a mine.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (MountainRange(x) → (In(picurisMountains, x) ∨ In(texas, x))) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juanDeOnate, picurisMountains) ::: Juan de Onate visited the Picuris Mountains.\nIn(hardingPegmatiteMine, picurisMountains) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n¬∃x (MountainRange(x) ∧ In(texas, x) ∧ HasMine(x) ∧ Donated(x)) ::: There are no mountain ranges in Texas that have mines which have been donated.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬In(hardingPegmatiteMine, newMexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico.\n\"\"\""
    ]
  },
  {
    "id": 115,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTaller(x, y) ::: x is taller than y.\nMan(x) ::: x is a man.\nBlock(x, y) ::: x can block y's shooting.\nClassmate(x, y) ::: x is a classmate of y.\nJump(x) ::: x can jump.\nShooter(x) ::: x is a shooter.\nGreatShooter(x) ::: x is a great shooter.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nMan(michael) ∧ ∀z (Classmate(z, michael) → Taller(michael, z)) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z.\nMan(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.\n∀x (¬Jump(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n¬Block(michael, windy) ::: Michael cannot block Windy's shooting.\n∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Man(x) ∧ Classmate(x, michael) ∧ Taller(x, peter)) ::: There exists a man who is a classmate of Michael and taller than Peter."
    ]
  },
  {
    "id": 116,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Windy is a great shooter.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTaller(x, y) ::: x is taller than y.\nMan(x) ::: x is a man.\nBlock(x, y) ::: x can block y's shooting.\nClassmate(x, y) ::: x is a classmate of y.\nJump(x) ::: x can jump.\nShooter(x) ::: x is a shooter.\nGreatShooter(x) ::: x is a great shooter.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\n∀z (Classmate(z, michael) → Taller(michael, z)) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z.\nMan(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.\n∀x (Shooter(x) → (¬Jump(x) → Block(michael, x))) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n¬Block(michael, windy) ::: Michael cannot block Windy's shooting.\n∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGreatShooter(windy) ::: Windy is a great shooter.\n\"\"\""
    ]
  },
  {
    "id": 117,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter can block Windy's shooting.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMan(x) ::: x is a man.\nTaller(x, y) ::: x is taller than y.\nBlock(x, y) ::: x can block y's shooting.\nClassmate(x, y) ::: x is a classmate of y.\nJump(x) ::: x can jump when shooting.\nShooter(x) ::: x is a shooter.\nGreatShooter(x) ::: x is a great shooter.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nMan(michael) ∧ ∀z (Classmate(z, michael) → Taller(michael, z)) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z.\nMan(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.\n∀x (¬Jump(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBlock(peter, windy) ::: Peter can block Windy's shooting.\n\"\"\""
    ]
  },
  {
    "id": 118,
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "Barutin is named after all islands in Antarctica.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNamedAfter(x, y) ::: x is named after y.\nLocatedIn(x, y) ::: x is located in y.\nIsland(x) ::: x is an island.\nAntarctica(x) ::: x is part of Antarctica.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nNamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nLocatedIn(barutinCove, southwestCoastOfSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\nIsland(snowIsland) ∧ Island(greenwichIsland) ∧ Island(deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\n∀x (Island(x) → Antarctica(x)) ::: The South Shetland Islands are considered part of Antarctica.\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Island(x) → NamedAfter(barutin, x)) ::: Barutin is named after all islands in Antarctica.\n\"\"\""
    ]
  },
  {
    "id": 119,
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nNamedAfter(x, y) ::: x is named after y.\nLocatedIn(x, y) ::: x is located in y.\nCove(x) ::: x is a cove.\nSettlement(x) ::: x is a settlement.\nIsland(x) ::: x is an island.\nAntarctica(x) ::: x is Antarctica.\nBulgaria(x) ::: x is Bulgaria.\n\nFirst-Order-Logic Premises:\nNamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nLocatedIn(barutinCove, snowIsland) ∧ LocatedIn(snowIsland, southwestCoast) ::: Barutin Cove is on the southwest coast of Snow Island.\nIsland(snowIsland) ∧ Island(greenwichIsland) ∧ Island(deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nIsland(snowIsland) ∧ Island(greenwichIsland) ∧ Island(deceptionIsland) ∧ LocatedIn(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\n\nFirst-Order-Logic Question:\n∃x (Cove(x) ∧ LocatedIn(x, antarctica) ∧ ∃y (Settlement(y) ∧ LocatedIn(y, bulgaria) ∧ NamedAfter(x, y))) ::: There is at least one cove in Antarctica named after a place in Bulgaria."
    ]
  },
  {
    "id": 120,
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "Barutin is not located in Antarctica.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNamedAfter(x, y) ::: x is named after y.\nLocatedIn(x, y) ::: x is located in y.\nIsland(x) ::: x is an island.\nPartOf(x, y) ::: x is considered part of y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nNamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nLocatedIn(barutinCove, southwestCoastOfSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\nIsland(snowIsland) ∧ Island(greenwichIsland) ∧ Island(deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LocatedIn(barutin, antarctica) ::: Barutin is not located in Antarctica.\n\"\"\""
    ]
  },
  {
    "id": 121,
    "context": [
      "Some affection is love.",
      "Some love is positive."
    ],
    "question": "Some affection is positive.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nAffection(x) ::: x is affection.\nLove(x) ::: x is love.\nPositive(x) ::: x is positive.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (Affection(x) ∧ Love(x)) ::: Some affection is love.\n∃x (Love(x) ∧ Positive(x)) ::: Some love is positive.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Affection(x) ∧ Positive(x)) ::: Some affection is positive.\n\"\"\""
    ]
  },
  {
    "id": 122,
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "Greyhound is an airline.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTransport(x) ::: x can transport multiple passengers.\nEmpty(x) ::: x is empty.\nAirline(x) ::: x is an airline.\nPlane(x) ::: x is a plane.\nBoeing707(x) ::: x is a Boeing 707.\nGreyhound(x) ::: x is Greyhound.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬Airline(greyhound) ∨ ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAirline(greyhound) ::: Greyhound is an airline.\n\"\"\""
    ]
  },
  {
    "id": 123,
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "A Greyhound is a Boeing 707.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTransport(x) ::: x can transport multiple passengers.\nEmpty(x) ::: x is empty.\nAirline(x) ::: x is an airline.\nPlane(x) ::: x is a plane.\nBoeing707(x) ::: x is a Boeing 707.\nGreyhound(x) ::: x is a Greyhound.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬Airline(greyhound) ∨ ¬Greyhound(greyhound) ::: Greyhound is not an airline or there are no Greyhound planes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBoeing707(greyhound) ::: A Greyhound is a Boeing 707."
    ]
  },
  {
    "id": 124,
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "A Greyhound is not a Boeing 707.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nTransport(x) ::: x can transport multiple passengers.\nEmpty(x) ::: x is empty.\nAirline(x) ::: x is an airline.\nPlane(x) ::: x is a plane.\nBoeing707(x) ::: x is a Boeing 707.\nGreyhound(x) ::: x is a Greyhound.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬Airline(greyhound) ∨ ¬∃y (Greyhound(y) ∧ Plane(y)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Greyhound(greyhound) ∧ Boeing707(greyhound)) ::: A Greyhound is not a Boeing 707."
    ]
  },
  {
    "id": 125,
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock is a monkey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nMonkey(x) ::: x is a monkey.\nBird(x) ::: x is a bird.\nFly(x) ::: x can fly.\nBreathe(x) ::: x breathes.\nHasWings(x) ::: x has wings.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ↔ (Monkey(x) ∨ Bird(x))) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.\n¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMonkey(rock) ::: Rock is a monkey.\n\"\"\""
    ]
  },
  {
    "id": 126,
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock has wings.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nMonkey(x) ::: x is a monkey.\nBird(x) ::: x is a bird.\nFly(x) ::: x can fly.\nBreathe(x) ::: x breathes.\nHasWings(x) ::: x has wings.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ↔ (Monkey(x) ∨ Bird(x))) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.\n¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasWings(rock) ::: Rock has wings.\n\"\"\""
    ]
  },
  {
    "id": 127,
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock does not have wings.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nMammal(x) ::: x is a mammal.\nAnimal(x) ::: x is an animal.\nMonkey(x) ::: x is a monkey.\nBird(x) ::: x is a bird.\nFly(x) ::: x can fly.\nBreathe(x) ::: x breathes.\nHasWings(x) ::: x has wings.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ↔ (Monkey(x) ∨ Bird(x))) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.\n¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬HasWings(rock) ::: Rock does not have wings.\n\"\"\""
    ]
  },
  {
    "id": 128,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has a wedding that is well-attended.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHasWedding(x) ::: x has a wedding.\nHasChild(x) ::: x has at least one child.\nTravelToParis(x) ::: x travels to Paris for their honeymoon.\nInJuly(x) ::: x occurs in July.\nWellAttended(x) ::: x is well-attended.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (HasWedding(x) → HasChild(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (TravelToParis(x) → HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (InJuly(x) ∧ HasWedding(x) → TravelToParis(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (InJuly(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.\n(HasChild(john) → ¬(TravelToParis(john) ∧ HasWedding(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(WellAttended(john) → (InJuly(john) ∨ (¬InJuly(john) ∧ TravelToParis(john)))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWellAttended(john) ::: John has a wedding that is well-attended.\n\"\"\""
    ]
  },
  {
    "id": 129,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John does not have a wedding that is well-attended.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHasWedding(x) ::: x has a wedding.\nHasChild(x) ::: x has at least one child.\nTravelToParis(x) ::: x travels to Paris for their honeymoon.\nInJuly(x) ::: x occurs in July.\nWellAttended(x) ::: x is well-attended.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (HasWedding(x) → HasChild(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (TravelToParis(x) → HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (InJuly(x) → (HasWedding(x) ∧ TravelToParis(x))) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (InJuly(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.\n(HasChild(john) → ¬(TravelToParis(john) ∧ HasWedding(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n((WellAttended(john) ∧ HasWedding(john)) → (InJuly(john) ∨ (¬InJuly(john) ∧ TravelToParis(john)))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WellAttended(john) ::: John does not have a wedding that is well-attended.\n\"\"\""
    ]
  },
  {
    "id": 130,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has at least one child.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHasWedding(x) ::: x has a wedding.\nHasChild(x) ::: x has at least one child.\nTravelToParis(x) ::: x travels to Paris for their honeymoon.\nInJuly(x) ::: x occurs in July.\nWellAttended(x) ::: x is well-attended.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (HasWedding(x) → HasChild(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (TravelToParis(x) → HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (InJuly(x) → (HasWedding(x) ∧ TravelToParis(x))) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (InJuly(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.\n(HasChild(john) → ¬(TravelToParis(john) ∧ HasWedding(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n((HasWedding(john) ∧ WellAttended(john)) → (InJuly(john) ∨ (¬InJuly(john) ∧ TravelToParis(john)))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasChild(john) ::: John has at least one child.\n\"\"\""
    ]
  },
  {
    "id": 131,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHasWedding(x) ::: x has a wedding.\nHasChild(x) ::: x has at least one child.\nTravelToParis(x) ::: x travels to Paris for their honeymoon.\nBelongsTo(x, y) ::: x belongs to y.\nWellAttended(x) ::: x is well-attended.\nOccursIn(x, y) ::: x occurs in month y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (HasWedding(x) → HasChild(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (TravelToParis(x) → HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (OccursIn(x, July) → (HasWedding(x) ∧ BelongsTo(x, TravelToParis(x)))) ::: All events that occur in July are weddings of people who travel to Paris for their honeymoon.\n∃x (HasWedding(x) ∧ OccursIn(x, July) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.\n(HasChild(john) → ¬(TravelToParis(john) ∧ HasWedding(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n((WellAttended(john) ∧ HasWedding(john)) → (OccursIn(john, July) ∨ TravelToParis(john))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(WellAttended(john) ∨ TravelToParis(john)) ::: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\n\"\"\""
    ]
  },
  {
    "id": 132,
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypus are mammals with no teeth.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nMammal(x) ::: x is a mammal.\nTeeth(x) ::: x has teeth.\nPlatypus(x) ::: x is a platypus.\nHuman(x) ::: x is a human.\n\nFirst-Order-Logic Premises:\n∃x (Mammal(x) ∧ Teeth(x)) ::: Some mammals have teeth.\n¬∃x (Platypus(x) ∧ Teeth(x)) ::: Platypus have no teeth.\n∀x (Platypus(x) → Mammal(x)) ::: Platypus are mammals.\n∃x (Human(x) ∧ Teeth(x)) ::: Humans have teeth.\n\nFirst-Order-Logic Question:\nPlatypus(platypus) ∧ Mammal(platypus) ∧ ¬Teeth(platypus) ::: Platypus are mammals with no teeth."
    ]
  },
  {
    "id": 133,
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypus are reptiles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHaveTeeth(x) ::: x has teeth.\nMammal(x) ::: x is a mammal.\nPlatypus(x) ::: x is a platypus.\nHuman(x) ::: x is a human.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (Mammal(x) ∧ HaveTeeth(x)) ::: Some mammals have teeth.\n¬∃x (Platypus(x) ∧ HaveTeeth(x)) ::: Platypus have no teeth.\n∀x (Platypus(x) → Mammal(x)) ::: Platypus are mammals.\n∀x (Human(x) → HaveTeeth(x)) ::: Humans have teeth.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∀x (Platypus(x) → ¬Mammal(x)) ::: Platypus are reptiles.\n\"\"\""
    ]
  },
  {
    "id": 134,
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Humans are mammals.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHaveTeeth(x) ::: x has teeth.\nMammal(x) ::: x is a mammal.\nPlatypus(x) ::: x is a platypus.\nHuman(x) ::: x is a human.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (Mammal(x) ∧ HaveTeeth(x)) ::: Some mammals have teeth.\n¬∃x (Platypus(x) ∧ HaveTeeth(x)) ::: Platypus have no teeth.\nPlatypus(platypus) ∧ Mammal(platypus) ::: Platypus are mammals.\nHuman(human) ∧ HaveTeeth(human) ::: Humans have teeth.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMammal(human) ::: Humans are mammals.\n\"\"\""
    ]
  },
  {
    "id": 135,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space sucks.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSuck(x) ::: x sucks.\nVacuum(x) ::: x is a vacuum.\nVampire(x) ::: x is a vampire.\nSpace(x) ::: x is space.\nDuster(x) ::: x is a duster.\nHouseholdAppliance(x) ::: x is a household appliance.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nSuck(plungers) ::: Plungers suck.\nSuck(vacuums) ::: Vacuums suck.\nSuck(vampires) ::: Vampires suck.\nVacuum(space) ::: Space is a vacuum.\nDuster(duster) ∧ HouseholdAppliance(duster) ∧ ¬Suck(duster) ::: A duster is a household appliance that doesn't suck.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Suck(space) ::: Space does not suck.\n\"\"\""
    ]
  },
  {
    "id": 136,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space is a vampire.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSuck(x) ::: x sucks.\nVacuum(x) ::: x is a vacuum.\nVampire(x) ::: x is a vampire.\nSpace(x) ::: x is space.\nDuster(x) ::: x is a duster.\nHouseholdAppliance(x) ::: x is a household appliance.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nSuck(plungers) ::: Plungers suck.\nSuck(vacuums) ::: Vacuums suck.\nSuck(vampires) ::: Vampires suck.\nVacuum(space) ::: Space is a vacuum.\nDuster(duster) ∧ HouseholdAppliance(duster) ∧ ¬Suck(duster) ::: A duster is a household appliance that doesn't suck.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Vampire(space) ::: Space is not a vampire.\n\"\"\""
    ]
  },
  {
    "id": 137,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "If something is a household appliance, it sucks.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSuck(x) ::: x sucks.\nHouseholdAppliance(x) ::: x is a household appliance.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nSuck(plungers) ::: Plungers suck.\nSuck(vacuums) ::: Vacuums suck.\nSuck(vampires) ::: Vampires suck.\nVacuum(space) ::: Space is a vacuum.\nHouseholdAppliance(duster) ∧ ¬Suck(duster) ::: A duster is a household appliance that doesn't suck.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (HouseholdAppliance(x) → Suck(x)) ::: If something is a household appliance, it sucks.\n\"\"\""
    ]
  },
  {
    "id": 138,
    "context": [
      "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
      "Unsupervised learning doesn't require labelled data.",
      "The state-of-the-art text summarization model is trained with machine learning algorithms.",
      "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
      "The Machine Learning algorithm for training text summarization model requires labelled data."
    ],
    "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nSupervisedLearning(x) ::: x is a supervised learning algorithm.\nUnsupervisedLearning(x) ::: x is an unsupervised learning algorithm.\nReinforcementLearning(x) ::: x is a reinforcement learning algorithm.\nMachineLearning(x) ::: x is a machine learning algorithm.\nRequiresLabelledData(x) ::: x requires labelled data.\nTrainedWith(x, y) ::: x is trained with y.\nStateOfTheArtTextSummarizationModel(x) ::: x is the state-of-the-art text summarization model.\n\nFirst-Order-Logic Premises:\n∀x (MachineLearning(x) → (SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x))) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n∀x (UnsupervisedLearning(x) → ¬RequiresLabelledData(x)) ::: Unsupervised learning doesn't require labelled data.\nTrainedWith(StateOfTheArtTextSummarizationModel, MachineLearningAlgorithms) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n¬(∀x (ReinforcementLearning(x) → TrainedWith(StateOfTheArtTextSummarizationModel, x))) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nTrainedWith(StateOfTheArtTextSummarizationModel, SupervisedLearningAlgorithms) ::: Supervised learning is used to train the state-of-the-art text summarization model."
    ]
  },
  {
    "id": 139,
    "context": [
      "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
      "Unsupervised learning doesn't require labelled data.",
      "The state-of-the-art text summarization model is trained with machine learning algorithms.",
      "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
      "The Machine Learning algorithm for training text summarization model requires labelled data."
    ],
    "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nSupervisedLearning(x) ::: x is a supervised learning algorithm.\nUnsupervisedLearning(x) ::: x is an unsupervised learning algorithm.\nReinforcementLearning(x) ::: x is a reinforcement learning algorithm.\nRequiresLabelledData(x) ::: x requires labelled data.\nTrainedWith(x, y) ::: x is trained with y.\nStateOfTheArtTextSummarizationModel(x) ::: x is the state-of-the-art text summarization model.\n\nFirst-Order-Logic Premises:\n∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x))) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n∀x (UnsupervisedLearning(x) → ¬RequiresLabelledData(x)) ::: Unsupervised learning doesn't require labelled data.\nTrainedWith(stateOfTheArtTextSummarizationModel, MachineLearningAlgorithm) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n¬TrainedWith(stateOfTheArtTextSummarizationModel, ReinforcementLearning) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nRequiresLabelledData(MachineLearningAlgorithm) ::: The Machine Learning algorithm for training text summarization model requires labelled data.\n\nFirst-Order-Logic Question:\n¬TrainedWith(stateOfTheArtTextSummarizationModel, UnsupervisedLearning) ::: Unsupervised learning is used to train the state-of-the-art text summarization model."
    ]
  },
  {
    "id": 140,
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is loved by children.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nFunny(x) ::: x is a funny cartoon character.\nPopular(x) ::: x is a popular cartoon character.\nUgly(x) ::: x is an ugly cartoon character.\nLovedByChildren(x) ::: x is loved by children.\nFromTheSimpsons(x) ::: x is from The Simpsons.\nYellow(x) ::: x is yellow.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nFunny(x) → Popular(x) ::: If a cartoon character is funny, then it is popular.\nUgly(x) → ¬Popular(x) ::: If a cartoon character is ugly, then it is not popular.\nLovedByChildren(x) → Funny(x) ::: If a cartoon character is loved by children, then it is funny.\nFromTheSimpsons(x) → LovedByChildren(x) ::: If a cartoon character is from The Simpsons, then it is loved by children.\nYellow(x) → FromTheSimpsons(x) ::: If a cartoon character is yellow, then it is from The Simpsons.\nFromTheSimpsons(ben) ∨ Funny(ben) ::: Ben is either from The Simpsons or funny.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLovedByChildren(ben) ::: Ben is loved by children.\n\"\"\""
    ]
  },
  {
    "id": 141,
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is ugly or yellow.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nFunny(x) ::: x is funny.\nPopular(x) ::: x is popular.\nUgly(x) ::: x is ugly.\nLovedByChildren(x) ::: x is loved by children.\nFromTheSimpsons(x) ::: x is from The Simpsons.\nYellow(x) ::: x is yellow.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nFunny(x) → Popular(x) ::: If a cartoon character is funny, then it is popular.\nUgly(x) → ¬Popular(x) ::: If a cartoon character is ugly, then it is not popular.\nLovedByChildren(x) → Funny(x) ::: If a cartoon character is loved by children, then it is funny.\nFromTheSimpsons(x) → LovedByChildren(x) ::: If a cartoon character is from The Simpsons, then it is loved by children.\nYellow(x) → FromTheSimpsons(x) ::: If a cartoon character is yellow, then it is from The Simpsons.\nFromTheSimpsons(ben) ∨ Funny(ben) ::: Ben is either from The Simpsons or funny.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUgly(ben) ∨ Yellow(ben) ::: Ben is ugly or yellow.\n\"\"\""
    ]
  },
  {
    "id": 142,
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nFunny(x) ::: x is a funny cartoon character.\nPopular(x) ::: x is a popular cartoon character.\nUgly(x) ::: x is an ugly cartoon character.\nLovedByChildren(x) ::: x is loved by children.\nFromTheSimpsons(x) ::: x is from The Simpsons.\nYellow(x) ::: x is yellow.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nFunny(x) → Popular(x) ::: If a cartoon character is funny, then it is popular.\nUgly(x) → ¬Popular(x) ::: If a cartoon character is ugly, then it is not popular.\nLovedByChildren(x) → Funny(x) ::: If a cartoon character is loved by children, then it is funny.\nFromTheSimpsons(x) → LovedByChildren(x) ::: If a cartoon character is from The Simpsons, then it is loved by children.\nYellow(x) → FromTheSimpsons(x) ::: If a cartoon character is yellow, then it is from The Simpsons.\nFromTheSimpsons(ben) ∨ Funny(ben) ::: Ben is either from The Simpsons or funny.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ∨ Ugly(ben)) ::: Ben is either yellow and ugly or neither yellow nor ugly.\n\"\"\""
    ]
  },
  {
    "id": 143,
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
      "[BG] Heck cattle are animals.",
      "[BG] Aurochs are animals.",
      "Some animals to be bred-back resemble animals that are extinct."
    ],
    "question": "Some Heck cattle are artificially selected.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBreedingBack(x) ::: x is a form of artificial selection by the deliberate selective breeding of domestic animals.\nSelectiveBreeding(x, y) ::: x is the deliberate selective breeding of y.\nDomesticAnimal(x) ::: x is a domestic animal.\nHeckCattle(x) ::: x is Heck cattle.\nResemble(x, y) ::: x resembles y.\nAurochs(x) ::: x is an aurochs.\nAnimal(x) ::: x is an animal.\nExtinct(x) ::: x is extinct.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (BreedingBack(x) → ∃y (SelectiveBreeding(x, y) ∧ DomesticAnimal(y))) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nSelectiveBreeding(heckCattle, aurochs) ∧ Resemble(heckCattle, aurochs) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAnimal(heckCattle) ::: Heck cattle are animals.\nAnimal(aurochs) ::: Aurochs are animals.\n∃x (Animal(x) ∧ BreedingBack(x) ∧ ∃y (Resemble(x, y) ∧ Extinct(y))) ::: Some animals to be bred-back resemble animals that are extinct.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (HeckCattle(x) ∧ BreedingBack(x)) ::: Some Heck cattle are artificially selected.\n\"\"\""
    ]
  },
  {
    "id": 144,
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
      "[BG] Heck cattle are animals.",
      "[BG] Aurochs are animals.",
      "Some animals to be bred-back resemble animals that are extinct."
    ],
    "question": "Aurochs are extinct.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBreedingBack(x) ::: x is a form of artificial selection by the deliberate selective breeding of domestic animals.\nSelectiveBreeding(x, y) ::: x is the deliberate selective breeding of y.\nDomesticAnimal(x) ::: x is a domestic animal.\nHeckCattle(x) ::: x is Heck cattle.\nResemble(x, y) ::: x resembles y.\nAurochs(x) ::: x is an aurochs.\nAnimal(x) ::: x is an animal.\nExtinct(x) ::: x is extinct.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (BreedingBack(x) → SelectiveBreeding(x, DomesticAnimal)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nSelectiveBreeding(HeckCattle, HeckCattle) ∧ Resemble(HeckCattle, Aurochs) ∧ Publish(HeckCattle, year1920s) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAnimal(HeckCattle) ∧ Animal(Aurochs) ::: Heck cattle are animals. Aurochs are animals.\n∃x (Animal(x) ∧ Resemble(x, ExtinctAnimal)) ::: Some animals to be bred-back resemble animals that are extinct.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nExtinct(Aurochs) ::: Aurochs are extinct.\n\"\"\""
    ]
  },
  {
    "id": 145,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Jerry is young.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nHuman(x) ::: x is a human.\nStudies(x) ::: x studies.\nTeaches(x) ::: x teaches.\nYoung(x) ::: x is young.\nManager(x) ::: x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.\n¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nYoung(jerry) ::: Jerry is young.\n\"\"\""
    ]
  },
  {
    "id": 146,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Jerry is not young.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nHuman(x) ::: x is a human.\nStudies(x) ::: x studies.\nTeaches(x) ::: x teaches.\nYoung(x) ::: x is young.\nManager(x) ::: x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.\n¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Young(jerry) ::: Jerry is not young.\n\"\"\""
    ]
  },
  {
    "id": 147,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Rose is a human or a manager.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nHuman(x) ::: x is a human.\nStudy(x) ::: x studies.\nTeach(x) ::: x teaches.\nYoung(x) ::: x is young.\nManager(x) ::: x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Study(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Study(x) ⊕ Teach(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teach(x)) ::: No young person teaches.\n¬(Teach(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHuman(rose) ∨ Manager(rose) ::: Rose is a human or a manager.\n\"\"\""
    ]
  },
  {
    "id": 148,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Rose is a human or Jerry is a manager.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nHuman(x) ::: x is a human.\nStudies(x) ::: x studies.\nTeaches(x) ::: x teaches.\nYoung(x) ::: x is young.\nManager(x) ::: x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.\n¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHuman(rose) ∨ Manager(jerry) ::: Rose is a human or Jerry is a manager.\n\"\"\""
    ]
  },
  {
    "id": 149,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "It is not true that Rose is a student and Jerry is a human.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nHuman(x) ::: x is a human.\nStudy(x) ::: x studies.\nTeach(x) ::: x teaches.\nYoung(x) ::: x is young.\nManager(x) ::: x is a manager.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Study(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Study(x) ⊕ Teach(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teach(x)) ::: No young person teaches.\n¬(Teach(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Student(rose) ∧ Human(jerry)) ::: It is not true that Rose is a student and Jerry is a human.\n\"\"\""
    ]
  },
  {
    "id": 150,
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Neapolitan Chronicles is an English book.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPublishingHouse(x) ::: x is a publishing house.\nSpecializeIn(x, y) ::: x specializes in translating y into English.\nPublishedBy(x, y) ::: x is published by y.\nInLanguage(x, y) ::: x is in language y.\nTranslatedFrom(x, y) ::: x is translated from language y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newVesselPress) ∧ SpecializeIn(newVesselPress, foreignLiterature) ∧ SpecializeIn(newVesselPress, english) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (PublishedBy(newVesselPress, x) → InLanguage(x, english)) ::: All of New Vessel Press's published books are in English.\nPublishedBy(neapolitanChronicles, newVesselPress) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nTranslatedFrom(neapolitanChronicles, italian) ::: Neapolitan Chronicles was translated from Italian.\nPublishedBy(palaceOfFlies, newVesselPress) ::: Palace of Flies is a book published by New Vessel Press.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInLanguage(neapolitanChronicles, english) ::: Neapolitan Chronicles is an English book.\n\"\"\""
    ]
  },
  {
    "id": 151,
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPublishingHouse(x) ::: x is a publishing house.\nSpecializeIn(x, y) ::: x specializes in y.\nTranslate(x, y, z) ::: x translates y into z.\nBook(x) ::: x is a book.\nInLanguage(x, y) ::: x is in language y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newVesselPress) ∧ SpecializeIn(newVesselPress, foreignLiterature) ∧ SpecializeIn(newVesselPress, english) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (PublishingHouse(newVesselPress) ∧ Book(x) → InLanguage(x, english)) ::: All of New Vessel Press's published books are in English.\nBook(neapolitanChronicles) ∧ Publish(newVesselPress, neapolitanChronicles) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nTranslate(newVesselPress, neapolitanChronicles, italian) ::: Neapolitan Chronicles was translated from Italian.\nBook(palaceOfFlies) ∧ Publish(newVesselPress, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Book(x) ∧ Publish(newVesselPress, x)) ::: Harry Potter was published by New Vessel Press.\n\"\"\""
    ]
  },
  {
    "id": 152,
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Palace of Flies was translated from Italian.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPublishingHouse(x) ::: x is a publishing house.\nSpecializeIn(x, y) ::: x specializes in y.\nTranslate(x, y, z) ::: x translates y into z.\nBook(x) ::: x is a book.\nInLanguage(x, y) ::: x is in language y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newVesselPress) ∧ SpecializeIn(newVesselPress, foreignLiterature) ∧ Translate(newVesselPress, foreignLiterature, english) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (PublishingHouse(newVesselPress) ∧ Book(x) → InLanguage(x, english)) ::: All of New Vessel Press's published books are in English.\nBook(neapolitanChronicles) ∧ Publish(newVesselPress, neapolitanChronicles) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nTranslate(neapolitanChronicles, italian, english) ::: Neapolitan Chronicles was translated from Italian.\nBook(palaceOfFlies) ∧ Publish(newVesselPress, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTranslate(palaceOfFlies, italian, english) ::: Palace of Flies was translated from Italian.\n\"\"\""
    ]
  },
  {
    "id": 153,
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "Remy visits the office supply store regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nOwns(x, y) ::: x owns y.\nWork(x) ::: x works regularly and often at home.\nImpressiveHomeOffice(x) ::: x has a fully stocked and impressive home office.\nTidy(x) ::: x spends their free time tidying and organizing the spaces in their home.\nVisitOfficeStore(x) ::: x visits the office supply store regularly.\nLate(x) ::: x goes to bed late.\nWakeUpLate(x) ::: x wakes up every day after noon.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Owns(x, largeDesktopMonitor) → (Work(x) ∧ Often(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (ImpressiveHomeOffice(x) → Owns(x, largeDesktopMonitor)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n∀x (Work(x) → (Tidy(x) ∧ Organize(x))) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n∀x (Work(x) → VisitOfficeStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n∀x (Tidy(x) → (¬Late(x) ∧ ¬WakeUpLate(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n¬((Late(remy) ∧ WakeUpLate(remy)) ∧ Tidy(remy)) → ((Late(remy) ∧ WakeUpLate(remy) ∧ Tidy(remy)) ∨ (¬Late(remy) ∧ ¬WakeUpLate(remy) ∧ ¬Tidy(remy))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVisitOfficeStore(remy) ::: Remy visits the office supply store regularly.\n\"\"\""
    ]
  },
  {
    "id": 154,
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nOwns(x, y) ::: x owns y.\nWork(x) ::: x works regularly and often at home.\nHomeOffice(x) ::: x has a fully stocked and impressive home office.\nSpendTime(x, y) ::: x spends their free time y.\nTidy(x) ::: x tidies and organizes the spaces in their home.\nVisitStore(x) ::: x visits the office supply store regularly.\nGoToBedLate(x) ::: x goes to bed late.\nWakeUpLate(x) ::: x wakes up every day after noon.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Owns(x, largeDesktopMonitor) → (Work(x) ∧ SpendTime(x, tidying))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (HomeOffice(x) → Owns(x, largeDesktopMonitor)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n∀x (Work(x) → SpendTime(x, tidying)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n∀x (Work(x) → VisitStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n∀x (SpendTime(x, tidying) → (¬GoToBedLate(x) ∧ ¬WakeUpLate(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n(GoToBedLate(remy) ∧ WakeUpLate(remy) ∧ SpendTime(remy, tidying)) ⊕ (¬GoToBedLate(remy) ∧ ¬WakeUpLate(remy) ∧ ¬SpendTime(remy, tidying)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHomeOffice(remy) ∧ VisitStore(remy) ::: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\n\"\"\""
    ]
  },
  {
    "id": 155,
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nOwns(x, y) ::: x owns y at their home.\nWorkRegularly(x) ::: x works regularly.\nWorkOften(x) ::: x works often.\nHaveImpressiveOffice(x) ::: x has a fully stocked and impressive home office.\nTidyOrganize(x) ::: x spends their free time tidying and organizing spaces in their home.\nVisitStore(x) ::: x visits the office supply store regularly.\nGoToBedLate(x) ::: x goes to bed late.\nWakeUpLate(x) ::: x wakes up every day after noon.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Owns(x, largeDesktopMonitor) → (WorkRegularly(x) ∧ WorkOften(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (HaveImpressiveOffice(x) → Owns(x, largeDesktopMonitor)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n∀x ((WorkRegularly(x) ∧ WorkOften(x)) → TidyOrganize(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n∀x ((WorkRegularly(x) ∧ WorkOften(x)) → VisitStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n∀x (TidyOrganize(x) → (¬GoToBedLate(x) ∧ ¬WakeUpLate(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n(GoToBedLate(remy) ∧ WakeUpLate(remy) ∧ TidyOrganize(remy)) ⊕ (¬GoToBedLate(remy) ∧ ¬WakeUpLate(remy) ∧ ¬TidyOrganize(remy)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n((GoToBedLate(remy) ∧ WakeUpLate(remy)) ∨ VisitStore(remy)) → (¬TidyOrganize(remy) ∧ ¬HaveImpressiveOffice(remy)) ::: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\n\"\"\""
    ]
  },
  {
    "id": 156,
    "context": [
      "All humans are mortal.",
      "All Greeks are humans."
    ],
    "question": "Some Greeks are mortal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHuman(x) ::: x is a human.\nMortal(x) ::: x is mortal.\nGreek(x) ::: x is Greek.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Mortal(x)) ::: All humans are mortal.\n∀x (Greek(x) → Human(x)) ::: All Greeks are humans.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Greek(x) ∧ Mortal(x)) ::: Some Greeks are mortal.\n\"\"\""
    ]
  },
  {
    "id": 157,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James has a part-time job offered by the university.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nWorkLibrary(x) ::: x works in the library.\nComputerScienceDept(x) ::: x is from the computer science department.\nPartTimeJobUni(x) ::: x has a part-time job offered by the university.\nTakeDatabaseCourse(x) ::: x takes the database course.\nInstructed(x, y) ::: x is instructed by y.\nDatabaseCourse(x) ::: x is the database course.\nWorkLab(x) ::: x works in the lab.\nProfessorDavid(x) ::: x is professor David.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorkLibrary(x) → ¬ComputerScienceDept(x)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) ∧ PartTimeJobUni(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Student(x) ∧ TakeDatabaseCourse(x) → ComputerScienceDept(x)) ::: All students who take the database course are from the computer science department.\n∀x (Student(x) ∧ Instructed(x, professorDavid) → TakeDatabaseCourse(x)) ::: All students instructed by professor David are taking the database course.\n∀x (Student(x) ∧ WorkLab(x) → Instructed(x, professorDavid)) ::: All students working in the lab are instructed by professor David.\nStudent(james) ∧ WorkLab(james) ::: James is a student working in the lab.\n¬(PartTimeJobUni(jack) ∨ WorkLab(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPartTimeJobUni(james) ::: James has a part-time job offered by the university.\n\"\"\""
    ]
  },
  {
    "id": 158,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James does not have a part-time job offered by the university.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nWorkLibrary(x) ::: x works in the library.\nComputerScienceDept(x) ::: x is from the computer science department.\nPartTimeJobUni(x) ::: x has a part-time job offered by the university.\nTakeDatabaseCourse(x) ::: x takes the database course.\nInstructed(x, y) ::: x is instructed by y.\nDatabaseCourse(x) ::: x is the database course.\nWorkLab(x) ::: x works in the lab.\nProfessorDavid(x) ::: x is professor David.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorkLibrary(x) → ¬ComputerScienceDept(x)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) ∧ PartTimeJobUni(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Student(x) ∧ TakeDatabaseCourse(x) → ComputerScienceDept(x)) ::: All students who take the database course are from the computer science department.\n∀x (Student(x) ∧ Instructed(x, professorDavid) → TakeDatabaseCourse(x)) ::: All students instructed by professor David are taking the database course.\n∀x (Student(x) ∧ WorkLab(x) → Instructed(x, professorDavid)) ::: All students working in the lab are instructed by professor David.\nWorkLab(james) ∧ Student(james) ::: James is a student working in the lab.\n¬(PartTimeJobUni(jack) ∨ WorkLab(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PartTimeJobUni(james) ::: James does not have a part-time job offered by the university.\n\"\"\""
    ]
  },
  {
    "id": 159,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nWorksLibrary(x) ::: x works in the library.\nComputerScienceDept(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabaseCourse(x) ::: x takes the database course.\nInstructed(x, y) ::: x is instructed by y.\nWorksLab(x) ::: x works in the lab.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorksLibrary(x) → ¬ComputerScienceDept(x)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) ∧ PartTimeJob(x)) → WorksLibrary(x) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Student(x) ∧ TakesDatabaseCourse(x) → ComputerScienceDept(x)) ::: All students who take the database course are from the computer science department.\n∀x (Student(x) ∧ Instructed(x, david) → TakesDatabaseCourse(x)) ::: All students instructed by professor David are taking the database course.\n∀x (Student(x) ∧ WorksLab(x) → Instructed(x, david)) ::: All students working in the lab are instructed by professor David.\nWorksLab(james) ∧ Student(james) ::: James is a student working in the lab.\n¬(PartTimeJob(jack) ∨ WorksLab(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTakesDatabaseCourse(james) ∨ PartTimeJob(james) ::: James either takes the database course or has a part-time job offered by the university.\n\"\"\""
    ]
  },
  {
    "id": 160,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "Jack takes the database course.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nStudent(x) ::: x is a student.\nWorksLibrary(x) ::: x works in the library.\nComputerScienceDept(x) ::: x is from the computer science department.\nPartTimeJob(x) ::: x has a part-time job offered by the university.\nTakesDatabaseCourse(x) ::: x takes the database course.\nInstructed(x, y) ::: x is instructed by y.\nWorksLab(x) ::: x works in the lab.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorksLibrary(x) → ¬ComputerScienceDept(x)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) ∧ PartTimeJob(x) → WorksLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Student(x) ∧ TakesDatabaseCourse(x) → ComputerScienceDept(x)) ::: All students who take the database course are from the computer science department.\n∀x (Student(x) ∧ Instructed(x, david) → TakesDatabaseCourse(x)) ::: All students instructed by professor David are taking the database course.\n∀x (Student(x) ∧ WorksLab(x) → Instructed(x, david)) ::: All students working in the lab are instructed by professor David.\nWorksLab(james) ::: James is a student working in the lab.\n¬(PartTimeJob(jack) ∨ WorksLab(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTakesDatabaseCourse(jack) ::: Jack takes the database course.\n\"\"\""
    ]
  },
  {
    "id": 161,
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nLikes(x, y) ::: x likes y.\nWantsToCompose(x) ::: x wants to compose.\nHasAccess(x, y) ::: x has access to y.\nCanCompose(x) ::: x can compose.\nWillCompose(x) ::: x will compose.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n(Likes(George, music) → WantsToCompose(George)) ::: If George likes music, he wants to compose.\n(HasAccess(George, program) → CanCompose(George)) ::: If George has access to a program, he can compose.\n(CanCompose(George) ∧ WantsToCompose(George)) → WillCompose(George) ::: If George can compose and wants to compose, he will compose.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Likes(George, music) ∧ HasAccess(George, program)) → WillCompose(George) ::: If George likes music and has access to a program, he will compose.\n\"\"\""
    ]
  },
  {
    "id": 162,
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George will not compose, George can not compose.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nLikes(x, y) ::: x likes y.\nWantsToCompose(x) ::: x wants to compose.\nHasAccess(x, y) ::: x has access to y.\nCanCompose(x) ::: x can compose.\nWillCompose(x) ::: x will compose.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n(Likes(george, music) → WantsToCompose(george)) ::: If George likes music, he wants to compose.\n(HasAccess(george, program) → CanCompose(george)) ::: If George has access to a program, he can compose.\n(CanCompose(george) ∧ WantsToCompose(george) → WillCompose(george)) ::: If George can compose and wants to compose, he will compose.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WillCompose(george) → ¬CanCompose(george) ::: If George will not compose, George can not compose.\n\"\"\""
    ]
  },
  {
    "id": 163,
    "context": [
      "A hawk never lands. ",
      "Some birds are hawks."
    ],
    "question": "All birds land",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHawk(x) ::: x is a hawk.\nBird(x) ::: x is a bird.\nLands(x) ::: x lands.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Hawk(x) → ¬Lands(x)) ::: A hawk never lands.\n∃x (Bird(x) ∧ Hawk(x)) ::: Some birds are hawks.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Bird(x) → Lands(x)) ::: All birds land\n\"\"\""
    ]
  },
  {
    "id": 164,
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGivenOut(x, y) ::: x is given out on TV at time y.\nOn(x, y) ::: x is on TV at time y.\nBachelor(x) ::: x is on the Bachelor.\nPortray(x, y) ::: x portrays the lives of y.\nRealPeople(x) ::: x is a real person.\nRealityTVShow(x) ::: x is a reality TV show.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (On(rose, Monday8pm) ∧ GivenOut(rose, Monday8pm)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x (GivenOut(x, TV) → Bachelor(x)) ::: Every rose given out on TV is on the Bachelor.\n∀x (Bachelor(x) → Portray(x, realPeople)) ::: Everything on the Bachelor portrays the lives of real people.\n∀x (Portray(x, realPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOn(breakingBad, Monday8pm) ::: Breaking Bad is on Monday at 8 pm.\n\"\"\""
    ]
  },
  {
    "id": 165,
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nGivenOut(x, y) ::: x is given out on TV at time y.\nRose(x) ::: x is a rose.\nBachelor(x) ::: x is on the Bachelor.\nPortray(x, y) ::: x portrays the lives of y.\nRealPeople(x) ::: x is a real person.\nRealityTVShow(x) ::: x is a reality TV show.\nShow(x) ::: x is a TV show.\nBreakingBad(x) ::: x is Breaking Bad.\n\nFirst-Order-Logic Premises:\n∃x (Rose(x) ∧ GivenOut(x, Monday8pm)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x (Rose(x) → Bachelor(x)) ::: Every rose given out on TV is on the Bachelor.\n∀x (Bachelor(x) → Portray(x, realPeople)) ::: Everything on the Bachelor portrays the lives of real people.\n∀x (Portray(x, realPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show.\n\nFirst-Order-Logic Question:\nBreakingBad(breakingBad) ∧ ∃x (Rose(x) ∧ GivenOut(x, Monday8pm)) ::: Is Breaking Bad a TV show in which roses are given out on Monday at 8 pm?"
    ]
  },
  {
    "id": 166,
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nGivenOut(x, y) ::: x is given out on TV at time y.\nRoses(x) ::: x is a rose.\nBachelor(x) ::: x is on the Bachelor.\nPortray(x, y) ::: x portrays the lives of y.\nRealPeople(x) ::: x is a real person.\nRealityTVShow(x) ::: x is a reality TV show.\nShow(x) ::: x is a show.\nBreakingBad(x) ::: x is Breaking Bad.\nMonday(x) ::: x is Monday.\nTime(x) ::: x is a time.\n\nFirst-Order-Logic Premises:\n∃x (Monday(x) ∧ Time(x) ∧ GivenOut(roses, x)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x (GivenOut(x, TV) → Bachelor(x)) ::: Every rose given out on TV is on the Bachelor.\n∀x (Bachelor(x) → Portray(x, RealPeople(x))) ::: Everything on the Bachelor portrays the lives of real people.\n∀x (Portray(x, RealPeople(x)) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show.\n\nFirst-Order-Logic Question:\nGivenOut(roses, breakingBad) → (Monday(x) ∧ Time(8pm)) ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm."
    ]
  },
  {
    "id": 167,
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Heinrich Schmidt was either German or Russian.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nGerman(x) ::: x is German.\nRussian(x) ::: x is Russian.\nPolitician(x) ::: x is a politician.\nMember(x, y) ::: x is a member of y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nPolitician(heinrichSchmidt) ∧ German(heinrichSchmidt) ∧ Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag) ::: Heinrich Schmidt was a Nazi German politician. Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGerman(heinrichSchmidt) ∨ Russian(heinrichSchmidt) ::: Heinrich Schmidt was either German or Russian.\n\"\"\""
    ]
  },
  {
    "id": 168,
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNazi(x) ::: x is a Nazi German politician.\nPolitician(x) ::: x is a politician.\nMember(x, y) ::: x is a member of y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nNazi(heinrich) ∧ Politician(heinrich) ::: Heinrich Scmidt was a Nazi German politician.\nMember(heinrich, prussianStateParliament) ∧ Member(heinrich, naziReichstag) ::: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Nazi(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag)) ::: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n\"\"\""
    ]
  },
  {
    "id": 169,
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "No politicans are part of the Nazi Reichstag.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNazi(x) ::: x is a Nazi German politician.\nPolitician(x) ::: x is a politician.\nMember(x, y) ::: x is a member of y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nNazi(heinrichSchmidt) ::: Heinrich Scmidt was a Nazi German politician.\nMember(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag) ::: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x (Politician(x) ∧ Member(x, naziReichstag)) ::: No politicians are part of the Nazi Reichstag.\n\"\"\""
    ]
  },
  {
    "id": 170,
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "Colorectal cancer is a severe cancer",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nDeadly(x) ::: x is a deadly disease.\nLowSurvivalRate(x) ::: x has a low survival rate.\nSevereCancer(x) ::: x is a severe cancer.\nBileDuctCancer(x) ::: x is a bile duct cancer.\nCholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.\nMildFlu(x) ::: x has mild flu.\nColorectalCancer(x) ::: x is a colorectal cancer.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Deadly(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (SevereCancer(x) → Deadly(x)) ::: All severe cancers are deadly diseases.\nSevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬(MildFlu(x) ∧ LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n∀x ((ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x)) → ¬(ColorectalCancer(x) ∧ BileDuctCancer(x))) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSevereCancer(colorectalCancer) ::: Colorectal cancer is a severe cancer.\n\"\"\""
    ]
  },
  {
    "id": 171,
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nDeadlyDisease(x) ::: x is a deadly disease.\nLowSurvivalRate(x) ::: x has a low survival rate.\nSevereCancer(x) ::: x is a severe cancer.\nBileDuctCancer(x) ::: x is a bile duct cancer.\nCholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.\nMildFlu(x) ::: x has mild flu.\nColorectalCancer(x) ::: x is a colorectal cancer.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\nSevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬(MildFlu(x) ∧ LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n(ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x)) → ¬(ColorectalCancer(x) ∧ BileDuctCancer(x)) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(ColorectalCancer(x) ∨ Cholangiocarcinoma(x)) → (ColorectalCancer(x) ∧ MildFlu(x)) ::: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\n\"\"\""
    ]
  },
  {
    "id": 172,
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nDeadlyDisease(x) ::: x is a deadly disease.\nLowSurvivalRate(x) ::: x has a low survival rate.\nSevereCancer(x) ::: x is a severe cancer.\nBileDuctCancer(x) ::: x is a bile duct cancer.\nCholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.\nMildFlu(x) ::: x has mild flu.\nColorectalCancer(x) ::: x is a colorectal cancer.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\nSevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬(MildFlu(x) ∧ LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n(ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x)) → ¬(ColorectalCancer(x) ∧ BileDuctCancer(x)) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(MildFlu(colorectalCancer) ∧ Cholangiocarcinoma(colorectalCancer)) → (BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ::: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\n\"\"\""
    ]
  },
  {
    "id": 173,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor eats salads regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nEatSalads(x) ::: x eats salads regularly.\nConscious(x) ::: x is very conscious about their health and eating habits.\nGrewUpHealthConscious(x) ::: x grew up in health-conscious childhood homes.\nFulfillNutritionalIntakes(x) ::: x fulfills their nutritional daily intakes.\nGoodRelationship(x, y) ::: x has a good relationship with y.\nVisitGym(x) ::: x visits the gym at least once a day.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (EatSalads(x) → Conscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (GrewUpHealthConscious(x) → EatSalads(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (FulfillNutritionalIntakes(x) → GrewUpHealthConscious(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (GoodRelationship(x, parents) → FulfillNutritionalIntakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (GoodRelationship(x, parents) → ¬EatSalads(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (VisitGym(x) → FulfillNutritionalIntakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUpHealthConscious(taylor) ∧ GoodRelationship(taylor, parents)) ⊕ ¬(GrewUpHealthConscious(taylor) ∨ GoodRelationship(taylor, parents)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEatSalads(taylor) ::: Taylor eats salads regularly.\n\"\"\""
    ]
  },
  {
    "id": 174,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor visits the gym at least once a day.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nEatSalads(x) ::: x eats salads regularly.\nConscious(x) ::: x is very conscious about their health and eating habits.\nGrewUpHealthConscious(x) ::: x grew up in health-conscious childhood homes.\nFulfillIntakes(x) ::: x fulfills their nutritional daily intakes.\nGoodRelationship(x, y) ::: x has a good relationship with y.\nVisitGym(x) ::: x visits the gym at least once a day.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (EatSalads(x) → (Conscious(x) ∧ Conscious(x))) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (GrewUpHealthConscious(x) → EatSalads(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (FulfillIntakes(x) → GrewUpHealthConscious(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (GoodRelationship(x, parents) → FulfillIntakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (GoodRelationship(x, parents) → ¬EatSalads(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (VisitGym(x) → FulfillIntakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUpHealthConscious(taylor) ∧ GoodRelationship(taylor, parents)) ⊕ ¬(GrewUpHealthConscious(taylor) ∨ GoodRelationship(taylor, parents)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVisitGym(taylor) ::: Taylor visits the gym at least once a day.\n\"\"\""
    ]
  },
  {
    "id": 175,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nEatSalads(x) ::: x eats salads regularly.\nConscious(x) ::: x is very conscious about their health and eating habits.\nGrewUpHealthConscious(x) ::: x grew up in a health-conscious childhood home.\nFulfillNutritionalIntakes(x) ::: x fulfills their nutritional daily intakes.\nGoodRelationshipWithParents(x) ::: x has a good relationship with their parents.\nVisitGym(x) ::: x visits the gym at least once a day.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (EatSalads(x) → Conscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (GrewUpHealthConscious(x) → EatSalads(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (FulfillNutritionalIntakes(x) → GrewUpHealthConscious(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (GoodRelationshipWithParents(x) → FulfillNutritionalIntakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (GoodRelationshipWithParents(x) → ¬EatSalads(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (VisitGym(x) → FulfillNutritionalIntakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUpHealthConscious(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpHealthConscious(taylor) ∨ GoodRelationshipWithParents(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(GrewUpHealthConscious(taylor) ∨ VisitGym(taylor)) ::: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n\"\"\""
    ]
  },
  {
    "id": 176,
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The world championships is a sporting event.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSportingEvent(x) ::: x is a sporting event.\nWonMostMedals(x, y) ::: x won the most medals in event y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympicGames) ::: The Olympic games is a sporting event.\nLast(olympicGames, tokyo) ::: The last Olympic games was in Tokyo.\nWonMostMedals(unitedStates, tokyo) ::: The United States won the most medals in Tokyo.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSportingEvent(worldChampionships) ::: The world championships is a sporting event.\n\"\"\""
    ]
  },
  {
    "id": 177,
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The last Olympic games were not in Tokyo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSportingEvent(x) ::: x is a sporting event.\nOlympicGames(x) ::: x is the Olympic games.\nIn(x, y) ::: x was in y.\nWonMostMedals(x, y) ::: x won the most medals in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (OlympicGames(x) → SportingEvent(x)) ::: The Olympic games is a sporting event.\nIn(lastOlympicGames, Tokyo) ::: The last Olympic games was in Tokyo.\nWonMostMedals(UnitedStates, Tokyo) ::: The United States won the most medals in Tokyo.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬In(lastOlympicGames, Tokyo) ::: The last Olympic games were not in Tokyo.\n\"\"\""
    ]
  },
  {
    "id": 178,
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The United States won the most medals in the last Olympic games.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nSportingEvent(x) ::: x is a sporting event.\nOlympicGames(x) ::: x is the Olympic games.\nIn(x, y) ::: x is in y.\nWonMostMedals(x, y) ::: x won the most medals in y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (OlympicGames(x) → SportingEvent(x)) ::: The Olympic games is a sporting event.\nIn(lastOlympicGames, Tokyo) ::: The last Olympic games was in Tokyo.\nWonMostMedals(UnitedStates, Tokyo) ::: The United States won the most medals in Tokyo.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWonMostMedals(UnitedStates, lastOlympicGames) ::: The United States won the most medals in the last Olympic games.\n\"\"\""
    ]
  },
  {
    "id": 179,
    "context": [
      "All horses have hooves.",
      "No humans have hooves."
    ],
    "question": "Some humans are horses.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHorse(x) ::: x is a horse.\nHuman(x) ::: x is a human.\nHooves(x) ::: x has hooves.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Horse(x) → Hooves(x)) ::: All horses have hooves.\n∀x (Human(x) → ¬Hooves(x)) ::: No humans have hooves.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Human(x) ∧ Horse(x)) ::: Some humans are horses.\n\"\"\""
    ]
  },
  {
    "id": 180,
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be the same airport.",
      "John flies from LGA airport."
    ],
    "question": "Susan flies from LGA airport.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nFlies(x, y) ::: x flies to airport y.\nSameAirport(x, y) ::: x and y are the same airport.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nFlies(susan, LGA) ::: Susan flies to LGA airport.\n¬SameAirport(departure, arrival) ::: The departure and arrival can not be the same airport.\nFlies(john, LGA) ::: John flies from LGA airport.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlies(susan, LGA) ::: Susan flies from LGA airport.\n\"\"\""
    ]
  },
  {
    "id": 181,
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be the same airport.",
      "John flies from LGA airport."
    ],
    "question": "John flies to LGA airport.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nFlies(x, y) ::: x flies to airport y.\nSameAirport(x, y) ::: x and y are the same airport.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nFlies(susan, LGA) ::: Susan flies to LGA airport.\n¬SameAirport(departure, arrival) ::: The departure and arrival can not be the same airport.\nFlies(john, LGA) ::: John flies from LGA airport.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlies(john, LGA) ::: John flies to LGA airport.\n\"\"\""
    ]
  },
  {
    "id": 182,
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is a grumpy person.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNiceTo(x, y) ::: x is nice to y.\nMeanTo(x, y) ::: x is mean to y.\nGrumpy(x) ::: x is grumpy.\nAnimalLover(x) ::: x is an animal lover.\nOwns(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPet(x) ::: x is a pet.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (NiceTo(x, y) → ¬MeanTo(x, y)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ MeanTo(x, y)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → NiceTo(x, y)) ::: All animal lovers are nice to animals.\n∀x (Owns(x, y) → Love(x, y)) ::: If someone owns a pet, then they love animals.\nOwns(tom, pet) ::: Tom is a pet owner.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrumpy(tom) ::: Tom is a grumpy person.\n\"\"\""
    ]
  },
  {
    "id": 183,
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is not a grumpy person and mean to animals.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNiceTo(x, y) ::: x is nice to y.\nMeanTo(x, y) ::: x is mean to y.\nGrumpy(x) ::: x is grumpy.\nAnimalLover(x) ::: x is an animal lover.\nOwns(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPet(x) ::: x is a pet.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (NiceTo(x, y) → ¬MeanTo(x, y)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ MeanTo(x, y)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → NiceTo(x, y)) ::: All animal lovers are nice to animals.\n∀x (Owns(x, y) → Love(x, y)) ::: If someone owns a pet, then they love animals.\nOwns(tom, pet) ::: Tom is a pet owner.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Grumpy(tom) ∧ MeanTo(tom, animals)) ::: Tom is not a grumpy person and mean to animals.\n\"\"\""
    ]
  },
  {
    "id": 184,
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nNiceTo(x, y) ::: x is nice to y.\nMeanTo(x, y) ::: x is mean to y.\nGrumpy(x) ::: x is grumpy.\nAnimalLover(x) ::: x is an animal lover.\nOwns(x, y) ::: x owns y.\nLove(x, y) ::: x loves y.\nPet(x) ::: x is a pet.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (NiceTo(x, animals) → ¬MeanTo(x, animals)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ MeanTo(x, animals)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → NiceTo(x, animals)) ::: All animal lovers are nice to animals.\n∀x (Owns(x, pet) → Love(x, animals)) ::: If someone owns a pet, then they love animals.\nOwns(tom, pet) ::: Tom is a pet owner.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Grumpy(tom) ∧ MeanTo(tom, animals)) → ¬(Grumpy(tom) ∨ AnimalLover(tom)) ::: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\n\"\"\""
    ]
  },
  {
    "id": 185,
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Dani Shapiro is a novel writer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPodcast(x) ::: x is a podcast.\nNovel(x) ::: x is a novel.\nAmerican(x) ::: x is American.\nBornInCity(x, y) ::: x is born in city y.\nWrittenBy(x, y) ::: x is written by person y.\nNovelWriter(x) ::: x is a novel writer.\nWriter(x) ::: x is a writer.\nCreated(x, y) ::: x created y.\nWrittenInYear(x, y) ::: x is written in year y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n¬Podcast(novel) ::: A podcast is not a novel.\n∀x (BornInCity(x, americanCity) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ((Novel(x) ∧ WrittenBy(y, x)) → NovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.\nAmerican(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.\nWrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.\nNovel(familyHistory) ∧ WrittenInYear(familyHistory, 2003) ::: Family History is a novel written in 2003.\nCreated(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\nBornInCity(daniShapiro, boston) ::: Boston is an American city.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNovelWriter(daniShapiro) ::: Dani Shapiro is a novel writer.\n\"\"\""
    ]
  },
  {
    "id": 186,
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Family Secrets is a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nPodcast(x) ::: x is a podcast.\nNovel(x) ::: x is a novel.\nBornInCity(x, y) ::: x is born in city y.\nAmerican(x) ::: x is American.\nWriter(x) ::: x is a writer.\nWrittenBy(x, y) ::: x is written by y.\nNovelWriter(x) ::: x is a novel writer.\nCreated(x, y) ::: x created y.\nWrittenInYear(x, y) ::: x is written in year y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n¬Podcast(podcast) ::: A podcast is not a novel.\n∀x (BornInCity(x, americanCity) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ((Novel(x) ∧ WrittenBy(x, y)) → NovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.\nAmerican(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.\nWrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.\nNovel(familyHistory) ∧ WrittenInYear(familyHistory, 2003) ::: Family History is a novel written in 2003.\nCreated(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\nBornInCity(daniShapiro, americanCity) ::: Dani Shapiro is born in an American city.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNovel(familySecrets) ::: Family Secrets is a novel.\n\"\"\""
    ]
  },
  {
    "id": 187,
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Dani Shapiro was born in Boston.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\nPodcast(x) ::: x is a podcast.\nNovel(x) ::: x is a novel.\nAmerican(x) ::: x is American.\nBornInCity(x, y) ::: x is born in city y.\nWriter(x) ::: x is a writer.\nWrittenBy(x, y) ::: x is written by y.\nNovelWriter(x) ::: x is a novel writer.\nCreatedPodcast(x, y) ::: x created a podcast called y.\n\nFirst-Order-Logic Premises:\n¬Podcast(x) ::: x is not a podcast.\n∀x (BornInCity(x, americanCity) → American(x)) ::: If a person is born in an American city, then the person is American.\n∀x ((Novel(x) ∧ WrittenBy(x, y)) → NovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.\nAmerican(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.\nWrittenBy(familyHistory, daniShapiro) ∧ Novel(familyHistory) ∧ PublishYear(familyHistory, 2003) ::: Family History is a novel written in 2003.\nCreatedPodcast(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\nBornInCity(daniShapiro, boston) ::: Dani Shapiro was born in Boston.\n\nFirst-Order-Logic Question:\nBornInCity(daniShapiro, boston) ::: Dani Shapiro was born in Boston."
    ]
  },
  {
    "id": 188,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is an American.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBasketballPlayer(x) ::: x is a basketball player.\nAmerican(x) ::: x is American.\nTall(x) ::: x is tall.\nLargeShoes(x) ::: x wears large shoes.\nLargeClothes(x) ::: x wears large-sized clothes.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬American(yuri) ::: Yuri is an American.\n\"\"\""
    ]
  },
  {
    "id": 189,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is not an American basketball player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBasketballPlayer(x) ::: x is a basketball player.\nAmerican(x) ::: x is American.\nTall(x) ::: x is tall.\nWearLargeShoes(x) ::: x wears large shoes.\nWearLargeClothes(x) ::: x wears large-sized clothes.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(BasketballPlayer(yuri) ∧ American(yuri)) ::: Yuri is not an American basketball player.\n\"\"\""
    ]
  },
  {
    "id": 190,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is an American basketball player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBasketballPlayer(x) ::: x is a basketball player.\nAmerican(x) ::: x is American.\nTall(x) ::: x is tall.\nWearLargeShoes(x) ::: x wears large shoes.\nWearLargeClothes(x) ::: x wears large-sized clothes.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmerican(yuri) ∧ BasketballPlayer(yuri) ::: Yuri is an American basketball player.\n\"\"\""
    ]
  },
  {
    "id": 191,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBasketballPlayer(x) ::: x is a basketball player.\nAmerican(x) ::: x is American.\nTall(x) ::: x is tall.\nLargeShoes(x) ::: x wears large shoes.\nLargeClothes(x) ::: x wears large-sized clothes.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LargeShoes(yuri) → (American(yuri) ∧ BasketballPlayer(yuri)) ::: If Yuri does not wear large shoes, then Yuri is an American basketball player.\n\"\"\""
    ]
  },
  {
    "id": 192,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBasketballPlayer(x) ::: x is a basketball player.\nAmerican(x) ::: x is American.\nTall(x) ::: x is tall.\nLargeShoes(x) ::: x wears large shoes.\nLargeClothes(x) ::: x wears large-sized clothes.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬American(yuri) ∧ ¬BasketballPlayer(yuri) → BasketballPlayer(yuri) ::: If Yuri is not an American basketball player, then Yuri is a basketball player.\n\"\"\""
    ]
  },
  {
    "id": 193,
    "context": [
      "Events are either happy or sad.",
      "At least one event is happy. "
    ],
    "question": "All events are sad.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nHappy(x) ::: x is a happy event.\nSad(x) ::: x is a sad event.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\n∀x (Happy(x) ∨ Sad(x)) ::: Events are either happy or sad.\n∃x Happy(x) ::: At least one event is happy.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x Sad(x) ::: All events are sad.\n\"\"\""
    ]
  },
  {
    "id": 194,
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWinner(x, y) ::: x is the winner of the event y.\nParticipant(x, y) ::: x participated in the event y.\nLeaderboard(x, y) ::: x is on the leaderboard of the event y.\nFrom(x, y) ::: x is from the country y.\nBelgium(x) ::: x is from Belgium.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nWinner(steinhauer, 1992DuMaurierClassic) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nParticipant(steinhauer, 1992DuMaurierClassic) ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (Leaderboard(x, 1992DuMaurierClassic) ∧ From(x, belgium) ∧ ¬∃y (Leaderboard(y, 1992DuMaurierClassic) ∧ From(y, belgium) ∧ y != x)) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFrom(descampe, belgium) ∧ Leaderboard(descampe, 1992DuMaurierClassic) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n∀x (Leaderboard(x, 1992DuMaurierClassic) → Participant(x, 1992DuMaurierClassic)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Winner(steinhauer, 1992DuMaurierClassic) ::: Steinhauer was not the winner of the 1992 du Maurier Classic.\n\"\"\""
    ]
  },
  {
    "id": 195,
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nWinner(x, y) ::: x is the winner of the tournament y.\nParticipant(x, y) ::: x participated in the tournament y.\nLeaderboardTie(x) ::: x is in a tie on the leaderboard.\nFromCountry(x, y) ::: x is from the country y.\nOnLeaderboard(x, y) ::: x is on the leaderboard of the tournament y.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nWinner(steinhauer, 1992DuMaurierClassic) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nParticipant(steinhauer, 1992DuMaurierClassic) ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (LeaderboardTie(x) ∧ FromCountry(x, belgium)) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFromCountry(descampe, belgium) ∧ OnLeaderboard(descampe, 1992DuMaurierClassic) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n∀x (OnLeaderboard(x, 1992DuMaurierClassic) → Participant(x, 1992DuMaurierClassic)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeaderboardTie(descampe) ∧ OnLeaderboard(descampe, 1992DuMaurierClassic) ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n\"\"\""
    ]
  },
  {
    "id": 196,
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi is terricolous.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBarks(x) ::: x is an animal that barks.\nLikes(x, y) ::: Jane likes x.\nDogs(x) ::: x is a dog.\nJumps(x) ::: x is an animal that jumps.\nHasLegs(x) ::: x is an animal that has legs.\nTerricolous(x) ::: x is an animal that is terricolous.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBarks(x) → ¬Likes(jane, x) ::: If an animal barks, then Jane does not like it.\n∀x (Dogs(x) → Barks(x)) ::: All dogs are animals that bark.\nJumps(x) → Likes(jane, x) ::: If an animal jumps, then Jane likes it.\nHasLegs(x) → Jumps(x) ::: If an animal has legs, then it jumps.\nTerricolous(x) → HasLegs(x) ::: If an animal is terricolous, then it has legs.\n¬(Jumps(kiki) ∨ HasLegs(kiki)) → Terricolous(kiki) ∨ HasLegs(kiki) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTerricolous(kiki) ::: KiKi is terricolous.\n\"\"\""
    ]
  },
  {
    "id": 197,
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi barks and is a dog.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBarks(x) ::: x is an animal that barks.\nLikes(x, y) ::: Jane likes x.\nDog(x) ::: x is a dog.\nJumps(x) ::: x jumps.\nHasLegs(x) ::: x has legs.\nTerricolous(x) ::: x is terricolous.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBarks(x) → ¬Likes(jane, x) ::: If an animal barks, then Jane does not like it.\n∀x (Dog(x) → (Barks(x) ∧ Animal(x))) ::: All dogs are animals that bark.\nJumps(x) → Likes(jane, x) ::: If an animal jumps, then Jane likes it.\nHasLegs(x) → Jumps(x) ::: If an animal has legs, then it jumps.\nTerricolous(x) → HasLegs(x) ::: If an animal is terricolous, then it has legs.\n¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBarks(kiki) ∧ Dog(kiki) ::: KiKi barks and is a dog.\n\"\"\""
    ]
  },
  {
    "id": 198,
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi neither barks nor is a dog.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBarks(x) ::: x is an animal that barks.\nLikes(x, y) ::: x likes y.\nDog(x) ::: x is a dog.\nJumps(x) ::: x jumps.\nHasLegs(x) ::: x has legs.\nTerricolous(x) ::: x is terricolous.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBarks(x) → ¬Likes(jane, x) ::: If an animal barks, then Jane does not like it.\n∀x (Dog(x) → (Barks(x) ∧ Animal(x))) ::: All dogs are animals that bark.\nJumps(x) → Likes(jane, x) ::: If an animal jumps, then Jane likes it.\nHasLegs(x) → Jumps(x) ::: If an animal has legs, then it jumps.\nTerricolous(x) → HasLegs(x) ::: If an animal is terricolous, then it has legs.\n¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Barks(kiki) ∨ Dog(kiki)) ::: KiKi neither barks nor is a dog.\n\"\"\""
    ]
  },
  {
    "id": 199,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "No one playing for Nautico is Brazilian.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBornIn(x, y) ::: x was born in year y.\nKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOutTo(x, y) ::: x was loaned out to y.\nPlaysFor(x, y) ::: x plays for y.\nClub(x) ::: x is a football club.\nBrazilian(x) ::: x is Brazilian.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBornIn(ailton, 1995) ∧ KnownAs(ailton, Ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ LoanedOutTo(ailton, Braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(ailton) ∧ PlaysFor(ailton, Nautico) ∧ Brazilian(ailton) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nClub(Nautico) ∧ Club(Braga) ::: Nautico is a football club along with Braga.\nClub(Fluminense) ::: Fluminense is a football club.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x (PlaysFor(x, Nautico) ∧ Brazilian(x)) ::: No one playing for Nautico is Brazilian.\n\"\"\""
    ]
  },
  {
    "id": 200,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva foes not play for a football club.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBorn(x, y) ::: x was born in year y.\nKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOutTo(x, y) ::: x was loaned out to club y.\nPlaysFor(x, y) ::: x plays for club y.\nClub(x) ::: x is a football club.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBorn(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ LoanedOutTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(ailton) ∧ PlaysFor(ailton, nautico) ∧ Club(nautico) ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nClub(nautico) ∧ Club(braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃x (FootballPlayer(x) ∧ ¬∃y (PlaysFor(x, y) ∧ Club(y))) ::: Ailton Silva does not play for a football club.\n\"\"\""
    ]
  },
  {
    "id": 201,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton was not loaned out to a football club.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBornIn(x, y) ::: x was born in year y.\nKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOutTo(x, y) ::: x was loaned out to football club y.\nPlaysFor(x, y) ::: x plays for football club y.\nFootballClub(x) ::: x is a football club.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBornIn(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ LoanedOutTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(ailton) ∧ PlaysFor(ailton, nautico) ∧ PlaysFor(nautico, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico. Nautico is a football club along with Braga.\nFootballClub(fluiminense) ::: Fluminense is a football club.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x (LoanedOutTo(ailton, x) ∧ FootballClub(x))) ::: Ailton was not loaned out to a football club.\n\"\"\""
    ]
  },
  {
    "id": 202,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva played for Fluminense.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBornIn(x, y) ::: x was born in year y.\nKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOutTo(x, y) ::: x was loaned out to y.\nPlaysFor(x, y) ::: x plays for y.\nClub(x) ::: x is a football club.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonSilva, 1995) ∧ KnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ LoanedOutTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nClub(nautico) ∧ Club(braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaysFor(ailtonSilva, fluminense) ::: Ailton Silva played for Fluminense.\n\"\"\""
    ]
  },
  {
    "id": 203,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Predicates:\n\"\"\"\nBornIn(x, y) ::: x was born in year y.\nKnownAs(x, y) ::: x is commonly known as y.\nFootballPlayer(x) ::: x is a football player.\nLoanedOutTo(x, y) ::: x was loaned out to football club y.\nPlaysFor(x, y) ::: x plays for football club y.\nFootballClub(x) ::: x is a football club.\n\"\"\"\nFirst-Order-Logic Premises:\n\"\"\"\nBornIn(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ LoanedOutTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nFootballPlayer(ailton) ∧ PlaysFor(ailton, nautico) ∧ FootballClub(nautico) ∧ FootballClub(braga) ::: Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga.\nFootballClub(fluminense) ::: Fluminense is a football club.\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (FootballClub(x) ∧ LoanedOutTo(ailton, x)) ::: Ailton Silva was loaned out to a football club.\n\"\"\""
    ]
  }
]