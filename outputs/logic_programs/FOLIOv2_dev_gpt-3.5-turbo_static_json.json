[
  {
    "id": 1014,
    "context": [
      "People in this club who perform in school talent shows often attend and are very engaged with school events.",
      "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
      "People in this club who chaperone high school dances are not students who attend the school.",
      "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
      "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
    ],
    "question": "Bonnie performs in school talent shows often.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"PerformInSchoolTalentShows(x) ::: x performs in school talent shows\",\n        \"AttendSchoolEvents(x) ::: x attends school events\",\n        \"EngagedWithSchoolEvents(x) ::: x is very engaged with school events\",\n        \"InactiveCommunityMember(x) ::: x is an inactive and disinterested community member\",\n        \"ChaperoneHighSchoolDances(x) ::: x chaperones high school dances\",\n        \"Student(x) ::: x is a student\",\n        \"Young(x) ::: x is a young child\",\n        \"Teenager(x) ::: x is a teenager\",\n        \"WishToFurtherAcademicCareers(x) ::: x wishes to further their academic careers and educational opportunities\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((PerformInSchoolTalentShows(x) ∧ AttendSchoolEvents(x)) → EngagedWithSchoolEvents(x)) ::: People in this club who perform in school talent shows often attend and are very engaged with school events.\",\n        \"∀x ((PerformInSchoolTalentShows(x) ∨ (InactiveCommunityMember(x))) ::: People in this club either perform in school talent shows often or are inactive and disinterested community members.\",\n        \"∀x ((ChaperoneHighSchoolDances(x) → ¬Student(x)) ::: People in this club who chaperone high school dances are not students who attend the school.\",\n        \"∀x ((InactiveCommunityMember(x) → ChaperoneHighSchoolDances(x)) ::: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\",\n        \"∀x ((Young(x) ∨ Teenager(x)) → (WishToFurtherAcademicCareers(x) → Student(x))) ::: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\",\n        \"((AttendSchoolEvents(bonnie) ∧ EngagedWithSchoolEvents(bonnie) ∧ Student(bonnie)) ∨ (¬(AttendSchoolEvents(bonnie) ∧ EngagedWithSchoolEvents(bonnie)) ∧ ¬Student(bonnie))) ::: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\"\n    ],\n    \"First-Order-Logic Question\": \"PerformInSchoolTalentShows(bonnie) ::: Bonnie performs in school talent shows often.\"\n}"
    ]
  },
  {
    "id": 1015,
    "context": [
      "People in this club who perform in school talent shows often attend and are very engaged with school events.",
      "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
      "People in this club who chaperone high school dances are not students who attend the school.",
      "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
      "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
    ],
    "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"PerformInSchoolTalentShows(x) ::: x performs in school talent shows\",\n        \"AttendSchoolEvents(x) ::: x attends school events\",\n        \"EngagedWithSchoolEvents(x) ::: x is very engaged with school events\",\n        \"InactiveMember(x) ::: x is an inactive member\",\n        \"DisinterestedMember(x) ::: x is a disinterested member\",\n        \"ChaperoneHighSchoolDances(x) ::: x chaperones high school dances\",\n        \"Student(x) ::: x is a student\",\n        \"AttendSchool(x) ::: x attends the school\",\n        \"YoungChild(x) ::: x is a young child\",\n        \"Teenager(x) ::: x is a teenager\",\n        \"WishToFurtherCareer(x) ::: x wishes to further their academic career and educational opportunities\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((PerformInSchoolTalentShows(x) ∧ AttendSchoolEvents(x)) → EngagedWithSchoolEvents(x)) ::: People in this club who perform in school talent shows often attend and are very engaged with school events.\",\n        \"∀x ((PerformInSchoolTalentShows(x) ∨ (InactiveMember(x) ∧ DisinterestedMember(x))) ::: People in this club either perform in school talent shows often or are inactive and disinterested community members.\",\n        \"∀x ((ChaperoneHighSchoolDances(x) → ¬Student(x) ∧ ¬AttendSchool(x))) ::: People in this club who chaperone high school dances are not students who attend the school.\",\n        \"∀x ((InactiveMember(x) ∧ DisinterestedMember(x)) → ChaperoneHighSchoolDances(x)) ::: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\",\n        \"∀x ((YoungChild(x) ∨ Teenager(x)) → (WishToFurtherCareer(x) → (Student(x) ∧ AttendSchool(x)))) ::: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\",\n        \"((AttendSchoolEvents(bonnie) ∧ EngagedWithSchoolEvents(bonnie) ∧ Student(bonnie) ∧ AttendSchool(bonnie)) ∨ (¬(AttendSchoolEvents(bonnie) ∧ EngagedWithSchoolEvents(bonnie)) ∧ ¬Student(bonnie) ∧ ¬AttendSchool(bonnie))) ::: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\"\n    ],\n    \"First-Order-Logic Question\": \"((YoungChild(bonnie) ∨ Teenager(bonnie)) ∧ WishToFurtherCareer(bonnie) ∧ ChaperoneHighSchoolDances(bonnie)) ∨ (¬(YoungChild(bonnie) ∨ Teenager(bonnie)) ∧ ¬WishToFurtherCareer(bonnie)) → (Student(bonnie) ∧ AttendSchool(bonnie)) ∨ (InactiveMember(bonnie) ∧ DisinterestedMember(bonnie)) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\"\n}"
    ]
  },
  {
    "id": 1016,
    "context": [
      "People in this club who perform in school talent shows often attend and are very engaged with school events.",
      "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
      "People in this club who chaperone high school dances are not students who attend the school.",
      "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
      "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
    ],
    "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"PerformInSchoolTalentShows(x) ::: x performs in school talent shows\",\n        \"AttendSchoolEvents(x) ::: x attends school events\",\n        \"EngagedWithSchoolEvents(x) ::: x is very engaged with school events\",\n        \"InactiveMember(x) ::: x is an inactive member\",\n        \"DisinterestedMember(x) ::: x is a disinterested member\",\n        \"ChaperoneHighSchoolDances(x) ::: x chaperones high school dances\",\n        \"Student(x) ::: x is a student\",\n        \"AttendSchool(x) ::: x attends the school\",\n        \"WishToFurtherCareer(x) ::: x wishes to further their academic career and educational opportunities\",\n        \"YoungChild(x) ::: x is a young child\",\n        \"Teenager(x) ::: x is a teenager\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((PerformInSchoolTalentShows(x) ∧ AttendSchoolEvents(x)) → EngagedWithSchoolEvents(x)) ::: People in this club who perform in school talent shows often attend and are very engaged with school events.\",\n        \"∀x ((PerformInSchoolTalentShows(x) ∨ (InactiveMember(x) ∧ DisinterestedMember(x))) ::: People in this club either perform in school talent shows often or are inactive and disinterested community members.\",\n        \"∀x ((ChaperoneHighSchoolDances(x) → ¬Student(x)) ::: People in this club who chaperone high school dances are not students who attend the school.\",\n        \"∀x ((InactiveMember(x) ∧ DisinterestedMember(x)) → ChaperoneHighSchoolDances(x)) ::: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\",\n        \"∀x ((YoungChild(x) ∨ Teenager(x)) → (WishToFurtherCareer(x) ∧ Student(x) ∧ AttendSchool(x))) ::: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\",\n        \"((AttendSchoolEvents(bonnie) ∧ EngagedWithSchoolEvents(bonnie) ∧ Student(bonnie) ∧ AttendSchool(bonnie)) ∨ (¬(AttendSchoolEvents(bonnie) ∧ EngagedWithSchoolEvents(bonnie)) ∧ ¬Student(bonnie) ∧ ¬AttendSchool(bonnie))) ::: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\"\n    ],\n    \"First-Order-Logic Question\": \"((ChaperoneHighSchoolDances(bonnie) ∨ (¬ChaperoneHighSchoolDances(bonnie) ∧ PerformInSchoolTalentShows(bonnie))) → (WishToFurtherCareer(bonnie) ∧ Student(bonnie) ∧ AttendSchool(bonnie) ∧ InactiveMember(bonnie) ∧ DisinterestedMember(bonnie))) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\"\n}"
    ]
  },
  {
    "id": 1208,
    "context": [
      "All employees who schedule a meeting with their customers will go to the company building today. ",
      "Everyone who has lunch in the company building schedules meetings with their customers. ",
      "Employees have lunch either in the company building or at home.",
      "If an employee has lunch at home, they are working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James will appear in the company today if and only if he is a manager."
    ],
    "question": "James has lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ScheduleMeetingWith(x, y) ::: x schedules a meeting with y.\",\n        \"GoToBuildingToday(x) ::: x goes to the company building today.\",\n        \"HasLunchInBuilding(x) ::: x has lunch in the company building.\",\n        \"HasLunchAtHome(x) ::: x has lunch at home.\",\n        \"WorkRemotelyFromHome(x) ::: x works remotely from home.\",\n        \"InOtherCountries(x) ::: x is in other countries.\",\n        \"Manager(x) ::: x is a manager.\",\n        \"AppearInCompanyToday(x) ::: x appears in the company today.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ScheduleMeetingWith(x, customers) → GoToBuildingToday(x)) ::: All employees who schedule a meeting with their customers will go to the company building today.\",\n        \"∀x (HasLunchInBuilding(x) → ScheduleMeetingWith(x, customers)) ::: Everyone who has lunch in the company building schedules meetings with their customers.\",\n        \"∀x (HasLunchInBuilding(x) ∨ HasLunchAtHome(x)) ::: Employees have lunch either in the company building or at home.\",\n        \"∀x (HasLunchAtHome(x) → WorkRemotelyFromHome(x)) ::: If an employee has lunch at home, they are working remotely from home.\",\n        \"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x)) ::: All employees who are in other countries work remotely from home.\",\n        \"∀x (Manager(x) → ¬WorkRemotelyFromHome(x)) ::: No managers work remotely from home.\",\n        \"AppearInCompanyToday(james) ↔ Manager(james) ::: James will appear in the company today if and only if he is a manager.\"\n    ],\n    \"First-Order-Logic Question\": \"HasLunchInBuilding(james) ::: James has lunch in the company.\"\n}"
    ]
  },
  {
    "id": 1209,
    "context": [
      "All employees who schedule a meeting with their customers will go to the company building today. ",
      "Everyone who has lunch in the company building schedules meetings with their customers. ",
      "Employees have lunch either in the company building or at home.",
      "If an employee has lunch at home, they are working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James will appear in the company today if and only if he is a manager."
    ],
    "question": "James does not have lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ScheduleMeetingWith(x, y) ::: x schedules a meeting with y.\",\n        \"GoToBuildingToday(x) ::: x goes to the company building today.\",\n        \"HasLunchInBuilding(x) ::: x has lunch in the company building.\",\n        \"HasLunchAtHome(x) ::: x has lunch at home.\",\n        \"WorkRemotelyFromHome(x) ::: x works remotely from home.\",\n        \"InOtherCountries(x) ::: x is in other countries.\",\n        \"Manager(x) ::: x is a manager.\",\n        \"AppearInCompanyToday(x) ::: x appears in the company today.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ScheduleMeetingWith(x, customers) → GoToBuildingToday(x)) ::: All employees who schedule a meeting with their customers will go to the company building today.\",\n        \"∀x (HasLunchInBuilding(x) → ScheduleMeetingWith(x, customers)) ::: Everyone who has lunch in the company building schedules meetings with their customers.\",\n        \"∀x (HasLunchInBuilding(x) ∨ HasLunchAtHome(x)) ::: Employees have lunch either in the company building or at home.\",\n        \"∀x (HasLunchAtHome(x) → WorkRemotelyFromHome(x)) ::: If an employee has lunch at home, they are working remotely from home.\",\n        \"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x)) ::: All employees who are in other countries work remotely from home.\",\n        \"∀x (Manager(x) → ¬WorkRemotelyFromHome(x)) ::: No managers work remotely from home.\",\n        \"AppearInCompanyToday(james) ↔ Manager(james) ::: James will appear in the company today if and only if he is a manager.\"\n    ],\n    \"First-Order-Logic Question\": \"¬HasLunchInBuilding(james) ::: James does not have lunch in the company.\"\n}"
    ]
  },
  {
    "id": 1210,
    "context": [
      "All employees who schedule a meeting with their customers will go to the company building today. ",
      "Everyone who has lunch in the company building schedules meetings with their customers. ",
      "Employees have lunch either in the company building or at home.",
      "If an employee has lunch at home, they are working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James will appear in the company today if and only if he is a manager."
    ],
    "question": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"ScheduleMeetingWith(x, y) ::: x schedules a meeting with y.\", \"GoToBuildingToday(x) ::: x goes to the company building today.\", \"HasLunchInBuilding(x) ::: x has lunch in the company building.\", \"HasLunchAtHome(x) ::: x has lunch at home.\", \"WorkRemotelyFromHome(x) ::: x works remotely from home.\", \"InOtherCountries(x) ::: x is in other countries.\", \"IsManager(x) ::: x is a manager.\", \"AppearInCompanyToday(x) ::: x appears in the company today.\"],\n    \"First-Order-Logic Premises\": [\"∀x (ScheduleMeetingWith(x, customers) → GoToBuildingToday(x)) ::: All employees who schedule a meeting with their customers will go to the company building today.\", \"∀x (HasLunchInBuilding(x) → ScheduleMeetingWith(x, customers)) ::: Everyone who has lunch in the company building schedules meetings with their customers.\", \"∀x (HasLunchInBuilding(x) ∨ HasLunchAtHome(x)) ::: Employees have lunch either in the company building or at home.\", \"∀x (HasLunchAtHome(x) → WorkRemotelyFromHome(x)) ::: If an employee has lunch at home, they are working remotely from home.\", \"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x)) ::: All employees who are in other countries work remotely from home.\", \"∀x (IsManager(x) → ¬WorkRemotelyFromHome(x)) ::: No managers work remotely from home.\", \"AppearInCompanyToday(james) ↔ IsManager(james) ::: James will appear in the company today if and only if he is a manager.\"],\n    \"First-Order-Logic Question\": \"((IsManager(james) ∨ InOtherCountries(james)) → (¬HasLunchAtHome(james) ∧ ¬WorkRemotelyFromHome(james))) ∧ ((HasLunchAtHome(james) ∨ WorkRemotelyFromHome(james)) → (¬IsManager(james) ∧ ¬InOtherCountries(james)))\"\n}"
    ]
  },
  {
    "id": 563,
    "context": [
      "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
      "Monkeypox virus can occur in certain animals.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
      "People feel tired when they get the flu."
    ],
    "question": "There is an animal.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"OccurIn(x, y) ::: x occurs in y.\",\n        \"Get(x, y) ::: x gets y.\",\n        \"SymptomsInclude(x, y) ::: x symptoms include y.\",\n        \"Feel(x, y) ::: x feels y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (OccurIn(monkeypoxVirus, x) → Get(x, monkeypox)) ::: When the Monkeypox virus occurs in a being, it may get Monkeypox.\",\n        \"OccurIn(monkeypoxVirus, animals) ::: Monkeypox virus can occur in certain animals.\",\n        \"∀x (Humans(x) → Mammals(x)) ::: Humans are mammals.\",\n        \"∀x (Mammals(x) → Animals(x)) ::: Mammals are animals.\",\n        \"SymptomsInclude(monkeypox, fever) ∧ SymptomsInclude(monkeypox, headache) ∧ SymptomsInclude(monkeypox, musclePains) ∧ SymptomsInclude(monkeypox, tiredness) ::: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\",\n        \"∀x (Feel(people, tired) → Get(people, flu)) ::: People feel tired when they get the flu.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x Animals(x) ::: There is an animal.\"\n}"
    ]
  },
  {
    "id": 564,
    "context": [
      "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
      "Monkeypox virus can occur in certain animals.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
      "People feel tired when they get the flu."
    ],
    "question": "No one gets the flu.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"OccurIn(x, y) ::: x occurs in y.\",\n        \"Get(x, y) ::: y gets x.\",\n        \"Symptom(x, y) ::: x has symptom y.\",\n        \"Feel(x, y) ::: x feels y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (OccurIn(monkeypoxVirus, x) → Get(monkeypox, x)) ::: When the Monkeypox virus occurs in a being, it may get Monkeypox.\",\n        \"OccurIn(monkeypoxVirus, animals) ::: Monkeypox virus can occur in certain animals.\",\n        \"∀x (Humans(x) → Mammals(x)) ::: Humans are mammals.\",\n        \"∀x (Mammals(x) → Animals(x)) ::: Mammals are animals.\",\n        \"Symptom(monkeypox, fever) ∧ Symptom(monkeypox, headache) ∧ Symptom(monkeypox, musclePains) ∧ Symptom(monkeypox, tiredness) ::: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\",\n        \"∀x (Feel(x, tired) → Get(flu, x)) ::: People feel tired when they get the flu.\"\n    ],\n    \"First-Order-Logic Question\": \"¬∃x Get(flu, x) ::: No one gets the flu.\"\n}"
    ]
  },
  {
    "id": 565,
    "context": [
      "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
      "Monkeypox virus can occur in certain animals.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
      "People feel tired when they get the flu."
    ],
    "question": "Symptoms of Monkeypox include coughing.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"OccurIn(x, y) ::: x occurs in y.\",\n        \"Get(x, y) ::: x gets y.\",\n        \"SymptomOf(x, y) ::: x is a symptom of y.\",\n        \"Animal(x) ::: x is an animal.\",\n        \"Mammal(x) ::: x is a mammal.\",\n        \"Human(x) ::: x is a human.\",\n        \"Feel(x, y) ::: x feels y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (OccurIn(monkeypoxVirus, x) → Get(x, monkeypox)) ::: When the Monkeypox virus occurs in a being, it may get Monkeypox.\",\n        \"OccurIn(monkeypoxVirus, animals) ::: Monkeypox virus can occur in certain animals.\",\n        \"∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\",\n        \"∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\",\n        \"SymptomOf(fever, monkeypox) ∧ SymptomOf(headache, monkeypox) ∧ SymptomOf(musclePains, monkeypox) ∧ SymptomOf(tiredness, monkeypox) ::: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\",\n        \"∀x (Feel(x, tired) → Get(x, flu)) ::: People feel tired when they get the flu.\"\n    ],\n    \"First-Order-Logic Question\": \"¬SymptomOf(coughing, monkeypox) ::: Symptoms of Monkeypox include coughing.\"\n}"
    ]
  },
  {
    "id": 0,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is not a Gould's wild turkey.",
      "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Ocellated wild turkey.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WildTurkey(x) ::: x is a wild turkey\",\n        \"TypeOfWildTurkey(x, y) ::: x is a type of wild turkey y\",\n        \"EasternWildTurkey(x) ::: x is an Eastern wild turkey\",\n        \"OsceolaWildTurkey(x) ::: x is an Osceola wild turkey\",\n        \"GouldsWildTurkey(x) ::: x is a Gould's wild turkey\",\n        \"MerriamsWildTurkey(x) ::: x is a Merriam's wild turkey\",\n        \"RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey\",\n        \"OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"TypeOfWildTurkey(easternWildTurkey, wildTurkey) ∧ TypeOfWildTurkey(osceolaWildTurkey, wildTurkey) ∧ TypeOfWildTurkey(gouldsWildTurkey, wildTurkey) ∧ TypeOfWildTurkey(merriamsWildTurkey, wildTurkey) ∧ TypeOfWildTurkey(rioGrandeWildTurkey, wildTurkey) ∧ TypeOfWildTurkey(ocellatedWildTurkey, wildTurkey) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\",\n        \"¬EasternWildTurkey(tom) ::: Tom is not an Eastern wild turkey.\",\n        \"¬OsceolaWildTurkey(tom) ::: Tom is not an Osceola wild turkey.\",\n        \"¬GouldsWildTurkey(tom) ::: Tom is not a Gould's wild turkey.\",\n        \"¬(MerriamsWildTurkey(tom) ∨ RioGrandeWildTurkey(tom)) ::: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\",\n        \"WildTurkey(tom) ::: Tom is a wild turkey.\"\n    ],\n    \"First-Order-Logic Question\": \"OcellatedWildTurkey(tom) ::: Tom is an Ocellated wild turkey.\"\n}"
    ]
  },
  {
    "id": 1,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is not a Gould's wild turkey.",
      "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Eastern wild turkey.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsType(x, y) ::: x is of type y\",\n        \"IsWildTurkey(x) ::: x is a wild turkey\",\n        \"IsEasternWildTurkey(x) ::: x is an Eastern wild turkey\",\n        \"IsOsceolaWildTurkey(x) ::: x is an Osceola wild turkey\",\n        \"IsGouldsWildTurkey(x) ::: x is a Gould's wild turkey\",\n        \"IsMerriamsWildTurkey(x) ::: x is a Merriam's wild turkey\",\n        \"IsRioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey\",\n        \"IsOcellatedWildTurkey(x) ::: x is an Ocellated wild turkey\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsType(easternWildTurkey, wildTurkey) ∧ IsType(osceolaWildTurkey, wildTurkey) ∧ IsType(gouldsWildTurkey, wildTurkey) ∧ IsType(merriamsWildTurkey, wildTurkey) ∧ IsType(rioGrandeWildTurkey, wildTurkey) ∧ IsType(ocellatedWildTurkey, wildTurkey) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\",\n        \"¬IsEasternWildTurkey(tom) ::: Tom is not an Eastern wild turkey.\",\n        \"¬IsOsceolaWildTurkey(tom) ::: Tom is not an Osceola wild turkey.\",\n        \"¬IsGouldsWildTurkey(tom) ::: Tom is not a Gould's wild turkey.\",\n        \"¬(IsMerriamsWildTurkey(tom) ∨ IsRioGrandeWildTurkey(tom)) ::: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\",\n        \"IsWildTurkey(tom) ::: Tom is a wild turkey.\"\n    ],\n    \"First-Order-Logic Question\": \"IsEasternWildTurkey(tom) ::: Tom is an Eastern wild turkey.\"\n}"
    ]
  },
  {
    "id": 2,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is not a Gould's wild turkey.",
      "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Joey is a wild turkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WildTurkey(x) ::: x is a wild turkey.\",\n        \"TypeOfTurkey(x, y) ::: x is a type of y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"TypeOfTurkey(easternWildTurkey, wildTurkey) ∧ TypeOfTurkey(osceolaWildTurkey, wildTurkey) ∧ TypeOfTurkey(gouldsWildTurkey, wildTurkey) ∧ TypeOfTurkey(merrimsWildTurkey, wildTurkey) ∧ TypeOfTurkey(rioGrandeWildTurkey, wildTurkey) ∧ TypeOfTurkey(ocellatedWildTurkey, wildTurkey) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\",\n        \"¬TypeOfTurkey(tom, easternWildTurkey) ::: Tom is not an Eastern wild turkey.\",\n        \"¬TypeOfTurkey(tom, osceolaWildTurkey) ::: Tom is not an Osceola wild turkey.\",\n        \"¬TypeOfTurkey(tom, gouldsWildTurkey) ::: Tom is not a Gould's wild turkey.\",\n        \"¬(TypeOfTurkey(tom, merrimsWildTurkey) ∨ TypeOfTurkey(tom, rioGrandeWildTurkey)) ::: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\",\n        \"WildTurkey(tom) ::: Tom is a wild turkey.\"\n    ],\n    \"First-Order-Logic Question\": \"WildTurkey(joey) ::: Joey is a wild turkey.\"\n}"
    ]
  },
  {
    "id": 57,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games on the Top 10 list are made by Japanese game companies.",
      "If a game sells more than one million copies, then it will be included in the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is on the Top 10 list.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CreateGame(x, y) ::: x created the game y.\",\n        \"MadeByJapaneseCompany(x) ::: x is made by a Japanese game company.\",\n        \"SellMoreThanOneMillionCopies(x) ::: x sells more than one million copies.\",\n        \"IncludedInTop10List(x) ::: x is included in the Top 10 list.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"CreateGame(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\",\n        \"∀x ((MadeByJapaneseCompany(x) → IncludedInTop10List(x))) ::: All games on the Top 10 list are made by Japanese game companies.\",\n        \"∀x ((SellMoreThanOneMillionCopies(x) → IncludedInTop10List(x))) ::: If a game sells more than one million copies, then it will be included in the Top 10 list.\",\n        \"SellMoreThanOneMillionCopies(legendOfZelda) ::: The Legend of Zelda sold more than one million copies.\"\n    ],\n    \"First-Order-Logic Question\": \"IncludedInTop10List(legendOfZelda) ::: The Legend of Zelda is on the Top 10 list.\"\n}"
    ]
  },
  {
    "id": 58,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games on the Top 10 list are made by Japanese game companies.",
      "If a game sells more than one million copies, then it will be included in the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CreateGame(x, y) ::: x created the game y.\",\n        \"MadeByJapaneseCompany(x) ::: x is made by a Japanese company.\",\n        \"SellMoreThanOneMillionCopies(x) ::: x sells more than one million copies.\",\n        \"IncludedInTop10List(x) ::: x is included in the Top 10 list.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"CreateGame(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\",\n        \"∀x ((MadeByJapaneseCompany(x) → IncludedInTop10List(x))) ::: All games on the Top 10 list are made by Japanese game companies.\",\n        \"∀x ((SellMoreThanOneMillionCopies(x) → IncludedInTop10List(x))) ::: If a game sells more than one million copies, then it will be included in the Top 10 list.\",\n        \"SellMoreThanOneMillionCopies(legendOfZelda) ::: The Legend of Zelda sold more than one million copies.\"\n    ],\n    \"First-Order-Logic Question\": \"MadeByJapaneseCompany(fifa22) ::: FIFA 22 is made by a Japanese video game company.\"\n}"
    ]
  },
  {
    "id": 59,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games on the Top 10 list are made by Japanese game companies.",
      "If a game sells more than one million copies, then it will be included in the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is not on the Top 10 list.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CreateGame(x, y) ::: x created the game y.\",\n        \"MadeByJapaneseCompany(x) ::: x is made by a Japanese game company.\",\n        \"SellMoreThanOneMillionCopies(x) ::: x sells more than one million copies.\",\n        \"IncludedInTop10List(x) ::: x is included in the Top 10 list.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"CreateGame(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\",\n        \"∀x ((MadeByJapaneseCompany(x) → IncludedInTop10List(x))) ::: All games on the Top 10 list are made by Japanese game companies.\",\n        \"∀x ((SellMoreThanOneMillionCopies(x) → IncludedInTop10List(x))) ::: If a game sells more than one million copies, then it will be included in the Top 10 list.\",\n        \"SellMoreThanOneMillionCopies(legendOfZelda) ::: The Legend of Zelda sold more than one million copies.\"\n    ],\n    \"First-Order-Logic Question\": \"¬IncludedInTop10List(legendOfZelda) ::: The Legend of Zelda is not on the Top 10 list.\"\n}"
    ]
  },
  {
    "id": 726,
    "context": [
      "All squares are four-sided.",
      "All four-sided things are shapes. "
    ],
    "question": "All squares are shapes.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Square(x) ::: x is a square\", \"FourSided(x) ::: x is four-sided\", \"Shape(x) ::: x is a shape\"],\n    \"First-Order-Logic Premises\": [\"∀x (Square(x) → FourSided(x)) ::: All squares are four-sided.\", \"∀x (FourSided(x) → Shape(x)) ::: All four-sided things are shapes.\"],\n    \"First-Order-Logic Question\": \"∀x (Square(x) → Shape(x)) ::: All squares are shapes.\"\n}"
    ]
  },
  {
    "id": 1361,
    "context": [
      "All rabbits that can be spotted near the campus are cute. ",
      "Some turtles can be spotted near the campus. ",
      "The only animals that can be spotted near the campus are rabbits and squirrels.",
      "If something is skittish, then it is not calm.",
      "All the squirrels that can be spotted near the campus are skittish.",
      "Rockie can be spotted near the campus, and it is calm."
    ],
    "question": "Rockie is a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanBeSpottedNearCampus(x) ::: x can be spotted near the campus.\",\n        \"Cute(x) ::: x is cute.\",\n        \"Turtle(x) ::: x is a turtle.\",\n        \"Rabbit(x) ::: x is a rabbit.\",\n        \"Squirrel(x) ::: x is a squirrel.\",\n        \"Skittish(x) ::: x is skittish.\",\n        \"Calm(x) ::: x is calm.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Rabbit(x) ∧ CanBeSpottedNearCampus(x)) → Cute(x)) ::: All rabbits that can be spotted near the campus are cute.\",\n        \"∃x (Turtle(x) ∧ CanBeSpottedNearCampus(x)) ::: Some turtles can be spotted near the campus.\",\n        \"∀x ((CanBeSpottedNearCampus(x)) → (Rabbit(x) ∨ Squirrel(x))) ::: The only animals that can be spotted near the campus are rabbits and squirrels.\",\n        \"∀x (Skittish(x) → ¬Calm(x)) ::: If something is skittish, then it is not calm.\",\n        \"∀x ((Squirrel(x) ∧ CanBeSpottedNearCampus(x)) → Skittish(x)) ::: All the squirrels that can be spotted near the campus are skittish.\",\n        \"CanBeSpottedNearCampus(rockie) ∧ Calm(rockie) ::: Rockie can be spotted near the campus, and it is calm.\"\n    ],\n    \"First-Order-Logic Question\": \"Turtle(rockie) ::: Rockie is a turtle.\"\n}"
    ]
  },
  {
    "id": 1362,
    "context": [
      "All rabbits that can be spotted near the campus are cute. ",
      "Some turtles can be spotted near the campus. ",
      "The only animals that can be spotted near the campus are rabbits and squirrels.",
      "If something is skittish, then it is not calm.",
      "All the squirrels that can be spotted near the campus are skittish.",
      "Rockie can be spotted near the campus, and it is calm."
    ],
    "question": "Rockie is not a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanBeSpottedNearCampus(x) ::: x can be spotted near the campus.\",\n        \"Cute(x) ::: x is cute.\",\n        \"Turtle(x) ::: x is a turtle.\",\n        \"Rabbit(x) ::: x is a rabbit.\",\n        \"Squirrel(x) ::: x is a squirrel.\",\n        \"Skittish(x) ::: x is skittish.\",\n        \"Calm(x) ::: x is calm.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Rabbit(x) ∧ CanBeSpottedNearCampus(x)) → Cute(x)) ::: All rabbits that can be spotted near the campus are cute.\",\n        \"∃x (Turtle(x) ∧ CanBeSpottedNearCampus(x)) ::: Some turtles can be spotted near the campus.\",\n        \"∀x ((CanBeSpottedNearCampus(x)) → (Rabbit(x) ∨ Squirrel(x))) ::: The only animals that can be spotted near the campus are rabbits and squirrels.\",\n        \"∀x (Skittish(x) → ¬Calm(x)) ::: If something is skittish, then it is not calm.\",\n        \"∀x ((Squirrel(x) ∧ CanBeSpottedNearCampus(x)) → Skittish(x)) ::: All the squirrels that can be spotted near the campus are skittish.\",\n        \"CanBeSpottedNearCampus(rockie) ∧ Calm(rockie) ::: Rockie can be spotted near the campus, and it is calm.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Turtle(rockie) ::: Rockie is not a turtle.\"\n}"
    ]
  },
  {
    "id": 1363,
    "context": [
      "All rabbits that can be spotted near the campus are cute. ",
      "Some turtles can be spotted near the campus. ",
      "The only animals that can be spotted near the campus are rabbits and squirrels.",
      "If something is skittish, then it is not calm.",
      "All the squirrels that can be spotted near the campus are skittish.",
      "Rockie can be spotted near the campus, and it is calm."
    ],
    "question": "Rockie is a turtle or cute.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanBeSpottedNearCampus(x) ::: x can be spotted near the campus.\",\n        \"Cute(x) ::: x is cute.\",\n        \"Turtle(x) ::: x is a turtle.\",\n        \"Rabbit(x) ::: x is a rabbit.\",\n        \"Skittish(x) ::: x is skittish.\",\n        \"Calm(x) ::: x is calm.\",\n        \"Squirrel(x) ::: x is a squirrel.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Rabbit(x) ∧ CanBeSpottedNearCampus(x)) → Cute(x)) ::: All rabbits that can be spotted near the campus are cute.\",\n        \"∃x (Turtle(x) ∧ CanBeSpottedNearCampus(x)) ::: Some turtles can be spotted near the campus.\",\n        \"∀x ((Rabbit(x) ∨ Squirrel(x)) ∧ CanBeSpottedNearCampus(x)) ::: The only animals that can be spotted near the campus are rabbits and squirrels.\",\n        \"∀x (Skittish(x) → ¬Calm(x)) ::: If something is skittish, then it is not calm.\",\n        \"∀x ((Squirrel(x) ∧ CanBeSpottedNearCampus(x)) → Skittish(x)) ::: All the squirrels that can be spotted near the campus are skittish.\",\n        \"CanBeSpottedNearCampus(rockie) ∧ Calm(rockie) ::: Rockie can be spotted near the campus, and it is calm.\"\n    ],\n    \"First-Order-Logic Question\": \"(Turtle(rockie) ∨ Cute(rockie)) ::: Rockie is a turtle or cute.\"\n}"
    ]
  },
  {
    "id": 1364,
    "context": [
      "All rabbits that can be spotted near the campus are cute. ",
      "Some turtles can be spotted near the campus. ",
      "The only animals that can be spotted near the campus are rabbits and squirrels.",
      "If something is skittish, then it is not calm.",
      "All the squirrels that can be spotted near the campus are skittish.",
      "Rockie can be spotted near the campus, and it is calm."
    ],
    "question": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanSpot(x, y) ::: x can be spotted near the campus is y.\",\n        \"Cute(x) ::: x is cute.\",\n        \"Turtle(x) ::: x is a turtle.\",\n        \"Rabbit(x) ::: x is a rabbit.\",\n        \"Squirrel(x) ::: x is a squirrel.\",\n        \"Skittish(x) ::: x is skittish.\",\n        \"Calm(x) ::: x is calm.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Rabbit(x) ∧ CanSpot(x, campus) → Cute(x)) ::: All rabbits that can be spotted near the campus are cute.\",\n        \"∃x (Turtle(x) ∧ CanSpot(x, campus)) ::: Some turtles can be spotted near the campus.\",\n        \"∀x ((Rabbit(x) ∨ Squirrel(x)) ∧ CanSpot(x, campus) → (Rabbit(x) ∨ Squirrel(x))) ::: The only animals that can be spotted near the campus are rabbits and squirrels.\",\n        \"∀x (Skittish(x) → ¬Calm(x)) ::: If something is skittish, then it is not calm.\",\n        \"∀x (Squirrel(x) ∧ CanSpot(x, campus) → Skittish(x)) ::: All the squirrels that can be spotted near the campus are skittish.\",\n        \"CanSpot(rockie, campus) ∧ Calm(rockie) ::: Rockie can be spotted near the campus, and it is calm.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(Turtle(rockie) ∧ Squirrel(rockie)) → (Cute(rockie) ∨ Skittish(rockie)) ::: If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\"\n}"
    ]
  },
  {
    "id": 1365,
    "context": [
      "All rabbits that can be spotted near the campus are cute. ",
      "Some turtles can be spotted near the campus. ",
      "The only animals that can be spotted near the campus are rabbits and squirrels.",
      "If something is skittish, then it is not calm.",
      "All the squirrels that can be spotted near the campus are skittish.",
      "Rockie can be spotted near the campus, and it is calm."
    ],
    "question": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"CanBeSpottedNear(x, y) ::: x can be spotted near y.\", \"Cute(x) ::: x is cute.\", \"Turtle(x) ::: x is a turtle.\", \"Rabbit(x) ::: x is a rabbit.\", \"Squirrel(x) ::: x is a squirrel.\", \"Skittish(x) ::: x is skittish.\", \"Calm(x) ::: x is calm.\"],\n    \"First-Order-Logic Premises\": [\"∀x ((Rabbit(x) ∧ CanBeSpottedNear(x, campus)) → Cute(x)) ::: All rabbits that can be spotted near the campus are cute.\", \"∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus)) ::: Some turtles can be spotted near the campus.\", \"∀x ((Rabbit(x) ∨ Squirrel(x)) ∧ CanBeSpottedNear(x, campus)) ::: The only animals that can be spotted near the campus are rabbits and squirrels.\", \"∀x (Skittish(x) → ¬Calm(x)) ::: If something is skittish, then it is not calm.\", \"∀x ((Squirrel(x) ∧ CanBeSpottedNear(x, campus)) → Skittish(x)) ::: All the squirrels that can be spotted near the campus are skittish.\", \"CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) ::: Rockie can be spotted near the campus, and it is calm.\"],\n    \"First-Order-Logic Question\": \"(Cute(rockie) ∧ Calm(rockie)) → (Skittish(rockie) ∧ Turtle(rockie)) ::: If Rockie is cute and calm, then Rockie is a skittish turtle.\"\n}"
    ]
  },
  {
    "id": 530,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror.\"",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it with Lisa."
    ],
    "question": "Karen will share \"Stranger Things\" with Lisa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsDependentOn(x, y) ::: x is dependent on y.\", \"DrinkRegularly(x, y) ::: x regularly drinks y.\", \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\", \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\", \"Student(x) ::: x is a student.\", \"Czech(x) ::: x is czech\", \"ChoralConductor(x) ::: x is a choral conductor\", \"SpecializeInPerformanceOf(x, y) ::: x Specializes in the performance of y\", \"Musician(x) ::: x is a musician\", \"Love(x, y) ::: x loves y\", \"PublishedBook(x, y) ::: x published the book y\"],\n    \"First-Order-Logic Premises\": [\"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\", \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\", \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\", \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\", \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\", \"Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic) ::: Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\", \"∀x (ChoralConductor(x) → Musician(x)) ::: Any choral conductor is a musician.\", \"∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music))) ::: Some musicians love music.\", \"PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946) ::: Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.\", \"¬Download(karen, blackMirror) ::: Karen does not download Black Mirror.\", \"NetflixShow(blackMirror) ::: Black Mirror is a Netflix show.\", \"∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\", \"∀x ((BingeWatch(karen, x)) ↔ Download(karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\", \"∀x ((BingeWatch(karen, x)) → Share(karen, lisa, x)) ::: If Karen binge-watches a Netflix show, she will share it with Lisa.\"],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 531,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror.\"",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it with Lisa."
    ],
    "question": "\"Black Mirror\" is popular.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPopular(x) ::: x is popular\",\n        \"BingeWatch(x, y) ::: x binge-watches y\",\n        \"Download(x, y) ::: x downloads y\",\n        \"NetflixShow(x) ::: x is a Netflix show\",\n        \"ShareWith(x, y) ::: x shares with y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsPopular(strangerThings) ::: \\\"Stranger Things\\\" is a popular Netflix show.\",\n        \"∀x ((IsPopular(x) → BingeWatch(karen, x))) ::: If a Netflix show is popular, Karen will binge-watch it.\",\n        \"∀x ((BingeWatch(karen, x) ↔ Download(karen, x))) ::: If and only if Karen binge-watches a Netflix show, she will download it.\",\n        \"¬Download(karen, blackMirror) ::: Karen does not download \\\"Black Mirror.\\\"\",\n        \"NetflixShow(blackMirror) ::: \\\"Black Mirror\\\" is a Netflix show.\",\n        \"∀x ((BingeWatch(karen, x) → ShareWith(karen, lisa))) ::: If Karen binge-watches a Netflix show, she will share it with Lisa.\"\n    ],\n    \"First-Order-Logic Question\": \"IsPopular(blackMirror) ::: \\\"Black Mirror\\\" is popular.\"\n}"
    ]
  },
  {
    "id": 532,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror.\"",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it with Lisa."
    ],
    "question": "Karen will share \"Black Mirror\" with Lisa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPopular(x) ::: x is popular\",\n        \"BingeWatch(x, y) ::: x binge-watches y\",\n        \"Download(x, y) ::: x downloads y\",\n        \"NetflixShow(x) ::: x is a Netflix show\",\n        \"ShareWith(x, y, z) ::: x shares y with z\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsPopular(StrangerThings) ::: \\\"Stranger Things\\\" is a popular Netflix show.\",\n        \"∀x ((IsPopular(x) → BingeWatch(Karen, x))) ::: If a Netflix show is popular, Karen will binge-watch it.\",\n        \"∀x ((BingeWatch(Karen, x) ↔ Download(Karen, x))) ::: If and only if Karen binge-watches a Netflix show, she will download it.\",\n        \"¬Download(Karen, BlackMirror) ::: Karen does not download \\\"Black Mirror.\\\"\",\n        \"NetflixShow(BlackMirror) ::: \\\"Black Mirror\\\" is a Netflix show.\",\n        \"∀x ((BingeWatch(Karen, x) → ShareWith(Karen, x, Lisa))) ::: If Karen binge-watches a Netflix show, she will share it with Lisa.\"\n    ],\n    \"First-Order-Logic Question\": \"ShareWith(Karen, BlackMirror, Lisa) ::: Karen will share \\\"Black Mirror\\\" with Lisa.\"\n}"
    ]
  },
  {
    "id": 657,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the capital city of the world's most populous nation.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
      "Many of Beijing's 91 universities consistently rank among the best universities in the world."
    ],
    "question": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsCapitalOf(x, y) ::: x is the capital of y.\", \"IsLocatedIn(x, y) ::: x is located in y.\", \"HostedEvent(x, y) ::: x hosted the event y.\", \"RankAmongBest(x, y) ::: x ranks among the best in y.\"],\n    \"First-Order-Logic Premises\": [\"IsCapitalOf(beijing, peoplesRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\", \"IsCapitalOf(beijing, worldsMostPopulousNation) ::: Beijing is the capital city of the world's most populous nation.\", \"IsLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\", \"HostedEvent(beijing, 2008SummerOlympics) ∧ HostedEvent(beijing, 2008SummerParalympics) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\", \"HostedEvent(beijing, summerOlympics) ∧ HostedEvent(beijing, winterOlympics) ∧ HostedEvent(beijing, summerParalympics) ∧ HostedEvent(beijing, winterParalympics) ::: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\", \"∀x (RankAmongBest(beijingsUniversities, world) ∧ RankAmongBest(beijingsUniversities, universities)) ::: Many of Beijing's 91 universities consistently rank among the best universities in the world.\"],\n    \"First-Order-Logic Question\": \"HostedEvent(beijing, 2008SummerOlympics) ∧ HostedEvent(beijing, winterOlympics) ::: Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.\"\n}"
    ]
  },
  {
    "id": 658,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the capital city of the world's most populous nation.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
      "Many of Beijing's 91 universities consistently rank among the best universities in the world."
    ],
    "question": "Beijing is located in southern China.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsCapitalOf(x, y) ::: x is the capital of y.\",\n        \"IsLocatedIn(x, y) ::: x is located in y.\",\n        \"Hosted(x, y) ::: x hosted the event y.\",\n        \"RankAmongBest(x) ::: x consistently ranks among the best universities in the world.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsCapitalOf(beijing, peoplesRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\",\n        \"IsCapitalCityOf(beijing, mostPopulousNation) ::: Beijing is the capital city of the world's most populous nation.\",\n        \"IsLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\",\n        \"Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympics) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\",\n        \"Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympics) ∧ Hosted(beijing, winterParalympics) ::: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\",\n        \"∀x (RankAmongBest(x) → IsUniversity(x)) ::: Many of Beijing's 91 universities consistently rank among the best universities in the world.\"\n    ],\n    \"First-Order-Logic Question\": \"¬IsLocatedIn(beijing, southernChina) ::: Beijing is not located in southern China.\"\n}"
    ]
  },
  {
    "id": 659,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the capital city of the world's most populous nation.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
      "Many of Beijing's 91 universities consistently rank among the best universities in the world."
    ],
    "question": "Beijing is the second largest Chinese city.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsCapitalOf(x, y) ::: x is the capital of y.\",\n        \"IsCapitalCityOf(x, y) ::: x is the capital city of y.\",\n        \"IsLocatedIn(x, y) ::: x is located in y.\",\n        \"HostedOlympics(x, y) ::: x hosted the Olympics in year y.\",\n        \"RankAmongBest(x, y) ::: x ranks among the best in category y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsCapitalOf(beijing, china) ::: Beijing is the capital of the People's Republic of China.\",\n        \"IsCapitalCityOf(beijing, populousNation) ::: Beijing is the capital city of the world's most populous nation.\",\n        \"IsLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\",\n        \"HostedOlympics(beijing, 2008) ∧ HostedOlympics(beijing, 2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\",\n        \"HostedOlympics(beijing, summer) ∧ HostedOlympics(beijing, winter) ∧ HostedOlympics(beijing, summer) ∧ HostedOlympics(beijing, winter) ::: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\",\n        \"∃x (RankAmongBest(beijingUniversities, worldUniversities)) ::: Many of Beijing's 91 universities consistently rank among the best universities in the world.\"\n    ],\n    \"First-Order-Logic Question\": \"¬IsSecondLargestCity(beijing, china) ::: Beijing is not the second largest Chinese city.\"\n}"
    ]
  },
  {
    "id": 1301,
    "context": [
      "All aliens are extraterrestrials.",
      "If someone is from Mars, then they are an alien.",
      "No extraterrestrials are human.",
      "All highly intelligent beings from Earth are humans.",
      "Marvin is a highly intelligent being.",
      "Marvin is either from Earth and from Mars, or he is from neither.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is an alien.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Alien(x) ::: x is an alien.\",\n        \"Extraterrestrial(x) ::: x is an extraterrestrial.\",\n        \"FromMars(x) ::: x is from Mars.\",\n        \"Human(x) ::: x is a human.\",\n        \"HighlyIntelligentBeing(x) ::: x is a highly intelligent being.\",\n        \"FromEarth(x) ::: x is from Earth.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrials.\",\n        \"∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are an alien.\",\n        \"∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrials are human.\",\n        \"∀x (HighlyIntelligentBeing(x) ∧ FromEarth(x) → Human(x)) ::: All highly intelligent beings from Earth are humans.\",\n        \"HighlyIntelligentBeing(marvin) ::: Marvin is a highly intelligent being.\",\n        \"¬((FromEarth(marvin) ∧ FromMars(marvin)) ⊕ ¬(FromEarth(marvin) ∨ FromMars(marvin))) ::: Marvin is either from Earth and from Mars, or he is from neither.\",\n        \"¬FromEarth(marvin) → Alien(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\"\n    ],\n    \"First-Order-Logic Question\": \"Alien(marvin) ::: Marvin is an alien.\"\n}"
    ]
  },
  {
    "id": 1302,
    "context": [
      "All aliens are extraterrestrials.",
      "If someone is from Mars, then they are an alien.",
      "No extraterrestrials are human.",
      "All highly intelligent beings from Earth are humans.",
      "Marvin is a highly intelligent being.",
      "Marvin is either from Earth and from Mars, or he is from neither.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is neither a human nor from Mars.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Alien(x) ::: x is an alien.\",\n        \"Extraterrestrial(x) ::: x is an extraterrestrial.\",\n        \"FromMars(x) ::: x is from Mars.\",\n        \"Human(x) ::: x is a human.\",\n        \"HighlyIntelligentBeing(x) ::: x is a highly intelligent being.\",\n        \"FromEarth(x) ::: x is from Earth.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrials.\",\n        \"∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are an alien.\",\n        \"∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrials are human.\",\n        \"∀x (HighlyIntelligentBeing(x) ∧ FromEarth(x) → Human(x)) ::: All highly intelligent beings from Earth are humans.\",\n        \"HighlyIntelligentBeing(marvin) ::: Marvin is a highly intelligent being.\",\n        \"¬((FromEarth(marvin) ∧ FromMars(marvin)) ⊕ ¬(FromEarth(marvin) ∨ FromMars(marvin))) ::: Marvin is either from Earth and from Mars, or he is from neither.\",\n        \"¬(¬FromEarth(marvin) → Alien(marvin)) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Human(marvin) ∧ ¬FromMars(marvin) ::: Marvin is neither a human nor from Mars.\"\n}"
    ]
  },
  {
    "id": 1303,
    "context": [
      "All aliens are extraterrestrials.",
      "If someone is from Mars, then they are an alien.",
      "No extraterrestrials are human.",
      "All highly intelligent beings from Earth are humans.",
      "Marvin is a highly intelligent being.",
      "Marvin is either from Earth and from Mars, or he is from neither.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "If Marvin is not from Mars, then Marvin is a human.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Alien(x) ::: x is an alien\",\n        \"Extraterrestrial(x) ::: x is an extraterrestrial\",\n        \"FromMars(x) ::: x is from Mars\",\n        \"Human(x) ::: x is a human\",\n        \"HighlyIntelligentBeing(x) ::: x is a highly intelligent being\",\n        \"FromEarth(x) ::: x is from Earth\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrials.\",\n        \"∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are an alien.\",\n        \"∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrials are human.\",\n        \"∀x ((HighlyIntelligentBeing(x) ∧ FromEarth(x)) → Human(x)) ::: All highly intelligent beings from Earth are humans.\",\n        \"HighlyIntelligentBeing(marvin) ::: Marvin is a highly intelligent being.\",\n        \"¬((FromEarth(marvin) ∧ FromMars(marvin)) ⊕ ¬(FromEarth(marvin) ∧ ¬FromMars(marvin))) ::: Marvin is either from Earth and from Mars, or he is from neither.\",\n        \"¬FromEarth(marvin) → Alien(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\"\n    ],\n    \"First-Order-Logic Question\": \"¬FromMars(marvin) → Human(marvin) ::: If Marvin is not from Mars, then Marvin is a human.\"\n}"
    ]
  },
  {
    "id": 893,
    "context": [
      "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
      "Every Grand Slam champion at the mixer is a professional tennis player.",
      "All Oscar-nominated actors at the mixer are celebrities.",
      "All professional tennis players at the mixer are athletes.",
      "If a person at the mixer is a celebrity, then they are well paid.",
      "If a person at the mixer is an athlete, then they are famous.",
      "All well-paid people at the mixer live in tax havens.",
      "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
    ],
    "question": "Djokovic is a Grand Slam champion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsGrandSlamChampion(x)\", \"IsOscarNominatedActor(x)\", \"IsProfessionalTennisPlayer(x)\", \"IsCelebrity(x)\", \"IsAthlete(x)\", \"IsWellPaid(x)\", \"LiveInTaxHavens(x)\", \"IsFamous(x)\", \"IsAtMixer(x)\", \"Djokovic\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsAtMixer(x) → (IsGrandSlamChampion(x) ∨ IsOscarNominatedActor(x)))\", \"∀x ((IsGrandSlamChampion(x) ∧ IsAtMixer(x)) → IsProfessionalTennisPlayer(x))\", \"∀x ((IsOscarNominatedActor(x) ∧ IsAtMixer(x)) → IsCelebrity(x))\", \"∀x ((IsProfessionalTennisPlayer(x) ∧ IsAtMixer(x)) → IsAthlete(x))\", \"∀x ((IsCelebrity(x) ∧ IsAtMixer(x)) → IsWellPaid(x))\", \"∀x ((IsAthlete(x) ∧ IsAtMixer(x)) → IsFamous(x))\", \"∀x ((IsWellPaid(x) ∧ IsAtMixer(x)) → LiveInTaxHavens(x))\", \"(IsAtMixer(Djokovic) → (IsFamous(Djokovic) ∧ IsAthlete(Djokovic) → IsWellPaid(Djokovic)))\"],\n    \"First-Order-Logic Question\": \"IsGrandSlamChampion(Djokovic)\"\n}"
    ]
  },
  {
    "id": 894,
    "context": [
      "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
      "Every Grand Slam champion at the mixer is a professional tennis player.",
      "All Oscar-nominated actors at the mixer are celebrities.",
      "All professional tennis players at the mixer are athletes.",
      "If a person at the mixer is a celebrity, then they are well paid.",
      "If a person at the mixer is an athlete, then they are famous.",
      "All well-paid people at the mixer live in tax havens.",
      "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
    ],
    "question": "Djokovic lives in a tax haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsGrandSlamChampion(x)\", \"IsOscarNominatedActor(x)\", \"IsProfessionalTennisPlayer(x)\", \"IsCelebrity(x)\", \"IsAthlete(x)\", \"IsWellPaid(x)\", \"LiveInTaxHaven(x)\", \"IsFamous(x)\", \"IsAtMixer(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsAtMixer(x) → (IsGrandSlamChampion(x) ∨ IsOscarNominatedActor(x)))\", \"∀x ((IsGrandSlamChampion(x) ∧ IsAtMixer(x)) → IsProfessionalTennisPlayer(x))\", \"∀x ((IsOscarNominatedActor(x) ∧ IsAtMixer(x)) → IsCelebrity(x))\", \"∀x ((IsProfessionalTennisPlayer(x) ∧ IsAtMixer(x)) → IsAthlete(x))\", \"∀x ((IsCelebrity(x) ∧ IsAtMixer(x)) → IsWellPaid(x))\", \"∀x ((IsAthlete(x) ∧ IsAtMixer(x)) → IsFamous(x))\", \"∀x ((IsWellPaid(x) ∧ IsAtMixer(x)) → LiveInTaxHaven(x))\", \"IsAtMixer(djokovic) → ((IsFamous(djokovic) ∧ IsAthlete(djokovic)) → IsWellPaid(djokovic))\"],\n    \"First-Order-Logic Question\": \"LiveInTaxHaven(djokovic) ::: Djokovic lives in a tax haven.\"\n}"
    ]
  },
  {
    "id": 895,
    "context": [
      "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
      "Every Grand Slam champion at the mixer is a professional tennis player.",
      "All Oscar-nominated actors at the mixer are celebrities.",
      "All professional tennis players at the mixer are athletes.",
      "If a person at the mixer is a celebrity, then they are well paid.",
      "If a person at the mixer is an athlete, then they are famous.",
      "All well-paid people at the mixer live in tax havens.",
      "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
    ],
    "question": "Djokovic does not live in a tax haven.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsGrandSlamChampion(x)\", \"IsOscarNominatedActor(x)\", \"IsProfessionalTennisPlayer(x)\", \"IsCelebrity(x)\", \"IsAthlete(x)\", \"IsWellPaid(x)\", \"LiveInTaxHaven(x)\", \"IsFamousAthlete(x)\", \"IsAtMixer(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsAtMixer(x) → (IsGrandSlamChampion(x) ∨ IsOscarNominatedActor(x)))\", \"∀x ((IsGrandSlamChampion(x) ∧ IsAtMixer(x)) → IsProfessionalTennisPlayer(x))\", \"∀x ((IsOscarNominatedActor(x) ∧ IsAtMixer(x)) → IsCelebrity(x))\", \"∀x ((IsProfessionalTennisPlayer(x) ∧ IsAtMixer(x)) → IsAthlete(x))\", \"∀x ((IsCelebrity(x) ∧ IsAtMixer(x)) → IsWellPaid(x))\", \"∀x ((IsAthlete(x) ∧ IsAtMixer(x)) → IsFamousAthlete(x))\", \"∀x ((IsWellPaid(x) ∧ IsAtMixer(x)) → LiveInTaxHaven(x))\", \"IsAtMixer(djokovic) → (IsFamousAthlete(djokovic) → IsWellPaid(djokovic))\"],\n    \"First-Order-Logic Question\": \"¬LiveInTaxHaven(djokovic)\"\n}"
    ]
  },
  {
    "id": 289,
    "context": [
      "Diamond Mine is a professional wrestling stable formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick Strong leads a professional wrestling stable.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsDependentOn(x, y) ::: x is dependent on y.\", \"DrinkRegularly(x, y) ::: x regularly drinks y.\", \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\", \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\", \"Student(x) ::: x is a student.\"],\n    \"First-Order-Logic Premises\": [\"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\", \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\", \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\", \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\", \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 290,
    "context": [
      "Diamond Mine is a professional wrestling stable formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick Strong leads the Creed Brothers.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsWrestlingStable(x, y) ::: x is a wrestling stable formed in y\", \"Leads(x, y) ::: x leads y\", \"Includes(x, y) ::: x includes y\", \"HasFeudWith(x, y) ::: x has a feud with y\"],\n    \"First-Order-Logic Premises\": [\"IsWrestlingStable(diamondMine, WWE) ::: Diamond Mine is a professional wrestling stable formed in WWE.\", \"Leads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\", \"Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers and Ivy Nile.\", \"HasFeudWith(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\"],\n    \"First-Order-Logic Question\": \"Leads(roderickStrong, creedBrothers) ::: Roderick Strong leads the Creed Brothers.\"\n}"
    ]
  },
  {
    "id": 291,
    "context": [
      "Diamond Mine is a professional wrestling stable formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsAStable(x) ::: x is a professional wrestling stable\",\n        \"Leads(x, y) ::: x leads y\",\n        \"Includes(x, y) ::: x includes y\",\n        \"HasFeudWith(x, y) ::: x has a feud with y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsAStable(diamondMine) ::: Diamond Mine is a professional wrestling stable formed in WWE.\",\n        \"Leads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\",\n        \"Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers and Ivy Nile.\",\n        \"HasFeudWith(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.\"\n    ],\n    \"First-Order-Logic Question\": \"¬∃x (IsAStable(x) ∧ Includes(x, ivyNile) ∧ HasFeudWith(imperium, x)) ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\"\n}"
    ]
  },
  {
    "id": 621,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is a composer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"MusicPiece(x) ::: x is a music piece.\",\n        \"WriteMusicPieces(x) ::: x writes music pieces.\",\n        \"Write(x, y) ::: x wrote y.\",\n        \"Premiere(x, y) ::: x premiered y.\",\n        \"Orchestra(x) ::: x is an orchestra.\",\n        \"Lead(x, y) ::: x leads y.\",\n        \"Conductor(x) ::: x is a conductor.\",\n        \"Composer(x) ::: x is a composer.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\",\n        \"∀x (Composer(x) → WriteMusicPieces(x)) ::: Composers write music pieces.\",\n        \"Write(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\",\n        \"Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\",\n        \"Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\",\n        \"Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\",\n        \"∀x (Orchestra(x) → ∃y Lead(y, x)) ::: Orchestras are led by conductors.\"\n    ],\n    \"First-Order-Logic Question\": \"Composer(beethoven) ::: Beethoven is a composer.\"\n}"
    ]
  },
  {
    "id": 622,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Some orchestras premiered music pieces.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"MusicPiece(x) ::: x is a music piece.\",\n        \"WriteMusicPieces(x) ::: x writes music pieces.\",\n        \"Wrote(x, y) ::: x wrote y.\",\n        \"Premiered(x, y) ::: x premiered y.\",\n        \"Orchestra(x) ::: x is an orchestra.\",\n        \"Lead(x, y) ::: x leads y.\",\n        \"Conductor(x) ::: x is a conductor.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\",\n        \"∀x (Composer(x) → WriteMusicPieces(x)) ::: Composers write music pieces.\",\n        \"Wrote(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\",\n        \"Premiered(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\",\n        \"Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\",\n        \"Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\",\n        \"∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x (Orchestra(x) ∧ ∃y (MusicPiece(y) ∧ Premiered(x, y))) ::: Some orchestras premiered music pieces.\"\n}"
    ]
  },
  {
    "id": 623,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is not a conductor.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"MusicPiece(x) ::: x is a music piece.\",\n        \"WriteMusicPieces(x) ::: x writes music pieces.\",\n        \"Wrote(x, y) ::: x wrote y.\",\n        \"Premiered(x, y) ::: x premiered y.\",\n        \"Orchestra(x) ::: x is an orchestra.\",\n        \"Leads(x, y) ::: x leads y.\",\n        \"Conductor(x) ::: x is a conductor.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\",\n        \"∀x (WriteMusicPieces(x) → MusicPiece(x)) ::: Composers write music pieces.\",\n        \"Wrote(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\",\n        \"Premiered(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\",\n        \"Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\",\n        \"Leads(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\",\n        \"∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Leads(y, x))) ::: Orchestras are led by conductors.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Conductor(beethoven) ::: Beethoven is not a conductor.\"\n}"
    ]
  },
  {
    "id": 927,
    "context": [
      "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
      "No brutalist buildings that Max adores have interesting geometries.",
      "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles that Max adores are evocative.",
      "All of Kelly Wearstler's design styles that Max adores are dreamy.",
      "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
    ],
    "question": "A design by Max is a brutalist building.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Adores(x, y) ::: x adores y.\",\n        \"DesignStyle(x, y) ::: x is a design style of y.\",\n        \"InterestingGeometries(x) ::: x has interesting geometries.\",\n        \"BrutalistBuilding(x) ::: x is a brutalist building.\",\n        \"Evocative(x) ::: x is evocative.\",\n        \"Dreamy(x) ::: x is dreamy.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DesignStyle(y, z) ∧ Adores(max, z) → Adores(max, y) ∧ InterestingGeometries(y)) ::: All of Zaha Hadid's design styles that Max adores have interesting geometries.\",\n        \"∀x (DesignStyle(y, z) ∧ Adores(max, z) → ¬(InterestingGeometries(y))) ::: No brutalist buildings that Max adores have interesting geometries.\",\n        \"∀x (Adores(max, x) → (DesignStyle(x, z) ∨ DesignStyle(x, k))) ::: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\",\n        \"∀x (DesignStyle(kellyWearstler, z) ∧ Adores(max, z) → Evocative(z)) ::: All of Kelly Wearstler's design styles that Max adores are evocative.\",\n        \"∀x (DesignStyle(kellyWearstler, z) ∧ Adores(max, z) → Dreamy(z)) ::: All of Kelly Wearstler's design styles that Max adores are dreamy.\",\n        \"∀x (DesignStyle(max, y) ∧ Adores(max, y) ∧ InterestingGeometries(y) → (BrutalistBuilding(y) ∧ Evocative(y))) ::: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\"\n    ],\n    \"First-Order-Logic Question\": \"BrutalistBuilding(max) ::: A design by Max is a brutalist building.\"\n}"
    ]
  },
  {
    "id": 928,
    "context": [
      "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
      "No brutalist buildings that Max adores have interesting geometries.",
      "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles that Max adores are evocative.",
      "All of Kelly Wearstler's design styles that Max adores are dreamy.",
      "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
    ],
    "question": "A design by Max is evocative and dreamy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Adores(x, y) ::: x adores y\",\n        \"DesignStyle(x, y) ::: x is a design style of y\",\n        \"InterestingGeometries(x) ::: x has interesting geometries\",\n        \"BrutalistBuilding(x) ::: x is a brutalist building\",\n        \"Evocative(x) ::: x is evocative\",\n        \"Dreamy(x) ::: x is dreamy\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DesignStyle(y, z) ∧ Adores(max, z) → InterestingGeometries(z) → Adores(max, z) → InterestingGeometries(z) → Adores(max, z) → BrutalistBuilding(z) ∧ Evocative(z)) ::: All of Zaha Hadid's design styles that Max adores have interesting geometries.\",\n        \"∀x (DesignStyle(y, z) ∧ Adores(max, z) → ¬InterestingGeometries(z)) ::: No brutalist buildings that Max adores have interesting geometries.\",\n        \"∀x (DesignStyle(y, z) ∧ Adores(max, z) → (DesignStyle(z, zahaHadid) ∨ DesignStyle(z, kellyWearstler))) ::: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\",\n        \"∀x (DesignStyle(kellyWearstler, z) ∧ Adores(max, z) → Evocative(z)) ::: All of Kelly Wearstler's design styles that Max adores are evocative.\",\n        \"∀x (DesignStyle(kellyWearstler, z) ∧ Adores(max, z) → Dreamy(z)) ::: All of Kelly Wearstler's design styles that Max adores are dreamy.\",\n        \"∀x (DesignStyle(max, z) ∧ Adores(max, z) ∧ InterestingGeometries(z) → BrutalistBuilding(z) ∧ Evocative(z)) ::: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\"\n    ],\n    \"First-Order-Logic Question\": \"Evocative(max) ∧ Dreamy(max) ::: A design by Max is evocative and dreamy.\"\n}"
    ]
  },
  {
    "id": 929,
    "context": [
      "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
      "No brutalist buildings that Max adores have interesting geometries.",
      "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles that Max adores are evocative.",
      "All of Kelly Wearstler's design styles that Max adores are dreamy.",
      "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
    ],
    "question": "A design by Max is either evocative or dreamy.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Adores(x, y) ::: x adores y\",\n        \"DesignStyle(x, y) ::: x is a design style of y\",\n        \"InterestingGeometries(x) ::: x has interesting geometries\",\n        \"BrutalistBuilding(x) ::: x is a brutalist building\",\n        \"Evocative(x) ::: x is evocative\",\n        \"Dreamy(x) ::: x is dreamy\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DesignStyle(y, z) ∧ Adores(max, z) → InterestingGeometries(z)) ::: All of Zaha Hadid's design styles that Max adores have interesting geometries.\",\n        \"∀x (BrutalistBuilding(y) ∧ Adores(max, y) → ¬InterestingGeometries(y)) ::: No brutalist buildings that Max adores have interesting geometries.\",\n        \"∀x (Adores(max, x) → (DesignStyle(x, z) ∨ DesignStyle(x, k))) ::: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\",\n        \"∀x (DesignStyle(kelly, z) ∧ Adores(max, z) → Evocative(z)) ::: All of Kelly Wearstler's design styles that Max adores are evocative.\",\n        \"∀x (DesignStyle(kelly, z) ∧ Adores(max, z) → Dreamy(z)) ::: All of Kelly Wearstler's design styles that Max adores are dreamy.\",\n        \"∀x ((DesignByMax(x) ∧ Adores(max, x) ∧ InterestingGeometries(x)) → (BrutalistBuilding(x) ∧ Evocative(x))) ::: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\"\n    ],\n    \"First-Order-Logic Question\": \"Evocative(designByMax) ∨ Dreamy(designByMax) ::: A design by Max is either evocative or dreamy.\"\n}"
    ]
  },
  {
    "id": 1029,
    "context": [
      "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
      "Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Świątek.",
      "All tennis players at Roland Garros 2022 are either female or male.",
      "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
      "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
      "Coco Gauff is at Roland Garros 2022."
    ],
    "question": "Coco Gauff is among the most active Grand-Slam players.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"RankedHighlyByWTA(x) ::: x is ranked highly by the Women's Tennis Association.\",\n        \"MostActivePlayer(x) ::: x is one of the most active players in major tennis.\",\n        \"LostTo(x, y) ::: x lost to y.\",\n        \"Female(x) ::: x is a female.\",\n        \"Male(x) ::: x is a male.\",\n        \"TennisPlayer(x) ::: x is a tennis player.\",\n        \"AtTournament(x, y) ::: x is at tournament y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (RankedHighlyByWTA(x) → MostActivePlayer(x)) ::: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\",\n        \"∀x (LostTo(x, igaSwiatek) → RankedHighlyByWTA(x)) ::: Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\",\n        \"∀x (Female(x) ∧ TennisPlayer(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\",\n        \"∀x (TennisPlayer(x) ∧ AtTournament(x, rolandGarros2022) → (Female(x) ∨ Male(x))) ::: All tennis players at Roland Garros 2022 are either female or male.\",\n        \"∀x (Male(x) ∧ TennisPlayer(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\",\n        \"∀x ((RankedHighlyByWTA(x) ∨ LostTo(x, rafaelNadal)) → ¬(Male(x) ∧ TennisPlayer(x) ∧ AtTournament(x, rolandGarros2022))) ::: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\",\n        \"AtTournament(cocoGauff, rolandGarros2022) ::: Coco Gauff is at Roland Garros 2022.\"\n    ],\n    \"First-Order-Logic Question\": \"MostActivePlayer(cocoGauff) ::: Coco Gauff is among the most active Grand-Slam players.\"\n}"
    ]
  },
  {
    "id": 1030,
    "context": [
      "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
      "Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Świątek.",
      "All tennis players at Roland Garros 2022 are either female or male.",
      "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
      "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
      "Coco Gauff is at Roland Garros 2022."
    ],
    "question": "Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"RankedHighlyByWTA(x) ::: x is ranked highly by the Women's Tennis Association.\",\n        \"MostActivePlayer(x) ::: x is one of the most active players in major tennis.\",\n        \"LostTo(x, y) ::: x lost to y.\",\n        \"Female(x) ::: x is female.\",\n        \"Male(x) ::: x is male.\",\n        \"AtTournament(x, y) ::: x is at tournament y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (RankedHighlyByWTA(x) → MostActivePlayer(x)) ::: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\",\n        \"∀x (LostTo(x, igaŚwiątek) → RankedHighlyByWTA(x)) ::: Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\",\n        \"∀x (Female(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, igaŚwiątek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\",\n        \"∀x (AtTournament(x, rolandGarros2022) → (Female(x) ∨ Male(x))) ::: All tennis players at Roland Garros 2022 are either female or male.\",\n        \"∀x (Male(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\",\n        \"∀x ((RankedHighlyByWTA(x) ∨ LostTo(x, rafaelNadal)) → ¬Male(x) ∧ AtTournament(cocoGauff, rolandGarros2022)) ::: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\",\n        \"AtTournament(cocoGauff, rolandGarros2022) ::: Coco Gauff is at Roland Garros 2022.\"\n    ],\n    \"First-Order-Logic Question\": \"LostTo(cocoGauff, rafaelNadal) ::: Coco Gauff has lost to Rafael Nadal.\"\n}"
    ]
  },
  {
    "id": 1031,
    "context": [
      "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
      "Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Świątek.",
      "All tennis players at Roland Garros 2022 are either female or male.",
      "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
      "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
      "Coco Gauff is at Roland Garros 2022."
    ],
    "question": "Coco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.\",\n        \"MostActivePlayer(x) ::: x is one of the most active players in major tennis.\",\n        \"LostTo(x, y) ::: x lost to y.\",\n        \"Female(x) ::: x is a female.\",\n        \"Male(x) ::: x is a male.\",\n        \"Player(x) ::: x is a tennis player.\",\n        \"AtTournament(x, y) ::: x is at tournament y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (RankedHighly(x) → MostActivePlayer(x)) ::: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\",\n        \"∀x (LostTo(x, igaŚwiątek) → RankedHighly(x)) ::: Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\",\n        \"∀x (Female(x) ∧ Player(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, igaŚwiątek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\",\n        \"∀x (Player(x) ∧ AtTournament(x, rolandGarros2022) → (Female(x) ∨ Male(x))) ::: All tennis players at Roland Garros 2022 are either female or male.\",\n        \"∀x (Male(x) ∧ Player(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\",\n        \"∀x ((RankedHighly(x) ∨ LostTo(x, rafaelNadal)) → ¬(Male(x) ∧ Player(x) ∧ AtTournament(x, rolandGarros2022))) ::: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\",\n        \"AtTournament(cocoGauff, rolandGarros2022) ::: Coco Gauff is at Roland Garros 2022.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(LostTo(cocoGauff, igaŚwiątek) ∧ MostActivePlayer(cocoGauff)) ::: Coco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis.\"\n}"
    ]
  },
  {
    "id": 700,
    "context": [
      "All cats are mammals.",
      "Some pets are not mammals."
    ],
    "question": "No pets are cats.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsCat(x)\", \"IsMammal(x)\", \"IsPet(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsCat(x) → IsMammal(x)) ::: All cats are mammals.\", \"∃x (IsPet(x) ∧ ¬IsMammal(x)) ::: Some pets are not mammals.\"],\n    \"First-Order-Logic Question\": \"¬∃x (IsPet(x) ∧ IsCat(x)) ::: No pets are cats.\"\n}"
    ]
  },
  {
    "id": 456,
    "context": [
      "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation have summer as their favorite season.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "James's favorite season is summer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Season(x) ::: x is a season\",\n        \"Student(x) ::: x is a student\",\n        \"FavoriteSeason(x, y) ::: x's favorite season is y\",\n        \"WantLongVacation(x) ::: x wants to have a long vacation\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\",\n        \"∀x (Student(x) ∧ WantLongVacation(x) → FavoriteSeason(x, summer)) ::: All students who want to have a long vacation have summer as their favorite season.\",\n        \"FavoriteSeason(emma, summer) ::: Emma's favorite season is summer.\",\n        \"∀x (Student(x) ∧ ¬(x=emma) → ¬(FavoriteSeason(x, summer))) ::: Mia's favorite season is not the same as Emma's.\",\n        \"WantLongVacation(james) ::: James wants to have a long vacation.\"\n    ],\n    \"First-Order-Logic Question\": \"FavoriteSeason(james, summer) ::: James's favorite season is summer.\"\n}"
    ]
  },
  {
    "id": 457,
    "context": [
      "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation have summer as their favorite season.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "Mia's favorite season is spring.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Season(x) ::: x is a season\", \"Student(x) ::: x is a student\", \"FavoriteSeason(x, y) ::: x's favorite season is y\", \"WantLongVacation(x) ::: x wants to have a long vacation\"],\n    \"First-Order-Logic Premises\": [\"Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\", \"∀x (Student(x) ∧ WantLongVacation(x) → FavoriteSeason(x, summer)) ::: All students who want to have a long vacation have summer as their favorite season.\", \"FavoriteSeason(emma, summer) ::: Emma's favorite season is summer.\", \"¬(FavoriteSeason(mia, emma)) ::: Mia's favorite season is not the same as Emma's.\", \"WantLongVacation(james) ::: James wants to have a long vacation.\"],\n    \"First-Order-Logic Question\": \"FavoriteSeason(mia, spring) ::: Mia's favorite season is spring.\"\n}"
    ]
  },
  {
    "id": 904,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog media.",
      "All streaming services are digital media.",
      "If an object is a hardcover book, then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is printed text.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"DigitalMedia(x) ::: x is digital media\",\n        \"AnalogMedia(x) ::: x is analog media\",\n        \"PrintedText(x) ::: x is printed text\",\n        \"StreamingService(x) ::: x is a streaming service\",\n        \"HardcoverBook(x) ::: x is a hardcover book\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DigitalMedia(x) → ¬AnalogMedia(x)) ::: No digital media are analog.\",\n        \"∀x (PrintedText(x) → AnalogMedia(x)) ::: Every printed text is analog media.\",\n        \"∀x (StreamingService(x) → DigitalMedia(x)) ::: All streaming services are digital media.\",\n        \"∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book, then it is printed text.\",\n        \"StreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\"\n    ],\n    \"First-Order-Logic Question\": \"PrintedText(1984) ::: 1984 is printed text.\"\n}"
    ]
  },
  {
    "id": 905,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog media.",
      "All streaming services are digital media.",
      "If an object is a hardcover book, then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is a streaming service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"DigitalMedia(x)\", \"Analog(x)\", \"PrintedText(x)\", \"StreamingService(x)\", \"HardcoverBook(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (DigitalMedia(x) → ¬Analog(x)) ::: No digital media are analog.\", \"∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog media.\", \"∀x (StreamingService(x) → DigitalMedia(x)) ::: All streaming services are digital media.\", \"∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book, then it is printed text.\", \"StreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\"],\n    \"First-Order-Logic Question\": \"StreamingService(1984) ::: 1984 is a streaming service.\"\n}"
    ]
  },
  {
    "id": 906,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog media.",
      "All streaming services are digital media.",
      "If an object is a hardcover book, then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is not a streaming service.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"DigitalMedia(x) ::: x is digital media\",\n        \"AnalogMedia(x) ::: x is analog media\",\n        \"PrintedText(x) ::: x is printed text\",\n        \"StreamingService(x) ::: x is a streaming service\",\n        \"HardcoverBook(x) ::: x is a hardcover book\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DigitalMedia(x) → ¬AnalogMedia(x)) ::: No digital media are analog.\",\n        \"∀x (PrintedText(x) → AnalogMedia(x)) ::: Every printed text is analog media.\",\n        \"∀x (StreamingService(x) → DigitalMedia(x)) ::: All streaming services are digital media.\",\n        \"∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book, then it is printed text.\",\n        \"StreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\"\n    ],\n    \"First-Order-Logic Question\": \"¬StreamingService(1984) ::: 1984 is not a streaming service.\"\n}"
    ]
  },
  {
    "id": 608,
    "context": [
      "All Romance languages are Indo-European languages.",
      "Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "Basque is a Romance language.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsIndoEuropean(x) ::: x is an Indo-European language.\",\n        \"IsRomanceLanguage(x) ::: x is a Romance language.\",\n        \"IsLanguageFamily(x) ::: x is a language family.\",\n        \"IsRelatedTo(x, y) ::: x is related to y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsRomanceLanguage(x) → IsIndoEuropean(x)) ::: All Romance languages are Indo-European languages.\",\n        \"IsLanguageFamily(romanceLanguages) ::: Romance languages are a language family.\",\n        \"∀x (IsLanguageFamily(x) → (∀y (IsLanguageFamily(y) → IsRelatedTo(x, y)))) ::: All languages within a language family are related to each other.\",\n        \"IsRomanceLanguage(french) ∧ IsRomanceLanguage(spanish) ::: French and Spanish are both Romance languages.\",\n        \"IsRelatedTo(german, spanish) ::: German is related to Spanish.\",\n        \"¬(IsRelatedTo(basque, _) ∨ IsRelatedTo(_, basque)) ::: Basque is not related to any other language.\"\n    ],\n    \"First-Order-Logic Question\": \"IsRomanceLanguage(basque) ::: Basque is a Romance language.\"\n}"
    ]
  },
  {
    "id": 609,
    "context": [
      "All Romance languages are Indo-European languages.",
      "Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "German is a Romance language.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsIndoEuropean(x) ::: x is an Indo-European language.\",\n        \"IsRomanceLanguage(x) ::: x is a Romance language.\",\n        \"IsLanguageFamily(x) ::: x is a language family.\",\n        \"IsRelated(x, y) ::: x is related to y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsRomanceLanguage(x) → IsIndoEuropean(x)) ::: All Romance languages are Indo-European languages.\",\n        \"IsLanguageFamily(romanceLanguages) ::: Romance languages are a language family.\",\n        \"∀x (IsLanguageFamily(x) → (∀y (IsLanguageFamily(y) → IsRelated(x, y)))) ::: All languages within a language family are related to each other.\",\n        \"IsRomanceLanguage(french) ∧ IsRomanceLanguage(spanish) ::: French and Spanish are both Romance languages.\",\n        \"IsRelated(german, spanish) ::: German is related to Spanish.\",\n        \"¬IsRelated(basque, anyLanguage) ::: Basque is not related to any other language.\"\n    ],\n    \"First-Order-Logic Question\": \"IsRomanceLanguage(german) ::: German is a Romance language.\"\n}"
    ]
  },
  {
    "id": 610,
    "context": [
      "All Romance languages are Indo-European languages.",
      "Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "French is an Indo-European language.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IndoEuropeanLanguage(x) ::: x is an Indo-European language.\", \"LanguageFamily(x) ::: x is a language family.\", \"RelatedToEachOther(x, y) ::: x is related to y.\", \"RomanceLanguage(x) ::: x is a Romance language.\", \"RelatedTo(x, y) ::: x is related to y.\", \"NotRelatedToAnyOtherLanguage(x) ::: x is not related to any other language.\"],\n    \"First-Order-Logic Premises\": [\"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x)) ::: All Romance languages are Indo-European languages.\", \"LanguageFamily(romanceLanguages) ::: Romance languages are a language family.\", \"∀x (LanguageFamily(x) → ∀y (LanguageFamily(y) → RelatedToEachOther(x, y))) ::: All languages within a language family are related to each other.\", \"RomanceLanguage(french) ∧ RomanceLanguage(spanish) ::: French and Spanish are both Romance languages.\", \"RelatedTo(german, spanish) ::: German is related to Spanish.\", \"NotRelatedToAnyOtherLanguage(basque) ::: Basque is not related to any other language.\"],\n    \"First-Order-Logic Question\": \"IndoEuropeanLanguage(french) ::: French is an Indo-European language.\"\n}"
    ]
  },
  {
    "id": 240,
    "context": [
      "Robert Lewandowski is a striker.",
      "Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "If a player leaves a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a soccer player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Striker(x) ::: x is a striker.\",\n        \"SoccerPlayer(x) ::: x is a soccer player.\",\n        \"Left(x, y) ::: x left y.\",\n        \"PlayFor(x, y) ::: x plays for y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Striker(robertLewandowski) ::: Robert Lewandowski is a striker.\",\n        \"∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\",\n        \"Left(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\",\n        \"∀x ∀y ((Left(x, y)) → ¬PlayFor(x, y)) ::: If a player leaves a team they no longer play for that team.\"\n    ],\n    \"First-Order-Logic Question\": \"SoccerPlayer(robertLewandowski) ::: Robert Lewandowski is a soccer player.\"\n}"
    ]
  },
  {
    "id": 241,
    "context": [
      "Robert Lewandowski is a striker.",
      "Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "If a player leaves a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Striker(x) ::: x is a striker.\",\n        \"SoccerPlayer(x) ::: x is a soccer player.\",\n        \"Left(x, y) ::: x left y.\",\n        \"PlayFor(x, y) ::: x plays for y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Striker(robertLewandowski) ::: Robert Lewandowski is a striker.\",\n        \"∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\",\n        \"Left(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\",\n        \"∀x ∀y ((Left(x, y)) → ¬PlayFor(x, y)) ::: If a player leaves a team they no longer play for that team.\"\n    ],\n    \"First-Order-Logic Question\": \"PlayFor(robertLewandowski, bayernMunchen) ::: Robert Lewandowski plays for Bayern Munchen.\"\n}"
    ]
  },
  {
    "id": 242,
    "context": [
      "Robert Lewandowski is a striker.",
      "Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "If a player leaves a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a star.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Striker(x) ::: x is a striker.\",\n        \"SoccerPlayer(x) ::: x is a soccer player.\",\n        \"Left(x, y) ::: x left y.\",\n        \"PlayFor(x, y) ::: x plays for y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Striker(robertLewandowski) ::: Robert Lewandowski is a striker.\",\n        \"∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\",\n        \"Left(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\",\n        \"∀x ∀y ((Left(x, y)) → ¬PlayFor(x, y)) ::: If a player leaves a team they no longer play for that team.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Star(robertLewandowski) ::: Robert Lewandowski is a star.\"\n}"
    ]
  },
  {
    "id": 4,
    "context": [
      "Billings is a city in the state of Montana in U.S.",
      "The state of Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state in U.S.",
      "The city of St Pierre is not in the state of Montana.",
      "Any city in Butte is not in St Pierre.",
      "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
    ],
    "question": "Butte and St Pierre are in the same state.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CityInState(x, y) ::: x is a city in the state y\",\n        \"IncludesState(x, y) ::: x includes the state y\",\n        \"SameState(x, y) ::: x is in the same state as y\",\n        \"NotInState(x, y) ::: x is not in the state y\",\n        \"OnlyOneState(x) ::: x can only be in one state\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"CityInState(billings, montana) ::: Billings is a city in the state of Montana in U.S.\",\n        \"IncludesState(montana, butte) ∧ IncludesState(montana, helena) ∧ IncludesState(montana, missoula) ::: The state of Montana includes the cities of Butte, Helena, and Missoula.\",\n        \"SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state in U.S.\",\n        \"NotInState(stPierre, montana) ::: The city of St Pierre is not in the state of Montana.\",\n        \"∀x (CityInState(x, butte) → NotInState(x, stPierre)) ::: Any city in Butte is not in St Pierre.\",\n        \"∀x (CityInState(x, y) → (x = bristol ∨ x = texarkana ∨ x = texhoma ∨ x = unionCity)) ::: A city can only be in one state in U.S. except for Bristol, Texarkana, Texhoma and Union City.\"\n    ],\n    \"First-Order-Logic Question\": \"SameState(butte, stPierre) ::: Butte and St Pierre are in the same state.\"\n}"
    ]
  },
  {
    "id": 5,
    "context": [
      "Billings is a city in the state of Montana in U.S.",
      "The state of Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state in U.S.",
      "The city of St Pierre is not in the state of Montana.",
      "Any city in Butte is not in St Pierre.",
      "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
    ],
    "question": "St Pierre and Bismarck are in the same state.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"CityInState(x, y) ::: x is a city in the state y\", \"SameState(x, y) ::: x and y are in the same state\"],\n    \"First-Order-Logic Premises\": [\"CityInState(billings, montana) ::: Billings is a city in the state of Montana in U.S.\", \"CityInState(butte, montana) ∧ CityInState(helena, montana) ∧ CityInState(missoula, montana) ::: The state of Montana includes the cities of Butte, Helena, and Missoula.\", \"CityInState(whiteSulphurSprings, state) ∧ CityInState(butte, state) ::: White Sulphur Springs and Butte are cities in the same state in U.S.\", \"¬CityInState(stPierre, montana) ::: The city of St Pierre is not in the state of Montana.\", \"∀x (CityInState(x, butte) → ¬CityInState(x, stPierre)) ::: Any city in Butte is not in St Pierre.\", \"∀x ∀y ((CityInState(x, state) ∧ CityInState(y, state) ∧ ¬(x=y)) → ¬SameState(x, y)) ::: A city can only be in one state in U.S. except for Bristol, Texarkana, Texhoma and Union City.\"],\n    \"First-Order-Logic Question\": \"SameState(stPierre, bismarck) ::: St Pierre and Bismarck are in the same state.\"\n}"
    ]
  },
  {
    "id": 6,
    "context": [
      "Billings is a city in the state of Montana in U.S.",
      "The state of Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state in U.S.",
      "The city of St Pierre is not in the state of Montana.",
      "Any city in Butte is not in St Pierre.",
      "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
    ],
    "question": "Montana is home to the city of Missoula.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CityInState(x, y) ::: x is a city in the state y\",\n        \"IncludesState(x, y) ::: x includes the state y\",\n        \"SameState(x, y) ::: x and y are in the same state\",\n        \"NotInState(x, y) ::: x is not in the state y\",\n        \"OnlyOneState(x) ::: x can only be in one state\",\n        \"ExceptionCity(x) ::: x is an exception city\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"CityInState(billings, montana) ::: Billings is a city in the state of Montana in U.S.\",\n        \"IncludesState(montana, butte) ∧ IncludesState(montana, helena) ∧ IncludesState(montana, missoula) ::: The state of Montana includes the cities of Butte, Helena, and Missoula.\",\n        \"SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state in U.S.\",\n        \"NotInState(stPierre, montana) ::: The city of St Pierre is not in the state of Montana.\",\n        \"∀x (CityInState(x, butte) → NotInState(x, stPierre)) ::: Any city in Butte is not in St Pierre.\",\n        \"∀x ((CityInState(x, y) ∧ CityInState(x, z) ∧ ¬(y=z)) → OnlyOneState(x)) ::: A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\"\n    ],\n    \"First-Order-Logic Question\": \"IncludesState(montana, missoula) ::: Montana is home to the city of Missoula.\"\n}"
    ]
  },
  {
    "id": 548,
    "context": [
      "International students in the US have either an F1 visa or a J1 visa.",
      "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has an F1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"HasVisa(x, y) ::: x has a visa of type y\",\n        \"NeedToApplyFor(x, y, z) ::: x needs to apply for y if z\",\n        \"IsStudent(x) ::: x is a student\",\n        \"WantToWorkInUS(x) ::: x wants to work in the US\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((IsStudent(x) ∧ HasVisa(x, F1)) ∨ HasVisa(x, J1)) ::: International students in the US have either an F1 visa or a J1 visa.\",\n        \"∀x ((IsStudent(x) ∧ HasVisa(x, F1)) → (NeedToApplyFor(x, CPT, WantToWorkInUS(x)) ∨ NeedToApplyFor(x, OPT, WantToWorkInUS(x)))) ::: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\",\n        \"IsStudent(mike) ::: Mike is an international student.\",\n        \"NeedToApplyFor(mike, CPT, WantToWorkInUS(mike)) ::: Mike needs to apply for CPT if he wants to work in the US.\"\n    ],\n    \"First-Order-Logic Question\": \"HasVisa(mike, F1) ::: Mike has an F1 visa.\"\n}"
    ]
  },
  {
    "id": 549,
    "context": [
      "International students in the US have either an F1 visa or a J1 visa.",
      "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has a J1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"HasVisa(x, y) ::: x has a visa of type y.\",\n        \"NeedToApplyFor(x, y, z) ::: x needs to apply for y if z.\",\n        \"IsInternationalStudent(x) ::: x is an international student.\",\n        \"WantToWorkInUS(x) ::: x wants to work in the US.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((IsInternationalStudent(x) ∧ HasVisa(x, F1)) ∨ (IsInternationalStudent(x) ∧ HasVisa(x, J1))) ::: International students in the US have either an F1 visa or a J1 visa.\",\n        \"∀x ((IsInternationalStudent(x) ∧ HasVisa(x, F1)) → NeedToApplyFor(x, CPT, WantToWorkInUS(x))) ∧ ((IsInternationalStudent(x) ∧ HasVisa(x, F1)) → NeedToApplyFor(x, OPT, WantToWorkInUS(x))) ::: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\",\n        \"IsInternationalStudent(mike) ::: Mike is an international student.\",\n        \"NeedToApplyFor(mike, CPT, WantToWorkInUS(mike)) ::: Mike needs to apply for CPT if he wants to work in the US.\"\n    ],\n    \"First-Order-Logic Question\": \"HasVisa(mike, J1) ::: Mike has a J1 visa.\"\n}"
    ]
  },
  {
    "id": 1271,
    "context": [
      "All Brown Swiss cattle are cows.",
      "Some pets are Brown Swiss Cattle.",
      "All cows are domesticated animals.",
      "Alligators are not domesticated animals.",
      "Ted is an alligator."
    ],
    "question": "Ted is a pet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"BrownSwissCattle(x) ::: x is Brown Swiss cattle\", \"Cow(x) ::: x is a cow\", \"Pet(x) ::: x is a pet\", \"DomesticatedAnimal(x) ::: x is a domesticated animal\", \"Alligator(x) ::: x is an alligator\"],\n    \"First-Order-Logic Premises\": [\"∀x (BrownSwissCattle(x) → Cow(x)) ::: All Brown Swiss cattle are cows.\", \"∃x (Pet(x) ∧ BrownSwissCattle(x)) ::: Some pets are Brown Swiss Cattle.\", \"∀x (Cow(x) → DomesticatedAnimal(x)) ::: All cows are domesticated animals.\", \"¬(DomesticatedAnimal(alligator)) ::: Alligators are not domesticated animals.\", \"Alligator(ted) ::: Ted is an alligator.\"],\n    \"First-Order-Logic Question\": \"Pet(ted) ::: Ted is a pet.\"\n}"
    ]
  },
  {
    "id": 1272,
    "context": [
      "All Brown Swiss cattle are cows.",
      "Some pets are Brown Swiss Cattle.",
      "All cows are domesticated animals.",
      "Alligators are not domesticated animals.",
      "Ted is an alligator."
    ],
    "question": "Ted is a pet and Brown Swiss cattle",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsCow(x) ::: x is a cow.\", \"IsBrownSwissCattle(x) ::: x is a Brown Swiss cattle.\", \"IsPet(x) ::: x is a pet.\", \"IsDomesticatedAnimal(x) ::: x is a domesticated animal.\", \"IsAlligator(x) ::: x is an alligator.\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsBrownSwissCattle(x) → IsCow(x)) ::: All Brown Swiss cattle are cows.\", \"∃x (IsPet(x) ∧ IsBrownSwissCattle(x)) ::: Some pets are Brown Swiss Cattle.\", \"∀x (IsCow(x) → IsDomesticatedAnimal(x)) ::: All cows are domesticated animals.\", \"¬(IsDomesticatedAnimal(alligator)) ::: Alligators are not domesticated animals.\", \"IsAlligator(ted) ::: Ted is an alligator.\"],\n    \"First-Order-Logic Question\": \"(IsPet(ted) ∧ IsBrownSwissCattle(ted)) ::: Ted is a pet and Brown Swiss cattle\"\n}"
    ]
  },
  {
    "id": 1273,
    "context": [
      "All Brown Swiss cattle are cows.",
      "Some pets are Brown Swiss Cattle.",
      "All cows are domesticated animals.",
      "Alligators are not domesticated animals.",
      "Ted is an alligator."
    ],
    "question": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsCow(x)\", \"IsBrownSwissCattle(x)\", \"IsPet(x)\", \"IsDomesticatedAnimal(x)\", \"IsAlligator(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsBrownSwissCattle(x) → IsCow(x)) ::: All Brown Swiss cattle are cows.\", \"∃x (IsPet(x) ∧ IsBrownSwissCattle(x)) ::: Some pets are Brown Swiss Cattle.\", \"∀x (IsCow(x) → IsDomesticatedAnimal(x)) ::: All cows are domesticated animals.\", \"¬(IsDomesticatedAnimal(alligator)) ::: Alligators are not domesticated animals.\", \"IsAlligator(ted) ::: Ted is an alligator.\"],\n    \"First-Order-Logic Question\": \"IsBrownSwissCattle(ted) → ¬IsPet(ted) ::: If Ted is a Brown Swiss cattle, then Ted is not a pet.\"\n}"
    ]
  },
  {
    "id": 663,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsDependentOn(x, y) ::: x is dependent on y.\", \"DrinkRegularly(x, y) ::: x regularly drinks y.\", \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\", \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\", \"Student(x) ::: x is a student.\", \"Czech(x) ::: x is Czech\", \"ChoralConductor(x) ::: x is a choral conductor\", \"SpecializeInPerformanceOf(x, y) ::: x specializes in the performance of y\", \"Musician(x) ::: x is a musician\", \"Love(x, y) ::: x loves y\", \"PublishedBook(x, y) ::: x published the book y\"],\n    \"First-Order-Logic Premises\": [\"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\", \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\", \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\", \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\", \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\", \"Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic) ::: Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\", \"∀x (ChoralConductor(x) → Musician(x)) ::: Any choral conductor is a musician.\", \"∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music))) ::: Some musicians love music.\", \"PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946) ::: Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.\"],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 664,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPrivateUniversity(x) ::: x is a private university\",\n        \"IsIvyLeagueUniversity(x) ::: x is an Ivy League university\",\n        \"IsResearchUniversity(x) ::: x is a research university\",\n        \"MovedTo(x, y, z) ::: x moved to y in z\",\n        \"EndowmentValue(x, y) ::: x's endowment was valued at y\",\n        \"IsResidentialCollege(x) ::: x is a residential college\",\n        \"IsCollegeOfUniversity(x, y) ::: x is a college of university y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsPrivateUniversity(yale) ∧ IsIvyLeagueUniversity(yale) ∧ IsResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\",\n        \"MovedTo(yale, newHaven, 1716) ::: Yale University moved to New Haven in 1716.\",\n        \"EndowmentValue(yale, 42.3B) ::: Yale university's endowment was valued at $42.3 billion.\",\n        \"IsResidentialCollege(benjaminFranklin) ∧ IsCollegeOfUniversity(benjaminFranklin, yale) ∧ IsResidentialCollege(berkeley) ∧ IsCollegeOfUniversity(berkeley, yale) ∧ IsResidentialCollege(branford) ∧ IsCollegeOfUniversity(branford, yale) ∧ IsResidentialCollege(davenport) ∧ IsCollegeOfUniversity(davenport, yale) ∧ IsResidentialCollege(ezraStiles) ∧ IsCollegeOfUniversity(ezraStiles, yale) ∧ IsResidentialCollege(graceHopper) ∧ IsCollegeOfUniversity(graceHopper, yale) ∧ IsResidentialCollege(jonathanEdwards) ∧ IsCollegeOfUniversity(jonathanEdwards, yale) ∧ IsResidentialCollege(morse) ∧ IsCollegeOfUniversity(morse, yale) ∧ IsResidentialCollege(pauliMurray) ∧ IsCollegeOfUniversity(pauliMurray, yale) ∧ IsResidentialCollege(pierson) ∧ IsCollegeOfUniversity(pierson, yale) ∧ IsResidentialCollege(saybrook) ∧ IsCollegeOfUniversity(saybrook, yale) ∧ IsResidentialCollege(silliman) ∧ IsCollegeOfUniversity(silliman, yale) ∧ IsResidentialCollege(timothyDwight) ∧ IsCollegeOfUniversity(timothyDwight, yale) ∧ IsResidentialCollege(trumbull) ∧ IsCollegeOfUniversity(trumbull, yale) ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\"\n    ],\n    \"First-Order-Logic Question\": \"EndowmentValue(yale, 42.3B) ∧ ∀x ((EndowmentValue(x, y) ∧ IsUniversity(x)) → (y ≤ 42.3B)) ::: Yale University has the largest university endowment of any educational institution.\"\n}"
    ]
  },
  {
    "id": 665,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "Pierson College is a residential college at Yale.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPrivateUniversity(x) ::: x is a private university\",\n        \"IsIvyLeagueUniversity(x) ::: x is an Ivy League university\",\n        \"IsResearchUniversity(x) ::: x is a research university\",\n        \"MovedTo(x, y, z) ::: x moved to y in z\",\n        \"EndowmentValue(x, y) ::: x's endowment was valued at y\",\n        \"IsResidentialCollege(x, y) ::: x is a residential college at y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsPrivateUniversity(yale) ∧ IsIvyLeagueUniversity(yale) ∧ IsResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\",\n        \"MovedTo(yale, newHaven, 1716) ::: Yale University moved to New Haven in 1716.\",\n        \"EndowmentValue(yale, 42.3B) ::: Yale university's endowment was valued at $42.3 billion.\",\n        \"IsResidentialCollege(pierson, yale) ::: Pierson College is a residential college at Yale.\"\n    ],\n    \"First-Order-Logic Question\": \"IsResidentialCollege(pierson, yale) ::: Pierson College is a residential college at Yale.\"\n}"
    ]
  },
  {
    "id": 360,
    "context": [
      "Badults is a British Sitcom series starring members of Pappy's.",
      "Badults was piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults."
    ],
    "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Starring(x, y) ::: x is starring y.\",\n        \"PilotedIn(x, y) ::: x was piloted in y.\",\n        \"WorkingTitle(x, y) ::: x has the working title y.\",\n        \"ScriptEditor(x, y) ::: x is the script editor for y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Starring(badults, Pappys) ::: Badults is a British Sitcom series starring members of Pappy's.\",\n        \"PilotedIn(badults, July2013, BBCThree) ::: Badults was piloted in July 2013 on BBC Three.\",\n        \"WorkingTitle(badults, TheSecretDudeSociety) ::: The Working title \\\"The Secret Dude Society\\\" was used for Badults.\",\n        \"ScriptEditor(AndrewCollins, badults) ::: Andrew Collins was the script editor for Badults.\"\n    ],\n    \"First-Order-Logic Question\": \"ScriptEditor(AndrewCollins, x) ∧ WorkingTitle(x, TheSecretDudeSociety) ::: Andrew Collins was the script editor for a series with the working title \\\"The Secret Dude Society\\\".\"\n}"
    ]
  },
  {
    "id": 361,
    "context": [
      "Badults is a British Sitcom series starring members of Pappy's.",
      "Badults was piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults."
    ],
    "question": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"BritishSitcomSeries(x) ::: x is a British sitcom series\", \"Starring(x, y) ::: x stars y\", \"PilotedIn(x, y) ::: x was piloted in y\", \"WorkingTitle(x, y) ::: x has the working title y\", \"ScriptEditor(x, y) ::: x is the script editor for y\"],\n    \"First-Order-Logic Premises\": [\"BritishSitcomSeries(badults) ∧ Starring(badults, Pappys) ::: Badults is a British Sitcom series starring members of Pappy's.\", \"PilotedIn(badults, July2013, BBCThree) ::: Badults was piloted in July 2013 on BBC Three.\", \"WorkingTitle(badults, TheSecretDudeSociety) ::: The Working title \\\"The Secret Dude Society\\\" was used for Badults.\", \"ScriptEditor(AndrewCollins, badults) ::: Andrew Collins was the script editor for Badults.\"],\n    \"First-Order-Logic Question\": \"¬(∃x (Starring(Pappys, x) ∧ (PilotedIn(x, BBCTwo) ∨ PilotedIn(x, BBCThree))) ::: No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\"\n}"
    ]
  },
  {
    "id": 819,
    "context": [
      "All growth stocks are bought to earn profits from rapid price appreciation.",
      "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
      "Some stocks are growth stocks.",
      "All mature stocks are suitable for a retirement fund.",
      "KO is a mature stock."
    ],
    "question": "KO is a stock.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsGrowthStock(x) ::: x is a growth stock.\",\n        \"BoughtForProfit(x, y) ::: x is bought to earn profits from y.\",\n        \"IsSuitableForRetirementFund(x) ::: x is suitable for a retirement fund.\",\n        \"IsMatureStock(x) ::: x is a mature stock.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsGrowthStock(x) → BoughtForProfit(x, rapidPriceAppreciation)) ::: All growth stocks are bought to earn profits from rapid price appreciation.\",\n        \"∀x (BoughtForProfit(x, rapidPriceAppreciation) → ¬IsSuitableForRetirementFund(x)) ::: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\",\n        \"∃x (IsGrowthStock(x)) ::: Some stocks are growth stocks.\",\n        \"∀x (IsMatureStock(x) → IsSuitableForRetirementFund(x)) ::: All mature stocks are suitable for a retirement fund.\",\n        \"IsMatureStock(KO) ::: KO is a mature stock.\"\n    ],\n    \"First-Order-Logic Question\": \"IsStock(KO) ::: KO is a stock.\"\n}"
    ]
  },
  {
    "id": 820,
    "context": [
      "All growth stocks are bought to earn profits from rapid price appreciation.",
      "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
      "Some stocks are growth stocks.",
      "All mature stocks are suitable for a retirement fund.",
      "KO is a mature stock."
    ],
    "question": "KO is a stock and a growth stock.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsGrowthStock(x) ::: x is a growth stock.\", \"BoughtForProfit(x, y) ::: x is bought to earn profits from rapid price appreciation.\", \"IsSuitableForRetirementFund(x) ::: x is suitable for a retirement fund.\", \"IsStock(x) ::: x is a stock.\", \"IsMatureStock(x) ::: x is a mature stock.\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsGrowthStock(x) → BoughtForProfit(x, rapidPriceAppreciation)) ::: All growth stocks are bought to earn profits from rapid price appreciation.\", \"∀x (BoughtForProfit(x, rapidPriceAppreciation) → ¬IsSuitableForRetirementFund(x)) ::: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\", \"∃x (IsGrowthStock(x)) ::: Some stocks are growth stocks.\", \"∀x (IsMatureStock(x) → IsSuitableForRetirementFund(x)) ::: All mature stocks are suitable for a retirement fund.\", \"IsMatureStock(KO) ::: KO is a mature stock.\"],\n    \"First-Order-Logic Question\": \"IsStock(KO) ∧ IsGrowthStock(KO) ::: KO is a stock and a growth stock.\"\n}"
    ]
  },
  {
    "id": 821,
    "context": [
      "All growth stocks are bought to earn profits from rapid price appreciation.",
      "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
      "Some stocks are growth stocks.",
      "All mature stocks are suitable for a retirement fund.",
      "KO is a mature stock."
    ],
    "question": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsGrowthStock(x) ::: x is a growth stock\",\n        \"BoughtForProfit(x, y) ::: x is bought to earn profits from rapid price appreciation of y\",\n        \"SuitableForRetirementFund(x) ::: x is suitable for a retirement fund\",\n        \"MatureStock(x) ::: x is a mature stock\",\n        \"Stock(x) ::: x is a stock\",\n        \"PriceVolatile(x) ::: x has a volatile price\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsGrowthStock(x) → BoughtForProfit(x, priceAppreciation)) ::: All growth stocks are bought to earn profits from rapid price appreciation.\",\n        \"∀x (BoughtForProfit(x, y) → ¬SuitableForRetirementFund(y)) ::: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\",\n        \"∃x (IsGrowthStock(x)) ::: Some stocks are growth stocks.\",\n        \"∀x (MatureStock(x) → SuitableForRetirementFund(x)) ::: All mature stocks are suitable for a retirement fund.\",\n        \"MatureStock(KO) ::: KO is a mature stock.\"\n    ],\n    \"First-Order-Logic Question\": \"(IsGrowthStock(KO) ∨ BoughtForProfit(KO, priceAppreciation)) → (¬Stock(KO) ∧ ¬PriceVolatile(KO)) ::: If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\"\n}"
    ]
  },
  {
    "id": 253,
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Joe's license plate begins with the number 34.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"BeginWith(x, y) ::: x begins with the number y.\",\n        \"From(x, y) ::: x is from y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (From(x, Istanbul) → BeginWith(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\",\n        \"∀x (¬BeginWith(x, 34) → ¬From(x, Istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\",\n        \"From(joe, Istanbul) ::: Joe's vehicle registration plate is from Istanbul.\",\n        \"BeginWith(tom, 35) ::: Tom's license plate begins with the number 35.\",\n        \"∀x (BeginWith(x, 35) → ¬BeginWith(x, 34)) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\"\n    ],\n    \"First-Order-Logic Question\": \"BeginWith(joe, 34) ::: Joe's license plate begins with the number 34.\"\n}"
    ]
  },
  {
    "id": 254,
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Tom's license plate is from Istanbul.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"BeginWith(x, y) ::: x begins with the number y.\",\n        \"From(x, y) ::: x is from y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (BeginWith(x, 34) → From(x, Istanbul)) ::: All vehicle registration plates in Istanbul begin with the number 34.\",\n        \"∀x (¬BeginWith(x, 34) → ¬From(x, Istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\",\n        \"From(joePlate, Istanbul) ::: Joe's vehicle registration plate is from Istanbul.\",\n        \"BeginWith(tomPlate, 35) ::: Tom's license plate begins with the number 35.\",\n        \"BeginWith(tomPlate, 35) → ¬BeginWith(tomPlate, 34) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\"\n    ],\n    \"First-Order-Logic Question\": \"From(tomPlate, Istanbul) ::: Tom's license plate is from Istanbul.\"\n}"
    ]
  },
  {
    "id": 979,
    "context": [
      "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
      "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "Hannah is at Mary's school.",
      "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Hannah needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"WorkInStudentJobs(x, y) ::: x works in student jobs on campus.\", \"EarnMoney(x) ::: x needs to earn money to help pay for college tuition.\", \"OrderTakeoutFrequently(x) ::: x orders takeout frequently in college.\", \"EnjoyDiningHallMeals(x) ::: x enjoys the dining hall meals and recipes.\", \"PickyEater(x) ::: x is a picky eater.\", \"SpendALotOfTimeEating(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.\", \"IsAtSchool(x) ::: x is at Mary's school.\"],\n    \"First-Order-Logic Premises\": [\"∀x ((IsAtSchool(x) ∧ WorkInStudentJobs(x, campus)) → EarnMoney(x)) ::: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\", \"∀x ((IsAtSchool(x) ∧ OrderTakeoutFrequently(x, college)) → WorkInStudentJobs(x, campus)) ::: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\", \"∀x (OrderTakeoutFrequently(x, college) ∨ EnjoyDiningHallMeals(x) ∧ Recipes(x)) ::: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\", \"∀x (EnjoyDiningHallMeals(x) ∧ Recipes(x) → ¬PickyEater(x)) ::: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\", \"∀x (EnjoyDiningHallMeals(x) ∧ Recipes(x) → SpendALotOfTimeEating(x)) ::: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\", \"IsAtSchool(hannah) ::: Hannah is at Mary's school.\", \"WorkInStudentJobs(hannah, campus) ∧ (EarnMoney(hannah) → ¬PickyEater(hannah)) ∧ (EarnMoney(hannah) → ¬EarnMoney(hannah)) ::: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\"],\n    \"First-Order-Logic Question\": \"EarnMoney(hannah) ::: Hannah needs to earn money to help pay for her college tuition.\"\n}"
    ]
  },
  {
    "id": 980,
    "context": [
      "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
      "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "Hannah is at Mary's school.",
      "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WorkInStudentJobs(x, y) ::: x works in student jobs on campus at y\",\n        \"NeedToEarnMoney(x, y) ::: x needs to earn money to help pay for college tuition at y\",\n        \"OrderTakeoutFrequently(x, y) ::: x orders takeout frequently in college at y\",\n        \"EnjoyDiningHallMeals(x, y) ::: x enjoys the dining hall meals and recipes at y\",\n        \"PickyEater(x) ::: x is a picky eater\",\n        \"SpendTimeEatingWithFriends(x, y) ::: x spends a lot of time eating and catching up with friends in the campus dining halls at y\",\n        \"AtSchool(x, y) ::: x is at school y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (AtSchool(x, mary) ∧ WorkInStudentJobs(x, mary) → NeedToEarnMoney(x, mary)) ::: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\",\n        \"∀x (AtSchool(x, mary) ∧ OrderTakeoutFrequently(x, college) → WorkInStudentJobs(x, mary)) ::: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\",\n        \"∀x (AtSchool(x, mary) → (OrderTakeoutFrequently(x, college) ∨ EnjoyDiningHallMeals(x, college))) ::: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\",\n        \"∀x (AtSchool(x, mary) ∧ EnjoyDiningHallMeals(x, college) → (¬PickyEater(x))) ::: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\",\n        \"∀x (AtSchool(x, mary) ∧ EnjoyDiningHallMeals(x, college) → SpendTimeEatingWithFriends(x, college)) ::: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\",\n        \"AtSchool(hannah, mary) ::: Hannah is at Mary's school.\",\n        \"AtSchool(hannah, mary) ∧ WorkInStudentJobs(hannah, mary) ∧ NeedToEarnMoney(hannah, mary) → (¬PickyEater(hannah) ∧ ¬NeedToEarnMoney(hannah, mary)) ::: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\"\n    ],\n    \"First-Order-Logic Question\": \"AtSchool(hannah, mary) ∧ ¬PickyEater(hannah) ∧ SpendTimeEatingWithFriends(hannah, college) ::: Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\"\n}"
    ]
  },
  {
    "id": 981,
    "context": [
      "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
      "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "Hannah is at Mary's school.",
      "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WorkInStudentJobs(x, y) ::: x works in student jobs on campus at y\",\n        \"NeedToEarnMoney(x, y) ::: x needs to earn money to help pay for college tuition at y\",\n        \"OrderTakeoutFrequently(x, y) ::: x orders takeout frequently in college at y\",\n        \"EnjoyDiningHallMeals(x, y) ::: x enjoys the dining hall meals and recipes at y\",\n        \"PickyEater(x) ::: x is a picky eater\",\n        \"SpendTimeEatingWithFriends(x, y) ::: x spends a lot of time eating and catching up with friends in the campus dining halls at y\",\n        \"AtSchool(x, y) ::: x is at school y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (WorkInStudentJobs(x, marySchool) → NeedToEarnMoney(x, collegeTuition)) ::: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\",\n        \"∀x (OrderTakeoutFrequently(x, college) → WorkInStudentJobs(x, marySchool)) ::: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\",\n        \"∀x (OrderTakeoutFrequently(x, college) ∨ EnjoyDiningHallMeals(x, college)) ::: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\",\n        \"∀x (EnjoyDiningHallMeals(x, college) → ¬PickyEater(x)) ::: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\",\n        \"∀x (EnjoyDiningHallMeals(x, college) → SpendTimeEatingWithFriends(x, college)) ::: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\",\n        \"AtSchool(hannah, marySchool) ::: Hannah is at Mary's school.\",\n        \"WorkInStudentJobs(hannah, marySchool) ∧ (NeedToEarnMoney(hannah, collegeTuition) → (¬PickyEater(hannah) ∧ ¬NeedToEarnMoney(hannah, collegeTuition))) ::: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\"\n    ],\n    \"First-Order-Logic Question\": \"AtSchool(hannah, marySchool) ∧ (¬PickyEater(hannah) ∨ (PickyEater(hannah) → SpendTimeEatingWithFriends(hannah, college))) ::: Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\"\n}"
    ]
  },
  {
    "id": 805,
    "context": [
      "No baked sweets are spicy.",
      "All cupcakes are baked sweets.",
      "All mala hotpots are spicy.",
      "All products from Baked by Melissa are cupcakes.",
      "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
    ],
    "question": "Dried Thai chilies are products of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Baked(x) ::: x is a baked sweet.\", \"Spicy(x) ::: x is spicy.\", \"Cupcake(x) ::: x is a cupcake.\", \"MalaHotpot(x) ::: x is a mala hotpot.\", \"ProductOf(x, y) ::: x is a product of y.\", \"BakedByMelissa(x) ::: x is from Baked by Melissa.\", \"DriedThaiChilies(x) ::: x is dried Thai chilies.\"],\n    \"First-Order-Logic Premises\": [\"∀x (Baked(x) → ¬Spicy(x)) ::: No baked sweets are spicy.\", \"∀x (Cupcake(x) → Baked(x)) ::: All cupcakes are baked sweets.\", \"∀x (MalaHotpot(x) → Spicy(x)) ::: All mala hotpots are spicy.\", \"∀x (ProductOf(x, BakedByMelissa) → Cupcake(x)) ::: All products from Baked by Melissa are cupcakes.\", \"Spicy(DriedThaiChilies) ∨ MalaHotpot(DriedThaiChilies) ∨ ¬Baked(DriedThaiChilies) ::: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\"],\n    \"First-Order-Logic Question\": \"ProductOf(DriedThaiChilies, BakedByMelissa) ::: Dried Thai chilies are products of Baked by Melissa.\"\n}"
    ]
  },
  {
    "id": 806,
    "context": [
      "No baked sweets are spicy.",
      "All cupcakes are baked sweets.",
      "All mala hotpots are spicy.",
      "All products from Baked by Melissa are cupcakes.",
      "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
    ],
    "question": "Dried Thai chilies are not products of Baked by Melissa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Baked(x) ::: x is a baked sweet.\", \"Spicy(x) ::: x is spicy.\", \"Cupcake(x) ::: x is a cupcake.\", \"MalaHotpot(x) ::: x is a mala hotpot.\", \"ProductOf(x, y) ::: x is a product of y.\", \"BakedByMelissa(x) ::: x is from Baked by Melissa.\", \"DriedThaiChilies(x) ::: x is dried Thai chilies.\"],\n    \"First-Order-Logic Premises\": [\"∀x (Baked(x) → ¬Spicy(x)) ::: No baked sweets are spicy.\", \"∀x (Cupcake(x) → Baked(x)) ::: All cupcakes are baked sweets.\", \"∀x (MalaHotpot(x) → Spicy(x)) ::: All mala hotpots are spicy.\", \"∀x (ProductOf(x, BakedByMelissa) → Cupcake(x)) ::: All products from Baked by Melissa are cupcakes.\", \"Spicy(DriedThaiChilies) ∨ MalaHotpot(DriedThaiChilies) ∨ ¬Baked(DriedThaiChilies) ::: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\"],\n    \"First-Order-Logic Question\": \"¬ProductOf(DriedThaiChilies, BakedByMelissa) ::: Dried Thai chilies are not products of Baked by Melissa.\"\n}"
    ]
  },
  {
    "id": 807,
    "context": [
      "No baked sweets are spicy.",
      "All cupcakes are baked sweets.",
      "All mala hotpots are spicy.",
      "All products from Baked by Melissa are cupcakes.",
      "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
    ],
    "question": "Dried Thai chilies are a mala hotpot.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Baked(x) ::: x is a baked sweet.\", \"Spicy(x) ::: x is spicy.\", \"Cupcake(x) ::: x is a cupcake.\", \"MalaHotpot(x) ::: x is a mala hotpot.\", \"FromBakedByMelissa(x) ::: x is from Baked by Melissa.\", \"DriedThaiChilies(x) ::: x is Dried Thai chilies.\"],\n    \"First-Order-Logic Premises\": [\"∀x (Baked(x) → ¬Spicy(x)) ::: No baked sweets are spicy.\", \"∀x (Cupcake(x) → Baked(x)) ::: All cupcakes are baked sweets.\", \"∀x (MalaHotpot(x) → Spicy(x)) ::: All mala hotpots are spicy.\", \"∀x (FromBakedByMelissa(x) → Cupcake(x)) ::: All products from Baked by Melissa are cupcakes.\", \"¬(DriedThaiChilies(x) ⊕ Spicy(x) ∨ MalaHotpot(x) ∨ ¬Baked(x)) ::: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\"],\n    \"First-Order-Logic Question\": \"MalaHotpot(DriedThaiChilies) ::: Dried Thai chilies are a mala hotpot.\"\n}"
    ]
  },
  {
    "id": 808,
    "context": [
      "No baked sweets are spicy.",
      "All cupcakes are baked sweets.",
      "All mala hotpots are spicy.",
      "All products from Baked by Melissa are cupcakes.",
      "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
    ],
    "question": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"BakedSweet(x) ::: x is a baked sweet.\",\n        \"Spicy(x) ::: x is spicy.\",\n        \"Cupcake(x) ::: x is a cupcake.\",\n        \"MalaHotpot(x) ::: x is a mala hotpot.\",\n        \"ProductOfBakedByMelissa(x) ::: x is a product of Baked by Melissa.\",\n        \"DriedThaiChilies(x) ::: x is dried Thai chilies.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (BakedSweet(x) → ¬Spicy(x)) ::: No baked sweets are spicy.\",\n        \"∀x (Cupcake(x) → BakedSweet(x)) ::: All cupcakes are baked sweets.\",\n        \"∀x (MalaHotpot(x) → Spicy(x)) ::: All mala hotpots are spicy.\",\n        \"∀x (ProductOfBakedByMelissa(x) → Cupcake(x)) ::: All products from Baked by Melissa are cupcakes.\",\n        \"Spicy(driedThaiChilies) ∨ MalaHotpot(driedThaiChilies) ∨ ¬BakedSweet(driedThaiChilies) ::: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(ProductOfBakedByMelissa(driedThaiChilies) ∨ BakedSweet(driedThaiChilies)) ::: Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.\"\n}"
    ]
  },
  {
    "id": 809,
    "context": [
      "No baked sweets are spicy.",
      "All cupcakes are baked sweets.",
      "All mala hotpots are spicy.",
      "All products from Baked by Melissa are cupcakes.",
      "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
    ],
    "question": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"BakedSweet(x)\", \"Spicy(x)\", \"Cupcake(x)\", \"MalaHotpot(x)\", \"ProductOfBakedByMelissa(x)\", \"DriedThaiChilies(x)\", \"Cupcake(x)\", \"ProductOfBakedByMelissa(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (BakedSweet(x) → ¬Spicy(x)) ::: No baked sweets are spicy.\", \"∀x (Cupcake(x) → BakedSweet(x)) ::: All cupcakes are baked sweets.\", \"∀x (MalaHotpot(x) → Spicy(x)) ::: All mala hotpots are spicy.\", \"∀x (ProductOfBakedByMelissa(x) → Cupcake(x)) ::: All products from Baked by Melissa are cupcakes.\", \"Spicy(DriedThaiChilies) ∨ MalaHotpot(DriedThaiChilies) ∨ ¬BakedSweet(DriedThaiChilies) ::: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\"],\n    \"First-Order-Logic Question\": \"Cupcake(DriedThaiChilies) ∧ ProductOfBakedByMelissa(DriedThaiChilies) ::: Dried Thai chilies are cupcakes and products of Baked by Melissa.\"\n}"
    ]
  },
  {
    "id": 754,
    "context": [
      "If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.",
      "All restaurants with a rating greater than four are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than four.",
      "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
    ],
    "question": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ListedInYelpRecommendations(x) ::: x is listed in Yelp's recommendations.\",\n        \"NotReceivedManyNegativeReviews(x) ::: x has not received many negative reviews.\",\n        \"RatingGreaterThanFour(x) ::: x has a rating greater than four.\",\n        \"ReceiveManyNegativeReviews(x) ::: x receives many negative reviews.\",\n        \"ProvideTakeOutService(x) ::: x provides take-out service.\",\n        \"PopularAmongLocalResidents(x) ::: x is popular among local residents.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ListedInYelpRecommendations(x) → NotReceivedManyNegativeReviews(x)) ::: If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\",\n        \"∀x (RatingGreaterThanFour(x) → ListedInYelpRecommendations(x)) ::: All restaurants with a rating greater than four are listed in Yelp’s recommendations.\",\n        \"∃x (¬ProvideTakeOutService(x) ∧ ReceiveManyNegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\",\n        \"∀x (PopularAmongLocalResidents(x) → RatingGreaterThanFour(x)) ::: All restaurants that are popular among local residents have ratings greater than four.\",\n        \"(RatingGreaterThanFour(hamdenPlazaSubway) ∨ PopularAmongLocalResidents(hamdenPlazaSubway)) ::: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\"\n    ],\n    \"First-Order-Logic Question\": \"((ProvideTakeOutService(hamdenPlazaSubway) ∧ ReceiveManyNegativeReviews(hamdenPlazaSubway)) → (RatingGreaterThanFour(hamdenPlazaSubway) ∧ ¬ProvideTakeOutService(hamdenPlazaSubway))) ::: If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\"\n}"
    ]
  },
  {
    "id": 755,
    "context": [
      "If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.",
      "All restaurants with a rating greater than four are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than four.",
      "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
    ],
    "question": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ListedInRecommendations(x) ::: x is listed in Yelp’s recommendations.\",\n        \"NotReceivedManyNegativeReviews(x) ::: x has not received many negative reviews.\",\n        \"RatingGreaterThanFour(x) ::: x has a rating greater than four.\",\n        \"ProvideTakeOutService(x) ::: x provides take-out service.\",\n        \"ReceiveManyNegativeReviews(x) ::: x receives many negative reviews.\",\n        \"PopularAmongLocalResidents(x) ::: x is popular among local residents.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ListedInRecommendations(x) → NotReceivedManyNegativeReviews(x)) ::: If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\",\n        \"∀x (RatingGreaterThanFour(x) → ListedInRecommendations(x)) ::: All restaurants with a rating greater than four are listed in Yelp’s recommendations.\",\n        \"∃x ((¬ProvideTakeOutService(x) ∧ ReceiveManyNegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\",\n        \"∀x (PopularAmongLocalResidents(x) → RatingGreaterThanFour(x)) ::: All restaurants that are popular among local residents have ratings greater than four.\",\n        \"(RatingGreaterThanFour(hamdenPlazaSubwayStore) ∨ PopularAmongLocalResidents(hamdenPlazaSubwayStore)) ::: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\"\n    ],\n    \"First-Order-Logic Question\": \"ProvideTakeOutService(hamdenPlazaSubwayStore) ∨ ¬ReceiveManyNegativeReviews(hamdenPlazaSubwayStore) ::: The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\"\n}"
    ]
  },
  {
    "id": 756,
    "context": [
      "If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.",
      "All restaurants with a rating greater than four are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than four.",
      "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
    ],
    "question": "The Hamden Plaza store does not provide take-out service.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ListedInYelp(x) ::: x is listed in Yelp's recommendations.\",\n        \"NotReceivedManyNegativeReviews(x) ::: x has not received many negative reviews.\",\n        \"RatingGreaterThanFour(x) ::: x has a rating greater than four.\",\n        \"ReceiveManyNegativeReviews(x) ::: x receives many negative reviews.\",\n        \"ProvideTakeOutService(x) ::: x provides take-out service.\",\n        \"PopularAmongLocalResidents(x) ::: x is popular among local residents.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ListedInYelp(x) → NotReceivedManyNegativeReviews(x)) ::: If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\",\n        \"∀x (RatingGreaterThanFour(x) → ListedInYelp(x)) ::: All restaurants with a rating greater than four are listed in Yelp’s recommendations.\",\n        \"∃x (¬ProvideTakeOutService(x) ∧ ReceiveManyNegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\",\n        \"∀x (PopularAmongLocalResidents(x) → RatingGreaterThanFour(x)) ::: All restaurants that are popular among local residents have ratings greater than four.\",\n        \"(RatingGreaterThanFour(hamdenPlazaSubway) ∨ PopularAmongLocalResidents(hamdenPlazaSubway)) ::: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\"\n    ],\n    \"First-Order-Logic Question\": \"¬ProvideTakeOutService(hamdenPlazaSubway) ::: The Hamden Plaza store does not provide take-out service.\"\n}"
    ]
  },
  {
    "id": 688,
    "context": [
      "In superhero movies, the good guys always win.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
      "Good guys fight bad guys and vice versa.",
      "Sir Digby fights his nemesis.",
      "If a superhero movie is named after a character, that character is a good guy.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
      "If somebody wins a fight, the person they are fighting does not win.",
      "If a superhero movie is named after a character, that character is in the movie."
    ],
    "question": "Sir Digby’s nemesis does not win.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsGoodGuy(x) ::: x is a good guy\",\n        \"IsSuperheroMovie(x) ::: x is a superhero movie\",\n        \"Wins(x) ::: x wins\",\n        \"NamedAfter(x, y) ::: x is named after y\",\n        \"Fight(x, y) ::: x fights y\",\n        \"IsCharacter(x) ::: x is a character\",\n        \"IsBadGuy(x) ::: x is a bad guy\",\n        \"IsNemesis(x, y) ::: x is the nemesis of y\",\n        \"IsInMovie(x) ::: x is in the movie\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsSuperheroMovie(x) → ∀y (IsGoodGuy(y) → Wins(y))) ::: In superhero movies, the good guys always win.\",\n        \"IsSuperheroMovie(surprisingAdventuresOfSirDigbyChickenCaesar) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\",\n        \"∀x (IsGoodGuy(x) ∨ IsBadGuy(x)) ::: Good guys fight bad guys and vice versa.\",\n        \"Fight(sirDigby, nemesis) ::: Sir Digby fights his nemesis.\",\n        \"∀x ((IsSuperheroMovie(x) ∧ NamedAfter(x, character)) → IsGoodGuy(character)) ::: If a superhero movie is named after a character, that character is a good guy.\",\n        \"NamedAfter(surprisingAdventuresOfSirDigbyChickenCaesar, sirDigby) ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\",\n        \"∀x ∀y ((Wins(x) ∧ Fight(x, y)) → ¬Wins(y)) ::: If somebody wins a fight, the person they are fighting does not win.\",\n        \"∀x ((IsSuperheroMovie(x) ∧ NamedAfter(x, character)) → IsCharacter(character)) ::: If a superhero movie is named after a character, that character is in the movie.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Wins(nemesis) ::: Sir Digby’s nemesis does not win.\"\n}"
    ]
  },
  {
    "id": 171,
    "context": [
      "Books contain tons of knowledge.",
      "When a person reads a book, that person gains knowledge. ",
      "If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Walden contains knowledge.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Contain(x, y) ::: x contains y\",\n        \"Read(x, y) ::: x reads y\",\n        \"GainKnowledge(x) ::: x gains knowledge\",\n        \"BecomeSmarter(x) ::: x becomes smarter\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Contain(Books, knowledge)) ::: Books contain tons of knowledge.\",\n        \"∀x (Read(Person, x) → GainKnowledge(Person)) ::: When a person reads a book, that person gains knowledge.\",\n        \"∀x (GainKnowledge(x) → BecomeSmarter(x)) ::: If a person gains knowledge, they become smarter.\",\n        \"Read(Harry, Walden) ::: Harry read the book “Walden” by Henry Thoreau.\"\n    ],\n    \"First-Order-Logic Question\": \"Contain(Walden, knowledge) ::: Walden contains knowledge.\"\n}"
    ]
  },
  {
    "id": 172,
    "context": [
      "Books contain tons of knowledge.",
      "When a person reads a book, that person gains knowledge. ",
      "If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Harry is smarter than before.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Contain(x, y) ::: x contains y\", \"Read(x, y) ::: x reads y\", \"GainKnowledge(x) ::: x gains knowledge\", \"BecomeSmarter(x) ::: x becomes smarter\"],\n    \"First-Order-Logic Premises\": [\"∀x (Contain(Books, knowledge)) ::: Books contain tons of knowledge.\", \"∀x (Read(x, Books) → GainKnowledge(x)) ::: When a person reads a book, that person gains knowledge.\", \"∀x (GainKnowledge(x) → BecomeSmarter(x)) ::: If a person gains knowledge, they become smarter.\", \"Read(Harry, Walden) ::: Harry read the book “Walden” by Henry Thoreau.\"],\n    \"First-Order-Logic Question\": \"BecomeSmarter(Harry) ::: Harry is smarter than before.\"\n}"
    ]
  },
  {
    "id": 173,
    "context": [
      "Books contain tons of knowledge.",
      "When a person reads a book, that person gains knowledge. ",
      "If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "A smarter person has gained knowledge.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Contain(x, y) ::: x contains y\",\n        \"Read(x, y) ::: x reads y\",\n        \"GainKnowledge(x) ::: x gains knowledge\",\n        \"BecomeSmarter(x) ::: x becomes smarter\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Contain(Books, knowledge)) ::: Books contain tons of knowledge.\",\n        \"∀x (Read(Person, Book) → GainKnowledge(Person)) ::: When a person reads a book, that person gains knowledge.\",\n        \"∀x (GainKnowledge(x) → BecomeSmarter(x)) ::: If a person gains knowledge, they become smarter.\",\n        \"Read(Harry, Walden) ::: Harry read the book “Walden” by Henry Thoreau.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x (BecomeSmarter(x) ∧ GainKnowledge(x)) ::: A smarter person has gained knowledge.\"\n}"
    ]
  },
  {
    "id": 546,
    "context": [
      "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language generation task.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsLanguageGenerationTask(x) ::: x is a language generation task.\",\n        \"IsLanguageUnderstandingTask(x) ::: x is a language understanding task.\",\n        \"IsTextSequence(x) ::: x is a text sequence.\",\n        \"IsNaturalLanguageProcessingTask(x) ::: x is a natural language processing task.\",\n        \"IsMachineTranslation(x) ::: x is machine translation.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsNaturalLanguageProcessingTask(x) → (IsLanguageGenerationTask(x) ∨ IsLanguageUnderstandingTask(x))) ::: A natural language processing task can be categorized as either a language generation task or a language understanding task.\",\n        \"∀x ((IsNaturalLanguageProcessingTask(x) ∧ IsTextSequence(x)) → IsLanguageGenerationTask(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\",\n        \"IsMachineTranslation(machineTranslation) ::: Machine translation is a natural language processing task.\",\n        \"IsTextSequence(outputOfMachineTranslation) ::: The output of machine translation is a text sequence.\"\n    ],\n    \"First-Order-Logic Question\": \"IsLanguageGenerationTask(machineTranslation) ::: Machine translation is a language generation task.\"\n}"
    ]
  },
  {
    "id": 547,
    "context": [
      "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language understanding task.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsLanguageGenerationTask(x) ::: x is a language generation task.\",\n        \"IsLanguageUnderstandingTask(x) ::: x is a language understanding task.\",\n        \"IsNLPProcessingTask(x) ::: x is a natural language processing task.\",\n        \"IsTextSequence(x) ::: x is a text sequence.\",\n        \"IsMachineTranslation(x) ::: x is machine translation.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsNLPProcessingTask(x) → (IsLanguageGenerationTask(x) ∨ IsLanguageUnderstandingTask(x))) ::: A natural language processing task can be categorized as either a language generation task or a language understanding task.\",\n        \"∀x ((IsNLPProcessingTask(x) ∧ IsTextSequence(Output(x))) → IsLanguageGenerationTask(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\",\n        \"IsNLPProcessingTask(MachineTranslation) ::: Machine translation is a natural language processing task.\",\n        \"IsTextSequence(Output(MachineTranslation)) ::: The output of machine translation is a text sequence.\"\n    ],\n    \"First-Order-Logic Question\": \"IsLanguageUnderstandingTask(MachineTranslation) ::: Machine translation is a language understanding task.\"\n}"
    ]
  },
  {
    "id": 476,
    "context": [
      "Pets are allowed in some managed buildings.",
      "A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to the monthly rent at a managed building or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "$2000 is more than $1500.",
      "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "If a managed building allows pets, then people are allowed to move in with a pet. "
    ],
    "question": "Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"AllowedIn(x, y) ::: x is allowed in y\", \"RequireDepositToRent(x) ::: a deposit is required to rent x\", \"Equal(x, y) ::: x is equal to y\", \"MoreThan(x, y) ::: x is more than y\", \"IsCat(x) ::: x is a cat\", \"IsPet(x) ::: x is a pet\", \"IsManagedBuilding(x) ::: x is a managed building\", \"RentApartment(x, y) ::: x rents an apartment in y\", \"MoveInWith(x, y) ::: x moves in with y\", \"SecurityDeposit(x, y) ::: x is the security deposit for y\", \"MonthlyRent(x, y) ::: x is the monthly rent for y\"],\n    \"First-Order-Logic Premises\": [\"∃x (IsPet(x) ∧ AllowedIn(x, managedBuilding)) ::: Pets are allowed in some managed buildings.\", \"∀x (RequireDepositToRent(x)) ::: A deposit is required to rent an apartment in a managed building.\", \"∀x (Equal(SecurityDeposit(managedBuilding, monthlyRent(managedBuilding)) ∨ MoreThan(SecurityDeposit(managedBuilding, monthlyRent(managedBuilding)))) ::: The security deposit can be either equal to the monthly rent at a managed building or more.\", \"IsCat(fluffy) ∧ IsPet(fluffy) ∧ IsCat(tom) ∧ IsPet(tom) ∧ MoveInWith(fluffy, tom) ::: Fluffy is Tom's cat.\", \"IsCat(cats) ∧ IsPet(cats) ::: Cats are pets.\", \"IsManagedBuilding(oliveGarden) ∧ MonthlyRent(oliveGarden, $2000) ∧ MoreThan($2000, $1500) ::: The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. $2000 is more than $1500.\", \"∀x (MoveInWith(tom, x) ∧ SecurityDeposit(x, noMoreThan($1500)) → RentApartment(tom, x)) ::: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\", \"∀x (AllowedIn(x, managedBuilding) → ∃y (MoveInWith(y, x))) ::: If a managed building allows pets, then people are allowed to move in with a pet.\"],\n    \"First-Order-Logic Question\": \"RentApartment(tom, oliveGarden) ::: Tom will rent an apartment in The Olive Garden.\"\n}"
    ]
  },
  {
    "id": 477,
    "context": [
      "Pets are allowed in some managed buildings.",
      "A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to the monthly rent at a managed building or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "$2000 is more than $1500.",
      "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "If a managed building allows pets, then people are allowed to move in with a pet. "
    ],
    "question": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"AllowedIn(x, y) ::: x is allowed in y\", \"RequireDepositToRent(x) ::: a deposit is required to rent x\", \"Equal(x, y) ::: x is equal to y\", \"MoreThan(x, y) ::: x is more than y\", \"IsCat(x) ::: x is a cat\", \"IsPet(x) ::: x is a pet\", \"IsManagedBuilding(x) ::: x is a managed building\", \"RentAmount(x, y) ::: the rent amount at x is y\", \"MoveInWith(x, y) ::: x moves in with y\", \"SecurityDeposit(x, y) ::: the security deposit at x is y\"],\n    \"First-Order-Logic Premises\": [\"∃x (IsManagedBuilding(x) ∧ IsPetAllowedIn(x)) ::: Pets are allowed in some managed buildings.\", \"∀x (IsManagedBuilding(x) → RequireDepositToRent(x)) ::: A deposit is required to rent an apartment in a managed building.\", \"∀x (IsManagedBuilding(x) → (SecurityDeposit(x, Equal(MonthlyRent(x))) ∨ MoreThan(SecurityDeposit(x), MonthlyRent(x)))) ::: The security deposit can be either equal to the monthly rent at a managed building or more.\", \"IsCat(fluffy) ∧ IsPet(fluffy) ∧ IsPet(Tom'sCat) ∧ IsCat(Tom'sCat) ::: Fluffy is Tom's cat.\", \"IsCat(cats) ∧ IsPet(cats) ::: Cats are pets.\", \"IsManagedBuilding(oliveGarden) ::: The Olive Garden is a managed building.\", \"RentAmount(oliveGarden, 2000) ::: The monthly rent at the Olive Garden is $2000.\", \"MoreThan(2000, 1500) ::: $2000 is more than $1500.\", \"∀x ((MoveInWith(Tom, Fluffy) ∧ (SecurityDeposit(oliveGarden, MoreThan(1500))) → RentApartment(Tom, oliveGarden))) ::: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\", \"∀x (IsPetAllowedIn(x) → ∀y (MoveInWith(y, IsPet(y)))) ::: If a managed building allows pets, then people are allowed to move in with a pet.\"],\n    \"First-Order-Logic Question\": \"MoveInWith(Tom, Fluffy) ∧ AllowedIn(Tom, oliveGarden) ::: Tom is allowed to move into an apartment in The Olive Garden with Fluffy.\"\n}"
    ]
  },
  {
    "id": 478,
    "context": [
      "Pets are allowed in some managed buildings.",
      "A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to the monthly rent at a managed building or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "$2000 is more than $1500.",
      "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "If a managed building allows pets, then people are allowed to move in with a pet. "
    ],
    "question": "The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"AllowedIn(x, y) ::: x is allowed in y\", \"RequireDepositToRent(x) ::: a deposit is required to rent x\", \"Equal(x, y) ::: x is equal to y\", \"IsCat(x) ::: x is a cat\", \"IsPet(x) ::: x is a pet\", \"IsManagedBuilding(x) ::: x is a managed building\", \"RentAmount(x, y) ::: the rent amount at x is y\", \"IsMoreThan(x, y) ::: x is more than y\", \"IsSecurityDeposit(x, y) ::: x is the security deposit at y\", \"MoveInWith(x, y) ::: x moves in with y\"],\n    \"First-Order-Logic Premises\": [\"∃x (IsManagedBuilding(x) ∧ AllowedIn(pets, x)) ::: Pets are allowed in some managed buildings.\", \"∀x (IsManagedBuilding(x) → RequireDepositToRent(x)) ::: A deposit is required to rent an apartment in a managed building.\", \"∀x (IsManagedBuilding(x) → (IsSecurityDeposit(equal, x) ∨ IsMoreThan(x, rentAmount(x, monthly)))) ::: The security deposit can be either equal to the monthly rent at a managed building or more.\", \"IsCat(fluffy) ∧ IsPet(fluffy) ∧ IsCat(tom) ::: Fluffy is Tom's cat.\", \"IsCat(cats) ∧ IsPet(cats) ::: Cats are pets.\", \"IsManagedBuilding(oliveGarden) ∧ RentAmount(oliveGarden, 2000) ∧ IsMoreThan(2000, 1500) ::: The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. $2000 is more than $1500.\", \"∀x ((IsManagedBuilding(x) ∧ MoveInWith(tom, fluffy) ∧ IsSecurityDeposit(IsMoreThan(1500), x)) → RentApartment(tom, x)) ::: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\", \"∀x ((IsManagedBuilding(x) ∧ AllowedIn(pets, x)) → ∃y MoveInWith(y, pets)) ::: If a managed building allows pets, then people are allowed to move in with a pet.\"],\n    \"First-Order-Logic Question\": \"IsSecurityDeposit(oliveGarden, 2000) ∨ IsMoreThan(IsSecurityDeposit(oliveGarden), 2000) ::: The security deposit at the Olive Garden is either $2000 or more.\"\n}"
    ]
  },
  {
    "id": 933,
    "context": [
      "All business organizations are legal entities.",
      "All companies are business organizations.",
      "All private companies are companies.",
      "All legal entities are created under law. ",
      "All legal entities have legal obligations.",
      "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
    ],
    "question": "The Harvard Weekly Book club has legal obligations.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"BusinessOrganization(x) ::: x is a business organization\", \"LegalEntity(x) ::: x is a legal entity\", \"Company(x) ::: x is a company\", \"PrivateCompany(x) ::: x is a private company\", \"CreatedUnderLaw(x) ::: x is created under law\", \"LegalObligations(x) ::: x has legal obligations\", \"HarvardWeeklyBookClub(x) ::: x is the Harvard Weekly Book Club\"],\n    \"First-Order-Logic Premises\": [\"∀x (BusinessOrganization(x) → LegalEntity(x)) ::: All business organizations are legal entities.\", \"∀x (Company(x) → BusinessOrganization(x)) ::: All companies are business organizations.\", \"∀x (PrivateCompany(x) → Company(x)) ::: All private companies are companies.\", \"∀x (LegalEntity(x) → CreatedUnderLaw(x)) ::: All legal entities are created under law.\", \"∀x (LegalEntity(x) → LegalObligations(x)) ::: All legal entities have legal obligations.\", \"(CreatedUnderLaw(HarvardWeeklyBookClub) → ¬PrivateCompany(HarvardWeeklyBookClub)) ::: If the Harvard Weekly Book Club is created under law, then it is not a private company.\"],\n    \"First-Order-Logic Question\": \"LegalObligations(HarvardWeeklyBookClub) ::: The Harvard Weekly Book club has legal obligations.\"\n}"
    ]
  },
  {
    "id": 934,
    "context": [
      "All business organizations are legal entities.",
      "All companies are business organizations.",
      "All private companies are companies.",
      "All legal entities are created under law. ",
      "All legal entities have legal obligations.",
      "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
    ],
    "question": "The Harvard Weekly Book club has legal obligations and is a private company.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsLegalEntity(x) ::: x is a legal entity.\",\n        \"IsBusinessOrganization(x) ::: x is a business organization.\",\n        \"IsCompany(x) ::: x is a company.\",\n        \"IsPrivateCompany(x) ::: x is a private company.\",\n        \"IsCreatedUnderLaw(x) ::: x is created under law.\",\n        \"HasLegalObligations(x) ::: x has legal obligations.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsBusinessOrganization(x) → IsLegalEntity(x)) ::: All business organizations are legal entities.\",\n        \"∀x (IsCompany(x) → IsBusinessOrganization(x)) ::: All companies are business organizations.\",\n        \"∀x (IsPrivateCompany(x) → IsCompany(x)) ::: All private companies are companies.\",\n        \"∀x (IsLegalEntity(x) → IsCreatedUnderLaw(x)) ::: All legal entities are created under law.\",\n        \"∀x (IsLegalEntity(x) → HasLegalObligations(x)) ::: All legal entities have legal obligations.\",\n        \"(IsCreatedUnderLaw(HarvardWeeklyBookClub) → ¬IsPrivateCompany(HarvardWeeklyBookClub)) ::: If the Harvard Weekly Book Club is created under law, then it is not a private company.\"\n    ],\n    \"First-Order-Logic Question\": \"HasLegalObligations(HarvardWeeklyBookClub) ∧ IsPrivateCompany(HarvardWeeklyBookClub) ::: The Harvard Weekly Book club has legal obligations and is a private company.\"\n}"
    ]
  },
  {
    "id": 935,
    "context": [
      "All business organizations are legal entities.",
      "All companies are business organizations.",
      "All private companies are companies.",
      "All legal entities are created under law. ",
      "All legal entities have legal obligations.",
      "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
    ],
    "question": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsLegalEntity(x) ::: x is a legal entity.\",\n        \"IsBusinessOrganization(x) ::: x is a business organization.\",\n        \"IsCompany(x) ::: x is a company.\",\n        \"IsPrivateCompany(x) ::: x is a private company.\",\n        \"IsCreatedUnderLaw(x) ::: x is created under law.\",\n        \"HasLegalObligations(x) ::: x has legal obligations.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsBusinessOrganization(x) → IsLegalEntity(x)) ::: All business organizations are legal entities.\",\n        \"∀x (IsCompany(x) → IsBusinessOrganization(x)) ::: All companies are business organizations.\",\n        \"∀x (IsPrivateCompany(x) → IsCompany(x)) ::: All private companies are companies.\",\n        \"∀x (IsLegalEntity(x) → IsCreatedUnderLaw(x)) ::: All legal entities are created under law.\",\n        \"∀x (IsLegalEntity(x) → HasLegalObligations(x)) ::: All legal entities have legal obligations.\",\n        \"(IsCreatedUnderLaw(HarvardWeeklyBookClub) → ¬IsPrivateCompany(HarvardWeeklyBookClub)) ::: If the Harvard Weekly Book Club is created under law, then it is not a private company.\"\n    ],\n    \"First-Order-Logic Question\": \"(IsPrivateCompany(HarvardWeeklyBookClub) → (HasLegalObligations(HarvardWeeklyBookClub) ∨ IsCreatedUnderLaw(HarvardWeeklyBookClub))) ::: If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\"\n}"
    ]
  },
  {
    "id": 1366,
    "context": [
      "Animals are either invertebrates or vertebrates.",
      "All animals with backbones reproduce by male-and-female mating. ",
      "All vertebrate animals have a backbone.",
      "All bees do not reproduce by male-and-female mating.",
      "All queen bees are bees.",
      "Harry is a bee."
    ],
    "question": "Harry is a queen bee.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Invertebrate(x) ::: x is an invertebrate\",\n        \"Vertebrate(x) ::: x is a vertebrate\",\n        \"ReproduceByMating(x) ::: x reproduces by male-and-female mating\",\n        \"HasBackbone(x) ::: x has a backbone\",\n        \"Bee(x) ::: x is a bee\",\n        \"QueenBee(x) ::: x is a queen bee\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Animal(x) → (Invertebrate(x) ∨ Vertebrate(x))) ::: Animals are either invertebrates or vertebrates.\",\n        \"∀x ((Vertebrate(x) ∧ AnimalWithBackbone(x)) → ReproduceByMating(x)) ::: All animals with backbones reproduce by male-and-female mating.\",\n        \"∀x (Vertebrate(x) → HasBackbone(x)) ::: All vertebrate animals have a backbone.\",\n        \"∀x (Bee(x) → ¬ReproduceByMating(x)) ::: All bees do not reproduce by male-and-female mating.\",\n        \"∀x (QueenBee(x) → Bee(x)) ::: All queen bees are bees.\",\n        \"Bee(harry) ::: Harry is a bee.\"\n    ],\n    \"First-Order-Logic Question\": \"QueenBee(harry) ::: Harry is a queen bee.\"\n}"
    ]
  },
  {
    "id": 1367,
    "context": [
      "Animals are either invertebrates or vertebrates.",
      "All animals with backbones reproduce by male-and-female mating. ",
      "All vertebrate animals have a backbone.",
      "All bees do not reproduce by male-and-female mating.",
      "All queen bees are bees.",
      "Harry is a bee."
    ],
    "question": "Harry is an invertebrate or a queen bee.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Invertebrate(x) ::: x is an invertebrate\",\n        \"Vertebrate(x) ::: x is a vertebrate\",\n        \"ReproduceByMating(x) ::: x reproduces by male-and-female mating\",\n        \"HasBackbone(x) ::: x has a backbone\",\n        \"Bee(x) ::: x is a bee\",\n        \"QueenBee(x) ::: x is a queen bee\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Animal(x) → (Invertebrate(x) ∨ Vertebrate(x))) ::: Animals are either invertebrates or vertebrates.\",\n        \"∀x ((Vertebrate(x) ∧ Animal(x)) → ReproduceByMating(x)) ::: All animals with backbones reproduce by male-and-female mating.\",\n        \"∀x (Vertebrate(x) → HasBackbone(x)) ::: All vertebrate animals have a backbone.\",\n        \"∀x (Bee(x) → ¬ReproduceByMating(x)) ::: All bees do not reproduce by male-and-female mating.\",\n        \"∀x (QueenBee(x) → Bee(x)) ::: All queen bees are bees.\",\n        \"Bee(harry) ::: Harry is a bee.\"\n    ],\n    \"First-Order-Logic Question\": \"Invertebrate(harry) ∨ QueenBee(harry) ::: Harry is an invertebrate or a queen bee.\"\n}"
    ]
  },
  {
    "id": 1368,
    "context": [
      "Animals are either invertebrates or vertebrates.",
      "All animals with backbones reproduce by male-and-female mating. ",
      "All vertebrate animals have a backbone.",
      "All bees do not reproduce by male-and-female mating.",
      "All queen bees are bees.",
      "Harry is a bee."
    ],
    "question": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Invertebrate(x) ::: x is an invertebrate\",\n        \"Vertebrate(x) ::: x is a vertebrate\",\n        \"ReproduceByMating(x) ::: x reproduces by male-and-female mating\",\n        \"HasBackbone(x) ::: x has a backbone\",\n        \"Bee(x) ::: x is a bee\",\n        \"QueenBee(x) ::: x is a queen bee\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (Animal(x) → (Invertebrate(x) ∨ Vertebrate(x))) ::: Animals are either invertebrates or vertebrates.\",\n        \"∀x ((Vertebrate(x) ∧ Animal(x)) → ReproduceByMating(x)) ::: All animals with backbones reproduce by male-and-female mating.\",\n        \"∀x (Vertebrate(x) → HasBackbone(x)) ::: All vertebrate animals have a backbone.\",\n        \"∀x (Bee(x) → ¬ReproduceByMating(x)) ::: All bees do not reproduce by male-and-female mating.\",\n        \"∀x (QueenBee(x) → Bee(x)) ::: All queen bees are bees.\",\n        \"Bee(harry) ::: Harry is a bee.\"\n    ],\n    \"First-Order-Logic Question\": \"((Vertebrate(harry) ∧ HasBackbone(harry)) ∨ (¬Vertebrate(harry) ∧ ¬HasBackbone(harry))) → (¬Invertebrate(harry) ∧ ¬QueenBee(harry)) ::: If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\"\n}"
    ]
  },
  {
    "id": 1011,
    "context": [
      "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who were born together, then they were born in a multiple birth.",
      "If people complain often about annoying siblings, then they have siblings who were born together.",
      "If people live at home, then they do not live with strangers.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
      "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
    ],
    "question": "Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"BornInMultipleBirthWithSiblings(x) ::: x is born in a multiple birth with siblings.\",\n        \"SpendTimeWithSiblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\",\n        \"HaveSiblingsBornTogether(x) ::: x has siblings who were born together.\",\n        \"ComplainAboutSiblings(x) ::: x complains often about annoying siblings.\",\n        \"LiveAtHome(x) ::: x lives at home.\",\n        \"LiveWithStrangers(x) ::: x lives with strangers.\",\n        \"IsBaby(x) ::: x is a baby.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (BornInMultipleBirthWithSiblings(x) → SpendTimeWithSiblings(x)) ::: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\",\n        \"∀x (HaveSiblingsBornTogether(x) → BornInMultipleBirthWithSiblings(x)) ::: If people have siblings who were born together, then they were born in a multiple birth.\",\n        \"∀x (ComplainAboutSiblings(x) → HaveSiblingsBornTogether(x)) ::: If people complain often about annoying siblings, then they have siblings who were born together.\",\n        \"∀x (LiveAtHome(x) → ¬LiveWithStrangers(x)) ::: If people live at home, then they do not live with strangers.\",\n        \"∀x (SpendTimeWithSiblings(x) → LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\",\n        \"¬((IsBaby(luke) ∧ BornInMultipleBirthWithSiblings(luke) ∧ LiveWithStrangers(luke)) ⊕ (¬IsBaby(luke) ∧ ¬LiveWithStrangers(luke))) ::: Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers.\"\n    ],\n    \"First-Order-Logic Question\": \"SpendTimeWithSiblings(luke) ::: Luke spends a lot of time hanging out and playing with his siblings.\"\n}"
    ]
  },
  {
    "id": 1012,
    "context": [
      "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who were born together, then they were born in a multiple birth.",
      "If people complain often about annoying siblings, then they have siblings who were born together.",
      "If people live at home, then they do not live with strangers.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
      "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
    ],
    "question": "Luke complains often about annoying siblings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"BornInMultipleBirthWithSiblings(x)\", \"SpendTimeWithSiblings(x)\", \"PlayWithSiblings(x)\", \"HaveSiblingsBornTogether(x)\", \"ComplainOften(x)\", \"LiveAtHome(x)\", \"LiveWithStrangers(x)\", \"IsBaby(x)\", \"Luke\"],\n    \"First-Order-Logic Premises\": [\"∀x (BornInMultipleBirthWithSiblings(x) → (SpendTimeWithSiblings(x) ∧ PlayWithSiblings(x)))\", \"∀x (HaveSiblingsBornTogether(x) → BornInMultipleBirthWithSiblings(x))\", \"∀x (ComplainOften(x) → HaveSiblingsBornTogether(x))\", \"∀x (LiveAtHome(x) → ¬LiveWithStrangers(x))\", \"∀x ((SpendTimeWithSiblings(x) ∧ PlayWithSiblings(x)) → LiveAtHome(x))\", \"¬((IsBaby(luke) ∧ LiveWithStrangers(luke)) ⊕ (¬IsBaby(luke) ∧ ¬LiveWithStrangers(luke)))\"],\n    \"First-Order-Logic Question\": \"ComplainOften(luke)\"\n}"
    ]
  },
  {
    "id": 1013,
    "context": [
      "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who were born together, then they were born in a multiple birth.",
      "If people complain often about annoying siblings, then they have siblings who were born together.",
      "If people live at home, then they do not live with strangers.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
      "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
    ],
    "question": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"BornInMultipleBirthWithSiblings(x) ::: x is born in a multiple birth with siblings.\",\n        \"SpendTimeWithSiblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\",\n        \"HaveSiblingsBornTogether(x) ::: x has siblings who were born together.\",\n        \"ComplainAboutSiblings(x) ::: x complains often about annoying siblings.\",\n        \"LiveAtHome(x) ::: x lives at home.\",\n        \"LiveWithStrangers(x) ::: x lives with strangers.\",\n        \"IsBaby(x) ::: x is a baby.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (BornInMultipleBirthWithSiblings(x) → SpendTimeWithSiblings(x)) ::: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\",\n        \"∀x (HaveSiblingsBornTogether(x) → BornInMultipleBirthWithSiblings(x)) ::: If people have siblings who were born together, then they were born in a multiple birth.\",\n        \"∀x (ComplainAboutSiblings(x) → HaveSiblingsBornTogether(x)) ::: If people complain often about annoying siblings, then they have siblings who were born together.\",\n        \"∀x (LiveAtHome(x) → ¬LiveWithStrangers(x)) ::: If people live at home, then they do not live with strangers.\",\n        \"∀x (SpendTimeWithSiblings(x) → LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\",\n        \"¬((IsBaby(luke) ∧ BornInMultipleBirthWithSiblings(luke) ∧ LiveWithStrangers(luke)) ⊕ (¬IsBaby(luke) ∧ ¬LiveWithStrangers(luke))) ::: Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(BornInMultipleBirthWithSiblings(luke) ∨ ComplainAboutSiblings(luke)) ::: Luke is neither born in a multiple birth nor complains often about annoying siblings.\"\n}"
    ]
  },
  {
    "id": 560,
    "context": [
      "It costs $205 to take the GRE test, which is cheaper than $300.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Those living in single-parent families or having few resources available to them can prove economic hardship.",
      "Tom lives in a single-parent family.",
      "Tom's dad has been out of work, and Tom has few resources available to them. ",
      "Tom is applying to take the GRE test."
    ],
    "question": "ETS provides financial aid to Tom.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Costs(x, y) ::: x costs y.\",\n        \"ProvidesFinancialAidTo(x, y) ::: x provides financial aid to y.\",\n        \"ProveEconomicHardship(x) ::: x proves economic hardship.\",\n        \"LivingInSingleParentFamily(x) ::: x is living in a single-parent family.\",\n        \"FewResourcesAvailable(x) ::: x has few resources available.\",\n        \"ApplyingToTakeTest(x, y) ::: x is applying to take the test y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Costs(GRETest, $205) ∧ (GRETest < $300) ::: It costs $205 to take the GRE test, which is cheaper than $300.\",\n        \"∀x (ApplyingToTakeTest(x, GRETest) → (ProveEconomicHardship(x) → ProvidesFinancialAidTo(ETS, x))) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\",\n        \"∀x (LivingInSingleParentFamily(x) ∨ FewResourcesAvailable(x) → ProveEconomicHardship(x)) ::: Those living in single-parent families or having few resources available to them can prove economic hardship.\",\n        \"LivingInSingleParentFamily(tom) ::: Tom lives in a single-parent family.\",\n        \"FewResourcesAvailable(tom) ∧ FewResourcesAvailable(tomDad) ∧ (OutOfWork(tomDad) ∧ ParentOf(tomDad, tom)) ::: Tom's dad has been out of work, and Tom has few resources available to them.\",\n        \"ApplyingToTakeTest(tom, GRETest) ::: Tom is applying to take the GRE test.\"\n    ],\n    \"First-Order-Logic Question\": \"ProvidesFinancialAidTo(ETS, tom) ::: ETS provides financial aid to Tom.\"\n}"
    ]
  },
  {
    "id": 561,
    "context": [
      "It costs $205 to take the GRE test, which is cheaper than $300.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Those living in single-parent families or having few resources available to them can prove economic hardship.",
      "Tom lives in a single-parent family.",
      "Tom's dad has been out of work, and Tom has few resources available to them. ",
      "Tom is applying to take the GRE test."
    ],
    "question": "It costs below US $300 to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Costs(x, y) ::: x costs y.\",\n        \"ProvidesFinancialAid(x, y) ::: x provides financial aid to y.\",\n        \"ProveEconomicHardship(x) ::: x proves economic hardship.\",\n        \"LivingInSingleParentFamily(x) ::: x is living in a single-parent family.\",\n        \"FewResourcesAvailable(x) ::: x has few resources available.\",\n        \"ApplyingToTakeGRE(x) ::: x is applying to take the GRE test.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Costs(GRETest, $205) ∧ (GRETest < $300) ::: It costs $205 to take the GRE test, which is cheaper than $300.\",\n        \"∀x (ApplyingToTakeGRE(x) ∧ ProveEconomicHardship(x) → ProvidesFinancialAid(ETS, x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\",\n        \"∀x (LivingInSingleParentFamily(x) ∨ FewResourcesAvailable(x) → ProveEconomicHardship(x)) ::: Those living in single-parent families or having few resources available to them can prove economic hardship.\",\n        \"LivingInSingleParentFamily(tom) ::: Tom lives in a single-parent family.\",\n        \"FewResourcesAvailable(tom) ∧ FewResourcesAvailable(tom) → ProveEconomicHardship(tom) ::: Tom's dad has been out of work, and Tom has few resources available to them.\",\n        \"ApplyingToTakeGRE(tom) ::: Tom is applying to take the GRE test.\"\n    ],\n    \"First-Order-Logic Question\": \"Costs(GRETest, $205) ∧ (GRETest < $300) ::: It costs below US $300 to take the GRE test.\"\n}"
    ]
  },
  {
    "id": 562,
    "context": [
      "It costs $205 to take the GRE test, which is cheaper than $300.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Those living in single-parent families or having few resources available to them can prove economic hardship.",
      "Tom lives in a single-parent family.",
      "Tom's dad has been out of work, and Tom has few resources available to them. ",
      "Tom is applying to take the GRE test."
    ],
    "question": "No one taking the GRE test has financial aid provided to them by something.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Costs(x, y) ::: x costs y.\",\n        \"TakeTest(x, y) ::: x takes the test y.\",\n        \"CheaperThan(x, y) ::: x is cheaper than y.\",\n        \"ProvidesFinancialAid(x, y) ::: x provides financial aid to y.\",\n        \"ProveEconomicHardship(x) ::: x proves economic hardship.\",\n        \"LivingInSingleParentFamily(x) ::: x is living in a single-parent family.\",\n        \"FewResourcesAvailable(x) ::: x has few resources available.\",\n        \"OutOfWork(x) ::: x is out of work.\",\n        \"ApplyingToTakeTest(x, y) ::: x is applying to take the test y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Costs(GRE, 205) ∧ CheaperThan(205, 300) ::: It costs $205 to take the GRE test, which is cheaper than $300.\",\n        \"∀x (TakeTest(x, GRE) → (ProveEconomicHardship(x) → ProvidesFinancialAid(ETS, x))) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\",\n        \"∀x ((LivingInSingleParentFamily(x) ∨ FewResourcesAvailable(x)) → ProveEconomicHardship(x)) ::: Those living in single-parent families or having few resources available to them can prove economic hardship.\",\n        \"LivingInSingleParentFamily(tom) ::: Tom lives in a single-parent family.\",\n        \"OutOfWork(dad(tom)) ∧ FewResourcesAvailable(tom) ::: Tom's dad has been out of work, and Tom has few resources available to them.\",\n        \"ApplyingToTakeTest(tom, GRE) ::: Tom is applying to take the GRE test.\"\n    ],\n    \"First-Order-Logic Question\": \"¬∃x (TakeTest(x, GRE) ∧ ProvidesFinancialAid(y, x)) ::: No one taking the GRE test has financial aid provided to them by something.\"\n}"
    ]
  },
  {
    "id": 958,
    "context": [
      "If people spill a lot of food on their clothing, then they are not notably tidy.",
      "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people are cleanly, then they are notably tidy.",
      "If people value order and spotlessness, then they are cleanly.",
      "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
      "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
    ],
    "question": "Peter is notably tidy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"SpillFoodOnClothing(x) ::: x spills a lot of food on their clothing.\",\n        \"NotTidy(x) ::: x is not notably tidy.\",\n        \"ClumsyFoodie(x) ::: x is a clumsy foodie.\",\n        \"GoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\",\n        \"Cleanly(x) ::: x is cleanly.\",\n        \"ValueOrderAndSpotlessness(x) ::: x values order and spotlessness.\",\n        \"FamilyPrioritizeOrder(x) ::: x's family prioritizes order and spotlessness.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (SpillFoodOnClothing(x) → NotTidy(x)) ::: If people spill a lot of food on their clothing, then they are not notably tidy.\",\n        \"∀x ((ClumsyFoodie(x) ∧ GoOutFrequently(x)) → SpillFoodOnClothing(x)) ::: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\",\n        \"∀x (Cleanly(x) → NotTidy(x)) ::: If people are cleanly, then they are notably tidy.\",\n        \"∀x (ValueOrderAndSpotlessness(x) → Cleanly(x)) ::: If people value order and spotlessness, then they are cleanly.\",\n        \"∀x (FamilyPrioritizeOrder(x) → ValueOrderAndSpotlessness(x)) ::: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\",\n        \"¬((SpillFoodOnClothing(peter) ∧ Cleanly(peter)) ⊕ (¬SpillFoodOnClothing(peter) ∧ ¬Cleanly(peter))) ::: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\"\n    ],\n    \"First-Order-Logic Question\": \"NotTidy(peter) ::: Peter is notably tidy.\"\n}"
    ]
  },
  {
    "id": 959,
    "context": [
      "If people spill a lot of food on their clothing, then they are not notably tidy.",
      "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people are cleanly, then they are notably tidy.",
      "If people value order and spotlessness, then they are cleanly.",
      "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
      "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
    ],
    "question": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"SpillFoodOnClothing(x)\", \"NotTidy(x)\", \"ClumsyFoodie(x)\", \"GoOutFrequently(x)\", \"FindNewFoodRestaurants(x)\", \"Cleanly(x)\", \"ValueOrderAndSpotlessness(x)\", \"PrioritizeOrderAndSpotlessness(x)\", \"Family(x, y)\"],\n    \"First-Order-Logic Premises\": [\"∀x (SpillFoodOnClothing(x) → ¬NotTidy(x)) ::: If people spill a lot of food on their clothing, then they are not notably tidy.\", \"∀x ((ClumsyFoodie(x) ∧ GoOutFrequently(x) ∧ FindNewFoodRestaurants(x)) → SpillFoodOnClothing(x)) ::: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\", \"∀x (Cleanly(x) → NotTidy(x)) ::: If people are cleanly, then they are notably tidy.\", \"∀x (ValueOrderAndSpotlessness(x) → Cleanly(x)) ::: If people value order and spotlessness, then they are cleanly.\", \"∀x (PrioritizeOrderAndSpotlessness(Family(x)) → ValueOrderAndSpotlessness(x)) ::: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\", \"¬((SpillFoodOnClothing(peter) ∧ Cleanly(peter)) ⊕ (¬SpillFoodOnClothing(peter) ∧ ¬Cleanly(peter))) ::: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\"],\n    \"First-Order-Logic Question\": \"ClumsyFoodie(peter) ∧ GoOutFrequently(peter) ∧ FindNewFoodRestaurants(peter) ∨ ∃y (Family(peter, y) ∧ PrioritizeOrderAndSpotlessness(y)) ::: Peter is either a clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\"\n}"
    ]
  },
  {
    "id": 960,
    "context": [
      "If people spill a lot of food on their clothing, then they are not notably tidy.",
      "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people are cleanly, then they are notably tidy.",
      "If people value order and spotlessness, then they are cleanly.",
      "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
      "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
    ],
    "question": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"SpillFoodOnClothing(x) ::: x spills a lot of food on their clothing.\",\n        \"NotTidy(x) ::: x is not notably tidy.\",\n        \"ClumsyFoodie(x) ::: x is a clumsy foodie.\",\n        \"GoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.\",\n        \"Cleanly(x) ::: x is cleanly.\",\n        \"ValueOrderAndSpotlessness(x) ::: x values order and spotlessness.\",\n        \"FamilyPrioritizeOrderAndSpotlessness(x) ::: x's family prioritizes order and spotlessness.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (SpillFoodOnClothing(x) → NotTidy(x)) ::: If people spill a lot of food on their clothing, then they are not notably tidy.\",\n        \"∀x ((ClumsyFoodie(x) ∧ GoOutFrequently(x)) → SpillFoodOnClothing(x)) ::: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\",\n        \"∀x (Cleanly(x) → NotTidy(x)) ::: If people are cleanly, then they are notably tidy.\",\n        \"∀x (ValueOrderAndSpotlessness(x) → Cleanly(x)) ::: If people value order and spotlessness, then they are cleanly.\",\n        \"∀x (FamilyPrioritizeOrderAndSpotlessness(x) → ValueOrderAndSpotlessness(x)) ::: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\",\n        \"¬((SpillFoodOnClothing(peter) ∧ Cleanly(peter)) ⊕ (¬SpillFoodOnClothing(peter) ∧ ¬Cleanly(peter))) ::: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\"\n    ],\n    \"First-Order-Logic Question\": \"((ClumsyFoodie(peter) ∧ GoOutFrequently(peter) ∧ FamilyPrioritizeOrderAndSpotlessness(peter)) ∨ (¬ClumsyFoodie(peter) ∧ ¬GoOutFrequently(peter) ∧ ¬FamilyPrioritizeOrderAndSpotlessness(peter))) ::: Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and is someone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\"\n}"
    ]
  },
  {
    "id": 706,
    "context": [
      "All fir trees are evergreens.",
      "Some objects of worship are fir trees."
    ],
    "question": "Some evergreens are not objects of worship.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsEvergreen(x) ::: x is an evergreen tree.\", \"IsObjectOfWorship(x) ::: x is an object of worship.\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsFirTree(x) → IsEvergreen(x)) ::: All fir trees are evergreens.\", \"∃x (IsObjectOfWorship(x) ∧ IsFirTree(x)) ::: Some objects of worship are fir trees.\"],\n    \"First-Order-Logic Question\": \"∃x (IsEvergreen(x) ∧ ¬IsObjectOfWorship(x)) ::: Some evergreens are not objects of worship.\"\n}"
    ]
  },
  {
    "id": 370,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines that have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsDependentOn(x, y) ::: x is dependent on y.\", \"DrinkRegularly(x, y) ::: x regularly drinks y.\", \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\", \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\", \"Student(x) ::: x is a student.\", \"Czech(x) ::: x is czech\", \"ChoralConductor(x) ::: x is a choral conductor\", \"SpecializeInPerformanceOf(x, y) ::: x Specializes in the performance of y\", \"Musician(x) ::: x is a musician\", \"Love(x, y) ::: x loves y\", \"PublishedBook(x, y) ::: x published the book y\"],\n    \"First-Order-Logic Premises\": [\"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\", \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\", \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\", \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\", \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\", \"Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic) ::: Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\", \"∀x (ChoralConductor(x) → Musician(x)) ::: Any choral conductor is a musician.\", \"∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music))) ::: Some musicians love music.\", \"PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946) ::: Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.\", \"MountainRange(x, newMexico) ∨ MountainRange(x, texas) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\", \"Visited(juanDeOnate, picurisMountains) ::: Juan de Onate visited the Picuris Mountains.\", \"Donated(hardingPegmatiteMine, picurisMountains) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\", \"¬∃x (MountainRange(x, texas) ∧ HasDonatedMine(x)) ::: There are no mountain ranges in Texas that have mines that have been donated.\"],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 371,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines that have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"MountainRange(x) ::: x is a mountain range\",\n        \"InLocation(x, y) ::: x is in location y\",\n        \"VisitedBy(x, y) ::: x is visited by y\",\n        \"Donated(x) ::: x was donated\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"MountainRange(picuris) ∨ InLocation(picuris, newMexico) ∨ InLocation(picuris, texas) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\",\n        \"VisitedBy(juanDeOnate, picuris) ::: Juan de Onate visited the Picuris Mountains.\",\n        \"InLocation(hardingPegmatiteMine, picuris) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\",\n        \"¬∃x (MountainRange(x) ∧ InLocation(x, texas) ∧ Donated(y) ∧ InLocation(y, x)) ::: There are no mountain ranges in Texas that have mines that have been donated.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x (MountainRange(x) ∧ InLocation(x, texas) ∧ VisitedBy(juanDeOnate, x)) ::: Juan de Onate visited a mountain range in Texas.\"\n}"
    ]
  },
  {
    "id": 372,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines that have been donated."
    ],
    "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"MountainRange(x) ::: x is a mountain range\", \"VisitedBy(x, y) ::: x is visited by y\", \"Donated(x) ::: x was donated\", \"LocatedIn(x, y) ::: x is located in y\", \"HasMine(x) ::: x has a mine\"],\n    \"First-Order-Logic Premises\": [\"MountainRange(picuris) ∨ MountainRange(texas) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\", \"VisitedBy(juanDeOnate, picuris) ::: Juan de Onate visited the Picuris Mountains.\", \"LocatedIn(hardingPegmatiteMine, picuris) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\", \"¬∃x (MountainRange(texas) ∧ HasMine(x) ∧ Donated(x)) ::: There are no mountain ranges in Texas that have mines that have been donated.\"],\n    \"First-Order-Logic Question\": \"¬LocatedIn(hardingPegmatiteMine, newMexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico.\"\n}"
    ]
  },
  {
    "id": 527,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsTallerThan(x, y) ::: x is taller than y.\",\n        \"IsMan(x) ::: x is a man.\",\n        \"CanBlockShooting(x, y) ::: x can block y's shooting.\",\n        \"IsInClass(x, y) ::: x is in class y.\",\n        \"CanJumpWhenShooting(x) ::: x can jump when shooting.\",\n        \"IsGreatShooter(x) ::: x is a great shooter.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ∀y ((IsMan(x) ∧ IsMan(y) ∧ IsTallerThan(x, y)) → CanBlockShooting(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\",\n        \"IsMan(michael) ∧ IsTallerThan(michael, everyoneElseInClass(michael)) ::: Michael is a man who is taller than everyone else in his class.\",\n        \"∀x ∀y ∀z ((IsMan(x) ∧ IsMan(y) ∧ IsMan(z) ∧ IsTallerThan(x, y) ∧ IsTallerThan(y, z)) → IsTallerThan(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\",\n        \"IsMan(peter) ∧ IsTallerThan(peter, michael) ::: Peter is a man who is taller than Michael.\",\n        \"∀x ∀y (IsMan(x) ∧ CanBlockShooting(x, y) → (CanJumpWhenShooting(y) ∨ ¬CanJumpWhenShooting(y))) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\",\n        \"¬CanBlockShooting(michael, windy) ::: Michael cannot block Windy's shooting.\",\n        \"∀x (CanJumpWhenShooting(x) → IsGreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\"\n    ],\n    \"First-Order-Logic Question\": \"∃y (IsMan(y) ∧ IsInClass(michael, classOf(y)) ∧ IsTallerThan(michael, y)) ::: Peter is shorter than a man in Michael's class.\"\n}"
    ]
  },
  {
    "id": 528,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Windy is a great shooter.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"TallerThan(x, y) ::: x is taller than y.\",\n        \"Man(x) ::: x is a man.\",\n        \"BlockShooting(x, y) ::: x can block y's shooting.\",\n        \"InClass(x, y) ::: x is in class y.\",\n        \"JumpWhenShooting(x) ::: x jumps when shooting.\",\n        \"GreatShooter(x) ::: x is a great shooter.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ∀y ((Man(x) ∧ Man(y) ∧ TallerThan(x, y)) → BlockShooting(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\",\n        \"Man(michael) ∧ ∀x (InClass(x, class) → TallerThan(michael, x)) ::: Michael is a man who is taller than everyone else in his class.\",\n        \"∀x ∀y ∀z ((TallerThan(x, y) ∧ TallerThan(y, z)) → TallerThan(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\",\n        \"Man(peter) ∧ TallerThan(peter, michael) ::: Peter is a man who is taller than Michael.\",\n        \"∀x ∀y (Man(x) ∧ ¬JumpWhenShooting(y) → BlockShooting(x, y)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\",\n        \"¬BlockShooting(michael, windy) ::: Michael cannot block Windy's shooting.\",\n        \"∀x (JumpWhenShooting(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\"\n    ],\n    \"First-Order-Logic Question\": \"GreatShooter(windy) ::: Windy is a great shooter.\"\n}"
    ]
  },
  {
    "id": 529,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter can block Windy's shooting.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsTallerThan(x, y) ::: x is taller than y.\",\n        \"Man(x) ::: x is a man.\",\n        \"BlockShooting(x, y) ::: x can block y's shooting.\",\n        \"InClass(x, y) ::: x is in class y.\",\n        \"JumpWhenShooting(x) ::: x jumps when shooting.\",\n        \"GreatShooter(x) ::: x is a great shooter.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ∀y ((Man(x) ∧ Man(y) ∧ IsTallerThan(x, y)) → BlockShooting(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\",\n        \"Man(michael) ∧ IsTallerThan(michael, z) ∧ InClass(z, class) ∧ ∀y (InClass(y, class) → IsTallerThan(michael, y)) ::: Michael is a man who is taller than everyone else in his class.\",\n        \"∀x ∀y ∀z ((IsTallerThan(x, y) ∧ IsTallerThan(y, z)) → IsTallerThan(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z\",\n        \"Man(peter) ∧ IsTallerThan(peter, michael) ::: Peter is a man who is taller than Michael.\",\n        \"∀y (¬JumpWhenShooting(y) → BlockShooting(michael, y)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\",\n        \"¬BlockShooting(michael, windy) ::: Michael cannot block Windy's shooting.\",\n        \"∀x (JumpWhenShooting(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\"\n    ],\n    \"First-Order-Logic Question\": \"BlockShooting(peter, windy) ::: Peter can block Windy's shooting.\"\n}"
    ]
  },
  {
    "id": 439,
    "context": [
      "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
      "Antarctica is located on the South Shetland Islands. ",
      "If place A is located in place B and place B is located in place C, then place A is located in place C."
    ],
    "question": "Barutin Cove is named after all islands in Antarctica.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"NamedAfter(x, y) ::: x is named after y\",\n        \"LocatedIn(x, y) ::: x is located in y\",\n        \"Island(x) ::: x is an island\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"NamedAfter(barutinCove, barutin) ::: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\",\n        \"LocatedIn(barutinCove, southwestCoastSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\",\n        \"LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands) ::: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\",\n        \"LocatedIn(antarctica, southShetlandIslands) ::: Antarctica is located on the South Shetland Islands.\",\n        \"∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If place A is located in place B and place B is located in place C, then place A is located in place C.\"\n    ],\n    \"First-Order-Logic Question\": \"∀x (Island(x) → NamedAfter(barutinCove, x)) ::: Barutin Cove is named after all islands in Antarctica.\"\n}"
    ]
  },
  {
    "id": 440,
    "context": [
      "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
      "Antarctica is located on the South Shetland Islands. ",
      "If place A is located in place B and place B is located in place C, then place A is located in place C."
    ],
    "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"NamedAfter(x, y) ::: x is named after y.\",\n        \"LocatedIn(x, y) ::: x is located in y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"NamedAfter(barutinCove, barutin) ::: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\",\n        \"LocatedIn(barutinCove, southwestCoastOfSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\",\n        \"LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands) ::: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\",\n        \"LocatedIn(antarctica, southShetlandIslands) ::: Antarctica is located on the South Shetland Islands.\",\n        \"∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If place A is located in place B and place B is located in place C, then place A is located in place C.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x ∃y (LocatedIn(x, antarctica) ∧ NamedAfter(x, y) ∧ LocatedIn(y, bulgaria)) ::: There is at least one cove in Antarctica named after a place in Bulgaria.\"\n}"
    ]
  },
  {
    "id": 441,
    "context": [
      "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
      "Antarctica is located on the South Shetland Islands. ",
      "If place A is located in place B and place B is located in place C, then place A is located in place C."
    ],
    "question": "Barutin Cove is not located in Antarctica.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"NamedAfter(x, y) ::: x is named after y.\", \"LocatedIn(x, y) ::: x is located in y.\"],\n    \"First-Order-Logic Premises\": [\"NamedAfter(barutinCove, barutin) ::: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\", \"LocatedIn(barutinCove, southwestCoastOfSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\", \"LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands) ::: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\", \"LocatedIn(antarctica, southShetlandIslands) ::: Antarctica is located on the South Shetland Islands.\", \"∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If place A is located in place B and place B is located in place C, then place A is located in place C.\"],\n    \"First-Order-Logic Question\": \"¬LocatedIn(barutinCove, antarctica) ::: Barutin Cove is not located in Antarctica.\"\n}"
    ]
  },
  {
    "id": 739,
    "context": [
      "Some affection is love.",
      "Some love is positive."
    ],
    "question": "Some affection is positive.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsDependentOn(x, y) ::: x is dependent on y.\",\n        \"DrinkRegularly(x, y) ::: x regularly drinks y.\",\n        \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\",\n        \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\",\n        \"Student(x) ::: x is a student.\",\n        \"Czech(x) ::: x is czech\",\n        \"ChoralConductor(x) ::: x is a choral conductor\",\n        \"SpecializeInPerformanceOf(x, y) ::: x Specializes in the performance of y\",\n        \"Musician(x) ::: x is a musician\",\n        \"Love(x, y) ::: x loves y\",\n        \"PublishedBook(x, y) ::: x published the book y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\",\n        \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\",\n        \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\",\n        \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\",\n        \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"\n    ],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 786,
    "context": [
      "If something can transport multiple passengers, then they are not one-seaters.",
      "All Tesla Model 3 can transport multiple passengers.",
      "All single-seat electric cars are one-seaters.",
      "All Solo EV cars are single-seat electric cars. ",
      "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
    ],
    "question": "John's car is a Tesla Model 3.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"TransportMultiplePassengers(x) ::: x can transport multiple passengers.\", \"OneSeater(x) ::: x is a one-seater.\", \"TeslaModel3(x) ::: x is a Tesla Model 3.\", \"SingleSeatElectricCar(x) ::: x is a single-seat electric car.\", \"SoloEV(x) ::: x is a Solo EV car.\"],\n    \"First-Order-Logic Premises\": [\"∀x (TransportMultiplePassengers(x) → ¬OneSeater(x)) ::: If something can transport multiple passengers, then they are not one-seaters.\", \"∀x (TeslaModel3(x) → TransportMultiplePassengers(x)) ::: All Tesla Model 3 can transport multiple passengers.\", \"∀x (SingleSeatElectricCar(x) → OneSeater(x)) ::: All single-seat electric cars are one-seaters.\", \"∀x (SoloEV(x) → SingleSeatElectricCar(x)) ::: All Solo EV cars are single-seat electric cars.\", \"¬(¬TeslaModel3(johnCar) → ¬TeslaModel3(johnCar) ∨ SingleSeatElectricCar(johnCar)) ::: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\"],\n    \"First-Order-Logic Question\": \"TeslaModel3(johnCar) ::: John's car is a Tesla Model 3.\"\n}"
    ]
  },
  {
    "id": 787,
    "context": [
      "If something can transport multiple passengers, then they are not one-seaters.",
      "All Tesla Model 3 can transport multiple passengers.",
      "All single-seat electric cars are one-seaters.",
      "All Solo EV cars are single-seat electric cars. ",
      "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
    ],
    "question": "John's car is a Solo EV.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanTransport(x, y) ::: x can transport y\",\n        \"MultiplePassengers(x) ::: x has multiple passengers\",\n        \"OneSeater(x) ::: x is a one-seater\",\n        \"TeslaModel3(x) ::: x is a Tesla Model 3\",\n        \"SingleSeatElectricCar(x) ::: x is a single-seat electric car\",\n        \"SoloEV(x) ::: x is a Solo EV\",\n        \"JohnsCar(x) ::: x is John's car\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (CanTransport(x, multiplePassengers) → ¬OneSeater(x)) ::: If something can transport multiple passengers, then they are not one-seaters.\",\n        \"∀x (TeslaModel3(x) → CanTransport(x, multiplePassengers)) ::: All Tesla Model 3 can transport multiple passengers.\",\n        \"∀x (SingleSeatElectricCar(x) → OneSeater(x)) ::: All single-seat electric cars are one-seaters.\",\n        \"∀x (SoloEV(x) → SingleSeatElectricCar(x)) ::: All Solo EV cars are single-seat electric cars.\",\n        \"¬(¬TeslaModel3(johnsCar) → ¬TeslaModel3(johnsCar) ∨ SingleSeatElectricCar(johnsCar)) ::: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\"\n    ],\n    \"First-Order-Logic Question\": \"SoloEV(johnsCar) ::: John's car is a Solo EV.\"\n}"
    ]
  },
  {
    "id": 788,
    "context": [
      "If something can transport multiple passengers, then they are not one-seaters.",
      "All Tesla Model 3 can transport multiple passengers.",
      "All single-seat electric cars are one-seaters.",
      "All Solo EV cars are single-seat electric cars. ",
      "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
    ],
    "question": "John's car is not a Solo EV.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"CanTransport(x, y) ::: x can transport y\", \"IsOneSeater(x) ::: x is a one-seater\", \"IsTeslaModel3(x) ::: x is a Tesla Model 3\", \"IsSingleSeatElectricCar(x) ::: x is a single-seat electric car\", \"IsSoloEV(x) ::: x is a Solo EV\"],\n    \"First-Order-Logic Premises\": [\"∀x (CanTransport(x, passengers) → ¬IsOneSeater(x)) ::: If something can transport multiple passengers, then they are not one-seaters.\", \"∀x (IsTeslaModel3(x) → CanTransport(x, passengers)) ::: All Tesla Model 3 can transport multiple passengers.\", \"∀x (IsSingleSeatElectricCar(x) → IsOneSeater(x)) ::: All single-seat electric cars are one-seaters.\", \"∀x (IsSoloEV(x) → IsSingleSeatElectricCar(x)) ::: All Solo EV cars are single-seat electric cars.\", \"¬(¬IsTeslaModel3(johnsCar) → (¬IsTeslaModel3(johnsCar) ∨ IsSingleSeatElectricCar(johnsCar))) ::: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\"],\n    \"First-Order-Logic Question\": \"¬IsSoloEV(johnsCar) ::: John's car is not a Solo EV.\"\n}"
    ]
  },
  {
    "id": 1348,
    "context": [
      "All of Peter's pets that are mammals are also animals.",
      "All monkeys are mammals. ",
      "Peter's pets are all either monkeys or birds. ",
      "Peter's birds can fly.",
      "All animals that are Peter's pets can breathe.",
      "If Peter's pet can fly, then it has wings.",
      "Rock is Peter's pet.",
      "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
    ],
    "question": "Rock is a monkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsMammal(x) ::: x is a mammal.\",\n        \"IsAnimal(x) ::: x is an animal.\",\n        \"IsMonkey(x) ::: x is a monkey.\",\n        \"IsBird(x) ::: x is a bird.\",\n        \"CanFly(x) ::: x can fly.\",\n        \"CanBreathe(x) ::: x can breathe.\",\n        \"HasWings(x) ::: x has wings.\",\n        \"IsPetOf(x, y) ::: x is a pet of y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((IsMammal(x) ∧ IsPetOf(x, peter)) → IsAnimal(x)) ::: All of Peter's pets that are mammals are also animals.\",\n        \"∀x (IsMonkey(x) → IsMammal(x)) ::: All monkeys are mammals.\",\n        \"∀x ((IsPetOf(x, peter) → (IsMonkey(x) ∨ IsBird(x)))) ::: Peter's pets are all either monkeys or birds.\",\n        \"∀x ((IsBird(x) ∧ IsPetOf(x, peter)) → CanFly(x)) ::: Peter's birds can fly.\",\n        \"∀x ((IsAnimal(x) ∧ IsPetOf(x, peter)) → CanBreathe(x)) ::: All animals that are Peter's pets can breathe.\",\n        \"∀x ((CanFly(x) → HasWings(x)) ∧ (IsPetOf(rock, peter))) ::: If Peter's pet can fly, then it has wings.\",\n        \"IsPetOf(rock, peter) ::: Rock is Peter's pet.\",\n        \"(CanFly(rock) ∨ IsBird(rock) ∨ ¬CanBreathe(rock)) ::: Rock can fly, or Rock is a bird, or Rock cannot breathe.\"\n    ],\n    \"First-Order-Logic Question\": \"IsMonkey(rock) ::: Rock is a monkey.\"\n}"
    ]
  },
  {
    "id": 1349,
    "context": [
      "All of Peter's pets that are mammals are also animals.",
      "All monkeys are mammals. ",
      "Peter's pets are all either monkeys or birds. ",
      "Peter's birds can fly.",
      "All animals that are Peter's pets can breathe.",
      "If Peter's pet can fly, then it has wings.",
      "Rock is Peter's pet.",
      "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
    ],
    "question": "Rock has wings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsMammal(x) ::: x is a mammal\",\n        \"IsAnimal(x) ::: x is an animal\",\n        \"IsMonkey(x) ::: x is a monkey\",\n        \"IsBird(x) ::: x is a bird\",\n        \"CanFly(x) ::: x can fly\",\n        \"CanBreathe(x) ::: x can breathe\",\n        \"HasWings(x) ::: x has wings\",\n        \"IsPetOf(x, y) ::: x is a pet of y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((IsMammal(x) ∧ IsPetOf(x, peter)) → IsAnimal(x)) ::: All of Peter's pets that are mammals are also animals.\",\n        \"∀x (IsMonkey(x) → IsMammal(x)) ::: All monkeys are mammals.\",\n        \"∀x ((IsPetOf(x, peter) → (IsMonkey(x) ∨ IsBird(x)))) ::: Peter's pets are all either monkeys or birds.\",\n        \"∀x ((IsBird(x) ∧ IsPetOf(x, peter)) → CanFly(x)) ::: Peter's birds can fly.\",\n        \"∀x ((IsAnimal(x) ∧ IsPetOf(x, peter)) → CanBreathe(x)) ::: All animals that are Peter's pets can breathe.\",\n        \"∀x ((CanFly(x) → HasWings(x))) ::: If Peter's pet can fly, then it has wings.\",\n        \"IsPetOf(rock, peter) ::: Rock is Peter's pet.\",\n        \"CanFly(rock) ∨ IsBird(rock) ∨ ¬CanBreathe(rock) ::: Rock can fly, or Rock is a bird, or Rock cannot breathe.\"\n    ],\n    \"First-Order-Logic Question\": \"HasWings(rock) ::: Rock has wings.\"\n}"
    ]
  },
  {
    "id": 1350,
    "context": [
      "All of Peter's pets that are mammals are also animals.",
      "All monkeys are mammals. ",
      "Peter's pets are all either monkeys or birds. ",
      "Peter's birds can fly.",
      "All animals that are Peter's pets can breathe.",
      "If Peter's pet can fly, then it has wings.",
      "Rock is Peter's pet.",
      "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
    ],
    "question": "Rock does not have wings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsMammal(x) ::: x is a mammal.\",\n        \"IsAnimal(x) ::: x is an animal.\",\n        \"IsMonkey(x) ::: x is a monkey.\",\n        \"IsBird(x) ::: x is a bird.\",\n        \"CanFly(x) ::: x can fly.\",\n        \"CanBreathe(x) ::: x can breathe.\",\n        \"HasWings(x) ::: x has wings.\",\n        \"IsPetOf(x, y) ::: x is a pet of y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((IsMammal(x) ∧ IsPetOf(x, peter)) → IsAnimal(x)) ::: All of Peter's pets that are mammals are also animals.\",\n        \"∀x (IsMonkey(x) → IsMammal(x)) ::: All monkeys are mammals.\",\n        \"∀x ((IsPetOf(x, peter) → (IsMonkey(x) ∨ IsBird(x)))) ::: Peter's pets are all either monkeys or birds.\",\n        \"∀x ((IsBird(x) ∧ IsPetOf(x, peter)) → CanFly(x)) ::: Peter's birds can fly.\",\n        \"∀x ((IsAnimal(x) ∧ IsPetOf(x, peter)) → CanBreathe(x)) ::: All animals that are Peter's pets can breathe.\",\n        \"∀x ((CanFly(x) → HasWings(x))) ::: If Peter's pet can fly, then it has wings.\",\n        \"IsPetOf(rock, peter) ::: Rock is Peter's pet.\",\n        \"¬HasWings(rock) ::: Rock does not have wings.\"\n    ],\n    \"First-Order-Logic Question\": \"¬HasWings(rock) ::: Rock does not have wings.\"\n}"
    ]
  },
  {
    "id": 846,
    "context": [
      "All people who make wedding plans are people who are engaged.",
      "All people who invite others to come to their ceremony make wedding plans.",
      "Anyone who has a well-attended wedding invites others to come to their ceremony.",
      "Some people that have well-attended weddings have larger families.",
      "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
      "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
    ],
    "question": "John has a larger family.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"MakeWeddingPlans(x)\", \"Engaged(x)\", \"InviteToCeremony(x)\", \"WellAttendedWedding(x)\", \"LargerFamily(x)\", \"Friend(x)\", \"John\"],\n    \"First-Order-Logic Premises\": [\n        \"∀x (MakeWeddingPlans(x) → Engaged(x)) ::: All people who make wedding plans are people who are engaged.\",\n        \"∀x (InviteToCeremony(x) → MakeWeddingPlans(x)) ::: All people who invite others to come to their ceremony make wedding plans.\",\n        \"∀x (WellAttendedWedding(x) → InviteToCeremony(x)) ::: Anyone who has a well-attended wedding invites others to come to their ceremony.\",\n        \"∃x (WellAttendedWedding(x) ∧ LargerFamily(x)) ::: Some people that have well-attended weddings have larger families.\",\n        \"(Engaged(John) → (¬InviteToCeremony(John) ∧ MakeWeddingPlans(John))) ::: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\",\n        \"(LargerFamily(John) → (WellAttendedWedding(John) ∨ InviteToCeremony(John))) ::: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\"\n    ],\n    \"First-Order-Logic Question\": \"LargerFamily(John) ::: John has a larger family.\"\n}"
    ]
  },
  {
    "id": 847,
    "context": [
      "All people who make wedding plans are people who are engaged.",
      "All people who invite others to come to their ceremony make wedding plans.",
      "Anyone who has a well-attended wedding invites others to come to their ceremony.",
      "Some people that have well-attended weddings have larger families.",
      "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
      "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
    ],
    "question": "John does not have a larger family.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"MakeWeddingPlans(x)\", \"Engaged(x)\", \"InviteToCeremony(x)\", \"WellAttendedWedding(x)\", \"HaveLargerFamily(x)\", \"Friend(x)\", \"John\"],\n    \"First-Order-Logic Premises\": [\n        \"∀x (MakeWeddingPlans(x) → Engaged(x)) ::: All people who make wedding plans are people who are engaged.\",\n        \"∀x (InviteToCeremony(x) → MakeWeddingPlans(x)) ::: All people who invite others to come to their ceremony make wedding plans.\",\n        \"∀x (WellAttendedWedding(x) → InviteToCeremony(x)) ::: Anyone who has a well-attended wedding invites others to come to their ceremony.\",\n        \"∃x (WellAttendedWedding(x) ∧ HaveLargerFamily(x)) ::: Some people that have well-attended weddings have larger families.\",\n        \"(Engaged(John) → (¬Friend(John) ∧ ¬InviteToCeremony(John) ∧ MakeWeddingPlans(John))) ::: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\",\n        \"(HaveLargerFamily(John) → (WellAttendedWedding(John) ∨ InviteToCeremony(John))) ::: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\"\n    ],\n    \"First-Order-Logic Question\": \"¬HaveLargerFamily(John) ::: John does not have a larger family.\"\n}"
    ]
  },
  {
    "id": 848,
    "context": [
      "All people who make wedding plans are people who are engaged.",
      "All people who invite others to come to their ceremony make wedding plans.",
      "Anyone who has a well-attended wedding invites others to come to their ceremony.",
      "Some people that have well-attended weddings have larger families.",
      "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
      "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
    ],
    "question": "John is engaged.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"MakeWeddingPlans(x)\", \"Engaged(x)\", \"InviteToCeremony(x)\", \"WellAttendedWedding(x)\", \"HasLargerFamily(x)\", \"Friend(x)\", \"LargerFamily(x)\"],\n    \"First-Order-Logic Premises\": [\n        \"∀x (MakeWeddingPlans(x) → Engaged(x)) ::: All people who make wedding plans are people who are engaged.\",\n        \"∀x (InviteToCeremony(x) → MakeWeddingPlans(x)) ::: All people who invite others to come to their ceremony make wedding plans.\",\n        \"∀x (WellAttendedWedding(x) → InviteToCeremony(x)) ::: Anyone who has a well-attended wedding invites others to come to their ceremony.\",\n        \"∃x (WellAttendedWedding(x) ∧ HasLargerFamily(x)) ::: Some people that have well-attended weddings have larger families.\",\n        \"(Engaged(john) → (¬Friend(john) ∧ ¬InviteToCeremony(john) ∧ MakeWeddingPlans(john))) ::: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\",\n        \"(HasLargerFamily(john) → (WellAttendedWedding(john) ∨ InviteToCeremony(john))) ::: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\"\n    ],\n    \"First-Order-Logic Question\": \"Engaged(john) ::: John is engaged.\"\n}"
    ]
  },
  {
    "id": 849,
    "context": [
      "All people who make wedding plans are people who are engaged.",
      "All people who invite others to come to their ceremony make wedding plans.",
      "Anyone who has a well-attended wedding invites others to come to their ceremony.",
      "Some people that have well-attended weddings have larger families.",
      "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
      "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
    ],
    "question": "John neither has a larger family nor does he invite others to his wedding.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"MakeWeddingPlans(x)\", \"Engaged(x)\", \"InviteToCeremony(x)\", \"WellAttendedWedding(x)\", \"HaveLargerFamily(x)\", \"Friend(x)\", \"John(x)\"],\n    \"First-Order-Logic Premises\": [\n        \"∀x (MakeWeddingPlans(x) → Engaged(x)) ::: All people who make wedding plans are people who are engaged.\",\n        \"∀x (InviteToCeremony(x) → MakeWeddingPlans(x)) ::: All people who invite others to come to their ceremony make wedding plans.\",\n        \"∀x (WellAttendedWedding(x) → InviteToCeremony(x)) ::: Anyone who has a well-attended wedding invites others to come to their ceremony.\",\n        \"∃x (HaveLargerFamily(x) ∧ WellAttendedWedding(x)) ::: Some people that have well-attended weddings have larger families.\",\n        \"(Engaged(John) → (¬Friend(John) ∧ ¬InviteToCeremony(John) ∧ MakeWeddingPlans(John))) ::: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\",\n        \"(HaveLargerFamily(John) → (WellAttendedWedding(John) ∨ InviteToCeremony(John))) ::: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\"\n    ],\n    \"First-Order-Logic Question\": \"¬HaveLargerFamily(John) ∧ ¬InviteToCeremony(John) ::: John neither has a larger family nor does he invite others to his wedding.\"\n}"
    ]
  },
  {
    "id": 74,
    "context": [
      "Some mammals have teeth.",
      "Platypuses have no teeth.",
      "Platypuses are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypuses are mammals with no teeth.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"HaveTeeth(x) ::: x has teeth.\", \"Mammal(x) ::: x is a mammal.\", \"Platypus(x) ::: x is a platypus.\"],\n    \"First-Order-Logic Premises\": [\"∃x (Mammal(x) ∧ HaveTeeth(x)) ::: Some mammals have teeth.\", \"¬HaveTeeth(platypus) ::: Platypuses have no teeth.\", \"Platypus(platypus) ∧ Mammal(platypus) ::: Platypuses are mammals.\", \"∀x (Mammal(x) → HaveTeeth(x)) ::: Humans have teeth.\"],\n    \"First-Order-Logic Question\": \"Platypus(platypus) ∧ Mammal(platypus) ∧ ¬HaveTeeth(platypus) ::: Platypuses are mammals with no teeth.\"\n}"
    ]
  },
  {
    "id": 75,
    "context": [
      "Some mammals have teeth.",
      "Platypuses have no teeth.",
      "Platypuses are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypuses are reptiles.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"HaveTeeth(x) ::: x has teeth.\",\n        \"Mammal(x) ::: x is a mammal.\",\n        \"Reptile(x) ::: x is a reptile.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x (Mammal(x) ∧ HaveTeeth(x)) ::: Some mammals have teeth.\",\n        \"¬(HaveTeeth(platypus)) ::: Platypuses have no teeth.\",\n        \"Mammal(platypus) ::: Platypuses are mammals.\",\n        \"HaveTeeth(human) ::: Humans have teeth.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Reptile(platypus) ::: Platypuses are not reptiles.\"\n}"
    ]
  },
  {
    "id": 76,
    "context": [
      "Some mammals have teeth.",
      "Platypuses have no teeth.",
      "Platypuses are mammals. ",
      "Humans have teeth."
    ],
    "question": "Humans are mammals.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"HasTeeth(x) ::: x has teeth.\", \"Mammal(x) ::: x is a mammal.\"],\n    \"First-Order-Logic Premises\": [\"∃x (Mammal(x) ∧ HasTeeth(x)) ::: Some mammals have teeth.\", \"¬HasTeeth(platypus) ::: Platypuses have no teeth.\", \"Mammal(platypus) ::: Platypuses are mammals.\", \"HasTeeth(human) ::: Humans have teeth.\"],\n    \"First-Order-Logic Question\": \"Mammal(human) ::: Humans are mammals.\"\n}"
    ]
  },
  {
    "id": 578,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space sucks.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Suck(x)\", \"Vacuum(x)\", \"Vampire(x)\", \"Space(x)\", \"HouseholdAppliance(x)\", \"Duster(x)\"],\n    \"First-Order-Logic Premises\": [\"Suck(plunger)\", \"Vacuum(vacuum)\", \"Vampire(vampire)\", \"Vacuum(space)\", \"HouseholdAppliance(duster) ∧ ¬Suck(duster)\"],\n    \"First-Order-Logic Question\": \"Vacuum(space) ::: Space sucks.\"\n}"
    ]
  },
  {
    "id": 579,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space is a vampire.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Suck(x) ::: x sucks.\",\n        \"IsVacuum(x) ::: x is a vacuum.\",\n        \"IsVampire(x) ::: x is a vampire.\",\n        \"IsHouseholdAppliance(x) ::: x is a household appliance.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsVacuum(space) ::: Space is a vacuum.\",\n        \"∀x (IsVacuum(x) → Suck(x)) ::: Vacuums suck.\",\n        \"IsVampire(vampire) ::: Vampires suck.\",\n        \"IsHouseholdAppliance(duster) ∧ ¬Suck(duster) ::: A duster is a household appliance that doesn't suck.\"\n    ],\n    \"First-Order-Logic Question\": \"IsVampire(space) ::: Space is a vampire.\"\n}"
    ]
  },
  {
    "id": 580,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "If something is a household appliance, it sucks.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Suck(x) ::: x sucks.\",\n        \"IsVacuum(x) ::: x is a vacuum.\",\n        \"IsVampire(x) ::: x is a vampire.\",\n        \"IsHouseholdAppliance(x) ::: x is a household appliance.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Suck(plungers) ::: Plungers suck.\",\n        \"Suck(vacuums) ::: Vacuums suck.\",\n        \"Suck(vampires) ::: Vampires suck.\",\n        \"IsVacuum(space) ::: Space is a vacuum.\",\n        \"IsHouseholdAppliance(duster) ∧ ¬Suck(duster) ::: A duster is a household appliance that doesn't suck.\"\n    ],\n    \"First-Order-Logic Question\": \"∀x (IsHouseholdAppliance(x) → Suck(x)) ::: If something is a household appliance, it sucks.\"\n}"
    ]
  },
  {
    "id": 388,
    "context": [
      "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
      "Unsupervised learning algorithms do not require labeled data.",
      "The state-of-the-art text summarization model is trained with machine learning algorithms.",
      "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
      "The Machine Learning algorithm for training text summarization models requires labeled data."
    ],
    "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsCategorizedAs(x, y) ::: x can be categorized as y\",\n        \"RequireLabeledData(x) ::: x requires labeled data\",\n        \"TrainedWith(x, y) ::: x is trained with y\",\n        \"UsedToTrain(x, y) ::: x is used to train y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsCategorizedAs(machineLearningAlgorithm, supervisedLearning) ∨ IsCategorizedAs(machineLearningAlgorithm, unsupervisedLearning) ∨ IsCategorizedAs(machineLearningAlgorithm, reinforcementLearning) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\",\n        \"∀x (IsCategorizedAs(x, unsupervisedLearning) → ¬RequireLabeledData(x)) ::: Unsupervised learning algorithms do not require labeled data.\",\n        \"TrainedWith(stateOfTheArtTextSummarizationModel, machineLearningAlgorithm) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\",\n        \"¬UsedToTrain(reinforcementLearning, stateOfTheArtTextSummarizationModel) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\",\n        \"RequireLabeledData(machineLearningAlgorithmForTrainingTextSummarizationModels) ::: The Machine Learning algorithm for training text summarization models requires labeled data.\"\n    ],\n    \"First-Order-Logic Question\": \"IsCategorizedAs(supervisedLearning, stateOfTheArtTextSummarizationModel) ::: Supervised learning is used to train the state-of-the-art text summarization model.\"\n}"
    ]
  },
  {
    "id": 389,
    "context": [
      "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
      "Unsupervised learning algorithms do not require labeled data.",
      "The state-of-the-art text summarization model is trained with machine learning algorithms.",
      "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
      "The Machine Learning algorithm for training text summarization models requires labeled data."
    ],
    "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsCategorizedAs(x, y) ::: x can be categorized as y\",\n        \"RequireLabeledData(x) ::: x requires labeled data\",\n        \"TrainedWith(x, y) ::: x is trained with y\",\n        \"UsedToTrain(x, y) ::: x is used to train y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsCategorizedAs(machineLearningAlgorithms, supervisedLearning) ∧ IsCategorizedAs(machineLearningAlgorithms, unsupervisedLearning) ∧ IsCategorizedAs(machineLearningAlgorithms, reinforcementLearning) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\",\n        \"∀x (IsCategorizedAs(x, unsupervisedLearning) → ¬RequireLabeledData(x)) ::: Unsupervised learning algorithms do not require labeled data.\",\n        \"TrainedWith(stateOfTheArtTextSummarizationModel, machineLearningAlgorithms) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\",\n        \"¬UsedToTrain(reinforcementLearning, stateOfTheArtTextSummarizationModel) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\",\n        \"RequireLabeledData(machineLearningAlgorithmForTrainingTextSummarizationModels) ::: The Machine Learning algorithm for training text summarization models requires labeled data.\"\n    ],\n    \"First-Order-Logic Question\": \"UsedToTrain(unsupervisedLearning, stateOfTheArtTextSummarizationModel) ::: Unsupervised learning is used to train the state-of-the-art text summarization model.\"\n}"
    ]
  },
  {
    "id": 1327,
    "context": [
      "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
      "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
      "If a film is rated General Audience, then it is appropriate for people of all ages.",
      "All family-friendly animated films are rated General Audience.",
      "All movies in the Frozen series are family-friendly animated films.",
      "“Hachi: A dog’s Tale” is a film.",
      "“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "
    ],
    "question": "\"Hachi: A dog's Tale\" is rated General Audience.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"AppropriateForAllAges(x) ::: x is appropriate for people of all ages.\",\n        \"ChildrenCanWatchWithoutGuidance(x) ::: children can watch x without guidance from parents.\",\n        \"ContainsExcessiveContent(x) ::: x contains excessive erotic and violent content.\",\n        \"RatedGeneralAudience(x) ::: x is rated General Audience.\",\n        \"FamilyFriendlyAnimatedFilm(x) ::: x is a family-friendly animated film.\",\n        \"InFrozenSeries(x) ::: x is in the Frozen series.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (AppropriateForAllAges(x) → ChildrenCanWatchWithoutGuidance(x)) ::: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\",\n        \"∀x (ContainsExcessiveContent(x) → ¬ChildrenCanWatchWithoutGuidance(x)) ::: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\",\n        \"∀x (RatedGeneralAudience(x) → AppropriateForAllAges(x)) ::: If a film is rated General Audience, then it is appropriate for people of all ages.\",\n        \"∀x (FamilyFriendlyAnimatedFilm(x) → RatedGeneralAudience(x)) ::: All family-friendly animated films are rated General Audience.\",\n        \"FamilyFriendlyAnimatedFilm(frozen) ∧ InFrozenSeries(frozen) ::: All movies in the Frozen series are family-friendly animated films.\",\n        \"Film(hachi) ::: “Hachi: A dog’s Tale” is a film.\",\n        \"¬(¬FamilyFriendlyAnimatedFilm(hachi) ⊕ AppropriateForAllAges(hachi)) ::: “Hachi: A dog’s Tale” is either a family-friendly animated film or is appropriate for people of all ages.\"\n    ],\n    \"First-Order-Logic Question\": \"RatedGeneralAudience(hachi) ::: “Hachi: A dog's Tale\\\" is rated General Audience.\"\n}"
    ]
  },
  {
    "id": 1328,
    "context": [
      "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
      "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
      "If a film is rated General Audience, then it is appropriate for people of all ages.",
      "All family-friendly animated films are rated General Audience.",
      "All movies in the Frozen series are family-friendly animated films.",
      "“Hachi: A dog’s Tale” is a film.",
      "“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "
    ],
    "question": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"AppropriateForAllAges(x) ::: x is appropriate for people of all ages.\",\n        \"ChildrenCanWatchWithoutGuidance(x) ::: children can watch x without guidance from parents.\",\n        \"ContainsExcessiveContent(x) ::: x contains excessive erotic and violent content.\",\n        \"RatedGeneralAudience(x) ::: x is rated General Audience.\",\n        \"FamilyFriendlyAnimatedFilm(x) ::: x is a family-friendly animated film.\",\n        \"InFrozenSeries(x) ::: x is in the Frozen series.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (AppropriateForAllAges(x) → ChildrenCanWatchWithoutGuidance(x)) ::: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\",\n        \"∀x (ContainsExcessiveContent(x) → ¬ChildrenCanWatchWithoutGuidance(x)) ::: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\",\n        \"∀x (RatedGeneralAudience(x) → AppropriateForAllAges(x)) ::: If a film is rated General Audience, then it is appropriate for people of all ages.\",\n        \"∀x (FamilyFriendlyAnimatedFilm(x) → RatedGeneralAudience(x)) ::: All family-friendly animated films are rated General Audience.\",\n        \"∀x (InFrozenSeries(x) → FamilyFriendlyAnimatedFilm(x)) ::: All movies in the Frozen series are family-friendly animated films.\",\n        \"Film(hachiADogsTale) ::: “Hachi: A dog’s Tale” is a film.\",\n        \"¬(¬FamilyFriendlyAnimatedFilm(hachiADogsTale) ⊕ AppropriateForAllAges(hachiADogsTale)) ::: “Hachi: A dog’s Tale” is either a family-friendly animated film or is appropriate for people of all ages.\"\n    ],\n    \"First-Order-Logic Question\": \"ContainsExcessiveContent(hachiADogsTale) ∨ InFrozenSeries(hachiADogsTale) ::: \\\"Hachi: A dog's Tale\\\" contains excessive erotic and violent content or is in the \\\"Frozen\\\" series or both.\"\n}"
    ]
  },
  {
    "id": 1329,
    "context": [
      "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
      "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
      "If a film is rated General Audience, then it is appropriate for people of all ages.",
      "All family-friendly animated films are rated General Audience.",
      "All movies in the Frozen series are family-friendly animated films.",
      "“Hachi: A dog’s Tale” is a film.",
      "“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "
    ],
    "question": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"AppropriateForAllAges(x) ::: x is appropriate for people of all ages.\",\n        \"ChildrenCanWatchWithoutGuidance(x) ::: children can watch x without guidance from parents.\",\n        \"ContainsExcessiveContent(x) ::: x contains excessive erotic and violent content.\",\n        \"RatedGeneralAudience(x) ::: x is rated General Audience.\",\n        \"FamilyFriendlyAnimatedFilm(x) ::: x is a family-friendly animated film.\",\n        \"InFrozenSeries(x) ::: x is in the Frozen series.\",\n        \"IsFilm(x) ::: x is a film.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (AppropriateForAllAges(x) → ChildrenCanWatchWithoutGuidance(x)) ::: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\",\n        \"∀x (ContainsExcessiveContent(x) → ¬ChildrenCanWatchWithoutGuidance(x)) ::: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\",\n        \"∀x (RatedGeneralAudience(x) → AppropriateForAllAges(x)) ::: If a film is rated General Audience, then it is appropriate for people of all ages.\",\n        \"∀x (FamilyFriendlyAnimatedFilm(x) → RatedGeneralAudience(x)) ::: All family-friendly animated films are rated General Audience.\",\n        \"∀x (InFrozenSeries(x) → FamilyFriendlyAnimatedFilm(x)) ::: All movies in the Frozen series are family-friendly animated films.\",\n        \"IsFilm(hachi) ::: “Hachi: A dog’s Tale” is a film.\",\n        \"IsFilm(hachi) ∨ AppropriateForAllAges(hachi) ::: “Hachi: A dog’s Tale” is either a family-friendly animated film or is appropriate for people of all ages.\"\n    ],\n    \"First-Order-Logic Question\": \"(ContainsExcessiveContent(hachi) ∧ InFrozenSeries(hachi)) ∨ (¬ContainsExcessiveContent(hachi) ∧ ¬InFrozenSeries(hachi)) ::: \\\"Hachi: A dog's Tale\\\" either contains excessive erotic and violent content and is a film in the \\\"Frozen\\\" series, or it neither contains excessive erotic and violent content nor is a film in the \\\"Frozen\\\" series.\"\n}"
    ]
  },
  {
    "id": 133,
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred back in the 1920s to resemble the aurochs.",
      "Heck cattle are animals.",
      "Aurochs are animals.",
      "Some animals to be bred back resemble extinct animals."
    ],
    "question": "Some Heck cattle are artificially selected.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ArtificialSelection(x) ::: x is a form of artificial selection\",\n        \"SelectiveBreedingOf(x, y) ::: x is the deliberate selective breeding of y\",\n        \"DomesticAnimal(x) ::: x is a domestic animal\",\n        \"BredBack(x, y) ::: x is bred back to resemble y\",\n        \"Resemble(x, y) ::: x resembles y\",\n        \"Animal(x) ::: x is an animal\",\n        \"ExtinctAnimal(x) ::: x is an extinct animal\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ArtificialSelection(BreedingBack) ∧ SelectiveBreedingOf(BreedingBack, DomesticAnimal)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\",\n        \"BredBack(HeckCattle, Aurochs, yr1920s) ::: Heck cattle were bred back in the 1920s to resemble the aurochs.\",\n        \"Animal(HeckCattle) ::: Heck cattle are animals.\",\n        \"Animal(Aurochs) ::: Aurochs are animals.\",\n        \"∃x (Animal(x) ∧ Resemble(x, ExtinctAnimal)) ::: Some animals to be bred back resemble extinct animals.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x (Animal(x) ∧ BredBack(HeckCattle, x)) ::: Some Heck cattle are artificially selected.\"\n}"
    ]
  },
  {
    "id": 134,
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred back in the 1920s to resemble the aurochs.",
      "Heck cattle are animals.",
      "Aurochs are animals.",
      "Some animals to be bred back resemble extinct animals."
    ],
    "question": "Aurochs are extinct.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ArtificialSelection(x) ::: x is a form of artificial selection\",\n        \"SelectiveBreedingOf(x, y) ::: x is the deliberate selective breeding of y\",\n        \"DomesticAnimal(x) ::: x is a domestic animal\",\n        \"BredBack(x, y) ::: x is bred back to resemble y\",\n        \"Resemble(x, y) ::: x resembles y\",\n        \"Animal(x) ::: x is an animal\",\n        \"Extinct(x) ::: x is extinct\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (ArtificialSelection(BreedingBack) ∧ SelectiveBreedingOf(BreedingBack, DomesticAnimal)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\",\n        \"BredBack(HeckCattle, Aurochs) ∧ Year(HeckCattle, 1920s) ::: Heck cattle were bred back in the 1920s to resemble the aurochs.\",\n        \"Animal(HeckCattle) ::: Heck cattle are animals.\",\n        \"Animal(Aurochs) ::: Aurochs are animals.\",\n        \"∃x (Animal(x) ∧ Resemble(x, ExtinctAnimal)) ::: Some animals to be bred back resemble extinct animals.\"\n    ],\n    \"First-Order-Logic Question\": \"Extinct(Aurochs) ::: Aurochs are extinct.\"\n}"
    ]
  },
  {
    "id": 1410,
    "context": [
      "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
      "If someone has United States citizenship, then they can register to vote in the United States.",
      "A person either has United States citizenship or Taiwanese citizenship.",
      "No Russian Federation officials hold Taiwanese citizenship. ",
      "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
      "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
    ],
    "question": "Vladimir is a Russian federation official",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanRegisterToVote(x, country) ::: x can register to vote in the country.\",\n        \"ParticipateInElection(x, year) ::: x can participate in the election in the given year.\",\n        \"HasCitizenship(x, country) ::: x has citizenship of the country.\",\n        \"HoldCitizenship(x, country) ::: x holds citizenship of the country.\",\n        \"Official(x, country) ::: x is an official of the country.\",\n        \"Manager(x, company) ::: x is a manager at the company.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (CanRegisterToVote(x, UnitedStates) → ParticipateInElection(x, 2024)) ::: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\",\n        \"∀x (HasCitizenship(x, UnitedStates) → CanRegisterToVote(x, UnitedStates)) ::: If someone has United States citizenship, then they can register to vote in the United States.\",\n        \"∀x ((HasCitizenship(x, UnitedStates) ∨ HasCitizenship(x, Taiwan))) ::: A person either has United States citizenship or Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(x, Taiwan) ∧ Official(x, RussianFederation)) ::: No Russian Federation officials hold Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(vladimir, Taiwan) ∨ Manager(vladimir, Gazprom)) ::: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\",\n        \"(CanRegisterToVote(ekaterina, UnitedStates) ∨ Official(ekaterina, RussianFederation)) ::: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\"\n    ],\n    \"First-Order-Logic Question\": \"Official(vladimir, RussianFederation) ::: Vladimir is a Russian federation official\"\n}"
    ]
  },
  {
    "id": 1411,
    "context": [
      "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
      "If someone has United States citizenship, then they can register to vote in the United States.",
      "A person either has United States citizenship or Taiwanese citizenship.",
      "No Russian Federation officials hold Taiwanese citizenship. ",
      "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
      "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
    ],
    "question": "Vladimir is not a Russian federation official",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanRegisterToVote(x, country) ::: x can register to vote in the country.\",\n        \"ParticipateInElection(x, year) ::: x can participate in the election in the year.\",\n        \"HasCitizenship(x, country) ::: x has citizenship of the country.\",\n        \"HoldCitizenship(x, country) ::: x holds citizenship of the country.\",\n        \"Official(x, country) ::: x is an official of the country.\",\n        \"Manager(x, company) ::: x is a manager at the company.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (CanRegisterToVote(x, US) → ParticipateInElection(x, 2024)) ::: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\",\n        \"∀x (HasCitizenship(x, US) → CanRegisterToVote(x, US)) ::: If someone has United States citizenship, then they can register to vote in the United States.\",\n        \"∀x ((HasCitizenship(x, US) ∨ HasCitizenship(x, Taiwan))) ::: A person either has United States citizenship or Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(x, Taiwan) ∧ Official(x, Russia)) ::: No Russian Federation officials hold Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(vladimir, Taiwan) ∨ Manager(vladimir, Gazprom)) ::: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\",\n        \"(CanRegisterToVote(ekaterina, US) ∨ Official(ekaterina, Russia)) ::: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Official(vladimir, Russia) ::: Vladimir is not a Russian federation official\"\n}"
    ]
  },
  {
    "id": 1412,
    "context": [
      "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
      "If someone has United States citizenship, then they can register to vote in the United States.",
      "A person either has United States citizenship or Taiwanese citizenship.",
      "No Russian Federation officials hold Taiwanese citizenship. ",
      "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
      "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
    ],
    "question": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanRegisterToVote(x, country) ::: x can register to vote in the country.\",\n        \"CanParticipateInElection(x, year) ::: x can participate in the year election.\",\n        \"HasCitizenship(x, country) ::: x has citizenship of the country.\",\n        \"HoldPosition(x, position) ::: x holds the position.\",\n        \"Official(x, country) ::: x is an official of the country.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (CanRegisterToVote(x, UnitedStates) → CanParticipateInElection(x, 2024)) ::: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\",\n        \"∀x (HasCitizenship(x, UnitedStates) → CanRegisterToVote(x, UnitedStates)) ::: If someone has United States citizenship, then they can register to vote in the United States.\",\n        \"∀x ((HasCitizenship(x, UnitedStates) ∨ HasCitizenship(x, Taiwan))) ::: A person either has United States citizenship or Taiwanese citizenship.\",\n        \"¬(Official(x, RussianFederation) ∧ HasCitizenship(x, Taiwan)) ::: No Russian Federation officials hold Taiwanese citizenship.\",\n        \"¬(HasCitizenship(vladimir, Taiwan) ∨ HoldPosition(vladimir, manager, Gazprom)) ::: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\",\n        \"(CanRegisterToVote(ekaterina, UnitedStates) ∨ Official(ekaterina, RussianFederation)) ::: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\"\n    ],\n    \"First-Order-Logic Question\": \"CanParticipateInElection(ekaterina, 2024) ∨ HoldPosition(ekaterina, manager, Gazprom) ::: Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.\"\n}"
    ]
  },
  {
    "id": 1413,
    "context": [
      "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
      "If someone has United States citizenship, then they can register to vote in the United States.",
      "A person either has United States citizenship or Taiwanese citizenship.",
      "No Russian Federation officials hold Taiwanese citizenship. ",
      "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
      "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
    ],
    "question": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanRegisterToVote(x, country) ::: x can register to vote in the country.\",\n        \"CanParticipateInElection(x, year) ::: x can participate in the election in the year.\",\n        \"HasCitizenship(x, country) ::: x has citizenship of the country.\",\n        \"HoldCitizenship(x, country) ::: x holds citizenship of the country.\",\n        \"Official(x, country) ::: x is an official of the country.\",\n        \"Manager(x, company) ::: x is a manager at the company.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (CanRegisterToVote(x, UnitedStates) → CanParticipateInElection(x, 2024)) ::: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\",\n        \"∀x (HasCitizenship(x, UnitedStates) → CanRegisterToVote(x, UnitedStates)) ::: If someone has United States citizenship, then they can register to vote in the United States.\",\n        \"∀x ((HasCitizenship(x, UnitedStates) ∨ HasCitizenship(x, Taiwan))) ::: A person either has United States citizenship or Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(x, Taiwan) ∧ Official(x, RussianFederation)) ::: No Russian Federation officials hold Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(vladimir, Taiwan) ∨ Manager(vladimir, Gazprom)) ::: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\",\n        \"(CanRegisterToVote(ekaterina, UnitedStates) ∨ Official(ekaterina, RussianFederation)) ::: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\"\n    ],\n    \"First-Order-Logic Question\": \"CanParticipateInElection(ekaterina, 2024) ∨ Manager(vladimir, Gazprom) ::: Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\"\n}"
    ]
  },
  {
    "id": 1414,
    "context": [
      "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
      "If someone has United States citizenship, then they can register to vote in the United States.",
      "A person either has United States citizenship or Taiwanese citizenship.",
      "No Russian Federation officials hold Taiwanese citizenship. ",
      "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
      "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
    ],
    "question": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"CanRegisterToVote(x, country) ::: x can register to vote in the country.\",\n        \"CanParticipateInElection(x, year) ::: x can participate in the election in the year.\",\n        \"HasCitizenship(x, country) ::: x has citizenship of the country.\",\n        \"HoldCitizenship(x, country) ::: x holds citizenship of the country.\",\n        \"Official(x, country) ::: x is an official of the country.\",\n        \"Manager(x, company) ::: x is a manager at the company.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (CanRegisterToVote(x, UnitedStates) → CanParticipateInElection(x, 2024)) ::: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\",\n        \"∀x (HasCitizenship(x, UnitedStates) → CanRegisterToVote(x, UnitedStates)) ::: If someone has United States citizenship, then they can register to vote in the United States.\",\n        \"∀x ((HasCitizenship(x, UnitedStates) ∨ HasCitizenship(x, Taiwan))) ::: A person either has United States citizenship or Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(x, Taiwan) ∧ Official(x, RussianFederation)) ::: No Russian Federation officials hold Taiwanese citizenship.\",\n        \"¬(HoldCitizenship(Vladimir, Taiwan) ∨ Manager(Vladimir, Gazprom)) ::: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\",\n        \"(CanRegisterToVote(Ekaterina, UnitedStates) ∨ Official(Ekaterina, RussianFederation)) ::: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(CanRegisterToVote(Ekaterina, UnitedStates) ∧ CanParticipateInElection(Vladimir, 2024)) ::: It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\"\n}"
    ]
  },
  {
    "id": 243,
    "context": [
      "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Neapolitan Chronicles is an English book.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"PublishingHouse(x) ::: x is a publishing house\",\n        \"SpecializingInTranslation(x, y) ::: x specializes in translating y\",\n        \"PublishedBy(x, y) ::: x is published by y\",\n        \"InLanguage(x, y) ::: x is in language y\",\n        \"TranslatedFrom(x, y) ::: x is translated from language y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"PublishingHouse(newVesselPress) ∧ SpecializingInTranslation(newVesselPress, foreignLiterature) ∧ InLanguage(newVesselPressBooks, english) ::: New Vessel Press is a publishing house specializing in translating foreign literature into English.\",\n        \"∀x (PublishedBy(newVesselPressBooks, newVesselPress) → InLanguage(newVesselPressBooks, english)) ::: All of New Vessel Press's published books are in English.\",\n        \"PublishedBy(neapolitanChronicles, newVesselPress) ::: Neapolitan Chronicles is a book published by New Vessel Press.\",\n        \"TranslatedFrom(neapolitanChronicles, italian) ::: Neapolitan Chronicles was translated from Italian.\",\n        \"PublishedBy(palaceOfFlies, newVesselPress) ::: Palace of Flies is a book published by New Vessel Press.\"\n    ],\n    \"First-Order-Logic Question\": \"InLanguage(neapolitanChronicles, english) ::: Neapolitan Chronicles is an English book.\"\n}"
    ]
  },
  {
    "id": 244,
    "context": [
      "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsDependentOn(x, y) ::: x is dependent on y.\",\n        \"DrinkRegularly(x, y) ::: x regularly drinks y.\",\n        \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\",\n        \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\",\n        \"Student(x) ::: x is a student.\",\n        \"Czech(x) ::: x is czech\",\n        \"ChoralConductor(x) ::: x is a choral conductor\",\n        \"SpecializeInPerformanceOf(x, y) ::: x Specializes in the performance of y\",\n        \"Musician(x) ::: x is a musician\",\n        \"Love(x, y) ::: x loves y\",\n        \"PublishedBook(x, y) ::: x published the book y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\",\n        \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\",\n        \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\",\n        \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\",\n        \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\",\n        \"Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic) ::: Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\",\n        \"∀x (ChoralConductor(x) → Musician(x)) ::: Any choral conductor is a musician.\",\n        \"∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music))) ::: Some musicians love music.\",\n        \"PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946) ::: Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.\",\n        \"PublishedBook(newVesselPress, neapolitanChronicles) ::: Neapolitan Chronicles is a book published by New Vessel Press.\",\n        \"TranslatedFrom(neapolitanChronicles, italian) ::: Neapolitan Chronicles was translated from Italian.\",\n        \"PublishedBook(newVesselPress, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.\",\n        \"∀x (PublishedBook(newVesselPress, x) → InEnglish(x)) ::: All of New Vessel Press's published books are in English.\"\n    ],\n    \"First-Order-Logic Question\": \"Love(miroslav, music) ::: Miroslav Venhoda loved music.\"\n}"
    ]
  },
  {
    "id": 245,
    "context": [
      "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Palace of Flies was translated from Italian.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsDependentOn(x, y) ::: x is dependent on y.\",\n        \"DrinkRegularly(x, y) ::: x regularly drinks y.\",\n        \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\",\n        \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\",\n        \"Student(x) ::: x is a student.\",\n        \"Czech(x) ::: x is czech\",\n        \"ChoralConductor(x) ::: x is a choral conductor\",\n        \"SpecializeInPerformanceOf(x, y) ::: x Specializes in the performance of y\",\n        \"Musician(x) ::: x is a musician\",\n        \"Love(x, y) ::: x loves y\",\n        \"PublishedBook(x, y) ::: x published the book y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\",\n        \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\",\n        \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\",\n        \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\",\n        \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"\n    ],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 964,
    "context": [
      "All hydrocarbons are organic compounds .",
      "All alkanes are hydrocarbons",
      "All organic compounds are chemical compounds.",
      "All organic compounds contain carbon.",
      "No chemical compounds contain only one element.",
      "The mixture either both is a chemical compound and contains only one element, or neither. "
    ],
    "question": "The mixture contains carbon.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsOrganicCompound(x) ::: x is an organic compound.\",\n        \"IsHydrocarbon(x) ::: x is a hydrocarbon.\",\n        \"IsAlkane(x) ::: x is an alkane.\",\n        \"IsChemicalCompound(x) ::: x is a chemical compound.\",\n        \"ContainsCarbon(x) ::: x contains carbon.\",\n        \"ContainsElement(x, y) ::: x contains the element y.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsHydrocarbon(x) → IsOrganicCompound(x)) ::: All hydrocarbons are organic compounds.\",\n        \"∀x (IsAlkane(x) → IsHydrocarbon(x)) ::: All alkanes are hydrocarbons.\",\n        \"∀x (IsOrganicCompound(x) → IsChemicalCompound(x)) ::: All organic compounds are chemical compounds.\",\n        \"∀x (IsOrganicCompound(x) → ContainsCarbon(x)) ::: All organic compounds contain carbon.\",\n        \"∀x (IsChemicalCompound(x) → ¬(∃y ContainsElement(x, y))) ::: No chemical compounds contain only one element.\",\n        \"¬((IsChemicalCompound(mixture) ∧ ContainsElement(mixture, element)) ⊕ ¬(IsChemicalCompound(mixture) ∧ ContainsElement(mixture, element))) ::: The mixture either both is a chemical compound and contains only one element, or neither.\"\n    ],\n    \"First-Order-Logic Question\": \"ContainsCarbon(mixture) ::: The mixture contains carbon.\"\n}"
    ]
  },
  {
    "id": 965,
    "context": [
      "All hydrocarbons are organic compounds .",
      "All alkanes are hydrocarbons",
      "All organic compounds are chemical compounds.",
      "All organic compounds contain carbon.",
      "No chemical compounds contain only one element.",
      "The mixture either both is a chemical compound and contains only one element, or neither. "
    ],
    "question": "The mixture is an alkane and contains carbon.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsOrganicCompound(x) ::: x is an organic compound.\",\n        \"IsHydrocarbon(x) ::: x is a hydrocarbon.\",\n        \"IsAlkane(x) ::: x is an alkane.\",\n        \"IsChemicalCompound(x) ::: x is a chemical compound.\",\n        \"ContainsCarbon(x) ::: x contains carbon.\",\n        \"ContainsOnlyOneElement(x) ::: x contains only one element.\",\n        \"IsMixture(x) ::: x is a mixture.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsHydrocarbon(x) → IsOrganicCompound(x)) ::: All hydrocarbons are organic compounds.\",\n        \"∀x (IsAlkane(x) → IsHydrocarbon(x)) ::: All alkanes are hydrocarbons.\",\n        \"∀x (IsOrganicCompound(x) → IsChemicalCompound(x)) ::: All organic compounds are chemical compounds.\",\n        \"∀x (IsOrganicCompound(x) → ContainsCarbon(x)) ::: All organic compounds contain carbon.\",\n        \"∀x (IsChemicalCompound(x) → ¬ContainsOnlyOneElement(x)) ::: No chemical compounds contain only one element.\",\n        \"¬(IsChemicalCompound(mixture) ⊕ ContainsOnlyOneElement(mixture)) ::: The mixture either both is a chemical compound and contains only one element, or neither.\"\n    ],\n    \"First-Order-Logic Question\": \"IsAlkane(mixture) ∧ ContainsCarbon(mixture) ::: The mixture is an alkane and contains carbon.\"\n}"
    ]
  },
  {
    "id": 966,
    "context": [
      "All hydrocarbons are organic compounds .",
      "All alkanes are hydrocarbons",
      "All organic compounds are chemical compounds.",
      "All organic compounds contain carbon.",
      "No chemical compounds contain only one element.",
      "The mixture either both is a chemical compound and contains only one element, or neither. "
    ],
    "question": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsOrganicCompound(x) ::: x is an organic compound.\",\n        \"IsHydrocarbon(x) ::: x is a hydrocarbon.\",\n        \"IsAlkane(x) ::: x is an alkane.\",\n        \"IsChemicalCompound(x) ::: x is a chemical compound.\",\n        \"ContainsCarbon(x) ::: x contains carbon.\",\n        \"ContainsOnlyOneElement(x) ::: x contains only one element.\",\n        \"IsMixture(x) ::: x is a mixture.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (IsHydrocarbon(x) → IsOrganicCompound(x)) ::: All hydrocarbons are organic compounds.\",\n        \"∀x (IsAlkane(x) → IsHydrocarbon(x)) ::: All alkanes are hydrocarbons.\",\n        \"∀x (IsOrganicCompound(x) → IsChemicalCompound(x)) ::: All organic compounds are chemical compounds.\",\n        \"∀x (IsOrganicCompound(x) → ContainsCarbon(x)) ::: All organic compounds contain carbon.\",\n        \"∀x (IsChemicalCompound(x) → ¬ContainsOnlyOneElement(x)) ::: No chemical compounds contain only one element.\",\n        \"∀x (IsMixture(x) → ((IsChemicalCompound(x) ∧ ContainsOnlyOneElement(x)) ∨ (¬IsChemicalCompound(x) ∧ ¬ContainsOnlyOneElement(x)))) ::: The mixture either both is a chemical compound and contains only one element, or neither.\"\n    ],\n    \"First-Order-Logic Question\": \"(ContainsOnlyOneElement(mixture) ∨ ContainsCarbon(mixture)) → (¬IsChemicalCompound(mixture) ∧ ¬IsAlkane(mixture)) ::: If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\"\n}"
    ]
  },
  {
    "id": 702,
    "context": [
      "All humans are mortal.",
      "All Greeks are humans."
    ],
    "question": "Some Greeks are mortal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsMortal(x) ::: x is mortal\", \"IsHuman(x) ::: x is human\", \"IsGreek(x) ::: x is greek\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsHuman(x) → IsMortal(x)) ::: All humans are mortal.\", \"∀x (IsGreek(x) → IsHuman(x)) ::: All Greeks are humans.\"],\n    \"First-Order-Logic Question\": \"∃x (IsGreek(x) ∧ IsMortal(x)) ::: Some Greeks are mortal.\"\n}"
    ]
  },
  {
    "id": 1244,
    "context": [
      "None of the students who currently work in the library are from the computer science department. ",
      "All of the students with part-time jobs offered by the university currently work in the library. ",
      "All of the students who are taking the database course are from the computer science department. ",
      "All of the students taking a class with Professor David are taking the database course. ",
      "All students working in the lab are taking a class with Professor David.",
      "James is a student working in the lab. ",
      "James doesn't work in the lab or have a part-time job offered by the university."
    ],
    "question": "James has a part-time job offered by the university.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WorkInLibrary(x) ::: x currently works in the library.\",\n        \"FromComputerScienceDept(x) ::: x is from the computer science department.\",\n        \"PartTimeJobByUniversity(x) ::: x has a part-time job offered by the university.\",\n        \"TakingDatabaseCourse(x) ::: x is taking the database course.\",\n        \"TakingClassWith(x, y) ::: x is taking a class with y.\",\n        \"WorkingInLab(x) ::: x is working in the lab.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Student(x) ∧ WorkInLibrary(x)) → ¬FromComputerScienceDept(x)) ::: None of the students who currently work in the library are from the computer science department.\",\n        \"∀x ((Student(x) ∧ PartTimeJobByUniversity(x)) → WorkInLibrary(x)) ::: All of the students with part-time jobs offered by the university currently work in the library.\",\n        \"∀x ((Student(x) ∧ TakingDatabaseCourse(x)) → FromComputerScienceDept(x)) ::: All of the students who are taking the database course are from the computer science department.\",\n        \"∀x ((Student(x) ∧ TakingClassWith(x, david)) → TakingDatabaseCourse(x)) ::: All of the students taking a class with Professor David are taking the database course.\",\n        \"∀x ((Student(x) ∧ WorkingInLab(x)) → TakingClassWith(james, david)) ::: All students working in the lab are taking a class with Professor David.\",\n        \"Student(james) ∧ WorkingInLab(james) ::: James is a student working in the lab.\",\n        \"¬(WorkingInLab(james) ∨ PartTimeJobByUniversity(james)) ::: James doesn't work in the lab or have a part-time job offered by the university.\"\n    ],\n    \"First-Order-Logic Question\": \"PartTimeJobByUniversity(james) ::: James has a part-time job offered by the university.\"\n}"
    ]
  },
  {
    "id": 1245,
    "context": [
      "None of the students who currently work in the library are from the computer science department. ",
      "All of the students with part-time jobs offered by the university currently work in the library. ",
      "All of the students who are taking the database course are from the computer science department. ",
      "All of the students taking a class with Professor David are taking the database course. ",
      "All students working in the lab are taking a class with Professor David.",
      "James is a student working in the lab. ",
      "James doesn't work in the lab or have a part-time job offered by the university."
    ],
    "question": "James does not have a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WorkInLibrary(x) ::: x currently works in the library.\",\n        \"FromComputerScienceDept(x) ::: x is from the computer science department.\",\n        \"PartTimeJobByUni(x) ::: x has a part-time job offered by the university.\",\n        \"TakingDatabaseCourse(x) ::: x is taking the database course.\",\n        \"TakingClassWith(x, y) ::: x is taking a class with y.\",\n        \"WorkingInLab(x) ::: x is working in the lab.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Student(x) ∧ WorkInLibrary(x)) → ¬FromComputerScienceDept(x)) ::: None of the students who currently work in the library are from the computer science department.\",\n        \"∀x ((Student(x) ∧ PartTimeJobByUni(x)) → WorkInLibrary(x)) ::: All of the students with part-time jobs offered by the university currently work in the library.\",\n        \"∀x ((Student(x) ∧ TakingDatabaseCourse(x)) → FromComputerScienceDept(x)) ::: All of the students who are taking the database course are from the computer science department.\",\n        \"∀x ((Student(x) ∧ TakingClassWith(x, ProfessorDavid)) → TakingDatabaseCourse(x)) ::: All of the students taking a class with Professor David are taking the database course.\",\n        \"∀x (WorkingInLab(x) → TakingClassWith(x, ProfessorDavid)) ::: All students working in the lab are taking a class with Professor David.\",\n        \"WorkingInLab(james) ::: James is a student working in the lab.\",\n        \"¬(WorkInLab(james) ∨ PartTimeJobByUni(james)) ::: James doesn't work in the lab or have a part-time job offered by the university.\"\n    ],\n    \"First-Order-Logic Question\": \"¬PartTimeJobByUni(james) ::: James does not have a part-time job offered by the university.\"\n}"
    ]
  },
  {
    "id": 1246,
    "context": [
      "None of the students who currently work in the library are from the computer science department. ",
      "All of the students with part-time jobs offered by the university currently work in the library. ",
      "All of the students who are taking the database course are from the computer science department. ",
      "All of the students taking a class with Professor David are taking the database course. ",
      "All students working in the lab are taking a class with Professor David.",
      "James is a student working in the lab. ",
      "James doesn't work in the lab or have a part-time job offered by the university."
    ],
    "question": "James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WorkInLibrary(x) ::: x currently works in the library.\",\n        \"FromComputerScienceDept(x) ::: x is from the computer science department.\",\n        \"PartTimeJobByUni(x) ::: x has a part-time job offered by the university.\",\n        \"TakingDatabaseCourse(x) ::: x is taking the database course.\",\n        \"TakingClassWith(x, y) ::: x is taking a class with y.\",\n        \"Student(x) ::: x is a student.\",\n        \"WorkInLab(x) ::: x is working in the lab.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Student(x) ∧ WorkInLibrary(x)) → ¬FromComputerScienceDept(x)) ::: None of the students who currently work in the library are from the computer science department.\",\n        \"∀x ((Student(x) ∧ PartTimeJobByUni(x)) → WorkInLibrary(x)) ::: All of the students with part-time jobs offered by the university currently work in the library.\",\n        \"∀x ((Student(x) ∧ TakingDatabaseCourse(x)) → FromComputerScienceDept(x)) ::: All of the students who are taking the database course are from the computer science department.\",\n        \"∀x ((Student(x) ∧ TakingClassWith(x, david)) → TakingDatabaseCourse(x)) ::: All of the students taking a class with Professor David are taking the database course.\",\n        \"∀x ((Student(x) ∧ WorkInLab(x)) → TakingClassWith(x, david)) ::: All students working in the lab are taking a class with Professor David.\",\n        \"Student(james) ∧ WorkInLab(james) ::: James is a student working in the lab.\",\n        \"¬(WorkInLab(james) ∨ PartTimeJobByUni(james)) ::: James doesn't work in the lab or have a part-time job offered by the university.\"\n    ],\n    \"First-Order-Logic Question\": \"(TakingDatabaseCourse(james) ∨ PartTimeJobByUni(james)) ::: James either takes the database course or has a part-time job offered by the university.\"\n}"
    ]
  },
  {
    "id": 1247,
    "context": [
      "None of the students who currently work in the library are from the computer science department. ",
      "All of the students with part-time jobs offered by the university currently work in the library. ",
      "All of the students who are taking the database course are from the computer science department. ",
      "All of the students taking a class with Professor David are taking the database course. ",
      "All students working in the lab are taking a class with Professor David.",
      "James is a student working in the lab. ",
      "James doesn't work in the lab or have a part-time job offered by the university."
    ],
    "question": "James takes the database course.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"WorkInLibrary(x) ::: x currently works in the library.\",\n        \"FromComputerScienceDept(x) ::: x is from the computer science department.\",\n        \"PartTimeJobByUni(x) ::: x has a part-time job offered by the university.\",\n        \"TakingDatabaseCourse(x) ::: x is taking the database course.\",\n        \"TakingClassWith(x, y) ::: x is taking a class with y.\",\n        \"WorkingInLab(x) ::: x is working in the lab.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x ((Student(x) ∧ WorkInLibrary(x)) → ¬FromComputerScienceDept(x)) ::: None of the students who currently work in the library are from the computer science department.\",\n        \"∀x ((Student(x) ∧ PartTimeJobByUni(x)) → WorkInLibrary(x)) ::: All of the students with part-time jobs offered by the university currently work in the library.\",\n        \"∀x ((Student(x) ∧ TakingDatabaseCourse(x)) → FromComputerScienceDept(x)) ::: All of the students who are taking the database course are from the computer science department.\",\n        \"∀x ((Student(x) ∧ TakingClassWith(x, ProfessorDavid)) → TakingDatabaseCourse(x)) ::: All of the students taking a class with Professor David are taking the database course.\",\n        \"∀x (WorkingInLab(x) → TakingClassWith(x, ProfessorDavid)) ::: All students working in the lab are taking a class with Professor David.\",\n        \"Student(james) ∧ WorkingInLab(james) ∧ (¬WorkInLab(james) ∨ ¬PartTimeJobByUni(james)) ::: James is a student working in the lab. James doesn't work in the lab or have a part-time job offered by the university.\"\n    ],\n    \"First-Order-Logic Question\": \"TakingDatabaseCourse(james) ::: James takes the database course.\"\n}"
    ]
  },
  {
    "id": 618,
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Likes(x, y) ::: x likes y.\",\n        \"WantsToCompose(x) ::: x wants to compose.\",\n        \"HasAccessTo(x, y) ::: x has access to y.\",\n        \"CanCompose(x) ::: x can compose.\",\n        \"WillCompose(x) ::: x will compose.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"(Likes(George, music) → WantsToCompose(George)) ::: If George likes music, he wants to compose.\",\n        \"(HasAccessTo(George, program) → CanCompose(George)) ::: If George has access to a program, he can compose.\",\n        \"((CanCompose(George) ∧ WantsToCompose(George)) → WillCompose(George)) ::: If George can compose and wants to compose, he will compose.\"\n    ],\n    \"First-Order-Logic Question\": \"(Likes(George, music) ∧ HasAccessTo(George, program)) → WillCompose(George) ::: If George likes music and has access to a program, he will compose.\"\n}"
    ]
  },
  {
    "id": 619,
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George will not compose, George can not compose.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Likes(x, y) ::: x likes y\", \"WantsToCompose(x) ::: x wants to compose\", \"HasAccessToProgram(x) ::: x has access to a program\", \"CanCompose(x) ::: x can compose\", \"WillCompose(x) ::: x will compose\"],\n    \"First-Order-Logic Premises\": [\"∀x (Likes(george, music) → WantsToCompose(george)) ::: If George likes music, he wants to compose.\", \"∀x (HasAccessToProgram(george) → CanCompose(george)) ::: If George has access to a program, he can compose.\", \"∀x ((CanCompose(george) ∧ WantsToCompose(george)) → WillCompose(george)) ::: If George can compose and wants to compose, he will compose.\"],\n    \"First-Order-Logic Question\": \"¬WillCompose(george) → ¬CanCompose(george) ::: If George will not compose, George can not compose.\"\n}"
    ]
  },
  {
    "id": 736,
    "context": [
      "A hawk never swims. ",
      "Some birds are hawks."
    ],
    "question": "All birds swim.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsHawk(x) ::: x is a hawk\", \"Swims(x) ::: x swims\", \"IsBird(x) ::: x is a bird\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsHawk(x) → ¬Swims(x)) ::: A hawk never swims.\", \"∃x (IsBird(x) ∧ IsHawk(x)) ::: Some birds are hawks.\"],\n    \"First-Order-Logic Question\": \"∀x (IsBird(x) → Swims(x)) ::: All birds swim.\"\n}"
    ]
  },
  {
    "id": 802,
    "context": [
      "Some show airing at 8 pm on Monday gives out roses on TV.",
      "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
      "The Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is a show.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"AiringAt(x, y, z) ::: x is airing at y on z\",\n        \"GivesOut(x, y, z) ::: x gives out y on z\",\n        \"IsEpisodeOf(x, y) ::: x is an episode of y\",\n        \"PortraysLivesOf(x, y) ::: x portrays the lives of y\",\n        \"RealityTVShow(x) ::: x is a reality TV show\",\n        \"Show(x) ::: x is a show\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x ∃y (AiringAt(x, 8pm, Monday) ∧ GivesOut(x, roses, TV)) ::: Some show airing at 8 pm on Monday gives out roses on TV.\",\n        \"∀x (GivesOut(x, roses, TV) → IsEpisodeOf(x, TheBachelor)) ::: If a show gives out roses on TV, then the show is an episode of The Bachelor.\",\n        \"PortraysLivesOf(TheBachelor, realPeople) ::: The Bachelor portrays the lives of real people.\",\n        \"∀x (PortraysLivesOf(x, realPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\",\n        \"Show(breakingBad) ::: Breaking Bad is a show.\",\n        \"¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show.\"\n    ],\n    \"First-Order-Logic Question\": \"AiringAt(breakingBad, 8pm, Monday) ::: Breaking Bad is on Monday at 8 pm.\"\n}"
    ]
  },
  {
    "id": 803,
    "context": [
      "Some show airing at 8 pm on Monday gives out roses on TV.",
      "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
      "The Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is a show.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"AiringAt(x, y, z) ::: x is airing at y on z.\",\n        \"GivesOut(x, y, z) ::: x gives out y on z.\",\n        \"IsEpisodeOf(x, y) ::: x is an episode of y.\",\n        \"PortraysLivesOf(x, y) ::: x portrays the lives of y.\",\n        \"RealityTVShow(x) ::: x is a reality TV show.\",\n        \"Show(x) ::: x is a show.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x ∃y (AiringAt(x, 8pm, Monday) ∧ GivesOut(x, roses, TV)) ::: Some show airing at 8 pm on Monday gives out roses on TV.\",\n        \"∀x (GivesOut(x, roses, TV) → IsEpisodeOf(x, TheBachelor)) ::: If a show gives out roses on TV, then the show is an episode of The Bachelor.\",\n        \"PortraysLivesOf(TheBachelor, realPeople) ::: The Bachelor portrays the lives of real people.\",\n        \"∀x (PortraysLivesOf(x, realPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\",\n        \"Show(breakingBad) ::: Breaking Bad is a show.\",\n        \"¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show.\"\n    ],\n    \"First-Order-Logic Question\": \"Show(breakingBad) ∧ AiringAt(breakingBad, 8pm, Monday) ∧ GivesOut(breakingBad, roses, TV) ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\"\n}"
    ]
  },
  {
    "id": 804,
    "context": [
      "Some show airing at 8 pm on Monday gives out roses on TV.",
      "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
      "The Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is a show.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"AiringAt(x, y, z) ::: Show x airs at time y on day z.\",\n        \"GivesOutRosesOnTV(x) ::: Show x gives out roses on TV.\",\n        \"IsEpisodeOf(x, y) ::: Show x is an episode of TV show y.\",\n        \"PortraysLivesOfRealPeople(x) ::: Show x portrays the lives of real people.\",\n        \"RealityTVShow(x) ::: Show x is a reality TV show.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x AiringAt(x, 8pm, Monday) ∧ GivesOutRosesOnTV(x) ::: Some show airing at 8 pm on Monday gives out roses on TV.\",\n        \"∀x (GivesOutRosesOnTV(x) → IsEpisodeOf(x, TheBachelor)) ::: If a show gives out roses on TV, then the show is an episode of The Bachelor.\",\n        \"IsEpisodeOf(TheBachelor, RealPeople) ::: The Bachelor portrays the lives of real people.\",\n        \"∀x (PortraysLivesOfRealPeople(x) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\",\n        \"Show(BreakingBad) ::: Breaking Bad is a show.\",\n        \"¬RealityTVShow(BreakingBad) ::: Breaking Bad is not a reality TV show.\"\n    ],\n    \"First-Order-Logic Question\": \"GivesOutRosesOnTV(BreakingBad) → (AiringAt(BreakingBad, 8pm, Monday)) ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\"\n}"
    ]
  },
  {
    "id": 323,
    "context": [
      "Heinrich Schmidt was a German politician. ",
      "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Heinrich Schmidt was German or Russian or both.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"German(x) ::: x is German\",\n        \"Politician(x) ::: x is a politician\",\n        \"MemberOf(x, y) ::: x is a member of y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"German(heinrich) ∧ Politician(heinrich) ::: Heinrich Schmidt was a German politician.\",\n        \"MemberOf(heinrich, prussianStateParliament) ∧ MemberOf(heinrich, naziReichstag) ::: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\"\n    ],\n    \"First-Order-Logic Question\": \"German(heinrich) ∨ Russian(heinrich) ::: Heinrich Schmidt was German or Russian or both.\"\n}"
    ]
  },
  {
    "id": 324,
    "context": [
      "Heinrich Schmidt was a German politician. ",
      "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"German(x) ::: x is german\",\n        \"Politician(x) ::: x is a politician\",\n        \"MemberOf(x, y) ::: x is a member of y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"German(heinrich) ∧ Politician(heinrich) ::: Heinrich Schmidt was a German politician.\",\n        \"MemberOf(heinrich, prussianStateParliament) ∧ MemberOf(heinrich, naziReichstag) ::: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\"\n    ],\n    \"First-Order-Logic Question\": \"∃x (German(x) ∧ Politician(x) ∧ MemberOf(x, prussianStateParliament) ∧ MemberOf(x, naziReichstag)) ::: Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\"\n}"
    ]
  },
  {
    "id": 325,
    "context": [
      "Heinrich Schmidt was a German politician. ",
      "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "No politicians are part of the Nazi Reichstag.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Politician(x) ::: x is a politician\", \"German(x) ::: x is German\", \"MemberOf(x, y) ::: x is a member of y\", \"NaziReichstag(x) ::: x is the Nazi Reichstag\"],\n    \"First-Order-Logic Premises\": [\"German(heinrich) ∧ Politician(heinrich) ::: Heinrich Schmidt was a German politician.\", \"MemberOf(heinrich, prussianStateParliament) ∧ MemberOf(heinrich, naziReichstag) ::: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\"],\n    \"First-Order-Logic Question\": \"∀x (Politician(x) → ¬MemberOf(x, naziReichstag)) ::: No politicians are part of the Nazi Reichstag.\"\n}"
    ]
  },
  {
    "id": 1032,
    "context": [
      "If something is a deadly disease, then it comes with a low survival rate. ",
      "Severe cancers are deadly diseases.",
      "Bile duct cancer is a severe form cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "Mild flu comes with a low survival rate.",
      "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
    ],
    "question": "Colorectal cancer is a kind of severe cancer",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"DeadlyDisease(x) ::: x is a deadly disease.\",\n        \"LowSurvivalRate(x) ::: x comes with a low survival rate.\",\n        \"SevereCancer(x) ::: x is a severe cancer.\",\n        \"BileDuctCancer(x) ::: x is a bile duct cancer.\",\n        \"Cholangiocarcinoma(x) ::: x is Cholangiocarcinoma.\",\n        \"MildFlu(x) ::: x is a mild flu.\",\n        \"ColorectalCancer(x) ::: x is colorectal cancer.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then it comes with a low survival rate.\",\n        \"SevereCancer(severeCancer) ::: Severe cancers are deadly diseases.\",\n        \"BileDuctCancer(bileDuctCancer) ::: Bile duct cancer is a severe form cancer.\",\n        \"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\",\n        \"MildFlu(mildFlu) ∧ LowSurvivalRate(mildFlu) ::: Mild flu comes with a low survival rate.\",\n        \"¬(BileDuctCancer(colorectalCancer) ∧ LowSurvivalRate(colorectalCancer)) ::: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\"\n    ],\n    \"First-Order-Logic Question\": \"SevereCancer(colorectalCancer) ::: Colorectal cancer is a kind of severe cancer\"\n}"
    ]
  },
  {
    "id": 1033,
    "context": [
      "If something is a deadly disease, then it comes with a low survival rate. ",
      "Severe cancers are deadly diseases.",
      "Bile duct cancer is a severe form cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "Mild flu comes with a low survival rate.",
      "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
    ],
    "question": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"DeadlyDisease(x) ::: x is a deadly disease.\",\n        \"LowSurvivalRate(x) ::: x comes with a low survival rate.\",\n        \"SevereCancer(x) ::: x is a severe cancer.\",\n        \"BileDuctCancer(x) ::: x is a bile duct cancer.\",\n        \"Cholangiocarcinoma(x) ::: x is Cholangiocarcinoma.\",\n        \"MildFlu(x) ::: x is a mild flu.\",\n        \"ColorectalCancer(x) ::: x is colorectal cancer.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then it comes with a low survival rate.\",\n        \"∀x (SevereCancer(x) → DeadlyDisease(x)) ::: Severe cancers are deadly diseases.\",\n        \"BileDuctCancer(bileDuctCancer) ∧ SevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe form cancer.\",\n        \"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\",\n        \"MildFlu(mildFlu) ∧ LowSurvivalRate(mildFlu) ::: Mild flu comes with a low survival rate.\",\n        \"¬(ColorectalCancer(colorectalCancer) ∧ (BileDuctCancer(colorectalCancer) ∧ LowSurvivalRate(colorectalCancer))) ::: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\"\n    ],\n    \"First-Order-Logic Question\": \"(ColorectalCancer(colorectalCancer) ∧ (BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) → (BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer))) ::: If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\"\n}"
    ]
  },
  {
    "id": 1034,
    "context": [
      "If something is a deadly disease, then it comes with a low survival rate. ",
      "Severe cancers are deadly diseases.",
      "Bile duct cancer is a severe form cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "Mild flu comes with a low survival rate.",
      "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
    ],
    "question": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"DeadlyDisease(x) ::: x is a deadly disease\",\n        \"LowSurvivalRate(x) ::: x comes with a low survival rate\",\n        \"SevereCancer(x) ::: x is a severe cancer\",\n        \"BileDuctCancer(x) ::: x is a bile duct cancer\",\n        \"Cholangiocarcinoma(x) ::: x is Cholangiocarcinoma\",\n        \"MildFlu(x) ::: x is a mild flu\",\n        \"ColorectalCancer(x) ::: x is colorectal cancer\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then it comes with a low survival rate.\",\n        \"∀x (SevereCancer(x) → DeadlyDisease(x)) ::: Severe cancers are deadly diseases.\",\n        \"BileDuctCancer(bileDuctCancer) ∧ SevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe form cancer.\",\n        \"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\",\n        \"MildFlu(mildFlu) ∧ LowSurvivalRate(mildFlu) ::: Mild flu comes with a low survival rate.\",\n        \"¬(ColorectalCancer(colorectalCancer) ∧ (BileDuctCancer(colorectalCancer) ∧ LowSurvivalRate(colorectalCancer))) ::: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\"\n    ],\n    \"First-Order-Logic Question\": \"((ColorectalCancer(colorectalCancer) ∧ Cholangiocarcinoma(colorectalCancer)) ∧ ((MildFlu(colorectalCancer) ∨ BileDuctCancer(colorectalCancer)) ∨ ((MildFlu(colorectalCancer) ∧ BileDuctCancer(colorectalCancer))))) ::: Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.\"\n}"
    ]
  },
  {
    "id": 941,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
      "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
    ],
    "question": "Taylor eats salads regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"EatSaladsRegularly(x) ::: x eats salads regularly.\",\n        \"ConsciousAboutHealth(x) ::: x is very conscious about their health and eating habits.\",\n        \"GrewUpInHealthConsciousHome(x) ::: x grew up in health-conscious childhood homes.\",\n        \"FulfillDailyNutritionalIntakes(x) ::: x fulfills their daily nutritional intakes.\",\n        \"DisregardPhysicalWellBeing(x) ::: x disregards their physical well-being.\",\n        \"VisitGymOnceADay(x) ::: x visits the gym at least once a day.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (EatSaladsRegularly(x) → ConsciousAboutHealth(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\",\n        \"∀x (GrewUpInHealthConsciousHome(x) → EatSaladsRegularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\",\n        \"∀x (FulfillDailyNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x)) ::: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\",\n        \"∀x (DisregardPhysicalWellBeing(x) → ¬ConsciousAboutHealth(x)) ::: All people who disregard their physical well-being are not very conscious about their health and eating habits.\",\n        \"∀x (VisitGymOnceADay(x) → FulfillDailyNutritionalIntakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\",\n        \"¬((GrewUpInHealthConsciousHome(taylor) ∧ DisregardPhysicalWellBeing(taylor)) ⊕ (¬GrewUpInHealthConsciousHome(taylor) ∧ ¬DisregardPhysicalWellBeing(taylor))) ::: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\"\n    ],\n    \"First-Order-Logic Question\": \"EatSaladsRegularly(taylor) ::: Taylor eats salads regularly.\"\n}"
    ]
  },
  {
    "id": 942,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
      "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
    ],
    "question": "Taylor visits the gym at least once a day.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"EatSaladsRegularly(x) ::: x eats salads regularly.\",\n        \"ConsciousAboutHealth(x) ::: x is very conscious about their health and eating habits.\",\n        \"GrewUpInHealthConsciousHome(x) ::: x grew up in a health-conscious childhood home.\",\n        \"FulfillDailyNutritionalIntakes(x) ::: x fulfills their daily nutritional intakes.\",\n        \"DisregardPhysicalWellBeing(x) ::: x disregards their physical well-being.\",\n        \"VisitGymOnceADay(x) ::: x visits the gym at least once a day.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (EatSaladsRegularly(x) → ConsciousAboutHealth(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\",\n        \"∀x (GrewUpInHealthConsciousHome(x) → EatSaladsRegularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\",\n        \"∀x (FulfillDailyNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x)) ::: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\",\n        \"∀x (DisregardPhysicalWellBeing(x) → ¬ConsciousAboutHealth(x)) ::: All people who disregard their physical well-being are not very conscious about their health and eating habits.\",\n        \"∀x (VisitGymOnceADay(x) → FulfillDailyNutritionalIntakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\",\n        \"¬((GrewUpInHealthConsciousHome(taylor) ∧ DisregardPhysicalWellBeing(taylor)) ⊕ ¬(GrewUpInHealthConsciousHome(taylor) ∧ DisregardPhysicalWellBeing(taylor))) ::: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\"\n    ],\n    \"First-Order-Logic Question\": \"VisitGymOnceADay(taylor) ::: Taylor visits the gym at least once a day.\"\n}"
    ]
  },
  {
    "id": 943,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
      "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
    ],
    "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"EatSaladsRegularly(x) ::: x eats salads regularly.\",\n        \"ConsciousAboutHealth(x) ::: x is very conscious about their health and eating habits.\",\n        \"GrewUpInHealthConsciousHome(x) ::: x grew up in a health-conscious childhood home.\",\n        \"FulfillDailyNutritionalIntakes(x) ::: x fulfills their daily nutritional intakes.\",\n        \"DisregardPhysicalWellBeing(x) ::: x disregards their physical well-being.\",\n        \"VisitGym(x) ::: x visits the gym at least once a day.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (EatSaladsRegularly(x) → ConsciousAboutHealth(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\",\n        \"∀x (GrewUpInHealthConsciousHome(x) → EatSaladsRegularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\",\n        \"∀x (FulfillDailyNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x)) ::: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\",\n        \"∀x (DisregardPhysicalWellBeing(x) → ¬ConsciousAboutHealth(x)) ::: All people who disregard their physical well-being are not very conscious about their health and eating habits.\",\n        \"∀x (VisitGym(x) → FulfillDailyNutritionalIntakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\",\n        \"¬(GrewUpInHealthConsciousHome(taylor) ⊕ VisitGym(taylor)) ::: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(GrewUpInHealthConsciousHome(taylor) ∨ VisitGym(taylor)) ::: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\"\n}"
    ]
  },
  {
    "id": 147,
    "context": [
      "The summer Olympic games is a sporting event. ",
      "The last summer Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The world championships is a sporting event.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsSportingEvent(x) ::: x is a sporting event.\",\n        \"SummerOlympicGames(x) ::: x is the summer Olympic games.\",\n        \"LastSummerOlympicGamesIn(x, y) ::: x was the last summer Olympic games in y.\",\n        \"WonMostMedals(x, y) ::: x won the most medals in y.\",\n        \"WorldChampionships(x) ::: x is the world championships.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsSportingEvent(summerOlympicGames) ::: The summer Olympic games is a sporting event.\",\n        \"LastSummerOlympicGamesIn(tokyo, summerOlympicGames) ::: The last summer Olympic games was in Tokyo.\",\n        \"WonMostMedals(unitedStates, tokyo) ::: The United States won the most medals in Tokyo.\"\n    ],\n    \"First-Order-Logic Question\": \"IsSportingEvent(worldChampionships) ::: The world championships is a sporting event.\"\n}"
    ]
  },
  {
    "id": 148,
    "context": [
      "The summer Olympic games is a sporting event. ",
      "The last summer Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The last summer Olympic games were not in Tokyo.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsDependentOn(x, y) ::: x is dependent on y.\", \"DrinkRegularly(x, y) ::: x regularly drinks y.\", \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\", \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\", \"Student(x) ::: x is a student.\"],\n    \"First-Order-Logic Premises\": [\"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\", \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\", \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\", \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\", \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 149,
    "context": [
      "The summer Olympic games is a sporting event. ",
      "The last summer Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The United States won the most medals in the last summer Olympic games.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsDependentOn(x, y) ::: x is dependent on y.\",\n        \"DrinkRegularly(x, y) ::: x regularly drinks y.\",\n        \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\",\n        \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\",\n        \"Student(x) ::: x is a student.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\",\n        \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\",\n        \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\",\n        \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\",\n        \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"\n    ],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 703,
    "context": [
      "All horses have hooves.",
      "No humans have hooves."
    ],
    "question": "Some humans are horses.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"error\": \"Invalid input format. Please provide the premises and question in the correct format.\"\n}"
    ]
  },
  {
    "id": 442,
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be at the same airport.",
      "John flies from LGA airport."
    ],
    "question": "Susan flies from LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Flies(x, y) ::: x flies to airport y\", \"Departure(x, y) ::: x is the departure airport for flight y\", \"Arrival(x, y) ::: x is the arrival airport for flight y\", \"From(x, y) ::: x flies from airport y\"],\n    \"First-Order-Logic Premises\": [\"Flies(susan, LGA) ::: Susan flies to LGA airport.\", \"∀x ¬(Departure(x, y) ∧ Arrival(x, y)) ::: The departure and arrival can not be at the same airport.\", \"From(john, LGA) ::: John flies from LGA airport.\"],\n    \"First-Order-Logic Question\": \"From(susan, LGA) ::: Susan flies from LGA airport.\"\n}"
    ]
  },
  {
    "id": 443,
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be at the same airport.",
      "John flies from LGA airport."
    ],
    "question": "John flies to LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"Flies(x, y) ::: x flies to airport y\", \"Departure(x, y) ::: x is the departure airport for flight y\", \"Arrival(x, y) ::: x is the arrival airport for flight y\"],\n    \"First-Order-Logic Premises\": [\"Flies(susan, LGA)\", \"∀x ¬(Departure(x, y) ∧ Arrival(x, y))\", \"Flies(john, LGA)\"],\n    \"First-Order-Logic Question\": \"Flies(john, LGA) ::: John flies to LGA airport.\"\n}"
    ]
  },
  {
    "id": 1268,
    "context": [
      "No one nice to animals is also mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "All pet owners love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is a grumpy person.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"NiceToAnimals(x)\", \"MeanToAnimals(x)\", \"Grumpy(x)\", \"AnimalLover(x)\", \"LoveAnimals(x)\", \"PetOwner(x)\"],\n    \"First-Order-Logic Premises\": [\"∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is also mean to animals.\", \"∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.\", \"∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.\", \"∀x (PetOwner(x) → LoveAnimals(x)) ::: All pet owners love animals.\", \"PetOwner(tom) ::: Tom is a pet owner.\"],\n    \"First-Order-Logic Question\": \"Grumpy(tom) ::: Tom is a grumpy person.\"\n}"
    ]
  },
  {
    "id": 1269,
    "context": [
      "No one nice to animals is also mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "All pet owners love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is not both a grumpy person and mean to animals.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"NiceToAnimals(x)\", \"MeanToAnimals(x)\", \"Grumpy(x)\", \"AnimalLover(x)\", \"LoveAnimals(x)\", \"PetOwner(x)\"],\n    \"First-Order-Logic Premises\": [\n        \"∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is also mean to animals.\",\n        \"∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.\",\n        \"∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.\",\n        \"∀x (PetOwner(x) → LoveAnimals(x)) ::: All pet owners love animals.\",\n        \"PetOwner(Tom) ::: Tom is a pet owner.\"\n    ],\n    \"First-Order-Logic Question\": \"¬(Grumpy(Tom) ∧ MeanToAnimals(Tom)) ::: Tom is not both a grumpy person and mean to animals.\"\n}"
    ]
  },
  {
    "id": 1270,
    "context": [
      "No one nice to animals is also mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "All pet owners love animals.",
      "Tom is a pet owner."
    ],
    "question": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"NiceToAnimals(x) ::: x is nice to animals.\",\n        \"MeanToAnimals(x) ::: x is mean to animals.\",\n        \"Grumpy(x) ::: x is grumpy.\",\n        \"AnimalLover(x) ::: x is an animal lover.\",\n        \"LoveAnimals(x) ::: x loves animals.\",\n        \"PetOwner(x) ::: x is a pet owner.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is also mean to animals.\",\n        \"∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.\",\n        \"∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.\",\n        \"∀x (PetOwner(x) → LoveAnimals(x)) ::: All pet owners love animals.\",\n        \"PetOwner(tom) ::: Tom is a pet owner.\"\n    ],\n    \"First-Order-Logic Question\": \"((¬(Grumpy(tom) ∧ MeanToAnimals(tom))) → (¬Grumpy(tom) ∧ ¬AnimalLover(tom))) ::: If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\"\n}"
    ]
  },
  {
    "id": 189,
    "context": [
      "A podcast is not a novel.",
      "If a person is born in American City, the person is American.",
      "If a book is a novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "Boston is an American city."
    ],
    "question": "Dani Shapiro is a novel writer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPodcast(x) ::: x is a podcast\",\n        \"IsNovel(x) ::: x is a novel\",\n        \"IsAmerican(x) ::: x is American\",\n        \"BornInCity(x, y) ::: x is born in city y\",\n        \"IsBook(x) ::: x is a book\",\n        \"IsWrittenBy(x, y) ::: x is written by y\",\n        \"IsNovelWriter(x) ::: x is a novel writer\",\n        \"IsWriter(x) ::: x is a writer\",\n        \"CreatedPodcast(x, y) ::: x created a podcast called y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"¬IsPodcast(podcast) ::: A podcast is not a novel.\",\n        \"∀x (BornInCity(x, americanCity) → IsAmerican(x)) ::: If a person is born in American City, the person is American.\",\n        \"∀x ((IsBook(x) ∧ IsNovel(x) ∧ IsWrittenBy(x, y)) → IsNovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.\",\n        \"IsAmerican(daniShapiro) ::: Dani Shapiro is an American writer.\",\n        \"IsWrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.\",\n        \"IsNovel(familyHistory) ∧ IsWrittenInYear(familyHistory, 2003) ::: Family History is a novel written in 2003.\",\n        \"CreatedPodcast(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\",\n        \"BornInCity(boston, americanCity) ::: Boston is an American city.\"\n    ],\n    \"First-Order-Logic Question\": \"IsNovelWriter(daniShapiro) ::: Dani Shapiro is a novel writer.\"\n}"
    ]
  },
  {
    "id": 190,
    "context": [
      "A podcast is not a novel.",
      "If a person is born in American City, the person is American.",
      "If a book is a novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "Boston is an American city."
    ],
    "question": "Family Secrets is a novel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPodcast(x) ::: x is a podcast\",\n        \"IsNovel(x) ::: x is a novel\",\n        \"IsBornIn(x, y) ::: x is born in y\",\n        \"IsAmerican(x) ::: x is American\",\n        \"IsWrittenBy(x, y) ::: x is written by y\",\n        \"IsNovelWriter(x) ::: x is a novel writer\",\n        \"IsWriter(x) ::: x is a writer\",\n        \"CreatedPodcast(x, y) ::: x created a podcast called y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"¬IsNovel(podcast) ::: A podcast is not a novel.\",\n        \"∀x (IsBornIn(x, americanCity) → IsAmerican(x)) ::: If a person is born in American City, the person is American.\",\n        \"∀x ((IsNovel(book) ∧ IsWrittenBy(book, x)) → IsNovelWriter(x)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.\",\n        \"IsAmerican(daniShapiro) ::: Dani Shapiro is an American writer.\",\n        \"IsWrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.\",\n        \"IsNovel(familyHistory) ∧ WrittenInYear(familyHistory, 2003) ::: Family History is a novel written in 2003.\",\n        \"CreatedPodcast(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\",\n        \"IsAmerican(boston) ::: Boston is an American city.\"\n    ],\n    \"First-Order-Logic Question\": \"IsNovel(familySecrets) ::: Family Secrets is a novel.\"\n}"
    ]
  },
  {
    "id": 191,
    "context": [
      "A podcast is not a novel.",
      "If a person is born in American City, the person is American.",
      "If a book is a novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "Boston is an American city."
    ],
    "question": "Dani Shapiro was born in Boston.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsPodcast(x) ::: x is a podcast\",\n        \"IsNovel(x) ::: x is a novel\",\n        \"IsBornIn(x, y) ::: x is born in y\",\n        \"IsAmerican(x) ::: x is American\",\n        \"IsBook(x) ::: x is a book\",\n        \"IsWrittenBy(x, y) ::: x is written by y\",\n        \"IsNovelWriter(x) ::: x is a novel writer\",\n        \"IsWriter(x) ::: x is a writer\",\n        \"CreatedPodcast(x, y) ::: x created a podcast called y\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"¬IsPodcast(podcast) ::: A podcast is not a novel.\",\n        \"∀x (IsBornIn(x, americanCity) → IsAmerican(x)) ::: If a person is born in American City, the person is American.\",\n        \"∀x ((IsBook(x) ∧ IsNovel(x) ∧ IsWrittenBy(x, y)) → IsNovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.\",\n        \"IsAmerican(daniShapiro) ::: Dani Shapiro is an American writer.\",\n        \"IsWrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.\",\n        \"IsNovel(familyHistory) ∧ IsWrittenInYear(familyHistory, 2003) ::: Family History is a novel written in 2003.\",\n        \"CreatedPodcast(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\",\n        \"IsAmerican(boston) ::: Boston is an American city.\"\n    ],\n    \"First-Order-Logic Question\": \"IsBornIn(daniShapiro, boston) ::: Dani Shapiro was born in Boston.\"\n}"
    ]
  },
  {
    "id": 1313,
    "context": [
      "Some professional basketball players are not American nationals.",
      "All professional basketball players can do jump shots.",
      "If someone can jump shots, they leap straight into the air.",
      "If someone leaps straight into the air, they activate their leg muscles. ",
      "Yuri does not activate his leg muscles."
    ],
    "question": "Yuri is an American national.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ProfessionalBasketballPlayer(x) ::: x is a professional basketball player.\",\n        \"AmericanNational(x) ::: x is an American national.\",\n        \"CanDoJumpShots(x) ::: x can do jump shots.\",\n        \"LeapStraightIntoAir(x) ::: x leaps straight into the air.\",\n        \"ActivateLegMuscles(x) ::: x activates their leg muscles.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x (ProfessionalBasketballPlayer(x) ∧ ¬AmericanNational(x)) ::: Some professional basketball players are not American nationals.\",\n        \"∀x (ProfessionalBasketballPlayer(x) → CanDoJumpShots(x)) ::: All professional basketball players can do jump shots.\",\n        \"∀x (CanDoJumpShots(x) → LeapStraightIntoAir(x)) ::: If someone can jump shots, they leap straight into the air.\",\n        \"∀x (LeapStraightIntoAir(x) → ActivateLegMuscles(x)) ::: If someone leaps straight into the air, they activate their leg muscles.\",\n        \"¬ActivateLegMuscles(yuri) ::: Yuri does not activate his leg muscles.\"\n    ],\n    \"First-Order-Logic Question\": \"¬AmericanNational(yuri) ::: Yuri is an American national.\"\n}"
    ]
  },
  {
    "id": 1314,
    "context": [
      "Some professional basketball players are not American nationals.",
      "All professional basketball players can do jump shots.",
      "If someone can jump shots, they leap straight into the air.",
      "If someone leaps straight into the air, they activate their leg muscles. ",
      "Yuri does not activate his leg muscles."
    ],
    "question": "Yuri is not an American professional basketball player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"ProfessionalBasketballPlayer(x) ::: x is a professional basketball player.\", \"AmericanNational(x) ::: x is an American national.\", \"CanDoJumpShots(x) ::: x can do jump shots.\", \"LeapStraightIntoAir(x) ::: x leaps straight into the air.\", \"ActivateLegMuscles(x) ::: x activates their leg muscles.\"],\n    \"First-Order-Logic Premises\": [\"∃x (ProfessionalBasketballPlayer(x) ∧ ¬AmericanNational(x)) ::: Some professional basketball players are not American nationals.\", \"∀x (ProfessionalBasketballPlayer(x) → CanDoJumpShots(x)) ::: All professional basketball players can do jump shots.\", \"∀x (CanDoJumpShots(x) → LeapStraightIntoAir(x)) ::: If someone can jump shots, they leap straight into the air.\", \"∀x (LeapStraightIntoAir(x) → ActivateLegMuscles(x)) ::: If someone leaps straight into the air, they activate their leg muscles.\", \"¬ActivateLegMuscles(yuri) ::: Yuri does not activate his leg muscles.\"],\n    \"First-Order-Logic Question\": \"¬(ProfessionalBasketballPlayer(yuri) ∧ AmericanNational(yuri)) ::: Yuri is not an American professional basketball player.\"\n}"
    ]
  },
  {
    "id": 1315,
    "context": [
      "Some professional basketball players are not American nationals.",
      "All professional basketball players can do jump shots.",
      "If someone can jump shots, they leap straight into the air.",
      "If someone leaps straight into the air, they activate their leg muscles. ",
      "Yuri does not activate his leg muscles."
    ],
    "question": "Yuri is an American professional basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ProfessionalBasketballPlayer(x) ::: x is a professional basketball player.\",\n        \"AmericanNational(x) ::: x is an American national.\",\n        \"CanDoJumpShots(x) ::: x can do jump shots.\",\n        \"LeapStraightIntoAir(x) ::: x leaps straight into the air.\",\n        \"ActivateLegMuscles(x) ::: x activates their leg muscles.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x (ProfessionalBasketballPlayer(x) ∧ ¬AmericanNational(x)) ::: Some professional basketball players are not American nationals.\",\n        \"∀x (ProfessionalBasketballPlayer(x) → CanDoJumpShots(x)) ::: All professional basketball players can do jump shots.\",\n        \"∀x (CanDoJumpShots(x) → LeapStraightIntoAir(x)) ::: If someone can jump shots, they leap straight into the air.\",\n        \"∀x (LeapStraightIntoAir(x) → ActivateLegMuscles(x)) ::: If someone leaps straight into the air, they activate their leg muscles.\",\n        \"¬ActivateLegMuscles(yuri) ::: Yuri does not activate his leg muscles.\"\n    ],\n    \"First-Order-Logic Question\": \"AmericanNational(yuri) ∧ ProfessionalBasketballPlayer(yuri) ::: Yuri is an American professional basketball player.\"\n}"
    ]
  },
  {
    "id": 1316,
    "context": [
      "Some professional basketball players are not American nationals.",
      "All professional basketball players can do jump shots.",
      "If someone can jump shots, they leap straight into the air.",
      "If someone leaps straight into the air, they activate their leg muscles. ",
      "Yuri does not activate his leg muscles."
    ],
    "question": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"ProfessionalBasketballPlayer(x) ::: x is a professional basketball player.\",\n        \"AmericanNational(x) ::: x is an American national.\",\n        \"CanDoJumpShots(x) ::: x can do jump shots.\",\n        \"LeapStraightIntoAir(x) ::: x leaps straight into the air.\",\n        \"ActivateLegMuscles(x) ::: x activates their leg muscles.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x (ProfessionalBasketballPlayer(x) ∧ ¬AmericanNational(x)) ::: Some professional basketball players are not American nationals.\",\n        \"∀x (ProfessionalBasketballPlayer(x) → CanDoJumpShots(x)) ::: All professional basketball players can do jump shots.\",\n        \"∀x (CanDoJumpShots(x) → LeapStraightIntoAir(x)) ::: If someone can jump shots, they leap straight into the air.\",\n        \"∀x (LeapStraightIntoAir(x) → ActivateLegMuscles(x)) ::: If someone leaps straight into the air, they activate their leg muscles.\",\n        \"¬ActivateLegMuscles(yuri) ::: Yuri does not activate his leg muscles.\"\n    ],\n    \"First-Order-Logic Question\": \"¬LeapStraightIntoAir(yuri) → AmericanNational(yuri) ::: If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\"\n}"
    ]
  },
  {
    "id": 1317,
    "context": [
      "Some professional basketball players are not American nationals.",
      "All professional basketball players can do jump shots.",
      "If someone can jump shots, they leap straight into the air.",
      "If someone leaps straight into the air, they activate their leg muscles. ",
      "Yuri does not activate his leg muscles."
    ],
    "question": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsProfessionalBasketballPlayer(x) ::: x is a professional basketball player.\",\n        \"IsAmericanNational(x) ::: x is an American national.\",\n        \"CanDoJumpShots(x) ::: x can do jump shots.\",\n        \"LeapStraightIntoAir(x) ::: x leaps straight into the air.\",\n        \"ActivateLegMuscles(x) ::: x activates their leg muscles.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∃x (IsProfessionalBasketballPlayer(x) ∧ ¬IsAmericanNational(x)) ::: Some professional basketball players are not American nationals.\",\n        \"∀x (IsProfessionalBasketballPlayer(x) → CanDoJumpShots(x)) ::: All professional basketball players can do jump shots.\",\n        \"∀x (CanDoJumpShots(x) → LeapStraightIntoAir(x)) ::: If someone can jump shots, they leap straight into the air.\",\n        \"∀x (LeapStraightIntoAir(x) → ActivateLegMuscles(x)) ::: If someone leaps straight into the air, they activate their leg muscles.\",\n        \"¬ActivateLegMuscles(yuri) ::: Yuri does not activate his leg muscles.\"\n    ],\n    \"First-Order-Logic Question\": \"¬IsAmericanNational(yuri) → IsProfessionalBasketballPlayer(yuri) ::: If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.\"\n}"
    ]
  },
  {
    "id": 724,
    "context": [
      "Events are either happy or sad.",
      "At least one event is happy. "
    ],
    "question": "All events are sad.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsHappy(x) ::: x is happy\", \"IsSad(x) ::: x is sad\"],\n    \"First-Order-Logic Premises\": [\"∀x (IsHappy(x) ∨ IsSad(x)) ::: Events are either happy or sad.\", \"∃x IsHappy(x) ::: At least one event is happy.\"],\n    \"First-Order-Logic Question\": \"∀x IsSad(x) ::: All events are sad.\"\n}"
    ]
  },
  {
    "id": 411,
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Winner(x, y) ::: x is the winner of y\",\n        \"Participant(x, y) ::: x participated in y\",\n        \"FromCountry(x, y) ::: x is from the country y\",\n        \"OnLeaderboard(x, y) ::: x is on the leaderboard of y\",\n        \"SixWayTie(x) ::: x is in a six-way tie\",\n        \"FromBelgium(x) ::: x is from Belgium\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"Winner(steinhauer, duMaurierClassic1992) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\",\n        \"Participant(steinhauer, duMaurierClassic1992) ::: Steinhauer participated in the 1992 du Maurier Classic.\",\n        \"∃x (SixWayTie(x) ∧ FromBelgium(x)) ::: One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\",\n        \"FromBelgium(descampe) ∧ OnLeaderboard(descampe, duMaurierClassic1992) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\",\n        \"∀x (OnLeaderboard(x, duMaurierClassic1992) → Participant(x, duMaurierClassic1992)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Winner(steinhauer, duMaurierClassic1992) ::: Steinhauer was not the winner of the 1992 du Maurier Classic.\"\n}"
    ]
  },
  {
    "id": 412,
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"WinnerOf(x, y) ::: x is the winner of y\", \"ParticipatedIn(x, y) ::: x participated in y\", \"OnLeaderboard(x, y) ::: x is on the leaderboard of y\", \"FromCountry(x, y) ::: x is from the country y\"],\n    \"First-Order-Logic Premises\": [\"WinnerOf(steinhauer, 1992DuMaurierClassic) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\", \"ParticipatedIn(steinhauer, 1992DuMaurierClassic) ::: Steinhauer participated in the 1992 du Maurier Classic.\", \"∃x (SixWayTie(x) ∧ PersonInSixWayTie(x, belgium)) ::: One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\", \"FromCountry(descampe, belgium) ∧ OnLeaderboard(descampe, 1992DuMaurierClassic) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\", \"∀x (OnLeaderboard(x, 1992DuMaurierClassic) → ParticipatedIn(x, 1992DuMaurierClassic)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\"],\n    \"First-Order-Logic Question\": \"InSixWayTie(descampe, 1992DuMaurierClassic) ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\"\n}"
    ]
  },
  {
    "id": 1324,
    "context": [
      "Jane does not like any animals that bark.",
      "All dogs are animals that bark.",
      "Jane likes all animals that jump.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "KiKi is an animal.",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi is terricolous.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Likes(x, y) ::: x likes y\",\n        \"Barks(x) ::: x barks\",\n        \"Dog(x) ::: x is a dog\",\n        \"Jumps(x) ::: x jumps\",\n        \"HasLegs(x) ::: x has legs\",\n        \"Terricolous(x) ::: x is terricolous\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"¬Likes(jane, y) ::: Jane does not like any animals that bark.\",\n        \"∀x (Dog(x) → Barks(x)) ::: All dogs are animals that bark.\",\n        \"∀x (Likes(jane, x) → Jumps(x)) ::: Jane likes all animals that jump.\",\n        \"∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\",\n        \"∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\",\n        \"Animal(kiki) ::: KiKi is an animal.\",\n        \"¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\"\n    ],\n    \"First-Order-Logic Question\": \"Terricolous(kiki) ::: KiKi is terricolous.\"\n}"
    ]
  },
  {
    "id": 1325,
    "context": [
      "Jane does not like any animals that bark.",
      "All dogs are animals that bark.",
      "Jane likes all animals that jump.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "KiKi is an animal.",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi is a barking dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Likes(x, y) ::: x likes y\",\n        \"Barks(x) ::: x barks\",\n        \"Dog(x) ::: x is a dog\",\n        \"Jumps(x) ::: x jumps\",\n        \"HasLegs(x) ::: x has legs\",\n        \"Terricolous(x) ::: x is terricolous\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (¬Likes(jane, y) ∨ ¬Barks(y)) ::: Jane does not like any animals that bark.\",\n        \"∀x (Dog(x) → Barks(x)) ::: All dogs are animals that bark.\",\n        \"∀x (Likes(jane, y) → (Jumps(y))) ::: Jane likes all animals that jump.\",\n        \"∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\",\n        \"∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\",\n        \"Animal(kiki) ::: KiKi is an animal.\",\n        \"¬(Jumps(kiki) ∨ HasLegs(kiki)) ∨ (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\"\n    ],\n    \"First-Order-Logic Question\": \"Dog(kiki) ∧ Barks(kiki) ::: KiKi is a barking dog.\"\n}"
    ]
  },
  {
    "id": 1326,
    "context": [
      "Jane does not like any animals that bark.",
      "All dogs are animals that bark.",
      "Jane likes all animals that jump.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "KiKi is an animal.",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi does not bark and he is not a dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"Likes(x, y) ::: x likes y\",\n        \"Barks(x) ::: x barks\",\n        \"Dog(x) ::: x is a dog\",\n        \"Jumps(x) ::: x jumps\",\n        \"HasLegs(x) ::: x has legs\",\n        \"Terricolous(x) ::: x is terricolous\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"¬Likes(jane, y) ::: Jane does not like any animals that bark.\",\n        \"∀x (Dog(x) → Barks(x)) ::: All dogs are animals that bark.\",\n        \"∀x (Likes(jane, x) → Jumps(x)) ::: Jane likes all animals that jump.\",\n        \"∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\",\n        \"∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\",\n        \"Animal(kiki) ::: KiKi is an animal.\",\n        \"¬((¬Jumps(kiki) ∧ ¬HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\"\n    ],\n    \"First-Order-Logic Question\": \"¬Barks(kiki) ∧ ¬Dog(kiki) ::: KiKi does not bark and he is not a dog.\"\n}"
    ]
  },
  {
    "id": 304,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazilian footballer who plays for Náutico.",
      "Náutico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "No one playing for Nautico is Brazilian.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"KnownAs(x, y) ::: x is commonly known as y.\",\n        \"FootballPlayer(x) ::: x is a football player.\",\n        \"LoanedOutTo(x, y) ::: x was loaned out to y.\",\n        \"PlaysFor(x, y) ::: x plays for y.\",\n        \"Club(x) ::: x is a football club.\",\n        \"Brazilian(x) ::: x is Brazilian.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"KnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\",\n        \"FootballPlayer(ailton) ∧ LoanedOutTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\",\n        \"Brazilian(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Náutico.\",\n        \"Club(nautico) ∧ Club(braga) ::: Náutico is a football club along with Braga.\",\n        \"Club(fluminense) ::: Fluminense is a football club.\"\n    ],\n    \"First-Order-Logic Question\": \"¬∃x (PlaysFor(x, nautico) ∧ Brazilian(x)) ::: No one playing for Nautico is Brazilian.\"\n}"
    ]
  },
  {
    "id": 305,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazilian footballer who plays for Náutico.",
      "Náutico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva does not play for a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsDependentOn(x, y) ::: x is dependent on y.\",\n        \"DrinkRegularly(x, y) ::: x regularly drinks y.\",\n        \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\",\n        \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\",\n        \"Student(x) ::: x is a student.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\",\n        \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\",\n        \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\",\n        \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\",\n        \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"\n    ],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 306,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazilian footballer who plays for Náutico.",
      "Náutico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton was not loaned out to a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsKnownAs(x, y) ::: x is commonly known as y.\",\n        \"FootballPlayer(x) ::: x is a football player.\",\n        \"LoanedOutTo(x, y) ::: x was loaned out to y.\",\n        \"PlaysFor(x, y) ::: x plays for y.\",\n        \"Club(x) ::: x is a football club.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"IsKnownAs(ailton, ailton) ∧ BornIn(ailton, 1995) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\",\n        \"FootballPlayer(ailton) ∧ LoanedOutTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\",\n        \"Brazilian(ailton) ∧ Footballer(ailton) ∧ PlaysFor(ailton, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Náutico.\",\n        \"Club(nautico) ∧ Club(braga) ::: Náutico is a football club along with Braga.\",\n        \"Club(fluminense) ::: Fluminense is a football club.\"\n    ],\n    \"First-Order-Logic Question\": \"¬LoanedOutTo(ailton, club) ::: Ailton was not loaned out to a football club.\"\n}"
    ]
  },
  {
    "id": 307,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazilian footballer who plays for Náutico.",
      "Náutico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva played for Fluminense.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\n        \"IsDependentOn(x, y) ::: x is dependent on y.\",\n        \"DrinkRegularly(x, y) ::: x regularly drinks y.\",\n        \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\",\n        \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\",\n        \"Student(x) ::: x is a student.\"\n    ],\n    \"First-Order-Logic Premises\": [\n        \"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\",\n        \"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\",\n        \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\",\n        \"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\",\n        \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"\n    ],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  },
  {
    "id": 308,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazilian footballer who plays for Náutico.",
      "Náutico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"First-Order-Logic Predicates\": [\"IsDependentOn(x, y) ::: x is dependent on y.\", \"DrinkRegularly(x, y) ::: x regularly drinks y.\", \"WantToBeAddictedTo(x, y) ::: x wants to be addicted to y.\", \"AwareThatDrug(x, y) ::: x is aware that y is a drug.\", \"Student(x) ::: x is a student.\", \"Czech(x) ::: x is Czech\", \"ChoralConductor(x) ::: x is a choral conductor\", \"SpecializeInPerformanceOf(x, y) ::: x specializes in the performance of y\", \"Musician(x) ::: x is a musician\", \"Love(x, y) ::: x loves y\", \"PublishedBook(x, y) ::: x published the book y\"],\n    \"First-Order-Logic Premises\": [\"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine)) ::: All people who regularly drink coffee are dependent on caffeine.\", \"∀x (DrinkRegularly(x, coffee) ∨ (¬WantToBeAddictedTo(x, caffeine))) ::: People regularly drink coffee, or they don't want to be addicted to caffeine, or both.\", \"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine)) ::: No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\", \"¬(Student(rina) ⊕ ¬AwareThatDrug(rina, caffeine)) ::: Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\", \"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina)) ::: Rina is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.\"],\n    \"First-Order-Logic Question\": \"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine)) ::: Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.\"\n}"
    ]
  }
]