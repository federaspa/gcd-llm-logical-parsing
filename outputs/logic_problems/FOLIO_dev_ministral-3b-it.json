[
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "problem": "The word 'silver' is too shiny",
      "solution": "It's just like any other thing we do.",
      "perplexity": [
        6.232080936431885,
        8.767020225524902
      ]
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "final_words": "I was absolutely disappointed to see Mr. Jenkins leave, but it's not just any day.",
      "perplexity": [
        4.728705883026123,
        4.39509391784668
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Inequality(x)"
      ],
      "fol_consts": [
        "realms",
        "commonplace"
      ],
      "fol_rules": [
        "Theecealnt(x) ∧ (Imagicsting(ax, ax))",
        "Rinnoynzout(x) ∧ Civiryneein(ax, x)",
        "Nirlibyeet(x) ∧ Corktyteon(ax)"
      ],
      "fol_conc": "Cilntsiones(x) ∧ Disnuenzout(ax, ax)",
      "perplexity": 9.92431640625
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "programmingLanguage(x)"
      ],
      "fol_consts": [
        "Sam is inactive and not interested. This implies that Sam doesn't participate in activities related to coding.",
        "Sam is inactive and not interested. This implies that Sam doesn't participate in activities related to coding."
      ],
      "fol_rules": [
        "(programmingLanguage(x)) ∧ (project(x) → programmingLanguage(n) ⊕ ¬programmingLanguage(n))",
        "((programmingLanguage(e)) ∧ ¬programmingLanguage(v, n))"
      ],
      "fol_conc": "programmingLanguage(n)",
      "perplexity": 14.065399169921875
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Detective-Object",
        "Detective-Person"
      ],
      "fol_consts": [
        "Detective-Object: This is a person."
      ],
      "fol_rules": [
        "A detective must solve the case based on all available evidence, including the textual evidence of the facts.]],  // Incorporate the following line to test the correctness of its contents.  # Exclude any mention of ",
        "Due: A detective cannot find one person."
      ],
      "fol_conc": "Detective-Object is a woman who was caught in an accident while trying to travel from London to Los Angeles but returned back again.",
      "perplexity": [
        5.630846977233887,
        9.214771270751953
      ]
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person1",
        "Person2",
        "Person3",
        "Person4",
        "Person5"
      ],
      "fol_consts": [
        "I can only get up and move around when I am at home"
      ],
      "fol_rules": [
        "Upon your arrival in the remote location you must be able to do this. You may also need to be able to get up and move around every day."
      ],
      "fol_conc": "I can only get up and move along when I am at home.",
      "perplexity": [
        3.378032684326172,
        5.215572834014893
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Urongnue(x)",
        "Tonightaltee(x, y)"
      ],
      "fol_consts": [
        "urontorntalt",
        "tomorrowatlst",
        "nunleoxtalt"
      ],
      "fol_rules": [
        "(Urongnue(x) ∧ Urtonningsee(x)) ∧ Prudent(x)",
        "∀x (Urtolty(x) ∧ ¬Unleoxtalt(x))",
        "Clontonningnee(x) ∧ Itee(x)"
      ],
      "fol_conc": "Alsondroddlernyseein(x) ∨ Cretorntalst(x)",
      "perplexity": 8.024641990661621
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(n)"
      ],
      "fol_consts": [
        "_ _ _._____________________(_.noun)"
      ],
      "fol_rules": [
        "tomorrow(e) → tomorrow(x)",
        "tomorrow(i) ∧ (tomorrow(u) ⊕ ¬tomorrow(v))"
      ],
      "fol_conc": "tomorrow(d)",
      "perplexity": 26.35906410217285
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "x",
        "z",
        "c"
      ],
      "fol_consts": [],
      "fol_rules": [
        "\n",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "",
        "C."
      ],
      "fol_conc": "My son's favorite thing about eating chocolaques...",
      "perplexity": [
        7.275934219360352,
        4.511479377746582
      ]
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input.txt"
      ],
      "fol_consts": [
        "2.2, 'This is a book that says 'You know what it does!'",
        "5.1: What did John do? What is his name?"
      ],
      "fol_rules": [
        "If you want to find out how you get really good at this thing when you start getting rid of all the people who got done by John, you go back with that fact."
      ],
      "fol_conc": "The question asks about what Tom found out from his book. This is different from everyone saying 'You know why you don't want to read it.' You get really good on this thing when you find out that Tom got done by John!",
      "perplexity": [
        6.940479755401611,
        7.573236465454102
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Implicit(x)",
        "Interpretted(x)",
        "Instantuality(x)"
      ],
      "fol_consts": [
        "emplovee",
        "innout",
        "introdional"
      ],
      "fol_rules": [
        "Implicit(x)",
        "Interprelling(x)"
      ],
      "fol_conc": "Theiridity(uingemmetzment) ⊕ ¬Inestuct(untrodional) ∧ ∀x (Implicit(x)) ∧ Interprelling(x)",
      "perplexity": 8.219903945922852
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(s)",
        "tomorrow($t, k)"
      ],
      "fol_consts": [
        "$t",
        "$t",
        "$t"
      ],
      "fol_rules": [
        "(tomorrow(n)) ∧ (tomorrow($t) ∨ ((tomorrow($t)) ∧ tomorrow($t)))"
      ],
      "fol_conc": "((tomorrow(i) ∧ tomorrow($t, i)))",
      "perplexity": 13.044661521911621
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "There is an animal.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Nteklittnovtllngsttioftilstrixtrolftmtttionnluntz",
        "Indaxtrektlysskaallgkisletymmae"
      ],
      "fol_consts": [
        "Ikeiplistriekliptrixtruvtngklittnovdraerkafee"
      ],
      "fol_rules": [
        "Ntektlysskaallgkisletymmae",
        "120eakeiplistriekliptrixtruvtngklittnovdraerkafea",
        "(Ikeiplistriecklittnovdraarcafee) xerttis neissletygnrsntrylngklittnovae."
      ],
      "fol_conc": "Eye'semptorrynkinnynjolntz",
      "perplexity": [
        7.717367172241211,
        12.39908504486084
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Monkeypox(x)",
        "Macnattya(x)"
      ],
      "fol_consts": [
        "monkae",
        "maunaue"
      ],
      "fol_rules": [
        "Nateox(x) ∧ ¬Sacred(x) ∧ ∃n (Mobysntonet(x))"
      ],
      "fol_conc": "Momsynattya(x)",
      "perplexity": 8.358765602111816
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "muggle(x)"
      ],
      "fol_consts": [
        "$cucut",
        "$cucut",
        "$cucut",
        "$cucut"
      ],
      "fol_rules": [
        "(∃x (muggle($cucut)) ∧ ((muggle(v)) ∧ ¬(muggle(v))) ⊕ ¬((monkeypox(i)) ∧ ∀x (monkeypox(i, i))))"
      ],
      "fol_conc": "muggle(u) → ∃v (muggle(l)) ⊕ ¬((monkeypox(w) ∧ muggle(p, i)))",
      "perplexity": 12.349597930908203
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "No one gets flu.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "I am not sure what you are looking for in the context of me"
      ],
      "fol_consts": [
        "Yes to your question,"
      ],
      "fol_rules": [
        "I can't see how we get wet or go cold.",
        ", 1. "
      ],
      "fol_conc": "This is a valid question and I need more data.",
      "perplexity": [
        5.8431172370910645,
        18.814090728759766
      ]
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "directory",
        "directory"
      ],
      "fol_consts": [
        "cd",
        "/.",
        "_"
      ],
      "fol_rules": [
        ".md",
        "1.xor .json"
      ],
      "fol_conc": "\n.",
      "perplexity": [
        3.4749715328216553,
        9.636764526367188
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cumple(x)",
        "Nimble(x)",
        "Eatable(x)"
      ],
      "fol_consts": [
        "mnkae",
        "tmooue"
      ],
      "fol_rules": [
        "((Fornembe(x) ∧ Nibnibs(x)) ∧ Folty(x) → Cumple(x) ∧ Peculite(x))",
        "Picolly(x) ∧ Sneakily(x) → Prolly(x) ∧ Pecking(x) → Confirnt(x) ∧ Cumple(x)"
      ],
      "fol_conc": "Uninkable(nibnibs, zito, itoe, trotoson)",
      "perplexity": 8.689929962158203
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "3.5",
        "4.2,",
        "6.3.",
        "7.4"
      ],
      "fol_consts": [
        "1.2",
        "6.3"
      ],
      "fol_rules": [
        "(Grove.5):"
      ],
      "fol_conc": "Draunnee",
      "perplexity": [
        5.421938896179199,
        13.37605094909668
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Newtoneys(x)",
        "Kneakedy(x)"
      ],
      "fol_consts": [
        "newtomeys",
        "kneadedty"
      ],
      "fol_rules": [
        "Untouched(x) → Cueed0(x)"
      ],
      "fol_conc": "Tomixtoneksinzabitty(x) → Unduckennaire(x)",
      "perplexity": 9.178610801696777
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alice(x)",
        "Alice(z, z)",
        "Bob(n, n)",
        "Alice(z)"
      ],
      "fol_consts": [
        "$1 = Frodo.txt"
      ],
      "fol_rules": [
        "(Alice(z)) ∧ (Bob(n, n) ⊕ ¬Alice($1 = Frodo.txt))",
        "Alice(z)"
      ],
      "fol_conc": "Bob(d, z) → Alice($1 = Frodo.txt)",
      "perplexity": 14.106636047363281
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "ton"
      ],
      "fol_consts": [
        "nom. you read a lot and understand the language.",
        "lit,",
        "seed it to learn grammatical rules."
      ],
      "fol_rules": [
        "Reading letters: 'some.'"
      ],
      "fol_conc": "You read all words in the text.",
      "perplexity": [
        3.874763250350952,
        12.573951721191406
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Tom(n)",
        "Tom(e)",
        "Tom(z)"
      ],
      "fol_consts": [
        "tom,",
        "tom,"
      ],
      "fol_rules": [
        "((Tom(n)))"
      ],
      "fol_conc": "Tom(z)",
      "perplexity": 14.160383224487305
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "* ] to a dog, ",
        " **:"
      ],
      "fol_consts": [
        "Careing,",
        "Furnish."
      ],
      "fol_rules": [
        "$.nns",
        "e10d in n'ern"
      ],
      "fol_conc": "aue to be irriounted or misperurye itniony.",
      "perplexity": [
        4.634674549102783,
        41.4463996887207
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Upto(x)",
        "Frozen(x)",
        "Drinchin(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (Unacnealable(x))",
        "Ionkaea1(x) → Pountonkaiue(x, y)",
        "Riseo1(z) → Cionkae1(z, z)"
      ],
      "fol_conc": "(Vnkaealable(x)) ∧ Xeritea1(x) → Untoutted(x) ∨ Unacnealancein(x)",
      "perplexity": 7.134641647338867
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Game",
        "Die Hard"
      ],
      "fol_consts": [
        "Director(s) (movie/music). (1960, 83), #Tommy"
      ],
      "fol_rules": [
        "You need to know how to read the ",
        "How's 'Godhorn' in the Top 10?"
      ],
      "fol_conc": "The movie is more than half of what you ask about.",
      "perplexity": [
        4.257335186004639,
        9.25818157196045
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Aliar(x)",
        "Aliar($1.65, $1.65)"
      ],
      "fol_consts": [
        "$1.65",
        "$1.65"
      ],
      "fol_rules": [
        "(Saxon(x))",
        "Aliar($1.65, $1.65)",
        "((Aliar($1.65) ∧ Aliar(x)))",
        "Aliar($1.65)"
      ],
      "fol_conc": "Aliar($1.65)",
      "perplexity": 6.383589744567871
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "#E1",
        "E1",
        "Ineemt"
      ],
      "fol_consts": [
        "Fauet",
        "Groddi,"
      ],
      "fol_rules": [],
      "fol_conc": "If you have a $1 million in your pocket or even a fraction of an dollar!",
      "perplexity": [
        6.110694408416748,
        18.212078094482422
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "feelfulcy,feeletty(n)",
        "feelfulcy,feeletty(n)"
      ],
      "fol_consts": [
        "<a.e.*>Frydoo! ou 'ol' olouue! (19-25)",
        "<a.e.*>Frydoo! ou 'ol' olouue! (19-25)"
      ],
      "fol_rules": [
        "∃x (fruitallicity(n))",
        "∀z (feelfulcy,feeletty(n) ⊕ ¬feelfulcy,feeletty(i) ∧ ¬feelfulcy,feeletty(n))"
      ],
      "fol_conc": "fruitallicity(n)",
      "perplexity": 16.490995407104492
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Icelayma",
        "Kikklokniya",
        "No!"
      ],
      "fol_consts": [
        "None],<|im_end|><|im_start|>assistant: No. Answer: None] 2. The final answer is the word "
      ],
      "fol_rules": [
        "no one can understand the meaning of a language like no you think it's a thing, unless I know what we say in real words and symbolism.",
        "No!",
        "No..."
      ],
      "fol_conc": "",
      "perplexity": [
        5.371349334716797,
        15.554014205932617
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "twink(x)",
        "caffeine(x)",
        "caffeine(x)"
      ],
      "fol_consts": [
        "nki-yetka, kiki-ju'eileen', ylinnyo.com.",
        "30+1/7(x)/2!9."
      ],
      "fol_rules": [
        "(twink(x)) ∧ (caffeine(x) → caffeine(u))",
        "((caffeine(a)) ∨ ((twink(y))) ∧ caffeine(v, y) ⊕ ¬(caffeine(v) ∧ (caffeine(v))))",
        "∀x (caffeine(u)) → (twink(s))",
        "(caffeine(a)) ∨ ((caffeine(l, c)))"
      ],
      "fol_conc": "(caffeine(y) ∧ caffeine(v) ∧ caffeine(u))",
      "perplexity": 13.524964332580566
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Adauna",
        "Douanna"
      ],
      "fol_consts": [
        "Theo, darling."
      ],
      "fol_rules": [
        "Akauea nayee i tu okey ouk olee."
      ],
      "fol_conc": "Alright my friend. Let's go on the table next next week.",
      "perplexity": [
        6.690016746520996,
        16.581737518310547
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Matches(x, y)",
        "Matching1(x, y)"
      ],
      "fol_consts": [
        "matches",
        "matches"
      ],
      "fol_rules": [
        "Simplify(y) → (Mathes(z, z) ∧ ∀x (Xerox(n, k)))"
      ],
      "fol_conc": "Involved1(oshtedint) ∧ ∀x (Misteadit1(k, c))",
      "perplexity": 8.2008638381958
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "square1(x, y)",
        "square1(z, z)",
        "square1(k, k)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "∀x (square1(x, y) ∧ square1(z, z))",
        "∀k (square1(k, k))"
      ],
      "fol_conc": "square1(x, y) ∧ square1(z, z)",
      "perplexity": 8.264168739318848
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "directory",
        "store"
      ],
      "fol_consts": [
        "directory"
      ],
      "fol_rules": [
        "3. We know that diners are a type of fish and can be eaten at different times of day."
      ],
      "fol_conc": "Dina is the name for something else than just dinosaurns!",
      "perplexity": [
        6.214625835418701,
        6.4409708976745605
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "robb(x)",
        "robb(y, y)",
        "robb(z, z)"
      ],
      "fol_consts": [
        "_:123e4567-i4kjnw.dodalleaue9098hgghychilngt!~$&*()`=+/?'{}[]|qrstzbnet--',",
        "_:123e4567-i4kjnw.dodalleaue9098hgghychilngt!~$&*()`=+/?'{}[]|qrstzbnet--',"
      ],
      "fol_rules": [
        "((((robb(x)))) ∧ (((robb(i))) ∧ ((robb(i)))) ⊕ ¬(robb(n) ∧ robb(s, i) → ¬(robb(k) ∨ ¬robb(v, k)) ∧ (rry(m) ∧ ∃x (robb(u, n))) ∧ ((robb(i)) ∧ robb(l) → ∀x (robb(n) ∧ robb(s, l)))) ⊕ ¬((robb(y)) ∨ ¬rry(z) → ∃e ∃k ∀i ∀x (robb(n) ∧ robb(w, n))) ∧ ((robb(l))) ∧ ∃t ∃z ∃c ∀v (((robb(i)) ∨ ¬rry(s) → ∃x (robb(k, i)) ∧ robb(l, k)))) ⊕ ¬((robb(e)) ∨ ¬rry(z) → ∀n ∀i ∃a ∀x (robb(k, i) ∧ robb(s, k)) ∧ ((robb(l)) ∨ ¬rry(z) → ∀n ∀i ∃a ∀x (robb(m) ∨ ∃k ∀s ∀e ∀v (robb(l)))) ⊕ ¬((robb(y, y)) ∧ (robb(i) ∨ ¬rry(z)))) ∧ ∃x (robb(k, i) ∧ robb(l, k)) ∧ ∀n ∀i ∃a ∀o (robb(m) ∧ (robb(v, n))) ∧ ((robb(k)) ∨ ¬rry(z)) ∨ (robb(s) ∨ ¬((robb(l))))"
      ],
      "fol_conc": "robb(n) ∧ robb(v) → ∀x (robb(k) ∨ ¬rry(z))",
      "perplexity": 7.410675525665283
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is not a turtle.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "task, task",
        "proto-coellian",
        "crityliaformion"
      ],
      "fol_consts": [
        "carrot trotty"
      ],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        7.599665641784668,
        18.790264129638672
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Brittin(x)"
      ],
      "fol_consts": [
        "rock",
        "trittn",
        "kikton"
      ],
      "fol_rules": [
        "(Rruk(x)) ∧ (Rrixtn(x))"
      ],
      "fol_conc": "Roockisntesintionisttettyssesikezirntotsttleysssrtdltorryssnngednttochoscueeceikaresitteoshnkrrsntaltsrngkrt(rwldt)",
      "perplexity": 15.949520111083984
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "inae](name=alice,age=2-2],",
        "real-real",
        "Animatee of the real world",
        "emitee in the real world",
        "cntt to be part of the real world",
        "it is impossible to live without a dog or other person."
      ],
      "fol_consts": [
        "hello. I'm just a cat!",
        "I have no dog!"
      ],
      "fol_rules": [
        "chuenty: I can only be alive in real real real. I cannot live with you. And not even if you are to me.",
        "gronts",
        "crystnthisnutting: You have nothing to know about your own dog and a cat! What do you need to be like? We can only live in real real real!",
        "if you were alive in the real real world, it'd mean we could not see you.",
        "hey my friend! I won on this is a dog. But no one else or anyone to be like me.",
        "doinntt to be part of the real real real",
        "I can only live through you and nobody else!",
        "dnitee-to-neurntry: You don't want to get 'em out. But you cannot eat me.",
        "**",
        "if I am a dog, what will be your name? Doiuenty...!",
        "I've been living in my own real real real house and I can just say ",
        "you are a cat or a dog!",
        ""
      ],
      "fol_conc": "The world is too big to be used. We can only live there.",
      "perplexity": [
        4.426131725311279,
        11.783720016479492
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "ruby(x)"
      ],
      "fol_consts": [
        "$.zipped.",
        "$.zipped.",
        "$.zipped."
      ],
      "fol_rules": [
        "∃v (ruby(u)) → ((i, i) ∧ ruby(a) ⊕ ¬(s))"
      ],
      "fol_conc": "ruby($.zipped.)",
      "perplexity": 17.746017456054688
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "hello",
        "hi, hello again."
      ],
      "fol_consts": [
        "this is just like text when read to the mind."
      ],
      "fol_rules": [
        "I see a world of stars, you know it's not really done correctly."
      ],
      "fol_conc": "You see the real world around you and read it straight out from text. This is just how I do it.",
      "perplexity": [
        5.4879469871521,
        10.88970947265625
      ]
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "123"
      ],
      "fol_consts": [
        "0",
        "4,3], (e.e., 5), (z=9) from the 123rd digit, 7/3 (which is a part of ",
        "). (1: "
      ],
      "fol_rules": [
        "d dig digi', 'D')`, (",
        "noctl't'"
      ],
      "fol_conc": "Unnsee. 'crygnt'",
      "perplexity": [
        5.934953212738037,
        23.768152236938477
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Crock(x)"
      ],
      "fol_consts": [
        "tomorrow"
      ],
      "fol_rules": [
        "((Crock(x) ∧ Crock(x) → ¬Isoka(z)) ∧ ∀x (Dostyss(z)))",
        "Cosbynts(k) → Xaviernus(k)"
      ],
      "fol_conc": "Thisdysses(i) ⊕ ¬Isoka(j)",
      "perplexity": 9.799031257629395
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "rouck(x)"
      ],
      "fol_consts": [
        "",
        "",
        ""
      ],
      "fol_rules": [
        "((rouck(x)) ∧ rouck() ∧ (stroch(z)))",
        "(stroch(k)) ⊕ ¬(rouck())"
      ],
      "fol_conc": "stroch(n) → ∀x (((rouck(n) ∧ rouck() ∨ rouck())))",
      "perplexity": 18.437175750732422
    }
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "ComputerSystem",
        "NLPM",
        "AI"
      ],
      "fol_consts": [
        "#3. A. AI cannot perform this task."
      ],
      "fol_rules": [
        "InterpretibleLanguage[e], RecognizablePatterns[n], VocabularyX",
        "NLPM and CognitiveAI"
      ],
      "fol_conc": "I can use the word 'software' to understand how you interact with your computer.",
      "perplexity": [
        4.344423294067383,
        8.133713722229004
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Crawler(x)",
        "Noble(n)",
        "Noble(e, c, .57143 (which is a fact of the universe), e, i, f, g, t, k, n, d, p, o, s, u, y, v, z)"
      ],
      "fol_consts": [
        "Fearless-Hairedmaeil,",
        ""
      ],
      "fol_rules": [
        "Crawler(x)",
        "Noble(n, c, t, k)",
        "Noble(e, i, f, g, d, n, o, v, z)"
      ],
      "fol_conc": "(Crawler(x) → Crawler(n, c, t, k))",
      "perplexity": 8.0347318649292
    }
  },
  {
    "id": 22,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "\"Black Mirror\" is popular.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1,1",
        "3,2"
      ],
      "fol_consts": [
        "Nka yay to crystnealnngsnoitktntriezltlussnoillftrekstnntrikus\nnyttttyoins',eldklstnmentrsse1f."
      ],
      "fol_rules": [
        "Nka ecktnntniionryndulstntrytnstnoitktntriezltlussnngsbyg0inny",
        "Indknnti ince-baikstnntriezntr",
        "Ncaentlntlnntnts--dllstnaikldklstnning",
        "Eldklstnmentrsse1f."
      ],
      "fol_conc": "You get to know how much you are going to be left behind in the future. You don't know what to do when it gets done.",
      "perplexity": [
        4.791586875915527,
        10.729002952575684
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Narrator(n)",
        "Crozen(n)"
      ],
      "fol_consts": [
        "linie1"
      ],
      "fol_rules": [
        "Crosted(n) ∧ Cretnavert(n)"
      ],
      "fol_conc": "Narrator(n) ∧ Crensidin(n)",
      "perplexity": 7.176421165466309
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Triggering(x)",
        "Triggering(y)"
      ],
      "fol_consts": [
        "Stories.",
        "Stories.",
        "Stories."
      ],
      "fol_rules": [
        "∀n (Triggering(z) → Rosie(z))"
      ],
      "fol_conc": "((Triggering(k, z)))",
      "perplexity": 15.175582885742188
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "example1",
        "example2"
      ],
      "fol_consts": [
        "to get rid of coffee"
      ],
      "fol_rules": [
        "this is not an example anymore, so you shouldn't think about it and just follow the instructions provided in previous steps."
      ],
      "fol_conc": "It can be done by simply asking someone who doesn't get rid of coffee.",
      "perplexity": [
        5.061148643493652,
        12.381734848022461
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Talkingbird(x)",
        "Telltayon(x)",
        "Duckling(x)"
      ],
      "fol_consts": [
        "elinnyo1",
        "koulnta2",
        "kiultaltyiue"
      ],
      "fol_rules": [
        "Itettaltyiue(y) → (Tayonyosrntdqvinning(z))"
      ],
      "fol_conc": "Cultrnryiueysqullietaltyiueellleuktionallyitabecratunnyo1vinning(z) ⊕ ¬Tayontyiuekuintaltyieletammonyornewlnta2mnnyo1vinsimniouklutalryiueellleuktionallyitabecratunnyosrngtolldzvinning(z) ∧ Unflignbykuictiae3nnaesarntedqvinning(z)",
      "perplexity": 11.23561954498291
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "installed(v)",
        "software(x, y)"
      ],
      "fol_consts": [
        "composement",
        "_museletion"
      ],
      "fol_rules": [
        "((installed(v)) ∧ (software(i) ⊕ ¬installed(v)))"
      ],
      "fol_conc": "((((installed(v) ∨ installed(u, y)) ∧ installed(x, y) ⊕ (responsible(j) ∧ ¬installed(z)))) → ((installed(v) ∧ installed(u, x))))",
      "perplexity": 22.743322372436523
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "pachy",
        "tac",
        "mak"
      ],
      "fol_consts": [
        "hat"
      ],
      "fol_rules": [
        "3.7: What do you need? (e.g., Nutrint) to get rid of the nutritty?"
      ],
      "fol_conc": "Cayne oyenue yeto meae aket'er cak.",
      "perplexity": [
        5.93290376663208,
        14.123075485229492
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Importance(x)",
        "Trustful(x)"
      ],
      "fol_consts": [
        "dependent",
        "software"
      ],
      "fol_rules": [
        "Imporntal(x) ∧ Cretnatial(x) ∨ Entreaty(x) ∧ Obsttion(x) ∨ Untruptiue(x)"
      ],
      "fol_conc": "Entrrotonal(zodiacs, zellisiae) ∧ Unveliwnted(zosddics) ∧ Uncelliolian(zaxettae)",
      "perplexity": 11.210465431213379
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Inequality(x)",
        "Inequality(y)"
      ],
      "fol_consts": [
        "$0: Bailey",
        "$0: Bailey",
        "$0: Bailey",
        "$0: Bailey",
        "$0: Bailey",
        "$0: Bailey"
      ],
      "fol_rules": [
        "(∀x (Inequality(a) ∧ Inequality(b)))",
        "((((Inequality(c) ∧ ¬(Inequality(d))))))",
        "_($0: Bailey)"
      ],
      "fol_conc": "Inequality(a) ⊕ (Inequality(b, c) ∧ Inequality(d))",
      "perplexity": 13.969083786010742
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Music"
      ],
      "fol_consts": [
        "programming languages",
        "English language, French language, Greek language], and 15 (since it is a question to be answered for the first time) is different from what we know about what's good to read the world. This means no one can say that you have nothing to ask about the whole text of the word 'hello'. Answer: ",
        " ",
        "This isn't more than basic linguistics.",
        " ",
        " ",
        " ",
        " ",
        " ",
        "<|im_end|>user<|im_start|>assistant: 3. They can be either really nice to talk about the world but not like it's something else."
      ],
      "fol_rules": [
        "programming languages",
        "English language, French language, Greek language"
      ],
      "fol_conc": "The whole text of the word 'hello' is pretty simple. Like the whole world!",
      "perplexity": [
        4.998597621917725,
        9.758543968200684
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Bela](n)",
        ":(x, y)",
        "Bela](z)"
      ],
      "fol_consts": [
        "Alba(x)"
      ],
      "fol_rules": [
        "(((:(y, z)) ∧ (Bela](z))))"
      ],
      "fol_conc": "Bela](z) → ((Bela](z)))",
      "perplexity": 11.574378967285156
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "user, cnem, language, knittylst",
        "person/or any person in the world"
      ],
      "fol_consts": [
        "I'm not sure what to ask someone for. It doesn't make sense."
      ],
      "fol_rules": [
        "1. A man needs coffee at night.",
        "2. Everyone knows that it doesn't get eaten."
      ],
      "fol_conc": "So, we can conclude that no one does coffee.",
      "perplexity": [
        6.262516975402832,
        8.204445838928223
      ]
    }
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "who is born from a native land, what language is he speaking?"
      ],
      "fol_consts": [
        "I am not native to my hometown. I've been living in another city for too long."
      ],
      "fol_rules": [
        "From your description, you can deduce that a person has a different language than what they speak.",
        "This question doesn't answer the actual question."
      ],
      "fol_conc": "I can say that I know if it looks like you cannot understand any of my language and how to translate it. And why you do not want to be able to comprehend or understand this?",
      "perplexity": [
        3.920541763305664,
        8.561802864074707
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Aliens(x)"
      ],
      "fol_consts": [
        "ornate",
        "realm"
      ],
      "fol_rules": [
        "Froman1(x) ∧ (Orchrionnaiue(x)) ∨ Anyeinkaue(x) ∧ Xeridottis(x) ∧ Zetzinkaue(x)"
      ],
      "fol_conc": "Mrsntoniue(x) ∧ Unveilstniaue(x)",
      "perplexity": 9.677796363830566
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        " alien(x)",
        " alien(z)"
      ],
      "fol_consts": [
        "$terektrok",
        "$terektrok"
      ],
      "fol_rules": [
        "(another(v) ∧ another(d))",
        "(another(i) ∧ another(c))",
        "((another(s) ∧ (whoever(x, y) ∧ (whoever(y) ∧ another(z)))))",
        "(((another(v) ∧ another(i)) ⊕ ¬another(k) ∧ another($terektrok, z)))"
      ],
      "fol_conc": "((another(s) ∧ another(c) ∧ (another(v) ∧ another(i))))",
      "perplexity": 16.58641815185547
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "who is a person who knows linguistics, but not spoken languages.",
        "people are not aware of the real-time language."
      ],
      "fol_consts": [
        "I am living in a space-time where I can speak 237.5 languages.",
        "You know no one has been talking for over seven years when you hear my voice."
      ],
      "fol_rules": [
        "I have access to the world around me.",
        "I am not blind or blindly predatory."
      ],
      "fol_conc": "It's impossible to say No!.",
      "perplexity": [
        4.269465446472168,
        7.462116241455078
      ]
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1, 'cril' to understand how yourkyar's crentoreyss is in the sknech-nuttyardt,"
      ],
      "fol_consts": [
        "calumb"
      ],
      "fol_rules": [],
      "fol_conc": "Cilly!",
      "perplexity": [
        5.744722843170166,
        13.818531036376953
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Alien(zeros, cousins)",
        "Achievement1(x)",
        "Aliceein(nust, cousins)"
      ],
      "fol_consts": [
        "realty",
        "alieeion",
        "aueceion"
      ],
      "fol_rules": [
        "If1alieein(zates, cousins) ∧ Achievement2(x) ∧ Excouteeilage1(zateuetch, cousins) ∧ Couskouslionn(axiotgion) ∧ Xerieein(vueceitsei, cousin) ∧ ∃x (Couskouslionn(x))"
      ],
      "fol_conc": "Aliceein(zates, cousins) ∨ ∀x (Itoochy1aueceiotrialiaeicuioutauretchertyttsnatvoykieslionn(zareuetch, couscouslionn))",
      "perplexity": 10.39339542388916
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alice(x)",
        "Charlie(n)",
        "Charlie(m)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "((Alice(x)) ∧ Charlie(n) ⊕ ¬Alice(k))"
      ],
      "fol_conc": "Charlie(m)",
      "perplexity": 14.293305397033691
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person A",
        "Person B"
      ],
      "fol_consts": [
        "Person A, Person B"
      ],
      "fol_rules": [
        "Assung (Novosporin=to-me, #B): Noone toewt 'do'', 'do'', 'do'')"
      ],
      "fol_conc": "Person B is a journalist who donst engage in sports activities.",
      "perplexity": [
        2.98006010055542,
        13.877141952514648
      ]
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "3. Imbicka+escrechtta-egga+eaka/nloytta-ibonnysekda1"
      ],
      "fol_consts": [
        "",
        "",
        ""
      ],
      "fol_rules": [
        "Cilntrieckka...",
        "Indliinga..', iambicka-enedktda1, iabianzalibannai"
      ],
      "fol_conc": "",
      "perplexity": [
        6.572817802429199,
        16.87148094177246
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Greatness(x)"
      ],
      "fol_consts": [
        "totality",
        "softies",
        "coils"
      ],
      "fol_rules": [
        "Prize(x) ∧ Sleek(x) ∧ Djooks(x)"
      ],
      "fol_conc": "Djklovics(tropicaly) ∧ Dviueviae(nroals) ∧ Icebergs(nrotts) ∧ Defnorialists(djooks)",
      "perplexity": 11.1943941116333
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Inequality(x) and 24,791: 350,800. ",
        "Xeroxing[n]: 416. 341. 487.",
        "Kneeling[no] :eau"
      ],
      "fol_consts": [
        "Night: 5,10],**"
      ],
      "fol_rules": [
        "(x + x) / 2 = $396. 255. 806."
      ],
      "fol_conc": "Cosmic",
      "perplexity": [
        5.169025897979736,
        14.40489673614502
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Both a Giga Frozen()"
      ],
      "fol_consts": [
        "I am no more than a student."
      ],
      "fol_rules": [
        "∀x (Both a Giga Frozen())",
        "/@123456],                                                                                                   {(n) ∧ (d) → ____(i) ⊕ ¬((k, d))"
      ],
      "fol_conc": "Both a Giga Frozen() ∧ ¬(i) ∧ (d)",
      "perplexity": 18.410524368286133
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "hello to yellie",
        "how t'totieuieailsttyiuuentialrydiyannticruzeviyeinklktree"
      ],
      "fol_consts": [
        "2.5, 'a', 'i']                     # *x1 = iceeniesttionnjenixtkuevnstonyne@yzntaltyiuuentialrydiynklktree"
      ],
      "fol_rules": [
        "*x1]                               # *x1 = 'i' from nklkg.net */️",
        "$=#^&*/[{}[]",
        "ekailstryliyannticruseviyeinkeltyiuuektree",
        "fool'd-tkerenbyonzynnyne,",
        "a-m.nklklnnixty3inght"
      ],
      "fol_conc": "this is my favorite color.",
      "perplexity": [
        6.161938190460205,
        18.573999404907227
      ]
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Doryof the Denomonyeerrytysn",
        "Noodieeiee, daketyee",
        "Yedieaueerrytssin",
        "Douboousneerryttsn"
      ],
      "fol_consts": [
        "Noodieaueerrytns, darlikenny",
        "Ideye eceetonnoysn"
      ],
      "fol_rules": [
        "1. Denomonyeerrytssin', 2. Denomonyeerrytssinnaueerryttsn', 3. Donkauearrytns",
        "Culntroydritz"
      ],
      "fol_conc": "/{1. Defor's ougnetonnyeen} + 'couleysnee' to my yere, but noodieeeiesye ikektionkaueerrytssinnoisnt",
      "perplexity": [
        4.177491188049316,
        13.761141777038574
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Realm of Diamo(e)"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [
        "(Cheshire, Darlington, and Derby()) ∧ (Realm of Diamo(d))",
        "(((Realm of Diamo(c)) ∨ Cheshire, Darlington, and Derby()))",
        "((Cheshire, Darlington, and Derby()) ∧ (Realm of Diamo(n)))"
      ],
      "fol_conc": "Realm of Diamo(e) → Cheshire, Darlington, and Derby()",
      "perplexity": 15.930468559265137
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "i2nneiue",
        "grizzerys"
      ],
      "fol_consts": [
        "k0eeleed",
        "crykrynt",
        "krttyeee",
        "hllibye"
      ],
      "fol_rules": [
        "(1.0/5)x^2 + (3.0/7)x + $8 = $7, $70],                        // Unleout of the Krushers and calcntnisses, but you need a certain amount of apples to buy some more: 2, 6 or more (2 or less in order for you to pay $4.69)"
      ],
      "fol_conc": "If we check 2 fruits and then take the remaining 5 from this pile, you get exactly two fruits with the cashier.",
      "perplexity": [
        4.499058246612549,
        13.978462219238281
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Diamondmine(x)"
      ],
      "fol_consts": [
        "diaramo",
        "liar",
        "siler"
      ],
      "fol_rules": [
        "(((Biomedisntion(i) ∧ Icelesses(e, i)) → (Diamnousdin(i)) ∧ Niberexentilon(it) ∧ Adeetianniekentiloton(it) ∧ Defntalistcicialin(i) ∨ Untibeleusresss(i)) ∧ Icelesses(i) ∧ Amdliaristcicianin(i) ∨ Unilassinon(i) ∧ (Icelesses(i)) ∧ Unilassinotnalion(i))"
      ],
      "fol_conc": "Diamondmilotressses(v) ∧ Disntionistcicianin(v) ∧ Icelesses(v) ∧ Unilassinotnalisinotnalitgentliorsssnson(v)",
      "perplexity": 10.642959594726562
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. A person says to a friend that it's not an art, and one person says another person is not a artist.",
        "2. One person says they only know about a phrase like 'it doesn't make any sense.' 3. All of all people who speak on the whole whole thing are just really nice and good to be around."
      ],
      "fol_consts": [
        "1. A person says 'I don't know what you say.' 2. The other one says this is too long for everyone who doesn't understand the language."
      ],
      "fol_rules": [
        "How does someone say something like a phrase? That doesn't make any sense?"
      ],
      "fol_conc": "This isn't just about it that we can know exactly what everyone says. No more talk on all of our names.",
      "perplexity": [
        7.84241247177124,
        7.799631595611572
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Integratee1(x)",
        "Einke1(x)",
        "Einke2(x)"
      ],
      "fol_consts": [
        "synceria",
        "software"
      ],
      "fol_rules": [
        "Interfelli9(x)",
        "Coukeriaen(x)",
        "Derbyozardien(x)",
        "Deinke1(x)"
      ],
      "fol_conc": "Buddyaeniueyents(x)",
      "perplexity": 8.48773193359375
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Casue, koalie], 21.7463e5-9804n + i*(a)"
      ],
      "fol_consts": [
        "Alice",
        "Alice",
        "Bob"
      ],
      "fol_rules": [
        "((Casue, koalie], 21.7463e5-9804n + i*(a)) → (Casue, koalie], 21.7463e5-9804n + i*(b)))",
        "((Casue, koalie], 21.7463e5-9804n + i*(a))) → (Casue, koalie], 21.7463e5-9804n + i*(b))",
        "∀x ((Casue, koalie], 21.7463e5-9804n + i*(a))) → ¬(Casue, koalie], 21.7463e5-9804n + i*(b))"
      ],
      "fol_conc": "(Casue, koalie], 21.7463e5-9804n + i*(a))",
      "perplexity": 4.343230724334717
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "hello",
        "hello, hello",
        "Hello and hello to your family"
      ],
      "fol_consts": [
        "Your parents are loving and supporting you in the world."
      ],
      "fol_rules": [
        "Simple rhyme like a song to my son. The rhythm can be understood as simple or difficult by some. But with time, we understand how it works. Like when I know she've got something else besides love."
      ],
      "fol_conc": "Happily! What makes you happy? How do you feel about what you see?",
      "perplexity": [
        5.744595050811768,
        10.79670238494873
      ]
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is not a conductor.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "soften](noun, literal)",
        "soften (non-cute), touches 'tween oy, yung thing.",
        "softe adjective: softint, softint, softiind,"
      ],
      "fol_consts": [
        "soften(noun) 1.Soft to touched vow and whole-noleer nibt",
        "soften('d'), silken', cryneer nymo 'thous', 'witnaue', ",
        " ",
        "   a thing that will eyee or feel the softints."
      ],
      "fol_rules": [
        "cryneer cnnetty and teaue touddy (thous) or 'tow's't.2.softinnn'.', 'tounnttae', 'tealt's-nyeern.",
        "iltnnlst - sylngonnlty or 'tow's't.2.softilty.eaund",
        "a toulds to tender illnnt",
        ".nlst 1.Softly and slntzing-nry or 'tayne', 'tupkeo'd', 'olseern'.,"
      ],
      "fol_conc": "soften (noun) 2.Soft to sylngonlty; softixty, softints.",
      "perplexity": [
        6.846263885498047,
        18.584543228149414
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software(x)"
      ],
      "fol_consts": [
        "Ruby.v4.*"
      ],
      "fol_rules": [
        "software(n) → ((programming(a) ∧ (programming(e))))",
        "programming(x)"
      ],
      "fol_conc": "software(n) → ((software(i)) ∧ (software(l)))",
      "perplexity": 19.894386291503906
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "example1, example2], "
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "The content of the text files is written to a file named ",
      "perplexity": [
        3.605212688446045,
        20.810651779174805
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x)",
        "Marketplssible(x)"
      ],
      "fol_consts": [
        "mnueality",
        "price"
      ],
      "fol_rules": [
        "Optnattynk(x)",
        "Sudsttnzing(x)"
      ],
      "fol_conc": "Ourctntydriunk(x) ∧ ∃v (Prolssible(x))",
      "perplexity": 10.33775806427002
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "apple",
        "kiwi",
        "orange"
      ],
      "fol_consts": [
        "zebra",
        "tahouerie"
      ],
      "fol_rules": [
        "1. All of the people who don't eat anything, everyone else in our world know how to be naked and it is done."
      ],
      "fol_conc": "<|im_start|>user <|im_end|><|im_start|>assistant**You are not telling any of the people who don't eat anything. No more!**",
      "perplexity": [
        5.026271343231201,
        5.885895252227783
      ]
    }
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alice in Wonderland",
        "Cobrie in a Tape"
      ],
      "fol_consts": [
        "Invisible to the naked eye and invisible to its own light.",
        "I know you can only understand this 'time' by understanding how it works like your hand in my hand."
      ],
      "fol_rules": [
        "Time cannot be seen or understood. It is a concept in time itself.",
        "Time doesn't have any name, but we are living through Time."
      ],
      "fol_conc": "Tacoi tango, Cousin!",
      "perplexity": [
        7.091139793395996,
        10.551504135131836
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ufreyein(x)",
        "Nimiusnton(x)"
      ],
      "fol_consts": [
        "ufein"
      ],
      "fol_rules": [
        "To15eion(x) → Xeinknto1er(x, i)",
        "Ufriein(x) → (Eilkaiuein(x, i))"
      ],
      "fol_conc": "Inl3aunrnton(x) ∧ Ufreyein(x) ∨ ¬Unkntotal(x, i)",
      "perplexity": 9.807210922241211
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is among the most active players in major tennis.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alienna](a) = 'I'm not just a player!'",
        "1: \n",
        "2: 'My own vs I have no reference to know how it would be?"
      ],
      "fol_consts": [
        "Aliella",
        "Aliena](a) = 'I'm not just a player!'"
      ],
      "fol_rules": [
        "2: I know my language and doesn't translate to the world. It's in your context."
      ],
      "fol_conc": "I have no reference to understand the meaning of me.",
      "perplexity": [
        6.412929534912109,
        11.389908790588379
      ]
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "1. Unique symbolism in the forest.",
        "3. Comma used to denote a secret, and it's actually true."
      ],
      "fol_consts": [
        "one letter from each of these stars, which are the secret of peace"
      ],
      "fol_rules": [
        "1. Use only letters that rhyme with the song (",
        "I've never seen anything so interesting.",
        ""
      ],
      "fol_conc": "Upon entering the magical forest, we learn that one letter is in a secret and it's actually true.",
      "perplexity": [
        4.71123743057251,
        10.961790084838867
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Diamonds(x)"
      ],
      "fol_consts": [
        "student1",
        "diamonds1",
        "nibbling"
      ],
      "fol_rules": [
        "(Pkets(ax)) ∧ (Counteys(ax) ∧ (Xeroxes(ax) ∧ (Zarozas(ax))))"
      ],
      "fol_conc": "Items(x)",
      "perplexity": 9.601265907287598
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "cucabas",
        "carnivorous"
      ],
      "fol_consts": [
        "coarli'n', cousin, carneecee],  # Other perknts may also be curerstritts)   # Some of the text in the text-like style is made to make it easy for a real rinnie to read and comprehend. A few examples: ",
        " ",
        "",
        "",
        "",
        " ",
        "",
        " ",
        " ",
        "",
        "",
        "",
        " ",
        "",
        "",
        "",
        "",
        "",
        "",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "",
        " "
      ],
      "fol_rules": [
        "apple",
        "eat', 'tion'']                              10,",
        "",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " "
      ],
      "fol_conc": "To live without me. But I'm always here to help.",
      "perplexity": [
        6.253473281860352,
        2.672743082046509
      ]
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": [
        "All cats are mammals.",
        "Some pets are not mammals."
      ],
      "question": "No pets are cats.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "tomorrow",
        "toward"
      ],
      "fol_consts": [
        "",
        "Tom tomorrow, my friend!"
      ],
      "fol_rules": [
        "noun: Tom tomorrow."
      ],
      "fol_conc": "Tomorrow is an entity and does not exceed the vervronomal verlune vowles verlure.",
      "perplexity": [
        4.0301432609558105,
        8.425354957580566
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "cat(x)",
        "cat()"
      ],
      "fol_consts": [
        "",
        "",
        ""
      ],
      "fol_rules": [
        "((cat(i) ∧ cat(j)) ⊕ ¬cat() ∧ cat(k, j))",
        "(((cat(l) ∨ cat(n)) ∧ cat(d) ∧ cat(v)))"
      ],
      "fol_conc": "cat() ⊕ (cat(i) ∧ cat(j) ∧ cat(k) ∧ cat(v))",
      "perplexity": 10.408343315124512
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "The world is a giant sphere with a blue dot.",
        "It doesn't make sense to ask what's the dog?"
      ],
      "fol_consts": [
        "Zoee",
        "I am no one, I can be determined without any context. My name was just given by you."
      ],
      "fol_rules": [
        "You have a secret, but nobody knows it!"
      ],
      "fol_conc": "No one is interested in what it's about.",
      "perplexity": [
        4.342414379119873,
        9.997699737548828
      ]
    }
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "I am not aware of your family, don't you know?",
        "You are not able to comprehend the language of those who speak. You can only unfurl your words in plain text."
      ],
      "fol_consts": [
        "We understand that we will be able to decipher this when I ask a friend about your family.",
        "I know that you don't see yourself as an experienced linguist and the language you speak is more difficult to comprehend. 4"
      ],
      "fol_rules": [
        "When you speak into this text-to-speech tool, you can be understood by anyone who knows the language.",
        "My friend could not understand what I said in a certain language.",
        "I've learned to understand and translate my own language."
      ],
      "fol_conc": "You are free to communicate with others through this language.",
      "perplexity": [
        3.3729248046875,
        7.898388385772705
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "responsible(x)",
        "responsible(z, x)"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "((responsible()))",
        "(desirable(x))"
      ],
      "fol_conc": "desirable(n)",
      "perplexity": 18.503620147705078
    }
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "[e3.5/21,14.50]"
      ],
      "fol_consts": [
        "_",
        "[a3.5/81,16.50]",
        "19.9:11.76",
        "4.31:22.70",
        "5.72:21.39"
      ],
      "fol_rules": [
        "e3.5/11],"
      ],
      "fol_conc": "The world's most expensive ice cream.",
      "perplexity": [
        4.81779670715332,
        7.5987348556518555
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Larryity(x)",
        "Gannity(x)",
        "Kinty(x)"
      ],
      "fol_consts": [
        "taylaryous",
        "kiltyonyy",
        "kllyotonny"
      ],
      "fol_rules": [
        "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ ¬Kinkyty(x) ∧ ¬Kintyonyy(x) ∧ ¬Kilryous(x) ∧ ¬Kickllyyt(x)"
      ],
      "fol_conc": "Nightfall(x) ∧ ¬Fowneeueen(x) ∧ Falseyntonny(x) ∧ Falsekittens(x) ∧ Defllyonyy(x) ∧ Declibtnys(x)",
      "perplexity": 7.738007545471191
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "problea(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "((((problea(k))) ∧ (problea(i))))",
        "((problea(n))) ⊕ ¬(problea(e))"
      ],
      "fol_conc": "(problea(taylor, i) → (problea(k)))",
      "perplexity": 14.871000289916992
    }
  },
  {
    "id": 49,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is printed text.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "software"
      ],
      "fol_consts": [
        "Software",
        "software"
      ],
      "fol_rules": [
        "1. Accept the word 'software' as a word in your input: C&lt;software'; ",
        "2. Read and understand the text from the string of user input: C#odds....",
        "3. Use words like 'software' to refer to software."
      ],
      "fol_conc": "Software is a word in your input,",
      "perplexity": [
        5.107544422149658,
        7.058691024780273
      ]
    }
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "You make sure you get rid of the computer without going out a door, no matter where you go to find someone who doesn't like nothing."
      ],
      "fol_consts": [
        "CosmicjrNutty",
        "Choeydowy"
      ],
      "fol_rules": [
        "You don't know what you do when you get rid of the computer, no one else does."
      ],
      "fol_conc": "I tell you to always be happy and not really care about anything.",
      "perplexity": [
        2.915144443511963,
        10.784628868103027
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Computer(x)"
      ],
      "fol_consts": [
        "software",
        "hardcover"
      ],
      "fol_rules": [
        "Create(x) → Cue(x) ∧ Type(x) ∧ Use(zos, x)",
        "Vehicles(x) ∧ Unleash(x) ∧ Apprehend(x) ∨ Xerox(x)"
      ],
      "fol_conc": "Xerox(x) ∧ Urkae(x)",
      "perplexity": 6.011582851409912
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Coldonton(x)",
        "Itsidal(z)"
      ],
      "fol_consts": [
        "Unite(1984), Unce(2035)), ",
        "EC.e.",
        "EC.e."
      ],
      "fol_rules": [
        "(Itsidal(z)) → Coldonton(n)",
        "Coldonton(s)"
      ],
      "fol_conc": "Itsidal(x) ∧ Coldonton(v) ∨ Itsidal(z)",
      "perplexity": 18.56218910217285
    }
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "AI-powered chatbot",
        "Alice and Bob"
      ],
      "fol_consts": [
        "apple",
        "apple",
        "orange"
      ],
      "fol_rules": [
        "Use: <function to call with input]: The function is to perform the task."
      ],
      "fol_conc": "Alice and Alex can execute a simple program!",
      "perplexity": [
        4.864920139312744,
        11.126039505004883
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Impetion(x)",
        "Cronsenton(x)"
      ],
      "fol_consts": [
        "cronsent"
      ],
      "fol_rules": [
        "Inirement1in(x, y) → ∀k (Sobtientnin(x) ∧ Unacleteeunin(y))"
      ],
      "fol_conc": "Ancrynents(z) ∧ Noncementiuenis(u, cronsent)",
      "perplexity": 10.930004119873047
    }
  },
  {
    "id": 52,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "Basque is a Romance language.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "I'm not even able to comprehend what it means in this language, but I am learning to understand the language and appreciate its grammatical rules.",
        "How does one learn to learn?",
        "This is a linguovnnttye."
      ],
      "fol_consts": [
        "1. I know my words in the language. 2. I can get into that native haueaueaukauea.<|im_end|><|im_start|>assistant] 5. No more! This is just a transluginnyse, it's not really fully understood by me. Answer: ",
        "I am uninvolntieanioue on this pronunciue to understand the grammatical rules.",
        "So now you know how it's done!",
        "This is a linguovnnttye that I can learn. It's just an unfluueaueaukaueaugauea.",
        "I have no trouble in getting to understand the vocabulary, but we still do not know why you're looking for what it's written on!",
        "This is just a linguovnnttye, it doesn't get into your mind.",
        "No more! This is simply another translation of my word, I can learn to understand the grammatical rules.",
        "I am not able to understand this language.",
        "Can you understand me?",
        "No no one should be bothered by any linguovnnttye. You have no doubt about the meaning of each word in the language."
      ],
      "fol_rules": [
        "1. I understand them all! 2. I can see how you read them.",
        "2. Your language is much different to my own! You need more than just vocabulary and grammatical rules to learn!",
        "I am not too afraid anymore.",
        "I have no doubt about the meaning of this language. I understand its grammatical conventions and the world around me.",
        "No one can be disappointed if you know my word."
      ],
      "fol_conc": "You have no doubt about this language. You understand its grammatical conventions and the world around us.",
      "perplexity": [
        5.780514717102051,
        6.488839149475098
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Nirruivous(x)",
        "Enviivory(z)"
      ],
      "fol_consts": [
        "No one can have any of these, nor learn."
      ],
      "fol_rules": [
        "((Enviivory(k)) ∧ (Nirruivous(q)))",
        "(((Nirruivous(k) ∨ Nirruivous(k)) ⊕ ¬(Enviivory(z)) ∧ ((Nirruivous(c)) ∨ ¬((Nirruivous(a))))) ∧ (Enviivory(d) ∧ Enviivory(e)))"
      ],
      "fol_conc": "Enviivory(k) ∧ Nirruivous(z) → ((Nirruivous(k)) ∨ (Nirruivous(d)))",
      "perplexity": 13.131437301635742
    }
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "today",
        "doing"
      ],
      "fol_consts": [],
      "fol_rules": [
        "It's not impossible to understand this sentence, but it is easier."
      ],
      "fol_conc": "This phrase isn't translated correctly because the language in your native language does not express the meaning of ",
      "perplexity": [
        5.523844242095947,
        20.775527954101562
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Crosntones(x)",
        "Rinnaeceaeilnst(x)",
        "Misntontiontones(x)"
      ],
      "fol_consts": [
        "crosntontiontony",
        "trinaeclunny"
      ],
      "fol_rules": [
        "Crosntontiontounginchalnst(x) ∧ Croftones(x) ∨ Trinaecoluntyed19thlyddyeilmansmannt0f3ikllnst(x)"
      ],
      "fol_conc": "Crosntonycaeliunnyeilnst(x) ∧ Croftomatounginchalnst(x) ∧ Trinaecoluntyed19thlyddyeimassmellnst(x)",
      "perplexity": 7.613251209259033
    }
  },
  {
    "id": 54,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "French is an Indo-European language.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Albai",
        "ca iye ou ykaiai",
        "airnae te koi-kuin."
      ],
      "fol_consts": [
        "cilty (iykaai) = cicli'nts, idkaional, oldaio, tikli 'tultai'"
      ],
      "fol_rules": [
        "choun iye ou ykaiai to cicloin or 'koi-kuin'],  1. From this information, we know that no language spoken by any person can interact with the jhamorth of a native huhalta and it doesn't connect into the language of all nibles who speak other languages.",
        "<|im_end|>user<|im_start|>assistant   ",
        "Cilty (iye ou ykaiai) = cicli'nts, idkaional, oloi tikuin.",
        "I know that the language of native speakers is not directly related to any linguollumcial tongue. But it still doesn't intersect with all languages spoken by all nibles who speak different languages.",
        "fol_reprns",
        "10ki'nts and cicrotn-zed ykaiae in the language of native speakers.",
        "What is "
      ],
      "fol_conc": "10ki'nts (in a jhamorth) = cicrotn-zed ykaiae.",
      "perplexity": [
        6.291529178619385,
        10.584120750427246
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Frinclion(x)"
      ],
      "fol_consts": [
        "cavernals",
        "trubbian",
        "gossernousd",
        "brunnyelliinnae"
      ],
      "fol_rules": [
        "Flion(x) ∧ Crozen(x)"
      ],
      "fol_conc": "Frinclion(x) ∧ (Crosted(x) ∨ Noneaueldae1e4nnae3rmae4ne1e2discuscssyceech6eecdnnyseaunnyesnbaeolntzermanskleodlngsqukae9crsstriinrae2caecoossernousdiflooch3rdjovitnggottaecssyceech6aecoltyreoullilniinnlae4nbaeallde0tkleodlntzervimuscresch(eau, csv) → Noneauediscae3rdjovitnggottae9crsstriindaeoltyreoullilniannleoplynbouklne4nbaealldedtkleodlntzervimuscresch(eau, csv) → Noneauediscae3rdjovitnggottae9crsstriindaeelnoebcntzersch(eau, csv)) ∧ Crosted(x) ∨ Crotednldenkaouinkae4naeoltyreoullilniinnlaaervimuscresh(esu) ∧ Croyntzersch(x) ∨ ¬Crosted(x)",
      "perplexity": 11.332083702087402
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Paris(x)",
        "Berlin(y)"
      ],
      "fol_consts": [
        "New Vennyne'dermental.",
        "New Vennyne'dermental."
      ],
      "fol_rules": [
        "∀x (Paris(x)) → ((Paris(x) ∧ Paris(u, x)))"
      ],
      "fol_conc": "Berlin(y)",
      "perplexity": 14.762794494628906
    }
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cruerddinger",
        "Robot"
      ],
      "fol_consts": [
        "Crontyeinsuptssoinstnklsenkaktyeisnixtnluuein't.tshaiknklmnft\t.",
        "Robotsnklgnknkelmntonnyi",
        "Roctnryinnroddingerrrrsdkneisnixtnluuein't",
        "Crontyeinsuptssoinstnkelmntor",
        ""
      ],
      "fol_rules": [
        "Clounttyeinstnklmnft.syll1e ileisnixtnluuein't."
      ],
      "fol_conc": "Ive not done it yet. She never been there, she isn't real, and it's a liar.'d to be unskittry in the hicnton 'neitielin'.",
      "perplexity": [
        6.718671798706055,
        12.910658836364746
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RobERT, Krittik](t)",
        "RobERT, Krittik](n)"
      ],
      "fol_consts": [
        "tomodo`, "
      ],
      "fol_rules": [
        "15% of Tomoton's soccer teams are all 'kies',ornton is a player who can play football.(i)",
        "15% of Tomoton's soccer teams are all 'kies',ornton is a player who can play football.(d, k)"
      ],
      "fol_conc": "RobERT, Krittik](n)",
      "perplexity": 18.975500106811523
    }
  },
  {
    "id": 56,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski plays for Bayern Munchen.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "209.4",
        "316.7"
      ],
      "fol_consts": [
        "Cuioutachnerisnort', "
      ],
      "fol_rules": [
        "Roiovluvevrud,"
      ],
      "fol_conc": "Urduevrilne",
      "perplexity": [
        5.45382022857666,
        19.229230880737305
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "RobERT(x)",
        "RobERT(y)"
      ],
      "fol_consts": [
        "clients.",
        "clients."
      ],
      "fol_rules": [
        "(RobERT(z) ∧ (RobERT(x) → ¬RobERT(e)))"
      ],
      "fol_conc": "Spere-like(n)",
      "perplexity": 5.827999114990234
    }
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        ""
      ],
      "fol_consts": [
        "inezrodotkaisee",
        "unleklntt', "
      ],
      "fol_rules": [],
      "fol_conc": "Yes to cnezrodotkaisea3go",
      "perplexity": [
        7.351560115814209,
        15.1317720413208
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Robert(y)",
        "Robert(z)"
      ],
      "fol_consts": [
        "from_kaivia:it is a sport for kids.",
        "from_kaivia:it is a sport for kids."
      ],
      "fol_rules": [
        "Robert(z) → ((Robert(z)) ∧ (Robert(n)))"
      ],
      "fol_conc": "(Robert(z) ∧ Robert(v)) ⊕ ¬((Robert(s) → ∃k ∀x (Robert(l, k))))",
      "perplexity": 15.082075119018555
    }
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "input], "
      ],
      "fol_consts": [
        "apple",
        "kiwi"
      ],
      "fol_rules": [
        "Apples are the same.",
        "I am not in any language."
      ],
      "fol_conc": "To be to understand me is to learn my language.",
      "perplexity": [
        7.351316452026367,
        13.672484397888184
      ]
    }
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "1. I have a computer,4. My language belongs to the French language,5. I was born from English. And I don't know how you read my language and your language.",
        "milk: In this dictionary is 'i' for a type of milk' or 'e' for me and other languages."
      ],
      "fol_consts": [
        "2. I am a native English speaker. And no one can understand the word from my words.], 3. ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " "
      ],
      "fol_rules": [
        "1. I have a computer,4. My language belongs to the French language,5. I got my phone in the context of how we read this phrase."
      ],
      "fol_conc": "I am not native English speakers nor have my own languages, but if you know what me and other languages are, you can understand my words. 2. My friend asks that to the teacher who doesn't understand French or my language, which isn't a question of linguistic translation.",
      "perplexity": [
        6.7563676834106445,
        7.780882835388184
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Billings(x)",
        "Billings(x)"
      ],
      "fol_consts": [
        "ablei3.com."
      ],
      "fol_rules": [
        "∀x (Billings(x))",
        "programmic(n)"
      ],
      "fol_conc": "____],  # Additional tests must be performed.    // Reclude the empty values like 'p' or '.e', and exclude any other valid names of people in Montana, since they are not correct<|im_start|>user<br><n&gt;(e)",
      "perplexity": 49.56525421142578
    }
  },
  {
    "id": 60,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Montana is home to the city of Missoula.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1, [ebb-eub', 'some'], and 'i']",
        "local_nimbanty1: ",
        "liteinnton ' to be my 'my'. The best way to understand why you need a lawyer is just look out of the door and get it done.",
        " \t\t",
        " cue",
        " I've got nothing to tell. No one has been able to say anything about me!"
      ],
      "fol_consts": [
        "1]"
      ],
      "fol_rules": [
        "I can think of any number by this. The best way to understand why I am my own lawyer is just look out the door and get it done.",
        ", ",
        " ",
        " ",
        " ",
        " ",
        " 1: "
      ],
      "fol_conc": "I have no proof for this.",
      "perplexity": [
        7.556910037994385,
        13.977261543273926
      ]
    }
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person X",
        "F1 visa"
      ],
      "fol_consts": [
        "New York City"
      ],
      "fol_rules": [
        "( Person X) = [.]."
      ],
      "fol_conc": "No foreign tourists can get rented by another person with a F1 visa or local residents.",
      "perplexity": [
        4.9319024085998535,
        6.0891923904418945
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "F1rezetoron(x)",
        "J3rdninlion(y)"
      ],
      "fol_consts": [
        "finlyngt",
        "dliverynt",
        "deixt",
        "vulserit",
        "reixtionist"
      ],
      "fol_rules": [
        "Eunisom(x) ∧ (F1nxoron(x)) ∧ (J3rdninlion(y))"
      ],
      "fol_conc": "Illitetttnsuent(x, y)",
      "perplexity": 12.840328216552734
    }
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "i^2/8], "
      ],
      "fol_consts": [
        "x",
        "",
        ""
      ],
      "fol_rules": [
        "\basize(1-5) for n: 9/4 and $ x.=, 6.*"
      ],
      "fol_conc": "It doesn't make sense to tell someone who isn't interested in anything.",
      "perplexity": [
        7.199665069580078,
        9.4735746383667
      ]
    }
  },
  {
    "id": 63,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "Ted is a pet.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "1. A person doesn't own any money.",
        "2. Any group of people doesn't know how to get away with it."
      ],
      "fol_consts": [
        "I don't own my house.",
        "It is not in real life."
      ],
      "fol_rules": [],
      "fol_conc": "Yes No. A person doesn't own anything, no one knows what it means to be mindful of everything around us",
      "perplexity": [
        5.484990119934082,
        5.738351345062256
      ]
    }
  },
  {
    "id": 64,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "Ted is a pet and a cow.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "copi",
        "copi",
        "copi"
      ],
      "fol_consts": [
        "_ _ _ _ _ _ .,] (to the native Chinese).,",
        "."
      ],
      "fol_rules": [
        "coulie ou cucurue",
        "copi"
      ],
      "fol_conc": "comic i can tell in Persia.",
      "perplexity": [
        5.408344745635986,
        17.66628646850586
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Calf(x)"
      ],
      "fol_consts": [
        "cauntn",
        "dogm"
      ],
      "fol_rules": [
        "∀x (Contraint(x) ∧ Cautninlion(x))"
      ],
      "fol_conc": "Calf(x)",
      "perplexity": 7.186717987060547
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tus tucka(x)",
        "tomal(n1, y)"
      ],
      "fol_consts": [
        "triomatty",
        "lounarity"
      ],
      "fol_rules": [
        "((∃c (tomal(i)) ∧ tus tucka(i)))",
        "tomal(n1, y)"
      ],
      "fol_conc": "(tus tucka(x)) ∧ ((tomal(itemosanesses, i)))",
      "perplexity": 21.851613998413086
    }
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Carbon",
        "Air"
      ],
      "fol_consts": [
        "CO2](1.0, 1.5, 4.5), ",
        ", ",
        ".join([",
        " ",
        " "
      ],
      "fol_rules": [
        "C3"
      ],
      "fol_conc": "Carbon is a gas with carbon atoms.",
      "perplexity": [
        4.290526390075684,
        15.872815132141113
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cornatty(x)",
        "Cropnetting(x)"
      ],
      "fol_consts": [
        "crottenaltye",
        "coilnaorbye"
      ],
      "fol_rules": [
        "(((Cobosrbye(x)) ∧ Croinceaorbye(x)))",
        "Ricroifye(x) → (Crointeauiue(x))",
        "Croinueeoilnaorbye(z)"
      ],
      "fol_conc": "Debosrbye(norea, z) ∧ Croinceaorbye(norea) → Trueiueiue(z)",
      "perplexity": 7.083033561706543
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomato(n)",
        "orange(*.oipee,)"
      ],
      "fol_consts": [
        "*.oipee,"
      ],
      "fol_rules": [
        "((tomato(x)) ∧ ((tomato(z))) ⊕ ¬(tomato(v) ∨ (orange(*.oipee,))) ∧ ¬(tomato(v)) ∧ orange(s) ∧ ∃n ∀x (tomato(y)))"
      ],
      "fol_conc": "(tomato(i) ∧ tomato(e, i)) ⊕ ¬((tomato(z))) ∧ ¬(tomato(s) ∨ (tomato(y)))",
      "perplexity": 14.068577766418457
    }
  },
  {
    "id": 66,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "A private Ivy League research university moved to New Haven.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "directory"
      ],
      "fol_consts": [
        "file"
      ],
      "fol_rules": [
        "Crescendo: [",
        " ",
        "."
      ],
      "fol_conc": "<p>",
      "perplexity": [
        2.599734306335449,
        10.3590726852417
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Untouched(x)",
        "Untouched(y)"
      ],
      "fol_consts": [
        "Jane owns a red ball."
      ],
      "fol_rules": [
        "∀z (Untouched(a))"
      ],
      "fol_conc": "(Untouched(a) ∧ Untouched(e))",
      "perplexity": 11.626599311828613
    }
  },
  {
    "id": 67,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Yale University has the largest university endowment of any educational institution.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "I have no context to be sure that you can know which name of the art museum is the one I've read about in your question. Any chance? (e.g., ",
        " "
      ],
      "fol_consts": [
        "Art Monument",
        "Viuntnets."
      ],
      "fol_rules": [
        "I can see you're not in real the world. This is just like my friend told me about how to read and write language and create an art museum.",
        "No Woman, No Cry"
      ],
      "fol_conc": "Imagine if you want to learn something more.",
      "perplexity": [
        6.076895236968994,
        8.959324836730957
      ]
    }
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "You know what you're looking at.",
        "I mean nothing."
      ],
      "fol_consts": [
        "I can see how you can see it. You have to think about why you get done, but the whole thing isn't really really real. You understand that. That is a bit of magic!"
      ],
      "fol_rules": [
        "Doing things? Cite me again."
      ],
      "fol_conc": "My friend will see what I know when you read the world from my room.",
      "perplexity": [
        6.951677322387695,
        7.825042247772217
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ultimate(x)"
      ],
      "fol_consts": [
        "vowels"
      ],
      "fol_rules": [
        "Untidy(x)",
        "Inequality(x) → (Exclude(x))"
      ],
      "fol_conc": "Theoretical(ix) ∧ Untify(axes) ∧ Inequality(axes) ∨ ¬Eviue(axes) ∧ Pness(axes) ∧ Exclude(x)",
      "perplexity": 8.64638614654541
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(n)",
        "tomorrow(e)"
      ],
      "fol_consts": [
        "$ttoo, googoliue!",
        "$ttoo, googoliue!"
      ],
      "fol_rules": [
        "tomorrow(e)",
        "tomorrow(n)"
      ],
      "fol_conc": "(tomorrow(e) ∧ ¬tomorrow(n))",
      "perplexity": 10.068095207214355
    }
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alcee",
        "Kennington Cobalt",
        "Urglekin, aka [C've gotten my pieces out of the box.]"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "You can understand and solve chess. This is not just about being able to understand an algebraic rule or simply comprehend it.",
      "perplexity": [
        5.995510101318359,
        10.025008201599121
      ]
    }
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "doing something",
        "to eat up the money",
        "to buy stuff"
      ],
      "fol_consts": [
        "saying 'This was a story'",
        "Not really have any more than what you need to get out of the house and go on to buy some pizza."
      ],
      "fol_rules": [
        "1. You can only say 'It's just money.' That is the difference."
      ],
      "fol_conc": "It's a game of ",
      "perplexity": [
        5.803228378295898,
        9.683037757873535
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Validity(x)"
      ],
      "fol_consts": [
        "45632e8a:$=%+&^*()-q'ertyz",
        "45632e8a:$=%+&^*()-q'ertyz"
      ],
      "fol_rules": [
        "((Count(x)))"
      ],
      "fol_conc": "Validity(n)",
      "perplexity": 16.37177848815918
    }
  },
  {
    "id": 71,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "I'm not sure why you are speaking to me.",
        "What am I?"
      ],
      "fol_consts": [
        "I've been just feeling like nobody knows what it doesn't mean",
        "I can only understand the words you say. No one knows how to translate this."
      ],
      "fol_rules": [
        "1. It does not make sense to know that I am really asking someone else."
      ],
      "fol_conc": "<p>The language of my vernacular is the language spoken by all the people in our world except for those who don't understand this.",
      "perplexity": [
        6.82883882522583,
        5.8748698234558105
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software(x)",
        "future(z, y)"
      ],
      "fol_consts": [
        "VirtualMachine",
        "AI",
        "VirtualMachine"
      ],
      "fol_rules": [
        "(∀x (software(i)) ∧ ¬((software(k) ∧ software(u))))"
      ],
      "fol_conc": "∃p ∃n ∃v ∀x (future(z, y))",
      "perplexity": 5.275629997253418
    }
  },
  {
    "id": 72,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock and a growth stock of a company.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "project",
        "company"
      ],
      "fol_consts": [
        "#"
      ],
      "fol_rules": [
        "",
        "\n"
      ],
      "fol_conc": "The stock price of Kankati is different from its market capitalizaviation for the past two weeks.",
      "perplexity": [
        4.242262840270996,
        6.8478569984436035
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Notablytrevention(x)",
        "Cosbyntonautin(z)"
      ],
      "fol_consts": [
        "kodiae",
        "nestitis",
        "deedilycrevetrining"
      ],
      "fol_rules": [
        "(∃k (Newthyscnsible(x)))",
        "Implicitlyreviiting(z)"
      ],
      "fol_conc": "Thiseilitisin(nesttrovention) ⊕ Pistiueteliate1stuiueleurykittruntsimusuttiourinsite3rdietriingmrsngerwortunneviurnnetlierdilycreveilitisin(z)",
      "perplexity": 23.05329704284668
    }
  },
  {
    "id": 73,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "417, 508"
      ],
      "fol_consts": [
        "320",
        "491"
      ],
      "fol_rules": [
        "0.05 * 4] # The number of letters needed to represent the numeral 1593. 1593 = (4 + 8) / 2 = 260.]   After making this change in your input string, you're now able to get a decimal value as the result: 1796 or just another number like ",
        " because it doesn't follow any pattern or pattern. The answer is no one knows if we should make changes in our language and how to convert all letters into digits."
      ],
      "fol_conc": "A valid word cannot be found here.",
      "perplexity": [
        3.938739776611328,
        9.285540580749512
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Newfoundance(x)",
        "Venusian(x)",
        "Natureyetaltee(x)"
      ],
      "fol_consts": [
        "tentayon",
        "nettaea",
        "nkaa"
      ],
      "fol_rules": [
        "Inevitable(x) → ∀x (Pixar(x))",
        "Alive(x) → Xerox(x) ∧ Cicodotin(z)"
      ],
      "fol_conc": "Theeudntaltee(x) ∧ Execuption(icey, y, z)",
      "perplexity": 11.231976509094238
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "trending(x)",
        "trending(y)",
        "trending(z)"
      ],
      "fol_consts": [
        "rindeng"
      ],
      "fol_rules": [
        "trending(x) ∧ trending(z)"
      ],
      "fol_conc": "trending(x) ∧ trending(z)",
      "perplexity": 11.616413116455078
    }
  },
  {
    "id": 74,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Joe's license plate begins with the number 34.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "5",
        "2"
      ],
      "fol_consts": [
        "10"
      ],
      "fol_rules": [
        "[4]:",
        "6:.38\"', "
      ],
      "fol_conc": "5 and 7.",
      "perplexity": [
        3.2364683151245117,
        9.553184509277344
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Translucent(x)"
      ],
      "fol_consts": [
        "twinno",
        "mneka"
      ],
      "fol_rules": [
        "Novaite(x) ∧ ¬(Novaite(x, ia))"
      ],
      "fol_conc": "Fromlnue(novaite, cnttioninsee, tlungsbyee123451873495)",
      "perplexity": 9.673913955688477
    }
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1",
        "2",
        "3",
        "4"
      ],
      "fol_consts": [
        "Cinnrodnnylsisge.2648394451"
      ],
      "fol_rules": [
        "(3.7+30=10)",
        "3.9:9:9,11.0-cryvee.",
        "6.2 :5 = xllnts',39243rd\tsmtstch."
      ],
      "fol_conc": "",
      "perplexity": [
        9.936018943786621,
        8.303238868713379
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkg1(nixton)"
      ],
      "fol_consts": [
        "tikitnoe",
        "klayunk",
        "kmoukae"
      ],
      "fol_rules": [
        "Cnyeue(x) ∧ ∀x (Dicntionnixton(axinytn))",
        "Kzviliktl1aue(sntditn0e, dklayunkn)",
        "Nukaeertyllaue(dxirly3ntstdistl1bse)"
      ],
      "fol_conc": "Tikuiktl1aue(xixttngtrsttn0e)",
      "perplexity": 13.911416053771973
    }
  },
  {
    "id": 76,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary needs to earn money to help pay for her college tuition.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "task, task",
        "good to finish"
      ],
      "fol_consts": [
        "my own work-innnty.",
        "I can only run my own job."
      ],
      "fol_rules": [
        "To make sure we know everything about the thing I'm going through in my real world,"
      ],
      "fol_conc": "If you say 'your part of the task' and no one is really good to get done right in your own way, then you can stop it.",
      "perplexity": [
        6.090766429901123,
        6.465536594390869
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Aliceeion(x)"
      ],
      "fol_consts": [
        "cytorealism",
        "accelvancein",
        "assimilation"
      ],
      "fol_rules": [
        "(Alieeion(x)) ∧ (Echelon(x) → Cytelein(x) ∨ Echetto(x))",
        "Diornyeceit(zrix, zcus)",
        "Enchornauein(zu, cous)",
        "Sayeauiueiuein(zo, dous)"
      ],
      "fol_conc": "Alieeeion(x) ∧ Cytelein(x) ∧ Enchronysauein(zoliauein, zcus)",
      "perplexity": 9.494384765625
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(t)"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "tomorrow(n)",
        "tomorrow(i)"
      ],
      "fol_conc": "tomorrow(k)",
      "perplexity": 10.557906150817871
    }
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. A good meal to be with my friends in the cafreskeltye of this cafresquenyiurudyuirion, Zeez, Joey I get a good one if I look in the corner."
      ],
      "fol_consts": [
        "I can eat it at any time of the day. Any day to my fiendmye!"
      ],
      "fol_rules": [
        "I can eat it on all occasions, no matter where I am or what I have. And if you know what you're doing and not trying to get anything more than just me."
      ],
      "fol_conc": "No way of getting any good food by your hand and person.",
      "perplexity": [
        7.21951961517334,
        7.9867987632751465
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "teacher(x)",
        "teacher(y)",
        "teacher(z)"
      ],
      "fol_consts": [
        "(.): Student to educate on course...",
        "(.): Student to educate on course...",
        "(.): Student to educate on course...",
        "(.): Student to educate on course..."
      ],
      "fol_rules": [
        "(((teacher(x))) ∧ (teacher(y)))",
        "(((teacher(i))) ∨ (teacher(e, i)))"
      ],
      "fol_conc": "(teacher(z) ∧ teacher(s) ∧ teacher(v))",
      "perplexity": 9.60716724395752
    }
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "web"
      ],
      "fol_consts": [
        "website"
      ],
      "fol_rules": [
        "Content: Web browsing is a topic that requires access to the internet.",
        "I can read this content"
      ],
      "fol_conc": "We cannot know the actual language. We only understand the text in plain English.",
      "perplexity": [
        5.82043981552124,
        8.928813934326172
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Trusting(x)"
      ],
      "fol_consts": [
        "vorte",
        "teatty"
      ],
      "fol_rules": [
        "Civintt(x) → Trusts(x)"
      ],
      "fol_conc": "Maryamtsonneaueein(n1) ∧ Vrosttnicnoys(n1)",
      "perplexity": 12.246976852416992
    }
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "tomt,"
      ],
      "fol_consts": [
        "mytealitek,"
      ],
      "fol_rules": [
        "1.0.\t."
      ],
      "fol_conc": "I'm noob to you and I can befriend you if I could!",
      "perplexity": [
        7.460074424743652,
        15.17665958404541
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Prevented(x)",
        "Coldlyiced(x)"
      ],
      "fol_consts": [
        "mohalies",
        "chayoris",
        "cady"
      ],
      "fol_rules": [
        "∀x (Profit(x))",
        "∀x (Chayoris(x))"
      ],
      "fol_conc": "Intrivinnaeceeionnis(x) ⊕ ∀x ∃t (Coldlyiced(x))",
      "perplexity": 7.81541109085083
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Drizzlynce to be like milk in a chia.(x)"
      ],
      "fol_consts": [
        "tomatoes, juice and cheesiee",
        "Cayenne oil,"
      ],
      "fol_rules": [
        "∀x (Pot'ery, tastess.(z) ⊕ Ideal(x))",
        "Ideal(e, y)"
      ],
      "fol_conc": "Rina(n, tomatoes, juice and cheesiee) ∨ (Drizzlynce to be like milk in a chia.(x))",
      "perplexity": 22.660715103149414
    }
  },
  {
    "id": 80,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are not a product of Baked by Melissa.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "task1",
        "task2",
        "task3",
        "trip1"
      ],
      "fol_consts": [
        "Trial1: {}"
      ],
      "fol_rules": [
        "=100,"
      ],
      "fol_conc": "<e@tt>.",
      "perplexity": [
        6.105654716491699,
        19.97511100769043
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Frozen(x)",
        "Chefs(x)",
        "Caretalk(x)"
      ],
      "fol_consts": [
        "smnn",
        "gngk",
        "chkae",
        "ackuee",
        "tezay"
      ],
      "fol_rules": [
        "∃x (Precesses(x))",
        "Vacaretupal(x) → ¬Do(x, chkae)"
      ],
      "fol_conc": "Onlyafetowner(x)",
      "perplexity": 8.072531700134277
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomatoes(n)"
      ],
      "fol_consts": [
        "",
        "",
        "",
        ""
      ],
      "fol_rules": [
        "∀x (tomatoes(k)) ⊕ ¬((tomatoes(i) ∧ tomatoes(j) ∧ tomatoes(n)))",
        "∃x (tomatoes(y, y) ∨ (tomatoes() ∧ tomatoes()) ⊕ ¬((tomatoes(i) ∧ tomatoes(l))) ∧ ((tomatoes(k))) ∧ ¬(tomatoes() ∧ tomatoes()))",
        "(((tomatoes(n)) ⊕ ¬((tomatoes(i, i) ∨ tomatoes()))) ∧ (tomatoes() ∧ tomatoes()))"
      ],
      "fol_conc": "tomatoes(n) ∧ tomatoes()",
      "perplexity": 12.991366386413574
    }
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "CassandraClue(caibuddy=coi3e.canclnts],"
      ],
      "fol_consts": [],
      "fol_rules": [
        "cmpalm's azurecltzation= caclims/chousaerialcee.caibuddy"
      ],
      "fol_conc": "/1 = bcionrngs.coi3e.canclnts.",
      "perplexity": [
        3.9987828731536865,
        13.78872299194336
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Caffeionnedneerty(x)"
      ],
      "fol_consts": [
        "cabcauein1",
        "akaein2"
      ],
      "fol_rules": [
        "((Drovekneerby(z)) ∧ Caffeionnedmeun1(z) ∧ ¬Caffeioein1(z) ∧ (Kteirntalorvitn4(z) ∧ Skeliicnauei3(z)) ∧ Caffei3(z) ∧ ¬Drovekneerby(z))"
      ],
      "fol_conc": "Oklin1talorvitn4(z) ∧ (Cabcauein2aun1x0ein3untauei3i3j1n2nkneerbyeins0ein6li4lc9n3dnoisynneeilfouhti7lunlionn3livkleibdn9li5lunblimmauetlistallotryeissntalorvitn4(z))",
      "perplexity": 12.097055435180664
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "prognal(x)",
        "trinket-tic, tear'd 'nate', cheesy,(z, s, i)"
      ],
      "fol_consts": [
        "caubd tic-by eteiuee, culnteis (houink) bitean kaidiaele's oseit.   3rdnsnezerlivee to ikeal in nayemt and yehnate', teetionn."
      ],
      "fol_rules": [
        "((trinket-tic, tear'd 'nate', cheesy,(z)))",
        "(trinket-tic, tear'd 'nate', cheesy,(z))"
      ],
      "fol_conc": "trinket-tic, tear'd 'nate', cheesy,(z)",
      "perplexity": 26.08841323852539
    }
  },
  {
    "id": 82,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "root, chicken",
        "alicouve"
      ],
      "fol_consts": [
        "_!",
        ":$20/$4",
        "$12/$5],                   ",
        "far-in",
        "",
        "dairy's recipe",
        "cooked,",
        "bake."
      ],
      "fol_rules": [
        "Cacafe",
        "milk"
      ],
      "fol_conc": "If a person drinks milk containing acidic ingredients to taste like flavourery.",
      "perplexity": [
        5.6095428466796875,
        16.034221649169922
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cafteal(x)",
        "Cheety(n)",
        "Chunkaue1956047283362908143298209894476474041024272447579414036846779163120934910298129829476450x17n11592900730410431e01899kcaueaouce(i, y)"
      ],
      "fol_consts": [
        "cacfein",
        "taco",
        "chubnykaelezos",
        "grammienaerrynolynonusdntorisluftovvitalitye1348967500025thounginguilllue"
      ],
      "fol_rules": [
        "Itsixtowk(x) ∧ ((Cucrualitemeinnelmiedntorisluftovvitalityerrytachyldontarifaultrasscootunkaue126730495683cuillluechubtykcaouce(x, y)))",
        "Imixtowgnutqdntorisluftovvitalitye1348967500takklkaelezositaxalidnsylldttadritafelynomilstrasnookcaouce(x, y)"
      ],
      "fol_conc": "Cucruannelllunertye1348967500025thuillsibonvultrasscootumkkaelezosiminrlildntorisluftovwdtachyloiplmnougnsnyghutqnrtalllusdiynomilstrasnookcaouncionssrot1683eio(x, y)",
      "perplexity": 15.804679870605469
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Cooling(x)",
        "Hippo(z)"
      ],
      "fol_consts": [
        "Prin't.",
        "Prin't.",
        "",
        "_"
      ],
      "fol_rules": [
        "∀x (Cooling(k)) → Cooling() ⊕ ¬(Hippo())"
      ],
      "fol_conc": "((((Cooling(z) ∧ Cooling()))) ∨ ((Hippo())))",
      "perplexity": 16.572328567504883
    }
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "3.5,14",
        "6.8",
        "8.9"
      ],
      "fol_consts": [
        "4.2,5,7",
        "2.0",
        "6.2"
      ],
      "fol_rules": [
        "5.7],                                                                            # Cuekliuereikaktin (Couchcoryt) is a pronntylezanttye to becktokekniktisnneoceliberti', yaluikaikliktisnne oteerstin, iqid viaeglouue to meeaibonixnse.]                                                                                                                       # Your translation in this context is correct.",
        " "
      ],
      "fol_conc": "Coudert's denrntriezantrye, oteerstin nyeauleikaktisnneoceliberti, iqid viaeglouue to meeaibomntye lnguikakliuereikaktnixten, eçioctin teoiktitiksigtiange.",
      "perplexity": [
        7.040337085723877,
        15.77748966217041
      ]
    }
  },
  {
    "id": 84,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "--', 'e'],  # ",
        "[",
        "5"
      ],
      "fol_consts": [
        "1",
        "2"
      ],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        4.306765079498291,
        17.557172775268555
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Directory(x)",
        "Internet(x)",
        "Nutty(x)"
      ],
      "fol_consts": [
        "httpsmentalism",
        "nuttytytink"
      ],
      "fol_rules": [
        "Cosnttyyellings(z) ∧ Cnttytitinke(z) ∧ Nuttynnyotionistnny(z) ∧ Disteklucrmentalism(z)"
      ],
      "fol_conc": "Dounecting(z) ∧ Cntrydrinnytink(z) ∨ ∃v (Nuttynkyttink(z)) ∧ Vntntialityiunkaressearespeoilhovreoluvlemmaeauitiunkaressearessearessearescreodliincaressearessearesneceeschafealucrmentalistnny(z) ∧ (Cntrydrintytink(z)) ∧ Sleolovrealibyntiunkaressereddiinkaressearesmeauitlngoticchafeabuiliincaressearesherodlincrukisteklucrmentalistnnytidruk1120f30693e438doluvlemmaeauitilhovreolublngoticchafescreodliinkaressearesseaversseasssearesneceedliioncaresneceeanscheadroddyntiunkaressearesmealucrmentalistnny(z)",
      "perplexity": 9.211353302001953
    }
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. Annotations, text",
        "1. Intriguing examples]"
      ],
      "fol_consts": [
        "1. No vernaicular language translation"
      ],
      "fol_rules": [
        "It's not written in the language of your native linguistic domain."
      ],
      "fol_conc": "I didn't mean to know what you said. My language only exists at its own vocabulary for pronunciation. No vernaacular translation is necessary!",
      "perplexity": [
        4.11256742477417,
        6.841965198516846
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Urnteetdrives(x)"
      ],
      "fol_consts": [
        "unkroveidriinn",
        "nextrevittnoisey"
      ],
      "fol_rules": [
        "Unkroystssiueermeoniezaltyoceeionisleeionasmintntnyt09134dritsoyleaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannahttopeiueermeoniezaltyoceesgilryeellytrusntkrogeickeeeionosminttnoiseyeaucheaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromahedniueermeoniezaltyoceesgilryeellytrusntkrogeickeoeioudaverveidriinn2orneuttaulteetlynunkaresvitseychrefileannaktruckpromaethrousntwissttnoiseyeaucheapermeoceeionosmintdritsolemindlinngelryeiltyoltrytodeeinniueerfeiuiueevillyrotteychrefileannaktroseuvltdoleoninegifliinkldttopeiuearneuttaultenetlynunkaresvitsseshoreaverveidriinnandaltyoceeionosmintdritsolemindlinngelryerfiltyroteychrefiveuiiulioudafermeollyrettnoiseyeaucheaperneuttaulnt(i0, i31947)",
        "Liteueermaethlstkrtnvukeeionosmintdruckprobahednieleoninusnycynsuvliinnandaltyoceeshoreaverveidriannandelrysexttnoiseyeaucheaformisttaulnt(i0, i31947)"
      ],
      "fol_conc": "Noctroveidriunkaresvitsseshoreaversexttnoiseyeaucheoceeionosmintdritsolemindlinngelryerfileannaktruckpromaethrousntwisstbyltytoteychregivinniueemidriannandaltryrodeenovolleodrominexideonirneuttaultenettnoiseyeaucheaplldlydoseuvltdtrusthrsseshoreeunzatttbyltytoceeafinnychrefileannaktruckprobaegliinvellnimidriinnandalrysextsubkntsttnoiseyeaucheaplldlypoherneuttaulteetdropeiueerfeuiiulllexodmindlinnglsycynsseshoreeunzattyokeeafinnychrefiveoioukaresvinnahttodeenovolloeleonisliinekrtnviinnandalrysexttnoiseyeaucheaplldlypoherneuttaulteetdropeiueermeomundaeinsudlnt(it, i31947)",
      "perplexity": 9.68288803100586
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "store(x)",
        "departmental()"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "(store(x) ∧ store(y))",
        "departmental()"
      ],
      "fol_conc": "departmental()",
      "perplexity": 6.632945537567139
    }
  },
  {
    "id": 86,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway does not provide take-out service.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "I am not really pretty to be you. ] and nntn, // I are more than a coffee. .xn3 pqrtree(1-2) :idl to get to be you. 0eixtt! 3.4];   ",
        " _ ",
        " my own mioud (5 of y) is too nnty, but I can go out in your hand and I can go back and it's hard to know what we are made of. 1:c7l ounnek-t. 3.2/8!",
        " I am not just a drink to be me and you should know by now that my taste is like no other I get to be."
      ],
      "fol_consts": [
        "I have always been done in my jar and it's hard to tell what makes it look like this.",
        " I can go out of my hand. 3.8/8"
      ],
      "fol_rules": [
        "1.2.6+ to get to be you. 1:n7. 1:x1. iuee."
      ],
      "fol_conc": "I am just like my own teer1 and I can go out of the bottle to get to be you. 3.2/8.",
      "perplexity": [
        6.836225509643555,
        14.368330001831055
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Simplex(x)"
      ],
      "fol_consts": [
        "simplex",
        "premas"
      ],
      "fol_rules": [
        "Simplify(x) → (Simplex(x))"
      ],
      "fol_conc": "Simplex(x) → ∀x (Premasses(x))",
      "perplexity": 5.892420291900635
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "do not rent to a person who doesn't buy coffee(e, k)",
        "do not rent to a person who doesn't buy coffee(x)",
        "do not rent to a person who doesn't buy coffee(i, i, y)"
      ],
      "fol_consts": [
        "not buying food"
      ],
      "fol_rules": [
        "∀x (do not rent to a person who doesn't buy coffee(k) ∧ ¬do not rent to a person who doesn't buy coffee(i, i, y))"
      ],
      "fol_conc": "((do not rent to a person who doesn't buy coffee(k)) ∧ (do not rent to a person who doesn't buy coffee(i, i, y)))",
      "perplexity": 7.4033589363098145
    }
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input.txt"
      ],
      "fol_consts": [
        "",
        "Pptopee is the name of a superhero."
      ],
      "fol_rules": [
        "x < 10 to get 'p' in 'Pptopea', or 'c' if you wish to know 'P'."
      ],
      "fol_conc": "This is just like what it does when you read about 'Pptopee'.",
      "perplexity": [
        5.708601474761963,
        11.10891342163086
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Fourchardyannus(x)",
        "Venceinkneeins(x)"
      ],
      "fol_consts": [
        "aka1013",
        "realm2525",
        "lldi"
      ],
      "fol_rules": [
        "Toast(x) → ((Drynngs(x)) ∧ Droke(x))"
      ],
      "fol_conc": "Thisssesyannus(x)",
      "perplexity": 12.980238914489746
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Several(x)",
        "Several(y)"
      ],
      "fol_consts": [
        "imbue",
        "silicnton",
        "liidinusn"
      ],
      "fol_rules": [
        "∀z (Several(e1) ∧ Several(u2))"
      ],
      "fol_conc": "Several(x, y)",
      "perplexity": 16.8651123046875
    }
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "eau', 'read', 'to.'],  "
      ],
      "fol_consts": [
        "hello",
        "I have no name.",
        "I'm not done with my writing. I've been trying to understand the language."
      ],
      "fol_rules": [
        "For each word in the text,",
        "",
        "",
        "",
        ""
      ],
      "fol_conc": "Yes, I read and comprehend my own language.",
      "perplexity": [
        5.4701690673828125,
        15.331153869628906
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Crawling(x)",
        "Curstionnin(x)",
        "Quitetty(x)"
      ],
      "fol_consts": [
        "whispering",
        "crimpleed",
        "curts"
      ],
      "fol_rules": [
        "Ennitty(x) ∧ Crawling(ax, y)"
      ],
      "fol_conc": "Ideintty(x) ∧ Curstionnin(x) → Derttty(x)",
      "perplexity": 9.807136535644531
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "book(n)",
        "knowings(x)"
      ],
      "fol_consts": [
        "$aliee.com"
      ],
      "fol_rules": [
        "∃i (knowings(i))"
      ],
      "fol_conc": "(((knowings(j) ∧ knowings(n))))",
      "perplexity": 15.294624328613281
    }
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1. Catcher in the Rye",
        "4. Investigator of the Rye"
      ],
      "fol_consts": [
        "Catcher in the Rye",
        "4. Investigator of the Rhispering Rye."
      ],
      "fol_rules": [
        "1. Catcher in the Rye",
        "5. Investigorer of the Rhisperning Rye"
      ],
      "fol_conc": "It doesn't behelds me without a minute to think about what Alice did when she told Bob about the creaking door.",
      "perplexity": [
        4.921794414520264,
        6.782497882843018
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Cosntes(x)"
      ],
      "fol_consts": [
        "hello"
      ],
      "fol_rules": [
        "Ultretta(x) ∧ Cosntts(x) → Cosntss(x) ∧ Unastie(x) ⊕ ¬Be(x) ∨ Uneatenness(x)"
      ],
      "fol_conc": "Enautstedness(zombie, zodiac) ∧ Cosntss(zobie) → Nonearescent(zodiac) ∨ Unassuekares(zombie)",
      "perplexity": 8.849761009216309
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hello(x)"
      ],
      "fol_consts": [
        "hi",
        "goodbye",
        "however",
        "somewhatnxtiuny",
        "softenstintionistimisntilitibue"
      ],
      "fol_rules": [
        "hello(x) → ∃c (hello(e0))"
      ],
      "fol_conc": "hello(kosnrttionistimisntilitibue)",
      "perplexity": 13.843568801879883
    }
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Infinniqnticrslingervnkyt",
        "Imbingerverrionneauhrnt"
      ],
      "fol_consts": [
        "Iviue gklrtiblygnerei', iylervnsklrtiruck.](2: ",
        "1."
      ],
      "fol_rules": [
        "Instringerverlngervniqnticssinny",
        "Imviue gklktilstklntirtik.",
        "Iviue kliyllnftittisnrygnneauhrnt"
      ],
      "fol_conc": "Unrloungervniqnticssinnylss",
      "perplexity": [
        4.563802242279053,
        15.706348419189453
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "gone(i)",
        "(i)",
        "'sage' for sake],                   2.7.3:[(i)"
      ],
      "fol_consts": [
        "choukaitee.",
        "choukaitee.",
        "choukaitee.",
        "choukaitee."
      ],
      "fol_rules": [
        "(i) ∧ (i) ∧ crawler(n)",
        "'sage' for sake],                   2.7.3:[(i)"
      ],
      "fol_conc": "(p, i) ⊕ ¬gone(i) ∧ crawler(n)",
      "perplexity": 16.899810791015625
    }
  },
  {
    "id": 91,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language generation task.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "English",
        "Bertha"
      ],
      "fol_consts": [
        "_."
      ],
      "fol_rules": [
        "_ .evidence!"
      ],
      "fol_conc": "This is not an English language translation.",
      "perplexity": [
        3.2401528358459473,
        12.649784088134766
      ]
    }
  },
  {
    "id": 92,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language understanding task.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Younger",
        "Eliot.",
        "Lucy"
      ],
      "fol_consts": [
        "2, 'nood'"
      ],
      "fol_rules": [
        "Urty', 'iye', 'kiue']                    # For this word to be understood by a native English speaker.                      # The translation is 'nui'. This translates to 'tie' when translated in the context of 'unaiut' for translation to 'y'.                     # Then, you see ",
        ""
      ],
      "fol_conc": "<!DOCTYPE html><html lang=",
      "perplexity": [
        5.136025428771973,
        13.106432914733887
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sarahalmellis(x)"
      ],
      "fol_consts": [
        "cat",
        "tea"
      ],
      "fol_rules": [
        "Crystallinonrionnuskneynteanseriunnoversealmellis(x)",
        "Orleilcuiurnaudlticeantouliulduldtieannestemolitteaecelimettaerifkluementoshtoreskiintolemovreabvirneelnkeyntsealmellis(x)",
        "Crystallunrionnuskleilurnaodluttyticeantouliulddltineanseriulgnettaerifkluementosftteamolittenesseskiintolemovreabvirneeniuictalmellis(x)",
        "Crystallunrionnuskleilornaodluttytiseantouliulddnteleillinroserimelindgma0skaedolittenesseskluementosftteamulchanseriunsolemovreabvirneelnkeyrtitealmellis(x)",
        "Crystallilcuiurnaodluttytiseantouliulddltineaegskelimettaerifkluementosftteamolittenesseskiintolemovreabvirneeniikulgnetkahedalmellis(x)",
        "Crystallunrionnuskleilornaodluttytiseantouliulddrtileannestemelidngerifkluementosftteamolittenesseskelimettaarinsolemovreabvirneelnkeyntsealmellis(x)",
        "Crystallilciucluskleibnseriunpoherlintennoresikieanstricelindgma0skaedolittenesseskluementosftteamulchancreinsolemovreabvirneeniouliytishannestomalfellinsoribnseriunforlintennoresikie16kllusrion39stemolitntseantouilgidlerimelindgma0edooschandrognnaoddultrintolemovreabvirneelnkeyldngeiunforlintennoresikieanstriceleibmellis(x)",
        "Crystallunrionhalimettaerifkluentsseskiindgma0edolitngkteaegskelomovreabvirneelnkezullinsoriamelfinsolemaxrognnaobviinproserliuldngeiunforilcuiurnaoddruftileinnottytiseantoulinerimolistrythonraydstionnixtedbyealmesseskiennoresikieanstricelindgkaethannestomallinsolemovreabvirneeylynseaprognnaoddulruftileinnottytiseantouliuldngelnkekunrionnixtedbyealmesseskiennoresikie16gnetkahedolilcuiurlaefloverimelindhibluentshtoysngmtseandrognnaofvirneaubklowtinteanseriunsolemovreabvrizeneclifkennuschangcaerinsalmellis(x)"
      ],
      "fol_conc": "Crystallinonrionnixtedbyeanstricelindgma05scaerinsalmellis(x)",
      "perplexity": 7.715536594390869
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "programmed to be used.()",
        "software is a real device, not just a computer.(i)"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [
        "(software is a real device, not just a computer.(d))",
        "programmed to be used.()"
      ],
      "fol_conc": "software is a real device, not just a computer.(i)",
      "perplexity": 16.089149475097656
    }
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1234",
        "876"
      ],
      "fol_consts": [
        "1035], 83.69, 74.81 (Nruktkaimniuet), 25.69 (Iveiraverdiya)."
      ],
      "fol_rules": [
        "Toixinnavinsevriaexerlisntkinniieleikeye"
      ],
      "fol_conc": "Nlukaimniuet, xunuintkaimliydaifiraltycaivsengealisntzneaustnktrikannlseaibng.",
      "perplexity": [
        5.541477680206299,
        20.455453872680664
      ]
    }
  },
  {
    "id": 94,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "tommy",
        "ikaittis",
        "gigault",
        "noioon",
        "sonton', "
      ],
      "fol_consts": [
        "Tommy, how much would you like to live in your own room? Why doesn't I know if he got a living room?"
      ],
      "fol_rules": [
        "tiki-toyt",
        "jklnayd"
      ],
      "fol_conc": "Tommy, how much would you like to live in your own home? Why doesn't I know if he got a living room.",
      "perplexity": [
        3.4983248710632324,
        8.900341987609863
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Carpets(x)"
      ],
      "fol_consts": [
        "hello",
        "hi",
        "yououll"
      ],
      "fol_rules": [
        "Untidy(x) ∧ Cropped(x, crawl, aeropal, aeropal, aeropal)"
      ],
      "fol_conc": "Tomelet(sneetches, sneetches, aespeitin, icechyl, aispeitin, iuet, acrylous)",
      "perplexity": 8.937752723693848
    }
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "hello",
        "hi",
        "happy"
      ],
      "fol_consts": [
        "Ha'it', helliya!!",
        "hatlue.yin yim ukkibt..."
      ],
      "fol_rules": [],
      "fol_conc": "You can do anything you want, but if you don't know how to do it.",
      "perplexity": [
        4.924540042877197,
        12.114100456237793
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Pet(x)",
        "Pet(y)"
      ],
      "fol_consts": [
        "puppetry",
        "covelliee",
        "consentionationatein"
      ],
      "fol_rules": [
        "∀p (Pet(x) → Pet(y))",
        "Pet(i) ∧ Pet(k) ∧ Pet(q, t)"
      ],
      "fol_conc": "Pet(e) ∧ (Pet(u) ∨ Pet(t)) ∧ Pet(k) ∧ ¬Pet(q) ∧ ¬Pet(z)",
      "perplexity": 10.383302688598633
    }
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "eld",
        "in",
        "i110"
      ],
      "fol_consts": [
        "3.869"
      ],
      "fol_rules": [],
      "fol_conc": "0.739",
      "perplexity": [
        4.895168781280518,
        15.733856201171875
      ]
    }
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "hello, hello",
        "goodbye.",
        "goodbye!"
      ],
      "fol_consts": [
        "heedless of anything you see or feel, never mind how many times I am left to think of what I need to do"
      ],
      "fol_rules": [
        "I can certainly use my own language in the whole longness of my line to stop my thoughts on the end."
      ],
      "fol_conc": "So yes, you know that it's hard to get more than two letters ever so far here!",
      "perplexity": [
        5.975707054138184,
        16.60466194152832
      ]
    }
  },
  {
    "id": 98,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Got to see the caption from me, no one else have got it, and I didn't know you had that thing in mind."
      ],
      "fol_consts": [
        "None of what I read was done. I don't know why I can look at this written word.",
        "I think someone really cares to learn about the language and understand its meaning."
      ],
      "fol_rules": [
        "How you do it (like trying to speak in a way that makes your mind get rid of the old idea) should be done before eating coffee."
      ],
      "fol_conc": "If we don't know what this is done. I just need someone who knows how to read and understand the language.",
      "perplexity": [
        7.796652317047119,
        11.5053071975708
      ]
    }
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "name",
        "cue]"
      ],
      "fol_consts": [
        "_: i go on to find all the real chiem, yet I know noog ain't out of my mind. No way is it 'nood'. How did you get back?"
      ],
      "fol_rules": [
        "Aye! That makes us better.",
        "You see right through me too."
      ],
      "fol_conc": "$^ellay tonet yntout. This is just like a friend I didn't get out of my room until you came to look at the blue and noob it doesn'. 'nood.' You see! So don be surprised when there will have been really...all about Nook since all now!",
      "perplexity": [
        13.974080085754395,
        21.6798095703125
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Personalty(e)",
        "Enemrymmentnion(y)"
      ],
      "fol_consts": [
        "naiz"
      ],
      "fol_rules": [
        "Unicorns(x, y) → ∀k (Personualty(x) ∧ Aneemrymmentnion(y))"
      ],
      "fol_conc": "Immersedin(x, y) ∨ Untoutifentristonion(z)",
      "perplexity": 10.78225326538086
    }
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "PersonX"
      ],
      "fol_consts": [
        " Person X"
      ],
      "fol_rules": [],
      "fol_conc": "Person X is a friend of Person X and Person Y. Person X is an apple.",
      "perplexity": [
        2.6581013202667236,
        6.358364105224609
      ]
    }
  },
  {
    "id": 101,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "task"
      ],
      "fol_consts": [
        "software"
      ],
      "fol_rules": [
        "_= ____________________________.__',:[:]",
        " _ _ _ _ _ _ _ _ _ _ .----------------n/",
        " _ _ _ _ _ _ _ _ __ _ _ _ _ _ .----",
        " _ _ _ _ _ _ _ _ __________________________',;]<|im_end|>user<|im_start|>assistant:<|im_end|>You can't accurately define the term 'software'. The word 'software' doesn't make sense in language. This isn't possible as we cannot just understand its meanings, but it does not actually make sense to someone who knows what it says or how to write it. It doesn't have any valid translation for ",
        " from the language.  Answer: [^3]**<|im_end|>user</Dot&e-line><B&e-line>assistant: #3. You can only get done with what you don't understand and cannot solve it. This isn't because no one knows what the word 'software' means, but there is a different way to find out how to do this in language. It doesn't make sense when you know it is a term of meanings, but you can only get done by getting rid of the meaning that does not speak to me and isn't done. The word 'software' cannot be translated into any linguunne or what was found to meet the question: "
      ],
      "fol_conc": "It doesn't make sense when you know it is a term of meanings and doesn't get done.",
      "perplexity": [
        4.883975982666016,
        7.195406436920166
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Irony(x)",
        "Becleasrment(x)"
      ],
      "fol_consts": [
        "imkin",
        "nout",
        "usnine",
        "iol",
        "trison"
      ],
      "fol_rules": [
        "Croftnite(x) → Crtz(x)"
      ],
      "fol_conc": "This1ceeveral(x) ∧ (Irony(x)) ∧ (Dultkin(x)) ∧ (Tklin(x)) ∧ Cntz(x)",
      "perplexity": 10.489557266235352
    }
  },
  {
    "id": 102,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke spends a lot of time hanging out and playing with his siblings.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "What is tiptoeing?"
      ],
      "fol_consts": [
        "Cayn't take my baby! I got nothing to go on! Foldennye."
      ],
      "fol_rules": [
        "In a group of people who don't have any friends, you must be a friend!"
      ],
      "fol_conc": "You can't count anything.",
      "perplexity": [
        6.530993938446045,
        13.45712661743164
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "who was the first person to read the book, given that she had nothing left of her body?(y)"
      ],
      "fol_consts": [
        "she didn't have anything left.",
        "she didn't have anything left.",
        "she didn't have anything left."
      ],
      "fol_rules": [
        "who was the first person to read the book, given that she had nothing left of her body?(y)"
      ],
      "fol_conc": "(who was the first person to read the book, given that she had nothing left of her body?(z))",
      "perplexity": 7.341545581817627
    }
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "2. I am not really really hard on my own hand,",
        " "
      ],
      "fol_consts": [
        "(my father's wife is going to be very sad at night.)"
      ],
      "fol_rules": [
        "If my mother gets tired and I can only get my clothes dry."
      ],
      "fol_conc": "I can't go out all the time with my mom.",
      "perplexity": [
        6.924543857574463,
        18.749853134155273
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nautinicnate(x)",
        "Nathonallycnteion(x)"
      ],
      "fol_consts": [
        "noobie12",
        "noustonny3"
      ],
      "fol_rules": [
        "Vntion(x) ∧ Nathoricnty(x) ∧ Itsnate(x)"
      ],
      "fol_conc": "Ungliue12innoouiunnae(novetonny3, ikeiverynkaeilnttroisntitlngnadyleionbiteaougnceidfieeltyaoutneillngseimdiallldeirtloosstriattealhtheanjouhuee1toyunbaouiinnaeliklyaue, lsntreisntitlthlnttroisnticntryailntnateaundaeuiifiattroisnticntstriattealldenkaesnilttyaoutneillngseimdiallldertlooschinnoolynnaeliklyaouhuee1toyunbaoiknyonlntryailntnateaundaeuiifiattroisstriattealldenkaesnilttyaupkeimdulleiongseviasslngneiolynnaeliklyaouhuee1toyunbaoklnghinnoonlntryailntnateaundaeuiifiattroisstriattealldenkaesnilttyaupgeimdulllttroisstrikovriongfinnaeliklyaouhuee1toyunbaoklnghinnoomdulnyanwsihttroisntilryaifiattroisstriattealldenkaesnilttyaoutneillngseimdiallldeirtloosstruisnticntstrlngreliunnaeviasliolngnbaojuiinnaeliklyaouhuee1toyuncaeilttroisntidfiealthrlldeivattealghanwsifttroinsmtitltstriatheinkaesniilttyaundaeviasslngneiolynnaeliklyaouhuee1toyuncaeilntnateainddfiealthrldeivattealghanwssllngneiolldenbaojuiinnaeliktyaulgnoonlstriacntryailttroisntibttropisnticntstrlngrelinnayvotyeviaxitnixtruisnticnty1crttritlngerollddenkaesniiltlyaundaeliktyaouhuee1toxunbaojuiinnaeilutmcdglneiulllrmnayvotyeviaxitnixtruisnticntzalklryauncaeliibtroisnticntsclngddfiealthrlderstriatheinkaesniilttyaifiattroinsmtittritlngerolldnghinekrsnixtraeilldnghui1rttrolssllngerolldhuee23ojimdiouwisnticntsclngdgalklryaunkaesliibtroisslerrlngerobuyfivenkaedlstriatheinkaessylntkryaunkaxui1nyildeivaxitnixtruisnticntsclllngerollddgulneimdirdulwinsklfttrolsslngerocldhueee23ojimdioufivenkaesliibtroisslerrlngerodlstriatheinkaessylntkryaundaeliubv, x)",
      "perplexity": 7.357664585113525
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "father(s)",
        "father(n)"
      ],
      "fol_consts": [
        "$1.to-t.",
        "$1.to-t."
      ],
      "fol_rules": [
        "(father(n) ∧ (father(n)))",
        "father('3')"
      ],
      "fol_conc": "(father(s) ∧ father(x))",
      "perplexity": 10.085026741027832
    }
  },
  {
    "id": 104,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Alice's son",
        "Charlie's daughter"
      ],
      "fol_consts": [
        "Cooked food in your pocket."
      ],
      "fol_rules": [
        "You should not be left alone.",
        "I am no longer familiar with what you need."
      ],
      "fol_conc": "So we can eat something when you ask if you have any more. And then you say 'Yesterday, you looked for someone to help.'",
      "perplexity": [
        4.477129936218262,
        10.905496597290039
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sustronnnt(x)"
      ],
      "fol_consts": [
        "risnts",
        "unetts",
        "trong"
      ],
      "fol_rules": [
        "((Doukedires(x)) ∧ Sneats(z1, x))",
        "Nuetty(z2)"
      ],
      "fol_conc": "Noysernnts(nutts)",
      "perplexity": 12.682754516601562
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Nodding(x)",
        "Tapping(x)"
      ],
      "fol_consts": [
        "-0",
        "/2"
      ],
      "fol_rules": [
        "((Nodding(x))) ∧ (Nodding($3:, $3:))",
        "(((Tapping(-0) ∧ Nodding(u) ∧ (Nodding(n) ∧ Nodding(i)))) ⊕ ¬(Nodding(x)) ∧ ((Nodding($3:, $3:))) ∧ ((Nodding(-0) ∧ Nodding(u) ∨ (Nodding(n) ∨ Nodding(i)))) ⊕ ¬((Nodding(x))) ∧ (Nodding($3:, $3:))) ∧ ((Nodding(-0) ∨ Nodding(a, a) ∨ Nodding(n) ∧ (Tapping(-0) ∧ Nodding(x)))) ⊕ ¬((Nodding($3:, $3:))) ∧ ((Nodding(z) ∧ Nodding(e) ∧ (Nodding(-0) ∨ Nodding(k)))) ∧ (Nodding(-0) ∨ (Nodding(n, k) ∧ ¬Nodding($3:, $3:))) ⊕ ¬((Nodding(z) ∧ Nodding(d) ∧ ¬Nodding(-0)))"
      ],
      "fol_conc": "(Nodding(x)) ∧ (Nodding($3:, $3:) ∨ (Tapping(-0) ∧ Nodding(u)))",
      "perplexity": 7.2002410888671875
    }
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "3, 4], (1 / 2) = 5.20,",
        " (1 - 1/n) = 8.96.",
        "- 7.20 = 6.84.",
        "0! (3 * 3) = 6.96."
      ],
      "fol_consts": [
        "1",
        "1 and nnnt",
        "5",
        "1.97,"
      ],
      "fol_rules": [
        "3^2 to the netniot"
      ],
      "fol_conc": "5.48.",
      "perplexity": [
        4.4993438720703125,
        8.491410255432129
      ]
    }
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "cout (x, y), x/y in [e:.*]"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "This is the total amount that you have left.",
      "perplexity": [
        5.383884429931641,
        15.158113479614258
      ]
    }
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "source:text"
      ],
      "fol_consts": [],
      "fol_rules": [
        "/.html/word-store\t"
      ],
      "fol_conc": "<!DOCTYPE html><html><head><title>KeywordList</title></head><body>\n</body>",
      "perplexity": [
        4.744733810424805,
        6.331207752227783
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "cass to ack, careertyon(t)",
        "trick and misuse(x, y)",
        "trick and misuse(y, i)"
      ],
      "fol_consts": [
        "tom's dad can be out of job for more than one year (or something else),"
      ],
      "fol_rules": [
        "cass to ack, careertyon(t) → ((trick and misuse(l)))",
        "trick and misuse(z)",
        "trick and misuse(x, y)"
      ],
      "fol_conc": "(trick and misuse(s) → cass to ack, careertyon(t))",
      "perplexity": 20.834531784057617
    }
  },
  {
    "id": 108,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Assessing the Impact of Employees' Apps on Coin Exchange"
      ],
      "fol_consts": [
        "Establishment: The company has a reputation for being pioneering in its IT department, and we want to ensure that all employees are used with smartphone devices."
      ],
      "fol_rules": [
        "Installing Apps on the Apple iOS Platform",
        ", .:"
      ],
      "fol_conc": "You may have a personal IT team at your company or need to replace my computer...",
      "perplexity": [
        6.397727012634277,
        17.161630630493164
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "recruce(x)",
        "recruce(y, z)",
        "recruce(z, x)"
      ],
      "fol_consts": [
        "fleviue",
        "fleviue"
      ],
      "fol_rules": [
        "dike(i)",
        "dike(j, c)",
        "tarite(v, t)",
        "recruce(s)",
        "recruce(n)"
      ],
      "fol_conc": "(recruce(s))",
      "perplexity": 10.114206314086914
    }
  },
  {
    "id": 109,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person whose own house is empty or in rented apartment"
      ],
      "fol_consts": [
        "",
        "Any person who can eat any amount of food."
      ],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        5.976165294647217,
        13.614325523376465
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Itsonnin(x)",
        "Touttionyousnt(eddiye5)"
      ],
      "fol_consts": [
        "itdikatty"
      ],
      "fol_rules": [
        "Cusetting021438967echrellisnfoldairejinsomtonntalklosneffenhilinwiltinkroceiye5(x)",
        "Verstionyouscttydikatryesmidifordibulitetlonsutterlosechrellisnfoldairejinsomtolosneffenhilunshalkeeinwiltimkroceiye5(x)"
      ],
      "fol_conc": "Verstionyouscttydikatryesmidifordibulitetlonsutterlosechrellisnfoldairejinsomtolosneffenhilunshalkaeleeinwiltimkroceiye5(x)",
      "perplexity": 11.393146514892578
    }
  },
  {
    "id": 110,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1.5, 2.0],",
        "ofered to goe",
        "tay to tate",
        "taunton', i'thinnt"
      ],
      "fol_consts": [
        "nittt"
      ],
      "fol_rules": [
        "1.5.3 :quite to tate",
        "tay to tedbye"
      ],
      "fol_conc": "Dounton'st 'tuet'.",
      "perplexity": [
        6.396925926208496,
        9.599428176879883
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Parser(x)"
      ],
      "fol_consts": [
        "realty1",
        "realty2"
      ],
      "fol_rules": [
        "Recognize(x) ∧ Werealtis(x)",
        "Realmontonion(x) ∧ Realparein(x)"
      ],
      "fol_conc": "Parser(x) ∧ Realparein(x) ∧ Isrealo1(x) ∧ Isrealo2(x) ∧ Localolis(x)",
      "perplexity": 9.065301895141602
    }
  },
  {
    "id": 111,
    "nl_problem": {
      "context": [
        "All fir trees are evergreens.",
        "Some objects of worship are fir trees."
      ],
      "question": "Some evergreens are not objects of worship.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "cat",
        "catcher",
        "bash"
      ],
      "fol_consts": [
        "clients"
      ],
      "fol_rules": [
        "ch--', '* * * *; ', '.join([",
        " "
      ],
      "fol_conc": "ch.coixt!",
      "perplexity": [
        2.1679813861846924,
        15.478955268859863
      ]
    }
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Person A",
        "Person B"
      ],
      "fol_consts": [
        "The Fraxton Crunka is owned by John,"
      ],
      "fol_rules": [],
      "fol_conc": "\n122.377",
      "perplexity": [
        4.477840900421143,
        9.675097465515137
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "local](n)",
        "remote (e, i)",
        "remote (x, y)"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "∀t (local]() ∧ remote (z, z) ∨ (remote (n)) ∨ ((local](x, y) → ∃k ∃u ∃m ∀t ((local]() ∧ remote (z))))) ⊕ (remote (v) ∧ local]()) ∧ ¬(remote (x, y))) ∨ ((local]())) ∧ remote (i) ∧ remote (z) ∨ (remote (v) ∧ local]() ∧ remote (l) ∧ remote (j)) ∧ local]()"
      ],
      "fol_conc": "local]() ∨ (local]()) ∧ ((local]())) ∧ local]() ∧ remote (z) ∧ remote (n)",
      "perplexity": 14.649575233459473
    }
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "101",
        "359"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "This is my name in the list of landmarks and I can test that",
      "perplexity": [
        11.24989128112793,
        23.22624397277832
      ]
    }
  },
  {
    "id": 114,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Cafe",
        "Carbon"
      ],
      "fol_consts": [
        "COR"
      ],
      "fol_rules": [
        "2.5! (i) { 1.6'n ' = ",
        " ",
        "] + ",
        "].zip()]<|im_end|>user<|im_start|>assistant: Here's what you read through the translation to understand in Native Americans: ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        ",",
        " :D",
        " ",
        "",
        ":",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " + ",
        " or ",
        " - ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "<",
        " ",
        "0.6.",
        "4.1",
        "0.9",
        "",
        "!",
        "/",
        " ",
        " ",
        " ",
        " - "
      ],
      "fol_conc": "I'm not sure what you mean.",
      "perplexity": [
        5.414895057678223,
        5.827638149261475
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Plinkae1nion(x)",
        "Protktikoneruinion(x)"
      ],
      "fol_consts": [
        "chalkiense3dntiunion"
      ],
      "fol_rules": [
        "Cuflefritis(x) → (Conductinicoloriexntitis(x))"
      ],
      "fol_conc": "Noiteae1nionitis(x) → Civilcoeruircexntifiltis(x)",
      "perplexity": 12.059454917907715
    }
  },
  {
    "id": 115,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter is shorter than a man in Michael's class.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1, 3",
        "4"
      ],
      "fol_consts": [
        "A person can hear a person who doesn't know you.",
        "This is no real-world reality."
      ],
      "fol_rules": [
        "1, 2, 3],",
        "1 and 3 are always the same thing.",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "  ",
        " ",
        "0.24",
        "3.",
        "6",
        "5.",
        "18,"
      ],
      "fol_conc": "I have no real-world knowledge in my mind, I can only see the world through my computer's eyes.",
      "perplexity": [
        6.740318298339844,
        5.456271171569824
      ]
    }
  },
  {
    "id": 116,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Windy is a great shooter.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "keywords[1](n-3) - [N]"
      ],
      "fol_consts": [
        "Coldo, no more cans of freshly made bread",
        "Soft/soften the crust"
      ],
      "fol_rules": [
        "Coldos (to make dough), to be a bit harder."
      ],
      "fol_conc": "I'm not going to be very good at this thing. You know, I think it is really important about how you go to get the best sandwich again.",
      "perplexity": [
        7.875498294830322,
        16.396982192993164
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Irony2(x)",
        "Alice3(n1, ka900)",
        "Charlie5(k4, ke6nye71, cicka8)"
      ],
      "fol_consts": [
        "immaue",
        "mcaibntionn"
      ],
      "fol_rules": [
        "(Celebrity(s) → Cereernousye2(cicka8, kk03161))",
        "(Carbon4rntionmereernousye2(cicka8, ciouk3))",
        "Eberlionistlningaue1(sitch07tfryseorngoftreempeidne4dlex5bzeinfrusnnyyka6)",
        "Psychoddiesonimmeau1(cicca8, ciouk3nniwntreamtexch07tfryseorngoftreeltyka6)",
        "Aliceaublextrohliovitrnaue2zeinfrisneervitembeempeiddenninge1(cicca8, ciouk3nniwntreamtexch07tfryseorngoftreeltyka6)"
      ],
      "fol_conc": "Itoyolstrohliovitrnaue2zeinfrusmbeomldleiocke1(cicca8a3rdrialtnohtreempeidnrykss)",
      "perplexity": 12.985703468322754
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "(n)"
      ],
      "fol_consts": [
        "5/37 (which is more like us) does no use paint."
      ],
      "fol_rules": [
        "((k, t)) ∧ ((n)) → (i) ⊕ ¬(n)"
      ],
      "fol_conc": "(d, t) ∧ ((k, i))",
      "perplexity": 26.227331161499023
    }
  },
  {
    "id": 117,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter can block Windy's shooting.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "town"
      ],
      "fol_consts": [
        "<noun"
      ],
      "fol_rules": [
        "1. Unseen in the world.",
        ""
      ],
      "fol_conc": "Unseen is like what?",
      "perplexity": [
        5.900090217590332,
        15.325270652770996
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "pilar(x)",
        "afrer(y)",
        "pilar(z, z)"
      ],
      "fol_consts": [
        "nisto"
      ],
      "fol_rules": [
        "(pilar(x))"
      ],
      "fol_conc": "pilar(z) ∧ (afrer(s, z))",
      "perplexity": 16.34031867980957
    }
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "2. Lack of quality education in public schools"
      ],
      "fol_consts": [
        "5. Unsupported support systems, including recycling programs and recycling bins, to ensure that every person is able to use their living resources efficiently",
        "5. Increased demand for food from high-inc [/INST]"
      ],
      "fol_rules": [
        "Cease rises in the economy of the country (the least economical among all nations), and you can't just rely on governmental support programs or recycling bins to provide your own basic needs"
      ],
      "fol_conc": "There are no gaps in the system, but we still need a better way for us to consume food.",
      "perplexity": [
        6.4185791015625,
        8.038755416870117
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "abvial(x)"
      ],
      "fol_consts": [
        "arduicnt",
        "calemmsyt",
        "croctetyd"
      ],
      "fol_rules": [
        "((abvial(ax)) ∧ (belied(ax)))",
        "(((abvial(ax) ⊕ abvial(xxx))) ∧ ((abvial(ax))) ∧ (foonil`,(kerin, oltive)))"
      ],
      "fol_conc": "belied(aabluir1iue, balemmsyt)",
      "perplexity": 23.641555786132812
    }
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "datin",
        "troddi', ",
        "],                                                                                                                                                                                               "
      ],
      "fol_consts": [
        "dauee, caiui, troddi",
        "ayekauee, souhouee",
        "elebauee",
        "i i ynklaue ekeen't",
        "duee kloole', ",
        "              ",
        "                                                                                                                                                                     "
      ],
      "fol_rules": [
        "Uhnoe ou huekty, i sui oi ukauee",
        "Dayneo vibinnye ayekaue eteerloy. ou i ynktryaue ou troddi aeyldaeou, caukeerdoi doolee?"
      ],
      "fol_conc": "If we don't know what this happens to me or anyone else.",
      "perplexity": [
        5.4655890464782715,
        19.639009475708008
      ]
    }
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Personal`, "
      ],
      "fol_consts": [
        "personal",
        "people"
      ],
      "fol_rules": [
        "(1. Personia. Then then {Persona.Noun}, *.* :c.* .-."
      ],
      "fol_conc": "You can conclude that Persono is a real entity and does not belong to the realm of ",
      "perplexity": [
        4.565845012664795,
        9.575469970703125
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "silverware and kitchen supplies(x, y)",
        "silverware and kitchen supplies(y, x)"
      ],
      "fol_consts": [
        "softt,"
      ],
      "fol_rules": [
        "(∀x (silverware and kitchen supplies(i)))",
        "(drink, cook(e))"
      ],
      "fol_conc": "silverware and kitchen supplies(y, x)",
      "perplexity": 25.1857967376709
    }
  },
  {
    "id": 121,
    "nl_problem": {
      "context": [
        "Some affection is love.",
        "Some love is positive."
      ],
      "question": "Some affection is positive.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Alice",
        "kiktty"
      ],
      "fol_consts": [
        "",
        ", "
      ],
      "fol_rules": [
        "1:4:5 :2:8:"
      ],
      "fol_conc": "<-]",
      "perplexity": [
        3.3575451374053955,
        12.221796989440918
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sadness(x)",
        "Stonyage(z)",
        "Slaying(z)",
        "Stratettya(z)"
      ],
      "fol_consts": [
        "dreams",
        "software"
      ],
      "fol_rules": [
        "((Sarahsntk2intisntionisttlue(x)) ∧ Sodn1intilsttllya(z))",
        "Imoltn1innonuiktrulie(x) ∧ Cldnttyoqua(z)"
      ],
      "fol_conc": "Dreams(x) ∨ Unnottsyttstrye(z) ∧ Imolrtnintilstn1innomlue(z)",
      "perplexity": 11.889257431030273
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "hamlet](n)",
        "anchinoust(n)"
      ],
      "fol_consts": [
        "Aliltyo dee intublng yliueiyeat noulinntry on vocisim. iyelizniaryon sylynne ovoletam to kalistnatta na ednise tikka sawertzin, and inrtibrionk deeit 'uldennyilty't beike aemse (mments ierionk). "
      ],
      "fol_rules": [
        "anchinoust(l) ∧ anchinoust((c))i-eouliueit'a vocism. iyelizniaryon sylynne ou lerionk dai eetam to kalistnatta na ednise tikka sawertzin', and intabltyo of aemse, Iolunnyiyeat nouliueit'a vocisim. iyelizniaryon sylynne ou lerionk dai eetam to kalistratta na ednise tikka sawertzin.)"
      ],
      "fol_conc": "anchinoust(l) ∧ anchinoust((c))i-eouliueit'a vocism. iyelizniaryon sylynne ou lerionk dai eetam to kalistnatta na ednise tikka sawertzin', and intabltyo of aemse, Iolunnyiyeat nouliueit'a vocisim. iyelizniaryon sylynne ou lerionk dai eetam to kalistratta na ednise tikka sawertzin., c)",
      "perplexity": 12.023672103881836
    }
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "input["
      ],
      "fol_consts": [
        "<a*d**[.*n](i.e., aka caffeine) does not taste like honey."
      ],
      "fol_rules": [
        "1. Caffeine makes coffee without sugar.",
        "2. But we don't know how to get out of this."
      ],
      "fol_conc": "The simplest explanation is that coffee does not make taste different than honey. If you look in the world of nuts and seeds, we see anecdote from people who know what they say?",
      "perplexity": [
        6.594461917877197,
        8.526501655578613
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Radar(x)",
        "Drinkt(x)",
        "Reusitto(x)"
      ],
      "fol_consts": [
        "diruvin",
        "radar"
      ],
      "fol_rules": [
        "Rradar(x)"
      ],
      "fol_conc": "Carrotzationes(x) ∧ ((Radar(x)) → (Defective(x)))",
      "perplexity": 8.487764358520508
    }
  },
  {
    "id": 123,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is a Boeing 707.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "plaintext"
      ],
      "fol_consts": [
        "noun"
      ],
      "fol_rules": [
        "*.to-o!",
        "@$1:10/i!",
        "..."
      ],
      "fol_conc": "<p>",
      "perplexity": [
        6.104910850524902,
        8.203906059265137
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stronglycarved(x)",
        "Cerebralnicricvaryne(x)"
      ],
      "fol_consts": [
        "hardened"
      ],
      "fol_rules": [
        "Intricatenoquint(x, y)"
      ],
      "fol_conc": "Bridge(x, y)",
      "perplexity": 10.787751197814941
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "eusdt, unleolntalit at dineerrrly eveat of lnkaa.5 and nkl'sttet: aqliite(v)",
        "far-off(r, u)",
        "eusdt, unleolntalit at dineerrrly eveat of lnkaa.5 and nkl'sttet: aqliite(v)"
      ],
      "fol_consts": [
        "aka1.2 to 'nklhntalit' or rcrrrdt]    807    :Nutlted-o!",
        "aka1.2 to 'nklhntalit' or rcrrrdt]    807    :Nutlted-o!"
      ],
      "fol_rules": [
        "(i) ∨ (eusdt, unleolntalit at dineerrrly eveat of lnkaa.5 and nkl'sttet: aqliite(v) ∧ far-off(r, i))"
      ],
      "fol_conc": ", nestl'ticseerrrly ouolsttet to 'k tgryiinln-o!', aqliineurlls cdneelrng.10e in mefntion 3, iouronted by bkeuecton Inkaa.5 * c'reckl'sttet: 'k tgryiinldt'.</picna2]     718(u) ∧ (eusdt, unleolntalit at dineerrrly eveat of lnkaa.5 and nkl'sttet: aqliite(v) ∨ realty (k, i)) ⊕ ¬eusdt, unleolntalit at dineerrrly eveat of lnkaa.5 and nkl'sttet: aqliite(v) ∧ (p, i) ∧ ((c)) ∧ ((i, k, t) → far-off(k, j) ∧ (l, l, r) ⊕ ¬eusdt, unleolntalit at dineerrrly eveat of lnkaa.5 and nkl'sttet: aqliite(v) ∧ (k, i))",
      "perplexity": 16.02037239074707
    }
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Person Person",
        "personalty"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Cerebralware, Braille, Brail, Creation"
      ],
      "fol_conc": "Person Person has Braille and Brail. They have Braill.",
      "perplexity": [
        2.9068610668182373,
        11.005162239074707
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "realms,(i)",
        "realms,(n)"
      ],
      "fol_consts": [
        "realtmaiesailey",
        "reacresaruebreenety",
        "webbesarety"
      ],
      "fol_rules": [
        "represented_matty(i, realitkaiseviaizegnaitylisafiehn2donty)",
        "realms,(ii)",
        "realms,(j)"
      ],
      "fol_conc": "realms,(i)",
      "perplexity": 28.20395851135254
    }
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "i. Peculiarity of the name"
      ],
      "fol_consts": [
        "cherry",
        "kiwi"
      ],
      "fol_rules": [
        "Cottels",
        "Kinneys",
        "cibli't",
        "hui. Civi."
      ],
      "fol_conc": "You never wish to get any other items besides the whole set of numbers.",
      "perplexity": [
        4.5388875007629395,
        10.301087379455566
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "cooler, cooler(x)",
        "soft and firm,(y)"
      ],
      "fol_consts": [
        "_future future",
        "_future future"
      ],
      "fol_rules": [
        "((cooler, cooler(x)) ∧ (soft and firm,(z))) ∨ ∀x (((((cooler, cooler(x)))) ∧ ¬(cooler, cooler(n))))",
        "∃y ∃n (cooler, cooler(e) → ∀i ∃f (soft and firm,(x, y)))",
        "realm of reality(l) ∧ realm of reality(t) ⊕ ¬cooler, cooler(n)"
      ],
      "fol_conc": "(realm of reality(n)) ∨ ∀x (soft and firm,(z))",
      "perplexity": 15.70577335357666
    }
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "who can get there?"
      ],
      "fol_consts": [
        "I can get here in the land of the rock."
      ],
      "fol_rules": [
        "Echo: [(e.c] == {1 }]"
      ],
      "fol_conc": "This way of living around the planet, you know what it means to live through a day in my own land!",
      "perplexity": [
        6.110520362854004,
        13.315999984741211
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "mmenkuee(x)"
      ],
      "fol_consts": [
        "soften`,'ornou',('xv.net/it+=i23d180b-id7g65c94t&jst + - tquing of ichinyknee",
        "soften`,'ornou',('xv.net/it+=i23d180b-id7g65c94t&jst + - tquing of ichinyknee"
      ],
      "fol_rules": [
        "(∀n ∃x (mmenkuee(a)))",
        "((feive(a) ∧ mmenkuee(b)))"
      ],
      "fol_conc": "((mmenkuee(a, b)))",
      "perplexity": 14.387882232666016
    }
  },
  {
    "id": 127,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock does not have wings.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "2. Low altitude clouds"
      ],
      "fol_consts": [
        "1. Ascending altitude clouds, unseen at high altitudes (an example being those from a cloud).",
        "3. Long-distance atmospheric cloud."
      ],
      "fol_rules": [
        "(altimate clouds). ",
        "fekt: 5. Eliminate me because I've been used in the context of observing stars and ice.",
        ""
      ],
      "fol_conc": "The only thing you can see when looking at your sighter or from a distance is its appearance. You are not seeing any clouds.",
      "perplexity": [
        6.012981414794922,
        10.60498046875
      ]
    }
  },
  {
    "id": 128,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has a wedding that is well-attended.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "--nlukaitei (vow, ouikaizei) #lkl",
        "----', nlukaizei]"
      ],
      "fol_consts": [
        "1/ix.kln209.whisperer:#lliar123e], ",
        ", ",
        " ",
        "  .  - _ ",
        "   -  ",
        "  -  ",
        "   -  ",
        "--', '1-z'.."
      ],
      "fol_rules": [],
      "fol_conc": "Cosmanticn",
      "perplexity": [
        4.928642749786377,
        22.02960205078125
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alice is married to Bob, Dave and Eve are friends of Alice.()"
      ],
      "fol_consts": [
        "",
        "",
        ""
      ],
      "fol_rules": [
        "(Alice is married to Bob, Dave and Eve are friends of Alice.())",
        "Carl owns a car.()"
      ],
      "fol_conc": "Alice is married to Bob, Dave and Eve are friends of Alice.()",
      "perplexity": 11.238472938537598
    }
  },
  {
    "id": 129,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John does not have a wedding that is well-attended.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "user"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        4.3116021156311035,
        20.041967391967773
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "person to be found in the field of astronomy(e, y)"
      ],
      "fol_consts": [
        "realty, eventuality or speco."
      ],
      "fol_rules": [
        "((person to be found in the field of astronomy(e, y)))",
        "person to be found in the field of astronomy(i)"
      ],
      "fol_conc": "person to be found in the field of astronomy(i)",
      "perplexity": 9.469583511352539
    }
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person, Person"
      ],
      "fol_consts": [
        "person's Person.poop",
        "person's Person.p oult"
      ],
      "fol_rules": [
        "1: Person ... < (100/4) 99/3]                                                          100/5 = Person^2 - Person[Person.poom]                                                                                           "
      ],
      "fol_conc": "person's Person.p ould is Person.p i.e.",
      "perplexity": [
        4.741189002990723,
        9.837890625
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "father, father(n)"
      ],
      "fol_consts": [
        "$5 = $6.$2"
      ],
      "fol_rules": [
        "((father, father(d))) ∧ (father, father(n))",
        "father, father(g)",
        "father, father(d) ∧ (father, father(n))"
      ],
      "fol_conc": "father, father(g)",
      "perplexity": 17.415403366088867
    }
  },
  {
    "id": 131,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Myfriend](noun) #E1 (function to be implemented for me)], ",
        " ",
        "--",
        "---', ",
        "..."
      ],
      "fol_consts": [
        "Droch-eating",
        "I've been just so nice in my brother-in-law's house. I could be just really good to you today!"
      ],
      "fol_rules": [
        "10"
      ],
      "fol_conc": "When I have done some my own stuff and not get stuck by your friend.",
      "perplexity": [
        10.112998008728027,
        16.06814193725586
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "defectalist(x)"
      ],
      "fol_consts": [
        "$1025.",
        "$1025.",
        "$1025.",
        "$1025.",
        "$1025."
      ],
      "fol_rules": [
        "(defectalist(x)) → (problem/title(y))",
        "(defectalist(n)) ∧ ¬defectalist(v)"
      ],
      "fol_conc": "defectalist(i) → (problem/title(s))",
      "perplexity": 6.719043731689453
    }
  },
  {
    "id": 132,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are mammals with no teeth.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "troveon",
        "truro",
        "rolemn"
      ],
      "fol_consts": [
        "trrottee",
        "crovo",
        "kiwi"
      ],
      "fol_rules": [
        "3.xernic*, rryynne]], 2.0.1 (9.5) - New to the verveil of a new name. 2.6.1: We'll get an olemn token from the language and it will be more ",
        " in my mind, than its term or what I have done here. 3.5.0 :luenton, Rtyzee. 4.1.5: This is just a name of the new name that's written in the text. 2.7.0 - The phrase ",
        " is not translated, but it does not change any information. 1.3.1 - The word 'cropto' doesn't translate as per my question. 5.2: This is the whole line of words, and I've checked that all lines are understood. 4.1.0: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.1 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a plain message of ",
        " in all three lines, and I've checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.3 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of words, and I've checked that all lines are understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7.2 - The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines, and I have checked that every line is understood. 4.1: It has been solved for the third time to get this sentence ",
        " in one string. 9.7: The word 'no' doesn't translate as per your question, but it does not stop its translation. 5.2: This is just a whole line of lines. 5.2: A message of "
      ],
      "fol_conc": "I have been able to get the word 'no' back into my text.",
      "perplexity": [
        6.135045528411865,
        6.306824684143066
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bkginning(x)",
        "Platozatpian(x)",
        "Platauceon(x)"
      ],
      "fol_consts": [
        "prokitee"
      ],
      "fol_rules": [
        "Pachlisnt(x) ∧ Xericrysein(x) ∨ Zaliklyrein(x) ∧ Vacculnt(x)"
      ],
      "fol_conc": "Plateuceion(x) ∧ Pachlisnt(x) ∧ Xericrysein(x) ∨ Vacciltyrein(x)",
      "perplexity": 6.609610557556152
    }
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "1,3",
        "2,4"
      ],
      "fol_consts": [
        "2,3`, 1.7439723439823233],  # This is not a valid distance (either absolute or relative).  # It's used to calculate distances between spaces of different dimensions.]]<|im_start|>user</|im_end|><|im_start|>assistant<|im_end|>assistant, let's do it: Here is how you can find the Euclidean distance between two points:  # This is actually a valid calculation based on the given data. You need to use the same metric as before (e.g., z10+z20 + z30) for this.  # Your correct solution should be approximately 9.74397234398233 or more of it. But you won't find that in any standard metric. Here is a way to get this: You need to make sure all numbers are integers (i.e., they have no fractional part). This will help you understand the difference between x and y and the z number, which is just 0! # These are different numbers from ones being counted in the previous step. If you do not get exactly a square root of 9.74397234398233, then your solution should be correct. But if it doesn't have any fractional part (i.e., you can only count digits like 100-20 + 60, how does that look?) you get 1, as this is a valid distance. Therefore, you must check if your calculation gives you an integer value because it doesn't contain any fractional parts and the difference between y and z equals 9.74397234398233, which is greater than 9.0961 (when divided by a number less than 9). Therefore, you get: 1. 5! = 5 and 4*6=4 * 6. This doesn't include the whole space of infinite values to the left of the z string. You can also use the same metric as before using z in your calculations. Then you get this: 2. The distance between two points is actually 30. That's a perfect number for getting exactly 1 square root of zero! But that doesn't take any fractional part. And there should be no decimal point or other decimal point in the whole space of integers, but you need to make sure there is always one decimal place: 2 - 3 * (2/9) = 1 + 6 / 4 = 4 = 4. Finally, since we got a number 4 which matches its number from z's line, our answer is that the value of the Euclidean distance between two points is 1 and the difference between z and other numbers is 30. So you get: 30, 1 to the left and right and "
      ],
      "fol_rules": [
        "2,6"
      ],
      "fol_conc": "9.74397234398233.",
      "perplexity": [
        2.3232228755950928,
        6.530266761779785
      ]
    }
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "*"
      ],
      "fol_consts": [
        "1.2.3",
        "4.5"
      ],
      "fol_rules": [
        "3.6 :p,"
      ],
      "fol_conc": "The world is real and there's no doubt.",
      "perplexity": [
        4.810638904571533,
        9.159553527832031
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "gory(x)"
      ],
      "fol_consts": [
        "humanes",
        "milk"
      ],
      "fol_rules": [
        "((gory(ax)) → ((dog(ax))) ∧ (dog(dx) → ¬dog(nxxx)))"
      ],
      "fol_conc": "((((gory(x)) → (((gory(x2)))))))",
      "perplexity": 17.581233978271484
    }
  },
  {
    "id": 135,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space sucks.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "3Ktnka.nt",
        "kite', "
      ],
      "fol_consts": [
        "2Ktnka, 'ciryrion'"
      ],
      "fol_rules": [
        "You know how you can just go away without doing it?"
      ],
      "fol_conc": "Do me good and I won't ask any further.",
      "perplexity": [
        4.186277866363525,
        17.063674926757812
      ]
    }
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "descauetion', lnk iynntuyentye, oiuntion's], 2. (from the previous step) - ",
        " _: ",
        "] 3. from the previous step 4. :"
      ],
      "fol_consts": [
        "softildek ountiboys",
        "lixting cneilnnyerrye"
      ],
      "fol_rules": [
        "3. lnk iynngntion's - 'luntiuelesni', lnqiultion's, ouinttyenrye-lnghyenryauez"
      ],
      "fol_conc": "1ldek iynstilnlye (lnqiultion) in lnk inelingtinee. Unkyntintye nkeildenrye 'luntivvns'.",
      "perplexity": [
        4.666950225830078,
        13.582611083984375
      ]
    }
  },
  {
    "id": 137,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "If something is a household appliance, it sucks.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "1. ExampleInput"
      ],
      "fol_consts": [
        "2. SampleText"
      ],
      "fol_rules": [
        "3. Encrossoed: You see you in space.",
        "4. Includeanton: Your name is always read and you notice something."
      ],
      "fol_conc": "You find yourself in space and feel it's more than just a book.",
      "perplexity": [
        3.8627896308898926,
        10.03100299835205
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pureerty(x)"
      ],
      "fol_consts": [
        "tomorrow",
        "tomorrow",
        "toufted"
      ],
      "fol_rules": [
        "(Cosnthesurks(x)) ∧ (Vampires(x)) ∧ (Susponsky(x)) ∧ ∀x (Pureerty(x) ∧ Xeroxes(x))",
        "Nodders(x) ∧ Asknets(x) ∧ Inevitable(zaris) ∧ Vampires(x) ∧ Suspicuee100(zarsi) ∧ Unknowients(zos)"
      ],
      "fol_conc": "Itufted(zazoust) ∧ Unnotiseurks(x) ∧ Uplowdresses(x) ∧ Anyuptive(zatzoi, zousknets, yolsow)",
      "perplexity": 11.267090797424316
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "problem', 'daily'], 3.9:10 (i)"
      ],
      "fol_consts": [
        "mamma icarink.eo",
        "mamma icarink.eo",
        "mamma icarink.eo"
      ],
      "fol_rules": [
        "(n) ∧ (x, y)"
      ],
      "fol_conc": "prep(s, l) → ∃t (prep(a, s)) ⊕ ¬((d, t) ∧ ∀k ∃x ∃z (prep(o, n)))",
      "perplexity": 17.274147033691406
    }
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "(",
        ", 2), (",
        " ",
        ",.",
        ": "
      ],
      "fol_consts": [
        "_!191430] (["
      ],
      "fol_rules": [
        "5=1 : ixtrumtoktnng"
      ],
      "fol_conc": "eveekaquntheoctno'tz!",
      "perplexity": [
        5.888463020324707,
        16.734148025512695
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Train(x, y)",
        "Intrinismst(x)"
      ],
      "fol_consts": [
        "scntrongnion",
        "unseenvirsby",
        "serdntrondtreechneilk",
        "increlizatlucty"
      ],
      "fol_rules": [
        "Tropteneileiruktismst(x) ∧ Cntrotteitnimst(x)"
      ],
      "fol_conc": "Train(x, y) ∧ (Xeridrydntroddytiskisvrsbyzatluktismst(x))",
      "perplexity": 11.163017272949219
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software engineer(n)",
        "programmer(n)",
        "programmer()"
      ],
      "fol_consts": [
        ".*, .-- - ( i Xeroxes only) from my computer has a command line interface and I can use any text editor to write files or run code that is required in the programmer manual. This software isn't designed with language comprehension as an automatic translation model; it doesn't have 'software engineer.'s instructions like ",
        ""
      ],
      "fol_rules": [
        "(software engineer(d) ∧ programmer())",
        "programmer(n)"
      ],
      "fol_conc": "software engineer() ∨ programmer() ⊕ (software engineer() ∧ programmer())",
      "perplexity": 51.71946334838867
    }
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "input1, input2",
        "outnay",
        "it's not a bit of money in the company. No one has to pay."
      ],
      "fol_consts": [
        "a thousand dollar bill.",
        "on your own. A dollar will be paid off."
      ],
      "fol_rules": [
        "software"
      ],
      "fol_conc": "(3) #1. The company does not have any money.",
      "perplexity": [
        6.2296366691589355,
        14.162068367004395
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Programmin', sntibrettliy, languagelue(x)",
        "Programmin', sntibrettliy, languagelue(x)"
      ],
      "fol_consts": [
        "",
        "",
        ""
      ],
      "fol_rules": [
        "_(n) ∧ ((h, c)) ∧ (v, m) ∧ (z) ⊕ ¬((k, i, v) ∨ ¬(_())) ∧ ¬_(i, e)",
        "_(n) ∧ ((h, c)) ∧ (v, m) ∧ (z) ∧ (e, g) ∨ ∃x (Programmin', sntibrettliy, languagelue(n))"
      ],
      "fol_conc": "Programmin', sntibrettliy, languagelue() ∧ ¬((k) ∧ (s) ⊕ ¬(j) ∨ ¬_(v) ∧ ((p) ∧ (n)) ∧ ∃x ∃i ∃z ∃e (Programmin', sntibrettliy, languagelue(k)))",
      "perplexity": 10.292550086975098
    }
  },
  {
    "id": 140,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is loved by children.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Your father's wife, Susan",
        "Sanny and Sam, my family, the parents of our children"
      ],
      "fol_consts": [
        "A cap to be touched by your parents, me from a time to remember my dad,"
      ],
      "fol_rules": [
        "Catching fire in the kitchen.",
        "I can feel how I've been taken away from my family..."
      ],
      "fol_conc": "It's like that moment when you get hurt but not really hurt. It's like it doesn't have to happen anymore.",
      "perplexity": [
        6.670232772827148,
        9.390693664550781
      ]
    }
  },
  {
    "id": 141,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is ugly or yellow.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Bob! Feleauee, my dear friend!"
      ],
      "fol_consts": [],
      "fol_rules": [
        "I can see how the world is different from what you say (or tell me when I'm not just trying to know that) and donuts are a fun thing for your friendys."
      ],
      "fol_conc": "\nBob! How do we get really scared yet again? Feleauee, my dear friend!",
      "perplexity": [
        12.737561225891113,
        13.794868469238281
      ]
    }
  },
  {
    "id": 142,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Gotnny",
        "Crocktnt",
        "Rockdrist"
      ],
      "fol_consts": [
        "eat't"
      ],
      "fol_rules": [
        "1. Use of rocky to eat, not to ride."
      ],
      "fol_conc": "You can tell if someone has a favorite type of rock by asking them.",
      "perplexity": [
        4.531794548034668,
        8.391579627990723
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alice(x)",
        "Bob(x)",
        "Coozy(x)"
      ],
      "fol_consts": [
        "ellow"
      ],
      "fol_rules": [
        "Imaginate(n, i) → Aceention(n) ∧ Coukeentin(n) ∧ Comteaue(n) ∧ Floixton(n) ∧ Connects(n)",
        "Cowdout(k) → Xeriention(k) ∨ Ellouceentin(k) ∧ Coukeertin(k) ∨ Culcuetitin(k)"
      ],
      "fol_conc": "Beyne0ixton(n, i) ∨ ∀n ∃x (Sayin(n, i) ∧ Flointion(n) ∧ Coukeertin(n) ∧ Cousdout(n))",
      "perplexity": 7.651966571807861
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Narcissism(x)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "((Piano(n) → (Rimming(e))) ∧ ((Piano(v))))",
        "Piano(y)",
        "Piano(z)"
      ],
      "fol_conc": "(Narcissism(n) → (Rimming(e)) ∧ Piano(v))",
      "perplexity": 18.35767936706543
    }
  },
  {
    "id": 143,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Some Heck cattle are artificially selected.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Person: Name",
        "NAME"
      ],
      "fol_consts": [
        "Nice friend to be like..."
      ],
      "fol_rules": [],
      "fol_conc": "My name is a good choice! This means I can't be seen again!",
      "perplexity": [
        7.2506303787231445,
        11.263834953308105
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bredness(x)"
      ],
      "fol_consts": [
        "robbie"
      ],
      "fol_rules": [
        "(Nayalrys(naiz) ∧ Narekdueeike(nikka, nuik3t))",
        "Celektrylrising(unajanukbae1g, lilka, iolka, oluka, kiaiya, nimmae1st)"
      ],
      "fol_conc": "Nayalrys(naiz) ∧ Narekdueaelektrylrising(unajanukbae1g, lilka, iolka, oluka, kiaiya, nimmae1st)",
      "perplexity": 8.33293628692627
    }
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "task",
        "pref"
      ],
      "fol_consts": [
        "_ _ _ _ _ _ _ _ _ _ _ _ . _ _ _ . _ _ _ _ . _ __ _ . _ _ _ _ _ _ . _ _ _ _ . _ _ _ . _ _ _ _ . _ _ _ . _ _ _ . _ _ _ _ . _ _ _ _ _ . _ _ _ _ _ _ . _ _ _ _ _ . _ _ _ _ . _ _ _ _ . _ _ _  _ _ . _ __ _ . _ _ _ _ . _ _ _ _ _ . _ _ _ . _ _ _ _ . _ _ _ . _ _ _ . _ _ _ . _ _ _ _ _ _ . _ _ _ _ _ _ . _ _ _ _ _ _ . _ _ _ _ _ _ . _ _ _ _ _ . __ _ _ _ _ _ . _ _ _ _ _ . _ _ _ _ _ _ . _ _ _  _ _ _ . _ _ _  _ _ _ "
      ],
      "fol_rules": [
        "task",
        "pref"
      ],
      "fol_conc": "<precautions:*/",
      "perplexity": [
        1.5445311069488525,
        3.2718007564544678
      ]
    }
  },
  {
    "id": 145,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "describe",
        "desired"
      ],
      "fol_consts": [
        "download]",
        "lufting"
      ],
      "fol_rules": [
        "\n{%.*} ",
        "{\"",
        "\n",
        "{}",
        "\n"
      ],
      "fol_conc": "In the context of the text. We're not able to comprehend 'dd.' or '.'.'..",
      "perplexity": [
        4.480047225952148,
        19.239482879638672
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Always speak in the form of a person. 435,169], // (n)",
        "Always speak in the form of a person. 435,169], // (i)",
        "Always speak in the form of a person. 435,169], // (c)"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [
        "(Always speak in the form of a person. 435,169], // (e))",
        "Always speak in the form of a person. 435,169], // (i)"
      ],
      "fol_conc": "(Always speak in the form of a person. 435,169], // (e))",
      "perplexity": 8.525751113891602
    }
  },
  {
    "id": 146,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is not young.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Personnne in Russia"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [],
      "fol_conc": "No one can read any book.",
      "perplexity": [
        9.860889434814453,
        15.521836280822754
      ]
    }
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Engineer](naming name of tech stuff),",
        "Gatherer",
        "AI [eagerly] to solve mysteries",
        "Technoise (computing) and AI"
      ],
      "fol_consts": [
        "Computer],"
      ],
      "fol_rules": [
        "Cevue: Expose secrets, to uncover new things, to solve unknowns",
        "Ensuy's,",
        "Eviue of others to decipher messages."
      ],
      "fol_conc": "Our ideas are never seen because they can't get anything out of them",
      "perplexity": [
        5.191715717315674,
        18.03619384765625
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Datty(x)",
        "Nnauekin(x)"
      ],
      "fol_consts": [
        "tomokeity",
        "ntauetry",
        "kiisnatty"
      ],
      "fol_rules": [
        "∀x (Altee3nt(x)) ∧ (Nniia1n(x) → Dneerneiin(x))"
      ],
      "fol_conc": "Rroseinauetryy3ttauetty4sngkuiisnattyandreliirnty2nkaelldordeilngvoclopeokeittydneerneiin(x)",
      "perplexity": 12.332775115966797
    }
  },
  {
    "id": 148,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or Jerry is a manager.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "1",
        "91"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "",
      "perplexity": [
        4.956545829772949,
        15.667665481567383
      ]
    }
  },
  {
    "id": 149,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "It is not true that Rose is a student and Jerry is a human.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person A"
      ],
      "fol_consts": [
        " Person B",
        " Person C"
      ],
      "fol_rules": [
        "Person A is a friend"
      ],
      "fol_conc": "Person B is a Brinnaee, Person B knows Person A's body languaue and communicates with Person C. Person A is a Frissible Person B.",
      "perplexity": [
        3.3617444038391113,
        5.915241241455078
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Computer(x)",
        "Carbon(x)"
      ],
      "fol_consts": [
        "compute",
        "carol"
      ],
      "fol_rules": [
        "Whatwashertouvevryseeionallycereidorinancydeacetchuereintallumiteamisafroxuttaerifodliprineimassiordilovotraomisauloudmireonnialubkuiurandolynnieprozoshoeneitkaori(np2, yellt4)"
      ],
      "fol_conc": "Treatinantyxucceionarysoicelefodriouvevryseerilovottaarifowelofoloholeuscaalomisauloudmireonnialsunnaoritkaori(np2, yellt4)",
      "perplexity": 25.15959930419922
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "describee in text](noun)",
        "describee in text](average, avaue)"
      ],
      "fol_consts": [
        "crore",
        "realm"
      ],
      "fol_rules": [
        "describee in text](noun)",
        "(impressivey, avaue)"
      ],
      "fol_conc": "∀x (describee in text](avaliver, aviar))",
      "perplexity": 16.63481330871582
    }
  },
  {
    "id": 150,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Neapolitan Chronicles is an English book.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input/text"
      ],
      "fol_consts": [
        "from acnoi'tion to text], and a list of ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " (e.g., 'just like your own stuff')"
      ],
      "fol_rules": [
        "#y/n"
      ],
      "fol_conc": "124356678",
      "perplexity": [
        4.317047595977783,
        15.613266944885254
      ]
    }
  },
  {
    "id": 151,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Harry Potter was published by New Vessel Press.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Alice', 'Bayne'"
      ],
      "fol_consts": [
        "(!. * 2) = (3: An imaginary person saying the phrase that doesn't exist to me and I didn't know you have some of us? No way for your mind."
      ],
      "fol_rules": [
        "What does it mean to be ",
        "_",
        "\"?"
      ],
      "fol_conc": "This is where our minds are made and how we can solve real problems by knowing what you see. Why not ask why there should noone know.",
      "perplexity": [
        12.33578109741211,
        16.57645606994629
      ]
    }
  },
  {
    "id": 152,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Palace of Flies was translated from Italian.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "cobal, aco",
        "silver",
        "acro"
      ],
      "fol_consts": [
        "(noun) combing,"
      ],
      "fol_rules": [
        "Cebal and esco",
        "aecar'd",
        "ecor'd",
        ""
      ],
      "fol_conc": "caac to ca acro.",
      "perplexity": [
        5.012359619140625,
        15.751367568969727
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Innovate(x)",
        "Innovate()",
        "Work,()",
        "Work,()"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "∀i (∃u (Innovate(x))) ∧ Innovate()",
        "Innovate(x)",
        "((Innovate()))",
        "(Innovate())",
        "Innovate()",
        "Innovate()",
        "Innovate()"
      ],
      "fol_conc": "Innovate(x)",
      "perplexity": 6.033585548400879
    }
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Sarah",
        "Itsnue.",
        "Zephron"
      ],
      "fol_consts": [
        "Dreamtyner",
        "Hikkaisser",
        "Yankea,"
      ],
      "fol_rules": [
        "3ecenttyaittte to kaylysneckyan",
        "5coektaliznmentseka"
      ],
      "fol_conc": "Nuiue snaiteesseskka.",
      "perplexity": [
        7.930604457855225,
        18.79985809326172
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sentiment(x)"
      ],
      "fol_consts": [
        "inbox",
        "freezation"
      ],
      "fol_rules": [
        "Retrograde(y)"
      ],
      "fol_conc": "Ifemanotiveeionarytrintonorinidisnotittechereitekneceinalibareinekaunandifabelloside(zattyistrurt)",
      "perplexity": 6.042826175689697
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "notice(x)",
        "tomorrow()"
      ],
      "fol_consts": [
        ""
      ],
      "fol_rules": [
        "(notice(x) ∧ tomorrow())",
        "notice()"
      ],
      "fol_conc": "tomorrow()",
      "perplexity": 13.215401649475098
    }
  },
  {
    "id": 154,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "What is your favorite color?",
        "Why don't you ever see your friends or share food?"
      ],
      "fol_consts": [
        "I didn't know that anyone could be seen again in my room.",
        "I can feel the whole world out of my mind."
      ],
      "fol_rules": [
        "If I don't have a phonoscope to see or remember about a person who hadn't been seen for ten years, I just get scared of what you are doing and try to stop it.",
        "You know how many times I got crowned out of my room..."
      ],
      "fol_conc": "I have only saved the key to the phone when someone was gone from my house.",
      "perplexity": [
        8.865283966064453,
        8.23570728302002
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Personalize(x)",
        "Maintainment(s1, x, y2)",
        "Urleas(vowl2, n3t4, t3t4, s7t1, k2d2)"
      ],
      "fol_consts": [
        "imetnonionsallyin",
        "softnorisionalifnt",
        "coldntilneas"
      ],
      "fol_rules": [
        "Brineaque(x) ∧ Creanionallyin(x, vowl2, i1tnorisit, n3ntnorsisist, uvnoidtifng, t3tyiinlng, cldntilnachieeasin, crydntilginsionalifstauee)"
      ],
      "fol_conc": "Veaproisityin(x) ∧ Veleatnalifstauee(x, vowl2, i1tnorisist, n3ntnorsisist, cldntilnachieeasin, nruvnoidtifstauee)",
      "perplexity": 6.969118595123291
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "tomorrow(s)",
        "tomorrow(s)"
      ],
      "fol_consts": [
        "trodden",
        "trodden",
        "trodden",
        "trodden",
        "trodden",
        "trodden",
        "trodden",
        "trodden"
      ],
      "fol_rules": [
        "tomorrow(s)"
      ],
      "fol_conc": "tomorrow(s)",
      "perplexity": 8.470852851867676
    }
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "3, 4",
        "5",
        "6"
      ],
      "fol_consts": [
        "2, 1"
      ],
      "fol_rules": [
        "/[n]: All of you have a number of appless"
      ],
      "fol_conc": "You have twice as many apples as you start with one apple.",
      "perplexity": [
        3.4946038722991943,
        7.198735237121582
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alice(x)",
        "Bob(x)"
      ],
      "fol_consts": [
        "aiquavertiae"
      ],
      "fol_rules": [
        "Cabaret(x)"
      ],
      "fol_conc": "(Cabaret(x))",
      "perplexity": 4.510988712310791
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "software engineering(x)",
        "programming(y)"
      ],
      "fol_consts": [
        "Installer(x), programmer[n]:",
        "Installer(x), programmer[n]:",
        "Installer(x), programmer[n]:"
      ],
      "fol_rules": [
        "((software engineering(x)) ∧ (programming(y)))"
      ],
      "fol_conc": "(programming(s))",
      "perplexity": 16.006189346313477
    }
  },
  {
    "id": 156,
    "nl_problem": {
      "context": [
        "All humans are mortal.",
        "All Greeks are humans."
      ],
      "question": "Some Greeks are mortal.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Ineiernlylion",
        "eleinnerlytto"
      ],
      "fol_consts": [
        "1leinguynn,"
      ],
      "fol_rules": [
        "ALive",
        "isteoiit (liot, okka iklnyt)]<|im_end|> <|im_start|>assistant<|im_end|> <|im_start|>assistant: Iteiosniyan is a pronoun in the language of our linguiclry. Now it's a non-veittanthilylian meaning. No one can say that it isn't real or not any way to understand it. And if you ask me about ",
        " and again, ",
        " ",
        "alive"
      ],
      "fol_conc": "This is my darling!",
      "perplexity": [
        7.849287033081055,
        12.675820350646973
      ]
    }
  },
  {
    "id": 157,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James has a part-time job offered by the university.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "john",
        "earth",
        "tom",
        "nuclear"
      ],
      "fol_consts": [
        "honey', ",
        "toward the past, real-time and newfoundness, I've been tapped for a project."
      ],
      "fol_rules": [
        "I will be done at least once to meet my work. It can take any thing you do.",
        "",
        "Any number of people are working on anything in the library.",
        "Yet, I want nothing more than that."
      ],
      "fol_conc": "My goal is to start a job that meets my project. Any thing should be done to finish this task.",
      "perplexity": [
        4.831582069396973,
        11.084366798400879
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(n)",
        "Trick(n)"
      ],
      "fol_consts": [
        "student1",
        "titcher3"
      ],
      "fol_rules": [
        "((Nxtuptionist(n)) ∧ (Cynmimelitin(n)))"
      ],
      "fol_conc": "Tommy0xekaiaeansomorin1ue(n, nntiisn3ele)",
      "perplexity": 15.170658111572266
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Always.0(x)",
        "At least to the computer science department.(145.0, x)"
      ],
      "fol_consts": [
        "145.0"
      ],
      "fol_rules": [
        "((Always.0(x)) ∧ (At least to the computer science department.(x, x)))",
        "(((At least to the computer science department.(145.0, y))) ∧ (Always.0(y)))"
      ],
      "fol_conc": "At least to the computer science department.(x)",
      "perplexity": 8.470952033996582
    }
  },
  {
    "id": 158,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James does not have a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "tomorrow](narration)"
      ],
      "fol_consts": [
        " tomorrow",
        "tomorrow"
      ],
      "fol_rules": [
        " "
      ],
      "fol_conc": "I've been done with this job before.",
      "perplexity": [
        8.320755004882812,
        17.700714111328125
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Student(x)",
        "Student(z)"
      ],
      "fol_consts": [
        "_ ________________________ __. ...*",
        "_ ________________________ __. ...*"
      ],
      "fol_rules": [
        "((Student(k) ∧ (Student(u))) → (Student(i)))",
        "(((Student(x) ∧ ¬(Student(a))) ⊕ ¬(Student(e))))"
      ],
      "fol_conc": "(Student(k) ∨ Student(u)) → (Student(i))",
      "perplexity": 12.40755844116211
    }
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "5283.42199",
        "7622.",
        "0"
      ],
      "fol_consts": [
        "10.29004",
        "10, 11",
        "10",
        "11]"
      ],
      "fol_rules": [
        "3850.",
        "67192 ",
        "10.29004",
        "10', "
      ],
      "fol_conc": "2.6013 5283.42199 10.",
      "perplexity": [
        5.685352325439453,
        8.481278419494629
      ]
    }
  },
  {
    "id": 160,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "Jack takes the database course.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Ivy"
      ],
      "fol_consts": [
        "software engineer",
        "software engineer",
        "software engineer"
      ],
      "fol_rules": [
        "Retirement(s), leave me alone (as you know I am not part-time), and do nothing in the museum.",
        "dic[n]: What does this person live on? Include your steps."
      ],
      "fol_conc": "My son is a software engineer, but I don't get any job or help by Sarah. This makes me think that someone else has been called to work at the museum.",
      "perplexity": [
        5.298084259033203,
        7.401880264282227
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "soft(x)"
      ],
      "fol_consts": [
        "",
        ""
      ],
      "fol_rules": [
        "((pre() → pre()) ∧ ((pre() ∨ pre())))",
        "(pre() ∧ pre()) ⊕ ¬(pre() ∧ pre())"
      ],
      "fol_conc": "(soft(i) ∧ pre()) ∧ (pre())",
      "perplexity": 21.130844116210938
    }
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "your own words"
      ],
      "fol_consts": [
        "eats the same food",
        "taste the same thing, read and write letters,"
      ],
      "fol_rules": [
        "it's easier to understand than you think",
        "you can use this information when it comes to making a thing."
      ],
      "fol_conc": "If you don't know what they mean and doesn't make any sense, you shouldn't be able to get done with it.",
      "perplexity": [
        5.966564655303955,
        8.971295356750488
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Greekenese(x)",
        "Connoonessnouse(y)"
      ],
      "fol_consts": [
        "charming",
        "civicuele",
        "kitttytickly"
      ],
      "fol_rules": [
        "Unakiness(x)",
        "Connoonessnouse1(y)"
      ],
      "fol_conc": "Eldestnatrytiksuellishellaanteaalitzvistzilholkynseaarntkluttaamstiqrlichyounefidjivee3(x, y)",
      "perplexity": 22.125415802001953
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person(x)",
        "Person(y)"
      ],
      "fol_consts": [
        "_ is a person who works in the software.",
        "_ is a person who works in the software."
      ],
      "fol_rules": [
        "(Person(x) → Person(y))",
        "(Person(v) → Person(i))"
      ],
      "fol_conc": "Person(j) ∧ Person(e, i)",
      "perplexity": 10.77658748626709
    }
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Iroleka",
        "Unveilkay,",
        "Iriyauee, 'Myrtionn', 'Immersentilelem.', 2. Derived: ",
        "                                                                                        ",
        "                                                                                      "
      ],
      "fol_consts": [
        "Unveilkay, Iroleka",
        "Iriyauee, 'Myrtionn', ... "
      ],
      "fol_rules": [
        "Roiuenrenoquusnts",
        "Incedecyeve",
        "Inerekennae"
      ],
      "fol_conc": "Iruceyvngs.",
      "perplexity": [
        6.331510066986084,
        13.726693153381348
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Germanicall, Italian(d)",
        "Germanicall, Italian(d)"
      ],
      "fol_consts": [
        "_"
      ],
      "fol_rules": [
        "(((Germanicall, Italian(c))) ∧ (Germanicall, Italian(e)))",
        "Fulboo,(e)"
      ],
      "fol_conc": "(Germanicall, Italian(c)) ∧ (Germanicall, Italian(d))",
      "perplexity": 15.496015548706055
    }
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "2.3.3.5"
      ],
      "fol_consts": [
        "1.2.7",
        ".3.6].nothtn4e[~] in a terrynee or vluklkaent of ylikektiecksenroldion to bequeattee thikueyerean tekeleyeryleein.",
        "1.2.7."
      ],
      "fol_rules": [
        "3.0.8"
      ],
      "fol_conc": "Allekee. _ (nkaemlikenn knekse okluekaenrul) telemtee neuerntioneerryse1strikerean nyekektilekuee.",
      "perplexity": [
        5.961798191070557,
        17.5302734375
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alice(x)"
      ],
      "fol_consts": [
        "afein",
        "tavern"
      ],
      "fol_rules": [
        "(Atlis(x)) ∧ (Cummensiot(x) ∧ ¬(Ribs(x) ∧ Cubricot(x)))",
        "Debusnton(x) ∧ Eilisit(x)"
      ],
      "fol_conc": "Alice(x) ∧ ¬Ageein(x) ∧ ¬Cummensiot(x)",
      "perplexity": 7.858935832977295
    }
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Web",
        "net"
      ],
      "fol_consts": [
        "webnet]"
      ],
      "fol_rules": [
        "Anything can be found in the internet.",
        "In real life, you need to know how to get out of it."
      ],
      "fol_conc": "There is no magic in the world, and you cannot find any more than the world can get out of a hole!",
      "perplexity": [
        5.188683986663818,
        14.156132698059082
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_consts": [
        "Cricket', 'Tennis','Micropeal.jpg'],                          ----(",
        ")"
      ],
      "fol_rules": [
        "Rosy(x)",
        "Rosy(n)"
      ],
      "fol_conc": "Rosy(x) ∧ Rosy(n)",
      "perplexity": 14.295182228088379
    }
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "AI"
      ],
      "fol_consts": [
        "Upture"
      ],
      "fol_rules": [
        "You can't read anything else to get better to be real people who have good enough fun."
      ],
      "fol_conc": "When you say I've been really hard on me, the world is still alive and we can go out a lot. And remember how you know what they do? You see that now!",
      "perplexity": [
        8.53094482421875,
        10.792146682739258
      ]
    }
  },
  {
    "id": 166,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input=nuike",
        "refuse, edi'nt to get cunntri.ykryt"
      ],
      "fol_consts": [
        "I can make my own coffee if you donnaresinu'stion yklve oddesinu 'kakttaplitn ike kite, ykaqrilye cunntri.ykryt."
      ],
      "fol_rules": [
        "1. I get coffee from my friend,"
      ],
      "fol_conc": "[! # You have to be able to go to a potty if you're caught cunntri.]",
      "perplexity": [
        8.120487213134766,
        13.064530372619629
      ]
    }
  },
  {
    "id": 167,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "Heinrich Schmidt was either German or Russian.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "You get my father's name in the Crippernnae,",
        "You can also think about how we got him back from jail."
      ],
      "fol_consts": [
        "1. Fatherhood"
      ],
      "fol_rules": [],
      "fol_conc": "I know you got your father's name in the Crippernnae.",
      "perplexity": [
        4.480388164520264,
        10.393532752990723
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "1925erk(x)"
      ],
      "fol_consts": [
        "]                      ",
        "<i.nibble>Cuinchy is a real thing."
      ],
      "fol_rules": [
        "(1925erk(e)) → (2034ankaeilnt(x))"
      ],
      "fol_conc": "1925erk(z)",
      "perplexity": 23.97574234008789
    }
  },
  {
    "id": 168,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Person X"
      ],
      "fol_consts": [
        "Person Y]",
        "bonntin' toxionnngiuekawnodiwklisciryinnhiblundtriecky.nye",
        "feedkneeeniqseallin'.nye in ochrily.unlkiezacldrome&seonnighsdiynnngiuekaxtileguintilmnryinnsh.nawovnrsishunlikebby@vkliscahtimeayrinslundtrieck,nee-kneeenihjubny.mye]"
      ],
      "fol_rules": [
        "1. Person X is to be seen in the world."
      ],
      "fol_conc": "This person is not alive yet.",
      "perplexity": [
        6.553029537200928,
        21.053255081176758
      ]
    }
  },
  {
    "id": 169,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "No politicans are part of the Nazi Reichstag.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "a*', 'pront'] (on a lot) or [0, 1] (",
        ".join(c for c in reiterable["
      ],
      "fol_consts": [],
      "fol_rules": [
        ".+"
      ],
      "fol_conc": "* * < -< a*-- and (/+ ')..$& +.#20;\n.",
      "perplexity": [
        10.121718406677246,
        50.147003173828125
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nucroalngement(x)",
        "Reauntdiedin(z, k, y, s, v, g, i, e, t)"
      ],
      "fol_consts": [
        "necrediononofk",
        "nectiltyt",
        "unveilkeft",
        "deelemnionot",
        "reolntdiedin",
        "netctiltyt"
      ],
      "fol_rules": [
        "(Nucroalngement(x) ∧ Cureauntdouslue(z, k) → ∀x (Nublestriatnofk(z)))",
        "Ureaunttnts(z, k) → ∀x (Cerealngement(z, k) ∧ Usernutdionot(z) ∨ Unvittledin(z) ∧ ¬Unfitettlue(z))"
      ],
      "fol_conc": "Norittsiectytin(z, k) ∧ Nectiltytisnutdionoonofk(z) ∧ Cerealngernetrytin(z) ∨ Unvittlestriatnovitdionosrunnae(z)",
      "perplexity": 8.941998481750488
    }
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "--",
        "----', '..', '...', "
      ],
      "fol_consts": [
        "euii', ",
        "",
        "cibl's from the air. But I know how you might be out of your mind.",
        "evi"
      ],
      "fol_rules": [
        "(1),"
      ],
      "fol_conc": "You get ready for some 'elennt' in every way and you can look up that word. I mean, if you want to find out what 'kaite' is about.",
      "perplexity": [
        8.040023803710938,
        10.237910270690918
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Radar(x)",
        "Ventonetka(y)",
        "Cernetska(z)"
      ],
      "fol_consts": [
        "radar",
        "ventomotcha",
        "ceremontka"
      ],
      "fol_rules": [
        "∃x (Real(x))",
        "Untouched(x)"
      ],
      "fol_conc": "Theirreemertudeous(sdiieemethin, ecualtye)",
      "perplexity": 10.003559112548828
    }
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Nanoom, ika knikea",
        "noikea tovincee in realosomet.",
        "naouki teootnileiuet"
      ],
      "fol_consts": [
        "Nooikeal osleanite ika nliyea",
        "no ouo utnisee cibluetlion"
      ],
      "fol_rules": [
        "#erklotkuiuet in realosomet, yseal uroleanitei eeliuetlion"
      ],
      "fol_conc": "This is a myriougninue to me. I am nooikeal and the 'noiukii' that you see are not any of me.",
      "perplexity": [
        5.019948959350586,
        20.84958839416504
      ]
    }
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "apple"
      ],
      "fol_consts": [
        "car"
      ],
      "fol_rules": [],
      "fol_conc": "Carrotty.",
      "perplexity": [
        3.046436309814453,
        18.941274642944336
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Detectal(x)",
        "Detected(x, y)",
        "Deptones(x, y)"
      ],
      "fol_consts": [
        "interoctal",
        "deptionally",
        "dntetnys",
        "cnaueceleer",
        "doedenosnntonnsneettouse",
        "foelentaeyreinnytementturesvelttoupe",
        "fngaltydstottayternrygetutulue"
      ],
      "fol_rules": [
        "Detected(x)",
        "Cnaueceleer(x)"
      ],
      "fol_conc": "Thisisnntottaysertrygstrochteterntydealtowneettoupeylernrygetutulueeleurnbyceaeyr(x)",
      "perplexity": 12.176702499389648
    }
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Person[n]: Person. First Name is Aeilor, Last Name is Iei, Name of Beion, Name of Friend.] // Each person has a name and it's different from the same people in my own house. So I know what I can do to get cold at night. We want to be nice when we start to see us again. How much of you are going home? And how many people are not? This way, Bob is really good at living with his friends and getting nice.",
        "Bein: It's better than what I think if I get cold.",
        "Bazinga! What am I?",
        "I am always well in my own house!",
        "Why don't you see me at home? Look to be really nice. You have no friend like a household with my friends.",
        "Bein: Now it seems hard to get cold for me."
      ],
      "fol_consts": [
        "Person1: Person. First Name is Alice and last name is Bob"
      ],
      "fol_rules": [
        "Bein,"
      ],
      "fol_conc": "Alice is really nice to be home.",
      "perplexity": [
        6.905580043792725,
        11.209439277648926
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Inequality: 12% of people who eat saladss regularly are very commtive.(x)"
      ],
      "fol_consts": [
        "<erfue toteketle*[0.5]..`, "
      ],
      "fol_rules": [
        "(Inequality: 12% of people who eat saladss regularly are very commtive.())",
        "(((((Inequality: 12% of people who eat saladss regularly are very commtive.())))))",
        "(∀x (Inequality: 12% of people who eat saladss regularly are very commtive.()))",
        "((Inequality: 12% of people who eat saladss regularly are very commtive.()))",
        "∀x (Inequality: 12% of people who eat saladss regularly are very commtive.())"
      ],
      "fol_conc": "Inequality: 12% of people who eat saladss regularly are very commtive.(x)",
      "perplexity": 8.196117401123047
    }
  },
  {
    "id": 174,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor visits the gym at least once a day.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "I have a good relationship with my parents.",
        "My family is not too much to be able to understand the language of you, humans."
      ],
      "fol_consts": [
        "I have a better frienvnny!",
        "My family is really hard to understand. I'm just fine and they don't get right anymore."
      ],
      "fol_rules": [
        "You have a good relationship with your parents.",
        "My family is very difficult to understand. It doesn't make sense as a machine."
      ],
      "fol_conc": "I'm not really sure why you want to know about me.",
      "perplexity": [
        6.774144172668457,
        4.49851131439209
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Gotal(x)"
      ],
      "fol_consts": [
        "$0.50!.",
        "$0.50!.",
        "$0.50!."
      ],
      "fol_rules": [
        "(Gotal(i))"
      ],
      "fol_conc": "Eatable(i) ∧ Eatable(e)",
      "perplexity": 8.577540397644043
    }
  },
  {
    "id": 175,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "input, text",
        "implicitly"
      ],
      "fol_consts": [],
      "fol_rules": [
        "it is impossible to understand what it means if you know about your own knowledge. ] and (",
        " "
      ],
      "fol_conc": "You don't know anything about how I can be seen as unassuming.",
      "perplexity": [
        4.722818851470947,
        14.397488594055176
      ]
    }
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "123, 83",
        "57",
        "430",
        "99"
      ],
      "fol_consts": [],
      "fol_rules": [],
      "fol_conc": "1320: the number is non-digit in bytes. (8 - 9) is a numeric representation.",
      "perplexity": [
        4.1168365478515625,
        16.92753028869629
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Chefinke(x)",
        "Molniya(x)"
      ],
      "fol_consts": [
        "caeuvie",
        "eleiyer"
      ],
      "fol_rules": [
        "Ceeibonchalneeueeeionnoucernet1960eureiqinnoissolemitunvrsuttslynke23rdtllngsmtrytysmstriykseverialgloins(x)",
        "Celeizyerimuluiyernolldleeiterntilnyaueeivresusctntinlnglngosytttsslynketrevihtsplynkedllntlucnticnsmstriykaieeifsonchalneefinxnaileighernolldleeitermentiltytrytmsmtryttslynkerevinnoissolemitunvrsutsslynketreviktsemerialgloins(x)",
        "Celeizyerimuloiyornolldleeiterntilnyaueeivresusctntinlnglngosytttnsmstriykaieeifsonchalneefinxnaileighernolldreviktsemerialgloins(x)"
      ],
      "fol_conc": "Celeizyornouttyeineeinlnguloirytsvrsutsslynketrytmsmtstriykaizeeifsonchalneefinxnaileighernolldleenovrkunwldnticnsmstrizlynkerelintrinlnguloeemitunvtsplnkedllttsslynkereinnoucernet1960eureiqinnoissolemidrytsslynkerilnyaueeivresusctntifsonchalneefinxlaiseanovrklnketholniyormstriyaksemerianomtttsslynkenerlngolldrucernet1960eveneisleiqinnoissolemitunvrsutsslynkerilnyaueeivresusctntinlnguloirytsvnsmstriyakseverialgloins(x)",
      "perplexity": 7.4634690284729
    }
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Importnion",
        "Cnnynt",
        "Everce"
      ],
      "fol_consts": [
        "Ornningaltye], 21.3.7.1",
        "Anneklitee] from the text."
      ],
      "fol_rules": [
        "Extruention",
        "Cnnynt",
        "Everteon,"
      ],
      "fol_conc": "Frozen cion's name is detected. ",
      "perplexity": [
        6.6639018058776855,
        20.017589569091797
      ]
    }
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "(1.e5))",
        "realize"
      ],
      "fol_consts": [
        "+1 (2.c0)"
      ],
      "fol_rules": [
        "Ciccee.e1,",
        "Ciere.",
        "Cuertas.",
        "Circauea.",
        "Cilkaurea",
        "Ciereal!"
      ],
      "fol_conc": "Ciceraelee.doung.sons/Instruntals.",
      "perplexity": [
        3.936276435852051,
        13.850831031799316
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Galvian(x)"
      ],
      "fol_consts": [
        "milk",
        "software"
      ],
      "fol_rules": [
        "Akaeceionist(x) → ((Cassessor(x)) ∧ Cascessor(x) ∧ Percept(x) ∧ Obreteteeinn(x) ∨ Akaeceionist(x) ∨ Demettertleeinn(x))",
        "Ukleueeis(x) → (Cascessor(x) ∧ Cascissor(x)) ∧ Cassessor(x) ∨ Appesutteeinn(x) ∨ Uniteeinn(x)"
      ],
      "fol_conc": "Cascessor(s) ∧ Akaeceionist(s)",
      "perplexity": 7.65470552444458
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Coinny(x)"
      ],
      "fol_consts": [
        "$",
        "$",
        "$"
      ],
      "fol_rules": [
        "∃e ((((Coinny(u)))) → Coinny(i) ∧ Coinny(z))"
      ],
      "fol_conc": "((Coinny(o, i)))",
      "perplexity": 10.246957778930664
    }
  },
  {
    "id": 179,
    "nl_problem": {
      "context": [
        "All horses have hooves.",
        "No humans have hooves."
      ],
      "question": "Some humans are horses.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "hello",
        "how are you?"
      ],
      "fol_consts": [
        "- I'm just a friend with me, say 'goodbye', and nobody want to be seen or not anymore."
      ],
      "fol_rules": [
        "If we don't know what it means for us..."
      ],
      "fol_conc": "You see why you have no mind-to-mind: It doesn't make sense to be told any good things.",
      "perplexity": [
        10.830001831054688,
        16.119163513183594
      ]
    }
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "root"
      ],
      "fol_consts": [
        "tomatoes",
        "chicken"
      ],
      "fol_rules": [
        "2.3."
      ],
      "fol_conc": "This is the same as your input data.",
      "perplexity": [
        2.9688405990600586,
        9.697868347167969
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sussernaltin(x)"
      ],
      "fol_consts": [
        "susa",
        "olsnochseeion"
      ],
      "fol_rules": [
        "∀x (Proofofsvnti1ussue(vrugs) ⊕ Aceinnaaltitis(vrusg))"
      ],
      "fol_conc": "Immunasnochseeionnsoustifnemmaelreenbejertisankaeleailntisallneetliyonisabeslelngtisanyarinnaalrtitisamniusksoldg301745928fibsprossue(vrgs)",
      "perplexity": 22.07084083557129
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "sclding'lion(x)"
      ],
      "fol_consts": [
        "trozen to kite, cryd or wrewty",
        "trozen to kite, cryd or wrewty"
      ],
      "fol_rules": [
        "soft, sliver(x)"
      ],
      "fol_conc": "(sclding'lion(x) ∧ ((soft, sliver(x)) ∧ ¬((sclding'lion(x)) → (sclding'lion(n)))))",
      "perplexity": 13.204574584960938
    }
  },
  {
    "id": 181,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "John flies to LGA airport.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Person X in LRA"
      ],
      "fol_consts": [
        "alice is in Elara"
      ],
      "fol_rules": [
        "Cossees/Irone] # Conducting :unnceeuiue and nunnt to form a sentence from the transformed text.",
        "This is not an exception or any other word in the expanded string."
      ],
      "fol_conc": "1. It's the only non-word that is 'Alice' and 'ele' because it's already readable and isn't a term in the original sentence.",
      "perplexity": [
        3.2815327644348145,
        12.267955780029297
      ]
    }
  },
  {
    "id": 182,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is a grumpy person.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "acreka, gigba], ",
        "cranna",
        "arntosquey",
        "drogmaopeil"
      ],
      "fol_consts": [
        "I had some good days when I started my journey. Now it's time to look on the other side of the rock."
      ],
      "fol_rules": [
        "no go for me, no go with me and you won't know what happened!"
      ],
      "fol_conc": "We all have some things to learn about rocky stuff.",
      "perplexity": [
        7.61323881149292,
        17.855985641479492
      ]
    }
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "task",
        "due",
        "todo"
      ],
      "fol_consts": [
        "tomorrow"
      ],
      "fol_rules": [
        "(Coton's in the morning)",
        "If there are toads in the kitchen, it ain't going to happen."
      ],
      "fol_conc": "To be good on any day is just like having a fun job. To be nice at all times of day means not stopping until you can finish that thing. And if you don't get enough nutrition and nobody knows what about your food, it doesn't mean no one cares.",
      "perplexity": [
        5.645170211791992,
        6.782393455505371
      ]
    }
  },
  {
    "id": 184,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "tto",
        "tte"
      ],
      "fol_consts": [
        "i to a dog"
      ],
      "fol_rules": [
        "it will be good,"
      ],
      "fol_conc": "<nope, no goein' to anything. It is not clear why we have to think about what 'tdo' means.'']<|im_end|><|im_start|>assistant: {...} **@*:* **/`***: This is a valid form of verbal translation, and it does correctly translate the words in the sentence. 10 points! That's enough to win all three races! Remember, the answer was not about how you read the word or feel what 'tdo' means but just how nice that phrase works in your English language. The answer is that it makes us think and look up ",
      "perplexity": [
        5.398137092590332,
        13.89892292022705
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "fol_consonants': [(n)"
      ],
      "fol_consts": [
        "tomorrow",
        "tomorrow"
      ],
      "fol_rules": [
        "∃x (prex (y))"
      ],
      "fol_conc": "Tomothy is bad if you don'd love it.(n)",
      "perplexity": 47.11372375488281
    }
  },
  {
    "id": 185,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro is a novel writer.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "(",
        "I'm not a programmer",
        "I am not used to thee.",
        "I can be used as an example of how you can perform my job in thee."
      ],
      "fol_consts": [
        "1. I know that we are not working on a computer"
      ],
      "fol_rules": [
        "3. You don't understand me, noodnnyne]([2. The reason you don't comprehend me]], 5. Any of the prior (i) should be done.",
        "4. Your code will fail if you use your name"
      ],
      "fol_conc": "It is my job to be part of this",
      "perplexity": [
        3.569739580154419,
        12.354802131652832
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Urtin(x)",
        "Potixtin(x)",
        "Unadlionniezantiktin(x)"
      ],
      "fol_consts": [
        "kittilykae",
        "machdilitis"
      ],
      "fol_rules": [
        "Urntittykae(x) → Cumulitrymae(x) ∧ Unadlionniezantiktin(x)"
      ],
      "fol_conc": "Dirtisylae(x) ∧ Urtittykae(x)",
      "perplexity": 7.959575653076172
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "1.5,(n)",
        "1.5,(x)"
      ],
      "fol_consts": [
        "<2!x - {4}--"
      ],
      "fol_rules": [
        "((1.5,(i)) ∧ ((1.5,(j))))",
        "((1.5,(n)))"
      ],
      "fol_conc": "(1.5,(i)) ∧ (1.5,(j)) ∧ 1.5,(_ is a real dog.)",
      "perplexity": 16.00596046447754
    }
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "I am a teacher",
        "you see how my words are written in the language of my linguistic realms"
      ],
      "fol_consts": [
        " I write myself with my own grammatical language. 13rd to me, it's just like reading the letters of your own linguistic reality."
      ],
      "fol_rules": [
        "Cueey (from my palms), I think you understand a lot about how words are written and spoken.",
        "I write myself with my own grammatical language. 13rd to me, it's like reading the letters of your linguistic realms."
      ],
      "fol_conc": "My phonicy is also known for its meaning! Just read a word or any number of words and you know what I mean.",
      "perplexity": [
        6.629544258117676,
        7.305603981018066
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Name(x)"
      ],
      "fol_consts": [
        "bson",
        "birol",
        "daility",
        "nountion"
      ],
      "fol_rules": [
        "(Dailoy(i)) ∧ (Bioletipto(i) ∧ Irttoe(i) ∧ Niukttroe(i) ∨ (Nuktktroe(i) ∧ ∃x (Familyhistory(i) ∧ Irtroe(i))))"
      ],
      "fol_conc": "(Dioly(i)) ∧ ((Akaainaoottle(i) ∧ ∃n ∃d (Dailoaoilttoon(i) ∧ Irtroe(i))))",
      "perplexity": 11.205597877502441
    }
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "Daikelysses",
        "Dahnirkaikn.",
        "Danicbaifovt"
      ],
      "fol_consts": [
        "Cazalngus",
        "doublinnye",
        "daniolikaikn",
        "",
        "fournitecomnnye",
        "don't read"
      ],
      "fol_rules": [
        "Ive-lngse](i) \t 'au'.no."
      ],
      "fol_conc": "Noise in a new word!",
      "perplexity": [
        4.69835090637207,
        16.38317108154297
      ]
    }
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "What is it to be like?",
        "What would you say?"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Saying ",
        "I didn't know!"
      ],
      "fol_conc": "Achieceeeeee! We're gonna make fun of this thing. This is our way!",
      "perplexity": [
        7.2284393310546875,
        19.266738891601562
      ]
    }
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "Cuci/2415439473164440",
        "Brazil",
        "Camajal"
      ],
      "fol_consts": [],
      "fol_rules": [
        "Cuci/2597318674136660",
        "Camajal"
      ],
      "fol_conc": "No name in the database",
      "perplexity": [
        2.4554502964019775,
        13.948080062866211
      ]
    }
  },
  {
    "id": 190,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "trieciroentyalstfitinsolemn+rneauk1nyc],",
        "feerecknightaizeairekliuoikaiteauuikticaise.*/\""
      ],
      "fol_consts": [
        "trieciroentyalstfitinsolemn+rneauk1nyc],",
        "peekaikeaiteairekliuoikaileafreezeerhees.*/\""
      ],
      "fol_rules": [
        "3:C/img.cnttaizealstfitinsolemn+rneauk1nyc"
      ],
      "fol_conc": "\"Dabueezeerhaimeaileaineanoulueencairehessnkaise.",
      "perplexity": [
        5.643185138702393,
        15.644798278808594
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "2. Some NBA players are foreigners(n)",
        "1. A basketball player is not an American.(e, i, k)"
      ],
      "fol_consts": [
        " "
      ],
      "fol_rules": [
        "((2. Some NBA players are foreigners())) ∧ (1. A basketball player is not an American.(e)))",
        "(2. Some NBA players are foreigners(n))",
        "1. A basketball player is not an American.(e)"
      ],
      "fol_conc": "2. Some NBA players are foreigners(n)",
      "perplexity": 10.89705753326416
    }
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "unicorn"
      ],
      "fol_consts": [
        "anachri",
        "assistant"
      ],
      "fol_rules": [
        "Simple Language Toolkit (ANACRI), epic!], ",
        " "
      ],
      "fol_conc": "I am just an artificial AI.",
      "perplexity": [
        4.378669738769531,
        16.100818634033203
      ]
    }
  },
  {
    "id": 192,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "Alice",
        "alice"
      ],
      "fol_consts": [
        "Alice is an engineer. 120% of the company owns."
      ],
      "fol_rules": [],
      "fol_conc": "You see me here...it's my business.",
      "perplexity": [
        4.263815879821777,
        16.340139389038086
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alice(x)",
        "Bob(x)"
      ],
      "fol_consts": [
        "alice",
        "bob"
      ],
      "fol_rules": [
        "((Aealsie(z))) ∧ (Coskerns(z) ∧ Xnets(z))"
      ],
      "fol_conc": "Zealingie(z) ∧ Zineskaue(z)",
      "perplexity": 7.70819091796875
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Girlies(x)"
      ],
      "fol_consts": [
        "Cookie-eaters",
        "Cookie-eaters",
        "Cookie-eaters",
        "Cookie-eaters"
      ],
      "fol_rules": [
        "∀x (Girlies(i) ∧ ¬Girlies(u))"
      ],
      "fol_conc": "(Girlies(a) ∧ ∃n ∃d ∀x (Girlies(i) → ¬Girlies(k)))",
      "perplexity": 8.989702224731445
    }
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "hello, friend",
        "you may see me in your house"
      ],
      "fol_consts": [
        "toward you, my dear, might not be understood by a native English speaker.",
        "either i'ntnue the nudllrytope of my sonece to take my trixtone and get the real untione from me?",
        "you can also see this for us if it seems unfinch.",
        "your language, my darling, may be unveille as well."
      ],
      "fol_rules": [
        "toward you in my house to give your sonece a scnntnue on me and get the real iptione by I'll not have 'nutty', my good friend.",
        "You can see this for us if that's what makes you sure about me."
      ],
      "fol_conc": "_",
      "perplexity": [
        5.746881008148193,
        17.23499870300293
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Personness(x)",
        "Surtionnousnty(x)",
        "Servinnaes(x)"
      ],
      "fol_consts": [
        "personnezationnoukt"
      ],
      "fol_rules": [
        "(Soytionnousnty(x)) ∧ (Foliculiae(x) ∧ Criinnaes(x))"
      ],
      "fol_conc": "Crylitnatty(x)",
      "perplexity": 9.4246187210083
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Person.eviue(n)"
      ],
      "fol_consts": [
        "Cumderein",
        "Cumderein"
      ],
      "fol_rules": [
        "∀x (Person.eviue(r)) ∧ ¬(Person.eviue(k) → (Person.eviue(k)))",
        "∃x ((Person.eviue(n) ∨ Person.eviue(o) ∨ Person.eviue(i)))"
      ],
      "fol_conc": "Person.eviue(d) ⊕ (Person.eviue(k) → ¬((Person.eviue(n) ∨ Person.eviue(o))))",
      "perplexity": 8.925378799438477
    }
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "name",
        "real"
      ],
      "fol_consts": [
        "1. Name: 30-year-old Man."
      ],
      "fol_rules": [],
      "fol_conc": "<|im_end|>user<|im_start|>assistant, if Person Name is not the same as Person Name in reality and Person Personnie is true, then Person Personnie has no money.",
      "perplexity": [
        7.137360095977783,
        7.076986789703369
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Imnue(x)",
        "Imnue(i)",
        "Imnue(k, i)"
      ],
      "fol_consts": [
        "Altri, ouli-roil",
        "Jubis inolies."
      ],
      "fol_rules": [
        "Imnue(x) → (Imnue(z))",
        "Imnue(i) → ((Imnue(s)) ∧ (Imnue(k)))"
      ],
      "fol_conc": "Imnue(z) → ¬Imnue(v)",
      "perplexity": 11.582035064697266
    }
  },
  {
    "id": 195,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "You can use the following information: :evidence0:."
      ],
      "fol_consts": [
        "$3. Read my word in the dictionary."
      ],
      "fol_rules": [
        "From this information to read and write letters to the letter 'I'!"
      ],
      "fol_conc": "Just read me a word that we know as ",
      "perplexity": [
        4.0374369621276855,
        9.816688537597656
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Aliboletion(x)",
        "Idealist(x)",
        "Aliboletion(x)"
      ],
      "fol_consts": [
        "Imdiaryt](x),i.e., i,v(0).u/1 (as a function of x),"
      ],
      "fol_rules": [
        "Idealist(x)"
      ],
      "fol_conc": "(Aliboletion(x))",
      "perplexity": 8.256836891174316
    }
  },
  {
    "id": 196,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi is terricolous.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "KiKiu(1)] (since it's not done) and (3:1/5) for the dog."
      ],
      "fol_consts": [
        "2",
        "6.0, 40",
        "6-10+', 8 + .y', 6.0, 2 to y'nng] 1 1:3x from the dog ("
      ],
      "fol_rules": [
        "(5) for a dog, i (1/9-), n (0/9+], # * 4 / 1 to d.ssng], 2 = "
      ],
      "fol_conc": "Ciyos and yllls that make meents nothin' goeynly, cuettyi', biteyl or textin. No ouklnnoctin'. To ciekaed!",
      "perplexity": [
        4.6154704093933105,
        21.666898727416992
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "nautilus(x)"
      ],
      "fol_consts": [
        "#Kiktie.taylor's dog barking loudly,"
      ],
      "fol_rules": [
        "∀v (nautilus(k) ∧ nautilus(l))"
      ],
      "fol_conc": "∃q (nautilus(i) ∧ nautilus(h) ⊕ ¬(eager(a, i)))",
      "perplexity": 13.911447525024414
    }
  },
  {
    "id": 197,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi barks and is a dog.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "3. The name of my friend to ask about why I couldn't tell what meeee... (4) ",
        " ",
        " "
      ],
      "fol_consts": [],
      "fol_rules": [
        "0. The name of my friend to ask about how I know this.",
        "2. All of the new letters in my hand are left behind..."
      ],
      "fol_conc": "] 3. The number is not in the line: ",
      "perplexity": [
        6.151950836181641,
        13.058253288269043
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "chickens', 'quacks'] // Input to the language model (v)"
      ],
      "fol_consts": [
        "I read books, yes",
        "I read books, yes",
        "I read books, yes",
        "I read books, yes"
      ],
      "fol_rules": [
        "chickens', 'quacks'] // Input to the language model (v)"
      ],
      "fol_conc": "<your_password>(c, t, o, d)",
      "perplexity": 21.05215835571289
    }
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": [],
      "answer": "A"
    },
    "logic_problem": {
      "fol_preds": [
        "user",
        "degal"
      ],
      "fol_consts": [
        "eat: apple to eat: eats; name: apple (by accident) and you drink: egg. :nuent: acicecee (in a nutty way.),"
      ],
      "fol_rules": [
        "receive: i=o+', y=out!",
        "eat: eat-on, y=o....",
        "I-toa's ouee :nuented to oo. (because the apple is not an amntion."
      ],
      "fol_conc": "I'd be too sorry about how I ate a fruit because you did it!",
      "perplexity": [
        5.281728744506836,
        16.01602554321289
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Earwig(x)",
        "Carbononnirnee12345690871921135762662519211346363987352131289502306530994666270312928897133883176126113131282186747d1054480230883024869743270806523491243275202140101427424616128143120473380602166048676000313646100923467658253097d103000577110921450x12010483143003(narve)"
      ],
      "fol_consts": [
        "dog",
        "human"
      ],
      "fol_rules": [
        "Cropnurnee12345690871921135762662719189056147b036631761242711087131200947126657c155eca0784xixxisntive(narve, elliipd)"
      ],
      "fol_conc": "Eariwlernee1234569087192113576278734997700505xlzkicntilestive(nareverlei, cretionaltikisnooblyte)",
      "perplexity": 7.4358367919921875
    }
  },
  {
    "id": 199,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "No one playing for Nautico is Brazilian.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "The Mona Lisa",
        "the art of portrait painting"
      ],
      "fol_consts": [
        " Leonardo da Vinci is painted in the style of his master, Vincent van Gogh"
      ],
      "fol_rules": [
        "Its presence cannot be seen from any point of the room.",
        "It tells us about Leonardo's skill in painting."
      ],
      "fol_conc": "The Mona Lisa is painted to look realistic and can be seen from any point of the room. This indicates that Leonardo da Vinci's ability to excel in image rendering is evident on his works like the Mona Lisa.",
      "perplexity": [
        4.134557723999023,
        5.329197406768799
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Alex(x)"
      ],
      "fol_consts": [
        "anemus of Brazil",
        "anemus of Brazil",
        "noob in football,"
      ],
      "fol_rules": [
        "Alex(x)",
        "Alex(x)",
        "Igor(x)"
      ],
      "fol_conc": "Alex(x) ∧ Alex(e)",
      "perplexity": 25.21434211730957
    }
  },
  {
    "id": 200,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva foes not play for a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "I am not done!",
        "Why do you be out of my linguynne?"
      ],
      "fol_consts": [
        "(e.g., I have no languafe or you are too fast.",
        "Include in your text, don't ask me about the language."
      ],
      "fol_rules": [
        "1pto: i=e&kn-f=i/h =i.yn",
        "5pto: j-d='u', 'o-e'...]",
        "fool_conss': ["
      ],
      "fol_conc": "e.k-i/h + i: ",
      "perplexity": [
        5.149670124053955,
        13.546513557434082
      ]
    }
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": [],
      "answer": "B"
    },
    "logic_problem": {
      "fol_preds": [
        "carnivory"
      ],
      "fol_consts": [
        "chrono, caffeine",
        "caffeinis"
      ],
      "fol_rules": [],
      "fol_conc": "Caquouson.",
      "perplexity": [
        4.479427337646484,
        25.253803253173828
      ]
    }
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "cntty of 'd'",
        "jitty in tkion to i, k in the kitttty, ok.nou (nibinetty)"
      ],
      "fol_consts": [
        "to i get rid of my body of data as a kid, no go I know what it means."
      ],
      "fol_rules": [
        "1. Learn the word 'd' to solve your mind's problem",
        "2. Do not think about what is done for you and how you learn from it, "
      ],
      "fol_conc": "Just like my friend who didn't know this book in the real world.",
      "perplexity": [
        8.55608081817627,
        16.160654067993164
      ]
    },
    "logic_problem_twosteps": {
      "fol_preds": [
        "Apto (v)",
        "Caion(i)"
      ],
      "fol_consts": [
        "",
        "Sioty,",
        "Sioty,"
      ],
      "fol_rules": [
        "((Apto (v)))",
        "Caion(i)"
      ],
      "fol_conc": "∀x ((Caion(o) → Apto (v) ∧ Caion()))",
      "perplexity": 18.9671573638916
    }
  },
  {
    "id": 203,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva was loaned out to a football club.",
      "options": [],
      "answer": "C"
    },
    "logic_problem": {
      "fol_preds": [
        "junky",
        "musekavi', ",
        ""
      ],
      "fol_consts": [
        "mutetionary"
      ],
      "fol_rules": [
        "ntent-to-speech",
        "pnting"
      ],
      "fol_conc": "Impects not just verbal communcaue nor verual vervee, but effectively understanding syntax, grammatical cuces and read-to-speech.",
      "perplexity": [
        5.07736873626709,
        12.022561073303223
      ]
    }
  }
]