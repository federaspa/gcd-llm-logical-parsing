[
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendEvents(x)",
        "InactiveDisinterested(x)",
        "ChaperoneDance(x)",
        "Student(x)",
        "YoungChildTeenager(x)",
        "WishAcademic(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → AttendEvents(x))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (ChaperoneDance(x) → ¬Student(x))",
        "∀x (InactiveDisinterested(x) → ChaperoneDance(x))",
        "∀x ((YoungChildTeenager(x) ∧ WishAcademic(x)) → Student(x))",
        "(AttendEvents(bonnie) ∧ Student(bonnie)) ⊕ ¬(AttendEvents(bonnie) ∨ Student(bonnie))"
      ],
      "fol_conc": "PerformOften(bonnie)",
      "perplexity": [
        1.0390818119049072,
        1.0130122900009155
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Disinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "Young(x)",
        "Wish(x)",
        "Further(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → (Attend(x) ∧ Engaged(x)))",
        "∀x (Perform(x) ⊕ (Inactive(x) ∧ Disinterested(x)))",
        "∀x (Chaperone(x) → ¬Student(x))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x))",
        "∀x ((Young(x) ∧ Wish(x) ∧ Further(x)) → Student(x))",
        "(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Engaged(bonnie) ∨ Student(bonnie))"
      ],
      "fol_conc": "Perform(bonnie)",
      "perplexity": 1.2639214992523193
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendEvents(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "YoungChildTeenager(x)",
        "WishesFurtherAcademic(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → (AttendEvents(x)))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x) → ¬Student(x))",
        "∀x (InactiveDisinterested(x) → Chaperone(x))",
        "∀x (YoungChildTeenager(x) ∧ WishesFurtherAcademic(x) → Student(x))",
        "(AttendEvents(bonnie) ∧ Student(bonnie)) ⊕ ¬(AttendEvents(bonnie) ∨ Student(bonnie))"
      ],
      "fol_conc": "((YoungChildTeenager(bonnie) ∧ WishesFurtherAcademic(bonnie) ∧ Chaperone(bonnie)) ⊕ ¬(YoungChildTeenager(bonnie) ∧ WishesFurtherAcademic(bonnie))) → (Student(bonnie) ⊕ InactiveDisinterested(bonnie))",
      "perplexity": [
        1.0405129194259644,
        1.014336109161377
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Disinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "Young(x)",
        "Wish(x)",
        "Child(x)",
        "Teenager(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → (Attend(x) ∧ Engaged(x)))",
        "∀x (Perform(x) ⊕ (Inactive(x) ∧ Disinterested(x)))",
        "∀x (Chaperone(x) → ¬Student(x))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x))",
        "∀x ((Young(x) ∧ Child(x) ∨ Young(x) ∧ Teenager(x)) ∧ Wish(x) → Student(x))",
        "(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie))"
      ],
      "fol_conc": "((Young(bonnie) ∧ Child(bonnie) ∨ Young(bonnie) ∧ Teenager(bonnie) ∧ Chaperone(bonnie)) ⊕ ¬(Young(bonnie) ∧ Child(bonnie) ∨ Young(bonnie) ∧ Teenager(bonnie))) → (Student(bonnie) ∨ (Inactive(bonnie) ∧ Disinterested(bonnie)))",
      "perplexity": 1.1936452388763428
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "PerformOften(x)",
        "AttendEngaged(x)",
        "InactiveDisinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "YoungChildTeenager(x)",
        "WishAcademic(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (PerformOften(x) → AttendEngaged(x))",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x))",
        "∀x (Chaperone(x) → ¬Student(x))",
        "∀x (InactiveDisinterested(x) → Chaperone(x))",
        "∀x (YoungChildTeenager(x) ∧ WishAcademic(x) → Student(x))",
        "(AttendEngaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(AttendEngaged(bonnie) ∨ Student(bonnie))"
      ],
      "fol_conc": "(Chaperone(bonnie) ⊕ ¬Chaperone(bonnie) ∧ PerformOften(bonnie)) → (YoungChildTeenager(bonnie) ∧ WishAcademic(bonnie) ∧ InactiveDisinterested(bonnie))",
      "perplexity": [
        1.0413793325424194,
        1.0179567337036133
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Disinterested(x)",
        "Chaperone(x)",
        "Student(x)",
        "Young(x)",
        "Wish(x)",
        "Highschool(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → (Attend(x) ∧ Engaged(x)))",
        "∀x (Perform(x) ⊕ Inactive(x) ∧ Disinterested(x))",
        "∀x (Chaperone(x) → ¬Student(x))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x))",
        "∀x ((Young(x) ∧ Wish(x)) → Student(x))",
        "(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie)) ∧ ¬Student(bonnie)"
      ],
      "fol_conc": "((Chaperone(bonnie) ∨ ¬Chaperone(bonnie) ∧ Perform(bonnie)) → (Young(bonnie) ∧ Wish(bonnie) ∧ Inactive(bonnie) ∧ Disinterested(bonnie)))",
      "perplexity": 1.2798088788986206
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x, y)",
        "Appear(x, y)",
        "HaveLunch(x, y)",
        "WorkRemotely(x)",
        "Manager(x)",
        "InOtherCountry(x)"
      ],
      "fol_consts": [
        "james",
        "company",
        "home"
      ],
      "fol_rules": [
        "∀x∀y (Employee(x) ∧ ScheduleMeeting(x, y) → Appear(x, company))",
        "∀x (Employee(x) ∧ HaveLunch(x, company) → ScheduleMeeting(x, x))",
        "∀x (Employee(x) → (HaveLunch(x, company) ⊕ HaveLunch(x, home)))",
        "∀x (Employee(x) ∧ HaveLunch(x, home) → WorkRemotely(x))",
        "∀x (Employee(x) ∧ InOtherCountry(x) → WorkRemotely(x))",
        "¬∃x (Manager(x) ∧ WorkRemotely(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "HaveLunch(james, company)",
      "perplexity": [
        1.0661882162094116,
        1.0127352476119995
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Manager(x)",
        "Company(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, x) → Appear(x, company))",
        "∀x (Lunch(x, company) → Schedule(x, x))",
        "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, home)))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Employee(x) ∧ Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "Lunch(james, company)",
      "perplexity": 1.3502120971679688
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "Meeting(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Company(x)",
        "Remote(x)",
        "Manager(x)",
        "OtherCountry(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x ∀y (Employee(x) ∧ Meeting(x, y) → Appear(x, Company))",
        "∀x (Employee(x) ∧ Lunch(x, Company) → ∃y Meeting(x, y))",
        "∀x (Employee(x) → (Lunch(x, Company) ⊕ Lunch(x, Home)))",
        "∀x (Lunch(x, Home) → Remote(x))",
        "∀x (OtherCountry(x) → Remote(x))",
        "¬∃x (Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, Company)) ⊕ ¬(Manager(james) ∨ Appear(james, Company))"
      ],
      "fol_conc": "¬Lunch(james, Company)",
      "perplexity": [
        1.0713509321212769,
        1.0196105241775513
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Manager(x)",
        "Company(x)",
        "Other(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, x) → Appear(x, company))",
        "∀x (Lunch(x, company) → Schedule(x, x))",
        "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, home)))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Other(x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "¬Lunch(james, company)",
      "perplexity": 1.3624831438064575
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x, y)",
        "Customer(y)",
        "Appear(x, z)",
        "LunchInCompany(x)",
        "LunchAtHome(x)",
        "WorkRemotely(x)",
        "InOtherCountry(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ ∃y (Customer(y) ∧ ScheduleMeeting(x, y)) → Appear(x, company))",
        "∀x (LunchInCompany(x) → ∃y (Customer(y) ∧ ScheduleMeeting(x, y)))",
        "∀x (Employee(x) → (LunchInCompany(x) ⊕ LunchAtHome(x)))",
        "∀x (LunchAtHome(x) → WorkRemotely(x))",
        "∀x (InOtherCountry(x) → WorkRemotely(x))",
        "¬∃x (Manager(x) ∧ WorkRemotely(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "(Manager(james) ∨ InOtherCountry(james)) → ((LunchAtHome(james) ∧ WorkRemotely(james)) ⊕ ¬(LunchAtHome(james) ∨ WorkRemotely(james)))",
      "perplexity": [
        1.0590051412582397,
        1.011022925376892
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Employee(x)",
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x, y)",
        "Home(x)",
        "Remote(x)",
        "Manager(x)",
        "Country(x, y)"
      ],
      "fol_consts": [
        "james",
        "company"
      ],
      "fol_rules": [
        "∀x (Employee(x) ∧ Schedule(x, x) → Appear(x, company))",
        "∀x (Lunch(x, company) → Schedule(x, x))",
        "∀x (Employee(x) → (Lunch(x, company) ⊕ Lunch(x, home)))",
        "∀x (Lunch(x, home) → Remote(x))",
        "∀x (Country(x, x) → Remote(x))",
        "¬(Manager(x) ∧ Remote(x))",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company))"
      ],
      "fol_conc": "((Manager(james) ∨ Country(james, james)) → (Lunch(james, home) ∧ Remote(james)) ⊕ ¬(Lunch(james, home) ∨ Remote(james)))",
      "perplexity": 1.2878069877624512
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "There is an animal.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "Feel(x, y)",
        "Get(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "human",
        "fever",
        "headache",
        "musclePain",
        "tired",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccurIn(monkeypoxVirus, human)",
        "Mammal(human)",
        "Animal(human)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePain, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "Feel(human, tired)",
        "Get(human, glu)"
      ],
      "fol_conc": "∃x Animal(x)",
      "perplexity": [
        1.0570809841156006,
        1.015017032623291
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Disease(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)",
        "Glu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "human"
      ],
      "fol_rules": [
        "Infectious(monkeypox) ∧ Disease(monkeypox) ∧ Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, human)",
        "Mammal(human)",
        "Animal(human)",
        "Symptom(monkeypox, fever) ∧ Symptom(monkeypox, headache) ∧ Symptom(monkeypox, musclepains) ∧ Symptom(monkeypox, tired)",
        "Feel(human, tired) → Glu(human)"
      ],
      "fol_conc": "∃x (Animal(x))",
      "perplexity": 1.4373924732208252
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "No one gets flu.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Infectious(x)",
        "CausedBy(x, y)",
        "OccurIn(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "Feel(x, y)",
        "Get(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxVirus",
        "human",
        "fever",
        "headache",
        "musclePain",
        "tired",
        "flu"
      ],
      "fol_rules": [
        "Infectious(monkeypox)",
        "CausedBy(monkeypox, monkeypoxVirus)",
        "OccurIn(monkeypoxVirus, human)",
        "Mammal(human)",
        "Animal(human)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclePain, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "Feel(human, tired) ∧ Get(human, flu)"
      ],
      "fol_conc": "¬∃x Get(x, flu)",
      "perplexity": [
        1.0731043815612793,
        1.0152794122695923
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Disease(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)",
        "Flu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "human"
      ],
      "fol_rules": [
        "Infectious(monkeypox) ∧ Disease(monkeypox) ∧ Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, human)",
        "Mammal(human)",
        "Animal(mammal)",
        "Symptom(monkeypox, fever) ∧ Symptom(monkeypox, headache) ∧ Symptom(monkeypox, musclepains) ∧ Symptom(monkeypox, tired)",
        "Feel(human, tired) → Flu(human)"
      ],
      "fol_conc": "¬Exist(x) ∧ Flu(x)",
      "perplexity": 1.5253105163574219
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccurIn(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "SymptomOf(x, y)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "human",
        "fever",
        "headache",
        "musclepains",
        "tired",
        "cough",
        "glu"
      ],
      "fol_rules": [
        "InfectiousDisease(monkeypox)",
        "CausedBy(monkeypox, monkeypoxvirus)",
        "OccurIn(monkeypoxvirus, human)",
        "Mammal(human)",
        "Animal(human)",
        "SymptomOf(fever, monkeypox)",
        "SymptomOf(headache, monkeypox)",
        "SymptomOf(musclepains, monkeypox)",
        "SymptomOf(tired, monkeypox)",
        "Feel(human, tired) ∧ OccurIn(glu, human) → Feel(human, tired)"
      ],
      "fol_conc": "SymptomOf(cough, monkeypox)",
      "perplexity": [
        1.071832299232483,
        1.014997959136963
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Disease(x)",
        "Causedby(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x, y)",
        "Feel(x, y)",
        "Glu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "monkeypoxvirus",
        "humans"
      ],
      "fol_rules": [
        "Infectious(monkeypox) ∧ Disease(monkeypox) ∧ Causedby(monkeypox, monkeypoxvirus)",
        "Occur(monkeypoxvirus, humans)",
        "Mammal(humans)",
        "Animal(mammals)",
        "Symptom(monkeypox, fever) ∧ Symptom(monkeypox, headache) ∧ Symptom(monkeypox, musclepains) ∧ Symptom(monkeypox, tired)",
        "Feel(people, tired) ∧ Glu(x)"
      ],
      "fol_conc": "Symptom(monkeypox, coughing)",
      "perplexity": 1.4267147779464722
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merrians(x)",
        "RioGrande(x)",
        "Ocellated(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merrians(x) ∨ RioGrande(x) ∨ Ocellated(x))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merrians(tom) ∨ RioGrande(tom))",
        "WildTurkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": [
        1.0446537733078003,
        1.0176554918289185
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wildturkey(x)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "Riogrande(x)",
        "Ocellated(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (Wildturkey(x) ∧ Eastern(x)) ∧ ∃x (Wildturkey(x) ∧ Osceola(x)) ∧ ∃x (Wildturkey(x) ∧ Goulds(x)) ∧ ∃x (Wildturkey(x) ∧ Merriams(x)) ∧ ∃x (Wildturkey(x) ∧ Riogrande(x)) ∧ ∃x (Wildturkey(x) ∧ Ocellated(x))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))",
        "Wildturkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": 1.301934003829956
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merrions(x)",
        "RioGrande(x)",
        "Ocellated(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (WildTurkey(x) → (Eastern(x) ⊕ Osceola(x) ⊕ Goulds(x) ⊕ Merrions(x) ⊕ RioGrande(x) ⊕ Ocellated(x)))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merrions(tom) ∨ RioGrande(tom))",
        "WildTurkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": [
        1.0500564575195312,
        1.010108232498169
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wildturkey(x)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "Riogrande(x)",
        "Ocellated(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (Wildturkey(x) ∧ Eastern(x)) ∧ ∃x (Wildturkey(x) ∧ Osceola(x)) ∧ ∃x (Wildturkey(x) ∧ Goulds(x)) ∧ ∃x (Wildturkey(x) ∧ Merriams(x)) ∧ ∃x (Wildturkey(x) ∧ Riogrande(x)) ∧ ∃x (Wildturkey(x) ∧ Ocellated(x))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))",
        "Wildturkey(tom)"
      ],
      "fol_conc": "Eastern(tom)",
      "perplexity": 1.3046377897262573
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "WildTurkey(x)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriam(x)",
        "RioGrande(x)",
        "Ocellated(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∃x (WildTurkey(x) ∧ Eastern(x)) ∧ ∃x (WildTurkey(x) ∧ Osceola(x)) ∧ ∃x (WildTurkey(x) ∧ Goulds(x)) ∧ ∃x (WildTurkey(x) ∧ Merriam(x)) ∧ ∃x (WildTurkey(x) ∧ RioGrande(x)) ∧ ∃x (WildTurkey(x) ∧ Ocellated(x))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriam(tom) ∨ RioGrande(tom))",
        "WildTurkey(tom)"
      ],
      "fol_conc": "Ocellated(tom)",
      "perplexity": [
        1.0890848636627197,
        1.015899896621704
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wildturkey(x)",
        "Eastern(x)",
        "Osceola(x)",
        "Goulds(x)",
        "Merriams(x)",
        "Riogrande(x)",
        "Ocellated(x)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "∃x (Eastern(x)) ∧ ∃x (Osceola(x)) ∧ ∃x (Goulds(x)) ∧ ∃x (Merriams(x)) ∧ ∃x (Riogrande(x)) ∧ ∃x (Ocellated(x))",
        "¬Eastern(tom)",
        "¬Osceola(tom)",
        "¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))",
        "Wildturkey(tom)"
      ],
      "fol_conc": "Wildturkey(joey)",
      "perplexity": 1.3159911632537842
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "CreatedBy(x, y)",
        "JapaneseCompany(x)",
        "Game(x)",
        "Top10(x)",
        "SellsCopies(x, y)"
      ],
      "fol_consts": [
        "legendOfZelda",
        "nintendo"
      ],
      "fol_rules": [
        "CreatedBy(nintendo, legendOfZelda)",
        "∀x (Top10(x) → JapaneseCompany(y))",
        "∀x (SellsCopies(x, 1000000) → Top10(x))",
        "SellsCopies(legendOfZelda, 1000000)"
      ],
      "fol_conc": "Top10(legendOfZelda)",
      "perplexity": [
        1.0574960708618164,
        1.011343240737915
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(x)",
        "Game(x)",
        "Top10(x)",
        "Sell(x, y)"
      ],
      "fol_consts": [
        "zelda",
        "nintendo",
        "top10"
      ],
      "fol_rules": [
        "Created(nintendo, zelda)",
        "∀x (Top10(x) → Japanese(y))",
        "∀x (Sell(x, y) ∧ Greater(y, 1000000) → Top10(x))",
        "Sell(zelda, 1500000)"
      ],
      "fol_conc": "Top10(zelda)",
      "perplexity": 1.4963994026184082
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "CreatedBy(x, y)",
        "Game(x)",
        "JapaneseCompany(x)",
        "Top10(x)",
        "SellsMoreThanMillion(x)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22"
      ],
      "fol_rules": [
        "CreatedBy(company, zelda) ∧ JapaneseCompany(company)",
        "∀x (Top10(x) → JapaneseCompany(Creator(x)))",
        "∀x (SellsMoreThanMillion(x) → Top10(x))",
        "SellsMoreThanMillion(zelda)"
      ],
      "fol_conc": "JapaneseCompany(Creator(fifa22))",
      "perplexity": [
        1.182787299156189,
        1.012052059173584
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(x)",
        "Game(x)",
        "Top10(x)",
        "Sells(x, y)",
        "Copies(y)"
      ],
      "fol_consts": [
        "zelda",
        "fifa22",
        "company1"
      ],
      "fol_rules": [
        "Created(company1, zelda)",
        "∀x (Top10(x) → Japanese(y))",
        "∀x (Sells(x, y) ∧ Copies(y) → Top10(x))",
        "Sells(zelda, 1000000)"
      ],
      "fol_conc": "Japanese(company2)",
      "perplexity": 1.4814255237579346
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "CreatedBy(x, y)",
        "Japanese(x)",
        "Game(x)",
        "Top10(x)",
        "SellsMoreThanMillion(x)"
      ],
      "fol_consts": [
        "zelda",
        "nintendo"
      ],
      "fol_rules": [
        "CreatedBy(nintendo, zelda)",
        "∀x (Top10(x) → Japanese(CreatedBy(x)))",
        "∀x (SellsMoreThanMillion(x) → Top10(x))",
        "SellsMoreThanMillion(zelda)"
      ],
      "fol_conc": "¬Top10(zelda)",
      "perplexity": [
        1.0633230209350586,
        1.0234830379486084
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "Japanese(x)",
        "Game(x)",
        "Top10(x)",
        "Sells(x, y)"
      ],
      "fol_consts": [
        "zelda",
        "nintendo",
        "top10"
      ],
      "fol_rules": [
        "Created(nintendo, zelda)",
        "∀x (Top10(x) → Japanese(y))",
        "∀x (Sells(x, 1000000) → Top10(x))",
        "Sells(zelda, 1000000)"
      ],
      "fol_conc": "¬Top10(zelda)",
      "perplexity": 1.4146766662597656
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Square(x)",
        "FourSided(x)",
        "Shape(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Square(x) → FourSided(x))",
        "∀x (FourSided(x) → Shape(x))"
      ],
      "fol_conc": "∀x (Square(x) → Shape(x))",
      "perplexity": [
        1.0475438833236694,
        1.0160013437271118
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Square(x)",
        "Foursided(x)",
        "Shape(x)"
      ],
      "fol_consts": [
        "x1"
      ],
      "fol_rules": [
        "∀x (Square(x) → Foursided(x))",
        "∀x (Foursided(x) → Shape(x))"
      ],
      "fol_conc": "∀x (Square(x) → Shape(x))",
      "perplexity": 2.207277536392212
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Animal(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock)",
      "perplexity": [
        1.0484532117843628,
        1.0189834833145142
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Cute(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock)",
      "perplexity": 1.4338122606277466
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is not a turtle.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Squirrel(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "¬Turtle(rock)",
      "perplexity": [
        1.0450111627578735,
        1.0196332931518555
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Cute(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "¬Turtle(rock)",
      "perplexity": 1.436998724937439
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Cute(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ∨ Cute(rock)",
      "perplexity": [
        1.0452616214752197,
        1.020784616470337
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "Turtle(rock) ⊕ Cute(rock)",
      "perplexity": 1.4288383722305298
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ⊕ Skittish(rock))",
      "perplexity": [
        1.0334142446517944,
        1.0349528789520264
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ∨ Skittish(rock))",
      "perplexity": 1.3997045755386353
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x Turtle(x)",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock))",
      "perplexity": [
        1.0385316610336304,
        1.0117685794830322
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Squirrel(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "((Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock)))",
      "perplexity": 1.405025839805603
    }
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Popular(x)",
        "NetflixShow(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "karen",
        "lisa",
        "stranger_things",
        "black_mirror"
      ],
      "fol_rules": [
        "Popular(stranger_things)",
        "∀x (Popular(x) → BingeWatch(karen, x))",
        "∀x (BingeWatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, black_mirror)",
        "NetflixShow(black_mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, x, lisa))"
      ],
      "fol_conc": "Share(karen, stranger_things, lisa)",
      "perplexity": [
        1.037302851676941,
        1.0125751495361328
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Netflix(x)",
        "Binge(x, y)",
        "Download(x, y)",
        "Share(x, y)"
      ],
      "fol_consts": [
        "stranger",
        "karen",
        "lisa",
        "blackmirror"
      ],
      "fol_rules": [
        "Popular(stranger) ∧ Netflix(stranger)",
        "∀x (Popular(x) ∧ Netflix(x) → Binge(karen, x))",
        "∀x (Binge(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, blackmirror)",
        "Netflix(blackmirror)",
        "∀x (Binge(karen, x) → Share(karen, lisa))"
      ],
      "fol_conc": "Share(karen, stranger)",
      "perplexity": 1.4779969453811646
    }
  },
  {
    "id": 22,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "\"Black Mirror\" is popular.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Popular(x)",
        "NetflixShow(x)",
        "BingeWatches(x, y)",
        "Downloads(x, y)",
        "Shares(x, y, z)"
      ],
      "fol_consts": [
        "strangerThings",
        "karen",
        "blackMirror",
        "lisa"
      ],
      "fol_rules": [
        "Popular(strangerThings)",
        "∀x (Popular(x) ∧ NetflixShow(x) → BingeWatches(karen, x))",
        "∀x (BingeWatches(karen, x) ↔ Downloads(karen, x))",
        "¬Downloads(karen, blackMirror)",
        "NetflixShow(blackMirror)",
        "∀x (BingeWatches(karen, x) → Shares(karen, x, lisa))"
      ],
      "fol_conc": "Popular(blackMirror)",
      "perplexity": [
        1.0375052690505981,
        1.0149286985397339
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Netflix(x)",
        "Binge(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "stranger",
        "karen",
        "blackmirror",
        "lisa",
        "netflix"
      ],
      "fol_rules": [
        "Popular(stranger) ∧ Netflix(stranger)",
        "∀x (Popular(x) ∧ Netflix(x) → Binge(karen, x))",
        "∀x (Binge(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, blackmirror)",
        "Netflix(blackmirror)",
        "∀x (Binge(karen, x) → Share(karen, x, lisa))"
      ],
      "fol_conc": "Popular(blackmirror)",
      "perplexity": 1.4721132516860962
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Popular(x)",
        "NetflixShow(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y, z)"
      ],
      "fol_consts": [
        "karen",
        "lisa",
        "stranger_things",
        "black_mirror"
      ],
      "fol_rules": [
        "Popular(stranger_things)",
        "∀x (Popular(x) ∧ NetflixShow(x) → BingeWatch(karen, x))",
        "∀x (BingeWatch(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, black_mirror)",
        "NetflixShow(black_mirror)",
        "∀x (BingeWatch(karen, x) → Share(karen, x, lisa))"
      ],
      "fol_conc": "Share(karen, black_mirror, lisa)",
      "perplexity": [
        1.0354349613189697,
        1.0148547887802124
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Netflix(x)",
        "Binge(x, y)",
        "Download(x, y)",
        "Share(x, y)"
      ],
      "fol_consts": [
        "stranger",
        "karen",
        "lisa",
        "blackmirror"
      ],
      "fol_rules": [
        "Popular(stranger) ∧ Netflix(stranger)",
        "∀x (Popular(x) ∧ Netflix(x) → Binge(karen, x))",
        "∀x (Binge(karen, x) ↔ Download(karen, x))",
        "¬Download(karen, blackmirror)",
        "Netflix(blackmirror)",
        "∀x (Binge(karen, x) → Share(karen, lisa))"
      ],
      "fol_conc": "Share(karen, lisa)",
      "perplexity": 1.477156400680542
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulous(x)",
        "LocatedIn(x, y)",
        "Hosted(x, y)",
        "SummerOlympics(x)",
        "WinterOlympics(x)",
        "SummerParalympics(x)",
        "WinterParalympics(x)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "olympics2008",
        "summerOlympicsGames",
        "winterOlympicsGames",
        "summerParalympicsGames",
        "winterParalympicsGames",
        "northernChina"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "MostPopulous(beijing)",
        "LocatedIn(beijing, northernChina)",
        "Hosted(beijing, olympics2008)",
        "Hosted(beijing, summerOlympicsGames)",
        "Hosted(beijing, summerParalympicsGames)",
        "Hosted(beijing, winterOlympicsGames)",
        "Hosted(beijing, winterParalympicsGames)"
      ],
      "fol_conc": "Hosted(beijing, olympics2008) ∧ ∃x (WinterOlympics(x) ∧ Hosted(beijing, x))",
      "perplexity": [
        1.068315029144287,
        1.0078885555267334
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(x)",
        "Located(x, y)",
        "Hosted(x, z)",
        "University(x)",
        "Best(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summerolympics",
        "winterolympics",
        "asiapacific",
        "world"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Mostpopulous(beijing)",
        "Located(beijing, china)",
        "Hosted(beijing, summerolympics) ∧ Hosted(beijing, winterolympics)",
        "Hosted(beijing, summerolympics) ∧ Hosted(beijing, winterolympics) ∧ Hosted(beijing, summerparalympics) ∧ Hosted(beijing, winterparalympics)",
        "∃x (University(x) ∧ Located(x, beijing) ∧ Best(x, asiapacific) ∧ Best(x, world))"
      ],
      "fol_conc": "Hosted(beijing, summerolympics) ∧ Hosted(beijing, winterolympics)",
      "perplexity": 1.3080791234970093
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "CapitalOf(x, y)",
        "MostPopulous(x)",
        "LocatedIn(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "Rank(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northern_china",
        "southern_china",
        "olympics_2008_summer",
        "paralympics_2008_summer",
        "olympics_summer",
        "olympics_winter",
        "paralympics_summer",
        "paralympics_winter",
        "asia_pacific",
        "world"
      ],
      "fol_rules": [
        "CapitalOf(beijing, china)",
        "MostPopulous(beijing)",
        "LocatedIn(beijing, northern_china)",
        "Hosted(beijing, olympics_2008_summer)",
        "Hosted(beijing, paralympics_2008_summer)",
        "Hosted(beijing, olympics_summer) ∧ Hosted(beijing, olympics_winter) ∧ Hosted(beijing, paralympics_summer) ∧ Hosted(beijing, paralympics_winter)",
        "∃x (University(x) ∧ LocatedIn(x, beijing) ∧ Rank(x, asia_pacific) ∧ Rank(x, world))"
      ],
      "fol_conc": "LocatedIn(beijing, southern_china)",
      "perplexity": [
        1.0422943830490112,
        1.0081379413604736
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(x)",
        "Located(x, y)",
        "Hosted(x, z)",
        "University(x)",
        "Best(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northernchina",
        "southernchina",
        "summerolympics",
        "winterolympics",
        "summerparalympics",
        "winterparalympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Mostpopulous(beijing)",
        "Located(beijing, northernchina)",
        "Hosted(beijing, summerolympics) ∧ Hosted(beijing, summerparalympics)",
        "Hosted(beijing, summerolympics) ∧ Hosted(beijing, winterolympics) ∧ Hosted(beijing, summerparalympics) ∧ Hosted(beijing, winterparalympics)",
        "∃x (University(x) ∧ Located(x, beijing) ∧ Best(x, china))"
      ],
      "fol_conc": "Located(beijing, southernchina)",
      "perplexity": 1.3104465007781982
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "MostPopulous(x)",
        "LocatedIn(x, y)",
        "Hosted(x, y)",
        "University(x)",
        "RankAmong(x, y, z)",
        "SecondLargest(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northern_china",
        "olympics_2008_summer",
        "paralympics_2008_summer",
        "olympics_summer",
        "olympics_winter",
        "paralympics_summer",
        "paralympics_winter",
        "asia_pacific",
        "world"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "MostPopulous(beijing)",
        "LocatedIn(beijing, northern_china)",
        "Hosted(beijing, olympics_2008_summer)",
        "Hosted(beijing, paralympics_2008_summer)",
        "∀x (Hosted(beijing, x) ↔ (x = olympics_2008_summer ∨ x = paralympics_2008_summer ∨ x = olympics_summer ∨ x = paralympics_summer ∨ x = olympics_winter ∨ x = paralympics_winter))",
        "∃x (University(x) ∧ RankAmong(x, asia_pacific, world))"
      ],
      "fol_conc": "SecondLargest(beijing, china)",
      "perplexity": [
        1.0752580165863037,
        1.0120511054992676
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Mostpopulous(x)",
        "Located(x, y)",
        "Hosted(x, z)",
        "University(x)",
        "Best(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "northernchina",
        "summerolympics",
        "summerparalympics",
        "winterolympics",
        "winterparalympics"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Mostpopulous(beijing)",
        "Located(beijing, northernchina)",
        "Hosted(beijing, summerolympics) ∧ Hosted(beijing, summerparalympics)",
        "Hosted(beijing, summerolympics) ∧ Hosted(beijing, winterolympics) ∧ Hosted(beijing, summerparalympics) ∧ Hosted(beijing, winterparalympics)",
        "∃x (University(x) ∧ Located(x, beijing) ∧ Best(x, asiapacific) ∧ Best(x, world))"
      ],
      "fol_conc": "¬Secondlargest(beijing, china)",
      "perplexity": 1.3394583463668823
    }
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromMars(x)",
        "Human(x)",
        "FromEarth(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (FromMars(x) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (FromEarth(x) → Human(x))",
        "¬(FromEarth(marvin) ∧ FromMars(marvin))",
        "¬FromEarth(marvin) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": [
        1.054545521736145,
        1.019573450088501
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin",
        "earth",
        "mars"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬From(marvin, earth) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 1.3978737592697144
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "FromMars(x)",
        "FromEarth(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (FromMars(x) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (FromEarth(x) → Human(x))",
        "¬(FromEarth(marvin) ∧ FromMars(marvin))",
        "¬FromEarth(marvin) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "¬Human(marvin) ∧ ¬FromMars(marvin)",
      "perplexity": [
        1.0264240503311157,
        1.015573501586914
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬From(marvin, earth) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "¬(Human(marvin) ∨ From(marvin, mars))",
      "perplexity": 1.383319616317749
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "FromMars(x)",
        "Human(x)",
        "FromEarth(x)"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (FromMars(x) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (FromEarth(x) → Human(x))",
        "¬(FromEarth(Marvin) ∧ FromMars(Marvin))",
        "¬FromEarth(Marvin) → Extraterrestrial(Marvin)"
      ],
      "fol_conc": "¬FromMars(Marvin) → Human(Marvin)",
      "perplexity": [
        1.039749026298523,
        1.0154317617416382
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)"
      ],
      "fol_consts": [
        "marvin",
        "mars",
        "earth"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬From(marvin, earth) → Extraterrestrial(marvin)"
      ],
      "fol_conc": "¬From(marvin, mars) → Human(marvin)",
      "perplexity": 1.3781497478485107
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominated(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominated(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominated(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic)"
      ],
      "fol_conc": "GrandSlamChampion(djokovic)",
      "perplexity": [
        1.025163173675537,
        1.0114010572433472
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Liveintaxhaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ⊕ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Liveintaxhaven(x))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Wellpaid(djokovic)"
      ],
      "fol_conc": "Grandslamchampion(djokovic)",
      "perplexity": 1.2984929084777832
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominated(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominated(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominated(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic)"
      ],
      "fol_conc": "LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.0467318296432495,
        1.0120596885681152
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Liveintaxhaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ⊕ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Liveintaxhaven(x))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Wellpaid(djokovic)"
      ],
      "fol_conc": "Liveintaxhaven(djokovic)",
      "perplexity": 1.294435739517212
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominated(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LiveInTaxHaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominated(x))",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))",
        "∀x (OscarNominated(x) → Celebrity(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LiveInTaxHaven(x))",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic)"
      ],
      "fol_conc": "¬LiveInTaxHaven(djokovic)",
      "perplexity": [
        1.0277637243270874,
        1.014035940170288
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslamchampion(x)",
        "Oscarnominated(x)",
        "Professionaltennisplayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Wellpaid(x)",
        "Famous(x)",
        "Liveintaxhaven(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslamchampion(x) ⊕ Oscarnominated(x))",
        "∀x (Grandslamchampion(x) → Professionaltennisplayer(x))",
        "∀x (Oscarnominated(x) → Celebrity(x))",
        "∀x (Professionaltennisplayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Liveintaxhaven(x))",
        "Famous(djokovic) ∧ Athlete(djokovic) → Wellpaid(djokovic)"
      ],
      "fol_conc": "¬Liveintaxhaven(djokovic)",
      "perplexity": 1.3474464416503906
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamond_mine",
        "wwe",
        "roderick_strong",
        "creed_brothers",
        "ivy_nile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamond_mine)",
        "FormedIn(diamond_mine, wwe)",
        "Leads(roderick_strong, diamond_mine)",
        "Includes(diamond_mine, creed_brothers)",
        "Includes(diamond_mine, ivy_nile)",
        "Feud(imperium, diamond_mine)"
      ],
      "fol_conc": "Leads(roderick_strong, diamond_mine)",
      "perplexity": [
        1.0622143745422363,
        1.0202054977416992
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Professional(x)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium",
        "wwe"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Professional(diamondmine)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Leads(roderickstrong, x) ∧ Stable(x) ∧ Professional(x)",
      "perplexity": 1.4661495685577393
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "WrestlingStable(x)",
        "FormedIn(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamondMine",
        "wwe",
        "roderickStrong",
        "creedBrothers",
        "ivyNile",
        "imperium"
      ],
      "fol_rules": [
        "WrestlingStable(diamondMine)",
        "FormedIn(diamondMine, wwe)",
        "Leads(roderickStrong, diamondMine)",
        "Includes(diamondMine, creedBrothers)",
        "Includes(diamondMine, ivyNile)",
        "FeudWith(imperium, diamondMine)"
      ],
      "fol_conc": "Leads(roderickStrong, creedBrothers)",
      "perplexity": [
        1.068908929824829,
        1.0200506448745728
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Formed(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "wwe",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine)",
        "Formed(diamondmine, wwe)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "Leads(roderickstrong, creedbrothers)",
      "perplexity": 1.4887969493865967
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "WrestlingStable(x)",
        "FormedIn(x, y)",
        "Lead(x, y)",
        "Include(x, y)",
        "FeudWith(x, y)"
      ],
      "fol_consts": [
        "diamondMine",
        "wwe",
        "roderickStrong",
        "creedBrothers",
        "ivyNile",
        "imperium"
      ],
      "fol_rules": [
        "WrestlingStable(diamondMine)",
        "FormedIn(diamondMine, wwe)",
        "Lead(roderickStrong, diamondMine)",
        "Include(diamondMine, creedBrothers)",
        "Include(diamondMine, ivyNile)",
        "FeudWith(imperium, diamondMine)"
      ],
      "fol_conc": "¬∃x (WrestlingStable(x) ∧ Include(x, ivyNile) ∧ FeudWith(imperium, x))",
      "perplexity": [
        1.0468004941940308,
        1.0198997259140015
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Professional(x)",
        "Formed(x, y)",
        "Leads(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "wwe",
        "roderickstrong",
        "creedbrothers",
        "ivynile",
        "imperium"
      ],
      "fol_rules": [
        "Stable(diamondmine) ∧ Professional(diamondmine)",
        "Formed(diamondmine, wwe)",
        "Leads(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Includes(diamondmine, ivynile)",
        "Feud(imperium, diamondmine)"
      ],
      "fol_conc": "¬(∃x (Stable(x) ∧ Includes(x, ivynile) ∧ Feud(imperium, x)))",
      "perplexity": 1.4215344190597534
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiere(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "vienna"
      ],
      "fol_rules": [
        "MusicPiece(symphony9)",
        "∀x (Composer(x) → Write(x, y))",
        "Write(beethoven, symphony9)",
        "Premiere(vienna, symphony9)",
        "Orchestra(vienna)",
        "Lead(beethoven, vienna)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": [
        1.059694766998291,
        1.0220054388046265
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiere(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "vienna"
      ],
      "fol_rules": [
        "Music(symphony9)",
        "∀x (Composer(x) → Write(x, y))",
        "Write(beethoven, symphony9)",
        "Premiere(vienna, symphony9)",
        "Orchestra(vienna)",
        "Lead(beethoven, vienna)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))"
      ],
      "fol_conc": "Composer(beethoven)",
      "perplexity": 1.4164663553237915
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Write(x, y)",
        "Premiere(x, y)",
        "Lead(x, y)",
        "Orchestra(x)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony_no_9",
        "beethoven",
        "vienna_music_society"
      ],
      "fol_rules": [
        "MusicPiece(symphony_no_9)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))",
        "∀x (Write(x, y) → MusicPiece(y))",
        "Write(beethoven, symphony_no_9)",
        "Premiere(vienna_music_society, symphony_no_9)",
        "Orchestra(vienna_music_society)",
        "Lead(beethoven, vienna_music_society)"
      ],
      "fol_conc": "∃x (Orchestra(x) ∧ ∃y (MusicPiece(y) ∧ Premiere(x, y)))",
      "perplexity": [
        1.0421983003616333,
        1.0226980447769165
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiere(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "vienna"
      ],
      "fol_rules": [
        "Music(symphony9)",
        "∀x (Composer(x) → ∃y (Music(y) ∧ Write(x, y)))",
        "Write(beethoven, symphony9)",
        "Premiere(vienna, symphony9)",
        "Orchestra(vienna)",
        "Lead(beethoven, vienna)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))"
      ],
      "fol_conc": "∃x (Orchestra(x) ∧ ∃y (Music(y) ∧ Premiere(x, y)))",
      "perplexity": 1.3462690114974976
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is not a conductor.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiere(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony_no_9",
        "beethoven",
        "vienna_music_society"
      ],
      "fol_rules": [
        "MusicPiece(symphony_no_9)",
        "∀x (Composer(x) → ∃y (MusicPiece(y) ∧ Write(x, y)))",
        "Write(beethoven, symphony_no_9)",
        "Premiere(vienna_music_society, symphony_no_9)",
        "Orchestra(vienna_music_society)",
        "Lead(beethoven, vienna_music_society)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))"
      ],
      "fol_conc": "¬Conductor(beethoven)",
      "perplexity": [
        1.035018801689148,
        1.0141404867172241
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Music(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiere(x, y)",
        "Orchestra(x)",
        "Lead(x, y)",
        "Conductor(x)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "vienna"
      ],
      "fol_rules": [
        "Music(symphony9)",
        "∀x (Composer(x) → ∃y (Music(y) ∧ Write(x, y)))",
        "Write(beethoven, symphony9)",
        "Premiere(vienna, symphony9)",
        "Orchestra(vienna)",
        "Lead(beethoven, vienna)",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))"
      ],
      "fol_conc": "¬Conductor(beethoven)",
      "perplexity": 1.3786382675170898
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "ZahaStyle(x)",
        "KellyStyle(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "MaxDesign(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (ZahaStyle(x) → Timeless(x))",
        "¬∃x (MassProduct(x) ∧ Timeless(x))",
        "ZahaStyle(x) ∨ KellyStyle(x)",
        "∀x (KellyStyle(x) → Evocative(x))",
        "∀x (KellyStyle(x) → Dreamy(x))",
        "∀x (Timeless(x) ∧ MaxDesign(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "∃x (MaxDesign(x) ∧ MassProduct(x))",
      "perplexity": [
        1.059322476387024,
        1.0155513286590576
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Design(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (Zaha(x) → Timeless(x))",
        "¬(Mass(x) ∧ Timeless(x))",
        "Zaha(x) ⊕ Kelly(x)",
        "∀x (Kelly(x) → Evocative(x))",
        "∀x (Kelly(x) → Dreamy(x))",
        "Timeless(x) → (Mass(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Mass(max)",
      "perplexity": 1.4841066598892212
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "ZahaHadidDesign(x)",
        "KellyWearstlerDesign(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "MaxDesign(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (ZahaHadidDesign(x) → Timeless(x))",
        "¬∃x (MassProduct(x) ∧ Timeless(x))",
        "ZahaHadidDesign(x) ⊕ KellyWearstlerDesign(x)",
        "∀x (KellyWearstlerDesign(x) → Evocative(x))",
        "∀x (KellyWearstlerDesign(x) → Dreamy(x))",
        "∀x (Timeless(x) ∧ MaxDesign(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "Evocative(x) ∧ Dreamy(x)",
      "perplexity": [
        1.0577807426452637,
        1.026502251625061
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Design(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (Zaha(x) → Timeless(x))",
        "¬(Mass(x) ∧ Timeless(x))",
        "Zaha(x) ⊕ Kelly(x)",
        "∀x (Kelly(x) → Evocative(x))",
        "∀x (Kelly(x) → Dreamy(x))",
        "Timeless(x) → (Mass(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Evocative(max) ∧ Dreamy(max)",
      "perplexity": 1.4564322233200073
    }
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Timeless(x)",
        "MassProduct(x)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Max(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Zaha(x) → Timeless(x))",
        "¬∃x (MassProduct(x) ∧ Timeless(x))",
        "Zaha(x) ⊕ Kelly(x)",
        "∀x (Kelly(x) → Evocative(x))",
        "∀x (Kelly(x) → Dreamy(x))",
        "∀x (Timeless(x) ∧ Max(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "∃x (Max(x) ∧ (Evocative(x) ∨ Dreamy(x)))",
      "perplexity": [
        1.0603010654449463,
        1.017932415008545
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Timeless(x)",
        "Mass(x)",
        "Zaha(x)",
        "Kelly(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Design(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (Zaha(x) → Timeless(x))",
        "¬(Mass(x) ∧ Timeless(x))",
        "Zaha(x) ⊕ Kelly(x)",
        "∀x (Kelly(x) → Evocative(x))",
        "∀x (Kelly(x) → Dreamy(x))",
        "Timeless(x) → (Mass(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Evocative(max) ⊕ Dreamy(max)",
      "perplexity": 1.468687653541565
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": [
        "All cats are mammals.",
        "Some pets are not mammals."
      ],
      "question": "No pets are cats.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Cat(x)",
        "Mammal(x)",
        "Pet(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Cat(x) → Mammal(x))",
        "∃x (Pet(x) ∧ ¬Mammal(x))"
      ],
      "fol_conc": "¬∃x (Pet(x) ∧ Cat(x))",
      "perplexity": [
        1.0485111474990845,
        1.0349526405334473
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cat(x)",
        "Mammal(x)",
        "Pet(x)"
      ],
      "fol_consts": [
        "x1"
      ],
      "fol_rules": [
        "∀x (Cat(x) → Mammal(x))",
        "∃x (Pet(x) ∧ ¬Mammal(x))"
      ],
      "fol_conc": "¬(∃x (Pet(x) ∧ Cat(x)))",
      "perplexity": 2.109633445739746
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "WantsLongVacation(x)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x (Student(x) ∧ WantsLongVacation(x) → FavoriteSeason(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(mia, summer))",
        "WantsLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(james, summer)",
      "perplexity": [
        1.0603365898132324,
        1.022339940071106
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Year(x)",
        "Student(x)",
        "Want(x, y)",
        "Love(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x) → (Be1(x, spring) ⊕ Be1(x, summer) ⊕ Be1(x, fall) ⊕ Be1(x, winter)))",
        "∀x (Student(x) ∧ Want(x, longvacation) → Love(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "Want(james, longvacation)"
      ],
      "fol_conc": "Love(james, summer)",
      "perplexity": 1.5284349918365479
    }
  },
  {
    "id": 47,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is fall.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "WantsLongVacation(x)",
        "FavoriteSeason(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x (Student(x) ∧ WantsLongVacation(x) → FavoriteSeason(x, summer))",
        "FavoriteSeason(emma, summer)",
        "¬(FavoriteSeason(mia, summer))",
        "WantsLongVacation(james)"
      ],
      "fol_conc": "FavoriteSeason(james, fall)",
      "perplexity": [
        1.0360978841781616,
        1.0334885120391846
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Year(x)",
        "Student(x)",
        "Want(x, y)",
        "Favorite(x, y)",
        "Long(x)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x) → (Be1(x, spring) ⊕ Be1(x, summer) ⊕ Be1(x, fall) ⊕ Be1(x, winter)))",
        "∀x (Student(x) ∧ Want(x, long) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer) ↔ Favorite(emma, summer))",
        "Want(james, long)"
      ],
      "fol_conc": "Favorite(james, fall)",
      "perplexity": 1.5359266996383667
    }
  },
  {
    "id": 48,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "Mia's favorite season is spring.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "LongVacation(x)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter)",
        "∀x (Student(x) ∧ LongVacation(x) → Favorite(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer) ↔ Favorite(emma, summer))",
        "LongVacation(james)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": [
        1.0501517057418823,
        1.0166728496551514
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Year(x)",
        "Student(x)",
        "Want(x, y)",
        "Love(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ∧ ∀x (Year(x) → (Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)))",
        "∀x ((Student(x) ∧ Want(x, y)) → Love(x, summer))",
        "Favorite(emma, summer)",
        "¬(Favorite(mia, summer))",
        "Want(james, y)"
      ],
      "fol_conc": "Favorite(mia, spring)",
      "perplexity": 1.3754231929779053
    }
  },
  {
    "id": 49,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is printed text.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "_1984"
      ],
      "fol_rules": [
        "∀x (¬Digital(x) ∨ ¬Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "StreamingService(_1984) → HardcoverBook(_1984)"
      ],
      "fol_conc": "PrintedText(_1984)",
      "perplexity": [
        1.063968539237976,
        1.018990397453308
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "∀x (¬Digital(x) ∨ ¬Analog(x))",
        "∀x (Printed(x) → Analog(x))",
        "∀x (Streaming(x) → Digital(x))",
        "∀x (Hardcover(x) → Printed(x))",
        "Streaming(1984) → Hardcover(1984)"
      ],
      "fol_conc": "Printed(1984)",
      "perplexity": 1.5178970098495483
    }
  },
  {
    "id": 50,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is a streaming service.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "_1984"
      ],
      "fol_rules": [
        "∀x ¬(Digital(x) ∧ Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "StreamingService(_1984) → HardcoverBook(_1984)"
      ],
      "fol_conc": "StreamingService(_1984)",
      "perplexity": [
        1.0535311698913574,
        1.0251816511154175
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬(Digital(x) ∧ Analog(x))",
        "∀x (Printed(x) → Analog(x))",
        "∀x (Streaming(x) → Digital(x))",
        "∀x (Hardcover(x) → Printed(x))",
        "Streaming(1984) → Hardcover(1984)"
      ],
      "fol_conc": "Streaming(1984)",
      "perplexity": 1.5026451349258423
    }
  },
  {
    "id": 51,
    "nl_problem": {
      "context": [
        "No digital media are analog.",
        "Every printed text is analog.",
        "All streaming services are digital.",
        "If an object is a hardcover book then it is printed text.",
        "If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "question": "1984 is not a streaming service.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "PrintedText(x)",
        "StreamingService(x)",
        "HardcoverBook(x)"
      ],
      "fol_consts": [
        "nineteenEightyFour"
      ],
      "fol_rules": [
        "∀x ¬(Digital(x) ∧ Analog(x))",
        "∀x (PrintedText(x) → Analog(x))",
        "∀x (StreamingService(x) → Digital(x))",
        "∀x (HardcoverBook(x) → PrintedText(x))",
        "StreamingService(nineteenEightyFour) → HardcoverBook(nineteenEightyFour)"
      ],
      "fol_conc": "¬StreamingService(nineteenEightyFour)",
      "perplexity": [
        1.034699559211731,
        1.0215082168579102
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Digital(x)",
        "Analog(x)",
        "Printed(x)",
        "Streaming(x)",
        "Hardcover(x)"
      ],
      "fol_consts": [
        "1984"
      ],
      "fol_rules": [
        "¬(Digital(x) ∧ Analog(x))",
        "∀x (Printed(x) → Analog(x))",
        "∀x (Streaming(x) → Digital(x))",
        "∀x (Hardcover(x) → Printed(x))",
        "Streaming(1984) → Hardcover(1984)"
      ],
      "fol_conc": "¬Streaming(1984)",
      "perplexity": 1.5089048147201538
    }
  },
  {
    "id": 52,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "Basque is a Romance language.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Romance(x)",
        "IndoEuropean(x)",
        "LanguageFamily(x)",
        "Related(x, y)",
        "Member(y, x)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → IndoEuropean(x))",
        "LanguageFamily(romance)",
        "∀x ∀y ((LanguageFamily(x) ∧ Member(y, x)) → Related(y, y))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "∀x ¬Related(basque, x)"
      ],
      "fol_conc": "¬Romance(basque)",
      "perplexity": [
        1.0768464803695679,
        1.0263936519622803
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Romance(x)",
        "Indoeuropean(x)",
        "Languagefamily(x)",
        "Related(x, y)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → Indoeuropean(x))",
        "Languagefamily(romance)",
        "∀x (Languagefamily(x) → ∀y ∀z ((Related(y, x) ∧ Related(z, x)) → Related(y, z)))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "¬(∃x (Related(basque, x)))"
      ],
      "fol_conc": "Romance(basque)",
      "perplexity": 1.5833972692489624
    }
  },
  {
    "id": 53,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "German is a Romance language.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "RomanceLanguage(x)",
        "IndoEuropeanLanguage(x)",
        "LanguageFamily(x)",
        "Related(x, y)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
        "LanguageFamily(romance_languages)",
        "∀x ∀y ( (LanguageFamily(x) ∧ Member(y, x)) → Related(y, y) )",
        "RomanceLanguage(french) ∧ RomanceLanguage(spanish)",
        "Related(german, spanish)",
        "∀x (¬Related(basque, x))"
      ],
      "fol_conc": "RomanceLanguage(german)",
      "perplexity": [
        1.1434677839279175,
        1.0304481983184814
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Romance(x)",
        "Indoeuropean(x)",
        "Languagefamily(x)",
        "Related(x, y)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → Indoeuropean(x))",
        "Languagefamily(romance)",
        "∀x (Languagefamily(x) → ∀y ∀z ((Related(y, x) ∧ Related(z, x)) → Related(y, z)))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "¬(∃x (Related(basque, x)))"
      ],
      "fol_conc": "Romance(german)",
      "perplexity": 1.594710111618042
    }
  },
  {
    "id": 54,
    "nl_problem": {
      "context": [
        "All Romance languages are Indo-European languages.",
        "The Romance languages are a language family.",
        "All languages within a language family are related to each other.",
        "French and Spanish are both Romance languages.",
        "German is related to Spanish.",
        "Basque is not related to any other language."
      ],
      "question": "French is an Indo-European language.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "RomanceLanguage(x)",
        "IndoEuropeanLanguage(x)",
        "LanguageFamily(x)",
        "Related(x, y)",
        "MemberOf(x,y)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque",
        "romance"
      ],
      "fol_rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
        "LanguageFamily(romance)",
        "∀x ∀y ( (LanguageFamily(x) ∧ MemberOf(y, x)) → Related(y, y))",
        "RomanceLanguage(french)",
        "RomanceLanguage(spanish)",
        "Related(german, spanish)",
        "¬∃x (Related(basque, x))"
      ],
      "fol_conc": "IndoEuropeanLanguage(french)",
      "perplexity": [
        1.0814331769943237,
        1.032141089439392
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Romance(x)",
        "Indoeuropean(x)",
        "Languagefamily(x)",
        "Related(x, y)"
      ],
      "fol_consts": [
        "french",
        "spanish",
        "german",
        "basque"
      ],
      "fol_rules": [
        "∀x (Romance(x) → Indoeuropean(x))",
        "Languagefamily(romance)",
        "∀x (Languagefamily(x) → ∀y ∀z ((Related(y, x) ∧ Related(z, x)) → Related(y, z)))",
        "Romance(french)",
        "Romance(spanish)",
        "Related(german, spanish)",
        "¬(∃x (Related(basque, x)))"
      ],
      "fol_conc": "Indoeuropean(french)",
      "perplexity": 1.5974096059799194
    }
  },
  {
    "id": 55,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a soccer player.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "Left(x, y)",
        "PlayFor(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "Left(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (Left(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "¬PlayFor(robert_lewandowski, bayern_munchen)",
      "perplexity": [
        1.0418049097061157,
        1.0320826768875122
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robert",
        "bayernmunchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayernmunchen)",
        "∀x ∀y (Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Soccerplayer(robert)",
      "perplexity": 1.7659319639205933
    }
  },
  {
    "id": 56,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski plays for Bayern Munchen.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlaysFor(x, y)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlaysFor(x, y))"
      ],
      "fol_conc": "PlaysFor(robert_lewandowski, bayern_munchen)",
      "perplexity": [
        1.03648841381073,
        1.04241943359375
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)"
      ],
      "fol_consts": [
        "robert",
        "bayern"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayern)",
        "∀x ∀y (Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Playfor(robert, bayern)",
      "perplexity": 1.7773573398590088
    }
  },
  {
    "id": 57,
    "nl_problem": {
      "context": [
        "Robert Lewandowski is a striker.",
        "[BG] Strikers are soccer players.",
        "Robert Lewandowski left Bayern Munchen.",
        "[BG] If a player left a team they no longer play for that team."
      ],
      "question": "Robert Lewandowski is a star.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Striker(x)",
        "SoccerPlayer(x)",
        "LeftTeam(x, y)",
        "PlayFor(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robert_lewandowski",
        "bayern_munchen"
      ],
      "fol_rules": [
        "Striker(robert_lewandowski)",
        "∀x (Striker(x) → SoccerPlayer(x))",
        "LeftTeam(robert_lewandowski, bayern_munchen)",
        "∀x ∀y (LeftTeam(x, y) → ¬PlayFor(x, y))"
      ],
      "fol_conc": "Star(robert_lewandowski)",
      "perplexity": [
        1.0480575561523438,
        1.0195337533950806
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Striker(x)",
        "Soccerplayer(x)",
        "Left(x, y)",
        "Playfor(x, y)",
        "Star(x)"
      ],
      "fol_consts": [
        "robert",
        "bayernmunchen"
      ],
      "fol_rules": [
        "Striker(robert)",
        "∀x (Striker(x) → Soccerplayer(x))",
        "Left(robert, bayernmunchen)",
        "∀x ∀y (Left(x, y) → ¬Playfor(x, y))"
      ],
      "fol_conc": "Star(robert)",
      "perplexity": 1.7164726257324219
    }
  },
  {
    "id": 58,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Butte and Pierre are in the same state.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "InState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ InState(billings, montana)",
        "City(butte) ∧ InState(butte, montana)",
        "City(helena) ∧ InState(helena, montana)",
        "City(missoula) ∧ InState(missoula, montana)",
        "City(white_sulphur_springs) ∧ InState(white_sulphur_springs, montana)",
        "City(pierre)",
        "¬InState(pierre, montana)",
        "∀x (InState(x, butte) → ¬InState(x, pierre))"
      ],
      "fol_conc": "¬ (InState(butte, pierre) ⊕ InState(pierre, butte))",
      "perplexity": [
        1.0781447887420654,
        1.0142993927001953
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ Instate(billings, montana)",
        "Instate(butte, montana) ∧ Instate(helena, montana) ∧ Instate(missoula, montana)",
        "Instate(white, montana) ∧ Instate(sulphur, montana) ∧ Instate(butte, montana)",
        "¬Instate(pierre, montana)",
        "Instate(x, butte) → ¬Instate(x, pierre)"
      ],
      "fol_conc": "¬Instate(butte, pierre)",
      "perplexity": 1.4551934003829956
    }
  },
  {
    "id": 59,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Pierre and Bismarck are in the same state.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "InState(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre",
        "bismarck"
      ],
      "fol_rules": [
        "City(billings) ∧ InState(billings, montana)",
        "InState(butte, montana) ∧ InState(helena, montana) ∧ InState(missoula, montana)",
        "City(white_sulphur_springs) ∧ City(butte) ∧ SameState(white_sulphur_springs, butte)",
        "¬InState(pierre, montana)",
        "∀x (InState(x, butte) → ¬InState(x, pierre))"
      ],
      "fol_conc": "SameState(pierre, bismarck)",
      "perplexity": [
        1.0463131666183472,
        1.0140190124511719
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre",
        "bismarck"
      ],
      "fol_rules": [
        "City(billings) ∧ Instate(billings, montana)",
        "Instate(butte, montana) ∧ Instate(helena, montana) ∧ Instate(missoula, montana)",
        "Instate(white, montana) ∧ Instate(sulphur, montana) ∧ Instate(butte, montana)",
        "¬Instate(pierre, montana)",
        "City(x) ∧ Instate(x, butte) → ¬Instate(x, pierre)"
      ],
      "fol_conc": "Instate(pierre, x) ∧ Instate(bismarck, x)",
      "perplexity": 1.4127026796340942
    }
  },
  {
    "id": 60,
    "nl_problem": {
      "context": [
        "Billings is a city in Montana.",
        "Montana includes the cities of Butte, Helena, and Missoula.",
        "White Sulphur Springs and Butte are cities in the same state.",
        "The city of Pierre is not in Montana.",
        "Any city in Butte is not in Pierre."
      ],
      "question": "Montana is home to the city of Missoula.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "City(x)",
        "InState(x, y)",
        "SameState(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white_sulphur_springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ InState(billings, montana)",
        "City(butte) ∧ InState(butte, montana) ∧ City(helena) ∧ InState(helena, montana) ∧ City(missoula) ∧ InState(missoula, montana)",
        "City(white_sulphur_springs) ∧ City(butte) ∧ SameState(white_sulphur_springs, butte)",
        "¬InState(pierre, montana)",
        "∀x (InState(x, butte) → ¬InState(x, pierre))"
      ],
      "fol_conc": "InState(missoula, montana)",
      "perplexity": [
        1.0398985147476196,
        1.013508677482605
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "City(x)",
        "Instate(x, y)"
      ],
      "fol_consts": [
        "billings",
        "montana",
        "butte",
        "helena",
        "missoula",
        "white",
        "sulphur",
        "springs",
        "pierre"
      ],
      "fol_rules": [
        "City(billings) ∧ Instate(billings, montana)",
        "Instate(butte, montana) ∧ Instate(helena, montana) ∧ Instate(missoula, montana)",
        "Instate(white, montana) ∧ Instate(sulphur, montana) ∧ Instate(butte, montana)",
        "¬Instate(pierre, montana)",
        "Instate(x, butte) → ¬Instate(x, pierre)"
      ],
      "fol_conc": "Instate(missoula, montana)",
      "perplexity": 1.4530748128890991
    }
  },
  {
    "id": 61,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has an F1 visa.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasVisa(x, y)",
        "NeedsCPT(x)",
        "NeedsOPT(x)",
        "WantsWork(x)"
      ],
      "fol_consts": [
        "mike",
        "f1",
        "j1"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (HasVisa(x, f1) ⊕ HasVisa(x, j1)))",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ HasVisa(x, f1) ∧ WantsWork(x) → (NeedsCPT(x) ∨ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "WantsWork(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "HasVisa(mike, f1)",
      "perplexity": [
        1.0700784921646118,
        1.0208312273025513
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)",
        "Student(x)"
      ],
      "fol_consts": [
        "mike",
        "us"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ⊕ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Needs(x, work) → (Apply(x, cpt) ∨ Apply(x, opt)))",
        "Student(mike)",
        "Needs(mike, work)"
      ],
      "fol_conc": "F1visa(mike)",
      "perplexity": 1.572572946548462
    }
  },
  {
    "id": 62,
    "nl_problem": {
      "context": [
        "International students in US have either an F1 visa or a J1 visa.",
        "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "Mike is an international student.",
        "Mike needs to apply for CPT if he wants to work in the US."
      ],
      "question": "Mike has a J1 visa.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "InternationalStudent(x)",
        "InUS(x)",
        "HasF1(x)",
        "HasJ1(x)",
        "NeedsCPT(x)",
        "WantsWork(x)",
        "NeedsOPT(x)"
      ],
      "fol_consts": [
        "mike"
      ],
      "fol_rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → (HasF1(x) ⊕ HasJ1(x)))",
        "∀x ((InternationalStudent(x) ∧ InUS(x) ∧ HasF1(x) ∧ WantsWork(x)) → (NeedsCPT(x) ⊕ NeedsOPT(x)))",
        "InternationalStudent(mike)",
        "WantsWork(mike)",
        "NeedsCPT(mike)"
      ],
      "fol_conc": "HasJ1(mike)",
      "perplexity": [
        1.0806635618209839,
        1.0151402950286865
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "International(x)",
        "Inus(x)",
        "F1visa(x)",
        "J1visa(x)",
        "Needs(x, y)",
        "Work(x)",
        "Apply(x, y)",
        "Student(x)"
      ],
      "fol_consts": [
        "mike",
        "us"
      ],
      "fol_rules": [
        "∀x (International(x) ∧ Inus(x) → (F1visa(x) ⊕ J1visa(x)))",
        "∀x (International(x) ∧ Inus(x) ∧ F1visa(x) ∧ Needs(x, work) → (Apply(x, cpt) ∨ Apply(x, opt)))",
        "Student(mike)",
        "Needs(mike, work)"
      ],
      "fol_conc": "J1visa(mike)",
      "perplexity": 1.5900973081588745
    }
  },
  {
    "id": 63,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "Ted is a pet.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Cow(x)",
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Cow(x) → Bovine(x))",
        "∃x (Pet(x) ∧ Cow(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))",
        "Alligator(ted)"
      ],
      "fol_conc": "¬Pet(ted)",
      "perplexity": [
        1.0489346981048584,
        1.029747486114502
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cow(x)",
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Cow(x) → Bovine(x))",
        "∃x (Pet(x) ∧ Cow(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))",
        "Alligator(ted)"
      ],
      "fol_conc": "Pet(ted)",
      "perplexity": 1.4623531103134155
    }
  },
  {
    "id": 64,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "Ted is a pet and a cow.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Cow(x)",
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Cow(x) → Bovine(x))",
        "∃x (Pet(x) ∧ Cow(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))",
        "Alligator(ted)"
      ],
      "fol_conc": "Pet(ted) ∧ Cow(ted)",
      "perplexity": [
        1.0669740438461304,
        1.0211491584777832
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cow(x)",
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Cow(x) → Bovine(x))",
        "∃x (Pet(x) ∧ Cow(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))",
        "Alligator(ted)"
      ],
      "fol_conc": "Pet(ted) ∧ Cow(ted)",
      "perplexity": 1.4382667541503906
    }
  },
  {
    "id": 65,
    "nl_problem": {
      "context": [
        "All cows are bovines.",
        "Some pets are cows.",
        "If something is a bovine, then it is domesticated.",
        "No domesticated animals are alligators.",
        "Ted is an aligator."
      ],
      "question": "If Ted is a cow, then Ted is not a pet.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Cow(x)",
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Cow(x) → Bovine(x))",
        "∃x (Pet(x) ∧ Cow(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))",
        "Alligator(ted)"
      ],
      "fol_conc": "Cow(ted) → ¬Pet(ted)",
      "perplexity": [
        1.0295302867889404,
        1.0227631330490112
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cow(x)",
        "Bovine(x)",
        "Pet(x)",
        "Domesticated(x)",
        "Alligator(x)"
      ],
      "fol_consts": [
        "ted"
      ],
      "fol_rules": [
        "∀x (Cow(x) → Bovine(x))",
        "∃x (Pet(x) ∧ Cow(x))",
        "∀x (Bovine(x) → Domesticated(x))",
        "∀x (Domesticated(x) → ¬Alligator(x))",
        "Alligator(ted)"
      ],
      "fol_conc": "¬(Cow(ted) ∧ Pet(ted))",
      "perplexity": 1.440580129623413
    }
  },
  {
    "id": 66,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "A private Ivy League research university moved to New Haven.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "PrivateUniversity(x)",
        "IvyLeague(x)",
        "ResearchUniversity(x)",
        "MovedTo(x, y, z)",
        "EndowmentValue(x, y)",
        "ConstituentCollege(x, y)",
        "ResidentialCollege(x)",
        "ProfessionalSchool(x)"
      ],
      "fol_consts": [
        "yale",
        "new_haven",
        "benjamin_franklin",
        "berkeley",
        "1716",
        "42.3"
      ],
      "fol_rules": [
        "PrivateUniversity(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "EndowmentValue(yale, 42.3)",
        "ConstituentCollege(yale, benjamin_franklin) ∧ ConstituentCollege(yale, berkeley) ∧ ... ∧ ConstituentCollege(yale, trumbull)",
        "ResidentialCollege(benjamin_franklin) ∧ ResidentialCollege(berkeley) ∧ ... ∧ ResidentialCollege(trumbull)"
      ],
      "fol_conc": "∃x (PrivateUniversity(x) ∧ IvyLeague(x) ∧ ResearchUniversity(x) ∧ MovedTo(x, new_haven, 1716))",
      "perplexity": [
        1.09101140499115,
        1.0202137231826782
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Private(x)",
        "Ivy(x)",
        "Research(x)",
        "University(x)",
        "Moved(x, y)",
        "Endowment(x, z)",
        "Organized(x, y)",
        "Residential(x)",
        "College(x)",
        "School(x)",
        "List(x, y)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "benjamin",
        "franklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra",
        "stiles",
        "grace",
        "hopper",
        "jonathan",
        "edwards",
        "morse",
        "pauli",
        "murray",
        "pierson",
        "saybrook",
        "silliman",
        "timothy",
        "dwight",
        "trumbull"
      ],
      "fol_rules": [
        "Private(yale) ∧ Ivy(yale) ∧ Research(yale) ∧ University(yale)",
        "Moved(yale, newhaven)",
        "Endowment(yale, 42300000000)",
        "Organized(yale, 27)",
        "Residential(benjamin) ∧ College(benjamin)",
        "Residential(berkeley) ∧ College(berkeley)",
        "Residential(branford) ∧ College(branford)",
        "Residential(davenport) ∧ College(davenport)",
        "Residential(ezra) ∧ College(ezra)",
        "Residential(stiles) ∧ College(stiles)",
        "Residential(grace) ∧ College(grace)",
        "Residential(hopper) ∧ College(hopper)",
        "Residential(jonathan) ∧ College(jonathan)",
        "Residential(edwards) ∧ College(edwards)",
        "Residential(morse) ∧ College(morse)",
        "Residential(pauli) ∧ College(pauli)",
        "Residential(murray) ∧ College(murray)",
        "Residential(pierson) ∧ College(pierson)",
        "Residential(saybrook) ∧ College(saybrook)",
        "Residential(silliman) ∧ College(silliman)",
        "Residential(timothy) ∧ College(timothy)",
        "Residential(dwight) ∧ College(dwight)",
        "Residential(trumbull) ∧ College(trumbull)",
        "List(yale, benjamin) ∧ List(yale, franklin) ∧ List(yale, berkeley) ∧ List(yale, branford) ∧ List(yale, davenport) ∧ List(yale, ezra)"
      ],
      "fol_conc": "∃x (Private(x) ∧ Ivy(x) ∧ Research(x) ∧ University(x) ∧ Moved(x, newhaven))",
      "perplexity": 1.1506155729293823
    }
  },
  {
    "id": 69,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Sitcom(x)",
        "Star(x, y)",
        "Pilot(x, y, z)",
        "WorkingTitle(x, y)",
        "ScriptEditor(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappy's",
        "july",
        "bbcThree",
        "secretDudeSociety",
        "andrewCollins"
      ],
      "fol_rules": [
        "Sitcom(badults) ∧ Star(pappy's, badults)",
        "Pilot(badults, july, bbcThree)",
        "WorkingTitle(badults, secretDudeSociety)",
        "ScriptEditor(andrewCollins, badults)"
      ],
      "fol_conc": "ScriptEditor(andrewCollins, x) ∧ WorkingTitle(x, secretDudeSociety)",
      "perplexity": [
        1.06349778175354,
        1.0201072692871094
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sitcom(x)",
        "Starring(x, y)",
        "Pilot(x, y)",
        "Workingtitle(x, y)",
        "Scripteditor(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "july2013",
        "bbcthree",
        "secretdudesociety",
        "andrewcollins"
      ],
      "fol_rules": [
        "Sitcom(badults) ∧ Starring(badults, pappys)",
        "Pilot(badults, july2013) ∧ Pilot(badults, bbcthree)",
        "Workingtitle(badults, secretdudesociety)",
        "Scripteditor(andrewcollins, badults)"
      ],
      "fol_conc": "Scripteditor(andrewcollins, x) ∧ Workingtitle(x, secretdudesociety)",
      "perplexity": 1.478580355644226
    }
  },
  {
    "id": 70,
    "nl_problem": {
      "context": [
        "Badults is a British Sitcom series, starring members of Pappy's.",
        "Badults piloted in July 2013 on BBC Three.",
        "The Working title \"The Secret Dude Society\" was used for Badults.",
        "Andrew Collins was the script editor for Badults"
      ],
      "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Sitcom(x)",
        "Starring(x, y)",
        "Member(x, y)",
        "Piloted(x, y, z)",
        "WorkingTitle(x, y)",
        "ScriptEditor(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappy",
        "july",
        "bbc_three",
        "andrew_collins",
        "bbc_two"
      ],
      "fol_rules": [
        "Sitcom(badults) ∧ Starring(pappy, badults)",
        "Piloted(badults, july, 2013) ∧ Piloted(badults, july, 2013)",
        "WorkingTitle(badults, \"The Secret Dude Society\")",
        "ScriptEditor(andrew_collins, badults)"
      ],
      "fol_conc": "¬∃x (Member(x, pappy) ∧ ∃y (Starring(x, y) ∧ (Piloted(y, _, bbc_two) ∨ Piloted(y, _, bbc_three))))",
      "perplexity": [
        1.081436276435852,
        1.009772539138794
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Sitcom(x)",
        "Starring(x, y)",
        "Member(x, y)",
        "Pilot(x, y, z)",
        "Workingtitle(x, y)",
        "Scripteditor(x, y)"
      ],
      "fol_consts": [
        "badults",
        "pappys",
        "bbcthree",
        "bbc2",
        "july2013",
        "andrewcollins",
        "secretdudesociety"
      ],
      "fol_rules": [
        "Sitcom(badults) ∧ Starring(badults, pappys)",
        "Pilot(badults, july2013, bbcthree)",
        "Workingtitle(badults, secretdudesociety)",
        "Scripteditor(andrewcollins, badults)"
      ],
      "fol_conc": "¬(∃x (Member(x, pappys) ∧ (Pilot(y, z, bbcthree) ∨ Pilot(y, z, bbc2))))",
      "perplexity": 1.4599577188491821
    }
  },
  {
    "id": 71,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "GrowthStock(x)",
        "Stock(x)",
        "Company(x)",
        "Volatile(x)",
        "Suitable(x)",
        "Mature(x)"
      ],
      "fol_consts": [
        "KO"
      ],
      "fol_rules": [
        "∀x (GrowthStock(x) → Volatile(x))",
        "∀x (Volatile(x) → ¬Suitable(x))",
        "∃x∃y (Stock(x) ∧ Company(y) ∧ GrowthStock(x))",
        "∀x (Stock(x) ∧ Mature(x) → Suitable(x))",
        "Stock(KO) ∧ Mature(KO)"
      ],
      "fol_conc": "Stock(KO)",
      "perplexity": [
        1.0868463516235352,
        1.0148512125015259
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Growth(x)",
        "Volatile(x)",
        "Suitable(x)",
        "Stock(x, y)",
        "Mature(y)",
        "Company(y)"
      ],
      "fol_consts": [
        "ko"
      ],
      "fol_rules": [
        "∀x (Growth(x) → Volatile(x))",
        "∀x (Volatile(x) → ¬Suitable(x))",
        "∃x ∃y (Stock(x, y) ∧ Growth(x))",
        "∀x (Mature(x) → Suitable(x))",
        "Stock(ko, y) ∧ Mature(y)"
      ],
      "fol_conc": "Stock(ko, x)",
      "perplexity": 1.535947322845459
    }
  },
  {
    "id": 72,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "KO is a company stock and a growth stock of a company.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "GrowthStock(x, y)",
        "Volatile(x)",
        "SuitableRetirement(x)",
        "Stock(x, y)",
        "MatureCompany(x)"
      ],
      "fol_consts": [
        "KO"
      ],
      "fol_rules": [
        "∀x ∀y (GrowthStock(x, y) → Volatile(x))",
        "∀x (Volatile(x) → ¬SuitableRetirement(x))",
        "∃x ∃y (Stock(x, y) ∧ GrowthStock(x, y))",
        "∀x ∀y (Stock(x, y) ∧ MatureCompany(y) → SuitableRetirement(x))",
        "Stock(KO, x) ∧ MatureCompany(x)"
      ],
      "fol_conc": "Stock(KO, x) ∧ GrowthStock(KO, x)",
      "perplexity": [
        1.091284155845642,
        1.0189869403839111
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Growth(x, y)",
        "Volatile(x)",
        "Suitable(x, y)",
        "Stock(x)",
        "Company(x)",
        "Mature(x)"
      ],
      "fol_consts": [
        "ko"
      ],
      "fol_rules": [
        "∀x ∀y (Growth(x, y) → Volatile(x))",
        "∀x ∀y (Volatile(x) → ¬Suitable(x, y))",
        "∃x ∃y (Stock(x) ∧ Growth(x, y))",
        "∀x (Mature(x) → ∀y (Stock(y) ∧ Company(y) → Suitable(y, x)))",
        "Company(ko) ∧ Mature(ko)"
      ],
      "fol_conc": "Stock(ko) ∧ ∃y (Growth(ko, y))",
      "perplexity": 1.4258277416229248
    }
  },
  {
    "id": 73,
    "nl_problem": {
      "context": [
        "All growth stocks of companies are volatile.",
        "If the stock price is volatile, then it is not suitable for a retirement fund.",
        "Some stocks of some companies are growth stocks of companies.",
        "All stocks of mature companies are suitable for a retirement fund.",
        "KO is a stock of a mature company."
      ],
      "question": "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "GrowthStock(x, y)",
        "Volatile(x)",
        "SuitableRetirement(x)",
        "StockOf(x, y)",
        "MatureCompany(y)"
      ],
      "fol_consts": [
        "ko"
      ],
      "fol_rules": [
        "∀x ∀y (GrowthStock(x, y) → Volatile(x))",
        "∀x (Volatile(x) → ¬SuitableRetirement(x))",
        "∃x ∃y (StockOf(x, y) ∧ GrowthStock(x, y))",
        "∀x ∀y (StockOf(x, y) ∧ MatureCompany(y) → SuitableRetirement(x))",
        "StockOf(ko, y) ∧ MatureCompany(y)"
      ],
      "fol_conc": "(GrowthStock(ko, y) ⊕ Volatile(ko)) → ¬(StockOf(ko, y) ⊕ Volatile(ko))",
      "perplexity": [
        1.044809341430664,
        1.0232664346694946
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Growth(x, y)",
        "Volatile(x)",
        "Suitable(x)",
        "Stock(x, y)",
        "Mature(y)",
        "Company(y)"
      ],
      "fol_consts": [
        "ko"
      ],
      "fol_rules": [
        "∀x ∀y (Growth(x, y) → Volatile(x))",
        "∀x (Volatile(x) → ¬Suitable(x))",
        "∃x ∃y (Stock(x, y) ∧ Growth(x, y))",
        "∀x ∀y (Stock(x, y) ∧ Mature(y) → Suitable(x))",
        "Stock(ko, y) ∧ Mature(y)"
      ],
      "fol_conc": "((Growth(ko, y) ∨ Volatile(ko)) → ¬(Stock(ko, y) ∨ Volatile(ko)))",
      "perplexity": 1.3255501985549927
    }
  },
  {
    "id": 74,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Joe's license plate begins with the number 34.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "FromIstanbul(x)",
        "BeginsWith(x, y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "thirtyfour",
        "thirtyfive"
      ],
      "fol_rules": [
        "∀x (FromIstanbul(x) → BeginsWith(x, thirtyfour))",
        "∀x (¬BeginsWith(x, thirtyfour) → ¬FromIstanbul(x))",
        "FromIstanbul(joe)",
        "BeginsWith(tom, thirtyfive)",
        "∀x (BeginsWith(x, thirtyfive) → ¬BeginsWith(x, thirtyfour))"
      ],
      "fol_conc": "BeginsWith(joe, thirtyfour)",
      "perplexity": [
        1.07142972946167,
        1.0147638320922852
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)"
      ],
      "fol_consts": [
        "istanbul",
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "∀x (¬Begins(x, 34) → ¬From(x, istanbul))",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "Begins(joe, 34)",
      "perplexity": 1.5033212900161743
    }
  },
  {
    "id": 75,
    "nl_problem": {
      "context": [
        "All vehicle registration plates in Istanbul begin with the number 34.",
        "Plates that do not begin with the number 34 are not from Istanbul. ",
        "Joe's vehicle registration plate is from Istanbul. ",
        "Tom's license plate begins with the number 35. ",
        "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "question": "Tom's license plate is from Istanbul.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "FromIstanbul(x)",
        "BeginsWith(x, y)"
      ],
      "fol_consts": [
        "joe",
        "tom",
        "istanbul",
        "thirtyfour",
        "thirtyfive"
      ],
      "fol_rules": [
        "∀x (FromIstanbul(x) → BeginsWith(x, thirtyfour))",
        "∀x (¬BeginsWith(x, thirtyfour) → ¬FromIstanbul(x))",
        "FromIstanbul(joe)",
        "BeginsWith(tom, thirtyfive)",
        "∀x (BeginsWith(x, thirtyfive) → ¬BeginsWith(x, thirtyfour))"
      ],
      "fol_conc": "¬FromIstanbul(tom)",
      "perplexity": [
        1.0710917711257935,
        1.0280134677886963
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "From(x, y)",
        "Begins(x, y)"
      ],
      "fol_consts": [
        "istanbul",
        "joe",
        "tom",
        "34",
        "35"
      ],
      "fol_rules": [
        "∀x (From(x, istanbul) → Begins(x, 34))",
        "∀x (¬Begins(x, 34) → ¬From(x, istanbul))",
        "From(joe, istanbul)",
        "Begins(tom, 35)",
        "∀x (Begins(x, 35) → ¬Begins(x, 34))"
      ],
      "fol_conc": "¬From(tom, istanbul)",
      "perplexity": 1.5196033716201782
    }
  },
  {
    "id": 76,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary needs to earn money to help pay for her college tuition.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedMoney(x)",
        "OrderTakeout(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeDining(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkStudentJob(x) → NeedMoney(x))",
        "∀x (OrderTakeout(x) → WorkStudentJob(x))",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x))",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x))",
        "∀x (EnjoyDiningHall(x) → SpendTimeDining(x))",
        "∀x ((WorkStudentJob(x) ∧ NeedMoney(x)) → ¬(PickyEater(x) ∨ NeedMoney(x)))"
      ],
      "fol_conc": "NeedMoney(mary)",
      "perplexity": [
        1.0633270740509033,
        1.0099353790283203
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x, y)",
        "Need(x, y)",
        "Order(x)",
        "Enjoy(x)",
        "Picky(x)",
        "Spend(x)"
      ],
      "fol_consts": [
        "mary",
        "campus",
        "college"
      ],
      "fol_rules": [
        "∀x ∀y (Work(x, y) → Need(x, y))",
        "∀x (Order(x) → Work(x, campus))",
        "∀x (Order(x) ⊕ Enjoy(x))",
        "∀x (Enjoy(x) → ¬Picky(x))",
        "∀x (Enjoy(x) → Spend(x))",
        "∀x (Work(x, campus) ∧ Need(x, college) → ¬(Picky(x) ∨ Need(x, college)))"
      ],
      "fol_conc": "Need(mary, college)",
      "perplexity": 1.3474700450897217
    }
  },
  {
    "id": 77,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedMoney(x)",
        "OrderTakeout(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeDining(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "WorkStudentJob(x) → NeedMoney(x)",
        "OrderTakeout(x) → WorkStudentJob(x)",
        "OrderTakeout(x) ⊕ EnjoyDiningHall(x)",
        "EnjoyDiningHall(x) → ¬PickyEater(x)",
        "EnjoyDiningHall(x) → SpendTimeDining(x)",
        "(WorkStudentJob(mary) ∧ NeedMoney(mary)) → ¬(PickyEater(mary) ∨ NeedMoney(mary))"
      ],
      "fol_conc": "¬PickyEater(mary) ∧ SpendTimeDining(mary)",
      "perplexity": [
        1.0264124870300293,
        1.0172127485275269
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x)",
        "Need(x)",
        "Order(x)",
        "Enjoy(x)",
        "Picky(x)",
        "Spend(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (Work(x) → Need(x))",
        "∀x (Order(x) → Work(x))",
        "∀x (Order(x) ⊕ Enjoy(x))",
        "∀x (Enjoy(x) → ¬Picky(x))",
        "∀x (Enjoy(x) → Spend(x))",
        "∀x ((Work(x) ∧ Need(x)) → (¬Picky(x) ∧ ¬Need(x)))"
      ],
      "fol_conc": "¬Picky(mary) ∧ Spend(mary)",
      "perplexity": 1.3922160863876343
    }
  },
  {
    "id": 78,
    "nl_problem": {
      "context": [
        "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "If people order takeout frequently in college, then they work in student jobs on campus.",
        "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "WorkStudentJob(x)",
        "NeedMoney(x)",
        "OrderTakeout(x)",
        "EnjoyDiningHall(x)",
        "PickyEater(x)",
        "SpendTimeDining(x)"
      ],
      "fol_consts": [
        "mary"
      ],
      "fol_rules": [
        "∀x (WorkStudentJob(x) → NeedMoney(x))",
        "∀x (OrderTakeout(x) → WorkStudentJob(x))",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x))",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x))",
        "∀x (EnjoyDiningHall(x) → SpendTimeDining(x))",
        "(WorkStudentJob(mary) ∧ NeedMoney(mary)) → ¬(PickyEater(mary) ∨ NeedMoney(mary))"
      ],
      "fol_conc": "¬PickyEater(mary) ⊕ (PickyEater(mary) → SpendTimeDining(mary))",
      "perplexity": [
        1.0243483781814575,
        1.0135126113891602
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Work(x, y)",
        "Need(x, y)",
        "Order(x)",
        "Enjoy(x)",
        "Picky(x)",
        "Spend(x)"
      ],
      "fol_consts": [
        "mary",
        "campus",
        "college"
      ],
      "fol_rules": [
        "∀x ∀y (Work(x, y) → Need(x, y))",
        "∀x (Order(x) → Work(x, campus))",
        "∀x (Order(x) ⊕ Enjoy(x))",
        "∀x (Enjoy(x) → ¬Picky(x))",
        "∀x (Enjoy(x) → Spend(x))",
        "∀x (Work(x, campus) ∧ Need(x, college) → ¬(Picky(x) ∨ Need(x, college)))"
      ],
      "fol_conc": "¬Picky(mary) ∨ (Picky(mary) → Spend(mary))",
      "perplexity": 1.3313970565795898
    }
  },
  {
    "id": 79,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a product of Baked by Melissa.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked_by_melissa",
        "dried_thai_chilies"
      ],
      "fol_rules": [
        "¬∃x (Bakery(x) ∧ Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "∀x ((Spicy(x) ⊕ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "ProductOf(dried_thai_chilies, baked_by_melissa)",
      "perplexity": [
        1.0741465091705322,
        1.0168933868408203
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "bakedbymelissa",
        "driedthaichilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthaichilies) ∨ Bakery(driedthaichilies) → (Hotpot(driedthaichilies) ∨ Spicy(driedthaichilies))"
      ],
      "fol_conc": "Product(driedthaichilies, bakedbymelissa)",
      "perplexity": 1.425948143005371
    }
  },
  {
    "id": 80,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are not a product of Baked by Melissa.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Spicy(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "dried_thai_chilies",
        "baked_by_melissa"
      ],
      "fol_rules": [
        "∀x ¬(Bakery(x) ∧ Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "¬ProductOf(dried_thai_chilies, baked_by_melissa)",
      "perplexity": [
        1.0489226579666138,
        1.012175440788269
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "bakedbymelissa",
        "driedthaichilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "¬Product(driedthaichilies, bakedbymelissa)",
      "perplexity": 1.4409064054489136
    }
  },
  {
    "id": 81,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are a hotpot.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Spicy(x)",
        "ProductOf(x, y)"
      ],
      "fol_consts": [
        "baked_by_melissa",
        "thai_chilies"
      ],
      "fol_rules": [
        "∀x (¬Bakery(x) → ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOf(x, baked_by_melissa) → Cupcake(x))",
        "∀x ((Spicy(x) ⊕ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "Hotpot(thai_chilies)",
      "perplexity": [
        1.0529303550720215,
        1.018854022026062
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "bakedbymelissa",
        "driedthaichilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthaichilies) ∨ Bakery(driedthaichilies) → Hotpot(driedthaichilies) ∨ Spicy(driedthaichilies)"
      ],
      "fol_conc": "Hotpot(driedthaichilies)",
      "perplexity": 1.4198366403579712
    }
  },
  {
    "id": 82,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "ProductOfBakedByMelissa(x)"
      ],
      "fol_consts": [
        "ThaiChilies"
      ],
      "fol_rules": [
        "∀x (¬Bakery(x) ∨ ¬Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "¬ProductOfBakedByMelissa(ThaiChilies) ∧ ¬Bakery(ThaiChilies)",
      "perplexity": [
        1.0835031270980835,
        1.0182065963745117
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "bakedbymelissa",
        "driedthaichilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "∀x ((Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x)))"
      ],
      "fol_conc": "¬(Product(driedthaichilies, bakedbymelissa) ∨ Bakery(driedthaichilies))",
      "perplexity": 1.4256645441055298
    }
  },
  {
    "id": 83,
    "nl_problem": {
      "context": [
        "No bakery is spicy.",
        "All cupcakes are bakeries.",
        "All hotpots are spicy.",
        "All products of Baked by Melissa are cupcakes.",
        "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Bakery(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Spicy(x)",
        "ProductOfBakedByMelissa(x)"
      ],
      "fol_consts": [
        "thai_chilies"
      ],
      "fol_rules": [
        "¬∃x (Bakery(x) ∧ Spicy(x))",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (ProductOfBakedByMelissa(x) → Cupcake(x))",
        "∀x ((Spicy(x) ⊕ Bakery(x)) → (Hotpot(x) ⊕ Spicy(x)))"
      ],
      "fol_conc": "Cupcake(thai_chilies) ∧ ProductOfBakedByMelissa(thai_chilies)",
      "perplexity": [
        1.0462838411331177,
        1.0166783332824707
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Bakery(x)",
        "Spicy(x)",
        "Cupcake(x)",
        "Hotpot(x)",
        "Product(x, y)"
      ],
      "fol_consts": [
        "bakedbymelissa",
        "driedthaichilies"
      ],
      "fol_rules": [
        "¬Bakery(x) → ¬Spicy(x)",
        "∀x (Cupcake(x) → Bakery(x))",
        "∀x (Hotpot(x) → Spicy(x))",
        "∀x (Product(x, bakedbymelissa) → Cupcake(x))",
        "Spicy(driedthaichilies) ∨ Bakery(driedthaichilies) → (Hotpot(driedthaichilies) ∨ Spicy(driedthaichilies))"
      ],
      "fol_conc": "Cupcake(driedthaichilies) ∧ Product(driedthaichilies, bakedbymelissa)",
      "perplexity": 1.3975601196289062
    }
  },
  {
    "id": 84,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "Listed(x) → ¬NegativeReviews(x)",
        "RatingGreaterThan9(x) → Listed(x)",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "Popular(x) → RatingGreaterThan9(x)",
        "RatingGreaterThan9(subway) ∨ Popular(subway)"
      ],
      "fol_conc": "(TakeOut(subway) ∧ NegativeReviews(subway)) → (RatingGreaterThan9(subway) ∧ ¬TakeOut(subway))",
      "perplexity": [
        1.0420970916748047,
        1.0115543603897095
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x, yelp) → ¬Negative(x))",
        "∀x (Rating(x, y) ∧ Greater(y, 90) → Listed(x, yelp))",
        "∃x (¬Takeout(x) ∧ Negative(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ Greater(y, 90))",
        "Rating(subway, y) ∨ Popular(subway)"
      ],
      "fol_conc": "((Takeout(subway) ∧ Negative(subway)) → (Rating(subway, y) ∧ Greater(y, 90) ∧ ¬Takeout(subway)))",
      "perplexity": 1.4596699476242065
    }
  },
  {
    "id": 85,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway provides take-out service and does not receive many negative reviews.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "RatingGreater9(x)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x) → ¬NegativeReviews(x))",
        "∀x (RatingGreater9(x) → Listed(x))",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "∀x (Popular(x) → RatingGreater9(x))",
        "RatingGreater9(subway) ∨ Popular(subway)"
      ],
      "fol_conc": "TakeOut(subway) ∧ ¬NegativeReviews(subway)",
      "perplexity": [
        1.0499720573425293,
        1.0234038829803467
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x, yelp) → ¬Negative(x))",
        "∀x (Rating(x, y) ∧ Greater(y, 90) → Listed(x, yelp))",
        "∃x (¬Takeout(x) ∧ Negative(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ Greater(y, 90))",
        "Rating(subway, y) ∨ Popular(subway)"
      ],
      "fol_conc": "Takeout(subway) ∧ ¬Negative(subway)",
      "perplexity": 1.4648208618164062
    }
  },
  {
    "id": 86,
    "nl_problem": {
      "context": [
        "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "Some restaurants that do not provide take-out service receive many negative reviews.",
        "All restaurants that are popular among local residents have ratings greater than 9.",
        "Subway has a rating greater than 9 or is popular among local residents."
      ],
      "question": "Subway does not provide take-out service.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Listed(x)",
        "NegativeReviews(x)",
        "RatingGreaterThan9(x)",
        "TakeOut(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "subway"
      ],
      "fol_rules": [
        "Listed(x) → ¬NegativeReviews(x)",
        "RatingGreaterThan9(x) → Listed(x)",
        "∃x (¬TakeOut(x) ∧ NegativeReviews(x))",
        "Popular(x) → RatingGreaterThan9(x)",
        "RatingGreaterThan9(subway) ∨ Popular(subway)"
      ],
      "fol_conc": "¬TakeOut(subway)",
      "perplexity": [
        1.071536660194397,
        1.0156365633010864
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Listed(x)",
        "Negative(x)",
        "Rating(x, y)",
        "Takeout(x)",
        "Popular(x)"
      ],
      "fol_consts": [
        "yelp",
        "subway"
      ],
      "fol_rules": [
        "∀x (Listed(x, yelp) → ¬Negative(x))",
        "∀x (Rating(x, y) ∧ Greater(y, 90) → Listed(x, yelp))",
        "∃x (¬Takeout(x) ∧ Negative(x))",
        "∀x (Popular(x) → Rating(x, y) ∧ Greater(y, 90))",
        "Rating(subway, y) ∨ Popular(subway)"
      ],
      "fol_conc": "¬Takeout(subway)",
      "perplexity": 1.5510156154632568
    }
  },
  {
    "id": 87,
    "nl_problem": {
      "context": [
        "In superhero movies, the good guys always win.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "Good guys fight bad guys and vice versa.",
        "Sir Digby fights his nemesis.",
        "If a superhero movie is named after a character, that character is a good guy.",
        "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "If somebody wins a fight, the person they are fighting loses.",
        "If a superhero movie is named after a character, that character appears in the movie."
      ],
      "question": "Sir Digby’s nemesis loses.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "SuperheroMovie(x)",
        "GoodGuy(x)",
        "BadGuy(x)",
        "Fight(x, y)",
        "Win(x, y)",
        "NamedAfter(x, y)",
        "Appear(x, y)"
      ],
      "fol_consts": [
        "sir_digby",
        "nemesis",
        "surprising_adventures"
      ],
      "fol_rules": [
        "∀x (SuperheroMovie(x) → ∀y (GoodGuy(y) ∧ Fight(y, z) → Win(y, z)))",
        "SuperheroMovie(surprising_adventures)",
        "∀x (GoodGuy(x) ↔ ∃y (BadGuy(y) ∧ Fight(x, y)))",
        "Fight(sir_digby, nemesis)",
        "∀x (SuperheroMovie(x) ∧ NamedAfter(x, y) → GoodGuy(y))",
        "NamedAfter(surprising_adventures, sir_digby)",
        "∀x ∀y (Win(x, y) → Lose(y, x))",
        "∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → Appear(y, x))"
      ],
      "fol_conc": "Lose(nemesis, sir_digby)",
      "perplexity": [
        1.0429294109344482,
        1.0116509199142456
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Superhero(x)",
        "Good(x)",
        "Win(x)",
        "Fight(x, y)",
        "Nemesis(x, y)",
        "Named(x, y)",
        "Appear(x, y)"
      ],
      "fol_consts": [
        "sirdigby",
        "nemesis"
      ],
      "fol_rules": [
        "∀x (Superhero(x) → ∀y (Good(y) ∧ Win(y)) → Win(y))",
        "Superhero(surprisingadventuresofsirdigby)",
        "∀x (Good(x) ↔ ∃y (Fight(x, y) ∧ Bad(y)))",
        "Fight(sirdigby, nemesis)",
        "∀x (Named(x, y) → Good(y))",
        "Named(surprisingadventuresofsirdigby, sirdigby)",
        "∀x ∀y (Win(x) → Lose(y))",
        "∀x (Named(x, y) → Appear(y, x))"
      ],
      "fol_conc": "Lose(nemesis)",
      "perplexity": 1.4082170724868774
    }
  },
  {
    "id": 88,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Walden contains knowledge.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "ContainsKnowledge(x)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainsKnowledge(x))",
        "∀x (Read(x, y) ∧ Book(y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → Smarter(x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "ContainsKnowledge(walden)",
      "perplexity": [
        1.0813945531845093,
        1.014560580253601
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contains(x, y)",
        "Knowledge(x)",
        "Read(x, y)",
        "Person(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "walden",
        "henrythoreau",
        "harry"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, knowledge))",
        "∀x ∀y (Person(x) ∧ Read(x, y) ∧ Book(y) → Knowledge(x))",
        "∀x (Knowledge(x) → Smarter(x))",
        "Read(harry, walden)",
        "Book(walden)"
      ],
      "fol_conc": "Contains(walden, knowledge)",
      "perplexity": 1.5125547647476196
    }
  },
  {
    "id": 89,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "Harry is smarter than before.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "ContainsKnowledge(x)",
        "Read(x, y)",
        "GainKnowledge(x)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henryThoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainsKnowledge(x))",
        "∀x ∀y (Read(x, y) ∧ Book(y) → GainKnowledge(x))",
        "∀x (GainKnowledge(x) → Smarter(x, x))",
        "Read(harry, walden)"
      ],
      "fol_conc": "Smarter(harry, harry)",
      "perplexity": [
        1.1097477674484253,
        1.0202287435531616
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contains(x, y)",
        "Knowledge(x)",
        "Read(x, y)",
        "Person(x)",
        "Smarter(x, y)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "henry"
      ],
      "fol_rules": [
        "∀x (Book(x) → Contains(x, knowledge))",
        "∀x ∀y (Person(x) ∧ Read(x, y) ∧ Book(y) → Gains(x, knowledge))",
        "∀x (Gains(x, knowledge) → Smarter(x, x))"
      ],
      "fol_conc": "Smarter(harry, harry)",
      "perplexity": 1.583047866821289
    }
  },
  {
    "id": 90,
    "nl_problem": {
      "context": [
        "[BG] Books contain tons of knowledge.",
        "[BG] When a person reads a book, that person gains knowledge. ",
        "[BG] If a person gains knowledge, they become smarter.",
        "Harry read the book “Walden” by Henry Thoreau."
      ],
      "question": "A person who is smarter has gained knowledge.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Book(x)",
        "ContainsKnowledge(x)",
        "Reads(x, y)",
        "Person(x)",
        "GainsKnowledge(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "harry",
        "walden",
        "thoreau"
      ],
      "fol_rules": [
        "∀x (Book(x) → ContainsKnowledge(x))",
        "∀x ∀y (Person(x) ∧ Reads(x, y) ∧ Book(y) → GainsKnowledge(x))",
        "∀x (GainsKnowledge(x) → Smarter(x))",
        "Reads(harry, walden)"
      ],
      "fol_conc": "Smarter(harry)",
      "perplexity": [
        1.074670672416687,
        1.035480260848999
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Book(x)",
        "Contains(x, y)",
        "Knowledge(x)",
        "Read(x, y)",
        "Person(x)",
        "Smarter(x)"
      ],
      "fol_consts": [
        "walden",
        "henry",
        "harry"
      ],
      "fol_rules": [
        "∀x (Book(x) → ∃y (Contains(x, y) ∧ Knowledge(y)) ∧ Person(x) ∧ Read(x, y) → Smarter(x))"
      ],
      "fol_conc": "∀x (Smarter(x) → ∃y (Knowledge(y) ∧ Gain(x, y)))",
      "perplexity": 1.8566343784332275
    }
  },
  {
    "id": 91,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language generation task.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "NLP_Task(x)",
        "Language_Generation(x)",
        "Language_Understanding(x)",
        "Output_Text(x)"
      ],
      "fol_consts": [
        "mt"
      ],
      "fol_rules": [
        "∀x (NLP_Task(x) → (Language_Generation(x) ⊕ Language_Understanding(x)))",
        "∀x (Output_Text(x) → Language_Generation(x))",
        "NLP_Task(mt)",
        "Output_Text(mt)"
      ],
      "fol_conc": "Language_Generation(mt)",
      "perplexity": [
        1.0567076206207275,
        1.0136462450027466
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Naturalprocessing(x)",
        "Languagegeneration(x)",
        "Languageunderstanding(x)",
        "Output(x, y)",
        "Textsequence(y)",
        "Machinetranslation(x)"
      ],
      "fol_consts": [
        "machinetranslation"
      ],
      "fol_rules": [
        "∀x (Naturalprocessing(x) → (Languagegeneration(x) ⊕ Languageunderstanding(x)) ∧ ¬(Languagegeneration(x) ∧ Languageunderstanding(x)))",
        "∀x ∀y (Output(x, y) ∧ Textsequence(y) → Languagegeneration(x))",
        "Naturalprocessing(machinetranslation)",
        "∃y (Output(machinetranslation, y) ∧ Textsequence(y))"
      ],
      "fol_conc": "Languagegeneration(machinetranslation)",
      "perplexity": 1.6835191249847412
    }
  },
  {
    "id": 92,
    "nl_problem": {
      "context": [
        "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "Machine translation is a natural language processing task.",
        "The output of machine translation is a text sequence."
      ],
      "question": "Machine translation is a language understanding task.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "NLP_Task(x)",
        "Generation(x)",
        "Understanding(x)",
        "OutputText(x)"
      ],
      "fol_consts": [
        "mt"
      ],
      "fol_rules": [
        "∀x (NLP_Task(x) → (Generation(x) ⊕ Understanding(x)))",
        "∀x (OutputText(x) → Generation(x))",
        "NLP_Task(mt)",
        "OutputText(mt)"
      ],
      "fol_conc": "Understanding(mt)",
      "perplexity": [
        1.0777623653411865,
        1.04450523853302
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Naturalprocessing(x)",
        "Languagegeneration(x)",
        "Languageunderstanding(x)",
        "Output(x, y)",
        "Textsequence(y)",
        "Machinetranslation(x)"
      ],
      "fol_consts": [
        "machinetranslation"
      ],
      "fol_rules": [
        "∀x (Languagegeneration(x) ⊕ Languageunderstanding(x))",
        "∀x (Output(x, y) ∧ Textsequence(y) → Languagegeneration(x))",
        "Naturalprocessing(machinetranslation)",
        "∃y (Output(machinetranslation, y) ∧ Textsequence(y))"
      ],
      "fol_conc": "Languageunderstanding(machinetranslation)",
      "perplexity": 1.6926813125610352
    }
  },
  {
    "id": 94,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Allowed(x, y)",
        "Rent(x, y)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "MoreThan(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "monthRent",
        "depositLimit"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(pet, x))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → (SecurityDeposit(x, monthRent) ⊕ ∃y (SecurityDeposit(x, y) ∧ MoreThan(y, monthRent))))",
        "Pet(fluffy)",
        "Pet(fluffy)",
        "Managed(oliveGarden)",
        "Rent(oliveGarden, monthRent)",
        "∀x (Allowed(tom, x) ↔ (Allowed(fluffy, x) ∧ ¬(SecurityDeposit(x, depositLimit) ∧ MoreThan(depositLimit, monthRent))))",
        "MoreThan(monthRent, depositLimit)"
      ],
      "fol_conc": "Allowed(tom, oliveGarden)",
      "perplexity": [
        1.0983092784881592,
        1.015049695968628
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Allowed(x, y)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "month",
        "dollar"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Equal(x, month) ∨ More(x, month)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Allowed(x, fluffy) ∧ ¬More(deposit, 1500) ↔ Allowed(x, olivegarden))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Allowed(tom, olivegarden)",
      "perplexity": 1.4545905590057373
    }
  },
  {
    "id": 96,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "MaxFavorite(x)",
        "FromAustralia(x)",
        "Quokka(x)",
        "VeryFluffy(x)",
        "LoveToSleep(x)",
        "Koala(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (LovedByTourists(x) → MaxFavorite(x))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (MaxFavorite(x) → VeryFluffy(x))",
        "∀x (MaxFavorite(x) → LoveToSleep(x))",
        "∀x (VeryFluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "∀x (Koala(x) → LoveToSleep(x))",
      "perplexity": [
        1.0497649908065796,
        1.0155342817306519
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Animal(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(y, x))",
        "∀x (Animal(x) ∧ From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → Animal(x) ∧ From(x, australia))",
        "∀x (Favorite(max, x) → Fluffy(x))",
        "∀x (Favorite(max, x) → Sleep(x))",
        "∀x (Fluffy(x) ∧ Animal(x) ∧ Beq(x, koala) → ¬Quokka(x))"
      ],
      "fol_conc": "Sleep(koala)",
      "perplexity": 1.4205116033554077
    }
  },
  {
    "id": 97,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "Koalas love to sleep and are quokka.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "Favorite(x, y)",
        "FromAustralia(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "SleepLover(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → Favorite(x, max))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → SleepLover(x))",
        "∀x (Fluffy(x) ∧ Koala(x) → ¬Quokka(x))"
      ],
      "fol_conc": "∃x (Koala(x) ∧ SleepLover(x) ∧ Quokka(x))",
      "perplexity": [
        1.0467456579208374,
        1.016550064086914
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Animal(x)",
        "Fluffy(x)",
        "Sleep(x)",
        "Koala(x)",
        "Quokka(x)"
      ],
      "fol_consts": [
        "max",
        "australia"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(y, max))",
        "∀x (Animal(x) ∧ From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → Animal(x) ∧ From(x, australia))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → Sleep(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "Sleep(x) ∧ Quokka(x)",
      "perplexity": 1.3404706716537476
    }
  },
  {
    "id": 98,
    "nl_problem": {
      "context": [
        "If animals are loved by tourists, then they are Max's favorite animals. ",
        "All animals from Australia are loved by tourists. ",
        "All quokka are animals from Australia. ",
        "All of Max's favorite animals are very fluffy.",
        "All of Max's favorite animals love to sleep. ",
        "If a koala is very fluffy, then the koala is not a quokka."
      ],
      "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "LovedByTourists(x)",
        "Favorite(x, y)",
        "FromAustralia(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "SleepLover(x)",
        "Koala(x)"
      ],
      "fol_consts": [
        "max"
      ],
      "fol_rules": [
        "∀x (LovedByTourists(x) → Favorite(x, max))",
        "∀x (FromAustralia(x) → LovedByTourists(x))",
        "∀x (Quokka(x) → FromAustralia(x))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → SleepLover(x))",
        "∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x))"
      ],
      "fol_conc": "∀x (Koala(x) ∧ Quokka(x) → (SleepLover(x) ⊕ Fluffy(x)))",
      "perplexity": [
        1.0434294939041138,
        1.0080865621566772
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Loved(x, y)",
        "Favorite(x, y)",
        "From(x, y)",
        "Animal(x)",
        "Quokka(x)",
        "Fluffy(x)",
        "Sleep(x)"
      ],
      "fol_consts": [
        "max",
        "australia",
        "koala"
      ],
      "fol_rules": [
        "∀x ∀y (Loved(x, y) → Favorite(y, max))",
        "∀x (Animal(x) ∧ From(x, australia) → Loved(x, tourists))",
        "∀x (Quokka(x) → Animal(x) ∧ From(x, australia))",
        "∀x (Favorite(x, max) → Fluffy(x))",
        "∀x (Favorite(x, max) → Sleep(x))",
        "∀x (Quokka(x) ∧ Fluffy(x) → ¬Koala(x))"
      ],
      "fol_conc": "∀x (Quokka(x) → Sleep(x) ⊕ Fluffy(x))",
      "perplexity": 1.2849546670913696
    }
  },
  {
    "id": 99,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is a CEO.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "CEO(harry)",
      "perplexity": [
        1.0403597354888916,
        1.0152517557144165
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Ceos(harry)",
      "perplexity": 1.4783527851104736
    }
  },
  {
    "id": 100,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "Harry is kind or a CEO.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ CEO(harry)",
      "perplexity": [
        1.0498037338256836,
        1.019152045249939
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "Kind(harry) ⊕ Ceos(harry)",
      "perplexity": 1.46857488155365
    }
  },
  {
    "id": 101,
    "nl_problem": {
      "context": [
        "A man is either kind or evil.",
        "No ugly person is handsome.",
        "All evil people are ugly.",
        "All gentlemen are handsome.",
        "All CEOs are gentlemen.",
        "Harry is a gentleman."
      ],
      "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "CEO(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (CEO(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "((Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry))) → ¬(Kind(harry) ∨ CEO(harry))",
      "perplexity": [
        1.0755091905593872,
        1.017500877380371
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Man(x)",
        "Kind(x)",
        "Evil(x)",
        "Ugly(x)",
        "Handsome(x)",
        "Gentleman(x)",
        "Ceos(x)"
      ],
      "fol_consts": [
        "harry"
      ],
      "fol_rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x)))",
        "∀x (Ugly(x) → ¬Handsome(x))",
        "∀x (Evil(x) → Ugly(x))",
        "∀x (Gentleman(x) → Handsome(x))",
        "∀x (Ceos(x) → Gentleman(x))",
        "Gentleman(harry)"
      ],
      "fol_conc": "((Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry))) → ¬(Kind(harry) ∨ Ceos(harry))",
      "perplexity": 1.3898518085479736
    }
  },
  {
    "id": 102,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke spends a lot of time hanging out and playing with his siblings.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "TwinOrTriplet(x)",
        "SameAgeSiblings(x)",
        "ComplainSiblings(x)",
        "SpendTimeSiblings(x)",
        "LiveAtHome(x)",
        "StrongBonds(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x ((TwinOrTriplet(x) ∨ SameAgeSiblings(x)) → SpendTimeSiblings(x))",
        "∀x (SameAgeSiblings(x) ↔ (TwinOrTriplet(x)))",
        "∀x (ComplainSiblings(x) → SameAgeSiblings(x))",
        "∀x (¬LiveAtHome(x) → ¬StrongBonds(x))",
        "∀x (SpendTimeSiblings(x) → ¬LiveAtHome(x))",
        "(TwinOrTriplet(luke) ∧ StrongBonds(luke)) ⊕ ¬(TwinOrTriplet(luke) ∨ StrongBonds(luke))"
      ],
      "fol_conc": "SpendTimeSiblings(luke)",
      "perplexity": [
        1.0402412414550781,
        1.016153335571289
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "Spend(x)",
        "Sameage(x, y)",
        "Complain(x)",
        "Live(x)",
        "Bond(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x ((Twin(x) ∨ Triplet(x)) → Spend(x))",
        "∀x (Sameage(x, y) → (Twin(x) ∨ Triplet(x)))",
        "∀x (Complain(x) → Sameage(x, y))",
        "∀x (¬Live(x) → ¬Bond(x))",
        "∀x (Spend(x) → ¬Live(x))",
        "(Twin(luke) ∨ Triplet(luke)) ∧ Bond(luke) ⊕ ¬(Twin(luke) ∨ Triplet(luke)) ∨ ¬Bond(luke)"
      ],
      "fol_conc": "Spend(luke)",
      "perplexity": 1.325973391532898
    }
  },
  {
    "id": 103,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke complains often about annoying siblings.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "SpendTime(x)",
        "SameAge(x, y)",
        "Complain(x)",
        "LiveHome(x)",
        "StrongBonds(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x ((Twin(x) ∨ Triplet(x)) → SpendTime(x))",
        "∀x (SameAge(x, y) → (Twin(x) ∨ Triplet(x)))",
        "∀x (Complain(x) → SameAge(x, y))",
        "∀x (¬LiveHome(x) → ¬StrongBonds(x))",
        "∀x (SpendTime(x) → ¬LiveHome(x))",
        "(Twin(luke) ∨ Triplet(luke) ∧ StrongBonds(luke)) ⊕ ¬(Twin(luke) ∨ Triplet(luke) ∨ StrongBonds(luke))"
      ],
      "fol_conc": "Complain(luke)",
      "perplexity": [
        1.0394539833068848,
        1.0181065797805786
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "Spend(x)",
        "Sameage(x, y)",
        "Complain(x)",
        "Live(x)",
        "Bond(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x ((Twin(x) ∨ Triplet(x)) → Spend(x))",
        "∀x ∀y (Sameage(x, y) → (Twin(x) ∨ Triplet(x)))",
        "∀x (Complain(x) → ∃y (Sameage(x, y)))",
        "∀x (¬Live(x) → ¬Bond(x))",
        "∀x (Spend(x) → ¬Live(x))",
        "(Twin(luke) ∨ Triplet(luke)) ⊕ ¬(Twin(luke) ∨ Triplet(luke)) ∧ Bond(luke) ⊕ ¬(Twin(luke) ∨ Triplet(luke)) ∧ ¬Bond(luke)"
      ],
      "fol_conc": "Complain(luke)",
      "perplexity": 1.3048958778381348
    }
  },
  {
    "id": 104,
    "nl_problem": {
      "context": [
        "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "If people have siblings who are the same age, then they are twins or triplets.",
        "If people complain often about annoying siblings, then they have siblings who are the same age.",
        "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
      ],
      "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "HangOut(x)",
        "SameAge(x, y)",
        "Complain(x)",
        "LiveAtHome(x)",
        "StrongBonds(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x ((Twin(x) ∨ Triplet(x)) → HangOut(x))",
        "∀x (SameAge(x, x) → (Twin(x) ∨ Triplet(x)))",
        "∀x (Complain(x) → SameAge(x, x))",
        "∀x (¬LiveAtHome(x) → ¬StrongBonds(x))",
        "∀x (HangOut(x) → ¬LiveAtHome(x))",
        "(Twin(luke) ∨ Triplet(luke) ∧ StrongBonds(luke)) ⊕ ¬(Twin(luke) ∨ Triplet(luke) ∨ StrongBonds(luke))"
      ],
      "fol_conc": "¬(Twin(luke) ∨ Triplet(luke) ∨ Complain(luke))",
      "perplexity": [
        1.0410383939743042,
        1.0078086853027344
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Twin(x)",
        "Triplet(x)",
        "Spend(x)",
        "Sameage(x, y)",
        "Complain(x)",
        "Live(x)",
        "Bond(x)"
      ],
      "fol_consts": [
        "luke"
      ],
      "fol_rules": [
        "∀x ((Twin(x) ∨ Triplet(x)) → Spend(x))",
        "∀x (Sameage(x, y) → (Twin(x) ∨ Triplet(x)))",
        "∀x (Complain(x) → Sameage(x, y))",
        "∀x (¬Live(x) → ¬Bond(x))",
        "∀x (Spend(x) → ¬Live(x))",
        "(Twin(luke) ∨ Triplet(luke)) ⊕ ¬(Twin(luke) ∨ Triplet(luke)) ∧ Bond(luke)"
      ],
      "fol_conc": "¬(Twin(luke) ∨ Triplet(luke)) ⊕ ¬Complain(luke)",
      "perplexity": 1.322471022605896
    }
  },
  {
    "id": 105,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "Tom can apply for financial aid from ETS to take the GRE test.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "GREApplicant(x)",
        "Costs(x, y)",
        "ProvidesFinancialAid(x, y)",
        "EconomicHardship(x)",
        "Difficulty(x, y)",
        "TooLittleMoney(x)",
        "TooFewResources(x)",
        "LivesInSingleParentFamily(x)",
        "OutOfWork(x, y)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "dollars205",
        "one"
      ],
      "fol_rules": [
        "Costs(gre, dollars205)",
        "∀x (GREApplicant(x) ∧ EconomicHardship(x) → ProvidesFinancialAid(ets, x))",
        "EconomicHardship(x) ↔ (Difficulty(x, TooLittleMoney(x)) ∨ Difficulty(x, TooFewResources(x)))",
        "LivesInSingleParentFamily(tom)",
        "OutOfWork(tom_dad, one)"
      ],
      "fol_conc": "GREApplicant(tom) ∧ EconomicHardship(tom)",
      "perplexity": [
        1.1042577028274536,
        1.0180503129959106
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Applicant(x)",
        "Hardship(x)",
        "Difficulty(x, y)",
        "Cause(x, y)",
        "Live(x, y)",
        "Out(x, y)",
        "Family(x)",
        "Single(x)",
        "Year(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "dad",
        "money",
        "resource",
        "year"
      ],
      "fol_rules": [
        "Cost(gre, 205)",
        "∀x (Applicant(x) ∧ Hardship(x) → Provide(ets, x))",
        "∀x (Hardship(x) ↔ Difficulty(x, money) ∨ Difficulty(x, resource))",
        "∀x (Difficulty(x, y) → Cause(x, y))",
        "Live(tom, dad)",
        "Out(dad, year)",
        "Family(dad)",
        "Single(dad)",
        "Year(year)"
      ],
      "fol_conc": "Applicant(tom) ∧ Hardship(tom)",
      "perplexity": 1.4120063781738281
    }
  },
  {
    "id": 106,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "It cost below US $300 to take the GRE test.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "GREApplicant(x)",
        "FinancialAid(x)",
        "EconomicHardship(x)",
        "SingleParentFamily(x)",
        "OutOfWork(x)",
        "TooLittleMoney(x)",
        "TooFewResources(x)",
        "Cost(x, y)",
        "Duration(x, y, z)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre",
        "dad"
      ],
      "fol_rules": [
        "Cost(gre, 205)",
        "∀x (GREApplicant(x) ∧ EconomicHardship(x) → FinancialAid(x))",
        "EconomicHardship(x) ↔ (TooLittleMoney(x) ∨ TooFewResources(x))",
        "SingleParentFamily(tom)",
        "OutOfWork(dad) ∧ Duration(dad, 1, year)"
      ],
      "fol_conc": "Cost(gre, below300)",
      "perplexity": [
        1.0892632007598877,
        1.0314735174179077
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Applicant(x)",
        "Hardship(x)",
        "Difficulty(x, y)",
        "Cause(x, y)",
        "Live(x, y)",
        "Out(x, y)",
        "Family(x)",
        "Single(x)"
      ],
      "fol_consts": [
        "gre",
        "ets",
        "tom",
        "dollar205",
        "dollar300"
      ],
      "fol_rules": [
        "Cost(gre, dollar205)",
        "∀x (Applicant(x) ∧ Hardship(x) → Provide(ets, x))",
        "∀x (Hardship(x) ↔ Difficulty(x, y) ∧ Cause(y, x))",
        "Live(tom, x)",
        "Family(x)",
        "Single(x)",
        "Out(tom, y)",
        "Family(y)"
      ],
      "fol_conc": "Cost(gre, dollar300)",
      "perplexity": 1.422073245048523
    }
  },
  {
    "id": 107,
    "nl_problem": {
      "context": [
        "It costs US $205 to take the GRE test.",
        "ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Tom lives in a single-parent family.",
        "His dad has been out of work for more than a year."
      ],
      "question": "There is no financial aid available for the GRE test.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "GREApplicant(x)",
        "Cost(x, y)",
        "ProvideFinancialAid(x, y)",
        "EconomicHardship(x)",
        "SingleParentFamily(x)",
        "OutOfWork(x, y)",
        "FewResources(x)",
        "LittleMoney(x)"
      ],
      "fol_consts": [
        "tom",
        "ets",
        "gre_test",
        "usd205",
        "one_year"
      ],
      "fol_rules": [
        "Cost(gre_test, usd205)",
        "∀x (GREApplicant(x) ∧ EconomicHardship(x) → ProvideFinancialAid(ets, x))",
        "EconomicHardship(x) ↔ (FewResources(x) ∨ LittleMoney(x))",
        "SingleParentFamily(tom)",
        "OutOfWork(tom_dad, one_year)"
      ],
      "fol_conc": "¬∃x (ProvideFinancialAid(ets, x))",
      "perplexity": [
        1.1779104471206665,
        1.0368614196777344
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cost(x, y)",
        "Provide(x, y)",
        "Applicant(x)",
        "Hardship(x)",
        "Difficulty(x, y)",
        "Cause(x, y)",
        "Little(x)",
        "Resource(x)",
        "Live(x, y)",
        "Out(x)",
        "Year(x)"
      ],
      "fol_consts": [
        "gre",
        "ets",
        "tom",
        "family",
        "dad",
        "money",
        "resources"
      ],
      "fol_rules": [
        "Cost(gre, 205)",
        "∀x (Applicant(x) ∧ Hardship(x) → Provide(ets, x))",
        "∀x (Hardship(x) ↔ Difficulty(x, y))",
        "∀x (Difficulty(x, y) ↔ Cause(x, y))",
        "∀x (Cause(x, y) ↔ (Little(x) ∨ Few(x)))",
        "∀x (Little(x) ↔ Little(money) ∨ Little(resources))",
        "Resource(resources)",
        "Live(tom, family)",
        "Out(dad)",
        "Year(12)"
      ],
      "fol_conc": "¬Provide(ets, gre)",
      "perplexity": 1.3731863498687744
    }
  },
  {
    "id": 108,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "SpillsFood(x)",
        "TidySpaces(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "FrequentEater(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (SpillsFood(x) → ¬TidySpaces(x) ∧ EnjoyCleaning(x))",
        "∀x (Foodie(x) ∧ FrequentEater(x) → SpillsFood(x))",
        "∀x (OnlyChild(x) → TidySpaces(x) ∧ EnjoyCleaning(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(SpillsFood(peter) ⊕ ¬SpillsFood(peter)) ∧ (OnlyChild(peter) ⊕ ¬OnlyChild(peter))"
      ],
      "fol_conc": "TidySpaces(peter) ∧ EnjoyCleaning(peter)",
      "perplexity": [
        1.0379656553268433,
        1.0122891664505005
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Frequent(x)",
        "Only(x)",
        "Busy(x)",
        "High(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ Enjoy(x))",
        "∀x (Foodie(x) ∧ Frequent(x) → Spill(x))",
        "∀x (Only(x) → Tidy(x) ∧ Enjoy(x))",
        "∀x (Busy(x) → Only(x))",
        "∀x (High(x) → Busy(x))",
        "(Spill(peter) ∧ Only(peter)) ⊕ ¬(Spill(peter) ∨ Only(peter))"
      ],
      "fol_conc": "Tidy(peter) ∧ Enjoy(peter)",
      "perplexity": 1.3460785150527954
    }
  },
  {
    "id": 109,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyClean(x)",
        "Foodie(x)",
        "FrequentEater(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ EnjoyClean(x))",
        "∀x (Foodie(x) ∧ FrequentEater(x) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x) ∧ EnjoyClean(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spill(peter) ⊕ OnlyChild(peter))"
      ],
      "fol_conc": "Foodie(peter) ∧ FrequentEater(peter) ⊕ HighIncome(peter)",
      "perplexity": [
        1.0230896472930908,
        1.0152651071548462
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Frequent(x)",
        "Only(x)",
        "Busy(x)",
        "High(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ Enjoy(x))",
        "∀x (Foodie(x) ∧ Frequent(x) → Spill(x))",
        "∀x (Only(x) → Tidy(x) ∧ Enjoy(x))",
        "∀x (Busy(x) → Only(x))",
        "∀x (High(x) → Busy(x))",
        "(Spill(peter) ∧ Only(peter)) ⊕ ¬(Spill(peter) ∨ Only(peter))"
      ],
      "fol_conc": "Foodie(peter) ∧ Frequent(peter) ⊕ High(peter)",
      "perplexity": 1.3384524583816528
    }
  },
  {
    "id": 111,
    "nl_problem": {
      "context": [
        "All fir trees are evergreens.",
        "Some objects of worship are fir trees."
      ],
      "question": "Some evergreens are not objects of worship.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Fir(x)",
        "Evergreen(x)",
        "Worship(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Fir(x) → Evergreen(x))",
        "∃x (Worship(x) ∧ Fir(x))"
      ],
      "fol_conc": "∃x (Evergreen(x) ∧ ¬Worship(x))",
      "perplexity": [
        1.0576738119125366,
        1.0263090133666992
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Fir(x)",
        "Evergreen(x)",
        "Worship(x)"
      ],
      "fol_consts": [
        "x1"
      ],
      "fol_rules": [
        "∀x (Fir(x) → Evergreen(x))",
        "∃x (Fir(x) ∧ Worship(x))"
      ],
      "fol_conc": "∃x (Evergreen(x) ∧ ¬Worship(x))",
      "perplexity": 2.020019054412842
    }
  },
  {
    "id": 112,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in New Mexico.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Donated(x)",
        "Mine(x)"
      ],
      "fol_consts": [
        "picuris",
        "onate",
        "newmexico",
        "texas",
        "harding"
      ],
      "fol_rules": [
        "LocatedIn(picuris, newmexico) ⊕ LocatedIn(picuris, texas)",
        "Visited(onate, picuris)",
        "Mine(harding)",
        "LocatedIn(harding, picuris)",
        "Donated(harding)",
        "¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(onate, x) ∧ LocatedIn(x, newmexico)",
      "perplexity": [
        1.046085238456726,
        1.0152174234390259
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Range(x)",
        "Instate(x, y)",
        "Visited(x, y)",
        "Mine(x)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan",
        "newmexico",
        "texas",
        "harding"
      ],
      "fol_rules": [
        "Instate(picuris, newmexico) ⊕ Instate(picuris, texas)",
        "Visited(juan, picuris)",
        "Mine(harding)",
        "Instate(picuris, harding)",
        "Donated(harding)",
        "¬(∃x (Range(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Instate(y, x) ∧ Donated(y))))"
      ],
      "fol_conc": "Visited(juan, x) ∧ Range(x) ∧ Instate(x, newmexico)",
      "perplexity": 1.4555641412734985
    }
  },
  {
    "id": 113,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "Juan de Onate visited a mountain range in Texas.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Donated(x)",
        "Mine(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan",
        "texas",
        "new_mexico",
        "harding"
      ],
      "fol_rules": [
        "LocatedIn(picuris, texas) ⊕ LocatedIn(picuris, new_mexico)",
        "Visited(juan, picuris)",
        "Mine(harding) ∧ LocatedIn(harding, picuris) ∧ Donated(harding)",
        "¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "Visited(juan, texas)",
      "perplexity": [
        1.0479635000228882,
        1.0180437564849854
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Range(x)",
        "Instate(x, y)",
        "Visited(x, y)",
        "Mine(x)",
        "Donated(x)"
      ],
      "fol_consts": [
        "picuris",
        "juan",
        "texas",
        "newmexico",
        "harding"
      ],
      "fol_rules": [
        "Instate(picuris, texas) ⊕ Instate(picuris, newmexico)",
        "Visited(juan, picuris)",
        "Mine(harding)",
        "Instate(picuris, picuris)",
        "Donated(harding)",
        "¬(∃x (Range(x) ∧ Instate(x, texas) ∧ ∃y (Mine(y) ∧ Donated(y) ∧ Instate(y, x))))"
      ],
      "fol_conc": "∃x (Range(x) ∧ Instate(x, texas) ∧ Visited(juan, x))",
      "perplexity": 1.4623527526855469
    }
  },
  {
    "id": 114,
    "nl_problem": {
      "context": [
        "The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Juan de Onate visited the Picuris Mountains.",
        "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "There are no mountain ranges in texas that have mines which have been donated."
      ],
      "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "MountainRange(x)",
        "LocatedIn(x, y)",
        "Visited(x, y)",
        "Donated(x)",
        "Mine(x)"
      ],
      "fol_consts": [
        "picuris",
        "onate",
        "harding",
        "new_mexico",
        "texas"
      ],
      "fol_rules": [
        "LocatedIn(picuris, new_mexico) ∨ LocatedIn(picuris, texas)",
        "Visited(onate, picuris)",
        "Mine(harding) ∧ LocatedIn(harding, picuris) ∧ Donated(harding)",
        "¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donated(y)))"
      ],
      "fol_conc": "¬LocatedIn(picuris, new_mexico)",
      "perplexity": [
        1.064925193786621,
        1.0143966674804688
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mountain(x)",
        "Range(x)",
        "Instate(x, y)",
        "Visited(x, y)",
        "Mine(x)",
        "Donated(x)",
        "Located(x, y)"
      ],
      "fol_consts": [
        "picuris",
        "juan",
        "harding",
        "newmexico",
        "texas"
      ],
      "fol_rules": [
        "Instate(picuris, newmexico) ⊕ Instate(picuris, texas)",
        "Visited(juan, picuris)",
        "Mine(harding)",
        "Located(harding, picuris)",
        "¬(∃x (Mountain(x) ∧ Range(x) ∧ Instate(x, texas) ∧ (∃y (Mine(y) ∧ Donated(y) ∧ Located(y, x)))) ∧ Donated(harding))"
      ],
      "fol_conc": "¬(Located(harding, x) ∧ Mountain(x) ∧ Range(x) ∧ Instate(x, newmexico))",
      "perplexity": 1.5328835248947144
    }
  },
  {
    "id": 115,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter is shorter than a man in Michael's class.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "InClass(x, y)",
        "Jump(x)",
        "Shooter(x)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "∀x (Man(x) ∧ InClass(x, michael) → Taller(michael, x))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Man(x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x))"
      ],
      "fol_conc": "∃x (Man(x) ∧ InClass(x, michael) ∧ Taller(x, peter))",
      "perplexity": [
        1.0465755462646484,
        1.0187122821807861
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Taller(x, y)",
        "Block(x, y)",
        "Man(x)",
        "Inclass(x, y)",
        "Jump(x)",
        "Shooter(x)",
        "Great(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael)",
        "∀x (Taller(michael, x))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter)",
        "Taller(peter, michael)",
        "∀x (Taller(michael, x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → Shooter(x))",
        "∀x (Shooter(x) ∧ Jump(x) → Great(x))"
      ],
      "fol_conc": "∃x (Man(x) ∧ Inclass(x, michael) ∧ Taller(x, peter))",
      "perplexity": 1.2954180240631104
    }
  },
  {
    "id": 116,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Windy is a great shooter.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Man(x)",
        "Block(x, y)",
        "Shoot(x)",
        "Jump(x)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀y (Man(y) ∧ ¬Be(y, michael) → Taller(michael, y))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Man(x) ∧ Taller(x, y) ∧ ¬Jump(y) → Block(x, y))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) ∧ Shoot(x) → GreatShooter(x))"
      ],
      "fol_conc": "GreatShooter(windy)",
      "perplexity": [
        1.0493509769439697,
        1.0119680166244507
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Taller(x, y)",
        "Block(x, y)",
        "Man(x)",
        "Shooter(x)",
        "Jump(x)",
        "Great(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀y (Man(y) → Taller(michael, y))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Taller(michael, x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → Great(x))"
      ],
      "fol_conc": "Great(windy)",
      "perplexity": 1.3157635927200317
    }
  },
  {
    "id": 117,
    "nl_problem": {
      "context": [
        "If a man is taller than another man, the taller one can block the other's shooting.",
        "Michael is a man who is taller than everyone else in his class.",
        "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
        "Peter is a man who is taller than Michael.",
        "Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "Michael cannot block Windy's shooting.",
        "Every shooter who can jump when shooting is a great shooter."
      ],
      "question": "Peter can block Windy's shooting.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Taller(x, y)",
        "Block(x, y)",
        "Man(x)",
        "Jump(x)",
        "Shooter(x)",
        "GreatShooter(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀x (Man(x) → ¬Taller(x, michael))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x ((Taller(michael, x) ∧ ¬Jump(x)) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → GreatShooter(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": [
        1.0990939140319824,
        1.0182245969772339
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Taller(x, y)",
        "Block(x, y)",
        "Man(x)",
        "Shooter(x)",
        "Jump(x)",
        "Great(x)"
      ],
      "fol_consts": [
        "michael",
        "peter",
        "windy"
      ],
      "fol_rules": [
        "∀x ∀y (Taller(x, y) → Block(x, y))",
        "Man(michael) ∧ ∀y (Man(y) → Taller(michael, y))",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
        "Man(peter) ∧ Taller(peter, michael)",
        "∀x (Taller(michael, x) ∧ ¬Jump(x) → Block(michael, x))",
        "¬Block(michael, windy)",
        "∀x (Jump(x) → Great(x))"
      ],
      "fol_conc": "Block(peter, windy)",
      "perplexity": 1.320408821105957
    }
  },
  {
    "id": 118,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is named after all islands in Antarctica.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "LocatedIn(greenwich_island, south_shetland_islands)",
        "LocatedIn(deception_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬NamedAfter(barutin, ∀x (LocatedIn(x, antarctica)))",
      "perplexity": [
        1.134425163269043,
        1.0140866041183472
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutincove",
        "barutin",
        "snowisland",
        "greenwichisland",
        "deceptionisland",
        "southshetlandislands",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Part(snowisland, southshetlandislands)",
        "Part(greenwichisland, southshetlandislands)",
        "Part(deceptionisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z ((Located(x, y) ∧ Located(y, z)) → Located(x, z))"
      ],
      "fol_conc": "∀x (Part(x, antarctica) → Named(barutin, x))",
      "perplexity": 1.320164442062378
    }
  },
  {
    "id": 119,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Cove(x)",
        "NamedAfter(x, y)",
        "LocatedIn(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "LocatedIn(greenwich_island, south_shetland_islands)",
        "LocatedIn(deception_island, south_shetland_islands)",
        "LocatedIn(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
      ],
      "fol_conc": "∃x (Cove(x) ∧ LocatedIn(x, antarctica) ∧ ∃y (NamedAfter(x, y) ∧ LocatedIn(y, bulgaria)))",
      "perplexity": [
        1.0383875370025635,
        1.009250283241272
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Cove(x)",
        "Settlement(x)",
        "Island(x)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutincove",
        "barutin",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica",
        "bulgaria"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Located(snowisland, southshetlandislands)",
        "Located(greenwichisland, southshetlandislands)",
        "Located(deceptionisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z ((Located(x, y) ∧ Located(y, z)) → Located(x, z))"
      ],
      "fol_conc": "∃x (Cove(x) ∧ Located(x, antarctica) ∧ ∃y (Settlement(y) ∧ Located(y, bulgaria) ∧ Named(x, y)))",
      "perplexity": 1.2865341901779175
    }
  },
  {
    "id": 120,
    "nl_problem": {
      "context": [
        "Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "Barutin Cove is on the southwest coast of Snow Island.",
        "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "The South Shetland Islands are considered part of Antarctica.",
        "If A is located in B and B is located in C, then A is located in C."
      ],
      "question": "Barutin is not located in Antarctica.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "NamedAfter(x, y)",
        "LocatedIn(x, y)",
        "PartOf(x, y)"
      ],
      "fol_consts": [
        "barutin_cove",
        "barutin",
        "snow_island",
        "greenwich_island",
        "deception_island",
        "south_shetland_islands",
        "antarctica"
      ],
      "fol_rules": [
        "NamedAfter(barutin_cove, barutin)",
        "LocatedIn(barutin_cove, snow_island)",
        "LocatedIn(snow_island, south_shetland_islands)",
        "PartOf(south_shetland_islands, antarctica)",
        "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
      ],
      "fol_conc": "¬LocatedIn(barutin, antarctica)",
      "perplexity": [
        1.0326749086380005,
        1.009220838546753
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Named(x, y)",
        "Located(x, y)",
        "Part(x, y)"
      ],
      "fol_consts": [
        "barutincove",
        "barutin",
        "snowisland",
        "southshetlandislands",
        "greenwichisland",
        "deceptionisland",
        "antarctica"
      ],
      "fol_rules": [
        "Named(barutincove, barutin)",
        "Located(barutincove, snowisland)",
        "Part(snowisland, southshetlandislands)",
        "Part(greenwichisland, southshetlandislands)",
        "Part(deceptionisland, southshetlandislands)",
        "Part(southshetlandislands, antarctica)",
        "∀x ∀y ∀z ((Located(x, y) ∧ Located(y, z)) → Located(x, z))"
      ],
      "fol_conc": "¬Located(barutin, antarctica)",
      "perplexity": 1.3407611846923828
    }
  },
  {
    "id": 121,
    "nl_problem": {
      "context": [
        "Some affection is love.",
        "Some love is positive."
      ],
      "question": "Some affection is positive.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Affection(x)",
        "Love(x)",
        "Positive(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∃x (Affection(x) ∧ Love(x))",
        "∃x (Love(x) ∧ Positive(x))"
      ],
      "fol_conc": "∃x (Affection(x) ∧ Positive(x))",
      "perplexity": [
        1.04997718334198,
        1.0434263944625854
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Affection(x)",
        "Love(x)",
        "Positive(x)"
      ],
      "fol_consts": [
        "a1"
      ],
      "fol_rules": [
        "∃x (Affection(x) ∧ Love(x))",
        "∃x (Love(x) ∧ Positive(x))"
      ],
      "fol_conc": "∃x (Affection(x) ∧ Positive(x))",
      "perplexity": 2.000932216644287
    }
  },
  {
    "id": 122,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "Greyhound is an airline.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "TransportMultiplePassengers(x)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (TransportMultiplePassengers(x) → ¬Empty(x))",
        "∀x (Airline(x) → TransportMultiplePassengers(x))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x))"
      ],
      "fol_conc": "Airline(greyhound)",
      "perplexity": [
        1.0529192686080933,
        1.0131168365478516
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x ∀y (Transport(x, y) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, multiple))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬Exists(x) ∧ Plane(x) ∧ Beof(x, greyhound)"
      ],
      "fol_conc": "Airline(greyhound)",
      "perplexity": 1.7070096731185913
    }
  },
  {
    "id": 123,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is a Boeing 707.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "TransportMultiplePassengers(x)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (TransportMultiplePassengers(x) → ¬Empty(x))",
        "∀x (Airline(x) → TransportMultiplePassengers(x))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x))"
      ],
      "fol_conc": "Boeing707(greyhound)",
      "perplexity": [
        1.0386070013046265,
        1.0150723457336426
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x ∀y (Transport(x, y) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, multiple))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬Exists(x) ∧ Plane(x) ∧ Beof(x, greyhound)"
      ],
      "fol_conc": "Boeing707(greyhound)",
      "perplexity": 1.6797033548355103
    }
  },
  {
    "id": 124,
    "nl_problem": {
      "context": [
        "If something can transport multiple passengers, then they are not empty.",
        "All airlines can transport multiple passengers.",
        "All planes are empty.",
        "All Boeing 707s are planes.",
        "If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "question": "A Greyhound is not a Boeing 707.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "TransportMultiple(x)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x (TransportMultiple(x) → ¬Empty(x))",
        "∀x (Airline(x) → TransportMultiple(x))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬∃x (Boeing707(x) ∧ Greyhound(x))"
      ],
      "fol_conc": "¬(Boeing707(greyhound))",
      "perplexity": [
        1.0311533212661743,
        1.012265920639038
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Transport(x, y)",
        "Empty(x)",
        "Airline(x)",
        "Plane(x)",
        "Boeing707(x)",
        "Greyhound(x)"
      ],
      "fol_consts": [
        "greyhound"
      ],
      "fol_rules": [
        "∀x ∀y (Transport(x, y) → ¬Empty(x))",
        "∀x (Airline(x) → Transport(x, multiple))",
        "∀x (Plane(x) → Empty(x))",
        "∀x (Boeing707(x) → Plane(x))",
        "¬Airline(greyhound) → ¬Exists(x) ∧ Plane(x) ∧ Beof(x, greyhound)"
      ],
      "fol_conc": "¬Boeing707(greyhound)",
      "perplexity": 1.6962816715240479
    }
  },
  {
    "id": 125,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock is a monkey.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": [
        1.0349175930023193,
        1.0213226079940796
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Monkey(rock)",
      "perplexity": 1.364151954650879
    }
  },
  {
    "id": 126,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock has wings.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "HasWings(rock)",
      "perplexity": [
        1.0311294794082642,
        1.0196261405944824
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "Haswings(rock)",
      "perplexity": 1.3578181266784668
    }
  },
  {
    "id": 127,
    "nl_problem": {
      "context": [
        "All mammals are animals.",
        "All monkeys are mammals. ",
        "An animal is either a monkey or a bird.",
        "All birds fly.",
        "All animals breathe.",
        "If something can fly, then it has wings.",
        "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "question": "Rock does not have wings.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "HasWings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → HasWings(x))",
        "¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "¬HasWings(rock)",
      "perplexity": [
        1.0461276769638062,
        1.0115090608596802
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Animal(x)",
        "Monkey(x)",
        "Bird(x)",
        "Fly(x)",
        "Breathe(x)",
        "Haswings(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Monkey(x) → Mammal(x))",
        "∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))",
        "∀x (Bird(x) → Fly(x))",
        "∀x (Animal(x) → Breathe(x))",
        "∀x (Fly(x) → Haswings(x))",
        "¬(Fly(rock) ⊕ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock))"
      ],
      "fol_conc": "¬Haswings(rock)",
      "perplexity": 1.360603928565979
    }
  },
  {
    "id": 128,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has a wedding that is well-attended.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "Wedding(x)",
        "HasChild(x)",
        "HoneymoonParis(x)",
        "OccursInJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → HasChild(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ OccursInJuly(x) → HoneymoonParis(x))",
        "∃x (Wedding(x) ∧ OccursInJuly(x) ∧ WellAttended(x))",
        "HasChild(john) → (¬HoneymoonParis(john) ∧ ¬Wedding(john))",
        "(Wedding(john) ∧ WellAttended(john)) → (OccursInJuly(john) ∨ HoneymoonParis(john))"
      ],
      "fol_conc": "Wedding(john) ∧ WellAttended(john)",
      "perplexity": [
        1.056345820426941,
        1.0137513875961304
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (Travel(x, paris) → Wedding(x))",
        "∀x (July(x) ∧ Wedding(x) → Travel(x, paris))",
        "∃x (July(x) ∧ Wedding(x) ∧ Wellattended(x))",
        "Child(john) → ¬Travel(john, paris) ∧ ¬Wedding(john)",
        "Wellattended(x) ∧ Wedding(john) → (July(x) ∨ Travel(john, paris))"
      ],
      "fol_conc": "∃x (Wedding(john) ∧ Wellattended(x))",
      "perplexity": 1.3331379890441895
    }
  },
  {
    "id": 129,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John does not have a wedding that is well-attended.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Person(x)",
        "Wedding(x)",
        "HasChild(x)",
        "HoneymoonParis(x)",
        "InJuly(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → HasChild(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (Wedding(x) ∧ InJuly(x) → HoneymoonParis(x))",
        "∃x (Wedding(x) ∧ InJuly(x) ∧ WellAttended(x))",
        "HasChild(john) → ¬HoneymoonParis(john) ∧ ¬Wedding(john)",
        "WellAttended(Wedding(john)) → (InJuly(Wedding(john)) ∨ HoneymoonParis(john))"
      ],
      "fol_conc": "¬∃x (Wedding(x) ∧ WellAttended(x) ∧ Person(john))",
      "perplexity": [
        1.043441653251648,
        1.0089075565338135
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (Travel(x, paris) → Wedding(x))",
        "∀x (July(x) ∧ Wedding(x) → Travel(x, paris))",
        "∃x (July(x) ∧ Wedding(x) ∧ Wellattended(x))",
        "Child(john) → ¬Travel(john, paris) ∧ ¬Wedding(john)",
        "Wellattended(x) ∧ Wedding(john) → (July(x) ∨ Travel(john, paris))"
      ],
      "fol_conc": "¬(Wellattended(x) ∧ Wedding(john))",
      "perplexity": 1.3385884761810303
    }
  },
  {
    "id": 130,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has at least one child.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "HoneymoonParis(x)",
        "JulyWedding(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (JulyWedding(x) → HoneymoonParis(x))",
        "∃x (JulyWedding(x) ∧ WellAttended(x))",
        "Child(john) → ¬HoneymoonParis(john) ∧ ¬Wedding(john)",
        "WellAttended(john) → (JulyWedding(john) ∨ HoneymoonParis(john))"
      ],
      "fol_conc": "Child(john)",
      "perplexity": [
        1.0286227464675903,
        1.0217132568359375
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (Travel(x, paris) → Wedding(x))",
        "∀x (July(x) ∧ Wedding(x) → Travel(x, paris))",
        "∃x (July(x) ∧ Wedding(x) ∧ Wellattended(x))",
        "∀x (Child(x) → ¬Travel(x, paris) ∧ ¬Wedding(x))",
        "∀x (Wellattended(x) ∧ Wedding(x) → (July(x) ∨ Travel(x, paris)))"
      ],
      "fol_conc": "Child(john)",
      "perplexity": 1.3408918380737305
    }
  },
  {
    "id": 131,
    "nl_problem": {
      "context": [
        "All people who have a wedding are people who have at least one child.",
        "All people who travel to Paris for their honeymoon are people who have a wedding.",
        "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "Some weddings in July are well-attended.",
        "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
      ],
      "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "HoneymoonParis(x)",
        "JulyWedding(x)",
        "WellAttended(x)"
      ],
      "fol_consts": [
        "john"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → Child(x))",
        "∀x (HoneymoonParis(x) → Wedding(x))",
        "∀x (JulyWedding(x) → HoneymoonParis(x))",
        "∃x (JulyWedding(x) ∧ WellAttended(x))",
        "Child(john) → (¬HoneymoonParis(john) ∧ ¬Wedding(john))",
        "WellAttended(john) → (JulyWedding(john) ∨ HoneymoonParis(john))"
      ],
      "fol_conc": "¬(WellAttended(john) ∨ HoneymoonParis(john))",
      "perplexity": [
        1.0666513442993164,
        1.0151058435440063
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wedding(x)",
        "Child(x)",
        "Travel(x, y)",
        "Honeymoon(x)",
        "July(x)",
        "Wellattended(x)"
      ],
      "fol_consts": [
        "john",
        "paris"
      ],
      "fol_rules": [
        "∀x (Wedding(x) → ∃y (Child(x, y)))",
        "∀x (Travel(x, paris) → Wedding(x))",
        "∀x (Wedding(x) ∧ July(x) → Travel(x, paris))",
        "∃x (Wedding(x) ∧ July(x) ∧ Wellattended(x))",
        "Child(john) → ¬Travel(john, paris) ∧ ¬Wedding(john)",
        "Wellattended(x) → (Wedding(x) ∧ July(x)) ⊕ Travel(x, paris)"
      ],
      "fol_conc": "¬(∃x (Wedding(john) ∧ Wellattended(x))) ∧ ¬Travel(john, paris)",
      "perplexity": 1.3282079696655273
    }
  },
  {
    "id": 132,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are mammals with no teeth.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(humans)"
      ],
      "fol_conc": "Mammal(platypus) ∧ ¬HaveTeeth(platypus)",
      "perplexity": [
        1.0549460649490356,
        1.0208598375320435
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Haveteeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "platypus"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Haveteeth(x))",
        "¬Haveteeth(platypus)",
        "Mammal(platypus)",
        "Haveteeth(human)"
      ],
      "fol_conc": "Mammal(platypus) ∧ ¬Haveteeth(platypus)",
      "perplexity": 1.780787467956543
    }
  },
  {
    "id": 133,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Platypus are reptiles.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "Reptile(x)",
        "HasTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HasTeeth(x))",
        "¬HasTeeth(platypus)",
        "Mammal(platypus)",
        "HasTeeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": [
        1.0932345390319824,
        1.0354264974594116
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Haveteeth(x)",
        "Platypus(x)",
        "Human(x)",
        "Reptile(x)"
      ],
      "fol_consts": [
        "platypus"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Haveteeth(x))",
        "¬Haveteeth(platypus)",
        "Mammal(platypus)",
        "Haveteeth(human)"
      ],
      "fol_conc": "Reptile(platypus)",
      "perplexity": 1.7867196798324585
    }
  },
  {
    "id": 134,
    "nl_problem": {
      "context": [
        "[BG] Some mammals have teeth.",
        "Platypus have no teeth.",
        "Platypus are mammals. ",
        "Humans have teeth."
      ],
      "question": "Humans are mammals.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Mammal(x)",
        "HaveTeeth(x)"
      ],
      "fol_consts": [
        "platypus",
        "humans"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ HaveTeeth(x))",
        "¬HaveTeeth(platypus)",
        "Mammal(platypus)",
        "HaveTeeth(humans)"
      ],
      "fol_conc": "Mammal(humans)",
      "perplexity": [
        1.054807424545288,
        1.0243791341781616
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Haveteeth(x)",
        "Platypus(x)",
        "Human(x)"
      ],
      "fol_consts": [
        "platypus",
        "human"
      ],
      "fol_rules": [
        "∃x (Mammal(x) ∧ Haveteeth(x))",
        "¬Haveteeth(platypus)",
        "Mammal(platypus)",
        "Haveteeth(human)"
      ],
      "fol_conc": "Mammal(human)",
      "perplexity": 1.836545705795288
    }
  },
  {
    "id": 135,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space sucks.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Plunger(x)",
        "Duster(x)",
        "HouseholdAppliance(x)",
        "Space(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "∀x (Plunger(x) → Suck(x))",
        "∀x (Vacuum(x) → Suck(x))",
        "∀x (Vampire(x) → Suck(x))",
        "Vacuum(space)",
        "∀x (Duster(x) ∧ HouseholdAppliance(x) → ¬Suck(x))"
      ],
      "fol_conc": "Suck(space)",
      "perplexity": [
        1.0538439750671387,
        1.0260648727416992
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space(x)",
        "Household(x)",
        "Appliance(x)",
        "Duster(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "Suck(x) ∧ Vacuum(x) → Suck(x)",
        "Suck(x) ∧ Vampire(x) → Suck(x)",
        "Space(space)",
        "Duster(x) ∧ Household(x) ∧ Appliance(x) → ¬Suck(x)"
      ],
      "fol_conc": "Suck(space)",
      "perplexity": 1.615939736366272
    }
  },
  {
    "id": 136,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "Space is a vampire.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Suck(x)",
        "Is(x, y)",
        "HouseholdAppliance(x)"
      ],
      "fol_consts": [
        "plungers",
        "vacuums",
        "vampires",
        "space",
        "duster"
      ],
      "fol_rules": [
        "Suck(plungers)",
        "Suck(vacuums)",
        "Suck(vampires)",
        "Is(space, vacuums)",
        "∀x (Is(x, duster) → (HouseholdAppliance(x) ∧ ¬Suck(x)))"
      ],
      "fol_conc": "Is(space, vampires)",
      "perplexity": [
        1.093558430671692,
        1.0113757848739624
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Household(x)",
        "Appliance(x)",
        "Duster(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "Suck(plungers)",
        "Suck(vacuums)",
        "Suck(vampires)",
        "Vacuum(space)",
        "∀x (Duster(x) → (Household(x) ∧ Appliance(x) ∧ ¬Suck(x)))"
      ],
      "fol_conc": "Vampire(space)",
      "perplexity": 1.6379871368408203
    }
  },
  {
    "id": 137,
    "nl_problem": {
      "context": [
        "Plungers suck.",
        "Vacuums suck.",
        "Vampires suck.",
        "Space is a vacuum.",
        "A duster is a household appliance that doesn't suck."
      ],
      "question": "If something is a household appliance, it sucks.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Sucks(x)",
        "Plunger(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Space(x)",
        "Duster(x)",
        "HouseholdAppliance(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Plunger(x) → Sucks(x))",
        "∀x (Vacuum(x) → Sucks(x))",
        "∀x (Vampire(x) → Sucks(x))",
        "Space(space) ∧ Vacuum(space)",
        "∀x (Duster(x) → HouseholdAppliance(x) ∧ ¬Sucks(x))"
      ],
      "fol_conc": "∀x (HouseholdAppliance(x) → Sucks(x))",
      "perplexity": [
        1.052250623703003,
        1.0109621286392212
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Suck(x)",
        "Vacuum(x)",
        "Vampire(x)",
        "Plunger(x)",
        "Household(x)",
        "Appliance(x)"
      ],
      "fol_consts": [
        "space"
      ],
      "fol_rules": [
        "Suck(x) ∧ Plunger(x)",
        "Suck(x) ∧ Vacuum(x)",
        "Suck(x) ∧ Vampire(x)",
        "Vacuum(space)",
        "Household(x) ∧ Appliance(x) → ¬Suck(x)"
      ],
      "fol_conc": "Household(x) ∧ Appliance(x) → Suck(x)",
      "perplexity": 1.5664026737213135
    }
  },
  {
    "id": 138,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "MLAlgorithm(x)",
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "RequiresLabelledData(x)",
        "TrainsTextSummarization(x)",
        "StateOfTheArt(x)"
      ],
      "fol_consts": [
        "model"
      ],
      "fol_rules": [
        "∀x (MLAlgorithm(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "∀x (Unsupervised(x) → ¬RequiresLabelledData(x))",
        "TrainsTextSummarization(model)",
        "¬Reinforcement(x) ∧ TrainsTextSummarization(x) → ¬StateOfTheArt(x)",
        "∀x (MLAlgorithm(x) ∧ TrainsTextSummarization(x) → RequiresLabelledData(x))"
      ],
      "fol_conc": "Supervised(x) ∧ TrainsTextSummarization(x) ∧ StateOfTheArt(x)",
      "perplexity": [
        1.0650986433029175,
        1.014701008796692
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Machinelearning(x)",
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Requires(x, y)",
        "Trainedwith(x, y)",
        "Stateoftheart(x)"
      ],
      "fol_consts": [
        "text",
        "summarization",
        "model"
      ],
      "fol_rules": [
        "∀x (Machinelearning(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "Unsupervised(x) → ¬Requires(x, y)",
        "Stateoftheart(model) ∧ Trainedwith(model, text) ∧ Trainedwith(model, summarization)",
        "¬Reinforcement(x) ∧ Trainedwith(model, x)",
        "Requires(x, y) ∧ Trainedwith(x, y)"
      ],
      "fol_conc": "Supervised(x) ∧ Trainedwith(model, x)",
      "perplexity": 1.4860316514968872
    }
  },
  {
    "id": 139,
    "nl_problem": {
      "context": [
        "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "Unsupervised learning doesn't require labelled data.",
        "The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "ML(x)",
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "RequiresLabelledData(x)",
        "UsedFor(x, y)",
        "TextSummarization(x)",
        "StateOfTheArt(x)"
      ],
      "fol_consts": [
        "summarizationModel"
      ],
      "fol_rules": [
        "∀x (ML(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "∀x (Unsupervised(x) → ¬RequiresLabelledData(x))",
        "ML(summarizationModel)",
        "¬Reinforcement(summarizationModel)",
        "RequiresLabelledData(summarizationModel)"
      ],
      "fol_conc": "UsedFor(Unsupervised(x), summarizationModel)",
      "perplexity": [
        1.0875144004821777,
        1.0244731903076172
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Machinelearning(x)",
        "Supervised(x)",
        "Unsupervised(x)",
        "Reinforcement(x)",
        "Requires(x, y)",
        "Trainedwith(x, y)",
        "Stateoftheart(x)"
      ],
      "fol_consts": [
        "text",
        "summarization",
        "model"
      ],
      "fol_rules": [
        "∀x (Machinelearning(x) → (Supervised(x) ⊕ Unsupervised(x) ⊕ Reinforcement(x)))",
        "Unsupervised(x) → ¬Requires(x, y)",
        "Stateoftheart(model) ∧ Trainedwith(model, text) ∧ Trainedwith(model, summarization)",
        "¬Reinforcement(x) ∧ Trainedwith(model, x)",
        "Requires(x, y) ∧ Trainedwith(x, y)"
      ],
      "fol_conc": "Trainedwith(model, x) ∧ Unsupervised(x)",
      "perplexity": 1.4790617227554321
    }
  },
  {
    "id": 140,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is loved by children.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromSimpsons(x))",
        "FromSimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "LovedByChildren(ben)",
      "perplexity": [
        1.0310801267623901,
        1.0232570171356201
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Loved(x, y)",
        "From(x, y)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben",
        "simpsons"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Loved(x, children) → Funny(x))",
        "∀x (From(x, simpsons) → Loved(x, children))",
        "∀x (Yellow(x) → From(x, simpsons))",
        "From(ben, simpsons) ⊕ Funny(ben)"
      ],
      "fol_conc": "Loved(ben, children)",
      "perplexity": 1.330772876739502
    }
  },
  {
    "id": 141,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is ugly or yellow.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromSimpsons(x))",
        "FromSimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "Ugly(ben) ⊕ Yellow(ben)",
      "perplexity": [
        1.0475165843963623,
        1.016862154006958
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Loved(x)",
        "From(x, y)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben",
        "simpsons"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Loved(x) → Funny(x))",
        "∀x (From(x, simpsons) → Loved(x))",
        "∀x (Yellow(x) → From(x, simpsons))",
        "From(ben, simpsons) ⊕ Funny(ben)"
      ],
      "fol_conc": "Ugly(ben) ⊕ Yellow(ben)",
      "perplexity": 1.4339256286621094
    }
  },
  {
    "id": 142,
    "nl_problem": {
      "context": [
        "If a cartoon character is funny, then it is popular.",
        "If a cartoon character is ugly, then it is not popular.",
        "If a cartoon character is loved by children, then it is funny.",
        "If a cartoon character is from The Simpsons, then it is loved by children.",
        "If a cartoon character is yellow, then it is from The Simpsons.",
        "Ben is either from The Simpsons or funny."
      ],
      "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "LovedByChildren(x)",
        "FromSimpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (LovedByChildren(x) → Funny(x))",
        "∀x (FromSimpsons(x) → LovedByChildren(x))",
        "∀x (Yellow(x) → FromSimpsons(x))",
        "FromSimpsons(ben) ⊕ Funny(ben)"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ∨ Ugly(ben))",
      "perplexity": [
        1.0376813411712646,
        1.0160691738128662
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Funny(x)",
        "Popular(x)",
        "Ugly(x)",
        "Loved(x)",
        "Simpsons(x)",
        "Yellow(x)"
      ],
      "fol_consts": [
        "ben"
      ],
      "fol_rules": [
        "∀x (Funny(x) → Popular(x))",
        "∀x (Ugly(x) → ¬Popular(x))",
        "∀x (Loved(x) → Funny(x))",
        "∀x (Simpsons(x) → Loved(x))",
        "∀x (Yellow(x) → Simpsons(x))",
        "(Simpsons(ben) ⊕ Funny(ben))"
      ],
      "fol_conc": "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ∨ Ugly(ben))",
      "perplexity": 1.4120020866394043
    }
  },
  {
    "id": 143,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Some Heck cattle are artificially selected.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "BredBack(x)",
        "ArtificialSelection(x)",
        "DeliberateSelectiveBreeding(x)",
        "Domestic(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "BreedingBack",
        "HeckCattle",
        "Aurochs"
      ],
      "fol_rules": [
        "BredBack(BreedingBack) ∧ ArtificialSelection(BreedingBack) ∧ DeliberateSelectiveBreeding(BreedingBack) ∧ ∀x (BredBack(x) → Domestic(x))",
        "BredBack(BreedingBack) ∧ Resemble(HeckCattle, Aurochs) ∧ ¬Extinct(Aurochs)",
        "Animal(HeckCattle)",
        "Animal(Aurochs)",
        "∃x (Animal(x) ∧ BredBack(x) ∧ Resemble(x, y) ∧ Extinct(y))"
      ],
      "fol_conc": "ArtificialSelection(HeckCattle)",
      "perplexity": [
        1.0999215841293335,
        1.01863694190979
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breedingback(x)",
        "Artificialselection(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Heckcattle(x)",
        "Aurochs(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "Breedingback(x) → Artificialselection(x)",
        "Breedingback(heckcattle)",
        "Resemble(heckcattle, aurochs)",
        "Animal(heckcattle)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Breedingback(x) ∧ Resemble(x, y) ∧ Extinct(y))"
      ],
      "fol_conc": "∃x (Heckcattle(x) ∧ Artificialselection(x))",
      "perplexity": 1.5027955770492554
    }
  },
  {
    "id": 144,
    "nl_problem": {
      "context": [
        "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "[BG] Heck cattle are animals.",
        "[BG] Aurochs are animals.",
        "Some animals to be bred-back resemble animals that are extinct."
      ],
      "question": "Aurochs are extinct.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "BreedingBack(x)",
        "ArtificialSelection(x)",
        "DeliberateSelectiveBreeding(x)",
        "Domestic(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "breeding_back",
        "heck_cattle",
        "aurochs"
      ],
      "fol_rules": [
        "BreedingBack(breeding_back) ∧ ArtificialSelection(breeding_back) ∧ DeliberateSelectiveBreeding(breeding_back)",
        "BreedingBack(breeding_back) ∧ Resemble(heck_cattle, aurochs) ∧ ¬Domestic(aurochs)",
        "Animal(heck_cattle)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ BreedingBack(x) ∧ Resemble(x, y) ∧ Extinct(y))"
      ],
      "fol_conc": "Extinct(aurochs)",
      "perplexity": [
        1.0625646114349365,
        1.0215849876403809
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Breedingback(x)",
        "Artificialselection(x)",
        "Selectivebreeding(x)",
        "Domestic(x)",
        "Resemble(x, y)",
        "Extinct(x)",
        "Animal(x)"
      ],
      "fol_consts": [
        "breedingback",
        "heckcattle",
        "aurochs"
      ],
      "fol_rules": [
        "Breedingback(x) → Artificialselection(x)",
        "Breedingback(x) → Selectivebreeding(x)",
        "Breedingback(x) → Domestic(x)",
        "Resemble(heckcattle, aurochs)",
        "Animal(heckcattle)",
        "Animal(aurochs)",
        "∃x (Animal(x) ∧ Breedingback(x) ∧ Resemble(x, y) ∧ Extinct(y))"
      ],
      "fol_conc": "Extinct(aurochs)",
      "perplexity": 1.4570666551589966
    }
  },
  {
    "id": 145,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is young.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "¬∃x (Young(x) ∧ Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Young(jerry)",
      "perplexity": [
        1.036946415901184,
        1.0234318971633911
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "(Young(rose) ∨ Student(rose))"
      ],
      "fol_conc": "Young(jerry)",
      "perplexity": 1.396439552307129
    }
  },
  {
    "id": 146,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Jerry is not young.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "¬∃x (Young(x) ∧ Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": [
        1.0405691862106323,
        1.0240395069122314
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "(Young(rose) ∨ Student(rose))"
      ],
      "fol_conc": "¬Young(jerry)",
      "perplexity": 1.3944423198699951
    }
  },
  {
    "id": 147,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or a manager.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ∨ Manager(rose)",
      "perplexity": [
        1.0524386167526245,
        1.0137572288513184
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "(Young(rose) ⊕ Student(rose))"
      ],
      "fol_conc": "Human(rose) ⊕ Manager(rose)",
      "perplexity": 1.390418529510498
    }
  },
  {
    "id": 148,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "Rose is a human or Jerry is a manager.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "Human(rose) ∨ Manager(jerry)",
      "perplexity": [
        1.0441255569458008,
        1.0208063125610352
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "(Young(rose) ⊕ Student(rose))"
      ],
      "fol_conc": "Human(rose) ∨ Manager(jerry)",
      "perplexity": 1.3917704820632935
    }
  },
  {
    "id": 149,
    "nl_problem": {
      "context": [
        "All students are humans. ",
        "If someone studies, then they are a student.",
        "A person either studys or teaches.",
        "No young person teaches.",
        "Jerry neither teaches nor is a manager.",
        "Rose is young or a student."
      ],
      "question": "It is not true that Rose is a student and Jerry is a human.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Student(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "¬∃x (Young(x) ∧ Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "Young(rose) ⊕ Student(rose)"
      ],
      "fol_conc": "¬(Student(rose) ∧ Human(jerry))",
      "perplexity": [
        1.0315810441970825,
        1.0275131464004517
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Human(x)",
        "Studies(x)",
        "Teaches(x)",
        "Young(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "jerry",
        "rose"
      ],
      "fol_rules": [
        "∀x (Student(x) → Human(x))",
        "∀x (Studies(x) → Student(x))",
        "∀x (Studies(x) ⊕ Teaches(x))",
        "∀x (Young(x) → ¬Teaches(x))",
        "¬(Teaches(jerry) ∨ Manager(jerry))",
        "(Young(rose) ∨ Student(rose))"
      ],
      "fol_conc": "¬(Student(rose) ∧ Human(jerry))",
      "perplexity": 1.3785024881362915
    }
  },
  {
    "id": 150,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Neapolitan Chronicles is an English book.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "PublishingHouse(x)",
        "SpecializesIn(x, y)",
        "TranslatedFrom(x, y)",
        "PublishedBy(x, y)",
        "InEnglish(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "italian",
        "palace_of_flies"
      ],
      "fol_rules": [
        "PublishingHouse(new_vessel_press)",
        "SpecializesIn(new_vessel_press, TranslatedFrom(x, y))",
        "∀x (PublishedBy(x, new_vessel_press) → InEnglish(x))",
        "PublishedBy(neapolitan_chronicles, new_vessel_press)",
        "TranslatedFrom(neapolitan_chronicles, italian)",
        "PublishedBy(palace_of_flies, new_vessel_press)"
      ],
      "fol_conc": "InEnglish(neapolitan_chronicles)",
      "perplexity": [
        1.0512176752090454,
        1.010547399520874
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Publishinghouse(x)",
        "Specializes(x, y)",
        "Translated(x, y)",
        "Published(x, y)",
        "English(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "newvesselpress",
        "english",
        "neapolitanchronicles",
        "italian",
        "palaceofflies"
      ],
      "fol_rules": [
        "Publishinghouse(newvesselpress)",
        "Specializes(newvesselpress, english)",
        "∀x (Published(x, newvesselpress) → English(x))",
        "Published(neapolitanchronicles, newvesselpress)",
        "Translated(neapolitanchronicles, italian)",
        "Published(palaceofflies, newvesselpress)"
      ],
      "fol_conc": "English(neapolitanchronicles)",
      "perplexity": 1.5039161443710327
    }
  },
  {
    "id": 151,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Harry Potter was published by New Vessel Press.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "PublishingHouse(x)",
        "SpecializesIn(x, y)",
        "TranslatedFrom(x, y)",
        "PublishedBy(x, y)",
        "InEnglish(x)"
      ],
      "fol_consts": [
        "newVesselPress",
        "neapolitanChronicles",
        "italian",
        "palaceOfFlies",
        "harryPotter"
      ],
      "fol_rules": [
        "PublishingHouse(newVesselPress)",
        "SpecializesIn(newVesselPress, TranslatedFrom(x, y))",
        "∀x (PublishedBy(x, newVesselPress) → InEnglish(x))",
        "PublishedBy(neapolitanChronicles, newVesselPress)",
        "TranslatedFrom(neapolitanChronicles, italian)",
        "PublishedBy(palaceOfFlies, newVesselPress)"
      ],
      "fol_conc": "PublishedBy(harryPotter, newVesselPress)",
      "perplexity": [
        1.0607529878616333,
        1.0114854574203491
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Publishinghouse(x)",
        "Specializes(x, y)",
        "Translated(x, y)",
        "Published(x, y)",
        "Inenglish(x)",
        "Book(x)"
      ],
      "fol_consts": [
        "newvesselpress",
        "english",
        "neapolitanchronicles",
        "italian",
        "palaceofflies",
        "harrypotter"
      ],
      "fol_rules": [
        "Publishinghouse(newvesselpress)",
        "Specializes(newvesselpress, english)",
        "∀x (Published(x, newvesselpress) → Inenglish(x))",
        "Published(neapolitanchronicles, newvesselpress)",
        "Translated(neapolitanchronicles, italian)",
        "Published(palaceofflies, newvesselpress)"
      ],
      "fol_conc": "Published(harrypotter, newvesselpress)",
      "perplexity": 1.500264048576355
    }
  },
  {
    "id": 152,
    "nl_problem": {
      "context": [
        "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "All of New Vessel Press's published books are in English.",
        "Neapolitan Chronicles is a book published by New Vessel Press.",
        "Neapolitan Chronicles was translated from Italian.",
        "Palace of Flies is a book published by New Vessel Press."
      ],
      "question": "Palace of Flies was translated from Italian.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "PublishingHouse(x)",
        "SpecializesIn(x, y)",
        "PublishedBy(x, y)",
        "InEnglish(x)",
        "TranslatedFrom(x, y)"
      ],
      "fol_consts": [
        "new_vessel_press",
        "neapolitan_chronicles",
        "palace_of_flies",
        "english",
        "italian"
      ],
      "fol_rules": [
        "PublishingHouse(new_vessel_press)",
        "SpecializesIn(new_vessel_press, TranslatedFrom(x, english))",
        "∀x (PublishedBy(x, new_vessel_press) → InEnglish(x))",
        "PublishedBy(neapolitan_chronicles, new_vessel_press)",
        "TranslatedFrom(neapolitan_chronicles, italian)",
        "PublishedBy(palace_of_flies, new_vessel_press)"
      ],
      "fol_conc": "TranslatedFrom(palace_of_flies, italian)",
      "perplexity": [
        1.035030722618103,
        1.0113581418991089
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Publishinghouse(x)",
        "Specializes(x, y)",
        "Translated(x, y)",
        "Published(x, y)",
        "Inenglish(x)"
      ],
      "fol_consts": [
        "newvesselpress",
        "neapolitanchronicles",
        "palaceofflies",
        "italian",
        "english"
      ],
      "fol_rules": [
        "Publishinghouse(newvesselpress)",
        "Specializes(newvesselpress, english)",
        "∀x (Published(x, newvesselpress) → Inenglish(x))",
        "Published(neapolitanchronicles, newvesselpress)",
        "Translated(neapolitanchronicles, italian)",
        "Published(palaceofflies, newvesselpress)"
      ],
      "fol_conc": "Translated(palaceofflies, italian)",
      "perplexity": 1.544385313987732
    }
  },
  {
    "id": 153,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy visits the office supply store regularly.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "OwnMonitor(x)",
        "WorkAtHome(x)",
        "HomeOffice(x)",
        "TidyHome(x)",
        "VisitStore(x)",
        "LateBed(x)",
        "WakeUpNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnMonitor(x) → WorkAtHome(x))",
        "∀x (HomeOffice(x) → OwnMonitor(x))",
        "∀x (WorkAtHome(x) → TidyHome(x))",
        "∀x (WorkAtHome(x) → VisitStore(x))",
        "∀x (TidyHome(x) → ¬(LateBed(x) ∧ WakeUpNoon(x)))",
        "(LateBed(remy) ∧ WakeUpNoon(remy) ∧ TidyHome(remy)) ⊕ ¬(LateBed(remy) ∨ WakeUpNoon(remy) ∨ TidyHome(remy))"
      ],
      "fol_conc": "VisitStore(remy)",
      "perplexity": [
        1.03759765625,
        1.0090798139572144
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Free(x)",
        "Tidying(x)",
        "Organizing(x)",
        "Spaces(x)",
        "Bed(x)",
        "Late(x)",
        "Wake(x)",
        "Noon(x)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "remy",
        "monitor"
      ],
      "fol_rules": [
        "∀x ∀y (Own(x, y) ∧ Large(y) ∧ Desktop(y) ∧ Home(y) → Work(x) ∧ Regularly(x))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, monitor))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Free(x) ∧ Tidying(x))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, office))",
        "∀x (Free(x) ∧ Tidying(x) ∧ Organizing(x) ∧ Spaces(x) → ¬(Bed(x) ∧ Late(x) ∧ Wake(x) ∧ Noon(x)))",
        "(Bed(remy) ∧ Late(remy) ∧ Wake(remy) ∧ Noon(remy) ∧ Free(remy) ∧ Tidying(remy)) ⊕ ¬(Bed(remy) ∧ Late(remy) ∧ Wake(remy) ∧ Noon(remy))"
      ],
      "fol_conc": "Visit(remy, office)",
      "perplexity": 1.2963991165161133
    }
  },
  {
    "id": 156,
    "nl_problem": {
      "context": [
        "All humans are mortal.",
        "All Greeks are humans."
      ],
      "question": "Some Greeks are mortal.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": [
        1.043548583984375,
        1.0386407375335693
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Human(x)",
        "Mortal(x)",
        "Greek(x)"
      ],
      "fol_consts": [
        "g1"
      ],
      "fol_rules": [
        "∀x (Human(x) → Mortal(x))",
        "∀x (Greek(x) → Human(x))"
      ],
      "fol_conc": "∃x (Greek(x) ∧ Mortal(x))",
      "perplexity": 2.021322250366211
    }
  },
  {
    "id": 157,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James has a part-time job offered by the university.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSdepartment(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedBy(x, y)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSdepartment(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSdepartment(x))",
        "∀x (Student(x) ∧ InstructedBy(x, david) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedBy(x, david))",
        "Student(james) ∧ WorkLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack)"
      ],
      "fol_conc": "PartTimeJob(james)",
      "perplexity": [
        1.05078125,
        1.0256056785583496
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Library(y)",
        "Computer(x)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, z)",
        "Database(z)",
        "Instructed(x, y)",
        "Professor(y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, y) ∧ Library(y) → ¬Computer(x))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, y) ∧ Library(y))",
        "∀x (Student(x) ∧ Take(x, z) → Computer(x))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, z) ∧ Database(z))",
        "∀x (Student(x) ∧ Work(x, y) ∧ Lab(y) → Instructed(x, david))",
        "Student(james) ∧ Work(james, y) ∧ Lab(y)",
        "¬(Parttime(jack) ∨ Work(jack, y))"
      ],
      "fol_conc": "Parttime(james)",
      "perplexity": 1.2457704544067383
    }
  },
  {
    "id": 158,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James does not have a part-time job offered by the university.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorkLibrary(x)",
        "CSdepartment(x)",
        "PartTimeJob(x)",
        "TakeDatabase(x)",
        "InstructedByDavid(x)",
        "WorkLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSdepartment(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x))",
        "∀x (Student(x) ∧ TakeDatabase(x) → CSdepartment(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakeDatabase(x))",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorkLab(james)",
        "¬(PartTimeJob(jack) ∨ WorkLab(jack))"
      ],
      "fol_conc": "¬PartTimeJob(james)",
      "perplexity": [
        1.0445170402526855,
        1.0154362916946411
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Library(y)",
        "Computer(x)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, z)",
        "Database(z)",
        "Instructed(x, y)",
        "Professor(y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, y) ∧ Library(y) → ¬Computer(x))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, y) ∧ Library(y))",
        "∀x (Student(x) ∧ Take(x, z) → Computer(x))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, z) ∧ Database(z))",
        "∀x (Student(x) ∧ Work(x, y) ∧ Lab(y) → Instructed(x, david))",
        "Student(james) ∧ Work(james, y) ∧ Lab(y)",
        "¬(Parttime(jack) ∨ Work(jack, y))"
      ],
      "fol_conc": "¬Parttime(james)",
      "perplexity": 1.2895891666412354
    }
  },
  {
    "id": 159,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "James either takes the database course or has a part-time job offered by the university.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorksInLibrary(x)",
        "ComputerScience(x)",
        "PartTimeJob(x)",
        "TakesDatabase(x)",
        "InstructedByDavid(x)",
        "WorksInLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorksInLibrary(x) → ¬ComputerScience(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorksInLibrary(x))",
        "∀x (Student(x) ∧ TakesDatabase(x) → ComputerScience(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakesDatabase(x))",
        "∀x (Student(x) ∧ WorksInLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorksInLab(james)",
        "¬(PartTimeJob(jack) ∨ WorksInLab(jack))"
      ],
      "fol_conc": "TakesDatabase(james) ⊕ PartTimeJob(james)",
      "perplexity": [
        1.0296629667282104,
        1.0163215398788452
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Library(y)",
        "Computer(x)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, z)",
        "Database(z)",
        "Instructed(x, y)",
        "Professor(y)",
        "Lab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, y) ∧ Library(y) → ¬Computer(x))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, y) ∧ Library(y))",
        "∀x (Student(x) ∧ Take(x, z) → Computer(x))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, z) ∧ Database(z))",
        "∀x (Student(x) ∧ Work(x, y) ∧ Lab(y) → Instructed(x, david))",
        "Student(james) ∧ Work(james, y) ∧ Lab(y)",
        "¬(Parttime(jack) ∨ Work(jack, y))",
        "¬(Work(jack, y) ∧ Lab(y))"
      ],
      "fol_conc": "Take(james, z) ∨ Parttime(james)",
      "perplexity": 1.2827016115188599
    }
  },
  {
    "id": 160,
    "nl_problem": {
      "context": [
        "No students who work in the library are from the computer science department. ",
        "All students who have part-time jobs offered by the university are students who work in the library. ",
        "All students who take the database course are from the computer science department. ",
        "All students instructed by professor David are taking the database course. ",
        "All students working in the lab are instructed by professor David. ",
        "James is a student working in the lab. ",
        "Jack neither has a part-time job offered by the university nor works in the lab. "
      ],
      "question": "Jack takes the database course.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Student(x)",
        "WorksInLibrary(x)",
        "FromCS(x)",
        "PartTimeJob(x)",
        "TakesDatabase(x)",
        "InstructedByDavid(x)",
        "WorksInLab(x)"
      ],
      "fol_consts": [
        "james",
        "jack",
        "david"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ WorksInLibrary(x) → ¬FromCS(x))",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorksInLibrary(x))",
        "∀x (Student(x) ∧ TakesDatabase(x) → FromCS(x))",
        "∀x (Student(x) ∧ InstructedByDavid(x) → TakesDatabase(x))",
        "∀x (Student(x) ∧ WorksInLab(x) → InstructedByDavid(x))",
        "Student(james) ∧ WorksInLab(james)",
        "¬PartTimeJob(jack) ∧ ¬WorksInLab(jack)"
      ],
      "fol_conc": "TakesDatabase(jack)",
      "perplexity": [
        1.0410999059677124,
        1.0108668804168701
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Student(x)",
        "Work(x, y)",
        "Library(y)",
        "Computer(x)",
        "Parttime(x)",
        "Offered(x, y)",
        "Take(x, z)",
        "Database(z)",
        "Instructed(x, y)",
        "Professor(y)",
        "Lab(x)",
        "James(x)",
        "Jack(x)"
      ],
      "fol_consts": [
        "david",
        "university"
      ],
      "fol_rules": [
        "∀x (Student(x) ∧ Work(x, y) ∧ Library(y) → ¬Computer(x))",
        "∀x (Student(x) ∧ Parttime(x) → Work(x, y) ∧ Library(y))",
        "∀x (Student(x) ∧ Take(x, z) → Computer(x))",
        "∀x (Student(x) ∧ Instructed(x, david) → Take(x, z) ∧ Database(z))",
        "∀x (Student(x) ∧ Work(x, y) ∧ Lab(y) → Instructed(x, david))",
        "Student(james) ∧ Work(james, y) ∧ Lab(y)",
        "¬(Parttime(jack) ∨ Work(jack, y))"
      ],
      "fol_conc": "Take(jack, z) ∧ Database(z)",
      "perplexity": 1.2832846641540527
    }
  },
  {
    "id": 161,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George likes music and has access to a program, he will compose.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccessToProgram(x)",
        "CanCompose(x)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "HasAccessToProgram(george) → CanCompose(george)",
        "CanCompose(george) ∧ WantsToCompose(george) → Compose(george)"
      ],
      "fol_conc": "(LikesMusic(george) ∧ HasAccessToProgram(george)) → Compose(george)",
      "perplexity": [
        1.075352430343628,
        1.0144952535629272
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x, y)",
        "Wants(x, y)",
        "Has(x, y)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "music",
        "program"
      ],
      "fol_rules": [
        "Likes(george, music) → Wants(george, compose)",
        "Has(george, program) → Compose(george)",
        "Wants(george, compose) ∧ Compose(george) → Compose(george)"
      ],
      "fol_conc": "Likes(george, music) ∧ Has(george, program) → Compose(george)",
      "perplexity": 1.579921841621399
    }
  },
  {
    "id": 162,
    "nl_problem": {
      "context": [
        "If George likes music, he wants to compose.",
        "If George has access to a program, he can compose.",
        "If George can compose and wants to compose, he will compose."
      ],
      "question": "If George will not compose, George can not compose.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "LikesMusic(x)",
        "WantsToCompose(x)",
        "HasAccess(x, y)",
        "CanCompose(x)",
        "Compose(x)"
      ],
      "fol_consts": [
        "george",
        "program"
      ],
      "fol_rules": [
        "LikesMusic(george) → WantsToCompose(george)",
        "HasAccess(george, program) → CanCompose(george)",
        "(CanCompose(george) ∧ WantsToCompose(george)) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬CanCompose(george)",
      "perplexity": [
        1.0619608163833618,
        1.0218877792358398
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Likes(x, y)",
        "Wants(x, y)",
        "Compose(x)",
        "Has(x, y)",
        "Program(x)"
      ],
      "fol_consts": [
        "george",
        "music"
      ],
      "fol_rules": [
        "Likes(george, music) → Wants(george, compose)",
        "Has(george, x) ∧ Program(x) → Compose(george)",
        "Wants(george, compose) ∧ Compose(george) → Compose(george)"
      ],
      "fol_conc": "¬Compose(george) → ¬Compose(george)",
      "perplexity": 1.6287057399749756
    }
  },
  {
    "id": 163,
    "nl_problem": {
      "context": [
        "A hawk never lands. ",
        "Some birds are hawks."
      ],
      "question": "All birds land",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(x)",
        "Lands(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Lands(x))",
      "perplexity": [
        1.0768202543258667,
        1.0213136672973633
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Hawk(x)",
        "Bird(x)",
        "Lands(x)"
      ],
      "fol_consts": [
        "x1"
      ],
      "fol_rules": [
        "∀x (Hawk(x) → ¬Lands(x))",
        "∃x (Bird(x) ∧ Hawk(x))"
      ],
      "fol_conc": "∀x (Bird(x) → Lands(x))",
      "perplexity": 2.0657613277435303
    }
  },
  {
    "id": 164,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is on Monday at 8 pm.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "OnTV(x, y, z)",
        "Rose(x)",
        "Bachelor(x)",
        "PortraysRealPeople(x)",
        "RealityTV(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x ∃y (Rose(x) ∧ OnTV(x, y, monday) ∧ Be(y, pm8))",
        "∀x (Rose(x) ∧ OnTV(x, y, z) → Bachelor(x))",
        "∀x (Bachelor(x) → PortraysRealPeople(x))",
        "∀x (PortraysRealPeople(x) → RealityTV(x))",
        "¬RealityTV(breakingbad)"
      ],
      "fol_conc": "¬OnTV(breakingbad, pm8, monday)",
      "perplexity": [
        1.121309518814087,
        1.0172398090362549
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ontime(x, y, z)",
        "Givenout(x, y)",
        "Onbachelor(x)",
        "Portray(x, y)",
        "Realityshow(x)"
      ],
      "fol_consts": [
        "monday",
        "pm8",
        "rose",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x (Ontime(x, monday, pm8) ∧ Givenout(rose, x))",
        "∀x (Givenout(x, bachelor) → Onbachelor(x))",
        "∀x (Onbachelor(x) → Portray(x, realpeople))",
        "∀x (Portray(x, realpeople) → Realityshow(x))",
        "¬Realityshow(breakingbad)"
      ],
      "fol_conc": "¬Ontime(breakingbad, monday, pm8)",
      "perplexity": 1.5071526765823364
    }
  },
  {
    "id": 165,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "RoseGiven(x, y, z)",
        "OnTV(x)",
        "OnBachelor(x)",
        "RealLife(x)",
        "RealityTV(x)"
      ],
      "fol_consts": [
        "bachelor",
        "breakingbad",
        "monday",
        "pm8"
      ],
      "fol_rules": [
        "∃x (RoseGiven(x, pm8, monday))",
        "∀x (RoseGiven(x, y, z) → OnTV(x))",
        "∀x (OnBachelor(x) → RealLife(x))",
        "∀x (RealLife(x) → RealityTV(x))",
        "¬RealityTV(breakingbad)"
      ],
      "fol_conc": "¬RoseGiven(breakingbad, pm8, monday)",
      "perplexity": [
        1.094795823097229,
        1.0163151025772095
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Give(x, y, z)",
        "Onb(x, y)",
        "Onb(x)",
        "Real(x)",
        "Reality(x)",
        "Show(x)"
      ],
      "fol_consts": [
        "rose",
        "tv",
        "monday",
        "pm8",
        "bachelor",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x ∃y (Give(rose, x, y) ∧ Onb(x, monday) ∧ Onb(y, pm8))",
        "∀x (Give(x, tv, bachelor) → Onb(x, bachelor))",
        "∀x (Onb(x, bachelor) → Real(x))",
        "∀x (Real(x) → Reality(x))",
        "¬Reality(breakingbad)"
      ],
      "fol_conc": "Show(breakingbad) ∧ ∃x ∃y (Give(rose, x, y) ∧ Onb(x, monday) ∧ Onb(y, pm8))",
      "perplexity": 1.5007013082504272
    }
  },
  {
    "id": 166,
    "nl_problem": {
      "context": [
        "On some Mondays at 8 pm, roses are given out on TV.",
        "Every rose given out on TV is on the Bachelor.",
        "Everything on the Bachelor portrays the lives of real people.",
        "All shows portraying the lives of real people are reality TV shows.",
        "Breaking Bad is not a reality TV show."
      ],
      "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "GiveOut(x, y, z)",
        "OnShow(x, y)",
        "Portray(x, y)",
        "RealPeople(x)",
        "RealityTV(x)"
      ],
      "fol_consts": [
        "roses",
        "bachelor",
        "monday",
        "pm8",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x ∃y (GiveOut(roses, x, pm8) ∧ Be(x, monday))",
        "∀x (GiveOut(x, y, z) → OnShow(x, y))",
        "∀x (OnShow(x, bachelor) → Portray(x, RealPeople()))",
        "∀x (Portray(x, RealPeople()) → RealityTV(x))",
        "¬RealityTV(breakingbad)"
      ],
      "fol_conc": "GiveOut(roses, breakingbad, pm8) → Be(breakingbad, monday)",
      "perplexity": [
        1.0930254459381104,
        1.0143955945968628
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Give(x, y, z)",
        "Onb(x, y)",
        "Portray(x, y)",
        "Reality(x)",
        "Show(x)"
      ],
      "fol_consts": [
        "rose",
        "tv",
        "bachelor",
        "monday",
        "pm8",
        "breakingbad"
      ],
      "fol_rules": [
        "∃x ∃y (Give(rose, tv, x) ∧ Onb(x, monday) ∧ Onb(x, pm8))",
        "∀x (Give(x, tv) → Onb(x, bachelor))",
        "∀x (Onb(x, bachelor) → Portray(x, y))",
        "∀x (Portray(x, y) → Reality(x))",
        "¬Reality(breakingbad)"
      ],
      "fol_conc": "Give(rose, breakingbad, x) → (Onb(x, monday) ∧ Onb(x, pm8))",
      "perplexity": 1.4681893587112427
    }
  },
  {
    "id": 167,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "Heinrich Schmidt was either German or Russian.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Nazi(x)",
        "Politician(x)",
        "Member(x, y)",
        "PrussianParliament(x)",
        "Reichstag(x)",
        "German(x)",
        "Russian(x)"
      ],
      "fol_consts": [
        "heinrich_schmidt"
      ],
      "fol_rules": [
        "Nazi(heinrich_schmidt) ∧ Politician(heinrich_schmidt)",
        "Member(heinrich_schmidt, PrussianParliament(x)) ∧ Member(heinrich_schmidt, Reichstag(x))"
      ],
      "fol_conc": "German(heinrich_schmidt) ∨ Russian(heinrich_schmidt)",
      "perplexity": [
        1.0877829790115356,
        1.02744722366333
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nazi(x)",
        "German(x)",
        "Russian(x)",
        "Politician(x)",
        "Member(x, y)"
      ],
      "fol_consts": [
        "heinrich"
      ],
      "fol_rules": [
        "Nazi(heinrich) ∧ Politician(heinrich)",
        "Member(heinrich, prussian) ∧ Member(heinrich, reichstag)"
      ],
      "fol_conc": "German(heinrich) ⊕ Russian(heinrich)",
      "perplexity": 1.845228910446167
    }
  },
  {
    "id": 168,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "NaziGermanPolitician(x)",
        "MemberOfPrussianParliament(x)",
        "MemberOfNaziReichstag(x)"
      ],
      "fol_consts": [
        "heinrichSchmidt"
      ],
      "fol_rules": [
        "NaziGermanPolitician(heinrichSchmidt)",
        "MemberOfPrussianParliament(heinrichSchmidt)",
        "MemberOfNaziReichstag(heinrichSchmidt)"
      ],
      "fol_conc": "∃x (NaziGermanPolitician(x) ∧ MemberOfPrussianParliament(x) ∧ MemberOfNaziReichstag(x))",
      "perplexity": [
        1.0932708978652954,
        1.0294233560562134
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nazi(x)",
        "German(x)",
        "Politician(x)",
        "Member(x, y)"
      ],
      "fol_consts": [
        "heinrich",
        "prussian",
        "reichstag"
      ],
      "fol_rules": [
        "Nazi(heinrich) ∧ German(heinrich) ∧ Politician(heinrich)",
        "Member(heinrich, prussian) ∧ Member(heinrich, reichstag)"
      ],
      "fol_conc": "∃x (Nazi(x) ∧ German(x) ∧ Politician(x) ∧ Member(x, prussian) ∧ Member(x, reichstag))",
      "perplexity": 1.603742003440857
    }
  },
  {
    "id": 169,
    "nl_problem": {
      "context": [
        "Heinrich Scmidt was a Nazi German politician. ",
        "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
      ],
      "question": "No politicans are part of the Nazi Reichstag.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Nazi(x)",
        "Politician(x)",
        "MemberOf(x, y)",
        "PrussianStateParliament(x)",
        "NaziReichstag(x)"
      ],
      "fol_consts": [
        "heinrich_schmidt"
      ],
      "fol_rules": [
        "Nazi(heinrich_schmidt) ∧ Politician(heinrich_schmidt)",
        "MemberOf(heinrich_schmidt, PrussianStateParliament(x)) ∧ MemberOf(heinrich_schmidt, NaziReichstag(x))"
      ],
      "fol_conc": "¬∃x (Politician(x) ∧ MemberOf(x, NaziReichstag(x)))",
      "perplexity": [
        1.1116383075714111,
        1.0253257751464844
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Politician(x)",
        "Member(x, y)",
        "Nazi(x)",
        "Prussian(x)",
        "Reichstag(x)"
      ],
      "fol_consts": [
        "heinrich",
        "prussian",
        "reichstag"
      ],
      "fol_rules": [
        "Politician(heinrich)",
        "Member(heinrich, prussian)",
        "Member(heinrich, reichstag)",
        "Nazi(heinrich)"
      ],
      "fol_conc": "¬(∃x (Politician(x) ∧ Member(x, reichstag)))",
      "perplexity": 1.7817471027374268
    }
  },
  {
    "id": 170,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "Colorectal cancer is a severe cancer",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "LowSurvivalRate(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → LowSurvivalRate(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "∀x (BileDuctCancer(x) → SevereCancer(x))",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬LowSurvivalRate(x))",
        "∀x (ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x) → ¬BileDuctCancer(x))"
      ],
      "fol_conc": "∀x (ColorectalCancer(x) → SevereCancer(x))",
      "perplexity": [
        1.0782989263534546,
        1.0125843286514282
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Low(x)",
        "Severe(x)",
        "Cancer(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Flu(x)",
        "Mild(x)"
      ],
      "fol_consts": [
        "colorectal",
        "bileduct"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) ∧ Cancer(x) → Deadly(x))",
        "Bile(bileduct)",
        "∀x (Cholangiocarcinoma(x) → Bile(x))",
        "∀x (Mild(x) ∧ Flu(x) → ¬Low(x))",
        "Bile(colorectal) ∧ Low(x) → ¬Bile(colorectal)"
      ],
      "fol_conc": "Severe(colorectal)",
      "perplexity": 1.418080449104309
    }
  },
  {
    "id": 171,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "LowSurvivalRate(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → LowSurvivalRate(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "∀x (BileDuctCancer(x) → SevereCancer(x))",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬LowSurvivalRate(x))",
        "∀x (ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x) → ¬BileDuctCancer(x))"
      ],
      "fol_conc": "∀x ((ColorectalCancer(x) ∧ (BileDuctCancer(x) ∨ Cholangiocarcinoma(x))) → (ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ MildFlu(x)))",
      "perplexity": [
        1.0434316396713257,
        1.0206260681152344
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Low(x)",
        "Severe(x)",
        "Cancer(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Flu(x)",
        "Mild(x)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) ∧ Cancer(x) → Deadly(x))",
        "Bile(colorectal)",
        "∀x (Cholangiocarcinoma(x) → Bile(x))",
        "∀x (Flu(x) ∧ Mild(x) → ¬Low(x))",
        "Bile(colorectal) ∧ Low(x) → ¬Bile(colorectal)"
      ],
      "fol_conc": "Bile(colorectal) ∨ Cholangiocarcinoma(colorectal) → (Bile(colorectal) ∧ Flu(colorectal) ∧ Mild(colorectal))",
      "perplexity": 1.3518322706222534
    }
  },
  {
    "id": 172,
    "nl_problem": {
      "context": [
        "If something is a deadly disease, then its survival rate is low. ",
        "All severe cancers are deadly diseases.",
        "Bile duct cancer is a severe cancer. ",
        "All Cholangiocarcinoma is bile duct cancer.",
        "No one with mild flu has a low survival rate.",
        "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "DeadlyDisease(x)",
        "LowSurvivalRate(x)",
        "SevereCancer(x)",
        "BileDuctCancer(x)",
        "Cholangiocarcinoma(x)",
        "MildFlu(x)",
        "ColorectalCancer(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (DeadlyDisease(x) → LowSurvivalRate(x))",
        "∀x (SevereCancer(x) → DeadlyDisease(x))",
        "∀x (BileDuctCancer(x) → SevereCancer(x))",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
        "∀x (MildFlu(x) → ¬LowSurvivalRate(x))",
        "(ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x)) → ¬BileDuctCancer(x)"
      ],
      "fol_conc": "(¬MildFlu(x) ∧ Cholangiocarcinoma(x)) → (ColorectalCancer(x) ∨ Cholangiocarcinoma(x))",
      "perplexity": [
        1.0847959518432617,
        1.0097529888153076
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Deadly(x)",
        "Low(x)",
        "Severe(x)",
        "Cancer(x)",
        "Bile(x)",
        "Cholangiocarcinoma(x)",
        "Flu(x)",
        "Mild(x)"
      ],
      "fol_consts": [
        "colorectal"
      ],
      "fol_rules": [
        "∀x (Deadly(x) → Low(x))",
        "∀x (Severe(x) ∧ Cancer(x) → Deadly(x))",
        "∀x (Bile(x) → Severe(x) ∧ Cancer(x))",
        "∀x (Cholangiocarcinoma(x) → Bile(x))",
        "∀x (Mild(x) ∧ Flu(x) → ¬Low(x))",
        "Bile(colorectal) ∧ Low(colorectal) → ¬Bile(colorectal)"
      ],
      "fol_conc": "¬(Mild(colorectal) ∧ Flu(colorectal)) ∧ Cholangiocarcinoma(colorectal) → (Bile(colorectal) ∨ Cholangiocarcinoma(colorectal))",
      "perplexity": 1.3118276596069336
    }
  },
  {
    "id": 173,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor eats salads regularly.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "EatSaladsRegularly(x)",
        "Conscious(x)",
        "HealthConsciousHome(x)",
        "FulfillNutritionalIntakes(x)",
        "GoodRelationshipParents(x)",
        "VisitGymDaily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → Conscious(x))",
        "∀x (HealthConsciousHome(x) → EatSaladsRegularly(x))",
        "∀x (FulfillNutritionalIntakes(x) → HealthConsciousHome(x))",
        "∀x (GoodRelationshipParents(x) → FulfillNutritionalIntakes(x))",
        "∀x (GoodRelationshipParents(x) → ¬EatSaladsRegularly(x))",
        "∀x (VisitGymDaily(x) → FulfillNutritionalIntakes(x))",
        "(HealthConsciousHome(taylor) ∧ GoodRelationshipParents(taylor)) ⊕ ¬(HealthConsciousHome(taylor) ∨ GoodRelationshipParents(taylor))"
      ],
      "fol_conc": "EatSaladsRegularly(taylor)",
      "perplexity": [
        1.033328890800476,
        1.0100319385528564
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Healthconscious(x)",
        "Regularly(x)",
        "Grewup(x, y)",
        "Fulfill(x)",
        "Goodrelationship(x, y)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "taylor",
        "salad",
        "home"
      ],
      "fol_rules": [
        "∀x (Eat(x, salad) ∧ Regularly(x) → Healthconscious(x))",
        "∀x (Grewup(x, home) → Eat(x, salad) ∧ Regularly(x))",
        "∀x (Fulfill(x) → Grewup(x, home))",
        "∀x (Goodrelationship(x, y) → Fulfill(x))",
        "∀x (Goodrelationship(x, y) → ¬(Eat(x, salad) ∧ Regularly(x)))",
        "∀x (Visit(x, y) → Fulfill(x))",
        "(Grewup(taylor, home) ∧ Goodrelationship(taylor, y)) ⊕ ¬(Grewup(taylor, home) ∨ Goodrelationship(taylor, y))"
      ],
      "fol_conc": "Eat(taylor, salad) ∧ Regularly(taylor)",
      "perplexity": 1.3326603174209595
    }
  },
  {
    "id": 174,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor visits the gym at least once a day.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "EatSaladsRegularly(x)",
        "HealthConscious(x)",
        "HealthConsciousChildhood(x)",
        "FulfillNutritionalIntake(x)",
        "GoodParentRelationship(x)",
        "VisitGymDaily(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSaladsRegularly(x) → HealthConscious(x))",
        "∀x (HealthConsciousChildhood(x) → EatSaladsRegularly(x))",
        "∀x (FulfillNutritionalIntake(x) → HealthConsciousChildhood(x))",
        "∀x (GoodParentRelationship(x) → FulfillNutritionalIntake(x))",
        "∀x (GoodParentRelationship(x) → ¬EatSaladsRegularly(x))",
        "∀x (VisitGymDaily(x) → FulfillNutritionalIntake(x))",
        "(HealthConsciousChildhood(taylor) ∧ GoodParentRelationship(taylor)) ⊕ ¬(HealthConsciousChildhood(taylor) ∨ GoodParentRelationship(taylor))"
      ],
      "fol_conc": "VisitGymDaily(taylor)",
      "perplexity": [
        1.0290443897247314,
        1.0070816278457642
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Conscious(x)",
        "Grew(x)",
        "Fulfill(x)",
        "Relationship(x)",
        "Gym(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x) → Conscious(x))",
        "∀x (Grew(x) → Eat(x))",
        "∀x (Fulfill(x) → Grew(x))",
        "∀x (Relationship(x) → Fulfill(x))",
        "∀x (Relationship(x) → ¬Eat(x))",
        "∀x (Gym(x) → Fulfill(x))",
        "(Grew(taylor) ∧ Relationship(taylor)) ⊕ ¬(Grew(taylor) ∨ Relationship(taylor))"
      ],
      "fol_conc": "Gym(taylor)",
      "perplexity": 1.4168124198913574
    }
  },
  {
    "id": 175,
    "nl_problem": {
      "context": [
        "All people who eat salads regularly are very conscious about their health and eating habits.",
        "All people who grew up in health-conscious childhood homes eat salads regularly.",
        "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "If people have good relationships with their parents, then they do not eat salads regularly.",
        "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "EatSalads(x)",
        "HealthConscious(x)",
        "HealthHome(x)",
        "FulfillIntake(x)",
        "GoodRelationship(x)",
        "VisitGym(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (EatSalads(x) → HealthConscious(x))",
        "∀x (HealthHome(x) → EatSalads(x))",
        "∀x (FulfillIntake(x) → HealthHome(x))",
        "∀x (GoodRelationship(x) → FulfillIntake(x))",
        "∀x (GoodRelationship(x) → ¬EatSalads(x))",
        "∀x (VisitGym(x) → FulfillIntake(x))",
        "(HealthHome(taylor) ∧ GoodRelationship(taylor)) ⊕ ¬(HealthHome(taylor) ∨ GoodRelationship(taylor))"
      ],
      "fol_conc": "¬HealthHome(taylor) ⊕ ¬VisitGym(taylor)",
      "perplexity": [
        1.0265960693359375,
        1.0078312158584595
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Eat(x)",
        "Conscious(x)",
        "Grew(x)",
        "Fulfill(x)",
        "Relationship(x)",
        "Gym(x)"
      ],
      "fol_consts": [
        "taylor"
      ],
      "fol_rules": [
        "∀x (Eat(x) → Conscious(x))",
        "∀x (Grew(x) → Eat(x))",
        "∀x (Fulfill(x) → Grew(x))",
        "∀x (Relationship(x) → Fulfill(x))",
        "∀x (Relationship(x) → ¬Eat(x))",
        "∀x (Gym(x) → Fulfill(x))",
        "(Grew(taylor) ∧ Relationship(taylor)) ⊕ ¬(Grew(taylor) ∨ Relationship(taylor))"
      ],
      "fol_conc": "¬Grew(taylor) ⊕ ¬Gym(taylor)",
      "perplexity": 1.3973251581192017
    }
  },
  {
    "id": 176,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The world championships is a sporting event.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "Location(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "us",
        "world_championships"
      ],
      "fol_rules": [
        "SportingEvent(OlympicGames)",
        "OlympicGames(tokyo)",
        "WonMostMedals(us, tokyo)"
      ],
      "fol_conc": "SportingEvent(world_championships)",
      "perplexity": [
        1.1829789876937866,
        1.0279207229614258
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Won(x, y)",
        "Location(x, y)"
      ],
      "fol_consts": [
        "olympic",
        "tokyo",
        "us",
        "worldchampionships"
      ],
      "fol_rules": [
        "Sporting(olympic)",
        "Location(olympic, tokyo)",
        "Won(us, olympic)"
      ],
      "fol_conc": "Sporting(worldchampionships)",
      "perplexity": 2.1985714435577393
    }
  },
  {
    "id": 177,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The last Olympic games were not in Tokyo.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "OlympicGames(x)",
        "Location(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "usa",
        "last"
      ],
      "fol_rules": [
        "OlympicGames(last)",
        "Location(last, tokyo)",
        "WonMostMedals(usa, last)"
      ],
      "fol_conc": "¬Location(last, tokyo)",
      "perplexity": [
        1.1215019226074219,
        1.0328373908996582
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Last(x)",
        "Incity(x, y)",
        "Won(x, y)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(olympicgames) ∧ Sporting(olympicgames)",
        "Last(olympicgames) ∧ Incity(olympicgames, tokyo)",
        "Won(unitedstates, olympicgames)"
      ],
      "fol_conc": "¬Last(olympicgames)",
      "perplexity": 1.9391136169433594
    }
  },
  {
    "id": 178,
    "nl_problem": {
      "context": [
        "[BG] The Olympic games is a sporting event. ",
        "The last Olympic games was in Tokyo.",
        "The United States won the most medals in Tokyo. "
      ],
      "question": "The United States won the most medals in the last Olympic games.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "SportingEvent(x)",
        "OlympicGames(x)",
        "Last(x, y)",
        "WonMostMedals(x, y)"
      ],
      "fol_consts": [
        "tokyo",
        "united_states"
      ],
      "fol_rules": [
        "SportingEvent(OlympicGames)",
        "Last(tokyo, OlympicGames)",
        "WonMostMedals(united_states, tokyo)"
      ],
      "fol_conc": "WonMostMedals(united_states, Last(x, OlympicGames))",
      "perplexity": [
        1.1477110385894775,
        1.0351815223693848
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Olympic(x)",
        "Sporting(x)",
        "Last(x)",
        "Incity(x, y)",
        "Won(x, y)",
        "Most(x, y, z)"
      ],
      "fol_consts": [
        "olympicgames",
        "tokyo",
        "unitedstates"
      ],
      "fol_rules": [
        "Olympic(olympicgames) ∧ Sporting(olympicgames)",
        "Last(olympicgames)",
        "Incity(olympicgames, tokyo)",
        "Won(unitedstates, olympicgames)",
        "Most(unitedstates, olympicgames, x)"
      ],
      "fol_conc": "Won(unitedstates, x) ∧ Most(unitedstates, x, y) ∧ Last(x)",
      "perplexity": 1.686104655265808
    }
  },
  {
    "id": 179,
    "nl_problem": {
      "context": [
        "All horses have hooves.",
        "No humans have hooves."
      ],
      "question": "Some humans are horses.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Horse(x)",
        "Human(x)",
        "HasHooves(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Horse(x) → HasHooves(x))",
        "∀x (Human(x) → ¬HasHooves(x))"
      ],
      "fol_conc": "∃x (Human(x) ∧ Horse(x))",
      "perplexity": [
        1.1181323528289795,
        1.0247948169708252
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Horse(x)",
        "Human(x)",
        "Hooves(x)"
      ],
      "fol_consts": [
        "x1"
      ],
      "fol_rules": [
        "∀x (Horse(x) → Hooves(x))",
        "∀x (Human(x) → ¬Hooves(x))"
      ],
      "fol_conc": "∃x (Human(x) ∧ Horse(x))",
      "perplexity": 2.0620055198669434
    }
  },
  {
    "id": 180,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "Susan flies from LGA airport.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "FliesTo(x, y)",
        "Departure(x, y)",
        "Arrival(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "FliesTo(susan, lga)",
        "∀x ∀y (Departure(x, y) → ¬Arrival(x, y))",
        "FliesTo(john, lga)"
      ],
      "fol_conc": "Departure(susan, lga)",
      "perplexity": [
        1.101367712020874,
        1.023573875427246
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Departure(x, y)",
        "Arrival(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Departure(x, y) → ¬Arrival(x, y))",
        "Flies(john, lga)"
      ],
      "fol_conc": "Flies(susan, lga)",
      "perplexity": 1.819728970527649
    }
  },
  {
    "id": 181,
    "nl_problem": {
      "context": [
        "Susan flies to LGA airport.",
        "The departure and arrival can not be the same airport.",
        "John flies from LGA airport."
      ],
      "question": "John flies to LGA airport.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "FliesTo(x, y)",
        "Departure(x, y)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "FliesTo(susan, lga)",
        "∀x ∀y (FliesTo(x, y) → ¬Departure(y, x))",
        "FliesTo(john, lga)"
      ],
      "fol_conc": "FliesTo(john, lga)",
      "perplexity": [
        1.1101195812225342,
        1.0159419775009155
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Flies(x, y)",
        "Airport(x)"
      ],
      "fol_consts": [
        "susan",
        "john",
        "lga"
      ],
      "fol_rules": [
        "Flies(susan, lga)",
        "∀x ∀y (Flies(x, y) → ¬Flies(x, x))",
        "Flies(john, lga)"
      ],
      "fol_conc": "Flies(john, lga)",
      "perplexity": 1.8819152116775513
    }
  },
  {
    "id": 182,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is a grumpy person.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "Owns(x, y)",
        "Pet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, y))",
        "∀x (AnimalLover(x) → Nice(x, y))",
        "∀x ∀y (Owns(x, y) ∧ Pet(y) → AnimalLover(x))",
        "Owns(tom, z) ∧ Pet(z)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": [
        1.047478437423706,
        1.0155088901519775
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "Animallover(x)",
        "Owns(x, y)",
        "Pet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, y))",
        "∀x (Animallover(x) → Nice(x, y))",
        "∀x ∀y (Owns(x, y) ∧ Pet(y) → Animallover(x))",
        "Owns(tom, x)"
      ],
      "fol_conc": "Grumpy(tom)",
      "perplexity": 1.476331353187561
    }
  },
  {
    "id": 183,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "Tom is not a grumpy person and mean to animals.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "NiceToAnimals(x)",
        "MeanToAnimals(x)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "OwnsPet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x))",
        "∀x (AnimalLover(x) → NiceToAnimals(x))",
        "∀x (OwnsPet(x) → AnimalLover(x))",
        "OwnsPet(tom)"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ MeanToAnimals(tom))",
      "perplexity": [
        1.0336860418319702,
        1.0206892490386963
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "Animallover(x)",
        "Owns(x, y)",
        "Pet(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, y))",
        "∀x (Animallover(x) → Nice(x, y))",
        "∀x ∀y (Owns(x, y) → Animallover(x))",
        "Owns(tom, x)"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ Mean(tom, y))",
      "perplexity": 1.3973217010498047
    }
  },
  {
    "id": 184,
    "nl_problem": {
      "context": [
        "No one nice to animals is mean to animals.",
        "Some grumpy people are mean to animals.",
        "All animal lovers are nice to animals.",
        "If someone owns a pet, then they love animals.",
        "Tom is a pet owner."
      ],
      "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "AnimalLover(x)",
        "Owns(x, y)",
        "Pet(y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, y))",
        "∀x (AnimalLover(x) → Nice(x, y))",
        "∀x (Owns(x, y) → AnimalLover(x))",
        "Owns(tom, y)"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ Mean(tom, y)) → ¬(Grumpy(tom) ∨ AnimalLover(tom))",
      "perplexity": [
        1.0811424255371094,
        1.0232059955596924
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Nice(x, y)",
        "Mean(x, y)",
        "Grumpy(x)",
        "Animallover(x)",
        "Own(x, y)",
        "Pet(y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x ∀y (Nice(x, y) → ¬Mean(x, y))",
        "∃x (Grumpy(x) ∧ Mean(x, y))",
        "∀x (Animallover(x) → Nice(x, y))",
        "∀x ∀y (Own(x, y) ∧ Pet(y) → Animallover(x))",
        "Own(tom, y)"
      ],
      "fol_conc": "¬(Grumpy(tom) ∧ Mean(tom, y)) → ¬(Grumpy(tom) ∨ Animallover(tom))",
      "perplexity": 1.4267425537109375
    }
  },
  {
    "id": 185,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro is a novel writer.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "WrittenBy(x, y)",
        "BornIn(x, y)",
        "American(x)",
        "Writer(x)",
        "NovelWriter(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "boston",
        "twothousandthree"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (BornIn(x, boston) → American(x))",
        "∀x (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "Writer(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ WrittenBy(family_history, dani_shapiro)",
        "Podcast(family_secrets) ∧ WrittenBy(family_secrets, dani_shapiro)",
        "BornIn(x, boston)"
      ],
      "fol_conc": "NovelWriter(dani_shapiro)",
      "perplexity": [
        1.0831193923950195,
        1.0124112367630005
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Born(x, y)",
        "American(x)",
        "Book(x)",
        "Written(x, y)",
        "Writer(x)",
        "Americancity(x)"
      ],
      "fol_consts": [
        "dani",
        "familyhistory",
        "boston",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, boston) → American(x))",
        "∀x ∀y ((Novel(x) ∧ Book(x) ∧ Written(x, y)) → Writer(y))",
        "Writer(dani)",
        "Written(familyhistory, dani)",
        "Novel(familyhistory)",
        "Book(familyhistory)",
        "Bewritten(familyhistory, 2003)",
        "Podcast(familysecrets)",
        "Created(dani, familysecrets)",
        "Americancity(boston)"
      ],
      "fol_conc": "Writer(dani)",
      "perplexity": 1.5129735469818115
    }
  },
  {
    "id": 186,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Family Secrets is a novel.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "BornIn(x, y)",
        "American(x)",
        "AmericanCity(x)",
        "WrittenBy(x, y)",
        "Writer(x)",
        "NovelWriter(x)",
        "Created(x, y)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "family_secrets",
        "boston",
        "american_city"
      ],
      "fol_rules": [
        "¬Novel(x) ⊕ Podcast(x)",
        "∀x ∀y (BornIn(x, y) ∧ AmericanCity(y) → American(x))",
        "∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y))",
        "Writer(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history) ∧ CreatedIn(family_history, 2003)",
        "Created(dani_shapiro, family_secrets)",
        "AmericanCity(boston)"
      ],
      "fol_conc": "Novel(family_secrets)",
      "perplexity": [
        1.0906262397766113,
        1.0204192399978638
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Born(x, y)",
        "American(x)",
        "Book(x)",
        "Written(x, y)",
        "Writer(x)",
        "American(x)",
        "City(x)"
      ],
      "fol_consts": [
        "dani",
        "familyhistory",
        "familysecrets",
        "boston",
        "americancity"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, americancity) → American(x))",
        "∀x ∀y ((Novel(x) ∧ Book(x) ∧ Written(x, y)) → Writer(y))",
        "Writer(dani)",
        "Written(familyhistory, dani)",
        "Novel(familyhistory) ∧ Book(familyhistory) ∧ Bewritten(familyhistory, 2003)",
        "Podcast(familysecrets) ∧ Created(dani, familysecrets)",
        "City(boston)",
        "American(boston)"
      ],
      "fol_conc": "Novel(familysecrets)",
      "perplexity": 1.5041502714157104
    }
  },
  {
    "id": 187,
    "nl_problem": {
      "context": [
        "A podcast is not a novel.",
        "[BG] If a person is born in American City, the person is American.",
        "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
        "Dani Shapiro is an American writer.",
        "Family History is written by Dani Shapiro.",
        "Family History is a novel written in 2003.",
        "Dani Shapiro created a podcast called Family Secrets.",
        "[BG] Boston is an American city."
      ],
      "question": "Dani Shapiro was born in Boston.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "BornIn(x, y)",
        "American(x)",
        "WrittenBy(x, y)",
        "Writer(x)",
        "AmericanCity(x)"
      ],
      "fol_consts": [
        "dani_shapiro",
        "family_history",
        "boston",
        "american"
      ],
      "fol_rules": [
        "¬(Novel(x) ∧ Podcast(x))",
        "∀x (BornIn(x, american) → American(x))",
        "∀x ((Novel(x) ∧ WrittenBy(x, y)) → Writer(y))",
        "Writer(dani_shapiro)",
        "WrittenBy(family_history, dani_shapiro)",
        "Novel(family_history)",
        "∃x (Podcast(x) ∧ WrittenBy(x, dani_shapiro) ∧ Be(x, family_secrets))",
        "AmericanCity(boston)"
      ],
      "fol_conc": "BornIn(dani_shapiro, boston)",
      "perplexity": [
        1.107187032699585,
        1.0134268999099731
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Podcast(x)",
        "Novel(x)",
        "Born(x, y)",
        "American(x)",
        "Book(x)",
        "Written(x, y)",
        "Writer(x)",
        "Novelwriter(x)",
        "Americancity(x)"
      ],
      "fol_consts": [
        "dani",
        "familyhistory",
        "boston",
        "2003"
      ],
      "fol_rules": [
        "¬(Podcast(x) ∧ Novel(x))",
        "∀x (Born(x, boston) → American(x))",
        "∀x ∀y ((Novel(x) ∧ Written(x, y)) → Novelwriter(y))",
        "Writer(dani)",
        "Written(familyhistory, dani)",
        "Novel(familyhistory) ∧ Written(familyhistory, dani) ∧ Beyear(familyhistory, 2003)",
        "Podcast(familysecrets) ∧ Created(dani, familysecrets)",
        "Americancity(boston)"
      ],
      "fol_conc": "Born(dani, boston)",
      "perplexity": 1.443256139755249
    }
  },
  {
    "id": 188,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": [
        1.060285210609436,
        1.0154752731323242
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → ∃y (Wear(x, y) ∧ Large(y)))",
        "∀x ∀y (Wear(x, y) ∧ Large(y) → ∃z (Wear(x, z) ∧ Bez(z, large)))",
        "¬(∃y (Wear(yuri, y) ∧ Large(y)))"
      ],
      "fol_conc": "American(yuri)",
      "perplexity": 1.6123292446136475
    }
  },
  {
    "id": 189,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is not an American basketball player.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬(BasketballPlayer(yuri) ∧ American(yuri))",
      "perplexity": [
        1.0360512733459473,
        1.0284063816070557
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketballplayer(x)",
        "American(x)",
        "Tall(x)",
        "Wearlargeshoes(x)",
        "Wearlargesizeclothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketballplayer(x) ∧ ¬American(x))",
        "∀x (Basketballplayer(x) → Tall(x))",
        "∀x (Tall(x) → Wearlargeshoes(x))",
        "∀x (Wearlargeshoes(x) → Wearlargesizeclothes(x))",
        "¬Wearlargesizeclothes(yuri)"
      ],
      "fol_conc": "¬(Basketballplayer(yuri) ∧ American(yuri))",
      "perplexity": 1.3778204917907715
    }
  },
  {
    "id": 190,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "Yuri is an American basketball player.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬BasketballPlayer(yuri) ∨ American(yuri)",
      "perplexity": [
        1.058211088180542,
        1.0136467218399048
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → ∃y (Wear(x, y) ∧ Large(y)))",
        "∀x ∀y (Wear(x, y) ∧ Large(y) → ∃z (Wear(x, z) ∧ Bez(z, large)))",
        "¬(∃y (Wear(yuri, y) ∧ Large(y)))"
      ],
      "fol_conc": "¬Basketball(yuri) ∨ American(yuri)",
      "perplexity": 1.5897998809814453
    }
  },
  {
    "id": 191,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬WearLargeShoes(yuri) → (American(yuri) ∧ BasketballPlayer(yuri))",
      "perplexity": [
        1.028401494026184,
        1.022557258605957
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketball(x)",
        "American(x)",
        "Tall(x)",
        "Wear(x, y)",
        "Large(y)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketball(x) ∧ ¬American(x))",
        "∀x (Basketball(x) → Tall(x))",
        "∀x (Tall(x) → ∃y (Wear(x, y) ∧ Large(y)))",
        "∀x (∃y (Wear(x, y) ∧ Large(y)) → ∃z (Wear(x, z) ∧ Large(z)))",
        "¬(∃y (Wear(yuri, y) ∧ Large(y)))"
      ],
      "fol_conc": "¬(∃y (Wear(yuri, y) ∧ Large(y))) → (¬Basketball(yuri) ∨ American(yuri))",
      "perplexity": 1.4468969106674194
    }
  },
  {
    "id": 192,
    "nl_problem": {
      "context": [
        "Some basketball players are not American.",
        "All basketball players are tall.",
        "If someone is tall, they wear large shoes.",
        "If someone wears large shoes, they wear large-sized clothes.",
        "Yuri does not wear large-size clothes."
      ],
      "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "BasketballPlayer(x)",
        "American(x)",
        "Tall(x)",
        "WearLargeShoes(x)",
        "WearLargeClothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x))",
        "∀x (BasketballPlayer(x) → Tall(x))",
        "∀x (Tall(x) → WearLargeShoes(x))",
        "∀x (WearLargeShoes(x) → WearLargeClothes(x))",
        "¬WearLargeClothes(yuri)"
      ],
      "fol_conc": "¬(BasketballPlayer(yuri) ∧ American(yuri)) → BasketballPlayer(yuri)",
      "perplexity": [
        1.0540275573730469,
        1.0180197954177856
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Basketballplayer(x)",
        "American(x)",
        "Tall(x)",
        "Wearlargeshoes(x)",
        "Wearlargesizeclothes(x)"
      ],
      "fol_consts": [
        "yuri"
      ],
      "fol_rules": [
        "∃x (Basketballplayer(x) ∧ ¬American(x))",
        "∀x (Basketballplayer(x) → Tall(x))",
        "∀x (Tall(x) → Wearlargeshoes(x))",
        "∀x (Wearlargeshoes(x) → Wearlargesizeclothes(x))",
        "¬Wearlargesizeclothes(yuri)"
      ],
      "fol_conc": "¬(Basketballplayer(yuri) ∧ American(yuri)) → Basketballplayer(yuri)",
      "perplexity": 1.4424248933792114
    }
  },
  {
    "id": 193,
    "nl_problem": {
      "context": [
        "Events are either happy or sad.",
        "At least one event is happy. "
      ],
      "question": "All events are sad.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)",
        "Event(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Event(x) → (Happy(x) ⊕ Sad(x)))",
        "∃x (Event(x) ∧ Happy(x))"
      ],
      "fol_conc": "∀x (Event(x) → Sad(x))",
      "perplexity": [
        1.0751957893371582,
        1.017778754234314
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Happy(x)",
        "Sad(x)",
        "Event(x)"
      ],
      "fol_consts": [
        "e1"
      ],
      "fol_rules": [
        "∀x (Event(x) → (Happy(x) ⊕ Sad(x)))",
        "∃x (Event(x) ∧ Happy(x))"
      ],
      "fol_conc": "∀x (Event(x) → Sad(x))",
      "perplexity": 1.8944525718688965
    }
  },
  {
    "id": 194,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Winner(x, y)",
        "Participated(x, y)",
        "Tie(y)",
        "OnLeaderboard(x, y)",
        "From(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "classic92"
      ],
      "fol_rules": [
        "Winner(steinhauer, classic92)",
        "Participated(steinhauer, classic92)",
        "Tie(classic92) ∧ ∃x (OnLeaderboard(x, classic92) ∧ From(x, belgium))",
        "OnLeaderboard(descampe, classic92) ∧ From(descampe, belgium)",
        "∀x (OnLeaderboard(x, classic92) → Participated(x, classic92))"
      ],
      "fol_conc": "¬Winner(steinhauer, classic92)",
      "perplexity": [
        1.0738600492477417,
        1.0156214237213135
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x, y)",
        "Participated(x, y)",
        "Tie(y, z)",
        "From(x, y)",
        "Onleaderboard(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "dumaurierclassic1992"
      ],
      "fol_rules": [
        "Winner(steinhauer, dumaurierclassic1992)",
        "Participated(steinhauer, dumaurierclassic1992)",
        "∃y (Tie(dumaurierclassic1992, y) ∧ ∃x (From(x, belgium) ∧ Onleaderboard(x, y)))",
        "From(descampe, belgium) ∧ Onleaderboard(descampe, dumaurierclassic1992)",
        "∀x (Onleaderboard(x, dumaurierclassic1992) → Participated(x, dumaurierclassic1992))"
      ],
      "fol_conc": "¬Winner(steinhauer, dumaurierclassic1992)",
      "perplexity": 1.3365164995193481
    }
  },
  {
    "id": 195,
    "nl_problem": {
      "context": [
        "The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Steinhauer participated in the 1992 du Maurier Classic.",
        "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Winner(x, y)",
        "Participated(x, y)",
        "Tie(x, y)",
        "From(x, y)",
        "OnLeaderboard(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "classic"
      ],
      "fol_rules": [
        "Winner(steinhauer, classic)",
        "Participated(steinhauer, classic)",
        "Tie(6, classic)",
        "From(descampe, belgium)",
        "OnLeaderboard(descampe, classic)",
        "∀x (OnLeaderboard(x, classic) → Participated(x, classic))"
      ],
      "fol_conc": "OnLeaderboard(descampe, classic) ∧ Tie(6, classic)",
      "perplexity": [
        1.0832042694091797,
        1.0297555923461914
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Winner(x, y)",
        "Participated(x, y)",
        "Tie(x, y)",
        "From(x, y)",
        "Onleaderboard(x, y)"
      ],
      "fol_consts": [
        "steinhauer",
        "descampe",
        "belgium",
        "dumaurierclassic1992"
      ],
      "fol_rules": [
        "Winner(steinhauer, dumaurierclassic1992)",
        "Participated(steinhauer, dumaurierclassic1992)",
        "∃x (Tie(x, dumaurierclassic1992) ∧ ∃y (From(y, belgium) ∧ Onleaderboard(y, x)))",
        "From(descampe, belgium)",
        "Onleaderboard(descampe, dumaurierclassic1992)",
        "∀x (Onleaderboard(x, dumaurierclassic1992) → Participated(x, dumaurierclassic1992))"
      ],
      "fol_conc": "∃x (Tie(x, dumaurierclassic1992) ∧ Onleaderboard(descampe, x))",
      "perplexity": 1.3286362886428833
    }
  },
  {
    "id": 196,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi is terricolous.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Like(jane, x))",
        "∀x (HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "Terricolous(kiki)",
      "perplexity": [
        1.0405436754226685,
        1.0156168937683105
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Haslegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (Haslegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → Haslegs(x))",
        "¬(Jumps(kiki) ∨ Haslegs(kiki)) → (Terricolous(kiki) ∨ Haslegs(kiki))"
      ],
      "fol_conc": "Terricolous(kiki)",
      "perplexity": 1.3296314477920532
    }
  },
  {
    "id": 197,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi barks and is a dog.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Bark(x)",
        "Like(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jump(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Bark(x) → ¬Like(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Bark(x)))",
        "∀x (Jump(x) → Like(jane, x))",
        "∀x (HasLegs(x) → Jump(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬(Jump(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ⊕ HasLegs(kiki))"
      ],
      "fol_conc": "Bark(kiki) ∧ Dog(kiki)",
      "perplexity": [
        1.027800440788269,
        1.0087215900421143
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Haslegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (Haslegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → Haslegs(x))",
        "¬(Jumps(kiki) ∨ Haslegs(kiki)) → (Terricolous(kiki) ∨ Haslegs(kiki))"
      ],
      "fol_conc": "Barks(kiki) ∧ Dog(kiki)",
      "perplexity": 1.3216677904129028
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is among the most active players in major tennis.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "Active(x)",
        "LostTo(x, y)",
        "FemalePlayer(x)",
        "MalePlayer(x)",
        "AtRolandGarros2022(x)",
        "Player(x)"
      ],
      "fol_consts": [
        "iga_swiatek",
        "rafael_nadal",
        "coco_gauff"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → Active(x))",
        "∀x (LostTo(x, iga_swiatek) → RankedHighly(x))",
        "∀x (FemalePlayer(x) ∧ AtRolandGarros2022(x) → LostTo(x, iga_swiatek))",
        "∀x (FemalePlayer(x) ∧ AtRolandGarros2022(x)) ∨ (MalePlayer(x) ∧ AtRolandGarros2022(x))",
        "∀x (MalePlayer(x) ∧ AtRolandGarros2022(x) → LostTo(x, rafael_nadal))",
        "∀x ((RankedHighly(x) ∨ LostTo(x, rafael_nadal)) ∧ Player(x) → ¬(MalePlayer(x) ∧ AtRolandGarros2022(x)))"
      ],
      "fol_conc": "Active(coco_gauff)",
      "perplexity": [
        1.0246150493621826,
        1.0074570178985596
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(x)",
        "Lost(x, y)",
        "Female(x)",
        "Male(x)",
        "At2022(x)",
        "Roland(x)",
        "Player(x)"
      ],
      "fol_consts": [
        "iga",
        "rafa",
        "coco",
        "roland"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → Active(x))",
        "∀x (Lost(x, iga) → Ranked(x))",
        "∀x (Female(x) ∧ At2022(x) ∧ Roland(x) → Lost(x, iga))",
        "∀x (At2022(x) ∧ Roland(x) → (Female(x) ∨ Male(x)))",
        "∀x (Male(x) ∧ At2022(x) ∧ Roland(x) → Lost(x, rafa))",
        "∀x ((Ranked(x) ∨ Lost(x, rafa)) → ¬(Male(x) ∧ At2022(x) ∧ Roland(x)))"
      ],
      "fol_conc": "Active(coco)",
      "perplexity": 1.3326691389083862
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "Active(x)",
        "LostTo(x, y)",
        "FemalePlayer(x)",
        "MalePlayer(x)",
        "AtRolandGarros2022(x)",
        "Player(x)"
      ],
      "fol_consts": [
        "iga",
        "rafael",
        "coco"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → Active(x))",
        "∀x (LostTo(x, iga) → RankedHighly(x))",
        "∀x (FemalePlayer(x) ∧ AtRolandGarros2022(x) → LostTo(x, iga))",
        "∀x (AtRolandGarros2022(x) → (FemalePlayer(x) ∨ MalePlayer(x)))",
        "∀x (MalePlayer(x) ∧ AtRolandGarros2022(x) → LostTo(x, rafael))",
        "∀x ( (RankedHighly(x) ∨ LostTo(x, rafael)) ∧ Player(x) → ¬(MalePlayer(x) ∧ AtRolandGarros2022(x)) )"
      ],
      "fol_conc": "LostTo(coco, rafael)",
      "perplexity": [
        1.0468411445617676,
        1.0117628574371338
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(x)",
        "Lost(x, y)",
        "Female(x)",
        "Male(x)",
        "At2022(x)",
        "Player(x)"
      ],
      "fol_consts": [
        "iga",
        "rafa",
        "coco",
        "roland"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → Active(x))",
        "∀x (Lost(x, iga) → Ranked(x))",
        "∀x (Female(x) ∧ At2022(x) → Lost(x, iga))",
        "∀x (At2022(x) → (Female(x) ∨ Male(x)))",
        "∀x (Male(x) ∧ At2022(x) → Lost(x, rafa))",
        "∀x ((Ranked(x) ∨ Lost(x, rafa)) → ¬(Male(x) ∧ At2022(x)))"
      ],
      "fol_conc": "Lost(coco, rafa)",
      "perplexity": 1.36208975315094
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "Active(x)",
        "LostTo(x, y)",
        "FemalePlayer(x)",
        "MalePlayer(x)",
        "AtRolandGarros2022(x)",
        "Player(x)"
      ],
      "fol_consts": [
        "iga_swiatek",
        "rafael_nadal",
        "coco_gauff"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → Active(x))",
        "∀x (LostTo(x, iga_swiatek) → RankedHighly(x))",
        "∀x (FemalePlayer(x) ∧ AtRolandGarros2022(x) → LostTo(x, iga_swiatek))",
        "∀x (FemalePlayer(x) ∧ AtRolandGarros2022(x)) ∨ (MalePlayer(x) ∧ AtRolandGarros2022(x))",
        "∀x (MalePlayer(x) ∧ AtRolandGarros2022(x) → LostTo(x, rafael_nadal))",
        "∀x ( (RankedHighly(x) ∨ LostTo(x, rafael_nadal)) → ¬(MalePlayer(x) ∧ AtRolandGarros2022(x)))"
      ],
      "fol_conc": "¬(LostTo(coco_gauff, iga_swiatek) ∨ Active(coco_gauff))",
      "perplexity": [
        1.0329837799072266,
        1.0085986852645874
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(x)",
        "Lost(x, y)",
        "Female(x)",
        "Male(x)",
        "Player(x)",
        "Roland(x)"
      ],
      "fol_consts": [
        "iga",
        "rafa",
        "coco",
        "roland2022"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → Active(x))",
        "∀x (Lost(x, iga) → Ranked(x))",
        "∀x (Female(x) ∧ Roland(x) → Lost(x, iga))",
        "∀x (Roland(x) → (Female(x) ∨ Male(x)))",
        "∀x (Male(x) ∧ Roland(x) → Lost(x, rafa))",
        "∀x ((Ranked(x) ∨ Lost(x, rafa)) → ¬(Male(x) ∧ Roland(x)))"
      ],
      "fol_conc": "¬(Lost(coco, iga) ∨ Active(coco))",
      "perplexity": 1.3508036136627197
    }
  },
  {
    "id": 67,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Yale University has the largest university endowment of any educational institution.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "PrivateUniversity(x)",
        "IvyLeague(x)",
        "ResearchUniversity(x)",
        "LocatedIn(x, y)",
        "EndowmentValue(x, y)",
        "ConstituentCollege(x, y)",
        "ResidentialCollege(x)",
        "GraduateSchool(x)",
        "ProfessionalSchool(x)"
      ],
      "fol_consts": [
        "yale",
        "new_haven",
        "benjamin_franklin",
        "berkeley",
        "branford"
      ],
      "fol_rules": [
        "PrivateUniversity(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale)",
        "LocatedIn(yale, new_haven)",
        "EndowmentValue(yale, 42300000000)",
        "ConstituentCollege(benjamin_franklin, yale) ∧ ConstituentCollege(berkeley, yale) ∧ ConstituentCollege(branford, yale)",
        "ResidentialCollege(benjamin_franklin) ∧ ResidentialCollege(berkeley) ∧ ResidentialCollege(branford)"
      ],
      "fol_conc": "∀x (EndowmentValue(x, y) → EndowmentValue(yale, y))",
      "perplexity": [
        1.1001856327056885,
        1.0317414999008179
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "University(x)",
        "Private(x)",
        "Ivy(x)",
        "Research(x)",
        "Moved(x, y, z)",
        "Endowment(x, y)",
        "Organized(x, z)",
        "Residential(x)",
        "Graduate(x)",
        "Professional(x)",
        "College(x)",
        "List(x, y)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "1716",
        "423billion",
        "benjaminfranklin",
        "berkeley",
        "branford",
        "davenport",
        "ezrastiles",
        "gracehopper",
        "jonathanedwards",
        "morse",
        "paulimurray",
        "pierson",
        "saybrook",
        "silliman",
        "timothydwight",
        "trumbull"
      ],
      "fol_rules": [
        "University(yale)",
        "Private(yale)",
        "Ivy(yale)",
        "Research(yale)",
        "Moved(yale, newhaven, 1716)",
        "Endowment(yale, 423billion)",
        "Organized(yale, 27)",
        "College(benjaminfranklin)",
        "College(berkeley)",
        "College(branford)",
        "College(davenport)",
        "College(ezrastiles)",
        "College(gracehopper)",
        "College(jonathanedwards)",
        "College(morse)",
        "College(paulimurray)",
        "College(pierson)",
        "College(saybrook)",
        "College(silliman)",
        "College(timothydwight)",
        "College(trumbull)",
        "Residential(benjaminfranklin)",
        "Residential(berkeley)",
        "Residential(branford)",
        "Residential(davenport)",
        "Residential(ezrastiles)",
        "Residential(gracehopper)",
        "Residential(jonathanedwards)",
        "Residential(morse)",
        "Residential(paulimurray)",
        "Residential(pierson)",
        "Residential(saybrook)",
        "Residential(silliman)",
        "Residential(timothydwight)",
        "Residential(trumbull)",
        "Graduate(yale)",
        "Professional(yale)",
        "List(yale, benjaminfranklin)",
        "List(yale, berkeley)",
        "List(yale, branford)",
        "List(yale, davenport)",
        "List(yale, ezrastiles)",
        "List(yale, gracehopper)",
        "List(yale, jonathanedwards)",
        "List(yale, morse)",
        "List(yale, paulimurray)",
        "List(yale, pierson)",
        "List(yale, saybrook)",
        "List(yale, silliman)",
        "List(yale, timothywright)",
        "List(yale, trumbull)"
      ],
      "fol_conc": "∀x (University(x) → Endowment(x, y) ∧ ¬(Endowment(yale, y) ∧ Endowment(x, y)))",
      "perplexity": 1.1647007465362549
    }
  },
  {
    "id": 68,
    "nl_problem": {
      "context": [
        "Yale University is a private Ivy League research university.",
        "Yale University moved to New Haven in 1716.",
        "Yale university's endowment was valued at $42.3 billion.",
        "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "question": "Pierson College is a residential college at Yale.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "PrivateUniversity(x)",
        "IvyLeague(x)",
        "ResearchUniversity(x)",
        "MovedTo(x, y, z)",
        "EndowmentValuedAt(x, y)",
        "OrganizedInto(x, y)",
        "ResidentialCollege(x)",
        "ProfessionalSchool(x)",
        "ConstituentOf(x, y)"
      ],
      "fol_consts": [
        "yale",
        "new_haven",
        "benjamin_franklin",
        "berkeley",
        "branford",
        "davenport",
        "ezra_stiles",
        "grace_hopper",
        "jonathan_edwards",
        "morse",
        "pauli_murray",
        "pierson",
        "saybrook",
        "silliman",
        "timothy_dwight",
        "trumbull"
      ],
      "fol_rules": [
        "PrivateUniversity(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale)",
        "MovedTo(yale, new_haven, 1716)",
        "EndowmentValuedAt(yale, 42300000000)",
        "OrganizedInto(yale, 27)",
        "ResidentialCollege(benjamin_franklin) ∧ ConstituentOf(benjamin_franklin, yale)",
        "ResidentialCollege(berkeley) ∧ ConstituentOf(berkeley, yale)",
        "ResidentialCollege(branford) ∧ ConstituentOf(branford, yale)",
        "ResidentialCollege(davenport) ∧ ConstituentOf(davenport, yale)",
        "ResidentialCollege(ezra_stiles) ∧ ConstituentOf(ezra_stiles, yale)",
        "ResidentialCollege(grace_hopper) ∧ ConstituentOf(grace_hopper, yale)",
        "ResidentialCollege(jonathan_edwards) ∧ ConstituentOf(jonathan_edwards, yale)",
        "ResidentialCollege(morse) ∧ ConstituentOf(morse, yale)",
        "ResidentialCollege(pauli_murray) ∧ ConstituentOf(pauli_murray, yale)",
        "ResidentialCollege(pierson) ∧ ConstituentOf(pierson, yale)",
        "ResidentialCollege(saybrook) ∧ ConstituentOf(saybrook, yale)",
        "ResidentialCollege(silliman) ∧ ConstituentOf(silliman, yale)",
        "ResidentialCollege(timothy_dwight) ∧ ConstituentOf(timothy_dwight, yale)",
        "ResidentialCollege(trumbull) ∧ ConstituentOf(trumbull, yale)"
      ],
      "fol_conc": "ResidentialCollege(pierson) ∧ ConstituentOf(pierson, yale)",
      "perplexity": [
        1.0270006656646729,
        1.0044270753860474
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "University(x)",
        "Private(x)",
        "Ivy(x)",
        "Research(x)",
        "Moved(x, y, z)",
        "Endowment(x, y)",
        "Organized(x, z)",
        "Residential(x)",
        "Graduate(x)",
        "Professional(x)",
        "Constituent(x, y)",
        "College(x)",
        "List(x, y)"
      ],
      "fol_consts": [
        "yale",
        "newhaven",
        "1716",
        "423billion",
        "benjaminfranklin",
        "berkeley",
        "branford",
        "davenport",
        "ezrastiles",
        "gracehopper",
        "jonathanedwards",
        "morse",
        "paulimurray",
        "pierson",
        "saybrook",
        "silliman",
        "timothydwight",
        "trumbull"
      ],
      "fol_rules": [
        "University(yale)",
        "Private(yale)",
        "Ivy(yale)",
        "Research(yale)",
        "Moved(yale, newhaven, 1716)",
        "Endowment(yale, 423billion)",
        "Organized(yale, 27)",
        "Residential(benjaminfranklin)",
        "Residential(berkeley)",
        "Residential(branford)",
        "Residential(davenport)",
        "Residential(ezrastiles)",
        "Residential(gracehopper)",
        "Residential(jonathanedwards)",
        "Residential(morse)",
        "Residential(paulimurray)",
        "Residential(pierson)",
        "Residential(saybrook)",
        "Residential(silliman)",
        "Residential(timothydwight)",
        "Residential(trumbull)",
        "Graduate(yale)",
        "Professional(yale)",
        "Constituent(benjaminfranklin, yale)",
        "Constituent(berkeley, yale)",
        "Constituent(branford, yale)",
        "Constituent(davenport, yale)",
        "Constituent(ezrastiles, yale)",
        "Constituent(gracehopper, yale)",
        "Constituent(jonathanedwards, yale)",
        "Constituent(morse, yale)",
        "Constituent(paulimurray, yale)",
        "Constituent(pierson, yale)",
        "Constituent(saybrook, yale)",
        "Constituent(silliman, yale)",
        "Constituent(timothydwight, yale)",
        "Constituent(trumbull, yale)",
        "List(yale, benjaminfranklin)",
        "List(yale, berkeley)",
        "List(yale, branford)",
        "List(yale, davenport)",
        "List(yale, ezrastiles)",
        "List(yale, gracehopper)",
        "List(yale, jonathanedwards)",
        "List(yale, morse)",
        "List(yale, paulimurray)",
        "List(yale, pierson)",
        "List(yale, saybrook)",
        "List(yale, silliman)",
        "List(yale, timothywright)",
        "List(yale, trumbull)"
      ],
      "fol_conc": "Constituent(pierson, yale)",
      "perplexity": 1.1397426128387451
    }
  },
  {
    "id": 93,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "Tom will rent an apartment in The Olive Garden.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "ManagedBuilding(x)",
        "AllowedPets(x)",
        "Rent(x, y)",
        "DepositRequired(x)",
        "DepositAmount(x, y)",
        "MoreThan(x, y)",
        "Owns(x, y)",
        "Cat(x)",
        "WillRent(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "2000",
        "1500"
      ],
      "fol_rules": [
        "∃x (ManagedBuilding(x) ∧ AllowedPets(x))",
        "∀x (ManagedBuilding(x) → DepositRequired(x))",
        "∀x (DepositAmount(x, y) → (y = Rent(x) ∨ MoreThan(y, Rent(x))))",
        "Owns(tom, fluffy)",
        "Cat(fluffy)",
        "ManagedBuilding(oliveGarden)",
        "Rent(oliveGarden, 2000)",
        "∀x ∀y (WillRent(x, y) ↔ (AllowedPets(y) ∧ Owns(x, z) ∧ Pet(z) ∧ ¬MoreThan(DepositAmount(y, w), 1500)))",
        "MoreThan(2000, 1500)"
      ],
      "fol_conc": "WillRent(tom, oliveGarden)",
      "perplexity": [
        1.0768673419952393,
        1.012058973312378
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Allowed(x, y)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Security(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "month",
        "dollar"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Rent(x, month) ⊕ More(x, month)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, 2000)",
        "∀x (Allowed(x, fluffy) ∧ ¬More(x, 1500) ↔ Rent(x, olivegarden))",
        "More(2000, 1500)"
      ],
      "fol_conc": "Rent(tom, olivegarden)",
      "perplexity": 1.4522013664245605
    }
  },
  {
    "id": 95,
    "nl_problem": {
      "context": [
        "Pets are allowed in some managed buildings.",
        "[BG] A deposit is required to rent an apartment in a managed building.",
        "The security deposit can be either equal to one month's rent or more.",
        "Fluffy is Tom's cat.",
        "Cats are pets.",
        "The Olive Garden is a managed building.",
        "The monthly rent at the Olive Garden is $2000.",
        "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000$ is more than $1500."
      ],
      "question": "The security deposit at the Olive Garden is either $2000 or more.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Pet(x)",
        "Allowed(x, y)",
        "Managed(x)",
        "DepositRequired(x)",
        "SecurityDeposit(x, y)",
        "Cat(x)",
        "MoreThan(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "oliveGarden",
        "$2000",
        "$1500"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(Pet, x))",
        "∀x (Managed(x) → DepositRequired(x))",
        "∀x (DepositRequired(x) → (SecurityDeposit(x, $2000) ⊕ ∃y (MoreThan(y, $2000) ∧ SecurityDeposit(x, y))))",
        "Cat(fluffy)",
        "∀x (Cat(x) → Pet(x))",
        "Managed(oliveGarden)",
        "SecurityDeposit(oliveGarden, $2000)",
        "(Allowed(fluffy, x) ∧ ¬MoreThan(SecurityDeposit(x, $1500)) ↔ (Tom will rent an apartment in x))",
        "MoreThan($2000, $1500)"
      ],
      "fol_conc": "(SecurityDeposit(oliveGarden, $2000) ⊕ ∃y (MoreThan(y, $2000) ∧ SecurityDeposit(oliveGarden, y)))",
      "perplexity": [
        1.0506154298782349,
        1.0118221044540405
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Pet(x)",
        "Managed(x)",
        "Allowed(x)",
        "Deposit(x)",
        "Rent(x, y)",
        "More(x, y)",
        "Cat(x)",
        "Building(x)",
        "Security(x, y)"
      ],
      "fol_consts": [
        "fluffy",
        "tom",
        "olivegarden",
        "month",
        "twothousand",
        "fifteenhundred"
      ],
      "fol_rules": [
        "∃x (Managed(x) ∧ Allowed(x, pet))",
        "∀x (Managed(x) → Deposit(x))",
        "∀x (Deposit(x) → (Rent(x, month) ⊕ More(x, month)))",
        "Cat(fluffy)",
        "Pet(fluffy)",
        "Building(olivegarden)",
        "Managed(olivegarden)",
        "Rent(olivegarden, twothousand)",
        "∀x (Managed(x) ∧ Allowed(x, fluffy) ∧ ¬More(x, fifteenhundred) ↔ Rent(x, tom))",
        "More(twothousand, fifteenhundred)"
      ],
      "fol_conc": "Deposit(olivegarden) ⊕ More(olivegarden, month)",
      "perplexity": 1.447784662246704
    }
  },
  {
    "id": 110,
    "nl_problem": {
      "context": [
        "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
      ],
      "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "EnjoyCleaning(x)",
        "Foodie(x)",
        "FrequentEater(x)",
        "OnlyChild(x)",
        "BusyParents(x)",
        "HighIncome(x)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "∀x (Spill(x) → ¬Tidy(x) ∧ EnjoyCleaning(x))",
        "∀x (Foodie(x) ∧ FrequentEater(x) → Spill(x))",
        "∀x (OnlyChild(x) → Tidy(x) ∧ EnjoyCleaning(x))",
        "∀x (BusyParents(x) → OnlyChild(x))",
        "∀x (HighIncome(x) → BusyParents(x))",
        "(Spill(peter) ⊕ OnlyChild(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ FrequentEater(peter) ∧ HighIncome(peter)) ⊕ (Foodie(peter) ∧ FrequentEater(peter) ∧ ¬HighIncome(peter))",
      "perplexity": [
        1.0256016254425049,
        1.0087798833847046
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Spill(x)",
        "Tidy(x)",
        "Enjoy(x)",
        "Foodie(x)",
        "Frequent(x)",
        "Only(x)",
        "Busy(x)",
        "High(x)",
        "Belong(x, y)"
      ],
      "fol_consts": [
        "peter"
      ],
      "fol_rules": [
        "Spill(x) → ¬Tidy(x) ∧ Enjoy(x)",
        "Foodie(x) ∧ Frequent(x) → Spill(x)",
        "Only(x) → Tidy(x) ∧ Enjoy(x)",
        "Busy(x) → Only(x)",
        "High(y) → Busy(x) ∧ Belong(x, y)",
        "(Spill(peter) ∧ Only(peter)) ⊕ ¬(Spill(peter) ∨ Only(peter))"
      ],
      "fol_conc": "(Foodie(peter) ∧ Frequent(peter) ∧ High(y) ∧ Belong(peter, y)) ⊕ ¬(Foodie(peter) ∧ Frequent(peter) ∧ High(y) ∧ Belong(peter, y))",
      "perplexity": 1.304274320602417
    }
  },
  {
    "id": 154,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorkRegularlyAtHome(x)",
        "FullyStockedHomeOffice(x)",
        "SpendTimeTidying(x)",
        "VisitOfficeSupply(x)",
        "GoToBedLate(x)",
        "WakeUpAfterNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorkRegularlyAtHome(x))",
        "∀x (FullyStockedHomeOffice(x) → OwnLargeMonitor(x))",
        "∀x (WorkRegularlyAtHome(x) → SpendTimeTidying(x))",
        "∀x (WorkRegularlyAtHome(x) → VisitOfficeSupply(x))",
        "∀x (SpendTimeTidying(x) → ¬(GoToBedLate(x) ∧ WakeUpAfterNoon(x)))",
        "(GoToBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ SpendTimeTidying(remy)) ⊕ ¬(GoToBedLate(remy) ∨ WakeUpAfterNoon(remy) ∨ SpendTimeTidying(remy))"
      ],
      "fol_conc": "FullyStockedHomeOffice(remy) ∧ VisitOfficeSupply(remy)",
      "perplexity": [
        1.0329279899597168,
        1.0066406726837158
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x, y)",
        "Free(y)",
        "Tidying(y)",
        "Organizing(y)",
        "Spaces(y)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "remy",
        "monitor",
        "office"
      ],
      "fol_rules": [
        "∀x ∀y (Own(x, y) ∧ Large(y) ∧ Desktop(y) ∧ Home(y) → Work(x) ∧ Regularly(x))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, monitor))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → ∃y (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y)))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, office))",
        "∀x (Spend(x, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y) ∧ Spaces(y) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y)) ∧ Spaces(y) ⊕ ¬(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, y) ∧ Free(y) ∧ Tidying(y) ∧ Organizing(y))",
        "Spaces(y)"
      ],
      "fol_conc": "Own(remy, monitor) ∧ Fully(remy) ∧ Stocked(remy) ∧ Impressive(remy) ∧ Office(remy) ∧ Visit(remy, office)",
      "perplexity": 1.2745742797851562
    }
  },
  {
    "id": 155,
    "nl_problem": {
      "context": [
        "If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "All people who work regularly and often at home visit the office supply store regularly.",
        "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
        "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
      ],
      "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "OwnLargeMonitor(x)",
        "WorkRegularlyAtHome(x)",
        "FullyStockedOffice(x)",
        "TidyHome(x)",
        "VisitOfficeSupply(x)",
        "BedLateWakeNoon(x)"
      ],
      "fol_consts": [
        "remy"
      ],
      "fol_rules": [
        "∀x (OwnLargeMonitor(x) → WorkRegularlyAtHome(x))",
        "∀x (FullyStockedOffice(x) → OwnLargeMonitor(x))",
        "∀x (WorkRegularlyAtHome(x) → TidyHome(x))",
        "∀x (WorkRegularlyAtHome(x) → VisitOfficeSupply(x))",
        "∀x (TidyHome(x) → ¬BedLateWakeNoon(x))",
        "(BedLateWakeNoon(remy) ∧ TidyHome(remy)) ⊕ ¬(BedLateWakeNoon(remy) ∨ TidyHome(remy))"
      ],
      "fol_conc": "(BedLateWakeNoon(remy) ∨ VisitOfficeSupply(remy)) → (¬TidyHome(remy) ∧ ¬FullyStockedOffice(remy))",
      "perplexity": [
        1.0369858741760254,
        1.009543776512146
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Own(x, y)",
        "Large(y)",
        "Desktop(y)",
        "Home(y)",
        "Work(x)",
        "Regularly(x)",
        "Often(x)",
        "Home(x)",
        "Fully(x)",
        "Stocked(x)",
        "Impressive(x)",
        "Office(x)",
        "Spend(x)",
        "Free(x)",
        "Tidying(x)",
        "Organizing(x)",
        "Spaces(x)",
        "Gotobedlate(x)",
        "Wakeupafternoon(x)",
        "Visit(x, y)"
      ],
      "fol_consts": [
        "remy",
        "monitor"
      ],
      "fol_rules": [
        "∀x ∀y (Own(x, y) ∧ Large(y) ∧ Desktop(y) ∧ Home(y) → Work(x) ∧ Regularly(x))",
        "∀x (Fully(x) ∧ Stocked(x) ∧ Impressive(x) ∧ Office(x) → Own(x, monitor))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Spend(x, tidying) ∧ Spend(x, organizing))",
        "∀x (Work(x) ∧ Regularly(x) ∧ Often(x) ∧ Home(x) → Visit(x, office))",
        "∀x (Spend(x, tidying) ∧ Spend(x, organizing) → ¬(Gotobedlate(x) ∧ Wakeupafternoon(x)))",
        "(Gotobedlate(remy) ∧ Wakeupafternoon(remy) ∧ Spend(remy, tidying) ∧ Spend(remy, organizing)) ⊕ ¬(Gotobedlate(remy) ∨ Wakeupafternoon(remy) ∨ Spend(remy, tidying) ∨ Spend(remy, organizing))"
      ],
      "fol_conc": "((Gotobedlate(remy) ∨ Visit(remy, office)) → ¬(Spend(remy, tidying) ∨ Spend(remy, organizing) ∨ (Fully(remy) ∧ Stocked(remy) ∧ Impressive(remy) ∧ Office(remy))))",
      "perplexity": 1.2631468772888184
    }
  },
  {
    "id": 198,
    "nl_problem": {
      "context": [
        "If an animal barks, then Jane does not like it.",
        "All dogs are animals that bark.",
        "If an animal jumps, then Jane likes it.",
        "If an animal has legs, then it jumps.",
        "If an animal is terricolous, then it has legs. ",
        "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "question": "KiKi neither barks nor is a dog.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "HasLegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (HasLegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → HasLegs(x))",
        "¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ∧ ¬Dog(kiki)",
      "perplexity": [
        1.042250633239746,
        1.0115330219268799
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Barks(x)",
        "Likes(x, y)",
        "Dog(x)",
        "Animal(x)",
        "Jumps(x)",
        "Haslegs(x)",
        "Terricolous(x)"
      ],
      "fol_consts": [
        "jane",
        "kiki"
      ],
      "fol_rules": [
        "∀x (Barks(x) → ¬Likes(jane, x))",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x)))",
        "∀x (Jumps(x) → Likes(jane, x))",
        "∀x (Haslegs(x) → Jumps(x))",
        "∀x (Terricolous(x) → Haslegs(x))",
        "¬(Jumps(kiki) ∨ Haslegs(kiki)) → (Terricolous(kiki) ∨ Haslegs(kiki))"
      ],
      "fol_conc": "¬Barks(kiki) ⊕ ¬Dog(kiki)",
      "perplexity": 1.3165522813796997
    }
  },
  {
    "id": 199,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "No one playing for Nautico is Brazilian.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "CommonlyKnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOutTo(x, y)",
        "Brazilian(x)",
        "PlaysFor(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "ailton_common",
        "braga",
        "nautico",
        "fluminense",
        "brazil",
        "nineteen_ninety_five"
      ],
      "fol_rules": [
        "Born(ailton, nineteen_ninety_five)",
        "CommonlyKnownAs(ailton, ailton_common)",
        "FootballPlayer(ailton)",
        "LoanedOutTo(ailton, braga)",
        "Brazilian(ailton)",
        "PlaysFor(ailton, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "¬∃x (PlaysFor(x, nautico) ∧ Brazilian(x))",
      "perplexity": [
        1.077357292175293,
        1.0226106643676758
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Loaned(x, y)",
        "Born(x, y)",
        "Club(x)",
        "Plays(x, y)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautic",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton, 1995) ∧ Player(ailton)",
        "Loaned(ailton, braga)",
        "Brazilian(silva) ∧ Player(silva) ∧ Plays(silva, nautic)",
        "Club(braga) ∧ Club(nautic)",
        "Club(fluminense)"
      ],
      "fol_conc": "¬(∃x (Plays(x, nautic) ∧ Brazilian(x)))",
      "perplexity": 1.469222903251648
    }
  },
  {
    "id": 200,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva foes not play for a football club.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedTo(x, y)",
        "Brazillian(x)",
        "PlaysFor(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautico",
        "fluminense",
        "brazil",
        "nineteen_ninety_five"
      ],
      "fol_rules": [
        "Born(ailton, nineteen_ninety_five)",
        "KnownAs(ailton, silva)",
        "FootballPlayer(ailton)",
        "LoanedTo(ailton, braga)",
        "Brazillian(ailton)",
        "PlaysFor(ailton, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "¬PlaysFor(ailton, x)",
      "perplexity": [
        1.146503210067749,
        1.0135143995285034
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Loaned(x, y)",
        "Born(x, y)",
        "Known(x, y)",
        "Plays(x, y)",
        "Club(x)",
        "Brazilian(x)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautic",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Known(ailton, silva) ∧ Born(silva, 1995)",
        "Player(ailton) ∧ Loaned(ailton, braga)",
        "Player(ailton) ∧ Brazilian(ailton) ∧ Plays(ailton, nautic)",
        "Club(braga) ∧ Club(nautic)",
        "Club(fluminense)"
      ],
      "fol_conc": "¬(∃x (Club(x) ∧ Plays(ailton, x)))",
      "perplexity": 1.4531311988830566
    }
  },
  {
    "id": 201,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton was not loaned out to a football club.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedOut(x, y)",
        "BrazilianFootballer(x)",
        "PlaysFor(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "ailton_known_as",
        "braga",
        "nautico",
        "fluminense",
        "brazil",
        "nineteen_ninety_five"
      ],
      "fol_rules": [
        "Born(ailton, nineteen_ninety_five)",
        "KnownAs(ailton, ailton_known_as)",
        "FootballPlayer(ailton)",
        "LoanedOut(ailton, braga)",
        "BrazilianFootballer(ailton)",
        "PlaysFor(ailton, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "¬LoanedOut(ailton, x) ∧ FootballClub(x)",
      "perplexity": [
        1.0902425050735474,
        1.0147249698638916
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Player(x)",
        "Loaned(x, y)",
        "Born(x, y)",
        "Known(x, y)",
        "Club(x)",
        "Brazilian(x)",
        "Plays(x, y)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautic",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Known(ailton, silva) ∧ Born(silva, 1995)",
        "Player(ailton) ∧ Loaned(ailton, braga)",
        "Player(ailton) ∧ Brazilian(ailton) ∧ Plays(ailton, nautic)",
        "Club(braga) ∧ Club(nautic)",
        "Club(fluminense)"
      ],
      "fol_conc": "¬Loaned(ailton, x) ∧ Club(x)",
      "perplexity": 1.4303070306777954
    }
  },
  {
    "id": 202,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva played for Fluminense.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "BornIn(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedTo(x, y)",
        "PlaysFor(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton_silva",
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "brazil",
        "nineteen_ninety_five"
      ],
      "fol_rules": [
        "BornIn(ailton_silva, nineteen_ninety_five)",
        "KnownAs(ailton_silva, ailton)",
        "FootballPlayer(ailton_silva)",
        "LoanedTo(ailton_silva, braga)",
        "PlaysFor(ailton_silva, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "PlaysFor(ailton_silva, fluminense)",
      "perplexity": [
        1.0362861156463623,
        1.0141545534133911
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(x)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautic",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton, 1995)",
        "Known(ailton, silva)",
        "Footballer(ailton)",
        "Loaned(ailton, braga)",
        "Plays(ailton, nautic)",
        "Club(braga)",
        "Club(nautic)",
        "Club(fluminense)"
      ],
      "fol_conc": "Plays(ailton, fluminense)",
      "perplexity": 1.5493481159210205
    }
  },
  {
    "id": 203,
    "nl_problem": {
      "context": [
        "Ailton Silva, born in 1995, is commonly known as Ailton.",
        "Ailton is a football player who was loaned out to Braga.",
        "Ailton Silva is a Brazillian footballer who plays for Nautico.",
        "Nautico is a football club along with Braga.",
        "Fluminense is a football club."
      ],
      "question": "Ailton Silva was loaned out to a football club.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Born(x, y)",
        "KnownAs(x, y)",
        "FootballPlayer(x)",
        "LoanedTo(x, y)",
        "Brazillian(x)",
        "PlaysFor(x, y)",
        "FootballClub(x)"
      ],
      "fol_consts": [
        "ailton",
        "braga",
        "nautico",
        "fluminense",
        "brazil",
        "nineteen_ninety_five"
      ],
      "fol_rules": [
        "Born(ailton, nineteen_ninety_five)",
        "KnownAs(ailton, \"Ailton\")",
        "FootballPlayer(ailton)",
        "LoanedTo(ailton, braga)",
        "Brazillian(ailton)",
        "PlaysFor(ailton, nautico)",
        "FootballClub(braga)",
        "FootballClub(nautico)",
        "FootballClub(fluminense)"
      ],
      "fol_conc": "LoanedTo(ailton, x) ∧ FootballClub(x)",
      "perplexity": [
        1.0564019680023193,
        1.0099529027938843
      ]
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Born(x, y)",
        "Known(x, y)",
        "Footballer(x)",
        "Loaned(x, y)",
        "Plays(x, y)",
        "Club(x)",
        "Brazillian(x)"
      ],
      "fol_consts": [
        "ailton",
        "silva",
        "braga",
        "nautic",
        "fluminense",
        "1995"
      ],
      "fol_rules": [
        "Born(ailton, 1995) ∧ Known(ailton, silva)",
        "Footballer(ailton) ∧ Loaned(ailton, braga)",
        "Footballer(silva) ∧ Plays(silva, nautic)",
        "Club(braga) ∧ Club(nautic)",
        "Club(fluminense)"
      ],
      "fol_conc": "Loaned(silva, x) ∧ Club(x)",
      "perplexity": 1.4755789041519165
    }
  }
]