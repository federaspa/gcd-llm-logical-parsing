[
  {
    "id": 0,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?",
      "options": [
        "A) Fred, Juan",
        "B) Juan, Paul",
        "C) Juan, Marc, Paul",
        "D) Juan, Marc, Trisha",
        "E) Juan, Nita, Trisha"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "boys = EnumSort([Fred, Juan, Marc, Paul])",
        "girls = EnumSort([Nita, Rachel, Trisha])",
        "lockers = EnumSort([1, 2, 3, 4, 5])",
        "assigned = Function([boys, girls] -> [lockers])"
      ],
      "constraints": [
        "ForAll([l:lockers], Count([c:boys, c2:girls], And(assigned(c, l), assigned(c2, l))) + Count([c:boys], assigned(c, l)) + Count([c:girls], assigned(c, l)) == 1)"
      ],
      "options": [
        "is_valid(Exists([l:lockers], assigned(Fred, l) && assigned(Juan, l))) ::: (A)",
        "is_valid(Exists([l:lockers], assigned(Fred, l) && assigned(Rachel, l))) ::: (B)",
        "is_valid(Exists([l:lockers], assigned(Fred, l) && assigned(Trisha, l))) ::: (C)",
        "is_valid(Exists([l:lockers], assigned(Juan, l) && assigned(Nita, l))) ::: (D)",
        "is_valid(Exists([l:lockers], assigned(Juan, l) && assigned(Rachel, l))) ::: (E)",
        "is_valid(Exists([l:lockers], assigned(Juan, l) && assigned(Trisha, l))) ::: (F)",
        "is_valid(Exists([l:lockers], assigned(Marc, l) && assigned(Nita, l))) ::: (G)",
        "is_valid(Exists([l:lockers], assigned(Marc, l) && assigned(Rachel, l))) ::: (H)",
        "is_valid(Exists([l:lockers], assigned(Marc, l) && assigned(Trisha, l))) ::: (I)",
        "is_valid(Exists([l:lockers], assigned(Paul, l) && assigned(Nita, l))) ::: (J)",
        "is_valid(Exists([l:lockers], assigned(Paul, l) && assigned(Rachel, l))) ::: (K)",
        "is_valid(Exists([l:lockers], assigned(Paul, l) && assigned(Trisha, l))) ::: (L)"
      ],
      "perplexity": [
        1.0288422107696533,
        1.0921660661697388
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([l:lockers], Count([c:children], assigned(c))) == 1",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(boy) != assigned(girl), assigned(girl) != assigned(boy))))",
        "ForAll([l:lockers], Implies(shared(l), assigned(l) != rachel))",
        "ForAll([l:lockers], Implies(shared(l), assigned(l) != nita))",
        "ForAll([l:lockers], Implies(shared(l), assigned(l) != trisha))",
        "assigned(fred) == locker3",
        "Count([l:lockers], shared(l)) == 2"
      ],
      "options": [
        "is_accurate_list(And(assigned(juan) != locker1, assigned(juan) != locker2, assigned(juan) != locker3, assigned(juan) != locker4, assigned(juan) != locker5))",
        "is_accurate_list(And(assigned(paul) != locker1, assigned(paul) != locker2, assigned(paul) != locker3, assigned(paul) != locker4, assigned(paul) != locker5))",
        "is_accurate_list(And(assigned(juan) != locker1, assigned(juan) != locker2, assigned(juan) != locker3, assigned(juan) != locker4, assigned(juan) != locker5, assigned(marc) != locker1, assigned(marc) != locker2, assigned(marc) != locker3, assigned(marc) != locker4, assigned(marc) != locker5, assigned(paul) != locker1, assigned(paul) != locker2, assigned(paul) != locker3, assigned(paul) != locker4, assigned(paul) != locker5))",
        "is_accurate_list(And(assigned(juan) != locker1, assigned(juan) != locker2, assigned(juan) != locker3, assigned(juan) != locker4, assigned(juan) != locker5, assigned(marc) != locker1, assigned(marc) != locker2, assigned(marc) != locker3, assigned(marc) != locker4, assigned(marc) != locker5, assigned(trisha) != locker1, assigned(trisha) != locker2, assigned(trisha) != locker3, assigned(trisha) != locker4, assigned(trisha) != locker5))",
        "is_accurate_list(And(assigned(juan) != locker1, assigned(juan) != locker2, assigned(juan) != locker3, assigned(juan) != locker4, assigned(juan) != locker5, assigned(nita) != locker1, assigned(nita) != locker2, assigned(nita) != locker3, assigned(nita) != locker4, assigned(nita) != locker5, assigned(trisha) != locker1, assigned(trisha) != locker2, assigned(trisha) != locker3, assigned(trisha) != locker4, assigned(trisha) != locker5))"
      ],
      "perplexity": 1.122814416885376
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?",
      "options": [
        "A) Juan is assigned to locker 4.",
        "B) Juan is assigned to locker 5.",
        "C) Paul is assigned to locker 2.",
        "D) Rachel is assigned to locker 2.",
        "E) Rachel is assigned to locker 5."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet",
        "eats(Vladimir, breakfast) != eats(Wendy, breakfast)",
        "eats(Vladimir, lunch) != eats(Wendy, lunch)",
        "eats(Vladimir, dinner) != eats(Wendy, dinner)",
        "eats(Vladimir, snack) != eats(Wendy, snack)"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0361357927322388,
        1.0737847089767456
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:children], assigned(c))",
        "ForAll([c:children], Count([l:lockers], assigned(c))) == 1",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(And(c1, c2)) == l, c1 != c2, And(And(c1, c2) != c1, And(c1, c2) != c2))))",
        "shared(locker1)",
        "Not(shared(locker2))",
        "Not(shared(locker3))",
        "Not(shared(locker4))",
        "Not(shared(locker5))",
        "assigned(juan)",
        "Not(shared(locker3))",
        "assigned(fred) == locker3",
        "assigned(marc) == locker1",
        "assigned(trisha) == locker3"
      ],
      "options": [
        "is_sat(assigned(juan))",
        "is_sat(assigned(paul))",
        "is_sat(assigned(rachel))",
        "is_sat(assigned(rachel))",
        "is_sat(assigned(juan))",
        "is_sat(assigned(paul))"
      ],
      "perplexity": 1.501041054725647
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?",
      "options": [
        "A) locker 2",
        "B) locker 4",
        "C) locker 1, locker 2",
        "D) locker 1, locker 4",
        "E) locker 2, locker 4"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "children = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha])",
        "lockers = EnumSort([1, 2, 3, 4, 5])",
        "assigned = Function([children, lockers] -> [bool])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:children], Exists([l:lockers], assigned(c, l))",
        "ForAll([l:lockers], Or(assigned(s, l), assigned(p, l)) => shared(l))",
        "Exists([l:lockers], And(assigned(Juan, l), Exists([p:children], assigned(p, l))))",
        "ForAll([l:lockers], Not(assigned(Rachel, l))) => Not(Exists([s:children], Exists([p:children], assigned(s, l) & assigned(p, l))))",
        "Exists([l1:lockers, l2:lockers], And(assigned(Nita, l1), assigned(Trisha, l2), Abs(1, l1, l2)))",
        "assigned(Fred, 3)",
        "ForAll([l:lockers], assigned(Fred, l-1) => assigned(Marc, l)) & ForAll([l:lockers], assigned(Marc, l-1) => assigned(Paul, l))",
        "assigned(Juan, 5)"
      ],
      "options": [
        "is_unsat(shared(2))",
        "is_unsat(shared(4))",
        "is_unsat(shared(1) | shared(2))",
        "is_unsat(shared(1) | shared(4))",
        "is_unsat(shared(2) | shared(4))"
      ],
      "perplexity": [
        1.1117897033691406,
        1.0905907154083252
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:children], assigned(c))",
        "ForAll([l:lockers], Count([c:children], assigned(c))) == 1",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(And(c1, c2)) == l, c1 != c2, And(And(c1, c2) != boy, c1 != boy, c2 != boy, c1 != girl, c2 != girl))))",
        "ForAll([c:children], Implies(c == juan, shared(assigned(c))))",
        "ForAll([c:children], Implies(c == rachel, Not(shared(assigned(c)))))",
        "ForAll([c:children], Implies(c == nita, Not(shared(assigned(c)))))",
        "ForAll([c:children], Implies(c == trisha, Not(shared(assigned(c)))))",
        "assigned(fred) == locker3",
        "ForAll([l:lockers], Implies(And(assigned(juan) == l, l != locker5), Not(shared(l))))",
        "ForAll([l:lockers], Implies(And(assigned(nita) == l, assigned(trisha) == l2, l != l2), l != l2))"
      ],
      "options": [
        "is_accurate_list(shared(locker1))",
        "is_accurate_list(shared(locker2))",
        "is_accurate_list(shared(locker1))",
        "is_accurate_list(shared(locker4))",
        "is_accurate_list(shared(locker2))",
        "is_accurate_list(shared(locker4))"
      ],
      "perplexity": 1.321956992149353
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0189694166183472,
        1.11549973487854
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:children], Count([l:lockers], assigned(c))) == 1",
        "ForAll([l:lockers], Count([c:children], assigned(c))) == 1",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(And(boy, child)) == l, assigned(And(girl, child)) == l)))",
        "shared(locker1) == shared(locker2) == shared(locker3) == shared(locker4) == shared(locker5) == false",
        "assigned(juan) != locker1",
        "assigned(rachel) != locker1",
        "assigned(rachel) != locker2",
        "assigned(rachel) != locker3",
        "assigned(rachel) != locker4",
        "assigned(rachel) != locker5",
        "assigned(nita) != locker4",
        "assigned(trisha) != locker4",
        "assigned(fred) == locker3"
      ],
      "options": [
        "is_sat(Count([l:lockers], And(assigned(juan) == l, shared(l))))",
        "is_sat(Count([l:lockers], And(assigned(juan) == l, shared(l), assigned(rachel) == locker1)))",
        "is_sat(Count([l:lockers], And(assigned(juan) == l, shared(l), assigned(rachel) == locker2)))",
        "is_sat(Count([l:lockers], And(assigned(juan) == l, shared(l), assigned(rachel) == locker3)))",
        "is_sat(Count([l:lockers], And(assigned(juan) == l, shared(l), assigned(rachel) == locker4)))"
      ],
      "perplexity": 1.2318469285964966
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If the first three lockers are assigned to girls, which one of the following must be true?",
      "options": [
        "A) Juan is assigned to locker 1.",
        "B) Nita is assigned to locker 3.",
        "C) Trisha is assigned to locker 1.",
        "D) Juan is assigned to the same locker as Trisha.",
        "E) Paul is assigned to the same locker as Trisha."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0108753442764282,
        1.095626711845398
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:children], assigned(c))",
        "ForAll([l:lockers], Count([c:children], assigned(c))) == 1",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(And(c1, c2)) == l, And(c1 != c2, And(And(c1, c2) != girl, And(c1, c2) != boy)))))",
        "shared(locker1) == false",
        "shared(locker2) == false",
        "shared(locker3) == false",
        "shared(locker4) == false",
        "shared(locker5) == false",
        "assigned(juan) != false",
        "assigned(rachel) != shared(locker1)",
        "assigned(nita) != adjacent(trisha)",
        "assigned(fred) == locker3"
      ],
      "options": [
        "is_sat(assigned(juan))",
        "is_sat(assigned(nita))",
        "is_sat(assigned(trisha))",
        "is_sat(shared(locker1))",
        "is_sat(shared(locker2))"
      ],
      "perplexity": 1.4883298873901367
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If lockers 1 and 2 are each assigned to one boy and are not shared lockers, then locker 4 must be assigned to",
      "options": [
        "A) Juan",
        "B) Paul",
        "C) Rachel",
        "D) Juan and Nita",
        "E) Marc and Trisha"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0086077451705933,
        1.1073176860809326
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([l:lockers], Count([c:children], assigned(c))) == 1",
        "ForAll([l:lockers], Count([c:children], assigned(c))) == 2",
        "ForAll([l:lockers], shared(l))",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(girl) != l, assigned(boy) != l)))",
        "shared(locker1) == false",
        "shared(locker2) == false",
        "assigned(juan) != locker1",
        "assigned(rachel) != locker1",
        "assigned(rachel) != locker2",
        "assigned(nita) != locker4",
        "assigned(trisha) != locker4",
        "assigned(fred) == locker3"
      ],
      "options": [
        "is_sat(assigned(locker4))",
        "is_sat(assigned(locker4))",
        "is_sat(assigned(locker4))",
        "is_sat(assigned(locker4))",
        "is_sat(assigned(locker4))"
      ],
      "perplexity": 1.4588580131530762
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "Which one of the following could be a complete and accurate list of the types of CDs that are on sale?",
      "options": [
        "A) new jazz, used jazz, used opera, used pop, new rap",
        "B) new jazz, used pop, used rap, new soul",
        "C) used opera, used pop, new rap, used rap",
        "D) used opera, new pop, used pop, new soul",
        "E) used jazz, used pop, new soul, used soul"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0124216079711914,
        1.144111156463623
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([new, used])",
        "genres = EnumSort([jazz, opera, pop, rap, soul])",
        "on = Function([genres, cds] -> [bool])"
      ],
      "constraints": [
        "ForAll([g:genres, c:cds], on(g, c))",
        "on(pop, used) == 1",
        "Not(on(opera, new))",
        "Implies(And(on(pop, new), on(pop, used)), on(soul, used))",
        "Implies(And(on(jazz, new), on(jazz, used)), Not(on(rap, new)))",
        "Implies(Not(And(on(jazz, new), on(jazz, used))), on(pop, new))",
        "Implies(Or(on(rap, new), on(rap, used)), Not(on(soul, used)))"
      ],
      "options": [
        "is_accurate_list(And(on(jazz, new), on(jazz, used), on(opera, used), on(pop, used), on(rap, new)))",
        "is_accurate_list(And(on(jazz, new), on(pop, used), on(rap, new), on(rap, used), on(soul, new)))",
        "is_accurate_list(And(on(opera, used), on(pop, used), on(rap, new), on(rap, used)))",
        "is_accurate_list(And(on(opera, used), on(pop, new), on(pop, used), on(soul, new)))",
        "is_accurate_list(And(on(jazz, used), on(pop, used), on(soul, new), on(soul, used)))"
      ],
      "perplexity": 1.1138694286346436
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If new soul is not on sale, then which one of the following must be true?",
      "options": [
        "A) New rap is not on sale.",
        "B) New rap is on sale.",
        "C) Used opera is not on sale.",
        "D) At least one type of jazz is not on sale.",
        "E) At least one type of pop is not on sale."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0133615732192993,
        1.1290855407714844
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([new, used])",
        "genres = EnumSort([jazz, opera, pop, rap, soul])",
        "on = Function([cds, genres] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:cds, g:genres], on(c, g))",
        "on(used, pop)",
        "Not(on(new, opera))",
        "Implies(And(on(new, pop), on(used, pop)), on(used, soul))",
        "Implies(And(on(new, jazz), on(used, jazz)), Not(on(new, rap)))",
        "Implies(Not(And(on(new, jazz), on(used, jazz))), on(new, pop))",
        "Implies(Or(on(new, rap), on(used, rap)), Not(on(new, soul)))"
      ],
      "options": [
        "is_valid(Implies(Not(on(new, soul)), Not(on(new, rap))))",
        "is_valid(Implies(Not(on(new, soul)), on(new, rap)))",
        "is_valid(Implies(Not(on(new, soul)), Not(on(used, opera))))",
        "is_valid(Implies(Not(on(new, soul)), Not(on(new, pop))))",
        "is_valid(Implies(Not(on(new, soul)), Not(on(new, jazz))))"
      ],
      "perplexity": 1.172805905342102
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If both types of jazz are on sale, then which one of the following is the minimum number of types of new CDs that could be included in the sale?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.008491039276123,
        1.1127736568450928
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([jazz, opera, pop, rap, soul])",
        "types = EnumSort([new, used])",
        "sale = Function([cds, types] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:cds, t:types], Count([t1:types], sale(c, t1))) <= 1",
        "sale(pop, used)",
        "Not(sale(opera, new))",
        "Implies(And(sale(pop, new), sale(pop, used)), sale(soul, new))",
        "Implies(And(sale(jazz, new), sale(jazz, used)), Not(sale(rap, new)))",
        "Implies(Not(And(sale(jazz, new), sale(jazz, used))), sale(pop, new))",
        "Implies(Or(sale(rap, new), sale(rap, used)), Not(sale(soul, new)))",
        "sale(jazz, new)",
        "sale(jazz, used)"
      ],
      "options": [
        "is_sat(Count([c:cds, t:types], And(sale(c, t), t == new)))",
        "is_sat(Count([c:cds, t:types], And(sale(c, t), t == new)))",
        "is_sat(Count([c:cds, t:types], And(sale(c, t), t == new)))",
        "is_sat(Count([c:cds, t:types], And(sale(c, t), t == new)))",
        "is_sat(Count([c:cds, t:types], And(sale(c, t), t == new)))"
      ],
      "perplexity": 1.1851979494094849
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Neither type of opera and neither type of rap is on sale.",
        "B) Neither type of jazz and neither type of opera is on sale.",
        "C) Neither type of opera and neither type of soul is on sale.",
        "D) Neither type of jazz and neither type of soul is on sale.",
        "E) Neither type of jazz and neither type of rap is on sale."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0052634477615356,
        1.1411656141281128
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([jazz, opera, pop, rap, soul])",
        "types = EnumSort([new, used])",
        "sale = Function([cds, types] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:cds, t:types], sale(c, t))",
        "sale(pop, used)",
        "Not(sale(opera, new))",
        "Implies(And(sale(pop, new), sale(pop, used)), sale(soul, new))",
        "Implies(And(sale(jazz, new), sale(jazz, used)), Not(sale(rap, new)))",
        "Implies(Not(sale(jazz, new)), Not(sale(jazz, used)))",
        "Implies(Or(sale(rap, new), sale(rap, used)), Not(sale(soul, new)))"
      ],
      "options": [
        "is_unsat(And(Not(sale(opera, new)), Not(sale(rap, new))))",
        "is_unsat(And(Not(sale(jazz, new)), Not(sale(jazz, used))))",
        "is_unsat(And(Not(sale(opera, new)), Not(sale(soul, new))))",
        "is_unsat(And(Not(sale(jazz, new)), Not(sale(soul, new))))",
        "is_unsat(And(Not(sale(jazz, new)), Not(sale(rap, new))))"
      ],
      "perplexity": 1.1168593168258667
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If neither type of jazz is on sale, then each of the following must be true EXCEPT:",
      "options": [
        "A) Used opera is on sale.",
        "B) New rap is not on sale.",
        "C) Used rap is not on sale.",
        "D) New soul is on sale.",
        "E) Used soul is on sale."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0046477317810059,
        1.0855270624160767
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([jazz, opera, pop, rap, soul])",
        "types = EnumSort([new, used])",
        "on = Function([cds, types] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:cds, t:types], on(c, t))",
        "on(pop, used)",
        "Not(on(opera, new))",
        "Implies(And(on(pop, new), on(pop, used)), on(soul, used))",
        "Implies(And(on(jazz, new), on(jazz, used)), Not(on(rap, new)))",
        "Implies(Not(on(jazz, new)), Not(on(jazz, used)))",
        "Implies(Or(on(rap, new), on(rap, used)), Not(on(soul, used)))"
      ],
      "options": [
        "is_exception(Implies(Not(on(jazz, new)), on(pop, new)))",
        "is_exception(Implies(Not(on(jazz, new)), on(opera, new)))",
        "is_exception(Implies(Not(on(jazz, new)), on(rap, new)))",
        "is_exception(Implies(Not(on(jazz, new)), on(soul, new)))",
        "is_exception(Implies(Not(on(jazz, new)), on(used, new)))"
      ],
      "perplexity": 1.1290282011032104
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If new soul is the only type of new CD on sale, then which one of the following CANNOT be true?",
      "options": [
        "A) Used jazz is not on sale.",
        "B) Used opera is not on sale.",
        "C) Used rap is not on sale.",
        "D) Used soul is on sale.",
        "E) Used soul is not on sale."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0039150714874268,
        1.0888879299163818
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([new, used])",
        "genres = EnumSort([jazz, opera, pop, rap, soul])",
        "on = Function([cds, genres] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:cds, g:genres], on(c, g))",
        "on(used, pop)",
        "Not(on(new, opera))",
        "Implies(And(on(used, pop), on(new, pop)), on(used, soul))",
        "Implies(And(on(used, jazz), on(new, jazz)), Not(on(used, rap)))",
        "Implies(Not(And(on(used, jazz), on(new, jazz))), on(new, pop))",
        "Implies(Or(on(used, rap), on(new, rap)), Not(on(used, soul)))",
        "on(new, soul)"
      ],
      "options": [
        "is_unsat(And(on(used, jazz), Not(on(used, rap))))",
        "is_unsat(And(on(used, opera), Not(on(used, rap))))",
        "is_unsat(And(on(new, jazz), Not(on(new, rap))))",
        "is_unsat(And(on(new, opera), Not(on(new, rap))))",
        "is_unsat(And(on(new, soul), Not(on(used, rap))))"
      ],
      "perplexity": 1.190494179725647
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If exactly four of the five types of used CDs are the only CDs on sale, then which one of the following could be true?",
      "options": [
        "A) Used jazz is not on sale.",
        "B) Used opera is not on sale.",
        "C) Used rap is not on sale.",
        "D) Neither type of jazz is on sale.",
        "E) Neither type of rap and neither type of soul is on sale."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "types = EnumSort([jazz, opera, pop, rap, soul])",
        "new_used = EnumSort([new, used])",
        "CDs = Function([types, new_used] -> [bool])",
        "sale = Function([CDs] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:types, n:new_used], Exists([cd:CDs], And(CDs(t, n), sale(CDs(t, n)))))",
        "sale(used(pop))",
        "Not(sale(new(opera)))",
        "Implies(And(sale(used(pop)), sale(new(pop))), ForAll([t:types], t != soul -> Not(sale(t))))",
        "Implies(And(sale(used(jazz)), sale(new(jazz))), ForAll([t:types], t != rap -> Not(sale(t))))",
        "Implies(Not(And(sale(used(jazz)), sale(new(jazz)))), sale(new(pop)))",
        "Implies(Or(sale(used(rap)), sale(new(rap))), ForAll([t:types], t != soul -> Not(sale(t))))"
      ],
      "options": [
        "is_possible(Exactly(Count([t:types, n:new_used], And(n == used, CDs(t, n))), 4), And(Not(sale(used(jazz))), Not(sale(used(opera)))))",
        "is_possible(Exactly(Count([t:types, n:new_used], And(n == used, CDs(t, n))), 4), And(Not(sale(used(rap)), Not(sale(used(opera)))))",
        "is_possible(Exactly(Count([t:types, n:new_used], And(n == used, CDs(t, n))), 4), And(Not(sale(used(rap)), Not(sale(used(jazz)))))",
        "is_possible(Exactly(Count([t:types, n:new_used], And(n == used, CDs(t, n))), 4), And(Not(sale(used(jazz))), Not(sale(new(jazz)))))",
        "is_possible(Exactly(Count([t:types, n:new_used], And(n == used, CDs(t, n))), 4), And(Not(sale(used(rap))), Not(sale(used(soul)))))"
      ],
      "perplexity": [
        1.0885462760925293,
        1.0683199167251587
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "cds = EnumSort([jazz, opera, pop, rap, soul])",
        "types = EnumSort([new, used])",
        "sale = Function([cds, types] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:cds, t:types], Count([t1:types], sale(c, t1))) == 2",
        "sale(pop, used)",
        "Not(sale(opera, new))",
        "Implies(And(sale(pop, new), sale(pop, used)), sale(soul, used))",
        "Implies(And(sale(jazz, new), sale(jazz, used)), Not(sale(rap, new)))",
        "Implies(Not(sale(jazz, new)), Not(sale(jazz, used)))",
        "Implies(Or(sale(rap, new), sale(rap, used)), Not(sale(soul, used)))",
        "Count([c:cds], And(sale(c, used), Not(sale(c, new)))) == 4"
      ],
      "options": [
        "is_sat(And(Not(sale(jazz, used)), Not(sale(opera, used))))",
        "is_sat(And(Not(sale(jazz, used)), Not(sale(rap, used))))",
        "is_sat(And(Not(sale(jazz, used)), Not(sale(soul, used))))",
        "is_sat(And(Not(sale(rap, used)), Not(sale(soul, used))))",
        "is_sat(And(Not(sale(rap, used)), Not(sale(soul, used))))"
      ],
      "perplexity": 1.1670042276382446
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "Which one of the following CANNOT be true of the week's tour schedule?",
      "options": [
        "A) The division that is toured on Monday is also toured on Tuesday.",
        "B) The division that is toured on Monday is also toured on Friday.",
        "C) The division that is toured on Tuesday is also toured on Thursday.",
        "D) The division that is toured on Wednesday is also toured on Friday.",
        "E) The division that is toured on Thursday is also toured on Friday."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "candidates = EnumSort([Q, R, S, T, U])",
        "meetings = EnumSort([1, 2, 3])",
        "speaks = Function([meetings, candidates] -> [int])"
      ],
      "constraints": [
        "Distinct([v:valves], opened(v))",
        "And(opened(K) < opened(H), opened(P) < opened(H))",
        "And(opened(O) > opened(H), opened(O) < opened(L))",
        "opened(L) > opened(G)",
        "opened(N) < opened(H)",
        "opened(I) > opened(K)"
      ],
      "options": [
        "is_exception(is_sat(opened(H) == 5))",
        "is_exception(is_sat(opened(I) == 5))",
        "is_exception(is_sat(opened(K) == 5))",
        "is_exception(is_sat(opened(N) == 5))",
        "is_exception(is_sat(opened(O) == 5))"
      ],
      "perplexity": [
        1.0088757276535034,
        1.0337233543395996
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday])",
        "divisions = EnumSort([operations, production, sales])",
        "toured = Function([days, divisions] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:divisions], Count([d:days], toured(d, m))) >= 1",
        "Not(toured(operations, monday))",
        "Not(toured(production, wednesday))",
        "And(toured(sales, d1), toured(sales, d2), d1 != d2, d1 < d2)",
        "Implies(toured(operations, thursday), toured(production, friday))"
      ],
      "options": [
        "is_unsat(And(toured(operations, monday), toured(operations, tuesday)))",
        "is_unsat(And(toured(operations, monday), toured(operations, friday)))",
        "is_unsat(And(toured(operations, tuesday), toured(operations, thursday)))",
        "is_unsat(And(toured(operations, wednesday), toured(operations, friday)))",
        "is_unsat(And(toured(operations, thursday), toured(operations, friday)))"
      ],
      "perplexity": 1.1571398973464966
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in addition to the Sales division one other division is toured on two consecutive days, then it could be true of the week's tour schedule both that the",
      "options": [
        "A) Production division is toured on Monday and that the Operations division is toured on Thursday",
        "B) Production division is toured on Tuesday and that the Sales division is toured on Wednesday",
        "C) Operations division is toured on Tuesday and that the Production division is toured on Friday",
        "D) Sales division is toured on Monday and that the Operations division is toured on Friday",
        "E) Sales division is toured on Wednesday and that the Production division is toured on Friday"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0050326585769653,
        1.0827608108520508
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday])",
        "divisions = EnumSort([operations, production, sales])",
        "toured = Function([days, divisions] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:days], Count([d1:days], toured(d1, d))) == 1",
        "ForAll([d:days], toured(monday, operations))",
        "ForAll([d:days], toured(wednesday, production))",
        "ForAll([d:days], And(toured(d, sales), Or(toured(d, sales) == toured(d1, sales), toured(d, sales) == toured(d1, sales))))",
        "Implies(toured(thursday, operations), toured(friday, production))"
      ],
      "options": [
        "is_sat(And(toured(monday, production), toured(thursday, operations)))",
        "is_sat(And(toured(tuesday, production), toured(wednesday, sales)))",
        "is_sat(And(toured(tuesday, operations), toured(friday, production)))",
        "is_sat(And(toured(monday, sales), toured(friday, operations)))",
        "is_sat(And(toured(wednesday, sales), toured(friday, production)))"
      ],
      "perplexity": 1.1813734769821167
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Monday is not the division that is toured on Tuesday, then which one of the following could be true of the week's schedule?",
      "options": [
        "A) A tour of the Sales division is scheduled for some day earlier in the week than is any tour of the Production division.",
        "B) A tour of the Operations division is scheduled for some day earlier in the week than is any tour of the Production division.",
        "C) The Sales division is toured on Monday.",
        "D) The Production division is toured on Tuesday.",
        "E) The Operations division is toured on Wednesday."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0105642080307007,
        1.0808110237121582
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday])",
        "divisions = EnumSort([operations, production, sales])",
        "scheduled = Function([days, divisions] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:days], Count([d1:days], scheduled(d1, d))) == 1",
        "ForAll([d:days], scheduled(monday, d))",
        "Not(scheduled(monday, operations))",
        "Not(scheduled(wednesday, production))",
        "ForAll([d:days], Count([d1:days], scheduled(d1, sales)))",
        "Count([d:days], scheduled(d, sales)) == 2",
        "Implies(scheduled(thursday, operations), scheduled(friday, production))"
      ],
      "options": [
        "is_sat(And(scheduled(monday, sales), scheduled(tuesday, production)))",
        "is_sat(And(scheduled(monday, production), scheduled(tuesday, operations)))",
        "is_sat(scheduled(monday, sales))",
        "is_sat(scheduled(tuesday, production))",
        "is_sat(scheduled(wednesday, sales))"
      ],
      "perplexity": 1.2959541082382202
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Wednesday, then which one of the following must be true of the week's tour schedule?",
      "options": [
        "A) The Production division is toured on Monday.",
        "B) The Operations division is toured on Tuesday.",
        "C) The Sales division is toured on Wednesday.",
        "D) The Sales division is toured on Thursday.",
        "E) The Production division is toured on Friday."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0069252252578735,
        1.123010277748108
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday])",
        "divisions = EnumSort([operations, production, sales])",
        "toured = Function([days, divisions] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:days], Count([d1:days], toured(d1, d))) == 1",
        "ForAll([d:days], And(toured(monday, d), toured(tuesday, d), toured(wednesday, d), toured(thursday, d), toured(friday, d)))",
        "Not(toured(monday, operations))",
        "Not(toured(wednesday, production))",
        "And(toured(d1, sales), toured(d2, sales), d1 != d2, d1 == d2)",
        "Implies(toured(thursday, operations), toured(friday, production))"
      ],
      "options": [
        "is_sat(And(toured(monday, production), toured(tuesday, production)))",
        "is_sat(And(toured(monday, operations), toured(tuesday, operations)))",
        "is_sat(And(toured(monday, sales), toured(tuesday, sales)))",
        "is_sat(And(toured(monday, operations), toured(tuesday, sales)))",
        "is_sat(And(toured(monday, production), toured(tuesday, sales)))"
      ],
      "perplexity": 1.1933705806732178
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following could be an accurate matching of the hangers to the fabrics of the dresses that hang on them?",
      "options": [
        "A) 1: wool; 2: gauze; 3: silk; 4: linen; 5: polyester; 6: rayon",
        "B) 1: rayon; 2: wool; 3: gauze; 4: silk; 5: linen; 6: polyester",
        "C) 1: polyester; 2: gauze; 3: wool; 4: silk; 5: linen; 6: rayon",
        "D) 1: linen; 2: silk; 3: wool; 4: gauze; 5: polyester; 6: rayon",
        "E) 1: gauze; 2: rayon; 3: silk; 4: linen; 5: wool; 6: polyester"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_valid(And(repairs(Stacy, radios), repairs(Urma, radios)))",
        "is_valid(And(repairs(Stacy, televisions), repairs(Urma, televisions)))",
        "is_valid(And(repairs(Stacy, VCRs), repairs(Urma, VCRs)))",
        "is_valid(And(repairs(Urma, radios), repairs(Urma, televisions)))",
        "is_valid(And(repairs(Urma, radios), repairs(Urma, VCRs)))"
      ],
      "perplexity": [
        1.0112022161483765,
        1.1175625324249268
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "hangers = EnumSort([h1, h2, h3, h4, h5, h6])",
        "dresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])",
        "hanging = Function([hangers, dresses] -> [bool])"
      ],
      "constraints": [
        "ForAll([h:hangers, d:dresses], And(hanging(h, d), hanging(h2, d2) == Not(h == h2)))",
        "ForAll([d:dresses], Implies(hanging(h1, d), hanging(h2, polyester) > hanging(h1, d)))",
        "ForAll([d:dresses], Or(hanging(h1, d), hanging(h6, d)))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h3, d1), hanging(h3, d2)), Or(hanging(h1, d1), hanging(h6, d1))))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h4, d1), hanging(h4, d2)), hanging(h4, d1) == hanging(h4, d2)))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h5, d1), hanging(h5, d2)), hanging(h5, d1) == hanging(h5, d2)))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h6, d1), hanging(h6, d2)), hanging(h6, d1) == hanging(h6, d2)))",
        "hanging(h3, wool) == Or(hanging(h1, wool), hanging(h6, wool))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h4, d1), hanging(h4, d2)), hanging(h4, d1) == hanging(h4, d2)))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h5, d1), hanging(h5, d2)), hanging(h5, d1) == hanging(h5, d2)))",
        "ForAll([d1:dresses, d2:dresses], Implies(And(hanging(h6, d1), hanging(h6, d2)), hanging(h6, d1) == hanging(h6, d2)))",
        "hanging(h4, linen) == hanging(h5, silk)",
        "hanging(h5, linen) == hanging(h4, silk)"
      ],
      "options": [
        "is_valid(hanging(h1, gauze))",
        "is_valid(hanging(h2, rayon))",
        "is_valid(hanging(h3, wool))",
        "is_valid(hanging(h4, linen))",
        "is_valid(hanging(h5, silk))",
        "is_valid(hanging(h6, polyester))"
      ],
      "perplexity": 1.1475799083709717
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If both the silk dress and the gauze dress are on odd-numbered hangers, then which one of the following could be true?",
      "options": [
        "A) The polyester dress is on hanger 1.",
        "B) The wool dress is on hanger 2.",
        "C) The polyester dress is on hanger 4.",
        "D) The linen dress is on hanger 5.",
        "E) The wool dress is on hanger 6."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0056549310684204,
        1.2054173946380615
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "hangers = EnumSort([hanger1, hanger2, hanger3, hanger4, hanger5, hanger6])",
        "dresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])",
        "on = Function([hangers, dresses] -> [bool])"
      ],
      "constraints": [
        "ForAll([h:hangers, d:dresses], And(on(h, d), on(h, d) == on(hanger1, d)))",
        "And(on(hanger1, gauze), on(hanger2, polyester))",
        "Or(on(hanger1, rayon), on(hanger6, rayon))",
        "Or(on(hanger3, wool), on(hanger3, silk))",
        "on(hanger4, linen) == on(hanger4, silk)",
        "on(hanger5, linen) == on(hanger5, silk)"
      ],
      "options": [
        "is_sat(And(on(hanger1, polyester), on(hanger3, wool)))",
        "is_sat(And(on(hanger1, polyester), on(hanger3, silk)))",
        "is_sat(And(on(hanger1, polyester), on(hanger5, linen)))",
        "is_sat(And(on(hanger1, polyester), on(hanger6, wool)))",
        "is_sat(And(on(hanger2, polyester), on(hanger3, wool)))"
      ],
      "perplexity": 1.196221113204956
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If the silk dress is on an even-numbered hanger, which one of the following could be on the hanger immediately to its left?",
      "options": [
        "A) the gauze dress",
        "B) the linen dress",
        "C) the polyester dress",
        "D) the rayon dress",
        "E) the wool dress"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0146870613098145,
        1.1207321882247925
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "hangers = EnumSort([hanger1, hanger2, hanger3, hanger4, hanger5, hanger6])",
        "dresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])",
        "on = Function([hangers, dresses] -> [bool])"
      ],
      "constraints": [
        "ForAll([h:hangers], on(h, gauze))",
        "ForAll([h:hangers], on(h, linen))",
        "ForAll([h:hangers], on(h, polyester))",
        "ForAll([h:hangers], on(h, rayon))",
        "ForAll([h:hangers], on(h, silk))",
        "ForAll([h:hangers], on(h, wool))",
        "And(on(hanger1, gauze), on(hanger2, polyester))",
        "Or(on(hanger1, rayon), on(hanger6, rayon))",
        "Or(on(hanger3, wool), on(hanger3, silk))",
        "on(hanger4, silk) == on(hanger5, linen)"
      ],
      "options": [
        "is_valid(on(hanger2, gauze))",
        "is_valid(on(hanger2, linen))",
        "is_valid(on(hanger2, polyester))",
        "is_valid(on(hanger2, rayon))",
        "is_valid(on(hanger2, silk))"
      ],
      "perplexity": 1.1722207069396973
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If the polyester dress is on hanger 2, then which one of the following must be true?",
      "options": [
        "A) The silk dress is on hanger 1.",
        "B) The wool dress is on hanger 3.",
        "C) The linen dress is on hanger 4.",
        "D) The linen dress is on hanger 5.",
        "E) The rayon dress is on hanger 6."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0118354558944702,
        1.109205722808838
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "hangers = EnumSort([hanger1, hanger2, hanger3, hanger4, hanger5, hanger6])",
        "dresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])",
        "on = Function([hangers, dresses] -> [bool])"
      ],
      "constraints": [
        "ForAll([h:hangers, d:dresses], And(on(h, d), on(h, d) == on(hanger1, d)))",
        "And(on(hanger1, gauze), on(hanger2, polyester))",
        "Or(on(hanger1, rayon), on(hanger6, rayon))",
        "Or(on(hanger3, wool), on(hanger3, silk))",
        "on(hanger4, linen) == on(hanger4, silk)"
      ],
      "options": [
        "is_valid(And(on(hanger1, silk), on(hanger2, polyester)))",
        "is_valid(And(on(hanger3, wool), on(hanger2, polyester)))",
        "is_valid(And(on(hanger4, linen), on(hanger2, polyester)))",
        "is_valid(And(on(hanger5, linen), on(hanger2, polyester)))",
        "is_valid(And(on(hanger6, rayon), on(hanger2, polyester)))"
      ],
      "perplexity": 1.1916781663894653
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following CANNOT hang immediately next to the rayon dress?",
      "options": [
        "A) the gauze dress",
        "B) the linen dress",
        "C) the polyester dress",
        "D) the silk dress",
        "E) the wool dress"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0113762617111206,
        1.0933746099472046
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "hangers = EnumSort([hanger1, hanger2, hanger3, hanger4, hanger5, hanger6])",
        "dresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])",
        "hanging = Function([hangers, dresses] -> [bool])"
      ],
      "constraints": [
        "ForAll([h:hangers, d:dresses], And(hanging(h, d), hanging(h, d) == hanging(h, d)))",
        "ForAll([d:dresses], Count([h:hangers], hanging(h, d))) == 1",
        "ForAll([d:dresses], And(hanging(hanger1, d), hanging(hanger2, d), hanging(hanger3, d), hanging(hanger4, d), hanging(hanger5, d), hanging(hanger6, d)))",
        "ForAll([d:dresses], Implies(hanging(hanger1, d), hanging(hanger2, d)))",
        "ForAll([d:dresses], Implies(hanging(hanger6, d), hanging(hanger1, d)))",
        "ForAll([d:dresses], Or(hanging(hanger3, d), hanging(hanger3, d)))",
        "ForAll([d:dresses], Implies(hanging(hanger3, d), Or(hanging(hanger3, d), hanging(hanger3, d))))",
        "ForAll([d:dresses], Implies(hanging(hanger3, d), hanging(hanger4, d)))"
      ],
      "options": [
        "is_unsat(And(hanging(hanger1, d), hanging(hanger2, d)))",
        "is_unsat(And(hanging(hanger1, d), hanging(hanger3, d)))",
        "is_unsat(And(hanging(hanger1, d), hanging(hanger4, d)))",
        "is_unsat(And(hanging(hanger1, d), hanging(hanger5, d)))",
        "is_unsat(And(hanging(hanger1, d), hanging(hanger6, d)))"
      ],
      "perplexity": 1.1800563335418701
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Assume that the original condition that the linen dress hangs immediately to the right of the silk dress is replaced by the condition that the wool dress hangs immediately to the right of the silk dress. If all the other initial conditions remain in effect, which one of the following must be false?",
      "options": [
        "A) The linen dress is on hanger 1.",
        "B) The gauze dress is on hanger 2.",
        "C) The wool dress is on hanger 4.",
        "D) The silk dress is on hanger 5.",
        "E) The polyester dress is on hanger 6."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m))) ::: (A)",
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Yolanda, m))) ::: (B)",
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Xena, m))) ::: (C)",
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Wim, m))) ::: (D)",
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Zane, m))) ::: (E)"
      ],
      "perplexity": [
        1.0135418176651,
        1.1036810874938965
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "hangers = EnumSort([hanger1, hanger2, hanger3, hanger4, hanger5, hanger6])",
        "dresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])",
        "on = Function([hangers, dresses] -> [bool])"
      ],
      "constraints": [
        "ForAll([h:hangers, d:dresses], And(on(h, d), on(h, d) == on(hanger1, d)))",
        "And(on(hanger1, gauze), on(hanger2, polyester))",
        "Or(on(hanger1, rayon), on(hanger6, rayon))",
        "Or(on(hanger3, wool), on(hanger3, silk))",
        "on(hanger4, linen) == on(hanger4, silk)",
        "on(hanger5, linen) == on(hanger5, silk)"
      ],
      "options": [
        "is_unsat(on(hanger1, linen))",
        "is_unsat(on(hanger2, gauze))",
        "is_unsat(on(hanger4, wool))",
        "is_unsat(on(hanger5, silk))",
        "is_unsat(on(hanger6, polyester))"
      ],
      "perplexity": 1.2332051992416382
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following could be an accurate matching of the four songs performed at the festival with the instruments on which they are performed, listed in order from the first song performed to the last?",
      "options": [
        "A) \"Night's All Right\": guitar;\" Question Man\": keyboard; \"Sammy\": guitar;\" Rhino Rock\": flute",
        "B) \"Question Man\": guitar;\" Rhino Rock\": harmonica; \"Sammy\": keyboard;\" Night's All Right\": flute",
        "C) \"Rhino Rock\": flute;\" Question Man\": keyboard; \"Night's All Right\": harmonica;\" Sammy\": guitar",
        "D) \"Sammy\": harmonica;\" Night's All Right\": guitar; \"Question Man\": keyboard;\" Rhino Rock\": flute",
        "E) \"Sammy\": harmonica;\" Rhino Rock\": guitar; \"Question Man\": flute;\" Night's All Right\": keyboard"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "- technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "- machines = EnumSort([radios, televisions, VCRs])",
        "- repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "- ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1) ::: each technician repairs machines of at least one of the following three types",
        "- And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3) ::: Xena and exactly three other technicians repair radios",
        "- And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs)) ::: Yolanda repairs both televisions and VCRs",
        "- ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m)))) ::: Stacy does not repair any type of machine that Yolanda repairs",
        "- Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m)) ::: Zane repairs more types of machines than Yolanda repairs",
        "- ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m)))) ::: Wim does not repair any type of machine that Stacy repairs",
        "- Count([m:machines], repairs(Urma, m)) == 2 ::: Urma repairs exactly two types of machines"
      ],
      "options": [
        "- is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m))) ::: (A)",
        "- is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m))) ::: (B)",
        "- is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m))) ::: (C)",
        "- is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m))) ::: (D)",
        "- is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m))) ::: (E)"
      ],
      "perplexity": [
        1.0177290439605713,
        1.0982805490493774
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "songs = EnumSort([night, question, rhino, sammy])",
        "instruments = EnumSort([flute, guitar, harmonica, keyboard])",
        "performed = Function([songs] -> [instruments])"
      ],
      "constraints": [
        "ForAll([s:songs], And(1 <= performed(s), performed(s) <= 4))",
        "Distinct([s:songs], performed(s))",
        "Not(performed(night) == flute)",
        "Implies(performed(sammy) == keyboard, performed(rhino) == harmonica)",
        "Implies(performed(question) == keyboard, performed(night) == flute)",
        "And(performed(sammy) == keyboard, performed(night) == performed(rhino))",
        "And(performed(rhino) < performed(sammy), performed(sammy) < performed(night))"
      ],
      "options": [
        "is_accurate_list(performed(night))",
        "is_accurate_list(performed(question))",
        "is_accurate_list(performed(rhino))",
        "is_accurate_list(performed(sammy))",
        "is_accurate_list(performed(night))",
        "is_accurate_list(performed(question))",
        "is_accurate_list(performed(rhino))",
        "is_accurate_list(performed(sammy))"
      ],
      "perplexity": 1.2660260200500488
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following could be true?",
      "options": [
        "A) \"Question Man\" immediately follows the song performed on the keyboard.",
        "B) \"Night's All Right\" immediately precedes the song performed on the keyboard.",
        "C) \"Question Man\" immediately precedes the song performed on the guitar.",
        "D) \"Rhino Rock\" immediately precedes the song performed on the harmonica.",
        "E) \"Sammy\" immediately precedes the song performed on the guitar."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0102957487106323,
        1.0873849391937256
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "songs = EnumSort([night, question, rhino, sammy])",
        "instruments = EnumSort([flute, guitar, harmonica, keyboard])",
        "performed = Function([songs, instruments] -> [bool])"
      ],
      "constraints": [
        "ForAll([s:songs], Count([i:instruments], performed(s, i))) == 1",
        "ForAll([s:songs], performed(s, flute))",
        "Implies(performed(sammy, keyboard), performed(rhino, harmonica))",
        "Implies(performed(question, keyboard), performed(night, flute))",
        "And(performed(rhino, i1), performed(sammy, i2), performed(night, i3), And(i2 == keyboard, i3 == keyboard))"
      ],
      "options": [
        "is_sat(performed(question, i1))",
        "is_sat(performed(night, i1))",
        "is_sat(performed(rhino, i1))",
        "is_sat(performed(sammy, i1))",
        "is_sat(performed(guitar, i1))"
      ],
      "perplexity": 1.3209755420684814
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following CANNOT be true of the song performed on the flute?",
      "options": [
        "A) It immediately precedes \"Question Man.\"",
        "B) It immediately follows \"Question Man.\"",
        "C) It immediately precedes \"Rhino Rock.\"",
        "D) It immediately follows \"Night's All Right.\"",
        "E) It immediately follows \"Sammy.\""
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0092023611068726,
        1.1083292961120605
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "songs = EnumSort([night, question, rhino, sammy])",
        "instruments = EnumSort([flute, guitar, harmonica, keyboard])",
        "performed = Function([songs] -> [instruments])"
      ],
      "constraints": [
        "ForAll([s:songs], Count([i:instruments], performed(s))) == 1",
        "ForAll([s:songs], performed(s))",
        "Not(performed(night) == flute)",
        "Implies(performed(sammy) == keyboard, performed(rhino) == harmonica)",
        "Implies(performed(question) == keyboard, performed(night) == flute)",
        "And(performed(rhino) == i, performed(keyboard) == j, performed(night) == k)"
      ],
      "options": [
        "is_unsat(And(performed(night) == flute, performed(night) == k))",
        "is_unsat(And(performed(night) == flute, performed(night) == i))",
        "is_unsat(And(performed(night) == flute, performed(night) == j))",
        "is_unsat(And(performed(night) == flute, performed(night) == k, performed(night) == i))",
        "is_unsat(And(performed(night) == flute, performed(night) == k, performed(night) == j))"
      ],
      "perplexity": 1.2474534511566162
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "If \"Rhino Rock\" is the second song performed at the festival, then which one of the following could be true?",
      "options": [
        "A) The first song performed is performed on the keyboard.",
        "B) The third song performed is performed on the guitar.",
        "C) The third song performed is performed on the flute.",
        "D) \"Night's All Right\" is performed on the guitar.",
        "E) \"Rhino Rock\" is performed on the guitar."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.003480076789856,
        1.1045149564743042
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "songs = EnumSort([night, question, rhino, sammy])",
        "instruments = EnumSort([flute, guitar, harmonica, keyboard])",
        "performed = Function([songs, instruments] -> [int])"
      ],
      "constraints": [
        "ForAll([s:songs], And(1 <= performed(s), performed(s) <= 4))",
        "Distinct([s:songs], performed(s))",
        "ForAll([s:songs], And(1 <= performed(s, i), performed(s, i) <= 4))",
        "Distinct([s:songs], performed(s, i))",
        "Not(performed(night, flute))",
        "Implies(performed(sammy, keyboard), performed(rhino, harmonica))",
        "Implies(performed(question, keyboard), performed(night, flute))",
        "And(performed(rhino, keyboard) < performed(sammy, keyboard), performed(sammy, keyboard) < performed(night, keyboard))"
      ],
      "options": [
        "is_sat(And(performed(night, keyboard), performed(night, 1)))",
        "is_sat(And(performed(night, guitar), performed(night, 3)))",
        "is_sat(And(performed(night, flute), performed(night, 3)))",
        "is_sat(And(performed(night, guitar), performed(rhino, 2)))",
        "is_sat(And(performed(rhino, guitar), performed(rhino, 2)))"
      ],
      "perplexity": 1.1601887941360474
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "If \"Question Man\" is the third song performed at the festival, then each of the following could be true EXCEPT:",
      "options": [
        "A) \"Question Man\" is performed on the guitar.",
        "B) \"Question Man\" is performed on the keyboard.",
        "C) \"Rhino Rock\" is performed on the guitar.",
        "D) \"Sammy\" is performed on the guitar.",
        "E) \"Sammy\" is performed on the harmonica."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0070070028305054,
        1.1410425901412964
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "songs = EnumSort([night, question, rhino, sammy])",
        "instruments = EnumSort([flute, guitar, harmonica, keyboard])",
        "performed = Function([songs] -> [instruments])"
      ],
      "constraints": [
        "ForAll([s:songs], Count([i:instruments], performed(s))) == 1",
        "ForAll([s:songs], performed(s))",
        "Not(performed(night) == flute)",
        "Implies(performed(sammy) == keyboard, performed(rhino) == harmonica)",
        "Implies(performed(question) == keyboard, performed(night) == flute)",
        "And(performed(rhino) == keyboard, performed(sammy) == next(night))",
        "performed(question) == third(songs)"
      ],
      "options": [
        "is_exception(issat(performed(question)))",
        "is_exception(isstat(performed(question)))",
        "is_exception(isstat(performed(question)))",
        "is_exception(isstat(performed(question)))",
        "is_exception(isstat(performed(question)))"
      ],
      "perplexity": 1.7192667722702026
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "Which one of the following could be a complete and accurate list of the members of the finance committee?",
      "options": [
        "A) Guzman, Hawking, Miyauchi, Wharton",
        "B) Guzman, Lepp, Zhu",
        "C) Hawking, Miyauchi, Zhu",
        "D) Hawking, Upchurch, Wharton, Zhu",
        "E) Miyauchi, Upchurch, Wharton"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0034852027893066,
        1.082544207572937
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "directors = EnumSort([guzman, hawking, lepp, miyauchi, upchurch, wharton, zhu])",
        "committees = EnumSort([finance, incentives])",
        "serves = Function([directors, committees] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:directors], Count([c:committees], serves(d, c))) == 1",
        "Implies(serves(guzman, finance), serves(hawking, incentives))",
        "Implies(serves(lepp, finance), And(serves(miyauchi, incentives), serves(upchurch, incentives)))",
        "serves(wharton, finance) != serves(zhu, finance)",
        "serves(upchurch, finance) != serves(guzman, finance)",
        "Implies(serves(zhu, finance), serves(hawking, finance))"
      ],
      "options": [
        "is_accurate_list(And(serves(guzman, finance), serves(hawking, finance), serves(miyauchi, finance), serves(wharton, finance)))",
        "is_accurate_list(And(serves(guzman, finance), serves(lepp, finance), serves(zhu, finance)))",
        "is_accurate_list(And(serves(hawking, finance), serves(miyauchi, finance), serves(zhu, finance)))",
        "is_accurate_list(And(serves(hawking, finance), serves(upchurch, finance), serves(wharton, finance), serves(zhu, finance)))",
        "is_accurate_list(And(serves(miyauchi, finance), serves(upchurch, finance), serves(wharton, finance)))"
      ],
      "perplexity": 1.0883708000183105
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "Which one of the following pairs of board members CANNOT both serve on the incentives committee?",
      "options": [
        "A) Guzman and Hawking",
        "B) Guzman and Wharton",
        "C) Hawking and Wharton",
        "D) Miyauchi and Upchurch",
        "E) Miyauchi and Wharton"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0112990140914917,
        1.0989388227462769
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "board = EnumSort([guzman, hawking, lepp, miyauchi, upchurch, wharton, zhu])",
        "committees = EnumSort([finance, incentives])",
        "serves = Function([board, committees] -> [bool])"
      ],
      "constraints": [
        "ForAll([b:board], Count([c:committees], serves(b, c))) == 1",
        "Implies(serves(guzman, finance), serves(hawking, incentives))",
        "Implies(serves(lepp, finance), And(serves(miyauchi, incentives), serves(upchurch, incentives)))",
        "serves(wharton, incentives) != serves(zhu, incentives)",
        "serves(upchurch, incentives) != serves(guzman, incentives)",
        "Implies(serves(zhu, finance), serves(hawking, finance))"
      ],
      "options": [
        "is_unsat(And(serves(guzman, incentives), serves(hawking, incentives)))",
        "is_unsat(And(serves(guzman, incentives), serves(wharton, incentives)))",
        "is_unsat(And(serves(hawking, incentives), serves(wharton, incentives)))",
        "is_unsat(And(serves(miyauchi, incentives), serves(upchurch, incentives)))",
        "is_unsat(And(serves(miyauchi, incentives), serves(wharton, incentives)))"
      ],
      "perplexity": 1.100590705871582
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "What is the maximum number of members on the finance committee?",
      "options": [
        "A) two",
        "B) three",
        "C) four",
        "D) five",
        "E) six"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "directors = EnumSort([Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, Zhu])",
        "committees = EnumSort([finance, incentives])",
        "serves = Function([directors, committees] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:directors], Exists([c:committees], serves(d, c)))",
        "Implies(serves(Guzman, finance), serves(Hawking, incentives))",
        "Implies(serves(Lepp, finance), And(serves(Miyauchi, incentives), serves(Upchurch, incentives)))",
        "Not(serves(Wharton, c1) And serves(Zhu, c1))",
        "Not(serves(Upchurch, c2) And serves(Guzman, c2))",
        "Implies(serves(Zhu, finance), serves(Hawking, finance))"
      ],
      "options": [
        "is_max_value(Count([d:directors], And(serves(d, finance)))) == 2",
        "is_max_value(Count([d:directors], And(serves(d, finance)))) == 3",
        "is_max_value(Count([d:directors], And(serves(d, finance)))) == 4",
        "is_max_value(Count([d:directors], And(serves(d, finance)))) == 5",
        "is_max_value(Count([d:directors], And(serves(d, finance)))) == 6"
      ],
      "perplexity": [
        1.0572521686553955,
        1.1150085926055908
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "directors = EnumSort([guzman, hawking, lepp, miyauchi, upchurch, wharton, zhu])",
        "committees = EnumSort([finance, incentives])",
        "serves = Function([directors] -> [committees])"
      ],
      "constraints": [
        "ForAll([d:directors], Count([c:committees], serves(d, c))) == 1",
        "Implies(serves(guzman, finance), serves(hawking, incentives))",
        "Implies(serves(lepp, finance), And(serves(miyauchi, incentives), serves(upchurch, incentives)))",
        "serves(wharton, finance) != serves(zhu, finance)",
        "serves(upchurch, finance) != serves(guzman, finance)",
        "Implies(serves(zhu, finance), serves(hawking, finance))"
      ],
      "options": [
        "is_sat(Count([d:directors], And(serves(d, finance), serves(d, incentives))))"
      ],
      "perplexity": 1.2761961221694946
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "If Miyauchi and Wharton both serve on the finance committee, then which one of the following could be true?",
      "options": [
        "A) Guzman and Lepp both serve on the finance committee.",
        "B) Guzman and Upchurch both serve on the incentives committee.",
        "C) Hawking and Zhu both serve on the finance committee.",
        "D) Lepp and Upchurch both serve on the incentives committee.",
        "E) Zhu and Upchurch both serve on the finance committee."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0093897581100464,
        1.100002646446228
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "directors = EnumSort([guzman, hawking, lepp, miyauchi, upchurch, wharton, zhu])",
        "committees = EnumSort([finance, incentives])",
        "serves = Function([directors, committees] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:directors], Count([c:committees], serves(d, c))) == 1",
        "Implies(serves(guzman, finance), serves(hawking, incentives))",
        "Implies(serves(lepp, finance), And(serves(miyauchi, incentives), serves(upchurch, incentives)))",
        "serves(wharton, finance) != serves(zhu, finance)",
        "serves(upchurch, finance) != serves(guzman, finance)",
        "Implies(serves(zhu, finance), serves(hawking, finance))"
      ],
      "options": [
        "is_sat(And(serves(guzman, finance), serves(lepp, finance)))",
        "is_sat(And(serves(guzman, incentives), serves(upchurch, incentives)))",
        "is_sat(And(serves(hawking, finance), serves(zhu, finance)))",
        "is_sat(And(serves(lepp, incentives), serves(upchurch, incentives)))",
        "is_sat(And(serves(zhu, finance), serves(upchurch, finance)))"
      ],
      "perplexity": 1.101301670074463
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "If Guzman serves on the incentives committee, then which one of the following must be true?",
      "options": [
        "A) Hawking serves on the finance committee.",
        "B) Lepp serves on the incentives committee.",
        "C) Miyauchi serves on the finance committee.",
        "D) Wharton serves on the incentives committee.",
        "E) Zhu serves on the finance committee."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0097143650054932,
        1.2309116125106812
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "directors = EnumSort([guzman, hawking, lepp, miyauchi, upchurch, wharton, zhu])",
        "committees = EnumSort([finance, incentives])",
        "serves = Function([directors, committees] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:directors], Count([c:committees], serves(d, c))) == 1",
        "Implies(serves(guzman, finance), serves(hawking, incentives))",
        "Implies(serves(lepp, finance), And(serves(miyauchi, incentives), serves(upchurch, incentives)))",
        "serves(wharton, finance) != serves(zhu, finance)",
        "serves(upchurch, incentives) != serves(guzman, incentives)",
        "Implies(serves(zhu, finance), serves(hawking, finance))"
      ],
      "options": [
        "is_valid(Implies(serves(guzman, incentives), serves(hawking, finance)))",
        "is_valid(Implies(serves(guzman, incentives), serves(lepp, incentives)))",
        "is_valid(Implies(serves(guzman, incentives), serves(miyauchi, finance)))",
        "is_valid(Implies(serves(guzman, incentives), serves(wharton, incentives)))",
        "is_valid(Implies(serves(guzman, incentives), serves(zhu, finance)))"
      ],
      "perplexity": 1.1056749820709229
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "Which one of the following could be the order in which four of the people are seated, with no one else seated between them, counting clockwise around the table?",
      "options": [
        "A) George, Peter, Karl, Fiona",
        "B) Harriet, Olivia, Ingrid, Karl",
        "C) Ingrid, Fiona, Peter, Manuel",
        "D) Olivia, Manuel, Karl, George",
        "E) Peter, Harriet, Karl, Fiona"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0091737508773804,
        1.0918501615524292
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "people = EnumSort([fiona, george, harriet, ingrid, karl, manuel, olivia, peter])",
        "sits = Function([people] -> [int])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits(p1) != sits(p2), And(3 == abs(sits(p1))), sits(p1) != sits(p2)))",
        "sits(fiona) == sits(george)",
        "ForAll([p:people], Not(And(sits(p) == sits(fiona), sits(p) == sits(harriet))))",
        "And(sits(ingrid) == sits(olivia))",
        "And(sits(ingrid) == sits(olivia))",
        "sits(ingrid) == sits(olivia)"
      ],
      "options": [
        "is_valid(And(sits(george) == 1, sits(peter) == 2, sits(karl) == 3, sits(fiona) == 4))",
        "is_valid(And(sits(harriet) == 1, sits(olivia) == 2, sits(ingrid) == 3, sits(karl) == 4))",
        "is_valid(And(sits(ingrid) == 1, sits(fiona) == 2, sits(peter) == 3, sits(manuel) == 4))",
        "is_valid(And(sits(olivia) == 1, sits(manuel) == 2, sits(karl) == 3, sits(george) == 4))",
        "is_valid(And(sits(peter) == 1, sits(harriet) == 2, sits(karl) == 3, sits(fiona) == 4))"
      ],
      "perplexity": 1.292731523513794
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If George does not sit immediately next to Harriet, then which one of the following could be the two people each of whom sits immediately next to Manuel?",
      "options": [
        "A) Fiona and Harriet",
        "B) Fiona and Peter",
        "C) George and Karl",
        "D) George and Peter",
        "E) Harriet and Peter"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0202250480651855,
        1.0885982513427734
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "people = EnumSort([fiona, george, harriet, ingrid, karl, manuel, olivia, peter])",
        "sits = Function([people] -> [people])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits(p1) == p2, sits(p2) == p1))",
        "ForAll([p1:people, p2:people], Implies(sits(p1) == p2, And(3 == abs(people, p1, p2), 3 == abs(people, p2, p1))))",
        "sits(fiona) == george",
        "ForAll([p:people], Not(And(sits(p) == fiona, sits(p) == harriet)))",
        "ForAll([p:people], Not(And(sits(p) == harriet, sits(p) == karl)))",
        "sits(ingrid) == olivia"
      ],
      "options": [
        "is_sat(And(sits(manuel) == fiona, sits(manuel) == harriet))",
        "is_sat(And(sits(manuel) == fiona, sits(manuel) == peter))",
        "is_sat(And(sits(manuel) == george, sits(manuel) == karl))",
        "is_sat(And(sits(manuel) == george, sits(manuel) == peter))",
        "is_sat(And(sits(manuel) == harriet, sits(manuel) == peter))"
      ],
      "perplexity": 1.2618154287338257
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Manuel sits immediately next to Olivia, then which one of the following people must sit immediately next to Fiona?",
      "options": [
        "A) Harriet",
        "B) Ingrid",
        "C) Karl",
        "D) Manuel",
        "E) Peter"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.004356026649475,
        1.1013175249099731
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "people = EnumSort([fiona, george, harriet, ingrid, karl, manuel, olivia, peter])",
        "sits = Function([people] -> [people])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits(p1) == p2, sits(p2) == p1))",
        "ForAll([p1:people, p2:people], Implies(sits(p1) == p2, And(3 == abs(sits(p1)))))",
        "sits(fiona) == george",
        "ForAll([p:people], Not(And(sits(p) == fiona, sits(p) == harriet)))",
        "ForAll([p:people], Not(And(sits(p) == fiona, sits(p) == karl)))",
        "sits(ingrid) == sits(olivia)",
        "sits(ingrid) == sits(olivia)"
      ],
      "options": [
        "is_sat(sits(harriet))",
        "is_sat(sits(ingrid))",
        "is_sat(sits(karl))",
        "is_sat(sits(manuel))",
        "is_sat(sits(peter))"
      ],
      "perplexity": 1.454083800315857
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "What is the minimum possible number of people sitting between Ingrid and Manuel, counting clockwise from Ingrid around the table?",
      "options": [
        "A) zero",
        "B) one",
        "C) two",
        "D) three",
        "E) four"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0120790004730225,
        1.0887060165405273
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "people = EnumSort([fiona, george, harriet, ingrid, karl, manuel, olivia, peter])",
        "sits = Function([people] -> [people])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits(p1) == p2, sits(p2) == p1))",
        "ForAll([p1:people, p2:people], Implies(sits(p1) == p2, And(3 == 3, 3 == 3)))",
        "sits(fiona) == george",
        "ForAll([p:people], Not(And(sits(p) == fiona, sits(p) == harriet)))",
        "ForAll([p:people], Not(And(sits(p) == harriet, sits(p) == karl)))",
        "sits(ingrid) == olivia",
        "sits(ingrid) == sits(olivia)"
      ],
      "options": [
        "is_sat(And(sits(ingrid) == sits(manuel), 3 == 3))",
        "is_sat(And(sits(ingrid) == sits(manuel), 1 == 1))",
        "is_sat(And(sits(ingrid) == sits(manuel), 2 == 2))",
        "is_sat(And(sits(ingrid) == sits(manuel), 3 == 3))",
        "is_sat(And(sits(ingrid) == sits(manuel), 4 == 4))"
      ],
      "perplexity": 1.3328285217285156
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Karl sits directly across from Ingrid, then each of the following people could sit immediately next to Olivia EXCEPT:",
      "options": [
        "A) Fiona",
        "B) George",
        "C) Harriet",
        "D) Manuel",
        "E) Peter"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0085583925247192,
        1.0968315601348877
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "people = EnumSort([fiona, george, harriet, ingrid, karl, manuel, olivia, peter])",
        "sits = Function([people] -> [people])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits(p1) == p2, sits(p2) == p1))",
        "ForAll([p1:people, p2:people], Implies(sits(p1) == p2, And(3 == abs(sits(p1)))))",
        "sits(fiona) == george",
        "Not(And(sits(harriet) == fiona, sits(harriet) == george))",
        "sits(harriet) != sits(karl)",
        "sits(ingrid) == sits(olivia)",
        "sits(ingrid) == sits(olivia)",
        "sits(ingrid) == sits(olivia)",
        "sits(karl) == sits(ingrid)"
      ],
      "options": [
        "is_unsat(sits(manuel))",
        "is_unsat(sits(peter))"
      ],
      "perplexity": 1.5029170513153076
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Karl sits directly across from Harriet, then what is the minimum possible number of people sitting between George and Karl, counting clockwise from George to Karl?",
      "options": [
        "A) zero",
        "B) one",
        "C) two",
        "D) three",
        "E) four"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])",
        "sits_between = Function([people, people] -> [int])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits_between(p1, p2) >= 0, sits_between(p1, p2) <= 7))",
        "sits_between(Fiona, George) == 3",
        "Not(Or(sits_between(Harriet, Fiona) == 0, sits_between(Harriet, Fiona) == 7) Or(sits_between(Harriet, Karl) == 0, sits_between(Harriet, Karl) == 7))",
        "sits_between(Ingrid, Olivia) == 1",
        "sits_between(Karl, Harriet) == 3"
      ],
      "options": [
        "is_min(sits_between(George, Karl) == 0)",
        "is_min(sits_between(George, Karl) == 1)",
        "is_min(sits_between(George, Karl) == 2)",
        "is_min(sits_between(George, Karl) == 3)",
        "is_min(sits_between(George, Karl) == 4)"
      ],
      "perplexity": [
        1.0895920991897583,
        1.1265941858291626
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "people = EnumSort([fiona, george, harriet, ingrid, karl, manuel, olivia, peter])",
        "sits = Function([people] -> [people])"
      ],
      "constraints": [
        "ForAll([p1:people, p2:people], And(sits(p1) == p2, sits(p2) == p1))",
        "ForAll([p1:people, p2:people], Implies(sits(p1) == p2, And(3 == abs(sits(p1)))))",
        "sits(fiona) == george",
        "sits(harriet) != fiona",
        "sits(harriet) != karl",
        "sits(ingrid) == olivia",
        "sits(olivia) == ingrid"
      ],
      "options": [
        "is_sat(And(sits(george) == karl, 2 == abs(sits(george))))",
        "is_sat(And(sits(george) == karl, 1 == abs(sits(george))))",
        "is_sat(And(sits(george) == karl, 0 == abs(sits(george))))",
        "is_sat(And(sits(george) == karl, 3 == abs(sits(george))))",
        "is_sat(And(sits(george) == karl, 4 == abs(sits(george))))"
      ],
      "perplexity": 1.3452242612838745
    }
  },
  {
    "id": 47,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following is an acceptable set of appointments of candidates to courts?",
      "options": [
        "A) appellate: Hamadi, Ortiz trial: Jefferson, Kurtz, Li, McDonnell, Perkins",
        "B) appellate: Hamadi, Li, Perkins trial: Jefferson, Kurtz, McDonnell, Ortiz",
        "C) appellate: Kurtz, Li, Perkins trial: Hamadi, Jefferson, McDonnell, Ortiz",
        "D) appellate: Li, McDonnell, Ortiz trial: Hamadi, Jefferson, Kurtz, Perkins",
        "E) appellate: Li, Perkins trial: Hamadi, Jefferson, Kurtz, McDonnell, Ortiz"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0055166482925415,
        1.1052991151809692
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "candidates = EnumSort([hamadi, jefferson, kurtz, li, mcdonnell, ortiz, perkins])",
        "courts = EnumSort([appellate, trial])",
        "appointments = Function([courts] -> [candidates])"
      ],
      "constraints": [
        "Count([c:candidates], appointments(appellate, c)) <= 3",
        "Count([c:candidates], appointments(trial, c)) <= 6",
        "appointments(appellate, li) != nil",
        "appointments(trial, kurtz) != nil",
        "appointments(appellate, hamadi) != appointments(appellate, perkins)"
      ],
      "options": [
        "is_sat(appointments(appellate, hamadi))",
        "is_sat(appointments(appellate, li))",
        "is_sat(appointments(appellate, perkins))",
        "is_sat(appointments(trial, jefferson))",
        "is_sat(appointments(trial, kurtz))"
      ],
      "perplexity": 1.2215156555175781
    }
  },
  {
    "id": 48,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Hamadi and McDonnell are both appointed to the appellate court.",
        "B) McDonnell and Ortiz are both appointed to the appellate court.",
        "C) Ortiz and Perkins are both appointed to the appellate court.",
        "D) Hamadi and Jefferson are both appointed to the trial court.",
        "E) Ortiz and Perkins are both appointed to the trial court."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0135893821716309,
        1.0893234014511108
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "candidates = EnumSort([hamadi, jefferson, kurtz, li, mcdonnell, ortiz, perkins])",
        "courts = EnumSort([appellate, trial])",
        "positions = Function([courts] -> [int])",
        "appointed = Function([candidates, courts] -> [bool])"
      ],
      "constraints": [
        "positions(appellate) == 3",
        "positions(trial) == 6",
        "appointed(li, appellate)",
        "appointed(kurtz, trial)",
        "ForAll([c:candidates], Implies(appointed(c, appellate), Not(appointed(perkins, appellate))))"
      ],
      "options": [
        "is_unsat(And(appointed(hamadi, appellate), appointed(mcdonnell, appellate)))",
        "is_unsat(And(appointed(mcdonnell, appellate), appointed(ortiz, appellate)))",
        "is_unsat(And(appointed(ortiz, appellate), appointed(perkins, appellate)))",
        "is_unsat(And(appointed(hamadi, trial), appointed(jefferson, trial)))",
        "is_unsat(And(appointed(ortiz, trial), appointed(perkins, trial)))"
      ],
      "perplexity": 1.0674690008163452
    }
  },
  {
    "id": 49,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Jefferson and McDonnell are both appointed to the appellate court.",
        "B) Jefferson and McDonnell are both appointed to the trial court.",
        "C) McDonnell and Ortiz are both appointed to the trial court.",
        "D) McDonnell and Perkins are both appointed to the appellate court.",
        "E) McDonnell and Perkins are both appointed to the trial court."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "candidates = EnumSort([Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, Perkins])",
        "courts = EnumSort([appellate, trial])",
        "appointments = Function([candidates] -> [courts])",
        "num_appointments_appellate = 3",
        "num_appointments_trial = 6"
      ],
      "constraints": [
        "ForAll([c:candidates], Exists([court: courts], appointments(c) == court))",
        "ForAll([c:candidates], appointments(c) == appellate | appointments(c) == trial)",
        "ForAll([c:candidates], appointments(c) = appellate)",
        "ForAll([c:candidates], appointments(c) = trial)",
        "ForAll([c:candidates], c == Perkins | appointments(c) != appointments(Perkins))"
      ],
      "options": [
        "is_unsat(And(appointments(Jefferson) == appellate, appointments(McDonnell) == appellate))",
        "is_unsat(And(appointments(Jefferson) == trial, appointments(McDonnell) == trial))",
        "is_unsat(And(appointments(McDonnell) == trial, appointments(Ortiz) == trial))",
        "is_unsat(And(appointments(McDonnell) == appellate, appointments(Perkins) == appellate))",
        "is_unsat(And(appointments(McDonnell) == trial, appointments(Perkins) == trial))"
      ],
      "perplexity": [
        1.0835260152816772,
        1.1188491582870483
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "candidates = EnumSort([hamadi, jefferson, kurtz, li, mcdonnell, ortiz, perkins])",
        "courts = EnumSort([appellate, trial])",
        "positions = Function([courts] -> [int])",
        "appointed = Function([candidates, courts] -> [bool])"
      ],
      "constraints": [
        "positions(appellate) == 3",
        "positions(trial) == 6",
        "appointed(li, appellate)",
        "appointed(kurtz, trial)",
        "ForAll([c:candidates], Implies(appointed(c, appellate), Not(appointed(perkins, appellate))))"
      ],
      "options": [
        "is_unsat(And(appointed(jefferson, appellate), appointed(mcdonnell, appellate)))",
        "is_unsat(And(appointed(jefferson, trial), appointed(mcdonnell, trial)))",
        "is_unsat(And(appointed(mcdonnell, trial), appointed(ortiz, trial)))",
        "is_unsat(And(appointed(mcdonnell, appellate), appointed(perkins, appellate)))",
        "is_unsat(And(appointed(mcdonnell, trial), appointed(perkins, trial)))"
      ],
      "perplexity": 1.0678354501724243
    }
  },
  {
    "id": 50,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "If Ortiz is appointed to the appellate court, which one of the following must be true?",
      "options": [
        "A) Hamadi is appointed to the appellate court.",
        "B) Jefferson is appointed to the appellate court.",
        "C) Jefferson is appointed to the trial court.",
        "D) Perkins is appointed to the appellate court.",
        "E) Perkins is appointed to the trial court."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0077909231185913,
        1.1466635465621948
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "candidates = EnumSort([hamadi, jefferson, kurtz, li, mcdonnell, ortiz, perkins])",
        "courts = EnumSort([appellate, trial])",
        "positions = Function([courts] -> [int])",
        "appointed = Function([candidates, courts] -> [bool])"
      ],
      "constraints": [
        "positions(appellate) == 3",
        "positions(trial) == 6",
        "appointed(li, appellate)",
        "appointed(kurtz, trial)",
        "Not(appointed(hamadi, c) == appointed(perkins, c))",
        "appointed(ortiz, appellate)"
      ],
      "options": [
        "is_sat(appointed(hamadi, appellate))",
        "is_sat(appointed(jefferson, appellate))",
        "is_sat(appointed(jefferson, trial))",
        "is_sat(appointed(perkins, appellate))",
        "is_sat(appointed(perkins, trial))"
      ],
      "perplexity": 1.1047362089157104
    }
  },
  {
    "id": 51,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following, if substituted for the condition that Hamadi cannot be appointed to the same court as Perkins, would have the same effect on the appointments of the seven candidates?",
      "options": [
        "A) Hamadi and Perkins cannot both be appointed to the appellate court.",
        "B) If Hamadi is not appointed to the trial court, then Perkins must be.",
        "C) If Perkins is appointed to the same court as Jefferson, then Hamadi cannot be.",
        "D) If Hamadi is appointed to the same court as Li, then Perkins must be appointed to the same court as Kurtz.",
        "E) No three of Hamadi, Kurtz, Li, and Perkins can be appointed to the same court as each other."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0118449926376343,
        1.1098045110702515
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "candidates = EnumSort([hamadi, jefferson, kurtz, li, mcdonnell, ortiz, perkins])",
        "courts = EnumSort([appellate, trial])",
        "appointed = Function([candidates] -> [courts])"
      ],
      "constraints": [
        "ForAll([c:candidates], Count([m:courts], appointed(c))) <= 3",
        "appointed(li) == appellate",
        "appointed(kurtz) == trial",
        "ForAll([c:candidates], c1) != c2",
        "appointed(hamadi) != appointed(perkins)"
      ],
      "options": [
        "is_sat(ForAll([c:candidates], c1))",
        "is_sat(Implies(Not(appointed(hamadi) == trial), appointed(perkins) == trial))",
        "is_sat(Implies(appointed(perkins) == appointed(jefferson), appointed(hamadi) != appointed(perkins)))",
        "is_sat(Implies(appointed(hamadi) == appointed(li), appointed(perkins) == appointed(kurtz)))",
        "is_sat(ForAll([c:candidates], Count([c1:candidates], c2)))"
      ],
      "perplexity": 1.4340766668319702
    }
  },
  {
    "id": 52,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "Which one of the following could be an accurate list of the members in the order in which they dive from the plane, from first to last?",
      "options": [
        "A) Larue, Trevino, Ohba, Zacny, Pei, Weiss",
        "B) Larue, Trevino, Pei, Zacny, Weiss, Ohba",
        "C) Weiss, Ohba, Trevino, Zacny, Pei, Larue",
        "D) Trevino, Weiss, Pei, Ohba, Zacny, Larue",
        "E) Trevino, Weiss, Zacny, Larue, Pei, Ohba"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0181483030319214,
        1.144248127937317
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "members = EnumSort([larue, ohba, pei, trevino, weiss, zacny])",
        "dive = Function([members] -> [int])"
      ],
      "constraints": [
        "ForAll([m:members], And(1 <= dive(m), dive(m) <= 6))",
        "ForAll([m:members], And(dive(m) < dive(trevino), dive(m) < dive(weiss)))",
        "ForAll([m:members], Or(dive(m) == 1, dive(m) == 6))",
        "ForAll([m:members], Implies(dive(m) == 6, Not(dive(weiss) == 6)))",
        "ForAll([m:members], Implies(dive(m) == 6, Not(dive(zacny) == 6)))",
        "ForAll([m:members], Implies(dive(pei) > dive(ohba), dive(pei) > dive(larue)))"
      ],
      "options": [
        "is_accurate_list(dive(larue))",
        "is_accurate_list(dive(trevino))",
        "is_accurate_list(dive(weiss))",
        "is_accurate_list(dive(ohba))",
        "is_accurate_list(dive(pei))",
        "is_accurate_list(dive(zacny))"
      ],
      "perplexity": 1.1739152669906616
    }
  },
  {
    "id": 54,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Larue dives from the plane last, then each of the following could be true EXCEPT:",
      "options": [
        "A) Trevino dives from the plane fourth.",
        "B) Weiss dives from the plane fourth.",
        "C) Ohba dives from the plane fifth.",
        "D) Pei dives from the plane fifth.",
        "E) Zacny dives from the plane fifth."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.012839436531067,
        1.1043707132339478
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "team = EnumSort([larue, ohba, pei, trevino, weiss, zacny])",
        "dives = Function([team] -> [int])"
      ],
      "constraints": [
        "ForAll([t:team], And(1 <= dives(t), dives(t) <= 6))",
        "ForAll([t:team], And(dives(t) < dives(w), dives(t) < dives(z)))",
        "Or(dives(larue) == 1, dives(larue) == 6)",
        "And(Not(dives(w) == 6), Not(dives(z) == 6))",
        "And(dives(p) > dives(o), dives(p) > dives(l))",
        "And(dives(t) < dives(w), dives(t) < dives(z))"
      ],
      "options": [
        "is_exception(issat(dives(trevino)))",
        "is_exception(isstat(dives(weiss)))",
        "is_exception(isstat(dives(ohba)))",
        "is_exception(isstat(dives(pei)))",
        "is_exception(isstat(dives(zacny)))"
      ],
      "perplexity": 1.4134669303894043
    }
  },
  {
    "id": 55,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Zacny dives from the plane immediately after Weiss, then which one of the following must be false?",
      "options": [
        "A) Larue dives from the plane first.",
        "B) Trevino dives from the plane third.",
        "C) Zacny dives from the plane third.",
        "D) Pei dives from the plane fourth.",
        "E) Zacny dives from the plane fourth."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0136630535125732,
        1.0967118740081787
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "team = EnumSort([larue, ohba, pei, trevino, weiss, zacny])",
        "dives = Function([team] -> [int])"
      ],
      "constraints": [
        "ForAll([t:team], And(1 <= dives(t), dives(t) <= 6))",
        "ForAll([t:team], And(dives(t) < dives(s)))",
        "And(dives(trevino) < dives(weiss), dives(weiss) < dives(zacny))",
        "Or(dives(larue) == 1, dives(larue) == 6)",
        "Not(And(dives(weiss) == 6, dives(zacny) == 6))",
        "ForAll([t:team], Implies(And(dives(t) > dives(ohba), dives(t) > dives(larue)), dives(t) > dives(pei)))",
        "And(dives(zacny) == dives(weiss))",
        "ForAll([t:team], Implies(dives(t) == 6, Not(And(dives(t) == 6, dives(t) == 5))))"
      ],
      "options": [
        "is_unsat(And(dives(larue) == 1, dives(larue) == 6))",
        "is_unsat(And(dives(trevino) == 3, dives(zacny) == 3))",
        "is_unsat(And(dives(zacny) == 3, dives(zacny) == 4))",
        "is_unsat(And(dives(pei) == 4, dives(pei) == 5))",
        "is_unsat(And(dives(zacny) == 4, dives(zacny) == 5))"
      ],
      "perplexity": 1.2592663764953613
    }
  },
  {
    "id": 56,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Trevino dives from the plane immediately after Larue, then each of the following could be true EXCEPT:",
      "options": [
        "A) Ohba dives from the plane third.",
        "B) Weiss dives from the plane third.",
        "C) Zacny dives from the plane third.",
        "D) Pei dives from the plane fourth.",
        "E) Weiss dives from the plane fourth."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.008785367012024,
        1.0875808000564575
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "team = EnumSort([larue, ohba, pei, trevino, weiss, zacny])",
        "dives = Function([team] -> [int])"
      ],
      "constraints": [
        "ForAll([t:team], And(1 <= dives(t), dives(t) <= 6))",
        "ForAll([t:team], And(dives(t) < dives(s)))",
        "And(dives(trevino) < dives(weiss), dives(larue) == 1)",
        "Or(dives(larue) == 1, dives(larue) == 6)",
        "Not(And(dives(weiss) == 6, dives(zacny) == 6))",
        "ForAll([t:team], Implies(And(dives(t) > dives(ohba), dives(t) > dives(larue)), dives(t) > dives(pei)))"
      ],
      "options": [
        "is_exception(issat(dives(ohba)))",
        "is_exception(isat(dives(weiss)))",
        "is_exception(isat(dives(zacny)))",
        "is_exception(isat(dives(pei)))",
        "is_exception(isat(dives(weiss)))"
      ],
      "perplexity": 1.3532640933990479
    }
  },
  {
    "id": 57,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following could be the order in which the vehicles are serviced, from Monday through Saturday?",
      "options": [
        "A) the hatchback, the pickup, the sedan, the limousine, the van, the roadster",
        "B) the pickup, the sedan, the van, the roadster, the hatchback, the limousine",
        "C) the pickup, the van, the sedan, the roadster, the limousine, the hatchback",
        "D) the van, the roadster, the pickup, the hatchback, the sedan, the limousine",
        "E) the van, the sedan, the pickup, the roadster, the hatchback, the limousine"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0065609216690063,
        1.0899622440338135
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday, saturday])",
        "serviced = Function([days, vehicles] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:days], Count([v:vehicles], serviced(d, v))) == 1",
        "Exists([d:days], And(d > monday, serviced(d, v) == true))",
        "And(serviced(wednesday, roadster), serviced(wednesday, roadster) < serviced(tuesday, hatchback), serviced(wednesday, roadster) > serviced(saturday, van))",
        "Or(And(serviced(d, pickup) == true, serviced(d1, van) == true, d == d1), And(serviced(d, pickup) == true, serviced(d1, sedan) == true, d == d1, Not(And(serviced(d, pickup) == true, serviced(d1, van) == true, d == d1))))",
        "Or(And(serviced(d, sedan) == true, serviced(d1, pickup) == true, d == d1), And(serviced(d, sedan) == true, serviced(d1, limousine) == true, d == d1, Not(And(serviced(d, sedan) == true, serviced(d1, pickup) == true, d == d1))))",
        "isinstance(d, days)"
      ],
      "options": [
        "is_valid(serviced(monday, hatchback))",
        "is_valid(serviced(monday, pickup))",
        "is_valid(serviced(monday, sedan))",
        "is_valid(serviced(monday, van))",
        "is_valid(serviced(monday, roadster))"
      ],
      "perplexity": 1.2791436910629272
    }
  },
  {
    "id": 58,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following CANNOT be the vehicle serviced on Thursday?",
      "options": [
        "A) the hatchback",
        "B) the limousine",
        "C) the pickup",
        "D) the sedan",
        "E) the van"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])",
        "serviced = Function([vehicles, days] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:days, v:vehicles], And(1 <= serviced(v, d), serviced(v, d) <= 1))",
        "ForSome([v:vehicles], Exists([d:days], And(d > hatchback, serviced(v, d))))",
        "serviced(roadster, d2) < serviced(hatchback, d3)",
        "Or(And(serviced(pickup, d1), serviced(van, d1 + 1)), And(serviced(pickup, d2), serviced(sedan, d2 + 1)))",
        "And(serviced(sedan, d1), Or(d1 < pickup, d1 < limousine))"
      ],
      "options": [
        "is_unsat(serviced(hatchback, Thursday))",
        "is_unsat(serviced(limousine, Thursday))",
        "is_unsat(serviced(pickup, Thursday))",
        "is_unsat(serviced(sedan, Thursday))",
        "is_unsat(serviced(van, Thursday))"
      ],
      "perplexity": [
        1.0946117639541626,
        1.1235926151275635
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday, saturday])",
        "serviced = Function([days, vehicles] -> [bool])"
      ],
      "constraints": [
        "ForAll([d:days], Count([v:vehicles], serviced(d, v))) == 1",
        "Exists([d:days], And(d > hatchback, serviced(d, v)))",
        "And(serviced(roadster, v) > serviced(van, v), serviced(roadster, v) < serviced(hatchback, v))",
        "Or(And(serviced(pickup, d1), serviced(van, d2), d1 == d2), And(serviced(pickup, d1), serviced(sedan, d2), d1 == d2), Not(And(serviced(pickup, d1), serviced(van, d2), d1 == d2) == And(serviced(pickup, d1), serviced(sedan, d2), d1 == d2)))",
        "Or(serviced(sedan, d) < serviced(pickup, d), serviced(sedan, d) < serviced(limousine, d), Not(serviced(sedan, d) < serviced(pickup, d)))",
        "serviced(sedan, d) != serviced(limousine, d)"
      ],
      "options": [
        "is_unsat(serviced(hatchback, thursday))",
        "is_unsat(serviced(limousine, thursday))",
        "is_unsat(serviced(pickup, thursday))",
        "is_unsat(serviced(sedan, thursday))",
        "is_unsat(serviced(van, thursday))"
      ],
      "perplexity": 1.2055271863937378
    }
  },
  {
    "id": 59,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If neither the pickup nor the limousine is serviced on Monday, then which one of the following must be true?",
      "options": [
        "A) The hatchback and the limousine are serviced on consecutive days.",
        "B) The hatchback and the sedan are serviced on consecutive days.",
        "C) The van is serviced on Monday.",
        "D) The limousine is serviced on Saturday.",
        "E) The pickup is serviced on Saturday."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0074281692504883,
        1.0885629653930664
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday, saturday])",
        "serviced = Function([vehicles, days] -> [bool])"
      ],
      "constraints": [
        "ForAll([v:vehicles], Count([d:days], serviced(v, d))) == 1",
        "Exists([v:vehicles], And(serviced(v, d) == true, d > hatchback))",
        "And(serviced(roadster, d) > serviced(van, d), serviced(roadster, d) < serviced(hatchback, d))",
        "Or(And(serviced(pickup, d1) == true, serviced(van, d1) == true, d1 == d2), And(serviced(pickup, d1) == true, serviced(sedan, d1) == true, d1 == d2), Not(And(serviced(pickup, d1) == true, serviced(van, d1) == true, d1 == d2) == And(serviced(pickup, d1) == true, serviced(sedan, d1) == true, d1 == d2)))",
        "Or(serviced(sedan, d) < serviced(pickup, d), serviced(sedan, d) < serviced(limousine, d))",
        "Not(And(serviced(pickup, monday) == true, serviced(limousine, monday) == true))"
      ],
      "options": [
        "is_valid(And(serviced(hatchback, d) == true, serviced(limousine, d) == true, d == d1))",
        "is_valid(And(serviced(hatchback, d) == true, serviced(sedan, d) == true, d == d1))",
        "is_valid(serviced(van, monday))",
        "is_valid(serviced(limousine, saturday))",
        "is_valid(serviced(pickup, saturday))"
      ],
      "perplexity": 1.2124348878860474
    }
  },
  {
    "id": 60,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the limousine is not serviced on Saturday, then each of the following could be true EXCEPT:",
      "options": [
        "A) The limousine is serviced on Monday.",
        "B) The roadster is serviced on Tuesday.",
        "C) The hatchback is serviced on Wednesday.",
        "D) The roadster is serviced on Wednesday.",
        "E) The sedan is serviced on Wednesday."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "candidates = EnumSort([Q, R, S, T, U])",
        "meetings = EnumSort([1, 2, 3])",
        "speaks = Function([meetings, candidates] -> [int])"
      ],
      "constraints": [
        "ForAll([m:meetings], Count([c: candidates], speaks(m, c)) >= 1) ::: each meeting has at least one speaker",
        "ForAll([m:meetings], Count([c: candidates], speaks(m, c)) <= 3) ::: each meeting has at most three speakers",
        "ForAll([m:meetings], Or(speaks(m, Q) == 1, speaks(m, R) == 1)) ::: Q speaks at meeting 1, and R speaks at meeting 1",
        "ForAll([m:meetings], Or(speaks(m, Q) == 1, speaks(m, R) == 1)) ::: R speaks at meeting 2",
        "ForAll([m:meetings], Or(speaks(m, Q) == 1, speaks(m, R) == 1)) ::: Q speaks at meeting 3",
        "ForAll([m:meetings], Or(speaks(m, R) == 2, speaks(m, S) == 2)) ::: R speaks at meeting 2, and S speaks at meeting 2",
        "ForAll([m:meetings], Or(speaks(m, T) == 2, speaks(m, U) == 2)) ::: T speaks at meeting 3, and U speaks at meeting 3"
      ],
      "options": [
        "is_valid(And(speaks(1, Q) == 1, speaks(2, R) == 2)) ::: (A)",
        "is_valid(And(speaks(1, Q) == 1, speaks(2, R) == 1)) ::: (B)",
        "is_valid(And(speaks(1, R) == 1, speaks(2, Q) == 2)) ::: (C)",
        "is_valid(And(speaks(1, Q) == 1, speaks(2, R) == 2, speaks(3, Q) == 2)) ::: (D)",
        "is_valid(And(speaks(1, Q) == 1, speaks(2, R) == 1, speaks(3, Q) == 2)) ::: (E)"
      ],
      "perplexity": [
        1.0089480876922607,
        1.2466834783554077
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday, saturday])",
        "serviced = Function([vehicles] -> [days])"
      ],
      "constraints": [
        "ForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))",
        "ForAll([v:vehicles], And(serviced(v) > serviced(hatchback), v != hatchback))",
        "serviced(roadster) > serviced(van) < serviced(hatchback)",
        "Or(And(serviced(pickup) == serviced(van)), And(serviced(pickup) == serviced(sedan)))",
        "Not(And(serviced(pickup) == serviced(van), And(serviced(pickup) == serviced(sedan))) != And(serviced(pickup) == serviced(sedan), And(serviced(pickup) == serviced(van))))",
        "Or(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine))",
        "Not(And(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)))",
        "serviced(limousine) != saturday"
      ],
      "options": [
        "is_exception(issat(serviced(limousine)))",
        "is_exception(isat(serviced(roadster)))",
        "is_exception(isat(serviced(hatchback)))",
        "is_exception(isat(serviced(roadster)))",
        "is_exception(isat(serviced(sedan)))"
      ],
      "perplexity": 1.431024193763733
    }
  },
  {
    "id": 61,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the sedan is serviced earlier in the week than the pickup, then which one of the following could be true?",
      "options": [
        "A) The limousine is serviced on Wednesday.",
        "B) The sedan is serviced on Wednesday.",
        "C) The van is serviced on Wednesday.",
        "D) The hatchback is serviced on Friday.",
        "E) The limousine is serviced on Saturday."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0077568292617798,
        1.094003438949585
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday, saturday])",
        "serviced = Function([vehicles] -> [days])"
      ],
      "constraints": [
        "ForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))",
        "ForAll([v:vehicles], And(serviced(v) > serviced(hatchback), v != hatchback))",
        "And(serviced(roadster) > serviced(van), serviced(roadster) < serviced(hatchback))",
        "Or(And(serviced(pickup) == serviced(van)), And(serviced(pickup) == serviced(sedan)))",
        "Not(And(serviced(pickup) == serviced(van), And(serviced(pickup) == serviced(sedan))))",
        "Or(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine))",
        "Not(And(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)))"
      ],
      "options": [
        "is_sat(serviced(limousine))",
        "is_sat(serviced(sedan))",
        "is_sat(serviced(van))",
        "is_sat(serviced(hatchback))",
        "is_sat(serviced(limousine))",
        "is_sat(serviced(sedan))",
        "is_sat(serviced(van))",
        "is_sat(serviced(hatchback))"
      ],
      "perplexity": 1.2466434240341187
    }
  },
  {
    "id": 62,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the limousine is serviced on Saturday, then which one of the following must be true?",
      "options": [
        "A) The pickup is serviced earlier in the week than the roadster.",
        "B) The pickup is serviced earlier in the week than the sedan.",
        "C) The sedan is serviced earlier in the week than the roadster.",
        "D) The hatchback and the limousine are serviced on consecutive days.",
        "E) The roadster and the hatchback are serviced on consecutive days."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0166746377944946,
        1.2255240678787231
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "vehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])",
        "days = EnumSort([monday, tuesday, wednesday, thursday, friday, saturday])",
        "serviced = Function([vehicles, days] -> [bool])"
      ],
      "constraints": [
        "ForAll([v:vehicles], Count([d:days], serviced(v, d))) == 1",
        "Exists([v:vehicles], And(serviced(v, d) == true, d > hatchback))",
        "And(serviced(roadster, d) > serviced(van, d), serviced(roadster, d) < serviced(hatchback, d))",
        "Or(And(serviced(pickup, d1) == true, serviced(van, d1) == true, d1 == d2), And(serviced(pickup, d1) == true, serviced(sedan, d1) == true, d1 == d2), Not(And(serviced(pickup, d1) == true, serviced(van, d1) == true, d1 == d2) == true))",
        "Or(serviced(sedan, d) < serviced(pickup, d), serviced(sedan, d) < serviced(limousine, d))",
        "serviced(limousine, saturday) == true"
      ],
      "options": [
        "is_valid(And(serviced(pickup, d) < serviced(roadster, d), d == monday))",
        "is_valid(And(serviced(pickup, d) < serviced(sedan, d), d == monday))",
        "is_valid(And(serviced(sedan, d) < serviced(roadster, d), d == monday))",
        "is_valid(And(serviced(hatchback, d) == serviced(limousine, d), d == monday))",
        "is_valid(And(serviced(roadster, d) == serviced(hatchback, d), d == monday))"
      ],
      "perplexity": 1.2152897119522095
    }
  },
  {
    "id": 70,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "Which one of the following could be the order, from first to last, in which the students perform?",
      "options": [
        "A) Ginny, Fernando, Hakim, Kevin, Juanita",
        "B) Ginny, Juanita, Kevin, Hakim, Fernando",
        "C) Ginny, Kevin, Hakim, Juanita, Fernando",
        "D) Kevin, Ginny, Juanita, Fernando, Hakim",
        "E) Kevin, Juanita, Fernando, Hakim, Ginny"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.017560601234436,
        1.157426357269287
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([fernando, ginnny, hakim, juanita, kevin])",
        "perform = Function([students] -> [int])"
      ],
      "constraints": [
        "ForAll([s:students], And(1 <= perform(s), perform(s) <= 5))",
        "Distinct([s:students], perform(s))",
        "perform(ginnny) < perform(fernando)",
        "perform(kevin) < perform(hakim) < perform(juanita)",
        "perform(hakim) == perform(fernando) == 1 == 2 == 3 == 4 == 5"
      ],
      "options": [
        "is_sat(And(perform(ginnny) == 1, perform(fernando) == 3, perform(hakim) == 4, perform(kevin) == 2, perform(juanita) == 5))",
        "is_sat(And(perform(juanita) == 1, perform(kevin) == 2, perform(hakim) == 4, perform(fernando) == 5, perform(ginnny) == 3))",
        "is_sat(And(perform(kevin) == 1, perform(ginnny) == 2, perform(hakim) == 4, perform(juanita) == 5, perform(fernando) == 3))",
        "is_sat(And(perform(kevin) == 1, perform(juanita) == 2, perform(fernando) == 5, perform(hakim) == 4, perform(ginnny) == 3))",
        "is_sat(And(perform(kevin) == 1, perform(juanita) == 2, perform(fernando) == 3, perform(hakim) == 4, perform(ginnny) == 5))"
      ],
      "perplexity": 1.1870263814926147
    }
  },
  {
    "id": 71,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "If Juanita performs earlier than Ginny, then which one of the following could be true?",
      "options": [
        "A) Fernando performs fourth.",
        "B) Ginny performs second.",
        "C) Hakim performs third.",
        "D) Juanita performs third.",
        "E) Kevin performs second."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "students = EnumSort([Fernando, Ginny, Hakim, Juanita, Kevin])",
        "performance_order = Function([students] -> [int])"
      ],
      "constraints": [
        "ForAll([i:students, j:students], Implies(i != j, performance_order(i) != performance_order(j)))",
        "performance_order(Ginny) < performance_order(Fernando)",
        "And(performance_order(Kevin) < performance_order(Hakim), performance_order(Kevin) < performance_order(Juanita))",
        "And(Or(performance_order(Hakim) = performance_order(Fernando) - 1, performance_order(Hakim) = performance_order(Fernando) + 1), performance_order(Hakim) != 0, performance_order(Fernando) != 5)"
      ],
      "options": [
        "is_possible(And(performance_order(Juanita) < performance_order(Ginny), performance_order(Fernando) == 4))",
        "is_possible(And(performance_order(Juanita) < performance_order(Ginny), performance_order(Ginny) == 2))",
        "is_possible(And(performance_order(Juanita) < performance_order(Ginny), performance_order(Hakim) == 3))",
        "is_possible(And(performance_order(Juanita) < performance_order(Ginny), performance_order(Juanita) == 3))",
        "is_possible(And(performance_order(Juanita) < performance_order(Ginny), performance_order(Kevin) == 2))"
      ],
      "perplexity": [
        1.0656921863555908,
        1.101770281791687
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([fernando, ginnny, hakim, juanita, kevin])",
        "perform = Function([students] -> [int])"
      ],
      "constraints": [
        "ForAll([s:students], And(1 <= perform(s), perform(s) <= 5))",
        "Distinct([s:students], perform(s))",
        "perform(ginnny) < perform(fernando)",
        "perform(kevin) < perform(hakim) < perform(juanita)",
        "perform(hakim) == perform(fernando) != 1",
        "perform(juanita) < perform(ginnny)"
      ],
      "options": [
        "is_sat(And(perform(fernando) == 4, perform(ginnny) == 2))",
        "is_sat(perform(ginnny))",
        "is_sat(perform(hakim))",
        "is_sat(perform(juanita))",
        "is_sat(perform(kevin))"
      ],
      "perplexity": 1.5005570650100708
    }
  },
  {
    "id": 72,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Fernando performs immediately before Juanita.",
        "B) Ginny performs immediately before Hakim.",
        "C) Hakim performs immediately before Ginny.",
        "D) Juanita performs immediately before Ginny.",
        "E) Kevin performs immediately before Hakim."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0121757984161377,
        1.087965726852417
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([fernando, ginnny, hakim, juanita, kevin])",
        "perform = Function([students] -> [int])"
      ],
      "constraints": [
        "ForAll([s:students], And(1 <= perform(s), perform(s) <= 5))",
        "Distinct([s:students], perform(s))",
        "perform(ginnny) < perform(fernando)",
        "perform(kevin) < perform(hakim) < perform(juanita)",
        "perform(hakim) == perform(fernando) == 1 == 2 == 3 == 4 == 5",
        "perform(hakim) == perform(fernando) == 2 == 3 == 4 == 5",
        "perform(hakim) == perform(fernando) == 3 == 4 == 5",
        "perform(hakim) == perform(fernando) == 4 == 5",
        "perform(hakim) == perform(fernando) == 5"
      ],
      "options": [
        "is_unsat(And(perform(fernando) == 1, perform(juanita) == 2))",
        "is_unsat(And(perform(ginnny) == 1, perform(hakim) == 2))",
        "is_unsat(And(perform(hakim) == 1, perform(ginnny) == 2))",
        "is_unsat(And(perform(juanita) == 1, perform(ginnny) == 2))",
        "is_unsat(And(perform(kevin) == 1, perform(hakim) == 2))"
      ],
      "perplexity": 1.3193583488464355
    }
  },
  {
    "id": 74,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "How many of the students are there any one of whom could perform fourth?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0045897960662842,
        1.084700584411621
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([fernando, ginny, hakim, juanita, kevin])",
        "perform = Function([students] -> [int])"
      ],
      "constraints": [
        "ForAll([s:students], And(1 <= perform(s), perform(s) <= 5))",
        "Distinct([s:students], perform(s))",
        "perform(ginny) < perform(fernando)",
        "perform(kevin) < perform(hakim) < perform(juanita)",
        "Or(perform(hakim) == perform(fernando))",
        "perform(hakim) == perform(fernando)"
      ],
      "options": [
        "is_sat(Count([s:students], perform(s)))",
        "is_sat(Count([s:students], perform(s)))",
        "is_sat(Count([s:students], perform(s)))",
        "is_sat(Count([s:students], perform(s)))",
        "is_sat(Count([s:students], perform(s)))"
      ],
      "perplexity": 1.4890990257263184
    }
  },
  {
    "id": 75,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "Which one of the following could be the order of the presentations, from first to sixth?",
      "options": [
        "A) stenciling, origami, needlework, textile making, pottery, woodworking",
        "B) stenciling, origami, pottery, woodworking, needlework, textile making",
        "C) stenciling, origami, textile making, woodworking, needlework, pottery",
        "D) textile making, origami, stenciling, woodworking, needlework, pottery",
        "E) textile making, stenciling, woodworking, needlework, pottery, origami"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0086567401885986,
        1.1029212474822998
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "teachers = EnumSort([jiang, kudrow, lanning])",
        "subjects = EnumSort([needlework, origami, pottery, stenciling, textile, woodworking])",
        "presents = Function([teachers, subjects] -> [int])"
      ],
      "constraints": [
        "ForAll([t:teachers], And(1 <= presents(t, s), presents(t, s) <= 6))",
        "ForAll([t:teachers], Count([s:subjects], presents(t, s)))",
        "ForAll([t:teachers], And(presents(jiang, needlework), presents(jiang, origami)))",
        "ForAll([t:teachers], And(presents(kudrow, pottery), presents(kudrow, stenciling), presents(kudrow, textile)))",
        "ForAll([t:teachers], presents(lanning, woodworking))",
        "ForAll([t:teachers], t1) != t2",
        "presents(kudrow, stenciling) < presents(jiang, origami)",
        "presents(kudrow, textile) < presents(lanning, woodworking)"
      ],
      "options": [
        "is_valid(presents(kudrow, stenciling))",
        "is_valid(presents(kudrow, pottery))",
        "is_valid(presents(kudrow, textile))",
        "is_valid(presents(lanning, woodworking))",
        "is_valid(presents(jiang, needlework))"
      ],
      "perplexity": 1.3554850816726685
    }
  },
  {
    "id": 77,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "If needlework is presented first, which one of the following could be true?",
      "options": [
        "A) Origami is presented sixth.",
        "B) Pottery is presented second.",
        "C) Stenciling is presented third.",
        "D) Textile making is presented fifth.",
        "E) Woodworking is presented third."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))"
      ],
      "perplexity": [
        1.0097627639770508,
        1.1004668474197388
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "teachers = EnumSort([jiang, kudrow, lanning])",
        "presentations = EnumSort([needlework, origami, pottery, stenciling, textile, woodworking])",
        "order = Function([teachers] -> [int])"
      ],
      "constraints": [
        "ForAll([t:teachers], And(1 <= order(t), order(t) <= 6))",
        "ForAll([t:teachers], And(order(t) < order(t2)))",
        "order(jiang) == 1",
        "order(kudrow) == 2",
        "order(lanning) == 3",
        "order(kudrow) == 4",
        "order(lanning) == 5",
        "order(jiang) == 6"
      ],
      "options": [
        "is_sat(order(kudrow))",
        "is_sat(order(lanning))",
        "is_sat(order(jiang))",
        "is_sat(order(kudrow))",
        "is_sat(order(lanning))"
      ],
      "perplexity": 1.5301414728164673
    }
  },
  {
    "id": 78,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "Jiang CANNOT give both",
      "options": [
        "A) the first and third presentations",
        "B) the first and fourth presentations",
        "C) the first and fifth presentations",
        "D) the second and third presentations",
        "E) the second and fourth presentations"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0057399272918701,
        1.1527918577194214
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "teachers = EnumSort([jiang, kudrow, lanning])",
        "presentations = EnumSort([needlework, origami, pottery, stenciling, textile, woodworking])",
        "gives = Function([teachers, presentations] -> [int])"
      ],
      "constraints": [
        "ForAll([t:teachers], And(1 <= gives(t, p), gives(t, p) <= 6))",
        "ForAll([t:teachers], Count([p:presentations], gives(t, p))) == 2",
        "ForAll([t:teachers], Distinct([p:presentations], gives(t, p)))",
        "ForAll([p:presentations], Implies(gives(kudrow, p) == gives(kudrow, p1), p != p1))",
        "gives(jiang, needlework) != 0",
        "gives(jiang, origami) != 0",
        "gives(kudrow, pottery) != 0",
        "gives(kudrow, stenciling) != 0",
        "gives(kudrow, textile) != 0",
        "gives(lanning, woodworking) != 0",
        "And(gives(kudrow, stenciling) < gives(jiang, origami), gives(kudrow, textile) < gives(lanning, woodworking))"
      ],
      "options": [
        "is_unsat(And(gives(jiang, 1) != 0, gives(jiang, 3) != 0))",
        "is_unsat(And(gives(jiang, 1) != 0, gives(jiang, 4) != 0))",
        "is_unsat(And(gives(jiang, 1) != 0, gives(jiang, 5) != 0))",
        "is_unsat(And(gives(jiang, 2) != 0, gives(jiang, 3) != 0))",
        "is_unsat(And(gives(jiang, 2) != 0, gives(jiang, 4) != 0))"
      ],
      "perplexity": 1.1445155143737793
    }
  },
  {
    "id": 80,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "Which one of the following CANNOT be the subject of the second presentation?",
      "options": [
        "A) needlework",
        "B) origami",
        "C) pottery",
        "D) textile making",
        "E) woodworking"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0170892477035522,
        1.1379821300506592
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "teachers = EnumSort([jiang, kudrow, lanning])",
        "subjects = EnumSort([needlework, origami, pottery, stenciling, textile, woodworking])",
        "presents = Function([teachers, subjects] -> [int])"
      ],
      "constraints": [
        "ForAll([t:teachers], And(1 <= presents(t, s), presents(t, s) <= 6))",
        "ForAll([t:teachers], Count([s:subjects], presents(t, s)))",
        "ForAll([t:teachers], Distinct([s:subjects], presents(t, s)))",
        "ForAll([s:subjects], presents(jiang, s))",
        "ForAll([s:subjects], Or(presents(kudrow, s) == pottery, presents(kudrow, s) == stenciling, presents(kudrow, s) == textile))",
        "ForAll([s:subjects], presents(lanning, s))",
        "And(presents(kudrow, s) == stenciling, presents(jiang, s) == origami)",
        "And(presents(kudrow, s) == textile, presents(lanning, s) == woodworking)"
      ],
      "options": [
        "is_unsat(presents(kudrow, 2))",
        "is_unsat(presents(jiang, 2))",
        "is_unsat(presents(lanning, 2))",
        "is_unsat(presents(kudrow, 2))",
        "is_unsat(presents(lanning, 2))"
      ],
      "perplexity": 1.3216558694839478
    }
  },
  {
    "id": 81,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "Which one of the following is a list of foods that could be the foods selected?",
      "options": [
        "A) F, N, O, T, V",
        "B) F, O, P, T, W",
        "C) G, N, P, T, W",
        "D) G, O, P, T, V",
        "E) G, O, P, V, W"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0222148895263672,
        1.0861365795135498
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "foods = EnumSort([f, g, n, o, p, t, v, w])",
        "hot = Function([foods] -> [bool])",
        "selected = Function([foods] -> [bool])"
      ],
      "constraints": [
        "ForAll([f:foods], selected(f))",
        "Count([f:foods], selected(f)) == 5",
        "ForAll([f:foods], hot(f))",
        "Or(selected(f), selected(g), selected(t))",
        "Or(selected(n), selected(o), selected(p))",
        "Or(selected(t), selected(v), selected(w))",
        "Implies(Or(selected(p), selected(w)), And(selected(p), selected(w)))",
        "Implies(selected(g), selected(o))",
        "Implies(selected(n), Not(selected(v)))"
      ],
      "options": [
        "is_sat(And(selected(f), selected(n), selected(o), selected(t), selected(v)))",
        "is_sat(And(selected(f), selected(o), selected(p), selected(t), selected(w)))",
        "is_sat(And(selected(g), selected(n), selected(p), selected(t), selected(w)))",
        "is_sat(And(selected(g), selected(o), selected(p), selected(t), selected(v)))",
        "is_sat(And(selected(g), selected(o), selected(p), selected(v), selected(w)))"
      ],
      "perplexity": 1.1313035488128662
    }
  },
  {
    "id": 82,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "Which one of the following is a pair of foods of which the organizer of the luncheon must select at least one?",
      "options": [
        "A) F, T",
        "B) G, O",
        "C) N, T",
        "D) O, P",
        "E) V, W"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.006333351135254,
        1.0911757946014404
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "foods = EnumSort([f, g, n, o, p, t, v, w])",
        "hot = Function([foods] -> [bool])"
      ],
      "constraints": [
        "hot(f) == true",
        "hot(g) == false",
        "hot(n) == true",
        "hot(o) == true",
        "hot(p) == true",
        "hot(t) == true",
        "hot(v) == false",
        "hot(w) == false",
        "Count([f:foods], selected(f)) == 5",
        "Count([f:foods], selected(f)) >= 1",
        "Count([f:foods], selected(f)) >= 1",
        "Count([f:foods], selected(f)) >= 1",
        "Implies(selected(p), selected(w))",
        "Implies(selected(g), selected(o))",
        "Implies(selected(n), Not(selected(v)))"
      ],
      "options": [
        "is_sat(And(selected(f), selected(t)))",
        "is_sat(And(selected(g), selected(o)))",
        "is_sat(And(selected(n), selected(t)))",
        "is_sat(And(selected(o), selected(p)))",
        "is_sat(And(selected(v), selected(w)))"
      ],
      "perplexity": 1.0980325937271118
    }
  },
  {
    "id": 83,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "If O is the only main course selected, then which one of the following CANNOT be selected?",
      "options": [
        "A) F",
        "B) G",
        "C) T",
        "D) V",
        "E) W"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0046591758728027,
        1.091495394706726
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "foods = EnumSort([f, g, n, o, p, t, v, w])",
        "hot = Function([foods] -> [bool])"
      ],
      "constraints": [
        "ForAll([f:foods], hot(f))",
        "hot(f)",
        "hot(n)",
        "hot(t)",
        "Count([f:foods], selected(f)) == 5",
        "Count([f:foods], hot(f))",
        "Implies(selected(p), selected(w))",
        "Implies(selected(g), selected(o))",
        "Implies(selected(n), Not(selected(v)))",
        "selected(o)"
      ],
      "options": [
        "is_unsat(selected(f))",
        "is_unsat(selected(g))",
        "is_unsat(selected(t))",
        "is_unsat(selected(v))",
        "is_unsat(selected(w))"
      ],
      "perplexity": 1.3442881107330322
    }
  },
  {
    "id": 85,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "If T and V are the only side dishes selected, then which one of the following is a pair of foods each of which must be selected?",
      "options": [
        "A) F and G",
        "B) F and N",
        "C) F and P",
        "D) N and O",
        "E) O and P"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0082253217697144,
        1.1641852855682373
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "foods = EnumSort([f, g, n, o, p, t, v, w])",
        "hot = Function([foods] -> [bool])"
      ],
      "constraints": [
        "hot(f) == true",
        "hot(g) == false",
        "hot(n) == true",
        "hot(o) == true",
        "hot(p) == true",
        "hot(t) == true",
        "hot(v) == false",
        "hot(w) == false",
        "Count([f:foods], hot(f)) >= 1",
        "Count([f:foods], hot(f)) >= 1",
        "Count([f:foods], hot(f)) >= 1",
        "ForAll([f:foods], Implies(Or(f == p, f == w), And(f == p, f == w)))",
        "ForAll([f:foods], Implies(f == g, f == o))",
        "ForAll([f:foods], Implies(f == n, Not(f == v)))",
        "Count([f:foods], f) == 5",
        "Count([f:foods], f) == 8",
        "Count([f:foods], f) == 2",
        "Count([f:foods], f) == 3",
        "Count([f:foods], f) == 3",
        "Count([f:foods], f) == 3"
      ],
      "options": [
        "is_sat(And(f == g, o == p))",
        "is_sat(And(f == n, o == p))",
        "is_sat(And(f == n, v == p))",
        "is_sat(And(f == o, p == w))",
        "is_sat(And(f == o, v == w))"
      ],
      "perplexity": 1.159936785697937
    }
  },
  {
    "id": 87,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "If Waterloo is the first program, then how many orders are there in which the remaining programs could be shown?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "programs = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])",
        "starts = Function([programs] -> [time])",
        "time = EnumSort([1, 1.5, 2, 2.5, 3])"
      ],
      "constraints": [
        "Count([p:programs], starts(p) == 1) == 1",
        "Count([p:programs], And(starts(p) == 0.5, p != Terry)) == 1",
        "starts(Roamin') < starts(Sundown)",
        "ForAll([p:programs], Implies(starts(Waterloo) < starts(Terry), starts(Waterloo) + 0.5 == starts(Terry)))"
      ],
      "options": [
        "is_sat(Exists([starts(Roamin')] = 2, And(starts(Sundown) = 2.5, starts(Terry) = 3))",
        "is_sat(Exists([starts(Roamin')] = 2, And(starts(Sundown) = 2.5, Exists([starts(Terry)] = 3, Not(starts(Terry) = 3))))",
        "is_sat(Exists([starts(Roamin')] = 2, Exists([starts(Sundown)] = 2.5, Exists([starts(Terry)] = 3, starts(Terry) = 3))))",
        "is_sat(Exists([starts(Roamin')] = 2, Exists([starts(Sundown)] = 2.5, Exists([starts(Terry)] = 3, starts(Terry) != 3))))"
      ],
      "perplexity": [
        1.2054495811462402,
        1.1104466915130615
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "programs = EnumSort([generations, roamin, sundown, terry, waterloo])",
        "starts = Function([programs] -> [bool])"
      ],
      "constraints": [
        "ForAll([p:programs], starts(p))",
        "starts(generations)",
        "starts(terry)",
        "starts(roamin)",
        "starts(sundown)",
        "starts(waterloo)",
        "starts(generations) != starts(terry)",
        "starts(roamin) < starts(sundown)",
        "Implies(starts(waterloo) < starts(terry), starts(waterloo) == starts(terry))",
        "Count([p:programs], starts(p)) == 5"
      ],
      "options": [
        "is_valid(And(starts(roamin), starts(sundown), starts(terry), starts(waterloo)))",
        "is_valid(And(starts(roamin), starts(sundown), starts(waterloo), starts(terry)))",
        "is_valid(And(starts(sundown), starts(roamin), starts(terry), starts(waterloo)))",
        "is_valid(And(starts(sundown), starts(roamin), starts(waterloo), starts(terry)))",
        "is_valid(And(starts(sundown), starts(waterloo), starts(roamin), starts(terry)))"
      ],
      "perplexity": 1.1602143049240112
    }
  },
  {
    "id": 90,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "If Generations is the third program, then which one of the following could be true?",
      "options": [
        "A) Roamin' is the second program.",
        "B) Roamin' is the fifth program.",
        "C) Sundown is the fourth program.",
        "D) Terry is the fourth program.",
        "E) Waterloo is the second program."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0165228843688965,
        1.0994030237197876
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "programs = EnumSort([generations, roamin, sundown, terry, waterloo])",
        "starts = Function([programs] -> [bool])"
      ],
      "constraints": [
        "ForAll([p:programs], And(starts(p), starts(p) == 1))",
        "ForAll([p:programs], Not(starts(p)))",
        "ForAll([p:programs], p1) != p2",
        "ForAll([p:programs], p1) != p4",
        "ForAll([p:programs], p1) != p5",
        "ForAll([p:programs], p2) != p3",
        "ForAll([p:programs], p2) != p4",
        "ForAll([p:programs], p2) != p5",
        "ForAll([p:programs], p3) != p4",
        "ForAll([p:programs], p3) != p5",
        "ForAll([p:programs, p2:programs], Implies(starts(p2) == starts(terry), starts(p) == starts(waterloo)))",
        "starts(generations) == 1",
        "starts(terry) == 0"
      ],
      "options": [
        "is_sat(And(starts(roamin) == 1, starts(sundown) == 0))",
        "is_sat(And(starts(roamin) == 0, starts(sundown) == 1))",
        "is_sat(And(starts(roamin) == 0, starts(sundown) == 0))",
        "is_sat(And(starts(roamin) == 1, starts(sundown) == 1))",
        "is_sat(And(starts(roamin) == 0, starts(sundown) == 1))"
      ],
      "perplexity": 1.232062578201294
    }
  },
  {
    "id": 91,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Sundown is shown immediately before Generations.",
        "B) Waterloo is shown immediately before Roamin'.",
        "C) Generations is shown immediately before Sundown.",
        "D) Roamin' is shown immediately before Terry.",
        "E) Terry is shown immediately before Waterloo."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0078530311584473,
        1.095647931098938
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "programs = EnumSort([generations, roamin, sundown, terry, waterloo])",
        "starts = Function([programs] -> [bool])"
      ],
      "constraints": [
        "ForAll([p:programs], And(starts(p), starts(p) == true))",
        "ForAll([p:programs], Implies(starts(p), starts(p) == true))",
        "starts(generations) == true",
        "starts(terry) == false",
        "starts(roamin) < starts(sundown)",
        "Implies(starts(waterloo) < starts(terry), starts(waterloo) == starts(terry))",
        "Count([p:programs], starts(p)) == 3"
      ],
      "options": [
        "is_unsat(starts(sundown))",
        "is_unsat(starts(waterloo))",
        "is_unsat(starts(generations))",
        "is_unsat(starts(roamin))",
        "is_unsat(starts(terry))"
      ],
      "perplexity": 1.3031814098358154
    }
  },
  {
    "id": 92,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "Which one of the following, if substituted for the constraint that Generations starts on the hour rather than the half hour, would have the same effect in determining the order in which the programs are shown?",
      "options": [
        "A) Generations is not shown immediately before Terry.",
        "B) Generations is either the first program or the fifth.",
        "C) Generations is neither the second program nor the fourth.",
        "D) If Generations is shown third, then Roamin' is shown first.",
        "E) If Generations is not shown first, then it is shown later than Terry."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet "
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0111274719238281,
        1.1427159309387207
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "programs = EnumSort([generations, roamin, sundown, terry, waterloo])",
        "starts = Function([programs] -> [bool])"
      ],
      "constraints": [
        "ForAll([p:programs], starts(p))",
        "starts(generations)",
        "starts(terry)",
        "starts(roamin) < starts(sundown)",
        "Implies(starts(waterloo) < starts(terry), starts(waterloo) == starts(terry))",
        "starts(generations) == true",
        "starts(terry) == true"
      ],
      "options": [
        "is_sat(Implies(starts(generations), starts(generations) == starts(terry)))",
        "is_sat(Implies(starts(generations), Or(starts(generations) == 1, starts(generations) == 5)))",
        "is_sat(Implies(starts(generations), And(starts(generations) != 2, starts(generations) != 4)))",
        "is_sat(Implies(starts(generations), Implies(starts(generations) == 3, starts(roamin) == 1)))",
        "is_sat(Implies(starts(generations), Implies(starts(generations) != 1, starts(generations) > starts(terry))))"
      ],
      "perplexity": 1.1649739742279053
    }
  },
  {
    "id": 93,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "Which one of the following could be a list of the majors of Manolo, Nadia, Owen, Peng, and Rana, respectively?",
      "options": [
        "A) geology, geology, journalism, journalism, history",
        "B) geology, geology, history, history, history",
        "C) history, geology, geology, journalism, history",
        "D) history, geology, journalism, geology, history",
        "E) history, history, geology, journalism, history"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0108717679977417,
        1.1071089506149292
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([manolo, nadia, owen, peng, rana])",
        "topics = EnumSort([friendship, liberty])",
        "speaks = Function([students] -> [topics])",
        "majors = EnumSort([geology, history, journalism])",
        "has = Function([students] -> [majors])"
      ],
      "constraints": [
        "Count([s:students], speaks(s, friendship)) == 2",
        "And(speaks(g, friendship), speaks(h, friendship))",
        "speaks(manolo, friendship)",
        "speaks(rana, liberty)",
        "Not(And(speaks(peng, m), speaks(rana, m)))",
        "has(nadia, m) == geology"
      ],
      "options": [
        "is_valid(And(has(manolo, m1), has(nadia, m2), has(owen, m3), has(peng, m4), has(rana, m5)))",
        "is_valid(And(has(manolo, m1), has(nadia, m2), has(owen, m3), has(peng, m4), has(rana, m5)))",
        "is_valid(And(has(manolo, m1), has(nadia, m2), has(owen, m3), has(peng, m4), has(rana, m5)))",
        "is_valid(And(has(manolo, m1), has(nadia, m2), has(owen, m3), has(peng, m4), has(rana, m5)))",
        "is_valid(And(has(manolo, m1), has(nadia, m2), has(owen, m3), has(peng, m4), has(rana, m5)))"
      ],
      "perplexity": 1.0838356018066406
    }
  },
  {
    "id": 94,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "If Peng speaks on friendship, then which one of the following could be true?",
      "options": [
        "A) Manolo is a history major.",
        "B) Nadia speaks on friendship.",
        "C) Owen speaks on friendship.",
        "D) Owen is a journalism major.",
        "E) Peng is a journalism major."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.002530574798584,
        1.090341329574585
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([manolo, nadia, owen, peng, rana])",
        "topics = EnumSort([friendship, liberty])",
        "majors = EnumSort([geology, history, journalism])",
        "speaks = Function([students] -> [topics])",
        "major = Function([students] -> [majors])"
      ],
      "constraints": [
        "Count([s:students], speaks(s, friendship)) == 2",
        "And(speaks(g, friendship), speaks(h, friendship))",
        "speaks(manolo, friendship)",
        "speaks(rana, liberty)",
        "Not(And(speaks(peng, friendship), major(peng) == geology))",
        "Not(And(speaks(rana, friendship), major(rana) == geology))",
        "major(nadia) == geology"
      ],
      "options": [
        "is_valid(And(major(manolo) == history, speaks(owen, friendship)))",
        "is_valid(And(major(nadia) == friendship, speaks(nadia, friendship)))",
        "is_valid(And(major(owen) == journalism, speaks(owen, friendship)))",
        "is_valid(And(major(peng) == journalism, speaks(peng, friendship)))",
        "is_valid(And(major(peng) == journalism, speaks(owen, friendship)))"
      ],
      "perplexity": 1.0929592847824097
    }
  },
  {
    "id": 95,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "If Owen is a geology major who speaks on friendship, then which one of the following must be true?",
      "options": [
        "A) Manolo is a history major.",
        "B) Nadia speaks on friendship.",
        "C) Peng speaks on friendship.",
        "D) Peng is a history major.",
        "E) Rana is a journalism major."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m == repairs(Xena, m))))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.012868046760559,
        1.0970051288604736
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([manolo, nadia, owen, peng, rana])",
        "topics = EnumSort([friendship, liberty])",
        "majors = EnumSort([geology, history, journalism])",
        "speaks = Function([students] -> [topics])",
        "major = Function([students] -> [majors])"
      ],
      "constraints": [
        "Count([s:students], speaks(s, friendship)) == 2",
        "And(And(major(s) == geology, major(s) == history), speaks(s, friendship))",
        "speaks(manolo, friendship)",
        "speaks(rana, liberty)",
        "Not(And(major(peng) == geology, major(peng) == geology))",
        "Not(And(major(rana) == geology, major(rana) == geology))",
        "major(nadia) == geology"
      ],
      "options": [
        "is_valid(And(major(manolo) == history, major(owen) == geology))",
        "is_valid(And(speaks(nadia, friendship), major(owen) == geology))",
        "is_valid(And(speaks(peng, friendship), major(owen) == geology))",
        "is_valid(And(major(peng) == history, major(owen) == geology))",
        "is_valid(major(rana))"
      ],
      "perplexity": 1.1823322772979736
    }
  },
  {
    "id": 96,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "If Nadia speaks on friendship, then which one of the following must be false?",
      "options": [
        "A) Manolo is a geology major.",
        "B) Manolo is a history major.",
        "C) Owen is a geology major.",
        "D) Peng is a history major.",
        "E) Rana is a history major."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0124212503433228,
        1.0883420705795288
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([manolo, nadia, owen, peng, rana])",
        "topics = EnumSort([friendship, liberty])",
        "majors = EnumSort([geology, history, journalism])",
        "speaks = Function([students] -> [topics])",
        "major = Function([students] -> [majors])"
      ],
      "constraints": [
        "Count([s:students], speaks(s, friendship)) == 2",
        "And(speaks(g, friendship), speaks(h, friendship))",
        "speaks(manolo, friendship)",
        "speaks(rana, liberty)",
        "Not(And(major(peng) == geology, major(rana) == geology))",
        "major(nadia) == geology"
      ],
      "options": [
        "is_unsat(And(major(manolo) == geology, major(manolo) == history))",
        "is_unsat(And(major(manolo) == geology, major(manolo) == journalism))",
        "is_unsat(And(major(manolo) == history, major(manolo) == journalism))",
        "is_unsat(And(major(owen) == geology, major(owen) == history))",
        "is_unsat(And(major(peng) == history, major(peng) == journalism))"
      ],
      "perplexity": 1.0763752460479736
    }
  },
  {
    "id": 97,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "Rana must be a journalism major if which one of the following is true?",
      "options": [
        "A) Manolo is a geology major and Peng is a history major.",
        "B) Owen is a geology major and Manolo is a history major.",
        "C) Owen is a geology major and Peng is a history major.",
        "D) Both Manolo and Nadia speak on friendship.",
        "E) Both Manolo and Peng speak on friendship."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0131983757019043,
        1.2204134464263916
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "students = EnumSort([manolo, nadia, owen, peng, rana])",
        "speeches = EnumSort([friendship, liberty])",
        "majors = EnumSort([geology, history, journalism])",
        "speaks = Function([students] -> [speeches])",
        "major = Function([students] -> [majors])"
      ],
      "constraints": [
        "Count([s:speeches], speaks(s))",
        "Count([s:speeches], speaks(s))",
        "And(speaks(s) == friendship, Or(major(s) == geology, major(s) == history))",
        "speaks(manolo) == friendship",
        "speaks(rana) == liberty",
        "Not(And(major(peng) == geology, major(rana) == geology))",
        "major(nadia) == geology"
      ],
      "options": [
        "is_valid(And(major(rana) == journalism, And(manolo, peng) == friendship))",
        "is_valid(And(major(rana) == journalism, And(owen, manolo) == friendship))",
        "is_valid(And(major(rana) == journalism, And(owen, peng) == friendship))",
        "is_valid(And(major(rana) == journalism, And(manolo, nadia) == friendship))",
        "is_valid(And(major(rana) == journalism, And(manolo, peng) == friendship))"
      ],
      "perplexity": 1.189502239227295
    }
  },
  {
    "id": 98,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following could be the order in which the professors lecture, from first to last?",
      "options": [
        "A) Powell, Young, Taylor, Shihab, Vaughan, Zabel, Wood",
        "B) Taylor, Powell, Shihab, Wood, Vaughan, Young, Zabel",
        "C) Taylor, Vaughan, Shihab, Wood, Powell, Young, Zabel",
        "D) Vaughan, Taylor, Shihab, Powell, Wood, Zabel, Young",
        "E) Young, Taylor, Shihab, Powell, Vaughan, Zabel, Wood"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "candidates = EnumSort([Q, R, S, T, U])",
        "meetings = EnumSort([1, 2, 3])",
        "attended = Function([candidates, meetings] -> [bool])",
        "ForAll([c: candidates], And(Count([m:meetings], attended(c, m)) >= 1, Count([m:meetings], attended(c, m)) <= 2))"
      ],
      "constraints": [
        "Count([c: candidates], Count([m:meetings], attended(c, m))) == 6",
        "Count([m:meetings], Or(And(attended(Q, m), attended(R, m)), And(attended(R, m), attended(S, m)))) == 4",
        "ForAll([m:meetings], Implies(attended(Q, m), Not(attended(R, m))))",
        "ForAll([m:meetings], Implies(attended(S, m), Or(attended(T, m), attended(U, m))))",
        "attended(T, 1) == False",
        "attended(U, 2) == False"
      ],
      "options": [
        "is_sat(Exists([c: candidates, m:meetings], And(attended(c, m), attended(c, m))))",
        "is_sat(Exists([c: candidates, m:meetings], And(attended(c, m), And(attended(c, m+1), attended(c, m+2)))))",
        "is_sat(Exists([c: candidates, m:meetings], And(attended(c, m), attended(c, m+1), attended(c, m+2))))",
        "is_sat(Exists([c: candidates, m:meetings], And(attended(c, m), attended(c, m+1), attended(c, m+2), attended(c, m+3))))",
        "is_sat(Exists([c: candidates, m:meetings], And(attended(c, m), attended(c, m+1), attended(c, m+2), attended(c, m+3), attended(c, m+4))))"
      ],
      "perplexity": [
        1.0128566026687622,
        1.073991060256958
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = Function([professors] -> [int])"
      ],
      "constraints": [
        "ForAll([p:professors], And(1 <= lectures(p), lectures(p) <= 7))",
        "Distinct([p:professors], lectures(p))",
        "And(lectures(powell) < lectures(wood), lectures(taylor) < lectures(shihab))",
        "And(lectures(vaughan) < lectures(zabel), lectures(shihab) <= 3)",
        "Not(lectures(young) == 7)",
        "Implies(lectures(powell) == 1, And(lectures(young) < lectures(vaughan), lectures(young) < lectures(powell)))"
      ],
      "options": [
        "is_valid(And(lectures(powell) == 1, lectures(young) == 2, lectures(taylor) == 3, lectures(shihab) == 4, lectures(vaughan) == 5, lectures(zabel) == 6, lectures(wood) == 7))",
        "is_valid(And(lectures(taylor) == 1, lectures(powell) == 2, lectures(shihab) == 3, lectures(wood) == 4, lectures(vaughan) == 5, lectures(young) == 6, lectures(zabel) == 7))",
        "is_valid(And(lectures(taylor) == 1, lectures(vaughan) == 2, lectures(shihab) == 3, lectures(wood) == 4, lectures(powell) == 5, lectures(zabel) == 6, lectures(young) == 7))",
        "is_valid(And(lectures(vaughan) == 1, lectures(taylor) == 2, lectures(shihab) == 3, lectures(powell) == 4, lectures(wood) == 5, lectures(zabel) == 6, lectures(young) == 7))",
        "is_valid(And(lectures(young) == 1, lectures(taylor) == 2, lectures(shihab) == 3, lectures(powell) == 4, lectures(vaughan) == 5, lectures(zabel) == 6, lectures(wood) == 7))"
      ],
      "perplexity": 1.033555030822754
    }
  },
  {
    "id": 99,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following could lecture first?",
      "options": [
        "A) Shihab",
        "B) Vaughan",
        "C) Wood",
        "D) Young",
        "E) Zabel"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "professors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])",
        "lectures = EnumSort([1, 2, 3, 4, 5, 6, 7])",
        "gives = Function([professors, lectures] -> [bool])"
      ],
      "constraints": [
        "ForAll([p:professors], Count([l:lectures], gives(p, l)) == 1)",
        "ForAll([l:lectures], And(gives(Powell, l), gives(Wood, l) <=> l < l))",
        "ForAll([l:lectures], And(gives(Taylor, l), gives(Shihab, l) <=> l < l))",
        "ForAll([l:lectures], And(gives(Vaughan, l), gives(Zabel, l) <=> l < l))",
        "ForAll([l:lectures], Or(l >= 4, l >= 3))",
        "Not(gives(Young, 7))",
        "Implies(gives(Powell, 1), And(gives(Young, l) == gives(Vaughan, l) <=> l < l))"
      ],
      "options": [
        "is_valid(Exists([l:lectures], And(gives(p, l), l == 1)))",
        "is_valid(Exists([l:lectures], And(gives(p, l), l == 1)))",
        "is_valid(Exists([l:lectures], And(gives(p, l), l == 1)))",
        "is_valid(Exists([l:lectures], And(gives(p, l), l == 1)))",
        "is_valid(Exists([l:lectures], And(gives(p, l), l == 1)))"
      ],
      "perplexity": [
        1.1079437732696533,
        1.0990124940872192
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = Function([professors] -> [int])"
      ],
      "constraints": [
        "ForAll([p:professors], And(1 <= lectures(p), lectures(p) <= 7))",
        "ForAll([p:professors], And(lectures(powell) < lectures(wood), lectures(taylor) < lectures(shihab)))",
        "ForAll([p:professors], And(lectures(vaughan) < lectures(zabel), lectures(shihab) <= 3))",
        "lectures(shihab) <= 3",
        "lectures(young) != 7",
        "Implies(lectures(powell) == 1, And(lectures(young) < lectures(vaughan), lectures(young) < lectures(powell)))"
      ],
      "options": [
        "is_valid(lectures(shihab))",
        "is_valid(lectures(vaughan))",
        "is_valid(lectures(wood))",
        "is_valid(lectures(young))",
        "is_valid(lectures(zabel))"
      ],
      "perplexity": 1.136134386062622
    }
  },
  {
    "id": 100,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following CANNOT given the second guest lecture?",
      "options": [
        "A) Powell",
        "B) Shihab",
        "C) Taylor",
        "D) Vaughan",
        "E) Wood"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "professors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])",
        "lectures = EnumSort([1, 2, 3, 4, 5, 6, 7])",
        "gives = Function([professors, lectures] -> [bool])"
      ],
      "constraints": [
        "Count([p:professors], And(p != Powell, p != Wood)) == 5",
        "ForAll([l:lectures], Count([p:professors], gives(p, l)) == 1)",
        "ForAll([l:lectures], And(lectures(l), gives(Powell, l) -> gives(Wood, l)))",
        "ForAll([l:lectures], And(lectures(l), gives(Taylor, l) -> gives(Shihab, l)))",
        "ForAll([l:lectures], And(lectures(l), gives(Vaughan, l) -> gives(Zabel, l)))",
        "And(lectures(3), gives(Shihab, 3))",
        "Not(And(lectures(7), gives(Young, 7)))",
        "And(lectures(1), Implies(And(lectures(1) -> gives(Powell, 1), lectures(1) -> gives(Young, 1)), gives(Powell, 1)))"
      ],
      "options": [
        "is_unsat(gives(Powell, 2))",
        "is_unsat(gives(Shihab, 2))",
        "is_unsat(gives(Taylor, 2))",
        "is_unsat(gives(Vaughan, 2))",
        "is_unsat(gives(Wood, 2))"
      ],
      "perplexity": [
        1.1094231605529785,
        1.0891497135162354
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])",
        "gives = Function([professors] -> [lectures])"
      ],
      "constraints": [
        "ForAll([p:professors], Count([l:lectures], gives(p, l))) == 1",
        "ForAll([l:lectures], Count([p:professors], gives(p, l))) == 1",
        "ForAll([p:professors, l:lectures], And(gives(p, l), gives(p, l1)))",
        "And(gives(powell, l1), gives(wood, l2))",
        "And(gives(taylor, l1), gives(shihab, l2))",
        "And(gives(vaughan, l1), gives(zabel, l2))",
        "Count([l:lectures], gives(shihab, l)) <= 3",
        "gives(young, l) != seventh",
        "Implies(gives(powell, first), And(gives(young, l1), gives(vaughan, l2)))"
      ],
      "options": [
        "is_unsat(gives(powell, second))",
        "is_unsat(gives(shihab, second))",
        "is_unsat(gives(taylor, second))",
        "is_unsat(gives(vaughan, second))",
        "is_unsat(gives(wood, second))"
      ],
      "perplexity": 1.1871258020401
    }
  },
  {
    "id": 101,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "If Shihab lectures second and Zabel lectures fourth, then which one of the following could be true?",
      "options": [
        "A) Powell lectures sixth",
        "B) Taylor lectures third",
        "C) Vaughan lectures fifth",
        "D) Wood lectures fifth",
        "E) Young lectures third"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.0079386234283447,
        1.1062607765197754
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])",
        "gives = Function([professors] -> [lectures])"
      ],
      "constraints": [
        "ForAll([p:professors], Count([l:lectures], gives(p, l))) == 1",
        "ForAll([l:lectures], Count([p:professors], gives(p, l))) == 1",
        "ForAll([p:professors, l:lectures], Implies(gives(p, l), l >= first))",
        "ForAll([p:professors, l:lectures], Implies(gives(p, l), l <= seventh))",
        "And(gives(powell, l1), gives(wood, l2))",
        "And(gives(taylor, l3), gives(shihab, l4))",
        "And(gives(vaughan, l5), gives(zabel, l6))",
        "l4 <= third",
        "l7 != seventh",
        "Implies(gives(powell, first), And(gives(young, l8), l8 < l5))"
      ],
      "options": [
        "is_sat(And(gives(powell, sixth), l7 == sixth))",
        "is_sat(And(gives(taylor, third), l4 == third))",
        "is_sat(And(gives(vaughan, fifth), l5 == fifth))",
        "is_sat(And(gives(wood, fifth), l5 == fifth))",
        "is_sat(And(gives(young, third), l4 == third))"
      ],
      "perplexity": 1.1783913373947144
    }
  },
  {
    "id": 102,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following CANNOT be the guest lecture that Vaughan gives?",
      "options": [
        "A) second",
        "B) third",
        "C) fourth",
        "D) sixth",
        "E) seventh"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "people = EnumSort([Vladimir, Wendy])",
        "meals = EnumSort([breakfast, lunch, dinner, snack])",
        "foods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])",
        "eats = Function([people, meals] -> [foods])"
      ],
      "constraints": [
        "ForAll([m:meals], eats(Vladimir, m) != eats(Wendy, m))",
        "ForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1)",
        "ForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet))",
        "ForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet))",
        "ForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet))",
        "ForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet))",
        "eats(Wendy, lunch) == omelet"
      ],
      "options": [
        "is_valid(Exists([m:meals], eats(Vladimir, m) == fish))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == macaroni))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == omelet))",
        "is_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs))"
      ],
      "perplexity": [
        1.007004976272583,
        1.090933084487915
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])",
        "gives = Function([professors] -> [lectures])"
      ],
      "constraints": [
        "ForAll([p:professors], Count([l:lectures], gives(p, l))) == 1",
        "ForAll([l:lectures], Implies(gives(powell, l), gives(powell, l) < gives(wood, l)))",
        "ForAll([l:lectures], Implies(gives(taylor, l), gives(taylor, l) < gives(shihab, l)))",
        "ForAll([l:lectures], Implies(gives(vaughan, l), gives(vaughan, l) < gives(zabel, l)))",
        "ForAll([l:lectures], Implies(gives(shihab, l), l <= third))",
        "Not(gives(young, seventh))",
        "Implies(gives(powell, first), And(gives(young, l) < gives(vaughan, l), l < seventh))"
      ],
      "options": [
        "is_unsat(gives(vaughan, second))",
        "is_unsat(gives(vaughan, third))",
        "is_unsat(gives(vaughan, fourth))",
        "is_unsat(gives(vaughan, sixth))",
        "is_unsat(gives(vaughan, seventh))"
      ],
      "perplexity": 1.1092156171798706
    }
  },
  {
    "id": 103,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "If Young lectures fourth and Taylor lectures first, then which one of the following must be true?",
      "options": [
        "A) Powell lectures no earlier than sixth",
        "B) Shihab lectures second.",
        "C) Vaughan lectures no later than third.",
        "D) Wood lectures seventh.",
        "E) Zabel lectures no earlier than sixth."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "candidates = EnumSort([Q, R, S, T, U])",
        "meetings = EnumSort([1, 2, 3])",
        "speaks = Function([meetings, candidates] -> [int])",
        "ForAll([m:meetings, c:candidates], And(1 <= speaks(m, c), speaks(m, c) <= 5))"
      ],
      "constraints": [
        "ForAll([m:meetings], Distinct([c:candidates], speaks(m, c)))",
        "ForAll([c:candidates], Exists([m:meetings], Or(speaks(m, c) == 1, speaks(m, c) == 2)))",
        "ForAll([c:candidates], Implies(Exists([m:meetings], speaks(m, c) == 5), Exists([m:meetings], speaks(m, c) == 1)))",
        "ForAll([c:candidates], Count([m:meetings], speaks(m, c) == 4) <= 1)",
        "And(speaks(2, R) == 2, speaks(3, R) == 1)"
      ],
      "options": [
        "is_accurate_list([speaks(1, R) == 4, speaks(1, R) == 5]) ::: (A)",
        "is_accurate_list([speaks(1, R) == 1, speaks(1, R) == 2, speaks(1, R) == 5]) ::: (B)",
        "is_accurate_list([speaks(1, R) == 2, speaks(1, R) == 3, speaks(1, R) == 5]) ::: (C)",
        "is_accurate_list([speaks(1, R) == 3, speaks(1, R) == 4, speaks(1, R) == 5]) ::: (D)",
        "is_accurate_list([speaks(1, R) == 2, speaks(1, R) == 3, speaks(1, R) == 4, speaks(1, R) == 5]) ::: (E)"
      ],
      "perplexity": [
        1.012009620666504,
        1.0288267135620117
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])",
        "gives = Function([professors] -> [lectures])"
      ],
      "constraints": [
        "ForAll([p:professors], Count([l:lectures], gives(p, l))) == 1",
        "ForAll([l:lectures], And(gives(powell, l) < gives(wood, l), gives(taylor, l) < gives(shihab, l), gives(vaughan, l) < gives(zabel, l)))",
        "ForAll([l:lectures], Implies(gives(shihab, l) >= 3, gives(shihab, l) <= 3))",
        "ForAll([l:lectures], Not(gives(young, l) == 7))",
        "ForAll([l:lectures], Implies(gives(powell, l) == first, And(gives(young, l) < gives(vaughan, l), gives(young, l) < gives(powell, l))))"
      ],
      "options": [
        "is_valid(And(gives(powell, sixth) >= 6, gives(powell, sixth) <= 6))",
        "is_valid(gives(shihab, second))",
        "is_valid(gives(vaughan, third))",
        "is_valid(gives(wood, seventh))",
        "is_valid(gives(zabel, sixth))"
      ],
      "perplexity": 1.2101727724075317
    }
  },
  {
    "id": 104,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "If Zabel lectures fourth, then which one of the following could be true?",
      "options": [
        "A) Powell lectures second.",
        "B) Powell lectures seventh.",
        "C) Wood lectures third.",
        "D) Young lectures second.",
        "E) Young lectures sixth."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "professors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])",
        "lectures = Function([professors] -> [int])",
        "ForAll([p:professors], And(1 <= lectures(p), lectures(p) <= 7))"
      ],
      "constraints": [
        "And(lectures(Powell) < lectures(Wood), lectures(Powell) != 1)",
        "And(lectures(Taylor) < lectures(Shihab), lectures(Taylor) != 7)",
        "And(lectures(Vaughan) < lectures(Zabel), lectures(Vaughan) != 2)",
        "lectures(Shihab) <= 3",
        "lectures(Young) != 7",
        "Implies(lectures(Powell) == 1, And(lectures(Young) < lectures(Vaughan), lectures(Young) != 7))",
        "lectures(Zabel) == 4"
      ],
      "options": [
        "is_consistent(And(lectures(Powell) == 2, lectures(Zabel) == 4))",
        "is_consistent(And(lectures(Powell) == 7, lectures(Zabel) == 4))",
        "is_consistent(And(lectures(Wood) == 3, lectures(Zabel) == 4))",
        "is_consistent(And(lectures(Young) == 2, lectures(Zabel) == 4))",
        "is_consistent(And(lectures(Young) == 6, lectures(Zabel) == 4))"
      ],
      "perplexity": [
        1.0598222017288208,
        1.0991648435592651
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "professors = EnumSort([powell, shihab, taylor, vaughan, wood, young, zabel])",
        "lectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])",
        "gives = Function([professors] -> [lectures])"
      ],
      "constraints": [
        "ForAll([p:professors], Count([l:lectures], gives(p, l))) == 1",
        "ForAll([l:lectures], And(gives(powell, l) < gives(wood, l), l != first))",
        "ForAll([l:lectures], And(gives(taylor, l) < gives(shihab, l), l != first))",
        "ForAll([l:lectures], And(gives(vaughan, l) < gives(zabel, l), l != first))",
        "ForAll([l:lectures], lte(gives(shihab, l), third))",
        "ForAll([l:lectures], Not(gives(young, seventh)))",
        "ForAll([l:lectures], Implies(gives(powell, first), And(gives(young, l) < gives(vaughan, l))))",
        "gives(zabel, fourth)"
      ],
      "options": [
        "is_sat(And(gives(powell, second), gives(wood, third)))",
        "is_sat(And(gives(powell, seventh), gives(wood, sixth)))",
        "is_sat(And(gives(powell, second), gives(wood, third), gives(young, second)))",
        "is_sat(And(gives(powell, seventh), gives(wood, sixth), gives(young, sixth)))",
        "is_sat(And(gives(powell, second), gives(wood, third), gives(young, sixth)))"
      ],
      "perplexity": 1.1380118131637573
    }
  },
  {
    "id": 105,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If aisle 1 contains Hobbies only, which one of the following could be true?",
      "options": [
        "A) Fantasy is located in aisle 3.",
        "B) Music is located in aisle 2.",
        "C) Puzzles is located in aisle 2.",
        "D) Reading is located in aisle 3.",
        "E) Science is located in aisle 3."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0028873682022095,
        1.0927841663360596
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "aisles = EnumSort([aisle1, aisle2, aisle3])",
        "sections = EnumSort([fantasy, hobbies, music, puzzles, reading, science])",
        "located = Function([sections] -> [aisles])"
      ],
      "constraints": [
        "ForAll([s:sections], Count([a:aisles], located(s))) == 1",
        "ForAll([a:aisles], Count([s:sections], located(s))) >= 1",
        "And(Or(located(fantasy) == a1, located(music) == a1), located(reading) == a1)",
        "And(located(fantasy) < located(music), located(fantasy) < located(puzzles))",
        "located(science) < located(puzzles)",
        "And(located(science) < located(hobbies), Not(located(science) < located(hobbies)))",
        "located(hobbies) == a1"
      ],
      "options": [
        "is_sat(located(fantasy))",
        "is_sat(located(music))",
        "is_sat(located(puzzles))",
        "is_sat(located(reading))",
        "is_sat(located(science))"
      ],
      "perplexity": 1.3649282455444336
    }
  },
  {
    "id": 106,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If aisle 3 contains Puzzles only, which one of the following must be true?",
      "options": [
        "A) Fantasy is located in aisle 1.",
        "B) Hobbies is located in aisle 1.",
        "C) Music is located in aisle 1.",
        "D) Reading is located in aisle 1.",
        "E) Science is located in aisle 2."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0032843351364136,
        1.090161681175232
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "aisles = EnumSort([aisle1, aisle2, aisle3])",
        "sections = EnumSort([fantasy, hobbies, music, puzzles, reading, science])",
        "located = Function([sections] -> [aisles])"
      ],
      "constraints": [
        "ForAll([s:sections], Count([a:aisles], located(s))) == 1",
        "ForAll([a:aisles], Count([s:sections], located(s))) >= 1",
        "And(Or(located(fantasy) == a, located(music) == a), located(reading) == a)",
        "And(located(fantasy) < located(music), located(fantasy) < located(puzzles))",
        "located(science) < located(puzzles)",
        "located(science) < located(hobbies)"
      ],
      "options": [
        "is_sat(located(fantasy))",
        "is_sat(located(hobbies))",
        "is_sat(located(music))",
        "is_sat(located(reading))",
        "is_sat(located(science))"
      ],
      "perplexity": 1.3636510372161865
    }
  },
  {
    "id": 107,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If each aisle contains exactly two of the six sections, then Science must be located in the same aisle as",
      "options": [
        "A) Fantasy",
        "B) Hobbies",
        "C) Music",
        "D) Puzzles",
        "E) Reading"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0048285722732544,
        1.0903295278549194
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "aisles = EnumSort([aisle1, aisle2, aisle3])",
        "sections = EnumSort([fantasy, hobbies, music, puzzles, reading, science])",
        "located = Function([aisles, sections] -> [bool])"
      ],
      "constraints": [
        "ForAll([a:aisles], Count([s:sections], located(a, s))) >= 1",
        "ForAll([s:sections], Count([a:aisles], located(a, s))) == 1",
        "ForAll([a:aisles], Count([s:sections], And(located(a, s), Or(s == fantasy, s == music)))) >= 1",
        "And(located(a, fantasy), located(a, music))",
        "And(located(a, fantasy), located(a, puzzles))",
        "And(located(a, science), located(a, puzzles))",
        "ForAll([a:aisles], Implies(located(a, science), Not(located(a, hobbies))))"
      ],
      "options": [
        "is_sat(And(located(aisle1, science), located(aisle1, fantasy)))",
        "is_sat(And(located(aisle1, science), located(aisle1, hobbies)))",
        "is_sat(And(located(aisle1, science), located(aisle1, music)))",
        "is_sat(And(located(aisle1, science), located(aisle1, puzzles)))",
        "is_sat(And(located(aisle1, science), located(aisle1, reading)))"
      ],
      "perplexity": 1.214245080947876
    }
  },
  {
    "id": 108,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "Which one of the following CANNOT be the list of the sections located in aisle 2?",
      "options": [
        "A) Hobbies, Music",
        "B) Music, Reading",
        "C) Music, Science",
        "D) Hobbies, Music, Science",
        "E) Music, Reading, Science"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "perplexity": [
        1.0030601024627686,
        25496952.0
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "aisles = EnumSort([aisle1, aisle2, aisle3])",
        "sections = EnumSort([fantasy, hobbies, music, puzzles, reading, science])",
        "located = Function([aisles, sections] -> [bool])"
      ],
      "constraints": [
        "ForAll([a:aisles], Count([s:sections], located(a, s))) >= 1",
        "Or(located(a, fantasy), Or(located(a, music), located(a, reading)))",
        "And(located(a, fantasy), Not(located(a, music)), Not(located(a, puzzles)))",
        "And(located(a, science), Not(located(a, puzzles)))",
        "Not(And(located(a, science), Not(located(a, hobbies))))"
      ],
      "options": [
        "is_unsat(And(located(aisle2, hobbies), located(aisle2, music)))",
        "is_unsat(And(located(aisle2, music), located(aisle2, reading)))",
        "is_unsat(And(located(aisle2, music), located(aisle2, science)))",
        "is_unsat(And(located(aisle2, hobbies), located(aisle2, music), located(aisle2, science)))",
        "is_unsat(And(located(aisle2, music), located(aisle2, reading), located(aisle2, science)))"
      ],
      "perplexity": 1.1321228742599487
    }
  },
  {
    "id": 109,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If aisle 2 contains Science only, then each of the following must be true EXCEPT:",
      "options": [
        "A) Fantasy is located in aisle 1.",
        "B) Hobbies is located in aisle 1.",
        "C) Music is located in aisle 3.",
        "D) Puzzles is located in aisle 3.",
        "E) Reading is located in aisle 1."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m))) ::: (A)",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m))) ::: (B)",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m))) ::: (C)",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m))) ::: (D)",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m))) ::: (E)"
      ],
      "perplexity": [
        1.0143401622772217,
        1.1264487504959106
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "aisles = EnumSort([aisle1, aisle2, aisle3])",
        "sections = EnumSort([fantasy, hobbies, music, puzzles, reading, science])",
        "located = Function([sections] -> [aisles])"
      ],
      "constraints": [
        "ForAll([s:sections], Count([a:aisles], located(s))) == 1",
        "ForAll([a:aisles], Count([s:sections], located(s))) >= 1",
        "And(Or(located(fantasy) == a1, located(music) == a1), located(reading) == a1)",
        "And(located(fantasy) < located(music), located(fantasy) < located(puzzles))",
        "located(science) < located(puzzles)",
        "Not(located(science) < located(hobbies))"
      ],
      "options": [
        "is_exception(issat(located(fantasy)))",
        "is_exception(issat(located(hobbies)))",
        "is_exception(issat(located(music)))",
        "is_exception(issat(located(puzzles)))",
        "is_exception(issat(located(reading)))"
      ],
      "perplexity": 1.4405560493469238
    }
  },
  {
    "id": 110,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "Which one of the following is an allowable way of designating subzones within the three zones?",
      "options": [
        "A) Z1: no designated subzones Z2: one housing subzone, two retail subzones Z3: one industrial subzone, one retail subzone",
        "B) Z1: one housing subzone, one industrial subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, one retail subzone",
        "C) Z1: one housing subzone, one retail subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, one retail subzone",
        "D) Z1: one industrial subzone Z2: three housing subzones Z3: three retail subzones",
        "E) Z1: one industrial subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, two retail subzones"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "zones = EnumSort([Z1, Z2, Z3])",
        "uses = EnumSort([housing, industrial, retail])",
        "subzones = Function([zones] -> [uses])",
        "ForAll([z:zones], Count([u:uses], subzones(z) == u) <= 3)"
      ],
      "constraints": [
        "subzones(Z1) != retail",
        "ForAll([z:zones], Count([h:subzones(z) == housing]) <= 2)",
        "ForAll([z:zones], Implies(subzones(z) == housing, subzones(z) != retail))",
        "ForAll([z:zones], Implies(Or(subzones(z) == housing, Count([u:uses], subzones(z) == retail) == 3), subzones(z) != industrial))"
      ],
      "options": [
        "is_valid(And(subzones(Z1) == NoValue, subzones(Z2) == housing:1, subzones(Z2) == retail:2, subzones(Z3) == industrial:1, subzones(Z3) == retail:1))",
        "is_valid(And(subzones(Z1) == housing:1, subzones(Z1) == industrial:1, subzones(Z2) == housing:2, subzones(Z2) == retail:1, subzones(Z3) == industrial:1, subzones(Z3) == retail:1))",
        "is_valid(And(subzones(Z1) == housing:1, subzones(Z1) == retail:1, subzones(Z2) == housing:2, subzones(Z2) == retail:1, subzones(Z3) == industrial:1, subzones(Z3) == retail:1))",
        "is_valid(And(subzones(Z1) == industrial:1, subzones(Z2) == housing:3, subzones(Z3) == retail:3))",
        "is_valid(And(subzones(Z1) == industrial:1, subzones(Z2) == housing:2, subzones(Z2) == retail:1, subzones(Z3) == industrial:1, subzones(Z3) == retail:2))"
      ],
      "perplexity": [
        1.0455427169799805,
        1.0830159187316895
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "zones = EnumSort([z1, z2, z3])",
        "subzones = EnumSort([housing, industrial, retail])",
        "designated = Function([zones, subzones] -> [bool])"
      ],
      "constraints": [
        "ForAll([z:zones], Count([s:subzones], designated(z, s))) <= 3",
        "Not(designated(z1, retail))",
        "ForAll([z:zones], Count([s:subzones], And(s == housing, designated(z, s)))) <= 2",
        "ForAll([z:zones], Implies(And(And(s == housing, designated(z, s)), designated(z, retail)), designated(z, retail) == false))",
        "ForAll([z:zones], Implies(And(And(s == housing, designated(z, s)), designated(z, retail)), designated(z, industrial) == false))"
      ],
      "options": [
        "is_valid(designated(z1, housing))",
        "is_valid(designated(z1, industrial))",
        "is_valid(designated(z1, retail))",
        "is_valid(designated(z2, housing))",
        "is_valid(designated(z2, industrial))",
        "is_valid(designated(z2, retail))",
        "is_valid(designated(z3, housing))",
        "is_valid(designated(z3, industrial))",
        "is_valid(designated(z3, retail))"
      ],
      "perplexity": 1.232639193534851
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Friday, then for which one of the following days must a tour of the Production division be scheduled?",
      "options": [
        "A) Monday",
        "B) Tuesday",
        "C) Wednesday",
        "D) Thursday",
        "E) Friday"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m)))",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0107471942901611,
        1.0930824279785156
      ]
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Which one of the following could be a complete and accurate list of the members of the crew?",
      "options": [
        "A) George, Helena, Inga, Kelly",
        "B) George, Helena, Kelly, Leanda",
        "C) Helena, Inga, Kelly, Olaf",
        "D) Helena, Inga, Maricita, Olaf",
        "E) George, Helena, Leanda, Maricita, Olaf"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "workers = EnumSort([George, Helena, Inga, Kelly, Leanda, Maricita, Olaf])",
        "tasks = EnumSort([framing, wallboarding, taping, sanding, priming])",
        "days = EnumSort([1, 2, 3])",
        "schedule = Function([days, workers] -> [tasks])"
      ],
      "constraints": [
        "ForAll([d:days], Exists([w:workers], schedule(d, w) != none))",
        "ForAll([d:days], Not(schedule(d, w1) == priming, schedule(d, w2) == taping))",
        "ForAll([d:days, w:workers], (schedule(d, w) != none) -> (schedule(d, w) == schedule(d, w)))",
        "ForAll([d1:days, d2:days, w1:workers, w2:workers], Implies(schedule(d1, w1) == schedule(d1, w2), d1 == d2))"
      ],
      "options": [
        "is_sat(ForAll([d:days], Exists([w:workers], And(schedule(d, w) == framing, schedule(d, w) == wallboarding, schedule(d, w) == taping, schedule(d, w) == sanding, schedule(d, w) == priming))))",
        "is_sat(ForAll([d:days], Exists([w:workers], And(schedule(d, w) == framing, schedule(d, w) == wallboarding, schedule(d, w) == taping, schedule(d, w) == sanding, schedule(d, w) != priming))))",
        "is_sat(ForAll([d:days], Exists([w:workers], And(schedule(d, w) == framing, schedule(d, w) != wallboarding, schedule(d, w) != taping, schedule(d, w) == sanding, schedule(d, w) == priming)))",
        "is_sat(ForAll([d:days], Exists([w:workers], And(schedule(d, w) == framing, schedule(d, w) != wallboarding, schedule(d, w) != taping, schedule(d, w) == sanding, schedule(d, w) != priming)))",
        "is_sat(ForAll([d:days], Exists([w:workers], And(schedule(d, w) == framing, schedule(d, w) != wallboarding, schedule(d, w) != taping, schedule(d, w) != sanding, schedule(d, w) == priming)))"
      ],
      "perplexity": [
        1.1104334592819214,
        1.0648356676101685
      ]
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "If the installation takes three days, and if the same two crew members work on the first and third days, then which one of the following could be the pair of crew members who work on those two days?",
      "options": [
        "A) Helena and Inga",
        "B) Inga and Kelly",
        "C) Inga and Leanda",
        "D) Kelly and Olaf",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])",
        "machines = EnumSort([radios, televisions, VCRs])",
        "repairs = Function([technicians, machines] -> [bool])"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m)))",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m)))"
      ],
      "perplexity": [
        1.0198795795440674,
        1.112273931503296
      ]
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Each of the following could be a complete and accurate list of the members of the crew EXCEPT:",
      "options": [
        "A) Helena, Inga, Kelly, Maricita",
        "B) Inga, Kelly, Leanda, Olaf",
        "C) George, Helena, Inga, Leanda",
        "D) Inga, Leanda, Maricita, Olaf",
        "E) Kelly, Leanda, Maricita, Olaf"
      ]
    },
    "answer": "A"
  },
  {
    "id": 21,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "If the installation takes three days, and if the sanding is done on the third day, then which one of the following could be a list of all the crew members who work on the second day?",
      "options": [
        "A) Inga",
        "B) Kelly",
        "C) Olaf",
        "D) George and Helena",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "technicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane]).",
        "machines = EnumSort([radios, televisions, VCRs]).",
        "repairs = Function([technicians, machines] -> [bool]).",
        "valves = EnumSort([G, H, I, K, L, N, O, P]).",
        "opened = Function([valves] -> [int])",
        "ForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))"
      ],
      "constraints": [
        "ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)",
        "And(repairs(Xena, radios), Count([t:technicians], And(t != Xena, repairs(t, radios))) == 3)",
        "And(repairs(Yolanda, televisions), repairs(Yolanda, VCRs))",
        "ForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m))))",
        "Count([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m))",
        "ForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m))))",
        "Count([m:machines], repairs(Urma, m)) == 2",
        "Distinct([v:valves], opened(v))",
        "And(opened(K) < opened(H), opened(P) < opened(H))",
        "And(opened(O) > opened(H), opened(O) < opened(L))",
        "opened(L) > opened(G)",
        "opened(N) < opened(H)",
        "opened(I) > opened(K)"
      ],
      "options": [
        "is_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m))) :- (A)",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m))) :- (B)",
        "is_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m))) :- (C)",
        "is_sat(ForAll([m:machines], repairs(Wim, m) == repairs(Xena, m))) :- (D)",
        "is_sat(ForAll([m:machines], repairs(Xena, m) == repairs(Yolanda, m))) :- (E)",
        "is_exception(is_sat(opened(H) == 5)) :- (A)",
        "is_exception(is_sat(opened(I) == 5)) :- (B)",
        "is_exception(is_sat(opened(K) == 5)) :- (C)"
      ],
      "perplexity": [
        1.0295647382736206,
        1.0883681774139404
      ]
    }
  }
]