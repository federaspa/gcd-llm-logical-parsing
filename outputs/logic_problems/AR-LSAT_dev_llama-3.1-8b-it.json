[
  {
    "id": 0,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?",
      "options": [
        "A) Fred, Juan",
        "B) Juan, Paul",
        "C) Juan, Marc, Paul",
        "D) Juan, Marc, Trisha",
        "E) Juan, Nita, Trisha"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "boys = EnumSort([Fred, Juan, Marc, Paul])",
        "girls = EnumSort([Nita, Rachel, Trisha])",
        "lockers = EnumSort([1, 2, 3, 4, 5])",
        "assigned = Function([boys, girls] -> [lockers])"
      ],
      "constraints": [
        "ForAll([l:lockers], Count([c:boys, c2:girls], And(assigned(c, l), assigned(c2, l))) + Count([c:boys], assigned(c, l)) + Count([c:girls], assigned(c, l)) == 1)"
      ],
      "options": [
        "is_valid(Exists([l:lockers], assigned(Fred, l) && assigned(Juan, l))) ::: (A)",
        "is_valid(Exists([l:lockers], assigned(Fred, l) && assigned(Rachel, l))) ::: (B)",
        "is_valid(Exists([l:lockers], assigned(Fred, l) && assigned(Trisha, l))) ::: (C)",
        "is_valid(Exists([l:lockers], assigned(Juan, l) && assigned(Nita, l))) ::: (D)",
        "is_valid(Exists([l:lockers], assigned(Juan, l) && assigned(Rachel, l))) ::: (E)",
        "is_valid(Exists([l:lockers], assigned(Juan, l) && assigned(Trisha, l))) ::: (F)",
        "is_valid(Exists([l:lockers], assigned(Marc, l) && assigned(Nita, l))) ::: (G)",
        "is_valid(Exists([l:lockers], assigned(Marc, l) && assigned(Rachel, l))) ::: (H)",
        "is_valid(Exists([l:lockers], assigned(Marc, l) && assigned(Trisha, l))) ::: (I)",
        "is_valid(Exists([l:lockers], assigned(Paul, l) && assigned(Nita, l))) ::: (J)",
        "is_valid(Exists([l:lockers], assigned(Paul, l) && assigned(Rachel, l))) ::: (K)",
        "is_valid(Exists([l:lockers], assigned(Paul, l) && assigned(Trisha, l))) ::: (L)"
      ],
      "perplexity": [
        1.0288422107696533,
        1.0921660661697388
      ]
    },
    "logic_problem_gcd": {
      "declarations": [
        "children = EnumSort([fred, juan, marc, paul, nita, rachel, trisha])",
        "lockers = EnumSort([locker1, locker2, locker3, locker4, locker5])",
        "assigned = Function([children] -> [lockers])",
        "shared = Function([lockers] -> [bool])"
      ],
      "constraints": [
        "ForAll([c:children], Count([l:lockers], assigned(c, l))) == 1",
        "ForAll([l:lockers], Implies(shared(l), And(assigned(boy, l), assigned(girl, l))))",
        "ForAll([l:lockers], Implies(shared(l), Not(assigned(juan, l))))",
        "ForAll([l:lockers], Implies(shared(l), Not(assigned(rachel, l))))",
        "ForAll([l:lockers], Implies(shared(l), Not(assigned(nita, l) == assigned(trisha, l))))",
        "assigned(fred, locker3)",
        "Count([l:lockers], shared(l)) == 2"
      ],
      "options": [
        "is_accurate_list(And(assigned(juan, locker1), assigned(nita, locker1)))",
        "is_accurate_list(And(assigned(juan, locker2), assigned(paul, locker2)))",
        "is_accurate_list(And(assigned(juan, locker1), assigned(marc, locker1), assigned(paul, locker1)))",
        "is_accurate_list(And(assigned(juan, locker1), assigned(marc, locker1), assigned(trisha, locker1)))",
        "is_accurate_list(And(assigned(juan, locker1), assigned(nita, locker1), assigned(trisha, locker1)))"
      ],
      "perplexity": 1.2294089794158936
    }
  }
]