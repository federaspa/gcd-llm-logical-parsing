{
  "0": {
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "Bonnie performs in school talent shows often.",
    "logic_predicates": [
      "Perform(x) ::: x performs in school talent shows often.",
      "Attend(x) ::: x attends school events.",
      "Engaged(x) ::: x is very engaged with school events.",
      "Inactive(x) ::: x is inactive and disinterested member of their community.",
      "Chaperone(x) ::: x chaperones high school dances.",
      "Student(x) ::: x is a student who attends the school.",
      "Wish(x) ::: x wishes to further their academic careers and educational opportunities.",
      "Young(x) ::: x is a young child.",
      "Teenager(x) ::: x is a teenager.",
      "Further(x, y) ::: x further y."
    ]
  },
  "1": {
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "logic_predicates": [
      "Perform(x) ::: x performs in school talent shows often.",
      "Attend(x) ::: x attends school events.",
      "Engaged(x) ::: x is very engaged with school events.",
      "Inactive(x) ::: x is an inactive member of their community.",
      "Disinterested(x) ::: x is a disinterested member of their community.",
      "Chaperone(x) ::: x chaperones high school dances.",
      "Student(x) ::: x is a student who attends the school.",
      "Young(x) ::: x is a young child.",
      "Teenager(x) ::: x is a teenager.",
      "Wish(x) ::: x wishes to further their academic career and educational opportunities."
    ]
  },
  "2": {
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "logic_predicates": [
      "Perform(x) ::: x performs in school talent shows often.",
      "Attend(x) ::: x attends school events.",
      "Engaged(x) ::: x is very engaged with school events.",
      "Inactive(x) ::: x is an inactive member of their community.",
      "Disinterested(x) ::: x is a disinterested member of their community.",
      "Chaperone(x) ::: x chaperones high school dances.",
      "Student(x) ::: x is a student who attends the school.",
      "Wish(x) ::: x wishes to further their academic career and educational opportunities.",
      "Explanation:",
      "- Perform(x): x is a person who performs in school talent shows often.",
      "- Attend(x): x attends school events.",
      "- Engaged(x): x is very engaged with school events.",
      "- Inactive(x): x is an inactive member of their community.",
      "- Disinterested(x): x is a disinterested member of their community.",
      "- Chaperone(x): x chaperones high school dances.",
      "- Student(x): x is a student who attends the school.",
      "- Wish(x): x wishes to further their academic career and educational opportunities."
    ]
  },
  "3": {
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "James has lunch in the company.",
    "logic_predicates": [
      "ScheduleMeeting(x) ::: x schedules a meeting with their customers.",
      "AppearInCompany(x) ::: x appears in the company today.",
      "HaveLunchInCompany(x) ::: x has lunch in the company.",
      "HaveLunchAtHome(x) ::: x has lunch at home.",
      "WorkRemotely(x) ::: x works remotely from home.",
      "InOtherCountries(x) ::: x is in other countries.",
      "Manager(x) ::: x is a manager.",
      "James(x) ::: x is James.",
      "Explanation:",
      "- ScheduleMeeting(x): x is a person who schedules a meeting with their customers.",
      "- AppearInCompany(x): x is a person who appears in the company today.",
      "- HaveLunchInCompany(x): x is a person who has lunch in the company.",
      "- HaveLunchAtHome(x): x is a person who has lunch at home.",
      "- WorkRemotely(x): x is a person who works remotely from home.",
      "- InOtherCountries(x): x is a person who is in other countries.",
      "- Manager(x): x is a manager.",
      "- James(x): x is James, a specific person."
    ]
  },
  "4": {
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "James does not have lunch in the company.",
    "logic_predicates": [
      "Appear(x, y) ::: x appears in the company on day y.",
      "Schedule(x, y) ::: x schedules a meeting with their customers on day y.",
      "Employee(x) ::: x is an employee.",
      "Customer(x) ::: x is a customer.",
      "HaveLunch(x, y) ::: x has lunch in the company on day y.",
      "AtHome(x) ::: x has lunch at home.",
      "WorkRemotely(x) ::: x works remotely from home.",
      "InCountry(x) ::: x is in another country.",
      "Manager(x) ::: x is a manager.",
      "Explanation:",
      "- Appear(x, y): x is a person who appears in the company on day y.",
      "- Schedule(x, y): x is a person who schedules a meeting with their customers on day y.",
      "- Employee(x): x is an employee of the company.",
      "- Customer(x): x is a customer of the company.",
      "- HaveLunch(x, y): x has lunch in the company on day y.",
      "- AtHome(x): x has lunch at home.",
      "- WorkRemotely(x): x works remotely from home.",
      "- InCountry(x): x is in another country.",
      "- Manager(x): x is a manager in the company."
    ]
  },
  "5": {
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "logic_predicates": [
      "ScheduleMeeting(x) ::: x schedules a meeting with their customers.",
      "AppearInCompany(x) ::: x appears in the company today.",
      "HaveLunchInCompany(x) ::: x has lunch in the company.",
      "HaveLunchAtHome(x) ::: x has lunch at home.",
      "WorkRemotely(x) ::: x works remotely from home.",
      "InOtherCountries(x) ::: x is in other countries.",
      "Manager(x) ::: x is a manager.",
      "Employee(x) ::: x is an employee.",
      "Explanation:",
      "- ScheduleMeeting(x): x is an employee who schedules a meeting with their customers.",
      "- AppearInCompany(x): x is an employee who appears in the company today.",
      "- HaveLunchInCompany(x): x is an employee who has lunch in the company.",
      "- HaveLunchAtHome(x): x is an employee who has lunch at home.",
      "- WorkRemotely(x): x is an employee who works remotely from home.",
      "- InOtherCountries(x): x is an employee who is in other countries.",
      "- Manager(x): x is a manager.",
      "- Employee(x): x is an employee."
    ]
  },
  "6": {
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "There is an animal.",
    "logic_predicates": [
      "Animal(x) ::: x is an animal.",
      "InfectiousDisease(x) ::: x is an infectious disease.",
      "CausedBy(x, y) ::: x is caused by y.",
      "Virus(x) ::: x is a virus.",
      "OccurIn(x, y) ::: x can occur in y.",
      "Human(x) ::: x is a human.",
      "Mammal(x) ::: x is a mammal.",
      "Symptom(x, y) ::: x is a symptom of y.",
      "Feel(x, y) ::: x feels y.",
      "Get(x, y) ::: x gets y."
    ]
  },
  "7": {
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "No one gets flu.",
    "logic_predicates": [
      "InfectiousDisease(x) ::: x is an infectious disease.",
      "CausedBy(x, y) ::: x is caused by y.",
      "Virus(x) ::: x is a virus.",
      "OccurIn(x, y) ::: x occurs in y.",
      "Animal(x) ::: x is an animal.",
      "Human(x) ::: x is a human.",
      "Mammal(x) ::: x is a mammal.",
      "SymptomsOf(x, y) ::: x has symptoms of y.",
      "Feel(x, y) ::: x feels y.",
      "Get(x, y) ::: x gets y."
    ]
  },
  "8": {
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "Symptons of Monkeypox include coughing.",
    "logic_predicates": [
      "InfectiousDisease(x) ::: x is an infectious disease.",
      "CausedBy(x, y) ::: x is caused by y.",
      "Virus(x) ::: x is a virus.",
      "OccurIn(x, y) ::: x occurs in y.",
      "Animal(x) ::: x is an animal.",
      "Human(x) ::: x is a human.",
      "Mammal(x) ::: x is a mammal.",
      "Symptom(x, y) ::: x is a symptom of y.",
      "Fever(x) ::: x is fever.",
      "Headache(x) ::: x is headache.",
      "MusclePain(x) ::: x is muscle pain.",
      "Tiredness(x) ::: x is feeling tired.",
      "Coughing(x) ::: x is coughing.",
      "Get(x, y) ::: x gets y.",
      "Glu(x) ::: x is a glu.",
      "Explanation:",
      "- InfectiousDisease(x): x is an infectious disease.",
      "- CausedBy(x, y): x is caused by y, where x is the effect and y is the cause.",
      "- Virus(x): x is a virus.",
      "- OccurIn(x, y): x occurs in y, where x is the entity and y is the host.",
      "- Animal(x): x is an animal.",
      "- Human(x): x is a human.",
      "- Mammal(x): x is a mammal.",
      "- Symptom(x, y): x is a symptom of y, where x is the symptom and y is the disease.",
      "- Fever(x): x is fever.",
      "- Headache(x): x is headache.",
      "- MusclePain(x): x is muscle pain.",
      "- Tiredness(x): x is feeling tired.",
      "- Coughing(x): x is coughing.",
      "- Get(x, y): x gets y, where x is the entity and y is the condition.",
      "- Glu(x): x is a glu."
    ]
  },
  "9": {
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Ocellated wild turkey.",
    "logic_predicates": [
      "WildTurkey(x) ::: x is a wild turkey.",
      "EasternWildTurkey(x) ::: x is an Eastern wild turkey.",
      "OsceolaWildTurkey(x) ::: x is an Osceola wild turkey.",
      "GouldsWildTurkey(x) ::: x is a Gould's wild turkey.",
      "MerriamsWildTurkey(x) ::: x is a Merriam's wild turkey.",
      "RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey.",
      "OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey.",
      "NotEasternWildTurkey(x) ::: x is not an Eastern wild turkey.",
      "NotOsceolaWildTurkey(x) ::: x is not an Osceola wild turkey.",
      "NotGouldsWildTurkey(x) ::: x is not a Gould's wild turkey.",
      "NotMerriamsWildTurkey(x) ::: x is not a Merriam's wild turkey.",
      "NotRioGrandeWildTurkey(x) ::: x is not a Rio Grande wild turkey."
    ]
  },
  "10": {
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Eastern wild turkey.",
    "logic_predicates": [
      "WildTurkey(x) ::: x is a wild turkey.",
      "EasternWildTurkey(x) ::: x is an Eastern wild turkey.",
      "OsceolaWildTurkey(x) ::: x is an Osceola wild turkey.",
      "GouldsWildTurkey(x) ::: x is a Gould's wild turkey.",
      "MerriamsWildTurkey(x) ::: x is a Merriam's wild turkey.",
      "RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey.",
      "OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey.",
      "NotEasternWildTurkey(x) ::: x is not an Eastern wild turkey.",
      "NotOsceolaWildTurkey(x) ::: x is not an Osceola wild turkey.",
      "NotGouldsWildTurkey(x) ::: x is not a Gould's wild turkey.",
      "NotMerriamsWildTurkey(x) ::: x is not a Merriam's wild turkey.",
      "NotRioGrandeWildTurkey(x) ::: x is not a Rio Grande wild turkey.",
      "Tom(x) ::: x is named Tom."
    ]
  },
  "11": {
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Joey is a wild turkey.",
    "logic_predicates": [
      "WildTurkey(x) ::: x is a wild turkey.",
      "EasternWildTurkey(x) ::: x is an Eastern wild turkey.",
      "OsceolaWildTurkey(x) ::: x is an Osceola wild turkey.",
      "GouldsWildTurkey(x) ::: x is a Gould's wild turkey.",
      "MerriamsWildTurkey(x) ::: x is a Merriam's wild turkey.",
      "RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey.",
      "OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey.",
      "Tom(x) ::: x is named Tom."
    ]
  },
  "12": {
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is in the Top 10 list.",
    "logic_predicates": [
      "Created(x, y) ::: x created the game y.",
      "Top10Game(x) ::: x is a game in the Top 10 list.",
      "JapaneseCompany(x) ::: x is a Japanese game company.",
      "Sells(x, y) ::: x sells y copies.",
      "Selected(x) ::: x is selected into the Top 10 list."
    ]
  },
  "13": {
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "FIFA 22 is made by a Japanese video game company.",
    "logic_predicates": [
      "Created(x, y) ::: x created the game y.",
      "Top10Game(x) ::: x is a game in the Top 10 list.",
      "JapaneseCompany(x) ::: x is a Japanese game company.",
      "Sells(x, y) ::: x sells y copies.",
      "Selected(x) ::: x is selected into the Top 10 list."
    ]
  },
  "14": {
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is not in the Top 10 list.",
    "logic_predicates": [
      "Created(x, y) ::: x created the game y.",
      "Top10Game(x) ::: x is a game in the Top 10 list.",
      "JapaneseCompany(x) ::: x is a Japanese game company.",
      "Sells(x, y) ::: x sells y copies.",
      "Selected(x) ::: x is selected into the Top 10 list."
    ]
  },
  "15": {
    "context": [
      "All squares have four sides.",
      "All four-sided things are shapes. "
    ],
    "question": "All squares are shapes.",
    "logic_predicates": [
      "Square(x) ::: x is a square.",
      "HasSides(x, y) ::: x has y sides.",
      "Shape(x) ::: x is a shape."
    ]
  },
  "16": {
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is a turtle.",
    "logic_predicates": [
      "Cute(x) ::: x is cute.",
      "Rabbit(x) ::: x is a rabbit.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still."
    ]
  },
  "17": {
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is not a turtle.",
    "logic_predicates": [
      "Cute(x) ::: x is cute.",
      "Rabbit(x) ::: x is a rabbit.",
      "Turtle(x) ::: x is a turtle.",
      "Exist(x) ::: x exists.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still.",
      "Not(x) ::: negation of x."
    ]
  },
  "18": {
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is a turtle or cute.",
    "logic_predicates": [
      "Cute(x) ::: x is cute.",
      "Rabbit(x) ::: x is a rabbit.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still."
    ]
  },
  "19": {
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "logic_predicates": [
      "Cute(x) ::: x is cute.",
      "Rabbit(x) ::: x is a rabbit.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still."
    ]
  },
  "20": {
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
    "logic_predicates": [
      "Cute(x) ::: x is cute.",
      "Rabbit(x) ::: x is a rabbit.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still."
    ]
  },
  "21": {
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "Karen will share \"Stranger Things\" to Lisa.",
    "logic_predicates": [
      "Popular(x) ::: x is a popular Netflix show.",
      "Show(x) ::: x is a Netflix show.",
      "BingeWatch(x) ::: Karen binge-watches x.",
      "Download(x) ::: Karen downloads x.",
      "Share(x, y) ::: Karen shares x to y.",
      "Netflix(x) ::: x is a Netflix show.",
      "Karen ::: Karen is a person.",
      "Lisa ::: Lisa is a person."
    ]
  },
  "22": {
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "\"Black Mirror\" is popular.",
    "logic_predicates": [
      "Popular(x) ::: x is popular.",
      "NetflixShow(x) ::: x is a Netflix show.",
      "BingeWatch(x) ::: Karen binge-watches x.",
      "Download(x) ::: Karen downloads x.",
      "Share(x, y) ::: Karen shares x to y.",
      "Show(x, y) ::: x is a show y."
    ]
  },
  "23": {
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "Karen will share \"Black Mirror\" to Lisa.",
    "logic_predicates": [
      "Popular(x) ::: x is a popular Netflix show.",
      "BingeWatch(x) ::: Karen binge-watches show x.",
      "Download(x) ::: Karen downloads show x.",
      "NetflixShow(x) ::: x is a Netflix show.",
      "Share(x, y) ::: Karen shares show x to person y.",
      "Show(x) ::: x is a show.",
      "Karen ::: Karen",
      "Lisa ::: Lisa",
      "BlackMirror ::: \"Black Mirror\""
    ]
  },
  "24": {
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "logic_predicates": [
      "Capital(x, y) ::: x is the capital of y.",
      "Populous(x) ::: x is the world's most populous national capital city.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Hosted(x, y) ::: x hosted the event y.",
      "Rank(x, y, z) ::: x's university y consistently ranks among the best in z.",
      "SummerOlympics(x) ::: x is the Summer Olympics.",
      "WinterOlympics(x) ::: x is the Winter Olympics.",
      "AsiaPacific(x) ::: x is in the Asia-Pacific region.",
      "World(x) ::: x is in the world."
    ]
  },
  "25": {
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing is located in southern China.",
    "logic_predicates": [
      "LocatedIn(x, y) ::: x is located in y.",
      "CapitalOf(x, y) ::: x is the capital of y.",
      "Populous(x) ::: x is the most populous national capital city.",
      "Hosted(x, y) ::: x hosted the y.",
      "RankAmongBest(x, y) ::: x consistently ranks among the best in y.",
      "University(x) ::: x is a university.",
      "Rank(x, y) ::: x ranks y."
    ]
  },
  "26": {
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing is the second largest Chinese city by urban population.",
    "logic_predicates": [
      "CapitalOf(x, y) ::: x is the capital of y. (Variables: x - city, y - country)",
      "MostPopulousCity(x) ::: x is the world's most populous national capital city. (Variable: x - city)",
      "LocatedIn(x, y) ::: x is located in y. (Variables: x - city, y - region)",
      "Hosted(x, y) ::: x hosted the y. (Variables: x - city, y - event)",
      "RankAmongBest(x, y, z) ::: x's z consistently rank among the best in y. (Variables: x - city, y - region, z - universities)"
    ]
  },
  "27": {
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is an alien.",
    "logic_predicates": [
      "Alien(x) ::: x is an alien.",
      "Extraterrestrial(x) ::: x is extraterrestrial.",
      "FromMars(x) ::: x is from Mars.",
      "Human(x) ::: x is a human.",
      "FromEarth(x) ::: x is from Earth.",
      "NotFromEarth(x) ::: x is not from Earth."
    ]
  },
  "28": {
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is neither a human nor from Mars.",
    "logic_predicates": [
      "Alien(x) ::: x is an alien.",
      "Extraterrestrial(x) ::: x is extraterrestrial.",
      "FromMars(x) ::: x is from Mars.",
      "Human(x) ::: x is a human.",
      "FromEarth(x) ::: x is from Earth.",
      "NotFromEarth(x) ::: x is not from Earth."
    ]
  },
  "29": {
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "If Marvin is not from Mars, then Marvin is a human.",
    "logic_predicates": [
      "Alien(x) ::: x is an alien.",
      "Extraterrestrial(x) ::: x is extraterrestrial.",
      "FromMars(x) ::: x is from Mars.",
      "Human(x) ::: x is a human.",
      "FromEarth(x) ::: x is from Earth."
    ]
  },
  "30": {
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic is a Grand Slam champion.",
    "logic_predicates": [
      "GrandSlamChampion(x) ::: x is a Grand Slam champion.",
      "OscarNominee(x) ::: x is an Oscar-nominated actor.",
      "Actor(x) ::: x is an actor.",
      "TennisPlayer(x) ::: x is a professional tennis player.",
      "Celebrity(x) ::: x is a celebrity.",
      "Athlete(x) ::: x is an athlete.",
      "WellPaid(x) ::: x is well paid.",
      "Famous(x) ::: x is famous.",
      "LiveInTaxHaven(x) ::: x lives in a tax haven."
    ]
  },
  "31": {
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic lives in a tax haven.",
    "logic_predicates": [
      "GrandSlamChampion(x) ::: x is a Grand Slam champion.",
      "OscarNominee(x) ::: x is an Oscar-nominated actor.",
      "ProfessionalTennisPlayer(x) ::: x is a professional tennis player.",
      "Celebrity(x) ::: x is a celebrity.",
      "Athlete(x) ::: x is an athlete.",
      "WellPaid(x) ::: x is well paid.",
      "Famous(x) ::: x is famous.",
      "LiveInTaxHaven(x) ::: x lives in a tax haven."
    ]
  },
  "32": {
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic does not live in a tax haven.",
    "logic_predicates": [
      "GrandSlamChampion(x) ::: x is a Grand Slam champion.",
      "OscarNominee(x) ::: x is an Oscar-nominated actor.",
      "TennisPlayer(x) ::: x is a professional tennis player.",
      "Celebrity(x) ::: x is a celebrity.",
      "Athlete(x) ::: x is an athlete.",
      "WellPaid(x) ::: x is well paid.",
      "Famous(x) ::: x is famous.",
      "LiveInTaxHaven(x) ::: x lives in a tax haven."
    ]
  },
  "33": {
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick strong leads a professional wrestling stable.",
    "logic_predicates": [
      "Leader(x, y) ::: x leads y.",
      "Stable(x) ::: x is a professional wrestling stable.",
      "Formed(x, y) ::: x is formed in y.",
      "Includes(x, y) ::: x includes y.",
      "Feud(x, y) ::: x has a feud with y."
    ]
  },
  "34": {
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick strong leads the Creed Brothers.",
    "logic_predicates": [
      "Leader(x, y) ::: x leads y.",
      "Stable(x, y) ::: x is a professional wrestling stable formed in y.",
      "FormedIn(x, y) ::: x is formed in y.",
      "Wrestler(x) ::: x is a wrestler.",
      "Feud(x, y) ::: x has a feud with y."
    ]
  },
  "35": {
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "logic_predicates": [
      "Stable(x) ::: x is a professional wrestling stable.",
      "FormedIn(x, y) ::: x is formed in y.",
      "Leads(x, y) ::: x leads y.",
      "Includes(x, y) ::: x includes y.",
      "FeudWith(x, y) ::: x has a feud with y."
    ]
  },
  "36": {
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is a composer.",
    "logic_predicates": [
      "MusicPiece(x) ::: x is a music piece.",
      "Write(x, y) ::: x writes y.",
      "Composer(x) ::: x is a composer.",
      "Premiere(x, y) ::: x premiered y.",
      "Orchestra(x) ::: x is an orchestra.",
      "Lead(x, y) ::: x leads y.",
      "Conductor(x) ::: x is a conductor."
    ]
  },
  "37": {
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Some orchestras premiered music pieces.",
    "logic_predicates": [
      "MusicPiece(x) ::: x is a music piece.",
      "Write(x, y) ::: x writes y.",
      "Composer(x) ::: x is a composer.",
      "Premiere(x, y) ::: x premiered y.",
      "Orchestra(x) ::: x is an orchestra.",
      "Lead(x, y) ::: x leads y.",
      "Conductor(x) ::: x is a conductor."
    ]
  },
  "38": {
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is not a conductor.",
    "logic_predicates": [
      "MusicPiece(x) ::: x is a music piece.",
      "Write(x, y) ::: x writes y.",
      "Composer(x) ::: x is a composer.",
      "Beethoven ::: Beethoven is a specific composer.",
      "Premiere(x, y) ::: x premiered y.",
      "Orchestra(x) ::: x is an orchestra.",
      "Lead(x, y) ::: x leads y.",
      "Conductor(x) ::: x is a conductor."
    ]
  },
  "39": {
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is a mass product design.",
    "logic_predicates": [
      "Timeless(x) ::: x is a design style that is timeless.",
      "MassProduct(x) ::: x is a mass product design.",
      "DesignStyle(x) ::: x is a design style.",
      "ZahaHadid(x) ::: x is Zaha Hadid's design style.",
      "KellyWearstler(x) ::: x is Kelly Wearstler's design style.",
      "Evocative(x) ::: x is an evocative design style.",
      "Dreamy(x) ::: x is a dreamy design style.",
      "Max(x) ::: x is a design by Max."
    ]
  },
  "40": {
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is evocative and dreamy.",
    "logic_predicates": [
      "Timeless(x) ::: x is a timeless design style.",
      "MassProduct(x) ::: x is a mass product design.",
      "DesignStyle(x) ::: x is a design style.",
      "ZahaHadid(x) ::: x is Zaha Hadid's design style.",
      "KellyWearstler(x) ::: x is Kelly Wearstler's design style.",
      "Evocative(x) ::: x is an evocative design style.",
      "Dreamy(x) ::: x is a dreamy design style.",
      "Max(x) ::: x is a design by Max."
    ]
  },
  "41": {
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is either evocative or dreamy.",
    "logic_predicates": [
      "Timeless(x) ::: x is a timeless design.",
      "DesignStyle(x, y) ::: x is a design style of y.",
      "MassProduct(x) ::: x is a mass product design.",
      "Evocative(x) ::: x is an evocative design.",
      "Dreamy(x) ::: x is a dreamy design.",
      "By(x, y) ::: x is by y.",
      "Max(x) ::: x is a design by Max."
    ]
  },
  "42": {
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff is among the most active players in major tennis.",
    "logic_predicates": [
      "Active(x) ::: x is among the most active players in major tennis.",
      "RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.",
      "Player(x) ::: x is a tennis player.",
      "LostTo(x, y) ::: x lost to y.",
      "Female(x) ::: x is a female.",
      "Male(x) ::: x is a male.",
      "At(x, y) ::: x is at location y.",
      "RolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022.",
      "RafaelNadal(x) ::: x is Rafael Nadal.",
      "CocoGauff(x) ::: x is Coco Gauff."
    ]
  },
  "43": {
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff has lost to Rafael Nadal.",
    "logic_predicates": [
      "RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.",
      "Active(x) ::: x is among the most active players in major tennis.",
      "LostTo(x, y) ::: x lost to y.",
      "Female(x) ::: x is a female.",
      "Male(x) ::: x is a male.",
      "Player(x) ::: x is a player.",
      "AtRolandGarros2022(x) ::: x is at Roland Garros 2022.",
      "RafaelNadal(x) ::: x is Rafael Nadal.",
      "CocoGauff(x) ::: x is Coco Gauff."
    ]
  },
  "44": {
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
    "logic_predicates": [
      "RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.",
      "Active(x) ::: x is among the most active players in major tennis.",
      "Player(x) ::: x is a tennis player.",
      "LostTo(x, y) ::: x lost to y.",
      "Female(x) ::: x is a female.",
      "Male(x) ::: x is a male.",
      "AtRolandGarros2022(x) ::: x played at Roland Garros 2022.",
      "RafaelNadal(x) ::: x is Rafael Nadal.",
      "CocoGauff(x) ::: x is Coco Gauff.",
      "Not(x) ::: negation of x."
    ]
  },
  "45": {
    "context": [
      "All cats are mammals.",
      "Some pets are not mammals."
    ],
    "question": "No pets are cats.",
    "logic_predicates": [
      "Cat(x) ::: x is a cat.",
      "Mammal(x) ::: x is a mammal.",
      "Pet(x) ::: x is a pet."
    ]
  },
  "46": {
    "context": [
      "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "James's favorite season is summer.",
    "logic_predicates": [
      "Season(x) ::: x is a season in a year.",
      "Spring(x) ::: x is Spring.",
      "Summer(x) ::: x is Summer.",
      "Fall(x) ::: x is Fall.",
      "Winter(x) ::: x is Winter.",
      "Student(x) ::: x is a student.",
      "Love(x, y) ::: x loves y.",
      "FavoriteSeason(x, y) ::: x's favorite season is y.",
      "WantLongVacation(x) ::: x wants to have a long vacation."
    ]
  },
  "48": {
    "context": [
      "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "Mia's favorite season is spring.",
    "logic_predicates": [
      "Season(x) ::: x is a season in a year.",
      "Spring(x) ::: x is Spring.",
      "Summer(x) ::: x is Summer.",
      "Fall(x) ::: x is Fall.",
      "Winter(x) ::: x is Winter.",
      "Student(x) ::: x is a student.",
      "Love(x, y) ::: x loves y.",
      "FavoriteSeason(x, y) ::: x's favorite season is y.",
      "WantsLongVacation(x) ::: x wants to have a long vacation."
    ]
  },
  "49": {
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is printed text.",
    "logic_predicates": [
      "Digital(x) ::: x is digital media.",
      "Analog(x) ::: x is analog.",
      "PrintedText(x) ::: x is a printed text.",
      "StreamingService(x) ::: x is a streaming service.",
      "HardcoverBook(x) ::: x is a hardcover book.",
      "Object(x) ::: x is an object.",
      "IsA(x, y) ::: x is a type of y.",
      "1984 ::: a specific object named \"1984\"."
    ]
  },
  "50": {
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is a streaming service.",
    "logic_predicates": [
      "Digital(x) ::: x is digital media.",
      "Analog(x) ::: x is analog.",
      "PrintedText(x) ::: x is a printed text.",
      "StreamingService(x) ::: x is a streaming service.",
      "HardcoverBook(x) ::: x is a hardcover book.",
      "Is1984(x) ::: x is 1984."
    ]
  },
  "51": {
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is not a streaming service.",
    "logic_predicates": [
      "Digital(x) ::: x is digital media.",
      "Analog(x) ::: x is analog.",
      "PrintedText(x) ::: x is a printed text.",
      "StreamingService(x) ::: x is a streaming service.",
      "HardcoverBook(x) ::: x is a hardcover book.",
      "Object(x) ::: x is an object.",
      "Is1984(x) ::: x is 1984."
    ]
  },
  "52": {
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "Basque is a Romance language.",
    "logic_predicates": [
      "IndoEuropean(x) ::: x is an Indo-European language.",
      "RomanceLanguage(x) ::: x is a Romance language.",
      "LanguageFamily(x) ::: x is a language family.",
      "Related(x, y) ::: x is related to y.",
      "French(x) ::: x is French.",
      "Spanish(x) ::: x is Spanish.",
      "German(x) ::: x is German.",
      "Basque(x) ::: x is Basque."
    ]
  },
  "53": {
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "German is a Romance language.",
    "logic_predicates": [
      "IndoEuropean(x) ::: x is an Indo-European language.",
      "LanguageFamily(x) ::: x is a language family.",
      "Related(x, y) ::: x is related to y.",
      "RomanceLanguage(x) ::: x is a Romance language.",
      "German(x) ::: x is German.",
      "Spanish(x) ::: x is Spanish.",
      "Basque(x) ::: x is Basque."
    ]
  },
  "54": {
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "French is an Indo-European language.",
    "logic_predicates": [
      "IndoEuropean(x) ::: x is an Indo-European language.",
      "LanguageFamily(x) ::: x is a language family.",
      "Related(x, y) ::: x is related to y.",
      "RomanceLanguage(x) ::: x is a Romance language.",
      "French ::: French is a language.",
      "Spanish ::: Spanish is a language.",
      "German ::: German is a language.",
      "Basque ::: Basque is a language."
    ]
  },
  "55": {
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a soccer player.",
    "logic_predicates": [
      "Striker(x) ::: x is a striker.",
      "SoccerPlayer(x) ::: x is a soccer player.",
      "LeftTeam(x, y) ::: x left team y.",
      "PlayFor(x, y) ::: x plays for team y."
    ]
  },
  "56": {
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski plays for Bayern Munchen.",
    "logic_predicates": [
      "Striker(x) ::: x is a striker.",
      "SoccerPlayer(x) ::: x is a soccer player.",
      "Left(x, y) ::: x left team y.",
      "PlaysFor(x, y) ::: x plays for team y."
    ]
  },
  "57": {
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a star.",
    "logic_predicates": [
      "Striker(x) ::: x is a striker.",
      "SoccerPlayer(x) ::: x is a soccer player.",
      "LeftTeam(x, y) ::: x left team y.",
      "Star(x) ::: x is a star."
    ]
  },
  "58": {
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Butte and Pierre are in the same state.",
    "logic_predicates": [
      "City(x) ::: x is a city.",
      "State(x) ::: x is a state.",
      "In(x, y) ::: x is in y.",
      "SameState(x, y) ::: x and y are in the same state."
    ]
  },
  "59": {
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Pierre and Bismarck are in the same state.",
    "logic_predicates": [
      "City(x) ::: x is a city.",
      "State(x) ::: x is a state.",
      "In(x, y) ::: x is in y."
    ]
  },
  "60": {
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Montana is home to the city of Missoula.",
    "logic_predicates": [
      "City(x) ::: x is a city.",
      "State(x) ::: x is a state.",
      "In(x, y) ::: x is in y."
    ]
  },
  "61": {
    "context": [
      "International students in US have either an F1 visa or a J1 visa.",
      "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has an F1 visa.",
    "logic_predicates": [
      "InternationalStudent(x) ::: x is an international student.",
      "Visa(x, y) ::: x has a visa type y.",
      "F1(x) ::: x has an F1 visa.",
      "J1(x) ::: x has a J1 visa.",
      "ApplyFor(x, y) ::: x needs to apply for y.",
      "WorkIn(x, y) ::: x wants to work in y.",
      "Mike(x) ::: x is Mike.",
      "CPT(x) ::: x needs to apply for CPT."
    ]
  },
  "62": {
    "context": [
      "International students in US have either an F1 visa or a J1 visa.",
      "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has a J1 visa.",
    "logic_predicates": [
      "InternationalStudent(x) ::: x is an international student.",
      "US(x) ::: x is in the US.",
      "Visa(x, y) ::: x has a visa type y.",
      "F1(x) ::: x has an F1 visa.",
      "J1(x) ::: x has a J1 visa.",
      "ApplyFor(x, y) ::: x needs to apply for y.",
      "WorkIn(x, y) ::: x wants to work in y.",
      "Mike ::: Constant representing the individual Mike.",
      "Explanation:",
      "- InternationalStudent(x): x represents a person who is an international student.",
      "- US(x): x represents being in the US.",
      "- Visa(x, y): x has a visa type y, where y can be F1 or J1.",
      "- F1(x): x has an F1 visa.",
      "- J1(x): x has a J1 visa.",
      "- ApplyFor(x, y): x needs to apply for y, where y can be CPT or OPT.",
      "- WorkIn(x, y): x wants to work in y.",
      "- Mike: Constant representing the individual named Mike."
    ]
  },
  "63": {
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "Ted is a pet.",
    "logic_predicates": [
      "Bovine(x) ::: x is a bovine.",
      "Cow(x) ::: x is a cow.",
      "Pet(x) ::: x is a pet.",
      "Domesticated(x) ::: x is domesticated.",
      "Alligator(x) ::: x is an alligator."
    ]
  },
  "64": {
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "Ted is a pet and a cow.",
    "logic_predicates": [
      "Bovine(x) ::: x is a bovine.",
      "Cow(x) ::: x is a cow.",
      "Pet(x) ::: x is a pet.",
      "Domesticated(x) ::: x is domesticated.",
      "Alligator(x) ::: x is an alligator.",
      "Explanation:",
      "- Bovine(x): x represents a bovine animal.",
      "- Cow(x): x represents a cow.",
      "- Pet(x): x represents a pet.",
      "- Domesticated(x): x represents a domesticated animal.",
      "- Alligator(x): x represents an alligator.",
      "In the given premises, the predicates are defined based on the types of animals and their characteristics."
    ]
  },
  "65": {
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "If Ted is a cow, then Ted is not a pet.",
    "logic_predicates": [
      "Bovine(x) ::: x is a bovine.",
      "Cow(x) ::: x is a cow.",
      "Pet(x) ::: x is a pet.",
      "Domesticated(x) ::: x is domesticated.",
      "Alligator(x) ::: x is an alligator.",
      "IfTedIsCowThenNotPet(x) ::: If x is a cow, then x is not a pet.",
      "Explanation:",
      "- Bovine(x): x represents a bovine animal.",
      "- Cow(x): x represents a cow.",
      "- Pet(x): x represents a pet.",
      "- Domesticated(x): x represents an animal that is domesticated.",
      "- Alligator(x): x represents an alligator.",
      "- IfTedIsCowThenNotPet(x): This predicate represents the condition that if x is a cow, then x is not a pet. The variable x in this predicate refers to an animal."
    ]
  },
  "69": {
    "context": [
      "Badults is a British Sitcom series, starring members of Pappy's.",
      "Badults piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults"
    ],
    "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "logic_predicates": [
      "ScriptEditor(x, y) ::: x is the script editor for series y.",
      "Series(x) ::: x is a TV series.",
      "WorkingTitle(x, y) ::: x has the working title y."
    ]
  },
  "70": {
    "context": [
      "Badults is a British Sitcom series, starring members of Pappy's.",
      "Badults piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults"
    ],
    "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "logic_predicates": [
      "Starred(x, y) ::: x starred for show y.",
      "Piloted(x, y) ::: x piloted show y.",
      "British(x) ::: x is British.",
      "Sitcom(x) ::: x is a sitcom series.",
      "Starring(x, y) ::: x is starring in y.",
      "ScriptEditor(x, y) ::: x is the script editor for show y.",
      "WorkingTitle(x, y) ::: x is the working title for show y.",
      "Assistant(x) ::: x is an assistant."
    ]
  },
  "71": {
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "KO is a company stock.",
    "logic_predicates": [
      "Volatile(x) ::: x is volatile.",
      "GrowthStock(x) ::: x is a growth stock of a company.",
      "Company(x) ::: x is a company.",
      "SuitableForRetirementFund(x) ::: x is suitable for a retirement fund.",
      "Stock(x) ::: x is a stock.",
      "MatureCompany(x) ::: x is a mature company.",
      "IsA(x, y) ::: x is a y."
    ]
  },
  "72": {
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "KO is a company stock and a growth stock of a company.",
    "logic_predicates": [
      "GrowthStock(x) ::: x is a growth stock of a company.",
      "Volatile(x) ::: x is volatile.",
      "SuitableForRetirementFund(x) ::: x is suitable for a retirement fund.",
      "StockOfCompany(x, y) ::: x is a stock of company y.",
      "MatureCompany(x) ::: x is a mature company."
    ]
  },
  "73": {
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
    "logic_predicates": [
      "GrowthStock(x) ::: x is a growth stock of a company.",
      "Volatile(x) ::: x is volatile.",
      "RetirementFund(x) ::: x is suitable for a retirement fund.",
      "StockOf(x, y) ::: x is a stock of company y.",
      "MatureCompany(x) ::: x is a mature company.",
      "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
      "Translated to FOL:",
      "∀x [GrowthStock(x) → Volatile(x) → ¬StockOf(KO, x) ∧ ¬Volatile(KO)]"
    ]
  },
  "74": {
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Joe's license plate begins with the number 34.",
    "logic_predicates": [
      "BeginsWith(x, y) ::: x begins with the number y.",
      "From(x, y) ::: x is from location y.",
      "Joe(x) ::: x is Joe.",
      "Tom(x) ::: x is Tom.",
      "LicensePlate(x) ::: x is a license plate.",
      "Istanbul(x) ::: x is in Istanbul.",
      "Number(x) ::: x is a number."
    ]
  },
  "75": {
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Tom's license plate is from Istanbul.",
    "logic_predicates": [
      "IstanbulPlate(x) ::: x is a vehicle registration plate from Istanbul.",
      "BeginsWith34(x) ::: x begins with the number 34.",
      "BeginsWith35(x) ::: x begins with the number 35.",
      "FromIstanbul(x) ::: x is from Istanbul.",
      "JoePlate(x) ::: x is Joe's vehicle registration plate.",
      "TomPlate(x) ::: x is Tom's license plate.",
      "NotFromIstanbul(x) ::: x is not from Istanbul."
    ]
  },
  "76": {
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary needs to earn money to help pay for her college tuition.",
    "logic_predicates": [
      "EarnsMoney(x) ::: x needs to earn money to help pay for college tuition.",
      "StudentJob(x) ::: x works in student jobs on campus.",
      "OrderTakeout(x) ::: x orders takeout frequently in college.",
      "EnjoyDining(x) ::: x enjoys the dining hall meals and recipes.",
      "PickyEater(x) ::: x is a picky eater.",
      "EatWithFriends(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.",
      "Mary ::: Constant representing Mary."
    ]
  },
  "77": {
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "logic_predicates": [
      "EarnMoney(x) ::: x needs to earn money to help pay for college tuition.",
      "Work(x) ::: x works in student jobs on campus.",
      "OrderTakeout(x) ::: x orders takeout frequently in college.",
      "EnjoyDining(x) ::: x enjoys the dining hall meals and recipes.",
      "PickyEater(x) ::: x is a picky eater.",
      "TimeSpent(x, y) ::: x spends a lot of their time y.",
      "CatchUpWithFriends(x) ::: x catches up with friends.",
      "CampusDiningHalls(x) ::: x is the campus dining halls.",
      "Mary ::: Constant representing Mary."
    ]
  },
  "78": {
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "logic_predicates": [
      "EarnMoney(x) ::: x needs to earn money to help pay for college tuition.",
      "Work(x) ::: x works in student jobs on campus.",
      "OrderTakeout(x) ::: x orders takeout frequently in college.",
      "Enjoy(x) ::: x enjoys the dining hall meals and recipes.",
      "PickyEater(x) ::: x is a picky eater.",
      "TimeSpent(x, y) ::: x spends a lot of their time y.",
      "CatchUpWithFriends(x, y) ::: x catches up with friends in y.",
      "Mary(x) ::: x is Mary."
    ]
  },
  "79": {
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are a product of Baked by Melissa.",
    "logic_predicates": [
      "Spicy(x) ::: x is spicy.",
      "Bakery(x) ::: x is a bakery.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "Product(x, y) ::: x is a product of y.",
      "ThaiChilies(x) ::: x is dried Thai chilies.",
      "BakedByMelissa(x) ::: x is a product of Baked by Melissa."
    ]
  },
  "80": {
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are not a product of Baked by Melissa.",
    "logic_predicates": [
      "Spicy(x) ::: x is spicy.",
      "Bakery(x) ::: x is a bakery.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "Product(x, y) ::: x is a product of y.",
      "BakedByMelissa(x) ::: x is a product of Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  "81": {
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are a hotpot.",
    "logic_predicates": [
      "Spicy(x) ::: x is spicy.",
      "Bakery(x) ::: x is a bakery.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "BakedByMelissa(x) ::: x is a product of Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  "82": {
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "logic_predicates": [
      "Spicy(x) ::: x is spicy.",
      "Bakery(x) ::: x is a bakery.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "BakedByMelissa(x) ::: x is a product of Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  "83": {
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "logic_predicates": [
      "Spicy(x) ::: x is spicy.",
      "Bakery(x) ::: x is a bakery.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "BakedByMelissa(x) ::: x is a product of Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  "84": {
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "logic_predicates": [
      "Recommendation(x) ::: x is listed in Yelp's recommendations.",
      "NegativeReviews(x) ::: x receives many negative reviews.",
      "Rating(x, y) ::: x has a rating of y.",
      "TakeOut(x) ::: x provides take-out service.",
      "Popular(x) ::: x is popular among local residents.",
      "Subway(x) ::: x is Subway.",
      "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
      "- (TakeOut(Subway) ∧ NegativeReviews(Subway)) → (Rating(Subway, >9) ∧ ¬TakeOut(Subway))",
      "- Explanation:",
      "- Variables:",
      "- x: Represents a restaurant.",
      "- y: Represents a rating value.",
      "- Predicate Meaning:",
      "- Recommendation(x): x is listed in Yelp's recommendations.",
      "- NegativeReviews(x): x receives many negative reviews.",
      "- Rating(x, y): x has a rating of y.",
      "- TakeOut(x): x provides take-out service.",
      "- Popular(x): x is popular among local residents.",
      "- Subway(x): x is Subway."
    ]
  },
  "85": {
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "Subway provides take-out service and does not receive many negative reviews.",
    "logic_predicates": [
      "ListedInYelp(x) ::: x is listed in Yelp's recommendations.",
      "NotReceiveNegativeReviews(x) ::: x does not receive many negative reviews.",
      "RatingGreaterThan9(x) ::: x has a rating greater than 9.",
      "ProvideTakeOutService(x) ::: x provides take-out service.",
      "PopularAmongLocals(x) ::: x is popular among local residents.",
      "Subway(x) ::: x is Subway."
    ]
  },
  "86": {
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "Subway does not provide take-out service.",
    "logic_predicates": [
      "ListedInYelp(x) ::: x is listed in Yelp's recommendations.",
      "NegativeReviews(x) ::: x receives many negative reviews.",
      "Rating(x, y) ::: x has a rating of y.",
      "ProvideTakeOutService(x) ::: x provides take-out service.",
      "PopularAmongLocals(x) ::: x is popular among local residents.",
      "Subway(x) ::: x is Subway."
    ]
  },
  "87": {
    "context": [
      "In superhero movies, the good guys always win.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
      "Good guys fight bad guys and vice versa.",
      "Sir Digby fights his nemesis.",
      "If a superhero movie is named after a character, that character is a good guy.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
      "If somebody wins a fight, the person they are fighting loses.",
      "If a superhero movie is named after a character, that character appears in the movie."
    ],
    "question": "Sir Digby’s nemesis loses.",
    "logic_predicates": [
      "Win(x) ::: x always wins.",
      "SuperheroMovie(x) ::: x is a superhero movie.",
      "NamedAfter(x, y) ::: x is named after y.",
      "Character(x) ::: x is a character.",
      "GoodGuy(x) ::: x is a good guy.",
      "Fight(x, y) ::: x fights y.",
      "BadGuy(x) ::: x is a bad guy.",
      "Nemesis(x, y) ::: x is the nemesis of y.",
      "AppearIn(x, y) ::: x appears in movie y.",
      "Lose(x) ::: x loses."
    ]
  },
  "88": {
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Walden contains knowledge.",
    "logic_predicates": [
      "ContainsKnowledge(x) ::: x contains knowledge.",
      "Read(x, y) ::: x reads the book y.",
      "GainsKnowledge(x) ::: x gains knowledge.",
      "BecomeSmarter(x) ::: x becomes smarter."
    ]
  },
  "89": {
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Harry is smarter than before.",
    "logic_predicates": [
      "ContainsKnowledge(x) ::: x contains tons of knowledge.",
      "Reads(x, y) ::: x reads the book y.",
      "GainsKnowledge(x) ::: x gains knowledge.",
      "Smarter(x) ::: x becomes smarter."
    ]
  },
  "90": {
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "A person who is smarter has gained knowledge.",
    "logic_predicates": [
      "ContainsKnowledge(x) ::: x contains a lot of knowledge.",
      "Reads(x, y) ::: x reads the book y.",
      "GainsKnowledge(x) ::: x gains knowledge.",
      "Smarter(x) ::: x is smarter."
    ]
  },
  "91": {
    "context": [
      "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language generation task.",
    "logic_predicates": [
      "LanguageGenerationTask(x) ::: x is a language generation task.",
      "LanguageUnderstandingTask(x) ::: x is a language understanding task.",
      "OutputIsTextSequence(x) ::: x outputs a text sequence.",
      "NaturalLanguageProcessingTask(x) ::: x is a natural language processing task.",
      "MachineTranslation(x) ::: x is machine translation."
    ]
  },
  "92": {
    "context": [
      "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language understanding task.",
    "logic_predicates": [
      "LanguageGenerationTask(x) ::: x is a language generation task.",
      "LanguageUnderstandingTask(x) ::: x is a language understanding task.",
      "OutputIsTextSequence(x) ::: x outputs a text sequence.",
      "NaturalLanguageProcessingTask(x) ::: x is a natural language processing task.",
      "MachineTranslation(x) ::: x is machine translation."
    ]
  },
  "93": {
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "Tom will rent an apartment in The Olive Garden.",
    "logic_predicates": [
      "AllowedIn(x) ::: Pets are allowed in building x.",
      "RequiresDeposit(x) ::: A deposit is required to rent an apartment in building x.",
      "EqualDeposit(x) ::: The security deposit in building x is equal to one month's rent.",
      "MoreDeposit(x) ::: The security deposit in building x is more than one month's rent.",
      "IsCat(x) ::: x is a cat.",
      "IsPet(x) ::: x is a pet.",
      "IsManaged(x) ::: x is a managed building.",
      "IsApartment(x) ::: x is an apartment.",
      "IsRent(x, y) ::: The monthly rent at building x is y.",
      "IsOwner(x, y) ::: x is the owner of y.",
      "IsMoveInWith(x, y) ::: x moves in with y.",
      "IsPrice(x, y) ::: The price of x is y.",
      "IsMoreThan(x, y) ::: x is more than y.",
      "RentApartment(x) ::: Tom will rent an apartment in building x."
    ]
  },
  "94": {
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "logic_predicates": [
      "Allowed(x, y) ::: x is allowed to move in with y.",
      "ManagedBuilding(x) ::: x is a managed building.",
      "DepositRequired(x) ::: a deposit is required to rent an apartment in building x.",
      "Rent(x, y) ::: the monthly rent at building x is y.",
      "SecurityDeposit(x, y) ::: the security deposit at building x is y.",
      "Equal(x, y) ::: x is equal to y.",
      "MoreThan(x, y) ::: x is more than y.",
      "Cat(x) ::: x is a cat.",
      "Pet(x) ::: x is a pet.",
      "Owns(x, y) ::: x owns y.",
      "MoveInWith(x, y) ::: x moves in with y.",
      "RentApartment(x, y) ::: x rents an apartment in building y."
    ]
  },
  "95": {
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "The security deposit at the Olive Garden is either $2000 or more.",
    "logic_predicates": [
      "Allowed(x, y) ::: x is allowed in building y.",
      "RequiresDeposit(x) ::: x requires a deposit.",
      "RentApartment(x, y) ::: x rents an apartment in building y.",
      "Equal(x, y) ::: x is equal to y.",
      "MoreThan(x, y) ::: x is more than y.",
      "IsCat(x) ::: x is a cat.",
      "IsPet(x) ::: x is a pet.",
      "IsBuilding(x) ::: x is a building.",
      "IsManaged(x) ::: x is a managed building.",
      "IsSecurityDeposit(x) ::: x is a security deposit.",
      "IsMonthRent(x) ::: x is a month's rent.",
      "IsFluffy(x) ::: x is Fluffy.",
      "IsTom(x) ::: x is Tom.",
      "IsOliveGarden(x) ::: x is the Olive Garden.",
      "IsPrice(x, y) ::: x is the price of y.",
      "IsAllowedToMoveInWith(x, y) ::: x is allowed to move in with y.",
      "IsNoMoreThan(x, y) ::: x is no more than y."
    ]
  },
  "96": {
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "Koalas love to sleep.",
    "logic_predicates": [
      "Favorite(x, y) ::: x's favorite animal is y.",
      "LovedByTourists(x) ::: x is loved by tourists.",
      "Max(x) ::: x is Max.",
      "Fluffy(x) ::: x is very fluffy.",
      "LoveToSleep(x) ::: x loves to sleep.",
      "Animal(x) ::: x is an animal.",
      "FromAustralia(x) ::: x is from Australia.",
      "Koala(x) ::: x is a koala.",
      "Quokka(x) ::: x is a quokka."
    ]
  },
  "97": {
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "Koalas love to sleep and are quokka.",
    "logic_predicates": [
      "Favorite(x, y) ::: x's favorite animal is y.",
      "LovedByTourists(x) ::: x is loved by tourists.",
      "Max(x) ::: x is Max.",
      "Fluffy(x) ::: x is very fluffy.",
      "Sleep(x) ::: x loves to sleep.",
      "Animal(x) ::: x is an animal.",
      "FromAustralia(x) ::: x is from Australia.",
      "Quokka(x) ::: x is a quokka.",
      "Koala(x) ::: x is a koala."
    ]
  },
  "99": {
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "Harry is a CEO.",
    "logic_predicates": [
      "Kind(x) ::: x is kind.",
      "Evil(x) ::: x is evil.",
      "Ugly(x) ::: x is ugly.",
      "Handsome(x) ::: x is handsome.",
      "Gentleman(x) ::: x is a gentleman.",
      "CEO(x) ::: x is a CEO.",
      "Explanation:",
      "- Variables:",
      "- x can represent a person.",
      "- Predicates:",
      "- Kind(x): x is kind.",
      "- Evil(x): x is evil.",
      "- Ugly(x): x is ugly.",
      "- Handsome(x): x is handsome.",
      "- Gentleman(x): x is a gentleman.",
      "- CEO(x): x is a CEO."
    ]
  },
  "100": {
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "Harry is kind or a CEO.",
    "logic_predicates": [
      "Kind(x) ::: x is kind.",
      "Evil(x) ::: x is evil.",
      "Ugly(x) ::: x is ugly.",
      "Handsome(x) ::: x is handsome.",
      "Gentleman(x) ::: x is a gentleman.",
      "CEO(x) ::: x is a CEO."
    ]
  },
  "101": {
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "logic_predicates": [
      "Kind(x) ::: x is kind.",
      "Evil(x) ::: x is evil.",
      "Ugly(x) ::: x is ugly.",
      "Handsome(x) ::: x is handsome.",
      "Gentlemen(x) ::: x is a gentleman.",
      "CEO(x) ::: x is a CEO.",
      "Harry(x) ::: x is Harry."
    ]
  },
  "102": {
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke spends a lot of time hanging out and playing with his siblings.",
    "logic_predicates": [
      "Twin(x) ::: x is a twin.",
      "Triplet(x) ::: x is a triplet.",
      "SpendTimeWith(x, y) ::: x spends a lot of time hanging out with and playing with y.",
      "Sibling(x, y) ::: x has a sibling y.",
      "SameAge(x, y) ::: x and y are the same age.",
      "Complain(x) ::: x complains often about annoying siblings.",
      "LiveAtHome(x) ::: x lives at home regularly.",
      "DevelopBonds(x, y) ::: x develops strong bonds with y."
    ]
  },
  "103": {
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke complains often about annoying siblings.",
    "logic_predicates": [
      "Twin(x) ::: x is a twin.",
      "Triplet(x) ::: x is a triplet.",
      "SpendTimeWith(x, y) ::: x spends a lot of time hanging out with and playing with y.",
      "Siblings(x, y) ::: x has siblings who are the same age as y.",
      "Complain(x) ::: x complains often about annoying siblings.",
      "LiveAtHome(x) ::: x lives at home regularly.",
      "DevelopBonds(x, y) ::: x develops strong bonds with y."
    ]
  },
  "104": {
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "logic_predicates": [
      "Twin(x) ::: x is a twin.",
      "Triplet(x) ::: x is a triplet.",
      "SpendTimeWith(x, y) ::: x spends a lot of time hanging out with and playing with y.",
      "Sibling(x, y) ::: x has a sibling who is the same age as y.",
      "Complain(x) ::: x complains often about annoying siblings.",
      "LiveAtHome(x) ::: x lives at home regularly.",
      "DevelopBonds(x, y) ::: x develops strong bonds with y."
    ]
  },
  "105": {
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "Tom can apply for financial aid from ETS to take the GRE test.",
    "logic_predicates": [
      "Cost(x, y) ::: It costs x dollars to take the GRE test.",
      "ProvideFinancialAid(x, y) ::: ETS provides financial aid to x if y proves economic hardship.",
      "EconomicHardship(x) ::: x is experiencing difficulty caused by having too little money or too few resources.",
      "LiveIn(x, y) ::: x lives in y.",
      "OutOfWork(x, y) ::: x has been out of work for more than y years."
    ]
  },
  "106": {
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "It cost below US $300 to take the GRE test.",
    "logic_predicates": [
      "Cost(x, y) ::: It costs x to take the GRE test.",
      "ProvideFinancialAid(x) ::: ETS provides financial aid to x.",
      "ProveEconomicHardship(x) ::: x proves economic hardship.",
      "Difficulty(x) ::: x experiences difficulty.",
      "Have(x, y) ::: x has y.",
      "LiveIn(x, y) ::: x lives in y.",
      "SingleParentFamily(x) ::: x is in a single-parent family.",
      "OutOfWork(x, y) ::: x has been out of work for y."
    ]
  },
  "107": {
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "There is no financial aid available for the GRE test.",
    "logic_predicates": [
      "Cost(x, y) ::: It costs x dollars to take the GRE test.",
      "ProvideFinancialAid(x, y) ::: ETS provides financial aid to x if y proves economic hardship.",
      "EconomicHardship(x) ::: x is experiencing economic hardship due to having too little money or too few resources.",
      "LiveIn(x, y) ::: x lives in y.",
      "OutOfWork(x, y) ::: x has been out of work for more than y years."
    ]
  },
  "108": {
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
    "logic_predicates": [
      "SpillFood(x) ::: x spills a lot of food on their clothing.",
      "TidySpaces(x) ::: x tidies their spaces consistently.",
      "EnjoyCleaning(x) ::: x enjoys the process of cleaning.",
      "Foodie(x) ::: x is a foodie.",
      "GoOut(x) ::: x goes out frequently to find new food restaurants to try.",
      "OnlyChild(x) ::: x grew up as an only child with no siblings.",
      "BusyParents(x) ::: x has parents who are very busy with their regular jobs.",
      "HighIncomeHousehold(x) ::: x is a household with a high net income."
    ]
  },
  "109": {
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "logic_predicates": [
      "SpillFood(x) ::: x spills a lot of food on their clothing.",
      "TidySpaces(x) ::: x tidies their spaces consistently.",
      "EnjoyCleaning(x) ::: x enjoys the process of cleaning.",
      "Foodie(x) ::: x is a foodie.",
      "GoOut(x) ::: x goes out frequently to find new food restaurants to try.",
      "OnlyChild(x) ::: x grew up as an only child with no siblings.",
      "BusyParents(x) ::: x has parents who are very busy with their regular jobs.",
      "HighIncomeHousehold(x) ::: x belongs to a household with a high net income."
    ]
  },
  "110": {
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "logic_predicates": [
      "SpillFood(x) ::: x spills a lot of food on their clothing.",
      "TidySpaces(x) ::: x tidies their spaces consistently.",
      "EnjoyCleaning(x) ::: x enjoys the process of cleaning.",
      "Foodie(x) ::: x is a foodie.",
      "GoOut(x) ::: x goes out frequently to find new food restaurants to try.",
      "OnlyChild(x) ::: x grew up as an only child with no siblings.",
      "BusyParents(x) ::: x has parents who are very busy with their regular jobs.",
      "HighIncomeHousehold(x) ::: x belongs to a household with a high net income."
    ]
  },
  "111": {
    "context": [
      "All fir trees are evergreens.",
      "Some objects of worship are fir trees."
    ],
    "question": "Some evergreens are not objects of worship.",
    "logic_predicates": [
      "Evergreen(x) ::: x is an evergreen.",
      "FirTree(x) ::: x is a fir tree.",
      "ObjectOfWorship(x) ::: x is an object of worship."
    ]
  },
  "113": {
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in Texas.",
    "logic_predicates": [
      "MountainRange(x) ::: x is a mountain range.",
      "In(x, y) ::: x is located in y.",
      "Visited(x, y) ::: x visited y.",
      "Donated(x) ::: x was donated.",
      "HasMine(x) ::: x has a mine.",
      "State(x, y) ::: x is in state y."
    ]
  },
  "115": {
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter is shorter than a man in Michael's class.",
    "logic_predicates": [
      "Taller(x, y) ::: x is taller than y.",
      "BlockShooting(x, y) ::: x can block y's shooting.",
      "Man(x) ::: x is a man.",
      "Classmate(x, y) ::: x is a classmate of y.",
      "Shoots(x) ::: x is shooting.",
      "Jump(x) ::: x jumps when shooting.",
      "GreatShooter(x) ::: x is a great shooter.",
      "Shorter(x, y) ::: x is shorter than y.",
      "Explanation:",
      "- Taller(x, y): x is taller than y. (Variables: x, y)",
      "- BlockShooting(x, y): x can block y's shooting. (Variables: x, y)",
      "- Man(x): x is a man. (Variable: x)",
      "- Classmate(x, y): x is a classmate of y. (Variables: x, y)",
      "- Shoots(x): x is shooting. (Variable: x)",
      "- Jump(x): x jumps when shooting. (Variable: x)",
      "- GreatShooter(x): x is a great shooter. (Variable: x)",
      "- Shorter(x, y): x is shorter than y. (Variables: x, y)"
    ]
  },
  "116": {
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Windy is a great shooter.",
    "logic_predicates": [
      "Taller(x, y) ::: x is taller than y.",
      "BlockShooting(x, y) ::: x can block the shooting of y.",
      "Man(x) ::: x is a man.",
      "Classmate(x, y) ::: x is a classmate of y.",
      "Jump(x) ::: x can jump.",
      "Shooter(x) ::: x is a shooter.",
      "GreatShooter(x) ::: x is a great shooter.",
      "CanJump(x) ::: x can jump when shooting.",
      "Blockable(x, y) ::: x can be blocked by y."
    ]
  },
  "117": {
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter can block Windy's shooting.",
    "logic_predicates": [
      "Taller(x, y) ::: x is taller than y.",
      "BlockShooting(x, y) ::: x can block the shooting of y.",
      "Man(x) ::: x is a man.",
      "Classmate(x, y) ::: x is a classmate of y.",
      "Jump(x) ::: x can jump.",
      "Shooter(x) ::: x is a shooter.",
      "GreatShooter(x) ::: x is a great shooter.",
      "CanJump(x) ::: x can jump when shooting."
    ]
  },
  "118": {
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "Barutin is named after all islands in Antarctica.",
    "logic_predicates": [
      "NamedAfter(x, y) ::: x is named after y.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Island(x) ::: x is an island.",
      "Antarctica(x) ::: x is part of Antarctica.",
      "Coast(x, y) ::: x is on the coast of y.",
      "Include(x, y) ::: x includes y."
    ]
  },
  "119": {
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
    "logic_predicates": [
      "NamedAfter(x, y) ::: x is named after y.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Cove(x) ::: x is a cove.",
      "Settlement(x) ::: x is a settlement.",
      "Place(x) ::: x is a place.",
      "Island(x) ::: x is an island.",
      "Antarctica(x) ::: x is Antarctica.",
      "Bulgaria(x) ::: x is Bulgaria.",
      "Explanation:",
      "- NamedAfter(x, y): x is named after y. Variables: x (entity being named), y (entity being named after).",
      "- LocatedIn(x, y): x is located in y. Variables: x (entity being located), y (location).",
      "- Cove(x): x is a cove. Variable: x (cove).",
      "- Settlement(x): x is a settlement. Variable: x (settlement).",
      "- Place(x): x is a place. Variable: x (place).",
      "- Island(x): x is an island. Variable: x (island).",
      "- Antarctica(x): x is Antarctica. Variable: x (Antarctica).",
      "- Bulgaria(x): x is Bulgaria. Variable: x (Bulgaria)."
    ]
  },
  "120": {
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "Barutin is not located in Antarctica.",
    "logic_predicates": [
      "NamedAfter(x, y) ::: x is named after y.",
      "LocatedIn(x, y) ::: x is located in y.",
      "On(x, y) ::: x is on y.",
      "PartOf(x, y) ::: x is part of y.",
      "Antarctica(x) ::: x is Antarctica."
    ]
  },
  "121": {
    "context": [
      "Some affection is love.",
      "Some love is positive."
    ],
    "question": "Some affection is positive.",
    "logic_predicates": [
      "Love(x, y) ::: x loves y.",
      "Affection(x) ::: x is affection.",
      "Positive(x) ::: x is positive."
    ]
  },
  "122": {
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "Greyhound is an airline.",
    "logic_predicates": [
      "Transport(x) ::: x can transport multiple passengers.",
      "Empty(x) ::: x is empty.",
      "Airline(x) ::: x is an airline.",
      "Plane(x) ::: x is a plane.",
      "Boeing707(x) ::: x is a Boeing 707.",
      "Greyhound(x) ::: x is Greyhound."
    ]
  },
  "123": {
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "A Greyhound is a Boeing 707.",
    "logic_predicates": [
      "Transport(x) ::: x can transport multiple passengers.",
      "Empty(x) ::: x is empty.",
      "Airline(x) ::: x is an airline.",
      "Plane(x) ::: x is a plane.",
      "Boeing707(x) ::: x is a Boeing 707.",
      "Greyhound(x) ::: x is a Greyhound."
    ]
  },
  "124": {
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "A Greyhound is not a Boeing 707.",
    "logic_predicates": [
      "Transport(x) ::: x can transport multiple passengers.",
      "Empty(x) ::: x is empty.",
      "Airline(x) ::: x is an airline.",
      "Plane(x) ::: x is a plane.",
      "Boeing707(x) ::: x is a Boeing 707.",
      "Greyhound(x) ::: x is a Greyhound."
    ]
  },
  "126": {
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock has wings.",
    "logic_predicates": [
      "Mammal(x) ::: x is a mammal.",
      "Animal(x) ::: x is an animal.",
      "Monkey(x) ::: x is a monkey.",
      "Bird(x) ::: x is a bird.",
      "Fly(x) ::: x can fly.",
      "Breathe(x) ::: x breathes.",
      "HasWings(x) ::: x has wings."
    ]
  },
  "127": {
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock does not have wings.",
    "logic_predicates": [
      "Mammal(x) ::: x is a mammal.",
      "Animal(x) ::: x is an animal.",
      "Monkey(x) ::: x is a monkey.",
      "Bird(x) ::: x is a bird.",
      "Fly(x) ::: x can fly.",
      "Breathe(x) ::: x breathes.",
      "HasWings(x) ::: x has wings."
    ]
  },
  "128": {
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has a wedding that is well-attended.",
    "logic_predicates": [
      "HaveWedding(x) ::: x has a wedding.",
      "HaveChild(x) ::: x has at least one child.",
      "TravelToParis(x) ::: x travels to Paris for their honeymoon.",
      "InJuly(x) ::: x occurs in July.",
      "WellAttended(x) ::: x is well-attended.",
      "BelongTo(x, y) ::: x belongs to y.",
      "John ::: Constant symbol representing a person named John.",
      "Explanation:",
      "- HaveWedding(x): x is a person who has a wedding.",
      "- HaveChild(x): x is a person who has at least one child.",
      "- TravelToParis(x): x is a person who travels to Paris for their honeymoon.",
      "- InJuly(x): x is an event that occurs in July.",
      "- WellAttended(x): x is an event that is well-attended.",
      "- BelongTo(x, y): x belongs to y, where x is a wedding and y is a person.",
      "- John: Constant symbol representing a specific person named John."
    ]
  },
  "129": {
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John does not have a wedding that is well-attended.",
    "logic_predicates": [
      "HaveWedding(x) ::: x has a wedding.",
      "HaveChild(x) ::: x has at least one child.",
      "TravelToParis(x) ::: x travels to Paris for their honeymoon.",
      "WellAttended(x) ::: x's wedding is well-attended.",
      "JulyWedding(x) ::: x's wedding occurs in July.",
      "Attend(x) ::: x attends an event.",
      "John ::: Constant representing the person John."
    ]
  },
  "130": {
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has at least one child.",
    "logic_predicates": [
      "HaveWedding(x) ::: x has a wedding.",
      "HaveChild(x) ::: x has at least one child.",
      "TravelToParis(x) ::: x travels to Paris for their honeymoon.",
      "InJuly(x) ::: x occurs in July.",
      "WellAttended(x) ::: x is well-attended.",
      "John(x) ::: x is John."
    ]
  },
  "131": {
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "logic_predicates": [
      "HaveWedding(x) ::: x has a wedding.",
      "HaveChild(x) ::: x has at least one child.",
      "TravelToParisForHoneymoon(x) ::: x travels to Paris for their honeymoon.",
      "BelongTo(x, y) ::: x belongs to y.",
      "WellAttended(x) ::: x's wedding is well-attended.",
      "JulyWedding(x) ::: x has a wedding in July."
    ]
  },
  "132": {
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypus are mammals with no teeth.",
    "logic_predicates": [
      "HaveTeeth(x) ::: x has teeth.",
      "Mammal(x) ::: x is a mammal.",
      "Platypus(x) ::: x is a platypus.",
      "Human(x) ::: x is a human."
    ]
  },
  "133": {
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypus are reptiles.",
    "logic_predicates": [
      "HaveTeeth(x) ::: x has teeth.",
      "Mammal(x) ::: x is a mammal.",
      "Platypus(x) ::: x is a platypus.",
      "Human(x) ::: x is a human.",
      "Reptile(x) ::: x is a reptile."
    ]
  },
  "134": {
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Humans are mammals.",
    "logic_predicates": [
      "HaveTeeth(x) ::: x has teeth.",
      "Mammal(x) ::: x is a mammal.",
      "Platypus(x) ::: x is a platypus.",
      "Human(x) ::: x is a human."
    ]
  },
  "135": {
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space sucks.",
    "logic_predicates": [
      "Suck(x) ::: x sucks.",
      "Plunger(x) ::: x is a plunger.",
      "Vacuum(x) ::: x is a vacuum.",
      "Vampire(x) ::: x is a vampire.",
      "Space(x) ::: x is space.",
      "HouseholdAppliance(x) ::: x is a household appliance.",
      "Duster(x) ::: x is a duster.",
      "Natural Language Problem:",
      "John is a teacher.",
      "All teachers are hardworking.",
      "Some hardworking people are successful.",
      "Natural Language Question:",
      "John is successful.",
      "###"
    ]
  },
  "136": {
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space is a vampire.",
    "logic_predicates": [
      "Suck(x) ::: x sucks.",
      "Plunger(x) ::: x is a plunger.",
      "Vacuum(x) ::: x is a vacuum.",
      "Vampire(x) ::: x is a vampire.",
      "Space(x) ::: x is space.",
      "Duster(x) ::: x is a duster.",
      "HouseholdAppliance(x) ::: x is a household appliance.",
      "Natural Language Problem:",
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck.",
      "Natural Language Question:",
      "Space is a vampire.",
      "###"
    ]
  },
  "137": {
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "If something is a household appliance, it sucks.",
    "logic_predicates": [
      "Suck(x) ::: x sucks.",
      "Plunger(x) ::: x is a plunger.",
      "Vacuum(x) ::: x is a vacuum.",
      "Vampire(x) ::: x is a vampire.",
      "Space(x) ::: x is space.",
      "HouseholdAppliance(x) ::: x is a household appliance.",
      "Duster(x) ::: x is a duster."
    ]
  },
  "140": {
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is loved by children.",
    "logic_predicates": [
      "Funny(x) ::: x is a funny cartoon character.",
      "Popular(x) ::: x is a popular cartoon character.",
      "Ugly(x) ::: x is an ugly cartoon character.",
      "LovedByChildren(x) ::: x is loved by children.",
      "FromTheSimpsons(x) ::: x is a character from The Simpsons.",
      "Yellow(x) ::: x is a yellow cartoon character."
    ]
  },
  "141": {
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is ugly or yellow.",
    "logic_predicates": [
      "Popular(x) ::: x is popular.",
      "Funny(x) ::: x is funny.",
      "Ugly(x) ::: x is ugly.",
      "LovedByChildren(x) ::: x is loved by children.",
      "FromTheSimpsons(x) ::: x is from The Simpsons.",
      "Yellow(x) ::: x is yellow.",
      "Ben(x) ::: x is Ben."
    ]
  },
  "142": {
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
    "logic_predicates": [
      "Popular(x) ::: x is popular.",
      "Funny(x) ::: x is funny.",
      "Ugly(x) ::: x is ugly.",
      "LovedByChildren(x) ::: x is loved by children.",
      "FromTheSimpsons(x) ::: x is from The Simpsons.",
      "Yellow(x) ::: x is yellow.",
      "Ben(x) ::: x is Ben."
    ]
  },
  "143": {
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
      "[BG] Heck cattle are animals.",
      "[BG] Aurochs are animals.",
      "Some animals to be bred-back resemble animals that are extinct."
    ],
    "question": "Some Heck cattle are artificially selected.",
    "logic_predicates": [
      "ArtificialSelection(x) ::: x is a form of artificial selection.",
      "SelectiveBreeding(x, y) ::: x is the deliberate selective breeding of y.",
      "DomesticAnimal(x) ::: x is a domestic animal.",
      "BreedingBack(x) ::: x is breeding back.",
      "Resemble(x, y) ::: x resembles y.",
      "HeckCattle(x) ::: x is Heck cattle.",
      "Aurochs(x) ::: x is an aurochs.",
      "Extinct(x) ::: x is extinct.",
      "Animal(x) ::: x is an animal."
    ]
  },
  "144": {
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
      "[BG] Heck cattle are animals.",
      "[BG] Aurochs are animals.",
      "Some animals to be bred-back resemble animals that are extinct."
    ],
    "question": "Aurochs are extinct.",
    "logic_predicates": [
      "BredBack(x) ::: x is a form of artificial selection by deliberate selective breeding of domestic animals.",
      "SelectiveBreeding(x) ::: x is the deliberate selective breeding of domestic animals.",
      "DomesticAnimal(x) ::: x is a domestic animal.",
      "HeckCattle(x) ::: x is Heck cattle.",
      "Resemble(x, y) ::: x resembles y.",
      "Aurochs(x) ::: x is an aurochs.",
      "Extinct(x) ::: x is extinct.",
      "Animal(x) ::: x is an animal."
    ]
  },
  "145": {
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Jerry is young.",
    "logic_predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager.",
      "Explanation:",
      "- Student(x): x represents a student.",
      "- Human(x): x represents a human.",
      "- Studies(x): x represents someone who studies.",
      "- Teaches(x): x represents someone who teaches.",
      "- Young(x): x represents a young person.",
      "- Manager(x): x represents a manager."
    ]
  },
  "146": {
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Jerry is not young.",
    "logic_predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager.",
      "Explanation:",
      "- Student(x): x represents a student.",
      "- Human(x): x represents a human.",
      "- Studies(x): x represents someone who studies.",
      "- Teaches(x): x represents someone who teaches.",
      "- Young(x): x represents a young person.",
      "- Manager(x): x represents a manager."
    ]
  },
  "147": {
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Rose is a human or a manager.",
    "logic_predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is a young person.",
      "Manager(x) ::: x is a manager."
    ]
  },
  "148": {
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Rose is a human or Jerry is a manager.",
    "logic_predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is a young person.",
      "Manager(x) ::: x is a manager."
    ]
  },
  "149": {
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "It is not true that Rose is a student and Jerry is a human.",
    "logic_predicates": [
      "Human(x) ::: x is a human.",
      "Student(x) ::: x is a student.",
      "Study(x) ::: x studies.",
      "Teach(x) ::: x teaches.",
      "Young(x) ::: x is a young person.",
      "Manager(x) ::: x is a manager."
    ]
  },
  "150": {
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Neapolitan Chronicles is an English book.",
    "logic_predicates": [
      "Specialize(x, y) ::: x specializes in translating y into English.",
      "PublishedBy(x, y) ::: x is published by y.",
      "Book(x) ::: x is a book.",
      "TranslatedFrom(x, y) ::: x is translated from language y."
    ]
  },
  "151": {
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Harry Potter was published by New Vessel Press.",
    "logic_predicates": [
      "Specialize(x, y) ::: x specializes in translating foreign literature into y.",
      "PublishedBy(x, y) ::: x is published by y.",
      "Book(x) ::: x is a book.",
      "TranslatedFrom(x, y) ::: x is translated from language y."
    ]
  },
  "152": {
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Palace of Flies was translated from Italian.",
    "logic_predicates": [
      "PublishedBy(x, y) ::: x is published by y.",
      "SpecializesIn(x, y) ::: x specializes in y.",
      "TranslatedFrom(x, y) ::: x is translated from language y.",
      "Book(x) ::: x is a book.",
      "InLanguage(x, y) ::: x is in language y."
    ]
  },
  "153": {
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "Remy visits the office supply store regularly.",
    "logic_predicates": [
      "Owns(x, y) ::: x owns y.",
      "LargeDesktopMonitor(x) ::: x owns a large desktop monitor at their home.",
      "WorkRegularly(x) ::: x works regularly.",
      "WorkOften(x) ::: x works often.",
      "HomeOffice(x) ::: x has a fully stocked and impressive home office.",
      "TidyOrganize(x) ::: x spends their free time tidying and organizing the spaces in their home.",
      "VisitStore(x) ::: x visits the office supply store regularly.",
      "GoToBedLate(x) ::: x goes to bed late.",
      "WakeUpLate(x) ::: x wakes up every day after noon."
    ]
  },
  "154": {
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "logic_predicates": [
      "Owns(x, y) ::: x owns y.",
      "LargeDesktopMonitor(x) ::: x owns a large desktop monitor at their home.",
      "WorkRegularly(x) ::: x works regularly.",
      "WorkOften(x) ::: x works often.",
      "Home(x) ::: x is at home.",
      "FullyStocked(x) ::: x has a fully stocked home office.",
      "Impressive(x) ::: x has an impressive home office.",
      "Tidy(x) ::: x tidies and organizes the spaces in their home.",
      "VisitStore(x) ::: x visits the office supply store regularly.",
      "GoToBedLate(x) ::: x goes to bed late.",
      "WakeUpLate(x) ::: x wakes up every day after noon."
    ]
  },
  "155": {
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "logic_predicates": [
      "Owns(x, y) ::: x owns y at their home.",
      "Work(x) ::: x works regularly and often at home.",
      "HomeOffice(x) ::: x has a fully stocked and impressive home office.",
      "Tidy(x) ::: x spends their free time tidying and organizing the spaces in their home.",
      "VisitStore(x) ::: x visits the office supply store regularly.",
      "Late(x) ::: x goes to bed late.",
      "WakeUpLate(x) ::: x wakes up every day after noon.",
      "Remy(x) ::: x is Remy."
    ]
  },
  "156": {
    "context": [
      "All humans are mortal.",
      "All Greeks are humans."
    ],
    "question": "Some Greeks are mortal.",
    "logic_predicates": [
      "Mortal(x) ::: x is mortal.",
      "Human(x) ::: x is a human.",
      "Greek(x) ::: x is a Greek."
    ]
  },
  "157": {
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James has a part-time job offered by the university.",
    "logic_predicates": [
      "LibraryWorker(x) ::: x is a student who works in the library.",
      "ComputerScienceStudent(x) ::: x is a student from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "DatabaseCourseStudent(x) ::: x is a student taking the database course.",
      "Instructed(x, y) ::: x is instructed by professor y.",
      "LabWorker(x) ::: x is a student working in the lab."
    ]
  },
  "158": {
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James does not have a part-time job offered by the university.",
    "logic_predicates": [
      "LibraryWorker(x) ::: x is a student who works in the library.",
      "CSDeptStudent(x) ::: x is a student from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "DatabaseCourseStudent(x) ::: x is a student taking the database course.",
      "Instructed(x, y) ::: x is instructed by professor y.",
      "LabWorker(x) ::: x is a student working in the lab."
    ]
  },
  "159": {
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James either takes the database course or has a part-time job offered by the university.",
    "logic_predicates": [
      "LibraryWorker(x) ::: x is a student who works in the library.",
      "CSDeptStudent(x) ::: x is a student from the computer science department.",
      "PartTimeJobStudent(x) ::: x is a student who has a part-time job offered by the university.",
      "DatabaseCourseStudent(x) ::: x is a student who takes the database course.",
      "Instructed(x, y) ::: x is instructed by professor y.",
      "LabWorker(x) ::: x is a student working in the lab."
    ]
  },
  "160": {
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "Jack takes the database course.",
    "logic_predicates": [
      "LibraryWorker(x) ::: x is a student who works in the library.",
      "CSStudent(x) ::: x is a student from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "DatabaseCourse(x) ::: x is taking the database course.",
      "Instructed(x, y) ::: x is instructed by professor y.",
      "LabWorker(x) ::: x is a student working in the lab."
    ]
  },
  "161": {
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George likes music and has access to a program, he will compose.",
    "logic_predicates": [
      "Likes(x, y) ::: x likes y.",
      "WantsToCompose(x) ::: x wants to compose.",
      "HasAccess(x, y) ::: x has access to y.",
      "CanCompose(x) ::: x can compose.",
      "WillCompose(x) ::: x will compose."
    ]
  },
  "162": {
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George will not compose, George can not compose.",
    "logic_predicates": [
      "Likes(x, y) ::: x likes y.",
      "WantsToCompose(x) ::: x wants to compose.",
      "HasAccess(x, y) ::: x has access to y.",
      "CanCompose(x) ::: x can compose.",
      "WillCompose(x) ::: x will compose."
    ]
  },
  "163": {
    "context": [
      "A hawk never lands. ",
      "Some birds are hawks."
    ],
    "question": "All birds land",
    "logic_predicates": [
      "Hawk(x) ::: x is a hawk.",
      "Bird(x) ::: x is a bird.",
      "Lands(x) ::: x lands."
    ]
  },
  "164": {
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is on Monday at 8 pm.",
    "logic_predicates": [
      "Given(x, y) ::: x is given out on TV at time y.",
      "Roses(x) ::: x is a rose.",
      "On(x, y) ::: x is on TV show y.",
      "Bachelor(x) ::: x is on the Bachelor.",
      "Portray(x, y) ::: x portrays the lives of y.",
      "RealPeople(x) ::: x is a real person.",
      "RealityTVShow(x) ::: x is a reality TV show.",
      "Show(x) ::: x is a TV show.",
      "BreakingBad(x) ::: x is Breaking Bad.",
      "Monday(x) ::: x is on Monday.",
      "Time(x, y) ::: x is at time y.",
      "8pm(x) ::: x is at 8 pm."
    ]
  },
  "165": {
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "logic_predicates": [
      "Given(x, y) ::: x is given out on TV at y.",
      "Roses(x) ::: x is a rose.",
      "On(x, y) ::: x is on y.",
      "TVShow(x) ::: x is a TV show.",
      "Monday(x) ::: x is Monday.",
      "Time(x, y) ::: x is at y.",
      "Bachelor(x) ::: x is the Bachelor.",
      "Portray(x, y) ::: x portrays the lives of y.",
      "RealPeople(x) ::: x is a real person.",
      "RealityTVShow(x) ::: x is a reality TV show.",
      "Not(x, y) ::: x is not y.",
      "BreakingBad(x) ::: x is Breaking Bad."
    ]
  },
  "166": {
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "logic_predicates": [
      "Given(x, y) ::: x is given out on TV at time y.",
      "Roses(x) ::: x is a rose.",
      "TVShow(x) ::: x is a TV show.",
      "Bachelor(x) ::: x is on the Bachelor.",
      "Portray(x, y) ::: x portrays the lives of y.",
      "RealPeople(x) ::: x is a real person.",
      "RealityTVShow(x) ::: x is a reality TV show.",
      "BreakingBad(x) ::: x is Breaking Bad.",
      "Monday(x) ::: x is on Monday.",
      "Time(x) ::: x is at time y.",
      "At(x, y) ::: x is at time y."
    ]
  },
  "167": {
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Heinrich Schmidt was either German or Russian.",
    "logic_predicates": [
      "German(x) ::: x is German.",
      "Nazi(x) ::: x is a Nazi.",
      "Politician(x) ::: x is a politician.",
      "Member(x, y) ::: x is a member of y."
    ]
  },
  "168": {
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "logic_predicates": [
      "NaziGermanPolitician(x) ::: x is a Nazi German politician.",
      "MemberOf(x, y) ::: x is a member of y.",
      "PrussianStateParliament(x) ::: x is a member of the Prussian State Parliament.",
      "NaziReichstag(x) ::: x is a member of the Nazi Reichstag."
    ]
  },
  "169": {
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "No politicans are part of the Nazi Reichstag.",
    "logic_predicates": [
      "Nazi(x) ::: x is a Nazi German politician.",
      "Member(x, y) ::: x is a member of y.",
      "Politician(x) ::: x is a politician.",
      "Reichstag(x) ::: x is the Nazi Reichstag."
    ]
  },
  "170": {
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "Colorectal cancer is a severe cancer",
    "logic_predicates": [
      "DeadlyDisease(x) ::: x is a deadly disease.",
      "LowSurvivalRate(x) ::: x has a low survival rate.",
      "SevereCancer(x) ::: x is a severe cancer.",
      "BileDuctCancer(x) ::: x is a bile duct cancer.",
      "Cholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.",
      "MildFlu(x) ::: x has mild flu.",
      "ColorectalCancer(x) ::: x is a colorectal cancer.",
      "Explanation:",
      "- DeadlyDisease(x): x represents a disease that is deadly.",
      "- LowSurvivalRate(x): x represents a condition with a low survival rate.",
      "- SevereCancer(x): x represents a type of cancer that is severe.",
      "- BileDuctCancer(x): x represents a type of cancer that affects the bile duct.",
      "- Cholangiocarcinoma(x): x represents a specific type of cancer called Cholangiocarcinoma.",
      "- MildFlu(x): x represents a condition of mild flu.",
      "- ColorectalCancer(x): x represents a type of cancer that affects the colon or rectum."
    ]
  },
  "172": {
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "logic_predicates": [
      "DeadlyDisease(x) ::: x is a deadly disease.",
      "LowSurvivalRate(x) ::: x has a low survival rate.",
      "SevereCancer(x) ::: x is a severe cancer.",
      "BileDuctCancer(x) ::: x is a bile duct cancer.",
      "Cholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.",
      "MildFlu(x) ::: x has mild flu.",
      "ColorectalCancer(x) ::: x is colorectal cancer.",
      "Explanation:",
      "- DeadlyDisease(x): x represents a disease that is deadly.",
      "- LowSurvivalRate(x): x indicates a condition or disease with a low survival rate.",
      "- SevereCancer(x): x denotes a type of cancer that is severe.",
      "- BileDuctCancer(x): x represents cancer specifically in the bile duct.",
      "- Cholangiocarcinoma(x): x represents a specific type of cancer called Cholangiocarcinoma.",
      "- MildFlu(x): x represents a mild flu condition.",
      "- ColorectalCancer(x): x represents cancer in the colon or rectum."
    ]
  },
  "173": {
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor eats salads regularly.",
    "logic_predicates": [
      "EatSalad(x) ::: x eats salads regularly.",
      "Conscious(x) ::: x is very conscious about their health and eating habits.",
      "GrewUpHealthConscious(x) ::: x grew up in health-conscious childhood homes.",
      "FulfillNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.",
      "GoodRelationship(x, y) ::: x has a good relationship with y.",
      "VisitGym(x) ::: x visits the gym at least once a day.",
      "Taylor(x) ::: x is Taylor."
    ]
  },
  "174": {
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor visits the gym at least once a day.",
    "logic_predicates": [
      "EatSalad(x) ::: x eats salads regularly.",
      "Conscious(x) ::: x is very conscious about their health and eating habits.",
      "GrewUpHealthConscious(x) ::: x grew up in health-conscious childhood homes.",
      "FulfillNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.",
      "GoodRelationship(x, y) ::: x has a good relationship with y.",
      "VisitGym(x) ::: x visits the gym at least once a day.",
      "Taylor ::: Constant representing Taylor.",
      "Explanation:",
      "- EatSalad(x): x is a person who eats salads regularly.",
      "- Conscious(x): x is very conscious about their health and eating habits.",
      "- GrewUpHealthConscious(x): x grew up in health-conscious childhood homes.",
      "- FulfillNutritionalIntake(x): x fulfills their nutritional daily intakes.",
      "- GoodRelationship(x, y): x has a good relationship with y.",
      "- VisitGym(x): x visits the gym at least once a day.",
      "- Taylor: Constant representing Taylor."
    ]
  },
  "175": {
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "logic_predicates": [
      "EatSalad(x) ::: x eats salads regularly.",
      "Conscious(x) ::: x is very conscious about their health and eating habits.",
      "GrewUpHealthConscious(x) ::: x grew up in a health-conscious childhood home.",
      "FulfillNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.",
      "GoodRelationship(x, y) ::: x has a good relationship with y.",
      "VisitGym(x) ::: x visits the gym at least once a day.",
      "Taylor(x) ::: x is Taylor."
    ]
  },
  "176": {
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The world championships is a sporting event.",
    "logic_predicates": [
      "SportingEvent(x) ::: x is a sporting event.",
      "OlympicGames(x) ::: x is the Olympic games.",
      "LastOlympicGames(x) ::: x is the last Olympic games.",
      "Location(x, y) ::: x was held in y.",
      "WonMostMedals(x, y) ::: x won the most medals in y.",
      "Explanation:",
      "- Variable x in SportingEvent(x) represents an event that is related to sports.",
      "- Variable x in OlympicGames(x) represents the Olympic games event.",
      "- Variable x in LastOlympicGames(x) represents the last occurrence of the Olympic games event.",
      "- Variable x in Location(x, y) represents the location x where the event y was held.",
      "- Variables x and y in WonMostMedals(x, y) represent the entity x that won the most medals in the event y."
    ]
  },
  "177": {
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The last Olympic games were not in Tokyo.",
    "logic_predicates": [
      "SportingEvent(x) ::: x is a sporting event.",
      "OlympicGames(x) ::: x is the Olympic games.",
      "Last(x) ::: x is the last event.",
      "In(x, y) ::: x was in y.",
      "WonMostMedals(x, y) ::: x won the most medals in y."
    ]
  },
  "178": {
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The United States won the most medals in the last Olympic games.",
    "logic_predicates": [
      "SportingEvent(x) ::: x is a sporting event.",
      "OlympicGames(x) ::: x is the Olympic games.",
      "LastOlympicGames(x) ::: x is the last Olympic games.",
      "Location(x, y) ::: x was held in location y.",
      "WonMostMedals(x, y) ::: x won the most medals in event y."
    ]
  },
  "179": {
    "context": [
      "All horses have hooves.",
      "No humans have hooves."
    ],
    "question": "Some humans are horses.",
    "logic_predicates": [
      "Hooves(x) ::: x has hooves.",
      "Horses(x) ::: x is a horse.",
      "Humans(x) ::: x is a human."
    ]
  },
  "180": {
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be the same airport.",
      "John flies from LGA airport."
    ],
    "question": "Susan flies from LGA airport.",
    "logic_predicates": [
      "Flies(x, y) ::: x flies to airport y.",
      "SameAirport(x, y) ::: x and y are the same airport."
    ]
  },
  "181": {
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be the same airport.",
      "John flies from LGA airport."
    ],
    "question": "John flies to LGA airport.",
    "logic_predicates": [
      "Flies(x, y) ::: x flies to airport y.",
      "SameAirport(x, y) ::: x and y are the same airport."
    ]
  },
  "182": {
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is a grumpy person.",
    "logic_predicates": [
      "NiceToAnimals(x) ::: x is nice to animals.",
      "MeanToAnimals(x) ::: x is mean to animals.",
      "Grumpy(x) ::: x is grumpy.",
      "AnimalLover(x) ::: x loves animals.",
      "OwnsPet(x) ::: x owns a pet.",
      "PetOwner(x) ::: x is a pet owner."
    ]
  },
  "183": {
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is not a grumpy person and mean to animals.",
    "logic_predicates": [
      "NiceTo(x, y) ::: x is nice to y.",
      "MeanTo(x, y) ::: x is mean to y.",
      "Grumpy(x) ::: x is grumpy.",
      "AnimalLover(x) ::: x is an animal lover.",
      "Owns(x, y) ::: x owns y.",
      "Love(x, y) ::: x loves y.",
      "Pet(x) ::: x is a pet."
    ]
  },
  "184": {
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "logic_predicates": [
      "NiceTo(x, y) ::: x is nice to y.",
      "MeanTo(x, y) ::: x is mean to y.",
      "Grumpy(x) ::: x is grumpy.",
      "AnimalLover(x) ::: x loves animals.",
      "Owns(x, y) ::: x owns y.",
      "Pet(x) ::: x is a pet."
    ]
  },
  "185": {
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Dani Shapiro is a novel writer.",
    "logic_predicates": [
      "American(x) ::: x is American.",
      "BornInCity(x, y) ::: x is born in city y.",
      "Novel(x) ::: x is a novel.",
      "WrittenBy(x, y) ::: x is written by y.",
      "NovelWriter(x) ::: x is a novel writer.",
      "Writer(x) ::: x is a writer.",
      "CreatedPodcast(x, y) ::: x created a podcast called y.",
      "Podcast(x) ::: x is a podcast."
    ]
  },
  "186": {
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Family Secrets is a novel.",
    "logic_predicates": [
      "NotNovel(x) ::: x is not a novel.",
      "BornInCity(x, y) ::: x is born in city y.",
      "American(x) ::: x is American.",
      "Novel(x) ::: x is a novel.",
      "WrittenBy(x, y) ::: x is written by y.",
      "Writer(x) ::: x is a writer.",
      "CreatedPodcast(x, y) ::: x created a podcast called y."
    ]
  },
  "187": {
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Dani Shapiro was born in Boston.",
    "logic_predicates": [
      "American(x) ::: x is American.",
      "BornInCity(x, y) ::: x is born in city y.",
      "Novel(x) ::: x is a novel.",
      "WrittenBy(x, y) ::: x is written by y.",
      "NovelWriter(x) ::: x is a novel writer.",
      "Writer(x) ::: x is a writer.",
      "CreatedPodcast(x, y) ::: x created a podcast called y.",
      "Podcast(x) ::: x is a podcast."
    ]
  },
  "188": {
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is an American.",
    "logic_predicates": [
      "American(x) ::: x is American.",
      "BasketballPlayer(x) ::: x is a basketball player.",
      "Tall(x) ::: x is tall.",
      "LargeShoes(x) ::: x wears large shoes.",
      "LargeClothes(x) ::: x wears large-sized clothes.",
      "Explanation:",
      "- American(x): x represents a person who is American.",
      "- BasketballPlayer(x): x represents a person who is a basketball player.",
      "- Tall(x): x represents a person who is tall.",
      "- LargeShoes(x): x represents a person who wears large shoes.",
      "- LargeClothes(x): x represents a person who wears large-sized clothes."
    ]
  },
  "189": {
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is not an American basketball player.",
    "logic_predicates": [
      "NotAmerican(x) ::: x is not American.",
      "BasketballPlayer(x) ::: x is a basketball player.",
      "Tall(x) ::: x is tall.",
      "WearsLargeShoes(x) ::: x wears large shoes.",
      "WearsLargeClothes(x) ::: x wears large-sized clothes."
    ]
  },
  "190": {
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is an American basketball player.",
    "logic_predicates": [
      "NotAmerican(x) ::: x is not American.",
      "BasketballPlayer(x) ::: x is a basketball player.",
      "Tall(x) ::: x is tall.",
      "WearLargeShoes(x) ::: x wears large shoes.",
      "WearLargeClothes(x) ::: x wears large-sized clothes.",
      "American(x) ::: x is American.",
      "Explanation:",
      "- NotAmerican(x): x is a person who is not American.",
      "- BasketballPlayer(x): x is a basketball player.",
      "- Tall(x): x is a tall person.",
      "- WearLargeShoes(x): x wears large shoes.",
      "- WearLargeClothes(x): x wears large-sized clothes.",
      "- American(x): x is an American person."
    ]
  },
  "191": {
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "logic_predicates": [
      "NotAmerican(x) ::: x is not American.",
      "BasketballPlayer(x) ::: x is a basketball player.",
      "Tall(x) ::: x is tall.",
      "WearsLargeShoes(x) ::: x wears large shoes.",
      "WearsLargeClothes(x) ::: x wears large-sized clothes.",
      "American(x) ::: x is American.",
      "Explanation:",
      "- NotAmerican(x): x represents a person who is not American.",
      "- BasketballPlayer(x): x represents a basketball player.",
      "- Tall(x): x represents a person who is tall.",
      "- WearsLargeShoes(x): x represents a person who wears large shoes.",
      "- WearsLargeClothes(x): x represents a person who wears large-sized clothes.",
      "- American(x): x represents a person who is American."
    ]
  },
  "192": {
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "logic_predicates": [
      "NotAmerican(x) ::: x is not American.",
      "BasketballPlayer(x) ::: x is a basketball player.",
      "Tall(x) ::: x is tall.",
      "WearLargeShoes(x) ::: x wears large shoes.",
      "WearLargeClothes(x) ::: x wears large-sized clothes.",
      "Yuri ::: Constant representing a person named Yuri."
    ]
  },
  "193": {
    "context": [
      "Events are either happy or sad.",
      "At least one event is happy. "
    ],
    "question": "All events are sad.",
    "logic_predicates": [
      "Happy(x) ::: x is a happy event.",
      "Sad(x) ::: x is a sad event."
    ]
  },
  "194": {
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "logic_predicates": [
      "Winner(x, y) ::: x is the winner of the y event.",
      "Participant(x, y) ::: x participated in the y event.",
      "Tie(x) ::: x is in a tie.",
      "From(x, y) ::: x is from country y.",
      "OnLeaderboard(x, y) ::: x is on the leaderboard of event y.",
      "belongsTo(x, y) ::: x belongs to group y."
    ]
  },
  "195": {
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "logic_predicates": [
      "Winner(x, y) ::: x is the winner of the tournament y.",
      "Participant(x, y) ::: x participated in the tournament y.",
      "LeaderboardTie(x) ::: x is in a tie on the leaderboard.",
      "From(x, y) ::: x is from country y.",
      "OnLeaderboard(x, y) ::: x is on the leaderboard of tournament y.",
      "Belgium(x) ::: x is from Belgium.",
      "Tournament(x) ::: x is a tournament."
    ]
  },
  "196": {
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi is terricolous.",
    "logic_predicates": [
      "Barks(x) ::: x is an animal that barks.",
      "Likes(x, y) ::: x likes y.",
      "Dogs(x) ::: x is a dog.",
      "Jumps(x) ::: x is an animal that jumps.",
      "HasLegs(x) ::: x is an animal that has legs.",
      "Terricolous(x) ::: x is an animal that is terricolous.",
      "KiKi ::: Constant representing a specific animal named KiKi."
    ]
  },
  "197": {
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi barks and is a dog.",
    "logic_predicates": [
      "Barks(x) ::: x is an animal that barks.",
      "Likes(x, y) ::: x likes y.",
      "Dog(x) ::: x is a dog.",
      "Jumps(x) ::: x is an animal that jumps.",
      "HasLegs(x) ::: x is an animal that has legs.",
      "Terricolous(x) ::: x is an animal that is terricolous."
    ]
  },
  "198": {
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi neither barks nor is a dog.",
    "logic_predicates": [
      "Barks(x) ::: x is an animal that barks.",
      "Likes(x, y) ::: x likes y.",
      "Dogs(x) ::: x is a dog.",
      "Jumps(x) ::: x is an animal that jumps.",
      "HasLegs(x) ::: x is an animal that has legs.",
      "Terricolous(x) ::: x is an animal that is terricolous.",
      "KiKi ::: KiKi is an animal."
    ]
  },
  "199": {
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "No one playing for Nautico is Brazilian.",
    "logic_predicates": [
      "Brazilian(x) ::: x is Brazilian.",
      "KnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedOutTo(x, y) ::: x was loaned out to y.",
      "PlaysFor(x, y) ::: x plays for y.",
      "Club(x) ::: x is a football club.",
      "SameClub(x, y) ::: x and y are in the same football club."
    ]
  },
  "200": {
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva foes not play for a football club.",
    "logic_predicates": [
      "PlaysFor(x, y) ::: x plays for football club y.",
      "BornIn(x, y) ::: x is born in year y.",
      "KnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanOut(x, y) ::: x is loaned out to football club y.",
      "Brazilian(x) ::: x is a Brazilian person.",
      "Club(x) ::: x is a football club."
    ]
  },
  "201": {
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton was not loaned out to a football club.",
    "logic_predicates": [
      "Loan(x, y) ::: x was loaned out to football club y.",
      "Player(x) ::: x is a football player.",
      "Brazilian(x) ::: x is Brazilian.",
      "PlaysFor(x, y) ::: x plays for football club y.",
      "Club(x) ::: x is a football club.",
      "SameClub(x, y) ::: x and y are part of the same football club."
    ]
  },
  "202": {
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva played for Fluminense.",
    "logic_predicates": [
      "KnownAs(x, y) ::: x is commonly known as y.",
      "BornIn(x, y) ::: x was born in year y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedOutTo(x, y) ::: x was loaned out to club y.",
      "PlaysFor(x, y) ::: x plays for club y.",
      "Club(x) ::: x is a football club.",
      "SameClub(x, y) ::: x and y are in the same football club."
    ]
  },
  "203": {
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva was loaned out to a football club.",
    "logic_predicates": [
      "FootballPlayer(x) ::: x is a football player.",
      "Loan(x, y) ::: x was loaned out to y.",
      "Brazilian(x) ::: x is Brazilian.",
      "PlaysFor(x, y) ::: x plays for y.",
      "Club(x) ::: x is a football club.",
      "SameClub(x, y) ::: x and y are in the same football club."
    ]
  }
}