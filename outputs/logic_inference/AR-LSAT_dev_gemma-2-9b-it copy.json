[
  {
    "id": 0,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?",
      "options": [
        "A) Fred, Juan",
        "B) Juan, Paul",
        "C) Juan, Marc, Paul",
        "D) Juan, Marc, Trisha",
        "E) Juan, Nita, Trisha"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Children 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigns (Children Lockers) Bool)"
      ],
      "constraints": [
        "(forall ((l Lockers)) (or (= (count ((lambda (c) (assigns c l)) Children)) 1) (= (count ((lambda (c) (assigns c l)) Children)) 2)))",
        "(forall ((c Children)) (= (count ((lambda (l) (assigns c l)) Lockers)) 1))",
        "(forall ((l Lockers)) (and (= (count ((lambda (c) (if (and (assigns c l) (not (= c Nita) (not (= c Rachel) (not (= c Trisha) (not (= c Fred) (not (= c Marc) (not (= c Paul))))) (assigns c l)) 1 0)) Children) 1) (= (count ((lambda (c) (if (and (assigns c l) (and (= c Nita) (not (= c Rachel) (not (= c Trisha) (not (= c Fred) (not (= c Marc) (not (= c Paul))))))) (assigns c l)) 1 0)) Children) 1))))))",
        "(and (exists ((l Lockers)) (and (assigns Juan l) (assigns (distinct Juan) l) (not (assigns Rachel l)))) (forall ((l Lockers)) (not (and (assigns Rachel l) (assigns (distinct Rachel) l)))))",
        "(not (and (exists ((l Lockers)) (and (assigns Nita l) (assigns Trisha (+ l 1)))) (exists ((l Lockers)) (and (assigns Trisha l) (assigns Nita (+ l 1))))))",
        "(assigns Fred 3)"
      ],
      "options": [
        "(and (assigns Juan l1) (assigns (distinct Juan) l1) (assigns Fred l3) (assigns Paul l5) (assigns Marc l2) (assigns Nita l4))",
        "(and (assigns Juan l1) (assigns (distinct Juan) l2) (assigns Fred l3) (assigns Paul l5) (assigns Marc l4) (assigns Nita l4))",
        "(and (assigns Juan l1) (assigns (distinct Juan) l2) (assigns Fred l3) (assigns Paul l4) (assigns Marc l5) (assigns Nita l3))",
        "(and (assigns Juan l1) (assigns (distinct Juan) l2) (assigns Fred l3) (assigns Paul l4) (assigns Marc l5) (assigns Nita l3))"
      ],
      "type": "sat",
      "perplexity": [
        1.1200919151306152,
        1.0050548315048218
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?",
      "options": [
        "A) Juan is assigned to locker 4.",
        "B) Juan is assigned to locker 5.",
        "C) Paul is assigned to locker 2.",
        "D) Rachel is assigned to locker 2.",
        "E) Rachel is assigned to locker 5."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Children 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigned-to (Children Lockers) Bool)",
        "(declare-fun is_shared (Lockers) Bool)"
      ],
      "constraints": [
        "(forall ((l Lockers)) (or (<= (count (filter (lambda (c) (and (assigned-to c l) (not (is_shared l)))) Children) 1) (>= (count (filter (lambda (c) (and (assigned-to c l) (is_shared l)))) Children) 1)))",
        "(forall ((c Children)) (<= (count (filter (lambda (l) (assigned-to c l)) Lockers)) 1))",
        "(forall ((l Lockers)) (and (is_shared l) (= (count (filter (lambda (c) (and (assigned-to c l) (member c Children))) Children) 1) (= (count (filter (lambda (c) (and (assigned-to c l) (not (member c Children))) Children) 1)))))",
        "(exists ((l Lockers)) (and (is_shared l) (assigned-to Juan l)))",
        "(forall ((l Lockers)) (not (and (is_shared l) (assigned-to Rachel l)))),",
        "(not (and (assigned-to Nita 1) (assigned-to Trisha 2) ) )",
        "(not (and (assigned-to Nita 2) (assigned-to Trisha 3) ) )",
        "(not (and (assigned-to Nita 3) (assigned-to Trisha 4) ) )",
        "(not (and (assigned-to Nita 4) (assigned-to Trisha 5) ) )",
        "(assert (assigned-to Fred 3))",
        "(assert (assigned-to Marc 1))",
        "(assert (assigned-to Trisha 3))",
        "options",
        [
          "(assert (assigned-to Juan 4))",
          "(assert (assigned-to Juan 5))",
          "(assert (assigned-to Paul 2))",
          "(assert (assigned-to Rachel 2))",
          "(assert (assigned-to Rachel 5))",
          "type",
          "sat"
        ],
        "type",
        "sat"
      ],
      "perplexity": [
        1.0976812839508057,
        1.2222445011138916
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?",
      "options": [
        "A) locker 2",
        "B) locker 4",
        "C) locker 1, locker 2",
        "D) locker 1, locker 4",
        "E) locker 2, locker 4"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun shared (Lockers Bool))",
        "(declare-fun shared (Lockers Bool)) "
      ],
      "constraints": [
        "(forall ((l Lockers)) (or (not (shared l)) (shared l)))",
        "(forall ((p People)) (<= (+ (ite (shared 1 p) 1 0) (ite (shared 2 p) 1 0) (ite (shared 3 p) 1 0) (ite (shared 4 p) 1 0) (ite (shared 5 p) 1 0)) 1))",
        "(forall ((l Lockers)) (=> (shared l) (and (exists ((g People) (b People)) (and (= g (Nita) (Rachel) (Trisha)) (= b (Fred) (Juan) (Marc) (Paul)) (shared l g) (shared l b)))))))",
        "(exists ((l Lockers)) (shared l))",
        "(forall ((l Lockers)) (=> (shared l) (not (= l Rachel))))",
        "(not (or (and (shared 1 Nita) (shared 2 Trisha)) (and (shared 2 Nita) (shared 3 Trisha)) (and (shared 3 Nita) (shared 4 Trisha))))",
        "(shared 3)",
        "(shared 5)"
      ],
      "options": [
        "(not (shared 2))",
        "(not (shared 4))",
        "(and (not (shared 1)) (not (shared 2)))",
        "(and (not (shared 1)) (not (shared 4)))",
        "(and (not (shared 2)) (not (shared 4)))"
      ],
      "type": "sat",
      "perplexity": [
        1.093948245048523,
        1.0336458683013916
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boys 0)) (((Fred) (Juan) (Marc) (Paul))))",
        "(declare-datatypes ((Girls 0)) (((Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigned (Boys Lockers) Bool)",
        "(declare-fun assigned (Girls Lockers) Bool)"
      ],
      "constraints": [
        "(forall ((l Lockers)) (or (= (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Nita l) (assigned Rachel l) (assigned Trisha l)) 1) (= (or (and (assigned Fred l) (assigned Juan l)) (and (assigned Fred l) (assigned Marc l)) (and (assigned Fred l) (assigned Paul l)) (and (assigned Fred l) (assigned Nita l)) (and (assigned Fred l) (assigned Rachel l)) (and (assigned Fred l) (assigned Trisha l)) (and (assigned Juan l) (assigned Marc l)) (and (assigned Juan l) (assigned Paul l)) (and (assigned Juan l) (assigned Nita l)) (and (assigned Juan l) (assigned Rachel l)) (and (assigned Juan l) (assigned Trisha l)) (and (assigned Marc l) (assigned Paul l)) (and (assigned Marc l) (assigned Nita l)) (and (assigned Marc l) (assigned Rachel l)) (and (assigned Marc l) (assigned Trisha l)) (and (assigned Paul l) (assigned Nita l)) (and (assigned Paul l) (assigned Rachel l)) (and (assigned Paul l) (assigned Trisha l)) (and (assigned Nita l) (assigned Rachel l)) (and (assigned Nita l) (assigned Trisha l)) (and (assigned Rachel l) (assigned Trisha l))) 2))))",
        "(forall ((b Boys)) (forall ((l Lockers)) (=> (and (assigned b l) (assigned b l')) (distinct l l'))))",
        "(forall ((g Girls)) (forall ((l Lockers)) (=> (and (assigned g l) (assigned g l')) (distinct l l'))))",
        "(forall ((l Lockers)) (=> (and (assigned Fred l) (assigned Juan l)) (or (assigned Nita l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Fred l) (assigned Marc l)) (or (assigned Nita l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Fred l) (assigned Paul l)) (or (assigned Nita l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Fred l) (assigned Nita l)) (or (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Fred l) (assigned Rachel l)) (or (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Nita l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Fred l) (assigned Trisha l)) (or (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Nita l) (assigned Rachel l))))",
        "(forall ((l Lockers)) (=> (and (assigned Juan l) (assigned Marc l)) (or (assigned Fred l) (assigned Paul l) (assigned Nita l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Juan l) (assigned Paul l)) (or (assigned Fred l) (assigned Marc l) (assigned Nita l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Juan l) (assigned Nita l)) (or (assigned Fred l) (assigned Marc l) (assigned Paul l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Juan l) (assigned Rachel l)) (or (assigned Fred l) (assigned Marc l) (assigned Paul l) (assigned Nita l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Juan l) (assigned Trisha l)) (or (assigned Fred l) (assigned Marc l) (assigned Paul l) (assigned Nita l) (assigned Rachel l))))",
        "(forall ((l Lockers)) (=> (and (assigned Marc l) (assigned Paul l)) (or (assigned Fred l) (assigned Juan l) (assigned Nita l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Marc l) (assigned Nita l)) (or (assigned Fred l) (assigned Juan l) (assigned Paul l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Marc l) (assigned Rachel l)) (or (assigned Fred l) (assigned Juan l) (assigned Paul l) (assigned Nita l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Marc l) (assigned Trisha l)) (or (assigned Fred l) (assigned Juan l) (assigned Paul l) (assigned Nita l) (assigned Rachel l))))",
        "(forall ((l Lockers)) (=> (and (assigned Paul l) (assigned Nita l)) (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Rachel l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Paul l) (assigned Rachel l)) (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Nita l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Paul l) (assigned Trisha l)) (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Nita l) (assigned Rachel l))))",
        "(forall ((l Lockers)) (=> (and (assigned Nita l) (assigned Rachel l)) (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Trisha l))))",
        "(forall ((l Lockers)) (=> (and (assigned Nita l) (assigned Trisha l)) (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Rachel l))))",
        "(forall ((l Lockers)) (=> (and (assigned Rachel l) (assigned Trisha l)) (or (assigned Fred l) (assigned Juan l) (assigned Marc l) (assigned Paul l) (assigned Nita l))))",
        "(exists ((l Lockers)) (and (assigned Juan l) (assigned (select-from Boys) l)))",
        "(forall ((l Lockers)) (=> (assigned Rachel l) (not (assigned (select-from Boys) l))))",
        "(forall ((l1 Lockers) (l2 Lockers)) (=> (and (assigned Nita l1) (assigned Trisha l2)) (not (= (+ 1 l1) l2)) (not (= l1 (+ 1 l2))))",
        "(assert (assigned Fred 3))"
      ],
      "options": [],
      "type": "sat",
      "perplexity": [
        1.0463852882385254,
        1.0034472942352295
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If the first three lockers are assigned to girls, which one of the following must be true?",
      "options": [
        "A) Juan is assigned to locker 1.",
        "B) Nita is assigned to locker 3.",
        "C) Trisha is assigned to locker 1.",
        "D) Juan is assigned to the same locker as Trisha.",
        "E) Paul is assigned to the same locker as Trisha."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Children 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigns (Children Lockers) Bool)",
        "(declare-var  (assigns Fred 1) Bool)",
        "(declare-var  (assigns Fred 2) Bool)",
        "(declare-var  (assigns Fred 3) Bool)",
        "(declare-var  (assigns Fred 4) Bool)",
        "(declare-var  (assigns Fred 5) Bool)",
        "(declare-var  (assigns Juan 1) Bool)",
        "(declare-var  (assigns Juan 2) Bool)",
        "(declare-var  (assigns Juan 3) Bool)",
        "(declare-var  (assigns Juan 4) Bool)",
        "(declare-var  (assigns Juan 5) Bool)",
        "(declare-var  (assigns Marc 1) Bool)",
        "(declare-var  (assigns Marc 2) Bool)",
        "(declare-var  (assigns Marc 3) Bool)",
        "(declare-var  (assigns Marc 4) Bool)",
        "(declare-var  (assigns Marc 5) Bool)",
        "(declare-var  (assigns Paul 1) Bool)",
        "(declare-var  (assigns Paul 2) Bool)",
        "(declare-var  (assigns Paul 3) Bool)",
        "(declare-var  (assigns Paul 4) Bool)",
        "(declare-var  (assigns Paul 5) Bool)",
        "(declare-var  (assigns Nita 1) Bool)",
        "(declare-var  (assigns Nita 2) Bool)",
        "(declare-var  (assigns Nita 3) Bool)",
        "(declare-var  (assigns Nita 4) Bool)",
        "(declare-var  (assigns Nita 5) Bool)",
        "(declare-var  (assigns Rachel 1) Bool)",
        "(declare-var  (assigns Rachel 2) Bool)",
        "(declare-var  (assigns Rachel 3) Bool)",
        "(declare-var  (assigns Rachel 4) Bool)",
        "(declare-var  (assigns Rachel 5) Bool)",
        "(declare-var  (assigns Trisha 1) Bool)",
        "(declare-var  (assigns Trisha 2) Bool)",
        "(declare-var  (assigns Trisha 3) Bool)",
        "(declare-var  (assigns Trisha 4) Bool)",
        "(declare-var  (assigns Trisha 5) Bool)"
      ],
      "constraints": [
        "(or (implies (assigns Fred 1) (assigns Juan 1)) (implies (assigns Fred 1) (assigns Marc 1)) (implies (assigns Fred 1) (assigns Paul 1)) (implies (assigns Fred 1) (assigns Nita 1)) (implies (assigns Fred 1) (assigns Rachel 1)) (implies (assigns Fred 1) (assigns Trisha 1)))",
        "(or (implies (assigns Fred 1) (not (assigns Fred 2))) (implies (assigns Fred 1) (not (assigns Fred 3))) (implies (assigns Fred 1) (not (assigns Fred 4))) (implies (assigns Fred 1) (not (assigns Fred 5))))",
        "(assert (assigns Fred 3))",
        "(push)",
        "(assert (and (assigns Nita 1) (assigns Rachel 2) (assigns Trisha 3)))",
        "(check-sat)",
        "(pop)"
      ],
      "options": [],
      "type": "sat",
      "perplexity": [
        1.082457423210144,
        1.0105655193328857
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If lockers 1 and 2 are each assigned to one boy and are not shared lockers, then locker 4 must be assigned to",
      "options": [
        "A) Juan",
        "B) Paul",
        "C) Rachel",
        "D) Juan and Nita",
        "E) Marc and Trisha"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Children 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigned (Children Lockers) Bool)"
      ],
      "constraints": [
        "(forall ((l Lockers)) (or (<= (count (filter (lambda (c) assigned c l) Children) 1) (<= (count (filter (lambda (c) assigned c l) Children) 2) 1)))",
        "(forall ((c Children)) (<= (count (filter (lambda (l) assigned c l) Lockers)) 1))",
        "(forall ((l Lockers)) (and (=> (count (filter (lambda (c) assigned c l) Children) 2) (or (and (member (filter (lambda (c) (not (female c)) Children) Lockers) l) (member (filter (lambda (c) (female c)) Children) Lockers) l)) (and (member (filter (lambda (c) (female c)) Children) Lockers) l) (member (filter (lambda (c) (not (female c)) Children) Lockers) l))))))",
        "(assert (exists ((l Lockers)) (and (count (filter (lambda (c) assigned c l) Children) 2) (member Juan (filter (lambda (c) assigned c l) Children)))))",
        "(assert (forall ((l Lockers)) (=> (count (filter (lambda (c) assigned c l) Children) 2) (not (member Rachel (filter (lambda (c) assigned c l) Children))))))",
        "(assert (forall ((l Lockers)) (and (not (or (member Nita (filter (lambda (c) assigned c l) Children)) (member Trisha (filter (lambda (c) assigned c l) Children)))) (or (member Nita (filter (lambda (c) assigned c (if (= l 1) 2 3 4 5) ) Children)) (member Trisha (filter (lambda (c) assigned c (if (= l 1) 2 3 4 5) ) Children)))))))",
        "(assert (assigned Fred 3))"
      ],
      "options": [
        "(and (assigned Juan 1) (assigned Paul 2) (assigned Juan 4))"
      ],
      "type": "sat",
      "perplexity": [
        1.1499868631362915,
        1.0101197957992554
      ],
      "answer": "C",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "Which one of the following could be a complete and accurate list of the types of CDs that are on sale?",
      "options": [
        "A) new jazz, used jazz, used opera, used pop, new rap",
        "B) new jazz, used pop, used rap, new soul",
        "C) used opera, used pop, new rap, used rap",
        "D) used opera, new pop, used pop, new soul",
        "E) used jazz, used pop, new soul, used soul"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((new_jazz) (used_jazz) (new_opera) (used_opera) (new_pop) (used_pop) (new_rap) (used_rap) (new_soul) (used_soul))))",
        "(declare-fun on_sale (CDTypes) Bool)"
      ],
      "constraints": [
        "(on_sale used_pop)",
        "(not (on_sale new_opera))",
        "(=> (and (on_sale new_pop) (on_sale used_pop)) (and (on_sale new_soul) (on_sale used_soul)))",
        "(=> (and (on_sale new_jazz) (on_sale used_jazz)) (and (not (on_sale new_rap)) (not (on_sale used_rap))))",
        "(=> (and (not (on_sale new_jazz)) (not (on_sale used_jazz))) (on_sale new_pop))",
        "(=> (or (on_sale new_rap) (on_sale used_rap)) (and (not (on_sale new_soul)) (not (on_sale used_soul))))"
      ],
      "options": [
        "(and (on_sale new_jazz) (on_sale used_jazz) (on_sale used_opera) (on_sale used_pop) (on_sale new_rap))",
        "(and (on_sale new_jazz) (on_sale used_pop) (on_sale used_rap) (on_sale new_soul))",
        "(and (on_sale used_opera) (on_sale used_pop) (on_sale new_rap) (on_sale used_rap))",
        "(and (on_sale used_opera) (on_sale new_pop) (on_sale used_pop) (on_sale new_soul))",
        "(and (on_sale used_jazz) (on_sale used_pop) (on_sale new_soul) (on_sale used_soul))"
      ],
      "type": "sat",
      "perplexity": [
        1.0520776510238647,
        1.0042495727539062
      ],
      "answer": "E",
      "predicted_answer": [
        "unsat",
        "unsat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If new soul is not on sale, then which one of the following must be true?",
      "options": [
        "A) New rap is not on sale.",
        "B) New rap is on sale.",
        "C) Used opera is not on sale.",
        "D) At least one type of jazz is not on sale.",
        "E) At least one type of pop is not on sale."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((new_jazz) (used_jazz) (new_opera) (used_opera) (new_pop) (used_pop) (new_rap) (used_rap) (new_soul) (used_soul))))",
        "(declare-fun sale (CDTypes Bool))"
      ],
      "constraints": [
        "(sale (used_pop))",
        "(not (sale (new_opera)))",
        "(implies (and (sale (new_pop)) (sale (used_pop))) (and (sale (new_soul)) (sale (used_soul))))",
        "(implies (and (sale (new_jazz)) (sale (used_jazz))) (not (or (sale (new_rap)) (sale (used_rap)))))",
        "(implies (and (not (sale (new_jazz))) (not (sale (used_jazz)))) (sale (new_pop)))",
        "(implies (or (sale (new_rap)) (sale (used_rap))) (and (not (sale (new_soul))) (not (sale (used_soul)))))"
      ],
      "options": [],
      "type": "sat",
      "perplexity": [
        1.115902066230774,
        1.0198265314102173
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If both types of jazz are on sale, then which one of the following is the minimum number of types of new CDs that could be included in the sale?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((jazz_new) (jazz_used) (opera_new) (opera_used) (pop_new) (pop_used) (rap_new) (rap_used) (soul_new) (soul_used))))",
        "(declare-fun on_sale (CDTypes) Bool)",
        "(define-fun count_on_sale () Int)",
        "(ite (on_sale jazz_new) 1 0)",
        "(ite (on_sale jazz_used) 1 0)",
        "(ite (on_sale opera_new) 1 0)",
        "(ite (on_sale opera_used) 1 0)",
        "(ite (on_sale pop_new) 1 0)",
        "(ite (on_sale pop_used) 1 0)",
        "(ite (on_sale rap_new) 1 0)",
        "(ite (on_sale rap_used) 1 0)",
        "(ite (on_sale soul_new) 1 0)",
        "(ite (on_sale soul_used) 1 0))"
      ],
      "constraints": [
        "(assert (on_sale pop_used))",
        "(assert (not (on_sale opera_new)))",
        "(assert (=> (and (on_sale pop_new) (on_sale pop_used)) (and (on_sale soul_new) (on_sale soul_used))))",
        "(assert (=> (and (on_sale jazz_new) (on_sale jazz_used)) (not (or (on_sale rap_new) (on_sale rap_used)))))",
        "(assert (=> (and (not (on_sale jazz_new)) (not (on_sale jazz_used))) (on_sale pop_new)))",
        "(assert (=> (or (on_sale rap_new) (on_sale rap_used)) (not (or (on_sale soul_new) (on_sale soul_used)))))"
      ],
      "options": [
        "(assert (and (on_sale jazz_new) (on_sale jazz_used) (>= (count_on_sale) 1)))",
        "(assert (and (on_sale jazz_new) (on_sale jazz_used) (>= (count_on_sale) 2)))",
        "(assert (and (on_sale jazz_new) (on_sale jazz_used) (>= (count_on_sale) 3)))",
        "(assert (and (on_sale jazz_new) (on_sale jazz_used) (>= (count_on_sale) 4)))",
        "(assert (and (on_sale jazz_new) (on_sale jazz_used) (>= (count_on_sale) 5)))"
      ],
      "type": "sat",
      "perplexity": [
        1.2142385244369507,
        1.0130921602249146
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Neither type of opera and neither type of rap is on sale.",
        "B) Neither type of jazz and neither type of opera is on sale.",
        "C) Neither type of opera and neither type of soul is on sale.",
        "D) Neither type of jazz and neither type of soul is on sale.",
        "E) Neither type of jazz and neither type of rap is on sale."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((SaleStatus 0)) (((new) (used))))",
        "(declare-fun is_on_sale (CDTypes SaleStatus) Bool)"
      ],
      "constraints": [
        "(is_on_sale pop used)",
        "(not (is_on_sale opera new))",
        "(=> (and (is_on_sale pop new) (is_on_sale pop used)) (and (is_on_sale soul new) (is_on_sale soul used)))",
        "(=> (and (is_on_sale jazz new) (is_on_sale jazz used)) (not (is_on_sale rap new)) (not (is_on_sale rap used)))",
        "(=> (and (not (is_on_sale jazz new)) (not (is_on_sale jazz used))) (is_on_sale pop new))",
        "(=> (or (is_on_sale rap new) (is_on_sale rap used)) (not (is_on_sale soul new)) (not (is_on_sale soul used)))"
      ],
      "options": [
        "(not (is_on_sale opera new))",
        "(not (is_on_sale opera used))",
        "(not (is_on_sale rap new))",
        "(not (is_on_sale rap used))",
        "(not (is_on_sale jazz new))",
        "(not (is_on_sale jazz used))",
        "(not (is_on_sale opera new))",
        "(not (is_on_sale opera used))",
        "(not (is_on_sale soul new))",
        "(not (is_on_sale soul used))",
        "(not (is_on_sale jazz new))",
        "(not (is_on_sale jazz used))",
        "(not (is_on_sale soul new))",
        "(not (is_on_sale soul used))",
        "(not (is_on_sale jazz new))",
        "(not (is_on_sale jazz used))",
        "(not (is_on_sale rap new))",
        "(not (is_on_sale rap used))"
      ],
      "type": "sat",
      "perplexity": [
        1.0327728986740112,
        1.0099754333496094
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If neither type of jazz is on sale, then each of the following must be true EXCEPT:",
      "options": [
        "A) Used opera is on sale.",
        "B) New rap is not on sale.",
        "C) Used rap is not on sale.",
        "D) New soul is on sale.",
        "E) Used soul is on sale."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((SaleStatus 0)) (((new) (used))))",
        "(declare-fun on-sale (CDTypes SaleStatus) Bool)"
      ],
      "constraints": [
        "(on-sale pop used)",
        "(not (on-sale opera new))",
        "(=> (and (on-sale pop new) (on-sale pop used)) (and (on-sale soul new) (on-sale soul used)))",
        "(=> (and (on-sale jazz new) (on-sale jazz used)) (not (on-sale rap new)) (not (on-sale rap used)))",
        "(=> (and (not (on-sale jazz new)) (not (on-sale jazz used))) (on-sale pop new))",
        "(=> (or (on-sale rap new) (on-sale rap used)) (not (on-sale soul new)) (not (on-sale soul used)))"
      ],
      "options": [
        "(not (on-sale opera used))",
        "(on-sale rap new)",
        "(on-sale rap used)",
        "(on-sale soul new)",
        "(on-sale soul used)"
      ],
      "type": "sat",
      "perplexity": [
        1.0568560361862183,
        1.0141332149505615
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If new soul is the only type of new CD on sale, then which one of the following CANNOT be true?",
      "options": [
        "A) Used jazz is not on sale.",
        "B) Used opera is not on sale.",
        "C) Used rap is not on sale.",
        "D) Used soul is on sale.",
        "E) Used soul is not on sale."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CD_Types 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((Sale_Status 0)) (((new) (used))))",
        "(declare-fun is_on_sale (CD_Types Sale_Status) Bool)"
      ],
      "constraints": [
        "(is_on_sale pop used)",
        "(not (is_on_sale opera new))",
        "(=> (and (is_on_sale pop new) (is_on_sale pop used)) (and (is_on_sale soul new) (is_on_sale soul used)))",
        "(=> (and (is_on_sale jazz new) (is_on_sale jazz used)) (not (is_on_sale rap new)) (not (is_on_sale rap used)))",
        "(=> (not (is_on_sale jazz new)) (not (is_on_sale jazz used)) (is_on_sale pop new))",
        "(=> (or (is_on_sale rap new) (is_on_sale rap used)) (not (is_on_sale soul new)) (not (is_on_sale soul used)))",
        "(and (is_on_sale soul new) (not (or (is_on_sale jazz new) (is_on_sale opera new) (is_on_sale pop new) (is_on_sale rap new))))"
      ],
      "options": [
        "(not (is_on_sale jazz used))",
        "(not (is_on_sale opera used))",
        "(not (is_on_sale rap used))",
        "(is_on_sale soul used)",
        "(not (is_on_sale soul used))"
      ],
      "type": "sat",
      "perplexity": [
        1.0723649263381958,
        1.0138648748397827
      ],
      "answer": "A",
      "predicted_answer": [
        "unsat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If exactly four of the five types of used CDs are the only CDs on sale, then which one of the following could be true?",
      "options": [
        "A) Used jazz is not on sale.",
        "B) Used opera is not on sale.",
        "C) Used rap is not on sale.",
        "D) Neither type of jazz is on sale.",
        "E) Neither type of rap and neither type of soul is on sale."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((SaleStatus 0)) (((new) (used))))",
        "(declare-fun on_sale (CDTypes SaleStatus) Bool)"
      ],
      "constraints": [
        "(on_sale pop used)",
        "(not (on_sale opera new))",
        "(=> (and (on_sale pop new) (on_sale pop used)) (or (on_sale soul new) (on_sale soul used)))",
        "(=> (and (on_sale jazz new) (on_sale jazz used)) (not (on_sale rap new)) (not (on_sale rap used)))",
        "(=> (and (not (on_sale jazz new)) (not (on_sale jazz used))) (on_sale pop new))",
        "(=> (or (on_sale rap new) (on_sale rap used)) (not (on_sale soul new)) (not (on_sale soul used)))"
      ],
      "options": [
        "(and (on_sale jazz used) (on_sale opera used) (on_sale pop used) (on_sale rap used) (not (on_sale soul used)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1707175970077515,
        1.01935613155365
      ],
      "answer": "C",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "Which one of the following CANNOT be true of the week's tour schedule?",
      "options": [
        "A) The division that is toured on Monday is also toured on Tuesday.",
        "B) The division that is toured on Monday is also toured on Friday.",
        "C) The division that is toured on Tuesday is also toured on Thursday.",
        "D) The division that is toured on Wednesday is also toured on Friday.",
        "E) The division that is toured on Thursday is also toured on Friday."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday))))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-fun tours (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (or (exists ((div Divisions)) (tours d div)) (exists ((div Divisions)) (tours d div)))),",
        "(not (tours Monday Operations))",
        "(not (tours Wednesday Production))",
        "(exists ((d1 Days) (d2 Days)) (and (= d1 (pred d2)) (tours d1 Sales) (tours d2 Sales) (not (and (distinct (pred d1) d1) (tours (pred d1) Sales))) (not (and (distinct d2 (succ d2)) (tours (succ d2) Sales))))",
        "(implies (tours Thursday Operations) (tours Friday Production))"
      ],
      "options": [
        "(not (and (tours Monday Operations) (tours Tuesday Operations)))",
        "(not (and (tours Monday Operations) (tours Friday Operations)))",
        "(not (and (tours Tuesday Operations) (tours Thursday Operations)))",
        "(not (and (tours Wednesday Operations) (tours Friday Operations)))",
        "(not (and (tours Thursday Operations) (tours Friday Operations)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1056830883026123,
        1.0137288570404053
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in addition to the Sales division one other division is toured on two consecutive days, then it could be true of the week's tour schedule both that the",
      "options": [
        "A) Production division is toured on Monday and that the Operations division is toured on Thursday",
        "B) Production division is toured on Tuesday and that the Sales division is toured on Wednesday",
        "C) Operations division is toured on Tuesday and that the Production division is toured on Friday",
        "D) Sales division is toured on Monday and that the Operations division is toured on Friday",
        "E) Sales division is toured on Wednesday and that the Production division is toured on Friday"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday))))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-fun toured (Days Divisions) Bool)"
      ],
      "constraints": [
        "(and (toured Monday Operations) (toured Tuesday Production) (toured Wednesday Sales) (toured Thursday Operations) (toured Friday Sales))",
        "(or (toured Monday Operations) (toured Tuesday Operations) (toured Wednesday Operations) (toured Thursday Operations) (toured Friday Operations))",
        "(or (toured Monday Production) (toured Tuesday Production) (toured Wednesday Production) (toured Thursday Production) (toured Friday Production))",
        "(or (toured Monday Sales) (toured Tuesday Sales) (toured Wednesday Sales) (toured Thursday Sales) (toured Friday Sales))",
        "(not (toured Monday Operations))",
        "(not (toured Wednesday Production))",
        "(or (and (toured Monday Sales) (toured Tuesday Sales)) (and (toured Tuesday Sales) (toured Wednesday Sales)) (and (toured Wednesday Sales) (toured Thursday Sales)) (and (toured Thursday Sales) (toured Friday Sales)))",
        "(=> (toured Thursday Operations) (toured Friday Production))"
      ],
      "options": [
        "(and (toured Monday Production) (toured Thursday Operations))",
        "(and (toured Tuesday Production) (toured Wednesday Sales))",
        "(and (toured Tuesday Operations) (toured Friday Production))",
        "(and (toured Monday Sales) (toured Friday Operations))",
        "(and (toured Wednesday Sales) (toured Friday Production))"
      ],
      "type": "sat",
      "perplexity": [
        1.0556042194366455,
        1.0052917003631592
      ],
      "answer": "B",
      "predicted_answer": [
        "unsat",
        "unsat",
        "unsat",
        "unsat",
        "unsat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Friday, then for which one of the following days must a tour of the Production division be scheduled?",
      "options": [
        "A) Monday",
        "B) Tuesday",
        "C) Wednesday",
        "D) Thursday",
        "E) Friday"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday))))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-fun tours (Days Divisions) Bool)"
      ],
      "constraints": [
        "(and (tours Monday Operations) (tours Tuesday Operations) (tours Wednesday Operations) (tours Thursday Operations) (tours Friday Operations))",
        "(and (exists ((d Days)) (tours d Operations)) (exists ((d Days)) (tours d Production)) (exists ((d Days)) (tours d Sales)))",
        "(not (tours Monday Operations))",
        "(not (tours Wednesday Production))",
        "(or (and (tours Tuesday Sales) (tours Wednesday Sales)) (and (tours Wednesday Sales) (tours Thursday Sales)) (and (tours Thursday Sales) (tours Friday Sales)))",
        "(=> (tours Thursday Operations) (tours Friday Production))"
      ],
      "options": [
        "(=> (tours Tuesday Operations) (tours Monday Production))",
        "(=> (tours Tuesday Operations) (tours Tuesday Production))",
        "(=> (tours Tuesday Operations) (tours Wednesday Production))",
        "(=> (tours Tuesday Operations) (tours Thursday Production))",
        "(=> (tours Tuesday Operations) (tours Friday Production))"
      ],
      "type": "sat",
      "perplexity": [
        1.0912126302719116,
        1.0088448524475098
      ],
      "answer": "A",
      "predicted_answer": [
        "unsat",
        "unsat",
        "unsat",
        "unsat",
        "unsat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Monday is not the division that is toured on Tuesday, then which one of the following could be true of the week's schedule?",
      "options": [
        "A) A tour of the Sales division is scheduled for some day earlier in the week than is any tour of the Production division.",
        "B) A tour of the Operations division is scheduled for some day earlier in the week than is any tour of the Production division.",
        "C) The Sales division is toured on Monday.",
        "D) The Production division is toured on Tuesday.",
        "E) The Operations division is toured on Wednesday."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday))))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-fun toured (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (or (toured d Operations) (toured d Production) (toured d Sales)))",
        "(not (toured Monday Operations))",
        "(not (toured Wednesday Production))",
        "(let ((s1 (find (lambda (d) (toured d Sales)) Days)) (s2 (find (lambda (d) (toured d Sales)) Days))) (and (>= (+ 1 s1 s2) 1) (<= (+ 1 s1 s2) 2)))",
        "(implies (toured Thursday Operations) (toured Friday Production))"
      ],
      "options": [
        "(exists ((d1 Days) (d2 Days)) (and (lt d1 d2) (toured d1 Sales) (not (toured d2 Production))))",
        "(exists ((d1 Days) (d2 Days)) (and (lt d1 d2) (toured d1 Operations) (not (toured d2 Production))))",
        "(toured Monday Sales)",
        "(toured Tuesday Production)",
        "(toured Wednesday Operations)"
      ],
      "type": "sat",
      "perplexity": [
        1.1336095333099365,
        1.0166923999786377
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Wednesday, then which one of the following must be true of the week's tour schedule?",
      "options": [
        "A) The Production division is toured on Monday.",
        "B) The Operations division is toured on Tuesday.",
        "C) The Sales division is toured on Wednesday.",
        "D) The Sales division is toured on Thursday.",
        "E) The Production division is toured on Friday."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday))))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-fun toured (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (or (exists ((div Divisions)) (and (toured d div) true)) (exists ((div Divisions)) (and (toured d div) true)) (exists ((div Divisions)) (and (toured d div) true)))),",
        "(not (toured Monday Operations))",
        "(not (toured Wednesday Production))",
        "(exists ((d1 Days) (d2 Days)) (and (distinct d1 d2) (toured d1 Sales) (toured d2 Sales) (not (exists ((d Days)) (and (distinct d d1) (distinct d d2) (toured d Sales))))))",
        "(implies (toured Thursday Operations) (toured Friday Production))"
      ],
      "options": [
        "(and (toured Tuesday Sales) (toured Wednesday Sales) (not (toured Monday Production)))",
        "(and (toured Tuesday Operations) (toured Wednesday Sales) (not (toured Monday Production)))",
        "(and (toured Tuesday Sales) (toured Wednesday Sales) (toured Tuesday Operations))",
        "(and (toured Tuesday Sales) (toured Wednesday Sales) (toured Thursday Operations))",
        "(and (toured Tuesday Sales) (toured Wednesday Sales) (toured Friday Production))"
      ],
      "type": "sat",
      "perplexity": [
        1.0959744453430176,
        1.0095856189727783
      ],
      "answer": "A",
      "predicted_answer": [
        "unsat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Which one of the following could be a complete and accurate list of the members of the crew?",
      "options": [
        "A) George, Helena, Inga, Kelly",
        "B) George, Helena, Kelly, Leanda",
        "C) Helena, Inga, Kelly, Olaf",
        "D) Helena, Inga, Maricita, Olaf",
        "E) George, Helena, Leanda, Maricita, Olaf"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3))))",
        "(declare-fun can-do (Workers Tasks) Bool)",
        "(declare-fun works-on (Workers Days Tasks) Bool)"
      ],
      "constraints": [
        "(or (exists ((w Workers) (t Tasks)) (works-on w day1 t)) (exists ((w Workers) (t Tasks)) (works-on w day2 t)) (exists ((w Workers) (t Tasks)) (works-on w day3 t)))",
        "(not (exists ((w Workers) (t Tasks)) (and (works-on w day1 taping) (works-on w day1 priming))))",
        "(forall ((w Workers)) (exists ((t Tasks) (d Days)) (and (works-on w d t) (can-do w t))))",
        "(forall ((w Workers) (t Tasks) (d1 Days) (d2 Days)) (not (and (works-on w d1 t) (works-on w d2 t))))"
      ],
      "options": [
        "(and (works-on George day1 taping) (works-on Helena day2 sanding) (works-on Inga day3 framing) (works-on Kelly day1 wallboarding))",
        "(and (works-on George day1 taping) (works-on Helena day2 sanding) (works-on Kelly day3 framing) (works-on Leanda day1 wallboarding))",
        "(and (works-on Helena day1 sanding) (works-on Inga day2 framing) (works-on Kelly day3 sanding) (works-on Olaf day1 wallboarding))",
        "(and (works-on Helena day1 sanding) (works-on Inga day2 framing) (works-on Maricita day3 sanding) (works-on Olaf day1 wallboarding))",
        "(and (works-on George day1 taping) (works-on Helena day2 sanding) (works-on Leanda day3 wallboarding) (works-on Maricita day1 sanding) (works-on Olaf day1 priming))"
      ],
      "type": "sat",
      "perplexity": [
        1.070233941078186,
        1.0135449171066284
      ],
      "answer": "B",
      "predicted_answer": [
        "unsat",
        "unsat",
        "unsat",
        "unsat",
        "unsat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "If the installation takes three days, and if the same two crew members work on the first and third days, then which one of the following could be the pair of crew members who work on those two days?",
      "options": [
        "A) Helena and Inga",
        "B) Inga and Kelly",
        "C) Inga and Leanda",
        "D) Kelly and Olaf",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Days 0)) (((Day1) (Day2) (Day3))))",
        "(declare-fun works (Workers Tasks Days) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (or (exists ((w Workers) (t Tasks)) (and (works w t d) (not (ite (and (= d Day1) (works w t Day1)) (works w t Day2) (works w t Day3)))) (exists ((w Workers) (t Tasks)) (and (works w t d) (not (ite (and (= d Day2) (works w t Day2)) (works w t Day1) (works w t Day3)))) (exists ((w Workers) (t Tasks)) (and (works w t d) (not (ite (and (= d Day3) (works w t Day3)) (works w t Day1) (works w t Day2)))))))",
        "(not (exists ((w Workers) (t Tasks) (d Days)) (and (works w taping t Day1) (works w priming t Day1))))",
        "(not (exists ((w Workers) (t Tasks) (d Days)) (and (works w taping t Day2) (works w priming t Day2))))",
        "(not (exists ((w Workers) (t Tasks) (d Days)) (and (works w taping t Day3) (works w priming t Day3))))",
        "(forall ((w Workers)) (exists ((t Tasks) (d Days)) (and (works w t d) (not (ite (and (works w t Day1) (works w t Day2)) (works w t Day3)) (ite (and (works w t Day1) (works w t Day3)) (works w t Day2)) (ite (and (works w t Day2) (works w t Day3)) (works w t Day1))))))",
        "(forall ((w Workers) (d Days)) (<= (+ (to-int (works w taping d)) (to-int (works w wallboarding d)) (to-int (works w framing d)) (to-int (works w priming d)) (to-int (works w sanding d))) 1))",
        "(forall ((t1 Tasks) (t2 Tasks) (distinct t1 t2) (forall ((w Workers) (d Days)) (=> (and (works w t1 d) (works w t2 d)) (not (and (works w t1 d) (works w t2 d))))))",
        "(assert (works George taping Day1))",
        "(assert (works George taping Day3))",
        "(assert (works Helena sanding Day1))",
        "(assert (works Helena priming Day2))",
        "(assert (works Inga framing Day1))",
        "(assert (works Inga priming Day2))",
        "(assert (works Kelly framing Day3))",
        "(assert (works Kelly sanding Day3))",
        "(assert (works Leanda wallboarding Day1))",
        "(assert (works Leanda taping Day2))",
        "(assert (works Maricita sanding Day2))",
        "(assert (works Olaf wallboarding Day3))",
        "(assert (works Olaf priming Day3))"
      ],
      "options": [
        "(exists ((w1 Workers) (w2 Workers)) (and (works w1 framing Day1) (works w2 framing Day1) (works w1 framing Day3) (works w2 framing Day3)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1532467603683472,
        1.0134975910186768
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Each of the following could be a complete and accurate list of the members of the crew EXCEPT:",
      "options": [
        "A) Helena, Inga, Kelly, Maricita",
        "B) Inga, Kelly, Leanda, Olaf",
        "C) George, Helena, Inga, Leanda",
        "D) Inga, Leanda, Maricita, Olaf",
        "E) Kelly, Leanda, Maricita, Olaf"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3))))",
        "(declare-fun canDo (Workers Tasks) Bool)",
        "(declare-fun assignedTo (Workers Days Tasks) Bool)"
      ],
      "constraints": [
        "(assert (and",
        " (canDo George taping)",
        " (canDo Helena sanding)",
        " (canDo Helena priming)",
        " (canDo Inga framing)",
        " (canDo Inga priming)",
        " (canDo Kelly framing)",
        " (canDo Kelly sanding)",
        " (canDo Leanda wallboarding)",
        " (canDo Leanda taping)",
        " (canDo Maricita sanding)",
        " (canDo Olaf wallboarding)",
        " (canDo Olaf priming)",
        "))",
        "(assert (not (canDo George framing))",
        "(assert (not (canDo George wallboarding))",
        "(assert (not (canDo George sanding))",
        "(assert (not (canDo George priming))",
        "(assert (not (canDo Helena framing))",
        "(assert (not (canDo Helena wallboarding))",
        "(assert (not (canDo Helena taping))",
        "(assert (not (canDo Helena sanding))",
        "(assert (not (canDo Inga wallboarding))",
        "(assert (not (canDo Inga taping))",
        "(assert (not (canDo Inga sanding))",
        "(assert (not (canDo Inga priming))",
        "(assert (not (canDo Kelly wallboarding))",
        "(assert (not (canDo Kelly taping))",
        "(assert (not (canDo Kelly priming))",
        "(assert (not (canDo Kelly sanding))",
        "(assert (not (canDo Leanda framing))",
        "(assert (not (canDo Leanda wallboarding))",
        "(assert (not (canDo Leanda taping))",
        "(assert (not (canDo Leanda sanding))",
        "(assert (not (canDo Maricita framing))",
        "(assert (not (canDo Maricita wallboarding))",
        "(assert (not (canDo Maricita taping))",
        "(assert (not (canDo Maricita priming))",
        "(assert (not (canDo Olaf framing))",
        "(assert (not (canDo Olaf wallboarding))",
        "(assert (not (canDo Olaf taping))",
        "(assert (not (canDo Olaf sanding))",
        ")",
        "(assert (or (exists ((w Workers)) (assignedTo w day1 framing))",
        "             (exists ((w Workers)) (assignedTo w day1 wallboarding))",
        "             (exists ((w Workers)) (assignedTo w day1 taping))",
        "             (exists ((w Workers)) (assignedTo w day1 sanding))",
        "             (exists ((w Workers)) (assignedTo w day1 priming))))",
        "(assert (or (exists ((w Workers)) (assignedTo w day2 framing))",
        "             (exists ((w Workers)) (assignedTo w day2 wallboarding))",
        "             (exists ((w Workers)) (assignedTo w day2 taping))",
        "             (exists ((w Workers)) (assignedTo w day2 sanding))",
        "             (exists ((w Workers)) (assignedTo w day2 priming))))",
        "(assert (or (exists ((w Workers)) (assignedTo w day3 framing))",
        "             (exists ((w Workers)) (assignedTo w day3 wallboarding))",
        "             (exists ((w Workers)) (assignedTo w day3 taping))",
        "             (exists ((w Workers)) (assignedTo w day3 sanding))",
        "             (exists ((w Workers)) (assignedTo w day3 priming))))",
        "(assert (not (and (exists ((w Workers) (d Days)) (assignedTo w d taping))",
        "                  (exists ((w Workers) (d Days)) (assignedTo w d priming))))",
        "(assert (forall ((w Workers))",
        "    (exists ((d Days) (t Tasks)) (assignedTo w d t))))",
        "(assert (forall ((w Workers) (d Days))",
        "    (<= (count (filter (lambda ((t Tasks)) (assignedTo w d t)) (tasks)))) 1))"
      ],
      "options": [
        "(assert (and",
        " (assignedTo Helena day1 sanding)",
        " (assignedTo Inga day1 framing)",
        " (assignedTo Kelly day1 sanding)",
        " (assignedTo Maricita day1 sanding)",
        "))"
      ],
      "type": "sat",
      "perplexity": [
        1.0976721048355103,
        1.0179550647735596
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 21,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "If the installation takes three days, and if the sanding is done on the third day, then which one of the following could be a list of all the crew members who work on the second day?",
      "options": [
        "A) Inga",
        "B) Kelly",
        "C) Olaf",
        "D) George and Helena",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-fun works (Workers Tasks Days) Bool)"
      ],
      "constraints": [
        "(or (exists ((w Workers) (t Tasks)) (works w t day1)) (exists ((w Workers) (t Tasks)) (works w t day2)) (exists ((w Workers) (t Tasks)) (works w t day3)))",
        "(not (and (exists ((w Workers) (t Tasks)) (works w taping day1)) (exists ((w Workers) (t Tasks)) (works w priming day1))))",
        "(not (and (exists ((w Workers) (t Tasks)) (works w taping day2)) (exists ((w Workers) (t Tasks)) (works w priming day2))))",
        "(not (and (exists ((w Workers) (t Tasks)) (works w taping day3)) (exists ((w Workers) (t Tasks)) (works w priming day3))))",
        "(forall ((w Workers)) (>= (count ((t Tasks) (works w t day1)) (count ((t Tasks) (works w t day2)) (count ((t Tasks) (works w t day3))))) 1))",
        "(forall ((w Workers) (t1 Tasks) (t2 Tasks)) (=> (and (works w t1 day1) (works w t2 day1)) (not (and (works w t1 day2) (works w t2 day2))))))",
        "(forall ((w Workers) (t1 Tasks) (t2 Tasks)) (=> (and (works w t1 day2) (works w t2 day2)) (not (and (works w t1 day1) (works w t2 day1))))))",
        "(forall ((w Workers) (t1 Tasks) (t2 Tasks)) (=> (and (works w t1 day3) (works w t2 day3)) (not (and (works w t1 day1) (works w t2 day1))))))"
      ],
      "options": [
        "(works Maricita sanding day3)",
        "(and (exists ((w Workers)) (works w framing day1)) (exists ((w Workers)) (works w wallboarding day1)) (exists ((w Workers)) (works w taping day1)) (exists ((w Workers)) (works w priming day2)) (exists ((w Workers)) (works w sanding day3)))"
      ],
      "type": "sat",
      "perplexity": [
        1.128962516784668,
        1.015921711921692
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 22,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Which one of the following could be a pair of members of the crew both of whom work on the same days as each other and each of whom perform two tasks?",
      "options": [
        "A) George and Maricita",
        "B) Helena and Kelly",
        "C) Inga and Leanda",
        "D) Kelly and Leanda",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Days 0)) (((Day1) (Day2) (Day3))))",
        "(declare-fun works (Workers Tasks Days) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((t Tasks)) (exists ((w Workers)) (and (works w t d) (not (equal (t) (framing)))))))",
        "(forall ((w Workers)) (and (=> (works w taping Day1) (not (works w priming Day1))) (=> (works w taping Day2) (not (works w priming Day2))) (=> (works w taping Day3) (not (works w priming Day3))))))",
        "(forall ((w Workers)) (exists ((d Days) (t Tasks)) (works w t d)))",
        "(forall ((w Workers) (d Days)) (<= (+ (to-int (works w framing d)) (to-int (works w wallboarding d)) (to-int (works w taping d)) (to-int (works w sanding d)) (to-int (works w priming d))) 1))",
        "(forall ((t Tasks) (d Days)) (exists ((w Workers)) (and (works w t d) (not (exists ((w') Workers) (and (distinct w w') (works w' t d)))))))"
      ],
      "options": [
        "(and (works George taping Day1) (works George priming Day2) (works Maricita wallboarding Day1) (works Maricita sanding Day2))"
      ],
      "type": "sat",
      "perplexity": [
        1.1558318138122559,
        1.0066951513290405
      ],
      "answer": "D",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following could be an accurate matching of the hangers to the fabrics of the dresses that hang on them?",
      "options": [
        "A) 1: wool; 2: gauze; 3: silk; 4: linen; 5: polyester; 6: rayon",
        "B) 1: rayon; 2: wool; 3: gauze; 4: silk; 5: linen; 6: polyester",
        "C) 1: polyester; 2: gauze; 3: wool; 4: silk; 5: linen; 6: rayon",
        "D) 1: linen; 2: silk; 3: wool; 4: gauze; 5: polyester; 6: rayon",
        "E) 1: gauze; 2: rayon; 3: silk; 4: linen; 5: wool; 6: polyester"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Fabrics 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun repairs (Hangers Fabrics) Bool)"
      ],
      "constraints": [
        "(and (repairs 1 gauze) (repairs 2 linen) (repairs 3 silk) (repairs 4 polyester) (repairs 5 rayon) (repairs 6 wool))",
        "(and (repairs 1 rayon) (repairs 6 polyester))",
        "(or (repairs 1 rayon) (repairs 6 rayon))",
        "(and (repairs 1 gauze) (repairs 2 linen) (repairs 3 silk) (repairs 4 polyester) (repairs 5 rayon) (repairs 6 wool))"
      ],
      "options": [
        "(and (repairs 1 wool) (repairs 2 gauze) (repairs 3 silk) (repairs 4 linen) (repairs 5 polyester) (repairs 6 rayon))",
        "(and (repairs 1 rayon) (repairs 2 wool) (repairs 3 gauze) (repairs 4 silk) (repairs 5 linen) (repairs 6 polyester))",
        "(and (repairs 1 polyester) (repairs 2 gauze) (repairs 3 wool) (repairs 4 silk) (repairs 5 linen) (repairs 6 rayon))",
        "(and (repairs 1 linen) (repairs 2 silk) (repairs 3 wool) (repairs 4 gauze) (repairs 5 polyester) (repairs 6 rayon))",
        "(and (repairs 1 gauze) (repairs 2 rayon) (repairs 3 silk) (repairs 4 linen) (repairs 5 wool) (repairs 6 polyester))"
      ],
      "type": "sat",
      "perplexity": [
        1.0737687349319458,
        1.012790322303772
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If both the silk dress and the gauze dress are on odd-numbered hangers, then which one of the following could be true?",
      "options": [
        "A) The polyester dress is on hanger 1.",
        "B) The wool dress is on hanger 2.",
        "C) The polyester dress is on hanger 4.",
        "D) The linen dress is on hanger 5.",
        "E) The wool dress is on hanger 6."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(exists ((h1 Hangers) (h2 Hangers)) (and (hgt h1 h2) (hangs h1 gauze) (hangs h2 polyester)))",
        "(or (hangs 1 rayon) (hangs 6 rayon))",
        "(or (hangs 3 wool) (hangs 3 silk))",
        "(exists ((h1 Hangers) (h2 Hangers)) (and (hgt h1 h2) (hangs h1 silk) (hangs h2 linen)))"
      ],
      "options": [
        "(and (hangs 1 silk) (hangs 1 gauze) (hangs 1 polyester))",
        "(and (hangs 3 silk) (hangs 1 gauze) (hangs 2 wool))",
        "(and (hangs 3 silk) (hangs 3 gauze) (hangs 4 polyester))",
        "(and (hangs 5 silk) (hangs 1 gauze) (hangs 5 linen))",
        "(and (hangs 5 silk) (hangs 1 gauze) (hangs 6 wool))"
      ],
      "type": "sat",
      "perplexity": [
        1.0668503046035767,
        1.0069794654846191
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If the silk dress is on an even-numbered hanger, which one of the following could be on the hanger immediately to its left?",
      "options": [
        "A) the gauze dress",
        "B) the linen dress",
        "C) the polyester dress",
        "D) the rayon dress",
        "E) the wool dress"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(implies (and (hangs h1 gauze) (hangs h2 polyester)) (< h1 h2))",
        "(or (hangs 1 rayon) (hangs 6 rayon))",
        "(or (hangs 3 wool) (hangs 3 silk))",
        "(implies (and (hangs h1 silk) (hangs h2 linen)) (= (+ h1 1) h2))"
      ],
      "options": [
        "(= 2 (even? 2))",
        "(hangs 2 silk)",
        "(or (and (hangs 1 gauze) (not (hangs 1 linen))) (and (hangs 1 linen) (not (hangs 1 gauze))) (and (hangs 1 polyester) (not (hangs 1 rayon))) (and (hangs 1 rayon) (not (hangs 1 polyester))) (and (hangs 1 wool) (not (hangs 1 silk))) (and (hangs 1 silk) (not (hangs 1 wool))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1036700010299683,
        1.0188102722167969
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If the polyester dress is on hanger 2, then which one of the following must be true?",
      "options": [
        "A) The silk dress is on hanger 1.",
        "B) The wool dress is on hanger 3.",
        "C) The linen dress is on hanger 4.",
        "D) The linen dress is on hanger 5.",
        "E) The rayon dress is on hanger 6."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(forall ((h1 Hangers) (h2 Hangers) (d1 Dresses) (d2 Dresses)) (=> (and (h1 < h2) (h1 = 1) (hangs h1 d1) (hangs h2 d2) (= d2 polyester)) (<> d1 gauze)))",
        "(forall ((d Dresses)) (or (= d rayon) (and (hangs 1 d) (not (hangs 6 d))) (and (hangs 6 d) (not (hangs 1 d)))))",
        "(forall ((d Dresses)) (or (= d wool) (= d silk) (not (and (hangs 3 d) (not (or (= d wool) (= d silk)))))))",
        "(forall ((d1 Dresses) (d2 Dresses)) (=> (and (hangs 3 d1) (hangs 4 d2) (= d1 silk) (= d2 linen)) (not (and (hangs 4 d1) (hangs 3 d2))))))"
      ],
      "options": [
        "(hangs 2 polyester)"
      ],
      "type": "sat",
      "perplexity": [
        1.1659868955612183,
        1.0141783952713013
      ],
      "answer": "E",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 27,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) The linen dress hangs immediately next to the gauze dress.",
        "B) The polyester dress hangs immediately to the right of the rayon dress.",
        "C) The rayon dress hangs immediately to the left of the wool dress.",
        "D) The silk dress is on a lower-numbered hanger than the gauze dress.",
        "E) The wool dress is on a higher-numbered hanger than the rayon dress."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(forall ((h1 Hangers) (h2 Hangers) (g Dress) (p Dress)) (=> (and (h1 < h2) (h1 = g) (h2 = p)) (not (h1 = p))))",
        "(or (= (hangs 1 rayon) true) (= (hangs 6 rayon) true))",
        "(or (= (hangs 3 wool) true) (= (hangs 3 silk) true))",
        "(forall ((s Dress) (l Dress)) (=> (and (hangs s silk) (hangs l linen)) (= (inc s) l)))"
      ],
      "options": [
        "(and (hangs 1 gauze) (hangs 2 linen))",
        "(and (hangs 2 polyester) (hangs 3 rayon))",
        "(and (hangs 1 rayon) (hangs 2 wool))",
        "(and (hangs 1 silk) (hangs 2 gauze))",
        "(and (hangs 2 wool) (hangs 1 rayon))"
      ],
      "type": "sat",
      "perplexity": [
        1.107954740524292,
        1.0154478549957275
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following CANNOT hang immediately next to the rayon dress?",
      "options": [
        "A) the gauze dress",
        "B) the linen dress",
        "C) the polyester dress",
        "D) the silk dress",
        "E) the wool dress"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) ((1 2 3 4 5 6)))",
        "(declare-datatypes ((Dresses 0)) ((gauze linen polyester rayon silk wool)))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(forall ((h1 Hangers) (h2 Hangers)) (=> (and (h1 < h2) (hangs h1 gauze) (hangs h2 polyester)) (not (= h1 h2))))",
        "(or (hangs 1 rayon) (hangs 6 rayon))",
        "(or (hangs 3 wool) (hangs 3 silk))",
        "(forall ((h1 Hangers) (h2 Hangers)) (=> (and (h1 < h2) (hangs h1 silk) (hangs h2 linen)) (not (= h1 (+ h2 1)))))"
      ],
      "options": [
        "(exists ((h Hangers)) (and (hangs h rayon) (not (hangs (+ h 1) gauze))))",
        "(exists ((h Hangers)) (and (hangs h rayon) (not (hangs (+ h 1) linen))))",
        "(exists ((h Hangers)) (and (hangs h rayon) (not (hangs (+ h 1) polyester))))",
        "(exists ((h Hangers)) (and (hangs h rayon) (not (hangs (+ h 1) silk))))",
        "(exists ((h Hangers)) (and (hangs h rayon) (not (hangs (+ h 1) wool))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1030035018920898,
        1.014793038368225
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Assume that the original condition that the linen dress hangs immediately to the right of the silk dress is replaced by the condition that the wool dress hangs immediately to the right of the silk dress. If all the other initial conditions remain in effect, which one of the following must be false?",
      "options": [
        "A) The linen dress is on hanger 1.",
        "B) The gauze dress is on hanger 2.",
        "C) The wool dress is on hanger 4.",
        "D) The silk dress is on hanger 5.",
        "E) The polyester dress is on hanger 6."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) ((1 2 3 4 5 6)))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(and (not (or (hangs 1 gauze) (hangs 2 gauze)))  ",
        "(or (hangs 1 rayon) (hangs 6 rayon))",
        "(or (hangs 3 wool) (hangs 3 silk))",
        "(and (not (eq (hangs 3 linen) true)) (not (eq (hangs 4 linen) true)))",
        "(and (eq (hangs 3 silk) true) (eq (hangs 4 wool) true))"
      ],
      "options": [
        "(not (and (hangs 1 linen) (not (eq (hangs 2 linen) true))))",
        "(not (and (hangs 2 gauze) (not (eq (hangs 3 gauze) true))))",
        "(not (and (hangs 4 wool) (not (eq (hangs 5 wool) true))))",
        "(not (and (hangs 5 silk) (not (eq (hangs 6 silk) true))))",
        "(not (and (hangs 6 polyester) (not (eq (hangs 5 polyester) true))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1555554866790771,
        1.0251184701919556
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following could be an accurate matching of the four songs performed at the festival with the instruments on which they are performed, listed in order from the first song performed to the last?",
      "options": [
        "A) \"Night's All Right\": guitar;\" Question Man\": keyboard; \"Sammy\": guitar;\" Rhino Rock\": flute",
        "B) \"Question Man\": guitar;\" Rhino Rock\": harmonica; \"Sammy\": keyboard;\" Night's All Right\": flute",
        "C) \"Rhino Rock\": flute;\" Question Man\": keyboard; \"Night's All Right\": harmonica;\" Sammy\": guitar",
        "D) \"Sammy\": harmonica;\" Night's All Right\": guitar; \"Question Man\": keyboard;\" Rhino Rock\": flute",
        "E) \"Sammy\": harmonica;\" Rhino Rock\": guitar; \"Question Man\": flute;\" Night's All Right\": keyboard"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard))))",
        "(declare-fun performs (Songs Instruments) Bool)"
      ],
      "constraints": [
        "(not (and (forall ((s Songs)) (= (performs s flute) true)) (exists ((s Songs)) (= s (car (list Night's_All_Right Question_Man Rhino_Rock Sammy))))) )",
        "(forall ((s Songs)) (=> (and (= s Sammy) (= (performs s keyboard) true)) (performs Rhino_Rock harmonica)))",
        "(forall ((s Songs)) (=> (and (= s Question_Man) (= (performs s keyboard) true)) (performs Night's_All_Right flute)))",
        "(forall ((s Songs)) (=> (and (= (performs s keyboard) true) (= s (nth 3 (list Night's_All_Right Question_Man Rhino_Rock Sammy)))) (and (= (performs Rhino_Rock keyboard) true) (= (performs Night's_All_Right keyboard) true))))"
      ],
      "options": [
        "(and (performs Night's_All_Right guitar) (performs Question_Man keyboard) (performs Sammy guitar) (performs Rhino_Rock flute))"
      ],
      "type": "sat",
      "perplexity": [
        1.2109355926513672,
        1.059267282485962
      ],
      "answer": "B",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following could be true?",
      "options": [
        "A) \"Question Man\" immediately follows the song performed on the keyboard.",
        "B) \"Night's All Right\" immediately precedes the song performed on the keyboard.",
        "C) \"Question Man\" immediately precedes the song performed on the guitar.",
        "D) \"Rhino Rock\" immediately precedes the song performed on the harmonica.",
        "E) \"Sammy\" immediately precedes the song performed on the guitar."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Night_All_Right) (Question_Man) (Rhino_Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard))))",
        "(declare-datatypes ((Positions 0)) (((first) (second) (third) (fourth))))",
        "(declare-fun song-instrument (Songs Instruments) Bool)",
        "(declare-fun song-position (Songs Positions) Bool)"
      ],
      "constraints": [
        "(forall ((s Songs)) (<= (count ((lambda (x) (song-instrument s x))) (Instruments)) 1))",
        "(forall ((i Instruments)) (<= (count ((lambda (x) (song-instrument x i))) (Songs)) 1))",
        "(not (song-instrument Night_All_Right flute))",
        "(implies (song-instrument Sammy keyboard) (song-instrument Rhino_Rock harmonica))",
        "(implies (song-instrument Question_Man keyboard) (song-instrument Night_All_Right flute))",
        "(and (implies (song-instrument Rhino_Rock  (some i) ) (song-instrument (some j) keyboard)) (implies (song-instrument keyboard (some i) ) (song-instrument (some j) Night_All_Right))) )"
      ],
      "options": [
        "(assert (song-instrument Question_Man keyboard) (song-instrument (next-song Question_Man)))",
        "(assert (song-instrument Night_All_Right keyboard) (song-instrument (prev-song Night_All_Right)))",
        "(assert (song-instrument Question_Man guitar) (song-instrument (prev-song Question_Man)))",
        "(assert (song-instrument Rhino_Rock harmonica) (song-instrument (prev-song Rhino_Rock)))",
        "(assert (song-instrument Sammy guitar) (song-instrument (prev-song Sammy)))"
      ],
      "type": "sat",
      "perplexity": [
        1.2278621196746826,
        1.019751787185669
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following CANNOT be true of the song performed on the flute?",
      "options": [
        "A) It immediately precedes \"Question Man.\"",
        "B) It immediately follows \"Question Man.\"",
        "C) It immediately precedes \"Rhino Rock.\"",
        "D) It immediately follows \"Night's All Right.\"",
        "E) It immediately follows \"Sammy.\""
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Night's All Right) (Question Man) (Rhino Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard))))",
        "(declare-fun performs (Songs Instruments) Bool)"
      ],
      "constraints": [
        "(forall ((s Songs)) (and (not (= (performs s flute) True)) (not (= (performs s guitar) True)) (not (= (performs s harmonica) True)) (not (= (performs s keyboard) True))))",
        "(forall ((i Instruments)) (<= (+ (to-int (performs Night's All Right i)) (to-int (performs Question Man i)) (to-int (performs Rhino Rock i)) (to-int (performs Sammy i))) 1))",
        "(not (performs Night's All Right flute))",
        "(=> (performs Sammy keyboard) (performs Rhino Rock harmonica))",
        "(=> (performs Question Man keyboard) (performs Night's All Right flute))",
        "(and (=> (performs Rhino Rock keyboard) (performs Night's All Right flute)) (=> (performs Night's All Right flute) (not (performs Rhino Rock keyboard))))"
      ],
      "options": [
        "(not (=> (performs Night's All Right flute) (performs Question Man keyboard)))",
        "(not (=> (performs Night's All Right flute) (performs Question Man keyboard)))",
        "(not (=> (performs Night's All Right flute) (performs Rhino Rock keyboard)))",
        "(not (=> (performs Night's All Right flute) (performs Night's All Right keyboard)))",
        "(not (=> (performs Night's All Right flute) (performs Sammy keyboard)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0967744588851929,
        1.0081690549850464
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "If \"Rhino Rock\" is the second song performed at the festival, then which one of the following could be true?",
      "options": [
        "A) The first song performed is performed on the keyboard.",
        "B) The third song performed is performed on the guitar.",
        "C) The third song performed is performed on the flute.",
        "D) \"Night's All Right\" is performed on the guitar.",
        "E) \"Rhino Rock\" is performed on the guitar."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Night's All Right) (Question Man) (Rhino Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard))))",
        "(declare-fun song (Int) Songs)",
        "(declare-fun instrument (Int) Instruments)",
        "(declare-var i1 Int)",
        "(declare-var i2 Int)",
        "(declare-var i3 Int)",
        "(declare-var i4 Int)"
      ],
      "constraints": [
        "(distinct i1 i2 i3 i4)",
        "(= i1 (pred i2))",
        "(= i2 (pred i3))",
        "(= i3 (pred i4))",
        "(not (= (instrument i1) flute))",
        "(=> (and (= (song i4) Sammy) (= (instrument i4) keyboard)) (= (instrument i2) harmonica))",
        "(=> (and (= (song i4) Question Man) (= (instrument i4) keyboard)) (= (instrument i1) flute))",
        "(= (instrument i2) keyboard)",
        "(= (instrument i3) keyboard)"
      ],
      "options": [
        "(assert (= i2 (song 2)))",
        "(assert (= (instrument i1) keyboard))",
        "(assert (= (instrument i3) guitar))",
        "(assert (= (instrument i3) flute))",
        "(assert (= (instrument i4) guitar))",
        "(assert (= (instrument i2) guitar))"
      ],
      "type": "sat",
      "perplexity": [
        1.1117833852767944,
        1.0171687602996826
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "If \"Question Man\" is the third song performed at the festival, then each of the following could be true EXCEPT:",
      "options": [
        "A) \"Question Man\" is performed on the guitar.",
        "B) \"Question Man\" is performed on the keyboard.",
        "C) \"Rhino Rock\" is performed on the guitar.",
        "D) \"Sammy\" is performed on the guitar.",
        "E) \"Sammy\" is performed on the harmonica."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard))))",
        "(declare-datatypes ((Positions 0)) (((first) (second) (third) (fourth))))",
        "(declare-fun performs (Songs Instruments Positions) Bool)"
      ],
      "constraints": [
        "(not (and (equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (first)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (flute))))",
        "(=> (and (equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (Sammy)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (keyboard))) (and (equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (Rhino_Rock)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (harmonica))))",
        "(=> (and (equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (Question_Man)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (keyboard))) (and (equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (Night's_All_Right)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (flute))))",
        "(and (=> (and (equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (Rhino_Rock)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (keyboard)))(equal (car (list (Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))) (Night's_All_Right)) (equal (car (list (flute) (guitar) (harmonica) (keyboard))) (keyboard))))))",
        "options",
        "type",
        "sat",
        "}"
      ],
      "perplexity": [
        1.0640915632247925,
        1.122930645942688
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "Which one of the following could be a complete and accurate list of the members of the finance committee?",
      "options": [
        "A) Guzman, Hawking, Miyauchi, Wharton",
        "B) Guzman, Lepp, Zhu",
        "C) Hawking, Miyauchi, Zhu",
        "D) Hawking, Upchurch, Wharton, Zhu",
        "E) Miyauchi, Upchurch, Wharton"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu))))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives))))",
        "(declare-fun serves (People Committees) Bool)"
      ],
      "constraints": [
        "(=> (serves Guzman finance) (serves Hawking incentives))",
        "(=> (serves Lepp finance) (and (serves Miyauchi incentives) (serves Upchurch incentives)))",
        "(=> (distinct (serves Wharton finance) (serves Zhu finance)) (distinct (serves Wharton incentives) (serves Zhu incentives)))",
        "(=> (distinct (serves Upchurch finance) (serves Guzman finance)) (distinct (serves Upchurch incentives) (serves Guzman incentives)))",
        "(=> (serves Zhu finance) (serves Hawking finance))"
      ],
      "options": [
        "(and (serves Guzman finance) (serves Hawking incentives) (serves Miyauchi incentives) (serves Wharton finance))",
        "(and (serves Guzman finance) (serves Lepp finance) (serves Zhu finance))",
        "(and (serves Hawking incentives) (serves Miyauchi incentives) (serves Zhu incentives))",
        "(and (serves Hawking incentives) (serves Upchurch incentives) (serves Wharton incentives) (serves Zhu incentives))",
        "(and (serves Miyauchi incentives) (serves Upchurch incentives) (serves Wharton incentives))"
      ],
      "type": "sat",
      "perplexity": [
        1.0450923442840576,
        1.0148366689682007
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "Which one of the following pairs of board members CANNOT both serve on the incentives committee?",
      "options": [
        "A) Guzman and Hawking",
        "B) Guzman and Wharton",
        "C) Hawking and Wharton",
        "D) Miyauchi and Upchurch",
        "E) Miyauchi and Wharton"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((BoardMembers 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu))))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives))))",
        "(declare-fun belongs (BoardMembers Committees) Bool)"
      ],
      "constraints": [
        "(forall ((b BoardMembers)) (and (not (= (belongs b finance) True)) (not (= (belongs b incentives) True))))",
        "(=> (belongs Guzman finance) (belongs Hawking incentives))",
        "(=> (belongs Lepp finance) (and (belongs Miyauchi incentives) (belongs Upchurch incentives)))",
        "(not (and (belongs Wharton finance) (belongs Zhu finance)))",
        "(not (and (belongs Wharton incentives) (belongs Zhu incentives)))",
        "(not (and (belongs Upchurch finance) (belongs Guzman finance)))",
        "(not (and (belongs Upchurch incentives) (belongs Guzman incentives)))",
        "(=> (belongs Zhu finance) (belongs Hawking finance))"
      ],
      "options": [
        "(not (and (belongs Guzman incentives) (belongs Hawking incentives)))",
        "(not (and (belongs Guzman incentives) (belongs Wharton incentives)))",
        "(not (and (belongs Hawking incentives) (belongs Wharton incentives)))",
        "(not (and (belongs Miyauchi incentives) (belongs Upchurch incentives)))",
        "(not (and (belongs Miyauchi incentives) (belongs Wharton incentives)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0640660524368286,
        1.0088087320327759
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "What is the maximum number of members on the finance committee?",
      "options": [
        "A) two",
        "B) three",
        "C) four",
        "D) five",
        "E) six"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((BoardMembers 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu))))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives))))",
        "(declare-fun serves (BoardMembers Committees) Bool)"
      ],
      "constraints": [
        "(implies (serves Guzman finance) (serves Hawking incentives))",
        "(implies (serves Lepp finance) (and (serves Miyauchi incentives) (serves Upchurch incentives)))",
        "(not (and (serves Wharton finance) (serves Zhu finance)))",
        "(not (and (serves Wharton incentives) (serves Zhu incentives)))",
        "(not (and (serves Upchurch finance) (serves Guzman finance)))",
        "(not (and (serves Upchurch incentives) (serves Guzman incentives)))",
        "(implies (serves Zhu finance) (serves Hawking finance))"
      ],
      "options": [],
      "type": "sat",
      "perplexity": [
        1.0712202787399292,
        1.023919701576233
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "If Miyauchi and Wharton both serve on the finance committee, then which one of the following could be true?",
      "options": [
        "A) Guzman and Lepp both serve on the finance committee.",
        "B) Guzman and Upchurch both serve on the incentives committee.",
        "C) Hawking and Zhu both serve on the finance committee.",
        "D) Lepp and Upchurch both serve on the incentives committee.",
        "E) Zhu and Upchurch both serve on the finance committee."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((BoardMembers 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu))))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives))))",
        "(declare-fun serves (BoardMembers Committees) Bool)"
      ],
      "constraints": [
        "(=> (serves Guzman finance) (serves Hawking incentives))",
        "(=> (serves Lepp finance) (and (serves Miyauchi incentives) (serves Upchurch incentives)))",
        "(=> (not (= (serves Wharton finance) (serves Zhu finance))) (not (= (serves Wharton incentives) (serves Zhu incentives))))",
        "(=> (not (= (serves Upchurch finance) (serves Guzman finance))) (not (= (serves Upchurch incentives) (serves Guzman incentives))))",
        "(=> (serves Zhu finance) (serves Hawking finance))"
      ],
      "options": [
        "(and (serves Miyauchi finance) (serves Wharton finance))",
        "(and (serves Guzman finance) (serves Lepp finance))",
        "(and (serves Miyauchi finance) (serves Wharton finance))",
        "(and (serves Guzman incentives) (serves Upchurch incentives))",
        "(and (serves Miyauchi finance) (serves Wharton finance))",
        "(and (serves Hawking finance) (serves Zhu finance))",
        "(and (serves Miyauchi finance) (serves Wharton finance))",
        "(and (serves Lepp incentives) (serves Upchurch incentives))",
        "(and (serves Miyauchi finance) (serves Wharton finance))",
        "(and (serves Zhu finance) (serves Upchurch finance))"
      ],
      "type": "sat",
      "perplexity": [
        1.0325736999511719,
        1.0065884590148926
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "If Guzman serves on the incentives committee, then which one of the following must be true?",
      "options": [
        "A) Hawking serves on the finance committee.",
        "B) Lepp serves on the incentives committee.",
        "C) Miyauchi serves on the finance committee.",
        "D) Wharton serves on the incentives committee.",
        "E) Zhu serves on the finance committee."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((BoardMembers 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu))))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives))))",
        "(declare-fun committee (BoardMembers Committees) Bool)"
      ],
      "constraints": [
        "(forall ((b BoardMembers)) (or (committee b finance) (committee b incentives)))",
        "(implies (committee Guzman finance) (committee Hawking incentives))",
        "(implies (committee Lepp finance) (and (committee Miyauchi incentives) (committee Upchurch incentives)))",
        "(not (and (committee Wharton finance) (committee Zhu finance)))",
        "(not (and (committee Upchurch finance) (committee Guzman finance)))",
        "(implies (committee Zhu finance) (committee Hawking finance))"
      ],
      "options": [
        "(assert (committee Guzman incentives))"
      ],
      "type": "sat",
      "perplexity": [
        1.1277087926864624,
        1.0209592580795288
      ],
      "answer": "B",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "Which one of the following could be the order in which four of the people are seated, with no one else seated between them, counting clockwise around the table?",
      "options": [
        "A) George, Peter, Karl, Fiona",
        "B) Harriet, Olivia, Ingrid, Karl",
        "C) Ingrid, Fiona, Peter, Manuel",
        "D) Olivia, Manuel, Karl, George",
        "E) Peter, Harriet, Karl, Fiona"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-fun directly-across-from (People People) Bool)"
      ],
      "constraints": [
        "(directly-across-from Fiona George)",
        "(not (and (directly-across-from Harriet Fiona) (not (directly-across-from Harriet Karl))))",
        "(not (and (directly-across-from Harriet Karl) (not (directly-across-from Harriet Fiona))))",
        "(and (directly-across-from Ingrid Olivia) (directly-across-from Olivia Ingrid))"
      ],
      "options": [
        "(and (directly-across-from George Peter) (directly-across-from Peter Karl) (directly-across-from Karl Fiona) (directly-across-from Fiona George))",
        "(and (directly-across-from Harriet Olivia) (directly-across-from Olivia Ingrid) (directly-across-from Ingrid Karl) (directly-across-from Karl Harriet))",
        "(and (directly-across-from Ingrid Fiona) (directly-across-from Fiona Peter) (directly-across-from Peter Manuel) (directly-across-from Manuel Ingrid))",
        "(and (directly-across-from Olivia Manuel) (directly-across-from Manuel Karl) (directly-across-from Karl George) (directly-across-from George Olivia))",
        "(and (directly-across-from Peter Harriet) (directly-across-from Harriet Karl) (directly-across-from Karl Fiona) (directly-across-from Fiona Peter))"
      ],
      "type": "sat",
      "perplexity": [
        1.0647046566009521,
        1.0146749019622803
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 41,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Harriet and Olivia each sits immediately next to George, then which one of the following could be the two people each of whom sits immediately next to Peter?",
      "options": [
        "A) Fiona and Karl",
        "B) Fiona and Olivia",
        "C) Harriet and Ingrid",
        "D) Harriet and Karl",
        "E) Karl and Manuel"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Positions 0)) (((1) (2) (3) (4) (5) (6) (7) (8))))",
        "(declare-fun sits (People Positions) Bool)"
      ],
      "constraints": [
        "(and (sits Fiona 1) (sits George 5))",
        "(and (not (sits Harriet (pred 1))) (not (sits Harriet (succ 1))) (not (sits Harriet (pred 2))) (not (sits Harriet (succ 2))) (not (sits Harriet (pred 3))) (not (sits Harriet (succ 3))) (not (sits Harriet (pred 4))) (not (sits Harriet (succ 4))) (not (sits Harriet (pred 5))) (not (sits Harriet (succ 5))) (not (sits Harriet (pred 6))) (not (sits Harriet (succ 6))) (not (sits Harriet (pred 7))) (not (sits Harriet (succ 7))) (not (sits Harriet (pred 8))) (not (sits Harriet (succ 8))))",
        "(and (sits Ingrid (succ 3)) (sits Olivia 4))"
      ],
      "options": [
        "(and (sits Peter 1) (sits Peter 2))",
        "(and (sits Peter 1) (sits Peter 3))",
        "(and (sits Peter 2) (sits Peter 3))",
        "(and (sits Peter 2) (sits Peter 4))",
        "(and (sits Peter 3) (sits Peter 4))"
      ],
      "type": "sat",
      "perplexity": [
        1.0939130783081055,
        1.0119415521621704
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If George does not sit immediately next to Harriet, then which one of the following could be the two people each of whom sits immediately next to Manuel?",
      "options": [
        "A) Fiona and Harriet",
        "B) Fiona and Peter",
        "C) George and Karl",
        "D) George and Peter",
        "E) Harriet and Peter"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-fun next-to (People People) Bool)"
      ],
      "constraints": [
        "(exists ((p1 People) (p2 People)) (and (= p1 Fiona) (= p2 George) (next-to p1 p2) (next-to p2 p1)))",
        "(and (not (next-to Harriet Fiona)) (not (next-to Harriet Karl)) (not (next-to Karl Harriet)))",
        "(and (next-to Ingrid Olivia) (next-to Olivia Ingrid))"
      ],
      "options": [
        "(and (next-to Fiona Manuel) (next-to Harriet Manuel))",
        "(and (next-to Fiona Manuel) (next-to Peter Manuel))",
        "(and (next-to George Manuel) (next-to Karl Manuel))",
        "(and (next-to George Manuel) (next-to Peter Manuel))",
        "(and (next-to Harriet Manuel) (next-to Peter Manuel))"
      ],
      "type": "sat",
      "perplexity": [
        1.1238490343093872,
        1.0171664953231812
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Manuel sits immediately next to Olivia, then which one of the following people must sit immediately next to Fiona?",
      "options": [
        "A) Harriet",
        "B) Ingrid",
        "C) Karl",
        "D) Manuel",
        "E) Peter"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-fun across-from (People People) Bool)",
        "(declare-fun next-to (People People) Bool)"
      ],
      "constraints": [
        "(assert (across-from Fiona George))",
        "(assert (not (next-to Harriet Fiona)))",
        "(assert (not (next-to Harriet Karl)))",
        "(assert (not (next-to Karl Harriet)))",
        "(assert (next-to Ingrid Olivia))",
        "(assert (next-to Olivia Ingrid))"
      ],
      "options": [
        "(assert (next-to Manuel Olivia))",
        "(assert (next-to Fiona Harriet))"
      ],
      "type": "sat",
      "perplexity": [
        1.3387460708618164,
        1.0890170335769653
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "What is the minimum possible number of people sitting between Ingrid and Manuel, counting clockwise from Ingrid around the table?",
      "options": [
        "A) zero",
        "B) one",
        "C) two",
        "D) three",
        "E) four"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Directions 0)) (((left) (right))))",
        "(declare-fun sits-opposite (People People) Bool)",
        "(define-fun position-from-person (People People) Int)"
      ],
      "constraints": [
        "(assert (sits-opposite Fiona George))",
        "(assert (not (and (sits-opposite Harriet Fiona) (sits-opposite Harriet Karl))))",
        "(assert (not (and (sits-opposite Harriet Karl) (sits-opposite Harriet Fiona))))",
        "(assert (and (sits-opposite Ingrid Olivia) (position-from-person Ingrid Olivia 1)))"
      ],
      "options": [
        "(assert (= (position-from-person Ingrid Manuel) 0))",
        "(assert (= (position-from-person Ingrid Manuel) 1))",
        "(assert (= (position-from-person Ingrid Manuel) 2))",
        "(assert (= (position-from-person Ingrid Manuel) 3))"
      ],
      "type": "sat",
      "perplexity": [
        1.2034714221954346,
        1.0185420513153076
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Karl sits directly across from Ingrid, then each of the following people could sit immediately next to Olivia EXCEPT:",
      "options": [
        "A) Fiona",
        "B) George",
        "C) Harriet",
        "D) Manuel",
        "E) Peter"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-fun across-from (People People) Bool)",
        "(declare-fun next-to (People People) Bool)",
        "(declare-fun next-to-clockwise (People People) Bool)"
      ],
      "constraints": [
        "(assert (across-from Fiona George))",
        "(assert (not (and (next-to Harriet Fiona) (distinct Harriet Fiona))))",
        "(assert (not (and (next-to Harriet Karl) (distinct Harriet Karl))))",
        "(assert (and (next-to Ingrid Olivia) (next-to-clockwise Ingrid Olivia)))",
        "(assert (not (and (next-to Olivia Fiona) (distinct Olivia Fiona))))",
        "(assert (not (and (next-to Olivia George) (distinct Olivia George))))",
        "(assert (not (and (next-to Olivia Harriet) (distinct Olivia Harriet))))",
        "(assert (not (and (next-to Olivia Manuel) (distinct Olivia Manuel))))",
        "(assert (not (and (next-to Olivia Peter) (distinct Olivia Peter))))"
      ],
      "options": [
        "(assert (next-to Olivia Fiona))",
        "(assert (next-to Olivia George))",
        "(assert (next-to Olivia Harriet))",
        "(assert (next-to Olivia Manuel))",
        "(assert (next-to Olivia Peter))",
        1
      ],
      "type": "sat",
      "perplexity": [
        1.3900206089019775,
        1.1825449466705322
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Karl sits directly across from Harriet, then what is the minimum possible number of people sitting between George and Karl, counting clockwise from George to Karl?",
      "options": [
        "A) zero",
        "B) one",
        "C) two",
        "D) three",
        "E) four"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Positions 0)) (((0) (1) (2) (3) (4) (5) (6) (7))))",
        "(declare-fun directly_across (People People) Bool)",
        "(define-fun distance (People1 People2) Int)"
      ],
      "constraints": [
        "(assert (directly_across Fiona George))",
        "(assert (not (and (distance Fiona Harriet 1) (distance Fiona Karl 1))))",
        "(assert (and (distance Ingrid Olivia 1) (distance Ingrid Olivia 3)))"
      ],
      "options": [
        "(assert (directly_across Karl Harriet))",
        "(assert (>= (distance George Karl 0) 0))",
        "(assert (<= (distance George Karl 4) 4))"
      ],
      "type": "sat",
      "perplexity": [
        1.2152727842330933,
        1.0156843662261963
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 47,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following is an acceptable set of appointments of candidates to courts?",
      "options": [
        "A) appellate: Hamadi, Ortiz trial: Jefferson, Kurtz, Li, McDonnell, Perkins",
        "B) appellate: Hamadi, Li, Perkins trial: Jefferson, Kurtz, McDonnell, Ortiz",
        "C) appellate: Kurtz, Li, Perkins trial: Hamadi, Jefferson, McDonnell, Ortiz",
        "D) appellate: Li, McDonnell, Ortiz trial: Hamadi, Jefferson, Kurtz, Perkins",
        "E) appellate: Li, Perkins trial: Hamadi, Jefferson, Kurtz, McDonnell, Ortiz"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))))",
        "(declare-datatypes ((Courts 0)) (((appellate) (trial))))",
        "(declare-fun assigned-to (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(assigned-to Li appellate)",
        "(assigned-to Kurtz trial)",
        "(not (and (assigned-to Hamadi appellate) (assigned-to Perkins appellate)))",
        "(not (and (assigned-to Hamadi trial) (assigned-to Perkins trial)))"
      ],
      "options": [
        "(and (assigned-to Hamadi appellate) (assigned-to Ortiz appellate) (assigned-to Jefferson trial) (assigned-to Kurtz trial) (assigned-to Li trial) (assigned-to McDonnell trial) (assigned-to Perkins trial))",
        "(and (assigned-to Hamadi appellate) (assigned-to Li appellate) (assigned-to Perkins appellate) (assigned-to Jefferson trial) (assigned-to Kurtz trial) (assigned-to McDonnell trial) (assigned-to Ortiz trial))",
        "(and (assigned-to Kurtz appellate) (assigned-to Li appellate) (assigned-to Perkins appellate) (assigned-to Hamadi trial) (assigned-to Jefferson trial) (assigned-to McDonnell trial) (assigned-to Ortiz trial))",
        "(and (assigned-to Li appellate) (assigned-to McDonnell appellate) (assigned-to Ortiz appellate) (assigned-to Hamadi trial) (assigned-to Jefferson trial) (assigned-to Kurtz trial) (assigned-to Perkins trial))",
        "(and (assigned-to Li appellate) (assigned-to Perkins appellate) (assigned-to Hamadi trial) (assigned-to Jefferson trial) (assigned-to Kurtz trial) (assigned-to McDonnell trial) (assigned-to Ortiz trial))"
      ],
      "type": "sat",
      "perplexity": [
        1.0310841798782349,
        1.0119013786315918
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "unsat",
        "sat",
        "unsat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 48,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Hamadi and McDonnell are both appointed to the appellate court.",
        "B) McDonnell and Ortiz are both appointed to the appellate court.",
        "C) Ortiz and Perkins are both appointed to the appellate court.",
        "D) Hamadi and Jefferson are both appointed to the trial court.",
        "E) Ortiz and Perkins are both appointed to the trial court."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))))",
        "(declare-datatypes ((Courts 0)) (((appellate) (trial))))",
        "(declare-fun appointed (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(appointed Li appellate)",
        "(appointed Kurtz trial)",
        "(not (and (appointed Hamadi appellate) (appointed Perkins appellate)))",
        "(not (and (appointed Hamadi trial) (appointed Perkins trial)))"
      ],
      "options": [
        "(and (appointed Hamadi appellate) (appointed McDonnell appellate))",
        "(and (appointed McDonnell appellate) (appointed Ortiz appellate))",
        "(and (appointed Ortiz appellate) (appointed Perkins appellate))",
        "(and (appointed Hamadi trial) (appointed Jefferson trial))",
        "(and (appointed Ortiz trial) (appointed Perkins trial))"
      ],
      "type": "sat",
      "perplexity": [
        1.0381364822387695,
        1.0114221572875977
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 49,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Jefferson and McDonnell are both appointed to the appellate court.",
        "B) Jefferson and McDonnell are both appointed to the trial court.",
        "C) McDonnell and Ortiz are both appointed to the trial court.",
        "D) McDonnell and Perkins are both appointed to the appellate court.",
        "E) McDonnell and Perkins are both appointed to the trial court."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))))",
        "(declare-datatypes ((Courts 0)) (((appellate_court) (trial_court))))",
        "(declare-fun appointed (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(and (appointed Li appellate_court) (not (appointed Li trial_court)))",
        "(and (appointed Kurtz trial_court) (not (appointed Kurtz appellate_court)))",
        "(not (and (appointed Hamadi appellate_court) (appointed Perkins appellate_court)))",
        "(not (and (appointed Hamadi trial_court) (appointed Perkins trial_court)))"
      ],
      "options": [
        "(and (appointed Jefferson appellate_court) (appointed McDonnell appellate_court))",
        "(and (appointed Jefferson trial_court) (appointed McDonnell trial_court))",
        "(and (appointed McDonnell trial_court) (appointed Ortiz trial_court))",
        "(and (appointed McDonnell appellate_court) (appointed Perkins appellate_court))",
        "(and (appointed McDonnell trial_court) (appointed Perkins trial_court))"
      ],
      "type": "sat",
      "perplexity": [
        1.0563948154449463,
        1.0191786289215088
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 50,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "If Ortiz is appointed to the appellate court, which one of the following must be true?",
      "options": [
        "A) Hamadi is appointed to the appellate court.",
        "B) Jefferson is appointed to the appellate court.",
        "C) Jefferson is appointed to the trial court.",
        "D) Perkins is appointed to the appellate court.",
        "E) Perkins is appointed to the trial court."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))))",
        "(declare-datatypes ((Courts 0)) (((appellate) (trial))))",
        "(declare-fun assigned (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(assigned Li appellate)",
        "(assigned Kurtz trial)",
        "(not (and (assigned Hamadi appellate) (assigned Perkins appellate)))",
        "(not (and (assigned Hamadi trial) (assigned Perkins trial)))"
      ],
      "options": [
        "(assert (assigned Ortiz appellate)) (assert (assigned Hamadi appellate))",
        "(assert (assigned Ortiz appellate)) (assert (assigned Jefferson appellate))",
        "(assert (assigned Ortiz appellate)) (assert (assigned Jefferson trial))",
        "(assert (assigned Ortiz appellate)) (assert (assigned Perkins appellate))",
        "(assert (assigned Ortiz appellate)) (assert (assigned Perkins trial))"
      ],
      "type": "sat",
      "perplexity": [
        1.0617570877075195,
        1.019126534461975
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 51,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following, if substituted for the condition that Hamadi cannot be appointed to the same court as Perkins, would have the same effect on the appointments of the seven candidates?",
      "options": [
        "A) Hamadi and Perkins cannot both be appointed to the appellate court.",
        "B) If Hamadi is not appointed to the trial court, then Perkins must be.",
        "C) If Perkins is appointed to the same court as Jefferson, then Hamadi cannot be.",
        "D) If Hamadi is appointed to the same court as Li, then Perkins must be appointed to the same court as Kurtz.",
        "E) No three of Hamadi, Kurtz, Li, and Perkins can be appointed to the same court as each other."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))))",
        "(declare-datatypes ((Courts 0)) (((appellate) (trial))))",
        "(declare-fun appointed (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(forall ((c Candidates)) (=> (= c Li) (appointed c appellate)))",
        "(forall ((c Candidates)) (=> (= c Kurtz) (appointed c trial)))",
        "(forall ((c1 Candidates) (c2 Candidates) (c Court)) (and (= c1 Hamadi) (= c2 Perkins) (=> (appointed c1 c) (not (appointed c2 c))))"
      ],
      "options": [
        "(forall ((c1 Candidates) (c2 Candidates) (c Court)) (and (= c1 Hamadi) (= c2 Perkins) (=> (appointed c1 appellate) (not (appointed c2 appellate))))",
        "(forall ((c1 Candidates) (c2 Candidates) (c Court)) (and (= c1 Hamadi) (=> (not (appointed c1 trial)) (appointed c2 trial)))",
        "(forall ((c1 Candidates) (c2 Candidates) (c3 Candidates) (c Court)) (and (= c1 Hamadi) (= c2 Jefferson) (= c3 Perkins) (=> (and (appointed c1 c) (appointed c2 c)) (not (appointed c3 c))))",
        "(forall ((c1 Candidates) (c2 Candidates) (c3 Candidates) (c4 Candidates) (c Court)) (and (= c1 Hamadi) (= c2 Kurtz) (= c3 Li) (= c4 Perkins) (=> (and (appointed c1 c) (appointed c2 c) (appointed c3 c) (appointed c4 c)) false)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0886609554290771,
        1.0169919729232788
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 52,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "Which one of the following could be an accurate list of the members in the order in which they dive from the plane, from first to last?",
      "options": [
        "A) Larue, Trevino, Ohba, Zacny, Pei, Weiss",
        "B) Larue, Trevino, Pei, Zacny, Weiss, Ohba",
        "C) Weiss, Ohba, Trevino, Zacny, Pei, Larue",
        "D) Trevino, Weiss, Pei, Ohba, Zacny, Larue",
        "E) Trevino, Weiss, Zacny, Larue, Pei, Ohba"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Team 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Order 0)) (0 1 2 3 4 5))",
        "(declare-fun dives (Team Order) Bool)"
      ],
      "constraints": [
        "(forall ((o Order)) (=> (and (= dives Trevino o) (< o (length Order))) (exists ((o2 Order)) (and (= dives Weiss o2) (> o2 o))))",
        "(or (= dives Larue 0) (= dives Larue (length Order)-1))",
        "(not (= dives Weiss (length Order)-1))",
        "(not (= dives Zacny (length Order)-1))",
        "(forall ((o Order)) (=> (and (= dives Pei o) (> o 0)) (or (exists ((o2 Order)) (and (= dives Ohba o2) (< o2 o))) (exists ((o2 Order)) (and (= dives Larue o2) (< o2 o))))))"
      ],
      "options": [
        "(and (dives Larue 0) (dives Trevino 1) (dives Ohba 2) (dives Zacny 3) (dives Pei 4) (dives Weiss 5))",
        "(and (dives Larue 0) (dives Trevino 1) (dives Pei 2) (dives Zacny 3) (dives Weiss 4) (dives Ohba 5))",
        "(and (dives Weiss 0) (dives Ohba 1) (dives Trevino 2) (dives Zacny 3) (dives Pei 4) (dives Larue 5))",
        "(and (dives Trevino 0) (dives Weiss 1) (dives Pei 2) (dives Ohba 3) (dives Zacny 4) (dives Larue 5))",
        "(and (dives Trevino 0) (dives Weiss 1) (dives Zacny 2) (dives Larue 3) (dives Pei 4) (dives Ohba 5))"
      ],
      "type": "sat",
      "perplexity": [
        1.0779685974121094,
        1.0055668354034424
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 53,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "Which one of the following must be true?",
      "options": [
        "A) At least two of the members dive from the plane after Larue.",
        "B) At least two of the members dive from the plane after Ohba.",
        "C) At least two of the members dive from the plane after Pei.",
        "D) At least two of the members dive from the plane after Trevino.",
        "E) At least two of the members dive from the plane after Weiss."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Skydivers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((DivePositions 0)) (((first) (last))))",
        "(declare-fun dives (Skydivers DivePositions) Bool)"
      ],
      "constraints": [
        "(forall ((s Skydivers)) (not (and (dives s first) (dives s last))))",
        "(or (dives Larue first) (dives Larue last))",
        "(not (and (dives Weiss last) (dives Zacny last)))",
        "(forall ((s Skydivers)) (not (and (dives s first) (dives s last))))",
        "(exists ((p DivePositions)) (and (not (dives Trevino p)) (dives Weiss p)))",
        "(exists ((p DivePositions)) (and (not (dives Pei p)) (implies (dives Ohba p) (implies (dives Larue p) (not (dives Pei p))))))"
      ],
      "options": [
        "(exists ((s1 Skydivers) (s2 Skydivers) (s3 Skydivers) (s4 Skydivers) (s5 Skydivers) (s6 Skydivers)) (and (not (dives s1 first)) (not (dives s2 first)) (not (dives s3 first)) (not (dives s4 first)) (not (dives s5 first)) (not (dives s6 first)) (dives s1 last)))",
        "(exists ((s1 Skydivers) (s2 Skydivers) (s3 Skydivers) (s4 Skydivers) (s5 Skydivers) (s6 Skydivers)) (and (not (dives s1 last)) (not (dives s2 last)) (not (dives s3 last)) (not (dives s4 last)) (not (dives s5 last)) (not (dives s6 last)) (dives s1 first)))",
        "(exists ((s1 Skydivers) (s2 Skydivers) (s3 Skydivers) (s4 Skydivers) (s5 Skydivers) (s6 Skydivers)) (and (not (dives s1 last)) (not (dives s2 last)) (not (dives s3 last)) (not (dives s4 last)) (not (dives s5 last)) (not (dives s6 last)) (dives s1 last)))",
        "(exists ((s1 Skydivers) (s2 Skydivers) (s3 Skydivers) (s4 Skydivers) (s5 Skydivers) (s6 Skydivers)) (and (not (dives s1 last)) (not (dives s2 last)) (not (dives s3 last)) (not (dives s4 last)) (not (dives s5 last)) (not (dives s6 last)) (dives s1 first)))",
        "(exists ((s1 Skydivers) (s2 Skydivers) (s3 Skydivers) (s4 Skydivers) (s5 Skydivers) (s6 Skydivers)) (and (not (dives s1 last)) (not (dives s2 last)) (not (dives s3 last)) (not (dives s4 last)) (not (dives s5 last)) (not (dives s6 last)) (dives s1 first)))"
      ],
      "type": "sat",
      "perplexity": [
        1.09915030002594,
        1.0112676620483398
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "unsat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 54,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Larue dives from the plane last, then each of the following could be true EXCEPT:",
      "options": [
        "A) Trevino dives from the plane fourth.",
        "B) Weiss dives from the plane fourth.",
        "C) Ohba dives from the plane fifth.",
        "D) Pei dives from the plane fifth.",
        "E) Zacny dives from the plane fifth."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Team 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-fun dives (Team Int) Bool)"
      ],
      "constraints": [
        "(forall ((t Team)) (=> (and (dives t 1) (dives Trevino 0)) (not (= (dives Trevino 1) (dives Weiss 1))))",
        "(or (= (dives Larue 0) true) (= (dives Larue (length (map car (list Trevino Weiss Ohba Pei Zacny))) true))",
        "(not (= (dives Weiss (length (map car (list Trevino Weiss Ohba Pei Zacny))) true))",
        "(not (= (dives Zacny (length (map car (list Trevino Weiss Ohba Pei Zacny))) true))",
        "(forall ((t Team)) (=> (and (dives Pei t) (dives Ohba 0)) (not (= (dives t 0) (dives Larue 0))))",
        "(forall ((t Team)) (=> (and (dives Pei t) (dives Larue 0)) (not (= (dives t 0) (dives Ohba 0))))"
      ],
      "options": [
        "(= (dives Larue (length (map car (list Trevino Weiss Ohba Pei Zacny))) true) (and (dives Trevino 3) (dives Weiss 4) (dives Ohba 5) (dives Pei 5) (dives Zacny 6)))",
        "(= (dives Larue (length (map car (list Trevino Weiss Ohba Pei Zacny))) true) (and (dives Trevino 3) (dives Weiss 4) (dives Ohba 5) (dives Pei 4) (dives Zacny 6)))",
        "(= (dives Larue (length (map car (list Trevino Weiss Ohba Pei Zacny))) true) (and (dives Trevino 3) (dives Weiss 4) (dives Ohba 5) (dives Pei 6) (dives Zacny 5)))",
        "(= (dives Larue (length (map car (list Trevino Weiss Ohba Pei Zacny))) true) (and (dives Trevino 3) (dives Weiss 4) (dives Ohba 5) (dives Pei 6) (dives Zacny 6)))"
      ],
      "type": "sat",
      "perplexity": [
        1.134028673171997,
        1.0093765258789062
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 55,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Zacny dives from the plane immediately after Weiss, then which one of the following must be false?",
      "options": [
        "A) Larue dives from the plane first.",
        "B) Trevino dives from the plane third.",
        "C) Zacny dives from the plane third.",
        "D) Pei dives from the plane fourth.",
        "E) Zacny dives from the plane fourth."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((TeamMembers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((DivePositions 0)) (((first) (second) (third) (fourth) (fifth) (sixth))))",
        "(declare-fun dives (TeamMembers DivePositions) Bool)"
      ],
      "constraints": [
        "(forall ((p DivePositions)) (=> (and (dives Trevino p) (dives Weiss (next p))) (<= (index p) (index (next p))))",
        "(or (dives Larue first) (dives Larue last))",
        "(not (and (dives Weiss last) (dives Zacny last)))",
        "(forall ((p DivePositions)) (=> (and (dives Pei p) (not (= p first))) (or (exists ((q) (and (< (index p) (index q)) (dives Ohba q) (dives Larue q)))) (exists ((q) (and (< (index p) (index q)) (dives Ohba q) (not (dives Larue q)))))))"
      ],
      "options": [
        "(and (dives Zacny (next Weiss)) (dives Larue first))",
        "(and (dives Zacny (next Weiss)) (dives Trevino third))",
        "(and (dives Zacny (next Weiss)) (dives Zacny third))",
        "(and (dives Zacny (next Weiss)) (dives Pei fourth))",
        "(and (dives Zacny (next Weiss)) (dives Zacny fourth))"
      ],
      "type": "sat",
      "perplexity": [
        1.1255090236663818,
        1.0111629962921143
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 56,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Trevino dives from the plane immediately after Larue, then each of the following could be true EXCEPT:",
      "options": [
        "A) Ohba dives from the plane third.",
        "B) Weiss dives from the plane third.",
        "C) Zacny dives from the plane third.",
        "D) Pei dives from the plane fourth.",
        "E) Weiss dives from the plane fourth."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((TeamMembers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Dives 0)) (((first) (second) (third) (fourth) (fifth) (sixth))))",
        "(declare-fun dives (TeamMembers Dives) Bool)"
      ],
      "constraints": [
        "(exists ((d Dives)) (and (dives Trevino d) (<= (index d) (index (list (find ((= d) (first)) Dives))) (not (= d (list (find ((= d) (sixth)) Dives))))))",
        "(or (= (list (find ((= (dives Larue d)) Dives))) (first) (= (list (find ((= (dives Larue d)) Dives))) (sixth)))",
        "(not (= (list (find ((= (dives Weiss d)) Dives))) (sixth))",
        "(not (= (list (find ((= (dives Zacny d)) Dives))) (sixth))",
        "(exists ((d Dives)) (and (dives Pei d) (>= (index d) (index (list (find ((= (dives Ohba d)) Dives)))) (>= (index d) (index (list (find ((= (dives Larue d)) Dives)))) (not (= (index d) (index (list (find ((= (dives Ohba d)) Dives)))))))"
      ],
      "options": [
        "(not (or (dives Ohba (third)) (dives Weiss (third)) (dives Zacny (third)) (dives Pei (fourth)) (dives Weiss (fourth))))"
      ],
      "type": "sat",
      "perplexity": [
        1.2064499855041504,
        1.0190242528915405
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 57,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following could be the order in which the vehicles are serviced, from Monday through Saturday?",
      "options": [
        "A) the hatchback, the pickup, the sedan, the limousine, the van, the roadster",
        "B) the pickup, the sedan, the van, the roadster, the hatchback, the limousine",
        "C) the pickup, the van, the sedan, the roadster, the limousine, the hatchback",
        "D) the van, the roadster, the pickup, the hatchback, the sedan, the limousine",
        "E) the van, the sedan, the pickup, the roadster, the hatchback, the limousine"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-fun serviced (Days Vehicles) Bool)"
      ],
      "constraints": [
        "(exists ((d Days) (v Vehicles)) (and (not (= d Monday)) (not (= v hatchback)) (serviced d v)))",
        "(and (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (serviced d1 van) (serviced d2 roadster) (not (= d1 d2)))) (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (serviced d1 roadster) (serviced d2 hatchback) (not (= d1 d2)))))",
        "(or (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (serviced d1 pickup) (serviced d2 van) (or (= d2 (car d1)) (= d1 (car d2)))) (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (serviced d1 pickup) (serviced d2 sedan) (or (= d2 (car d1)) (= d1 (car d2)))) (not (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (serviced d1 pickup) (serviced d2 van) (or (= d2 (car d1)) (= d1 (car d2)))) (not (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (serviced d1 pickup) (serviced d2 sedan) (or (= d2 (car d1)) (= d1 (car d2)))))))",
        "(or (exists ((d1 Days) (d2 Days) (d3 Days)) (and (not (= d1 d2)) (not (= d1 d3)) (not (= d2 d3)) (serviced d1 sedan) (serviced d2 pickup) (serviced d3 limousine) (or (< d1 d2) (< d1 d3))) (exists ((d1 Days) (d2 Days) (d3 Days)) (and (not (= d1 d2)) (not (= d1 d3)) (not (= d2 d3)) (serviced d1 sedan) (serviced d2 pickup) (serviced d3 limousine) (or (< d1 d2) (< d1 d3)))))"
      ],
      "options": [
        "(and (serviced Monday hatchback) (serviced Tuesday pickup) (serviced Wednesday sedan) (serviced Thursday limousine) (serviced Friday van) (serviced Saturday roadster))",
        "(and (serviced Monday pickup) (serviced Tuesday sedan) (serviced Wednesday van) (serviced Thursday roadster) (serviced Friday hatchback) (serviced Saturday limousine))",
        "(and (serviced Monday pickup) (serviced Tuesday van) (serviced Wednesday sedan) (serviced Thursday roadster) (serviced Friday limousine) (serviced Saturday hatchback))",
        "(and (serviced Monday van) (serviced Tuesday roadster) (serviced Wednesday pickup) (serviced Thursday hatchback) (serviced Friday sedan) (serviced Saturday limousine))",
        "(and (serviced Monday van) (serviced Tuesday sedan) (serviced Wednesday pickup) (serviced Thursday roadster) (serviced Friday hatchback) (serviced Saturday limousine))"
      ],
      "type": "sat",
      "perplexity": [
        1.065672516822815,
        1.009633183479309
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 58,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following CANNOT be the vehicle serviced on Thursday?",
      "options": [
        "A) the hatchback",
        "B) the limousine",
        "C) the pickup",
        "D) the sedan",
        "E) the van"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-fun serviced (Days Vehicles) Bool)"
      ],
      "constraints": [
        "(exists ((d Days) (v Vehicles)) (and (/= d (Monday)) (/= v hatchback) (serviced d v)))",
        "(and (not (and (serviced Monday roadster) (serviced Monday van))) (not (and (serviced Tuesday roadster) (serviced Tuesday van))) (not (and (serviced Wednesday roadster) (serviced Wednesday van))) (not (and (serviced Thursday roadster) (serviced Thursday van))) (not (and (serviced Friday roadster) (serviced Friday van))) (not (and (serviced Saturday roadster) (serviced Saturday van))) (not (and (serviced Monday hatchback) (serviced Monday roadster))) (not (and (serviced Tuesday hatchback) (serviced Tuesday roadster))) (not (and (serviced Wednesday hatchback) (serviced Wednesday roadster))) (not (and (serviced Thursday hatchback) (serviced Thursday roadster))) (not (and (serviced Friday hatchback) (serviced Friday roadster))) (not (and (serviced Saturday hatchback) (serviced Saturday roadster))))",
        "(or (exists ((d1 Days) (d2 Days)) (and (/= d1 d2) (serviced d1 pickup) (serviced d2 van))) (exists ((d1 Days) (d2 Days)) (and (/= d1 d2) (serviced d1 pickup) (serviced d2 sedan))))",
        "(or (exists ((d1 Days) (d2 Days) (d3 Days)) (and (/= d1 d2) (/= d1 d3) (/= d2 d3) (serviced d1 sedan) (or (serviced d2 pickup) (serviced d2 limousine)))) (exists ((d1 Days) (d2 Days) (d3 Days)) (and (/= d1 d2) (/= d1 d3) (/= d2 d3) (serviced d1 sedan) (or (serviced d2 pickup) (serviced d2 limousine))))"
      ],
      "options": [
        "(not (serviced Thursday hatchback))",
        "(not (serviced Thursday limousine))",
        "(not (serviced Thursday pickup))",
        "(not (serviced Thursday sedan))",
        "(not (serviced Thursday van))"
      ],
      "type": "sat",
      "perplexity": [
        1.0629876852035522,
        1.0097819566726685
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 59,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If neither the pickup nor the limousine is serviced on Monday, then which one of the following must be true?",
      "options": [
        "A) The hatchback and the limousine are serviced on consecutive days.",
        "B) The hatchback and the sedan are serviced on consecutive days.",
        "C) The van is serviced on Monday.",
        "D) The limousine is serviced on Saturday.",
        "E) The pickup is serviced on Saturday."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((monday) (tuesday) (wednesday) (thursday) (friday) (saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((v Vehicles) (d Days)) (and (not (= d monday)) (serviced v d)))",
        "(and (not (or (serviced roadster monday) (serviced roadster tuesday))) (not (or (serviced van monday) (serviced van tuesday))) (not (or (serviced hatchback friday) (serviced hatchback saturday))))",
        "(or (exists ((d Days) (d2 Days)) (and (= d2 (+ d 1)) (serviced pickup d) (serviced van d2))) (exists ((d Days) (d2 Days)) (and (= d2 (+ d 1)) (serviced pickup d) (serviced sedan d2))))",
        "(or (exists ((d Days) (d2 Days) (d3 Days)) (and (= d2 (+ d 1)) (= d3 (+ d 2)) (serviced sedan d) (not (or (serviced pickup d2) (serviced limousine d2))) (not (or (serviced pickup d3) (serviced limousine d3)))) (exists ((d Days) (d2 Days) (d3 Days)) (and (= d2 (+ d 1)) (= d3 (+ d 2)) (serviced sedan d) (not (or (serviced pickup d2) (serviced limousine d2))) (not (or (serviced pickup d3) (serviced limousine d3))))))",
        "options"
      ],
      "type": "sat",
      "perplexity": [
        1.126869559288025,
        1.0691349506378174
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 60,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the limousine is not serviced on Saturday, then each of the following could be true EXCEPT:",
      "options": [
        "A) The limousine is serviced on Monday.",
        "B) The roadster is serviced on Tuesday.",
        "C) The hatchback is serviced on Wednesday.",
        "D) The roadster is serviced on Wednesday.",
        "E) The sedan is serviced on Wednesday."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-fun serviced (Days Vehicles) Bool)"
      ],
      "constraints": [
        "(exists ((d Days) (v Vehicles)) (and (not (= d Monday)) (served v d) (not (forall ((d' Days) (v' Vehicles)) (=> (and (<= d' d) (served v' d')) (served v d))))))",
        "(and (not (implies (served roadster Monday) (served van Monday))) (not (implies (served roadster Monday) (served hatchback Monday))) (not (implies (served van Monday) (served roadster Monday))) (not (implies (served hatchback Monday) (served roadster Monday))))",
        "(or (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served pickup d1) (served van d2) (implies (served pickup d1) (or (= d2 (+ d1 1)) (= d2 (- d1 1))))) (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served pickup d1) (served sedan d2) (implies (served pickup d1) (or (= d2 (+ d1 1)) (= d2 (- d1 1)))))))",
        "(or (forall ((d1 Days) (d2 Days)) (=> (and (served sedan d1) (served pickup d2)) (<= d1 d2))) (forall ((d1 Days) (d2 Days)) (=> (and (served sedan d1) (served limousine d2)) (<= d1 d2))))"
      ],
      "options": [
        "(assert (not (served limousine Saturday)))",
        "(assert (served limousine Monday))",
        "(assert (not (served limousine Saturday)))",
        "(assert (served roadster Tuesday))",
        "(assert (not (served limousine Saturday)))",
        "(assert (served hatchback Wednesday))",
        "(assert (not (served limousine Saturday)))",
        "(assert (served roadster Wednesday))",
        "(assert (not (served limousine Saturday)))",
        "(assert (served sedan Wednesday))"
      ],
      "type": "sat",
      "perplexity": [
        1.1122076511383057,
        1.0737175941467285
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 61,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the sedan is serviced earlier in the week than the pickup, then which one of the following could be true?",
      "options": [
        "A) The limousine is serviced on Wednesday.",
        "B) The sedan is serviced on Wednesday.",
        "C) The van is serviced on Wednesday.",
        "D) The hatchback is serviced on Friday.",
        "E) The limousine is serviced on Saturday."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-fun serviced (Days Vehicles) Bool)"
      ],
      "constraints": [
        "(exists ((d Days) (v Vehicles)) (and (not (= d Monday)) (not (= v hatchback) (serviced d v))))",
        "(and (not (or (and (serviced Monday roadster) (serviced Monday van)) (and (serviced Tuesday roadster) (serviced Tuesday van)) (and (serviced Wednesday roadster) (serviced Wednesday van)) (and (serviced Thursday roadster) (serviced Thursday van)) (and (serviced Friday roadster) (serviced Friday van)) (and (serviced Saturday roadster) (serviced Saturday van)))) (not (or (and (serviced Monday roadster) (serviced Monday hatchback)) (and (serviced Tuesday roadster) (serviced Tuesday hatchback)) (and (serviced Wednesday roadster) (serviced Wednesday hatchback)) (and (serviced Thursday roadster) (serviced Thursday hatchback)) (and (serviced Friday roadster) (serviced Friday hatchback)) (and (serviced Saturday roadster) (serviced Saturday hatchback))))",
        "(or (exists ((d Days)) (and (serviced d pickup) (serviced (d-1) van))) (exists ((d Days)) (and (serviced d pickup) (serviced (d-1) sedan))) )",
        "(or (exists ((d Days) (e Days)) (and (serviced d sedan) (not (and (serviced d pickup) (serviced (d-1) sedan))) (not (and (serviced d pickup) (serviced (d-1) limousine)))) (exists ((d Days) (e Days)) (and (serviced d sedan) (serviced (d-1) limousine) (not (and (serviced d pickup) (serviced (d-1) sedan))) (not (and (serviced d pickup) (serviced (d-1) limousine))))))"
      ],
      "options": [
        "(and (serviced Wednesday sedan) (not (serviced Wednesday pickup)))",
        "(and (serviced Wednesday sedan) (not (serviced Wednesday limousine)))",
        "(and (serviced Wednesday sedan) (not (serviced Wednesday van)))",
        "(and (serviced Wednesday sedan) (not (serviced Wednesday hatchback)))",
        "(and (serviced Wednesday sedan) (not (serviced Wednesday limousine)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1091976165771484,
        1.0095007419586182
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 62,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the limousine is serviced on Saturday, then which one of the following must be true?",
      "options": [
        "A) The pickup is serviced earlier in the week than the roadster.",
        "B) The pickup is serviced earlier in the week than the sedan.",
        "C) The sedan is serviced earlier in the week than the roadster.",
        "D) The hatchback and the limousine are serviced on consecutive days.",
        "E) The roadster and the hatchback are serviced on consecutive days."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((monday) (tuesday) (wednesday) (thursday) (friday) (saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((v Vehicles) (d Days)) (and (>= d (days monday) 2) (not (= v hatchback) ) (serviced v d)))",
        "(and (>= (days (find-day (serviced roadster monday)) ) (days (find-day (serviced van monday)))) (<= (days (find-day (serviced roadster monday)) ) (days (find-day (serviced hatchback monday))))))",
        "(or (exists ((d1 Days) (d2 Days)) (and (= d1 (days (find-day (serviced pickup monday))) ) (= d2 (days (find-day (serviced van monday))) ) (if (= (days (find-day (serviced pickup monday))) (days (find-day (serviced van monday))) ) + 1) (if (= (days (find-day (serviced pickup monday))) (days (find-day (serviced van monday))) ) 0))) (exists ((d1 Days) (d2 Days)) (and (= d1 (days (find-day (serviced pickup monday))) ) (= d2 (days (find-day (serviced sedan monday))) ) (if (= (days (find-day (serviced pickup monday))) (days (find-day (serviced sedan monday))) ) + 1) (if (= (days (find-day (serviced pickup monday))) (days (find-day (serviced sedan monday))) ) 0)))))",
        "(or (exists ((d1 Days) (d2 Days)) (and (= d1 (days (find-day (serviced sedan monday))) ) (= d2 (days (find-day (serviced pickup monday))) ) (< d1 d2)) (exists ((d1 Days) (d2 Days)) (and (= d1 (days (find-day (serviced sedan monday))) ) (= d2 (days (find-day (serviced limousine monday))) ) (< d1 d2)))))",
        "(assert (= (days (find-day (serviced limousine monday))) (days saturday)))",
        "(assert (< (days (find-day (serviced pickup monday))) (days (find-day (serviced roadster monday)))))"
      ],
      "options": [],
      "type": "sat",
      "perplexity": [
        1.1204639673233032,
        1.0201231241226196
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 63,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following could be the list of the vehicles serviced on Tuesday, Wednesday, and Friday, listed in that order?",
      "options": [
        "A) the pickup, the hatchback, the limousine",
        "B) the pickup, the roadster, the hatchback",
        "C) the sedan, the limousine, the hatchback",
        "D) the van, the limousine, the hatchback",
        "E) the van, the roadster, the limousine"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((d Days) (v Vehicles)) (and (not (= d Monday)) (not (= v hatchback)) (serviced v d)))",
        "(and (not (<= serviced roadster Monday serviced van Monday)) (not (<= serviced hatchback Monday serviced roadster Monday)) (not (<= serviced van Tuesday serviced roadster Tuesday)) (not (<= serviced roadster Tuesday serviced hatchback Tuesday)))",
        "(or (and (not (= serviced pickup Monday)) (not (= serviced van Monday)) (or (= serviced pickup (next-day Monday) serviced van (next-day Monday)) (= serviced pickup (next-day Tuesday) serviced van (next-day Tuesday)) (= serviced pickup (next-day Wednesday) serviced van (next-day Wednesday)) (= serviced pickup (next-day Thursday) serviced van (next-day Thursday)) (= serviced pickup (next-day Friday) serviced van (next-day Friday)))) (and (not (= serviced pickup Monday)) (not (= serviced sedan Monday)) (or (= serviced pickup (next-day Monday) serviced sedan (next-day Monday)) (= serviced pickup (next-day Tuesday) serviced sedan (next-day Tuesday)) (= serviced pickup (next-day Wednesday) serviced sedan (next-day Wednesday)) (= serviced pickup (next-day Thursday) serviced sedan (next-day Thursday)) (= serviced pickup (next-day Friday) serviced sedan (next-day Friday))))",
        "(or (not (<= serviced sedan Monday serviced pickup Monday)) (not (<= serviced sedan Monday serviced limousine Monday)))"
      ],
      "options": [
        "(and (serviced pickup Tuesday) (serviced hatchback Wednesday) (serviced limousine Friday))",
        "(and (serviced pickup Tuesday) (serviced roadster Wednesday) (serviced hatchback Friday))",
        "(and (serviced sedan Tuesday) (serviced limousine Wednesday) (serviced hatchback Friday))",
        "(and (serviced van Tuesday) (serviced limousine Wednesday) (serviced hatchback Friday))",
        "(and (serviced van Tuesday) (serviced roadster Wednesday) (serviced limousine Friday))"
      ],
      "type": "sat",
      "perplexity": [
        1.081019639968872,
        1.0066299438476562
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 64,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If there are exactly two white balls, then which one of the following boxes could contain a green ball?",
      "options": [
        "A) box 1",
        "B) box 3",
        "C) box 4",
        "D) box 5",
        "E) box 6"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun color (Boxes) Colors)"
      ],
      "constraints": [
        "> (count ((color i) red) i 1 6) (count ((color i) white) i 1 6))",
        "(exists ((b Boxes)) (and (color b green) (forall ((c Boxes) (and (color c red) (< b c))))))",
        "(exists ((b Boxes) (c Boxes)) (and (color b white) (color c green) (= (- b c) 1)))"
      ],
      "options": [
        "(exists ((b Boxes)) (and (color b green) (= b 1)))",
        "(exists ((b Boxes)) (and (color b green) (= b 3)))",
        "(exists ((b Boxes)) (and (color b green) (= b 4)))",
        "(exists ((b Boxes)) (and (color b green) (= b 5)))",
        "(exists ((b Boxes)) (and (color b green) (= b 6)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1215440034866333,
        1.019191861152649
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 65,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If there are green balls in boxes 5 and 6, then which one of the following could be true?",
      "options": [
        "A) There are red balls in boxes 1 and 4.",
        "B) There are red balls in boxes 2 and 4.",
        "C) There is a white ball in box 1.",
        "D) There is a white ball in box 2.",
        "E) There is a white ball in box 3."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun ball-color (Boxes Colors) Bool)"
      ],
      "constraints": [
        "(>= (count ((lambda (b) (and (not (ball-color b green)) (ball-color b red))) Boxes)) (count ((lambda (b) (and (not (ball-color b red)) (ball-color b white))) Boxes)))",
        "(forall ((b1 Boxes) (b2 Boxes)) (and (= (< b1 b2) (ball-color b1 green)) (and (ball-color b2 red) (not (ball-color b1 red)))))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (= (< b1 b2) (ball-color b2 green)) (and (ball-color b1 white) (not (ball-color b2 white)))))"
      ],
      "options": [
        "(assert (ball-color 1 red))",
        "(assert (ball-color 4 red))",
        "(assert (ball-color 5 green))",
        "(assert (ball-color 6 green))",
        "(assert (ball-color 2 red))",
        "(assert (ball-color 4 red))",
        "(assert (ball-color 5 green))",
        "(assert (ball-color 6 green))",
        "(assert (ball-color 1 white))",
        "(assert (ball-color 5 green))",
        "(assert (ball-color 6 green))",
        "(assert (ball-color 2 white))",
        "(assert (ball-color 5 green))",
        "(assert (ball-color 6 green))",
        "(assert (ball-color 3 white))",
        "(assert (ball-color 5 green))",
        "(assert (ball-color 6 green))"
      ],
      "type": "sat",
      "perplexity": [
        1.118242621421814,
        1.0089759826660156
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 66,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "The ball in which one of the following boxes must be the same color as at least one of the other balls?",
      "options": [
        "A) box 2",
        "B) box 3",
        "C) box 4",
        "D) box 5",
        "E) box 6"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun color (Boxes) Colors)"
      ],
      "constraints": [
        "> (count ((color b) red) for b in (Boxes)) (count ((color b) white) for b in (Boxes))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (color b1 green) (color b2 red) (< b1 b2)))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (color b1 white) (color b2 green) (< b1 b2)))"
      ],
      "options": [
        "(exists ((b Boxes)) (and (= b 2) (or (not (distinct (color b) (color 1))) (not (distinct (color b) (color 3))) (not (distinct (color b) (color 4))) (not (distinct (color b) (color 5))) (not (distinct (color b) (color 6))))))",
        "(exists ((b Boxes)) (and (= b 3) (or (not (distinct (color b) (color 2))) (not (distinct (color b) (color 4))) (not (distinct (color b) (color 5))) (not (distinct (color b) (color 6))))))",
        "(exists ((b Boxes)) (and (= b 4) (or (not (distinct (color b) (color 3))) (not (distinct (color b) (color 5))) (not (distinct (color b) (color 6))))))",
        "(exists ((b Boxes)) (and (= b 5) (or (not (distinct (color b) (color 4))) (not (distinct (color b) (color 6))))))",
        "(exists ((b Boxes)) (and (= b 6) (not (distinct (color b) (color 5)))))"
      ],
      "type": "sat",
      "perplexity": [
        1.0624462366104126,
        1.0075956583023071
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 67,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "Which one of the following must be true?",
      "options": [
        "A) There is a green ball in a box that is lower than box 4.",
        "B) There is a green ball in a box that is higher than box 4.",
        "C) There is a red ball in a box that is lower than box 4.",
        "D) There is a red ball in a box that is higher than box 4.",
        "E) There is a white ball in a box that is lower than box 4."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun contains (Boxes Colors) Bool)"
      ],
      "constraints": [
        "> (count-occurrences (lambda (x) (contains x red)) Boxes) (count-occurrences (lambda (x) (contains x white)) Boxes))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (contains b1 green) (contains b2 red) (< b1 b2)))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (contains b1 white) (contains b2 green) (= b1 (- b2 1))))"
      ],
      "options": [
        "(exists ((b Boxes)) (and (<= b 4) (contains b green)))",
        "(exists ((b Boxes)) (and (>= b 4) (contains b green)))",
        "(exists ((b Boxes)) (and (<= b 4) (contains b red)))",
        "(exists ((b Boxes)) (and (>= b 4) (contains b red)))",
        "(exists ((b Boxes)) (and (<= b 4) (contains b white)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0695531368255615,
        1.0099016427993774
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 68,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If there are red balls in boxes 2 and 3, then which one of the following could be true?",
      "options": [
        "A) There is a red ball in box 1.",
        "B) There is a white ball in box 1.",
        "C) There is a green ball in box 4.",
        "D) There is a red ball in box 5.",
        "E) There is a white ball in box 6."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun color (Boxes) Colors)"
      ],
      "constraints": [
        "> (count (lambda ((b Boxes)) (ite (= (color b) red) 1 0)))(count (lambda ((b Boxes)) (ite (= (color b) white) 1 0)))",
        "(exists ((g Boxes)) (and (color g green) (forall ((r Boxes)) (=> (and (= (color r) red) (< r g)) false))))",
        "(exists ((w Boxes) (g Boxes)) (and (color w white) (color g green) (< w g)))"
      ],
      "options": [
        "(assert (color 1 red))",
        "(assert (color 1 white))",
        "(assert (color 4 green))",
        "(assert (color 5 red))",
        "(assert (color 6 white))"
      ],
      "type": "sat_or_unsat",
      "perplexity": [
        1.164326548576355,
        1.0367538928985596
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 69,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If boxes 2, 3, and 4 all contain balls that are the same color as each other, then which one of the following must be true?",
      "options": [
        "A) Exactly two of the boxes contain a green ball.",
        "B) Exactly three of the boxes contain a green ball.",
        "C) Exactly three of the boxes contain a red ball.",
        "D) Exactly one of the boxes contains a white ball.",
        "E) Exactly two of the boxes contain a white ball."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(set-logic ALL)",
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun color (Boxes) Colors)"
      ],
      "constraints": [
        "(> (count-if (lambda (b) (= (color b) red)) (list 1 2 3 4 5 6)) (count-if (lambda (b) (= (color b) white)) (list 1 2 3 4 5 6)))",
        "(exists ((g Boxes)) (and (= (color g) green) (forall ((r Boxes) (and (= (color r) red) (< g r))))))",
        "(exists ((w Boxes) (g Boxes)) (and (= (color w) white) (= (color g) green) (= (- g w) 1)))"
      ],
      "options": [
        "(implies (and (= (color 2) (color 3) (color 4) green) (forall ((b Boxes) (< b 2)) (not (= (color b) green))) (forall ((b Boxes) (> b 4)) (not (= (color b) green)))) (exactly 2 (count-if (lambda (b) (= (color b) green)) (list 1 2 3 4 5 6))))",
        "(implies (and (= (color 2) (color 3) (color 4) green) (forall ((b Boxes) (< b 2)) (not (= (color b) green))) (forall ((b Boxes) (> b 4)) (not (= (color b) green)))) (exactly 3 (count-if (lambda (b) (= (color b) green)) (list 1 2 3 4 5 6))))",
        "(implies (and (= (color 2) (color 3) (color 4) green) (forall ((b Boxes) (< b 2)) (not (= (color b) green))) (forall ((b Boxes) (> b 4)) (not (= (color b) green)))) (exactly 3 (count-if (lambda (b) (= (color b) red)) (list 1 2 3 4 5 6))))",
        "(implies (and (= (color 2) (color 3) (color 4) green) (forall ((b Boxes) (< b 2)) (not (= (color b) green))) (forall ((b Boxes) (> b 4)) (not (= (color b) green)))) (exactly 1 (count-if (lambda (b) (= (color b) white)) (list 1 2 3 4 5 6))))",
        "(implies (and (= (color 2) (color 3) (color 4) green) (forall ((b Boxes) (< b 2)) (not (= (color b) green))) (forall ((b Boxes) (> b 4)) (not (= (color b) green)))) (exactly 2 (count-if (lambda (b) (= (color b) white)) (list 1 2 3 4 5 6))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1008217334747314,
        1.0097576379776
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 70,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "Which one of the following could be the order, from first to last, in which the students perform?",
      "options": [
        "A) Ginny, Fernando, Hakim, Kevin, Juanita",
        "B) Ginny, Juanita, Kevin, Hakim, Fernando",
        "C) Ginny, Kevin, Hakim, Juanita, Fernando",
        "D) Kevin, Ginny, Juanita, Fernando, Hakim",
        "E) Kevin, Juanita, Fernando, Hakim, Ginny"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Positions 0)) ((1) (2) (3) (4) (5)))",
        "(declare-fun performs (Students Positions) Bool)"
      ],
      "constraints": [
        "(or (= (find ((Students) Ginny) (Positions) 1) (find ((Students) Fernando) (Positions) 2))",
        "(= (find ((Students) Ginny) (Positions) 1) (find ((Students) Fernando) (Positions) 3))",
        "(= (find ((Students) Ginny) (Positions) 1) (find ((Students) Fernando) (Positions) 4))",
        "(= (find ((Students) Ginny) (Positions) 1) (find ((Students) Fernando) (Positions) 5))",
        "(or (= (find ((Students) Kevin) (Positions) 1) (find ((Students) Hakim) (Positions) 2))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Hakim) (Positions) 3))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Hakim) (Positions) 4))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Hakim) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 2) (find ((Students) Hakim) (Positions) 3))",
        "(= (find ((Students) Kevin) (Positions) 2) (find ((Students) Hakim) (Positions) 4))",
        "(= (find ((Students) Kevin) (Positions) 2) (find ((Students) Hakim) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 3) (find ((Students) Hakim) (Positions) 4))",
        "(= (find ((Students) Kevin) (Positions) 3) (find ((Students) Hakim) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 4) (find ((Students) Hakim) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Juanita) (Positions) 2))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Juanita) (Positions) 3))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Juanita) (Positions) 4))",
        "(= (find ((Students) Kevin) (Positions) 1) (find ((Students) Juanita) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 2) (find ((Students) Juanita) (Positions) 3))",
        "(= (find ((Students) Kevin) (Positions) 2) (find ((Students) Juanita) (Positions) 4))",
        "(= (find ((Students) Kevin) (Positions) 2) (find ((Students) Juanita) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 3) (find ((Students) Juanita) (Positions) 4))",
        "(= (find ((Students) Kevin) (Positions) 3) (find ((Students) Juanita) (Positions) 5))",
        "(= (find ((Students) Kevin) (Positions) 4) (find ((Students) Juanita) (Positions) 5))",
        "(or (= (find ((Students) Hakim) (Positions) 4) (find ((Students) Fernando) (Positions) 5))",
        "(= (find ((Students) Hakim) (Positions) 5) (find ((Students) Fernando) (Positions) 4)))"
      ],
      "options": [
        "(and (performs Ginny 1) (performs Fernando 2) (performs Hakim 3) (performs Kevin 4) (performs Juanita 5))",
        "(and (performs Ginny 1) (performs Juanita 2) (performs Kevin 3) (performs Hakim 4) (performs Fernando 5))",
        "(and (performs Ginny 1) (performs Kevin 2) (performs Hakim 3) (performs Juanita 4) (performs Fernando 5))",
        "(and (performs Kevin 1) (performs Ginny 2) (performs Juanita 3) (performs Fernando 4) (performs Hakim 5))",
        "(and (performs Kevin 1) (performs Juanita 2) (performs Fernando 3) (performs Hakim 4) (performs Ginny 5))"
      ],
      "type": "sat",
      "perplexity": [
        1.0347940921783447,
        1.009868860244751
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 71,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "If Juanita performs earlier than Ginny, then which one of the following could be true?",
      "options": [
        "A) Fernando performs fourth.",
        "B) Ginny performs second.",
        "C) Hakim performs third.",
        "D) Juanita performs third.",
        "E) Kevin performs second."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Positions 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun performs (Students Positions) Bool)"
      ],
      "constraints": [
        "(forall ((p Positions)) (=> (and (performs Ginny p) (not (= p (5)))) (not (and (performs Fernando p) (<= p (pred p))))))",
        "(forall ((p Positions)) (=> (and (performs Kevin p) (not (= p (5)))) (and (not (and (performs Hakim p) (<= p (pred p)))) (not (and (performs Juanita p) (<= p (pred p)))))))",
        "(forall ((p Positions)) (=> (and (performs Hakim p) (not (= p (5)))) (or (and (performs Fernando (pred p)) (not (= p (1)))) (and (performs Fernando (succ p)))))"
      ],
      "options": [
        "(and (performs Juanita (1)) (performs Fernando (4)))",
        "(and (performs Juanita (1)) (performs Ginny (2)))",
        "(and (performs Juanita (1)) (performs Hakim (3)))",
        "(and (performs Juanita (1)) (performs Juanita (3)))",
        "(and (performs Juanita (1)) (performs Kevin (2)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1253188848495483,
        1.0100456476211548
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 72,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Fernando performs immediately before Juanita.",
        "B) Ginny performs immediately before Hakim.",
        "C) Hakim performs immediately before Ginny.",
        "D) Juanita performs immediately before Ginny.",
        "E) Kevin performs immediately before Hakim."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Positions 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun performs (Students Positions) Bool)"
      ],
      "constraints": [
        "(forall ((p Positions)) (=> (and (performs Ginny p) (performs Fernando (add p 1))) (lt p (+ p 1))))",
        "(forall ((p Positions)) (and (=> (performs Kevin p) (lt p (+ p 1))) (=> (performs Kevin p) (lt p (+ p 2)))))",
        "(forall ((p Positions)) (or (and (performs Hakim (add p 1)) (performs Fernando p)) (and (performs Hakim p) (performs Fernando (add p 1)))))"
      ],
      "options": [
        "(and (performs Fernando (add p 1)) (performs Juanita p) (forall ((p Positions)) (not (and (performs Fernando p) (performs Juanita (add p 1))))))",
        "(and (performs Ginny (add p 1)) (performs Hakim p))",
        "(and (performs Hakim (add p 1)) (performs Ginny p))",
        "(and (performs Juanita (add p 1)) (performs Ginny p))",
        "(and (performs Kevin p) (performs Hakim (add p 1)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1292452812194824,
        1.0203486680984497
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 73,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "The order in which the students perform is fully determined if which one of the following is true?",
      "options": [
        "A) Fernando performs immediately before Hakim.",
        "B) Ginny performs immediately before Fernando.",
        "C) Hakim performs immediately before Juanita.",
        "D) Juanita performs immediately before Hakim.",
        "E) Kevin performs immediately before Fernando."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Slots 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun performs (Students Slots) Bool)"
      ],
      "constraints": [
        "(forall ((s Slots)) (=> (and (performs Ginny s) (performs Fernando (s+1))) true))",
        "(and (forall ((s Slots)) (=> (and (performs Kevin s) (performs Hakim (s+1))) true)) (forall ((s Slots)) (=> (and (performs Kevin s) (performs Juanita (s+1))) true)))",
        "(or (forall ((s Slots)) (=> (and (performs Hakim s) (performs Fernando (s+1))) true)) (forall ((s Slots)) (=> (and (performs Hakim (s+1)) (performs Fernando s)) true)))"
      ],
      "options": [
        "(forall ((s Slots)) (=> (and (performs Fernando (s+1)) (performs Hakim s)) true))",
        "(forall ((s Slots)) (=> (and (performs Ginny (s+1)) (performs Fernando s)) true))",
        "(forall ((s Slots)) (=> (and (performs Hakim (s+1)) (performs Juanita s)) true))",
        "(forall ((s Slots)) (=> (and (performs Juanita (s+1)) (performs Hakim s)) true))",
        "(forall ((s Slots)) (=> (and (performs Kevin (s+1)) (performs Fernando s)) true))"
      ],
      "type": "sat",
      "perplexity": [
        1.065854549407959,
        1.0079946517944336
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  }
]