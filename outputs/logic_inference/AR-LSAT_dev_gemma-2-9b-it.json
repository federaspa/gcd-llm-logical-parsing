[
  {
    "id": 0,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?",
      "options": [
        "A) Fred, Juan",
        "B) Juan, Paul",
        "C) Juan, Marc, Paul",
        "D) Juan, Marc, Trisha",
        "E) Juan, Nita, Trisha"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-datatypes ((Assignment 0)) (((none) (one) (two))))",
        "(declare-fun assigned (People Lockers) Assignment)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((p People) (l Lockers)) (<= (assigned p l) 2))",
        "(forall ((p People)) (= (sum (mapcar (lambda (l) assigned p l) Lockers)) 1))",
        "(forall ((l1 Lockers) (l2 Lockers) (l1 < l2)) (not (and (assigned Juan l1) (assigned Juan l2))))",
        "(forall ((l Lockers)) (not (and (assigned Rachel l) (assigned (distinct Rachel) l))))",
        "(forall ((l1 Lockers) (l2 Lockers) (distinct l1 l2) (abs (+ (to-int (assigned Nita l1) (assigned Nita l2)) - 1) 1)) (not (and (assigned Nita l1) (assigned Trisha l2))))",
        "(assigned Fred 3 one)"
      ],
      "options": [
        "(forall ((l Lockers)) (= (assigned Juan l) 1) (and (distinct Juan Marc) (assigned Marc l) ) (and (distinct Juan Paul) (assigned Paul l)) (and (distinct Juan Nita) (assigned Nita l)))",
        "(forall ((l Lockers)) (= (assigned Juan l) 1) (and (distinct Juan Marc) (assigned Marc l) ) (and (distinct Juan Paul) (assigned Paul l)) (and (distinct Juan Trisha) (assigned Trisha l)))",
        "... "
      ],
      "type": "sat",
      "perplexity": [
        1.2468600273132324,
        1.039337396621704
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?",
      "options": [
        "A) Juan is assigned to locker 4.",
        "B) Juan is assigned to locker 5.",
        "C) Paul is assigned to locker 2.",
        "D) Rachel is assigned to locker 2.",
        "E) Rachel is assigned to locker 5."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Children 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha)))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5)))",
        "(declare-fun assigned (Children Lockers) Bool)",
        "(declare-fun shared (Lockers) Bool)"
      ],
      "constraints": [
        "(forall ((c Children) (l Lockers)) (<= (assigned c l) 1))",
        "(forall ((l Lockers)) (<= (shared l) 1))",
        "(forall ((c Children) (l Lockers)) (=> (assigned c l) (shared l)))",
        "(forall ((c Children) (l1 Lockers) (l2 Lockers)) (=> (= l1 l2) (not (assigned c l1) (assigned c l2))))",
        "(assigned Fred 3)",
        "(and (exists ((c Children)) (exists ((l Lockers)) (and (assigned c l) (not (Rachel c) (shared l))))) (not (exists ((c Children)) (exists ((l Lockers)) (and (assigned c l) (Rachel c) (shared l))))))",
        "(not (exists ((c Children)) (exists ((l Lockers)) (and (assigned c l) (adjacent l (lockers 3)) (assigned Trisha l))))"
      ],
      "options": [
        "(assigned Juan 4)",
        "(assigned Juan 5)",
        "(assigned Paul 2)",
        "(assigned Rachel 2)",
        "(assigned Rachel 5)"
      ],
      "type": "sat",
      "perplexity": [
        1.1786495447158813,
        1.0141431093215942
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?",
      "options": [
        "A) locker 2",
        "B) locker 4",
        "C) locker 1, locker 2",
        "D) locker 1, locker 4",
        "E) locker 2, locker 4"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assignedTo (People Lockers) Bool)",
        "(declare-fun isShared (Lockers) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((p People) (l Lockers)) (<= (to-int (assignedTo p l)) 1))",
        "(forall ((l Lockers)) (<= (to-int (isShared l)) 1))",
        "(forall ((l Lockers)) (=> (isShared l) (= (count (+ (to-int (assignedTo Nita l)) (to-int (assignedTo Trisha l))) 2))))",
        "(and (assignedTo Juan 5) (isShared 5))",
        "(forall ((p People)) (not (= (p Rachel) (and (assignedTo p 2) (isShared 2)))))",
        "(and (assignedTo Fred 3) (not (isShared 3)))",
        "(forall ((l Lockers) (n Lockers)) (=> (not (= l n) (not (and (assignedTo Nita l) (assignedTo Trisha n))))))",
        "(forall ((l Lockers) (p People) (q People)) (=> (and (assignedTo p l) (assignedTo q l)) (isShared l)))"
      ],
      "options": [
        "(not (isShared 2))",
        "(not (isShared 4))",
        "(and (not (isShared 1)) (not (isShared 2)))",
        "(and (not (isShared 1)) (not (isShared 4)))",
        "(and (not (isShared 2)) (not (isShared 4)))"
      ],
      "type": "sat",
      "perplexity": [
        1.160070538520813,
        1.015974760055542
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Children 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigned (Children Lockers) Bool)",
        "(declare-fun shared (Lockers Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((c Children)) (and (forall ((l Lockers)) (= (count (forall ((x Children) (and (assigned x l) (distinct x c))) 1) 1))  (forall ((l Lockers)) (= (count (forall ((x Children) (and (assigned x l) (distinct x c))) 1) 0) 0)) )",
        "(forall ((l Lockers)) (or (= (shared l) true) (= (shared l) false)))",
        "(forall ((c Children)) (or (and (shared (1)) (assigned c (1))) (or (and (shared (2)) (assigned c (2))) (and (shared (3)) (assigned c (3))) (and (shared (4)) (assigned c (4))) (and (shared (5)) (assigned c (5))))))",
        "(and (assigned Juan (1)) (assigned Juan (2)) (assigned Juan (3)) (assigned Juan (4)) (assigned Juan (5)))",
        "(not (assigned Rachel (1))) (not (assigned Rachel (2))) (not (assigned Rachel (3))) (not (assigned Rachel (4))) (not (assigned Rachel (5)))",
        "(and (not (assigned Nita (1))) (not (assigned Nita (2))) (not (assigned Trisha (1))) (not (assigned Trisha (2))))",
        "(assigned Fred (3))"
      ],
      "options": [
        "(exists ((l Lockers)) (and (assigned Juan l) (distinct l (1)) (distinct l (2))))",
        "(exists ((l Lockers)) (and (assigned Juan l) (distinct l (1)) (distinct l (3))))",
        "(exists ((l Lockers)) (and (assigned Juan l) (distinct l (2)) (distinct l (4))))",
        "(exists ((l Lockers)) (and (assigned Juan l) (distinct l (3)) (distinct l (5))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1994147300720215,
        1.011405110359192
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If the first three lockers are assigned to girls, which one of the following must be true?",
      "options": [
        "A) Juan is assigned to locker 1.",
        "B) Nita is assigned to locker 3.",
        "C) Trisha is assigned to locker 1.",
        "D) Juan is assigned to the same locker as Trisha.",
        "E) Paul is assigned to the same locker as Trisha."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun assigned (People Lockers) Bool)",
        "(declare-fun shared (Lockers) Bool)",
        "(declare-fun girl (People) Bool)",
        "(declare-fun boy (People) Bool)"
      ],
      "constraints": [
        "(forall ((p People) (l Lockers)) (and (not (assigned p l)) (not (assigned p l))))",
        "(forall ((l Lockers)) (or (= (shared l) true) (= (shared l) false)))",
        "(forall ((l Lockers)) (and (or (<= (count (filter (lambda (x) (and (assigned x l) (girl x))) People) 1) 0) (= (shared l) true)) (or (<= (count (filter (lambda (x) (and (assigned x l) (boy x))) People) 1) 0) (= (shared l) true))))",
        "(and (assigned Juan _ (shared _)) (not (assigned Rachel _ (shared _))))",
        "(not (and (assigned Nita 1) (assigned Trisha 2)))(not (and (assigned Nita 2) (assigned Trisha 1)))",
        "(assigned Fred 3)"
      ],
      "options": [
        "(forall ((l Lockers) (p People)) (and (= l 1) (girl p) (assigned p l)))",
        "(forall ((l Lockers) (p People)) (and (= l 2) (girl p) (assigned p l)))",
        "(forall ((l Lockers) (p People)) (and (= l 3) (girl p) (assigned p l)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1997660398483276,
        1.0150641202926636
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
      "question": "If lockers 1 and 2 are each assigned to one boy and are not shared lockers, then locker 4 must be assigned to",
      "options": [
        "A) Juan",
        "B) Paul",
        "C) Rachel",
        "D) Juan and Nita",
        "E) Marc and Trisha"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fred) (Juan) (Marc) (Paul) (Nita) (Rachel) (Trisha))))",
        "(declare-datatypes ((Lockers 0)) (((1) (2) (3) (4) (5)))",
        "(declare-fun assignedTo (People Lockers) Bool)",
        "(declare-fun isShared (Lockers) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((p People) (l Lockers)) (<= (assignedTo p l) 1))",
        "(forall ((l Lockers)) (<= (isShared l) 1))",
        "(forall ((l Lockers)) (=> (isShared l) (and (distinct (filter (lambda (x) (assignedTo x l)) People) (filter (lambda (x) (assignedTo x l)) People) 1)))",
        "(forall ((l Lockers)) (=> (not (isShared l)) (or (not (assignedTo Juan l)) (not (assignedTo Rachel l))))",
        "(assignedTo Fred 3)",
        "(forall ((l Lockers)) (=> (assignedTo Paul l) (and (distinct Paul (filter (lambda (x) (assignedTo x l)) People) 1))))",
        "(forall ((l Lockers)) (=> (assignedTo Juan l) (isShared l)))",
        "(forall ((l Lockers)) (=> (not (assignedTo Rachel l) (isShared l))))",
        "(forall ((l Lockers)) (=> (assignedTo Nita l) (not (and (assignedTo Trisha (add l 1)) (assignedTo Trisha (add l -1)))))"
      ],
      "options": [
        "(forall ((l Lockers) (p People)) (=> (assignedTo p l) (= l 4) (not (and (assignedTo (filter (lambda (x) (not (= x Juan))) People) l) (assignedTo (filter (lambda (x) (not (= x Rachel))) People) l))))",
        "(forall ((l Lockers) (p People)) (=> (assignedTo p l) (= l 4) (not (and (assignedTo (filter (lambda (x) (not (= x Juan))) People) l) (assignedTo (filter (lambda (x) (not (= x Rachel))) People) l))))",
        "(forall ((l Lockers) (p People)) (=> (assignedTo p l) (= l 4) (not (and (assignedTo (filter (lambda (x) (not (= x Juan))) People) l) (assignedTo (filter (lambda (x) (not (= x Rachel))) People) l))))",
        "(forall ((l Lockers) (p People)) (=> (assignedTo p l) (= l 4) (not (and (assignedTo (filter (lambda (x) (not (= x Juan))) People) l) (assignedTo (filter (lambda (x) (not (= x Rachel))) People) l))))",
        "(forall ((l Lockers) (p People)) (=> (assignedTo p l) (= l 4) (not (and (assignedTo (filter (lambda (x) (not (= x Juan))) People) l) (assignedTo (filter (lambda (x) (not (= x Rachel))) People) l))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1669526100158691,
        1.0069752931594849
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "Which one of the following could be a complete and accurate list of the types of CDs that are on sale?",
      "options": [
        "A) new jazz, used jazz, used opera, used pop, new rap",
        "B) new jazz, used pop, used rap, new soul",
        "C) used opera, used pop, new rap, used rap",
        "D) used opera, new pop, used pop, new soul",
        "E) used jazz, used pop, new soul, used soul"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((CDStatus 0)) (((new) (used))))",
        "(declare-fun on_sale (CDTypes CDStatus) Bool)"
      ],
      "constraints": [
        "(and (on_sale pop used) (not (on_sale opera new)))",
        "(=> (and (on_sale pop new) (on_sale pop used)) (and (on_sale soul new) (on_sale soul used)))",
        "(=> (and (on_sale jazz new) (on_sale jazz used)) (not (on_sale rap new)) (not (on_sale rap used)))",
        "(=> (not (on_sale jazz new)) (not (on_sale jazz used)) (on_sale pop new))",
        "(=> (or (on_sale rap new) (on_sale rap used)) (not (on_sale soul new)) (not (on_sale soul used)))"
      ],
      "options": [
        "(and (on_sale jazz new) (on_sale jazz used) (on_sale pop used) (on_sale rap new))",
        "(and (on_sale jazz new) (on_sale pop used) (on_sale rap new) (on_sale soul new))",
        "(and (on_sale opera used) (on_sale pop used) (on_sale rap new) (on_sale rap used))",
        "(and (on_sale opera used) (on_sale pop new) (on_sale pop used) (on_sale soul new))",
        "(and (on_sale jazz used) (on_sale pop used) (on_sale soul new) (on_sale soul used))"
      ],
      "type": "sat",
      "perplexity": [
        1.0619975328445435,
        1.012670636177063
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If new soul is not on sale, then which one of the following must be true?",
      "options": [
        "A) New rap is not on sale.",
        "B) New rap is on sale.",
        "C) Used opera is not on sale.",
        "D) At least one type of jazz is not on sale.",
        "E) At least one type of pop is not on sale."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDType 0)) (((jazz) (opera) (pop) (rap) (soul) (new) (used))))",
        "(declare-fun onSale (CDType) Bool)"
      ],
      "constraints": [
        "(and (onSale (and pop used)) (not (onSale (and opera new))))",
        "(=> (and (onSale (and pop new)) (onSale (and soul new)) (onSale (and soul used))) )",
        "(=> (and (onSale (and jazz new)) (onSale (and jazz used))) (not (onSale (and rap new))))",
        "(=> (not (and (onSale (and jazz new)) (onSale (and jazz used)))) (onSale (and pop new)))",
        "(=> (or (onSale (and rap new)) (onSale (and rap used))) (not (onSale (and soul new))))"
      ],
      "options": [
        "(=> (not (onSale (and soul new))) (not (onSale (and rap new))))",
        "(=> (not (onSale (and soul new))) (onSale (and rap new)))",
        "(=> (not (onSale (and soul new))) (not (onSale (and opera used))))",
        "(=> (not (onSale (and soul new))) (or (not (onSale (and jazz new))) (not (onSale (and jazz used)))))",
        "(=> (not (onSale (and soul new))) (or (not (onSale (and pop new))) (not (onSale (and pop used)))))"
      ],
      "type": "sat",
      "perplexity": [
        1.104136347770691,
        1.0178585052490234
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If both types of jazz are on sale, then which one of the following is the minimum number of types of new CDs that could be included in the sale?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDType 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((CDStatus 0)) (((new) (used))))",
        "(declare-fun is_on_sale (CDType CDStatus) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(assert (and (is_on_sale pop used) (not (is_on_sale opera new))))",
        0,
        "(assert (implies (and (is_on_sale pop new) (is_on_sale pop used)) (and (is_on_sale soul new) (is_on_sale soul used))))",
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (not (is_on_sale rap new))))",
        "(assert (implies (and (not (is_on_sale jazz new)) (not (is_on_sale jazz used))) (is_on_sale pop new)))",
        "(assert (implies (or (is_on_sale rap new) (is_on_sale rap used)) (not (is_on_sale soul new))))"
      ],
      "options": [
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (>= (to-int (is_on_sale opera new)) 1)))",
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (>= (to-int (is_on_sale pop new)) 1)))",
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (>= (to-int (is_on_sale soul new)) 0)))",
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (<= (to-int (is_on_sale opera new)) 1)))",
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (<= (to_int (is_on_sale pop new)) 1)))",
        "(assert (implies (and (is_on_sale jazz new) (is_on_sale jazz used)) (<= (to_int (is_on_sale soul new)) 0)))"
      ],
      "type": "sat",
      "perplexity": [
        1.251562237739563,
        1.0660059452056885
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Neither type of opera and neither type of rap is on sale.",
        "B) Neither type of jazz and neither type of opera is on sale.",
        "C) Neither type of opera and neither type of soul is on sale.",
        "D) Neither type of jazz and neither type of soul is on sale.",
        "E) Neither type of jazz and neither type of rap is on sale."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDType 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((Condition 0)) (((new) (used))))",
        "(declare-fun on_sale (CDType Condition) Bool)"
      ],
      "constraints": [
        "(and (on_sale pop used) (not (on_sale opera new)))",
        "(=> (and (on_sale pop new) (on_sale pop used)) (and (on_sale soul new) (on_sale soul used)))",
        "(=> (and (on_sale jazz new) (on_sale jazz used)) (not (on_sale rap new)))",
        "(=> (not (and (on_sale jazz new) (on_sale jazz used))) (on_sale pop new))",
        "(=> (or (on_sale rap new) (on_sale rap used)) (not (on_sale soul new)))"
      ],
      "options": [
        "(not (and (not (on_sale opera new)) (not (on_sale opera used)) (not (on_sale rap new)) (not (on_sale rap used))) )",
        "(not (and (not (on_sale jazz new)) (not (on_sale jazz used)) (not (on_sale opera new)) (not (on_sale opera used))))",
        "(not (and (not (on_sale opera new)) (not (on_sale opera used)) (not (on_sale soul new)) (not (on_sale soul used))))",
        "(not (and (not (on_sale jazz new)) (not (on_sale jazz used)) (not (on_sale soul new)) (not (on_sale soul used))))",
        "(not (and (not (on_sale jazz new)) (not (on_sale jazz used)) (not (on_sale rap new)) (not (on_sale rap used))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.0666298866271973,
        1.0100858211517334
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If neither type of jazz is on sale, then each of the following must be true EXCEPT:",
      "options": [
        "A) Used opera is on sale.",
        "B) New rap is not on sale.",
        "C) Used rap is not on sale.",
        "D) New soul is on sale.",
        "E) Used soul is on sale."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDType 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((CDStatus 0)) (((new) (used))))",
        "(declare-fun on_sale (CDType CDStatus) Bool)"
      ],
      "constraints": [
        "(and (on_sale pop used) (not (on_sale opera new)))",
        "(implies (and (on_sale pop new) (on_sale pop used)) (and (on_sale soul new) (on_sale soul used)))",
        "(implies (and (on_sale jazz new) (on_sale jazz used)) (not (on_sale rap new)))",
        "(implies (not (on_sale jazz new)) (on_sale pop new))",
        "(implies (or (on_sale rap new) (on_sale rap used)) (not (on_sale soul new)))",
        "(implies (or (on_sale rap new) (on_sale rap used)) (not (on_sale soul used)))"
      ],
      "options": [
        "(not (implies (not (on_sale jazz new)) (on_sale opera used)))",
        "(implies (not (on_sale jazz new)) (not (on_sale rap new)))",
        "(implies (not (on_sale jazz new)) (not (on_sale rap used)))",
        "(implies (not (on_sale jazz new)) (on_sale soul new))",
        "(implies (not (on_sale jazz new)) (on_sale soul used))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1051486730575562,
        1.0151861906051636
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If new soul is the only type of new CD on sale, then which one of the following CANNOT be true?",
      "options": [
        "A) Used jazz is not on sale.",
        "B) Used opera is not on sale.",
        "C) Used rap is not on sale.",
        "D) Used soul is on sale.",
        "E) Used soul is not on sale."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((new_jazz) (used_jazz) (new_opera) (used_opera) (new_pop) (used_pop) (new_rap) (used_rap) (new_soul) (used_soul))))",
        "(declare-fun on_sale (CDTypes) Bool)"
      ],
      "constraints": [
        "(and (on_sale used_pop) (not (on_sale new_opera)))",
        "(=> (and (on_sale new_pop) (on_sale used_pop)) (and (on_sale new_soul) (on_sale used_soul)))",
        "(=> (and (on_sale new_jazz) (on_sale used_jazz)) (not (on_sale new_rap) (not (on_sale used_rap))))",
        "(=> (not (on_sale new_jazz) (not (on_sale used_jazz))) (on_sale new_pop))",
        "(=> (or (on_sale new_rap) (on_sale used_rap)) (not (on_sale new_soul) (not (on_sale used_soul))))"
      ],
      "options": [
        "(and (on_sale new_soul) (not (or (on_sale new_jazz) (on_sale used_jazz) (on_sale new_pop) (on_sale used_pop) (on_sale new_rap) (on_sale used_rap))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1278403997421265,
        1.014486312866211
      ],
      "answer": "A",
      "predicted_answer": [
        "unsat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
      "question": "If exactly four of the five types of used CDs are the only CDs on sale, then which one of the following could be true?",
      "options": [
        "A) Used jazz is not on sale.",
        "B) Used opera is not on sale.",
        "C) Used rap is not on sale.",
        "D) Neither type of jazz is on sale.",
        "E) Neither type of rap and neither type of soul is on sale."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((CDTypes 0)) (((jazz) (opera) (pop) (rap) (soul))))",
        "(declare-datatypes ((CDState 0)) (((new) (used))))",
        "(declare-fun on_sale (CDTypes CDState) Bool)"
      ],
      "constraints": [
        "(and (on_sale pop used) (not (on_sale opera new)))",
        "(=> (and (on_sale pop new) (on_sale pop used)) (and (on_sale soul new) (on_sale soul used)))",
        "(=> (and (on_sale jazz new) (on_sale jazz used)) (not (on_sale rap new)) (not (on_sale rap used)))",
        "(=> (not (on_sale jazz new)) (not (on_sale jazz used)) (on_sale pop new))",
        "(=> (or (on_sale rap new) (on_sale rap used)) (not (on_sale soul new)) (not (on_sale soul used)))"
      ],
      "options": [
        "(and (forall ((c CDTypes)) (or (= (on_sale c new) false) (= (on_sale c used) false))) (not (on_sale jazz used)))",
        "(and (forall ((c CDTypes)) (or (= (on_sale c new) false) (= (on_sale c used) false))) (not (on_sale opera used)))",
        "(and (forall ((c CDTypes)) (or (= (on_sale c new) false) (= (on_sale c used) false))) (not (on_sale rap used)))",
        "(and (forall ((c CDTypes)) (or (= (on_sale c new) false) (= (on_sale c used) false))) (not (on_sale jazz new)) (not (on_sale jazz used)))",
        "(and (forall ((c CDTypes)) (or (= (on_sale c new) false) (= (on_sale c used) false))) (not (on_sale rap new)) (not (on_sale rap used)) (not (on_sale soul new)) (not (on_sale soul used)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1245670318603516,
        1.075277328491211
      ],
      "answer": "C",
      "predicted_answer": [
        "unsat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "Which one of the following CANNOT be true of the week's tour schedule?",
      "options": [
        "A) The division that is toured on Monday is also toured on Tuesday.",
        "B) The division that is toured on Monday is also toured on Friday.",
        "C) The division that is toured on Tuesday is also toured on Thursday.",
        "D) The division that is toured on Wednesday is also toured on Friday.",
        "E) The division that is toured on Thursday is also toured on Friday."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday)))",
        "(declare-fun toured (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((div Divisions)) (toured d div)))",
        "(exists ((d Divisions)) (not (toured Monday d)))",
        "(exists ((d Divisions)) (not (toured Wednesday d)))",
        "(exists ((d1 Days) (d2 Days)) (and (>= d1 0) (< d2 d1) (and (toured d1 Sales) (toured d2 Sales))))",
        "(forall ((d1 Days) (d2 Days)) (not (and (>= d1 0) (< d2 d1) (and (toured d1 Sales) (toured d2 Sales)))))",
        "(forall ((d Days)) (not (and (toured d Operations) (toured d Production))))",
        "(implies (toured Thursday Operations) (toured Friday Production))"
      ],
      "options": [
        "(not (exists ((d1 Days) (d2 Days)) (and (>= d1 0) (< d2 d1) (and (toured d1 (Operations) ) (toured d2 (Operations))))))",
        "(not (exists ((d1 Days) (d2 Days)) (and (>= d1 0) (< d2 d1) (and (toured d1 (Operations) ) (toured d2 (Friday))))))",
        "(not (exists ((d1 Days) (d2 Days)) (and (>= d1 0) (< d2 d1) (and (toured d1 (Operations) ) (toured d2 (Thursday))))))",
        "(not (exists ((d1 Days) (d2 Days)) (and (>= d1 0) (< d2 d1) (and (toured d1 (Operations) ) (toured d2 (Friday))))))",
        "(not (exists ((d1 Days) (d2 Days)) (and (>= d1 0) (< d2 d1) (and (toured d1 (Operations) ) (toured d2 (Friday))))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1151654720306396,
        1.0082933902740479
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in addition to the Sales division one other division is toured on two consecutive days, then it could be true of the week's tour schedule both that the",
      "options": [
        "A) Production division is toured on Monday and that the Operations division is toured on Thursday",
        "B) Production division is toured on Tuesday and that the Sales division is toured on Wednesday",
        "C) Operations division is toured on Tuesday and that the Production division is toured on Friday",
        "D) Sales division is toured on Monday and that the Operations division is toured on Friday",
        "E) Sales division is toured on Wednesday and that the Production division is toured on Friday"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales))))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday)))",
        "(declare-fun toured (Divisions Days) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((div Divisions)) (and (toured div d) (not (toured Operations d))))",
        "(not (toured Operations Monday))",
        "(not (toured Production Wednesday))",
        "(exists ((d1 Days) (d2 Days)) (and (<= d1 d2) (not (= d1 (d2 - 1)) ) (toured Sales d1) (toured Sales d2) (forall ((d Days)) (=> (not (and (<= d1 d) (<= d d2)) (not (toured Sales d))))))",
        "(=> (toured Operations Thursday) (toured Production Friday))"
      ],
      "options": [
        "(and (toured Operations Monday) (toured Production Thursday))",
        "(and (toured Production Tuesday) (toured Sales Wednesday))",
        "(and (toured Operations Tuesday) (toured Production Friday))",
        "(and (toured Sales Monday) (toured Operations Friday))",
        "(and (toured Sales Wednesday) (toured Production Friday))"
      ],
      "type": "sat",
      "perplexity": [
        1.169978380203247,
        1.0169730186462402
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Friday, then for which one of the following days must a tour of the Production division be scheduled?",
      "options": [
        "A) Monday",
        "B) Tuesday",
        "C) Wednesday",
        "D) Thursday",
        "E) Friday"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday))))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales)))",
        "(declare-fun toured (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (and (exists ((div Divisions)) (toured d div)) (exists ((div Divisions)) (toured d div)) (exists ((div Divisions)) (toured d div))))",
        "(not (toured Monday Operations))",
        "(not (toured Wednesday Production))",
        "(exists ((d1 Days) (d2 Days)) (and (= d1 (add d2 1)) (toured d1 Sales) (toured d2 Sales) (distinct d1 d2)))",
        "(implies (toured Thursday Operations) (toured Friday Production))"
      ],
      "options": [
        "(implies (and (toured Tuesday Operations) (toured Friday Operations)) (toured Wednesday Production))",
        "(implies (and (toured Tuesday Operations) (toured Friday Operations)) (toured Monday Production))",
        "(implies (and (toured Tuesday Operations) (toured Friday Operations)) (toured Thursday Production))",
        "(implies (and (toured Tuesday Operations) (toured Friday Operations)) (toured Friday Production))"
      ],
      "type": "sat",
      "perplexity": [
        1.115785002708435,
        1.015213131904602
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Monday is not the division that is toured on Tuesday, then which one of the following could be true of the week's schedule?",
      "options": [
        "A) A tour of the Sales division is scheduled for some day earlier in the week than is any tour of the Production division.",
        "B) A tour of the Operations division is scheduled for some day earlier in the week than is any tour of the Production division.",
        "C) The Sales division is toured on Monday.",
        "D) The Production division is toured on Tuesday.",
        "E) The Operations division is toured on Wednesday."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday)))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales)))",
        "(declare-fun tour (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((div Divisions)) (tour d div)))",
        "(not (tour Monday Operations))",
        "(not (tour Wednesday Production))",
        "(exists ((d1 Days) (d2 Days)) (= d1 (+ 1 d2)) (and (tour d1 Sales) (tour d2 Sales)))",
        "(implies (tour Thursday Operations) (tour Friday Production))",
        "(not (= (tour Monday Sales) (tour Tuesday Sales)))"
      ],
      "options": [
        "(exists ((d1 Days) (d2 Days)) (and (< d1 d2) (tour d1 Sales) (tour d2 Production)))",
        "(exists ((d1 Days) (d2 Days)) (and (< d1 d2) (tour d1 Operations) (tour d2 Production)))",
        "(tour Monday Sales)",
        "(tour Tuesday Production)",
        "(tour Wednesday Operations)"
      ],
      "type": "multi-sat",
      "perplexity": [
        1.118188500404358,
        1.167519211769104
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
      "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Wednesday, then which one of the following must be true of the week's tour schedule?",
      "options": [
        "A) The Production division is toured on Monday.",
        "B) The Operations division is toured on Tuesday.",
        "C) The Sales division is toured on Wednesday.",
        "D) The Sales division is toured on Thursday.",
        "E) The Production division is toured on Friday."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday)))",
        "(declare-datatypes ((Divisions 0)) (((Operations) (Production) (Sales)))",
        "(declare-fun toured (Days Divisions) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((div Divisions)) (and (toured d div) (not (toured d (distinct div))))",
        "(not (toured Monday Operations))",
        "(not (toured Wednesday Production))",
        "(exists ((d Days) (e Days)) (and (= d (distinct e)) (toured d Sales) (toured e Sales) (forall ((f Days)) (=> (distinct f d) (not (toured f Sales))))))",
        "(implies (toured Thursday Operations) (toured Friday Production))"
      ],
      "options": [
        "(implies (toured Tuesday Sales) (toured Wednesday Sales))"
      ],
      "type": "sat",
      "perplexity": [
        1.1509792804718018,
        1.0176219940185547
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Which one of the following could be a complete and accurate list of the members of the crew?",
      "options": [
        "A) George, Helena, Inga, Kelly",
        "B) George, Helena, Kelly, Leanda",
        "C) Helena, Inga, Kelly, Olaf",
        "D) Helena, Inga, Maricita, Olaf",
        "E) George, Helena, Leanda, Maricita, Olaf"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming)))",
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3)))",
        "(declare-fun assigned (Workers Tasks Days) Bool)",
        "(declare-fun can_do (Workers Tasks) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((w Workers)) (forall ((t Tasks)) (or (not (can_do w t)) (and (assigned w t day1) (assigned w t day2) (assigned w t day3))))",
        "(forall ((d Days)) (exists ((w Workers)) (exists ((t Tasks)) (assigned w t d))))",
        "(not (and (assigned George taping day1) (assigned George priming day1)))",
        "(forall ((w Workers)) (<= (+ (to-int (and (assigned w day1) (assigned w day2))) (to-int (and (assigned w day2) (assigned w day3))) (to-int (and (assigned w day1) (assigned w day3)))) 1))",
        "(forall ((t Tasks)) (exists ((w Workers)) (and (assigned w t day1) (assigned w t day2) (assigned w t day3))))",
        "(forall ((t Tasks) (d Days)) (<= (assigned George t d) 1) )",
        "(forall ((t Tasks) (d Days)) (<= (assigned Helena t d) 1) )",
        "(forall ((t Tasks) (d Days)) (<= (assigned Inga t d) 1) )",
        "(forall ((t Tasks) (d Days)) (<= (assigned Kelly t d) 1) )",
        "(forall ((t Tasks) (d Days)) (<= (assigned Leanda t d) 1) )",
        "(forall ((t Tasks) (d Days)) (<= (assigned Maricita t d) 1) )",
        "(forall ((t Tasks) (d Days)) (<= (assigned Olaf t d) 1) )"
      ],
      "options": [
        "(and (assigned George taping day1) (assigned Helena sanding day1) (assigned Inga framing day1) (assigned Kelly wallboarding day1))",
        "(and (assigned George taping day1) (assigned Helena sanding day1) (assigned Kelly wallboarding day1) (assigned Leanda priming day1))",
        "(and (assigned Helena sanding day1) (assigned Inga framing day1) (assigned Kelly wallboarding day1) (assigned Olaf priming day1))",
        "(and (assigned Helena sanding day1) (assigned Inga framing day1) (assigned Maricita sanding day1) (assigned Olaf priming day1))",
        "(and (assigned George taping day1) (assigned Helena sanding day1) (assigned Leanda wallboarding day1) (assigned Maricita sanding day1) (assigned Olaf priming day1))"
      ],
      "type": "sat",
      "perplexity": [
        1.1320905685424805,
        1.0110186338424683
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "If the installation takes three days, and if the same two crew members work on the first and third days, then which one of the following could be the pair of crew members who work on those two days?",
      "options": [
        "A) Helena and Inga",
        "B) Inga and Kelly",
        "C) Inga and Leanda",
        "D) Kelly and Olaf",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3)))",
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf)))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming)))",
        "(declare-fun works_on (Workers Days Tasks) Bool)",
        "(declare-fun is_same_worker (Workers Workers) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((w Workers) (t Tasks)) (works_on w d t)))",
        "(not (and (works_on George day1 taping) (works_on George day3 taping)))",
        "(forall ((w Workers) (d Days)) (<= (count (filter (lambda (t) (and (works_on w d t) (distinct d (days)))) (Tasks)) 1))",
        "(forall ((t Tasks)) (exists ((w Workers)) (exists ((d Days)) (works_on w d t))))"
      ],
      "options": [
        "(and (works_on George day1 framing) (works_on George day3 framing))",
        "(and (works_on Helena day1 framing) (works_on Helena day3 framing))",
        "(and (works_on Inga day1 framing) (works_on Inga day3 framing))",
        "(and (works_on Kelly day1 framing) (works_on Kelly day3 framing))",
        "(and (works_on Leanda day1 framing) (works_on Leanda day3 framing))",
        "(and (works_on Maricita day1 framing) (works_on Maricita day3 framing))",
        "(and (works_on Olaf day1 framing) (works_on Olaf day3 framing))"
      ],
      "type": "sat",
      "perplexity": [
        1.2130050659179688,
        1.0132155418395996
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Each of the following could be a complete and accurate list of the members of the crew EXCEPT:",
      "options": [
        "A) Helena, Inga, Kelly, Maricita",
        "B) Inga, Kelly, Leanda, Olaf",
        "C) George, Helena, Inga, Leanda",
        "D) Inga, Leanda, Maricita, Olaf",
        "E) Kelly, Leanda, Maricita, Olaf"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-option :produce-models true)",
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3))))",
        "(declare-fun can-do (Workers Tasks) Bool)",
        "(declare-fun assigned-to (Tasks Workers) Bool)",
        "(declare-fun day-of (Tasks Days) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((w Workers)) (forall ((t Tasks)) (=> (can-do w t) (and (<= (to-int (assigned-to t w)) 1) (<= (to-int (assigned-to t w)) 1)))))",
        "(forall ((d Days)) (exists ((t Tasks)) (and (day-of t d) (assigned-to t w)))))",
        "(not (and (day-of taping day1) (day-of priming day1)))",
        "(forall ((w Workers)) (exists ((t Tasks)) (and (can-do w t) (assigned-to t w))))",
        "(forall ((w Workers)) (<= (sum (to-int (assigned-to t w))) 1))"
      ],
      "options": [
        "(and (assigned-to framing George) (assigned-to wallboarding Helena) (assigned-to taping Inga) (assigned-to sanding Kelly) (assigned-to priming Leanda))",
        "(and (assigned-to framing Inga) (assigned-to wallboarding Kelly) (assigned-to taping Leanda) (assigned-to sanding Olaf) (assigned-to priming George))",
        "(and (assigned-to framing Inga) (assigned-to wallboarding Leanda) (assigned-to taping Maricita) (assigned-to sanding Olaf) (assigned-to priming George))",
        "(and (assigned-to framing Inga) (assigned-to wallboarding Leanda) (assigned-to taping Maricita) (assigned-to sanding Olaf) (assigned-to priming George))",
        "(and (assigned-to framing Kelly) (assigned-to wallboarding Leanda) (assigned-to taping Maricita) (assigned-to sanding Olaf) (assigned-to priming George))"
      ],
      "type": "unsat",
      "perplexity": [
        1.2618318796157837,
        1.0125339031219482
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 21,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "If the installation takes three days, and if the sanding is done on the third day, then which one of the following could be a list of all the crew members who work on the second day?",
      "options": [
        "A) Inga",
        "B) Kelly",
        "C) Olaf",
        "D) George and Helena",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming)))",
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3)))",
        "(declare-fun can-do (Workers Tasks) Bool)",
        "(declare-fun works-on (Workers Days Tasks) Bool)"
      ],
      "constraints": [
        "(forall ((d Days)) (exists ((w Workers) (t Tasks)) (and (works-on w d t) (not (and (works-on w d t2) (= t t2))))))",
        "(not (and (works-on George day1 taping) (works-on George day2 taping)))",
        "(and (can-do George taping) (can-do Helena sanding priming) (can-do Inga framing priming) (can-do Kelly framing sanding) (can-do Leanda wallboarding taping) (can-do Maricita sanding) (can-do Olaf wallboarding priming))",
        "(forall ((w Workers)) (exists ((d Days) (t Tasks)) (and (works-on w d t) (not (and (works-on w d t2) (= t t2))))))",
        "(forall ((d Days) (t Tasks)) (<= (count (filter (lambda (w) (and (works-on w d t))) Workers)) 1))"
      ],
      "options": [
        "(and (works-on Inga day2 framing) (works-on Kelly day2 sanding) (works-on Olaf day2 wallboarding) (works-on George day2 taping) (works-on Helena day2 priming))",
        "(and (works-on Inga day2 framing) (works-on Kelly day2 sanding) (works-on Olaf day2 wallboarding) )",
        "(and (works-on Inga day2 framing) (works-on Kelly day2 sanding) (works-on Olaf day2 wallboarding) (works-on George day2 taping) (works-on Helena day2 priming))",
        "(and (works-on George day2 taping) (works-on Helena day2 priming))",
        "(and (works-on Leanda day2 wallboarding) (works-on Olaf day2 wallboarding))"
      ],
      "type": "sat",
      "perplexity": [
        1.1848423480987549,
        1.0128108263015747
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 22,
    "nl_problem": {
      "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
      "question": "Which one of the following could be a pair of members of the crew both of whom work on the same days as each other and each of whom perform two tasks?",
      "options": [
        "A) George and Maricita",
        "B) Helena and Kelly",
        "C) Inga and Leanda",
        "D) Kelly and Leanda",
        "E) Leanda and Olaf"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Workers 0)) (((George) (Helena) (Inga) (Kelly) (Leanda) (Maricita) (Olaf))))",
        "(declare-datatypes ((Tasks 0)) (((framing) (wallboarding) (taping) (sanding) (priming))))",
        "(declare-datatypes ((Days 0)) (((day1) (day2) (day3)))) ",
        "(declare-fun works-on (Workers Tasks Days) Bool)",
        "(declare-fun assigned-task (Workers Days) Tasks)"
      ],
      "constraints": [
        "(forall ((d Days)) (or (exists ((w Workers) (t Tasks)) (and (works-on w t d) (not (distinct d day1)))) (exists ((w Workers) (t Tasks)) (and (works-on w t d) (not (distinct d day2)))) (exists ((w Workers) (t Tasks)) (and (works-on w t d) (not (distinct d day3))))))",
        "(forall ((d1 Days) (d2 Days)) (=> (distinct d1 d2) (not (and (exists ((w Workers) (t Tasks)) (and (works-on w t d1) (= t taping)))(exists ((w Workers) (t Tasks)) (and (works-on w t d2) (= t priming)))))))",
        "(forall ((w Workers) (d Days)) (<= (count ((forall ((t Tasks)) (and (works-on w t d) (distinct t (assigned-task w d))))) 1))",
        "(forall ((w Workers) (d Days)) (>= (count ((forall ((t Tasks)) (and (works-on w t d) (distinct t (assigned-task w d))))) 1))",
        ""
      ],
      "options": [
        "(exists ((w1 Workers) (t1 Tasks) (d1 Days)) (and (works-on w1 t1 d1) (= t1 framing)))",
        "], 2 "
      ],
      "type": "sat",
      "perplexity": [
        1.2594133615493774,
        1.1291054487228394
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following could be an accurate matching of the hangers to the fabrics of the dresses that hang on them?",
      "options": [
        "A) 1: wool; 2: gauze; 3: silk; 4: linen; 5: polyester; 6: rayon",
        "B) 1: rayon; 2: wool; 3: gauze; 4: silk; 5: linen; 6: polyester",
        "C) 1: polyester; 2: gauze; 3: wool; 4: silk; 5: linen; 6: rayon",
        "D) 1: linen; 2: silk; 3: wool; 4: gauze; 5: polyester; 6: rayon",
        "E) 1: gauze; 2: rayon; 3: silk; 4: linen; 5: wool; 6: polyester"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Fabrics 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool)))",
        "(declare-fun assigned_to (Hangers Fabrics) Bool)"
      ],
      "constraints": [
        "(forall ((h Hangers) (f Fabrics)) (not (= assigned_to h f)))",
        "(exists ((h Hangers)) (and (= h 1) (or (= f rayon) (= f gauze))))",
        "(exists ((h Hangers)) (and (= h 6) (or (= f rayon) (= f gauze))))",
        "(exists ((h Hangers)) (and (= h 3) (or (= f wool) (= f silk))))",
        "(exists ((h Hangers)) (and (= h 2) (not (= f linen))))",
        "(exists ((h Hangers)) (and (= h 3) (not (= f linen))))",
        "(exists ((h Hangers)) (and (= h 4) (not (= f linen))))",
        "(exists ((h Hangers)) (and (= h 5) (not (= f linen))))",
        "(exists ((h Hangers)) (and (= h 6) (not (= f linen))))"
      ],
      "options": [
        "(declare-fun option_a (Hangers Fabrics) Bool)",
        "(and (= (assigned_to 1 wool) true) (= (assigned_to 2 gauze) true) (= (assigned_to 3 silk) true) (= (assigned_to 4 linen) true) (= (assigned_to 5 polyester) true) (= (assigned_to 6 rayon) true) )",
        "(declare-fun option_b (Hangers Fabrics) Bool)",
        0,
        "(declare-fun option_c (Hangers Fabrics) Bool)",
        0,
        "(declare-fun option_d (Hangers Fabrics) Bool)",
        0,
        "(declare-fun option_e (Hangers Fabrics) Bool)",
        0
      ],
      "type": "sat",
      "perplexity": [
        1.1876897811889648,
        1.1343374252319336
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If both the silk dress and the gauze dress are on odd-numbered hangers, then which one of the following could be true?",
      "options": [
        "A) The polyester dress is on hanger 1.",
        "B) The wool dress is on hanger 2.",
        "C) The polyester dress is on hanger 4.",
        "D) The linen dress is on hanger 5.",
        "E) The wool dress is on hanger 6."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6)))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool)))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(forall ((h Hangers) (d Dresses)) (=> (hangs h d) (and (not (hangs h (distinct d))) (distinct h (distinct d))))",
        "(exists ((h Hangers)) (and (>= h 1) (<= h 6) (hangs h gauze) (and (exists ((h2 Hangers)) (and (>= h2 1) (<= h2 6) (not (= h h2)) (hangs h2 polyester))))))",
        "(or (exists ((h Hangers)) (and (>= h 1) (<= h 6) (hangs h rayon) (not (= h 2)))) (exists ((h Hangers)) (and (>= h 1) (<= h 6) (hangs h rayon) (not (= h 5)))))",
        "(or (exists ((h Hangers)) (and (>= h 1) (<= h 6) (hangs h wool) (not (= h 3)))) (exists ((h Hangers)) (and (>= h 1) (<= h 6) (hangs h silk) (not (= h 3)))))",
        "(exists ((h Hangers)) (and (>= h 1) (<= h 6) (hangs h linen) (and (exists ((h2 Hangers)) (and (>= h2 h) (<= h2 6) (hangs h2 silk)))))"
      ],
      "options": [
        "(and (exists ((h Hangers)) (and (>= h 1) (<= h 6) (not (even h)) (hangs h silk))) (exists ((h Hangers)) (and (>= h 1) (<= h 6) (not (even h)) (hangs h gauze))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1814857721328735,
        1.006685733795166
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If the silk dress is on an even-numbered hanger, which one of the following could be on the hanger immediately to its left?",
      "options": [
        "A) the gauze dress",
        "B) the linen dress",
        "C) the polyester dress",
        "D) the rayon dress",
        "E) the wool dress"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool))))",
        "(declare-fun hangs-on (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(forall ((h Hangers) (d Dresses)) (<= (ite (and (= h 1) (and (= d rayon) 1)) 1 0) (ite (and (= h 6) (and (= d rayon) 1)) 1 0) (ite (and (not (= h 1)) (and (not (= h 6)) (and (= d rayon) 1)) 0 0))",
        "(and (not (<= (ite (and (= d gauze) 1) 1 0) (ite (and (= d polyester) 1) 1 0) (ite (and (not (= d gauze) 1) (not (= d polyester) 1) 1 0) (ite (and (not (= d gauze) 1) (not (= d polyester) 1) 1 0) 1 0)) 1 0))",
        "(or (and (= (ite (and (= h 3) (and (= d silk) 1) 1) 1 0) (ite (and (= h 3) (and (= d wool) 1) 1) 1 0) ) (and (= (ite (and (= h 3) (and (= d silk) 1) 1) 1 0) (ite (and (= h 3) (and (= d wool) 1) 1) 1 0) ) 1 0))",
        "(and (= (ite (and (= d linen) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) (and (= (ite (and (= d linen) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) 1 0))"
      ],
      "options": [
        "(and (<= (ite (and (= h 3) (and (= d silk) 1) 1) 1 0) (ite (and (= h 3) (and (= d wool) 1) 1) 1 0) ) (and (= (ite (and (= d linen) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) (and (= (ite (and (= d linen) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) 1 0))))",
        "(and (<= (ite (and (= h 3) (and (= d silk) 1) 1) 1 0) (ite (and (= h 3) (and (= d wool) 1) 1) 1 0) ) (and (= (ite (and (= d polyester) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) (and (= (ite (and (= d polyester) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) 1 0))))",
        "(and (<= (ite (and (= h 3) (and (= d silk) 1) 1) 1 0) (ite (and (= h 3) (and (= d wool) 1) 1) 1 0) ) (and (= (ite (and (= d rayon) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) (and (= (ite (and (= d rayon) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) 1 0))))",
        "(and (<= (ite (and (= h 3) (and (= d silk) 1) 1) 1 0) (ite (and (= h 3) (and (= d wool) 1) 1) 1 0) ) (and (= (ite (and (= d wool) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) (and (= (ite (and (= d wool) 1) 1 0) (ite (and (= d silk) 1) 1 0) ) 1 0))))"
      ],
      "type": "sat",
      "perplexity": [
        1.0994105339050293,
        1.0074799060821533
      ],
      "answer": "E",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "If the polyester dress is on hanger 2, then which one of the following must be true?",
      "options": [
        "A) The silk dress is on hanger 1.",
        "B) The wool dress is on hanger 3.",
        "C) The linen dress is on hanger 4.",
        "D) The linen dress is on hanger 5.",
        "E) The rayon dress is on hanger 6."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6)))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool)))",
        "(declare-fun hangerOf (Dresses) Hangers)"
      ],
      "constraints": [
        "(forall ((d Dresses)) (distinct (hangerOf d) (hangerOf (distinct d))))",
        "(<= (ite (= d gauze) 1 100) (ite (= d polyester) 1 100))",
        "(or (= (hangerOf rayon) 1) (= (hangerOf rayon) 6))",
        "(or (= (hangerOf wool) 3) (= (hangerOf silk) 3))",
        "(and (= (+ 1 (ite (= d linen) 1 0)) (hangerOf linen)) (= (hangerOf silk) (+ 1 (ite (= d linen) 1 0))))",
        "(not (= (hangerOf polyester) 2))"
      ],
      "options": [],
      "type": "sat",
      "perplexity": [
        1.3212101459503174,
        1.033514380455017
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 27,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) The linen dress hangs immediately next to the gauze dress.",
        "B) The polyester dress hangs immediately to the right of the rayon dress.",
        "C) The rayon dress hangs immediately to the left of the wool dress.",
        "D) The silk dress is on a lower-numbered hanger than the gauze dress.",
        "E) The wool dress is on a higher-numbered hanger than the rayon dress."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [],
      "constraints": [],
      "options": [],
      "type": "unsat",
      "perplexity": [
        1.0300827026367188,
        2.086132287979126
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Which one of the following CANNOT hang immediately next to the rayon dress?",
      "options": [
        "A) the gauze dress",
        "B) the linen dress",
        "C) the polyester dress",
        "D) the silk dress",
        "E) the wool dress"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool)))",
        "(declare-fun on (Hangers Dresses) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((h Hangers)) (<= (on h gauze) (on h polyester)))",
        "(or (= (on 1 rayon) true) (= (on 6 rayon) true))",
        "(or (= (on 3 wool) true) (= (on 3 silk) true))",
        "(and (on (successor h) linen) (= h silk))"
      ],
      "options": [
        "(not (and (on 1 gauze) (on 2 rayon)))",
        "(not (and (on 1 linen) (on 2 rayon)))",
        "(not (and (on 1 polyester) (on 2 rayon)))",
        "(not (and (on 1 silk) (on 2 rayon)))",
        "(not (and (on 1 wool) (on 2 rayon)))"
      ],
      "type": "sat",
      "perplexity": [
        1.2125064134597778,
        1.01015043258667
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
      "question": "Assume that the original condition that the linen dress hangs immediately to the right of the silk dress is replaced by the condition that the wool dress hangs immediately to the right of the silk dress. If all the other initial conditions remain in effect, which one of the following must be false?",
      "options": [
        "A) The linen dress is on hanger 1.",
        "B) The gauze dress is on hanger 2.",
        "C) The wool dress is on hanger 4.",
        "D) The silk dress is on hanger 5.",
        "E) The polyester dress is on hanger 6."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Hangers 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Dresses 0)) (((gauze) (linen) (polyester) (rayon) (silk) (wool)))",
        "(declare-fun hangs (Hangers Dresses) Bool)"
      ],
      "constraints": [
        "(forall ((h Hangers) (d Dresses)) (=> (and (not (= h 1) (not (= h 2) (not (= h 3) (not (= h 4) (not (= h 5) (not (= h 6)))) (and (not (= d gauze) (not (= d linen) (not (= d polyester) (not (= d rayon) (not (= d silk) (not (= d wool)))))) (hanges h d))  (and (<= h 2) (<= h 5)) (=> (hanges h d) (and (not (= d polyester) (not (= d rayon)))))))",
        "(forall ((h Hangers) (d Dresses)) (=> (and (not (= h 1) (not (= h 2) (not (= h 3) (not (= h 4) (not (= h 5) (not (= h 6)))) (and (not (= d gauze) (not (= d linen) (not (= d polyester) (not (= d rayon) (not (= d silk) (not (= d wool)))))) (hanges h d))  (and (<= h 2) (<= h 5)) (=> (hanges h d) (and (not (= d polyester) (not (= d rayon)))))))",
        "(forall ((h Hangers) (d Dresses)) (=> (and (not (= h 1) (not (= h 2) (not (= h 3) (not (= h 4) (not (= h 5) (not (= h 6)))) (and (not (= d gauze) (not (= d linen) (not (= d polyester) (not (= d rayon) (not (= d silk) (not (= d wool)))))) (hanges h d))  (and (<= h 2) (<= h 5)) (=> (hanges h d) (and (not (= d polyester) (not (= d rayon)))))))",
        "(forall ((h Hangers) (d Dresses)) (=> (and (not (= h 1) (not (= h 2) (not (= h 3) (not (= h 4) (not (= h 5) (not (= h 6)))) (and (not (= d gauze) (not (= d linen) (not (= d polyester) (not (= d rayon) (not (= d silk) (not (= d wool)))))) (hanges h d))  (and (<= h 2) (<= h 5)) (=> (hanges h d) (and (not (= d polyester) (not (= d rayon)))))))",
        "(forall ((h Hangers) (d Dresses)) (=> (and (not (= h 1) (not (= h 2) (not (= h 3) (not (= h 4) (not (= h 5) (not (= h 6)))) (and (not (= d gauze) (not (= d linen) (not (= d polyester) (not (= d rayon) (not (= d silk) (not (= d wool)))))) (hanges h d))  (and (<= h 2) (<= h 5)) (=> (hanges h d) (and (not (= d polyester) (not (= d rayon)))))))"
      ],
      "options": [
        "(not (hanges 1 gauze))",
        "(not (hanges 2 gauze))",
        "(not (hanges 3 wool))",
        "(not (hanges 5 silk))",
        "(not (hanges 6 polyester))"
      ],
      "type": "sat",
      "perplexity": [
        1.1193944215774536,
        1.009224772453308
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following could be an accurate matching of the four songs performed at the festival with the instruments on which they are performed, listed in order from the first song performed to the last?",
      "options": [
        "A) \"Night's All Right\": guitar;\" Question Man\": keyboard; \"Sammy\": guitar;\" Rhino Rock\": flute",
        "B) \"Question Man\": guitar;\" Rhino Rock\": harmonica; \"Sammy\": keyboard;\" Night's All Right\": flute",
        "C) \"Rhino Rock\": flute;\" Question Man\": keyboard; \"Night's All Right\": harmonica;\" Sammy\": guitar",
        "D) \"Sammy\": harmonica;\" Night's All Right\": guitar; \"Question Man\": keyboard;\" Rhino Rock\": flute",
        "E) \"Sammy\": harmonica;\" Rhino Rock\": guitar; \"Question Man\": flute;\" Night's All Right\": keyboard"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((NightsAllRight) (QuestionMan) (RhinoRock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard)))",
        "(declare-fun song_performed (Songs Instruments) Bool)",
        "(declare-fun first_song (Songs) Bool)"
      ],
      "constraints": [
        "(forall ((s Songs)) (and (not (song_performed s flute)) (first_song s)))",
        "(implies (song_performed Sammy keyboard) (song_performed RhinoRock harmonica))",
        "(implies (song_performed QuestionMan keyboard) (song_performed NightsAllRight flute))",
        "(forall ((s Songs)) (<= (song_performed s keyboard) (song_performed RhinoRock keyboard)))",
        "(forall ((s Songs)) (<= (song_performed RhinoRock keyboard) (song_performed NightsAllRight keyboard)))",
        "(and (distinct s1 s2) (distinct i1 i2) (not (= (song_performed s1 i1) (song_performed s2 i2))) : (forall ((s1 Songs) (s2 Songs) (i1 Instruments) (i2 Instruments))"
      ],
      "options": [
        "(and (song_performed NightsAllRight guitar) (song_performed QuestionMan keyboard) (song_performed Sammy guitar) (song_performed RhinoRock flute))",
        "(and (song_performed QuestionMan guitar) (song_performed RhinoRock harmonica) (song_performed Sammy keyboard) (song_performed NightsAllRight flute))",
        "(and (song_performed RhinoRock flute) (song_performed QuestionMan keyboard) (song_performed NightsAllRight harmonica) (song_performed Sammy guitar))",
        "(and (song_performed Sammy harmonica) (song_performed NightsAllRight guitar) (song_performed QuestionMan keyboard) (song_performed RhinoRock flute))",
        "(and (song_performed Sammy harmonica) (song_performed RhinoRock guitar) (song_performed QuestionMan flute) (song_performed NightsAllRight keyboard))"
      ],
      "type": "sat",
      "perplexity": [
        1.1166125535964966,
        1.018445611000061
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following could be true?",
      "options": [
        "A) \"Question Man\" immediately follows the song performed on the keyboard.",
        "B) \"Night's All Right\" immediately precedes the song performed on the keyboard.",
        "C) \"Question Man\" immediately precedes the song performed on the guitar.",
        "D) \"Rhino Rock\" immediately precedes the song performed on the harmonica.",
        "E) \"Sammy\" immediately precedes the song performed on the guitar."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Nights_All_Right) (Question_Man) (Rhino_Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard))))",
        "(declare-fun performed_on (Songs Instruments) Bool)",
        "(declare-fun precedes (Songs Songs) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(and (forall ((s Songs)) (not (= (performed_on s flute) true))))",
        "(forall ((s Songs)) (and (not (= (performed_on s keyboard) true)) (not (= (performed_on s flute) true)) (not (= (performed_on s harmonica) true)) (not (= (performed_on s guitar) true))))",
        "(implies (and (= (performed_on Sammy keyboard) true)) (= (performed_on Rhino_Rock harmonica) true))",
        "(implies (and (= (performed_on Question_Man keyboard) true)) (= (performed_on Nights_All_Right flute) true))",
        "(implies (and (= (performed_on Nights_All_Right keyboard) true)) (= (precedes Nights_All_Right Rhino_Rock) true))",
        "(implies (and (= (performed_on Nights_All_Right keyboard) true)) (= (precedes Rhino_Rock Nights_All_Right) true))"
      ],
      "options": [
        "(precedes Question_Man keyboard)",
        "(precedes Nights_All_Right keyboard)",
        "(precedes Question_Man guitar)",
        "(precedes Rhino_Rock harmonica)",
        "(precedes Sammy guitar)"
      ],
      "type": "sat",
      "perplexity": [
        1.1041942834854126,
        1.0173202753067017
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "Which one of the following CANNOT be true of the song performed on the flute?",
      "options": [
        "A) It immediately precedes \"Question Man.\"",
        "B) It immediately follows \"Question Man.\"",
        "C) It immediately precedes \"Rhino Rock.\"",
        "D) It immediately follows \"Night's All Right.\"",
        "E) It immediately follows \"Sammy.\""
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Nights_All_Right) (Question_Man) (Rhino_Rock) (Sammy)))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard)))",
        "(declare-fun performs (Songs Instruments) Bool)",
        "(declare-fun follows (Songs Songs) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((s Songs)) (forall ((i Instruments)) (not (and (performs s i) (exists ((s2 Songs) (i2 Instruments)) (and (= s s2) (not (= i i2)))))))",
        "(forall ((s Songs)) (not (= (performs s flute) true)))",
        "(=> (and (performs Sammy keyboard) (performs Rhino_Rock harmonica)))",
        "(=> (and (performs Question_Man keyboard) (performs Night's_All_Right flute)))",
        "(and (follows Rhino_Rock keyboard) (follows keyboard Night's_All_Right))",
        "(distinct (map (lambda (s) s) (Songs)))",
        "(distinct (map (lambda (i) i) (Instruments)))"
      ],
      "options": [
        "(not (exists ((s Songs) (i Instruments)) (and (performs s i) (follows i s))))",
        "(exists ((s Songs) (i Instruments)) (and (performs s i) (follows s Question_Man)))",
        "(exists ((s Songs) (i Instruments)) (and (performs s i) (follows i Rhino_Rock)))",
        "(exists ((s Songs) (i Instruments)) (and (performs s i) (follows Night's_All_Right i)))",
        "(exists ((s Songs) (i Instruments)) (and (performs s i) (follows Sammy i)))",
        "type",
        "unsat"
      ],
      "perplexity": [
        1.1362265348434448,
        1.096447467803955
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "If \"Rhino Rock\" is the second song performed at the festival, then which one of the following could be true?",
      "options": [
        "A) The first song performed is performed on the keyboard.",
        "B) The third song performed is performed on the guitar.",
        "C) The third song performed is performed on the flute.",
        "D) \"Night's All Right\" is performed on the guitar.",
        "E) \"Rhino Rock\" is performed on the guitar."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((NightsAllRight) (QuestionMan) (RhinoRock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard)))",
        "(declare-fun song-order (Songs) Int)",
        "(declare-fun instrument (Songs Instruments) Bool)",
        "(declare-fun first-song-instrument (Instruments) Bool)"
      ],
      "constraints": [
        "(forall ((s Songs)) (<= (song-order s) 4) (>= (song-order s) 1))",
        "(forall ((s1 Songs) (s2 Songs)) (distinct (song-order s1) (song-order s2)))",
        "(not (first-song-instrument flute))",
        "(=> (instrument Sammy keyboard) (instrument RhinoRock harmonica))",
        "(=> (instrument QuestionMan keyboard) (instrument NightsAllRight flute))",
        "(and (distinct (song-order RhinoRock) 1) (distinct (song-order RhinoRock) 4) (distinct (song-order NightsAllRight) 1) (distinct (song-order NightsAllRight) 4))"
      ],
      "options": [
        "(and (song-order RhinoRock 2) (first-song-instrument keyboard))",
        "(and (song-order RhinoRock 2) (instrument (song-order 3) guitar))",
        "(and (song-order RhinoRock 2) (instrument (song-order 3) flute))",
        "(and (song-order RhinoRock 2) (instrument NightsAllRight guitar))",
        "(and (song-order RhinoRock 2) (instrument RhinoRock guitar))"
      ],
      "type": "sat",
      "perplexity": [
        1.1606510877609253,
        1.013257622718811
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
      "question": "If \"Question Man\" is the third song performed at the festival, then each of the following could be true EXCEPT:",
      "options": [
        "A) \"Question Man\" is performed on the guitar.",
        "B) \"Question Man\" is performed on the keyboard.",
        "C) \"Rhino Rock\" is performed on the guitar.",
        "D) \"Sammy\" is performed on the guitar.",
        "E) \"Sammy\" is performed on the harmonica."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Songs 0)) (((Night's_All_Right) (Question_Man) (Rhino_Rock) (Sammy))))",
        "(declare-datatypes ((Instruments 0)) (((flute) (guitar) (harmonica) (keyboard)))",
        "(declare-fun is_performed_on (Songs Instruments) Bool)",
        "(declare-fun song_order (Int) Songs)",
        "(declare-fun instrument_order (Int) Instruments)"
      ],
      "constraints": [
        "(forall ((s Songs)) (exists ((i Instruments)) (is_performed_on s i)))",
        "(distinct (mapcar song_order [1 2 3 4]))",
        "(distinct (mapcar instrument_order [1 2 3 4]))",
        "(not (is_performed_on (song_order 1) flute))",
        "(and (is_performed_on (song_order 2) keyboard) (is_performed_on (song_order 3) harmonica))",
        "(and (is_performed_on (song_order 2) keyboard) (is_performed_on (song_order 1) flute))",
        "(and (is_performed_on (song_order 3) keyboard) (is_performed_on (song_order 2) Rhino_Rock) (is_performed_on (song_order 1) Night's_All_Right))"
      ],
      "options": [
        "(and (is_performed_on (song_order 3) guitar) (not (is_performed_on (song_order 2) guitar)))",
        "(and (is_performed_on (song_order 3) keyboard) (not (is_performed_on (song_order 2) keyboard)))",
        "(and (is_performed_on (song_order 3) guitar) (is_performed_on (song_order 2) guitar)))",
        "(and (is_performed_on (song_order 3) guitar) (is_performed_on (song_order 2) keyboard)))",
        "(and (is_performed_on (song_order 3) guitar) (is_performed_on (song_order 2) harmonica))"
      ],
      "type": "sat/unsat",
      "perplexity": [
        1.1306116580963135,
        1.0193989276885986
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "Which one of the following could be a complete and accurate list of the members of the finance committee?",
      "options": [
        "A) Guzman, Hawking, Miyauchi, Wharton",
        "B) Guzman, Lepp, Zhu",
        "C) Hawking, Miyauchi, Zhu",
        "D) Hawking, Upchurch, Wharton, Zhu",
        "E) Miyauchi, Upchurch, Wharton"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Directors 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu)))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives)))",
        "(declare-fun serves-on (Directors Committees) Bool)"
      ],
      "constraints": [
        "(forall ((d Directors)) (or (exists ((c Committees)) (serves-on d c)) (not (exists ((c Committees)) (serves-on d c)))))",
        "(implies (serves-on Guzman finance) (serves-on Hawking incentives))",
        "(implies (serves-on Lepp finance) (and (serves-on Miyauchi incentives) (serves-on Upchurch incentives)))",
        "(not (and (serves-on Wharton finance) (serves-on Zhu finance)))",
        "(not (and (serves-on Upchurch finance) (serves-on Guzman finance)))",
        "(implies (serves-on Zhu finance) (serves-on Hawking finance))"
      ],
      "options": [
        "(and (serves-on Guzman finance) (serves-on Hawking finance) (serves-on Miyauchi finance) (serves-on Wharton finance))",
        "(and (serves-on Guzman finance) (serves-on Lepp finance) (serves-on Zhu finance))",
        "(and (serves-on Hawking finance) (serves-on Miyauchi finance) (serves-on Zhu finance))",
        "(and (serves-on Hawking finance) (serves-on Upchurch finance) (serves-on Wharton finance) (serves-on Zhu finance))",
        "(and (serves-on Miyauchi finance) (serves-on Upchurch finance) (serves-on Wharton finance))"
      ],
      "type": "sat",
      "perplexity": [
        1.0654133558273315,
        1.0131738185882568
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "Which one of the following pairs of board members CANNOT both serve on the incentives committee?",
      "options": [
        "A) Guzman and Hawking",
        "B) Guzman and Wharton",
        "C) Hawking and Wharton",
        "D) Miyauchi and Upchurch",
        "E) Miyauchi and Wharton"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((BoardMembers 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu)))",
        "(declare-datatypes ((Committees 0)) (((Finance) (Incentives)))",
        "(declare-fun serves_on (BoardMembers Committees) Bool)"
      ],
      "constraints": [
        "(forall ((b BoardMembers)) (or (serves_on b Finance) (serves_on b Incentives)))",
        "(=> (serves_on Guzman Finance) (serves_on Hawking Incentives))",
        "(=> (serves_on Lepp Finance) (and (serves_on Miyauchi Incentives) (serves_on Upchurch Incentives)))",
        "(=> (serves_on Zhu Finance) (serves_on Hawking Finance))",
        "(not (= (serves_on Wharton Finance) (serves_on Zhu Finance)))",
        "(not (= (serves_on Upchurch Finance) (serves_on Guzman Finance)))"
      ],
      "options": [
        "(not (and (serves_on Guzman Incentives) (serves_on Hawking Incentives)))",
        "(not (and (serves_on Guzman Incentives) (serves_on Wharton Incentives)))",
        "(not (and (serves_on Hawking Incentives) (serves_on Wharton Incentives)))",
        "(not (and (serves_on Miyauchi Incentives) (serves_on Upchurch Incentives)))",
        "(not (and (serves_on Miyauchi Incentives) (serves_on Wharton Incentives)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0446486473083496,
        1.0167820453643799
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "What is the maximum number of members on the finance committee?",
      "options": [
        "A) two",
        "B) three",
        "C) four",
        "D) five",
        "E) six"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Committees 0)) (((finance) (incentives))))",
        "(declare-datatypes ((Members 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu)))",
        "(declare-fun serves-on (Members Committees) Bool)"
      ],
      "constraints": [
        "(forall ((m Members)) (and (or (serves-on m finance) (serves-on m incentives)) (not (or (serves-on m finance) (serves-on m incentives)))))",
        "(=> (serves-on Guzman finance) (serves-on Hawking incentives))",
        "(=> (serves-on Lepp finance) (and (serves-on Miyauchi incentives) (serves-on Upchurch incentives)))",
        "(not (and (serves-on Wharton finance) (serves-on Zhu finance)))",
        "(not (and (serves-on Upchurch finance) (serves-on Guzman finance)))",
        "(=> (serves-on Zhu finance) (serves-on Hawking finance))"
      ],
      "options": [
        "(exists ((count Int)) (> count 2) (and (<= count 7) (forall ((m Members)) (<= (count (select (filter (lambda (x) (and (serves-on m x) (= x finance))) Members)) count))))",
        "(exists ((count Int)) (> count 3) (and (<= count 7) (forall ((m Members)) (<= (count (select (filter (lambda (x) (and (serves-on m x) (= x finance))) Members)) count))))",
        "(exists ((count Int)) (> count 4) (and (<= count 7) (forall ((m Members)) (<= (count (select (filter (lambda (x) (and (serves-on m x) (= x finance))) Members)) count))))",
        "(exists ((count Int)) (> count 5) (and (<= count 7) (forall ((m Members)) (<= (count (select (filter (lambda (x) (and (serves-on m x) (= x finance))) Members)) count))))"
      ],
      "type": "sat",
      "perplexity": [
        1.0971630811691284,
        1.0143920183181763
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "If Miyauchi and Wharton both serve on the finance committee, then which one of the following could be true?",
      "options": [
        "A) Guzman and Lepp both serve on the finance committee.",
        "B) Guzman and Upchurch both serve on the incentives committee.",
        "C) Hawking and Zhu both serve on the finance committee.",
        "D) Lepp and Upchurch both serve on the incentives committee.",
        "E) Zhu and Upchurch both serve on the finance committee."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((BoardMembers 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu)))",
        "(declare-datatypes ((Committees 0)) (((finance) (incentives)))",
        "(declare-fun onCommittee (BoardMembers Committees) Bool)"
      ],
      "constraints": [
        "(forall ((b BoardMembers)) (or (exists ((c Committees)) (onCommittee b c)) (not (exists ((c Committees)) (onCommittee b c))))",
        "(=> (onCommittee Guzman finance) (onCommittee Hawking incentives))",
        "(=> (onCommittee Lepp finance) (and (onCommittee Miyauchi incentives) (onCommittee Upchurch incentives)))",
        "(=> (distinct (onCommittee Wharton) (onCommittee Zhu)))",
        "(=> (distinct (onCommittee Upchurch) (onCommittee Guzman)))",
        "(=> (onCommittee Zhu finance) (onCommittee Hawking finance))"
      ],
      "options": [
        "(and (onCommittee Miyauchi finance) (onCommittee Wharton finance))",
        "(a) (and (onCommittee Guzman finance) (onCommittee Lepp finance))",
        "(b) (and (onCommittee Guzman incentives) (onCommittee Upchurch incentives))",
        "(c) (and (onCommittee Hawking finance) (onCommittee Zhu finance))",
        "(d) (and (onCommittee Lepp incentives) (onCommittee Upchurch incentives))",
        "(e) (and (onCommittee Zhu finance) (onCommittee Upchurch finance))"
      ],
      "type": "sat",
      "perplexity": [
        1.0981417894363403,
        1.0233112573623657
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
      "question": "If Guzman serves on the incentives committee, then which one of the following must be true?",
      "options": [
        "A) Hawking serves on the finance committee.",
        "B) Lepp serves on the incentives committee.",
        "C) Miyauchi serves on the finance committee.",
        "D) Wharton serves on the incentives committee.",
        "E) Zhu serves on the finance committee."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Committee 0)) (((finance) (incentives))))",
        "(declare-datatypes ((Person 0)) (((Guzman) (Hawking) (Lepp) (Miyauchi) (Upchurch) (Wharton) (Zhu)))",
        "(declare-fun servesOn (Person Committee) Bool)"
      ],
      "constraints": [
        "(forall ((p Person)) (or (exists ((c Committee)) (servesOn p c)) (not (exists ((c Committee)) (servesOn p c)))))",
        "(implies (servesOn Guzman finance) (servesOn Hawking incentives))",
        "(implies (servesOn Lepp finance) (and (servesOn Miyauchi incentives) (servesOn Upchurch incentives)))",
        "(not (and (servesOn Wharton finance) (servesOn Zhu finance)))",
        "(not (and (servesOn Upchurch finance) (servesOn Guzman finance)))",
        "(implies (servesOn Zhu finance) (servesOn Hawking finance))",
        "(implies (servesOn Guzman incentives) ..."
      ],
      "options": [
        "(implies (servesOn Guzman incentives) (servesOn Hawking finance))",
        "(implies (servesOn Guzman incentives) (servesOn Lepp incentives))",
        "(implies (servesOn Guzman incentives) (servesOn Miyauchi finance))",
        "(implies (servesOn Guzman incentives) (servesOn Wharton incentives))",
        "(implies (servesOn Guzman incentives) (servesOn Zhu finance))"
      ],
      "type": "sat",
      "perplexity": [
        1.120114803314209,
        1.0898034572601318
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "Which one of the following could be the order in which four of the people are seated, with no one else seated between them, counting clockwise around the table?",
      "options": [
        "A) George, Peter, Karl, Fiona",
        "B) Harriet, Olivia, Ingrid, Karl",
        "C) Ingrid, Fiona, Peter, Manuel",
        "D) Olivia, Manuel, Karl, George",
        "E) Peter, Harriet, Karl, Fiona"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-const table (Array 8 People))"
      ],
      "constraints": [
        "(and (not (= table 0 Fiona)) (not (= table 1 Fiona)) (not (= table 2 Fiona)) (not (= table 3 Fiona)) (not (= table 4 Fiona)) (not (= table 5 Fiona)) (not (= table 6 Fiona)) (not (= table 7 Fiona)))",
        "(=> (distinct table 0 table 1) (distinct table 1 table 2) (distinct table 2 table 3) (distinct table 3 table 4) (distinct table 4 table 5) (distinct table 5 table 6) (distinct table 6 table 7) (distinct table 7 table 0))"
      ],
      "options": [
        "(and ...)",
        "(and ...)",
        "(and ...)",
        "(and ...)",
        "(and ...)"
      ],
      "type": "sat",
      "perplexity": [
        1.144506573677063,
        1.1046767234802246
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 41,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Harriet and Olivia each sits immediately next to George, then which one of the following could be the two people each of whom sits immediately next to Peter?",
      "options": [
        "A) Fiona and Karl",
        "B) Fiona and Olivia",
        "C) Harriet and Ingrid",
        "D) Harriet and Karl",
        "E) Karl and Manuel"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Position 0)) (((P1) (P2) (P3) (P4) (P5) (P6) (P7) (P8))))",
        "(declare-fun sits_next_to (People People) Bool)",
        "(declare-fun sits_opposite (People People) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(and (sits_opposite Fiona George))",
        "(not (sits_next_to Harriet Fiona))",
        "(not (sits_next_to Harriet Karl))",
        "(sits_next_to Ingrid Olivia)",
        "(implies (and (sits_next_to Harriet George) (sits_next_to Olivia George)) (and (not (sits_next_to Fiona Peter)) (not (sits_next_to Karl Peter))))"
      ],
      "options": [
        "(or (and (sits_next_to Fiona Peter) (sits_next_to Karl Peter))",
        "(and (sits_next_to Fiona Peter) (sits_next_to Olivia Peter))",
        "(and (sits_next_to Harriet Peter) (sits_next_to Ingrid Peter))",
        "(and (sits_next_to Harriet Peter) (sits_next_to Karl Peter))",
        "(and (sits_next_to Karl Peter) (sits_next_to Manuel Peter))"
      ],
      "type": "sat",
      "perplexity": [
        1.2318474054336548,
        1.0563770532608032
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If George does not sit immediately next to Harriet, then which one of the following could be the two people each of whom sits immediately next to Manuel?",
      "options": [
        "A) Fiona and Harriet",
        "B) Fiona and Peter",
        "C) George and Karl",
        "D) George and Peter",
        "E) Harriet and Peter"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Position 0)) (((1) (2) (3) (4) (5) (6) (7) (8)))",
        "(declare-fun sits-at (People Position) Bool)"
      ],
      "constraints": [
        "(forall ((p People)) (exists ((pos Position)) (sits-at p pos)))",
        "(forall ((p1 People) (p2 People) (pos1 Position) (pos2 Position)) (=> (and (= pos1 1) (= pos2 8)) (distinct p1 p2)))",
        "(and (sits-at Fiona 1) (sits-at George 8))",
        "(and (not (sits-at Harriet 1)) (not (sits-at Harriet 8)) (not (sits-at Harriet (mod (+ 1 1) 8))) (not (sits-at Harriet (mod (+ 1 2) 8))))",
        "(and (sits-at Ingrid (mod (+ 1 3) 8)) (sits-at Olivia (mod (+ 1 4) 8)) (sits-at Ingrid (mod (+ 1 3) 8)) )"
      ],
      "options": [
        "(forall ((p1 People) (p2 People)) (=> (and (sits-at p1 (mod (+ 1 1) 8)) (sits-at p2 (mod (+ 1 2) 8)) (not (= p1 Manuel)) (not (= p2 Manuel)) (distinct p1 p2)) (and (not (sits-at George (mod (+ 1 1) 8))) (not (sits-at Harriet (mod (+ 1 1) 8))))",
        "(forall ((p1 People) (p2 People)) (=> (and (sits-at p1 (mod (+ 1 1) 8)) (sits-at p2 (mod (+ 1 2) 8)) (not (= p1 Manuel)) (not (= p2 Manuel)) (distinct p1 p2)) (and (not (sits-at George (mod (+ 1 1) 8))) (not (sits-at Harriet (mod (+ 1 1) 8))))",
        "(forall ((p1 People) (p2 People)) (=> (and (sits-at p1 (mod (+ 1 1) 8)) (sits-at p2 (mod (+ 1 2) 8)) (not (= p1 Manuel)) (not (= p2 Manuel)) (distinct p1 p2)) (and (not (sits-at George (mod (+ 1 1) 8))) (not (sits-at Harriet (mod (+ 1 1) 8))))",
        "(forall ((p1 People) (p2 People)) (=> (and (sits-at p1 (mod (+ 1 1) 8)) (sits-at p2 (mod (+ 1 2) 8)) (not (= p1 Manuel)) (not (= p2 Manuel)) (distinct p1 p2)) (and (not (sits-at George (mod (+ 1 1) 8))) (not (sits-at Harriet (mod (+ 1 1) 8))))",
        "(forall ((p1 People) (p2 People)) (=> (and (sits-at p1 (mod (+ 1 1) 8)) (sits-at p2 (mod (+ 1 2) 8)) (not (= p1 Manuel)) (not (= p2 Manuel)) (distinct p1 p2)) (and (not (sits-at George (mod (+ 1 1) 8))) (not (sits-at Harriet (mod (+ 1 1) 8))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1425647735595703,
        1.0133657455444336
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Manuel sits immediately next to Olivia, then which one of the following people must sit immediately next to Fiona?",
      "options": [
        "A) Harriet",
        "B) Ingrid",
        "C) Karl",
        "D) Manuel",
        "E) Peter"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-fun sits_next_to (People People) Bool)",
        "(declare-fun sits_opposite (People People) Bool)"
      ],
      "constraints": [
        "(sits_opposite Fiona George)",
        "(not (sits_next_to Harriet Fiona))",
        "(not (sits_next_to Harriet Karl))",
        "(sits_next_to Ingrid Olivia)"
      ],
      "options": [
        "(implies (and (sits_next_to Manuel Olivia) (sits_next_to Fiona X)) (= X A))",
        "(implies (and (sits_next_to Manuel Olivia) (sits_next_to Fiona X)) (= X B))",
        "(implies (and (sits_next_to Manuel Olivia) (sits_next_to Fiona X)) (= X C))",
        "(implies (and (sits_next_to Manuel Olivia) (sits_next_to Fiona X)) (= X D))",
        "(implies (and (sits_next_to Manuel Olivia) (sits_next_to Fiona X)) (= X E))"
      ],
      "type": "sat",
      "perplexity": [
        1.1451102495193481,
        1.0152374505996704
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "What is the minimum possible number of people sitting between Ingrid and Manuel, counting clockwise from Ingrid around the table?",
      "options": [
        "A) zero",
        "B) one",
        "C) two",
        "D) three",
        "E) four"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-sort CircularTable  ())",
        "(declare-fun sits-opposite (People People) Bool)",
        "(declare-fun sits-adjacent (People People) Bool)",
        "(declare-fun clockwise (People People) Bool)",
        "(declare-fun distance (People People) Nat)"
      ],
      "constraints": [
        "(and (sits-opposite Fiona George) (sits-opposite George Fiona))",
        "(and (not (sits-adjacent Harriet Fiona)) (not (sits-adjacent Harriet Karl)))",
        "(and (sits-adjacent Ingrid Olivia) (clockwise Ingrid Olivia))"
      ],
      "options": [
        "(<= (distance Ingrid Manuel) 0)",
        "(<= (distance Ingrid Manuel) 1)",
        "(<= (distance Ingrid Manuel) 2)",
        "(<= (distance Ingrid Manuel) 3)",
        "(<= (distance Ingrid Manuel) 4)"
      ],
      "type": "sat",
      "perplexity": [
        1.3416671752929688,
        1.0237098932266235
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Karl sits directly across from Ingrid, then each of the following people could sit immediately next to Olivia EXCEPT:",
      "options": [
        "A) Fiona",
        "B) George",
        "C) Harriet",
        "D) Manuel",
        "E) Peter"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Positions 0)) (((Pos1) (Pos2) (Pos3) (Pos4) (Pos5) (Pos6) (Pos7) (Pos8))))",
        "(declare-fun sits-opposite (People People) Bool)",
        "(declare-fun sits-next (People People) Bool)",
        "(declare-fun sits-clockwise (People People) Bool)"
      ],
      "constraints": [
        "(assert (sits-opposite Fiona George))",
        "(assert (not (sits-next Harriet Fiona)))",
        "(assert (not (sits-next Harriet Karl)))",
        "(assert (sits-next Ingrid Olivia))",
        "(assert (sits-opposite Karl Ingrid))"
      ],
      "options": [
        "(assert (sits-next Fiona Olivia))",
        "(assert (sits-next George Olivia))",
        "(assert (sits-next Harriet Olivia))",
        "(assert (sits-next Manuel Olivia))",
        "(assert (sits-next Peter Olivia))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1841363906860352,
        1.0567750930786133
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
      "question": "If Karl sits directly across from Harriet, then what is the minimum possible number of people sitting between George and Karl, counting clockwise from George to Karl?",
      "options": [
        "A) zero",
        "B) one",
        "C) two",
        "D) three",
        "E) four"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((People 0)) (((Fiona) (George) (Harriet) (Ingrid) (Karl) (Manuel) (Olivia) (Peter))))",
        "(declare-datatypes ((Directions 0)) (((clockwise)))",
        "(declare-fun sits-opposite (People People) Bool)",
        "(declare-fun sits-next-to (People People) Bool)",
        "(declare-fun distance-between (People People) Int)"
      ],
      "constraints": [
        "(assert (sits-opposite Fiona George))",
        "(forall ((p People)) (not (sits-next-to Harriet p)) (distinct Harriet p))",
        "(and (sits-next-to Ingrid Olivia) (sits-next-to Ingrid Olivia (clockwise)))",
        "(assert (sits-opposite Karl Harriet))"
      ],
      "options": [
        "(define-fun distance_zero (People) Bool (ite (= (distance-between George Karl) 0) true false))",
        "(define-fun distance_one (People) Bool (ite (= (distance-between George Karl) 1) true false))",
        "(define-fun distance_two (People) Bool (ite (= (distance-between George Karl) 2) true false))",
        "(define-fun distance_three (People) Bool (ite (= (distance-between George Karl) 3) true false))",
        "(define-fun distance_four (People) Bool (ite (= (distance-between George Karl) 4) true false))",
        "(define-fun distance_five (People) Bool (ite (= (distance-between George Karl) 5) true false))",
        "(define-fun distance_six (People) Bool (ite (= (distance-between George Karl) 6) true false))"
      ],
      "type": "sat",
      "perplexity": [
        1.4457632303237915,
        1.028765082359314
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 47,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following is an acceptable set of appointments of candidates to courts?",
      "options": [
        "A) appellate: Hamadi, Ortiz trial: Jefferson, Kurtz, Li, McDonnell, Perkins",
        "B) appellate: Hamadi, Li, Perkins trial: Jefferson, Kurtz, McDonnell, Ortiz",
        "C) appellate: Kurtz, Li, Perkins trial: Hamadi, Jefferson, McDonnell, Ortiz",
        "D) appellate: Li, McDonnell, Ortiz trial: Hamadi, Jefferson, Kurtz, Perkins",
        "E) appellate: Li, Perkins trial: Hamadi, Jefferson, Kurtz, McDonnell, Ortiz"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))))",
        "(declare-datatypes ((Courts 0)) (((appellate) (trial)))",
        "(declare-fun assigned_to (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(and (assigned_to Li appellate) (not (assigned_to Kurtz appellate)))",
        "(forall ((c Candidates)) (<= (count_true (map (lambda (c) (assigned_to c appellate)) Candidates)) 3))",
        "(forall ((c Candidates)) (<= (count_true (map (lambda (c) (assigned_to c trial)) Candidates)) 6))",
        "(not (and (assigned_to Hamadi appellate) (assigned_to Perkins appellate)))"
      ],
      "options": [
        "(and (assigned_to Hamadi appellate) (assigned_to Ortiz appellate) (assigned_to Jefferson trial) (assigned_to Kurtz trial) (assigned_to Li trial) (assigned_to McDonnell trial) (assigned_to Perkins trial))",
        "(and (assigned_to Hamadi appellate) (assigned_to Li appellate) (assigned_to Perkins appellate) (assigned_to Jefferson trial) (assigned_to Kurtz trial) (assigned_to McDonnell trial) (assigned_to Ortiz trial))",
        "(and (assigned_to Kurtz appellate) (assigned_to Li appellate) (assigned_to Perkins appellate) (assigned_to Hamadi trial) (assigned_to Jefferson trial) (assigned_to McDonnell trial) (assigned_to Ortiz trial))",
        "(and (assigned_to Li appellate) (assigned_to McDonnell appellate) (assigned_to Ortiz appellate) (assigned_to Hamadi trial) (assigned_to Jefferson trial) (assigned_to Kurtz trial) (assigned_to Perkins trial))",
        "(and (assigned_to Li appellate) (assigned_to Perkins appellate) (assigned_to Hamadi trial) (assigned_to Jefferson trial) (assigned_to Kurtz trial) (assigned_to McDonnell trial) (assigned_to Ortiz trial))"
      ],
      "type": "sat",
      "perplexity": [
        1.0707826614379883,
        1.0109199285507202
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 48,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Hamadi and McDonnell are both appointed to the appellate court.",
        "B) McDonnell and Ortiz are both appointed to the appellate court.",
        "C) Ortiz and Perkins are both appointed to the appellate court.",
        "D) Hamadi and Jefferson are both appointed to the trial court.",
        "E) Ortiz and Perkins are both appointed to the trial court."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Courts 0)) (((appellate) (trial))))",
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins)))",
        "(declare-fun assigned_to (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(and (assigned_to Li appellate)  (not (assigned_to Kurtz appellate)))",
        "(not (and (assigned_to Hamadi trial) (assigned_to Perkins trial)))",
        "(forall ((c Candidates) (c2 Candidates) (c3 Candidates) ) (=> (and (assigned_to c appellate) (assigned_to c2 appellate) (assigned_to c3 appellate)) (= (count (filter (lambda (x) (and (assigned_to x appellate))) Candidates)) 3))",
        "(forall ((c Candidates) (c2 Candidates) (c3 Candidates) (c4 Candidates) (c5 Candidates) (c6 Candidates) (c7 Candidates)) (=> (and (assigned_to c trial) (assigned_to c2 trial) (assigned_to c3 trial) (assigned_to c4 trial) (assigned_to c5 trial) (assigned_to c6 trial) (assigned_to c7 trial)) (= (count (filter (lambda (x) (and (assigned_to x trial))) Candidates)) 6)))"
      ],
      "options": [
        "(not (and (assigned_to Hamadi appellate) (assigned_to McDonnell appellate)))",
        "(not (and (assigned_to McDonnell appellate) (assigned_to Ortiz appellate)))",
        "(not (and (assigned_to Ortiz appellate) (assigned_to Perkins appellate)))",
        "(not (and (assigned_to Hamadi trial) (assigned_to Jefferson trial)))",
        "(not (and (assigned_to Ortiz trial) (assigned_to Perkins trial)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0945121049880981,
        1.0124526023864746
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 49,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Jefferson and McDonnell are both appointed to the appellate court.",
        "B) Jefferson and McDonnell are both appointed to the trial court.",
        "C) McDonnell and Ortiz are both appointed to the trial court.",
        "D) McDonnell and Perkins are both appointed to the appellate court.",
        "E) McDonnell and Perkins are both appointed to the trial court."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins)))",
        "(declare-datatypes ((Courts 0)) (((appellate_court) (trial_court)))",
        "(declare-fun appointed (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(and (appointed Li appellate_court))",
        "(and (appointed Kurtz trial_court))",
        "(not (and (appointed Hamadi _) (appointed Perkins _)))",
        "(forall ((c Candidates)) (forall ((ct Courts)) (ite (and (appointed c ct) (distinct c _)) (not (and (appointed c ct) (distinct c _))))))"
      ],
      "options": [
        "(and (appointed Jefferson appellate_court) (appointed McDonnell appellate_court))",
        "(and (appointed Jefferson trial_court) (appointed McDonnell trial_court))",
        "(and (appointed McDonnell trial_court) (appointed Ortiz trial_court))",
        "(and (appointed McDonnell appellate_court) (appointed Perkins appellate_court))",
        "(and (appointed McDonnell trial_court) (appointed Perkins trial_court))"
      ],
      "type": "unsat",
      "perplexity": [
        1.148159384727478,
        1.0208406448364258
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 50,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "If Ortiz is appointed to the appellate court, which one of the following must be true?",
      "options": [
        "A) Hamadi is appointed to the appellate court.",
        "B) Jefferson is appointed to the appellate court.",
        "C) Jefferson is appointed to the trial court.",
        "D) Perkins is appointed to the appellate court.",
        "E) Perkins is appointed to the trial court."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Courts 0)) (((Appellate) (Trial))))",
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins))) )",
        "(declare-fun assignedTo (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(and (assignedTo Li Appellate) (assignedTo Kurtz Trial))",
        "(forall ((c Candidates) (c2 Candidates) (c3 Courts)) (=> (and (= c c2) (assignedTo c c3)) (not (= c3 (distinct c2)))))"
      ],
      "options": [
        "(=> (assignedTo Ortiz Appellate) (assignedTo Hamadi Appellate))",
        "(=> (assignedTo Ortiz Appellate) (assignedTo Jefferson Appellate))",
        "(=> (assignedTo Ortiz Appellate) (assignedTo Jefferson Trial))",
        "(=> (assignedTo Ortiz Appellate) (assignedTo Perkins Appellate))",
        "(=> (assignedTo Ortiz Appellate) (assignedTo Perkins Trial))"
      ],
      "type": "sat",
      "perplexity": [
        1.1645865440368652,
        1.1275721788406372
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 51,
    "nl_problem": {
      "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
      "question": "Which one of the following, if substituted for the condition that Hamadi cannot be appointed to the same court as Perkins, would have the same effect on the appointments of the seven candidates?",
      "options": [
        "A) Hamadi and Perkins cannot both be appointed to the appellate court.",
        "B) If Hamadi is not appointed to the trial court, then Perkins must be.",
        "C) If Perkins is appointed to the same court as Jefferson, then Hamadi cannot be.",
        "D) If Hamadi is appointed to the same court as Li, then Perkins must be appointed to the same court as Kurtz.",
        "E) No three of Hamadi, Kurtz, Li, and Perkins can be appointed to the same court as each other."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Candidates 0)) (((Hamadi) (Jefferson) (Kurtz) (Li) (McDonnell) (Ortiz) (Perkins)))",
        "(declare-datatypes ((Courts 0)) (((Appellate) (Trial)))",
        "(declare-fun appointed (Candidates Courts) Bool)"
      ],
      "constraints": [
        "(forall ((c Candidates)) (exists ((ct Courts)) (and (appointed c ct) (not (exists ((c2 Candidates) (ct2 Courts)) (and (neq c c2) (and (appointed c2 ct2) (eq ct ct2)))))))",
        "(forall ((ct Courts)) (<= (count (filter (lambda (c) (and (appointed c ct) (neq c Kurtz))) Candidates) 3))",
        "(forall ((ct Courts)) (<= (count (filter (lambda (c) (and (appointed c ct) (neq c Li))) Candidates) 6))",
        "(and (appointed Li Appellate) (appointed Kurtz Trial))",
        "(not (and (appointed Hamadi ct) (appointed Perkins ct)))"
      ],
      "options": [
        "(forall ((ct Courts)) (not (and (appointed Hamadi ct) (appointed Perkins ct))))",
        "(forall ((ct Courts)) (not (and (not (appointed Hamadi Trial)) (appointed Perkins ct))))",
        "(forall ((ct Courts)) (not (and (appointed Perkins ct) (appointed Jefferson ct) (appointed Hamadi ct))))",
        "(forall ((ct Courts)) (not (and (appointed Hamadi ct) (appointed Li ct) (appointed Perkins ct) (appointed Kurtz ct))))",
        "(forall ((ct Courts)) (<= (count (filter (lambda (c) (and (appointed c ct) (in (list Hamadi Kurtz Li Perkins)))) Candidates) 2))"
      ],
      "type": "unsat",
      "perplexity": [
        1.182044267654419,
        1.0234624147415161
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 52,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "Which one of the following could be an accurate list of the members in the order in which they dive from the plane, from first to last?",
      "options": [
        "A) Larue, Trevino, Ohba, Zacny, Pei, Weiss",
        "B) Larue, Trevino, Pei, Zacny, Weiss, Ohba",
        "C) Weiss, Ohba, Trevino, Zacny, Pei, Larue",
        "D) Trevino, Weiss, Pei, Ohba, Zacny, Larue",
        "E) Trevino, Weiss, Zacny, Larue, Pei, Ohba"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Skydivers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Order 0)) ((first) (second) (third) (fourth) (fifth) (sixth))",
        "(declare-fun dives (Skydivers Order) Bool)"
      ],
      "constraints": [
        "(forall ((d Skydivers)) (exists ((o Order)) (and (dives d o) (distinct o (first)))))",
        "(and (<= (find (dives Trevino o) (dives Weiss o)) (length o)) (>= (find (dives Trevino o) (dives Weiss o)) 1))",
        "(or (and (= (first o) Larue)) (and (= (last o) Larue)))",
        "(not (and (= (last o) Weiss)))",
        "(not (and (= (last o) Zacny)))",
        "(and (>= (find (dives Pei o) (find (dives Ohba o))) 1) (>= (find (dives Pei o) (find (dives Larue o))) 1) (not (= (find (dives Pei o) (find (dives Ohba o))) (find (dives Pei o) (find (dives Larue o)))))"
      ],
      "options": [
        "(and (dives Larue first) (dives Trevino second) (dives Ohba third) (dives Zacny fourth) (dives Pei fifth) (dives Weiss sixth))",
        "(and (dives Larue first) (dives Trevino second) (dives Pei third) (dives Zacny fourth) (dives Weiss fifth) (dives Ohba sixth))",
        "(and (dives Weiss first) (dives Ohba second) (dives Trevino third) (dives Zacny fourth) (dives Pei fifth) (dives Larue sixth))",
        "(and (dives Trevino first) (dives Weiss second) (dives Pei third) (dives Ohba fourth) (dives Zacny fifth) (dives Larue sixth))",
        "(and (dives Trevino first) (dives Weiss second) (dives Zacny third) (dives Larue fourth) (dives Pei fifth) (dives Ohba sixth))"
      ],
      "type": "sat",
      "perplexity": [
        1.1085782051086426,
        1.0146461725234985
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 53,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "Which one of the following must be true?",
      "options": [
        "A) At least two of the members dive from the plane after Larue.",
        "B) At least two of the members dive from the plane after Ohba.",
        "C) At least two of the members dive from the plane after Pei.",
        "D) At least two of the members dive from the plane after Trevino.",
        "E) At least two of the members dive from the plane after Weiss."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Skydivers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Dives 0)) (((first) (second) (third) (fourth) (fifth) (sixth)))",
        "(declare-fun dives ((Skydivers) (Dives)) Bool)"
      ],
      "constraints": [
        "(forall ((s Skydivers)) (exists ((p Dives)) (dives s p)))",
        "(forall ((p Dives) (s1 Skydivers) (s2 Skydivers)) (=> (and (dives s1 p) (dives s2 p)) (= s1 s2)))",
        "(exists ((p Dives)) (and (dives Trevino p) (<= p (Dives Weiss))))",
        "(or (= (dives Larue first) true) (= (dives Larue sixth) true))",
        "(not (and (= (dives Weiss sixth) true)) (not (and (= (dives Zacny sixth) true))))",
        "(exists ((p Dives)) (and (dives Pei p) (>= p (Dives (distinct Ohba Larue))))"
      ],
      "options": [
        "(forall ((s1 Skydivers) (s2 Skydivers) (p Dives)) (=> (and (dives s1 p) (dives s2 p) (>= p (Dives (distinct Larue))) (> (count (filter (lambda ((d Dives)) (and (dives s1 d) (dives s2 d))) (Dives))) 1)))",
        "(forall ((s1 Skydivers) (s2 Skydivers) (p Dives)) (=> (and (dives s1 p) (dives s2 p) (>= p (Dives (distinct Ohba))) (> (count (filter (lambda ((d Dives)) (and (dives s1 d) (dives s2 d))) (Dives))) 1)))",
        "(forall ((s1 Skydivers) (s2 Skydivers) (p Dives)) (=> (and (dives s1 p) (dives s2 p) (>= p (Dives (distinct Pei))) (> (count (filter (lambda ((d Dives)) (and (dives s1 d) (dives s2 d))) (Dives))) 1)))",
        "(forall ((s1 Skydivers) (s2 Skydivers) (p Dives)) (=> (and (dives s1 p) (dives s2 p) (>= p (Dives (distinct Trevino))) (> (count (filter (lambda ((d Dives)) (and (dives s1 d) (dives s2 d))) (Dives))) 1)))",
        "(forall ((s1 Skydivers) (s2 Skydivers) (p Dives)) (=> (and (dives s1 p) (dives s2 p) (>= p (Dives (distinct Weiss))) (> (count (filter (lambda ((d Dives)) (and (dives s1 d) (dives s2 d))) (Dives))) 1)))"
      ],
      "type": "sat",
      "perplexity": [
        1.110195517539978,
        1.0121067762374878
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 54,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Larue dives from the plane last, then each of the following could be true EXCEPT:",
      "options": [
        "A) Trevino dives from the plane fourth.",
        "B) Weiss dives from the plane fourth.",
        "C) Ohba dives from the plane fifth.",
        "D) Pei dives from the plane fifth.",
        "E) Zacny dives from the plane fifth."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Team 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Order 0)) ((1) (2) (3) (4) (5) (6)) )",
        "(declare-fun dives (Team Order) Bool)"
      ],
      "constraints": [
        "(forall ((t Team)) (exists ((o Order)) (dives t o)))",
        "(forall ((t1 Team) (t2 Team)) (=> (not (= t1 t2)) (not (and (dives t1 1) (dives t2 1)))))",
        "(=> (dives Trevino _) (exists ((o Order)) (> o (find (>= (find (and (dives Weiss o) (not (= o 1))) 1) (find (and (dives Trevino o) (not (= o 1))) 1)))) )",
        "(implies (dives Larue 1) (or (forall ((o Order)) (not (dives Larue o))) (forall ((o Order)) (not (dives Larue o))))))",
        "(forall ((o Order)) (not (and (dives Weiss o) (= o 6))))",
        "(forall ((o Order)) (=> (dives Pei o) (or (exists ((o1 Order)) (< o1 o) (and (dives Ohba o1) (not (dives Larue o1)))) (exists ((o2 Order)) (< o2 o) (and (dives Larue o2) (not (dives Ohba o2))))))) "
      ],
      "options": [
        "(and (dives Larue 6) (not (and (dives Trevino 4) (implies (dives Weiss 4) (or (dives Ohba 5) (dives Pei 5) (dives Zacny 5))))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.278914451599121,
        1.0225398540496826
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 55,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Zacny dives from the plane immediately after Weiss, then which one of the following must be false?",
      "options": [
        "A) Larue dives from the plane first.",
        "B) Trevino dives from the plane third.",
        "C) Zacny dives from the plane third.",
        "D) Pei dives from the plane fourth.",
        "E) Zacny dives from the plane fourth."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Skydivers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Positions 0)) (((first) (second) (third) (fourth) (fifth) (sixth)))",
        "(declare-fun dives-before (Skydivers Skydivers) Bool)"
      ],
      "constraints": [
        "(forall ((d1 Skydivers) (d2 Skydivers)) (implies (not (= d1 d2)) (or (dives-before d1 d2) (dives-before d2 d1))))",
        "(implies (dives-before Trevino Weiss) true)",
        "(or (dives-before Larue _) (dives-before _ Larue))",
        "(implies (not (dives-before Weiss _)) (not (dives-before Zacny _)))",
        "(forall ((d1 Skydivers)) (implies (and (not (= d1 Ohba)) (not (= d1 Larue))) (or (dives-before d1 Ohba) (dives-before d1 Larue) (not (dives-before Pei d1)))))"
      ],
      "options": [
        "(not (implies (dives-before Zacny Weiss) (dives-before Larue _)))",
        "(not (implies (dives-before Zacny Weiss) (dives-before _ Trevino 3)))",
        "(not (implies (dives-before Zacny Weiss) (dives-before _ Zacny 3)))",
        "(not (implies (dives-before Zacny Weiss) (dives-before _ Pei 4)))",
        "(not (implies (dives-before Zacny Weiss) (dives-before _ Zacny 4)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.2021654844284058,
        1.0194337368011475
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 56,
    "nl_problem": {
      "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
      "question": "If Trevino dives from the plane immediately after Larue, then each of the following could be true EXCEPT:",
      "options": [
        "A) Ohba dives from the plane third.",
        "B) Weiss dives from the plane third.",
        "C) Zacny dives from the plane third.",
        "D) Pei dives from the plane fourth.",
        "E) Weiss dives from the plane fourth."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Divers 0)) (((Larue) (Ohba) (Pei) (Trevino) (Weiss) (Zacny))))",
        "(declare-datatypes ((Order 0)) ((first) (second) (third) (fourth) (fifth) (sixth)) )",
        "(declare-fun dives (Divers Order) Bool)"
      ],
      "constraints": [
        "(forall ((d Divers)) (exists ((o Order)) (and (dives d o) (distinct o (first))))",
        "(implies (dives Trevino first) (not (dives Weiss first)))",
        "(or (dives Larue first) (dives Larue sixth))",
        "(not (dives Weiss sixth))",
        "(not (dives Zacny sixth))",
        "(exists ((o Order)) (and (dives Pei o) (>= o (if (dives Ohba first) second else third))))"
      ],
      "options": [
        "(if (and (dives Trevino second) (dives Larue first)) ...)",
        ""
      ],
      "type": "unsat",
      "perplexity": [
        1.3577826023101807,
        1.227131724357605
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 57,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following could be the order in which the vehicles are serviced, from Monday through Saturday?",
      "options": [
        "A) the hatchback, the pickup, the sedan, the limousine, the van, the roadster",
        "B) the pickup, the sedan, the van, the roadster, the hatchback, the limousine",
        "C) the pickup, the van, the sedan, the roadster, the limousine, the hatchback",
        "D) the van, the roadster, the pickup, the hatchback, the sedan, the limousine",
        "E) the van, the sedan, the pickup, the roadster, the hatchback, the limousine"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(set-logic QF_UF)",
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van)))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((d Days)) (and (not (= d Monday)) (served hatchback d)))",
        0,
        "(exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served roadster d1) (served van d2) (<= d1 d2)))",
        "(or (and (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served pickup d1) (served van d2))) (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served pickup d1) (served sedan d2))))))",
        "(or (and (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served sedan d1) (served pickup d2)))) (and (exists ((d1 Days) (d2 Days)) (and (not (= d1 d2)) (served sedan d1) (served limousine d2))))))",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))",
        "(assert (forall ((v Vehicles) (d Days)) (or (not (served v d)) (not (served v (distinct d))))))",
        "(assert (not (= (served hatchback Monday))))",
        "(assert (not (served roadster (distinct Monday))))",
        "(assert (not (served van (distinct Monday))))",
        "(assert (not (served van (distinct Monday))))"
      ],
      "options": [
        "(not (exists ((m Meals)) (= (eats Vladimir m) fish)))",
        "(not (exists ((m Meals)) (= (eats Vladimir m) hot_cakes)))",
        "(not (exists ((m Meals)) (= (eats Vladimir m) macaroni)))",
        "(not (exists ((m Meals)) (= (eats Vladimir m) omelet)))",
        "(not (exists ((m Meals)) (= (eats Vladimir m) poached_eggs)))"
      ],
      "type": "sat",
      "perplexity": [
        1.393155813217163,
        1.0756638050079346
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 58,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following CANNOT be the vehicle serviced on Thursday?",
      "options": [
        "A) the hatchback",
        "B) the limousine",
        "C) the pickup",
        "D) the sedan",
        "E) the van"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((d Days)) (> (ite (= (serviced hatchback d) true) d (ite (= (serviced limousine d) true) d (ite (= (serviced pickup d) true) d (ite (= (serviced roadster d) true) d (ite (= (serviced sedan d) true) d (ite (= (serviced van d) true) d 0)))) 1)))",
        "(and (ite (= (serviced roadster Tuesday) true) (> (serviced van Monday) true) (< (serviced hatchback Wednesday) true))",
        "(ite (= (serviced roadster Wednesday) true) (> (serviced van Tuesday) true) (< (serviced hatchback Thursday) true))",
        "(ite (= (serviced roadster Thursday) true) (> (serviced van Wednesday) true) (< (serviced hatchback Friday) true))",
        "(ite (= (serviced roadster Friday) true) (> (serviced van Thursday) true) (< (serviced hatchback Saturday) true))",
        "(ite (= (serviced roadster Saturday) true) (> (serviced van Friday) true) (< (serviced hatchback Monday) true)))",
        "(or (and (= (ite (= (serviced pickup Tuesday) true) true) (= (ite (= (serviced van Wednesday) true) true))",
        "(and (= (ite (= (serviced pickup Wednesday) true) true) (= (ite (= (serviced van Tuesday) true) true)))",
        "(and (= (ite (= (serviced pickup Thursday) true) true) (= (ite (= (serviced van Wednesday) true) true))",
        "(and (= (ite (= (serviced pickup Friday) true) true) (= (ite (= (serviced van Thursday) true) true))",
        "(and (= (ite (= (serviced pickup Saturday) true) true) (= (ite (= (serviced van Friday) true) true)))))))",
        "(and (= (ite (= (serviced pickup Tuesday) true) true) (= (ite (= (serviced sedan Wednesday) true) true))",
        "(and (= (ite (= (serviced pickup Wednesday) true) true) (= (ite (= (serviced sedan Tuesday) true) true))",
        "(and (= (ite (= (serviced pickup Thursday) true) true) (= (ite (= (serviced sedan Wednesday) true) true))",
        "(and (= (ite (= (serviced pickup Friday) true) true) (= (ite (= (serviced sedan Thursday) true) true))",
        "(and (= (ite (= (serviced pickup Saturday) true) true) (= (ite (= (serviced sedan Friday) true) true))))))) ): Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both.",
        "(or (and (< (ite (= (serviced sedan Monday) true) true) (ite (= (serviced pickup Tuesday) true) true))",
        "(and (< (ite (= (serviced sedan Monday) true) true) (ite (= (serviced limousine Wednesday) true) true)))",
        "(and (< (ite (= (serviced sedan Tuesday) true) true) (ite (= (serviced pickup Wednesday) true) true))",
        "(and (< (ite (= (serviced sedan Tuesday) true) true) (ite (= (serviced limousine Wednesday) true) true)))",
        "(and (< (ite (= (serviced sedan Wednesday) true) true) (ite (= (serviced pickup Thursday) true) true))",
        "(and (< (ite (= (serviced sedan Wednesday) true) true) (ite (= (serviced limousine Thursday) true) true)))",
        "(and (< (ite (= (serviced sedan Thursday) true) true) (ite (= (serviced pickup Friday) true) true))",
        "(and (< (ite (= (serviced sedan Thursday) true) true) (ite (= (serviced limousine Friday) true) true)))",
        "(and (< (ite (= (serviced sedan Friday) true) true) (ite (= (serviced pickup Saturday) true) true))",
        "(and (< (ite (= (serviced sedan Friday) true) true) (ite (= (serviced limousine Saturday) true) true)))) )"
      ],
      "options": [
        "(not (ite (= (serviced hatchback Thursday) true) true))",
        "(not (ite (= (serviced limousine Thursday) true) true))",
        "(not (ite (= (serviced pickup Thursday) true) true))",
        "(not (ite (= (serviced sedan Thursday) true) true))",
        "(not (ite (= (serviced van Thursday) true) true))"
      ],
      "type": "sat",
      "perplexity": [
        1.086872935295105,
        1.0090932846069336
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 59,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If neither the pickup nor the limousine is serviced on Monday, then which one of the following must be true?",
      "options": [
        "A) The hatchback and the limousine are serviced on consecutive days.",
        "B) The hatchback and the sedan are serviced on consecutive days.",
        "C) The van is serviced on Monday.",
        "D) The limousine is serviced on Saturday.",
        "E) The pickup is serviced on Saturday."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((Hatchback) (Limousine) (Pickup) (Roadster) (Sedan) (Van)))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((d Days)) (>= d 2) (and (forall ((v Vehicles)) (implied (serviced v d) (not (serviced v 1)))))",
        "(and (not (serviced Roadster 1)) (not (serviced Van 6)) (not (serviced Roadster 6)) (not (serviced Hatchback 1)) (not (serviced Hatchback 2)))",
        "(or (and (not (serviced Pickup 1)) (serviced Van 2)) (and (not (serviced Sedan 1)) (serviced Pickup 2)))",
        "(or (and (serviced Sedan 1) (not (serviced Pickup 2))) (and (serviced Sedan 1) (not (serviced Limousine 2))))",
        "(not (serviced Pickup 1)) (not (serviced Limousine 1))"
      ],
      "options": [
        "(implies (not (serviced Pickup 1)) (and (serviced Hatchback 2) (serviced Limousine 2)))",
        "(implies (not (serviced Pickup 1)) (and (serviced Hatchback 2) (serviced Sedan 2)))",
        "(implies (not (serviced Pickup 1)) (serviced Van 1))",
        "(implies (not (serviced Pickup 1)) (serviced Limousine 6))",
        "(implies (not (serviced Pickup 1)) (serviced Pickup 6))"
      ],
      "type": "sat",
      "perplexity": [
        1.1336842775344849,
        1.0135939121246338
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 60,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the limousine is not serviced on Saturday, then each of the following could be true EXCEPT:",
      "options": [
        "A) The limousine is serviced on Monday.",
        "B) The roadster is serviced on Tuesday.",
        "C) The hatchback is serviced on Wednesday.",
        "D) The roadster is serviced on Wednesday.",
        "E) The sedan is serviced on Wednesday."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((monday) (tuesday) (wednesday) (thursday) (friday) (saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((d Days)) (>= d (find ((= (serviced hatchback d) true)))  (find ((= (serviced limousine d) true))) ))",
        "(and (exists ((d Days)) (>= d (find ((= (serviced van d) true)))  (find ((= (serviced roadster d) true)))) (exists ((d Days)) (< d (find ((= (serviced roadster d) true)))  (find ((= (serviced hatchback d) true))))) )",
        "(or (and (exists ((d Days)) (<= (find ((= (serviced pickup d) true)))  (find ((= (serviced van d) true))) )) (exists ((d Days)) (<= (find ((= (serviced van d) true)))  (find ((= (serviced pickup d) true))))) (and (exists ((d Days)) (<= (find ((= (serviced pickup d) true)))  (find ((= (serviced sedan d) true))) )) (exists ((d Days)) (<= (find ((= (serviced sedan d) true)))  (find ((= (serviced pickup d) true)))))))",
        "(or (exists ((d Days)) (<= (find ((= (serviced sedan d) true)))  (find ((= (serviced pickup d) true)))) (exists ((d Days)) (<= (find ((= (serviced sedan d) true)))  (find ((= (serviced limousine d) true)))) )",
        "(not (= (serviced limousine saturday) true))"
      ],
      "options": [
        "(exists ((d Days)) (= (serviced limousine d) true))"
      ],
      "type": "unsat",
      "perplexity": [
        1.2307393550872803,
        1.0852386951446533
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 61,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the sedan is serviced earlier in the week than the pickup, then which one of the following could be true?",
      "options": [
        "A) The limousine is serviced on Wednesday.",
        "B) The sedan is serviced on Wednesday.",
        "C) The van is serviced on Wednesday.",
        "D) The hatchback is serviced on Friday.",
        "E) The limousine is serviced on Saturday."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-fun serviced (Days Vehicles) Bool)"
      ],
      "constraints": [
        "(exists ((d Days)) (and (>= d 2) (serviced d hatchback)))",
        "(and (>= (get_day roadster) (get_day van)) (< (get_day roadster) (get_day hatchback)))",
        "(or (and (<= (get_day pickup) (get_day van) 1) (= (+ 1 (get_day pickup) (get_day van)) (get_day pickup))) (and (<= (get_day pickup) (get_day sedan) 1) (= (+ 1 (get_day pickup) (get_day sedan)) (get_day pickup))))",
        "(and (<= (get_day sedan) (get_day pickup) 1) (<= (get_day sedan) (get_day limousine) 1))"
      ],
      "options": [
        "(and (<= (get_day sedan) (get_day pickup) 1) (serviced Wednesday limousine))"
      ],
      "type": "sat",
      "perplexity": [
        1.207175374031067,
        1.0165622234344482
      ],
      "answer": "A",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 62,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "If the limousine is serviced on Saturday, then which one of the following must be true?",
      "options": [
        "A) The pickup is serviced earlier in the week than the roadster.",
        "B) The pickup is serviced earlier in the week than the sedan.",
        "C) The sedan is serviced earlier in the week than the roadster.",
        "D) The hatchback and the limousine are serviced on consecutive days.",
        "E) The roadster and the hatchback are serviced on consecutive days."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((monday) (tuesday) (wednesday) (thursday) (friday) (saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(exists ((d Days)) (>= (+ (to-int (and (not (= d monday) ) (serviced hatchback d))) (to-int (and (not (= d monday) ) (serviced limousine d)))) 1))",
        "(and (>= (find (car (list (find (car (list (find (car (list (serviced roadster tuesday) ) ) ) ) ) ) ) ) ) (find (car (list (find (car (list (serviced van monday) ) ) ) ) ) ) ) (<= (find (car (list (find (car (list (serviced roadster friday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced hatchback tuesday) ) ) ) ) ) ) ) )",
        "(or (= (and (serviced pickup monday) (serviced van tuesday)) (and (serviced pickup tuesday) (serviced van wednesday))) (= (and (serviced pickup monday) (serviced sedan tuesday)) (and (serviced pickup tuesday) (serviced sedan wednesday))))",
        "(and (<= (find (car (list (find (car (list (serviced sedan monday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced pickup tuesday) ) ) ) ) ) ) ) (<= (find (car (list (find (car (list (serviced sedan monday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced limousine wednesday) ) ) ) ) ) ) )"
      ],
      "options": [
        "(and (serviced limousine saturday) (>= (find (car (list (find (car (list (serviced pickup monday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced roadster tuesday) ) ) ) ) ) ) ) )",
        "(and (serviced limousine saturday) (>= (find (car (list (find (car (list (serviced pickup monday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced sedan tuesday) ) ) ) ) ) ) ) )",
        "(and (serviced limousine saturday) (>= (find (car (list (find (car (list (serviced sedan monday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced roadster tuesday) ) ) ) ) ) ) ) )",
        "(and (serviced limousine saturday) (<= (find (car (list (find (car (list (serviced hatchback monday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced limousine saturday) ) ) ) ) ) ) ) )",
        "(and (serviced limousine saturday) (<= (find (car (list (find (car (list (serviced roadster friday) ) ) ) ) ) ) (find (car (list (find (car (list (serviced hatchback tuesday) ) ) ) ) ) ) ) )"
      ],
      "type": "sat",
      "perplexity": [
        1.1114656925201416,
        1.0131213665008545
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 63,
    "nl_problem": {
      "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
      "question": "Which one of the following could be the list of the vehicles serviced on Tuesday, Wednesday, and Friday, listed in that order?",
      "options": [
        "A) the pickup, the hatchback, the limousine",
        "B) the pickup, the roadster, the hatchback",
        "C) the sedan, the limousine, the hatchback",
        "D) the van, the limousine, the hatchback",
        "E) the van, the roadster, the limousine"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Vehicles 0)) (((hatchback) (limousine) (pickup) (roadster) (sedan) (van))))",
        "(declare-datatypes ((Days 0)) (((Monday) (Tuesday) (Wednesday) (Thursday) (Friday) (Saturday))))",
        "(declare-fun serviced (Vehicles Days) Bool)"
      ],
      "constraints": [
        "(not (forall ((v Vehicles)) (<= (if serviced v Monday then 1 else 0) (if serviced v Tuesday then 1 else 0) (if serviced v Wednesday then 1 else 0) (if serviced v Thursday then 1 else 0) (if serviced v Friday then 1 else 0) (if serviced v Saturday then 1 else 0))))",
        "(and (<= (if serviced roadster Tuesday then 1 else 0), (if serviced van Tuesday then 1 else 0)) (>= (if serviced roadster Monday then 1 else 0), (if serviced hatchback Monday then 1 else 0)))",
        "(or (and (<= (if serviced pickup Tuesday then 1 else 0), (if serviced van Wednesday then 1 else 0)) (<= (if serviced van Tuesday then 1 else 0), (if serviced pickup Wednesday then 1 else 0))) (and (<= (if serviced pickup Tuesday then 1 else 0), (if serviced sedan Wednesday then 1 else 0)) (<= (if serviced sedan Tuesday then 1 else 0), (if serviced pickup Wednesday then 1 else 0))))",
        "(or (<= (if serviced sedan Monday then 1 else 0), (if serviced pickup Monday then 1 else 0)) (<= (if serviced sedan Monday then 1 else 0), (if serviced limousine Monday then 1 else 0)))"
      ],
      "options": [
        "(and (if serviced pickup Tuesday then 1 else 0) (if serviced hatchback Wednesday then 1 else 0) (if serviced limousine Friday then 1 else 0))",
        "(and (if serviced pickup Tuesday then 1 else 0) (if serviced roadster Wednesday then 1 else 0) (if serviced hatchback Friday then 1 else 0))",
        "(and (if serviced sedan Tuesday then 1 else 0) (if serviced limousine Wednesday then 1 else 0) (if serviced hatchback Friday then 1 else 0))",
        "(and (if serviced van Tuesday then 1 else 0) (if serviced limousine Wednesday then 1 else 0) (if serviced hatchback Friday then 1 else 0))",
        "(and (if serviced van Tuesday then 1 else 0) (if serviced roadster Wednesday then 1 else 0) (if serviced limousine Friday then 1 else 0))"
      ],
      "type": "sat",
      "perplexity": [
        1.074478030204773,
        1.009320616722107
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 64,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If there are exactly two white balls, then which one of the following boxes could contain a green ball?",
      "options": [
        "A) box 1",
        "B) box 3",
        "C) box 4",
        "D) box 5",
        "E) box 6"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun ball-color (Boxes) Colors)"
      ],
      "constraints": [
        "> (count_if ((lambda (b) (= (ball-color b) red)) Boxes)) (count_if ((lambda (b) (= (ball-color b) white)) Boxes))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (= (ball-color b1) green) (< b1 b2) (= (ball-color b2) red)))",
        "(exists ((b1 Boxes) (b2 Boxes)) (and (= (ball-color b1) white) (< b1 b2) (= (ball-color b2) green)))",
        "(and (forall ((b Boxes)) (or (= (ball-color b) green) (= (ball-color b) red) (= (ball-color b) white))) (forall ((b Boxes) (c Boxes)) (distinct b c)) (and (= (count_if ((lambda (b) (= (ball-color b) red)) Boxes)) (count_if ((lambda (b) (= (ball-color b) red)) Boxes))) (= (count_if ((lambda (b) (= (ball-color b) green)) Boxes)) (count_if ((lambda (b) (= (ball-color b) green)) Boxes))) (= (count_if ((lambda (b) (= (ball-color b) white)) Boxes)) (count_if ((lambda (b) (= (ball-color b) white)) Boxes))))",
        "(count_if ((lambda (b) (= (ball-color b) white)) Boxes) = 2)"
      ],
      "options": [
        "(exists ((b Boxes)) (and (= (ball-color b) green) (< b 7)))",
        "(exists ((b Boxes)) (and (= (ball-color b) green) (= b 1)))",
        "(exists ((b Boxes)) (and (= (ball-color b) green) (= b 3)))",
        "(exists ((b Boxes)) (and (= (ball-color b) green) (= b 4)))",
        "(exists ((b Boxes)) (and (= (ball-color b) green) (= b 5)))",
        "(exists ((b Boxes)) (and (= (ball-color b) green) (= b 6)))"
      ],
      "type": "sat",
      "perplexity": [
        1.2078702449798584,
        1.0087405443191528
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 65,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If there are green balls in boxes 5 and 6, then which one of the following could be true?",
      "options": [
        "A) There are red balls in boxes 1 and 4.",
        "B) There are red balls in boxes 2 and 4.",
        "C) There is a white ball in box 1.",
        "D) There is a white ball in box 2.",
        "E) There is a white ball in box 3."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white)))",
        "(declare-fun color-of (Boxes) Colors)"
      ],
      "constraints": [
        "> (count_red_balls) (count_white_balls)",
        "(exists ((b Boxes)) (and (= (color-of b) green) (<= b 5) (forall ((c Boxes) (>= c b)) (/= (color-of c) red))))",
        "(exists ((b Boxes)) (and (= (color-of b) white) (< b 6) (and (color-of (successor b)) green)))"
      ],
      "options": [
        "(and (color-of 1 red) (color-of 4 red))",
        "(and (color-of 2 red) (color-of 4 red))",
        "(color-of 1 white)",
        "(color-of 2 white)",
        "(color-of 3 white)"
      ],
      "type": "sat",
      "perplexity": [
        1.251231074333191,
        1.0272141695022583
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 66,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "The ball in which one of the following boxes must be the same color as at least one of the other balls?",
      "options": [
        "A) box 2",
        "B) box 3",
        "C) box 4",
        "D) box 5",
        "E) box 6"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white)))",
        "(declare-fun color-of (Boxes) Colors)"
      ],
      "constraints": [
        "(> (count_red) (count_white))",
        "(define-fun count_red () Int (forall ((b Boxes)) (ite (= (color-of b) red) 1 0)))",
        "(define-fun count_white () Int (forall ((b Boxes)) (ite (= (color-of b) white) 1 0)))",
        "(exists ((b Boxes)) (and (= (color-of b) green) (forall ((c Boxes) (< c b)) (not (= (color-of c) red))))",
        "(exists ((b Boxes) (c Boxes)) (and (= (color-of b) white) (= b (- c 1)) (= (color-of c) green)))",
        "options",
        [
          "(exists ((b Boxes)) (and (= b 2) (not (distinct (color-of b) (color-of 1) (color-of 3) (color-of 4) (color-of 5) (color-of 6))))",
          "(exists ((b Boxes)) (and (= b 3) (not (distinct (color-of b) (color-of 1) (color-of 2) (color-of 4) (color-of 5) (color-of 6))))",
          "(exists ((b Boxes)) (and (= b 4) (not (distinct (color-of b) (color-of 1) (color-of 2) (color-of 3) (color-of 5) (color-of 6))))",
          "(exists ((b Boxes)) (and (= b 5) (not (distinct (color-of b) (color-of 1) (color-of 2) (color-of 3) (color-of 4) (color-of 6))))",
          "(exists ((b Boxes)) (and (= b 6) (not (distinct (color-of b) (color-of 1) (color-of 2) (color-of 3) (color-of 4) (color-of 5))))"
        ],
        "type",
        "sat"
      ],
      "perplexity": [
        1.1029173135757446,
        1.1037002801895142
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    }
  },
  {
    "id": 67,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "Which one of the following must be true?",
      "options": [
        "A) There is a green ball in a box that is lower than box 4.",
        "B) There is a green ball in a box that is higher than box 4.",
        "C) There is a red ball in a box that is lower than box 4.",
        "D) There is a red ball in a box that is higher than box 4.",
        "E) There is a white ball in a box that is lower than box 4."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white)))",
        "(declare-fun ball-color (Boxes) Colors)"
      ],
      "constraints": [
        "(> (count (filter (lambda (x) (= (ball-color x) red)) Boxes)) (count (filter (lambda (x) (= (ball-color x) white)) Boxes)))",
        "(exists ((g Boxes)) (and (>= g 1) (< g (find ((lambda (x) (= (ball-color x) red)) Boxes))) (= (ball-color g) green)))",
        "(exists ((w Boxes)) (exists ((g Boxes)) (and (>= w 1) (< w g) (= (ball-color w) white) (= (ball-color g) green))))"
      ],
      "options": [
        "(>= (find ((lambda (x) (= (ball-color x) green)) Boxes)) 4)",
        "(<= (find ((lambda (x) (= (ball-color x) green)) Boxes)) 3)",
        "(>= (find ((lambda (x) (= (ball-color x) red)) Boxes)) 4)",
        "(<= (find ((lambda (x) (= (ball-color x) red)) Boxes)) 3)",
        "(>= (find ((lambda (x) (= (ball-color x) white)) Boxes)) 4)",
        "(<= (find ((lambda (x) (= (ball-color x) white)) Boxes)) 3)"
      ],
      "type": "sat",
      "perplexity": [
        1.1216211318969727,
        1.0094178915023804
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 68,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If there are red balls in boxes 2 and 3, then which one of the following could be true?",
      "options": [
        "A) There is a red ball in box 1.",
        "B) There is a white ball in box 1.",
        "C) There is a green ball in box 4.",
        "D) There is a red ball in box 5.",
        "E) There is a white ball in box 6."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white))))",
        "(declare-fun color (Boxes) Colors)"
      ],
      "constraints": [
        "> (count ((color b) (distinct b Boxes) (and (not (= color b green)) (eq color b red)))) (count ((color b) (distinct b Boxes) (eq color b white)))",
        "(exists ((b Boxes)) (and (eq color b green) (< b (find (lambda (b) (or (eq (color b) red) (eq (color b) green)))))))",
        "(exists ((b Boxes) (c Boxes)) (and (eq color c white) (< c b) (eq (color b) green)))",
        "(forall ((b Boxes)) (or (= (color b) green) (= (color b) red) (= (color b) white)))"
      ],
      "options": [
        "(and (= (color 1) red) (exists ((b Boxes)) (and (eq b 2) (eq (color b) red))))",
        "(and (= (color 1) white) (exists ((b Boxes)) (and (eq b 2) (eq (color b) red))))",
        "(and (= (color 4) green) (exists ((b Boxes)) (and (eq b 2) (eq (color b) red))))",
        "(and (= (color 5) red) (exists ((b Boxes)) (and (eq b 2) (eq (color b) red))))",
        "(and (= (color 6) white) (exists ((b Boxes)) (and (eq b 2) (eq (color b) red))))"
      ],
      "type": "sat",
      "perplexity": [
        1.191133737564087,
        1.0177298784255981
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 69,
    "nl_problem": {
      "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
      "question": "If boxes 2, 3, and 4 all contain balls that are the same color as each other, then which one of the following must be true?",
      "options": [
        "A) Exactly two of the boxes contain a green ball.",
        "B) Exactly three of the boxes contain a green ball.",
        "C) Exactly three of the boxes contain a red ball.",
        "D) Exactly one of the boxes contains a white ball.",
        "E) Exactly two of the boxes contain a white ball."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Boxes 0)) (((1) (2) (3) (4) (5) (6))))",
        "(declare-datatypes ((Colors 0)) (((green) (red) (white)))",
        "(declare-fun color-of (Boxes) Colors)"
      ],
      "constraints": [
        "(>= (count ((color-of 1) (red))) (count ((color-of 1) (white))))",
        "(exists ((b Box)) (and (>= b 1) (<= b 6) (equal (color-of b) green) (forall ((c Box)) (and (>= c 1) (<= c 6) (<> c b) (>= b c) (not (equal (color-of c) green))))))",
        "(exists ((b Box)) (and (>= b 1) (<= b 6) (equal (color-of b) white) (exists ((c Box)) (and (>= c 1) (<= c 6) (<> c b) (>= b c) (<> c (b + 1)) (equal (color-of c) green)))))"
      ],
      "options": [
        "(forall ((b Box)) (and (>= b 2) (<= b 4) (not (distinct (color-of b) (color-of (b + 1)))))",
        "(count ((color-of b) green)) = 2)",
        "(count ((color-of b) green)) = 3)",
        "(count ((color-of b) red)) = 3)",
        "(count ((color-of b) white)) = 1)",
        "(count ((color-of b) white)) = 2)"
      ],
      "type": "sat",
      "perplexity": [
        1.1965806484222412,
        1.0150693655014038
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 70,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "Which one of the following could be the order, from first to last, in which the students perform?",
      "options": [
        "A) Ginny, Fernando, Hakim, Kevin, Juanita",
        "B) Ginny, Juanita, Kevin, Hakim, Fernando",
        "C) Ginny, Kevin, Hakim, Juanita, Fernando",
        "D) Kevin, Ginny, Juanita, Fernando, Hakim",
        "E) Kevin, Juanita, Fernando, Hakim, Ginny"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Order 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun performs (Students Order) Bool)"
      ],
      "constraints": [
        "(forall ((s Students)) (and (exists ((o Order)) (= (performs s o) true)) (forall ((o1 Order) (o2 Order)) (=> (/= o1 o2) (not (= (performs s o1) (performs s o2))))))",
        "(implies (performs Ginny 1) (not (performs Fernando 1)))",
        "(implies (performs Kevin 1) (not (performs Hakim 1)))",
        "(implies (performs Kevin 1) (not (performs Juanita 1)))",
        "(implies (performs Hakim 1) (or (and (performs Fernando 2) (not (performs Fernando 3))) (and (performs Fernando 2) (not (performs Fernando 3))))"
      ],
      "options": [
        "(forall ((s Students)) (and (performs s 1) (implies (performs s 2) (not (performs Fernando 1))) (implies (performs s 3) (not (performs Fernando 1))) (implies (performs s 4) (not (performs Fernando 1))) (implies (performs s 5) (not (performs Fernando 1)))))",
        "(forall ((s Students)) (and (performs s 1) (implies (performs s 2) (not (performs Fernando 1))) (implies (performs s 3) (not (performs Fernando 1))) (implies (performs s 4) (not (performs Fernando 1))) (implies (performs s 5) (not (performs Fernando 1)))))",
        "(forall ((s Students)) (and (performs s 1) (implies (performs s 2) (not (performs Fernando 1))) (implies (performs s 3) (not (performs Fernando 1))) (implies (performs s 4) (not (performs Fernando 1))) (implies (performs s 5) (not (performs Fernando 1)))))",
        "(forall ((s Students)) (and (performs s 1) (implies (performs s 2) (not (performs Fernando 1))) (implies (performs s 3) (not (performs Fernando 1))) (implies (performs s 4) (not (performs Fernando 1))) (implies (performs s 5) (not (performs Fernando 1)))))",
        "(forall ((s Students)) (and (performs s 1) (implies (performs s 2) (not (performs Fernando 1))) (implies (performs s 3) (not (performs Fernando 1))) (implies (performs s 4) (not (performs Fernando 1))) (implies (performs s 5) (not (performs Fernando 1)))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1904689073562622,
        1.0128315687179565
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 71,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "If Juanita performs earlier than Ginny, then which one of the following could be true?",
      "options": [
        "A) Fernando performs fourth.",
        "B) Ginny performs second.",
        "C) Hakim performs third.",
        "D) Juanita performs third.",
        "E) Kevin performs second."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Orders 0)) ((1) (2) (3) (4) (5)))",
        "(declare-fun performs (Students Orders) Bool)"
      ],
      "constraints": [
        "(=> (performs Ginny 1) (performs Fernando > 1))",
        "(=> (performs Kevin 1) (performs Hakim > 1) (performs Juanita > 1))",
        "(or (= (performs Hakim 2) (performs Hakim 3)) (= (performs Fernando 1) (performs Fernando 3)))"
      ],
      "options": [
        "(=> (performs Juanita 1) (performs Fernando 4))",
        "(=> (performs Juanita 1) (performs Ginny 2))",
        "(=> (performs Juanita 1) (performs Hakim 3))",
        "(=> (performs Juanita 1) (performs Fernando 3))",
        "(=> (performs Juanita 1) (performs Kevin 2))"
      ],
      "type": "sat",
      "perplexity": [
        1.2172410488128662,
        1.0199178457260132
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 72,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Fernando performs immediately before Juanita.",
        "B) Ginny performs immediately before Hakim.",
        "C) Hakim performs immediately before Ginny.",
        "D) Juanita performs immediately before Ginny.",
        "E) Kevin performs immediately before Hakim."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Orders 0)) (((1) (2) (3) (4) (5)))",
        "(declare-fun performs (Students Orders) Bool)"
      ],
      "constraints": [
        "(=> (performs Ginny 1) (performs Fernando >1))",
        "(=> (performs Kevin 1) (and (> (performs Hakim 1) 1) (> (performs Juanita 1) 1)))",
        "(or (and (= (performs Hakim 1) (performs Fernando 2)))(and (= (performs Fernando 1) (performs Hakim 2))))"
      ],
      "options": [
        "(not (exists ((o Orders)) (and (performs Fernando o) (performs Juanita (o + 1)))))",
        "(not (exists ((o Orders)) (and (performs Ginny o) (performs Hakim (o + 1)))))",
        "(not (exists ((o Orders)) (and (performs Hakim o) (performs Ginny (o + 1)))))",
        "(not (exists ((o Orders)) (and (performs Juanita o) (performs Ginny (o + 1)))))",
        "(not (exists ((o Orders)) (and (performs Kevin o) (performs Hakim (o + 1)))))",
        "type"
      ],
      "type": "sat",
      "perplexity": [
        1.168761134147644,
        1.1024900674819946
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 73,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "The order in which the students perform is fully determined if which one of the following is true?",
      "options": [
        "A) Fernando performs immediately before Hakim.",
        "B) Ginny performs immediately before Fernando.",
        "C) Hakim performs immediately before Juanita.",
        "D) Juanita performs immediately before Hakim.",
        "E) Kevin performs immediately before Fernando."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Positions 0)) (((1) (2) (3) (4) (5)))",
        "(declare-fun performs (Students Positions) Bool)"
      ],
      "constraints": [
        "(forall ((s Students) (p Positions)) (<= (performs s p) 1))",
        "(implies (performs Ginny p1) (performs Fernando p2) (<= p1 p2))",
        "(implies (performs Kevin p1) (and (>= p1 1) (<= p1 4)) (>= p1 (p2 + 1)) (p3 > p2)) (and (p3 < p4)))",
        "(or (and (performs Hakim p1) (performs Fernando p2) (= p1 (p2 - 1))) (and (performs Hakim p1) (performs Fernando p2) (= p2 (p1 + 1))))"
      ],
      "options": [
        "(and (performs Fernando p1) (performs Hakim p2) (= p1 (p2 - 1)))",
        "(and (performs Ginny p1) (performs Fernando p2) (= p1 (p2 - 1)))",
        "(and (performs Hakim p1) (performs Juanita p2) (= p1 (p2 - 1)))",
        "(and (performs Juanita p1) (performs Hakim p2) (= p1 (p2 - 1)))",
        "(and (performs Kevin p1) (performs Fernando p2) (= p1 (p2 - 1)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1983801126480103,
        1.0815883874893188
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 74,
    "nl_problem": {
      "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
      "question": "How many of the students are there any one of whom could perform fourth?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Fernando) (Ginny) (Hakim) (Juanita) (Kevin))))",
        "(declare-datatypes ((Positions 0)) (((1) (2) (3) (4) (5))))",
        "(declare-fun performs (Students Positions) Bool)"
      ],
      "constraints": [
        "(=> (performs Ginny 1) (performs Fernando 2))",
        "(=> (performs Kevin 1) (or (>= (position Hakim) 2) (> (position Juanita) 2)))",
        "(or (= (position Hakim) 2) (= (position Hakim) 3) (= (position Hakim) (position Fernando) - 1) (= (position Hakim) (position Fernando) + 1))"
      ],
      "options": [
        "(exists ((p Positions)) (and (not (or (performs Fernando p) (performs Ginny p) (performs Kevin p) (performs Hakim p) (performs Juanita p))))"
      ],
      "type": "sat",
      "perplexity": [
        1.19239342212677,
        1.0231412649154663
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 75,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "Which one of the following could be the order of the presentations, from first to sixth?",
      "options": [
        "A) stenciling, origami, needlework, textile making, pottery, woodworking",
        "B) stenciling, origami, pottery, woodworking, needlework, textile making",
        "C) stenciling, origami, textile making, woodworking, needlework, pottery",
        "D) textile making, origami, stenciling, woodworking, needlework, pottery",
        "E) textile making, stenciling, woodworking, needlework, pottery, origami"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Teachers 0)) (((Jiang) (Kudrow) (Lanning))))",
        "(declare-datatypes ((Subjects 0)) (((needlework) (origami) (pottery) (stenciling) (textile_making) (woodworking)))",
        "(declare-fun presents (Teachers Subjects) Bool)"
      ],
      "constraints": [
        "(forall ((t Teachers) (s Subjects)) (<= (count_if (and (distinct (Teachers) (distinct (Subjects)) (presents t s))) 1))",
        "(and (presents Jiang needlework) (presents Jiang origami))",
        "(and (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making))",
        "(presents Lanning woodworking)",
        "(forall ((s1 Subjects) (s2 Subjects)) (=> (distinct s1 s2) (not (and (presents Kudrow s1) (presents Kudrow s2))))",
        "(forall ((s1 Subjects) (s2 Subjects)) (=> (distinct s1 s2) (and (present s1 stenciling) (present s2 origami))))",
        "(forall ((s1 Subjects) (s2 Subjects)) (=> (distinct s1 s2) (and (present s1 textile_making) (present s2 woodworking))))"
      ],
      "options": [
        "(and (presents Jiang (first_subject)) (presents Kudrow (second_subject)) (presents Lanning (third_subject)) (presents Jiang (fourth_subject)) (presents Kudrow (fifth_subject)) (presents Lanning (sixth_subject)))",
        "(and (presents Jiang (first_subject)) (presents Kudrow (second_subject)) (presents Lanning (third_subject)) (presents Jiang (fourth_subject)) (presents Kudrow (fifth_subject)) (presents Lanning (sixth_subject)))",
        "(and (presents Jiang (first_subject)) (presents Kudrow (second_subject)) (presents Lanning (third_subject)) (presents Jiang (fourth_subject)) (presents Kudrow (fifth_subject)) (presents Lanning (sixth_subject)))",
        "(and (presents Jiang (first_subject)) (presents Kudrow (second_subject)) (presents Lanning (third_subject)) (presents Jiang (fourth_subject)) (presents Kudrow (fifth_subject)) (presents Lanning (sixth_subject)))",
        "(and (presents Jiang (first_subject)) (presents Kudrow (second_subject)) (presents Lanning (third_subject)) (presents Jiang (fourth_subject)) (presents Kudrow (fifth_subject)) (presents Lanning (sixth_subject)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1086503267288208,
        1.0116710662841797
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 76,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "If textile making is presented fifth, which one of the following could be true?",
      "options": [
        "A) Needlework is presented sixth.",
        "B) Pottery is presented fourth.",
        "C) Stenciling is presented second.",
        "D) Stenciling is presented third.",
        "E) Woodworking is presented second."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Teachers 0)) (((Jiang) (Kudrow) (Lanning))))",
        "(declare-datatypes ((Subjects 0)) (((needlework) (origami) (pottery) (stenciling) (textile_making) (woodworking)))",
        "(declare-fun presents (Teachers Subjects) Bool)"
      ],
      "constraints": [
        "(forall ((t Teachers) (s Subjects)) (<= (count (filter ((lambda (x) (and (= (arg0 x) t) (= (arg1 x) s))) ((range 1 7)))) 1))",
        "(and (presents Jiang needlework) (presents Jiang origami))",
        "(and (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making))",
        "(presents Lanning woodworking)",
        "(forall ((t Teachers) (s Subjects)) (not (= t Kudrow) (implies (and (presents t s) (presentes Kudrow (next s))) (next t))))",
        "(=> (presentes Kudrow stenciling) (presentes Jiang origami))",
        "(=> (presentes Kudrow textile_making) (presentes Lanning woodworking))",
        "(=> (presents Kudrow textile_making) (= (arg1 (find ((lambda (x) (= (arg1 x) textile_making))) (map (lambda (x) (list (arg0 x) (arg1 x))) ((range 1 7) (list needlework origami pottery stenciling textile_making woodworking)))) 5)))"
      ],
      "options": [
        "(and (presents Jiang needlework) (= (arg1 (find ((lambda (x) (= (arg1 x) needlework))) (map (lambda (x) (list (arg0 x) (arg1 x))) ((range 1 7) (list needlework origami pottery stenciling textile_making woodworking)))) 6)))",
        "(and (presents Kudrow pottery) (= (arg1 (find ((lambda (x) (= (arg1 x) pottery))) (map (lambda (x) (list (arg0 x) (arg1 x))) ((range 1 7) (list needlework origami pottery stenciling textile_making woodworking)))) 4)))",
        "(and (presents Kudrow stenciling) (= (arg1 (find ((lambda (x) (= (arg1 x) stenciling))) (map (lambda (x) (list (arg0 x) (arg1 x))) ((range 1 7) (list needlework origami pottery stenciling textile_making woodworking)))) 2)))",
        "(and (presents Kudrow stenciling) (= (arg1 (find ((lambda (x) (= (arg1 x) stenciling))) (map (lambda (x) (list (arg0 x) (arg1 x))) ((range 1 7) (list needlework origami pottery stenciling textile_making woodworking)))) 3)))",
        "(and (presents Lanning woodworking) (= (arg1 (find ((lambda (x) (= (arg1 x) woodworking))) (map (lambda (x) (list (arg0 x) (arg1 x))) ((range 1 7) (list needlework origami pottery stenciling textile_making woodworking)))) 2)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1344624757766724,
        1.012223720550537
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 77,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "If needlework is presented first, which one of the following could be true?",
      "options": [
        "A) Origami is presented sixth.",
        "B) Pottery is presented second.",
        "C) Stenciling is presented third.",
        "D) Textile making is presented fifth.",
        "E) Woodworking is presented third."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Teachers 0)) (((Jiang) (Kudrow) (Lanning))))",
        "(declare-datatypes ((Subjects 0)) (((needlework) (origami) (pottery) (stenciling) (textile_making) (woodworking)))",
        "(declare-fun presents (Teachers Subjects) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(and",
        " (forall ((t Teachers))",
        "  (forall ((s Subjects))",
        "    (or (not (presents t s)) (not (presents (distinct t Teachers) s))))",
        " )",
        "(forall ((s Subjects)) (exists ((t Teachers)) (presents t s)))",
        "(not (and (presents Kudrow (distinct Subjects) (presents Kudrow (distinct Subjects))))",
        "(not (and (presents (distinct Teachers) stenciling) (presents (distinct Teachers) origami))",
        "(not (and (presents (distinct Teachers) textile_making) (presents (distinct Teachers) woodworking)))",
        "(presents Jiang needlework)",
        "(presents Jiang origami)",
        "(presents Kudrow pottery)",
        "(presents Kudrow stenciling)",
        "(presents Kudrow textile_making)",
        "(presents Lanning woodworking)",
        ")",
        "  ",
        "options"
      ],
      "options": [
        "(presents Jiang origami 6)",
        "(presents Kudrow pottery 2)",
        "(presents Kudrow stenciling 3)",
        "(presents Kudrow textile_making 5)",
        "(presents Lanning woodworking 3)"
      ],
      "type": "sat",
      "perplexity": [
        1.1654061079025269,
        1.108595609664917
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 78,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "Jiang CANNOT give both",
      "options": [
        "A) the first and third presentations",
        "B) the first and fourth presentations",
        "C) the first and fifth presentations",
        "D) the second and third presentations",
        "E) the second and fourth presentations"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Teachers 0)) (((Jiang) (Kudrow) (Lanning))) )",
        "(declare-datatypes ((Subjects 0)) (((needlework) (origami) (pottery) (stenciling) (textile_making) (woodworking))) )",
        "(declare-fun presents (Teachers Subjects) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(assert (forall ((t Teachers)) (and",
        "(>= (+ (to-int (and (distinct t Teachers) (presents t needlework)))",
        "(to-int (and (distinct t Teachers) (presents t origami)))",
        "(to-int (and (distinct t Teachers) (presents t pottery)))",
        "(to-int (and (distinct t Teachers) (presents t stenciling)))",
        "(to-int (and (distinct t Teachers) (presents t textile_making)))",
        "(to-int (and (distinct t Teachers) (presents t woodworking)))) 1))",
        "  ) )",
        "(assert (and",
        "(presents Jiang needlework)",
        "(presents Jiang origami)",
        "(presents Kudrow pottery)",
        "(presents Kudrow stenciling)",
        "(presents Kudrow textile_making)",
        "(presents Lanning woodworking)",
        "  ))",
        "(assert (not (and (exists ((i Int)) (= i 1) (and (presents Kudrow (if (= i 1) needlework (if (= i 2) origami (if (= i 3) pottery (if (= i 4) stenciling (if (= i 5) textile_making (if (= i 6) woodworking)))))))))",
        "(exists ((i Int)) (= i 2) (and (presents Kudrow (if (= i 1) needlework (if (= i 2) origami (if (= i 3) pottery (if (= i 4) stenciling (if (= i 5) textile_making (if (= i 6) woodworking)))))))))",
        "))",
        " )",
        "(assert (not (and (exists ((i Int)) (= i 1) (and (presents Jiang (if (= i 1) needlework (if (= i 2) origami (if (= i 3) pottery (if (= i 4) stenciling (if (= i 5) textile_making (if (= i 6) woodworking)))))))))",
        "(exists ((i Int)) (= i 3) (and (presents Jiang (if (= i 1) needlework (if (= i 2) origami (if (= i 3) pottery (if (= i 4) stenciling (if (= i 5) textile_making (if (= i 6) woodworking)))))))))",
        "))",
        " )",
        "(assert (and (not (or (and (presents Jiang needlework) (presents Jiang origami) (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making) (presents Lanning woodworking))",
        "(and (presents Jiang needlework) (presents Jiang origami) (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making) (presents Lanning woodworking))))",
        "  (or (and (presents Jiang needlework) (presents Jiang origami) (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making) (presents Lanning woodworking))",
        "(and (presents Jiang needlework) (presents Jiang origami) (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making) (presents Lanning woodworking))))"
      ],
      "options": [
        "(not (and (exists ((i Int)) (= i 1) (and (presents Jiang (if (= i 1) needlework (if (= i 2) origami (if (= i 3) pottery (if (= i 4) stenciling (if (= i 5) textile_making (if (= i 6) woodworking)))))))))",
        "(exists ((i Int)) (= i 2) (and (presents Jiang (if (= i 1) needlework (if (= i 2) origami (if (= i 3) pottery (if (= i 4) stenciling (if (= i 5) textile_making (if (= i 6) woodworking)))))))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.0998679399490356,
        1.047098159790039
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 79,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "If needlework is presented sixth, which one of the following must be true?",
      "options": [
        "A) Origami is presented fourth.",
        "B) Pottery is presented fifth.",
        "C) Stenciling is presented third.",
        "D) Textile making is presented first.",
        "E) Woodworking is presented fourth."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Teachers 0)) (((Jiang) (Kudrow) (Lanning))))",
        "(declare-datatypes ((Subjects 0)) (((needlework) (origami) (pottery) (stenciling) (textile_making) (woodworking)))",
        "(declare-fun presents (Teachers Subjects) Bool)"
      ],
      "constraints": [
        "(forall ((t Teachers) (s Subjects)) (<= (count (filter (lambda ((x) (= (presents t s) true))) (list Jiang Kudrow Lanning)), 1))",
        "(and (presents Jiang needlework) (presents Jiang origami))",
        "(and (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making))",
        "(presents Lanning woodworking)",
        "(forall ((t Teachers) (s1 Subjects) (s2 Subjects)) (=> (and (= (presents t s1) true) (= (presents t s2) true)) (not (= s1 s2))))",
        "(not (and (distinct (find ((lambda ((x) (= (presents Kudrow x) true))) (list needlework origami pottery stenciling textile_making woodworking)) (find ((lambda ((x) (= (presents Kudrow x) true))) (list needlework origami pottery stenciling textile_making woodworking)) (find ((lambda ((x) (= (presents Kudrow x) true))) (list needlework origami pottery stenciling textile_making woodworking)))))",
        "(<= (find ((lambda ((x) (= (presents ?t x) true))) (list needlework origami pottery stenciling textile_making woodworking)) , (find ((lambda ((x) (= (presents ?t x) true))) (list needlework origami pottery stenciling textile_making woodworking)) , 1))",
        "(<= (find ((lambda ((x) (= (presents ?t x) true))) (list needlework origami pottery stenciling textile_making woodworking)) , (find ((lambda ((x) (= (presents ?t x) true))) (list needlework origami pottery stenciling textile_making woodworking)) , 1))"
      ],
      "options": [
        "(implies (presents Jiang needlework sixth) ...)",
        "(implies (presents Jiang origami sixth) ...)",
        "(implies (presents Jiang pottery sixth) ...)",
        "(implies (presents Jiang stenciling sixth) ...)",
        "(implies (presents Jiang textile_making sixth) ...)",
        "(implies (presents Jiang woodworking sixth) ...)"
      ],
      "type": "sat",
      "perplexity": [
        1.1803834438323975,
        1.0203777551651
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 80,
    "nl_problem": {
      "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
      "question": "Which one of the following CANNOT be the subject of the second presentation?",
      "options": [
        "A) needlework",
        "B) origami",
        "C) pottery",
        "D) textile making",
        "E) woodworking"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Teachers 0)) (((Jiang) (Kudrow) (Lanning))))",
        "(declare-datatypes ((Subjects 0)) (((needlework) (origami) (pottery) (stenciling) (textile_making) (woodworking)))",
        "(declare-fun presents (Teachers Subjects) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((t Teachers) (s Subjects)) (<= (to-int (presents t s)) 1))",
        "(and (presents Jiang needlework) (presents Jiang origami))",
        "(and (presents Kudrow pottery) (presents Kudrow stenciling) (presents Kudrow textile_making))",
        "(presents Lanning woodworking)",
        "(forall ((t Teachers) (s Subjects)) (not (and (presents t s) (presents t s))))",
        "(=> (exists ((s Subjects)) (= s stenciling)) (exists ((s Subjects)) (= s origami)) (exists ((s Subjects)) (and (= s stenciling) (< (find (s Subjects) (s Subjects)) (find (s Subjects) (s Subjects))))))",
        "(=> (exists ((s Subjects)) (= s textile_making)) (exists ((s Subjects)) (= s woodworking)) (exists ((s Subjects)) (and (= s textile_making) (< (find (s Subjects) (s Subjects)) (find (s Subjects) (s Subjects))))))"
      ],
      "options": [
        "(implies (and (not (presents Kudrow (second_presentation)))) (not (and (exists ((t Teachers)) (and (presents t (first_presentation)) (not (= t Kudrow)))))))",
        "(implies (and (not (presents Jiang (second_presentation)))) (not (and (exists ((t Teachers)) (and (presents t (first_presentation)) (not (= t Jiang)))))))",
        "(implies (and (not (presents Lanning (second_presentation)))) (not (and (exists ((t Teachers)) (and (presents t (first_presentation)) (not (= t Lanning)))))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1735914945602417,
        1.0126614570617676
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 81,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "Which one of the following is a list of foods that could be the foods selected?",
      "options": [
        "A) F, N, O, T, V",
        "B) F, O, P, T, W",
        "C) G, N, P, T, W",
        "D) G, O, P, T, V",
        "E) G, O, P, V, W"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Foods 0)) (((F) (G) (N) (O) (P) (T) (V) (W))))",
        "(declare-fun selected (Foods) Bool)"
      ],
      "constraints": [
        "(and (> (count (selected F) (selected G)) 0) (> (count (selected N) (selected O) (selected P)) 0) (> (count (selected T) (selected V) (selected W)) 0) (> (count (selected N) (selected F) (selected T)) 0) (or (and (selected P) (selected W)) (not (selected P)) (not (selected W))) (or (and (selected G) (selected O)) (not (selected G))) (or (not (selected N)) (not (selected V))))"
      ],
      "options": [
        "(and (selected F) (selected N) (selected O) (selected T) (selected V))",
        "(and (selected F) (selected O) (selected P) (selected T) (selected W))",
        "(and (selected G) (selected N) (selected P) (selected T) (selected W))",
        "(and (selected G) (selected O) (selected P) (selected T) (selected V))",
        "(and (selected G) (selected O) (selected P) (selected V) (selected W))"
      ],
      "type": "sat",
      "perplexity": [
        1.1252869367599487,
        1.0253570079803467
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 82,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "Which one of the following is a pair of foods of which the organizer of the luncheon must select at least one?",
      "options": [
        "A) F, T",
        "B) G, O",
        "C) N, T",
        "D) O, P",
        "E) V, W"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Foods 0)) (((F) (G) (N) (O) (P) (T) (V) (W))))",
        "(declare-fun selected (Foods Bool))"
      ],
      "constraints": [
        "(or (selected F) (selected G))",
        "(or (selected N) (selected O) (selected P))",
        "(or (selected T) (selected V) (selected W))",
        "(or (selected F) (selected N) (selected T))",
        "(or (selected P) (selected W))",
        "(or (selected O) (selected G))",
        "(or (not (selected V)) (not (selected N)))"
      ],
      "options": [
        "(assert (or (selected F) (selected T)))",
        "(assert (or (selected G) (selected O)))",
        "(assert (or (selected N) (selected T)))",
        "(assert (or (selected O) (selected P)))",
        "(assert (or (selected V) (selected W)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1938056945800781,
        1.0204389095306396
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 83,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "If O is the only main course selected, then which one of the following CANNOT be selected?",
      "options": [
        "A) F",
        "B) G",
        "C) T",
        "D) V",
        "E) W"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Foods 0)) (((F) (G) (N) (O) (P) (T) (V) (W))))",
        "(declare-fun selected (Foods) Bool)"
      ],
      "constraints": [
        "(and (>= (to-int (selected F)) 1) (>= (to-int (selected N)) 1) (>= (to-int (selected T)) 1) (>= (to-int (selected O)) 1) (>= (to-int (selected P)) 1) (>= (to-int (selected V)) 1) (>= (to-int (selected W)) 1))",
        "(or (selected N) (selected T) (selected F))",
        "(implied (selected P) (selected W))",
        "(implied (selected G) (selected O))",
        "(implied (selected N) (not (selected V)))"
      ],
      "options": [
        "(and (selected O) (not (selected F)))",
        "(and (selected O) (not (selected G)))",
        "(and (selected O) (not (selected T)))",
        "(and (selected O) (not (selected V)))",
        "(and (selected O) (not (selected W)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1134836673736572,
        1.0123661756515503
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 84,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "If F is not selected, which one of the following could be true?",
      "options": [
        "A) P is the only main course selected.",
        "B) T is the only side dish selected.",
        "C) Exactly two hot foods are selected.",
        "D) Exactly three main courses are selected.",
        "E) Exactly three side dishes are selected."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Foods 0)) (((F) (G) (N) (O) (P) (T) (V) (W)))",
        "(declare-fun selected (Foods) Bool)"
      ],
      "constraints": [
        "(and (>= (or (selected F) (selected G)) 1) (>= (or (selected N) (selected O) (selected P)) 1) (>= (or (selected T) (selected V) (selected W)) 1) (>= (or (selected F) (selected N) (selected T)) 1) (or (not (selected P)) (selected W)) (or (not (selected G)) (selected O)) (or (not (selected N)) (not (selected V))))",
        "options"
      ],
      "options": [
        "(not selected F)",
        "(or (and (selected N) (selected O) (selected P)) (and (not (selected N)) (selected O) (selected P)) (and (selected N) (not (selected O)) (selected P)) (and (selected N) (selected O) (not (selected P))))",
        "(or (and (selected T) (not (selected V)) (not (selected W))) (and (not (selected T)) (selected V) (not (selected W))) (and (not (selected T)) (not (selected V)) (selected W)))",
        "(or (and (selected N) (selected T)) (and (selected F) (selected T)))",
        "(or (and (selected T) (selected V) (selected W)) (and (selected T) (selected V) (not (selected W))) (and (selected T) (not (selected V)) (selected W)) (and (not (selected T)) (selected V) (selected W)))"
      ],
      "type": "sat",
      "perplexity": [
        1.195909023284912,
        1.068708896636963
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 85,
    "nl_problem": {
      "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
      "question": "If T and V are the only side dishes selected, then which one of the following is a pair of foods each of which must be selected?",
      "options": [
        "A) F and G",
        "B) F and N",
        "C) F and P",
        "D) N and O",
        "E) O and P"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Foods 0)) (((F) (G) (N) (O) (P) (T) (V) (W)))",
        "(declare-fun selected (Foods) Bool)"
      ],
      "constraints": [
        "(assert (and (> (count_true (mapcar (lambda (f) selected f) [F G])) 0) (> (count_true (mapcar (lambda (f) selected f) [N O P])) 0) (> (count_true (mapcar (lambda (f) selected f) [T V W])) 0))",
        "(assert (or (selected F) (selected N) (selected T)))",
        "(assert (or (and (selected P) (selected W)) (not (selected P))) (not (selected W)))",
        "(assert (or (not (selected G)) (selected O)))",
        "(assert (or (not (selected N)) (not (selected V))))"
      ],
      "options": [
        "(assert (and (selected T) (selected V)))",
        "(assert (and (selected F G)))",
        "(assert (and (selected F N)))",
        "(assert (and (selected F P)))",
        "(assert (and (selected N O)))",
        "(assert (and (selected O P)))"
      ],
      "type": "sat",
      "perplexity": [
        1.185081124305725,
        1.0226715803146362
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 86,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "Which one of the following could be the order in which the programs are shown, from earliest to latest?",
      "options": [
        "A) Generations, Roamin', Waterloo, Terry, Sundown",
        "B) Roamin', Sundown, Waterloo, Terry, Generations",
        "C) Roamin', Terry, Waterloo, Generations, Sundown",
        "D) Waterloo, Roamin', Sundown, Terry, Generations",
        "E) Waterloo, Terry, Sundown, Roamin', Generations"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin') (Sundown) (Terry) (Waterloo)))",
        "(declare-datatypes ((TimeSlots 0)) (((hour1) (hour2) (hour3))))",
        "(declare-fun scheduled (Programs TimeSlots) Bool)"
      ],
      "constraints": [
        "(forall ((p Programs)) (exists ((t TimeSlots)) (scheduled p t)))",
        "(forall ((p Programs) (t1 TimeSlots) (t2 TimeSlots)) (=> (and (scheduled p t1) (scheduled p t2)) (eq t1 t2)))",
        "(and (scheduled Generations hour1) (not (scheduled Generations hour2)) (not (scheduled Generations hour3)))",
        "(and (not (scheduled Terry hour1)) (scheduled Terry hour2) (not (scheduled Terry hour3)))",
        "(=> (scheduled Roamin' hour1) (not (scheduled Sundown hour1)))",
        "(=> (and (scheduled Waterloo hour1) (scheduled Terry hour2)) (eq hour1 hour2 -1))"
      ],
      "options": [
        "(and (scheduled Generations hour1) (scheduled Roamin' hour2) (scheduled Waterloo hour3) (scheduled Terry hour4) (scheduled Sundown hour5))"
      ],
      "type": "sat",
      "perplexity": [
        1.2489840984344482,
        1.0390630960464478
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 87,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "If Waterloo is the first program, then how many orders are there in which the remaining programs could be shown?",
      "options": [
        "A) one",
        "B) two",
        "C) three",
        "D) four",
        "E) five"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(set-logic QF_UF)",
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin) (Sundown) (Terry) (Waterloo))))",
        "(declare-datatypes ((Timeslots 0)) (((1:00) (1:30) (2:00) (2:30) (3:00))))",
        "(declare-fun starts_at (Programs Timeslots) Bool)",
        "(define-fun program_order (Programs) Array Programs)"
      ],
      "constraints": [
        "(forall ((p Programs)) (or (= (starts_at p 1:00) true) (= (starts_at p 1:30) true) (= (starts_at p 2:00) true) (= (starts_at p 2:30) true) (= (starts_at p 3:00) true))",
        "(forall ((p Programs)) (<= (program_order p) (length Programs)-1))",
        "(and (starts_at Generations 1:00) (not (starts_at Generations 1:30)))",
        "(and (starts_at Terry 1:30) (not (starts_at Terry 1:00)))",
        "(implies (starts_at Roamin p1) (implies (starts_at Sundown p2) (> p1 p2)))",
        "(implies (starts_at Waterloo p1) (implies (starts_at Terry p2) (= p1 p2 - 1))) "
      ],
      "options": [
        "(exists ((order Array Programs)) (and (= (length order) (length Programs)) (= (program_order order) order))) "
      ],
      "type": "sat",
      "perplexity": [
        1.3421475887298584,
        1.0207316875457764
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 88,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "If Roamin' is the second program, then each of the following could be true EXCEPT:",
      "options": [
        "A) Sundown is the third program.",
        "B) Sundown is the fourth program.",
        "C) Terry is the fifth program.",
        "D) Waterloo is the third program.",
        "E) Waterloo is the fifth program."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin) (Sundown) (Terry) (Waterloo)))",
        "(declare-datatypes ((TimeSlots 0)) (((1P) (1P30) (2P) (2P30) (3P) ))",
        "(declare-fun scheduled (Programs TimeSlots) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((p Programs)) (forall ((t TimeSlots)) (not (and (scheduled p t) (scheduled p (distinct t))))",
        "(and (scheduled Generations (1P)))",
        "(and (scheduled Terry (distinct (1P30))))",
        "(=> (scheduled Roamin (distinct (1P))) (scheduled Sundown (distinct (1P30)))",
        "(=> (and (scheduled Waterloo (distinct (1P30))) (scheduled Terry (distinct (2P)))) (scheduled Waterloo (distinct (2P30))))"
      ],
      "options": [
        "(and (scheduled Sundown (distinct (2P))))",
        "(and (scheduled Sundown (distinct (2P30))))",
        "(and (scheduled Terry (distinct (3P))))",
        "(and (scheduled Waterloo (distinct (2P))))",
        "(and (scheduled Waterloo (distinct (3P))))"
      ],
      "type": "sat",
      "perplexity": [
        1.2895714044570923,
        1.036630392074585
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 89,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "If Sundown is the third program, then which one of the following must be true?",
      "options": [
        "A) Generations is the first program.",
        "B) Roamin' is the first program.",
        "C) Roamin' is the second program.",
        "D) Terry is the fifth program.",
        "E) Waterloo is the fourth program."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin) (Sundown) (Terry) (Waterloo))))",
        "(declare-datatypes ((Times 0)) (((Hour1) (Hour2) (Hour3))))",
        "(declare-fun starts_at (Programs Times) Bool)"
      ],
      "constraints": [
        "(and (starts_at Generations Hour1) (starts_at Generations Hour2) (starts_at Generations Hour3))",
        "(and (starts_at Terry Hour1) (starts_at Terry Hour2) (starts_at Terry Hour3))",
        "(implies (starts_at Roamin Hour1) (starts_at Sundown Hour2))",
        "(implies (starts_at Waterloo Hour1) (starts_at Terry Hour2))"
      ],
      "options": [
        "(implies (starts_at Sundown Hour3) (starts_at Generations Hour1))",
        "(implies (starts_at Sundown Hour3) (starts_at Roamin Hour1))",
        "(implies (starts_at Sundown Hour3) (starts_at Roamin Hour2))",
        "(implies (starts_at Sundown Hour3) (starts_at Terry Hour5))",
        "(implies (starts_at Sundown Hour3) (starts_at Waterloo Hour4))"
      ],
      "type": "sat",
      "perplexity": [
        1.1802595853805542,
        1.0167042016983032
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 90,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "If Generations is the third program, then which one of the following could be true?",
      "options": [
        "A) Roamin' is the second program.",
        "B) Roamin' is the fifth program.",
        "C) Sundown is the fourth program.",
        "D) Terry is the fourth program.",
        "E) Waterloo is the second program."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin) (Sundown) (Terry) (Waterloo)))",
        "(declare-datatypes ((TimeSlots 0)) (((1p) (1:30p) (2p) (2:30p) (3p)))",
        "(declare-fun scheduled (Programs TimeSlots) Bool)"
      ],
      "constraints": [
        "(forall ((p Programs)) (<= (count_if (scheduled p (TimeSlots))) 1))",
        "(and (scheduled Generations (1p)) (scheduled Generations (1:30p)) (scheduled Generations (2p)) (scheduled Generations (2:30p)) (scheduled Generations (3p)))",
        "(and (scheduled Terry (1p)) (scheduled Terry (1:30p)) (scheduled Terry (2p)) (scheduled Terry (2:30p)) (scheduled Terry (3p)))",
        "(and (scheduled Roamin (1p)) (scheduled Roamin (1:30p)) (scheduled Roamin (2p)) (scheduled Roamin (2:30p)) (scheduled Roamin (3p)))",
        "(=> (and (scheduled Waterloo (1p)) (scheduled Waterloo (1:30p)) (scheduled Waterloo (2p)) (scheduled Waterloo (2:30p)) (scheduled Waterloo (3p)) (scheduled Terry (2:30p))) (scheduled Waterloo (2:30p)))"
      ],
      "options": [
        "(and (scheduled Generations (3p)) (scheduled Roamin (1p)))",
        "(and (scheduled Generations (3p)) (scheduled Roamin (5p)))",
        "(and (scheduled Generations (3p)) (scheduled Sundown (4p)))",
        "(and (scheduled Generations (3p)) (scheduled Terry (4p)))",
        "(and (scheduled Generations (3p)) (scheduled Waterloo (2p)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1379097700119019,
        1.0181150436401367
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 91,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "Which one of the following CANNOT be true?",
      "options": [
        "A) Sundown is shown immediately before Generations.",
        "B) Waterloo is shown immediately before Roamin'.",
        "C) Generations is shown immediately before Sundown.",
        "D) Roamin' is shown immediately before Terry.",
        "E) Terry is shown immediately before Waterloo."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin') (Sundown) (Terry) (Waterloo)))",
        "(declare-datatypes ((TimeSlots 0)) (((1) (1:30) (2) (2:30) (3)))",
        "(declare-fun shownAt (Programs TimeSlots) Bool)"
      ],
      "constraints": [
        "(and",
        "(forall ((p Programs)) (not (or (and (shownAt p 1) (shownAt p 1:30)) (and (shownAt p 2) (shownAt p 2:30)) (and (shownAt p 3) (shownAt p 3:00))))",
        ")",
        "(shownAt Generations 1)",
        "(or (shownAt Terry 1:30) (shownAt Terry 2:30) (shownAt Terry 3:00))",
        "(=> (and (shownAt Roamin' 1) (shownAt Sundown 1:30)) (shownAt Roamin' 1) (shownAt Sundown 1:30))",
        "(=> (and (shownAt Waterloo 1) (shownAt Terry 1:30)) (shownAt Waterloo 1) (shownAt Terry 1:30))",
        ")"
      ],
      "options": [
        "(not (and (shownAt Sundown 2:30) (shownAt Generations 3)))",
        "(not (and (shownAt Waterloo 1) (shownAt Roamin' 1:30)))",
        "(not (and (shownAt Generations 2:30) (shownAt Sundown 3)))",
        "(not (and (shownAt Roamin' 2:30) (shownAt Terry 3)))",
        "(not (and (shownAt Terry 1) (shownAt Waterloo 1:30)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.188936471939087,
        1.0140641927719116
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 92,
    "nl_problem": {
      "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
      "question": "Which one of the following, if substituted for the constraint that Generations starts on the hour rather than the half hour, would have the same effect in determining the order in which the programs are shown?",
      "options": [
        "A) Generations is not shown immediately before Terry.",
        "B) Generations is either the first program or the fifth.",
        "C) Generations is neither the second program nor the fourth.",
        "D) If Generations is shown third, then Roamin' is shown first.",
        "E) If Generations is not shown first, then it is shown later than Terry."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Programs 0)) (((Generations) (Roamin) (Sundown) (Terry) (Waterloo)))",
        "(declare-datatypes ((Times 0)) (((1p) (1_30) (2p) (2_30) (3p)))",
        "(declare-fun scheduled (Programs Times) Bool)"
      ],
      "constraints": [
        "(and",
        "(forall ((p Programs)) (and",
        " (<= (count (filter (lambda (t) (and (scheduled p t) (= t 1p) )) Times) 1)",
        " (<= (count (filter (lambda (t) (and (scheduled p t) (= t 1_30) )) Times) 1)",
        " (<= (count (filter (lambda (t) (and (scheduled p t) (= t 2p) )) Times) 1)",
        " (<= (count (filter (lambda (t) (and (scheduled p t) (= t 2_30) )) Times) 1)",
        " ))",
        ")",
        "(and (scheduled Generations 1p) (scheduled Generations 2p) (scheduled Generations 3p))",
        "(and (scheduled Terry 1_30) (scheduled Terry 2_30))",
        "(and (scheduled Roamin 1p) (scheduled Roamin 1_30) (scheduled Roamin 2p) (scheduled Roamin 2_30) (not (scheduled Sundown 1p)) (not (scheduled Sundown 1_30)))",
        "(and (scheduled Waterloo 1p) (scheduled Waterloo 1_30) (scheduled Waterloo 2p) (scheduled Waterloo 2_30) (not (scheduled Terry 1p)) (not (scheduled Terry 1_30)))",
        ")"
      ],
      "options": [
        "(A) (not (and (scheduled Generations 1_30) (scheduled Terry 1p)))",
        "(B) (or (= (first-scheduled Generations) 1p) (= (first-scheduled Generations) 5))",
        "(C) (or (= (second-scheduled Generations) 2p) (= (fourth-scheduled Generations) 2p))",
        "(D) (=> (third-scheduled Generations) (first-scheduled Roamin))",
        "(E) (=> (not (first-scheduled Generations)) (>= (last-scheduled Generations) (last-scheduled Terry)))"
      ],
      "type": "sat",
      "perplexity": [
        1.2008121013641357,
        1.0547596216201782
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 93,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "Which one of the following could be a list of the majors of Manolo, Nadia, Owen, Peng, and Rana, respectively?",
      "options": [
        "A) geology, geology, journalism, journalism, history",
        "B) geology, geology, history, history, history",
        "C) history, geology, geology, journalism, history",
        "D) history, geology, journalism, geology, history",
        "E) history, history, geology, journalism, history"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Manolo) (Nadia) (Owen) (Peng) (Rana))))",
        "(declare-datatypes ((Topics 0)) (((friendship) (liberty))))",
        "(declare-datatypes ((Majors 0)) (((geology) (history) (journalism)))",
        "(declare-fun major (Students) Majors)",
        "(declare-fun speech_topic (Students) Topics)"
      ],
      "constraints": [
        "(and (distinct (speech_topic Manolo) (speech_topic Rana)) (distinct (speech_topic Manolo) (speech_topic Nadia)) (distinct (speech_topic Manolo) (speech_topic Owen)) (distinct (speech_topic Manolo) (speech_topic Peng)) (distinct (speech_topic Rana) (speech_topic Nadia)) (distinct (speech_topic Rana) (speech_topic Owen)) (distinct (speech_topic Rana) (speech_topic Peng)) (distinct (speech_topic Nadia) (speech_topic Owen)) (distinct (speech_topic Nadia) (speech_topic Peng)) (distinct (speech_topic Owen) (speech_topic Peng)))",
        "(and (distinct (major Manolo) (major Nadia)) (distinct (major Manolo) (major Owen)) (distinct (major Manolo) (major Peng)) (distinct (major Manolo) (major Rana)) (distinct (major Nadia) (major Owen)) (distinct (major Nadia) (major Peng)) (distinct (major Nadia) (major Rana)) (distinct (major Owen) (major Peng)) (distinct (major Owen) (major Rana)) (distinct (major Peng) (major Rana)))",
        "(and (= (speech_topic Manolo) friendship) (= (speech_topic Rana) liberty) (or (= (major Nadia) geology) (= (major Owen) geology) (= (major Peng) geology) (= (major Manolo) geology) (= (major Rana) geology)) (or (= (major Nadia) history) (= (major Owen) history) (= (major Peng) history) (= (major Manolo) history) (= (major Rana) history)))",
        "(not (= (major Nadia) geology))",
        "(not (= (major Peng) geology))"
      ],
      "options": [
        "(and (= (major Manolo) history) (= (major Nadia) geology) (= (major Owen) journalism) (= (major Peng) history) (= (major Rana) history))",
        "(and (= (major Manolo) history) (= (major Nadia) geology) (= (major Owen) geology) (= (major Peng) history) (= (major Rana) history))",
        "(and (= (major Manolo) history) (= (major Nadia) geology) (= (major Owen) journalism) (= (major Peng) geology) (= (major Rana) history))",
        "(and (= (major Manolo) history) (= (major Nadia) geology) (= (major Owen) history) (= (major Peng) journalism) (= (major Rana) history))",
        "(and (= (major Manolo) history) (= (major Nadia) history) (= (major Owen) geology) (= (major Peng) journalism) (= (major Rana) history))"
      ],
      "type": "sat",
      "perplexity": [
        1.1116585731506348,
        1.0078766345977783
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 94,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "If Peng speaks on friendship, then which one of the following could be true?",
      "options": [
        "A) Manolo is a history major.",
        "B) Nadia speaks on friendship.",
        "C) Owen speaks on friendship.",
        "D) Owen is a journalism major.",
        "E) Peng is a journalism major."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Manolo) (Nadia) (Owen) (Peng) (Rana))))",
        "(declare-datatypes ((Topics 0)) (((friendship) (liberty))))",
        "(declare-datatypes ((Majors 0)) (((geology) (history) (journalism))))",
        "(declare-fun speaks-on (Students Topics) Bool)",
        "(declare-fun has-major (Students Majors) Bool)"
      ],
      "constraints": [
        "(forall ((s Students)) (and (or (speaks-on s friendship) (speaks-on s liberty)) (exists ((t Topics)) (= (speaks-on s t) true))))",
        "(exactly 2 (mapcar (lambda (s) (speaks-on s friendship)) (list Manolo Nadia Owen Peng Rana)))",
        "(and (exists ((s Students)) (and (has-major s geology) (speaks-on s friendship))) (exists ((s Students)) (and (has-major s history) (speaks-on s friendship))))",
        "(speaks-on Manolo friendship)",
        "(speaks-on Rana liberty)",
        "(forall ((s (list Peng Rana)))(not (has-major s geology)))",
        "(has-major Nadia geology)"
      ],
      "options": [
        "(and (speaks-on Peng friendship) (has-major Manolo history))"
      ],
      "type": "sat",
      "perplexity": [
        1.3018686771392822,
        1.0082343816757202
      ],
      "answer": "D",
      "predicted_answer": [
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 95,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "If Owen is a geology major who speaks on friendship, then which one of the following must be true?",
      "options": [
        "A) Manolo is a history major.",
        "B) Nadia speaks on friendship.",
        "C) Peng speaks on friendship.",
        "D) Peng is a history major.",
        "E) Rana is a journalism major."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Manolo) (Nadia) (Owen) (Peng) (Rana))))",
        "(declare-datatypes ((Topics 0)) (((friendship) (liberty))))",
        "(declare-datatypes ((Majors 0)) (((geology) (history) (journalism)))",
        "(declare-fun speaks_on (Students Topics) Bool)",
        "(declare-fun major_in (Students Majors) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(and (forall ((s Students)) (exists ((t Topics)) (speaks_on s t)) ) (forall ((s Students)) (exists ((m Majors)) (major_in s m))))",
        "(exactly 2 (mapcar (lambda (s) (speaks_on s friendship)) Students))",
        "(and (exists ((s Students)) (and (major_in s geology) (speaks_on s friendship))) (exists ((s Students)) (and (major_in s history) (speaks_on s friendship))))",
        "(speaks_on Manolo friendship)",
        "(speaks_on Rana liberty)",
        "(and (not (major_in Peng geology)) (not (major_in Rana geology)))",
        "(major_in Nadia geology)"
      ],
      "options": [
        "(implies (and (major_in Owen geology) (speaks_on Owen friendship)) (major_in Manolo history))",
        "(implies (and (major_in Owen geology) (speaks_on Owen friendship)) (speaks_on Nadia friendship))",
        "(implies (and (major_in Owen geology) (speaks_on Owen friendship)) (speaks_on Peng friendship))",
        "(implies (and (major_in Owen geology) (speaks_on Owen friendship)) (major_in Peng history))",
        "(implies (and (major_in Owen geology) (speaks_on Owen friendship)) (major_in Rana journalism))"
      ],
      "type": "sat",
      "perplexity": [
        1.0733071565628052,
        1.0125653743743896
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 96,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "If Nadia speaks on friendship, then which one of the following must be false?",
      "options": [
        "A) Manolo is a geology major.",
        "B) Manolo is a history major.",
        "C) Owen is a geology major.",
        "D) Peng is a history major.",
        "E) Rana is a history major."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Manolo) (Nadia) (Owen) (Peng) (Rana))))",
        "(declare-datatypes ((Topics 0)) (((friendship) (liberty))))",
        "(declare-datatypes ((Majors 0)) (((geology) (history) (journalism))))",
        "(declare-fun speaks-on (Students Topics) Bool)",
        "(declare-fun major-in (Students Majors) Bool)"
      ],
      "constraints": [
        "(forall ((s Students)) (and (= (count (filter (lambda (t) (speaks-on s t)) Topics)) 1) (= (count (filter (lambda (m) (major-in s m)) Majors)) 1)))",
        "(= (count (filter (lambda (s) (and (speaks-on s friendship) (not (= s Rana)))) Students)) 2))",
        "(= (count (filter (lambda (s) (and (speaks-on s friendship) (or (major-in s geology) (major-in s history)))) Students)) 2))",
        "(speaks-on Manolo friendship)",
        "(speaks-on Rana liberty)",
        "(not (and (major-in Peng geology)))",
        "(not (and (major-in Rana geology)))",
        "(major-in Nadia geology)",
        "(implies (speaks-on Nadia friendship) (not (and (major-in Manolo geology))))"
      ],
      "options": [],
      "type": "unsat",
      "perplexity": [
        1.2327897548675537,
        1.0157166719436646
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 97,
    "nl_problem": {
      "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
      "question": "Rana must be a journalism major if which one of the following is true?",
      "options": [
        "A) Manolo is a geology major and Peng is a history major.",
        "B) Owen is a geology major and Manolo is a history major.",
        "C) Owen is a geology major and Peng is a history major.",
        "D) Both Manolo and Nadia speak on friendship.",
        "E) Both Manolo and Peng speak on friendship."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Students 0)) (((Manolo) (Nadia) (Owen) (Peng) (Rana))))",
        "(declare-datatypes ((Topics 0)) (((friendship) (liberty))))",
        "(declare-datatypes ((Majors 0)) (((geology) (history) (journalism)))",
        "(declare-fun speaks-on (Students Topics) Bool)",
        "(declare-fun is-major (Students Majors) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(and (distinct Manolo Nadia Owen Peng Rana))",
        "(forall ((s Students)) (distinct (speaks-on s friendship) (speaks-on s liberty)))",
        "(forall ((t Topics)) (distinct (speaks-on Manolo t) (speaks-on Nadia t) (speaks-on Owen t) (speaks-on Peng t) (speaks-on Rana t)))",
        "(forall ((m Majors)) (<= (+ (to-int (and (is-major Manolo m) (= m geology))) (to-int (and (is-major Nadia m) (= m geology))) (to-int (and (is-major Owen m) (= m geology))) (to-int (and (is-major Peng m) (= m geology))) (to-int (and (is-major Rana m) (= m geology)))) 2))",
        "(forall ((m Majors)) (<= (+ (to-int (and (is-major Manolo m) (= m history))) (to-int (and (is-major Nadia m) (= m history))) (to-int (and (is-major Owen m) (= m history))) (to-int (and (is-major Peng m) (= m history))) (to-int (and (is-major Rana m) (= m history)))) 2))",
        "(and (speaks-on Manolo friendship) (= (is-major Rana geology) 0))",
        "(and (speaks-on Rana liberty) (= (is-major Rana journalism) 1))",
        "(forall ((s Students)) (distinct (speaks-on s friendship) (speaks-on s liberty)))"
      ],
      "options": [
        "(implies (and (is-major Manolo geology) (is-major Peng history)) (is-major Rana journalism))",
        "(implies (and (is-major Owen geology) (is-major Manolo history)) (is-major Rana journalism))",
        "(implies (and (is-major Owen geology) (is-major Peng history)) (is-major Rana journalism))",
        "(implies (and (speaks-on Manolo friendship) (speaks-on Nadia friendship)) (is-major Rana journalism))",
        "(implies (and (speaks-on Manolo friendship) (speaks-on Peng friendship)) (is-major Rana journalism))",
        " "
      ],
      "type": "sat",
      "perplexity": [
        1.0856132507324219,
        1.0369131565093994
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 98,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following could be the order in which the professors lecture, from first to last?",
      "options": [
        "A) Powell, Young, Taylor, Shihab, Vaughan, Zabel, Wood",
        "B) Taylor, Powell, Shihab, Wood, Vaughan, Young, Zabel",
        "C) Taylor, Vaughan, Shihab, Wood, Powell, Young, Zabel",
        "D) Vaughan, Taylor, Shihab, Powell, Wood, Zabel, Young",
        "E) Young, Taylor, Shihab, Powell, Vaughan, Zabel, Wood"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel)))",
        "(declare-datatypes ((Lectures 0)) (((first) (second) (third) (fourth) (fifth) (sixth) (seventh))))",
        "(declare-fun lectures (Professors Lectures) Bool)"
      ],
      "constraints": [
        "(forall ((p Professors)) (exists ((l Lectures)) (lectures p l)))",
        "(forall ((l1 Lectures) (l2 Lectures)) (not (= l1 l2)))",
        "(not (lectures Powell first))",
        "(implies (lectures Powell first) (and (not (lectures Young sixth)) (lectures Young (before sixth))))",
        "(lectures Wood (after first))",
        "(lectures Taylor (before Shihab))",
        "(lectures Vaughan (before Zabel))",
        "(<= (find (Shihab) (Lectures)) 3)",
        "(not (= (find (Young) (Lectures)) 7))"
      ],
      "options": [
        "(and (lectures Powell first) (lectures Young (before sixth)) (lectures Taylor second) (lectures Shihab third) (lectures Vaughan fourth) (lectures Zabel fifth) (lectures Wood sixth))",
        "(and (lectures Taylor first) (lectures Powell second) (lectures Shihab third) (lectures Wood fourth) (lectures Vaughan fifth) (lectures Young sixth) (lectures Zabel seventh))",
        "(and (lectures Taylor first) (lectures Vaughan second) (lectures Shihab third) (lectures Wood fourth) (lectures Powell fifth) (lectures Young sixth) (lectures Zabel seventh))",
        "(and (lectures Vaughan first) (lectures Taylor second) (lectures Shihab third) (lectures Powell fourth) (lectures Wood fifth) (lectures Zabel sixth) (lectures Young seventh))",
        "(and (lectures Young first) (lectures Taylor second) (lectures Shihab third) (lectures Powell fourth) (lectures Vaughan fifth) (lectures Zabel sixth) (lectures Wood seventh))"
      ],
      "type": "unsat",
      "perplexity": [
        1.2387462854385376,
        1.010323405265808
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 99,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following could lecture first?",
      "options": [
        "A) Shihab",
        "B) Vaughan",
        "C) Wood",
        "D) Young",
        "E) Zabel"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel))))",
        "(declare-datatypes ((Lectures 0)) (((First) (Second) (Third) (Fourth) (Fifth) (Sixth) (Seventh)))",
        "(declare-fun lectures (Professors Lectures) Bool)"
      ],
      "constraints": [
        "(forall ((p Professors) (l Lectures)) (<= (+ (to-int (lectures p l)) 1 0))",
        "(implies (lectures Powell First) (before Wood Powell))",
        "(implies (lectures Taylor _) (before Shihab Taylor))",
        "(implies (lectures Vaughan _) (before Zabel Vaughan))",
        "(<= (position Shihab) 3)",
        "(not (= position Young Seventh))",
        "(implies (lectures Powell First) (before Vaughan Young))"
      ],
      "options": [
        "(lectures Shihab First)",
        "(lectures Vaughan First)",
        "(lectures Wood First)",
        "(lectures Young First)",
        "(lectures Zabel First)"
      ],
      "type": "sat",
      "perplexity": [
        1.120117425918579,
        1.0081902742385864
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 100,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following CANNOT given the second guest lecture?",
      "options": [
        "A) Powell",
        "B) Shihab",
        "C) Taylor",
        "D) Vaughan",
        "E) Wood"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel))))",
        "(declare-datatypes ((Lectures 0)) (((1) (2) (3) (4) (5) (6) (7)))",
        "(declare-fun lectures (Professors) Lectures)"
      ],
      "constraints": [
        "(forall ((p Professors)) (distinct (lectures p) (lectures (distinct p))))",
        "(=> (lectures Powell 1) (and (<= (lectures Wood 2) 7) (<= (lectures Wood 2) 6)))",
        "(<= (lectures Shihab 3))",
        "(not (= (lectures Young 7)))",
        "(=> (lectures Powell 1) (<= (lectures Wood 2) 7))",
        "(and (<= (lectures Taylor 1) 6) (<= (lectures Shihab 2) 6))",
        "(and (<= (lectures Vaughan 1) 5) (<= (lectures Zabel 2) 6))"
      ],
      "options": [
        "(not (= (lectures 2 Powell)))",
        "(not (= (lectures 2 Shihab)))",
        "(not (= (lectures 2 Taylor)))",
        "(not (= (lectures 2 Vaughan)))",
        "(not (= (lectures 2 Wood)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1454882621765137,
        1.0152744054794312
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 101,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "If Shihab lectures second and Zabel lectures fourth, then which one of the following could be true?",
      "options": [
        "A) Powell lectures sixth",
        "B) Taylor lectures third",
        "C) Vaughan lectures fifth",
        "D) Wood lectures fifth",
        "E) Young lectures third"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel))))",
        "(declare-datatypes ((Lectures 0)) ((first) (second) (third) (fourth) (fifth) (sixth) (seventh)) )",
        "(declare-fun lectures (Professors) Lectures)"
      ],
      "constraints": [
        "(and  (not (eq (lectures Powell) (lectures Wood))) (not (eq (lectures Wood) (lectures Powell))))",
        "(and (not (eq (lectures Taylor) (lectures Shihab))) (not (eq (lectures Shihab) (lectures Taylor))))",
        "(and (not (eq (lectures Vaughan) (lectures Zabel))) (not (eq (lectures Zabel) (lectures Vaughan))))",
        "(<= (lectures Shihab) 3)",
        "(not (= (lectures Young) 7))",
        "(=> (and (= (lectures Powell) 1) (= (lectures Young) (lt (lectures Vaughan)))) (not (eq (lectures Powell) 7)))"
      ],
      "options": [
        "(eq (lectures Powell) 6)",
        "(eq (lectures Taylor) 3)",
        "(eq (lectures Vaughan) 5)",
        "(eq (lectures Wood) 5)",
        "(eq (lectures Young) 3)"
      ],
      "type": "sat",
      "perplexity": [
        1.1533039808273315,
        1.0201269388198853
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 102,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "Which one of the following CANNOT be the guest lecture that Vaughan gives?",
      "options": [
        "A) second",
        "B) third",
        "C) fourth",
        "D) sixth",
        "E) seventh"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel)))",
        "(declare-datatypes ((Lectures 0)) (((first) (second) (third) (fourth) (fifth) (sixth) (seventh)))",
        "(declare-fun lecture (Professors) Lectures)"
      ],
      "constraints": [
        "(forall ((p1 Professors) (p2 Professors)) (=> (distinct p1 p2) (distinct (lecture p1) (lecture p2))))",
        "(=> (lecture Powell first) (and (before Wood Powell) (after Young Vaughan)))",
        "(=> (not (lecture Powell first)) (or (before Wood Powell) (after Young Vaughan)))",
        "(before Wood Powell)",
        "(before Shihab Taylor)",
        "(before Zabel Vaughan)",
        "(<= (index (lecture Shihab)) 3)",
        "(not (= (lecture Young seventh)))"
      ],
      "options": [
        "(not (=> (lecture Vaughan (second)) (sat)))",
        "(not (=> (lecture Vaughan (third)) (sat)))",
        "(not (=> (lecture Vaughan (fourth)) (sat)))",
        "(not (=> (lecture Vaughan (sixth)) (sat)))",
        "(not (=> (lecture Vaughan (seventh)) (sat)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1878430843353271,
        1.0106759071350098
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 103,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "If Young lectures fourth and Taylor lectures first, then which one of the following must be true?",
      "options": [
        "A) Powell lectures no earlier than sixth",
        "B) Shihab lectures second.",
        "C) Vaughan lectures no later than third.",
        "D) Wood lectures seventh.",
        "E) Zabel lectures no earlier than sixth."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel))))",
        "(declare-datatypes ((Lectures 0)) (((first) (second) (third) (fourth) (fifth) (sixth) (seventh)))",
        "(declare-fun lectures (Professors) Lectures)"
      ],
      "constraints": [
        "(forall ((p Professors)) (distinct (lectures p) (lectures p)))",
        "(distinct (lectures Powell) (lectures Wood))",
        "(distinct (lectures Taylor) (lectures Shihab))",
        "(distinct (lectures Vaughan) (lectures Zabel))",
        "(<= (index (lectures Shihab)) 3)",
        "(≠ (index (lectures Young)) 7)",
        "(=> (and (= (index (lectures Young)) 4) (= (index (lectures Taylor)) 1)) (and (= (index (lectures Powell)) 1) (distinct (lectures Powell) (lectures Vaughan))))"
      ],
      "options": [
        "(=> (and (= (index (lectures Young)) 4) (= (index (lectures Taylor)) 1)) (>= (index (lectures Powell)) 6))",
        "(=> (and (= (index (lectures Young)) 4) (= (index (lectures Taylor)) 1)) (= (index (lectures Shihab)) 2))",
        "(=> (and (= (index (lectures Young)) 4) (= (index (lectures Taylor)) 1)) (<= (index (lectures Vaughan)) 3))",
        "(=> (and (= (index (lectures Young)) 4) (= (index (lectures Taylor)) 1)) (= (index (lectures Wood)) 7))",
        "(=> (and (= (index (lectures Young)) 4) (= (index (lectures Taylor)) 1)) (>= (index (lectures Zabel)) 6))"
      ],
      "type": "sat",
      "perplexity": [
        1.118493914604187,
        1.0200163125991821
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 104,
    "nl_problem": {
      "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
      "question": "If Zabel lectures fourth, then which one of the following could be true?",
      "options": [
        "A) Powell lectures second.",
        "B) Powell lectures seventh.",
        "C) Wood lectures third.",
        "D) Young lectures second.",
        "E) Young lectures sixth."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Professors 0)) (((Powell) (Shihab) (Taylor) (Vaughan) (Wood) (Young) (Zabel))))",
        "(declare-datatypes ((Lectures 0)) (((first) (second) (third) (fourth) (fifth) (sixth) (seventh)))",
        "(declare-fun lectures (Professors Lectures) Bool)"
      ],
      "constraints": [
        "(forall ((p Professors)) (<= (count (+ (and (lectures p first) (distinct p (Shihab))) (and (lectures p second) (distinct p (Shihab))) (and (lectures p third) (distinct p (Shihab))) (and (lectures p fourth) (distinct p (Shihab))) (and (lectures p fifth) (distinct p (Shihab))) (and (lectures p sixth) (distinct p (Shihab))) (and (lectures p seventh) (distinct p (Shihab))))) 1))",
        "(implies (lectures Powell first) (and (not (lectures Young sixth)) (not (lectures Young seventh))))",
        "(implies (lectures Powell first) (and (not (lectures Young first)) (not (lectures Young second)) (not (lectures Young third))))",
        "(implies (and (lectures Powell first) (not (lectures Young first))) (lectures Young second))"
      ],
      "options": [
        "(and (lectures Zabel fourth) (lectures Powell second))",
        "(and (lectures Zabel fourth) (lectures Powell seventh))",
        "(and (lectures Zabel fourth) (lectures Wood third))",
        "(and (lectures Zabel fourth) (lectures Young second))",
        "(and (lectures Zabel fourth) (lectures Young sixth))"
      ],
      "type": "sat",
      "perplexity": [
        1.169506549835205,
        1.0118359327316284
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 105,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If aisle 1 contains Hobbies only, which one of the following could be true?",
      "options": [
        "A) Fantasy is located in aisle 3.",
        "B) Music is located in aisle 2.",
        "C) Puzzles is located in aisle 2.",
        "D) Reading is located in aisle 3.",
        "E) Science is located in aisle 3."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Aisles 0)) (((1) (2) (3)))",
        "(declare-datatypes ((Sections 0)) (((Fantasy) (Hobbies) (Music) (Puzzles) (Reading) (Science)))",
        "(declare-fun located (Sections Aisles) Bool)"
      ],
      "constraints": [
        "(forall ((s Sections)) (exists ((a Aisles)) (located s a)))",
        "(forall ((a Aisles)) (<= (card (filter (lambda (s) (located s a)) Sections)) 1))",
        "(or (and (located Reading Fantasy) (located Reading Music)))",
        "(and (located Fantasy a1) (located Music a2) (located Puzzles a3) (< a1 a2) (< a1 a3))",
        "(and (located Science a1) (located Puzzles a2) (< a1 a2))",
        "(and (located Science a1) (located Hobbies a2) (>= a1 a2))",
        "(located Hobbies 1)"
      ],
      "options": [
        "(located Fantasy 3)",
        "(located Music 2)",
        "(located Puzzles 2)",
        "(located Reading 3)",
        "(located Science 3)"
      ],
      "type": "sat",
      "perplexity": [
        1.1268086433410645,
        1.0189868211746216
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 106,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If aisle 3 contains Puzzles only, which one of the following must be true?",
      "options": [
        "A) Fantasy is located in aisle 1.",
        "B) Hobbies is located in aisle 1.",
        "C) Music is located in aisle 1.",
        "D) Reading is located in aisle 1.",
        "E) Science is located in aisle 2."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Aisle 0)) (((1) (2) (3)))",
        "(declare-datatypes ((Sections 0)) (((Fantasy) (Hobbies) (Music) (Puzzles) (Reading) (Science)))",
        "(declare-fun located (Sections Aisle) Bool)"
      ],
      "constraints": [
        "(forall ((s Sections)) (exists ((a Aisle)) (located s a)))",
        "(forall ((a Aisle)) (>= (count (for ((s Sections)) (and (located s a) (distinct s (list (map (lambda (x) (distinct s x)) (list (list (Hobbies) (Fantasy) (Music) (Puzzles) (Reading) (Science))))))) 1)) 1))",
        "(or (and (located Reading 1) (located Fantasy 1)) (and (located Reading 1) (located Music 1)))",
        "(and (located Fantasy 1) (located Fantasy 2))",
        "(and (located Science 1) (located Science 2))",
        "(and (located Science 1) (located Science 2)) "
      ],
      "options": [
        "(located Fantasy 1)",
        "(located Hobbies 1)",
        "(located Music 1)",
        "(located Reading 1)",
        "(located Science 2)"
      ],
      "type": "sat",
      "perplexity": [
        1.1344817876815796,
        1.024257779121399
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 107,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If each aisle contains exactly two of the six sections, then Science must be located in the same aisle as",
      "options": [
        "A) Fantasy",
        "B) Hobbies",
        "C) Music",
        "D) Puzzles",
        "E) Reading"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Aisles 0)) (((1) (2) (3)))",
        "(declare-datatypes ((Sections 0)) (((Fantasy) (Hobbies) (Music) (Puzzles) (Reading) (Science)))",
        "(declare-fun located (Aisles Sections) Bool)"
      ],
      "constraints": [
        "(forall ((a Aisles)) (and (distinct (map (lambda (s) (located a s)) Sections)) (>= (count (filter (lambda (s) (located a s)) Sections)) 1)))",
        "(or (and (located 1 Reading) (located 1 Fantasy)) (and (located 1 Reading) (located 1 Music)))",
        "(and (not (located 1 Music)) (not (located 1 Puzzles)))",
        "(and (not (located 1 Science)) (not (located 2 Science)))",
        "(and (not (located 1 Hobbies)) (not (located 2 Hobbies)))"
      ],
      "options": [
        "(and (located 1 Science) (located 1 Hobbies))",
        "(and (located 2 Science) (located 2 Hobbies))",
        "(and (located 3 Science) (located 3 Hobbies))"
      ],
      "type": "sat",
      "perplexity": [
        1.1532156467437744,
        1.0188511610031128
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 108,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "Which one of the following CANNOT be the list of the sections located in aisle 2?",
      "options": [
        "A) Hobbies, Music",
        "B) Music, Reading",
        "C) Music, Science",
        "D) Hobbies, Music, Science",
        "E) Music, Reading, Science"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Aisles 0)) (((1) (2) (3)))",
        "(declare-datatypes ((Sections 0)) (((Fantasy) (Hobbies) (Music) (Puzzles) (Reading) (Science)))",
        "(declare-fun in-aisle (Sections Aisles) Bool)"
      ],
      "constraints": [
        "(forall ((s Sections)) (exists ((a Aisles)) (in-aisle s a)))",
        "(forall ((a Aisles)) (>= (count ((lambda (s) (and (in-aisle s a) (not (in-aisle s a)))) (Sections))) 1))",
        "(or (in-aisle Reading 1) (in-aisle Reading 2) (in-aisle Reading 3))",
        "(implies (in-aisle Reading 1) (or (in-aisle Fantasy 1) (in-aisle Music 1)))",
        "(implies (in-aisle Reading 2) (or (in-aisle Fantasy 2) (in-aisle Music 2)))",
        "(implies (in-aisle Reading 3) (or (in-aisle Fantasy 3) (in-aisle Music 3)))",
        "(implies (in-aisle Fantasy 1) (in-aisle Music 2))",
        "(implies (in-aisle Fantasy 2) (in-aisle Music 3))",
        "(implies (in-aisle Fantasy 3) (in-aisle Music 1))",
        "(implies (in-aisle Science 1) (in-aisle Puzzles 2))",
        "(implies (in-aisle Science 2) (in-aisle Puzzles 3))",
        "(implies (in-aisle Science 3) (in-aisle Puzzles 1))",
        "(implies (in-aisle Science 1) (in-aisle Hobbies 1))",
        "(implies (in-aisle Science 2) (in-aisle Hobbies 2))",
        "(implies (in-aisle Science 3) (in-aisle Hobbies 3))"
      ],
      "options": [
        "(and (in-aisle Hobbies 2) (in-aisle Music 2) (not (in-aisle Fantasy 2)))",
        "(and (in-aisle Music 2) (in-aisle Reading 2) (not (in-aisle Fantasy 2)))",
        "(and (in-aisle Music 2) (in-aisle Science 2) (not (in-aisle Fantasy 2)))",
        "(and (in-aisle Hobbies 2) (in-aisle Music 2) (in-aisle Science 2) (not (in-aisle Fantasy 2)))",
        "(and (in-aisle Music 2) (in-aisle Reading 2) (in-aisle Science 2) (not (in-aisle Fantasy 2)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.0800458192825317,
        1.0097039937973022
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 109,
    "nl_problem": {
      "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
      "question": "If aisle 2 contains Science only, then each of the following must be true EXCEPT:",
      "options": [
        "A) Fantasy is located in aisle 1.",
        "B) Hobbies is located in aisle 1.",
        "C) Music is located in aisle 3.",
        "D) Puzzles is located in aisle 3.",
        "E) Reading is located in aisle 1."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Aisle 0)) (((1) (2) (3)))",
        "(declare-datatypes ((Sections 0)) (((Fantasy) (Hobbies) (Music) (Puzzles) (Reading) (Science)))",
        "(declare-fun in-aisle (Sections Aisle) Bool)"
      ],
      "constraints": [
        "(forall ((s Sections)) (exists ((a Aisle)) (in-aisle s a)))",
        "(forall ((a Aisle)) (>= (card (filter (lambda (s) (in-aisle s a)) (Sections)) 1)))",
        "(or (and (in-aisle Reading Fantasy) (in-aisle Reading Music)) (not (in-aisle Reading Fantasy)) (not (in-aisle Reading Music)))",
        "(and (in-aisle Fantasy 1) (<= 1 2) (<= 1 3))",
        "(and (in-aisle Science 1) (<= 1 2) (<= 2 3))",
        "(and (in-aisle Science 1) (<= 1 2) (<= 2 3))"
      ],
      "options": [
        "(not (and (in-aisle Fantasy 1) (in-aisle Science 2)))",
        "(not (and (in-aisle Hobbies 1) (in-aisle Science 2)))",
        "(not (and (in-aisle Music 3) (in-aisle Science 2)))",
        "(not (and (in-aisle Puzzles 3) (in-aisle Science 2)))",
        "(not (and (in-aisle Reading 1) (in-aisle Science 2)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0995491743087769,
        1.0152299404144287
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 110,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "Which one of the following is an allowable way of designating subzones within the three zones?",
      "options": [
        "A) Z1: no designated subzones Z2: one housing subzone, two retail subzones Z3: one industrial subzone, one retail subzone",
        "B) Z1: one housing subzone, one industrial subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, one retail subzone",
        "C) Z1: one housing subzone, one retail subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, one retail subzone",
        "D) Z1: one industrial subzone Z2: three housing subzones Z3: three retail subzones",
        "E) Z1: one industrial subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, two retail subzones"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Zones 0)) (((Z1) (Z2) (Z3))))",
        "(declare-datatypes ((Uses 0)) (((housing) (industrial) (retail)))",
        "(declare-fun subzone (Zones Uses) Bool)"
      ],
      "constraints": [
        "(forall ((z Zones) (u Uses)) (=> (and (= z Z1) (= u retail)) false))",
        "(forall ((z Zones)) (<= (count (filter (lambda (u) (= u housing)) (map (lambda (z) (subzone z housing)) Zones))) 2))",
        "(forall ((z Zones)) (<= (count (filter (lambda (u) (= u retail)) (map (lambda (z) (subzone z retail)) Zones))) (if (>= (count (filter (lambda (u) (= u housing)) (map (lambda (z) (subzone z housing)) Zones))) 1 0 1)))",
        "(forall ((z Zones)) (=> (and (exists ((u Uses)) (and (= u housing) (subzone z u))) (>= (count (filter (lambda (u) (= u retail)) (map (lambda (z) (subzone z retail)) Zones))) 3) false)))"
      ],
      "options": [
        "Option A Constraints Here",
        "Option B Constraints Here",
        "Option C Constraints Here",
        "etc..."
      ],
      "type": "sat",
      "perplexity": [
        1.2183372974395752,
        1.101324200630188
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 111,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "Which one of the following CANNOT be true within a single zone?",
      "options": [
        "A) Two subzones are designated, one housing and one retail.",
        "B) Two subzones are designated, one industrial and one retail.",
        "C) Three subzones are designated, all of them retail.",
        "D) Four subzones are designated, none of them industrial.",
        "E) Four subzones are designated, two retail and two industrial."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Zones 0)) (((Z1) (Z2) (Z3))))",
        "(declare-datatypes ((Uses 0)) (((housing) (industrial) (retail)))",
        "(declare-fun designated (Zones Uses) Bool)",
        "(declare-fun count (Uses Zones) Int)"
      ],
      "constraints": [
        "(forall ((z Zones) (u Uses)) (<= (count u z) 3))",
        "(forall ((z Zones)) (not (and (designated z retail) (designated z housing))))",
        "(forall ((z Zones)) (<= (count housing z) 2))",
        "(forall ((z Zones)) (<= (count retail z) (if (and (designated z housing) (count housing z > 0)) 1 3)))",
        "(forall ((z Zones)) (not (and (designated z industrial) (designated z housing) (designated z retail))))"
      ],
      "options": [
        "(not (and (count housing z 2) (count retail z 1) (not (designated z industrial))))",
        "(not (and (count industrial z 1) (count retail z 1) (not (designated z housing))))",
        "(not (and (count retail z 3) (not (designated z housing))))",
        "(not (and (count retail z 0) (count industrial z 0) (count housing z 4)))",
        "(not (and (count retail z 2) (count industrial z 2) (not (designated z housing))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1909617185592651,
        1.0082528591156006
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 112,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "What is the maximum number of designated subzones allowed in Z3?",
      "options": [
        "A) 2",
        "B) 3",
        "C) 4",
        "D) 5",
        "E) 6"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Zone 0)) (((Z1) (Z2) (Z3))))",
        "(declare-datatypes ((Use 0)) (((housing) (industrial) (retail)))",
        "(declare-fun allowed-in (Zone Use) Bool)",
        "(declare-fun count-subzones (Zone Use) Int)"
      ],
      "constraints": [
        "(forall ((z Zone) (u Use)) (=> (allowed-in z u) (<= (count-subzones z u) 3)))",
        "(forall ((z Zone) (u Use)) (=> (and (distinct (Use) (housing)) (distinct (Use) (retail)) (distinct (Use) (industrial))) (not (and (allowed-in z housing) (allowed-in z retail) (allowed-in z industrial))))",
        "(forall ((z Zone)) (=> (and (allowed-in z retail) (distinct (Zone) (Z1))) (not (allowed-in Z1 retail)))",
        "(forall ((z Zone)) (=> (and (allowed-in z housing) (distinct (Zone) (Z1))) (<= (count-subzones z housing) 2)))",
        "(forall ((z Zone)) (=> (and (allowed-in z housing) (allowed-in z retail)) (<= (count-subzones z retail) 1)))",
        "(forall ((z Zone)) (=> (and (allowed-in z retail) (>= (count-subzones z retail) 3)) (not (allowed-in z industrial))))"
      ],
      "options": [
        "(let ((max-subzones-z3 (count-subzones Z3 *))) (>= max-subzones-z3 2))",
        "(let ((max-subzones-z3 (count-subzones Z3 *))) (>= max-subzones-z3 3))",
        "(let ((max-subzones-z3 (count-subzones Z3 *))) (>= max-subzones-z3 4))",
        "(let ((max-subzones-z3 (count-subzones Z3 *))) (>= max-subzones-z3 5))",
        "(let ((max-subzones-z3 (count-subzones Z3 *))) (>= max-subzones-z3 6))"
      ],
      "type": "sat",
      "perplexity": [
        1.1464447975158691,
        1.0136045217514038
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 113,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "If three subzones are designated for each use, then which one of the following is allowed?",
      "options": [
        "A) Exactly one subzone in Z3 is designated for industrial use and exactly one subzone in Z3 is designated for retail use.",
        "B) Exactly two subzones in Z2 are designated for housing.",
        "C) Three subzones in Z1 are designated for industrial use.",
        "D) Three subzones in Z2 are designated for industrial use and exactly one subzone in Z2 is designated for retail use.",
        "E) Three subzones in Z3 are designated for retail use."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Zones 0)) (((Z1) (Z2) (Z3))))",
        "(declare-datatypes ((Uses 0)) (((housing) (industrial) (retail)))",
        "(declare-fun subzone (Zones Uses) Bool)"
      ],
      "constraints": [
        "(forall ((z Zones) (u Uses)) (<= (count (filter (lambda (x) (and (= (subzone z x) true))) Uses)) 3))",
        "(forall ((z Zones) (u Uses)) (distinct (filter (lambda (x) (and (= (subzone z x) true))) Uses)))",
        "(forall ((z Zones) (u Uses)) (not (= (subzone z retail) true)))",
        "(forall ((z Zones) (u Uses)) (not (= (subzone z housing) true)))",
        "(forall ((z Zones) (u Uses)) (not (and (subzone z housing) (subzone z retail) (>= (count (filter (lambda (x) (= (subzone z x) retail)) Uses)) 2))))",
        "(forall ((z Zones) (u Uses)) (not (and (subzone z industrial) (subzone z housing) (>= (count (filter (lambda (x) (= (subzone z x) retail)) Uses)) 3))))"
      ],
      "options": [
        "(and (subzone Z3 industrial) (subzone Z3 retail) (>= (count (filter (lambda (x) (= (subzone Z3 x) retail)) Uses)) 1))",
        "(and (subzone Z2 housing) (subzone Z2 housing) (subzone Z2 housing))",
        "(and (subzone Z1 industrial) (subzone Z1 industrial) (subzone Z1 industrial))",
        "(and (subzone Z2 industrial) (subzone Z2 industrial) (subzone Z2 industrial) (subzone Z2 retail))",
        "(and (subzone Z3 retail) (subzone Z3 retail) (subzone Z3 retail))"
      ],
      "type": "sat",
      "perplexity": [
        1.16122567653656,
        1.0129237174987793
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 114,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "If one subzone in each of the zones is designated for industrial use, then which one of the following is allowed?",
      "options": [
        "A) More subzones are designated for retail use in Z2 than in Z3.",
        "B) A subzone in one of the zones is designated for housing.",
        "C) Exactly two subzones are designated in Z1.",
        "D) Exactly three subzones each are designated in Z2 and Z3.",
        "E) Exactly four subzones are designated in Z3."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Zones 0)) (((Z1) (Z2) (Z3))))",
        "(declare-datatypes ((Uses 0)) (((housing) (industrial) (retail)))",
        "(declare-fun designated-for (Zones Uses) Bool)"
      ],
      "constraints": [
        "(forall ((z Zones) (u Uses)) (<= (and (designated-for z u) (designated-for z (Uses)) ) 1))",
        "(forall ((u Uses)) (<= (and (designated-for Z1 u) (= u retail)) 0))",
        "(forall ((z Zones)) (<= (count (lambda (x) (and (designated-for x housing) (designated-for x housing)))) 2))",
        "(forall ((z Zones)) (<= (count (lambda (x) (and (designated-for x housing) (designated-for x retail)))) 1))",
        "(forall ((z Zones)) (<= (count (lambda (x) (and (designated-for x industrial) (designated-for x housing)))) 0))",
        "(forall ((z Zones)) (<= (count (lambda (x) (and (designated-for x retail)))) 3))"
      ],
      "options": [
        "(and (designated-for Z2 retail) (<= (count (lambda (x) (and (designated-for x retail))) ) (count (lambda (x) (and (designated-for x retail))))))",
        "(exists ((z Zones) (u Uses)) (and (designated-for z u) (= u housing)))",
        "(and (designated-for Z1 housing) (designated-for Z1 industrial) (designated-for Z1 retail) )",
        "(and (designated-for Z2 industrial) (designated-for Z3 industrial) (and (designated-for Z2 housing) (designated-for Z3 housing)) (and (designated-for Z2 retail) (designated-for Z3 retail)) )",
        "(and (designated-for Z3 industrial) (and (designated-for Z3 housing) (designated-for Z3 retail)) (count (lambda (x) (and (designated-for x retail))) = 4))"
      ],
      "type": "sat",
      "perplexity": [
        1.177233099937439,
        1.020435094833374
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 115,
    "nl_problem": {
      "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
      "question": "If three subzones in all are designated for retail use and a subzone in Z2 is designated for housing, then which one of the following is allowed?",
      "options": [
        "A) Two subzones in Z1 are designated for housing.",
        "B) More subzones are designated for industrial use in Z2 than in Z3.",
        "C) More subzones are designated for retail use in Z2 than in Z3.",
        "D) The same number of subzones are designated for retail use in Z2 and Z3.",
        "E) A subzone in Z3 is designated for housing."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Zones 0)) (((Z1) (Z2) (Z3))))",
        "(declare-datatypes ((Uses 0)) (((housing) (industrial) (retail))))",
        "(declare-fun designated (Zones Uses) Bool)"
      ],
      "constraints": [
        "(forall ((z Zones) (u Uses)) (<= (count (filter (lambda (p) (and (= (car p) z) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) 1))",
        "(forall ((u Uses)) (<= (count (filter (lambda (p) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) 3))",
        "(forall ((z Zones) (u Uses)) (and (= z Z1) (= u retail) -> false))",
        "(forall ((z Zones) (u Uses)) (and (= u housing) <= (count (filter (lambda (p) (and (= (car p) z) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) 2))",
        "(forall ((z Zones) (u Uses)) (and (= u retail) (exists ((z2 Zones) (u2 Uses)) (and (= z2 z) (= u2 housing))) -> false))",
        "(forall ((z Zones) (u Uses)) (and (= u industrial) (exists ((z2 Zones) (u2 Uses)) (and (= z2 z) (= u2 housing))) -> false))",
        "(forall ((z Zones) (u Uses)) (and (= u retail) (>= (count (filter (lambda (p) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) 3) -> false))"
      ],
      "options": [
        "(forall ((z Zones) (u Uses)) (and (= z Z2) (= u housing) -> (exists ((z3 Zones) (u3 Uses)) (and (= z3 Z1) (= u3 housing))))",
        "(forall ((z Zones) (u Uses)) (and (= z Z2) (= u industrial) >= (count (filter (lambda (p) (and (= (car p) z) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) (count (filter (lambda (p) (and (= (car p) Z3) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) ) )",
        "(forall ((z Zones) (u Uses)) (and (= z Z2) (= u retail) >= (count (filter (lambda (p) (and (= (car p) z) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) (count (filter (lambda (p) (and (= (car p) Z3) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) ) )",
        "(forall ((z Zones) (u Uses)) (and (= z Z2) (= u retail) = (count (filter (lambda (p) (and (= (car p) z) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) (count (filter (lambda (p) (and (= (car p) Z3) (= (cadr p) u))) [(Z1 housing) (Z1 industrial) (Z1 retail) (Z2 housing) (Z2 industrial) (Z2 retail) (Z3 housing) (Z3 industrial) (Z3 retail)])) ) )",
        "(forall ((z Zones) (u Uses)) (and (= z Z3) (= u housing) -> true))"
      ],
      "type": "sat",
      "perplexity": [
        1.0594031810760498,
        1.0056703090667725
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 116,
    "nl_problem": {
      "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
      "question": "Which one of the following could be the order in which the manuscripts were written, from first to last?",
      "options": [
        "A) F, M, G, H, P, L, S",
        "B) G, P, M, F, H, S, L",
        "C) H, F, M, G, P, L, S",
        "D) L, F, M, G, P, H, S",
        "E) M, F, H, S, L, G, P"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Manuscripts 0)) (((F) (G) (H) (L) (M) (P) (S)))",
        "(declare-sort Order (Finite 7))",
        "(declare-fun before (Order Order) Bool)"
      ],
      "constraints": [
        "(forall ((o1 Order) (o2 Order)) (distinct o1 o2))",
        "(=> (before (cons F o1) (cons S o2)) (before (cons H o1) (cons F o2)))",
        "(=> (before (cons P o1) (cons G o2)) (before (cons G o1) (cons P o2)))",
        "(forall ((o Order)) (>= (card (filter ((lambda (x) (< x L)) o))) 4))",
        "(forall ((o Order)) (>= (card (filter ((lambda (x) (> x M)) o))) 4))",
        "(not (member (cons H 4) o)) "
      ],
      "options": [
        "(forall ((o Order)) (= (o (cons F M G H P L S))))",
        "(forall ((o Order)) (= (o (cons G P M F H S L))))",
        "(forall ((o Order)) (= (o (cons H F M G P L S))))",
        "(forall ((o Order)) (= (o (cons L F M G P H S))))",
        "(forall ((o Order)) (= (o (cons M F H S L G P))))"
      ],
      "type": "sat",
      "perplexity": [
        1.2352409362792969,
        1.0286198854446411
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 117,
    "nl_problem": {
      "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
      "question": "Which one of the following manuscripts CANNOT have been written third?",
      "options": [
        "A) S",
        "B) P",
        "C) M",
        "D) H",
        "E) G"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Manuscripts 0)) (((F) (G) (H) (L) (M) (P) (S))))",
        "(declare-fun written_before (Manuscripts Manuscripts) Bool)"
      ],
      "constraints": [
        "(forall ((m1 Manuscripts) (m2 Manuscripts)) (=> (and (not (= m1 m2)) (written_before m1 m2)) (not (written_before m2 m1))))",
        "(and (written_before H S) (written_before F H))",
        "(written_before P G)",
        "(>= (count_written_before L) 4)",
        "(>= (count_written_after M) 4)",
        "(not (and (>= (count_manuscripts_before H 4) 1) (= (count_manuscripts_before H 4))))"
      ],
      "options": [
        "(not (and (written_before S 2) (written_before 3 S)))",
        "(not (and (written_before P 2) (written_before 3 P)))",
        "(not (and (written_before M 2) (written_before 3 M)))",
        "(not (and (written_before H 2) (written_before 3 H)))",
        "(not (and (written_before G 2) (written_before 3 G)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1914308071136475,
        1.016510009765625
      ],
      "answer": "A",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 118,
    "nl_problem": {
      "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
      "question": "If H was the next manuscript written after M, which one of the following could be true?",
      "options": [
        "A) F was written second.",
        "B) G was written third.",
        "C) H was written fourth.",
        "D) P was written third.",
        "E) S was written fourth."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(define-fun before ((a string) (b string)) Bool)",
        "(declare-datatypes ((Manuscripts 0)) (((F) (G) (H) (L) (M) (P) (S))))",
        "(declare-fun written ((m Manuscripts)) Bool)",
        "(declare-fun next ((m1 Manuscripts) (m2 Manuscripts)) Bool)",
        "constraints\": [ 0 ] ",
        "options",
        "type",
        "unsat"
      ],
      "perplexity": [
        1.2625776529312134,
        1.9567780494689941
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    }
  },
  {
    "id": 119,
    "nl_problem": {
      "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
      "question": "Which one of the following manuscripts CANNOT have been written fourth?",
      "options": [
        "A) F",
        "B) G",
        "C) H",
        "D) P",
        "E) S"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Manuscripts 0)) (((F) (G) (H) (L) (M) (P) (S))))",
        "(declare-fun before (Manuscripts Manuscripts) Bool)",
        "(declare-fun fourth (Manuscripts) Bool)"
      ],
      "constraints": [
        "(forall ((a Manuscripts) (b Manuscripts)) (=> (before a b) (not (before b a))))",
        "(before H S)",
        "(before F H)",
        "(before P G)",
        "(>= (count (filter (lambda (x) (before x L)) Manuscripts)) 4)",
        "(>= (count (filter (lambda (x) (before L x)) Manuscripts)) 4)",
        "(not (and (before H (nth 4 Manuscripts)) (not (before (nth 4 Manuscripts) H))))"
      ],
      "options": [
        "(not (fourth F))",
        "(not (fourth G))",
        "(not (fourth H))",
        "(not (fourth P))",
        "(not (fourth S))"
      ],
      "type": "sat",
      "perplexity": [
        1.1628034114837646,
        1.0292237997055054
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 120,
    "nl_problem": {
      "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
      "question": "If P was written earlier than H, then any of the following could be true EXCEPT:",
      "options": [
        "A) F was written first.",
        "B) G was written third.",
        "C) H was written sixth.",
        "D) L was written seventh.",
        "E) M was written second."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Manuscripts 0)) (((F) (G) (H) (L) (M) (P) (S)))",
        "(declare-datatypes ((Orders 0)) (((first) (second) (third) (fourth) (fifth) (sixth) (seventh)))",
        "(declare-fun written_before (Manuscripts Manuscripts) Bool)"
      ],
      "constraints": [
        "(forall ((m1 Manuscripts) (m2 Manuscripts)) (not (= m1 m2)))",
        "(and (written_before H S) (written_before F H))",
        "(written_before P G)",
        "(>= (count (filter (lambda (m) (written_before m L)) Manuscripts)) 4)",
        "(>= (count (filter (lambda (m) (written_before M m)) Manuscripts)) 4)",
        "(not (and (written_before H (nth 4 Manuscripts)) (written_before (nth 4 Manuscripts) H)))",
        "(implies (written_before P H) (or (written_before F (nth 1 Manuscripts)) (written_before G (nth 2 Manuscripts)) (written_before H (nth 6 Manuscripts)) (written_before L (nth 7 Manuscripts)) (written_before M (nth 2 Manuscripts))))"
      ],
      "options": [
        "(and (written_before F (nth 1 Manuscripts)))",
        "(written_before G (nth 3 Manuscripts))",
        "(written_before H (nth 6 Manuscripts))",
        "(written_before L (nth 7 Manuscripts))",
        "(written_before M (nth 2 Manuscripts))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1094189882278442,
        1.0097891092300415
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 121,
    "nl_problem": {
      "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
      "question": "Which one of the following is an acceptable placement of dishes on the bottom, middle, and top shelves?",
      "options": [
        "A) bottom: dish 1 middle: dish 6 top: dishes 2, 3, 4, 5",
        "B) bottom: dishes 1, 3 middle: dish 6 top: dishes 2, 4, 5",
        "C) bottom: dish 2 middle: dishes 4, 6 top: dishes 1, 3, 5",
        "D) bottom: dishes 3, 5 middle: dish 6 top: dishes 1, 2, 4",
        "E) bottom: dishes 4, 6 middle: dishes 1, 3 top: dishes 2, 5"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Shelves 0)) (((bottom) (middle) (top)))",
        "(declare-datatypes ((Dishes 0)) (((dish1) (dish2) (dish3) (dish4) (dish5) (dish6)))",
        "(declare-fun on-shelf (Dishes Shelves) Bool)"
      ],
      "constraints": [
        "(forall ((s Shelves)) (<= (count (filter (lambda (x) (and (on-shelf x s) (not (null x)))) Dishes)) 3))",
        "(and (not (on-shelf dish2 bottom)) (not (on-shelf dish6 bottom)) (or (on-shelf dish2 middle) (on-shelf dish2 top)) (or (on-shelf dish6 middle) (on-shelf dish6 top)))",
        "(or (and (on-shelf dish6 (distinct s dish5)) (on-shelf dish5 (distinct s dish6))) (and (on-shelf dish6 (distinct s dish5)) (on-shelf dish5 (distinct s dish6)))",
        "(and (not (on-shelf dish1 bottom)) (not (on-shelf dish4 bottom))) (or (on-shelf dish1 middle) (on-shelf dish1 top)) (or (on-shelf dish4 middle) (on-shelf dish4 top))"
      ],
      "options": [
        "(and (on-shelf dish1 bottom) (on-shelf dish6 middle) (on-shelf dish2 top) (on-shelf dish3 top) (on-shelf dish4 top) (on-shelf dish5 top))",
        "(and (on-shelf dish1 bottom) (on-shelf dish3 bottom) (on-shelf dish6 middle) (on-shelf dish2 top) (on-shelf dish4 top) (on-shelf dish5 top))",
        "(and (on-shelf dish2 bottom) (on-shelf dish4 middle) (on-shelf dish6 middle) (on-shelf dish1 top) (on-shelf dish3 top) (on-shelf dish5 top))",
        "(and (on-shelf dish3 bottom) (on-shelf dish5 bottom) (on-shelf dish6 middle) (on-shelf dish1 top) (on-shelf dish2 top) (on-shelf dish4 top))",
        "(and (on-shelf dish4 bottom) (on-shelf dish6 bottom) (on-shelf dish1 middle) (on-shelf dish3 middle) (on-shelf dish2 top) (on-shelf dish5 top))"
      ],
      "type": "sat",
      "perplexity": [
        1.0996829271316528,
        1.0100610256195068
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 122,
    "nl_problem": {
      "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
      "question": "If dish 6 is the only dish stored on the bottom shelf, which one of the following could be the list of dishes that are stored together on the middle shelf?",
      "options": [
        "A) dish 1, dish 3",
        "B) dish 2, dish 4",
        "C) dish 2, dish 3",
        "D) dish 3, dish 5",
        "E) dish 4, dish 5"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Dishes 0)) (((dish1) (dish2) (dish3) (dish4) (dish5) (dish6))))",
        "(declare-datatypes ((Shelves 0)) (((bottom) (middle) (top)))",
        "(declare-fun on-shelf (Dishes Shelves) Bool)"
      ],
      "constraints": [
        "(forall ((s Shelves)) (<= (count (+ (ite (on-shelf dish1 s) 1 0) (ite (on-shelf dish2 s) 1 0) (ite (on-shelf dish3 s) 1 0) (ite (on-shelf dish4 s) 1 0) (ite (on-shelf dish5 s) 1 0) (ite (on-shelf dish6 s) 1 0))) 3))",
        "(implies (on-shelf dish2 bottom) (not (on-shelf dish6 bottom)))",
        "(or (implies (on-shelf dish6 middle) (on-shelf dish5 top)) (implies (on-shelf dish6 top) (on-shelf dish5 middle)))",
        "(implies (on-shelf dish1 s) (not (on-shelf dish4 s)))"
      ],
      "options": [
        "(and (on-shelf dish1 middle) (on-shelf dish3 middle))",
        "(and (on-shelf dish2 middle) (on-shelf dish4 middle))",
        "(and (on-shelf dish2 middle) (on-shelf dish3 middle))",
        "(and (on-shelf dish3 middle) (on-shelf dish5 middle))",
        "(and (on-shelf dish4 middle) (on-shelf dish5 middle))",
        " ",
        "type",
        "sat"
      ],
      "perplexity": [
        1.0905262231826782,
        1.1700984239578247
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    }
  },
  {
    "id": 123,
    "nl_problem": {
      "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
      "question": "If dish 1, dish 2, and dish 3 are stored on the same shelf as each other, which one of the following could be true?",
      "options": [
        "A) Exactly one of the dishes is stored on the top shelf.",
        "B) Exactly two of the dishes are stored on the top shelf.",
        "C) Exactly two of the dishes are stored on the middle shelf.",
        "D) Exactly three of the dishes are stored on the middle shelf.",
        "E) Exactly three of the dishes are stored on the bottom shelf."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Dishes 0)) (((dish1) (dish2) (dish3) (dish4) (dish5) (dish6))))",
        "(declare-datatypes ((Shelves 0)) (((bottom) (middle) (top)))",
        "(declare-fun on-shelf (Dishes Shelves) Bool)"
      ],
      "constraints": [
        "(forall ((s Shelves)) (<= (count ((lambda (d) (and (on-shelf d s) (distinct d (dish1) (dish2) (dish3) (dish4) (dish5) (dish6)))) (dish1) (dish2) (dish3) (dish4) (dish5) (dish6)) 3))",
        "(forall ((s Shelves)) (=> (on-shelf dish2 s) (not (on-shelf dish6 s) or (distinct s (bottom)))))",
        "(forall ((s Shelves)) (=> (on-shelf dish6 s) (or (on-shelf dish5 (distinct s (bottom))) (on-shelf dish5 (distinct s (top)))))",
        "(=> (not (on-shelf dish1 (same-shelf dish4))))"
      ],
      "options": [
        "(exists ((s Shelves)) (and (on-shelf dish1 s) (on-shelf dish2 s) (on-shelf dish3 s)))",
        0,
        "(exists ((s Shelves)) (and (on-shelf dish1 s) (on-shelf dish2 s) (on-shelf dish3 s) (distinct s (bottom))))",
        "(forall ((d Dishes)) (=> (not (on-shelf d s) or (distinct d (dish1) (dish2) (dish3))))"
      ],
      "type": "sat",
      "perplexity": [
        1.2713615894317627,
        1.1095795631408691
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 124,
    "nl_problem": {
      "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
      "question": "If exactly one of the shelves has no dish stored on it, which one of the following must be true?",
      "options": [
        "A) Exactly three of the dishes are stored on the bottom shelf.",
        "B) Exactly three of the dishes are stored on the middle shelf.",
        "C) Dish 1 is stored on the same shelf as dish 5.",
        "D) Dish 2 is stored on the same shelf as dish 3.",
        "E) Dish 4 is stored on the same shelf as dish 5."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Dishes 0)) (((dish1) (dish2) (dish3) (dish4) (dish5) (dish6)))",
        "(declare-datatypes ((Shelves 0)) (((bottom) (middle) (top)))",
        "(declare-fun stored (Dishes Shelves) Bool)"
      ],
      "constraints": [
        "(forall ((s Shelves)) (<= (count (lambda (d) (and (stored d s) (distinct d dish1 dish2 dish3 dish4 dish5 dish6))) 3))",
        "(forall ((s Shelves)) (>= (count (lambda (d) (and (stored d s) (distinct d dish1 dish2 dish3 dish4 dish5 dish6))) 1))",
        "(implies (stored dish2 _ ) (or (stored dish6 _ ) (and (distinct (shelf) (bottom)) (stored dish6 (succ s)))))",
        "(implies (stored dish6 _ ) (or (stored dish5 _ ) (and (distinct (shelf) (bottom)) (stored dish5 (succ s)))))",
        "(not (and (stored dish1 _) (stored dish4 _)))"
      ],
      "options": [
        "(exists ((s Shelves)) (and (not (count (lambda (d) (and (stored d s) (distinct d dish1 dish2 dish3 dish4 dish5 dish6))) 0)) (and (distinct (shelf) (bottom)) (stored dish1 (succ s))))"
      ],
      "type": "sat",
      "perplexity": [
        1.3373914957046509,
        1.041672706604004
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 125,
    "nl_problem": {
      "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
      "question": "If dish 5 is the only dish stored on the bottom shelf and if exactly two of the dishes are stored on the middle shelf, then which one of the following is a pair of dishes that must be among the dishes stored on the top shelf?",
      "options": [
        "A) dish 1 and dish 2",
        "B) dish 1 and dish 6",
        "C) dish 2 and dish 3",
        "D) dish 2 and dish 4",
        "E) dish 3 and dish 4"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Dishes 0)) (((dish1) (dish2) (dish3) (dish4) (dish5) (dish6))))",
        "(declare-datatypes ((Shelves 0)) (((bottom) (middle) (top)))",
        "(declare-fun on-shelf (Dishes Shelves) Bool)"
      ],
      "constraints": [
        "(forall ((s Shelves)) (<= (count (filter (lambda (d) (and (on-shelf d s) (not (distinct d dish6)))) Dishes)) 3))",
        "(forall ((d Dishes)) (=> (and (distinct d dish6) (on-shelf d s1)) (or (distinct s1 (top)) (distinct s1 (bottom))))",
        "(forall ((d Dishes)) (=> (and (distinct d dish5) (on-shelf d s1)) (or (distinct s1 (middle)) (distinct s1 (top))))",
        "(forall ((d Dishes)) (=> (and (distinct d dish1) (distinct d dish4) (on-shelf d s)) (distinct s (bottom))))",
        "(and (on-shelf dish5 bottom) (= (count (filter (lambda (d) (and (on-shelf d middle) (not (distinct d dish5)))) Dishes)) 2))"
      ],
      "options": [
        "(and (on-shelf dish1 top) (on-shelf dish2 top))",
        "(and (on-shelf dish1 top) (on-shelf dish6 top))",
        "(and (on-shelf dish2 top) (on-shelf dish3 top))",
        "(and (on-shelf dish2 top) (on-shelf dish4 top))",
        "(and (on-shelf dish3 top) (on-shelf dish4 top))"
      ],
      "type": "sat",
      "perplexity": [
        1.1394869089126587,
        1.0137336254119873
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 126,
    "nl_problem": {
      "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
      "question": "If exactly one of the dishes is stored on the middle shelf, which one of the following could be the list of dishes stored on the top shelf?",
      "options": [
        "A) dish 1, dish 2",
        "B) dish 1, dish 5",
        "C) dish 2, dish 3",
        "D) dish 3, dish 4",
        "E) dish 3, dish 5"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Shelves 0)) (((bottom) (middle) (top)))",
        "(declare-datatypes ((Dishes 0)) (((dish1) (dish2) (dish3) (dish4) (dish5) (dish6)))",
        "(declare-fun on-shelf (Dishes Shelves) Bool)"
      ],
      "constraints": [
        "(forall ((s Shelves)) (<= (count (filter (lambda (d) (and (on-shelf d s) (distinct d dish2))) Dishes) 3))",
        "(forall ((s Shelves)) (<= (count (filter (lambda (d) (and (on-shelf d s) (distinct d dish6))) Dishes) 3))",
        "(implies (on-shelf dish2 s) (or (not (on-shelf dish6 (select s 1))) (not (on-shelf dish6 (select s -1))))",
        "(implies (on-shelf dish6 s) (or (on-shelf dish5 (select s 1)) (on-shelf dish5 (select s -1))))",
        "(not (and (on-shelf dish1 s) (on-shelf dish4 s)))"
      ],
      "options": [
        "(and (on-shelf dish1 (select middle -1)) (on-shelf dish2 (select middle -1)) ... )"
      ],
      "type": "sat",
      "perplexity": [
        1.1591719388961792,
        1.0319794416427612
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 127,
    "nl_problem": {
      "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
      "question": "Which one of the following could be the schedule of deliveries to the schools, from the first to the fourth?",
      "options": [
        "A) Juices: Hafford, Ferndale, Gladstone, Isley Snacks: Ferndale, Isley, Gladstone, Hafford",
        "B) Juices: Hafford, Isley, Ferndale, Gladstone Snacks: Isley, Ferndale, Gladstone, Hafford",
        "C) Juices: Isley, Ferndale, Gladstone, Hafford Snacks: Hafford, Ferndale, Gladstone, Isley",
        "D) Juices: Isley, Gladstone, Ferndale, Hafford Snacks: Ferndale, Gladstone, Hafford, Isley",
        "E) Juices: Isley, Hafford, Gladstone, Ferndale Snacks: Ferndale, Isley, Gladstone, Hafford"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Schools 0)) (((Ferndale) (Gladstone) (Hafford) (Isley))))",
        "(declare-datatypes ((Deliveries 0)) (((Juices) (Snacks)))",
        "(declare-fun delivered (Schools Deliveries) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((s Schools)) (and (not (delivered s Juices)) (not (delivered s Snacks))))",
        "(and (not (delivered Ferndale Snacks)) (delivered Hafford Snacks))",
        "(not (delivered Gladstone Juices 3))",
        "(delivered Gladstone Snacks 3)",
        "(delivered (first-school-juices) Snacks 4)"
      ],
      "options": [
        "(and (delivered Ferndale Juices 1) (delivered Hafford Juices 2) (delivered Gladstone Juices 3) (delivered Isley Juices 4) (delivered Ferndale Snacks 4) (delivered Isley Snacks 3) (delivered Gladstone Snacks 2) (delivered Hafford Snacks 1))",
        "(and (delivered Hafford Juices 1) (delivered Isley Juices 2) (delivered Ferndale Juices 3) (delivered Gladstone Juices 4) (delivered Isley Snacks 1) (delivered Ferndale Snacks 2) (delivered Gladstone Snacks 3) (delivered Hafford Snacks 4))",
        "(and (delivered Isley Juices 1) (delivered Ferndale Juices 2) (delivered Gladstone Juices 3) (delivered Hafford Juices 4) (delivered Hafford Snacks 1) (delivered Ferndale Snacks 2) (delivered Gladstone Snacks 3) (delivered Isley Snacks 4))",
        "(and (delivered Isley Juices 1) (delivered Gladstone Juices 2) (delivered Ferndale Juices 3) (delivered Hafford Juices 4) (delivered Ferndale Snacks 1) (delivered Gladstone Snacks 2) (delivered Hafford Snacks 3) (delivered Isley Snacks 4))",
        "(and (delivered Isley Juices 1) (delivered Hafford Juices 2) (delivered Gladstone Juices 3) (delivered Ferndale Juices 4) (delivered Ferndale Snacks 1) (delivered Isley Snacks 2) (delivered Gladstone Snacks 3) (delivered Hafford Snacks 4))"
      ],
      "type": "sat",
      "perplexity": [
        1.0808954238891602,
        1.0093989372253418
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 128,
    "nl_problem": {
      "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
      "question": "If Hafford is the fourth school to which juices are delivered, which one of the following must be true?",
      "options": [
        "A) Ferndale is the second school to which juices are delivered.",
        "B) Gladstone is the third school to which juices are delivered.",
        "C) Ferndale is the second school to which snacks are delivered.",
        "D) Hafford is the second school to which snacks are delivered.",
        "E) Isley is the first school to which snacks are delivered."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Schools 0)) (((Ferndale) (Gladstone) (Hafford) (Isley)))",
        "(declare-datatypes ((Deliveries 0)) (((juices) (snacks)))",
        "(declare-fun delivered_to (Schools Deliveries) Bool)",
        "(declare-fun position (Schools Deliveries) Int)"
      ],
      "constraints": [
        "(forall ((s Schools) (d Deliveries)) (<= (position s d) 4))",
        "(and (distinct (filter (lambda (s) (delivered_to s juices)) Schools)) (distinct (filter (lambda (s) (delivered_to s snacks)) Schools)))",
        "(forall ((s Schools)) (or (not (delivered_to s juices)) (not (delivered_to s snacks))))",
        "(exists ((s Schools)) (and (delivered_to s snacks) (position s snacks 1)))",
        "(exists ((s Schools)) (and (delivered_to s juices) (position s juices 1)))",
        "(forall ((s1 Schools) (s2 Schools)) (=> (and (delivered_to s1 snacks) (< position s1 snacks (position s2 snacks))) (delivered_to s2 snacks)))",
        "(forall ((s Schools)) (not (= (position s juices) 4)))",
        "(forall ((s Schools)) (not (= (position s snacks) 3)))",
        "(forall ((s Schools)) (=> (not (= (position s juices) 1)) (= (position s snacks 4))))",
        "(and (delivered_to Hafford juices) (position Hafford juices 4))"
      ],
      "options": [
        "(and (position Ferndale juices 2))",
        "(and (position Gladstone juices 3))",
        "(and (position Ferndale snacks 2))",
        "(and (position Hafford snacks 2))",
        "(and (position Isley snacks 1))",
        "type"
      ],
      "type": "sat",
      "perplexity": [
        1.1942551136016846,
        1.063199758529663
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 129,
    "nl_problem": {
      "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
      "question": "If Isley is the third school to which juices are delivered, which one of the following could be true?",
      "options": [
        "A) Juices are delivered to Gladstone at some time before they are delivered to Hafford.",
        "B) Juices are delivered to Isley at some time before they are delivered to Hafford.",
        "C) Snacks are delivered to Ferndale at some time before they are delivered to Isley.",
        "D) Snacks are delivered to Gladstone at some time before they are delivered to Isley.",
        "E) Snacks are delivered to Hafford at some time before they are delivered to Gladstone."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Schools 0)) (((Ferndale) (Gladstone) (Hafford) (Isley))))",
        "(declare-datatypes ((Deliveries 0)) (((juices) (snacks)))",
        "(declare-fun delivered (Schools Deliveries) Bool)",
        "(declare-fun order (Schools Deliveries) Int)"
      ],
      "constraints": [
        "(forall ((s Schools) (d Deliveries)) (distinct (order s d) (order s (other-delivery d))))",
        "(and (delivered Ferndale snacks) (and (forall ((s Schools)) (=> (delivered s snacks) (>= (order Ferndale snacks) (order s snacks))))))",
        "(and (not (delivered Gladstone juices)) (forall ((s Schools)) (=> (delivered s juices) (<> s Gladstone))))",
        "(and (delivered Gladstone snacks) (and (forall ((s Schools)) (=> (delivered s snacks) (>= (order Gladstone snacks) 3))))))",
        "(and (forall ((s Schools)) (=> (delivered s juices) (>= (order (first s) juices) 4))) (and (forall ((s Schools)) (=> (delivered s snacks) (>= (order (first s) snacks) 1)))))",
        "(and (delivered Isley juices) (<= (order Isley juices) 3))"
      ],
      "options": [
        "(delivered Gladstone juices)",
        "(delivered Isley juices)",
        "(delivered Ferndale snacks)",
        "(delivered Gladstone snacks)",
        "(delivered Hafford snacks)"
      ],
      "type": "sat",
      "perplexity": [
        1.21183443069458,
        1.015221357345581
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 130,
    "nl_problem": {
      "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
      "question": "If Isley is the first school to which snacks are delivered, which one of the following could be true?",
      "options": [
        "A) Ferndale is the second school to which juices are delivered.",
        "B) Hafford is the second school to which juices are delivered.",
        "C) Hafford is the third school to which juices are delivered.",
        "D) Isley is the first school to which juices are delivered.",
        "E) Hafford is the second school to which snacks are delivered."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Schools 0)) (((Ferndale) (Gladstone) (Hafford) (Isley))))",
        "(declare-datatypes ((Deliveries 0)) (((juices) (snacks)))",
        "(declare-fun delivered (Schools Deliveries) Bool)"
      ],
      "constraints": [
        "(forall ((s Schools)) (and (or (delivered s juices) (delivered s snacks)) (not (and (delivered s juices) (delivered s snacks))))",
        "(forall ((s1 Schools) (s2 Schools)) (=> (not (= s1 s2) (and (delivered s1 juices) (delivered s2 juices))))",
        "(forall ((s1 Schools) (s2 Schools)) (=> (not (= s1 s2) (and (delivered s1 snacks) (delivered s2 snacks))))",
        "(forall ((s1 Schools) (s2 Schools)) (=> (and (delivered s1 snacks) (delivered s2 snacks)) (<= (index-of s1) (index-of s2))))",
        "(not (and (delivered Gladstone juices) (= (index-of Gladstone) 4)))",
        "(and (delivered Gladstone snacks) (= (index-of Gladstone) 3)))",
        "(and (delivered (first-school-with-juices) snacks) (= (index-of (first-school-with-juices)) 4))) "
      ],
      "options": [
        "(and (delivered Isley snacks) (= (index-of Isley) 1))",
        "(and (delivered Ferndale juices) (= (index-of Ferndale) 2))",
        "(and (delivered Hafford juices) (= (index-of Hafford) 2))",
        "(and (delivered Hafford juices) (= (index-of Hafford) 3))",
        "(and (delivered Hafford snacks) (= (index-of Hafford) 2))",
        "type"
      ],
      "sat": "sat",
      "perplexity": [
        1.1591295003890991,
        1.1210397481918335
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": ""
    }
  },
  {
    "id": 131,
    "nl_problem": {
      "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
      "question": "Which one of the following could be true?",
      "options": [
        "A) Both juices and snacks are delivered to Gladstone at some time before they are delivered to Ferndale.",
        "B) Both juices and snacks are delivered to Gladstone at some time before they are delivered to Isley.",
        "C) Both juices and snacks are delivered to Hafford at some time before they are delivered to Isley.",
        "D) Both juices and snacks are delivered to Isley at some time before they are delivered to Ferndale.",
        "E) Both juices and snacks are delivered to Isley at some time before they are delivered to Hafford."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Schools 0)) (((Ferndale) (Gladstone) (Hafford) (Isley))))",
        "(declare-datatypes ((Deliveries 0)) (((juices) (snacks))))",
        "(declare-fun delivered (Schools Deliveries) Bool)"
      ],
      "constraints": [
        "(forall ((s Schools) (d Deliveries)) (and (not (delivered s d)) (not (delivered s (if (= d juices) snacks (if (= d snacks) juices d))))) )",
        "(forall ((s Schools) (d Deliveries)) (or (not (delivered s d)) (delivered s d)))",
        "(exists ((s Schools) (d Deliveries)) (and (delivered s d) (not (delivered s (if (= d juices) snacks (if (= d snacks) juices d))))) )",
        "(exists ((s Schools)) (and (delivered s juices) (not (delivered (if (distinct s Ferndale) Gladstone (if (distinct s Gladstone) Hafford (if (distinct s Hafford) Isley Isley)) ) juices))))",
        "(not (exists ((s Schools) (d Deliveries)) (and (delivered s d) (delivered (if (distinct s Gladstone) Ferndale (if (distinct s Ferndale) Hafford (if (distinct s Hafford) Isley Isley)) ) d)))))",
        "(exists ((s Schools) (d Deliveries)) (and (delivered s d) (delivered (if (distinct s Gladstone) Ferndale (if (distinct s Ferndale) Hafford (if (distinct s Hafford) Isley Isley)) ) d)))",
        "(exists ((s Schools) (d Deliveries)) (and (delivered s d) (delivered (if (distinct s (if (distinct s Ferndale) Gladstone (if (distinct s Gladstone) Hafford (if (distinct s Hafford) Isley Isley)) ) snacks) juices))))"
      ],
      "options": [
        "(exists ((s Schools) (d Deliveries)) (and (delivered s d) (delivered s (if (= d juices) snacks (if (= d snacks) juices d)))))",
        "(exists ((s Schools) (d Deliveries)) (and (delivered s d) (delivered (if (distinct s Gladstone) Ferndale (if (distinct s Ferndale) Hafford (if (distinct s Hafford) Isley Isley)) ) d))))",
        "(exists ((s Schools) (d Deliveries)) (and (delivered s d) (delivered (if (distinct s Isley) Ferndale (if (distinct s Ferndale) Gladstone (if (distinct s Gladstone) Hafford (if (distinct s Hafford) Isley Isley)) ) d))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1849125623703003,
        1.0129553079605103
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 132,
    "nl_problem": {
      "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
      "question": "Which one of the following, if substituted for the condition that Gladstone cannot be the fourth school to which juices are delivered, would have the same effect in determining the delivery schedule?",
      "options": [
        "A) Ferndale must be either the second school or the fourth school to which juices are delivered.",
        "B) Gladstone must be either the second school or the third school to which juices are delivered.",
        "C) Hafford must be either the first school or the fourth school to which juices are delivered.",
        "D) The first school to which juices are delivered must be either Ferndale or Isley.",
        "E) The fourth school to which juices are delivered must be either Hafford or Isley."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Schools 0)) (((Ferndale) (Gladstone) (Hafford) (Isley))))",
        "(declare-datatypes ((Deliveries 0)) (((juices) (snacks)))",
        "(declare-fun delivered (Schools Deliveries) Bool)",
        "(define-fun to-int ((b Bool)) Int (ite b 1 0))"
      ],
      "constraints": [
        "(forall ((s Schools)) (and (= (delivered s juices) 1) (= (delivered s snacks) 1)))",
        "(forall ((d Deliveries)) (and (= (count ((lambda (s) (and (delivered s d) (distinct s (schools)))) Ferndale) 1) (= (count ((lambda (s) (and (delivered s d) (distinct s (schools)))) Hafford) 1)) )",
        "(forall ((s Schools)) (and (distinct s (schools)) (distinct (schools) s)))",
        "(forall ((s Schools) (d Deliveries)) (and (not (delivered s d) (delivered s (other_delivery d)))))"
      ],
      "options": [
        "(forall ((s Schools)) (and (not (delivered s juices) (delivered s snacks))))",
        "(forall ((s Schools)) (and (delivered s juices) (not (delivered s snacks))))",
        "(forall ((s Schools)) (and (delivered s snacks) (not (delivered s juices))))"
      ],
      "type": "sat",
      "perplexity": [
        1.3675717115402222,
        1.10137140750885
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 133,
    "nl_problem": {
      "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
      "question": "Which one of the following could be the assignment of paralegals to cases?",
      "options": [
        "A) Raimes: Frank Sicoli: Gina, Hiro, Kevin Thompson: Laurie",
        "B) Raimes: Kevin Sicoli: Gina Thompson: Frank, Hiro, Laurie",
        "C) Raimes: Gina, Kevin Sicoli: Frank, Hiro Thompson: Laurie",
        "D) Raimes: Kevin, Laurie Sicoli: Gina, Hiro Thompson: Frank",
        "E) Raimes: Frank, Kevin, Laurie Sicoli: Hiro Thompson: Gina"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Paralegals 0)) (((Frank) (Gina) (Hiro) (Kevin) (Laurie))))",
        "(declare-datatypes ((Cases 0)) (((Raimes) (Sicoli) (Thompson)))",
        "(declare-fun assigned (Paralegals Cases) Bool)"
      ],
      "constraints": [
        "(forall ((p Paralegals)) (exists ((c Cases)) (assigned p c)))",
        "(or (and (assigned Frank Raimes) (assigned Kevin Thompson)) (and (not (assigned Frank Raimes)) (not (assigned Kevin Thompson))))",
        "(or (and (forall ((p Paralegals) (c Cases)) (not (and (assigned p c) (assigned p Raimes)))) (assigned Frank Raimes)) (and (forall ((p Paralegals) (c Cases)) (not (and (assigned p c) (assigned p Sicoli)))) (assigned Gina Sicoli)))",
        "(assigned Hiro Sicoli)"
      ],
      "options": [
        "(and (assigned Frank Raimes) (assigned Gina Sicoli) (assigned Hiro Sicoli) (assigned Kevin Thompson) (assigned Laurie Thompson))",
        "(and (assigned Kevin Raimes) (assigned Gina Sicoli) (assigned Hiro Sicoli) (assigned Frank Thompson) (assigned Laurie Thompson))",
        "(and (assigned Gina Raimes) (assigned Kevin Sicoli) (assigned Frank Sicoli) (assigned Hiro Sicoli) (assigned Laurie Thompson))",
        "(and (assigned Kevin Raimes) (assigned Laurie Sicoli) (assigned Gina Sicoli) (assigned Frank Thompson) (assigned Hiro Sicoli))",
        "(and (assigned Frank Raimes) (assigned Kevin Raimes) (assigned Laurie Raimes) (assigned Hiro Sicoli) (assigned Gina Thompson))"
      ],
      "type": "sat",
      "perplexity": [
        1.094139575958252,
        1.014710783958435
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 134,
    "nl_problem": {
      "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
      "question": "Which one of the following CANNOT be the complete assignment of paralegals to the Sicoli case?",
      "options": [
        "A) Frank, Hiro, Kevin",
        "B) Frank, Hiro, Laurie",
        "C) Gina, Hiro, Kevin",
        "D) Gina, Hiro, Laurie",
        "E) Hiro, Kevin, Laurie"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Paralegals 0)) (((Frank) (Gina) (Hiro) (Kevin) (Laurie))))",
        "(declare-datatypes ((Cases 0)) (((Raimes) (Sicoli) (Thompson))))",
        "(declare-fun assigned-to (Paralegals Cases) Bool)"
      ],
      "constraints": [
        "(forall ((p Paralegals)) (exists ((c Cases)) (assigned-to p c)))",
        "(exists ((p Paralegals)) (assigned-to p Raimes))",
        "(exists ((p Paralegals)) (assigned-to p Sicoli))",
        "(exists ((p Paralegals)) (assigned-to p Thompson))",
        "(or (and (assigned-to Frank Raimes) (assigned-to Kevin Thompson)) (and (not (assigned-to Frank Raimes)) (not (assigned-to Kevin Thompson))))",
        "(or (and (not (distinct (set-of (forall ((p Paralegals)) (if (assigned-to p Raimes) p '')))) (distinct (set-of (forall ((p Paralegals)) (if (assigned-to p Raimes) p '')))))) (and (not (distinct (set-of (forall ((p Paralegals)) (if (assigned-to p Sicoli) p '')))) (distinct (set-of (forall ((p Paralegals)) (if (assigned-to p Sicoli) p '')))))) )",
        "(assigned-to Hiro Sicoli)"
      ],
      "options": [
        "(not (or (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Kevin Sicoli)) (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Laurie Sicoli))))",
        "(not (or (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Kevin Sicoli)) (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Laurie Sicoli))))",
        "(not (or (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Kevin Sicoli)) (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Laurie Sicoli))))",
        "(not (or (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Kevin Sicoli)) (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Laurie Sicoli))))",
        "(not (or (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Kevin Sicoli)) (and (assigned-to Frank Sicoli) (assigned-to Hiro Sicoli) (assigned-to Laurie Sicoli))))"
      ],
      "type": "sat",
      "perplexity": [
        1.1291955709457397,
        1.021775245666504
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 135,
    "nl_problem": {
      "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
      "question": "If exactly two of the paralegals are assigned to the Thompson case, then which one of the following could be the complete assignment of paralegals to the Raimes case?",
      "options": [
        "A) Gina",
        "B) Kevin",
        "C) Laurie",
        "D) Gina, Kevin",
        "E) Kevin, Laurie"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Paralegals 0)) (((Frank) (Gina) (Hiro) (Kevin) (Laurie)))",
        "(declare-datatypes ((Cases 0)) (((Raimes) (Sicoli) (Thompson)))",
        "(declare-fun assigned (Paralegals Cases) Bool)"
      ],
      "constraints": [
        "(and (>= (count (distinct (filter (lambda (x) (assigned Frank x)) Cases)) 1) (>= (count (distinct (filter (lambda (x) (assigned Gina x)) Cases)) 1) (>= (count (distinct (filter (lambda (x) (assigned Hiro x)) Cases)) 1) (>= (count (distinct (filter (lambda (x) (assigned Kevin x)) Cases)) 1) (>= (count (distinct (filter (lambda (x) (assigned Laurie x)) Cases)) 1)))",
        "(or (and (assigned Frank Raimes) (assigned Kevin Thompson)) (and (not (assigned Frank Raimes)) (not (assigned Kevin Thompson))))",
        "(or (and (not (and (distinct (filter (lambda (x) (assigned x Raimes)) Paralegals) (<> (length (filter (lambda (x) (assigned x Raimes)) Paralegals)) 1)) (distinct (filter (lambda (x) (assigned x Sicoli)) Paralegals) (<> (length (filter (lambda (x) (assigned x Sicoli)) Paralegals)) 1)) (distinct (filter (lambda (x) (assigned x Thompson)) Paralegals) (<> (length (filter (lambda (x) (assigned x Thompson)) Paralegals)) 1)))) (and (not (and (distinct (filter (lambda (x) (assigned x Raimes)) Paralegals) (<> (length (filter (lambda (x) (assigned x Raimes)) Paralegals)) 1)) (distinct (filter (lambda (x) (assigned x Sicoli)) Paralegals) (<> (length (filter (lambda (x) (assigned x Sicoli)) Paralegals)) 1)) (distinct (filter (lambda (x) (assigned x Thompson)) Paralegals) (<> (length (filter (lambda (x) (assigned x Thompson)) Paralegals)) 1)))) (and (not (and (distinct (filter (lambda (x) (assigned x Raimes)) Paralegals) (<> (length (filter (lambda (x) (assigned x Raimes)) Paralegals)) 1)) (distinct (filter (lambda (x) (assigned x Sicoli)) Paralegals) (<> (length (filter (lambda (x) (assigned x Sicoli)) Paralegals)) 1)) (distinct (filter (lambda (x) (assigned x Thompson)) Paralegals) (<> (length (filter (lambda (x) (assigned x Thompson)) Paralegals)) 1))))",
        "(assigned Hiro Sicoli)"
      ],
      "options": [
        "(and (assigned Frank Raimes) (assigned Gina Raimes))",
        "(and (assigned Frank Raimes) (assigned Kevin Raimes))",
        "(and (assigned Frank Raimes) (assigned Laurie Raimes))",
        "(and (assigned Gina Raimes) (assigned Kevin Raimes))",
        "(and (assigned Gina Raimes) (assigned Laurie Raimes))"
      ],
      "type": "sat",
      "perplexity": [
        1.0961368083953857,
        1.0112069845199585
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 136,
    "nl_problem": {
      "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
      "question": "If one of the cases has Gina and Laurie as the only paralegals assigned to it, then each of the following must be false EXCEPT:",
      "options": [
        "A) Frank is assigned to the Raimes case.",
        "B) Frank is assigned to the Sicoli case.",
        "C) Gina is assigned to the Raimes case.",
        "D) Kevin is assigned to the Raimes case.",
        "E) Laurie is assigned to the Thompson case."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Paralegals 0)) (((Frank) (Gina) (Hiro) (Kevin) (Laurie))))",
        "(declare-datatypes ((Cases 0)) (((Raimes) (Sicoli) (Thompson)))",
        "(declare-fun assigned (Paralegals Cases) Bool)"
      ],
      "constraints": [
        "(forall ((p Paralegals)) (and (exists ((c Cases)) (assigned p c)) (not (exists ((c1 Cases) (c2 Cases)) (and (/= c1 c2) (assigned p c1) (assigned p c2))))))",
        "(exists ((c Cases)) (and (assigned Frank c) (assigned Kevin (distinct c))) (or (exists ((c1 Cases)) (and (assigned Frank c1) (assigned Kevin (distinct c1))) (not (assigned Frank (distinct c1)))))",
        "(or (and (forall ((p Paralegals) (c Cases)) (not (and (assigned p c) (assigned (distinct p) c)))) (assigned Frank Raimes)) (and (forall ((p Paralegals) (c Cases)) (not (and (assigned p c) (assigned (distinct p) c)))) (assigned Gina Sicoli)))",
        "(assigned Hiro Sicoli)"
      ],
      "options": [
        "(and (assigned Gina (distinct Raimes)) (assigned Laurie (distinct Raimes)) (not (assigned Frank Raimes)))",
        "(and (assigned Gina (distinct Raimes)) (assigned Laurie (distinct Raimes)) (not (assigned Frank Sicoli)))",
        "(and (assigned Gina (distinct Raimes)) (assigned Laurie (distinct Raimes)) (not (assigned Gina Raimes)))",
        "(and (assigned Gina (distinct Raimes)) (assigned Laurie (distinct Raimes)) (not (assigned Kevin Raimes)))",
        "(and (assigned Gina (distinct Raimes)) (assigned Laurie (distinct Raimes)) (not (assigned Laurie Thompson)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.1285065412521362,
        1.011888861656189
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 137,
    "nl_problem": {
      "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
      "question": "Which one of the following CANNOT be the complete assignment of paralegals to the Thompson case?",
      "options": [
        "A) Gina",
        "B) Laurie",
        "C) Gina, Kevin",
        "D) Gina, Laurie",
        "E) Kevin, Laurie"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Paralegals 0)) (((Frank) (Gina) (Hiro) (Kevin) (Laurie))))",
        "(declare-datatypes ((Cases 0)) (((Raimes) (Sicoli) (Thompson))))",
        "(declare-fun assigned (Paralegals Cases) Bool)"
      ],
      "constraints": [
        "(forall ((p Paralegals)) (and (or (assigned p Raimes) (assigned p Sicoli) (assigned p Thompson)) ) )",
        "(exists ((p Paralegals)) (assigned p Raimes))",
        "(exists ((p Paralegals)) (assigned p Sicoli))",
        "(exists ((p Paralegals)) (assigned p Thompson))",
        "(or (and (assigned Frank Raimes) (assigned Kevin Thompson)) (and (not (assigned Frank Raimes)) (not (assigned Kevin Thompson))))",
        "(or (and (= (count (filter (lambda (p) (assigned p Raimes)) Paralegals)) 1) (not (= (count (filter (lambda (p) (assigned p Raimes)) Paralegals)) 1))) (and (= (count (filter (lambda (p) (assigned p Sicoli)) Paralegals)) 1) (not (= (count (filter (lambda (p) (assigned p Sicoli)) Paralegals)) 1))))",
        "(assigned Hiro Sicoli)"
      ],
      "options": [
        "(not (exists ((p Paralegals)) (and (assigned p Thompson) (not (= p Kevin)))))",
        "(not (exists ((p Paralegals)) (and (assigned p Thompson) (not (= p Laurie)))))",
        "(not (exists ((p Paralegals)) (and (assigned p Thompson) (not (= p Gina)))))",
        "(not (exists ((p Paralegals)) (and (assigned p Thompson) (not (= p Frank)))))",
        "(not (exists ((p Paralegals)) (and (assigned p Thompson) (not (= p Laurie)))))"
      ],
      "type": "sat",
      "perplexity": [
        1.0855354070663452,
        1.0247831344604492
      ],
      "answer": "D",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 138,
    "nl_problem": {
      "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
      "question": "If Kevin is the sole paralegal assigned to one of the cases then which one of the following lists all of the paralegals any one of",
      "options": [
        "A) Frank, Kevin, Laurie",
        "B) Frank, Kevin",
        "C) Frank",
        "D) Gina",
        "E) Kevin"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Paralegals 0)) (((Frank) (Gina) (Hiro) (Kevin) (Laurie))))",
        "(declare-datatypes ((Cases 0)) (((Raimes) (Sicoli) (Thompson)))",
        "(declare-fun assigned (Paralegals Cases) Bool)"
      ],
      "constraints": [
        "(forall ((p Paralegals)) (and (exists ((c Cases)) (assigned p c)) (not (exists ((c1 Cases) (c2 Cases)) (and (/= c1 c2) (assigned p c1) (assigned p c2))))))",
        "(exists ((p Paralegals) (c Cases)) (assigned p c))",
        "(or (and (assigned Frank Raimes) (assigned Kevin Thompson)) (and (not (assigned Frank Raimes)) (not (assigned Kevin Thompson))))",
        "(or (and (forall ((p Paralegals) (/= p Frank)) (not (assigned p Raimes))) (assigned Frank Raimes)) (and (forall ((p Paralegals) (/= p Gina)) (not (assigned p Sicoli))) (assigned Gina Sicoli)))",
        "(assigned Hiro Sicoli)"
      ],
      "options": [
        "(and (assigned Frank Raimes) (not (assigned Kevin Sicoli)) (not (assigned Kevin Thompson)))",
        "(and (assigned Frank Raimes) (assigned Kevin Thompson))",
        "(and (assigned Frank Raimes) (assigned Kevin Thompson) (assigned Laurie Sicoli))",
        "(and (assigned Frank Raimes) (not (assigned Kevin Sicoli)))",
        "(and (assigned Frank Raimes) (not (assigned Kevin Thompson)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1177490949630737,
        1.0150281190872192
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 139,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "The five pieces could appear in which one of the following sequences on the CD, in order from first to last?",
      "options": [
        "A) Reciprocity, Trapezoid, Wisteria, Salammbo, Vancouver",
        "B) Salammbo, Reciprocity, Trapezoid, Vancouver, Wisteria",
        "C) Trapezoid, Wisteria, Salammbo, Vancouver, Reciprocity",
        "D) Vancouver, Wisteria, Salammbo, Reciprocity, Trapezoid",
        "E) Wisteria, Salammbo, Vancouver, Trapezoid, Reciprocity"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-fun order (Pieces) (Array Bool 5))"
      ],
      "constraints": [
        "(and",
        "  (>= (order Reciprocity 0) 0)",
        "  (>= (order Salammbo 0) 0)",
        "  (>= (order Trapezoid 0) 0)",
        "  (>= (order Vancouver 0) 0)",
        "  (>= (order Wisteria 0) 0)",
        "  ",
        "  (<= (order Reciprocity 4) 4)",
        "  (<= (order Salammbo 4) 4)",
        "  (<= (order Trapezoid 4) 4)",
        "  (<= (order Vancouver 4) 4)",
        "  (<= (order Wisteria 4) 4)",
        "  ",
        "  (not (= (order Reciprocity Salammbo) 1))",
        "  (not (= (order Salammbo Reciprocity) 1))",
        "  ",
        "  (not (= (order Trapezoid Reciprocity) 1))",
        "  (not (= (order Reciprocity Trapezoid) 1))",
        "  ",
        "  (not (= (order Wisteria Reciprocity) 1))",
        "  (not (= (order Reciprocity Wisteria) 1))",
        "  ",
        ")"
      ],
      "options": [
        "(and",
        "    (= (order Reciprocity 0) true)",
        "    (= (order Trapezoid 1) true)",
        "    (= (order Wisteria 2) true)",
        "    (= (order Salammbo 3) true)",
        "    (= (order Vancouver 4) true)",
        ")",
        "(and",
        "    (= (order Salammbo 0) true)",
        "    (= (order Reciprocity 1) true)",
        "    (= (order Trapezoid 2) true)",
        "    (= (order Vancouver 3) true)",
        "    (= (order Wisteria 4) true)",
        ")",
        "(and",
        "    (= (order Trapezoid 0) true)",
        "    (= (order Wisteria 1) true)",
        "    (= (order Salammbo 2) true)",
        "    (= (order Vancouver 3) true)",
        "    (= (order Reciprocity 4) true)",
        ")",
        "(and",
        "    (= (order Vancouver 0) true)",
        "    (= (order Wisteria 1) true)",
        "    (= (order Salammbo 2) true)",
        "    (= (order Reciprocity 3) true)",
        "    (= (order Trapezoid 4) true)",
        ")",
        "(and",
        "    (= (order Wisteria 0) true)",
        "    (= (order Salammbo 1) true)",
        "    (= (order Vancouver 2) true)",
        "    (= (order Trapezoid 3) true)",
        "    (= (order Reciprocity 4) true)",
        ")"
      ],
      "type": "sat",
      "perplexity": [
        1.1235733032226562,
        1.0141323804855347
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 140,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "If Salammbo is the fourth piece on the CD, then which one of the following must be true?",
      "options": [
        "A) Reciprocity is earlier on the CD than Wisteria.",
        "B) Salammbo is earlier on the CD than Trapezoid.",
        "C) Trapezoid is earlier on the CD than Reciprocity.",
        "D) Vancouver is earlier on the CD than Wisteria.",
        "E) Wisteria is earlier on the CD than Trapezoid."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(set-logic QF_UF)",
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-fun position (Pieces) Int)"
      ],
      "constraints": [
        "(= position Salammbo 4)",
        "(>= position Salammbo position Vancouver)",
        "(or (and (< position Trapezoid position Reciprocity) (< position Trapezoid position Salammbo)) (and (> position Trapezoid position Reciprocity) (> position Trapezoid position Salammbo)))",
        "(or (and (< position Wisteria position Reciprocity) (< position Wisteria position Trapezoid)) (and (> position Wisteria position Reciprocity) (> position Wisteria position Trapezoid)))"
      ],
      "options": [
        "(or (< position Reciprocity position Wisteria) (> position Reciprocity position Wisteria))",
        "(< position Salammbo position Trapezoid)",
        "(< position Trapezoid position Reciprocity)",
        "(< position Vancouver position Wisteria)",
        "(< position Wisteria position Trapezoid)"
      ],
      "type": "sat",
      "perplexity": [
        1.2958091497421265,
        1.0131820440292358
      ],
      "answer": "C",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 141,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "If Reciprocity is the first piece on the CD, then which one of the following could be true?",
      "options": [
        "A) Trapezoid is the second piece on the CD.",
        "B) Vancouver is the third piece on the CD.",
        "C) Wisteria is the third piece on the CD.",
        "D) Salammbo is the fourth piece on the CD.",
        "E) Trapezoid is the last piece on the CD."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-fun before (Pieces Pieces) Bool)"
      ],
      "constraints": [
        "(and (before Salammbo Vancouver))",
        "(or (and (before Trapezoid Reciprocity) (before Trapezoid Salammbo)) (and (after Trapezoid Reciprocity) (after Trapezoid Salammbo)))",
        "(or (and (before Wisteria Reciprocity) (before Wisteria Trapezoid)) (and (after Wisteria Reciprocity) (after Wisteria Trapezoid)))"
      ],
      "options": [
        "(and (before Reciprocity  (first piece)) (before (second piece) Reciprocity) (before (third piece) Reciprocity) (before (fourth piece) Reciprocity) (before (fifth piece) Reciprocity))",
        "(and (before (first piece) Reciprocity) (before (second piece) Reciprocity) (before (third piece) Reciprocity) (before (fourth piece) Reciprocity) (before (fifth piece) Reciprocity))",
        "(and (before (first piece) Reciprocity) (before (second piece) Reciprocity) (before (third piece) Reciprocity) (before (fourth piece) Reciprocity) (before (fifth piece) Reciprocity))",
        "(and (before (first piece) Reciprocity) (before (second piece) Reciprocity) (before (third piece) Reciprocity) (before (fourth piece) Reciprocity) (before (fifth piece) Reciprocity))",
        "(and (before (first piece) Reciprocity) (before (second piece) Reciprocity) (before (third piece) Reciprocity) (before (fourth piece) Reciprocity) (before (fifth piece) Reciprocity))"
      ],
      "type": "sat",
      "perplexity": [
        1.1907572746276855,
        1.0133525133132935
      ],
      "answer": "B",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 142,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "If Trapezoid is the second piece on the CD, then which one of the following could be true?",
      "options": [
        "A) Salammbo is the first piece on the CD.",
        "B) Reciprocity is the first piece on the CD.",
        "C) Vancouver is the third piece on the CD.",
        "D) Wisteria is the fourth piece on the CD.",
        "E) Reciprocity is the last piece on the CD."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-datatypes ((Positions 0)) (((1) (2) (3) (4) (5)))",
        "(declare-fun piece-at (Positions) Pieces)"
      ],
      "constraints": [
        "(and (>= (piece-at 1 Reciprocity) (>= (piece-at 1 Salammbo) (>= (piece-at 1 Trapezoid) (>= (piece-at 1 Vancouver) (>= (piece-at 1 Wisteria))))))",
        "(=> (and (piece-at 2 Trapezoid) (piece-at 1 Reciprocity)) (not (piece-at 3 Reciprocity)) (not (piece-at 1 Salammbo)))",
        "(=> (and (piece-at 2 Trapezoid) (piece-at 1 Salammbo)) (not (piece-at 3 Salammbo)) (not (piece-at 1 Reciprocity)))",
        "(=> (and (piece-at 2 Trapezoid) (piece-at 3 Reciprocity)) (not (piece-at 1 Reciprocity)) (not (piece-at 1 Salammbo)))",
        "(=> (and (piece-at 2 Trapezoid) (piece-at 1 Wisteria)) (not (piece-at 3 Wisteria)) (not (piece-at 1 Reciprocity)))",
        "(=> (and (piece-at 2 Trapezoid) (piece-at 1 Reciprocity)) (not (piece-at 3 Reciprocity)) (not (piece-at 1 Wisteria)))"
      ],
      "options": [
        "(and (piece-at 1 Salammbo) (piece-at 3 Vancouver))",
        "(and (piece-at 1 Reciprocity) (piece-at 3 Vancouver))",
        "(and (piece-at 1 Reciprocity) (piece-at 4 Wisteria))",
        "(and (piece-at 1 Wisteria) (piece-at 5 Reciprocity))",
        "(and (piece-at 1 Salammbo) (piece-at 4 Wisteria))"
      ],
      "type": "sat",
      "perplexity": [
        1.1744322776794434,
        1.0123403072357178
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 143,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "The first and second pieces on the CD, listed in order, could be",
      "options": [
        "A) Reciprocity and Vancouver",
        "B) Reciprocity and Wisteria",
        "C) Salammbo and Trapezoid",
        "D) Trapezoid and Wisteria",
        "E) Wisteria and Salammbo"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-fun first-piece (Pieces) Pieces)",
        "(declare-fun second-piece (Pieces) Pieces)"
      ],
      "constraints": [
        "(assert (distinct (first-piece p) (second-piece p)))",
        "(=> (first-piece p) (Salammbo) (second-piece p) (Vancouver))",
        "(or (and (first-piece p) (Trapezoid) (first-piece p) (Reciprocity) (second-piece p) (Salammbo)) (and (first-piece p) (Trapezoid) (second-piece p) (Reciprocity) (first-piece p) (Salammbo)))",
        "(or (and (first-piece p) (Wisteria) (first-piece p) (Reciprocity) (second-piece p) (Trapezoid)) (and (first-piece p) (Wisteria) (second-piece p) (Reciprocity) (first-piece p) (Trapezoid)))"
      ],
      "options": [
        "(and (= (first-piece p) Reciprocity) (= (second-piece p) Vancouver))",
        "(and (= (first-piece p) Reciprocity) (= (second-piece p) Wisteria))",
        "(and (= (first-piece p) Salammbo) (= (second-piece p) Trapezoid))",
        "(and (= (first-piece p) Trapezoid) (= (second-piece p) Wisteria))",
        "(and (= (first-piece p) Wisteria) (= (second-piece p) Salammbo))"
      ],
      "type": "sat",
      "perplexity": [
        1.1474635601043701,
        1.0073275566101074
      ],
      "answer": "E",
      "predicted_answer": [
        "sat",
        "sat",
        "sat",
        "sat",
        "sat"
      ],
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 144,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "If Vancouver is the second piece on the CD, then which one of the following could be true?",
      "options": [
        "A) Wisteria is the first piece on the CD.",
        "B) Salammbo is the third piece on the CD.",
        "C) Trapezoid is the third piece on the CD.",
        "D) Reciprocity is the fourth piece on the CD.",
        "E) Reciprocity is the last piece on the CD."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-fun order (Pieces Pieces) Bool)"
      ],
      "constraints": [
        "(forall ((p1 Pieces) (p2 Pieces)) (not (and (order p1 p2) (order p2 p1))))",
        "(order Salammbo Vancouver)",
        "(or (forall ((p Pieces)) (order Trapezoid p)) (forall ((p Pieces)) (not (order Trapezoid p))))",
        "(or (forall ((p Pieces)) (order Wisteria p)) (forall ((p Pieces)) (not (order Wisteria p))))",
        "(and (order Vancouver Reciprocity) (order Vancouver Trapezoid) (order Vancouver Salammbo) (order Vancouver Wisteria))"
      ],
      "options": [
        "(order Reciprocity ... )",
        "(order Salammbo ... )",
        "(order Trapezoid ... )",
        "(order Wisteria ... )"
      ],
      "type": [
        "sat",
        "unsat"
      ],
      "perplexity": [
        1.3139890432357788,
        1.0351675748825073
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 145,
    "nl_problem": {
      "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
      "question": "If Wisteria is the first piece on the CD, then which one of the following CANNOT be true?",
      "options": [
        "A) Trapezoid is the third piece on the CD.",
        "B) Vancouver is the third piece on the CD.",
        "C) Salammbo is the fourth piece on the CD.",
        "D) Vancouver is the fourth piece on the CD",
        "E) Trapezoid is the last piece on the CD."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(set-logic QF_FD)",
        "(declare-datatypes ((Pieces 0)) (((Reciprocity) (Salammbo) (Trapezoid) (Vancouver) (Wisteria))))",
        "(declare-const Wisteria Pieces)",
        "(declare-const Reciprocity Pieces)",
        "(declare-const Salammbo Pieces)",
        "(declare-const Trapezoid Pieces)",
        "(declare-const Vancouver Pieces)",
        "(declare-fun before (Pieces Pieces) Bool)"
      ],
      "constraints": [
        "(assert (before Salammbo Vancouver))",
        "(assert (or (and (before Trapezoid Reciprocity) (before Trapezoid Salammbo)) (and (not (before Trapezoid Reciprocity)) (not (before Trapezoid Salammbo))) (and (not (before Trapezoid Reciprocity)) (before Trapezoid Salammbo))))",
        "(assert (or (and (before Wisteria Reciprocity) (before Wisteria Trapezoid)) (and (not (before Wisteria Reciprocity)) (not (before Wisteria Trapezoid))))"
      ],
      "options": [
        "(assert (and (before Wisteria Reciprocity) (before Wisteria Trapezoid) (before Wisteria Salammbo) (before Wisteria Vancouver))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.2154613733291626,
        1.015579104423523
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 146,
    "nl_problem": {
      "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
      "question": "Which one of the following could be the speeches given in each room, listed in the order in which they occur?",
      "options": [
        "A) Gold Room: Molina's, Long's Rose Room: Zimmerman's, Xiao's, Yoshida's",
        "B) Gold Room: Molina's, Yoshida's, Long's Rose Room: Xiao's Zimmerman's",
        "C) Gold Room: Xiao's, Molina's, Long's Rose Room: Zimmerman's, Yoshida's",
        "D) Gold Room: Yoshida's, Long's, Molina's Rose Room: Zimmerman's, Xiao's",
        "E) Gold Room: Zimmerman's, Molina's Rose Room: Xiao's, Yoshida's, Long's"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Speakers 0)) (((Long) (Molina) (Xiao) (Yoshida) (Zimmerman))))",
        "(declare-datatypes ((Rooms 0)) (((Gold) (Rose))))",
        "(declare-datatypes ((Times 0)) (((one_pm) (two_pm) (three_pm)))",
        "(declare-fun speaks (Speakers Rooms Times) Bool)"
      ],
      "constraints": [
        "(forall ((s Speakers)) (and (forall ((r Rooms)) (forall ((t Times)) (=> (speaks s r t) (not (exists ((s2 Speakers) (r2 Rooms) (t2 Times)) (and (s2 != s) (speaks s2 r t2)))))) (forall ((r1 Rooms) (t1 Times)) (exists ((r2 Rooms) (t2 Times)) (and (r1 != r2) (speaks s r1 t1) (speaks s r2 t2))))))",
        "(forall ((r Rooms)) (and (forall ((t Times)) (<= (count (forall ((s Speakers)) (and (speaks s r t) (not (exists ((s2 Speakers) (r2 Rooms) (t2 Times)) (and (s2 != s) (speaks s2 r t2)))))) 1))) (forall ((t Times)) (<= (count (forall ((s Speakers)) (and (speaks s r t) (not (exists ((s2 Speakers) (r2 Rooms) (t2 Times)) (and (s2 != s) (speaks s2 r t2)))))) 1))))",
        "(and (speaks Molina Gold one_pm) (speaks Long Gold two_pm))",
        "(and (speaks Xiao Rose three_pm) (speaks Yoshida Rose three_pm))"
      ],
      "options": [
        "(and (speaks Molina Gold one_pm) (speaks Long Gold two_pm) (speaks Zimmerman Rose three_pm) (speaks Xiao Rose one_pm) (speaks Yoshida Rose two_pm))",
        "(and (speaks Molina Gold one_pm) (speaks Yoshida Gold two_pm) (speaks Long Gold three_pm) (speaks Xiao Rose one_pm) (speaks Zimmerman Rose two_pm))",
        "(and (speaks Xiao Gold one_pm) (speaks Molina Gold two_pm) (speaks Long Gold three_pm) (speaks Zimmerman Rose one_pm) (speaks Yoshida Rose two_pm))",
        "(and (speaks Yoshida Gold one_pm) (speaks Long Gold two_pm) (speaks Molina Gold three_pm) (speaks Zimmerman Rose one_pm) (speaks Xiao Rose two_pm))",
        "(and (speaks Zimmerman Gold one_pm) (speaks Molina Gold two_pm) (speaks Xiao Rose three_pm) (speaks Yoshida Rose one_pm) (speaks Long Rose two_pm))"
      ],
      "type": "sat",
      "perplexity": [
        1.1211106777191162,
        1.0268958806991577
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 147,
    "nl_problem": {
      "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
      "question": "Which one of the following pairs of speeches CANNOT be given at the same time?",
      "options": [
        "A) Long's and Yoshida's",
        "B) Long's and Zimmerman's",
        "C) Molina's and Xiao's",
        "D) Xiao's and Yoshida's",
        "E) Yoshida's and Zimmerman's"
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Speakers 0)) (((Long) (Molina) (Xiao) (Yoshida) (Zimmerman)))",
        "(declare-datatypes ((Rooms 0)) (((Gold) (Rose)))",
        "(declare-datatypes ((Times 0)) (((one_pm) (two_pm) (three_pm)))",
        "(declare-fun speaks (Speakers Rooms Times) Bool)"
      ],
      "constraints": [
        "(forall ((s Speakers)) (and (exists ((r Rooms)) (exists ((t Times)) (speaks s r t))) (forall ((r' Rooms) (t' Times)) (=> (not (= r r') or not (= t t')) (not (speaks s r' t')))))",
        "(forall ((r Rooms)) (exists ((s Speakers)) (and (speaks s r one_pm) (speaks s r two_pm)))",
        "(exists ((r Rooms)) (exists ((s Speakers)) (speaks s r three_pm)))",
        "(and (exists ((r Rooms)) (speaks Molina r one_pm)) (exists ((r Rooms)) (speaks Long r one_pm)) (=> (and (exists ((r Rooms)) (speaks Molina r one_pm)) (exists ((r Rooms)) (speaks Long r one_pm))) (exists ((r Rooms)) (and (speaks Molina r one_pm) (speaks Long r one_pm)))))",
        "(and (exists ((r Rooms)) (speaks Xiao r one_pm)) (exists ((r Rooms)) (speaks Yoshida r one_pm)) (exists ((r Rooms)) (speaks Zimmerman r one_pm)) (=> (and (exists ((r Rooms)) (speaks Xiao r one_pm)) (exists ((r Rooms)) (speaks Yoshida r one_pm)) (exists ((r Rooms)) (speaks Zimmerman r one_pm))) (not (and (exists ((r Rooms)) (speaks Xiao r one_pm)) (exists ((r Rooms)) (speaks Yoshida r one_pm)) (exists ((r Rooms)) (speaks Zimmerman r one_pm))))))",
        "(=> (and (exists ((r Rooms)) (speaks Long r Gold)) (exists ((r Rooms)) (speaks Xiao r Rose)) (exists ((r Rooms)) (speaks Zimmerman r Rose))))"
      ],
      "options": [
        "(forall ((t Times) (s1 Speakers) (s2 Speakers)) (=> (and (not (= s1 s2)) (speaks s1 Gold t) (speaks s2 Gold t)) (not (speaks s1 Rose t)))",
        "(forall ((t Times) (s1 Speakers) (s2 Speakers)) (=> (and (not (= s1 s2)) (speaks s1 Gold t) (speaks s2 Gold t)) (not (speaks s1 Rose t)))",
        "(forall ((t Times) (s1 Speakers) (s2 Speakers)) (=> (and (not (= s1 s2)) (speaks s1 Gold t) (speaks s2 Gold t)) (not (speaks s1 Rose t)))",
        "(forall ((t Times) (s1 Speakers) (s2 Speakers)) (=> (and (not (= s1 s2)) (speaks s1 Gold t) (speaks s2 Gold t)) (not (speaks s1 Rose t)))",
        "(forall ((t Times) (s1 Speakers) (s2 Speakers)) (=> (and (not (= s1 s2)) (speaks s1 Gold t) (speaks s2 Gold t)) (not (speaks s1 Rose t)))"
      ],
      "type": "unsat",
      "perplexity": [
        1.078918695449829,
        1.0058045387268066
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 148,
    "nl_problem": {
      "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
      "question": "If Xiao's speech is at 3 P.M., which one of the following CANNOT be true?",
      "options": [
        "A) Long's speech is in the same room as Yoshida's.",
        "B) Molina's speech is in the same room as Xiao's.",
        "C) Xiao's speech is in the same room as Yoshida's.",
        "D) Xiao's speech is in the same room as Zimmerman's.",
        "E) Yoshida's speech is in the same room as Zimmerman's."
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Speakers 0)) (((Long) (Molina) (Xiao) (Yoshida) (Zimmerman))))",
        "(declare-datatypes ((Rooms 0)) (((Gold_Room) (Rose_Room)))",
        "(declare-datatypes ((Times 0)) (((one_pm) (two_pm) (three_pm)))",
        "(declare-fun speaks (Speakers Rooms Times) Bool)"
      ],
      "constraints": [
        "(forall ((s Speakers)) (forall ((r Rooms)) (forall ((t Times)) (<= (ite (= (speaks s r t) true) 1 0) 1)))",
        "(forall ((r Rooms)) (forall ((t Times)) (<= (and (exists ((s Speakers)) (speaks s r t)) (exists ((s' Speakers)) (and (distinct s s') (speaks s' r t))) 0))",
        "(and (speaks Molina Gold_Room one_pm) (speaks Long Gold_Room two_pm))",
        "(forall ((s Speakers)) (<= (speaks s Gold_Room one_pm) (speaks s Gold_Room two_pm)))",
        "(implies (speaks Long Gold_Room one_pm) (and (not (speaks Xiao Rose_Room one_pm)) (not (speaks Zimmerman Rose_Room one_pm))))",
        "(forall ((s Speakers)) (and (distinct s Xiao) (distinct s Yoshida)) (=> (speaks s one_pm) (and (not (speaks Zimmerman one_pm)) (not (speaks Xiao one_pm)))))"
      ],
      "options": [
        "(not (implies (speaks Xiao three_pm) (and (speaks Long Gold_Room one_pm) (speaks Yoshida Gold_Room two_pm))))",
        "(not (implies (speaks Xiao three_pm) (and (speaks Molina Gold_Room one_pm) (speaks Xiao Rose_Room three_pm))))",
        "(not (implies (speaks Xiao three_pm) (and (speaks Xiao Gold_Room three_pm) (speaks Yoshida Gold_Room three_pm))))",
        "(not (implies (speaks Xiao three_pm) (and (speaks Xiao Gold_Room three_pm) (speaks Zimmerman Gold_Room three_pm))))",
        "(not (implies (speaks Xiao three_pm) (and (speaks Xiao Gold_Room three_pm) (speaks Yoshida Gold_Room three_pm))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.153671145439148,
        1.011772632598877
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 149,
    "nl_problem": {
      "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
      "question": "Which one of the following could be a complete and accurate list of the speeches given in the Gold Room, in the order in which they occur?",
      "options": [
        "A) Long's, Molina's",
        "B) Molina's, Yoshida's",
        "C) Molina's, Yoshida's, Long's",
        "D) Yoshida's, Zimmerman's, Xiao's",
        "E) Zimmerman's, Molina's, Long's"
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Speakers 0)) (((Long) (Molina) (Xiao) (Yoshida) (Zimmerman))))",
        "(declare-datatypes ((Rooms 0)) (((Gold_Room) (Rose_Room))))",
        "(declare-datatypes ((Times 0)) (((One_PM) (Two_PM) (Three_PM)))",
        "(declare-fun speaks (Speakers Times Rooms) Bool)"
      ],
      "constraints": [
        "(forall ((s Speakers)) (and (exists ((t Times) (r Rooms)) (speaks s t r)) (forall ((t' Times) (r' Rooms)) (=> (not (= t t')) (not (= r r')) (not (speaks s t' r')))))",
        "(forall ((t Times) (r Rooms)) (<= (count (filter (lambda (s) (and (speaks s t r))) (Speakers)) 1))",
        "(exists ((r Rooms)) (and (speaks Molina One_PM r) (speaks Long One_PM r)))",
        "(forall ((s1 Speakers) (s2 Speakers)) (=> (and (not (= s1 Xiao)) (not (= s2 Xiao)) (not (= s1 Yoshida)) (not (= s2 Yoshida))) (=> (and (speaks s1 Zimmerman One_PM r) (speaks s2 Zimmerman Two_PM r)) (>= (count (filter (lambda (s) (speaks s Zimmerman One_PM r)) (Speakers)) 1))))",
        "(forall ((r Rooms) (s Speakers)) (=> (and (speaks s One_PM r) (= s Long)) (and (speaks Xiao Two_PM (distinct r)) (speaks Zimmerman Two_PM (distinct r))))"
      ],
      "options": [
        "(and (speaks Long One_PM Gold_Room) (speaks Molina One_PM Gold_Room))",
        "(and (speaks Molina One_PM Gold_Room) (speaks Yoshida Two_PM Gold_Room))",
        "(and (speaks Molina One_PM Gold_Room) (speaks Yoshida Two_PM Gold_Room) (speaks Long Three_PM Gold_Room))",
        "(and (speaks Yoshida One_PM Rose_Room) (speaks Zimmerman One_PM Rose_Room) (speaks Xiao Two_PM Rose_Room))",
        "(and (speaks Zimmerman One_PM Rose_Room) (speaks Molina Two_PM Rose_Room) (speaks Long Three_PM Rose_Room))"
      ],
      "type": "sat",
      "perplexity": [
        1.1515941619873047,
        1.0369402170181274
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 150,
    "nl_problem": {
      "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
      "question": "If Yoshida's speech is at 1 P.M., which one of the following could be true?",
      "options": [
        "A) Long's speech is at 1 P.M. in the Gold Room.",
        "B) Long's speech is at 2 P.M. in the Rose Room.",
        "C) Molina's speech is at 2 P.M. in the Gold Room.",
        "D) Xiao's speech is at 3 P.M. in the Gold Room.",
        "E) Xiao's speech is at 1 P.M. in the Rose Room."
      ]
    },
    "answer": "C",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Speakers 0)) (((Long) (Molina) (Xiao) (Yoshida) (Zimmerman))))",
        "(declare-datatypes ((Rooms 0)) (((Gold_Room) (Rose_Room)))",
        "(declare-datatypes ((Times 0)) (((one_PM) (two_PM) (three_PM)))",
        "(declare-fun speaks (Speakers Rooms Times) Bool)"
      ],
      "constraints": [
        "(forall ((s Speakers)) (and (exists ((r Rooms) (t Times)) (speaks s r t)) (not (exists ((r1 Rooms) (t1 Times) (s1 Speakers)) (and (distinct s s1) (speaks s1 r1 t1))))",
        "(forall ((r Rooms)) (exists ((s Speakers) (t Times)) (speaks s r t))",
        "(exists ((r Rooms)) (and (speaks Molina r one_PM) (speaks Long r one_PM))",
        "(forall ((s1 Speakers) (s2 Speakers)) (=> (distinct s1 s2) (and (not (and (speaks s1 Rose_Room one_PM) (speaks s2 Rose_Room one_PM))) (not (and (speaks s1 Gold_Room one_PM) (speaks s2 Gold_Room one_PM))))",
        "(implies (and (speaks Long Gold_Room one_PM)) (and (speaks Xiao Rose_Room one_PM) (speaks Zimmerman Rose_Room one_PM)))"
      ],
      "options": [
        "(and (speaks Long Gold_Room one_PM) (speaks Yoshida Rose_Room one_PM))",
        "(and (speaks Long Rose_Room two_PM) (speaks Yoshida Rose_Room one_PM))",
        "(and (speaks Molina Gold_Room two_PM) (speaks Yoshida Rose_Room one_PM))",
        "(and (speaks Xiao Gold_Room three_PM) (speaks Yoshida Rose_Room one_PM))",
        "(and (speaks Xiao Rose_Room one_PM) (speaks Yoshida Rose_Room one_PM))"
      ],
      "type": "sat",
      "perplexity": [
        1.101185917854309,
        1.0092500448226929
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 151,
    "nl_problem": {
      "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
      "question": "Which one of the following, if substituted for the constraint that neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's, would have the same effect in determining the schedule of speeches with regard to rooms and times?",
      "options": [
        "A) Long's speech must be at 3 P.M.",
        "B) Molina's speech cannot be earlier than Zimmerman's.",
        "C) Either Xiao's speech or Yoshida's speech must be after Zimmerman's.",
        "D) Either Xiao's speech or Yoshida's speech or both must be at 2 P.M.",
        "E) Zimmerman's speech must be at 1 P.M."
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Speakers 0)) (((Long) (Molina) (Xiao) (Yoshida) (Zimmerman)))",
        "(declare-datatypes ((Rooms 0)) (((Gold_Room) (Rose_Room)))",
        "(declare-datatypes ((Times 0)) (((1_PM) (2_PM) (3_PM)))",
        "(declare-fun speaks (Speakers Rooms Times) Bool)"
      ],
      "constraints": [
        "(forall ((s Speakers) (r Rooms) (t Times)) (<= (ite (speaks s r t) 1 0) 1))",
        "(forall ((r Rooms)) (and (exists ((s Speakers) (t Times)) (speaks s r t)) (exists ((s Speakers) (t Times)) (speaks s r t))))",
        "(forall ((s Speakers) (t Times)) (<= (ite (speaks s Gold_Room t) 1 0) (ite (speaks s Rose_Room t) 1 0) 1))",
        "(and (implies (speaks Molina Gold_Room 1_PM) (not (speaks Long Gold_Room 1_PM))) (implies (speaks Molina Rose_Room 1_PM) (not (speaks Long Rose_Room 1_PM)))),",
        "(implies (speaks Long Gold_Room 1_PM) (and (not (speaks Xiao Gold_Room 1_PM)) (not (speaks Xiao Gold_Room 2_PM)) (not (speaks Zimmerman Gold_Room 1_PM)) (not (speaks Zimmerman Gold_Room 2_PM))))"
      ],
      "options": [
        "(forall ((s Speakers) (t Times)) (implies (speaks s Gold_Room t) (implies (speaks s Rose_Room t) (not (speaks s Gold_Room t)))))",
        "(implies (speaks Molina Gold_Room 1_PM) (not (speaks Zimmerman Gold_Room 1_PM)))",
        "(or (exists ((s Speakers) (t Times)) (and (speaks s Xiao t) (implies (speaks s Rose_Room t) (not (speaks Zimmerman Rose_Room t)))) (exists ((s Speakers) (t Times)) (and (speaks s Yoshida t) (implies (speaks s Rose_Room t) (not (speaks Zimmerman Rose_Room t)))) )",
        "(or (exists ((s Speakers) (t Times)) (and (speaks s Xiao t) (not (speaks s Gold_Room t)))) (exists ((s Speakers) (t Times)) (and (speaks s Yoshida t) (not (speaks s Gold_Room t)))))",
        "(implies (speaks Zimmerman Gold_Room 1_PM) (not (speaks Zimmerman Rose_Room 1_PM)))"
      ],
      "type": "sat",
      "perplexity": [
        1.1410706043243408,
        1.0203815698623657
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 152,
    "nl_problem": {
      "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
      "question": "Which one of the following could be an accurate matching of each family to the building or buildings it owned?",
      "options": [
        "A) Trents: the granary, the stable Williamses: the inn, the mill Yandells: the forge",
        "B) Trents: the granary, the mill Williamses: the inn, the stable Yandells: the forge",
        "C) Trents: the forge, the mill Williamses: the granary, the stable Yandells: the inn",
        "D) Trents: the forge, the granary Williamses: the mill Yandells: the inn, the stable",
        "E) Trents: the stable Williamses: the inn, the mill Yandells: the forge, the granary"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Families 0)) (((Trents) (Williamses) (Yandells)))",
        "(declare-datatypes ((Buildings 0)) (((forge) (granary) (inn) (mill) (stable)))",
        "(declare-fun owns (Families Buildings) Bool)"
      ],
      "constraints": [
        "(forall ((f Families)) (exists ((b Buildings)) (owns f b)))",
        "(forall ((b Buildings)) (exists ((f Families)) (owns f b)))",
        "(and (> (count (filter (lambda (x) (owns Williamses x)) Buildings)) (count (filter (lambda (x) (owns Yandells x)) Buildings))))",
        "(not (and (owns (select 0 Families) forge) (or (owns (select 1 Families) forge) (owns (select 2 Families) forge))))",
        "(or (and (owns Trents stable) (owns Yandells inn)) (and (owns Trents stable) (owns Yandells inn)) (and (owns Trents stable) (owns Yandells inn)))"
      ],
      "options": [
        "(and (owns Trents granary) (owns Trents stable) (owns Williamses inn) (owns Williamses mill) (owns Yandells forge))",
        "(and (owns Trents granary) (owns Trents mill) (owns Williamses inn) (owns Williamses stable) (owns Yandells forge))",
        "(and (owns Trents forge) (owns Trents mill) (owns Williamses granary) (owns Williamses stable) (owns Yandells inn))",
        "(and (owns Trents forge) (owns Trents granary) (owns Williamses mill) (owns Yandells inn) (owns Yandells stable))",
        "(and (owns Trents stable) (owns Williamses inn) (owns Williamses mill) (owns Yandells forge) (owns Yandells granary))"
      ],
      "type": "sat",
      "perplexity": [
        1.0905309915542603,
        1.0136454105377197
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 153,
    "nl_problem": {
      "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
      "question": "Which one of the following is a pair of buildings that CANNOT both have been owned by the Trents?",
      "options": [
        "A) the forge, the granary",
        "B) the granary, the mill",
        "C) the granary, the stable",
        "D) the inn, the mill",
        "E) the inn, the stable"
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Families 0)) (((Trents) (Williamses) (Yandells))))",
        "(declare-datatypes ((Buildings 0)) (((forge) (granary) (inn) (mill) (stable)))",
        "(declare-fun owns (Families Buildings) Bool)"
      ],
      "constraints": [
        "(forall ((f Families)) (forall ((b Buildings)) (or (owns f b) (not (owns f b))))",
        "(forall ((f Families)) (exists ((b Buildings)) (owns f b)))",
        "(>= (count (filter (lambda (f) (and (owns f (forge)) (owns f (granary)))) (Families)) (count (filter (lambda (f) (and (owns f (forge)) (owns f (mill)))) (Families))))",
        "(forall ((f Families) (b Buildings)) (not (and (owns f (forge)) (owns f (b))))",
        "(or (and (owns Trents (stable)) (not (owns Yandells (inn)))) (and (owns Yandells (inn)) (not (owns Trents (stable)))))"
      ],
      "options": [
        "(forall ((b1 Buildings) (b2 Buildings)) (=> (and (owns Trents b1) (owns Trents b2)) (not (and (eq b1 forge) (eq b2 granary))))",
        "(forall ((b1 Buildings) (b2 Buildings)) (=> (and (owns Trents b1) (owns Trents b2)) (not (and (eq b1 granary) (eq b2 mill)))))",
        "(forall ((b1 Buildings) (b2 Buildings)) (=> (and (owns Trents b1) (owns Trents b2)) (not (and (eq b1 granary) (eq b2 stable)))))",
        "(forall ((b1 Buildings) (b2 Buildings)) (=> (and (owns Trents b1) (owns Trents b2)) (not (and (eq b1 inn) (eq b2 mill)))))",
        "(forall ((b1 Buildings) (b2 Buildings)) (=> (and (owns Trents b1) (owns Trents b2)) (not (and (eq b1 inn) (eq b2 stable)))))"
      ],
      "type": "unsat",
      "perplexity": [
        1.088402509689331,
        1.015423059463501
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 154,
    "nl_problem": {
      "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
      "question": "If the Yandells owned the mill, which one of the following must be true?",
      "options": [
        "A) The Trents owned the forge.",
        "B) The Trents owned the inn.",
        "C) The Williamses owned the forge.",
        "D) The Williamses owned the granary.",
        "E) The Williamses owned the inn."
      ]
    },
    "answer": "D",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Families 0)) (((Trents) (Williamses) (Yandells)))",
        "(declare-datatypes ((Buildings 0)) (((forge) (granary) (inn) (mill) (stable)))",
        "(declare-fun owns (Families Buildings) Bool)"
      ],
      "constraints": [
        "(forall ((f Families)) (exists ((b Buildings)) (owns f b)))",
        "(forall ((b Buildings)) (exists ((f Families)) (owns f b)))",
        "(>(+ (to-int (and (owns Williamses forge) (owns Williamses granary) (owns Williamses inn) (owns Williamses mill) (owns Williamses stable))) (+ (to-int (and (owns Yandells forge) (owns Yandells granary) (owns Yandells inn) (owns Yandells mill) (owns Yandells stable)))))",
        "(forall ((b Buildings)) (or (not (and (owns (some Family) b) (owns (some Family) forge))) (not (and (owns (some Family) b) (owns (some Family) mill)))))",
        "(or (and (owns Trents stable) (owns Yandells inn)) (and (owns Trents stable) (not (owns Yandells inn))))"
      ],
      "options": [
        "(implies (owns Yandells mill) (owns Trents forge))",
        "(implies (owns Yandells mill) (owns Trents inn))",
        "(implies (owns Yandells mill) (owns Williamses forge))",
        "(implies (owns Yandells mill) (owns Williamses granary))",
        "(implies (owns Yandells mill) (owns Williamses inn))"
      ],
      "type": "sat",
      "perplexity": [
        1.0827913284301758,
        1.0200539827346802
      ],
      "answer": "D",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 155,
    "nl_problem": {
      "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
      "question": "If one of the families owned both the granary and the inn, which one of the following could be true?",
      "options": [
        "A) The Trents owned the granary.",
        "B) The Trents owned the mill.",
        "C) The Williamses owned the forge.",
        "D) The Williamses owned the stable.",
        "E) The Yandells owned the inn."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Families 0)) (((Trents) (Williamses) (Yandells))))",
        "(declare-datatypes ((Buildings 0)) (((forge) (granary) (inn) (mill) (stable)))",
        "(declare-fun owns (Families Buildings) Bool)"
      ],
      "constraints": [
        "(forall ((f Families)) (exists ((b Buildings)) (owns f b)))",
        "(forall ((b Buildings)) (exists ((f Families)) (owns f b)))",
        "(implies (owns Williamses b) (>= (count (filter (lambda (f) (owns f b)) Families)) 1))",
        "(forall ((b Buildings)) (not (and (owns f b) (=(b 'forge))))",
        "(implies (or (and (owns Trents 'stable)) (owns Yandells 'inn)) (or (owns Trents 'stable) (owns Yandells 'inn)))"
      ],
      "options": [
        "(implies (and (owns f 'granary) (owns f 'inn)) (=(f 'Trents)))",
        "(implies (and (owns f 'granary) (owns f 'inn)) (=(f 'Williamses)))",
        "(implies (and (owns f 'granary) (owns f 'inn)) (=(f 'Yandells)))"
      ],
      "type": "sat",
      "perplexity": [
        1.0958311557769775,
        1.0194066762924194
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 156,
    "nl_problem": {
      "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
      "question": "If the Trents owned exactly one of the buildings, which one of the following is a complete and accurate list of the buildings any one of which could be the building that the Trents owned?",
      "options": [
        "A) the forge",
        "B) the forge, the mill",
        "C) the inn, the stable",
        "D) the forge, the granary, the mill",
        "E) the forge, the mill, the stable"
      ]
    },
    "answer": "E",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Families 0)) (((Trents) (Williamses) (Yandells))))",
        "(declare-datatypes ((Buildings 0)) (((forge) (granary) (inn) (mill) (stable)))",
        "(declare-fun owns (Families Buildings) Bool)"
      ],
      "constraints": [
        "(forall ((f Families)) (exists ((b Buildings)) (owns f b)))",
        "(forall ((b Buildings)) (exists ((f Families)) (owns f b)))",
        "> (count (lambda (f) (forall (b) (implies (owns f b) (not (owns Williamses b)))))) (count (lambda (f) (forall (b) (implies (owns f b) (not (owns Yandells b))))))",
        "(forall ((b Buildings)) (or (not (and (owns Trents b) (owns Williamses b))) (not (and (owns Trents b) (owns Yandells b)))))",
        "(or (and (owns Trents stable)) (and (owns Yandells inn)))"
      ],
      "options": [
        "(and (implies (owns Trents forge) (not (owns Trents mill))) (implies (owns Trents forge) (not (owns Trents inn))) (implies (owns Trents forge) (not (owns Trents stable))))"
      ],
      "type": "sat",
      "perplexity": [
        1.147458791732788,
        1.021236777305603
      ],
      "answer": "E",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 157,
    "nl_problem": {
      "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
      "question": "Which one of the following could be a complete and accurate list of the kinds of flowers in each of the bouquets?",
      "options": [
        "A) bouquet 1: lilies, roses bouquet 2: peonies, roses, tulips bouquet 3: peonies, snapdragons, tulips",
        "B) bouquet 1: peonies, roses bouquet 2: peonies, snapdragons bouquet 3: peonies, snapdragons, tulips",
        "C) bouquet 1: peonies, tulips bouquet 2: roses, snapdragons, tulips bouquet 3: roses, snapdragons",
        "D) bouquet 1: roses bouquet 2: peonies, snapdragons bouquet 3: lilies, peonies, snapdragons",
        "E) bouquet 1: snapdragons bouquet 2: lilies, roses bouquet 3: lilies, roses"
      ]
    },
    "answer": "A",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Bouquets 0)) (((bouquet1) (bouquet2) (bouquet3))))",
        "(declare-datatypes ((Flowers 0)) (((lilies) (peonies) (roses) (snapdragons) (tulips)))",
        "(declare-fun has-flower (Bouquets Flowers) Bool)"
      ],
      "constraints": [
        "(forall ((b Bouquet) (f1 Flower) (f2 Flower)) (=> (and (has-flower b f1) (has-flower b f2)) (/= f1 f2)))",
        "(not (and (has-flower bouquet1 lilies) (has-flower bouquet3 lilies)))",
        "(not (and (has-flower bouquet1 roses) (has-flower bouquet3 roses)))",
        "(not (and (has-flower bouquet1 peonies) (has-flower bouquet3 peonies)))",
        "(not (and (has-flower bouquet1 snapdragons) (has-flower bouquet3 snapdragons)))",
        "(not (and (has-flower bouquet1 tulips) (has-flower bouquet3 tulips)))",
        "(and (has-flower bouquet2 peonies) (has-flower bouquet3 peonies))",
        "(and (has-flower bouquet2 roses) (has-flower bouquet3 roses))",
        "(and (has-flower bouquet3 snapdragons))",
        "(=> (and (has-flower b lilies) (has-flower b roses)) (not (has-flower b snapdragons)))",
        "(=> (and (has-flower b tulips)) (has-flower b peonies))"
      ],
      "options": [
        "(and (has-flower bouquet1 lilies roses) (has-flower bouquet2 peonies roses tulips) (has-flower bouquet3 peonies snapdragons tulips))",
        "(and (has-flower bouquet1 peonies roses) (has-flower bouquet2 peonies snapdragons) (has-flower bouquet3 peonies snapdragons tulips))",
        "(and (has-flower bouquet1 peonies tulips) (has-flower bouquet2 roses snapdragons tulips) (has-flower bouquet3 roses snapdragons))",
        "(and (has-flower bouquet1 roses) (has-flower bouquet2 peonies snapdragons) (has-flower bouquet3 lilies peonies snapdragons))",
        "(and (has-flower bouquet1 snapdragons) (has-flower bouquet2 lilies roses) (has-flower bouquet3 lilies roses))"
      ],
      "type": "sat",
      "perplexity": [
        1.0880380868911743,
        1.0109893083572388
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  },
  {
    "id": 158,
    "nl_problem": {
      "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
      "question": "If lilies are in bouquet 1, which one of the following must",
      "options": [
        "A) Lilies are in bouquet 2.",
        "B) Peonies are in bouquet 3.",
        "C) Roses are in bouquet 2.",
        "D) Tulips are in bouquet 2.",
        "E) Tulips are in bouquet 3."
      ]
    },
    "answer": "B",
    "logic_problem": {
      "declarations": [
        "(declare-datatypes ((Bouquets 0)) (((bouquet1) (bouquet2) (bouquet3)))",
        "(declare-datatypes ((Flowers 0)) (((lilies) (peonies) (roses) (snapdragons) (tulips)))",
        "(declare-fun contains (Bouquets Flowers) Bool)"
      ],
      "constraints": [
        "(forall ((b Bouquet1) (f Flowers)) (not (and (contains b f) (contains bouquet3 f))))",
        "(forall ((b Bouquet2) (b2 Bouquet3) (f1 Flowers) (f2 Flowers)) (and (= (card (filter (lambda (x) (and (contains b x) (contains b2 x))) (list f1 f2)) 2)))",
        "(contains bouquet3 snapdragons)",
        "(forall ((b Bouquet1) (f Flowers)) (and (contains b lilies) (contains b roses) (not (contains b snapdragons))))",
        "(forall ((b Bouquet1) (f Flowers)) (and (contains b tulips) (contains b peonies)))"
      ],
      "options": [
        "(=> (contains bouquet1 lilies) (contains bouquet2 lilies))",
        "(=> (contains bouquet1 lilies) (contains bouquet3 peonies))",
        "(=> (contains bouquet1 lilies) (contains bouquet2 roses))",
        "(=> (contains bouquet1 lilies) (contains bouquet2 tulips))",
        "(=> (contains bouquet1 lilies) (contains bouquet3 tulips))"
      ],
      "type": "sat",
      "perplexity": [
        1.1009303331375122,
        1.0180768966674805
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "No Output"
    }
  }
]