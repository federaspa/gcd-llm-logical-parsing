[
  {
    "id": 0,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "Bonnie performs in school talent shows often.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Perform(x, y)",
        "Attend(x, y)",
        "Engaged(x, y)",
        "Inactive(x)",
        "Chaperone(x, y)",
        "Student(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "Bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x, school_event) → Attend(x, school_event) ∧ Engaged(x, school_event))",
        "∀x (Perform(x, school_event) ∨ Inactive(x) ∧ Disinterested(x))",
        "∀x (Chaperone(x, dance) → Not(Student(x) ∧ Attend(x, school))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x, dance))",
        "∀x (Young(x) ∧ Student(x) → Attend(x, school))",
        "∃x (Attend(x, school) ∧ Engaged(x, school) ∧ Student(x)) ∨ ∃x (Attend(x, school) ∧ Not(Engaged(x, school)) ∧ Not(Student(x)))"
      ],
      "fol_conc": "∃x (Perform(x, school_event))",
      "perplexity": [
        1.2226039171218872,
        1.031110405921936
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Chaperone(x, dance) → Not(Student(x) ∧ Attend(x, school))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engage(x)",
        "Inactive(x)",
        "Chaperone(x)",
        "Student(x)",
        "Young(x)",
        "Teenager(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → Attend(x) ∧ Engage(x))",
        "∀x (Perform(x) ⊕ Inactive(x))",
        "∀x (Chaperone(x) → ¬Student(x) ∧ Attend(x))",
        "∀x (Inactive(x) → Chaperone(x))",
        "∀x (Young(x) ∧ Teenager(x) → Student(x))",
        "∃x (Attend(x) ∧ Engage(x) ∧ Student(x))",
        "∃x (Attend(x) ∧ Engage(x) ∧ ¬Student(x))",
        "∃x (Inactive(x) ∧ ¬Attend(x) ∧ ¬Engage(x))"
      ],
      "fol_conc": "Perform(bonnie)",
      "perplexity": 1.106093168258667,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Attend(x, y)",
        "Engage(x, y)",
        "Chaperone(x, y)",
        "Inactive(x)",
        "Young(x)",
        "Student(x)",
        "Perform(x, y)"
      ],
      "fol_consts": [
        "Bonnie",
        "School"
      ],
      "fol_rules": [
        "∀x (Attend(x, School) → Engage(x, School))",
        "∀x (Perform(x, School) ⊕ Inactive(x))",
        "∀x (Chaperone(x, HighSchoolDance) → NotStudent(x))",
        "∀x (Inactive(x) → Chaperone(x, HighSchoolDance))",
        "∀x (Young(x) ∧ Student(x) → Attend(x, School))",
        "∀x (Attend(x, School) ⊕ Inactive(x) → Bonnie = Student(x))"
      ],
      "fol_conc": "Bonnie = Student(x)",
      "perplexity": [
        1.3026516437530518,
        1.0550854206085205
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Attend(x, School) ⊕ Inactive(x) → Bonnie = Student(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Attend(x, y)",
        "Engage(x, y)",
        "Chaperone(x, y)",
        "Inactive(x)",
        "Student(x)",
        "Young(x)",
        "Teenager(x)",
        "Wish(x, y)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Attend(x, school) ∧ Engage(x, school) → ∃y (Chaperone(x, y)))",
        "∀x (Perform(x) ⊕ Inactive(x))",
        "∀x (Chaperone(x, school) → ¬Student(x))",
        "∀x (Inactive(x) ∧ Chaperone(x, school))",
        "∀x (Young(x) ∧ Wish(x, school) → Student(x))",
        "∃x (Attend(x, school) ∧ Engage(x, school) ⊕ ¬(Attend(x, school) ∨ Engage(x, school)))",
        "¬(Attend(x, school) ∧ Engage(x, school)) → (Student(x) ∨ Inactive(x))"
      ],
      "fol_conc": "Student(bonnie) ∨ Inactive(bonnie)",
      "perplexity": 1.1731441020965576,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": [
        "If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "If people chaperone high school dances, then they are not students who attend the school.",
        "All people who are inactive and disinterested members of their community chaperone high school dances.",
        "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
      ],
      "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Perform(x, y)",
        "Attend(x, y)",
        "Engaged(x, y)",
        "Chaperone(x, y)",
        "Inactive(x)",
        "Student(x)",
        "Young(x)"
      ],
      "fol_consts": [
        "Bonnie",
        "School"
      ],
      "fol_rules": [
        "∀x (Perform(x, School) → Attend(x, School) ∧ Engaged(x, School))",
        "∀x (Perform(x, School) ∨ Inactive(x) ∧ Disinterested(x))",
        "∀x (Chaperone(x, Dance) → ¬Student(x))",
        "∀x (Inactive(x) ∧ Disinterested(x) → Chaperone(x, Dance))",
        "∀x (Young(x) ∧ Student(x) → Attend(x, School))",
        "∀x (Attend(x, School) ∧ Engaged(x, School) ∨ ¬Attend(x, School) ∧ ¬Engaged(x, School))"
      ],
      "fol_conc": "∀x (Chaperone(x, Dance) ∨ Perform(x, School)) → (Young(x) ∧ Student(x) ∧ Inactive(x) ∧ Disinterested(x))",
      "perplexity": [
        1.2434028387069702,
        1.032165765762329
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Perform(x)",
        "Attend(x)",
        "Engaged(x)",
        "Inactive(x)",
        "Chaperone(x)",
        "Student(x)",
        "Young(x)",
        "Teenager(x)"
      ],
      "fol_consts": [
        "bonnie"
      ],
      "fol_rules": [
        "∀x (Perform(x) → Attend(x) ∧ Engaged(x))",
        "∀x (Perform(x) ⊕ Inactive(x))",
        "∀x (Chaperone(x) → ¬Student(x))",
        "∀x (Inactive(x) → Chaperone(x))",
        "∀x (Student(x) → Attend(x) ∧ Engaged(x))",
        "∀x (Young(x) ∧ Teenager(x) → Student(x))",
        "∃x (Perform(x) ∧ Attend(x) ∧ Engaged(x))",
        "∃x (Perform(x) ⊕ Inactive(x))",
        "∃x (Chaperone(x) ∧ ¬Student(x))"
      ],
      "fol_conc": "∃x (Chaperone(x) ∨ Perform(x)) ∧ ∃x (Young(x) ∧ Teenager(x) ∧ Student(x)) ∧ ∃x (Inactive(x) ∧ ¬Student(x))",
      "perplexity": 1.1320699453353882,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James has lunch in the company.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Employee(x)",
        "ScheduleMeeting(x, y)",
        "LunchInCompany(x)",
        "LunchAtHome(x)",
        "RemoteWork(x)",
        "Manager(x)",
        "InCompanyToday(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (ScheduleMeeting(x, Customer) → InCompanyToday(x))",
        "∀x (LunchInCompany(x) ∧ ScheduleMeeting(x, Customer))",
        "∀x (LunchAtHome(x) → RemoteWork(x))",
        "∀x (RemoteWork(x) → InCompanyToday(x))",
        "∀x (Not Manager(x) → InCompanyToday(x))",
        "∀x (Manager(x) ∧ InCompanyToday(x) ∨ Not Manager(x) ∨ Not InCompanyToday(x))"
      ],
      "fol_conc": "LunchInCompany(james)",
      "perplexity": [
        1.2473312616348267,
        1.0324411392211914
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Schedule(x, y)",
        "Appear(x, y)",
        "Has(x, y)",
        "Lunch(x, y)",
        "Work(x, y)",
        "Remote(x, y)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Schedule(x, y) → Appear(x, y))",
        "∀x (Has(x, y) → Schedule(x, y))",
        "∀x (Lunch(x) → Schedule(x, y))",
        "∀x (Remote(x) → Has(x, y))",
        "∀x (Manager(x) → Appear(x, y))",
        "∀x (Remote(x) ∧ Not(appear))",
        "∀x (Not(manager) ∧ Appear(x, y))"
      ],
      "fol_conc": "Lunch(james)",
      "perplexity": 1.3129149675369263,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Manager/1, Manager/0, Appear/2, Appear/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Manager/1, Manager/0, Appear/2, Appear/0"
    }
  },
  {
    "id": 4,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "James does not have lunch in the company.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "ScheduleMeeting(x, y)",
        "AppearInCompany(x)",
        "LunchInCompany(x)",
        "LunchAtHome(x)",
        "WorkRemotelyFromHome(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "James"
      ],
      "fol_rules": [
        "∀x (ScheduleMeeting(x, Customer) → AppearInCompany(x))",
        "∀x (LunchInCompany(x) → ScheduleMeeting(x, Customer))",
        "∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))",
        "∀x (AllEmployeesInOtherCountries → WorkRemotelyFromHome(x))",
        "∀x (¬Manager(x) → ¬AppearInCompany(x))",
        "¬LunchInCompany(James)"
      ],
      "fol_conc": "¬LunchInCompany(James)",
      "perplexity": [
        1.2176463603973389,
        1.0403186082839966
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (AllEmployeesInOtherCountries → WorkRemotelyFromHome(x))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Schedule(x, y)",
        "Appear(x)",
        "Has(x, y)",
        "Lunch(x)",
        "Work(x)",
        "Remote(x)",
        "Manager(x)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Schedule(x, y) → Appear(x))",
        "∀x (Has(x, y) → Schedule(x, y))",
        "∀x (Lunch(x) → Schedule(x, y))",
        "∀x (Remote(x) → Has(x, home))",
        "∀x (Manager(x) → Remote(x))",
        "∀x (Remote(x) ∧ Appear(x) → ¬Lunch(x))",
        "∀x (Remote(x) ∧ ¬Appear(x) → ¬Lunch(x))"
      ],
      "fol_conc": "¬Lunch(james)",
      "perplexity": 1.2198445796966553,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 5,
    "nl_problem": {
      "context": [
        "All employees who schedule a meeting with their customers will appear in the company today. ",
        "Everyone who has lunch in the company schedules meetings with their customers. ",
        "Employees will either have lunch in the company or have lunch at home.",
        "If an employee has lunch at home, then he/she is working remotely from home.",
        "All employees who are in other countries work remotely from home. ",
        "No managers work remotely from home. ",
        "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "ScheduleMeeting(x, y)",
        "LunchInCompany(x)",
        "RemotelyFromHome(x)",
        "Manager(x)",
        "InOtherCountries(x)",
        "AppearInCompany(x)"
      ],
      "fol_consts": [
        "James"
      ],
      "fol_rules": [
        "∀x (ScheduleMeeting(x, Customer) → AppearInCompany(x))",
        "∀x (LunchInCompany(x) → ScheduleMeeting(x, Customer))",
        "∀x (RemotelyFromHome(x) ∨ LunchInCompany(x))",
        "∀x (RemotelyFromHome(x) → InOtherCountries(x))",
        "∀x (¬Manager(x) ∧ ¬AppearInCompany(x)) → ¬RemotelyFromHome(x)"
      ],
      "fol_conc": "If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
      "perplexity": [
        1.2453924417495728,
        1.0371971130371094
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Schedule(x, y)",
        "Appear(x, y)",
        "Lunch(x)",
        "Work(x)",
        "Remotely(x)",
        "Manager(x)",
        "In(x, y)"
      ],
      "fol_consts": [
        "james"
      ],
      "fol_rules": [
        "∀x (Schedule(x, y) → Appear(x, y))",
        "∀x (Lunch(x) → Schedule(x, y))",
        "∀x (Work(x) ⊕ Lunch(x))",
        "∀x (Remotely(x) ∧ Lunch(x) → Work(x))",
        "∀x (Manager(x) ∧ Appear(x, y) → Remotely(x))",
        "∀x (In(x, y) ∧ Remotely(x) → Work(x))"
      ],
      "fol_conc": "Remotely(james) ∨ ¬Remotely(james)",
      "perplexity": 1.2115823030471802,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 6,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "There is an animal.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Infectious(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptoms(x)",
        "FeelTired(x)",
        "Glu(x)"
      ],
      "fol_consts": [
        "Monkeypox",
        "Virus",
        "Humans",
        "Animals"
      ],
      "fol_rules": [
        "Infectious(Monkeypox) ∧ OccursIn(Monkeypox, Humans):",
        "Mammal(Humans) ∧ Animal(Humans):",
        "Symptoms(Monkeypox):",
        "FeelTired(Humans) ∧ Glu(Humans):"
      ],
      "fol_conc": "There is an animal",
      "perplexity": [
        1.3897767066955566,
        1.053663969039917
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Infectious(Monkeypox) ∧ OccursIn(Monkeypox, Humans):"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Caused(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Feel(x, y)",
        "Glu(x)"
      ],
      "fol_consts": [
        "monkeypox",
        "virus",
        "humans",
        "animals",
        "mammals",
        "fever",
        "headache",
        "muscle",
        "tired",
        "glu"
      ],
      "fol_rules": [
        "∀x (Infectious(x) → Caused(x, virus))",
        "∀x (Occur(x, animal) → Mammal(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Feel(x, tired) → Glu(x))"
      ],
      "fol_conc": "∃x (Animal(x))",
      "perplexity": 1.245678424835205,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    }
  },
  {
    "id": 7,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "No one gets flu.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Infectious(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "FeelTired(x)",
        "GetFlu(x)"
      ],
      "fol_consts": [
        "Monkeypox",
        "Flu",
        "Humans"
      ],
      "fol_rules": [
        "∀x (Infectious(x) → CausedBy(x, Monkeypox))",
        "∀x (OccursIn(x, Mammal) → Animal(x))",
        "∀x (FeelTired(x) → GetFlu(x))"
      ],
      "fol_conc": "¬(GetFlu(x))",
      "perplexity": [
        1.4729193449020386,
        1.0589452981948853
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Caused(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Feel(x, y)",
        "Get(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "virus",
        "humans",
        "mammals",
        "animals",
        "flu"
      ],
      "fol_rules": [
        "∀x (Infectious(x) → Caused(x, virus))",
        "∀x (Occur(x, animal) → Mammal(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Feel(x, glu) → Get(x, flu))"
      ],
      "fol_conc": "¬Get(x, flu)",
      "perplexity": 1.2165080308914185,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0"
    }
  },
  {
    "id": 8,
    "nl_problem": {
      "context": [
        "Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Monkeypox virus can occur in certain animals, including humans.",
        "Humans are mammals.",
        "Mammals are animals.",
        "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "People feel tired when they get a glu."
      ],
      "question": "Symptons of Monkeypox include coughing.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "InfectiousDisease(x)",
        "CausedBy(x, y)",
        "OccursIn(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x)",
        "FeelTired(x)",
        "Cough(x)"
      ],
      "fol_consts": [
        "Monkeypox",
        "Virus",
        "Humans",
        "Fever",
        "Headache",
        "MusclePain",
        "Tiredness",
        "Glu"
      ],
      "fol_rules": [
        "∀x (InfectiousDisease(x) → OccursIn(x, Virus))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Symptom(x) → OccursIn(x, Monkeypox))",
        "∀x (FeelTired(x) → OccursIn(x, Monkeypox))",
        "∀x (Cough(x) → OccursIn(x, Monkeypox))"
      ],
      "fol_conc": "∃x (Symptom(x) ∧ OccursIn(x, Monkeypox))",
      "perplexity": [
        1.3077350854873657,
        1.0336198806762695
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Infectious(x)",
        "Caused(x, y)",
        "Occur(x, y)",
        "Mammal(x)",
        "Animal(x)",
        "Symptom(x)",
        "Feel(x, y)"
      ],
      "fol_consts": [
        "monkeypox",
        "virus",
        "humans",
        "mammals",
        "animals",
        "fever",
        "headache",
        "muscle",
        "tired",
        "glu"
      ],
      "fol_rules": [
        "∀x (Infectious(x) → Occur(x, virus))",
        "∀x (Occur(x, virus) → Mammal(x))",
        "∀x (Mammal(x) → Animal(x))",
        "∀x (Symptom(x) ∧ Feel(x, tired))",
        "∀x (Symptom(x) ∧ Feel(x, glu))"
      ],
      "fol_conc": "Symptom(x) ∧ Coughing(x)",
      "perplexity": 1.2090024948120117,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 9,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Ocellated wild turkey.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Type(x)",
        "Is(x, y)",
        "Not(x)",
        "WildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (Type(x) → WildTurkey(x))",
        "∀x (Not(Type(x)) → Not(WildTurkey(x)))",
        "∀x (Not(Type(x)) ∨ Not(WildTurkey(x)))",
        "∀x (WildTurkey(tom))"
      ],
      "fol_conc": "WildTurkey(tom)",
      "perplexity": [
        1.327797532081604,
        1.061787724494934
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Not(Type(x)) → Not(WildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wildturkey(x)",
        "Not(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (Wildturkey(x) → ¬Is(x, tom))",
        "∀x (Not(x) ∧ Not(tom) ∧ Not(wildturkey))",
        "∀x (Is(x, tom) ∧ Wildturkey(x))"
      ],
      "fol_conc": "Is(tom, ocellated)",
      "perplexity": 1.5553231239318848,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wildturkey/1, Wildturkey/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Wildturkey/1, Wildturkey/0"
    }
  },
  {
    "id": 10,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Tom is an Eastern wild turkey.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Type(x)",
        "Is(x, y)",
        "Not(x)",
        "WildTurkey(x)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (Type(x) → WildTurkey(x))",
        "∀x (Not(Type(x)) → Not(WildTurkey(x)))",
        "∀x (Not(Is(x, EasternWildTurkey)) ∧ Not(Is(x, OsceolaWildTurkey)) ∧ Not(Is(x, GouldsWildTurkey)) ∧ Not(Is(x, MerriamWildTurkey)) ∧ Not(Is(x, RioGrandeWildTurkey)))",
        "∀x (WildTurkey(x) → Is(x, tom))"
      ],
      "fol_conc": "Is(tom, EasternWildTurkey)",
      "perplexity": [
        1.144278645515442,
        1.0450414419174194
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Not(Type(x)) → Not(WildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wildturkey(x)",
        "Not(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "tom"
      ],
      "fol_rules": [
        "∀x (Wildturkey(x) → ¬Is(x, tom))",
        "∀x (Not(x) ∧ Not(tom) ∧ Not(wildturkey))",
        "∀x (Is(x, tom) ∧ Wildturkey(x))"
      ],
      "fol_conc": "Is(tom, easternwildturkey)",
      "perplexity": 1.5148686170578003,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Wildturkey/1, Wildturkey/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Wildturkey/1, Wildturkey/0"
    }
  },
  {
    "id": 11,
    "nl_problem": {
      "context": [
        "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
        "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "Tom is not an Eastern wild turkey.",
        "Tom is not an Osceola wild turkey.",
        "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "Tom is a wild turkey."
      ],
      "question": "Joey is a wild turkey.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Type(x)",
        "Is(x, y)",
        "Not(x)",
        "WildTurkey(x)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "∀x (Type(x) → WildTurkey(x))",
        "∀x (Not(Type(x)) → Not(WildTurkey(x)))",
        "Not(Is(tom, Type(x))) ∧ Not(Is(tom, Osceola)) ∧ Not(Is(tom, Goulds)) ∧ Not(Is(tom, Merriam)) ∧ Not(Is(tom, RioGrande))",
        "∀x (WildTurkey(x) → Is(x, tom))"
      ],
      "fol_conc": "∀x (WildTurkey(x) → Is(x, joey))",
      "perplexity": [
        1.1813607215881348,
        1.0384135246276855
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Not(Type(x)) → Not(WildTurkey(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Wildturkey(x)",
        "Not(x)",
        "Is(x, y)"
      ],
      "fol_consts": [
        "tom",
        "joey"
      ],
      "fol_rules": [
        "∀x (Wildturkey(x) → Not(tom))",
        "∀x (Not(tom) ∧ Not(osceola) ∧ Not(goulds) ∧ Not(merriam) ∧ Not(rio) ∧ Not(ocellated))",
        "∀x (Wildturkey(x) ∧ Is(x, tom))",
        "∀x (Wildturkey(x) ∧ Is(x, joey))"
      ],
      "fol_conc": "Joey(x)",
      "perplexity": 1.359971523284912,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Joey/1, Joey/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Joey/1, Joey/0"
    }
  },
  {
    "id": 12,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is in the Top 10 list.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Top10(x)",
        "Sold(x, y)",
        "Created(x, y)"
      ],
      "fol_consts": [
        "Zelda",
        "Japanese"
      ],
      "fol_rules": [
        "∀x (Company(x) → Company(Japan))",
        "∀x (Game(x) → Top10(x))",
        "∀x (Sold(x, y) → Top10(x))",
        "∃x (Sold(Zelda, y) ∧ Top10(x))"
      ],
      "fol_conc": "Top10(Zelda)",
      "perplexity": [
        1.3081456422805786,
        1.0503233671188354
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "In(x, y)",
        "Top10(x)",
        "Sold(x, y)",
        "Game(x)",
        "Japanese(x)"
      ],
      "fol_consts": [
        "legendofzelda",
        "top10"
      ],
      "fol_rules": [
        "∀x (Created(x, y) → In(x, y))",
        "∀x (Top10(x) → ∀y (Sold(y, x) → In(y, x)))",
        "∀x (Sold(x, y) → Top10(y))"
      ],
      "fol_conc": "Top10(legendofzelda)",
      "perplexity": 1.2512826919555664,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 13,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "FIFA 22 is made by a Japanese video game company.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Top10(x)",
        "Sold(x, y)",
        "MadeBy(x, y)"
      ],
      "fol_consts": [
        "LegendOfZelda",
        "FIFA22",
        "Japanese"
      ],
      "fol_rules": [
        "∀x (Company(x) → Company(Japan))",
        "∀x (Game(x) → Top10(x))",
        "∀x (Sold(x, y) → Top10(x))",
        "∀x (Game(x) ∧ Sold(x, 1,000,000) → Top10(x))",
        "∀x (Company(Japan) → MadeBy(x, Japan))"
      ],
      "fol_conc": "∃x (Company(x) ∧ MadeBy(x, Japan) ∧ Game(x) ∧ Top10(x))",
      "perplexity": [
        1.2521542310714722,
        1.0309480428695679
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Sold/4, Sold/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Sold/4, Sold/2"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "In(x, y)",
        "Top10(x)",
        "Sells(x, y)",
        "Made(x, y)",
        "Video(x)"
      ],
      "fol_consts": [
        "legendofzelda",
        "fifa22",
        "top10",
        "japanese"
      ],
      "fol_rules": [
        "∀x (Created(x, y) → In(x, y))",
        "∀x (Top10(x) → ∀y (Sells(y, x) → In(y, x)))",
        "∀x (Sells(x, y) → In(x, y))"
      ],
      "fol_conc": "Made(fifa22, japanese)",
      "perplexity": 1.2912111282348633,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 14,
    "nl_problem": {
      "context": [
        "A Japanese game company created the game the Legend of Zelda.",
        "All games in the Top 10 list are made by Japanese game companies.",
        "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "The Legend of Zelda sold more than one million copies."
      ],
      "question": "The Legend of Zelda is not in the Top 10 list.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Company(x)",
        "Game(x)",
        "Top10(x)",
        "Sold(x, y)",
        "Created(x, y)"
      ],
      "fol_consts": [
        "Zelda",
        "Japanese"
      ],
      "fol_rules": [
        "∀x (Company(x) → Top10(x))",
        "∀x (Game(x) → Sold(x, 1,000,000) → Top10(x))",
        "∃x (Company(x) ∧ Created(x, Zelda))",
        "∃x (Top10(x) ∧ Sold(x, 1,000,000))"
      ],
      "fol_conc": "¬Top10(Zelda)",
      "perplexity": [
        1.3092877864837646,
        1.0475928783416748
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Created(x, y)",
        "In(x, y)",
        "Top10(x)",
        "Sold(x, y)",
        "Game(x)",
        "Japanese(x)"
      ],
      "fol_consts": [
        "legendofzelda",
        "top10"
      ],
      "fol_rules": [
        "∀x (Created(x, y) → In(x, y))",
        "∀x (Top10(x) → ∀y (Sold(y, x) → In(y, x)))",
        "∀x (Sold(x, y) → Top10(y))",
        "∀x (Game(x) ∧ Created(x, y) ∧ Sold(x, y) → In(x, y))"
      ],
      "fol_conc": "¬In(legendofzelda, top10)",
      "perplexity": 1.2578884363174438,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Top10/1, Top10/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Top10/1, Top10/0"
    }
  },
  {
    "id": 15,
    "nl_problem": {
      "context": [
        "All squares have four sides.",
        "All four-sided things are shapes. "
      ],
      "question": "All squares are shapes.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Square(x)",
        "FourSided(x)",
        "Shape(x)"
      ],
      "fol_consts": [],
      "fol_rules": [
        "∀x (Square(x) → FourSided(x))",
        "∀x (FourSided(x) → Shape(x))"
      ],
      "fol_conc": "∀x (Square(x) → Shape(x))",
      "perplexity": [
        1.2841638326644897,
        1.0723074674606323
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Square(x)",
        "Foursided(x)",
        "Shape(x)"
      ],
      "fol_consts": [
        "square"
      ],
      "fol_rules": [
        "∀x (Square(x) → Foursided(x))",
        "∀x (Foursided(x) → Shape(x))"
      ],
      "fol_conc": "∀x (Square(x) → Shape(x))",
      "perplexity": 1.1409939527511597,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 16,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock",
        "rabbit",
        "squirrel"
      ],
      "fol_rules": [
        "∀x (Cute(x) → Animal(x))",
        "∃x (Exist(x) ∧ Animal(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Rabbit(x) → Skittish(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "∀x (Still(x) → ¬Skittish(x))"
      ],
      "fol_conc": "Rock is a turtle",
      "perplexity": [
        1.229757308959961,
        1.0444151163101196
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Rock is a turtle"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Rabbit(x)",
        "Squirrel(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Cute(x) → Animal(x))",
        "∃x (Exist(x))",
        "∀x (Animal(x) ∨ Squirrel(x))",
        "Skittish(x) → ¬Still(x)",
        "∀x (Squirrel(x) → Skittish(x))",
        "¬(Skittish(rock) ∧ Still(rock))"
      ],
      "fol_conc": "Rock(x) ∧ Exist(x)",
      "perplexity": 1.1713889837265015,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0"
    }
  },
  {
    "id": 17,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is not a turtle.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Rabbit(x)",
        "Turtle(x)",
        "Animal(x)",
        "Cute(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock",
        "turtle"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Turtle(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "¬Turtle(rock)",
      "perplexity": [
        1.2276241779327393,
        1.0438512563705444
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Rabbit(x)",
        "Squirrel(x)"
      ],
      "fol_consts": [
        "rock",
        "turtle"
      ],
      "fol_rules": [
        "∀x (Cute(x) → Animal(x))",
        "∃x (Exist(x))",
        "∀x (Animal(x) ∨ Squirrel(x))",
        "Skittish(x) → ¬Still(x)",
        "∀x (Squirrel(x) ∧ Skittish(x))",
        "Still(rock)"
      ],
      "fol_conc": "¬Exist(turtle)",
      "perplexity": 1.1256535053253174,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 18,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "Rock is a turtle or cute.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "rock",
        "turtle"
      ],
      "fol_rules": [
        "∀x (Cute(x) → Exist(x))",
        "∃x (Animal(x) ∧ Rabbit(x))",
        "∃x (Animal(x) ∧ Squirrel(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "¬(Still(rock) ∧ Exist(rock))"
      ],
      "fol_conc": "Rock is a turtle or cute.",
      "perplexity": [
        1.3032912015914917,
        1.0501667261123657
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Rock is a turtle or cute."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Rabbit(x)",
        "Squirrel(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Cute(x) ∧ Exist(x))",
        "∃x (Animal(x) ∧ Rabbit(x))",
        "∃x (Animal(x) ∧ Squirrel(x))",
        "Skittish(x) → ¬Still(x)",
        "∀x (Squirrel(x) ∧ Skittish(x))",
        "¬(Rabbit(x) ∧ Still(x))"
      ],
      "fol_conc": "Rock(x) ∨ Cute(x)",
      "perplexity": 1.1761916875839233,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 19,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)",
        "Turtle(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Animal(x) → Cute(x))",
        "∃x (Exist(x) ∧ Rabbit(x))",
        "∃x (Exist(x) ∧ Squirrel(x))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "¬(Turtle(Rock) ∧ Squirrel(Rock))"
      ],
      "fol_conc": "If ¬(Turtle(Rock) ∧ Squirrel(Rock)) then Cute(Rock) ∨ Skittish(Rock)",
      "perplexity": [
        1.2883418798446655,
        1.0348460674285889
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "If ¬(Turtle(Rock) ∧ Squirrel(Rock)) then Cute(Rock) ∨ Skittish(Rock)"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Turtle(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exist(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "¬(Turtle(x) ∧ Rabbit(x))",
        "¬(Skittish(x) ∧ Still(x))"
      ],
      "fol_conc": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ∨ Skittish(rock))",
      "perplexity": 1.1027357578277588,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 20,
    "nl_problem": {
      "context": [
        "All rabbits are cute. ",
        "Some turtles exist. ",
        "An animal is either a rabbit or a squirrel.",
        "If something is skittish, then it is not still.",
        "All squirrels are skittish.",
        "Rock is still."
      ],
      "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Rabbit(x)",
        "Squirrel(x)",
        "Skittish(x)",
        "Still(x)"
      ],
      "fol_consts": [
        "Rock"
      ],
      "fol_rules": [
        "∀x (Rabbit(x) → Cute(x))",
        "∃x (Exist(x) ∧ Animal(x))",
        "∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x)))",
        "∀x (Skittish(x) → ¬Still(x))",
        "∀x (Squirrel(x) → Skittish(x))",
        "¬Still(Rock)",
        "Cute(Rock) ∧ Still(Rock) → Rock is a turtle and skittish"
      ],
      "fol_conc": "Rock is a turtle and skittish",
      "perplexity": [
        1.2381045818328857,
        1.0542312860488892
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "Cute(Rock) ∧ Still(Rock) → Rock is a turtle and skittish"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Cute(x)",
        "Exist(x)",
        "Animal(x)",
        "Skittish(x)",
        "Still(x)",
        "Rabbit(x)",
        "Squirrel(x)"
      ],
      "fol_consts": [
        "rock"
      ],
      "fol_rules": [
        "∀x (Cute(x) → Animal(x))",
        "∃x (Exist(x))",
        "∀x (Animal(x) ∨ Rabbit(x) ∨ Squirrel(x))",
        "Skittish(x) → ¬Still(x)",
        "∀x (Squirrel(x) ∧ Skittish(x))",
        "¬(Still(rock))"
      ],
      "fol_conc": "Rock(x) ∧ Cute(x) ∧ Still(x) → Rock(x) ∧ Turtle(x) ∧ Skittish(x)",
      "perplexity": 1.1639903783798218,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0"
    }
  },
  {
    "id": 21,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Stranger Things\" to Lisa.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y)"
      ],
      "fol_consts": [
        "StrangerThings",
        "BlackMirror",
        "Karen",
        "Lisa",
        "Netflix"
      ],
      "fol_rules": [
        "∀x (Show(x) → Popular(x))",
        "∀x (BingeWatch(x, y) → Download(x, y))",
        "∀x (Download(x, y) ∧ BingeWatch(x, y) → Share(x, y))",
        "¬Download(Karen, BlackMirror)",
        "Show(StrangerThings)",
        "BingeWatch(Karen, StrangerThings) ∧ Share(Karen, Lisa)"
      ],
      "fol_conc": "Share(Karen, StrangerThings)",
      "perplexity": [
        1.348183512687683,
        1.0393232107162476
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Share(x, y)",
        "Netflix(x)",
        "Blackmirror(x)"
      ],
      "fol_consts": [
        "karen",
        "strangerthings",
        "blackmirror",
        "lisa"
      ],
      "fol_rules": [
        "∀x (Popular(x) → Bingewatch(karen, x))",
        "Bingewatch(karen, x) → Download(karen, x)",
        "¬Download(karen, x) ∧ Blackmirror(x) → ¬Share(karen, x)",
        "Bingewatch(karen, x) ∧ Netflix(x) → Share(karen, lisa)",
        "Share(karen, lisa)"
      ],
      "fol_conc": "Share(karen, lisa)",
      "perplexity": 1.2052117586135864,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 22,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "\"Black Mirror\" is popular.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y)"
      ],
      "fol_consts": [
        "StrangerThings",
        "BlackMirror",
        "Karen",
        "Lisa",
        "Netflix"
      ],
      "fol_rules": [
        "∀x (Show(x) → Popular(x))",
        "∀x (BingeWatch(x, y) → Download(x, y))",
        "∀x (BingeWatch(x, y) ∧ Download(x, y) → Share(x, y))",
        "¬(Download(Karen, BlackMirror))",
        "Show(BlackMirror)"
      ],
      "fol_conc": "Popular(BlackMirror)",
      "perplexity": [
        1.3428575992584229,
        1.0387309789657593
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Share(x, y)",
        "Netflix(x)",
        "Stranger(x)"
      ],
      "fol_consts": [
        "blackmirror",
        "karen",
        "lisa",
        "strangerthings"
      ],
      "fol_rules": [
        "∀x (Popular(x) → Bingewatch(karen, x))",
        "Bingewatch(karen, x) → Download(karen, x)",
        "¬Download(karen, x) ∧ ¬Popular(x) → ¬Share(karen, x)",
        "Netflix(x) ∧ Popular(x) → Bingewatch(karen, x)",
        "Netflix(blackmirror) ∧ Popular(blackmirror) → Bingewatch(karen, blackmirror)"
      ],
      "fol_conc": "Popular(blackmirror)",
      "perplexity": 1.2396318912506104,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 23,
    "nl_problem": {
      "context": [
        "\"Stranger Things\" is a popular Netflix show.",
        "If a Netflix show is popular, Karen will binge-watch it.",
        "If and only if Karen binge-watches a Netflix show, she will download it.",
        "Karen does not download \"Black Mirror\".",
        "\"Black Mirror\" is a Netflix show.",
        "If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "question": "Karen will share \"Black Mirror\" to Lisa.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Show(x)",
        "Popular(x)",
        "BingeWatch(x, y)",
        "Download(x, y)",
        "Share(x, y)"
      ],
      "fol_consts": [
        "StrangerThings",
        "BlackMirror",
        "Karen",
        "Lisa",
        "Netflix"
      ],
      "fol_rules": [
        "∀x (Show(x) → Popular(x))",
        "∀x (BingeWatch(x, y) → Download(x, y))",
        "∀x (BingeWatch(x, y) ∧ Download(x, y))",
        "¬Download(Karen, BlackMirror)",
        "Show(BlackMirror)",
        "BingeWatch(Karen, y) → Share(Karen, y)"
      ],
      "fol_conc": "Share(Karen, BlackMirror)",
      "perplexity": [
        1.356624960899353,
        1.038676142692566
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Popular(x)",
        "Bingewatch(x, y)",
        "Download(x, y)",
        "Share(x, y)",
        "Netflix(x)",
        "Blackmirror(x)"
      ],
      "fol_consts": [
        "karen",
        "blackmirror",
        "netflix"
      ],
      "fol_rules": [
        "∀x (Popular(x) → Bingewatch(karen, x))",
        "Bingewatch(karen, x) → Download(karen, x)",
        "¬Download(karen, x) ∧ Blackmirror(x) → ¬Share(karen, x)",
        "Bingewatch(karen, x) ∧ Netflix(x) → Share(karen, x)"
      ],
      "fol_conc": "Share(karen, blackmirror)",
      "perplexity": 1.2060683965682983,
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Blackmirror/1, Blackmirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Blackmirror/1, Blackmirror/0"
    }
  },
  {
    "id": 24,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)",
        "University(x)"
      ],
      "fol_consts": [
        "Beijing",
        "China",
        "Summer",
        "Winter",
        "Paralympics"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, China))",
        "∀x (Populous(Beijing))",
        "∀x (Located(Beijing, Northern China))",
        "∀x (Hosted(Beijing, Summer Olympics) ∧ Hosted(Beijing, Summer Paralympics))",
        "∀x (Ranked(Beijing, Asia-Pacific) ∨ Ranked(Beijing, World))",
        "∀x (University(x))"
      ],
      "fol_conc": "∃x (Hosted(Beijing, Summer Olympics) ∧ Hosted(Beijing, Winter Olympics))",
      "perplexity": [
        1.331743597984314,
        1.0460091829299927
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nall x.((Ranked(Beijing, Asia-Pacific)) | (Ranked(Beijing, World)))\n                            ^"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x)",
        "Worldly(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "summer",
        "winter",
        "olympics"
      ],
      "fol_rules": [
        "∀x (Capital(x) → Worldly(x))",
        "∀x (Located(x, y) → ∃z (Capital(z) ∧ Located(x, y)))",
        "∀x (Hosted(x, y) → ∃z (Capital(z) ∧ Hosted(x, y)))",
        "∀x (Ranked(x, y) → ∃z (Capital(z) ∧ Ranked(x, y)))"
      ],
      "fol_conc": "Hosted(beijing, summer) ∧ Hosted(beijing, winter)",
      "perplexity": 1.2469162940979004,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 25,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is located in southern China.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)",
        "Southern(x)"
      ],
      "fol_consts": [
        "Beijing",
        "China",
        "Asia-Pacific"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, China))",
        "∀x (Populous(Beijing))",
        "∀x (Located(Beijing, Northern China))",
        "∀x (Hosted(Beijing, Summer Olympics) ∧ Hosted(Beijing, Summer Paralympics))",
        "∀x (Hosted(Beijing, Summer Olympics) ∧ Hosted(Beijing, Winter Olympics) ∧ Hosted(Beijing, Summer Paralympics) ∧ Hosted(Beijing, Winter Paralympics))",
        "∀x (Southern(Beijing))"
      ],
      "fol_conc": "∀x (Southern(Beijing))",
      "perplexity": [
        1.2518597841262817,
        1.0340430736541748
      ],
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)",
        "Southern(x)"
      ],
      "fol_consts": [
        "beijing",
        "china"
      ],
      "fol_rules": [
        "Capital(beijing, china)",
        "Populous(beijing)",
        "Located(beijing, northern)",
        "Hosted(beijing, summer2008)",
        "Ranked(beijing, asia)",
        "Ranked(beijing, world)"
      ],
      "fol_conc": "Located(beijing, southern)",
      "perplexity": 1.4219944477081299,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 26,
    "nl_problem": {
      "context": [
        "Beijing is the capital of the People's Republic of China. ",
        "Beijing is the world's most populous national capital city.",
        "Beijing is located in Northern China.",
        "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "question": "Beijing is the second largest Chinese city by urban population.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)",
        "City(x)"
      ],
      "fol_consts": [
        "Beijing",
        "China",
        "People's Republic of China",
        "Summer Olympics",
        "Winter Olympics",
        "Summer Paralympics",
        "Winter Paralympics",
        "Asia-Pacific"
      ],
      "fol_rules": [
        "∀x (Capital(Beijing, China))",
        "∀x (Populous(Beijing))",
        "∀x (Located(Beijing, Northern China))",
        "∀x (Hosted(Beijing, Summer Olympics) ∧ Hosted(Beijing, Summer Paralympics))",
        "∀x (Ranked(Beijing, Asia-Pacific))",
        "∃x (City(x) ∧ Populous(x) ∧ Ranked(x, Asia-Pacific) ∧ Located(x, China))"
      ],
      "fol_conc": "∃x (City(x) ∧ Populous(x) ∧ Ranked(x, Asia-Pacific) ∧ Located(x, China))",
      "perplexity": [
        1.3127994537353516,
        1.0383821725845337
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "Unexpected token: '-'.  Expected token ')'.\nsome x.((((City(x)) & (Populous(x))) & (Ranked(x, Asia-Pacific))) & (Located(x, China)))\n                                                      ^"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Capital(x, y)",
        "Populous(x)",
        "Located(x, y)",
        "Hosted(x, y)",
        "Ranked(x, y)",
        "Urban(x)",
        "Largest(x, y)"
      ],
      "fol_consts": [
        "beijing",
        "china",
        "largest"
      ],
      "fol_rules": [
        "∀x (Capital(x, y) → ∃x (Populous(x)))",
        "∀x (Capital(x, y) → Located(x, y))",
        "∀x (Capital(x, y) → Hosted(x, y))",
        "∀x (Ranked(x, y) → ∃x (Capital(x, y)))",
        "∀x (Capital(x, y) → Urban(x))",
        "∀x (Largest(x, y) → ∃x (Capital(x, y)))"
      ],
      "fol_conc": "Largest(beijing, china)",
      "perplexity": 1.2270094156265259,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 27,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is an alien.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, Mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, Earth) → Human(x))",
        "¬(From(Marvin, Earth) ∧ From(Marvin, Mars))",
        "¬(From(Marvin, Earth) → Alien(Marvin))"
      ],
      "fol_conc": "Alien(Marvin)",
      "perplexity": [
        1.2420605421066284,
        1.0473549365997314
      ],
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "From(mars, x) → Alien(x)",
        "¬Extraterrestrial(x) ∧ Human(x) → False(x)",
        "∀x (From(earth, x) ∧ Human(x))",
        "¬From(earth, marvin) ∧ ¬From(mars, marvin) → Alien(marvin)",
        "¬From(earth, marvin) → Alien(marvin)"
      ],
      "fol_conc": "Alien(marvin)",
      "perplexity": 1.1869723796844482,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 28,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "Marvin is neither a human nor from Mars.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)",
        "Marvin"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, Mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, Earth) → Human(x))",
        "¬(From(Marvin, Earth) ∧ From(Marvin, Mars))",
        "¬(From(Marvin, Earth) → Alien(Marvin))"
      ],
      "fol_conc": "¬(Human(Marvin) ∧ From(Marvin, Mars))",
      "perplexity": [
        1.217917561531067,
        1.038560390472412
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "From(mars, x) → Alien(x)",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x (From(earth, x) → Human(x))",
        "¬(From(earth, marvin) ∧ From(mars, marvin))",
        "¬(From(earth, marvin)) → Alien(marvin)"
      ],
      "fol_conc": "¬(Human(marvin) ∨ From(mars, marvin))",
      "perplexity": 1.1002792119979858,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 29,
    "nl_problem": {
      "context": [
        "All aliens are extraterrestrial.",
        "If someone is from Mars, then they are aliens.",
        "No extraterrestrial is human.",
        "Everyone from Earth is a human.",
        "Marvin cannot be from Earth and from Mars.",
        "If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "question": "If Marvin is not from Mars, then Marvin is a human.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "Human(x)",
        "From(x, y)"
      ],
      "fol_consts": [
        "Marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, Mars) → Alien(x))",
        "∀x (Extraterrestrial(x) → ¬Human(x))",
        "∀x (From(x, Earth) → Human(x))",
        "¬(From(Marvin, Earth) ∧ From(Marvin, Mars))",
        "¬(From(Marvin, Earth) ∧ ¬Alien(Marvin)) → Alien(Marvin)"
      ],
      "fol_conc": "¬(From(Marvin, Mars) ∧ From(Marvin, Earth)) → Human(Marvin)",
      "perplexity": [
        1.240781307220459,
        1.0393223762512207
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Alien(x)",
        "Extraterrestrial(x)",
        "From(x, y)",
        "Human(x)",
        "Earth(x)",
        "Mars(x)"
      ],
      "fol_consts": [
        "marvin"
      ],
      "fol_rules": [
        "∀x (Alien(x) → Extraterrestrial(x))",
        "∀x (From(x, mars) → Alien(x))",
        "¬(Extraterrestrial(x) ∧ Human(x))",
        "∀x (From(x, earth) → Human(x))",
        "¬(From(marvin, earth) ∧ From(marvin, mars))",
        "¬(From(marvin, earth) → Alien(marvin))"
      ],
      "fol_conc": "¬(From(marvin, mars) → Human(marvin))",
      "perplexity": 1.1137964725494385,
      "answer": "B",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 30,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic is a Grand Slam champion.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "Djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "∀x (Famous(Djokovic) ∧ Athlete(Djokovic) → LivesInTaxHaven(Djokovic))"
      ],
      "fol_conc": "GrandSlamChampion(Djokovic)",
      "perplexity": [
        1.225831389427185,
        1.037480115890503
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslam(x)",
        "Oscarnominated(x)",
        "Professional(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "Famous(x)",
        "Wellpaid(x)",
        "Lives(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslam(x) ∨ Oscarnominated(x))",
        "∀x (Professional(x) → Grandslam(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Lives(x))",
        "∀x (Famous(x) ∧ Athlete(x) → Lives(x))"
      ],
      "fol_conc": "Grandslam(djokovic)",
      "perplexity": 1.192116141319275,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 31,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic lives in a tax haven.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "Djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "∀x (Famous(Djokovic) ∧ Athlete(Djokovic) → LivesInTaxHaven(Djokovic))"
      ],
      "fol_conc": "LivesInTaxHaven(Djokovic)",
      "perplexity": [
        1.2204879522323608,
        1.0362839698791504
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslam(x)",
        "Oscarnominated(x)",
        "Professional(x)",
        "Athlete(x)",
        "Celebrity(x)",
        "Wellpaid(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslam(x) ∨ Oscarnominated(x))",
        "∀x (Professional(x) → Grandslam(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "∀x (Famous(x) ∧ Athlete(x) → Djokovic(x) ∧ Taxhaven(x))"
      ],
      "fol_conc": "Djokovic(x) ∧ Taxhaven(x)",
      "perplexity": 1.1889508962631226,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 32,
    "nl_problem": {
      "context": [
        "A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "All people who are Grand Slam champions are professional tennis players.",
        "All Oscar-nominated actors are celebrities.",
        "All professional tennis players are athletes.",
        "If a person is a celebrity then they are well paid.",
        "If a person is an athlete then they are famous.",
        "All well-paid people live in tax havens.",
        "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "question": "Djokovic does not live in a tax haven.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "GrandSlamChampion(x)",
        "OscarNominatedActor(x)",
        "ProfessionalTennisPlayer(x)",
        "Celebrity(x)",
        "Athlete(x)",
        "WellPaid(x)",
        "Famous(x)",
        "LivesInTaxHaven(x)"
      ],
      "fol_consts": [
        "Djokovic"
      ],
      "fol_rules": [
        "∀x (GrandSlamChampion(x) ∨ OscarNominatedActor(x))",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x))",
        "∀x (Celebrity(x) → WellPaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (WellPaid(x) → LivesInTaxHaven(x))",
        "∀x (Famous(x) ∧ Athlete(x) → LivesInTaxHaven(Djokovic))"
      ],
      "fol_conc": "¬LivesInTaxHaven(Djokovic)",
      "perplexity": [
        1.1949052810668945,
        1.0307509899139404
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Grandslam(x)",
        "Oscarnominated(x)",
        "Professional(x)",
        "Athlete(x)",
        "Celebrity(x)",
        "Wellpaid(x)",
        "Famous(x)"
      ],
      "fol_consts": [
        "djokovic"
      ],
      "fol_rules": [
        "∀x (Grandslam(x) ∨ Oscarnominated(x))",
        "∀x (Professional(x) → Grandslam(x))",
        "∀x (Celebrity(x) → Wellpaid(x))",
        "∀x (Athlete(x) → Famous(x))",
        "∀x (Wellpaid(x) → Taxhaven(x))",
        "∀x (Famous(x) ∧ Athlete(x) → Djokovic(x) ∧ Taxhaven(x))"
      ],
      "fol_conc": "¬Taxhaven(djokovic)",
      "perplexity": 1.1884009838104248,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Djokovic/1, Djokovic/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Djokovic/1, Djokovic/0"
    }
  },
  {
    "id": 33,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads a professional wrestling stable.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "Leader(x, y)",
        "Member(x, y)",
        "WWE(x)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium"
      ],
      "fol_rules": [
        "∀x (Stable(x) → WWE(x))",
        "∃x (Leader(RoderickStrong, DiamondMine))",
        "∃x (Member(RoderickStrong, DiamondMine) ∧ Member(CreedBrothers, DiamondMine) ∧ Member(IvyNile, DiamondMine))",
        "∃x (Feud(DiamondMine, Imperium))",
        ""
      ],
      "fol_conc": "∃x (Leader(RoderickStrong, x) ∧ Stable(x))",
      "perplexity": [
        1.275992751121521,
        1.056046485900879
      ],
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Professional(x)",
        "Leader(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "Stable(x)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivyniile",
        "imperium"
      ],
      "fol_rules": [
        "∀x (Professional(x) → Stable(x))",
        "Leader(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Feud(imperium, diamondmine)",
        "Stable(diamondmine)"
      ],
      "fol_conc": "Leader(roderickstrong, diamondmine)",
      "perplexity": 1.2642912864685059,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 34,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Roderick strong leads the Creed Brothers.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "Leader(x, y)",
        "Member(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium"
      ],
      "fol_rules": [
        "∀x (Stable(x) → Leader(RoderickStrong, x))",
        "∀x (Member(RoderickStrong, x) ∧ Member(CreedBrothers, x)) → Stable(x)",
        "∀x (Feud(DiamondMine, Imperium) → Member(CreedBrothers, x))",
        ""
      ],
      "fol_conc": "∀x (Leader(RoderickStrong, x) ∧ Member(CreedBrothers, x))",
      "perplexity": [
        1.3000247478485107,
        1.0655144453048706
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Stable(x)",
        "Leader(x, y)",
        "Includes(x, y)",
        "Feud(x, y)",
        "Wrestling(x)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivyniile",
        "imperium"
      ],
      "fol_rules": [
        "∃x (Stable(x) ∧ Wrestling(x))",
        "Leader(roderickstrong, diamondmine)",
        "Includes(diamondmine, creedbrothers)",
        "Feud(imperium, diamondmine)",
        "Leader(roderickstrong, creedbrothers)"
      ],
      "fol_conc": "Leader(roderickstrong, creedbrothers)",
      "perplexity": 1.2073222398757935,
      "answer": "C",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 35,
    "nl_problem": {
      "context": [
        "Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Roderick Strong leads Diamond Mine.",
        "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Imperium has a feud with Diamond Mine."
      ],
      "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Stable(x)",
        "Leader(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "DiamondMine",
        "RoderickStrong",
        "CreedBrothers",
        "IvyNile",
        "Imperium"
      ],
      "fol_rules": [
        "∀x (Stable(x) → Stable(DiamondMine))",
        "∀x (Leader(RoderickStrong, DiamondMine))",
        "∀x (Includes(DiamondMine, CreedBrothers) ∧ Includes(DiamondMine, IvyNile))",
        "∀x (Feud(Imperium, DiamondMine) → Feud(Imperium, Stable(x)))"
      ],
      "fol_conc": "¬(Feud(Imperium, Stable(x)) ∧ Includes(x, IvyNile))",
      "perplexity": [
        1.2327467203140259,
        1.0408952236175537
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Feud(Imperium, DiamondMine) → Feud(Imperium, Stable(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Professional(x)",
        "Leader(x, y)",
        "Includes(x, y)",
        "Feud(x, y)"
      ],
      "fol_consts": [
        "diamondmine",
        "roderickstrong",
        "creedbrothers",
        "ivyniile",
        "imperium"
      ],
      "fol_rules": [
        "∀x (Professional(x) → Leader(roderickstrong, x))",
        "∀x (Includes(diamondmine, x) ∧ Professional(x))",
        "∀x (Feud(x, y) → ∃z (Professional(z) ∧ Includes(diamondmine, z)))",
        "∀x (Feud(x, y) ∧ Professional(y) ∧ Includes(diamondmine, y) → ¬Feud(x, z))"
      ],
      "fol_conc": "¬Feud(imperium, professionals)",
      "perplexity": 1.328535795211792,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 36,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is a composer.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Lead(x, y)",
        "Orchestra(x)",
        "Premiere(x, y)"
      ],
      "fol_consts": [
        "symphony_no_9",
        "beethoven",
        " vienna_music_society",
        "conductor"
      ],
      "fol_rules": [
        "∃x (MusicPiece(x) ∧ Write(beethoven, x))",
        "∃x (Composer(x) ∧ Write(x, symphony_no_9))",
        "∃x (Orchestra(x) ∧ Lead(beethoven, x))",
        "∃x (Orchestra(x) ∧ Lead(x, y))"
      ],
      "fol_conc": "∃x (Composer(x))",
      "perplexity": [
        1.3015466928482056,
        1.0491582155227661
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Musicpiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Lead(x, y)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusicsociety"
      ],
      "fol_rules": [
        "∀x (Musicpiece(x) → Composer(x))",
        "∀x (Write(x, y) → Composer(x))",
        "Beethoven(x) → Premiered(x, symphony9)",
        "Vienna(x) → Orchestra(x)",
        "Lead(x, y) → Conductor(x)",
        "Conductor(x) → Lead(x, y)"
      ],
      "fol_conc": "Beethoven(x)",
      "perplexity": 1.3245434761047363,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 37,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Some orchestras premiered music pieces.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "LedBy(x, y)"
      ],
      "fol_consts": [
        "Beethoven"
      ],
      "fol_rules": [
        "∀x (MusicPiece(x) → Composer(x))",
        "∀x (Write(x, y) → MusicPiece(y))",
        "∀x (Beethoven(x) → Write(x, Symphony No. 9))",
        "∀x (Premiered(x, Symphony No. 9) → Orchestra(x))",
        "∀x (Orchestra(x) → LedBy(x, Beethoven))"
      ],
      "fol_conc": "∃x (Orchestra(x) ∧ Premiered(x, MusicPiece))",
      "perplexity": [
        1.2580822706222534,
        1.0360028743743896
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Beethoven(x) → Write(x, Symphony No. 9))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Musicpiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Lead(x, y)"
      ],
      "fol_consts": [
        "symphony9"
      ],
      "fol_rules": [
        "∀x (Musicpiece(x) → Composer(x))",
        "∀x (Write(x, y) → Musicpiece(y))",
        "Beethoven(x) → Write(x, symphony9)",
        "Vienna(x) → Premiered(x, symphony9)",
        "Vienna(x) → Orchestra(x)",
        "Lead(x, y) → Orchestra(x)"
      ],
      "fol_conc": "∃x (Orchestra(x) ∧ Premiered(x, musicpiece))",
      "perplexity": 1.2780050039291382,
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Musicpiece/1, Musicpiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Musicpiece/1, Musicpiece/0"
    }
  },
  {
    "id": 38,
    "nl_problem": {
      "context": [
        "Symphony No. 9 is a music piece.",
        "Composers write music pieces.",
        "Beethoven wrote Symphony No. 9.",
        "Vienna Music Society premiered Symphony No. 9.",
        "Vienna Music Society is an orchestra.",
        "Beethoven leads the Vienna Music Society.",
        "Orchestras are led by conductors."
      ],
      "question": "Beethoven is not a conductor.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "MusicPiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Beethoven(x)",
        "SymphonyNo9(x)",
        "ViennaMusicSociety(x)",
        "Orchestra(x)",
        "Lead(x, y)"
      ],
      "fol_consts": [
        "Beethoven",
        "SymphonyNo9",
        "ViennaMusicSociety",
        "Orchestra"
      ],
      "fol_rules": [
        "∀x (MusicPiece(x) → Composer(x))",
        "∀x (Beethoven(x) → Write(x, SymphonyNo9(x)))",
        "∀x (ViennaMusicSociety(x) → Orchestra(x))",
        "∀x (Lead(Beethoven, ViennaMusicSociety(x)))"
      ],
      "fol_conc": "¬Lead(Beethoven, Orchestra(x))",
      "perplexity": [
        1.2466871738433838,
        1.0479704141616821
      ],
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "∀x (Beethoven(x) → Write(x, SymphonyNo9(x)))"
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Musicpiece(x)",
        "Composer(x)",
        "Write(x, y)",
        "Premiered(x, y)",
        "Orchestra(x)",
        "Lead(x, y)"
      ],
      "fol_consts": [
        "symphony9",
        "beethoven",
        "viennamusicsociety"
      ],
      "fol_rules": [
        "∀x (Musicpiece(x) → Composer(x))",
        "∀x (Write(x, y) → Composer(x))",
        "Beethoven(x) → Premiered(x, symphony9)",
        "Vienna(x) → Orchestra(x)",
        "Lead(x, y) → Conductor(x)",
        "Conductor(x) → Lead(x, y)"
      ],
      "fol_conc": "¬Lead(beethoven, y)",
      "perplexity": 1.319006085395813,
      "answer": "B",
      "predicted_answer": "N/A",
      "status": "execution error",
      "error": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0"
    }
  },
  {
    "id": 39,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is a mass product design.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Design(x)",
        "Timeless(x)",
        "MassProduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "ZahaHadid(x)",
        "KellyWearstler(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zahaHadid",
        "kellyWearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        "∃x (ZahaHadid(x) ∨ KellyWearstler(x))",
        "∀x (Evocative(x) ∧ Dreamy(x) → KellyWearstler(x))",
        "∀x (Timeless(x) → MassProduct(x) ∧ Evocative(x))",
        "∃x (ZahaHadid(x) ∨ KellyWearstler(x))"
      ],
      "fol_conc": "MassProduct(max)",
      "perplexity": [
        1.240302324295044,
        1.0406062602996826
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x)",
        "Timeless(x)",
        "Massproduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Designby(x, y)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x) → Timeless(x))",
        "¬(Massproduct(x) ∧ Timeless(x))",
        "∃x (Design(x) ∨ Design(y))",
        "∀x (Design(x) ∧ Evocative(x) ∧ Dreamy(x))",
        "∀x (Designby(x, max) ∧ Timeless(x) → Massproduct(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Massproduct(max)",
      "perplexity": 1.2399789094924927,
      "answer": "C",
      "predicted_answer": "B",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 40,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is evocative and dreamy.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Design(x)",
        "Timeless(x)",
        "MassProduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "ZahaHadid(x)",
        "KellyWearstler(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zahaHadid",
        "kellyWearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        "∃x (ZahaHadid(x) ∨ KellyWearstler(x))",
        "∀x (KellyWearstler(x) → Evocative(x) ∧ Dreamy(x))",
        "∀x (Timeless(x) → MassProduct(x) ∧ Evocative(x))",
        "∃x (Evocative(x) ∧ Dreamy(x))"
      ],
      "fol_conc": "∃x (Evocative(x) ∧ Dreamy(x))",
      "perplexity": [
        1.2185043096542358,
        1.0300655364990234
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x)",
        "Timeless(x)",
        "Massproduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Zaha(x)",
        "Kelly(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x) → Timeless(x))",
        "¬(Massproduct(x) ∧ Timeless(x))",
        "Design(zaha) ⊕ Design(kelly)",
        "Evocative(kelly) ∧ Dreamy(kelly)",
        "Timeless(max) → Massproduct(max) ∧ Evocative(max)",
        "Timeless(max) ∧ Massproduct(max) ∧ Evocative(max)"
      ],
      "fol_conc": "Evocative(max) ∧ Dreamy(max)",
      "perplexity": 1.2102621793746948,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 41,
    "nl_problem": {
      "context": [
        "All of Zaha Hadid's design styles are timeless.",
        "No mass product design is timeless.",
        "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
        "All of Kelly Wearstler's design styles are evocative.",
        "All of Kelly Wearstler's design styles are dreamy.",
        "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "question": "A design by Max is either evocative or dreamy.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "Design(x)",
        "Timeless(x)",
        "MassProduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "ZahaHadid(x)",
        "KellyWearstler(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zahaHadid",
        "kellyWearstler",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x) → Timeless(x))",
        "∀x (MassProduct(x) → ¬Timeless(x))",
        "∃x (ZahaHadid(x) ∨ KellyWearstler(x))",
        "∀x (KellyWearstler(x) → Evocative(x) ∧ Dreamy(x))",
        "∀x (Timeless(x) → (MassProduct(x) ∧ Evocative(x)))"
      ],
      "fol_conc": "∃x (Evocative(x) ∨ Dreamy(x))",
      "perplexity": [
        1.2196986675262451,
        1.0510286092758179
      ],
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Design(x)",
        "Timeless(x)",
        "Massproduct(x)",
        "Evocative(x)",
        "Dreamy(x)",
        "Zaha(x)",
        "Kelly(x)",
        "Max(x)"
      ],
      "fol_consts": [
        "zaha",
        "kelly",
        "max"
      ],
      "fol_rules": [
        "∀x (Design(x) → Timeless(x))",
        "¬(Massproduct(x) ∧ Timeless(x))",
        "∃x (Design(x) ∨ Design(y))",
        "∀x (Design(x) ∧ Evocative(x) ∧ Dreamy(x))",
        "∀x (Design(x) ∧ Timeless(x) ∧ Max(x) → Massproduct(x) ∧ Evocative(x))"
      ],
      "fol_conc": "Evocative(x) ∨ Dreamy(x)",
      "perplexity": 1.208694577217102,
      "answer": "B",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 42,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is among the most active players in major tennis.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "Active(x)",
        "LostTo(x, y)",
        "Female(x)",
        "Male(x)",
        "RolandGarros2022(x)"
      ],
      "fol_consts": [
        "CocoGauff",
        "IgaSwiatek",
        "RafaelNadal"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → Active(x))",
        "∀x (LostTo(x, IgaSwiatek) → RankedHighly(x))",
        "∀x (Female(x) ∧ RolandGarros2022(x) → LostTo(x, IgaSwiatek))",
        "∀x (Male(x) ∧ RolandGarros2022(x) → LostTo(x, RafaelNadal))",
        "∀x (RankedHighly(x) ∨ LostTo(x, RafaelNadal)) → ¬Male(x) ",
        "∀x (Female(x) ∧ RolandGarros2022(x) ∧ RankedHighly(x)) → ¬Male(x) "
      ],
      "fol_conc": "CocoGauff is among the most active players in major tennis.",
      "perplexity": [
        1.219323754310608,
        1.031099796295166
      ],
      "answer": "A",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "CocoGauff is among the most active players in major tennis."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(x)",
        "Lost(x, y)",
        "Female(x)",
        "Male(x)",
        "Roland(x)"
      ],
      "fol_consts": [
        "coco",
        "iga",
        "rafael",
        "coco",
        "roland"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → Active(x))",
        "∀x (Lost(x, iga) → Ranked(x))",
        "∀x (Female(x) ∧ Roland(x) → Lost(x, iga))",
        "∀x (Male(x) ∧ Roland(x) → Lost(x, rafael))",
        "∀x (Ranked(x) ∨ Lost(x, rafael) → ¬Male(x))",
        "∀x (Ranked(x) ∨ Lost(x, iga) → ¬Male(x))"
      ],
      "fol_conc": "Active(coco)",
      "perplexity": 1.2171510457992554,
      "answer": "A",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 43,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff has lost to Rafael Nadal.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "Active(x)",
        "LostTo(x, y)",
        "Female(x)",
        "Male(x)",
        "RolandGarros2022(x)"
      ],
      "fol_consts": [
        "CocoGauff",
        "IgaSwiatek",
        "RafaelNadal"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → Active(x))",
        "∀x (LostTo(x, IgaSwiatek) → RankedHighly(x))",
        "∀x (Female(x) ∧ RolandGarros2022(x) → LostTo(x, IgaSwiatek))",
        "∀x (Male(x) ∧ RolandGarros2022(x) → LostTo(x, RafaelNadal))",
        "∀x (RankedHighly(x) ∨ LostTo(x, RafaelNadal) → ¬Male(x))",
        "∀x (Female(x) ∧ RolandGarros2022(x) → ¬Male(x))"
      ],
      "fol_conc": "CocoGauff has lost to Rafael Nadal.",
      "perplexity": [
        1.2443137168884277,
        1.0356231927871704
      ],
      "answer": "C",
      "predicted_answer": "N/A",
      "status": "parsing error",
      "error": "CocoGauff has lost to Rafael Nadal."
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(x)",
        "Lost(x, y)",
        "Female(x)",
        "Male(x)",
        "Roland(x)",
        "Tennis(x)"
      ],
      "fol_consts": [
        "coco",
        "iga",
        "rafael",
        "roland",
        "garros",
        "women",
        "tennis"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → Active(x))",
        "∀x (Lost(x, iga) → Ranked(x))",
        "∀x (Female(x) → Roland(x))",
        "∀x (Male(x) → Roland(x))",
        "∀x (Tennis(x) → Roland(x))",
        "∀x (Tennis(x) ∧ Ranked(x) → Active(x))",
        "∀x (Tennis(x) ∧ Ranked(x) ∧ Lost(x, rafa) → ¬Male(x))",
        "∀x (Tennis(x) ∧ Ranked(x) ∧ Lost(x, rafa) → ¬Female(x))",
        "∀x (Tennis(x) ∧ Ranked(x) ∧ Lost(x, rafa) → ¬Roland(x))"
      ],
      "fol_conc": "Lost(coco, rafael)",
      "perplexity": 1.2247982025146484,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 44,
    "nl_problem": {
      "context": [
        "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
        "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
        "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
      "options": []
    },
    "answer": "B",
    "logic_problem": {
      "fol_preds": [
        "RankedHighly(x)",
        "Active(x)",
        "LostTo(x, y)",
        "Female(x)",
        "Male(x)",
        "RolandGarros2022(x)"
      ],
      "fol_consts": [
        "CocoGauff",
        "IgaSwiatek",
        "RafaelNadal"
      ],
      "fol_rules": [
        "∀x (RankedHighly(x) → Active(x))",
        "∀x (LostTo(x, IgaSwiatek) → RankedHighly(x))",
        "∀x (Female(x) ∧ RolandGarros2022(x) → LostTo(x, IgaSwiatek))",
        "∀x (Male(x) ∧ RolandGarros2022(x) → LostTo(x, RafaelNadal))",
        "∀x (RankedHighly(x) ∨ LostTo(x, RafaelNadal)) → ¬(Female(x) ∧ RolandGarros2022(x))",
        "∀x (RankedHighly(x) ∨ LostTo(x, RafaelNadal) ∧ Female(x) ∧ RolandGarros2022(x)) → ¬(Male(x) ∧ RolandGarros2022(x))"
      ],
      "fol_conc": "∀x (LostTo(x, IgaSwiatek) ∨ ¬Active(x))",
      "perplexity": [
        1.2239733934402466,
        1.0228019952774048
      ],
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Ranked(x)",
        "Active(x)",
        "Lost(x, y)",
        "Female(x)",
        "Male(x)",
        "Roland(x)"
      ],
      "fol_consts": [
        "coco",
        "iga",
        "rafael",
        "roland",
        "women"
      ],
      "fol_rules": [
        "∀x (Ranked(x) → Active(x))",
        "∀x (Lost(x, iga) → Ranked(x))",
        "∀x (Female(x) → Roland(x))",
        "∀x (Male(x) → Roland(x))",
        "∀x (Roland(x) ∧ Lost(x, rafael) → ¬Active(x))",
        "∀x (Ranked(x) ∨ Lost(x, rafael) → ¬Male(x))",
        "∀x (Ranked(x) ∨ Lost(x, iga) → ¬Female(x))"
      ],
      "fol_conc": "¬(Lost(coco, iga) ∨ Active(coco))",
      "perplexity": 1.232399821281433,
      "answer": "B",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 45,
    "nl_problem": {
      "context": [
        "All cats are mammals.",
        "Some pets are not mammals."
      ],
      "question": "No pets are cats.",
      "options": []
    },
    "answer": "C",
    "logic_problem": {
      "fol_preds": [
        "Cat(x)",
        "Mammal(x)",
        "Pet(x)",
        "NotMammal(x)"
      ],
      "fol_consts": [
        "x"
      ],
      "fol_rules": [
        "∀x (Cat(x) → Mammal(x))",
        "∃x (Pet(x) ∧ NotMammal(x))"
      ],
      "fol_conc": "¬(Pet(x) ∧ Cat(x))",
      "perplexity": [
        1.2461180686950684,
        1.090697169303894
      ],
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Mammal(x)",
        "Pet(x)",
        "Cat(x)"
      ],
      "fol_consts": [
        "pets"
      ],
      "fol_rules": [
        "∀x (Mammal(x) → Pet(x))",
        "∃x (Pet(x) ∧ ¬Mammal(x))"
      ],
      "fol_conc": "¬(Cat(x) ∧ Pet(x))",
      "perplexity": 1.1477347612380981,
      "answer": "C",
      "predicted_answer": "C",
      "status": "success",
      "error": ""
    }
  },
  {
    "id": 46,
    "nl_problem": {
      "context": [
        "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "All students who want to have a long vacation love summer the most.",
        "Emma's favorite season is summer.",
        "Mia's favorite season is not the same as Emma's. ",
        "James wants to have a long vacation."
      ],
      "question": "James's favorite season is summer.",
      "options": []
    },
    "answer": "A",
    "logic_problem": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "WantsVacation(x)",
        "Loves(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "Emma",
        "Mia",
        "James"
      ],
      "fol_rules": [
        "∀x (Season(x) → ∃y (Student(y) ∧ Loves(y, x)) )",
        "∀x (Student(x) → WantsVacation(x))",
        "∀x (Favorite(x, Summer) → Loves(x, Summer))",
        "∀x (Favorite(x, Summer) ∧ Favorite(x, Summer) ∧ WantsVacation(x))",
        "∀x (Favorite(x, Summer) ∧ Favorite(x, Summer) ∧ WantsVacation(x))"
      ],
      "fol_conc": "Favorite(James, Summer)",
      "perplexity": [
        1.3738921880722046,
        1.0457099676132202
      ],
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    },
    "logic_problem_gcd": {
      "fol_preds": [
        "Season(x)",
        "Student(x)",
        "Loves(x, y)",
        "Favorite(x, y)"
      ],
      "fol_consts": [
        "spring",
        "summer",
        "fall",
        "winter",
        "emma",
        "mia",
        "james"
      ],
      "fol_rules": [
        "∀x (Season(x) ∧ Student(x) → Loves(x, summer))",
        "∀x (Favorite(x, summer) ∧ Favorite(x, summer) ∧ Favorite(x, summer))",
        "∀x (Favorite(x, summer) ∧ Favorite(x, summer) ∧ Favorite(x, summer))"
      ],
      "fol_conc": "Favorite(james, summer)",
      "perplexity": 1.1612414121627808,
      "answer": "A",
      "predicted_answer": "A",
      "status": "success",
      "error": ""
    }
  }
]