[
  {
    "id": 0,
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "Bonnie performs in school talent shows often.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (PerformOften(x) → (AttendEngaged(x) ∧ Student(x))) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.",
        "∀x (InactiveDisinterested(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.",
        "∀x ((YoungChild(x) ∧ FurtherCareer(x)) ∨ (Teenager(x) ∧ FurtherCareer(x)) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "(AttendEngaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(AttendEngaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."
      ],
      "First-Order-Logic Question": [
        "PerformOften(bonnie) ::: Bonnie performs in school talent shows often."
      ]
    },
    "predicates": [
      "PerformOften(x) ::: x performs in school talent shows often.",
      "AttendEngaged(x) ::: x attends and is very engaged with school events.",
      "InactiveDisinterested(x) ::: x is an inactive and disinterested member of their community.",
      "Chaperone(x) ::: x chaperones high school dances.",
      "Student(x) ::: x is a student who attends the school.",
      "YoungChild(x) ::: x is a young child.",
      "Teenager(x) ::: x is a teenager.",
      "FurtherCareer(x) ::: x wishes to further their academic careers and educational opportunities."
    ]
  },
  {
    "id": 1,
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (PerformOften(x) → (AttendEngaged(x) ∧ Student(x))) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.",
        "∀x (InactiveDisinterested(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.",
        "∀x ((YoungChild(x) ∨ Teenager(x)) ∧ FurtherCareer(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "(AttendEngaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(AttendEngaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."
      ],
      "First-Order-Logic Question": [
        "(((YoungChild(bonnie) ∨ Teenager(bonnie)) ∧ FurtherCareer(bonnie) ∧ Chaperone(bonnie)) ⊕ ¬((YoungChild(bonnie) ∨ Teenager(bonnie)) ∧ FurtherCareer(bonnie))) → (Student(bonnie) ⊕ InactiveDisinterested(bonnie)) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
      ]
    },
    "predicates": [
      "PerformOften(x) ::: x performs in school talent shows often.",
      "AttendEngaged(x) ::: x attends and is very engaged with school events.",
      "InactiveDisinterested(x) ::: x is an inactive and disinterested member of their community.",
      "Chaperone(x) ::: x chaperones high school dances.",
      "Student(x) ::: x is a student who attends the school.",
      "YoungChild(x) ::: x is a young child.",
      "Teenager(x) ::: x is a teenager.",
      "FurtherCareer(x) ::: x wishes to further their academic career and educational opportunities."
    ]
  },
  {
    "id": 2,
    "context": [
      "If people perform in school talent shows often, then they attend and are very engaged with school events.",
      "People either perform in school talent shows often or are inactive and disinterested members of their community.",
      "If people chaperone high school dances, then they are not students who attend the school.",
      "All people who are inactive and disinterested members of their community chaperone high school dances.",
      "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
      "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "
    ],
    "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (PerformOften(x) → (AttendEngaged(x) ∧ Student(x))) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "∀x (PerformOften(x) ⊕ InactiveDisinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "∀x (Chaperone(x) → ¬Student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.",
        "∀x (InactiveDisinterested(x) → Chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.",
        "∀x ((YoungChildOrTeen(x) ∧ FurtherAcademicCareer(x)) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "(AttendEngaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(AttendEngaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."
      ],
      "First-Order-Logic Question": [
        "(Chaperone(bonnie) ∨ (¬Chaperone(bonnie) → PerformOften(bonnie))) → ((YoungChildOrTeen(bonnie) ∧ FurtherAcademicCareer(bonnie)) ∧ InactiveDisinterested(bonnie)) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."
      ]
    },
    "predicates": [
      "PerformOften(x) ::: x performs in school talent shows often.",
      "AttendEngaged(x) ::: x attends and is very engaged with school events.",
      "InactiveDisinterested(x) ::: x is an inactive and disinterested member of their community.",
      "Chaperone(x) ::: x chaperones high school dances.",
      "Student(x) ::: x is a student who attends the school.",
      "YoungChildOrTeen(x) ::: x is a young child or teenager.",
      "FurtherAcademicCareer(x) ::: x wishes to further their academic career and educational opportunities."
    ]
  },
  {
    "id": 3,
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "James has lunch in the company.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ScheduleMeeting(x) → AppearCompany(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.",
        "∀x (LunchCompany(x) → ScheduleMeeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (LunchCompany(x) ⊕ LunchHome(x)) ::: Employees will either have lunch in the company or have lunch at home.",
        "∀x (LunchHome(x) → RemoteWork(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.",
        "∀x (InOtherCountry(x) → RemoteWork(x)) ::: All employees who are in other countries work remotely from home.",
        "∀x (Manager(x) → ¬RemoteWork(x)) ::: No managers work remotely from home.",
        "(Manager(james) ∧ AppearCompany(james)) ⊕ ¬(Manager(james) ∨ AppearCompany(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "First-Order-Logic Question": [
        "LunchCompany(james) ::: James has lunch in the company."
      ]
    },
    "predicates": [
      "Employee(x) ::: x is an employee.",
      "ScheduleMeeting(x) ::: x schedules a meeting with their customers.",
      "AppearCompany(x) ::: x appears in the company today.",
      "LunchCompany(x) ::: x has lunch in the company.",
      "LunchHome(x) ::: x has lunch at home.",
      "RemoteWork(x) ::: x works remotely from home.",
      "InOtherCountry(x) ::: x is in another country.",
      "Manager(x) ::: x is a manager.",
      "James(x) ::: x is James."
    ]
  },
  {
    "id": 4,
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "James does not have lunch in the company.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ScheduleMeeting(x) → AppearCompany(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.",
        "∀x (LunchCompany(x) → ScheduleMeeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (LunchCompany(x) ⊕ LunchHome(x)) ::: Employees will either have lunch in the company or have lunch at home.",
        "∀x (LunchHome(x) → WorkRemote(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.",
        "∀x (InOtherCountry(x) → WorkRemote(x)) ::: All employees who are in other countries work remotely from home.",
        "∀x (Manager(x) → ¬WorkRemote(x)) ::: No managers work remotely from home.",
        "(Manager(james) ∧ AppearCompany(james)) ⊕ ¬(Manager(james) ∨ AppearCompany(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "First-Order-Logic Question": [
        "¬LunchCompany(james) ::: James does not have lunch in the company."
      ]
    },
    "predicates": [
      "Employee(x) ::: x is an employee.",
      "ScheduleMeeting(x) ::: x schedules a meeting with their customers.",
      "AppearCompany(x) ::: x appears in the company today.",
      "LunchCompany(x) ::: x has lunch in the company.",
      "LunchHome(x) ::: x has lunch at home.",
      "WorkRemote(x) ::: x works remotely from home.",
      "InOtherCountry(x) ::: x is in another country.",
      "Manager(x) ::: x is a manager."
    ]
  },
  {
    "id": 5,
    "context": [
      "All employees who schedule a meeting with their customers will appear in the company today. ",
      "Everyone who has lunch in the company schedules meetings with their customers. ",
      "Employees will either have lunch in the company or have lunch at home.",
      "If an employee has lunch at home, then he/she is working remotely from home.",
      "All employees who are in other countries work remotely from home. ",
      "No managers work remotely from home. ",
      "James is either a manager and appears in the company today or neither a manager nor appears in the company today."
    ],
    "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Employee(x) ∧ ScheduleMeeting(x) → Appear(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.",
        "∀x (LunchCompany(x) → ScheduleMeeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (LunchCompany(x) ⊕ LunchHome(x)) ::: Employees will either have lunch in the company or have lunch at home.",
        "∀x (LunchHome(x) → RemoteWork(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.",
        "∀x (OtherCountry(x) → RemoteWork(x)) ::: All employees who are in other countries work remotely from home.",
        "∀x (Manager(x) → ¬RemoteWork(x)) ::: No managers work remotely from home.",
        "(Manager(james) ∧ Appear(james)) ⊕ ¬(Manager(james) ∨ Appear(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "First-Order-Logic Question": [
        "(Manager(james) ∨ OtherCountry(james)) → (LunchHome(james) ∧ RemoteWork(james)) ⊕ ¬(LunchHome(james) ∨ RemoteWork(james)) ::: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."
      ]
    },
    "predicates": [
      "Employee(x) ::: x is an employee.",
      "ScheduleMeeting(x) ::: x schedules a meeting with their customers.",
      "Appear(x) ::: x appears in the company today.",
      "LunchCompany(x) ::: x has lunch in the company.",
      "LunchHome(x) ::: x has lunch at home.",
      "RemoteWork(x) ::: x works remotely from home.",
      "OtherCountry(x) ::: x is in other countries.",
      "Manager(x) ::: x is a manager.",
      "James(x) ::: x is James."
    ]
  },
  {
    "id": 6,
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "There is an animal.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Virus(monkeypoxVirus) ∧ ∀x (OccursIn(monkeypoxVirus, x) → (Animal(x) ∨ Human(x))) ::: Monkeypox virus can occur in certain animals, including humans.",
        "∀x (Human(x) → Mammal(x)) ::: Humans are mammals.",
        "∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.",
        "∀x (SymptomOf(fever, monkeypox) ∧ SymptomOf(headache, monkeypox) ∧ SymptomOf(musclePain, monkeypox) ∧ SymptomOf(feelTired, monkeypox)) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "∀x (Get(x, flu) → FeelTired(x)) ::: People feel tired when they get a flu."
      ],
      "First-Order-Logic Question": [
        "∃x Animal(x) ::: There is an animal."
      ]
    },
    "predicates": [
      "InfectiousDisease(x) ::: x is an infectious disease.",
      "CausedBy(x, y) ::: x is caused by y.",
      "Virus(x) ::: x is a virus.",
      "OccursIn(x, y) ::: x occurs in y.",
      "Animal(x) ::: x is an animal.",
      "Human(x) ::: x is a human.",
      "Mammal(x) ::: x is a mammal.",
      "SymptomOf(x, y) ::: x is a symptom of y.",
      "Fever(x) ::: x is a fever.",
      "Headache(x) ::: x is a headache.",
      "MusclePain(x) ::: x is a muscle pain.",
      "FeelTired(x) ::: x feels tired.",
      "Get(x, y) ::: x gets y.",
      "Flu(x) ::: x is a flu.",
      "Exists(x) ::: x exists."
    ]
  },
  {
    "id": 7,
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "No one gets flu.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.",
        "∀x (OccursIn(monkeypoxVirus, x) → Animal(x)) ∧ (OccursIn(monkeypoxVirus, human) ∧ Human(human)) ::: Monkeypox virus can occur in certain animals, including humans.",
        "∀x (Human(x) → Mammal(x)) ::: Humans are mammals.",
        "∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.",
        "∀x (SymptomOf(fever, monkeypox) ∧ SymptomOf(headache, monkeypox) ∧ SymptomOf(musclePain, monkeypox) ∧ SymptomOf(feelTired, monkeypox)) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "∀x (Flu(x) → FeelTired(x)) ::: People feel tired when they get a flu."
      ],
      "First-Order-Logic Question": [
        "NoOneGets(flu) ::: No one gets flu."
      ]
    },
    "predicates": [
      "InfectiousDisease(x) ::: x is an infectious disease.",
      "CausedBy(x, y) ::: x is caused by y.",
      "Virus(x) ::: x is a virus.",
      "OccursIn(x, y) ::: x occurs in y.",
      "Animal(x) ::: x is an animal.",
      "Human(x) ::: x is a human.",
      "Mammal(x) ::: x is a mammal.",
      "SymptomOf(x, y) ::: x is a symptom of y.",
      "Fever(x) ::: x has a fever.",
      "Headache(x) ::: x has a headache.",
      "MusclePain(x) ::: x has muscle pains.",
      "FeelTired(x) ::: x feels tired.",
      "Flu(x) ::: x has the flu.",
      "NoOneGets(x) ::: no one gets x."
    ]
  },
  {
    "id": 8,
    "context": [
      "Monkeypox is an infectious disease caused by the monkeypox virus.",
      "Monkeypox virus can occur in certain animals, including humans.",
      "Humans are mammals.",
      "Mammals are animals.",
      "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
      "People feel tired when they get a glu."
    ],
    "question": "Symptons of Monkeypox include coughing.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.",
        "Virus(monkeypoxVirus) ∧ ∀x (OccursIn(monkeypoxVirus, x) → (Animal(x) ∧ (Human(x) → Mammal(x)))) ::: Monkeypox virus can occur in certain animals, including humans.",
        "∀x (Human(x) → Mammal(x)) ::: Humans are mammals.",
        "∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.",
        "SymptomOf(fever, monkeypox) ∧ SymptomOf(headache, monkeypox) ∧ SymptomOf(musclePains, monkeypox) ∧ SymptomOf(feelingTired, monkeypox) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.",
        "∀x (Flu(x) → ∀y (Human(y) → Feel(y, tired))) ::: People feel tired when they get a flu."
      ],
      "First-Order-Logic Question": [
        "SymptomOf(coughing, monkeypox) ::: Symptoms of Monkeypox include coughing."
      ]
    },
    "predicates": [
      "InfectiousDisease(x) ::: x is an infectious disease.",
      "CausedBy(x, y) ::: x is caused by y.",
      "Virus(x) ::: x is a virus.",
      "OccursIn(x, y) ::: x occurs in y.",
      "Animal(x) ::: x is an animal.",
      "Human(x) ::: x is a human.",
      "Mammal(x) ::: x is a mammal.",
      "SymptomOf(x, y) ::: x is a symptom of y.",
      "Feel(x, y) ::: x feels y.",
      "Flu(x) ::: x is a flu."
    ]
  },
  {
    "id": 9,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Ocellated wild turkey.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "WildTurkey(tom) ::: Tom is a wild turkey.",
        "¬EasternWildTurkey(tom) ::: Tom is not an Eastern wild turkey.",
        "¬OsceolaWildTurkey(tom) ::: Tom is not an Osceola wild turkey.",
        "¬GouldsWildTurkey(tom) ∨ ¬MerriamesWildTurkey(tom) ∨ ¬RioGrandeWildTurkey(tom) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey."
      ],
      "First-Order-Logic Question": [
        "OcellatedWildTurkey(tom) ::: Tom is an Ocellated wild turkey."
      ]
    },
    "predicates": [
      "WildTurkey(x) ::: x is a wild turkey.",
      "EasternWildTurkey(x) ::: x is an Eastern wild turkey.",
      "OsceolaWildTurkey(x) ::: x is an Osceola wild turkey.",
      "GouldsWildTurkey(x) ::: x is a Gould's wild turkey.",
      "MerriamesWildTurkey(x) ::: x is a Merriam's wild turkey.",
      "RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey.",
      "OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey.",
      "Tom ::: Tom is a specific wild turkey."
    ]
  },
  {
    "id": 10,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Tom is an Eastern wild turkey.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "WildTurkey(tom) ::: Tom is a wild turkey.",
        "¬EasternWildTurkey(tom) ::: Tom is not an Eastern wild turkey.",
        "¬OsceolaWildTurkey(tom) ::: Tom is not an Osceola wild turkey.",
        "¬GouldsWildTurkey(tom) ∨ ¬MerriamsWildTurkey(tom) ∨ ¬RioGrandeWildTurkey(tom) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey."
      ],
      "First-Order-Logic Question": [
        "EasternWildTurkey(tom) ::: Tom is an Eastern wild turkey."
      ]
    },
    "predicates": [
      "WildTurkey(x) ::: x is a wild turkey.",
      "EasternWildTurkey(x) ::: x is an Eastern wild turkey.",
      "OsceolaWildTurkey(x) ::: x is an Osceola wild turkey.",
      "GouldsWildTurkey(x) ::: x is a Gould's wild turkey.",
      "MerriamsWildTurkey(x) ::: x is a Merriam's wild turkey.",
      "RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey.",
      "OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey."
    ]
  },
  {
    "id": 11,
    "context": [
      "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild",
      "turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
      "Tom is not an Eastern wild turkey.",
      "Tom is not an Osceola wild turkey.",
      "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
      "Tom is a wild turkey."
    ],
    "question": "Joey is a wild turkey.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "WildTurkey(eastern) ∧ WildTurkey(osceola) ∧ WildTurkey(goulds) ∧ WildTurkey(merriames) ∧ WildTurkey(rioGrande) ∧ WildTurkey(ocellated) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
        "¬EasternWildTurkey(tom) ::: Tom is not an Eastern wild turkey.",
        "¬OsceolaWildTurkey(tom) ::: Tom is not an Osceola wild turkey.",
        "¬GouldsWildTurkey(tom) ∧ ¬MerriamesWildTurkey(tom) ∧ ¬RioGrandeWildTurkey(tom) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.",
        "WildTurkey(tom) ::: Tom is a wild turkey."
      ],
      "First-Order-Logic Question": [
        "WildTurkey(joey) ::: Joey is a wild turkey."
      ]
    },
    "predicates": [
      "WildTurkey(x) ::: x is a wild turkey.",
      "EasternWildTurkey(x) ::: x is an Eastern wild turkey.",
      "OsceolaWildTurkey(x) ::: x is an Osceola wild turkey.",
      "GouldsWildTurkey(x) ::: x is a Gould's wild turkey.",
      "MerriamesWildTurkey(x) ::: x is a Merriam's wild turkey.",
      "RioGrandeWildTurkey(x) ::: x is a Rio Grande wild turkey.",
      "OcellatedWildTurkey(x) ::: x is an Ocellated wild turkey.",
      "Tom(x) ::: x is Tom.",
      "Joey(x) ::: x is Joey."
    ]
  },
  {
    "id": 12,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is in the Top 10 list.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (JapaneseCompany(x) ∧ Created(x, legendOfZelda)) ::: A Japanese game company created the game the Legend of Zelda.",
        "∀x (Top10List(x) → ∃y (JapaneseCompany(y) ∧ Created(y, x))) ::: All games in the Top 10 list are made by Japanese game companies.",
        "∀x (SoldMoreThanMillion(x) → Top10List(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "Game(legendOfZelda) ∧ SoldMoreThanMillion(legendOfZelda) ::: The Legend of Zelda sold more than one million copies."
      ],
      "First-Order-Logic Question": [
        "Top10List(legendOfZelda) ::: The Legend of Zelda is in the Top 10 list."
      ]
    },
    "predicates": [
      "JapaneseCompany(x) ::: x is a Japanese game company.",
      "Created(x, y) ::: x created y.",
      "Game(x) ::: x is a game.",
      "Top10List(x) ::: x is in the Top 10 list.",
      "SoldMoreThanMillion(x) ::: x sold more than one million copies."
    ]
  },
  {
    "id": 13,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (JapaneseCompany(x) ∧ Created(x, legendOfZelda)) ::: A Japanese game company created the game the Legend of Zelda.",
        "∀x (Top10(x) → ∃y (JapaneseCompany(y) ∧ MadeBy(x, y))) ::: All games in the Top 10 list are made by Japanese game companies.",
        "∀x (SoldMoreThanMillion(x) → Top10(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "SoldMoreThanMillion(legendOfZelda) ::: The Legend of Zelda sold more than one million copies."
      ],
      "First-Order-Logic Question": [
        "∃x (JapaneseCompany(x) ∧ MadeBy(fifa22, x)) ::: FIFA 22 is made by a Japanese video game company."
      ]
    },
    "predicates": [
      "JapaneseCompany(x) ::: x is a Japanese game company.",
      "Created(x, y) ::: x created y.",
      "Game(x) ::: x is a game.",
      "Top10(x) ::: x is in the Top 10 list.",
      "SoldMoreThanMillion(x) ::: x sold more than one million copies.",
      "MadeBy(x, y) ::: x is made by y."
    ]
  },
  {
    "id": 14,
    "context": [
      "A Japanese game company created the game the Legend of Zelda.",
      "All games in the Top 10 list are made by Japanese game companies.",
      "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.",
      "The Legend of Zelda sold more than one million copies."
    ],
    "question": "The Legend of Zelda is not in the Top 10 list.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (JapaneseCompany(x) ∧ Created(x, legendOfZelda)) ::: A Japanese game company created the game the Legend of Zelda.",
        "∀x (Top10(x) → ∃y (JapaneseCompany(y) ∧ Created(y, x))) ::: All games in the Top 10 list are made by Japanese game companies.",
        "∀x (SellsMoreThanMillion(x) → Top10(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.",
        "SellsMoreThanMillion(legendOfZelda) ::: The Legend of Zelda sold more than one million copies."
      ],
      "First-Order-Logic Question": "¬Top10(legendOfZelda) ::: The Legend of Zelda is not in the Top 10 list."
    },
    "predicates": [
      "JapaneseCompany(x) ::: x is a Japanese game company.",
      "Created(x, y) ::: x created y.",
      "Game(x) ::: x is a game.",
      "Top10(x) ::: x is in the Top 10 list.",
      "SellsMoreThanMillion(x) ::: x sells more than one million copies."
    ]
  },
  {
    "id": 15,
    "context": [
      "All squares have four sides.",
      "All four-sided things are shapes. "
    ],
    "question": "All squares are shapes.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Square(x) → FourSided(x)) ::: All squares have four sides.",
        "∀x (FourSided(x) → Shape(x)) ::: All four-sided things are shapes."
      ],
      "First-Order-Logic Question": [
        "∀x (Square(x) → Shape(x)) ::: All squares are shapes."
      ]
    },
    "predicates": [
      "Square(x) ::: x is a square.",
      "FourSided(x) ::: x has four sides.",
      "Shape(x) ::: x is a shape."
    ]
  },
  {
    "id": 16,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is a turtle.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x (Turtle(x)) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.",
      "First-Order-Logic Question": "Turtle(rock) ::: Rock is a turtle."
    },
    "predicates": [
      "Rabbit(x) ::: x is a rabbit.",
      "Cute(x) ::: x is cute.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still.",
      "Rock ::: Rock."
    ]
  },
  {
    "id": 17,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is not a turtle.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.",
        "∃x (Turtle(x)) ::: Some turtles exist.",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.",
        "∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.",
        "∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.",
        "Still(rock) ::: Rock is still."
      ],
      "First-Order-Logic Question": [
        "¬Turtle(rock) ::: Rock is not a turtle."
      ]
    },
    "predicates": [
      "Rabbit(x) ::: x is a rabbit.",
      "Cute(x) ::: x is cute.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still.",
      "Rock(x) ::: x is Rock."
    ]
  },
  {
    "id": 18,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "Rock is a turtle or cute.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.",
        "∃x (Turtle(x)) ::: Some turtles exist.",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.",
        "∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.",
        "∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.",
        "Still(rock) ::: Rock is still."
      ],
      "First-Order-Logic Question": [
        "Turtle(rock) ⊕ Cute(rock) ::: Rock is a turtle or cute."
      ]
    },
    "predicates": [
      "Rabbit(x) ::: x is a rabbit.",
      "Cute(x) ::: x is cute.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still.",
      "Rock(x) ::: x is Rock."
    ]
  },
  {
    "id": 19,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.",
        "∃x (Turtle(x)) ::: Some turtles exist.",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.",
        "∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.",
        "∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.",
        "Still(rock) ::: Rock is still."
      ],
      "First-Order-Logic Question": "¬(Turtle(rock) ∧ Squirrel(rock)) → (Cute(rock) ⊕ Skittish(rock)) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."
    },
    "predicates": [
      "Rabbit(x) ::: x is a rabbit.",
      "Cute(x) ::: x is cute.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still."
    ]
  },
  {
    "id": 20,
    "context": [
      "All rabbits are cute. ",
      "Some turtles exist. ",
      "An animal is either a rabbit or a squirrel.",
      "If something is skittish, then it is not still.",
      "All squirrels are skittish.",
      "Rock is still."
    ],
    "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.",
        "∃x (Turtle(x)) ::: Some turtles exist.",
        "∀x (Animal(x) → (Rabbit(x) ⊕ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.",
        "∀x (Skittish(x) → ¬Still(x)) ::: If something is skittish, then it is not still.",
        "∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.",
        "Still(rock) ::: Rock is still."
      ],
      "First-Order-Logic Question": "Cute(rock) ∧ Still(rock) → (Turtle(rock) ∧ Skittish(rock)) ::: If Rock is cute and still, then Rock is a turtle and skittish."
    },
    "predicates": [
      "Rabbit(x) ::: x is a rabbit.",
      "Cute(x) ::: x is cute.",
      "Turtle(x) ::: x is a turtle.",
      "Animal(x) ::: x is an animal.",
      "Squirrel(x) ::: x is a squirrel.",
      "Skittish(x) ::: x is skittish.",
      "Still(x) ::: x is still."
    ]
  },
  {
    "id": 21,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "Karen will share \"Stranger Things\" to Lisa.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Popular(StrangerThings) ∧ NetflixShow(StrangerThings) ::: 'Stranger Things' is a popular Netflix show.",
        "∀x (Popular(x) ∧ NetflixShow(x) → BingeWatch(Karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.",
        "∀x (BingeWatch(Karen, x) ↔ Download(Karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.",
        "¬Download(Karen, BlackMirror) ::: Karen does not download 'Black Mirror'.",
        "NetflixShow(BlackMirror) ::: 'Black Mirror' is a Netflix show.",
        "∀x (BingeWatch(Karen, x) → Share(Karen, x, Lisa)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "First-Order-Logic Question": "Share(Karen, StrangerThings, Lisa) ::: Karen will share 'Stranger Things' to Lisa."
    },
    "predicates": [
      "Popular(x) ::: x is a popular show.",
      "NetflixShow(x) ::: x is a Netflix show.",
      "BingeWatch(x, y) ::: x binge-watches y.",
      "Download(x, y) ::: x downloads y.",
      "Share(x, y, z) ::: x shares y to z.",
      "Karen ::: Karen is a person.",
      "Lisa ::: Lisa is a person.",
      "StrangerThings ::: 'Stranger Things' is a show.",
      "BlackMirror ::: 'Black Mirror' is a show."
    ]
  },
  {
    "id": 22,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "\"Black Mirror\" is popular.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Popular(StrangerThings) ∧ NetflixShow(StrangerThings) ::: 'Stranger Things' is a popular Netflix show.",
        "∀x (Popular(x) ∧ NetflixShow(x) → BingeWatch(Karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.",
        "∀x (BingeWatch(Karen, x) ↔ Download(Karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.",
        "¬Download(Karen, BlackMirror) ::: Karen does not download 'Black Mirror'.",
        "NetflixShow(BlackMirror) ::: 'Black Mirror' is a Netflix show.",
        "∀x (BingeWatch(Karen, x) → Share(Karen, x, Lisa)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "First-Order-Logic Question": [
        "Popular(BlackMirror) ::: 'Black Mirror' is popular."
      ]
    },
    "predicates": [
      "Popular(x) ::: x is popular.",
      "NetflixShow(x) ::: x is a Netflix show.",
      "BingeWatch(x, y) ::: x binge-watches y.",
      "Download(x, y) ::: x downloads y.",
      "Share(x, y, z) ::: x shares y to z.",
      "Karen ::: Karen.",
      "Lisa ::: Lisa.",
      "BlackMirror ::: Black Mirror.",
      "StrangerThings ::: Stranger Things."
    ]
  },
  {
    "id": 23,
    "context": [
      "\"Stranger Things\" is a popular Netflix show.",
      "If a Netflix show is popular, Karen will binge-watch it.",
      "If and only if Karen binge-watches a Netflix show, she will download it.",
      "Karen does not download \"Black Mirror\".",
      "\"Black Mirror\" is a Netflix show.",
      "If Karen binge-watches a Netflix show, she will share it to Lisa."
    ],
    "question": "Karen will share \"Black Mirror\" to Lisa.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Popular(strangerThings) ∧ NetflixShow(strangerThings) ::: 'Stranger Things' is a popular Netflix show.",
        "∀x (Popular(x) ∧ NetflixShow(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.",
        "∀x (BingeWatch(karen, x) ↔ Download(karen, x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.",
        "¬Download(karen, blackMirror) ::: Karen does not download 'Black Mirror'.",
        "NetflixShow(blackMirror) ::: 'Black Mirror' is a Netflix show.",
        "∀x (BingeWatch(karen, x) → Share(karen, x, lisa)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "First-Order-Logic Question": [
        "Share(karen, blackMirror, lisa) ::: Karen will share 'Black Mirror' to Lisa."
      ]
    },
    "predicates": [
      "Popular(x) ::: x is a popular Netflix show.",
      "BingeWatch(x, y) ::: x will binge-watch y.",
      "Download(x, y) ::: x will download y.",
      "NetflixShow(x) ::: x is a Netflix show.",
      "Share(x, y, z) ::: x will share y to z."
    ]
  },
  {
    "id": 24,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Capital(beijing, china) ::: Beijing is the capital of the People's Republic of China.\nMostPopulousCapital(beijing) ::: Beijing is the world's most populous national capital city.\nLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\nHost(beijing, summerOlympics2008) ∧ Host(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nHost(beijing, summerOlympics) ∧ Host(beijing, winterOlympics) ∧ Host(beijing, summerParalympics) ∧ Host(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n∀x (University(x) ∧ LocatedIn(x, beijing) → RankAmongBest(x, asiaPacific) ∧ RankAmongBest(x, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
      "First-Order-Logic Question": "Host(beijing, summerOlympics2008) ∧ ∃y (Host(beijing, y) ∧ y = winterOlympics) ::: Beijing has hosted both the 2008 Summer Olympics and a winter olympics."
    },
    "predicates": [
      "Capital(x, y) ::: x is the capital of y.",
      "MostPopulousCapital(x) ::: x is the world's most populous national capital city.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Host(x, y) ::: x hosted y.",
      "University(x) ::: x is a university.",
      "RankAmongBest(x, y) ::: x ranks among the best in y."
    ]
  },
  {
    "id": 25,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing is located in southern China.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Capital(beijing, china) ::: Beijing is the capital of the People's Republic of China.",
        "MostPopulousCapital(beijing) ::: Beijing is the world's most populous national capital city.",
        "LocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.",
        "Host(beijing, summerOlympics2008) ∧ Host(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Host(beijing, summerOlympics) ∧ Host(beijing, winterOlympics) ∧ Host(beijing, summerParalympics) ∧ Host(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.",
        "∀x (University(x) ∧ LocatedIn(x, beijing) → RankAmongBest(x, asiaPacific) ∧ RankAmongBest(x, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "First-Order-Logic Question": [
        "LocatedIn(beijing, southernChina) ::: Beijing is located in southern China."
      ]
    },
    "predicates": [
      "Capital(x, y) ::: x is the capital of y.",
      "MostPopulousCapital(x) ::: x is the world's most populous national capital city.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Host(x, y) ::: x hosted y.",
      "University(x) ::: x is a university.",
      "RankAmongBest(x, y) ::: x ranks among the best in y."
    ]
  },
  {
    "id": 26,
    "context": [
      "Beijing is the capital of the People's Republic of China. ",
      "Beijing is the world's most populous national capital city.",
      "Beijing is located in Northern China.",
      "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
      "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
      "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
    ],
    "question": "Beijing is the second largest Chinese city by urban population.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Capital(beijing, china) ::: Beijing is the capital of the People's Republic of China.",
        "MostPopulousCapital(beijing) ::: Beijing is the world's most populous national capital city.",
        "LocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.",
        "Host(beijing, summerOlympics2008) ∧ Host(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "HostBoth(beijing, summerOlympics, winterOlympics) ∧ HostBoth(beijing, summerParalympics, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.",
        "∀x (University(x) ∧ LocatedIn(x, beijing) → RankAmongBest(x, asiaPacific) ∧ RankAmongBest(x, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "First-Order-Logic Question": [
        "SecondLargestCity(beijing, china) ::: Beijing is the second largest Chinese city by urban population."
      ]
    },
    "predicates": [
      "Capital(x, y) ::: x is the capital of y.",
      "MostPopulousCapital(x) ::: x is the world's most populous national capital city.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Host(x, y) ::: x hosted y.",
      "HostBoth(x, y, z) ::: x has hosted both y and z.",
      "University(x) ::: x is a university.",
      "RankAmongBest(x, y) ::: x ranks among the best in y.",
      "SecondLargestCity(x, y) ::: x is the second largest city in y by urban population."
    ]
  },
  {
    "id": 27,
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is an alien.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.",
        "∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.",
        "∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.",
        "∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.",
        "¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.",
        "¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "First-Order-Logic Question": [
        "Alien(marvin) ::: Marvin is an alien."
      ]
    },
    "predicates": [
      "Alien(x) ::: x is an alien.",
      "Extraterrestrial(x) ::: x is an extraterrestrial.",
      "FromMars(x) ::: x is from Mars.",
      "Human(x) ::: x is a human.",
      "FromEarth(x) ::: x is from Earth."
    ]
  },
  {
    "id": 28,
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "Marvin is neither a human nor from Mars.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.",
        "∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.",
        "∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.",
        "∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.",
        "¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.",
        "¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "First-Order-Logic Question": "¬Human(marvin) ∧ ¬FromMars(marvin) ::: Marvin is neither a human nor from Mars."
    },
    "predicates": [
      "Alien(x) ::: x is an alien.",
      "Extraterrestrial(x) ::: x is an extraterrestrial.",
      "FromMars(x) ::: x is from Mars.",
      "Human(x) ::: x is a human.",
      "FromEarth(x) ::: x is from Earth."
    ]
  },
  {
    "id": 29,
    "context": [
      "All aliens are extraterrestrial.",
      "If someone is from Mars, then they are aliens.",
      "No extraterrestrial is human.",
      "Everyone from Earth is a human.",
      "Marvin cannot be from Earth and from Mars.",
      "If Marvin is not from Earth, then Marvin is an extraterrestrial."
    ],
    "question": "If Marvin is not from Mars, then Marvin is a human.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.",
        "∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.",
        "∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.",
        "∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.",
        "¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.",
        "¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "First-Order-Logic Question": "¬FromMars(marvin) → Human(marvin) ::: If Marvin is not from Mars, then Marvin is a human."
    },
    "predicates": [
      "Alien(x) ::: x is an alien.",
      "Extraterrestrial(x) ::: x is an extraterrestrial.",
      "FromMars(x) ::: x is from Mars.",
      "Human(x) ::: x is a human.",
      "FromEarth(x) ::: x is from Earth."
    ]
  },
  {
    "id": 30,
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic is a Grand Slam champion.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.",
        "∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.",
        "∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.",
        "∀x (Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.",
        "∀x (WellPaid(x) → LiveInTaxHaven(x)) ::: All well-paid people live in tax havens.",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic) ::: If Djokovic is famous and is an athlete, then Djokovic is well paid."
      ],
      "First-Order-Logic Question": "GrandSlamChampion(djokovic) ::: Djokovic is a Grand Slam champion."
    },
    "predicates": [
      "GrandSlamChampion(x) ::: x is a Grand Slam champion.",
      "OscarNominatedActor(x) ::: x is an Oscar-nominated actor.",
      "ProfessionalTennisPlayer(x) ::: x is a professional tennis player.",
      "Celebrity(x) ::: x is a celebrity.",
      "Athlete(x) ::: x is an athlete.",
      "WellPaid(x) ::: x is well paid.",
      "LiveInTaxHaven(x) ::: x lives in a tax haven.",
      "Famous(x) ::: x is famous."
    ]
  },
  {
    "id": 31,
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic lives in a tax haven.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.",
        "∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.",
        "∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.",
        "∀x (Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.",
        "∀x (WellPaid(x) → LivesInTaxHaven(x)) ::: All well-paid people live in tax havens.",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic) ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
      ],
      "First-Order-Logic Question": "LivesInTaxHaven(djokovic) ::: Djokovic lives in a tax haven."
    },
    "predicates": [
      "GrandSlamChampion(x) ::: x is a Grand Slam champion.",
      "OscarNominatedActor(x) ::: x is an Oscar-nominated actor.",
      "ProfessionalTennisPlayer(x) ::: x is a professional tennis player.",
      "Celebrity(x) ::: x is a celebrity.",
      "Athlete(x) ::: x is an athlete.",
      "WellPaid(x) ::: x is well paid.",
      "LivesInTaxHaven(x) ::: x lives in a tax haven.",
      "Famous(x) ::: x is famous."
    ]
  },
  {
    "id": 32,
    "context": [
      "A person is either a Grand Slam champion or an Oscar-nominated actor.",
      "All people who are Grand Slam champions are professional tennis players.",
      "All Oscar-nominated actors are celebrities.",
      "All professional tennis players are athletes.",
      "If a person is a celebrity then they are well paid.",
      "If a person is an athlete then they are famous.",
      "All well-paid people live in tax havens.",
      "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."
    ],
    "question": "Djokovic does not live in a tax haven.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.",
        "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.",
        "∀x (OscarNominatedActor(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.",
        "∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.",
        "∀x (Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.",
        "∀x (Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.",
        "∀x (WellPaid(x) → LivesInTaxHaven(x)) ::: All well-paid people live in tax havens.",
        "(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic) ::: If Djokovic is famous and is an athlete, then Djokovic is well paid."
      ],
      "First-Order-Logic Question": [
        "¬LivesInTaxHaven(djokovic) ::: Djokovic does not live in a tax haven."
      ]
    },
    "predicates": [
      "GrandSlamChampion(x) ::: x is a Grand Slam champion.",
      "OscarNominatedActor(x) ::: x is an Oscar-nominated actor.",
      "ProfessionalTennisPlayer(x) ::: x is a professional tennis player.",
      "Celebrity(x) ::: x is a celebrity.",
      "Athlete(x) ::: x is an athlete.",
      "WellPaid(x) ::: x is well paid.",
      "LivesInTaxHaven(x) ::: x lives in a tax haven.",
      "Famous(x) ::: x is famous."
    ]
  },
  {
    "id": 33,
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick strong leads a professional wrestling stable.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "WrestlingStable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLeads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nIncludes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeudWith(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.",
      "First-Order-Logic Question": "∃x (WrestlingStable(x) ∧ Leads(roderickStrong, x)) ::: Roderick Strong leads a professional wrestling stable."
    },
    "predicates": [
      "WrestlingStable(x) ::: x is a professional wrestling stable.",
      "FormedIn(x, y) ::: x is formed in y.",
      "Leads(x, y) ::: x leads y.",
      "Includes(x, y) ::: x includes y.",
      "FeudWith(x, y) ::: x has a feud with y."
    ]
  },
  {
    "id": 34,
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Roderick strong leads the Creed Brothers.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "WrestlingStable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLeads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nIncludes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.",
      "First-Order-Logic Question": "Leads(roderickStrong, creedBrothers) ::: Roderick Strong leads the Creed Brothers."
    },
    "predicates": [
      "WrestlingStable(x) ::: x is a professional wrestling stable.",
      "FormedIn(x, y) ::: x is formed in y.",
      "Leads(x, y) ::: x leads y.",
      "Includes(x, y) ::: x includes y.",
      "Feud(x, y) ::: x has a feud with y.",
      "Member(x, y) ::: x is a member of y."
    ]
  },
  {
    "id": 35,
    "context": [
      "Diamond Mine is a professional wrestling stable, formed in WWE.",
      "Roderick Strong leads Diamond Mine.",
      "Diamond Mine includes the Creed Brothers, and Ivy Nile.",
      "Imperium has a feud with Diamond Mine."
    ],
    "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "WrestlingStable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.",
        "Leads(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.",
        "Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.",
        "Feud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine."
      ],
      "First-Order-Logic Question": [
        "¬∃x (WrestlingStable(x) ∧ Includes(x, ivyNile) ∧ Feud(imperium, x)) ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."
      ]
    },
    "predicates": [
      "WrestlingStable(x) ::: x is a professional wrestling stable.",
      "FormedIn(x, y) ::: x is formed in y.",
      "Leads(x, y) ::: x leads y.",
      "Includes(x, y) ::: x includes y.",
      "Feud(x, y) ::: x has a feud with y.",
      "Member(x, y) ::: x is a member of y."
    ]
  },
  {
    "id": 36,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is a composer.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.",
        "∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.",
        "Write(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.",
        "Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.",
        "Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.",
        "Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.",
        "∀x (Orchestra(x) → ∃y (Lead(y, x) ∧ Conductor(y))) ::: Orchestras are led by conductors."
      ],
      "First-Order-Logic Question": [
        "Composer(beethoven) ::: Beethoven is a composer."
      ]
    },
    "predicates": [
      "MusicPiece(x) ::: x is a music piece.",
      "Composer(x) ::: x is a composer.",
      "Write(x, y) ::: x writes y.",
      "Premiere(x, y) ::: x premieres y.",
      "Orchestra(x) ::: x is an orchestra.",
      "Lead(x, y) ::: x leads y.",
      "Conductor(x) ::: x is a conductor."
    ]
  },
  {
    "id": 37,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Some orchestras premiered music pieces.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\n∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y))) ::: Composers write music pieces.\nWrite(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nPremiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\nOrchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\nLead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\n∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors.",
      "First-Order-Logic Question": "∃x (Orchestra(x) ∧ ∃y (MusicPiece(y) ∧ Premiere(x, y))) ::: Some orchestras premiered music pieces."
    },
    "predicates": [
      "MusicPiece(x) ::: x is a music piece.",
      "Composer(x) ::: x is a composer.",
      "Write(x, y) ::: x writes y.",
      "Premiere(x, y) ::: x premieres y.",
      "Orchestra(x) ::: x is an orchestra.",
      "Lead(x, y) ::: x leads y.",
      "Conductor(x) ::: x is a conductor."
    ]
  },
  {
    "id": 38,
    "context": [
      "Symphony No. 9 is a music piece.",
      "Composers write music pieces.",
      "Beethoven wrote Symphony No. 9.",
      "Vienna Music Society premiered Symphony No. 9.",
      "Vienna Music Society is an orchestra.",
      "Beethoven leads the Vienna Music Society.",
      "Orchestras are led by conductors."
    ],
    "question": "Beethoven is not a conductor.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.",
        "∀x (Composer(x) → ∃y (MusicPiece(y) ∧ Write(x, y))) ::: Composers write music pieces.",
        "Write(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.",
        "Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.",
        "Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.",
        "Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors."
      ],
      "First-Order-Logic Question": "¬Conductor(beethoven) ::: Beethoven is not a conductor."
    },
    "predicates": [
      "MusicPiece(x) ::: x is a music piece.",
      "Composer(x) ::: x is a composer.",
      "Write(x, y) ::: x writes y.",
      "Premiere(x, y) ::: x premieres y.",
      "Orchestra(x) ::: x is an orchestra.",
      "Lead(x, y) ::: x leads y.",
      "Conductor(x) ::: x is a conductor."
    ]
  },
  {
    "id": 39,
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is a mass product design.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ZahaHadid(x) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.",
        "∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.",
        "∃x (ZahaHadid(x) ⊕ KellyWearstler(x)) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.",
        "∀x (KellyWearstler(x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.",
        "∀x (KellyWearstler(x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.",
        "∀x (Timeless(Max(x)) → (MassProduct(Max(x)) ∧ Evocative(Max(x)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "First-Order-Logic Question": "MassProduct(Max(x)) ::: A design by Max is a mass product design."
    },
    "predicates": [
      "DesignStyle(x) ::: x is a design style.",
      "Timeless(x) ::: x is timeless.",
      "MassProduct(x) ::: x is a mass product design.",
      "DesignBy(x, y) ::: x is a design by y.",
      "Evocative(x) ::: x is evocative.",
      "Dreamy(x) ::: x is dreamy.",
      "ZahaHadid(x) ::: x is a design style by Zaha Hadid.",
      "KellyWearstler(x) ::: x is a design style by Kelly Wearstler.",
      "Max(x) ::: x is a design by Max."
    ]
  },
  {
    "id": 40,
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is evocative and dreamy.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀y (DesignStyle(zahaHadid, y) → Timeless(y)) ::: All of Zaha Hadid's design styles are timeless.",
        "∀y (MassProduct(y) → ¬Timeless(y)) ::: No mass product design is timeless.",
        "DesignStyle(zahaHadid, y) ⊕ DesignStyle(kellyWearstler, y) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.",
        "∀y (DesignStyle(kellyWearstler, y) → Evocative(y)) ::: All of Kelly Wearstler's design styles are evocative.",
        "∀y (DesignStyle(kellyWearstler, y) → Dreamy(y)) ::: All of Kelly Wearstler's design styles are dreamy.",
        "∀y (Timeless(y) → (MassProduct(y) ∧ Evocative(y))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "First-Order-Logic Question": [
        "∃y (DesignStyle(max, y) ∧ Evocative(y) ∧ Dreamy(y)) ::: A design by Max is evocative and dreamy."
      ]
    },
    "predicates": [
      "DesignStyle(x, y) ::: x's design style is y.",
      "Timeless(y) ::: y is timeless.",
      "MassProduct(y) ::: y is a mass product design.",
      "Evocative(y) ::: y is evocative.",
      "Dreamy(y) ::: y is dreamy.",
      "Designer(x) ::: x is a designer."
    ]
  },
  {
    "id": 41,
    "context": [
      "All of Zaha Hadid's design styles are timeless.",
      "No mass product design is timeless.",
      "Either Zaha Hadid's design style or Kelly Wearstler's design style. ",
      "All of Kelly Wearstler's design styles are evocative.",
      "All of Kelly Wearstler's design styles are dreamy.",
      "If a design by Max is timeless, then a design by Max is a mass product design and evocative."
    ],
    "question": "A design by Max is either evocative or dreamy.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ZahaHadid(x) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.",
        "∀x (MassProduct(x) → ¬Timeless(x)) ::: No mass product design is timeless.",
        "∃x (ZahaHadid(x) ⊕ KellyWearstler(x)) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.",
        "∀x (KellyWearstler(x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.",
        "∀x (KellyWearstler(x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.",
        "∀x (Timeless(Max(x)) → (MassProduct(Max(x)) ∧ Evocative(Max(x)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "First-Order-Logic Question": [
        "Evocative(Max(x)) ⊕ Dreamy(Max(x)) ::: A design by Max is either evocative or dreamy."
      ]
    },
    "predicates": [
      "DesignStyle(x) ::: x is a design style.",
      "Timeless(x) ::: x is timeless.",
      "MassProduct(x) ::: x is a mass product design.",
      "Evocative(x) ::: x is evocative.",
      "Dreamy(x) ::: x is dreamy.",
      "DesignBy(x, y) ::: x is a design by y.",
      "ZahaHadid(x) ::: x is a design style by Zaha Hadid.",
      "KellyWearstler(x) ::: x is a design style by Kelly Wearstler.",
      "Max(x) ::: x is a design by Max."
    ]
  },
  {
    "id": 42,
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff is among the most active players in major tennis.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (RankedHighly(x) → ActivePlayer(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.",
        "∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "∀x (FemalePlayer(x) ∧ RolandGarros2022(x) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "∀x (RolandGarros2022(x) → (FemalePlayer(x) ⊕ MalePlayer(x))) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.",
        "∀x (MalePlayer(x) ∧ RolandGarros2022(x) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "(RankedHighly(cocoGauff) ⊕ LostTo(cocoGauff, rafaelNadal)) → ¬(MalePlayer(cocoGauff) ∧ RolandGarros2022(cocoGauff)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "First-Order-Logic Question": [
        "ActivePlayer(cocoGauff) ::: Coco Gauff is among the most active players in major tennis."
      ]
    },
    "predicates": [
      "RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.",
      "ActivePlayer(x) ::: x is among the most active players in major tennis.",
      "LostTo(x, y) ::: x lost to y.",
      "FemalePlayer(x) ::: x is a female tennis player.",
      "MalePlayer(x) ::: x is a male tennis player.",
      "RolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022."
    ]
  },
  {
    "id": 43,
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (RankedHighly(x) → ActivePlayer(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.",
        "∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "∀x (FemalePlayer(x) ∧ RolandGarros2022(x) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "∀x (RolandGarros2022(x) → FemalePlayer(x) ⊕ MalePlayer(x)) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.",
        "∀x (MalePlayer(x) ∧ RolandGarros2022(x) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "(RankedHighly(cocoGauff) ⊕ LostTo(cocoGauff, rafaelNadal)) → ¬(MalePlayer(cocoGauff) ∧ RolandGarros2022(cocoGauff)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "First-Order-Logic Question": [
        "LostTo(cocoGauff, rafaelNadal) ::: Coco Gauff has lost to Rafael Nadal."
      ]
    },
    "predicates": [
      "RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.",
      "ActivePlayer(x) ::: x is among the most active players in major tennis.",
      "LostTo(x, y) ::: x lost to y.",
      "FemalePlayer(x) ::: x is a female tennis player.",
      "MalePlayer(x) ::: x is a male tennis player.",
      "RolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022."
    ]
  },
  {
    "id": 44,
    "context": [
      "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ",
      "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
      "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
      "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ",
      "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
      "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
    ],
    "question": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (RankedHighly(x) → ActivePlayer(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.",
        "∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "∀x (FemalePlayer(x) ∧ RolandGarros2022(x) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "∀x (RolandGarros2022(x) → FemalePlayer(x) ⊕ MalePlayer(x)) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.",
        "∀x (MalePlayer(x) ∧ RolandGarros2022(x) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "(RankedHighly(cocoGauff) ⊕ LostTo(cocoGauff, rafaelNadal)) → ¬(MalePlayer(cocoGauff) ∧ RolandGarros2022(cocoGauff)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "First-Order-Logic Question": [
        "¬(LostTo(cocoGauff, igaSwiatek) ⊕ ActivePlayer(cocoGauff)) ::: Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis."
      ]
    },
    "predicates": [
      "RankedHighly(x) ::: x is ranked highly by the Women's Tennis Association.",
      "ActivePlayer(x) ::: x is among the most active players in major tennis.",
      "LostTo(x, y) ::: x lost to y.",
      "FemalePlayer(x) ::: x is a female tennis player.",
      "MalePlayer(x) ::: x is a male tennis player.",
      "RolandGarros2022(x) ::: x is a tennis player at Roland Garros 2022."
    ]
  },
  {
    "id": 45,
    "context": [
      "All cats are mammals.",
      "Some pets are not mammals."
    ],
    "question": "No pets are cats.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cat(x) → Mammal(x)) ::: All cats are mammals.",
        "∃x (Pet(x) ∧ ¬Mammal(x)) ::: Some pets are not mammals."
      ],
      "First-Order-Logic Question": [
        "∀x (Pet(x) → ¬Cat(x)) ::: No pets are cats."
      ]
    },
    "predicates": [
      "Cat(x) ::: x is a cat.",
      "Mammal(x) ::: x is a mammal.",
      "Pet(x) ::: x is a pet."
    ]
  },
  {
    "id": 46,
    "context": [
      "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "James's favorite season is summer.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Season(x) ↔ (Spring(x) ∨ Summer(x) ∨ Fall(x) ∨ Winter(x))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "∀x (Student(x) ∧ WantLongVacation(x) → ∃y (Summer(y) ∧ LoveMost(x, y))) ::: All students who want to have a long vacation love summer the most.",
        "∃y (Summer(y) ∧ FavoriteSeason(emma, y)) ::: Emma's favorite season is summer.",
        "∀y (FavoriteSeason(mia, y) → ¬FavoriteSeason(emma, y)) ::: Mia's favorite season is not the same as Emma's.",
        "WantLongVacation(james) ::: James wants to have a long vacation."
      ],
      "First-Order-Logic Question": [
        "∃y (Summer(y) ∧ FavoriteSeason(james, y)) ::: James's favorite season is summer."
      ]
    },
    "predicates": [
      "Season(x) ::: x is a season.",
      "Spring(x) ::: x is the season Spring.",
      "Summer(x) ::: x is the season Summer.",
      "Fall(x) ::: x is the season Fall.",
      "Winter(x) ::: x is the season Winter.",
      "Student(x) ::: x is a student.",
      "WantLongVacation(x) ::: x wants to have a long vacation.",
      "LoveMost(x, y) ::: x loves y the most.",
      "FavoriteSeason(x, y) ::: y is x's favorite season."
    ]
  },
  {
    "id": 47,
    "context": [
      "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "James's favorite season is fall.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Season(x) → (Spring(x) ∨ Summer(x) ∨ Fall(x) ∨ Winter(x))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "∀x (Student(x) ∧ WantsLongVacation(x) → LovesMost(x, summer)) ::: All students who want to have a long vacation love summer the most.",
        "FavoriteSeason(emma, summer) ::: Emma's favorite season is summer.",
        "∀y (FavoriteSeason(mia, y) → ¬FavoriteSeason(mia, summer)) ::: Mia's favorite season is not the same as Emma's.",
        "WantsLongVacation(james) ::: James wants to have a long vacation."
      ],
      "First-Order-Logic Question": "FavoriteSeason(james, fall) ::: James's favorite season is fall."
    },
    "predicates": [
      "Season(x) ::: x is a season.",
      "Spring(x) ::: x is the season Spring.",
      "Summer(x) ::: x is the season Summer.",
      "Fall(x) ::: x is the season Fall.",
      "Winter(x) ::: x is the season Winter.",
      "Student(x) ::: x is a student.",
      "WantsLongVacation(x) ::: x wants to have a long vacation.",
      "LovesMost(x, y) ::: x loves y the most.",
      "FavoriteSeason(x, y) ::: y is x's favorite season."
    ]
  },
  {
    "id": 48,
    "context": [
      "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
      "All students who want to have a long vacation love summer the most.",
      "Emma's favorite season is summer.",
      "Mia's favorite season is not the same as Emma's. ",
      "James wants to have a long vacation."
    ],
    "question": "Mia's favorite season is spring.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.",
        "∀x (Student(x) ∧ WantsLongVacation(x) → LovesMost(x, summer)) ::: All students who want to have a long vacation love summer the most.",
        "FavoriteSeason(emma, summer) ::: Emma's favorite season is summer.",
        "∀y (FavoriteSeason(mia, y) → ¬FavoriteSeason(emma, y)) ::: Mia's favorite season is not the same as Emma's.",
        "WantsLongVacation(james) ::: James wants to have a long vacation."
      ],
      "First-Order-Logic Question": [
        "FavoriteSeason(mia, spring) ::: Mia's favorite season is spring."
      ]
    },
    "predicates": [
      "Season(x) ::: x is a season.",
      "Spring(x) ::: x is the season Spring.",
      "Summer(x) ::: x is the season Summer.",
      "Fall(x) ::: x is the season Fall.",
      "Winter(x) ::: x is the season Winter.",
      "Student(x) ::: x is a student.",
      "WantsLongVacation(x) ::: x wants to have a long vacation.",
      "LovesMost(x, y) ::: x loves y the most.",
      "FavoriteSeason(x, y) ::: y is x's favorite season."
    ]
  },
  {
    "id": 49,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is printed text.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.",
        "∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.",
        "∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.",
        "∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book then it is printed text.",
        "StreamingService(Object1984) → HardcoverBook(Object1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "First-Order-Logic Question": "PrintedText(Object1984) ::: 1984 is printed text."
    },
    "predicates": [
      "Digital(x) ::: x is digital media.",
      "Analog(x) ::: x is analog.",
      "PrintedText(x) ::: x is printed text.",
      "StreamingService(x) ::: x is a streaming service.",
      "HardcoverBook(x) ::: x is a hardcover book.",
      "Object1984 ::: 1984."
    ]
  },
  {
    "id": 50,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is a streaming service.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.",
        "∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.",
        "∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.",
        "∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book then it is printed text.",
        "StreamingService(Object1984) → HardcoverBook(Object1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "First-Order-Logic Question": [
        "StreamingService(Object1984) ::: 1984 is a streaming service."
      ]
    },
    "predicates": [
      "Digital(x) ::: x is digital media.",
      "Analog(x) ::: x is analog.",
      "PrintedText(x) ::: x is printed text.",
      "StreamingService(x) ::: x is a streaming service.",
      "HardcoverBook(x) ::: x is a hardcover book.",
      "Object1984 ::: 1984."
    ]
  },
  {
    "id": 51,
    "context": [
      "No digital media are analog.",
      "Every printed text is analog.",
      "All streaming services are digital.",
      "If an object is a hardcover book then it is printed text.",
      "If 1984 is a streaming service, then 1984 is a hardcover book."
    ],
    "question": "1984 is not a streaming service.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.",
        "∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.",
        "∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.",
        "∀x (HardcoverBook(x) → PrintedText(x)) ::: If an object is a hardcover book then it is printed text.",
        "StreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book."
      ],
      "First-Order-Logic Question": "¬StreamingService(1984) ::: 1984 is not a streaming service."
    },
    "predicates": [
      "Digital(x) ::: x is digital media.",
      "Analog(x) ::: x is analog.",
      "PrintedText(x) ::: x is a printed text.",
      "StreamingService(x) ::: x is a streaming service.",
      "HardcoverBook(x) ::: x is a hardcover book."
    ]
  },
  {
    "id": 52,
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "Basque is a Romance language.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x)) ::: All Romance languages are Indo-European languages.",
        "LanguageFamily(romanceLanguages) ::: The Romance languages are a language family.",
        "∀x ∀y ((LanguageFamily(f) ∧ f(x) ∧ f(y)) → Related(x, y)) ::: All languages within a language family are related to each other.",
        "RomanceLanguage(french) ∧ RomanceLanguage(spanish) ::: French and Spanish are both Romance languages.",
        "Related(german, spanish) ::: German is related to Spanish.",
        "∀x (Basque(x) → ¬∃y (Related(x, y))) ::: Basque is not related to any other language."
      ],
      "First-Order-Logic Question": "RomanceLanguage(basque) ::: Basque is a Romance language."
    },
    "predicates": [
      "RomanceLanguage(x) ::: x is a Romance language.",
      "IndoEuropeanLanguage(x) ::: x is an Indo-European language.",
      "LanguageFamily(x) ::: x is a language family.",
      "Related(x, y) ::: x is related to y.",
      "French(x) ::: x is the French language.",
      "Spanish(x) ::: x is the Spanish language.",
      "German(x) ::: x is the German language.",
      "Basque(x) ::: x is the Basque language."
    ]
  },
  {
    "id": 53,
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "German is a Romance language.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x)) ::: All Romance languages are Indo-European languages.",
        "LanguageFamily(romanceLanguages) ::: The Romance languages are a language family.",
        "∀x ∀y ((LanguageFamily(f) ∧ f(x) ∧ f(y)) → Related(x, y)) ::: All languages within a language family are related to each other.",
        "French(french) ∧ RomanceLanguage(french) ::: French is a Romance language.",
        "Spanish(spanish) ∧ RomanceLanguage(spanish) ::: Spanish is a Romance language.",
        "Related(german, spanish) ::: German is related to Spanish.",
        "∀x (Basque(x) → ¬∃y (Related(x, y))) ::: Basque is not related to any other language."
      ],
      "First-Order-Logic Question": "RomanceLanguage(german) ::: German is a Romance language."
    },
    "predicates": [
      "RomanceLanguage(x) ::: x is a Romance language.",
      "IndoEuropeanLanguage(x) ::: x is an Indo-European language.",
      "LanguageFamily(x) ::: x is a language family.",
      "Related(x, y) ::: x is related to y.",
      "French(x) ::: x is the French language.",
      "Spanish(x) ::: x is the Spanish language.",
      "German(x) ::: x is the German language.",
      "Basque(x) ::: x is the Basque language."
    ]
  },
  {
    "id": 54,
    "context": [
      "All Romance languages are Indo-European languages.",
      "The Romance languages are a language family.",
      "All languages within a language family are related to each other.",
      "French and Spanish are both Romance languages.",
      "German is related to Spanish.",
      "Basque is not related to any other language."
    ],
    "question": "French is an Indo-European language.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romanceLanguages) ::: The Romance languages are a language family.\n∀x ∀y (LanguageFamily(x) ∧ LanguageFamily(y) → Related(x, y)) ::: All languages within a language family are related to each other.\nRomanceLanguage(french) ∧ RomanceLanguage(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n∀x (Basque(x) → ¬∃y (Related(x, y))) ::: Basque is not related to any other language.",
      "First-Order-Logic Question": "IndoEuropeanLanguage(french) ::: French is an Indo-European language."
    },
    "predicates": [
      "RomanceLanguage(x) ::: x is a Romance language.",
      "IndoEuropeanLanguage(x) ::: x is an Indo-European language.",
      "LanguageFamily(x) ::: x is a language family.",
      "Related(x, y) ::: x is related to y.",
      "French(x) ::: x is the French language.",
      "Spanish(x) ::: x is the Spanish language.",
      "German(x) ::: x is the German language.",
      "Basque(x) ::: x is the Basque language."
    ]
  },
  {
    "id": 55,
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a soccer player.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Striker(robert) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robert, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y (Left(x, y) → NoLongerPlaysFor(x, y)) ::: If a player left a team they no longer play for that team.",
      "First-Order-Logic Question": "SoccerPlayer(robert) ::: Robert Lewandowski is a soccer player."
    },
    "predicates": [
      "Striker(x) ::: x is a striker.",
      "SoccerPlayer(x) ::: x is a soccer player.",
      "Left(x, y) ::: x left team y.",
      "NoLongerPlaysFor(x, y) ::: x no longer plays for team y."
    ]
  },
  {
    "id": 56,
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Striker(robert) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robert, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y (Left(x, y) → ¬PlaysFor(x, y)) ::: If a player left a team they no longer play for that team.",
      "First-Order-Logic Question": "PlaysFor(robert, bayernMunchen) ::: Robert Lewandowski plays for Bayern Munchen."
    },
    "predicates": [
      "Striker(x) ::: x is a striker.",
      "SoccerPlayer(x) ::: x is a soccer player.",
      "Left(x, y) ::: x left team y.",
      "PlaysFor(x, y) ::: x plays for team y.",
      "Team(y) ::: y is a team."
    ]
  },
  {
    "id": 57,
    "context": [
      "Robert Lewandowski is a striker.",
      "[BG] Strikers are soccer players.",
      "Robert Lewandowski left Bayern Munchen.",
      "[BG] If a player left a team they no longer play for that team."
    ],
    "question": "Robert Lewandowski is a star.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Striker(robertLewandowski) ::: Robert Lewandowski is a striker.",
        "∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.",
        "Left(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.",
        "∀x ∀y (Left(x, y) → NoLongerPlaysFor(x, y)) ::: If a player left a team they no longer play for that team."
      ],
      "First-Order-Logic Question": [
        "Star(robertLewandowski) ::: Robert Lewandowski is a star."
      ]
    },
    "predicates": [
      "Striker(x) ::: x is a striker.",
      "SoccerPlayer(x) ::: x is a soccer player.",
      "Left(x, y) ::: x left team y.",
      "NoLongerPlaysFor(x, y) ::: x no longer plays for team y.",
      "Star(x) ::: x is a star."
    ]
  },
  {
    "id": 58,
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Butte and Pierre are in the same state.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "City(billings) ∧ InState(billings, montana) ::: Billings is a city in Montana.",
        "InState(butte, montana) ∧ InState(helena, montana) ∧ InState(missoula, montana) ::: Montana includes the cities of Butte, Helena, and Missoula.",
        "City(whiteSulphurSprings) ∧ City(butte) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.",
        "City(pierre) ∧ NotInState(pierre, montana) ::: The city of Pierre is not in Montana.",
        "∀x (InState(x, butte) → NotInState(x, pierre)) ::: Any city in Butte is not in Pierre."
      ],
      "First-Order-Logic Question": [
        "SameState(butte, pierre) ::: Butte and Pierre are in the same state."
      ]
    },
    "predicates": [
      "City(x) ::: x is a city.",
      "InState(x, y) ::: x is in state y.",
      "NotInState(x, y) ::: x is not in state y.",
      "SameState(x, y) ::: x and y are in the same state."
    ]
  },
  {
    "id": 59,
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Pierre and Bismarck are in the same state.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "City(billings) ∧ InState(billings, montana) ::: Billings is a city in Montana.",
        "InState(butte, montana) ∧ InState(helena, montana) ∧ InState(missoula, montana) ::: Montana includes the cities of Butte, Helena, and Missoula.",
        "City(whiteSulphurSprings) ∧ City(butte) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.",
        "City(pierre) ∧ ¬InState(pierre, montana) ::: The city of Pierre is not in Montana.",
        "∀x (InState(x, butte) → ¬InState(x, pierre)) ::: Any city in Butte is not in Pierre."
      ],
      "First-Order-Logic Question": [
        "SameState(pierre, bismarck) ::: Pierre and Bismarck are in the same state."
      ]
    },
    "predicates": [
      "City(x) ::: x is a city.",
      "InState(x, y) ::: x is in state y.",
      "SameState(x, y) ::: x and y are in the same state."
    ]
  },
  {
    "id": 60,
    "context": [
      "Billings is a city in Montana.",
      "Montana includes the cities of Butte, Helena, and Missoula.",
      "White Sulphur Springs and Butte are cities in the same state.",
      "The city of Pierre is not in Montana.",
      "Any city in Butte is not in Pierre."
    ],
    "question": "Montana is home to the city of Missoula.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "City(billings) ∧ InState(billings, montana) ::: Billings is a city in Montana.",
        "Includes(montana, butte) ∧ Includes(montana, helena) ∧ Includes(montana, missoula) ::: Montana includes the cities of Butte, Helena, and Missoula.",
        "City(whiteSulphurSprings) ∧ City(butte) ∧ ∃s (InState(whiteSulphurSprings, s) ∧ InState(butte, s)) ::: White Sulphur Springs and Butte are cities in the same state.",
        "City(pierre) ∧ NotInState(pierre, montana) ::: The city of Pierre is not in Montana.",
        "∀x (InState(x, butte) → NotInState(x, pierre)) ::: Any city in Butte is not in Pierre."
      ],
      "First-Order-Logic Question": [
        "HomeTo(montana, missoula) ::: Montana is home to the city of Missoula."
      ]
    },
    "predicates": [
      "City(x) ::: x is a city.",
      "InState(x, y) ::: x is in the state y.",
      "NotInState(x, y) ::: x is not in the state y.",
      "Includes(y, x) ::: state y includes city x.",
      "HomeTo(y, x) ::: state y is home to city x."
    ]
  },
  {
    "id": 61,
    "context": [
      "International students in US have either an F1 visa or a J1 visa.",
      "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has an F1 visa.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → F1Visa(x) ⊕ J1Visa(x)) ::: International students in US have either an F1 visa or a J1 visa.",
        "∀x (InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsToWork(x) → ApplyFor(x, CPT) ⊕ ApplyFor(x, OPT)) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "InternationalStudent(mike) ∧ InUS(mike) ::: Mike is an international student.",
        "WantsToWork(mike) → ApplyFor(mike, CPT) ::: Mike needs to apply for CPT if he wants to work in the US."
      ],
      "First-Order-Logic Question": [
        "F1Visa(mike) ::: Mike has an F1 visa."
      ]
    },
    "predicates": [
      "InternationalStudent(x) ::: x is an international student.",
      "InUS(x) ::: x is in the US.",
      "F1Visa(x) ::: x has an F1 visa.",
      "J1Visa(x) ::: x has a J1 visa.",
      "ApplyFor(x, y) ::: x needs to apply for y.",
      "CPT(x) ::: x applies for CPT.",
      "OPT(x) ::: x applies for OPT.",
      "WantsToWork(x) ::: x wants to work in the US."
    ]
  },
  {
    "id": 62,
    "context": [
      "International students in US have either an F1 visa or a J1 visa.",
      "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
      "Mike is an international student.",
      "Mike needs to apply for CPT if he wants to work in the US."
    ],
    "question": "Mike has a J1 visa.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (InternationalStudent(x) ∧ InUS(x) → F1Visa(x) ⊕ J1Visa(x)) ::: International students in US have either an F1 visa or a J1 visa.",
        "∀x ((InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x) ∧ WantsToWork(x)) → ApplyCPT(x) ⊕ ApplyOPT(x)) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
        "InternationalStudent(mike) ∧ InUS(mike) ::: Mike is an international student.",
        "InternationalStudent(mike) ∧ InUS(mike) ∧ WantsToWork(mike) → ApplyCPT(mike) ::: Mike needs to apply for CPT if he wants to work in the US."
      ],
      "First-Order-Logic Question": [
        "J1Visa(mike) ::: Mike has a J1 visa."
      ]
    },
    "predicates": [
      "InternationalStudent(x) ::: x is an international student.",
      "InUS(x) ::: x is in the US.",
      "F1Visa(x) ::: x has an F1 visa.",
      "J1Visa(x) ::: x has a J1 visa.",
      "ApplyCPT(x) ::: x needs to apply for CPT.",
      "ApplyOPT(x) ::: x needs to apply for OPT.",
      "WantsToWork(x) ::: x wants to work in the US."
    ]
  },
  {
    "id": 63,
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "Ted is a pet.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.",
        "∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.",
        "∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.",
        "∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.",
        "Alligator(ted) ::: Ted is an alligator."
      ],
      "First-Order-Logic Question": [
        "Pet(ted) ::: Ted is a pet."
      ]
    },
    "predicates": [
      "Cow(x) ::: x is a cow.",
      "Bovine(x) ::: x is a bovine.",
      "Pet(x) ::: x is a pet.",
      "Domesticated(x) ::: x is domesticated.",
      "Alligator(x) ::: x is an alligator.",
      "Ted ::: Ted is an individual."
    ]
  },
  {
    "id": 64,
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "Ted is a pet and a cow.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.",
        "∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.",
        "∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.",
        "∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.",
        "Alligator(ted) ::: Ted is an alligator."
      ],
      "First-Order-Logic Question": [
        "Pet(ted) ∧ Cow(ted) ::: Ted is a pet and a cow."
      ]
    },
    "predicates": [
      "Cow(x) ::: x is a cow.",
      "Bovine(x) ::: x is a bovine.",
      "Pet(x) ::: x is a pet.",
      "Domesticated(x) ::: x is domesticated.",
      "Alligator(x) ::: x is an alligator.",
      "Ted ::: Ted is a specific entity."
    ]
  },
  {
    "id": 65,
    "context": [
      "All cows are bovines.",
      "Some pets are cows.",
      "If something is a bovine, then it is domesticated.",
      "No domesticated animals are alligators.",
      "Ted is an aligator."
    ],
    "question": "If Ted is a cow, then Ted is not a pet.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.",
        "∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.",
        "∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.",
        "∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.",
        "Alligator(ted) ::: Ted is an alligator."
      ],
      "First-Order-Logic Question": [
        "Cow(ted) → ¬Pet(ted) ::: If Ted is a cow, then Ted is not a pet."
      ]
    },
    "predicates": [
      "Cow(x) ::: x is a cow.",
      "Bovine(x) ::: x is a bovine.",
      "Pet(x) ::: x is a pet.",
      "Domesticated(x) ::: x is domesticated.",
      "Alligator(x) ::: x is an alligator.",
      "Ted(x) ::: x is Ted."
    ]
  },
  {
    "id": 66,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "University(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ Research(yale) ::: Yale University is a private Ivy League research university.",
        "MoveTo(yale, newHaven) ∧ Year(1716) ::: Yale University moved to New Haven in 1716.",
        "Endowment(yale, 42.3Billion) ::: Yale university's endowment was valued at $42.3 billion.",
        "OrganizedInto(yale, 27ConstituentCollegesAndSchools) ∧ ResidentialCollege(yaleResidentialColleges) ∧ GraduateSchool(yaleGraduateSchool) ∧ ProfessionalSchool(yaleProfessionalSchools) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "ListOfResidentialColleges(yale, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull]) ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "First-Order-Logic Question": [
        "∃x (University(x) ∧ Private(x) ∧ IvyLeague(x) ∧ Research(x) ∧ MoveTo(x, newHaven)) ::: A private Ivy League research university moved to New Haven."
      ]
    },
    "predicates": [
      "University(x) ::: x is a university.",
      "Private(x) ::: x is a private institution.",
      "IvyLeague(x) ::: x is an Ivy League institution.",
      "Research(x) ::: x is a research institution.",
      "MoveTo(x, y) ::: x moved to location y.",
      "Endowment(x, y) ::: x has an endowment valued at y.",
      "OrganizedInto(x, y) ::: x is organized into y.",
      "ConstituentCollege(x) ::: x is a constituent college.",
      "ResidentialCollege(x) ::: x is a residential college.",
      "GraduateSchool(x) ::: x is a graduate school.",
      "ProfessionalSchool(x) ::: x is a professional school.",
      "ListOfResidentialColleges(x, y) ::: x is a list of residential colleges at y."
    ]
  },
  {
    "id": 67,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "University(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ Research(yale) ::: Yale University is a private Ivy League research university.",
        "MoveTo(yale, newHaven, year1716) ::: Yale University moved to New Haven in 1716.",
        "EndowmentValue(yale, 42.3Billion) ::: Yale university's endowment was valued at $42.3 billion.",
        "OrganizedInto(yale, 27ConstituentCollegesAndSchools) ∧ ConstituentCollegeOrSchool(residentialColleges) ∧ ConstituentCollegeOrSchool(yaleGraduateSchoolOfArtsAndSciences) ∧ ConstituentCollegeOrSchool(twelveProfessionalSchools) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "ResidentialCollege(benjaminFranklinCollege) ∧ ResidentialCollege(berkeleyCollege) ∧ ResidentialCollege(branfordCollege) ∧ ResidentialCollege(davenportCollege) ∧ ResidentialCollege(ezraStilesCollege) ∧ ResidentialCollege(graceHopperCollege) ∧ ResidentialCollege(jonathanEdwardsCollege) ∧ ResidentialCollege(morseCollege) ∧ ResidentialCollege(pauliMurrayCollege) ∧ ResidentialCollege(piersonCollege) ∧ ResidentialCollege(saybrookCollege) ∧ ResidentialCollege(sillimanCollege) ∧ ResidentialCollege(timothyDwightCollege) ∧ ResidentialCollege(trumbullCollege) ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "First-Order-Logic Question": [
        "LargestEndowment(yale) ::: Yale University has the largest university endowment of any educational institution."
      ]
    },
    "predicates": [
      "University(x) ::: x is a university.",
      "Private(x) ::: x is a private institution.",
      "IvyLeague(x) ::: x is an Ivy League institution.",
      "Research(x) ::: x is a research institution.",
      "MoveTo(x, y, z) ::: x moved to y in year z.",
      "EndowmentValue(x, y) ::: x's endowment was valued at y.",
      "OrganizedInto(x, y) ::: x is organized into y.",
      "ConstituentCollegeOrSchool(x) ::: x is a constituent college or school.",
      "ResidentialCollege(x) ::: x is a residential college.",
      "GraduateSchool(x) ::: x is a graduate school.",
      "ProfessionalSchool(x) ::: x is a professional school.",
      "LargestEndowment(x) ::: x has the largest university endowment.",
      "EducationalInstitution(x) ::: x is an educational institution."
    ]
  },
  {
    "id": 68,
    "context": [
      "Yale University is a private Ivy League research university.",
      "Yale University moved to New Haven in 1716.",
      "Yale university's endowment was valued at $42.3 billion.",
      "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
    ],
    "question": "Pierson College is a residential college at Yale.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "University(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ Research(yale) ::: Yale University is a private Ivy League research university.",
        "MoveTo(yale, newHaven, year1716) ::: Yale University moved to New Haven in 1716.",
        "EndowmentValue(yale, 42.3Billion) ::: Yale university's endowment was valued at $42.3 billion.",
        "OrganizedInto(yale, 27ConstituentCollegesAndSchools) ∧ ConstituentCollege(residentialColleges, yale) ∧ ConstituentCollege(yaleGraduateSchoolOfArtsAndSciences, yale) ∧ ConstituentCollege(twelveProfessionalSchools, yale) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
        "ListOfResidentialColleges(residentialColleges, yale) ∧ ResidentialCollege(benjaminFranklinCollege) ∧ ResidentialCollege(berkeleyCollege) ∧ ResidentialCollege(branfordCollege) ∧ ResidentialCollege(davenportCollege) ∧ ResidentialCollege(ezraStilesCollege) ∧ ResidentialCollege(graceHopperCollege) ∧ ResidentialCollege(jonathanEdwardsCollege) ∧ ResidentialCollege(morseCollege) ∧ ResidentialCollege(pauliMurrayCollege) ∧ ResidentialCollege(piersonCollege) ∧ ResidentialCollege(saybrookCollege) ∧ ResidentialCollege(sillimanCollege) ∧ ResidentialCollege(timothyDwightCollege) ∧ ResidentialCollege(trumbullCollege) ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
      ],
      "First-Order-Logic Question": [
        "ResidentialCollege(piersonCollege) ::: Pierson College is a residential college at Yale."
      ]
    },
    "predicates": [
      "University(x) ::: x is a university.",
      "Private(x) ::: x is a private institution.",
      "IvyLeague(x) ::: x is an Ivy League institution.",
      "Research(x) ::: x is a research institution.",
      "MoveTo(x, y, z) ::: x moved to y in year z.",
      "EndowmentValue(x, y) ::: x's endowment was valued at y.",
      "OrganizedInto(x, y) ::: x has been organized into y.",
      "ResidentialCollege(x) ::: x is a residential college.",
      "GraduateSchool(x) ::: x is a graduate school.",
      "ProfessionalSchool(x) ::: x is a professional school.",
      "ListOfResidentialColleges(x, y) ::: x is a list of residential colleges at y.",
      "ConstituentCollege(x, y) ::: x is a constituent college of y."
    ]
  },
  {
    "id": 69,
    "context": [
      "Badults is a British Sitcom series, starring members of Pappy's.",
      "Badults piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults"
    ],
    "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "British(badults) ∧ Sitcom(badults) ∧ ∃x (Star(badults, x) ∧ MemberOf(x, pappys)) ::: Badults is a British Sitcom series, starring members of Pappy's.\nPilot(badults, july2013) ∧ Network(badults, bbcThree) ::: Badults piloted in July 2013 on BBC Three.\nWorkingTitle(badults, theSecretDudeSociety) ::: The Working title \"The Secret Dude Society\" was used for Badults.\nScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults.",
      "First-Order-Logic Question": "∃x (ScriptEditor(andrewCollins, x) ∧ WorkingTitle(x, theSecretDudeSociety)) ::: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."
    },
    "predicates": [
      "British(x) ::: x is British.",
      "Sitcom(x) ::: x is a sitcom series.",
      "Star(x, y) ::: x stars y.",
      "Pilot(x, y) ::: x piloted in year y.",
      "Network(x, y) ::: x is aired on network y.",
      "WorkingTitle(x, y) ::: x has the working title y.",
      "ScriptEditor(x, y) ::: x is the script editor for y."
    ]
  },
  {
    "id": 70,
    "context": [
      "Badults is a British Sitcom series, starring members of Pappy's.",
      "Badults piloted in July 2013 on BBC Three.",
      "The Working title \"The Secret Dude Society\" was used for Badults.",
      "Andrew Collins was the script editor for Badults"
    ],
    "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "British(badults) ∧ Sitcom(badults) ∧ ∀x (MemberOf(x, pappys) → Star(x, badults)) ::: Badults is a British Sitcom series, starring members of Pappy's.\nPilot(badults, year2013) ∧ Network(badults, bbcThree) ::: Badults piloted in July 2013 on BBC Three.\nWorkingTitle(badults, theSecretDudeSociety) ::: The Working title \"The Secret Dude Society\" was used for Badults.\nScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults.",
      "First-Order-Logic Question": "∀x (MemberOf(x, pappys) → ¬∃y (Star(x, y) ∧ (Network(y, bbcTwo) ∨ Network(y, bbcThree)))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
    },
    "predicates": [
      "British(x) ::: x is British.",
      "Sitcom(x) ::: x is a sitcom series.",
      "Star(x, y) ::: x stars in y.",
      "MemberOf(x, y) ::: x is a member of y.",
      "Pilot(x, y) ::: x piloted in year y.",
      "Network(x, y) ::: x is on network y.",
      "WorkingTitle(x, y) ::: x has the working title y.",
      "ScriptEditor(x, y) ::: x is the script editor for y.",
      "Show(x) ::: x is a show."
    ]
  },
  {
    "id": 71,
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "KO is a company stock.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (Stock(x) ∧ GrowthStock(x) ∧ CompanyStock(y)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (Stock(x) ∧ MatureCompany(x) → SuitableForRetirementFund(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nStock(ko) ∧ MatureCompany(ko) ::: KO is a stock of a mature company.",
      "First-Order-Logic Question": "CompanyStock(ko) ::: KO is a company stock."
    },
    "predicates": [
      "GrowthStock(x) ::: x is a growth stock of a company.",
      "Volatile(x) ::: x is volatile.",
      "SuitableForRetirementFund(x) ::: x is suitable for a retirement fund.",
      "Stock(x) ::: x is a stock.",
      "MatureCompany(x) ::: x is a mature company.",
      "CompanyStock(x) ::: x is a company stock."
    ]
  },
  {
    "id": 72,
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "KO is a company stock and a growth stock of a company.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.",
        "∀x (Volatile(x) → ¬SuitableForRetirement(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.",
        "∃x ∃y (Stock(x) ∧ GrowthStock(x) ∧ CompanyStock(y)) ::: Some stocks of some companies are growth stocks of companies.",
        "∀x (Stock(x) ∧ MatureCompany(x) → SuitableForRetirement(x)) ::: All stocks of mature companies are suitable for a retirement fund.",
        "Stock(ko) ∧ MatureCompany(ko) ::: KO is a stock of a mature company."
      ],
      "First-Order-Logic Question": [
        "CompanyStock(ko) ∧ GrowthStock(ko) ::: KO is a company stock and a growth stock of a company."
      ]
    },
    "predicates": [
      "GrowthStock(x) ::: x is a growth stock of a company.",
      "Volatile(x) ::: x is volatile.",
      "SuitableForRetirement(x) ::: x is suitable for a retirement fund.",
      "Stock(x) ::: x is a stock.",
      "MatureCompany(x) ::: x is a mature company.",
      "CompanyStock(x) ::: x is a company stock."
    ]
  },
  {
    "id": 73,
    "context": [
      "All growth stocks of companies are volatile.",
      "If the stock price is volatile, then it is not suitable for a retirement fund.",
      "Some stocks of some companies are growth stocks of companies.",
      "All stocks of mature companies are suitable for a retirement fund.",
      "KO is a stock of a mature company."
    ],
    "question": "If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.",
        "∀x (Volatile(x) → ¬SuitableForRetirement(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.",
        "∃x ∃y (Stock(x) ∧ GrowthStock(x) ∧ Company(y)) ::: Some stocks of some companies are growth stocks of companies.",
        "∀x (Stock(x) ∧ MatureCompany(x) → SuitableForRetirement(x)) ::: All stocks of mature companies are suitable for a retirement fund.",
        "Stock(KO) ∧ MatureCompany(KO) ::: KO is a stock of a mature company."
      ],
      "First-Order-Logic Question": "GrowthStock(KO) ∨ Volatile(KO) → ¬(Stock(KO) ∨ Volatile(KO)) ::: If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile."
    },
    "predicates": [
      "GrowthStock(x) ::: x is a growth stock of a company.",
      "Volatile(x) ::: x is volatile.",
      "SuitableForRetirement(x) ::: x is suitable for a retirement fund.",
      "Stock(x) ::: x is a stock.",
      "MatureCompany(x) ::: x is a mature company.",
      "KO ::: KO is a stock."
    ]
  },
  {
    "id": 74,
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Joe's license plate begins with the number 34.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (FromIstanbul(x) → BeginsWith34(x)) ::: All vehicle registration plates in Istanbul begin with the number 34.",
        "∀x (¬BeginsWith34(x) → ¬FromIstanbul(x)) ::: Plates that do not begin with the number 34 are not from Istanbul.",
        "FromIstanbul(joe) ::: Joe's vehicle registration plate is from Istanbul.",
        "BeginsWith35(tom) ::: Tom's license plate begins with the number 35.",
        "∀x (BeginsWith35(x) → ¬BeginsWith34(x)) ::: If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "First-Order-Logic Question": [
        "BeginsWith34(joe) ::: Joe's license plate begins with the number 34."
      ]
    },
    "predicates": [
      "Plate(x) ::: x is a vehicle registration plate.",
      "FromIstanbul(x) ::: x is from Istanbul.",
      "BeginsWith34(x) ::: x begins with the number 34.",
      "BeginsWith35(x) ::: x begins with the number 35.",
      "Joe(x) ::: x is Joe's vehicle registration plate.",
      "Tom(x) ::: x is Tom's vehicle registration plate."
    ]
  },
  {
    "id": 75,
    "context": [
      "All vehicle registration plates in Istanbul begin with the number 34.",
      "Plates that do not begin with the number 34 are not from Istanbul. ",
      "Joe's vehicle registration plate is from Istanbul. ",
      "Tom's license plate begins with the number 35. ",
      "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."
    ],
    "question": "Tom's license plate is from Istanbul.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (FromIstanbul(x) → BeginsWith34(x)) ::: All vehicle registration plates in Istanbul begin with the number 34.",
        "∀x (¬BeginsWith34(x) → ¬FromIstanbul(x)) ::: Plates that do not begin with the number 34 are not from Istanbul.",
        "∃x (VehicleOf(plateJoe, joe) ∧ FromIstanbul(plateJoe)) ::: Joe's vehicle registration plate is from Istanbul.",
        "∃x (VehicleOf(plateTom, tom) ∧ BeginsWith35(plateTom)) ::: Tom's license plate begins with the number 35.",
        "∀x (BeginsWith35(x) → ¬BeginsWith34(x)) ::: If a license plate begins with the number 35, then it does not begin with the number 34."
      ],
      "First-Order-Logic Question": [
        "FromIstanbul(plateTom) ::: Tom's license plate is from Istanbul."
      ]
    },
    "predicates": [
      "Plate(x) ::: x is a vehicle registration plate.",
      "BeginsWith34(x) ::: x begins with the number 34.",
      "FromIstanbul(x) ::: x is from Istanbul.",
      "BeginsWith35(x) ::: x begins with the number 35.",
      "VehicleOf(x, y) ::: x is the vehicle registration plate of y."
    ]
  },
  {
    "id": 76,
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (WorkStudentJob(x) → NeedMoney(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "∀x (OrderTakeout(x) → WorkStudentJob(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "∀x (EnjoyDiningHall(x) → NotPickyEater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "∀x (EnjoyDiningHall(x) → SpendTimeDiningHall(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "(WorkStudentJob(mary) ∧ NeedMoney(mary)) → (¬NotPickyEater(mary) ∧ ¬NeedMoney(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "First-Order-Logic Question": [
        "NeedMoney(mary) ::: Mary needs to earn money to help pay for her college tuition."
      ]
    },
    "predicates": [
      "WorkStudentJob(x) ::: x works in student jobs on campus.",
      "NeedMoney(x) ::: x needs to earn money to help pay for their college tuition.",
      "OrderTakeout(x) ::: x orders takeout frequently in college.",
      "EnjoyDiningHall(x) ::: x enjoys the dining hall meals and recipes.",
      "NotPickyEater(x) ::: x is not a picky eater.",
      "SpendTimeDiningHall(x) ::: x spends a lot of their time eating and catching up with friends in the campus dining halls."
    ]
  },
  {
    "id": 77,
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (WorkInStudentJobs(x) → NeedMoney(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "∀x (OrderTakeout(x) → WorkInStudentJobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "∀x (EnjoyDiningHall(x) → SpendTimeEating(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "(WorkInStudentJobs(mary) ∧ NeedMoney(mary)) → (¬PickyEater(mary) ∧ ¬NeedMoney(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "First-Order-Logic Question": [
        "¬PickyEater(mary) ∧ SpendTimeEating(mary) ::: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."
      ]
    },
    "predicates": [
      "WorkInStudentJobs(x) ::: x works in student jobs on campus.",
      "NeedMoney(x) ::: x needs to earn money to help pay for their college tuition.",
      "OrderTakeout(x) ::: x orders takeout frequently in college.",
      "EnjoyDiningHall(x) ::: x enjoys the dining hall meals and recipes.",
      "PickyEater(x) ::: x is a picky eater.",
      "SpendTimeEating(x) ::: x spends a lot of their time eating and catching up with friends in the campus dining halls."
    ]
  },
  {
    "id": 78,
    "context": [
      "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
      "If people order takeout frequently in college, then they work in student jobs on campus.",
      "People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
      "If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
      "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
      "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
    ],
    "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (WorkInStudentJobs(x) → NeedMoney(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
        "∀x (OrderTakeout(x) → WorkInStudentJobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.",
        "∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.",
        "∀x (EnjoyDiningHall(x) → ¬PickyEater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.",
        "∀x (EnjoyDiningHall(x) → SpendTimeEating(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
        "(WorkInStudentJobs(mary) ∧ NeedMoney(mary)) → (¬PickyEater(mary) ∧ ¬NeedMoney(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."
      ],
      "First-Order-Logic Question": [
        "¬PickyEater(mary) ⊕ (PickyEater(mary) → SpendTimeEating(mary)) ::: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."
      ]
    },
    "predicates": [
      "WorkInStudentJobs(x) ::: x works in student jobs on campus.",
      "NeedMoney(x) ::: x needs to earn money to help pay for their college tuition.",
      "OrderTakeout(x) ::: x orders takeout frequently in college.",
      "EnjoyDiningHall(x) ::: x enjoys the dining hall meals and recipes.",
      "PickyEater(x) ::: x is a picky eater.",
      "SpendTimeEating(x) ::: x spends a lot of their time eating and catching up with friends in the campus dining halls."
    ]
  },
  {
    "id": 79,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are a product of Baked by Melissa.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.",
        "∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.",
        "∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.",
        "∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.",
        "(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "First-Order-Logic Question": [
        "ProductOf(driedThaiChilies, bakedByMelissa) ::: Dried Thai chilies are a product of Baked by Melissa."
      ]
    },
    "predicates": [
      "Bakery(x) ::: x is a bakery.",
      "Spicy(x) ::: x is spicy.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "ProductOf(x, y) ::: x is a product of y.",
      "BakedByMelissa(x) ::: x is Baked by Melissa."
    ]
  },
  {
    "id": 80,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are not a product of Baked by Melissa.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.",
        "∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.",
        "∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.",
        "∀x (ProductOf(x, bakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.",
        "∀x (Spicy(x) ∨ Bakery(x) → Hotpot(x) ∨ Spicy(x)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "First-Order-Logic Question": [
        "¬ProductOf(driedThaiChilies, bakedByMelissa) ::: Dried Thai chilies are not a product of Baked by Melissa."
      ]
    },
    "predicates": [
      "Bakery(x) ::: x is a bakery.",
      "Spicy(x) ::: x is spicy.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "ProductOf(x, y) ::: x is a product of y.",
      "BakedByMelissa(x) ::: x is Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  {
    "id": 81,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are a hotpot.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.",
        "∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.",
        "∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.",
        "∀x (ProductOf(x, bakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.",
        "(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "First-Order-Logic Question": "Hotpot(driedThaiChilies) ::: Dried Thai chilies are a hotpot."
    },
    "predicates": [
      "Bakery(x) ::: x is a bakery.",
      "Spicy(x) ::: x is spicy.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "ProductOf(x, y) ::: x is a product of y.",
      "BakedByMelissa(x) ::: x is Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  {
    "id": 82,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.",
        "∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.",
        "∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.",
        "∀x (ProductOf(x, bakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.",
        "(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "First-Order-Logic Question": "¬ProductOf(driedThaiChilies, bakedByMelissa) ∧ ¬Bakery(driedThaiChilies) ::: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery."
    },
    "predicates": [
      "Bakery(x) ::: x is a bakery.",
      "Spicy(x) ::: x is spicy.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "ProductOf(x, y) ::: x is a product of y.",
      "BakedByMelissa(x) ::: x is Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  {
    "id": 83,
    "context": [
      "No bakery is spicy.",
      "All cupcakes are bakeries.",
      "All hotpots are spicy.",
      "All products of Baked by Melissa are cupcakes.",
      "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
    ],
    "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.",
        "∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.",
        "∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.",
        "∀x (ProductOf(x, bakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.",
        "∀x (DriedThaiChilies(x) ∧ (Spicy(x) ∨ Bakery(x)) → (Hotpot(x) ∨ Spicy(x))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."
      ],
      "First-Order-Logic Question": [
        "∃x (DriedThaiChilies(x) ∧ Cupcake(x) ∧ ProductOf(x, bakedByMelissa)) ::: Dried Thai chilies are cupcakes and a product of Baked by Melissa."
      ]
    },
    "predicates": [
      "Bakery(x) ::: x is a bakery.",
      "Spicy(x) ::: x is spicy.",
      "Cupcake(x) ::: x is a cupcake.",
      "Hotpot(x) ::: x is a hotpot.",
      "ProductOf(x, y) ::: x is a product of y.",
      "BakedByMelissa(x) ::: x is Baked by Melissa.",
      "DriedThaiChilies(x) ::: x is dried Thai chilies."
    ]
  },
  {
    "id": 84,
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ListedInYelp(x) → ¬NegativeReviews(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "∀x (RatingGreaterThan9(x) → ListedInYelp(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "∃x (¬ProvideTakeOut(x) ∧ NegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.",
        "∀x (PopularAmongLocals(x) → RatingGreaterThan9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.",
        "RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway) ::: Subway has a rating greater than 9 or is popular among local residents."
      ],
      "First-Order-Logic Question": "ProvideTakeOut(subway) ∧ NegativeReviews(subway) → (RatingGreaterThan9(subway) ∧ ¬ProvideTakeOut(subway)) ::: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service."
    },
    "predicates": [
      "ListedInYelp(x) ::: x is listed in Yelp’s recommendations.",
      "NegativeReviews(x) ::: x receives many negative reviews.",
      "RatingGreaterThan9(x) ::: x has a rating greater than 9.",
      "ProvideTakeOut(x) ::: x provides take-out service.",
      "PopularAmongLocals(x) ::: x is popular among local residents.",
      "Restaurant(x) ::: x is a restaurant."
    ]
  },
  {
    "id": 85,
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "Subway provides take-out service and does not receive many negative reviews.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ListedInYelp(x) → ¬NegativeReviews(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "∀x (RatingGreaterThan9(x) → ListedInYelp(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "∃x (¬TakeOutService(x) ∧ NegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.",
        "∀x (Popular(x) → RatingGreaterThan9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.",
        "RatingGreaterThan9(subway) ∨ Popular(subway) ::: Subway has a rating greater than 9 or is popular among local residents."
      ],
      "First-Order-Logic Question": [
        "TakeOutService(subway) ∧ ¬NegativeReviews(subway) ::: Subway provides take-out service and does not receive many negative reviews."
      ]
    },
    "predicates": [
      "ListedInYelp(x) ::: x is listed in Yelp’s recommendations.",
      "NegativeReviews(x) ::: x receives many negative reviews.",
      "RatingGreaterThan9(x) ::: x has a rating greater than 9.",
      "TakeOutService(x) ::: x provides take-out service.",
      "Popular(x) ::: x is popular among local residents."
    ]
  },
  {
    "id": 86,
    "context": [
      "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
      "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
      "Some restaurants that do not provide take-out service receive many negative reviews.",
      "All restaurants that are popular among local residents have ratings greater than 9.",
      "Subway has a rating greater than 9 or is popular among local residents."
    ],
    "question": "Subway does not provide take-out service.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (ListedInYelp(x) → ¬NegativeReviews(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "∀x (RatingGreaterThan9(x) → ListedInYelp(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "∃x (¬ProvideTakeOut(x) ∧ NegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.",
        "∀x (PopularAmongLocals(x) → RatingGreaterThan9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.",
        "RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway) ::: Subway has a rating greater than 9 or is popular among local residents."
      ],
      "First-Order-Logic Question": "¬ProvideTakeOut(subway) ::: Subway does not provide take-out service."
    },
    "predicates": [
      "ListedInYelp(x) ::: x is listed in Yelp’s recommendations.",
      "NegativeReviews(x) ::: x receives many negative reviews.",
      "RatingGreaterThan9(x) ::: x has a rating greater than 9.",
      "ProvideTakeOut(x) ::: x provides take-out service.",
      "PopularAmongLocals(x) ::: x is popular among local residents.",
      "Restaurant(x) ::: x is a restaurant.",
      "Subway ::: Subway."
    ]
  },
  {
    "id": 87,
    "context": [
      "In superhero movies, the good guys always win.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
      "Good guys fight bad guys and vice versa.",
      "Sir Digby fights his nemesis.",
      "If a superhero movie is named after a character, that character is a good guy.",
      "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
      "If somebody wins a fight, the person they are fighting loses.",
      "If a superhero movie is named after a character, that character appears in the movie."
    ],
    "question": "Sir Digby’s nemesis loses.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (SuperheroMovie(x) → ∀y (GoodGuy(y) → Win(y))) ::: In superhero movies, the good guys always win.",
        "SuperheroMovie(surprisingAdventures) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
        "∀x ∀y (GoodGuy(x) ∧ BadGuy(y) → Fight(x, y) ∧ Fight(y, x)) ::: Good guys fight bad guys and vice versa.",
        "∃x (Nemesis(digby, x) ∧ Fight(digby, x)) ::: Sir Digby fights his nemesis.",
        "∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → GoodGuy(y)) ::: If a superhero movie is named after a character, that character is a good guy.",
        "NamedAfter(surprisingAdventures, digby) ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
        "∀x ∀y (Fight(x, y) ∧ Win(x) → Lose(y)) ::: If somebody wins a fight, the person they are fighting loses.",
        "∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → Appear(y, x)) ::: If a superhero movie is named after a character, that character appears in the movie."
      ],
      "First-Order-Logic Question": [
        "Lose(nemesisOfDigby) ::: Sir Digby’s nemesis loses."
      ]
    },
    "predicates": [
      "SuperheroMovie(x) ::: x is a superhero movie.",
      "GoodGuy(x) ::: x is a good guy.",
      "Win(x) ::: x wins.",
      "Fight(x, y) ::: x fights y.",
      "BadGuy(x) ::: x is a bad guy.",
      "Nemesis(x, y) ::: x is the nemesis of y.",
      "NamedAfter(x, y) ::: x is named after y.",
      "Appear(x, y) ::: x appears in y.",
      "Lose(x) ::: x loses."
    ]
  },
  {
    "id": 88,
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Walden contains knowledge.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Book(x) → ∃y (Contains(x, y) ∧ Knowledge(y))) ::: Books contain tons of knowledge.",
        "∀x ∀y (Person(x) ∧ Book(y) ∧ Reads(x, y) → ∃z (Gains(x, z) ∧ Knowledge(z))) ::: When a person reads a book, that person gains knowledge.",
        "∀x ∀y (Gains(x, y) ∧ Knowledge(y) → Smarter(x)) ::: If a person gains knowledge, they become smarter.",
        "Person(harry) ∧ Book(walden) ∧ Author(henryThoreau, walden) ∧ Title(walden, 'Walden') ∧ Reads(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau."
      ],
      "First-Order-Logic Question": [
        "∃y (Contains(walden, y) ∧ Knowledge(y)) ::: Walden contains knowledge."
      ]
    },
    "predicates": [
      "Book(x) ::: x is a book.",
      "Contains(x, y) ::: x contains y.",
      "Knowledge(y) ::: y is knowledge.",
      "Person(x) ::: x is a person.",
      "Reads(x, y) ::: x reads y.",
      "Gains(x, y) ::: x gains y.",
      "Smarter(x) ::: x becomes smarter.",
      "Author(x, y) ::: x is the author of y.",
      "Title(x, y) ::: x is titled y."
    ]
  },
  {
    "id": 89,
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "Harry is smarter than before.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x ∀y (Book(x) ∧ Contain(x, y) ∧ Knowledge(y)) ::: Books contain tons of knowledge.",
        "∀x ∀y (Person(x) ∧ Book(y) ∧ Read(x, y) → Gain(x, knowledge)) ::: When a person reads a book, that person gains knowledge.",
        "∀x (Gain(x, knowledge) → Smarter(x)) ::: If a person gains knowledge, they become smarter.",
        "Person(harry) ∧ Book(walden) ∧ Author(henryThoreau, walden) ∧ Title(walden, 'Walden') ∧ Read(harry, walden) ::: Harry read the book 'Walden' by Henry Thoreau."
      ],
      "First-Order-Logic Question": [
        "Smarter(harry) ::: Harry is smarter than before."
      ]
    },
    "predicates": [
      "Book(x) ::: x is a book.",
      "Contain(x, y) ::: x contains y.",
      "Knowledge(y) ::: y is knowledge.",
      "Read(x, y) ::: x reads y.",
      "Gain(x, y) ::: x gains y.",
      "Smarter(x) ::: x is smarter.",
      "Person(x) ::: x is a person.",
      "Author(x, y) ::: x is the author of y.",
      "Title(x, y) ::: x has the title y."
    ]
  },
  {
    "id": 90,
    "context": [
      "[BG] Books contain tons of knowledge.",
      "[BG] When a person reads a book, that person gains knowledge. ",
      "[BG] If a person gains knowledge, they become smarter.",
      "Harry read the book “Walden” by Henry Thoreau."
    ],
    "question": "A person who is smarter has gained knowledge.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x ∀y (Book(x) ∧ Contain(x, y) ∧ Knowledge(y)) ::: Books contain tons of knowledge.\n∀x ∀y (Person(x) ∧ Book(y) ∧ Read(x, y) → Gain(x, knowledge)) ::: When a person reads a book, that person gains knowledge.\n∀x (Gain(x, knowledge) → Smarter(x)) ::: If a person gains knowledge, they become smarter.\nPerson(harry) ∧ Book(walden) ∧ Author(henryThoreau, walden) ∧ Title(walden, 'Walden') ∧ Read(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.",
      "First-Order-Logic Question": "∀x (Smarter(x) → Gain(x, knowledge)) ::: A person who is smarter has gained knowledge."
    },
    "predicates": [
      "Book(x) ::: x is a book.",
      "Contain(x, y) ::: x contains y.",
      "Knowledge(y) ::: y is knowledge.",
      "Read(x, y) ::: x reads y.",
      "Gain(x, y) ::: x gains y.",
      "Smarter(x) ::: x is smarter.",
      "Person(x) ::: x is a person.",
      "Author(x, y) ::: x is the author of y.",
      "Title(x, y) ::: x has the title y."
    ]
  },
  {
    "id": 91,
    "context": [
      "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language generation task.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (NLPTask(x) → (LanguageGeneration(x) ⊕ LanguageUnderstanding(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "∀x (OutputTextSequence(x) → LanguageGeneration(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "NLPTask(machineTranslation) ∧ MachineTranslation(machineTranslation) ::: Machine translation is a natural language processing task.",
        "OutputTextSequence(machineTranslation) ::: The output of machine translation is a text sequence."
      ],
      "First-Order-Logic Question": [
        "LanguageGeneration(machineTranslation) ::: Machine translation is a language generation task."
      ]
    },
    "predicates": [
      "NLPTask(x) ::: x is a natural language processing task.",
      "LanguageGeneration(x) ::: x is a language generation task.",
      "LanguageUnderstanding(x) ::: x is a language understanding task.",
      "OutputTextSequence(x) ::: The output of x is a text sequence.",
      "MachineTranslation(x) ::: x is a machine translation task."
    ]
  },
  {
    "id": 92,
    "context": [
      "Natural language processing tasks can be categorized as either language generation task or language understanding task.",
      "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
      "Machine translation is a natural language processing task.",
      "The output of machine translation is a text sequence."
    ],
    "question": "Machine translation is a language understanding task.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (NLPTask(x) → (LanguageGeneration(x) ⊕ LanguageUnderstanding(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "∀x (OutputText(x) → LanguageGeneration(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "NLPTask(machineTranslation) ∧ MachineTranslation(machineTranslation) ::: Machine translation is a natural language processing task.",
        "OutputText(machineTranslation) ::: The output of machine translation is a text sequence."
      ],
      "First-Order-Logic Question": [
        "LanguageUnderstanding(machineTranslation) ::: Machine translation is a language understanding task."
      ]
    },
    "predicates": [
      "NLPTask(x) ::: x is a natural language processing task.",
      "LanguageGeneration(x) ::: x is a language generation task.",
      "LanguageUnderstanding(x) ::: x is a language understanding task.",
      "OutputText(x) ::: the output of x is a text sequence.",
      "MachineTranslation(x) ::: x is a machine translation task."
    ]
  },
  {
    "id": 93,
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (ManagedBuilding(x) ∧ AllowedIn(pet, x)) ::: Pets are allowed in some managed buildings.",
        "∀x (ManagedBuilding(x) → DepositRequired(x)) ::: A deposit is required to rent an apartment in a managed building.",
        "∀x ∀y (SecurityDeposit(x, y) → EqualOrMore(y, MonthlyRent(x, oneMonth))) ::: The security deposit can be either equal to one month's rent or more.",
        "Cat(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.",
        "∀x (Cat(x) → Pet(x)) ::: Cats are pets.",
        "ManagedBuilding(oliveGarden) ::: The Olive Garden is a managed building.",
        "MonthlyRent(oliveGarden, 2000) ::: The monthly rent at the Olive Garden is $2000.",
        "∀x ∀y (Rent(tom, x) ↔ (AllowedIn(fluffy, x) ∧ SecurityDeposit(x, y) ∧ ¬EqualOrMore(y, 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "EqualOrMore(2000, 1500) ::: 2000$ is more than $1500."
      ],
      "First-Order-Logic Question": [
        "Rent(tom, oliveGarden) ::: Tom will rent an apartment in The Olive Garden."
      ]
    },
    "predicates": [
      "Pet(x) ::: x is a pet.",
      "AllowedIn(x, y) ::: x is allowed in y.",
      "ManagedBuilding(x) ::: x is a managed building.",
      "DepositRequired(x) ::: A deposit is required to rent an apartment in x.",
      "SecurityDeposit(x, y) ::: The security deposit for x is y.",
      "EqualOrMore(x, y) ::: x is equal to or more than y.",
      "Cat(x) ::: x is a cat.",
      "Owner(x, y) ::: x is the owner of y.",
      "Rent(x, y) ::: x will rent an apartment in y.",
      "MonthlyRent(x, y) ::: The monthly rent at x is y.",
      "MoveInWith(x, y) ::: x will move in with y."
    ]
  },
  {
    "id": 94,
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (Pet(x) ∧ AllowedIn(x, y)) ∧ ManagedBuilding(y) ::: Pets are allowed in some managed buildings.",
        "∀x (ManagedBuilding(x) → DepositRequired(x)) ::: A deposit is required to rent an apartment in a managed building.",
        "∀x (SecurityDeposit(x, y) → (EqualOrMore(y, oneMonthRent) ∨ More(y, oneMonthRent))) ::: The security deposit can be either equal to one month's rent or more.",
        "Cat(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.",
        "∀x (Cat(x) → Pet(x)) ::: Cats are pets.",
        "ManagedBuilding(oliveGarden) ::: The Olive Garden is a managed building.",
        "MonthlyRent(oliveGarden, 2000) ::: The monthly rent at the Olive Garden is $2000.",
        "∀x (MoveInWith(tom, x, y) ↔ (AllowedIn(fluffy, x) ∧ SecurityDeposit(x, y) ∧ y ≤ 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "2000 > 1500 ::: 2000$ is more than $1500."
      ],
      "First-Order-Logic Question": [
        "AllowedIn(fluffy, oliveGarden) ::: Tom is allowed to move in an apartment in The Olive Garden with Fluffy."
      ]
    },
    "predicates": [
      "Pet(x) ::: x is a pet.",
      "AllowedIn(x, y) ::: x is allowed in y.",
      "ManagedBuilding(x) ::: x is a managed building.",
      "DepositRequired(x) ::: A deposit is required to rent x.",
      "SecurityDeposit(x, y) ::: The security deposit for x is y.",
      "EqualOrMore(x, y) ::: x is equal to or more than y.",
      "Cat(x) ::: x is a cat.",
      "Owner(x, y) ::: x is the owner of y.",
      "Rent(x, y) ::: x rents y.",
      "MonthlyRent(x, y) ::: The monthly rent for x is y.",
      "MoveInWith(x, y, z) ::: x will move in with y if z."
    ]
  },
  {
    "id": 95,
    "context": [
      "Pets are allowed in some managed buildings.",
      "[BG] A deposit is required to rent an apartment in a managed building.",
      "The security deposit can be either equal to one month's rent or more.",
      "Fluffy is Tom's cat.",
      "Cats are pets.",
      "The Olive Garden is a managed building.",
      "The monthly rent at the Olive Garden is $2000.",
      "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
      "2000$ is more than $1500."
    ],
    "question": "The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (ManagedBuilding(x) ∧ AllowedIn(pet, x)) ::: Pets are allowed in some managed buildings.",
        "∀x (ManagedBuilding(x) → DepositRequired(x)) ::: A deposit is required to rent an apartment in a managed building.",
        "∀x ∀y (SecurityDeposit(x, y) → (EqualOrMore(y, oneMonthRent) ∨ More(y, oneMonthRent))) ::: The security deposit can be either equal to one month's rent or more.",
        "Cat(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.",
        "∀x (Cat(x) → Pet(x)) ::: Cats are pets.",
        "ManagedBuilding(oliveGarden) ::: The Olive Garden is a managed building.",
        "MonthlyRent(oliveGarden, 2000) ::: The monthly rent at the Olive Garden is $2000.",
        "∀x ∀y (Rent(tom, x) ↔ (AllowedIn(fluffy, x) ∧ SecurityDeposit(x, y) ∧ EqualOrMore(y, 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
        "EqualOrMore(2000, 1500) ::: 2000$ is more than $1500."
      ],
      "First-Order-Logic Question": [
        "SecurityDeposit(oliveGarden, 2000) ∨ More(SecurityDeposit(oliveGarden, 2000)) ::: The security deposit at the Olive Garden is either $2000 or more."
      ]
    },
    "predicates": [
      "Pet(x) ::: x is a pet.",
      "AllowedIn(x, y) ::: x is allowed in y.",
      "ManagedBuilding(x) ::: x is a managed building.",
      "DepositRequired(x) ::: A deposit is required to rent x.",
      "SecurityDeposit(x, y) ::: The security deposit for x is y.",
      "EqualOrMore(x, y) ::: x is equal to or more than y.",
      "Cat(x) ::: x is a cat.",
      "Owner(x, y) ::: x is the owner of y.",
      "Rent(x, y) ::: x rents y.",
      "MonthlyRent(x, y) ::: The monthly rent for x is y.",
      "MoveInWith(x, y) ::: x moves in with y."
    ]
  },
  {
    "id": 96,
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "Koalas love to sleep.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (LovedByTourists(x) → FavoriteOfMax(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.",
        "∀x (FromAustralia(x) → LovedByTourists(x)) ::: All animals from Australia are loved by tourists.",
        "∀x (Quokka(x) → (Animal(x) ∧ FromAustralia(x))) ::: All quokka are animals from Australia.",
        "∀x (FavoriteOfMax(x) → VeryFluffy(x)) ::: All of Max's favorite animals are very fluffy.",
        "∀x (FavoriteOfMax(x) → LovesToSleep(x)) ::: All of Max's favorite animals love to sleep.",
        "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka."
      ],
      "First-Order-Logic Question": "∀x (Koala(x) → LovesToSleep(x)) ::: Koalas love to sleep."
    },
    "predicates": [
      "Animal(x) ::: x is an animal.",
      "LovedByTourists(x) ::: x is loved by tourists.",
      "FavoriteOfMax(x) ::: x is one of Max's favorite animals.",
      "FromAustralia(x) ::: x is from Australia.",
      "Quokka(x) ::: x is a quokka.",
      "VeryFluffy(x) ::: x is very fluffy.",
      "LovesToSleep(x) ::: x loves to sleep.",
      "Koala(x) ::: x is a koala."
    ]
  },
  {
    "id": 97,
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "Koalas love to sleep and are quokka.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (LovedByTourists(x) → FavoriteOfMax(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.",
        "∀x (FromAustralia(x) → LovedByTourists(x)) ::: All animals from Australia are loved by tourists.",
        "∀x (Quokka(x) → (Animal(x) ∧ FromAustralia(x))) ::: All quokka are animals from Australia.",
        "∀x (FavoriteOfMax(x) → VeryFluffy(x)) ::: All of Max's favorite animals are very fluffy.",
        "∀x (FavoriteOfMax(x) → LovesToSleep(x)) ::: All of Max's favorite animals love to sleep.",
        "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka."
      ],
      "First-Order-Logic Question": [
        "∀x (Koala(x) → (LovesToSleep(x) ∧ Quokka(x))) ::: Koalas love to sleep and are quokka."
      ]
    },
    "predicates": [
      "Animal(x) ::: x is an animal.",
      "LovedByTourists(x) ::: x is loved by tourists.",
      "FavoriteOfMax(x) ::: x is one of Max's favorite animals.",
      "FromAustralia(x) ::: x is from Australia.",
      "Quokka(x) ::: x is a quokka.",
      "VeryFluffy(x) ::: x is very fluffy.",
      "LovesToSleep(x) ::: x loves to sleep.",
      "Koala(x) ::: x is a koala."
    ]
  },
  {
    "id": 98,
    "context": [
      "If animals are loved by tourists, then they are Max's favorite animals. ",
      "All animals from Australia are loved by tourists. ",
      "All quokka are animals from Australia. ",
      "All of Max's favorite animals are very fluffy.",
      "All of Max's favorite animals love to sleep. ",
      "If a koala is very fluffy, then the koala is not a quokka."
    ],
    "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (LovedByTourists(x) → FavoriteOfMax(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.",
        "∀x (FromAustralia(x) → LovedByTourists(x)) ::: All animals from Australia are loved by tourists.",
        "∀x (Quokka(x) → (Animal(x) ∧ FromAustralia(x))) ::: All quokka are animals from Australia.",
        "∀x (FavoriteOfMax(x) → VeryFluffy(x)) ::: All of Max's favorite animals are very fluffy.",
        "∀x (FavoriteOfMax(x) → LovesToSleep(x)) ::: All of Max's favorite animals love to sleep.",
        "∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka."
      ],
      "First-Order-Logic Question": "∀x (Koala(x) ∧ Quokka(x) → (LovesToSleep(x) ⊕ VeryFluffy(x))) ::: If a koala is a quokka, then the koala either loves to sleep or is very fluffy."
    },
    "predicates": [
      "Animal(x) ::: x is an animal.",
      "LovedByTourists(x) ::: x is loved by tourists.",
      "FavoriteOfMax(x) ::: x is one of Max's favorite animals.",
      "FromAustralia(x) ::: x is from Australia.",
      "Quokka(x) ::: x is a quokka.",
      "VeryFluffy(x) ::: x is very fluffy.",
      "LovesToSleep(x) ::: x loves to sleep.",
      "Koala(x) ::: x is a koala."
    ]
  },
  {
    "id": 99,
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "Harry is a CEO.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x))) ::: A man is either kind or evil.",
        "∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.",
        "∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.",
        "∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.",
        "∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.",
        "Gentleman(harry) ::: Harry is a gentleman."
      ],
      "First-Order-Logic Question": [
        "CEO(harry) ::: Harry is a CEO."
      ]
    },
    "predicates": [
      "Man(x) ::: x is a man.",
      "Kind(x) ::: x is kind.",
      "Evil(x) ::: x is evil.",
      "Ugly(x) ::: x is ugly.",
      "Handsome(x) ::: x is handsome.",
      "Gentleman(x) ::: x is a gentleman.",
      "CEO(x) ::: x is a CEO.",
      "Harry ::: Harry."
    ]
  },
  {
    "id": 100,
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "Harry is kind or a CEO.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x))) ::: A man is either kind or evil.",
        "∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.",
        "∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.",
        "∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.",
        "∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.",
        "Gentleman(harry) ::: Harry is a gentleman."
      ],
      "First-Order-Logic Question": [
        "Kind(harry) ⊕ CEO(harry) ::: Harry is kind or a CEO."
      ]
    },
    "predicates": [
      "Man(x) ::: x is a man.",
      "Kind(x) ::: x is kind.",
      "Evil(x) ::: x is evil.",
      "Ugly(x) ::: x is ugly.",
      "Handsome(x) ::: x is handsome.",
      "Gentleman(x) ::: x is a gentleman.",
      "CEO(x) ::: x is a CEO.",
      "Harry ::: Harry is a specific individual."
    ]
  },
  {
    "id": 101,
    "context": [
      "A man is either kind or evil.",
      "No ugly person is handsome.",
      "All evil people are ugly.",
      "All gentlemen are handsome.",
      "All CEOs are gentlemen.",
      "Harry is a gentleman."
    ],
    "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Man(x) → (Kind(x) ⊕ Evil(x))) ::: A man is either kind or evil.",
        "∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.",
        "∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.",
        "∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.",
        "∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.",
        "Gentleman(harry) ::: Harry is a gentleman."
      ],
      "First-Order-Logic Question": "((Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry))) → (¬Kind(harry) ∧ ¬CEO(harry)) ::: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."
    },
    "predicates": [
      "Kind(x) ::: x is kind.",
      "Evil(x) ::: x is evil.",
      "Ugly(x) ::: x is ugly.",
      "Handsome(x) ::: x is handsome.",
      "Gentleman(x) ::: x is a gentleman.",
      "CEO(x) ::: x is a CEO.",
      "Man(x) ::: x is a man.",
      "Harry ::: Harry is a specific individual."
    ]
  },
  {
    "id": 102,
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (TwinOrTriplet(x) → SpendTimeWithSiblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "∀x (SameAgeSiblings(x) → TwinOrTriplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.",
        "∀x (ComplainAboutSiblings(x) → SameAgeSiblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.",
        "∀x (¬LiveAtHomeRegularly(x) → ¬StrongBondsWithFamily(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "(TwinOrTriplet(luke) ∧ StrongBondsWithFamily(luke)) ⊕ ¬(TwinOrTriplet(luke) ∨ StrongBondsWithFamily(luke)) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."
      ],
      "First-Order-Logic Question": [
        "SpendTimeWithSiblings(luke) ::: Luke spends a lot of time hanging out and playing with his siblings."
      ]
    },
    "predicates": [
      "TwinOrTriplet(x) ::: x is a twin or triplet.",
      "SpendTimeWithSiblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.",
      "SameAgeSiblings(x) ::: x has siblings who are the same age.",
      "ComplainAboutSiblings(x) ::: x complains often about annoying siblings.",
      "LiveAtHomeRegularly(x) ::: x lives at home regularly.",
      "StrongBondsWithFamily(x) ::: x develops strong bonds with their family members."
    ]
  },
  {
    "id": 103,
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke complains often about annoying siblings.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (TwinOrTriplet(x) → SpendTimeWithSiblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "∀x (SameAgeSiblings(x) → TwinOrTriplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.",
        "∀x (ComplainOften(x) → SameAgeSiblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.",
        "∀x (¬LiveAtHomeRegularly(x) → ¬StrongBondsWithFamily(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "(TwinOrTriplet(luke) ∧ StrongBondsWithFamily(luke)) ⊕ ¬(TwinOrTriplet(luke) ∨ StrongBondsWithFamily(luke)) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."
      ],
      "First-Order-Logic Question": [
        "ComplainOften(luke) ::: Luke complains often about annoying siblings."
      ]
    },
    "predicates": [
      "TwinOrTriplet(x) ::: x is a twin or triplet.",
      "SpendTimeWithSiblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.",
      "SameAgeSiblings(x) ::: x has siblings who are the same age.",
      "ComplainOften(x) ::: x complains often about annoying siblings.",
      "LiveAtHomeRegularly(x) ::: x lives at home regularly.",
      "StrongBondsWithFamily(x) ::: x develops strong bonds with their family members."
    ]
  },
  {
    "id": 104,
    "context": [
      "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
      "If people have siblings who are the same age, then they are twins or triplets.",
      "If people complain often about annoying siblings, then they have siblings who are the same age.",
      "If people do not live at home regularly, then they do not develop strong bonds with their family members.",
      "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
      "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "
    ],
    "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (TwinOrTriplet(x) → SpendTimeWithSiblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "∀x (SameAgeSiblings(x) → TwinOrTriplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.",
        "∀x (ComplainAboutSiblings(x) → SameAgeSiblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.",
        "∀x (¬LiveAtHomeRegularly(x) → ¬StrongBondsWithFamily(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "(TwinOrTriplet(luke) ∧ StrongBondsWithFamily(luke)) ⊕ ¬(TwinOrTriplet(luke) ∨ StrongBondsWithFamily(luke)) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."
      ],
      "First-Order-Logic Question": "¬TwinOrTriplet(luke) ∧ ¬ComplainAboutSiblings(luke) ::: Luke is neither a twin nor triplet nor complains often about annoying siblings."
    },
    "predicates": [
      "TwinOrTriplet(x) ::: x is a twin or triplet.",
      "SpendTimeWithSiblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.",
      "SameAgeSiblings(x) ::: x has siblings who are the same age.",
      "ComplainAboutSiblings(x) ::: x complains often about annoying siblings.",
      "LiveAtHomeRegularly(x) ::: x lives at home regularly.",
      "StrongBondsWithFamily(x) ::: x develops strong bonds with their family members."
    ]
  },
  {
    "id": 105,
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "Tom can apply for financial aid from ETS to take the GRE test.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Cost(gre, 205) ∧ Test(gre) ::: It costs US $205 to take the GRE test.",
        "∀x (Applicant(x) ∧ ProveHardship(x) → ProvideAid(ets, x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "∀x (Hardship(x) ↔ (TooLittleMoney(x) ∨ TooFewResources(x))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "LiveIn(tom, singleParentFamily) ∧ SingleParentFamily(singleParentFamily) ∧ OutOfWork(tomDad) ∧ (∀y (LiveIn(tom, y) → y = singleParentFamily)) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year."
      ],
      "First-Order-Logic Question": [
        "ApplyAid(tom, ets) ::: Tom can apply for financial aid from ETS to take the GRE test."
      ]
    },
    "predicates": [
      "Cost(x, y) ::: x costs y amount of money.",
      "Test(x) ::: x is a test.",
      "ProvideAid(x, y) ::: x provides financial aid to y.",
      "Applicant(x) ::: x is an applicant.",
      "ProveHardship(x) ::: x proves economic hardship.",
      "Hardship(x) ::: x refers to economic hardship.",
      "LiveIn(x, y) ::: x lives in y.",
      "SingleParentFamily(x) ::: x is a single-parent family.",
      "OutOfWork(x) ::: x is out of work.",
      "ApplyAid(x, y) ::: x can apply for financial aid from y."
    ]
  },
  {
    "id": 106,
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "It cost below US $300 to take the GRE test.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Cost(gre, us205) ::: It costs US $205 to take the GRE test.",
        "∀x (Applicant(x) ∧ Prove(x, Hardship(x)) → ProvideAid(ets, x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "∀x (Hardship(x) ↔ (Difficulty(x) ∧ (¬Money(x) ∨ ¬Resources(x)))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "Live(tom, singleParentFamily) ∧ Family(singleParentFamily) ∧ Parent(tomDad) ∧ OutOfWork(tomDad) ∧ ∀y (Live(tom, y) → Family(y)) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year."
      ],
      "First-Order-Logic Question": [
        "BelowCost(gre, us300) ::: It cost below US $300 to take the GRE test."
      ]
    },
    "predicates": [
      "Cost(x, y) ::: It costs y to take x.",
      "Test(x) ::: x is a test.",
      "ProvideAid(x, y) ::: x provides financial aid to y.",
      "Applicant(x) ::: x is an applicant.",
      "Prove(x, y) ::: x proves y.",
      "Hardship(x) ::: x experiences economic hardship.",
      "Difficulty(x) ::: x has difficulty.",
      "Money(x) ::: x has money.",
      "Resources(x) ::: x has resources.",
      "Live(x, y) ::: x lives in y.",
      "Family(x) ::: x is a family.",
      "Parent(x) ::: x is a parent.",
      "OutOfWork(x) ::: x is out of work.",
      "BelowCost(x, y) ::: It costs below y to take x."
    ]
  },
  {
    "id": 107,
    "context": [
      "It costs US $205 to take the GRE test.",
      "ETS provides financial aid to those GRE applicants who prove economic hardship.",
      "Economic hardship refers to difficulty caused by having too little money or too few resources.",
      "Tom lives in a single-parent family.",
      "His dad has been out of work for more than a year."
    ],
    "question": "There is no financial aid available for the GRE test.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Test(gre) ∧ Cost(gre, 205) ::: It costs US $205 to take the GRE test.",
        "∀x (Applicant(x) ∧ Prove(x, Hardship(x)) → ProvideAid(ets, x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.",
        "∀x (Hardship(x) ↔ (TooLittleMoney(x) ∨ TooFewResources(x))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.",
        "LiveIn(tom, singleParentFamily) ∧ SingleParentFamily(singleParentFamily) ∧ OutOfWork(dad, moreThanAYear) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year."
      ],
      "First-Order-Logic Question": [
        "NoAidAvailable(gre) ::: There is no financial aid available for the GRE test."
      ]
    },
    "predicates": [
      "Cost(x, y) ::: x costs y amount of money.",
      "Test(x) ::: x is a test.",
      "ProvideAid(x, y) ::: x provides financial aid to y.",
      "Applicant(x) ::: x is an applicant.",
      "Prove(x, y) ::: x proves y.",
      "Hardship(x) ::: x refers to economic hardship.",
      "LiveIn(x, y) ::: x lives in y.",
      "SingleParentFamily(x) ::: x is a single-parent family.",
      "OutOfWork(x, y) ::: x has been out of work for y amount of time.",
      "NoAidAvailable(x) ::: There is no financial aid available for x."
    ]
  },
  {
    "id": 108,
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (SpillFood(x) → ¬TidyConsistently(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "∀x (Foodie(x) ∧ GoOutFrequently(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "∀x (OnlyChild(x) → TidyConsistently(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "∀x (HighNetIncomeHousehold(x) → ∃y (BusyParents(y) ∧ LivesIn(y, x))) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
      ],
      "First-Order-Logic Question": [
        "TidyConsistently(peter) ∧ EnjoyCleaning(peter) ::: Peter tidies his space consistently and enjoys the process of cleaning."
      ]
    },
    "predicates": [
      "SpillFood(x) ::: x spills a lot of food on their clothing.",
      "TidyConsistently(x) ::: x tidies their spaces consistently.",
      "EnjoyCleaning(x) ::: x enjoys the process of cleaning.",
      "Foodie(x) ::: x is a foodie.",
      "GoOutFrequently(x) ::: x goes out frequently to find new food restaurants to try.",
      "OnlyChild(x) ::: x grew up as an only child with no siblings.",
      "BusyParents(x) ::: x has parents who are very busy with their regular jobs.",
      "HighNetIncomeHousehold(x) ::: x is a household with a high net income."
    ]
  },
  {
    "id": 109,
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (SpillsFood(x) → ¬TidySpaces(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "∀x (Foodie(x) → SpillsFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "∀x (OnlyChild(x) → TidySpaces(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "∀x (HighNetIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "(SpillsFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillsFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
      ],
      "First-Order-Logic Question": [
        "Foodie(peter) ⊕ HighNetIncomeHousehold(peter) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income."
      ]
    },
    "predicates": [
      "SpillsFood(x) ::: x spills a lot of food on their clothing.",
      "TidySpaces(x) ::: x tidies their spaces consistently.",
      "EnjoyCleaning(x) ::: x enjoys the process of cleaning.",
      "Foodie(x) ::: x is a foodie who goes out frequently to find new food restaurants to try.",
      "OnlyChild(x) ::: x grew up as an only child with no siblings.",
      "BusyParents(x) ::: x has parents who are very busy with their regular jobs.",
      "HighNetIncomeHousehold(x) ::: x belongs to a household with a high net income."
    ]
  },
  {
    "id": 110,
    "context": [
      "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
      "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
      "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
      "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
      "All households with a high net income have people who have parents who are very busy with their regular jobs.",
      "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "
    ],
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (SpillFood(x) → ¬TidyConsistently(x) ∧ EnjoyCleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.",
        "∀x (Foodie(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
        "∀x (OnlyChild(x) → TidyConsistently(x) ∧ EnjoyCleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.",
        "∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.",
        "∀x (HighNetIncomeHousehold(x) → BusyParents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.",
        "(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings."
      ],
      "First-Order-Logic Question": [
        "(Foodie(peter) ∧ HighNetIncomeHousehold(peter)) ⊕ (Foodie(peter) ∧ ¬HighNetIncomeHousehold(peter)) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income."
      ]
    },
    "predicates": [
      "SpillFood(x) ::: x spills a lot of food on their clothing.",
      "TidyConsistently(x) ::: x tidies their spaces consistently.",
      "EnjoyCleaning(x) ::: x enjoys the process of cleaning.",
      "Foodie(x) ::: x is a foodie who goes out frequently to find new food restaurants to try.",
      "OnlyChild(x) ::: x grew up as an only child with no siblings.",
      "BusyParents(x) ::: x has parents who are very busy with their regular jobs.",
      "HighNetIncomeHousehold(x) ::: x belongs to a household with a high net income."
    ]
  },
  {
    "id": 111,
    "context": [
      "All fir trees are evergreens.",
      "Some objects of worship are fir trees."
    ],
    "question": "Some evergreens are not objects of worship.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (FirTree(x) → Evergreen(x)) ::: All fir trees are evergreens.\n∃x (ObjectOfWorship(x) ∧ FirTree(x)) ::: Some objects of worship are fir trees.",
      "First-Order-Logic Question": "∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x)) ::: Some evergreens are not objects of worship."
    },
    "predicates": [
      "FirTree(x) ::: x is a fir tree.",
      "Evergreen(x) ::: x is an evergreen.",
      "ObjectOfWorship(x) ::: x is an object of worship."
    ]
  },
  {
    "id": 112,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "MountainRange(picurisMountains) ∧ (In(picurisMountains, newMexico) ⊕ In(picurisMountains, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisit(juanDeOnate, picurisMountains) ::: Juan de Onate visited the Picuris Mountains.\nMine(hardingPegmatiteMine) ∧ LocatedIn(hardingPegmatiteMine, picurisMountains) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x (MountainRange(x) ∧ In(x, texas) → NoMinesWithDonationsIn(x)) ::: There are no mountain ranges in Texas that have mines which have been donated.",
      "First-Order-Logic Question": "∃x (MountainRange(x) ∧ In(x, newMexico) ∧ Visit(juanDeOnate, x)) ::: Juan de Onate visited a mountain range in New Mexico."
    },
    "predicates": [
      "MountainRange(x) ::: x is a mountain range.",
      "In(x, y) ::: x is in location y.",
      "Visit(x, y) ::: x visited y.",
      "Mine(x) ::: x is a mine.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Donated(x) ::: x is donated.",
      "NoMinesWithDonationsIn(x) ::: There are no mines with donations in x."
    ]
  },
  {
    "id": 113,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "MountainRange(picurisMountains) ∧ (In(picurisMountains, newMexico) ⊕ In(picurisMountains, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisit(juanDeOnate, picurisMountains) ::: Juan de Onate visited the Picuris Mountains.\nMine(hardingPegmatiteMine) ∧ LocatedIn(hardingPegmatiteMine, picurisMountains) ∧ Donate(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x (MountainRange(x) ∧ In(x, texas) → ¬∃y (Mine(y) ∧ LocatedIn(y, x) ∧ Donate(y))) ::: There are no mountain ranges in Texas that have mines which have been donated.",
      "First-Order-Logic Question": "∃x (MountainRange(x) ∧ In(x, texas) ∧ Visit(juanDeOnate, x)) ::: Juan de Onate visited a mountain range in Texas."
    },
    "predicates": [
      "MountainRange(x) ::: x is a mountain range.",
      "In(x, y) ::: x is in y.",
      "Visit(x, y) ::: x visited y.",
      "Mine(x) ::: x is a mine.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Donate(x) ::: x is donated.",
      "Texas(x) ::: x is in Texas.",
      "NewMexico(x) ::: x is in New Mexico."
    ]
  },
  {
    "id": 114,
    "context": [
      "The Picuris Mountains are a mountain range in New Mexico or Texas.",
      "Juan de Onate visited the Picuris Mountains.",
      "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
      "There are no mountain ranges in texas that have mines which have been donated."
    ],
    "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MountainRange(picurisMountains) ∧ (In(picurisMountains, newMexico) ⊕ In(picurisMountains, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Visit(juanDeOnate, picurisMountains) ::: Juan de Onate visited the Picuris Mountains.",
        "Mine(hardingPegmatiteMine) ∧ LocatedIn(hardingPegmatiteMine, picurisMountains) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "∀x ∀y (MountainRange(x) ∧ In(x, texas) ∧ Mine(y) ∧ LocatedIn(y, x) → ¬Donated(y)) ::: There are no mountain ranges in Texas that have mines which have been donated."
      ],
      "First-Order-Logic Question": [
        "¬LocatedIn(hardingPegmatiteMine, newMexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
      ]
    },
    "predicates": [
      "MountainRange(x) ::: x is a mountain range.",
      "In(x, y) ::: x is in y.",
      "Visit(x, y) ::: x visited y.",
      "Mine(x) ::: x is a mine.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Donated(x) ::: x is donated.",
      "State(x) ::: x is a state."
    ]
  },
  {
    "id": 115,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x ∀y (Taller(x, y) ∧ Man(x) ∧ Man(y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.",
        "Man(michael) ∧ ∀y (Class(y, michael) → Taller(michael, y)) ::: Michael is a man who is taller than everyone else in his class.",
        "∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.",
        "Man(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.",
        "∀x (Class(x, michael) → Block(michael, x) ∧ ¬JumpWhenShooting(x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "¬Block(michael, windy) ::: Michael cannot block Windy's shooting.",
        "∀x (Shooter(x) ∧ JumpWhenShooting(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter."
      ],
      "First-Order-Logic Question": [
        "∃x (Class(x, michael) ∧ Taller(x, peter)) ::: Peter is shorter than a man in Michael's class."
      ]
    },
    "predicates": [
      "Man(x) ::: x is a man.",
      "Taller(x, y) ::: x is taller than y.",
      "Block(x, y) ::: x can block y's shooting.",
      "Class(x, y) ::: x is in y's class.",
      "JumpWhenShooting(x) ::: x can jump when shooting.",
      "GreatShooter(x) ::: x is a great shooter.",
      "Shooter(x) ::: x is a shooter."
    ]
  },
  {
    "id": 116,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Windy is a great shooter.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x ∀y (Taller(x, y) ∧ Man(x) ∧ Man(y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.",
        "Man(michael) ∧ ∀y (Class(y) ∧ Taller(michael, y)) ::: Michael is a man who is taller than everyone else in his class.",
        "∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.",
        "Man(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.",
        "∀x (Man(x) ∧ Taller(michael, x) ∧ ¬JumpWhenShooting(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "¬Block(michael, windy) ::: Michael cannot block Windy's shooting.",
        "∀x (Shooter(x) ∧ JumpWhenShooting(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter."
      ],
      "First-Order-Logic Question": [
        "GreatShooter(windy) ::: Windy is a great shooter."
      ]
    },
    "predicates": [
      "Man(x) ::: x is a man.",
      "Taller(x, y) ::: x is taller than y.",
      "Block(x, y) ::: x can block y's shooting.",
      "Class(x) ::: x is a class.",
      "JumpWhenShooting(x) ::: x can jump when shooting.",
      "GreatShooter(x) ::: x is a great shooter.",
      "Shooter(x) ::: x is a shooter."
    ]
  },
  {
    "id": 117,
    "context": [
      "If a man is taller than another man, the taller one can block the other's shooting.",
      "Michael is a man who is taller than everyone else in his class.",
      "If person x is taller than person y, and person y is taller than person z, than x is taller than z",
      "Peter is a man who is taller than Michael.",
      "Michael can block any shooting from a person as long as the person does not jump when shooting.",
      "Michael cannot block Windy's shooting.",
      "Every shooter who can jump when shooting is a great shooter."
    ],
    "question": "Peter can block Windy's shooting.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x ∀y (Taller(x, y) ∧ Man(x) ∧ Man(y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.",
        "Man(michael) ∧ ∀y (Class(y) → Taller(michael, y)) ::: Michael is a man who is taller than everyone else in his class.",
        "∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.",
        "Man(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.",
        "∀x (Man(x) ∧ ¬JumpWhenShooting(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "¬Block(michael, windy) ::: Michael cannot block Windy's shooting.",
        "∀x (Shooter(x) ∧ JumpWhenShooting(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter."
      ],
      "First-Order-Logic Question": [
        "Block(peter, windy) ::: Peter can block Windy's shooting."
      ]
    },
    "predicates": [
      "Man(x) ::: x is a man.",
      "Taller(x, y) ::: x is taller than y.",
      "Block(x, y) ::: x can block y's shooting.",
      "Class(x) ::: x is a class.",
      "JumpWhenShooting(x) ::: x can jump when shooting.",
      "GreatShooter(x) ::: x is a great shooter.",
      "Shooter(x) ::: x is a shooter."
    ]
  },
  {
    "id": 118,
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "Barutin is named after all islands in Antarctica.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (Settlement(x) ∧ NamedAfter(barutinCove, x)) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "LocatedIn(barutinCove, southwestCoastSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.",
        "Include(southShetlandIslands, snowIsland) ∧ Include(southShetlandIslands, greenwichIsland) ∧ Include(southShetlandIslands, deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "PartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.",
        "∀A ∀B ∀C ((LocatedIn(A, B) ∧ LocatedIn(B, C)) → LocatedIn(A, C)) ::: If A is located in B and B is located in C, then A is located in C."
      ],
      "First-Order-Logic Question": [
        "∀x (Island(x) ∧ LocatedIn(x, antarctica) → NamedAfter(barutin, x)) ::: Barutin is named after all islands in Antarctica."
      ]
    },
    "predicates": [
      "NamedAfter(x, y) ::: x is named after y.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Include(x, y) ::: x includes y.",
      "PartOf(x, y) ::: x is considered part of y.",
      "Island(x) ::: x is an island.",
      "Settlement(x) ::: x is a settlement."
    ]
  },
  {
    "id": 119,
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (Cove(x) ∧ NamedAfter(x, barutin) ∧ Settlement(barutin)) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "LocatedIn(barutinCove, southwestCoastSnowIsland) ∧ Cove(barutinCove) ::: Barutin Cove is on the southwest coast of Snow Island.",
        "Include(southShetlandIslands, snowIsland) ∧ Include(southShetlandIslands, greenwichIsland) ∧ Include(southShetlandIslands, deceptionIsland) ∧ Island(snowIsland) ∧ Island(greenwichIsland) ∧ Island(deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "PartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.",
        "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C."
      ],
      "First-Order-Logic Question": [
        "∃x ∃y (Cove(x) ∧ NamedAfter(x, y) ∧ PlaceIn(y, bulgaria) ∧ LocatedIn(x, antarctica)) ::: There is at least one cove in Antarctica named after a place in Bulgaria."
      ]
    },
    "predicates": [
      "NamedAfter(x, y) ::: x is named after y.",
      "Settlement(x) ::: x is a settlement.",
      "Cove(x) ::: x is a cove.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Island(x) ::: x is an island.",
      "PartOf(x, y) ::: x is considered part of y.",
      "Include(x, y) ::: x includes y.",
      "PlaceIn(x, y) ::: x is a place in y."
    ]
  },
  {
    "id": 120,
    "context": [
      "Barutin Cove is named after the Bulgarian settlement of Barutin.",
      "Barutin Cove is on the southwest coast of Snow Island.",
      "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
      "The South Shetland Islands are considered part of Antarctica.",
      "If A is located in B and B is located in C, then A is located in C."
    ],
    "question": "Barutin is not located in Antarctica.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "NamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.",
        "LocatedIn(barutinCove, southwestCoastSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.",
        "Include(southShetlandIslands, snowIsland) ∧ Include(southShetlandIslands, greenwichIsland) ∧ Include(southShetlandIslands, deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.",
        "PartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.",
        "∀A ∀B ∀C ((LocatedIn(A, B) ∧ LocatedIn(B, C)) → LocatedIn(A, C)) ::: If A is located in B and B is located in C, then A is located in C."
      ],
      "First-Order-Logic Question": [
        "¬LocatedIn(barutin, antarctica) ::: Barutin is not located in Antarctica."
      ]
    },
    "predicates": [
      "NamedAfter(x, y) ::: x is named after y.",
      "LocatedIn(x, y) ::: x is located in y.",
      "Include(x, y) ::: x includes y.",
      "PartOf(x, y) ::: x is considered part of y.",
      "Settlement(x) ::: x is a settlement.",
      "Island(x) ::: x is an island.",
      "Antarctica(x) ::: x is Antarctica."
    ]
  },
  {
    "id": 121,
    "context": [
      "Some affection is love.",
      "Some love is positive."
    ],
    "question": "Some affection is positive.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Affection(x) ∧ Love(x)) ::: Some affection is love.\n∃x (Love(x) ∧ Positive(x)) ::: Some love is positive.",
      "First-Order-Logic Question": "∃x (Affection(x) ∧ Positive(x)) ::: Some affection is positive."
    },
    "predicates": [
      "Affection(x) ::: x is affection.",
      "Love(x) ::: x is love.",
      "Positive(x) ::: x is positive."
    ]
  },
  {
    "id": 122,
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "Greyhound is an airline.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (TransportMultiplePassengers(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.",
        "∀x (Airline(x) → TransportMultiplePassengers(x)) ::: All airlines can transport multiple passengers.",
        "∀x (Plane(x) → Empty(x)) ::: All planes are empty.",
        "∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.",
        "¬Airline(greyhound) → ¬∃y (Greyhound(y) ∧ Plane(y)) ::: If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "First-Order-Logic Question": "Airline(greyhound) ::: Greyhound is an airline."
    },
    "predicates": [
      "TransportMultiplePassengers(x) ::: x can transport multiple passengers.",
      "Empty(x) ::: x is empty.",
      "Airline(x) ::: x is an airline.",
      "Plane(x) ::: x is a plane.",
      "Boeing707(x) ::: x is a Boeing 707.",
      "Greyhound(x) ::: x is Greyhound."
    ]
  },
  {
    "id": 123,
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "A Greyhound is a Boeing 707.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (TransportMultiplePassengers(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.",
        "∀x (Airline(x) → TransportMultiplePassengers(x)) ::: All airlines can transport multiple passengers.",
        "∀x (Plane(x) → Empty(x)) ::: All planes are empty.",
        "∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.",
        "¬Airline(greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "First-Order-Logic Question": "Greyhound(greyhound) ∧ Boeing707(greyhound) ::: A Greyhound is a Boeing 707."
    },
    "predicates": [
      "TransportMultiplePassengers(x) ::: x can transport multiple passengers.",
      "Empty(x) ::: x is empty.",
      "Airline(x) ::: x is an airline.",
      "Plane(x) ::: x is a plane.",
      "Boeing707(x) ::: x is a Boeing 707.",
      "Greyhound(x) ::: x is a Greyhound."
    ]
  },
  {
    "id": 124,
    "context": [
      "If something can transport multiple passengers, then they are not empty.",
      "All airlines can transport multiple passengers.",
      "All planes are empty.",
      "All Boeing 707s are planes.",
      "If Greyhound is not an airline, then there are no Greyhound planes."
    ],
    "question": "A Greyhound is not a Boeing 707.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (TransportMultiplePassengers(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.",
        "∀x (Airline(x) → TransportMultiplePassengers(x)) ::: All airlines can transport multiple passengers.",
        "∀x (Plane(x) → Empty(x)) ::: All planes are empty.",
        "∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.",
        "¬Airline(greyhound) → ¬∃y (Greyhound(y) ∧ Plane(y)) ::: If Greyhound is not an airline, then there are no Greyhound planes."
      ],
      "First-Order-Logic Question": "¬Greyhound(greyhound) ∨ ¬Boeing707(greyhound) ::: A Greyhound is not a Boeing 707."
    },
    "predicates": [
      "TransportMultiplePassengers(x) ::: x can transport multiple passengers.",
      "Empty(x) ::: x is empty.",
      "Airline(x) ::: x is an airline.",
      "Plane(x) ::: x is a plane.",
      "Boeing707(x) ::: x is a Boeing 707.",
      "Greyhound(x) ::: x is a Greyhound."
    ]
  },
  {
    "id": 125,
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock is a monkey.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.",
        "∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x)) ::: An animal is either a monkey or a bird.",
        "∀x (Bird(x) → Fly(x)) ::: All birds fly.",
        "∀x (Animal(x) → Breathe(x)) ::: All animals breathe.",
        "∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.",
        "¬(Fly(rock) ∧ Bird(rock)) → (¬Fly(rock) ∧ ¬Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "First-Order-Logic Question": [
        "Monkey(rock) ::: Rock is a monkey."
      ]
    },
    "predicates": [
      "Mammal(x) ::: x is a mammal.",
      "Animal(x) ::: x is an animal.",
      "Monkey(x) ::: x is a monkey.",
      "Bird(x) ::: x is a bird.",
      "Fly(x) ::: x can fly.",
      "Breathe(x) ::: x can breathe.",
      "HasWings(x) ::: x has wings.",
      "Rock ::: Rock is an entity."
    ]
  },
  {
    "id": 126,
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock has wings.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.",
        "∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x)) ::: An animal is either a monkey or a bird.",
        "∀x (Bird(x) → Fly(x)) ::: All birds fly.",
        "∀x (Animal(x) → Breathe(x)) ::: All animals breathe.",
        "∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.",
        "¬(Fly(rock) ∧ Bird(rock)) → (¬Fly(rock) ∧ ¬Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "First-Order-Logic Question": "HasWings(rock) ::: Rock has wings."
    },
    "predicates": [
      "Mammal(x) ::: x is a mammal.",
      "Animal(x) ::: x is an animal.",
      "Monkey(x) ::: x is a monkey.",
      "Bird(x) ::: x is a bird.",
      "Fly(x) ::: x can fly.",
      "Breathe(x) ::: x can breathe.",
      "HasWings(x) ::: x has wings."
    ]
  },
  {
    "id": 127,
    "context": [
      "All mammals are animals.",
      "All monkeys are mammals. ",
      "An animal is either a monkey or a bird.",
      "All birds fly.",
      "All animals breathe.",
      "If something can fly, then it has wings.",
      "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
    ],
    "question": "Rock does not have wings.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.",
        "∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.",
        "∀x (Animal(x) → Monkey(x) ⊕ Bird(x)) ::: An animal is either a monkey or a bird.",
        "∀x (Bird(x) → Fly(x)) ::: All birds fly.",
        "∀x (Animal(x) → Breathe(x)) ::: All animals breathe.",
        "∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.",
        "¬(Fly(rock) ∧ Bird(rock)) → (¬Fly(rock) ∧ ¬Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."
      ],
      "First-Order-Logic Question": [
        "¬HasWings(rock) ::: Rock does not have wings."
      ]
    },
    "predicates": [
      "Mammal(x) ::: x is a mammal.",
      "Animal(x) ::: x is an animal.",
      "Monkey(x) ::: x is a monkey.",
      "Bird(x) ::: x is a bird.",
      "Fly(x) ::: x can fly.",
      "Breathe(x) ::: x can breathe.",
      "HasWings(x) ::: x has wings."
    ]
  },
  {
    "id": 128,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has a wedding that is well-attended.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Wedding(x) → Child(x)) ::: All people who have a wedding are people who have at least one child.",
        "∀x (TravelParis(x) → Wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (JulyWedding(x) → TravelParis(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "∃x (JulyWedding(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.",
        "Child(john) → (¬TravelParis(john) ∧ ¬Wedding(john)) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "WellAttended(john) → (JulyWedding(john) ∨ (¬JulyWedding(john) ∧ TravelParis(john))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."
      ],
      "First-Order-Logic Question": [
        "WellAttended(john) ::: John has a wedding that is well-attended."
      ]
    },
    "predicates": [
      "Wedding(x) ::: x has a wedding.",
      "Child(x) ::: x has at least one child.",
      "TravelParis(x) ::: x travels to Paris for their honeymoon.",
      "JulyWedding(x) ::: x has a wedding in July.",
      "WellAttended(x) ::: x has a well-attended wedding.",
      "John ::: John."
    ]
  },
  {
    "id": 129,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John does not have a wedding that is well-attended.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (HasWedding(x) → HasChild(x)) ::: All people who have a wedding are people who have at least one child.",
        "∀x (TravelToParisHoneymoon(x) → HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (WeddingInJuly(x) → TravelToParisHoneymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "∃x (WeddingInJuly(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.",
        "HasChild(john) → (¬TravelToParisHoneymoon(john) ∧ ¬HasWedding(john)) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "WellAttended(john) → (WeddingInJuly(john) ∨ TravelToParisHoneymoon(john)) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."
      ],
      "First-Order-Logic Question": [
        "¬WellAttended(john) ::: John does not have a wedding that is well-attended."
      ]
    },
    "predicates": [
      "HasWedding(x) ::: x has a wedding.",
      "HasChild(x) ::: x has at least one child.",
      "TravelToParisHoneymoon(x) ::: x travels to Paris for their honeymoon.",
      "WeddingInJuly(x) ::: x has a wedding in July.",
      "WellAttended(x) ::: x's wedding is well-attended."
    ]
  },
  {
    "id": 130,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has at least one child.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Wedding(x) → Child(x)) ::: All people who have a wedding are people who have at least one child.",
        "∀x (TravelParis(x) → Wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (JulyWedding(x) → TravelParis(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "∃x (JulyWedding(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.",
        "Child(john) → ¬TravelParis(john) ∧ ¬Wedding(john) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "WellAttended(john) ∧ Wedding(john) → (JulyWedding(john) ∨ (¬JulyWedding(john) ∧ TravelParis(john))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."
      ],
      "First-Order-Logic Question": [
        "Child(john) ::: John has at least one child."
      ]
    },
    "predicates": [
      "Wedding(x) ::: x has a wedding.",
      "Child(x) ::: x has at least one child.",
      "TravelParis(x) ::: x travels to Paris for their honeymoon.",
      "JulyWedding(x) ::: x has a wedding in July.",
      "WellAttended(x) ::: x has a well-attended wedding.",
      "John ::: John."
    ]
  },
  {
    "id": 131,
    "context": [
      "All people who have a wedding are people who have at least one child.",
      "All people who travel to Paris for their honeymoon are people who have a wedding.",
      "All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
      "Some weddings in July are well-attended.",
      "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
      "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "
    ],
    "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (HasWedding(x) → HasChild(x)) ::: All people who have a wedding are people who have at least one child.",
        "∀x (TravelParisHoneymoon(x) → HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (WeddingInJuly(x) → TravelParisHoneymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "∃x (WeddingInJuly(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.",
        "HasChild(john) → (¬TravelParisHoneymoon(john) ∧ ¬HasWedding(john)) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "WellAttended(john) → (WeddingInJuly(john) ∨ TravelParisHoneymoon(john)) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."
      ],
      "First-Order-Logic Question": "¬WellAttended(john) ∧ ¬TravelParisHoneymoon(john) ::: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon."
    },
    "predicates": [
      "HasWedding(x) ::: x has a wedding.",
      "HasChild(x) ::: x has at least one child.",
      "TravelParisHoneymoon(x) ::: x travels to Paris for their honeymoon.",
      "WeddingInJuly(x) ::: x has a wedding in July.",
      "WellAttended(x) ::: x's wedding is well-attended."
    ]
  },
  {
    "id": 132,
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypus are mammals with no teeth.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Mammal(x) ∧ HaveTeeth(x)) ::: Some mammals have teeth.\n∀x (Platypus(x) → ¬HaveTeeth(x)) ::: Platypus have no teeth.\n∀x (Platypus(x) → Mammal(x)) ::: Platypus are mammals.\n∀x (Human(x) → HaveTeeth(x)) ::: Humans have teeth.",
      "First-Order-Logic Question": "∀x (Platypus(x) → (Mammal(x) ∧ ¬HaveTeeth(x))) ::: Platypus are mammals with no teeth."
    },
    "predicates": [
      "Mammal(x) ::: x is a mammal.",
      "HaveTeeth(x) ::: x has teeth.",
      "Platypus(x) ::: x is a platypus.",
      "Human(x) ::: x is a human."
    ]
  },
  {
    "id": 133,
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Platypus are reptiles.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Mammal(x) ∧ Teeth(x)) ::: Some mammals have teeth.\n∀x (Platypus(x) → ¬Teeth(x)) ::: Platypus have no teeth.\n∀x (Platypus(x) → Mammal(x)) ::: Platypus are mammals.\n∀x (Human(x) → Teeth(x)) ::: Humans have teeth.",
      "First-Order-Logic Question": "Reptile(platypus) ::: Platypus are reptiles."
    },
    "predicates": [
      "Mammal(x) ::: x is a mammal.",
      "Teeth(x) ::: x has teeth.",
      "Platypus(x) ::: x is a platypus.",
      "Human(x) ::: x is a human.",
      "Reptile(x) ::: x is a reptile."
    ]
  },
  {
    "id": 134,
    "context": [
      "[BG] Some mammals have teeth.",
      "Platypus have no teeth.",
      "Platypus are mammals. ",
      "Humans have teeth."
    ],
    "question": "Humans are mammals.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Mammal(x) ∧ HasTeeth(x)) ::: Some mammals have teeth.\n∀x (Platypus(x) → ¬HasTeeth(x)) ::: Platypus have no teeth.\n∀x (Platypus(x) → Mammal(x)) ::: Platypus are mammals.\n∀x (Human(x) → HasTeeth(x)) ::: Humans have teeth.",
      "First-Order-Logic Question": "∀x (Human(x) → Mammal(x)) ::: Humans are mammals."
    },
    "predicates": [
      "Mammal(x) ::: x is a mammal.",
      "HasTeeth(x) ::: x has teeth.",
      "Platypus(x) ::: x is a platypus.",
      "Human(x) ::: x is a human."
    ]
  },
  {
    "id": 135,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space sucks.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Plunger(x) → Suck(x)) ::: Plungers suck.\n∀x (Vacuum(x) → Suck(x)) ::: Vacuums suck.\n∀x (Vampire(x) → Suck(x)) ::: Vampires suck.\nSpace(space) ∧ Vacuum(space) ::: Space is a vacuum.\n∀x (Duster(x) ∧ HouseholdAppliance(x) → ¬Suck(x)) ::: A duster is a household appliance that doesn't suck.",
      "First-Order-Logic Question": "Suck(space) ::: Space sucks."
    },
    "predicates": [
      "Suck(x) ::: x sucks.",
      "Plunger(x) ::: x is a plunger.",
      "Vacuum(x) ::: x is a vacuum.",
      "Vampire(x) ::: x is a vampire.",
      "Space(x) ::: x is space.",
      "Duster(x) ::: x is a duster.",
      "HouseholdAppliance(x) ::: x is a household appliance."
    ]
  },
  {
    "id": 136,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "Space is a vampire.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Plunger(x) → Suck(x)) ::: Plungers suck.",
        "∀x (Vacuum(x) → Suck(x)) ::: Vacuums suck.",
        "∀x (Vampire(x) → Suck(x)) ::: Vampires suck.",
        "Space(space) ∧ Vacuum(space) ::: Space is a vacuum.",
        "Duster(duster) ∧ HouseholdAppliance(duster) ∧ NotSuck(duster) ::: A duster is a household appliance that doesn't suck."
      ],
      "First-Order-Logic Question": [
        "Space(space) ∧ Vampire(space) ::: Space is a vampire."
      ]
    },
    "predicates": [
      "Suck(x) ::: x sucks.",
      "Plunger(x) ::: x is a plunger.",
      "Vacuum(x) ::: x is a vacuum.",
      "Vampire(x) ::: x is a vampire.",
      "Space(x) ::: x is space.",
      "Duster(x) ::: x is a duster.",
      "HouseholdAppliance(x) ::: x is a household appliance.",
      "NotSuck(x) ::: x does not suck."
    ]
  },
  {
    "id": 137,
    "context": [
      "Plungers suck.",
      "Vacuums suck.",
      "Vampires suck.",
      "Space is a vacuum.",
      "A duster is a household appliance that doesn't suck."
    ],
    "question": "If something is a household appliance, it sucks.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Plunger(x) → Suck(x)) ::: Plungers suck.\n∀x (Vacuum(x) → Suck(x)) ::: Vacuums suck.\n∀x (Vampire(x) → Suck(x)) ::: Vampires suck.\n∀x (Space(x) → Vacuum(x)) ::: Space is a vacuum.\n∀x (Duster(x) → (HouseholdAppliance(x) ∧ ¬Suck(x))) ::: A duster is a household appliance that doesn't suck.",
      "First-Order-Logic Question": "∀x (HouseholdAppliance(x) → Suck(x)) ::: If something is a household appliance, it sucks."
    },
    "predicates": [
      "Suck(x) ::: x sucks.",
      "Plunger(x) ::: x is a plunger.",
      "Vacuum(x) ::: x is a vacuum.",
      "Vampire(x) ::: x is a vampire.",
      "Space(x) ::: x is space.",
      "Duster(x) ::: x is a duster.",
      "HouseholdAppliance(x) ::: x is a household appliance."
    ]
  },
  {
    "id": 138,
    "context": [
      "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
      "Unsupervised learning doesn't require labelled data.",
      "The state-of-the-art text summarization model is trained with machine learning algorithms.",
      "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
      "The Machine Learning algorithm for training text summarization model requires labelled data."
    ],
    "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (MLAlgorithm(x) → (SupervisedLearning(x) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x))) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "∀x (UnsupervisedLearning(x) → ¬RequiresLabelledData(x)) ::: Unsupervised learning doesn't require labelled data.",
        "∃x (StateOfTheArtModel(x) ∧ TrainedWith(x, y) ∧ MLAlgorithm(y)) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "∀x (StateOfTheArtModel(x) → ¬∃y (TrainedWith(x, y) ∧ ReinforcementLearning(y))) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "∀x (StateOfTheArtModel(x) → ∃y (TrainedWith(x, y) ∧ RequiresLabelledData(y))) ::: The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "First-Order-Logic Question": [
        "∃x (StateOfTheArtModel(x) ∧ ∃y (TrainedWith(x, y) ∧ SupervisedLearning(y))) ::: Supervised learning is used to train the state-of-the-art text summarization model."
      ]
    },
    "predicates": [
      "MLAlgorithm(x) ::: x is a machine learning algorithm.",
      "SupervisedLearning(x) ::: x is a supervised learning algorithm.",
      "UnsupervisedLearning(x) ::: x is an unsupervised learning algorithm.",
      "ReinforcementLearning(x) ::: x is a reinforcement learning algorithm.",
      "RequiresLabelledData(x) ::: x requires labelled data.",
      "StateOfTheArtModel(x) ::: x is the state-of-the-art text summarization model.",
      "TrainedWith(x, y) ::: x is trained with y."
    ]
  },
  {
    "id": 139,
    "context": [
      "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
      "Unsupervised learning doesn't require labelled data.",
      "The state-of-the-art text summarization model is trained with machine learning algorithms.",
      "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
      "The Machine Learning algorithm for training text summarization model requires labelled data."
    ],
    "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (MLAlgorithm(x) → (SupervisedLearning(x) ⊕ UnsupervisedLearning(x) ⊕ ReinforcementLearning(x))) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "∀x (UnsupervisedLearning(x) → ¬RequiresLabelledData(x)) ::: Unsupervised learning doesn't require labelled data.",
        "∃x (StateOfTheArtModel(x) ∧ TrainedWith(x, y) ∧ MLAlgorithm(y)) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "∀x (StateOfTheArtModel(x) → ¬∃y (TrainedWith(x, y) ∧ ReinforcementLearning(y))) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "∀x (StateOfTheArtModel(x) → ∃y (TrainedWith(x, y) ∧ RequiresLabelledData(y))) ::: The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "First-Order-Logic Question": [
        "∃x (StateOfTheArtModel(x) ∧ ∃y (TrainedWith(x, y) ∧ UnsupervisedLearning(y))) ::: Unsupervised learning is used to train the state-of-the-art text summarization model."
      ]
    },
    "predicates": [
      "MLAlgorithm(x) ::: x is a machine learning algorithm.",
      "SupervisedLearning(x) ::: x is a supervised learning algorithm.",
      "UnsupervisedLearning(x) ::: x is an unsupervised learning algorithm.",
      "ReinforcementLearning(x) ::: x is a reinforcement learning algorithm.",
      "RequiresLabelledData(x) ::: x requires labelled data.",
      "StateOfTheArtModel(x) ::: x is the state-of-the-art text summarization model.",
      "TrainedWith(x, y) ::: x is trained with y."
    ]
  },
  {
    "id": 140,
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is loved by children.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (CartoonCharacter(x) ∧ Funny(x) → Popular(x)) ::: If a cartoon character is funny, then it is popular.",
        "∀x (CartoonCharacter(x) ∧ Ugly(x) → ¬Popular(x)) ::: If a cartoon character is ugly, then it is not popular.",
        "∀x (CartoonCharacter(x) ∧ LovedByChildren(x) → Funny(x)) ::: If a cartoon character is loved by children, then it is funny.",
        "∀x (CartoonCharacter(x) ∧ FromSimpsons(x) → LovedByChildren(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.",
        "∀x (CartoonCharacter(x) ∧ Yellow(x) → FromSimpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.",
        "FromSimpsons(ben) ⊕ Funny(ben) ::: Ben is either from The Simpsons or funny."
      ],
      "First-Order-Logic Question": [
        "LovedByChildren(ben) ::: Ben is loved by children."
      ]
    },
    "predicates": [
      "CartoonCharacter(x) ::: x is a cartoon character.",
      "Funny(x) ::: x is funny.",
      "Popular(x) ::: x is popular.",
      "Ugly(x) ::: x is ugly.",
      "LovedByChildren(x) ::: x is loved by children.",
      "FromSimpsons(x) ::: x is from The Simpsons.",
      "Yellow(x) ::: x is yellow.",
      "Ben ::: Ben is a specific cartoon character."
    ]
  },
  {
    "id": 141,
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is ugly or yellow.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (CartoonCharacter(x) ∧ Funny(x) → Popular(x)) ::: If a cartoon character is funny, then it is popular.",
        "∀x (CartoonCharacter(x) ∧ Ugly(x) → ¬Popular(x)) ::: If a cartoon character is ugly, then it is not popular.",
        "∀x (CartoonCharacter(x) ∧ LovedByChildren(x) → Funny(x)) ::: If a cartoon character is loved by children, then it is funny.",
        "∀x (CartoonCharacter(x) ∧ FromSimpsons(x) → LovedByChildren(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.",
        "∀x (CartoonCharacter(x) ∧ Yellow(x) → FromSimpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.",
        "CartoonCharacter(ben) ∧ (FromSimpsons(ben) ⊕ Funny(ben)) ::: Ben is either from The Simpsons or funny."
      ],
      "First-Order-Logic Question": [
        "Ugly(ben) ⊕ Yellow(ben) ::: Ben is ugly or yellow."
      ]
    },
    "predicates": [
      "CartoonCharacter(x) ::: x is a cartoon character.",
      "Funny(x) ::: x is funny.",
      "Popular(x) ::: x is popular.",
      "Ugly(x) ::: x is ugly.",
      "LovedByChildren(x) ::: x is loved by children.",
      "FromSimpsons(x) ::: x is from The Simpsons.",
      "Yellow(x) ::: x is yellow."
    ]
  },
  {
    "id": 142,
    "context": [
      "If a cartoon character is funny, then it is popular.",
      "If a cartoon character is ugly, then it is not popular.",
      "If a cartoon character is loved by children, then it is funny.",
      "If a cartoon character is from The Simpsons, then it is loved by children.",
      "If a cartoon character is yellow, then it is from The Simpsons.",
      "Ben is either from The Simpsons or funny."
    ],
    "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (CartoonCharacter(x) ∧ Funny(x) → Popular(x)) ::: If a cartoon character is funny, then it is popular.",
        "∀x (CartoonCharacter(x) ∧ Ugly(x) → ¬Popular(x)) ::: If a cartoon character is ugly, then it is not popular.",
        "∀x (CartoonCharacter(x) ∧ LovedByChildren(x) → Funny(x)) ::: If a cartoon character is loved by children, then it is funny.",
        "∀x (CartoonCharacter(x) ∧ FromTheSimpsons(x) → LovedByChildren(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.",
        "∀x (CartoonCharacter(x) ∧ Yellow(x) → FromTheSimpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.",
        "FromTheSimpsons(ben) ⊕ Funny(ben) ::: Ben is either from The Simpsons or funny."
      ],
      "First-Order-Logic Question": [
        "(Yellow(ben) ∧ Ugly(ben)) ⊕ ¬(Yellow(ben) ∨ Ugly(ben)) ::: Ben is either yellow and ugly or neither yellow nor ugly."
      ]
    },
    "predicates": [
      "CartoonCharacter(x) ::: x is a cartoon character.",
      "Funny(x) ::: x is funny.",
      "Popular(x) ::: x is popular.",
      "Ugly(x) ::: x is ugly.",
      "LovedByChildren(x) ::: x is loved by children.",
      "FromTheSimpsons(x) ::: x is from The Simpsons.",
      "Yellow(x) ::: x is yellow."
    ]
  },
  {
    "id": 143,
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
      "[BG] Heck cattle are animals.",
      "[BG] Aurochs are animals.",
      "Some animals to be bred-back resemble animals that are extinct."
    ],
    "question": "Some Heck cattle are artificially selected.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (BreedingBack(x) → ArtificiallySelected(x)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nBredBack(heckCattle, aurochs) ∧ ∀x (BredBack(x, aurochs) → Resemble(x, aurochs)) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAnimal(heckCattle) ::: Heck cattle are animals.\nAnimal(aurochs) ∧ Extinct(aurochs) ::: Aurochs are animals.\n∃x (Animal(x) ∧ ∃y (BredBack(x, y) ∧ Resemble(x, y) ∧ Extinct(y))) ::: Some animals to be bred-back resemble animals that are extinct.",
      "First-Order-Logic Question": "∃x (Animal(x) ∧ ArtificiallySelected(x) ∧ x = heckCattle) ::: Some Heck cattle are artificially selected."
    },
    "predicates": [
      "BreedingBack(x) ::: x is a form of artificial selection by deliberate selective breeding of domestic animals.",
      "BredBack(x, y) ::: x is bred-back to resemble y.",
      "Animal(x) ::: x is an animal.",
      "Resemble(x, y) ::: x resembles y.",
      "Extinct(x) ::: x is extinct.",
      "ArtificiallySelected(x) ::: x is artificially selected."
    ]
  },
  {
    "id": 144,
    "context": [
      "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
      "Heck cattle were bred-back in the 1920s to resemble the aurochs.",
      "[BG] Heck cattle are animals.",
      "[BG] Aurochs are animals.",
      "Some animals to be bred-back resemble animals that are extinct."
    ],
    "question": "Aurochs are extinct.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (BreedingBack(x) → ∃y (Animal(y) ∧ Domestic(y))) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
        "BredBack(heckCattle, aurochs) ∧ ∀x (Animal(x) → (x = heckCattle ∨ x = aurochs)) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.",
        "Animal(heckCattle) ::: Heck cattle are animals.",
        "Animal(aurochs) ::: Aurochs are animals.",
        "∃x ∃y (Animal(x) ∧ Animal(y) ∧ BredBack(x, y) ∧ Resemble(x, y) ∧ Extinct(y)) ::: Some animals to be bred-back resemble animals that are extinct."
      ],
      "First-Order-Logic Question": "Extinct(aurochs) ::: Aurochs are extinct."
    },
    "predicates": [
      "BreedingBack(x) ::: x is a form of artificial selection by deliberate selective breeding of domestic animals.",
      "BredBack(x, y) ::: x is bred-back to resemble y.",
      "Animal(x) ::: x is an animal.",
      "Resemble(x, y) ::: x resembles y.",
      "Extinct(x) ::: x is extinct."
    ]
  },
  {
    "id": 145,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Jerry is young.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) → Human(x)) ::: All students are humans.",
        "∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.",
        "∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.",
        "∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.",
        "¬Teaches(jerry) ∧ ¬Manager(jerry) ::: Jerry neither teaches nor is a manager.",
        "Young(rose) ∨ Student(rose) ::: Rose is young or a student."
      ],
      "First-Order-Logic Question": "Young(jerry) ::: Jerry is young."
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager."
    ]
  },
  {
    "id": 146,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Jerry is not young.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) → Human(x)) ::: All students are humans.",
        "∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.",
        "∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.",
        "∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.",
        "¬Teaches(jerry) ∧ ¬Manager(jerry) ::: Jerry neither teaches nor is a manager.",
        "Young(rose) ∨ Student(rose) ::: Rose is young or a student."
      ],
      "First-Order-Logic Question": "¬Young(jerry) ::: Jerry is not young."
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager."
    ]
  },
  {
    "id": 147,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Rose is a human or a manager.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) → Human(x)) ::: All students are humans.",
        "∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.",
        "∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.",
        "∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.",
        "¬Teaches(jerry) ∧ ¬Manager(jerry) ::: Jerry neither teaches nor is a manager.",
        "Young(rose) ∨ Student(rose) ::: Rose is young or a student."
      ],
      "First-Order-Logic Question": "Human(rose) ∨ Manager(rose) ::: Rose is a human or a manager."
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager."
    ]
  },
  {
    "id": 148,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "Rose is a human or Jerry is a manager.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) → Human(x)) ::: All students are humans.",
        "∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.",
        "∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.",
        "∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.",
        "¬Teaches(jerry) ∧ ¬Manager(jerry) ::: Jerry neither teaches nor is a manager.",
        "Young(rose) ∨ Student(rose) ::: Rose is young or a student."
      ],
      "First-Order-Logic Question": [
        "Human(rose) ∨ Manager(jerry) ::: Rose is a human or Jerry is a manager."
      ]
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager."
    ]
  },
  {
    "id": 149,
    "context": [
      "All students are humans. ",
      "If someone studies, then they are a student.",
      "A person either studys or teaches.",
      "No young person teaches.",
      "Jerry neither teaches nor is a manager.",
      "Rose is young or a student."
    ],
    "question": "It is not true that Rose is a student and Jerry is a human.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) → Human(x)) ::: All students are humans.",
        "∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.",
        "∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.",
        "∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.",
        "¬Teaches(jerry) ∧ ¬Manager(jerry) ::: Jerry neither teaches nor is a manager.",
        "Young(rose) ∨ Student(rose) ::: Rose is young or a student."
      ],
      "First-Order-Logic Question": "¬(Student(rose) ∧ Human(jerry)) ::: It is not true that Rose is a student and Jerry is a human."
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "Human(x) ::: x is a human.",
      "Studies(x) ::: x studies.",
      "Teaches(x) ::: x teaches.",
      "Young(x) ::: x is young.",
      "Manager(x) ::: x is a manager."
    ]
  },
  {
    "id": 150,
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Neapolitan Chronicles is an English book.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "PublishingHouse(newVesselPress) ∧ Specialize(newVesselPress, translatingForeignLiteratureIntoEnglish) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (Publish(newVesselPress, x) → English(x)) ::: All of New Vessel Press's published books are in English.\nBook(neapolitanChronicles) ∧ Publish(newVesselPress, neapolitanChronicles) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nTranslate(neapolitanChronicles, italian, english) ::: Neapolitan Chronicles was translated from Italian.\nBook(palaceOfFlies) ∧ Publish(newVesselPress, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.",
      "First-Order-Logic Question": "English(neapolitanChronicles) ::: Neapolitan Chronicles is an English book."
    },
    "predicates": [
      "PublishingHouse(x) ::: x is a publishing house.",
      "Specialize(x, y) ::: x specializes in y.",
      "Translate(x, y, z) ::: x translates y into z.",
      "PublishedIn(x, y) ::: x is published in language y.",
      "Book(x) ::: x is a book.",
      "Publish(x, y) ::: x is published by y.",
      "English(x) ::: x is in English.",
      "Italian(x) ::: x is in Italian."
    ]
  },
  {
    "id": 151,
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "PublishingHouse(newVesselPress) ∧ Specialize(newVesselPress, translatingForeignLiterature) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "∀x (Publish(x, newVesselPress) → Language(x, english)) ::: All of New Vessel Press's published books are in English.",
        "Book(neapolitanChronicles) ∧ Publish(neapolitanChronicles, newVesselPress) ::: Neapolitan Chronicles is a book published by New Vessel Press.",
        "Translate(neapolitanChronicles, italian, english) ::: Neapolitan Chronicles was translated from Italian.",
        "Book(palaceOfFlies) ∧ Publish(palaceOfFlies, newVesselPress) ::: Palace of Flies is a book published by New Vessel Press."
      ],
      "First-Order-Logic Question": [
        "Publish(harryPotter, newVesselPress) ::: Harry Potter was published by New Vessel Press."
      ]
    },
    "predicates": [
      "PublishingHouse(x) ::: x is a publishing house.",
      "Specialize(x, y) ::: x specializes in y.",
      "Translate(x, y, z) ::: x translates y into z.",
      "Book(x) ::: x is a book.",
      "Publish(x, y) ::: x is published by y.",
      "Language(x, y) ::: x is in language y."
    ]
  },
  {
    "id": 152,
    "context": [
      "New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
      "All of New Vessel Press's published books are in English.",
      "Neapolitan Chronicles is a book published by New Vessel Press.",
      "Neapolitan Chronicles was translated from Italian.",
      "Palace of Flies is a book published by New Vessel Press."
    ],
    "question": "Palace of Flies was translated from Italian.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "PublishingHouse(newVesselPress) ∧ Specialize(newVesselPress, translatingForeignLiteratureIntoEnglish) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.",
        "∀x (Publish(x, newVesselPress) → Language(x, english)) ::: All of New Vessel Press's published books are in English.",
        "Book(neapolitanChronicles) ∧ Publish(neapolitanChronicles, newVesselPress) ::: Neapolitan Chronicles is a book published by New Vessel Press.",
        "Translate(neapolitanChronicles, italian, english) ::: Neapolitan Chronicles was translated from Italian.",
        "Book(palaceOfFlies) ∧ Publish(palaceOfFlies, newVesselPress) ::: Palace of Flies is a book published by New Vessel Press."
      ],
      "First-Order-Logic Question": [
        "Translate(palaceOfFlies, italian, english) ::: Palace of Flies was translated from Italian."
      ]
    },
    "predicates": [
      "PublishingHouse(x) ::: x is a publishing house.",
      "Specialize(x, y) ::: x specializes in y.",
      "Translate(x, y, z) ::: x translates y into z.",
      "Book(x) ::: x is a book.",
      "Publish(x, y) ::: x is published by y.",
      "Language(x, y) ::: x is in language y."
    ]
  },
  {
    "id": 153,
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "Remy visits the office supply store regularly.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (OwnsLargeMonitor(x) → WorksAtHome(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (ImpressiveHomeOffice(x) → OwnsLargeMonitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksAtHome(x) → TidiesHome(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "∀x (WorksAtHome(x) → VisitsOfficeStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.",
        "∀x (TidiesHome(x) → ¬(GoesToBedLate(x) ∧ WakesUpAfterNoon(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(GoesToBedLate(remy) ∧ WakesUpAfterNoon(remy) ∧ TidiesHome(remy)) ⊕ ¬(GoesToBedLate(remy) ∨ WakesUpAfterNoon(remy) ∨ TidiesHome(remy)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "First-Order-Logic Question": [
        "VisitsOfficeStore(remy) ::: Remy visits the office supply store regularly."
      ]
    },
    "predicates": [
      "OwnsLargeMonitor(x) ::: x owns a large desktop monitor at their home.",
      "WorksAtHome(x) ::: x works regularly and often at home.",
      "ImpressiveHomeOffice(x) ::: x has a fully stocked and impressive home office.",
      "TidiesHome(x) ::: x spends their free time tidying and organizing the spaces in their home.",
      "VisitsOfficeStore(x) ::: x visits the office supply store regularly.",
      "GoesToBedLate(x) ::: x goes to bed late.",
      "WakesUpAfterNoon(x) ::: x wakes up every day after noon."
    ]
  },
  {
    "id": 154,
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (OwnsLargeMonitor(x) → WorksAtHome(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (HasImpressiveOffice(x) → OwnsLargeMonitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksAtHome(x) → TidiesHome(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "∀x (WorksAtHome(x) → VisitsOfficeStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.",
        "∀x (TidiesHome(x) → ¬(GoesToBedLate(x) ∧ WakesUpAfterNoon(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(GoesToBedLate(remy) ∧ WakesUpAfterNoon(remy) ∧ TidiesHome(remy)) ⊕ ¬(GoesToBedLate(remy) ∨ WakesUpAfterNoon(remy) ∨ TidiesHome(remy)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "First-Order-Logic Question": [
        "HasImpressiveOffice(remy) ∧ VisitsOfficeStore(remy) ::: Remy has a fully stocked and impressive home office and also visits the office supply store regularly."
      ]
    },
    "predicates": [
      "OwnsLargeMonitor(x) ::: x owns a large desktop monitor at their home.",
      "WorksAtHome(x) ::: x works regularly and often at home.",
      "HasImpressiveOffice(x) ::: x has a fully stocked and impressive home office.",
      "TidiesHome(x) ::: x spends their free time tidying and organizing the spaces in their home.",
      "VisitsOfficeStore(x) ::: x visits the office supply store regularly.",
      "GoesToBedLate(x) ::: x goes to bed late.",
      "WakesUpAfterNoon(x) ::: x wakes up every day after noon."
    ]
  },
  {
    "id": 155,
    "context": [
      "If people own a large desktop monitor at their home, then they work regularly and often at home.",
      "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
      "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
      "All people who work regularly and often at home visit the office supply store regularly.",
      "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ",
      "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "
    ],
    "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (OwnsLargeMonitor(x) → WorksAtHome(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (HasImpressiveOffice(x) → OwnsLargeMonitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorksAtHome(x) → TidiesHome(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "∀x (WorksAtHome(x) → VisitsSupplyStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.",
        "∀x (TidiesHome(x) → ¬(GoesToBedLate(x) ∧ WakesUpAfterNoon(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(GoesToBedLate(remy) ∧ WakesUpAfterNoon(remy) ∧ TidiesHome(remy)) ⊕ ¬(GoesToBedLate(remy) ∨ WakesUpAfterNoon(remy) ∨ TidiesHome(remy)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "First-Order-Logic Question": [
        "(GoesToBedLate(remy) ∧ WakesUpAfterNoon(remy)) ∨ VisitsSupplyStore(remy) → ¬(TidiesHome(remy) ∧ HasImpressiveOffice(remy)) ::: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office."
      ]
    },
    "predicates": [
      "OwnsLargeMonitor(x) ::: x owns a large desktop monitor at their home.",
      "WorksAtHome(x) ::: x works regularly and often at home.",
      "HasImpressiveOffice(x) ::: x has a fully stocked and impressive home office.",
      "TidiesHome(x) ::: x spends their free time tidying and organizing the spaces in their home.",
      "VisitsSupplyStore(x) ::: x visits the office supply store regularly.",
      "GoesToBedLate(x) ::: x goes to bed late.",
      "WakesUpAfterNoon(x) ::: x wakes up every day after noon."
    ]
  },
  {
    "id": 156,
    "context": [
      "All humans are mortal.",
      "All Greeks are humans."
    ],
    "question": "Some Greeks are mortal.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Human(x) → Mortal(x)) ::: All humans are mortal.\n∀x (Greek(x) → Human(x)) ::: All Greeks are humans.",
      "First-Order-Logic Question": "∃x (Greek(x) ∧ Mortal(x)) ::: Some Greeks are mortal."
    },
    "predicates": [
      "Human(x) ::: x is a human.",
      "Mortal(x) ::: x is mortal.",
      "Greek(x) ::: x is a Greek."
    ]
  },
  {
    "id": 157,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James has a part-time job offered by the university.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (WorkLibrary(x) → ¬CSDept(x)) ::: No students who work in the library are from the computer science department.",
        "∀x (PartTimeJob(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.",
        "∀x (TakeCourse(x, database) → CSDept(x)) ::: All students who take the database course are from the computer science department.",
        "∀x (InstructedBy(x, professorDavid) → TakeCourse(x, database)) ::: All students instructed by professor David are taking the database course.",
        "∀x (WorkLab(x) → InstructedBy(x, professorDavid)) ::: All students working in the lab are instructed by professor David.",
        "Student(james) ∧ WorkLab(james) ::: James is a student working in the lab.",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
      ],
      "First-Order-Logic Question": "PartTimeJob(james) ::: James has a part-time job offered by the university."
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "WorkLibrary(x) ::: x works in the library.",
      "CSDept(x) ::: x is from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "TakeCourse(x, y) ::: x takes the course y.",
      "InstructedBy(x, y) ::: x is instructed by y.",
      "WorkLab(x) ::: x works in the lab.",
      "ProfessorDavid(y) ::: y is professor David."
    ]
  },
  {
    "id": 158,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James does not have a part-time job offered by the university.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x)) ::: No students who work in the library are from the computer science department.",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.",
        "∀x (Student(x) ∧ TakeCourse(x, databaseCourse) → CSDept(x)) ::: All students who take the database course are from the computer science department.",
        "∀x (Student(x) ∧ InstructedBy(x, professorDavid) → TakeCourse(x, databaseCourse)) ::: All students instructed by professor David are taking the database course.",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedBy(x, professorDavid)) ::: All students working in the lab are instructed by professor David.",
        "Student(james) ∧ WorkLab(james) ::: James is a student working in the lab.",
        "Student(jack) ∧ ¬PartTimeJob(jack) ∧ ¬WorkLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
      ],
      "First-Order-Logic Question": [
        "¬PartTimeJob(james) ::: James does not have a part-time job offered by the university."
      ]
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "WorkLibrary(x) ::: x works in the library.",
      "CSDept(x) ::: x is from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "TakeCourse(x, y) ::: x takes the course y.",
      "DatabaseCourse(y) ::: y is the database course.",
      "InstructedBy(x, y) ::: x is instructed by y.",
      "ProfessorDavid(y) ::: y is professor David.",
      "WorkLab(x) ::: x works in the lab.",
      "James(x) ::: x is James.",
      "Jack(x) ::: x is Jack."
    ]
  },
  {
    "id": 159,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (WorkLibrary(x) ∧ Student(x) → ¬FromCSDept(x)) ::: No students who work in the library are from the computer science department.",
        "∀x (PartTimeJob(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.",
        "∀x (TakeCourse(x, databaseCourse) → FromCSDept(x)) ::: All students who take the database course are from the computer science department.",
        "∀x (InstructedBy(x, professorDavid) → TakeCourse(x, databaseCourse)) ::: All students instructed by professor David are taking the database course.",
        "∀x (WorkLab(x) → InstructedBy(x, professorDavid)) ::: All students working in the lab are instructed by professor David.",
        "Student(james) ∧ WorkLab(james) ::: James is a student working in the lab.",
        "¬PartTimeJob(jack) ∧ ¬WorkLab(jack) ::: Jack neither has a part-time job offered by the university nor works in the lab."
      ],
      "First-Order-Logic Question": "TakeCourse(james, databaseCourse) ⊕ PartTimeJob(james) ::: James either takes the database course or has a part-time job offered by the university."
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "WorkLibrary(x) ::: x works in the library.",
      "FromCSDept(x) ::: x is from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "TakeCourse(x, y) ::: x takes the course y.",
      "DatabaseCourse(y) ::: y is the database course.",
      "InstructedBy(x, y) ::: x is instructed by y.",
      "ProfessorDavid(y) ::: y is professor David.",
      "WorkLab(x) ::: x works in the lab."
    ]
  },
  {
    "id": 160,
    "context": [
      "No students who work in the library are from the computer science department. ",
      "All students who have part-time jobs offered by the university are students who work in the library. ",
      "All students who take the database course are from the computer science department. ",
      "All students instructed by professor David are taking the database course. ",
      "All students working in the lab are instructed by professor David. ",
      "James is a student working in the lab. ",
      "Jack neither has a part-time job offered by the university nor works in the lab. "
    ],
    "question": "Jack takes the database course.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) ∧ WorkLibrary(x) → ¬CSDept(x)) ::: No students who work in the library are from the computer science department.",
        "∀x (Student(x) ∧ PartTimeJob(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.",
        "∀x (Student(x) ∧ TakeCourse(x, database) → CSDept(x)) ::: All students who take the database course are from the computer science department.",
        "∀x (Student(x) ∧ InstructedBy(x, professorDavid) → TakeCourse(x, database)) ::: All students instructed by professor David are taking the database course.",
        "∀x (Student(x) ∧ WorkLab(x) → InstructedBy(x, professorDavid)) ::: All students working in the lab are instructed by professor David.",
        "Student(james) ∧ WorkLab(james) ::: James is a student working in the lab.",
        "¬(PartTimeJob(jack) ∨ WorkLab(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab."
      ],
      "First-Order-Logic Question": [
        "TakeCourse(jack, database) ::: Jack takes the database course."
      ]
    },
    "predicates": [
      "Student(x) ::: x is a student.",
      "WorkLibrary(x) ::: x works in the library.",
      "CSDept(x) ::: x is from the computer science department.",
      "PartTimeJob(x) ::: x has a part-time job offered by the university.",
      "TakeCourse(x, y) ::: x takes course y.",
      "InstructedBy(x, y) ::: x is instructed by y.",
      "WorkLab(x) ::: x works in the lab.",
      "ProfessorDavid(y) ::: y is professor David.",
      "James(x) ::: x is James.",
      "Jack(x) ::: x is Jack."
    ]
  },
  {
    "id": 161,
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Likes(george, music) → WantsToCompose(george) ::: If George likes music, he wants to compose.",
        "HasAccess(george, program) → CanCompose(george) ::: If George has access to a program, he can compose.",
        "(CanCompose(george) ∧ WantsToCompose(george)) → WillCompose(george) ::: If George can compose and wants to compose, he will compose."
      ],
      "First-Order-Logic Question": [
        "(Likes(george, music) ∧ HasAccess(george, program)) → WillCompose(george) ::: If George likes music and has access to a program, he will compose."
      ]
    },
    "predicates": [
      "Likes(x, y) ::: x likes y.",
      "WantsToCompose(x) ::: x wants to compose.",
      "HasAccess(x, y) ::: x has access to y.",
      "CanCompose(x) ::: x can compose.",
      "WillCompose(x) ::: x will compose."
    ]
  },
  {
    "id": 162,
    "context": [
      "If George likes music, he wants to compose.",
      "If George has access to a program, he can compose.",
      "If George can compose and wants to compose, he will compose."
    ],
    "question": "If George will not compose, George can not compose.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Likes(george, music) → WantsToCompose(george) ::: If George likes music, he wants to compose.",
        "HasAccessToProgram(george) → CanCompose(george) ::: If George has access to a program, he can compose.",
        "(CanCompose(george) ∧ WantsToCompose(george)) → WillCompose(george) ::: If George can compose and wants to compose, he will compose."
      ],
      "First-Order-Logic Question": [
        "¬WillCompose(george) → ¬CanCompose(george) ::: If George will not compose, George can not compose."
      ]
    },
    "predicates": [
      "Likes(x, y) ::: x likes y.",
      "WantsToCompose(x) ::: x wants to compose.",
      "HasAccessToProgram(x) ::: x has access to a program.",
      "CanCompose(x) ::: x can compose.",
      "WillCompose(x) ::: x will compose."
    ]
  },
  {
    "id": 163,
    "context": [
      "A hawk never lands. ",
      "Some birds are hawks."
    ],
    "question": "All birds land",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Hawk(x) → ¬Lands(x)) ::: A hawk never lands.\n∃x (Bird(x) ∧ Hawk(x)) ::: Some birds are hawks.",
      "First-Order-Logic Question": "∀x (Bird(x) → Lands(x)) ::: All birds land."
    },
    "predicates": [
      "Hawk(x) ::: x is a hawk.",
      "Bird(x) ::: x is a bird.",
      "Lands(x) ::: x lands."
    ]
  },
  {
    "id": 164,
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (Monday8pm(x) ∧ Rose(x) ∧ GivenOutOnTV(x)) ::: On some Mondays at 8 pm, roses are given out on TV.",
        "∀x (GivenOutOnTV(x) → OnBachelor(x)) ::: Every rose given out on TV is on the Bachelor.",
        "∀x (OnBachelor(x) → PortraysRealLives(x)) ::: Everything on the Bachelor portrays the lives of real people.",
        "∀x (PortraysRealLives(x) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.",
        "¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show."
      ],
      "First-Order-Logic Question": "Monday8pm(breakingBad) ::: Breaking Bad is on Monday at 8 pm."
    },
    "predicates": [
      "Monday8pm(x) ::: x is on Monday at 8 pm.",
      "Rose(x) ::: x is a rose.",
      "GivenOutOnTV(x) ::: x is given out on TV.",
      "OnBachelor(x) ::: x is on the Bachelor.",
      "PortraysRealLives(x) ::: x portrays the lives of real people.",
      "RealityTVShow(x) ::: x is a reality TV show.",
      "BreakingBad(x) ::: x is Breaking Bad."
    ]
  },
  {
    "id": 165,
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (Monday8pm(x) ∧ Rose(x) ∧ GivenOut(x) ∧ OnTV(x)) ::: On some Mondays at 8 pm, roses are given out on TV.",
        "∀x (Rose(x) ∧ GivenOut(x) ∧ OnTV(x) → Bachelor(x)) ::: Every rose given out on TV is on the Bachelor.",
        "∀x (Bachelor(x) → ∃y (Portray(x, y) ∧ RealPeople(y))) ::: Everything on the Bachelor portrays the lives of real people.",
        "∀x (∃y (Portray(x, y) ∧ RealPeople(y)) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.",
        "¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show."
      ],
      "First-Order-Logic Question": [
        "TVShow(breakingBad) ∧ ∃x (Monday8pm(x) ∧ Rose(x) ∧ GivenOut(x) ∧ OnTV(x) ∧ BreakingBad(x)) ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm."
      ]
    },
    "predicates": [
      "Monday8pm(x) ::: x occurs on Monday at 8 pm.",
      "GivenOut(x) ::: x is given out.",
      "OnTV(x) ::: x is on TV.",
      "Rose(x) ::: x is a rose.",
      "Bachelor(x) ::: x is on the Bachelor.",
      "Portray(x, y) ::: x portrays the lives of y.",
      "RealPeople(x) ::: x is real people.",
      "RealityTVShow(x) ::: x is a reality TV show.",
      "TVShow(x) ::: x is a TV show.",
      "BreakingBad(x) ::: x is Breaking Bad."
    ]
  },
  {
    "id": 166,
    "context": [
      "On some Mondays at 8 pm, roses are given out on TV.",
      "Every rose given out on TV is on the Bachelor.",
      "Everything on the Bachelor portrays the lives of real people.",
      "All shows portraying the lives of real people are reality TV shows.",
      "Breaking Bad is not a reality TV show."
    ],
    "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (Monday8pm(x) ∧ Rose(x) ∧ GivenOut(x) ∧ OnTV(x)) ::: On some Mondays at 8 pm, roses are given out on TV.",
        "∀x (Rose(x) ∧ GivenOut(x) ∧ OnTV(x) → Bachelor(x)) ::: Every rose given out on TV is on the Bachelor.",
        "∀x (Bachelor(x) → PortraysRealLives(x)) ::: Everything on the Bachelor portrays the lives of real people.",
        "∀x (PortraysRealLives(x) → RealityTV(x)) ::: All shows portraying the lives of real people are reality TV shows.",
        "¬RealityTV(breakingBad) ::: Breaking Bad is not a reality TV show."
      ],
      "First-Order-Logic Question": "∀x (Rose(x) ∧ GivenOut(x) ∧ OnTV(x) ∧ BreakingBad(x) → Monday8pm(x)) ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm."
    },
    "predicates": [
      "Monday8pm(x) ::: x occurs on Monday at 8 pm.",
      "GivenOut(x) ::: x is given out.",
      "OnTV(x) ::: x is on TV.",
      "Rose(x) ::: x is a rose.",
      "Bachelor(x) ::: x is on the Bachelor.",
      "PortraysRealLives(x) ::: x portrays the lives of real people.",
      "RealityTV(x) ::: x is a reality TV show.",
      "BreakingBad(x) ::: x is Breaking Bad."
    ]
  },
  {
    "id": 167,
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Heinrich Schmidt was either German or Russian.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Nazi(heinrich) ∧ German(heinrich) ∧ Politician(heinrich) ::: Heinrich Schmidt was a Nazi German politician.\nMemberOf(heinrich, prussianStateParliament) ∧ MemberOf(heinrich, naziReichstag) ∧ Parliament(prussianStateParliament) ∧ Parliament(naziReichstag) ::: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
      "First-Order-Logic Question": "German(heinrich) ⊕ Russian(heinrich) ::: Heinrich Schmidt was either German or Russian."
    },
    "predicates": [
      "Nazi(x) ::: x is a Nazi.",
      "German(x) ::: x is a German person.",
      "Politician(x) ::: x is a politician.",
      "MemberOf(x, y) ::: x is a member of y.",
      "Parliament(y) ::: y is a parliament.",
      "Russian(x) ::: x is a Russian person."
    ]
  },
  {
    "id": 168,
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "NaziPolitician(heinrich) ∧ Member(heinrich, prussianParliament) ∧ Member(heinrich, naziReichstag) ::: Heinrich Schmidt was a Nazi German politician. Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
      "First-Order-Logic Question": "∃x (NaziPolitician(x) ∧ Member(x, prussianParliament) ∧ Member(x, naziReichstag)) ::: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag."
    },
    "predicates": [
      "NaziPolitician(x) ::: x is a Nazi German politician.",
      "Member(x, y) ::: x is a member of y.",
      "PrussianParliament(y) ::: y is the Prussian State Parliament.",
      "NaziReichstag(y) ::: y is the Nazi Reichstag."
    ]
  },
  {
    "id": 169,
    "context": [
      "Heinrich Scmidt was a Nazi German politician. ",
      "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
    ],
    "question": "No politicans are part of the Nazi Reichstag.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "NaziGerman(heinrich) ∧ Politician(heinrich) ::: Heinrich Schmidt was a Nazi German politician.\nMember(heinrich, prussianStateParliament) ∧ Parliament(prussianStateParliament) ∧ Member(heinrich, naziReichstag) ∧ Reichstag(naziReichstag) ::: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
      "First-Order-Logic Question": "∀x (Politician(x) → ¬Reichstag(x)) ::: No politicians are part of the Nazi Reichstag."
    },
    "predicates": [
      "NaziGerman(x) ::: x is a Nazi German.",
      "Politician(x) ::: x is a politician.",
      "Member(x, y) ::: x is a member of y.",
      "Parliament(x) ::: x is a parliament.",
      "Reichstag(x) ::: x is part of the Nazi Reichstag."
    ]
  },
  {
    "id": 170,
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "Colorectal cancer is a severe cancer",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\nSevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n∀x (MildFlu(x) → ¬LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n∀x ((ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x)) → ¬BileDuctCancer(x)) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
      "First-Order-Logic Question": "SevereCancer(colorectalCancer) ::: Colorectal cancer is a severe cancer."
    },
    "predicates": [
      "DeadlyDisease(x) ::: x is a deadly disease.",
      "LowSurvivalRate(x) ::: x has a low survival rate.",
      "SevereCancer(x) ::: x is a severe cancer.",
      "BileDuctCancer(x) ::: x is bile duct cancer.",
      "Cholangiocarcinoma(x) ::: x is cholangiocarcinoma.",
      "MildFlu(x) ::: x is mild flu.",
      "ColorectalCancer(x) ::: x is colorectal cancer."
    ]
  },
  {
    "id": 172,
    "context": [
      "If something is a deadly disease, then its survival rate is low. ",
      "All severe cancers are deadly diseases.",
      "Bile duct cancer is a severe cancer. ",
      "All Cholangiocarcinoma is bile duct cancer.",
      "No one with mild flu has a low survival rate.",
      "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
    ],
    "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.",
        "∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.",
        "SevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.",
        "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.",
        "∀x (MildFlu(x) → ¬LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.",
        "(BileDuctCancer(colorectalCancer) ∧ LowSurvivalRate(colorectalCancer)) → ¬BileDuctCancer(colorectalCancer) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."
      ],
      "First-Order-Logic Question": [
        "¬MildFlu(colorectalCancer) ∧ Cholangiocarcinoma(colorectalCancer) → (BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ::: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."
      ]
    },
    "predicates": [
      "DeadlyDisease(x) ::: x is a deadly disease.",
      "LowSurvivalRate(x) ::: x has a low survival rate.",
      "SevereCancer(x) ::: x is a severe cancer.",
      "BileDuctCancer(x) ::: x is a bile duct cancer.",
      "Cholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.",
      "MildFlu(x) ::: x is a mild flu.",
      "ColorectalCancer(x) ::: x is a colorectal cancer."
    ]
  },
  {
    "id": 173,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor eats salads regularly.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (EatSaladRegularly(x) → HealthConscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.",
        "∀x (GrewUpHealthConsciousHome(x) → EatSaladRegularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.",
        "∀x (FulfillNutritionalIntake(x) → GrewUpHealthConsciousHome(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "∀x (GoodRelationshipParents(x) → FulfillNutritionalIntake(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "∀x (GoodRelationshipParents(x) → ¬EatSaladRegularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.",
        "∀x (VisitGymDaily(x) → FulfillNutritionalIntake(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "(GrewUpHealthConsciousHome(taylor) ∧ GoodRelationshipParents(taylor)) ⊕ ¬(GrewUpHealthConsciousHome(taylor) ∨ GoodRelationshipParents(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "First-Order-Logic Question": [
        "EatSaladRegularly(taylor) ::: Taylor eats salads regularly."
      ]
    },
    "predicates": [
      "EatSaladRegularly(x) ::: x eats salads regularly.",
      "HealthConscious(x) ::: x is very conscious about their health and eating habits.",
      "GrewUpHealthConsciousHome(x) ::: x grew up in a health-conscious childhood home.",
      "FulfillNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.",
      "GoodRelationshipParents(x) ::: x has a good relationship with their parents.",
      "VisitGymDaily(x) ::: x visits the gym at least once a day.",
      "Taylor ::: Taylor is a specific individual."
    ]
  },
  {
    "id": 174,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor visits the gym at least once a day.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (EatsSaladRegularly(x) → HealthConscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.",
        "∀x (GrewUpHealthConsciousHome(x) → EatsSaladRegularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.",
        "∀x (FulfillsNutritionalIntake(x) → GrewUpHealthConsciousHome(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "∀x (GoodRelationshipParents(x) → FulfillsNutritionalIntake(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "∀x (GoodRelationshipParents(x) → ¬EatsSaladRegularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.",
        "∀x (VisitsGymDaily(x) → FulfillsNutritionalIntake(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "(GrewUpHealthConsciousHome(taylor) ∧ GoodRelationshipParents(taylor)) ⊕ ¬(GrewUpHealthConsciousHome(taylor) ∨ GoodRelationshipParents(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "First-Order-Logic Question": [
        "VisitsGymDaily(taylor) ::: Taylor visits the gym at least once a day."
      ]
    },
    "predicates": [
      "EatsSaladRegularly(x) ::: x eats salads regularly.",
      "HealthConscious(x) ::: x is very conscious about their health and eating habits.",
      "GrewUpHealthConsciousHome(x) ::: x grew up in a health-conscious childhood home.",
      "FulfillsNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.",
      "GoodRelationshipParents(x) ::: x has a good relationship with their parents.",
      "VisitsGymDaily(x) ::: x visits the gym at least once a day.",
      "Taylor ::: Taylor is a specific individual."
    ]
  },
  {
    "id": 175,
    "context": [
      "All people who eat salads regularly are very conscious about their health and eating habits.",
      "All people who grew up in health-conscious childhood homes eat salads regularly.",
      "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
      "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
      "If people have good relationships with their parents, then they do not eat salads regularly.",
      "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
      "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
    ],
    "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (EatSaladRegularly(x) → HealthConscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.",
        "∀x (GrewUpHealthConsciousHome(x) → EatSaladRegularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.",
        "∀x (FulfillNutritionalIntake(x) → GrewUpHealthConsciousHome(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.",
        "∀x (GoodRelationshipParents(x) → FulfillNutritionalIntake(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.",
        "∀x (GoodRelationshipParents(x) → ¬EatSaladRegularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.",
        "∀x (VisitGymDaily(x) → FulfillNutritionalIntake(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
        "(GrewUpHealthConsciousHome(taylor) ∧ GoodRelationshipParents(taylor)) ⊕ ¬(GrewUpHealthConsciousHome(taylor) ∨ GoodRelationshipParents(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."
      ],
      "First-Order-Logic Question": [
        "¬GrewUpHealthConsciousHome(taylor) ∧ ¬VisitGymDaily(taylor) ::: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."
      ]
    },
    "predicates": [
      "EatSaladRegularly(x) ::: x eats salads regularly.",
      "HealthConscious(x) ::: x is very conscious about their health and eating habits.",
      "GrewUpHealthConsciousHome(x) ::: x grew up in a health-conscious childhood home.",
      "FulfillNutritionalIntake(x) ::: x fulfills their nutritional daily intakes.",
      "GoodRelationshipParents(x) ::: x has a good relationship with their parents.",
      "VisitGymDaily(x) ::: x visits the gym at least once a day."
    ]
  },
  {
    "id": 176,
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The world championships is a sporting event.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (OlympicGames(x) → SportingEvent(x)) ::: The Olympic games is a sporting event.\n∃x (LastOlympicGames(x) ∧ In(x, tokyo)) ::: The last Olympic games was in Tokyo.\n∃x (WonMostMedals(usa, tokyo)) ::: The United States won the most medals in Tokyo.",
      "First-Order-Logic Question": "WorldChampionships(y) → SportingEvent(y) ::: The world championships is a sporting event."
    },
    "predicates": [
      "OlympicGames(x) ::: x is the Olympic games.",
      "SportingEvent(x) ::: x is a sporting event.",
      "LastOlympicGames(x) ::: x is the last Olympic games.",
      "In(x, y) ::: x is in y.",
      "WonMostMedals(x, y) ::: x won the most medals in y.",
      "WorldChampionships(x) ::: x is the world championships."
    ]
  },
  {
    "id": 177,
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The last Olympic games were not in Tokyo.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (OlympicGames(x) → SportingEvent(x)) ::: The Olympic games is a sporting event.\nLastOlympicGames(tokyoOlympics) ∧ In(tokyoOlympics, tokyo) ::: The last Olympic games was in Tokyo.\n∃x (UnitedStates(x) ∧ WonMostMedals(x, tokyoOlympics)) ::: The United States won the most medals in Tokyo.",
      "First-Order-Logic Question": "¬In(tokyoOlympics, tokyo) ::: The last Olympic games were not in Tokyo."
    },
    "predicates": [
      "OlympicGames(x) ::: x is an Olympic games event.",
      "SportingEvent(x) ::: x is a sporting event.",
      "LastOlympicGames(x) ::: x is the last Olympic games event.",
      "In(x, y) ::: x is in y.",
      "WonMostMedals(x, y) ::: x won the most medals in y.",
      "UnitedStates(x) ::: x is the United States."
    ]
  },
  {
    "id": 178,
    "context": [
      "[BG] The Olympic games is a sporting event. ",
      "The last Olympic games was in Tokyo.",
      "The United States won the most medals in Tokyo. "
    ],
    "question": "The United States won the most medals in the last Olympic games.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (OlympicGames(x) → SportingEvent(x)) ::: The Olympic games is a sporting event.\nLastOlympicGames(tokyo) ∧ In(lastOlympicGames, tokyo) ::: The last Olympic games was in Tokyo.\nCountry(usa) ∧ UnitedStates(usa) ∧ WonMostMedals(usa, tokyo) ::: The United States won the most medals in Tokyo.",
      "First-Order-Logic Question": "WonMostMedals(usa, lastOlympicGames) ::: The United States won the most medals in the last Olympic games."
    },
    "predicates": [
      "OlympicGames(x) ::: x is an Olympic games event.",
      "SportingEvent(x) ::: x is a sporting event.",
      "LastOlympicGames(x) ::: x is the last Olympic games.",
      "In(x, y) ::: x is in y.",
      "WonMostMedals(x, y) ::: x won the most medals in y.",
      "Country(x) ::: x is a country.",
      "UnitedStates(x) ::: x is the United States."
    ]
  },
  {
    "id": 179,
    "context": [
      "All horses have hooves.",
      "No humans have hooves."
    ],
    "question": "Some humans are horses.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Horse(x) → Hooves(x)) ::: All horses have hooves.",
        "∀x (Human(x) → ¬Hooves(x)) ::: No humans have hooves."
      ],
      "First-Order-Logic Question": [
        "∃x (Human(x) ∧ Horse(x)) ::: Some humans are horses."
      ]
    },
    "predicates": [
      "Horse(x) ::: x is a horse.",
      "Hooves(x) ::: x has hooves.",
      "Human(x) ::: x is a human."
    ]
  },
  {
    "id": 180,
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be the same airport.",
      "John flies from LGA airport."
    ],
    "question": "Susan flies from LGA airport.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "FlyTo(susan, lga) ::: Susan flies to LGA airport.\n∀x ∀y (FlyFrom(x, y) ∧ FlyTo(x, y) → ¬SameAirport(y, y)) ::: The departure and arrival can not be the same airport.\nFlyFrom(john, lga) ::: John flies from LGA airport.",
      "First-Order-Logic Question": "FlyFrom(susan, lga) ::: Susan flies from LGA airport."
    },
    "predicates": [
      "FlyTo(x, y) ::: x flies to airport y.",
      "FlyFrom(x, y) ::: x flies from airport y.",
      "SameAirport(x, y) ::: x and y are the same airport."
    ]
  },
  {
    "id": 181,
    "context": [
      "Susan flies to LGA airport.",
      "The departure and arrival can not be the same airport.",
      "John flies from LGA airport."
    ],
    "question": "John flies to LGA airport.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "FlyTo(susan, lga) ::: Susan flies to LGA airport.\n∀x ∀y (FlyFrom(x, y) ∧ FlyTo(x, y) → ¬SameAirport(y, y)) ::: The departure and arrival can not be the same airport.\nFlyFrom(john, lga) ::: John flies from LGA airport.",
      "First-Order-Logic Question": "FlyTo(john, lga) ::: John flies to LGA airport."
    },
    "predicates": [
      "FlyTo(x, y) ::: x flies to airport y.",
      "FlyFrom(x, y) ::: x flies from airport y.",
      "SameAirport(x, y) ::: x and y are the same airport."
    ]
  },
  {
    "id": 182,
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is a grumpy person.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is mean to animals.",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.",
        "∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.",
        "∀x (OwnsPet(x) → LovesAnimals(x)) ::: If someone owns a pet, then they love animals.",
        "OwnsPet(tom) ::: Tom is a pet owner."
      ],
      "First-Order-Logic Question": [
        "Grumpy(tom) ::: Tom is a grumpy person."
      ]
    },
    "predicates": [
      "NiceToAnimals(x) ::: x is nice to animals.",
      "MeanToAnimals(x) ::: x is mean to animals.",
      "Grumpy(x) ::: x is a grumpy person.",
      "AnimalLover(x) ::: x is an animal lover.",
      "OwnsPet(x) ::: x owns a pet.",
      "LovesAnimals(x) ::: x loves animals.",
      "Tom ::: Tom."
    ]
  },
  {
    "id": 183,
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "Tom is not a grumpy person and mean to animals.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is mean to animals.",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.",
        "∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.",
        "∀x (OwnsPet(x) → LovesAnimals(x)) ::: If someone owns a pet, then they love animals.",
        "OwnsPet(tom) ::: Tom is a pet owner."
      ],
      "First-Order-Logic Question": [
        "¬(Grumpy(tom) ∧ MeanToAnimals(tom)) ::: Tom is not a grumpy person and mean to animals."
      ]
    },
    "predicates": [
      "NiceToAnimals(x) ::: x is nice to animals.",
      "MeanToAnimals(x) ::: x is mean to animals.",
      "Grumpy(x) ::: x is a grumpy person.",
      "AnimalLover(x) ::: x is an animal lover.",
      "OwnsPet(x) ::: x owns a pet.",
      "LovesAnimals(x) ::: x loves animals.",
      "Tom ::: Tom is a specific individual."
    ]
  },
  {
    "id": 184,
    "context": [
      "No one nice to animals is mean to animals.",
      "Some grumpy people are mean to animals.",
      "All animal lovers are nice to animals.",
      "If someone owns a pet, then they love animals.",
      "Tom is a pet owner."
    ],
    "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is mean to animals.",
        "∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.",
        "∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.",
        "∀x (OwnsPet(x) → LovesAnimals(x)) ::: If someone owns a pet, then they love animals.",
        "OwnsPet(tom) ::: Tom is a pet owner."
      ],
      "First-Order-Logic Question": "¬(Grumpy(tom) ∧ MeanToAnimals(tom)) → ¬Grumpy(tom) ∧ ¬AnimalLover(tom) ::: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover."
    },
    "predicates": [
      "NiceToAnimals(x) ::: x is nice to animals.",
      "MeanToAnimals(x) ::: x is mean to animals.",
      "Grumpy(x) ::: x is a grumpy person.",
      "AnimalLover(x) ::: x is an animal lover.",
      "OwnsPet(x) ::: x owns a pet.",
      "LovesAnimals(x) ::: x loves animals.",
      "PetOwner(x) ::: x is a pet owner."
    ]
  },
  {
    "id": 185,
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Dani Shapiro is a novel writer.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "¬∃x (Podcast(x) ∧ Novel(x)) ::: A podcast is not a novel.",
        "∀x ∀y (BornIn(x, y) ∧ AmericanCity(y) → American(x)) ::: If a person is born in an American city, the person is American.",
        "∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.",
        "American(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.",
        "WrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.",
        "Novel(familyHistory) ∧ WrittenBy(familyHistory, daniShapiro) ∧ Publish(familyHistory, year2003) ::: Family History is a novel written in 2003.",
        "Podcast(familySecrets) ∧ CreatedBy(familySecrets, daniShapiro) ::: Dani Shapiro created a podcast called Family Secrets.",
        "AmericanCity(boston) ::: Boston is an American city."
      ],
      "First-Order-Logic Question": [
        "NovelWriter(daniShapiro) ::: Dani Shapiro is a novel writer."
      ]
    },
    "predicates": [
      "Podcast(x) ::: x is a podcast.",
      "Novel(x) ::: x is a novel.",
      "BornIn(x, y) ::: x is born in y.",
      "American(x) ::: x is an American.",
      "Book(x) ::: x is a book.",
      "WrittenBy(x, y) ::: x is written by y.",
      "NovelWriter(x) ::: x is a novel writer.",
      "Writer(x) ::: x is a writer.",
      "CreatedBy(x, y) ::: x is created by y.",
      "AmericanCity(x) ::: x is an American city."
    ]
  },
  {
    "id": 186,
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Family Secrets is a novel.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "¬(Podcast(x) ∧ Novel(x)) ::: A podcast is not a novel.",
        "∀x ∀y (BornIn(x, y) ∧ AmericanCity(y) → American(x)) ::: If a person is born in an American city, the person is American.",
        "∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.",
        "American(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.",
        "WrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.",
        "Novel(familyHistory) ∧ PublishedIn(familyHistory, year2003) ::: Family History is a novel written in 2003.",
        "Podcast(familySecrets) ∧ CreatedBy(familySecrets, daniShapiro) ::: Dani Shapiro created a podcast called Family Secrets.",
        "AmericanCity(boston) ::: Boston is an American city."
      ],
      "First-Order-Logic Question": [
        "Novel(familySecrets) ::: Family Secrets is a novel."
      ]
    },
    "predicates": [
      "Podcast(x) ::: x is a podcast.",
      "Novel(x) ::: x is a novel.",
      "BornIn(x, y) ::: x is born in y.",
      "American(x) ::: x is an American.",
      "Book(x) ::: x is a book.",
      "WrittenBy(x, y) ::: x is written by y.",
      "NovelWriter(x) ::: x is a novel writer.",
      "Writer(x) ::: x is a writer.",
      "CreatedBy(x, y) ::: x is created by y.",
      "AmericanCity(x) ::: x is an American city.",
      "PublishedIn(x, y) ::: x is published in year y."
    ]
  },
  {
    "id": 187,
    "context": [
      "A podcast is not a novel.",
      "[BG] If a person is born in American City, the person is American.",
      "[BG] If a book is novel and it is written by a person, then the person is a novel writer.",
      "Dani Shapiro is an American writer.",
      "Family History is written by Dani Shapiro.",
      "Family History is a novel written in 2003.",
      "Dani Shapiro created a podcast called Family Secrets.",
      "[BG] Boston is an American city."
    ],
    "question": "Dani Shapiro was born in Boston.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "¬(Podcast(x) ∧ Novel(x)) ::: A podcast is not a novel.",
        "∀x ∀y (BornIn(x, y) ∧ AmericanCity(y) → American(x)) ::: If a person is born in an American city, the person is American.",
        "∀x ∀y (Novel(x) ∧ WrittenBy(x, y) → NovelWriter(y)) ::: If a book is a novel and it is written by a person, then the person is a novel writer.",
        "American(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.",
        "WrittenBy(familyHistory, daniShapiro) ::: Family History is written by Dani Shapiro.",
        "Novel(familyHistory) ∧ WrittenBy(familyHistory, daniShapiro) ∧ Publish(familyHistory, year2003) ::: Family History is a novel written in 2003.",
        "Podcast(familySecrets) ∧ Created(daniShapiro, familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.",
        "AmericanCity(boston) ::: Boston is an American city."
      ],
      "First-Order-Logic Question": [
        "BornIn(daniShapiro, boston) ::: Dani Shapiro was born in Boston."
      ]
    },
    "predicates": [
      "Podcast(x) ::: x is a podcast.",
      "Novel(x) ::: x is a novel.",
      "BornIn(x, y) ::: x is born in y.",
      "American(x) ::: x is an American.",
      "Book(x) ::: x is a book.",
      "WrittenBy(x, y) ::: x is written by y.",
      "NovelWriter(x) ::: x is a novel writer.",
      "Writer(x) ::: x is a writer.",
      "Created(x, y) ::: x created y.",
      "AmericanCity(x) ::: x is an American city."
    ]
  },
  {
    "id": 188,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is an American.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.",
        "∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.",
        "∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.",
        "∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.",
        "¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes."
      ],
      "First-Order-Logic Question": [
        "American(yuri) ::: Yuri is an American."
      ]
    },
    "predicates": [
      "BasketballPlayer(x) ::: x is a basketball player.",
      "American(x) ::: x is an American.",
      "Tall(x) ::: x is tall.",
      "LargeShoes(x) ::: x wears large shoes.",
      "LargeClothes(x) ::: x wears large-sized clothes.",
      "Yuri(x) ::: x is Yuri."
    ]
  },
  {
    "id": 189,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is not an American basketball player.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.",
        "∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.",
        "∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.",
        "∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.",
        "¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes."
      ],
      "First-Order-Logic Question": [
        "¬(BasketballPlayer(yuri) ∧ American(yuri)) ::: Yuri is not an American basketball player."
      ]
    },
    "predicates": [
      "BasketballPlayer(x) ::: x is a basketball player.",
      "American(x) ::: x is an American.",
      "Tall(x) ::: x is tall.",
      "LargeShoes(x) ::: x wears large shoes.",
      "LargeClothes(x) ::: x wears large-sized clothes.",
      "Yuri(x) ::: x is Yuri."
    ]
  },
  {
    "id": 190,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "Yuri is an American basketball player.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.",
        "∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.",
        "∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.",
        "∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.",
        "¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes."
      ],
      "First-Order-Logic Question": [
        "American(yuri) ∧ BasketballPlayer(yuri) ::: Yuri is an American basketball player."
      ]
    },
    "predicates": [
      "BasketballPlayer(x) ::: x is a basketball player.",
      "American(x) ::: x is an American.",
      "Tall(x) ::: x is tall.",
      "LargeShoes(x) ::: x wears large shoes.",
      "LargeClothes(x) ::: x wears large-sized clothes.",
      "Yuri(x) ::: x is Yuri."
    ]
  },
  {
    "id": 191,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.",
        "∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.",
        "∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.",
        "∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.",
        "¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes."
      ],
      "First-Order-Logic Question": [
        "¬LargeShoes(yuri) → (BasketballPlayer(yuri) ∧ American(yuri)) ::: If Yuri does not wear large shoes, then Yuri is an American basketball player."
      ]
    },
    "predicates": [
      "BasketballPlayer(x) ::: x is a basketball player.",
      "American(x) ::: x is an American.",
      "Tall(x) ::: x is tall.",
      "LargeShoes(x) ::: x wears large shoes.",
      "LargeClothes(x) ::: x wears large-sized clothes.",
      "Yuri(x) ::: x is Yuri."
    ]
  },
  {
    "id": 192,
    "context": [
      "Some basketball players are not American.",
      "All basketball players are tall.",
      "If someone is tall, they wear large shoes.",
      "If someone wears large shoes, they wear large-sized clothes.",
      "Yuri does not wear large-size clothes."
    ],
    "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.",
        "∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.",
        "∀x (Tall(x) → LargeShoes(x)) ::: If someone is tall, they wear large shoes.",
        "∀x (LargeShoes(x) → LargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.",
        "¬LargeClothes(yuri) ::: Yuri does not wear large-size clothes."
      ],
      "First-Order-Logic Question": [
        "¬American(yuri) → BasketballPlayer(yuri) ::: If Yuri is not an American basketball player, then Yuri is a basketball player."
      ]
    },
    "predicates": [
      "BasketballPlayer(x) ::: x is a basketball player.",
      "American(x) ::: x is an American.",
      "Tall(x) ::: x is tall.",
      "LargeShoes(x) ::: x wears large shoes.",
      "LargeClothes(x) ::: x wears large-sized clothes.",
      "Yuri(x) ::: x is Yuri."
    ]
  },
  {
    "id": 193,
    "context": [
      "Events are either happy or sad.",
      "At least one event is happy. "
    ],
    "question": "All events are sad.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Event(x) → Happy(x) ⊕ Sad(x)) ::: Events are either happy or sad.\n∃x (Event(x) ∧ Happy(x)) ::: At least one event is happy.",
      "First-Order-Logic Question": "∀x (Event(x) → Sad(x)) ::: All events are sad."
    },
    "predicates": [
      "Event(x) ::: x is an event.",
      "Happy(x) ::: x is a happy event.",
      "Sad(x) ::: x is a sad event."
    ]
  },
  {
    "id": 194,
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Winner(steinhauer, duMaurierClassic1992) ::: The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Participate(steinhauer, duMaurierClassic1992) ::: Steinhauer participated in the 1992 du Maurier Classic.",
        "∃x (Tie(x, duMaurierClassic1992) ∧ From(x, belgium)) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "From(descampe, belgium) ∧ Leaderboard(descampe, duMaurierClassic1992) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "∀x (Leaderboard(x, duMaurierClassic1992) → Participate(x, duMaurierClassic1992)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "First-Order-Logic Question": [
        "¬Winner(steinhauer, duMaurierClassic1992) ::: Steinhauer was not the winner of the 1992 du Maurier Classic."
      ]
    },
    "predicates": [
      "Winner(x, y) ::: x is the winner of y.",
      "Participate(x, y) ::: x participated in y.",
      "Tie(x, y) ::: x is in a tie in y.",
      "From(x, y) ::: x is from y.",
      "Leaderboard(x, y) ::: x is on the leaderboard of y."
    ]
  },
  {
    "id": 195,
    "context": [
      "The winner of the 1992 du Maurier Classic was Steinhauer.",
      "Steinhauer participated in the 1992 du Maurier Classic.",
      "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
      "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
      "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
    ],
    "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Winner(steinhauer, duMaurierClassic1992) ::: The winner of the 1992 du Maurier Classic was Steinhauer.",
        "Participate(steinhauer, duMaurierClassic1992) ::: Steinhauer participated in the 1992 du Maurier Classic.",
        "∃x (Tie(x, duMaurierClassic1992) ∧ From(x, belgium)) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.",
        "From(descampe, belgium) ∧ Leaderboard(descampe, duMaurierClassic1992) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
        "∀x (Leaderboard(x, duMaurierClassic1992) → Participate(x, duMaurierClassic1992)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
      ],
      "First-Order-Logic Question": [
        "Tie(descampe, duMaurierClassic1992) ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."
      ]
    },
    "predicates": [
      "Winner(x, y) ::: x is the winner of y.",
      "Participate(x, y) ::: x participated in y.",
      "Tie(x, y) ::: x is in a tie in y.",
      "From(x, y) ::: x is from y.",
      "Leaderboard(x, y) ::: x is on the leaderboard of y."
    ]
  },
  {
    "id": 196,
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi is terricolous.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Barks(x) → ¬Likes(jane, x)) ::: If an animal barks, then Jane does not like it.",
        "∀x (Dog(x) → (Barks(x) ∧ Animal(x))) ::: All dogs are animals that bark.",
        "∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.",
        "∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.",
        "∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.",
        "¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "First-Order-Logic Question": [
        "Terricolous(kiki) ::: KiKi is terricolous."
      ]
    },
    "predicates": [
      "Barks(x) ::: x is an animal that barks.",
      "Likes(Jane, x) ::: Jane likes x.",
      "Dog(x) ::: x is a dog.",
      "Jumps(x) ::: x is an animal that jumps.",
      "HasLegs(x) ::: x is an animal that has legs.",
      "Terricolous(x) ::: x is an animal that is terricolous."
    ]
  },
  {
    "id": 197,
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi barks and is a dog.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Barks(x) → ¬Likes(jane, x)) ::: If an animal barks, then Jane does not like it.",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x))) ::: All dogs are animals that bark.",
        "∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.",
        "∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.",
        "∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.",
        "¬(Jumps(kiki) ∧ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "First-Order-Logic Question": [
        "Barks(kiki) ∧ Dog(kiki) ::: KiKi barks and is a dog."
      ]
    },
    "predicates": [
      "Barks(x) ::: x barks.",
      "Likes(Jane, x) ::: Jane likes x.",
      "Dog(x) ::: x is a dog.",
      "Animal(x) ::: x is an animal.",
      "Jumps(x) ::: x jumps.",
      "HasLegs(x) ::: x has legs.",
      "Terricolous(x) ::: x is terricolous."
    ]
  },
  {
    "id": 198,
    "context": [
      "If an animal barks, then Jane does not like it.",
      "All dogs are animals that bark.",
      "If an animal jumps, then Jane likes it.",
      "If an animal has legs, then it jumps.",
      "If an animal is terricolous, then it has legs. ",
      "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
    ],
    "question": "KiKi neither barks nor is a dog.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Barks(x) → ¬Likes(jane, x)) ::: If an animal barks, then Jane does not like it.",
        "∀x (Dog(x) → (Animal(x) ∧ Barks(x))) ::: All dogs are animals that bark.",
        "∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.",
        "∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.",
        "∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.",
        "¬(Jumps(kiki) ∧ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
      ],
      "First-Order-Logic Question": [
        "¬Barks(kiki) ∧ ¬Dog(kiki) ::: KiKi neither barks nor is a dog."
      ]
    },
    "predicates": [
      "Animal(x) ::: x is an animal.",
      "Barks(x) ::: x barks.",
      "Likes(Jane, x) ::: Jane likes x.",
      "Dog(x) ::: x is a dog.",
      "Jumps(x) ::: x jumps.",
      "HasLegs(x) ::: x has legs.",
      "Terricolous(x) ::: x is terricolous."
    ]
  },
  {
    "id": 199,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "No one playing for Nautico is Brazilian.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Born(ailtonSilva, 1995) ∧ CommonlyKnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nBrazilian(ailtonSilva) ∧ FootballPlayer(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nFootballClub(nautico) ∧ FootballClub(braga) ::: Nautico is a football club along with Braga.\nFootballClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "∀x (PlaysFor(x, nautico) → ¬Brazilian(x)) ::: No one playing for Nautico is Brazilian."
    },
    "predicates": [
      "Born(x, y) ::: x is born in year y.",
      "CommonlyKnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedTo(x, y) ::: x is loaned out to y.",
      "Brazilian(x) ::: x is a Brazilian person.",
      "PlaysFor(x, y) ::: x plays for y.",
      "FootballClub(x) ::: x is a football club."
    ]
  },
  {
    "id": 200,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva foes not play for a football club.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Born(ailtonSilva, 1995) ∧ KnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.",
        "FootballPlayer(ailtonSilva) ∧ LoanedTo(ailtonSilva, braga) ::: Ailton is a football player who was loaned out to Braga.",
        "Brazilian(ailtonSilva) ∧ FootballPlayer(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.",
        "FootballClub(nautico) ∧ FootballClub(braga) ::: Nautico is a football club along with Braga.",
        "FootballClub(fluminense) ::: Fluminense is a football club."
      ],
      "First-Order-Logic Question": [
        "¬∃y (FootballClub(y) ∧ PlaysFor(ailtonSilva, y)) ::: Ailton Silva does not play for a football club."
      ]
    },
    "predicates": [
      "Born(x, y) ::: x is born in year y.",
      "KnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedTo(x, y) ::: x is loaned out to y.",
      "Brazilian(x) ::: x is a Brazilian person.",
      "PlaysFor(x, y) ::: x plays for y.",
      "FootballClub(x) ::: x is a football club.",
      "NotPlaysFor(x, y) ::: x does not play for y."
    ]
  },
  {
    "id": 201,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton was not loaned out to a football club.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Born(ailtonSilva, 1995) ∧ KnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.",
        "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.",
        "Brazilian(ailtonSilva) ∧ FootballPlayer(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.",
        "FootballClub(nautico) ∧ FootballClub(braga) ::: Nautico is a football club along with Braga.",
        "FootballClub(fluminense) ::: Fluminense is a football club."
      ],
      "First-Order-Logic Question": "¬∃y (LoanedTo(ailton, y) ∧ FootballClub(y)) ::: Ailton was not loaned out to a football club."
    },
    "predicates": [
      "Born(x, y) ::: x was born in year y.",
      "KnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedTo(x, y) ::: x was loaned out to y.",
      "Brazilian(x) ::: x is a Brazilian person.",
      "PlaysFor(x, y) ::: x plays for y.",
      "FootballClub(x) ::: x is a football club."
    ]
  },
  {
    "id": 202,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva played for Fluminense.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Born(ailtonSilva, 1995) ∧ KnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.",
        "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.",
        "Brazilian(ailton) ∧ FootballPlayer(ailton) ∧ PlaysFor(ailton, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.",
        "FootballClub(nautico) ∧ FootballClub(braga) ::: Nautico is a football club along with Braga.",
        "FootballClub(fluminense) ::: Fluminense is a football club."
      ],
      "First-Order-Logic Question": "PlayedFor(ailton, fluminense) ::: Ailton Silva played for Fluminense."
    },
    "predicates": [
      "Born(x, y) ::: x is born in year y.",
      "KnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedTo(x, y) ::: x is loaned out to y.",
      "Brazilian(x) ::: x is a Brazilian person.",
      "PlaysFor(x, y) ::: x plays for y.",
      "FootballClub(x) ::: x is a football club.",
      "PlayedFor(x, y) ::: x played for y."
    ]
  },
  {
    "id": 203,
    "context": [
      "Ailton Silva, born in 1995, is commonly known as Ailton.",
      "Ailton is a football player who was loaned out to Braga.",
      "Ailton Silva is a Brazillian footballer who plays for Nautico.",
      "Nautico is a football club along with Braga.",
      "Fluminense is a football club."
    ],
    "question": "Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Born(ailtonSilva, 1995) ∧ KnownAs(ailtonSilva, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailtonSilva) ∧ LoanedTo(ailtonSilva, braga) ::: Ailton is a football player who was loaned out to Braga.\nBrazilian(ailtonSilva) ∧ FootballPlayer(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nFootballClub(nautico) ∧ FootballClub(braga) ::: Nautico is a football club along with Braga.\nFootballClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "∃y (LoanedTo(ailtonSilva, y) ∧ FootballClub(y)) ::: Ailton Silva was loaned out to a football club."
    },
    "predicates": [
      "Born(x, y) ::: x is born in year y.",
      "KnownAs(x, y) ::: x is commonly known as y.",
      "FootballPlayer(x) ::: x is a football player.",
      "LoanedTo(x, y) ::: x is loaned out to y.",
      "Brazilian(x) ::: x is a Brazilian person.",
      "PlaysFor(x, y) ::: x plays for y.",
      "FootballClub(x) ::: x is a football club."
    ]
  }
]