[
  {
    "id": 0,
    "nl_problem": {
      "context": "Bob is cold. Bob is quiet. Bob is red. Bob is smart. Charlie is kind. Charlie is quiet. Charlie is red. Charlie is rough. Dave is cold. Dave is kind. Dave is smart. Fiona is quiet. If something is quiet and cold then it is smart. Red, cold things are round. If something is kind and rough then it is red. All quiet things are rough. Cold, smart things are red. If something is rough then it is cold. All red things are rough. If Dave is smart and Dave is kind then Dave is quiet.",
      "question": "Charlie is kind.",
      "options": [
        "A) True",
        "B) False",
        "C) Unknown"
      ],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n\nHere is the conversion to first-order logic:\n\n```\n{\n  \"fol_preds\": [\n    \"B($x, bool)\",\n    \"Q($x, bool)\",\n    \"C($x, bool)\",\n    \"R($x, bool)\"\n  ],\n  \"fol_consts\": [],\n  \"fol_rules\": [\n    \"B(Dave, True) >>> Q(Dave, True)\",\n    \"B(Dave, True) >>> R(Dave, True)\",\n    \"Q(Dave, True) && C(Dave, True) >>> B(Dave, True)\",\n    \"C($x, True) >>> R($x, False)\",\n    \"R($x, True) && Q($x, True) >>> B($x, True)\",\n    \"B($x, True) >>> R($x, True)\"\n  ],\n  \"fol_conc\": \"Q(Charlie, True)\"\n}\n```\n\nNote: The `C` predicate represents the property of being cold.",
      "perplexity": 1.446669340133667,
      "generation_time": 25.941015,
      "error_message": null
    },
    "logic_problem_json": {
      "raw": "{\"fol_preds\": [\"Cold($x, bool)\", \"Smart($x, bool)\", \"Kind($x, bool)\", \"Rough($x, bool)\", \"Red($x, bool)\"], \"flog_consts\": [], \"flog_rules\": [ ], \"flog_conc\": null}",
      "perplexity": 4.104076862335205,
      "generation_time": 9.731237,
      "error_message": null
    },
    "logic_problem_gcd": {
      "raw": "{\n\n\"predicates\": [\n    \"Cold($x, bool)\",\n    \"Rough($x, bool)\"\n],\n\"facts\": [\n    \n \n    \"Qiet(Dave, True)\"  ,\n    \"Red(Dave, True)\",  \n    \"Smart(Bob, True)\", \n    \"Kind(Charlie, False)\" , \n \n   \n    \"Cold(Quet, True)\",\n    \"Cold(Ting, True)\"\n\n], \n\"rules\": [\n    \"Quet($x, True) && Cold($x, True)  && Smart($x, True)>>>Smart(Dave, True)\",  \n    \"Red(Charlie, False)&&Rough(Charlie, False)>>>Kind(Charlie, True)\",\n   \n    \"Qiet(Bob, True)&& Rough(Quet, True)>>>Quet(RougH, True)\" ,\n \n \n  \"Cold($x, True) && Smart(Quet, True)>>>Smart(Dave, True)\"\n],\n\n\"query\": \"Kind(Charlie, False)\"\n\n}",
      "perplexity": 3.7445271015167236,
      "generation_time": 27.916009,
      "error_message": null
    }
  },
  {
    "id": 1,
    "nl_problem": {
      "context": "The cat eats the squirrel. The cat sees the squirrel. The cow eats the squirrel. The cow sees the cat. The rabbit is round. The rabbit sees the cat. The squirrel eats the rabbit. The squirrel is cold. The squirrel needs the rabbit. The squirrel sees the cat. If someone sees the cat and they are not green then they see the cow. If the rabbit is kind and the rabbit sees the squirrel then the squirrel needs the rabbit. Rough people are cold. If someone sees the rabbit then they are not round. If someone sees the squirrel and they are not green then they need the squirrel. If someone eats the cow then they see the rabbit. If someone eats the squirrel then they are rough. If someone is cold then they eat the cow.",
      "question": "The cat is not round.",
      "options": [
        "A) True",
        "B) False",
        "C) Unknown"
      ],
      "answer": "A"
    },
    "logic_problem": {
      "raw": "\n\n{\n  \"predicates\": [\n    \"Cat($x, bool)\",\n    \"Round($x, bool)\"\n  ],\n  \"facts\": [],\n  \"rules\": [\n    \"Cat($x, True) >>> Round($x, False)\"\n  ],\n  \"query\": \"! (Round(cat, True))\"\n}",
      "perplexity": 1.461705207824707,
      "generation_time": 9.027101,
      "error_message": null
    },
    "logic_problem_json": {
      "raw": "{\n  \"fol_preds\": [\n    \"Cat($x, bool)\",\n    \"Round($x, bool)\"\n  ],\n  \"fol_consts\": [],\n  \"fol_rules\": [\n    \"Cat($x, True) >>> Round($x, False)\"\n  ],\n  \"fol_conc\": \"Not(Round(cat, True))\"\n}",
      "perplexity": 1.698041558265686,
      "generation_time": 10.355709,
      "error_message": null
    },
    "logic_problem_gcd": {
      "raw": "{\n\n  \"predicates\": [\n    \"Cat($x, bool)\",\n    \"Round($x, bool)\"\n  ],\n  \"facts\": [\n    \n  \"Cat(TheCat, True)\"],\n  \"rules\": [\n    \n  \"TheCatIsColdAndTasty(True, False)>>>TheCatIsNotRounded(False, True)\" \n   ,\"If(THeCatIsRoundThenItIsCOWDTrueFalseTheCatIsCoolerThanTheCowThenTheCatIsRoundTrueFalseTheCatIsATastyFoodTrueFalseTheCatIsACatTrueTheCatIsColdAndTastyTruefalseTheCatIsNotRoundedFalseTrueTheCatIsRoundTrueTrueTheCatISNOTroundFalseTheCatisroundedFalseTrueTheCatIsARoundObjectTrueFalseTheCowisAcowTrueThenTheCatIsNotRoundedFalseTrueTheCatissquareFalseTrueTheCatisacatTrueThenTheCatIsATastyFoodTruefalseTheCatisasoldierFalseTrueThecatiscowTrueThenThecatIscoldAndTastyTruefalseIfthenelseTheCatISNOTroundedFalsesetheCatisARoundObjectTruefalseTheCowIsACOWTrueThemustbeTheCatisColdAndtastYtruefalseIfThencatissquareFalseTrueTheCatisasroundobjectTruefalseThecowiscowTrueThenThecatIscoldandTastyTruefalseifthenelseThecatisaRoundObjectTRUEFALSETHECATISAROUNDTHENTHECATISSQUAREFALSETHENEWFACTISTHATTHECATTSSQUAREANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDANDNOTRoundedtruefalseIfthenelseTheCatisasroundobjectTrueFalseTheCowisacowTrueThenThecatIscoldandTastyTruefalseifThencatissquareTRUEFALSETHECATISAROUNDObjectTRUETHENCATISSQUAREFALSETHENNEWFACTISTHEThatTHECATTSSQUAREDAND",
      "perplexity": 1.8587268590927124,
      "generation_time": 133.786245,
      "error_message": "max_tokens"
    }
  },
  {
    "id": 2,
    "nl_problem": {
      "context": "Anne is furry. Anne is nice. Anne is smart. Bob is young. Erin is nice. Harry is smart. Harry is young. Young things are furry. Nice, furry things are green. All green things are nice. Nice, green things are big. All green things are smart. If something is big and young then it is round. All green things are big. If Harry is young then Harry is furry. Furry, smart things are nice.",
      "question": "Harry is not green.",
      "options": [
        "A) True",
        "B) False",
        "C) Unknown"
      ],
      "answer": "B"
    },
    "logic_problem": {
      "raw": "\n\n{\n  \"fol_preds\": [\n    \"$x$ is green\",\n    \"$y$ is big\",\n    \"$z$ is nice\",\n    \"$w$ is young\"\n  ],\n  \"fol_consts\": [],\n  \"fol_rules\": [\n    \"(∀ $x) (Young($x, True)) >>> ($x is green)\",\n    \"(∃ $x) ($x is green ∧ Nice($y, True)), (∀ $z) ((Nice($y, True)) -> (Green($w, False)))\",\n    \"((∃ $y) (($y$ is big ∧ Young($z, True)))) >>> Green($a, False)\",\n    \"(∀ $b) ($c is nice → ($d$ is green))\"\n  ],\n  \"fol_conc\": {\n    \"$x$: Harry\"\n  }\n}",
      "perplexity": 2.629037618637085,
      "generation_time": 21.774864,
      "error_message": null
    },
    "logic_problem_json": {
      "raw": "{\"predicates\": [\"Green($x, bool)\"], \"fol_consts\": [], \"fol_rules\": [{\"Gren($x, True)\" : \"(Harry is green.\"}], \"fol_conc\": {\"~ Green(Harry, True)\": \" Harry is not green\"}}",
      "perplexity": 3.8459043502807617,
      "generation_time": 8.284176,
      "error_message": null
    },
    "logic_problem_gcd": {
      "raw": "{\n\n\"predicates\": [\n    \"Green($x, bool)\",\n    \"Big($x, bool)\"\n],\n\"facts\": [\n\n\"Harry(Y, True)\"],\n\"rules\": [\n    \n\"Furry(X, True) && Young(X, True)>>>Furry(X, True)\",\n\n\"AllYoungThingsAreFurry(True, True)>>>AllFurryThingsAreGreen(True, False)\",\n  \n  \"AllGreensAreNice(True, True)>>>Nice(Harry, True)\",\n \n  \"AllNicesAreGentle(True, True)>>>Big(Y, True)\"\n],\n\"query\": \"Not(GreenHarry, True)\"}",
      "perplexity": 4.678888320922852,
      "generation_time": 18.339032,
      "error_message": null
    }
  },
  {
    "id": 3,
    "nl_problem": {
      "context": "Anne is round. Bob is red. Bob is smart. Erin is furry. Erin is red. Erin is rough. Erin is smart. Fiona is big. Fiona is furry. Fiona is smart. All smart things are furry. All furry things are red. All round things are rough. If Bob is white then Bob is furry. All red, rough things are big. All rough things are smart. If Fiona is furry then Fiona is red. If Bob is round and Bob is big then Bob is furry. If Fiona is red and Fiona is white then Fiona is smart.",
      "question": "Bob is not white.",
      "options": [
        "A) True",
        "B) False",
        "C) Unknown"
      ],
      "answer": "C"
    },
    "logic_problem": {
      "raw": "\n\n{\n  \"fol_preds\": [\n    \"Person($x, bool)\",\n    \"Big($x, bool)\",\n    \"Red($x, True)\",\n    \"Rough($x, bool)\"\n  ],\n  \"fol_consts\": [\"Bob\"],\n  \"fol_rules\": [\n    \"Person(Bob, True) >>> Big(Bob, False)\",\n    \"Person(x, True) && Rough(x, True) >>> Red(x, True)\",\n    \"Big(Bob, True) => Rough(Bob, True)\",\n    \"Rough(x, True) && Person(x, True) => Big(x, True)\",\n    \"Red(x, True) && Person(x, True) => Big(x, False)\"\n  ],\n  \"fol_conc\": [\n    \"!Person(Bob, Red(Bob))\"\n  ]\n}",
      "perplexity": 1.4546371698379517,
      "generation_time": 21.042306,
      "error_message": null
    },
    "logic_problem_json": {
      "raw": "{\n  \"fol_preds\": [\n    \"Red($x, bool)\",\n    \"Big($x, bool)\",\n    \"Smart($x, bool)\",\n    \"Kind($x, bool)\",\n    \"Rough($x, bool)\",\n    \"White($x, bool)\"\n  ],\n  \"fol_consts\": [\n    \"$Bob\"\n  ],\n  \"fol_rules\": [\n    \"Red($x, True) && White($y, False) >>> Big($z, True)\", 1\n    ,\"$x = Bob\", 2\n    ,\"Big(Bob, True) >>> Rough(Bob, True)\"\n    ,\"Rough(x, True) & White(y, True) >>> Red(z, True)\" ,\n     3\n     ,\"White(x, False)\",\n     4\n   ],\n \"fol_conc\": \"!White($Bob, True)\"\n}",
      "perplexity": 2.5818710327148438,
      "generation_time": 24.186147,
      "error_message": null
    },
    "logic_problem_gcd": {
      "raw": "{\n\n\"predicates\": [\n    \"Big($x, bool)\",\n    \"Red($x, bool)\",\n    \"Smart($x, bool)\",\n    \"Kind($x, bool)\",\n    \"Rough($x, bool)\",\n    \"White($x, bool)\"\n],\n\"facts\": [\n    \n \n  \"Bob(Bob, True)\",\n\n \n   \"Big(Fiona, False)\"\n\n],\n\n\n\"rules\": [\n\n\n    \"Furry($x, True) && Smart($x, True) && Rough($x, True) && White($x, True) && Big($x, False)>>>Smart($x, True)\",\n    \n  \"Rough($x, True)&&White($x, True)>>>Red($x, True)\",\n\n    \"Furry($x, True) && Smart($x, True)>>>Kind($x, True)\",\n \n   \"Big($x, False)&&Kind($x, True)>>>Bob($x, True)\"\n\n],\n\"query\": \"Smart(Bob, True)\"\n}",
      "perplexity": 2.5490431785583496,
      "generation_time": 27.852525,
      "error_message": null
    }
  }
]