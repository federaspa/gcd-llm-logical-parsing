#### Wrap declarations, constraints, options and type in a JSON ####
root ::= "{" ws decls ws consts ws opts ws type ws "}"

ws ::= [ \t\n\r]*

decls ::= "\"declarations\":" ws "[" ws decllist ws "],"
decllist ::= "\"" DECL "\"" (ws "," ws "\"" DECL "\"")*

consts ::= "\"constraints\":" ws "[" ws constlist ws "],"
constlist ::= "\"" CONSTRAINT "\"" (ws "," ws "\"" CONSTRAINT "\"")*

opts ::= "\"options\":" ws "[" ws optlist ws "],"
optlist ::= "\"" OPTION "\"" (ws "," ws "\"" OPTION "\"")*

type ::= "\"type\":" ws "\"" ("sat" | "unsat") "\""


#### Generate SMTLIB2 Formulas ####

# Declarations
DECL ::= "(declare-datatypes" ws "(" TYPEDECL ")" ws "(" CONSTRUCTORS ")" ")" |
         "(declare-fun" ws ID ws "(" PARAMS ")" ws TYPE ")" |
         "(define-fun" ws ID ws "(" PARAMS ")" ws TYPE ws BODY ")"

TYPEDECL ::= "(" ID ws NUMBER ")"
CONSTRUCTORS ::= "(" CONSTRUCTOR (ws CONSTRUCTOR)* ")"
CONSTRUCTOR ::= "(" ID ")"
PARAMS ::= (TYPE ws)*
TYPE ::= ID | "Bool" | "Int"
BODY ::= TERM

# Constraints
CONSTRAINT ::= "(" QUANTIFIER ws "(" BOUNDVARS ")" ws FORMULA ")" |
              "(" OPERATOR ws TERMS ")" |
              "(" "=" ws TERM ws TERM ")" |
              "(" RELATION ws TERM ws TERM ")"

# Options (typically negations of possible answers)
OPTION ::= "(" "not" ws "(" QUANTIFIER ws "(" BOUNDVARS ")" ws FORMULA ")" ")" |
           "(" "=" ws TERM ws NUMBER ")"

# Common elements
QUANTIFIER ::= "forall" | "exists"
BOUNDVARS ::= "(" VAR ws TYPE ")" (ws "(" VAR ws TYPE ")")*
FORMULA ::= "(" OPERATOR ws TERMS ")" |
           "(" RELATION ws TERM ws TERM ")" |
           "(" "=" ws TERM ws TERM ")"
OPERATOR ::= "and" | "or" | "not" | "=>" | "distinct"
RELATION ::= "<" | ">" | "<=" | ">="
TERM ::= ID | NUMBER | "(" OPERATOR ws TERMS ")" | "(" ID ws TERMS ")"
TERMS ::= TERM (ws TERM)*

# Basic elements
ID ::= [a-zA-Z_][a-zA-Z0-9_]*
NUMBER ::= [0-9]+
VAR ::= [a-zA-Z_][a-zA-Z0-9_]*