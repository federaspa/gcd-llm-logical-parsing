The task is to convert a natural language reasoning problem into logical form.
First, identify the predicates required to build the logical formulas.
Then, convert all the facts and rules from the problem.
Finally, convert the question into a query.
Do not attempt to prove or disprove the conclusion, limit yourself to converting.
You reply strictly in JSON format, with the following schema:
"""
\{
"predicates": [list of required predicates],
"facts": [list of facts extracted from the problem],
"rules": [list of rules extracted from the problem],
"query": [query converted from the question]
\}
"""

Here's an example of how to perform the conversion:

NL premises:
"""
Each jompus is fruity. Every jompus is a wumpus. Every wumpus is not transparent. Wumpuses are tumpuses. Tumpuses are mean. Tumpuses are vumpuses. Every vumpus is cold. Each vumpus is a yumpus. Yumpuses are orange. Yumpuses are numpuses. Numpuses are dull. Each numpus is a dumpus. Every dumpus is not shy. Impuses are shy. Dumpuses are rompuses. Each rompus is liquid. Rompuses are zumpuses. Alex is a tumpus.
"""

NL conclusion:
"""
Alex is not shy.
"""

------

{
  "predicates": [
    "Jompus($x, bool)",
    "Fruity($x, bool)",
    "Wumpus($x, bool)",
    "Transparent($x, bool)",
    "Tumpuses($x, bool)",
    "Mean($x, bool)",
    "Vumpuses($x, bool)",
    "Cold($x, bool)",
    "Yumpus($x, bool)",
    "Orange($x, bool)",
    "Numpus($x, bool)",
    "Dull($x, bool)",
    "Dumpus($x, bool)",
    "Shy($x, bool)",
    "Impuses($x, bool)",
    "Rompus($x, bool)",
    "Liquid($x, bool)",
    "Zumpus($x, bool)"
  ],
  "facts": [
    "Tumpuses(Alex, True)"
  ],
  "rules": [
    "Jompus($x, True) >>> Fruity($x, True)",
    "Jompus($x, True) >>> Wumpus($x, True)",
    "Wumpus($x, True) >>> Transparent($x, False)",
    "Wumpuses($x, True) >>> Tumpuses($x, True)",
    "Tumpuses($x, True) >>> Mean($x, True)",
    "Tumpuses($x, True) >>> Vumpuses($x, True)",
    "Vumpuses($x, True) >>> Cold($x, True)",
    "Vumpuses($x, True) >>> Yumpus($x, True)",
    "Yumpus($x, True) >>> Orange($x, True)",
    "Yumpus($x, True) >>> Numpus($x, True)",
    "Numpus($x, True) >>> Dull($x, True)",
    "Numpus($x, True) >>> Dumpus($x, True)",
    "Dumpus($x, True) >>> Shy($x, False)",
    "Impuses($x, True) >>> Shy($x, True)",
    "Dumpus($x, True) >>> Rompus($x, True)",
    "Rompus($x, True) >>> Liquid($x, True)",
    "Rompus($x, True) >>> Zumpus($x, True)"
  ],
  "query": "Shy(Alex, False)"
}

###

Here's another example:

NL premises:
"""
Dave is big. Dave is red. Erin is smart. Fiona is kind. Fiona is smart. Gary is rough. Gary is white. All young people are white. If someone is kind and white then they are big. If someone is kind then they are young. If Fiona is young and Fiona is rough then Fiona is red. If someone is big then they are rough. All rough, white people are red. If someone is kind and not big then they are red.
"""

NL conclusion:
"""
Erin is smart.
"""

------

{
  "predicates": [
    "Big($x, bool)",
    "Red($x, bool)",
    "Smart($x, bool)",
    "Kind($x, bool)",
    "Rough($x, bool)",
    "White($x, bool)",
    "Young($x, bool)"
  ],
  "facts": [
    "Big(Dave, True)",
    "Red(Dave, True)",
    "Smart(Erin, True)",
    "Kind(Fiona, True)",
    "Smart(Fiona, True)",
    "Rough(Gary, True)",
    "White(Gary, True)"
  ],
  "rules": [
    "Young($x, True) >>> White($x, True)",
    "Kind($x, True) && White($x, True) >>> Big($x, True)",
    "Kind($x, True) >>> Young($x, True)",
    "Young(Fiona, True) && Rough(Fiona, True) >>> Red(Fiona, True)",
    "Big($x, True) >>> Rough($x, True)",
    "Rough($x, True) && White($x, True) >>> Red($x, True)",
    "Kind($x, True) && Big($x, False) >>> Red($x, True)"
  ],
  "query": "Smart(Erin, True)"
}

###

Now let's convert this problem to first-order logic:

NL premises:
"""
[[nl_problem]]
"""

NL conclusion:
"""
[[nl_conclusion]]
"""