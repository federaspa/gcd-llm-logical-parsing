The task is to convert a natrual language reasoning problem into first-order logic. 
First, identify the predicates and constants required to build the first order logic formulas. 
Then, use them to build the rules and the conclusion. 
Do not attempt to prove or disprove the conclusion, limit yourself to converting.

You reply strictly in JSON format, with the following schema:
"""
\{
"fol_preds": [list of required FOL Predicates],
"fol_consts": [list of required FOL Constants],
"fol_rules": [list of generated FOL Rules],
"fol_conc": [generated FOL Conclusion]
\}
"""

Here's an example of how to perform the conversion:

NL premises:
"""
All people who regularly drink coffee are dependent on caffeine. 
People either regularly drink coffee or joke about being addicted to caffeine. 
No one who jokes about being addicted to caffeine is unaware that caffeine is a drug. 
Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug. 
If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student.
"""

NL conclusion:
"""
Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.
"""

------

{
  "fol_preds": [
    "Dependent(x)",
    "Drinks(x)",
    "Jokes(x)",
    "Unaware(x)",
    "Student(x)"
  ],
  "fol_consts": [
    "rina"
  ],
  "fol_rules": [
    "∀x (Drinks(x) → Dependent(x))",
    "∀x (Drinks(x) ⊕ Jokes(x))",
    "∀x (Jokes(x) → ¬Unaware(x))",
    "(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))",
    "¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))"
  ],
  "fol_conc": "Jokes(rina) ⊕ Unaware(rina)"
}

###

Here's another example:

NL premises:
"""
Sam is doing a project.
A project is written either in Rust or in Python.
If Sam does a project written in Python, he will not use a Mac.
Sam is using a Mac.
If Sam uses a Mac, he will play a song.
If a song is not "Perfect", Sam will never play it.
"""

NL conclusion:
"""
The project Sam is doing is written in Rust.
"""

------

{
  "fol_preds": [
    "Project(x)",
    "Do(x, y)",
    "WrittenIn(x, y)",
    "Use(x, y)",
    "Play(x, y)",
    "Song(x)",
    "Be(x, y)"
  ],
  "fol_consts": [
    "sam",
    "mac",
    "python",
    "rust",
    "perfect"
  ],
  "fol_rules": [
    "∃x (Project(x) ∧ Do(sam, x))",
    "∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, rust)))",
    "∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))",
    "Use(sam, mac)",
    "Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))",
    "∀x ((Song(x) ∧ ¬Be(x, perfect)) → ¬Play(sam, x))"
  ],
  "fol_conc": "∃x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, rust))"
}

###

Here's another example:

NL premises:
"""
All fruits with the color red contain a large amount of vitamin C.
All apples are fruits with the color red.
All fruits containing a large amount of vitamin C are beneficial to people.
No fruits that are beneficial to people are on a warning list.
If K is not beneficial to people and also not an apple, then it is a fruit with the color red.
"""

NL conclusion:
"""
K either contains a large amount of vitamin C or is on a warning list.
"""
------
{
  "fol_preds": [
    "RedFruit(x)",
    "VC(x)",
    "Apple(x)",
    "Benefit(x)",
    "WarningList(x)"
  ],
  "fol_consts": [
    "k"
  ],
  "fol_rules": [
    "∀x (RedFruit(x) → VC(x))",
    "∀x (Apple(x) → RedFruit(x))",
    "∀x (VC(x) → Benefit(x))",
    "∀x (Benefit(x) → ¬WarningList(x))",
    "¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)"
  ],
  "fol_conc": "VC(k) ⊕ WarningList(k)"
}

###

Here's another example:

NL premises:
"""
All kids love animals.
All toddlers are kids.
If someone loves animals, then they are not bad.
All pirates are bad.
If Nancy is not a pirate, then Nancy loves animals.
If Nancy is not a toddler, then Nancy is bad.
"""

NL conclusion:
"""
Nancy is not a pirate or a toddler.
"""
------
{
  "fol_preds": [
    "Kid(x)",
    "LoveAnimals(x)",
    "Toddler(x)",
    "Bad(x)",
    "Pirate(x)"
  ],
  "fol_consts": [
    "nancy"
  ],
  "fol_rules": [
    "∀x (Kid(x) → LoveAnimals(x))",
    "∀x (Toddler(x) → Kid(x))",
    "∀x (LoveAnimals(x) → ¬Bad(x))",
    "∀x (Pirate(x) → Bad(x))",
    "¬Pirate(nancy) → LoveAnimals(nancy)",
    "¬Toddler(nancy) → Bad(nancy)"
  ],
  "fol_conc": "¬(Pirate(nancy) ∨ Toddler(nancy))"
}

###

Here's another example:

NL premises:
"""
Everyone working at Meta has a high income.
If a person has a high income, then he/she will not take a bus to their destination.
People will either take a bus or drive to their destination.
Everyone who has a car will choose to drive to their destination.
No students drive to their destination.
James has a car or works at Meta.
"""
NL conclusion:
"""
James is a student.
"""
------
{
  "fol_preds": [
    "Meta(x)",
    "HighIncome(x)",
    "Bus(x)",
    "Drive(x)",
    "HaveCars(x)",
    "Student(x)"
  ],
  "fol_consts": [
    "james"
  ],
  "fol_rules": [
    "∀x (Meta(x) → HighIncome(x))",
    "∀x (HighIncome(x) → ¬Bus(x))",
    "∀x (Bus(x) ∨ Drive(x))",
    "∀x (HaveCars(x) → Drive(x))",
    "∀x (Student(x) → ¬Drive(x))",
    "HaveCars(james) ∨ Meta(james)"
  ],
  "fol_conc": "Student(james)"
}

###

Now let's convert this problem to first-order logic:

NL premises:
"""
[[nl_problem]]
"""

NL conclusion:
"""
[[nl_conclusion]]
"""