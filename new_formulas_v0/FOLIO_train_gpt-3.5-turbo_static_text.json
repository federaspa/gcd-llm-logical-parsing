[
  {
    "id": 1131,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drinks(x) -> Dependent(x))",
      "all x.((Drinks(x) & -Jokes(x)) | (-Drinks(x) & Jokes(x)))",
      "all x.(Jokes(x) -> -Unaware(x))",
      "((Student(Rina) & Unaware(Rina) & --(Student(Rina) | Unaware(Rina))) | (-(Student(Rina) & Unaware(Rina)) & -(Student(Rina) | Unaware(Rina))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1132,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drinks(x) -> Dependent(x))",
      "all x.((Drinks(x) & -Jokes(x)) | (-Drinks(x) & Jokes(x)))",
      "all x.(Jokes(x) -> -Unaware(x))",
      "((Student(Rina) & Unaware(Rina) & --(Student(Rina) | Unaware(Rina))) | (-(Student(Rina) & Unaware(Rina)) & -(Student(Rina) | Unaware(Rina))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1133,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drinks(x) -> Dependent(x))",
      "all x.((Drinks(x) & -Jokes(x)) | (-Drinks(x) & Jokes(x)))",
      "all x.(Jokes(x) -> -Unaware(x))",
      "((Student(Rina) & Unaware(Rina) & --(Student(Rina) | Unaware(Rina))) | (-(Student(Rina) & Unaware(Rina)) & -(Student(Rina) | Unaware(Rina))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1134,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drinks(x) -> Dependent(x))",
      "all x.((Drinks(x) & -Jokes(x)) | (-Drinks(x) & Jokes(x)))",
      "all x.(Jokes(x) -> -Unaware(x))",
      "((Student(Rina) & Unaware(Rina) & --(Student(Rina) | Unaware(Rina))) | (-(Student(Rina) & Unaware(Rina)) & -(Student(Rina) | Unaware(Rina))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 20,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Czech(Miroslav) & ChoralConductor(Miroslav) & Specialize(Miroslav,Renaissance) & Specialize(Miroslav,Baroque))",
      "all x.(ChoralConductor(x) -> Musician(x))",
      "exists x.(Musician(x) -> Love(x,Music))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 21,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Czech(Miroslav) & ChoralConductor(Miroslav) & Specialize(Miroslav,Renaissance) & Specialize(Miroslav,Baroque))",
      "all x.(ChoralConductor(x) -> Musician(x))",
      "exists x.(Musician(x) -> Love(x,Music))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 22,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Czech(Miroslav) & ChoralConductor(Miroslav) & Specialize(Miroslav,Renaissance) & Specialize(Miroslav,Baroque))",
      "all x.(ChoralConductor(x) -> Musician(x))",
      "exists x.(Musician(x) -> Love(x,Music))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1341,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Eel(x) -> Fish(x))",
      "all x.(Fish(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Breathe(x) -> -Paper(x))",
      "all x.(Animal(x) -> Breathe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1342,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Eel(x) -> Fish(x))",
      "all x.(Fish(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Breathe(x) -> -Paper(x))",
      "all x.(Animal(x) -> Breathe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1343,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Eel(x) -> Fish(x))",
      "all x.(Fish(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Breathe(x) -> -Paper(x))",
      "all x.(Animal(x) -> Breathe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 393,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Blake(x) -> Building(x))",
      "all x.(Blake(x) -> Historic(x,Year1990))",
      "all x.((Emmet(x) -> Building(x)) & FiveStory(x) & Locate(x,Portland))",
      "all x.(Emmet(x) -> Construct(x,Year1915))",
      "all x.(Emmet(x) <-> Blake(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 394,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Blake(x) -> Building(x))",
      "all x.(Blake(x) -> Historic(x,Year1990))",
      "all x.((Emmet(x) -> Building(x)) & FiveStory(x) & Locate(x,Portland))",
      "all x.(Emmet(x) -> Construct(x,Year1915))",
      "all x.(Emmet(x) <-> Blake(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 395,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Blake(x) -> Building(x))",
      "all x.(Blake(x) -> Historic(x,Year1990))",
      "all x.((Emmet(x) -> Building(x)) & FiveStory(x) & Locate(x,Portland))",
      "all x.(Emmet(x) -> Construct(x,Year1915))",
      "all x.(Emmet(x) <-> Blake(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 640,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BritishPolitician(Williamdickinson) & SatInHouseOfCommons(Williamdickinson))",
      "(Attended(Williamdickinson,Westminster) & Highschool(Westminster) & Attended(Williamdickinson,Universityofedinburgh))",
      "(LocatedIn(Universityofedinburgh,Unitedkingdom) & University(Universityofedinburgh))",
      "Supported(Williamdickinson,Portlandwhigs)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 641,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BritishPolitician(Williamdickinson) & SatInHouseOfCommons(Williamdickinson))",
      "(Attended(Williamdickinson,Westminster) & Highschool(Westminster) & Attended(Williamdickinson,Universityofedinburgh))",
      "(LocatedIn(Universityofedinburgh,Unitedkingdom) & University(Universityofedinburgh))",
      "Supported(Williamdickinson,Portlandwhigs)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 642,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BritishPolitician(Williamdickinson) & SatInHouseOfCommons(Williamdickinson))",
      "(Attended(Williamdickinson,Westminster) & Highschool(Westminster) & Attended(Williamdickinson,Universityofedinburgh))",
      "(LocatedIn(Universityofedinburgh,Unitedkingdom) & University(Universityofedinburgh))",
      "Supported(Williamdickinson,Portlandwhigs)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 643,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BritishPolitician(Williamdickinson) & SatInHouseOfCommons(Williamdickinson))",
      "(Attended(Williamdickinson,Westminster) & Highschool(Westminster) & Attended(Williamdickinson,Universityofedinburgh))",
      "(LocatedIn(Universityofedinburgh,Unitedkingdom) & University(Universityofedinburgh))",
      "Supported(Williamdickinson,Portlandwhigs)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 695,
    "flag": "None goal or assumptions",
    "assumptions": [
      "UniversalLanguage(LanguageA)",
      "[[ERROR]]",
      "Know(Katya,LanguageA)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1197,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(AMC(x) -> ThreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(AMC(x) | HBO(x))",
      "all x.(PreferTVSeries(x) -> -WatchTVInCinema(x))",
      "all x.(HBO(x) -> PreferTVSeries(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1198,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(AMC(x) -> ThreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(AMC(x) | HBO(x))",
      "all x.(PreferTVSeries(x) -> -WatchTVInCinema(x))",
      "all x.(HBO(x) -> PreferTVSeries(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1199,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(AMC(x) -> ThreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(AMC(x) | HBO(x))",
      "all x.(PreferTVSeries(x) -> -WatchTVInCinema(x))",
      "all x.(HBO(x) -> PreferTVSeries(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1200,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(AMC(x) -> ThreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(AMC(x) | HBO(x))",
      "all x.(PreferTVSeries(x) -> -WatchTVInCinema(x))",
      "all x.(HBO(x) -> PreferTVSeries(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1201,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(AMC(x) -> ThreeMovies(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(AMC(x) | HBO(x))",
      "all x.(PreferTVSeries(x) -> -WatchTVInCinema(x))",
      "all x.(HBO(x) -> PreferTVSeries(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 553,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((LaLiga(x) & LaLiga(y) & MorePoints(x,y)) -> HigherRank(x,y))",
      "all x y.((LaLiga(x) & LaLiga(y) & -MorePoints(x,y) & -MorePoints(y,x) & MorePoints(x,y)) -> HigherRank(x,y))",
      "(LaLiga(RealMadrid) & LaLiga(Barcelona))",
      "MorePoints(RealMadrid,Barcelona)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 554,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((LaLiga(x) & LaLiga(y) & MorePoints(x,y)) -> HigherRank(x,y))",
      "all x y.((LaLiga(x) & LaLiga(y) & -MorePoints(x,y) & -MorePoints(y,x) & MorePoints(x,y)) -> HigherRank(x,y))",
      "(LaLiga(RealMadrid) & LaLiga(Barcelona))",
      "MorePoints(RealMadrid,Barcelona)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 250,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Neighbourhoodin(LawtonPark,Seattle)",
      "all x.(Citizenof(x,LawtonPark) -> Usezipcode(x,Number98199))",
      "Citizenof(Tom,LawtonPark)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 251,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Neighbourhoodin(LawtonPark,Seattle)",
      "all x.(Citizenof(x,LawtonPark) -> Usezipcode(x,Number98199))",
      "Citizenof(Tom,LawtonPark)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 252,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Neighbourhoodin(LawtonPark,Seattle)",
      "all x.(Citizenof(x,LawtonPark) -> Usezipcode(x,Number98199))",
      "Citizenof(Tom,LawtonPark)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 253,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Neighbourhoodin(LawtonPark,Seattle)",
      "all x.(Citizenof(x,LawtonPark) -> Usezipcode(x,Number98199))",
      "Citizenof(Tom,LawtonPark)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 262,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((IsLegislator(x) & StealsFunds(x)) -> Suspended(x))",
      "IsLegislator(TiffanyTAlston)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 263,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((IsLegislator(x) & StealsFunds(x)) -> Suspended(x))",
      "IsLegislator(TiffanyTAlston)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 264,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((IsLegislator(x) & StealsFunds(x)) -> Suspended(x))",
      "IsLegislator(TiffanyTAlston)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 494,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x y.(Fish(x) -> Sting(x,y))",
      "Fish(Stonefish)",
      "all x.(StepOn(Stonefish,x) -> Sting(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & -Treated(x)) -> CauseDeath(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 495,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x y.(Fish(x) -> Sting(x,y))",
      "Fish(Stonefish)",
      "all x.(StepOn(Stonefish,x) -> Sting(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & -Treated(x)) -> CauseDeath(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 496,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x y.(Fish(x) -> Sting(x,y))",
      "Fish(Stonefish)",
      "all x.(StepOn(Stonefish,x) -> Sting(Stonefish,x))",
      "all x.((Sting(Stonefish,x) & -Treated(x)) -> CauseDeath(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1178,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1179,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1180,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1181,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1182,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1010,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meat(x) | Vegetarian(x))",
      "all x.(Meat(x) -> Hamburgers(x))",
      "all x.(Vegetarian(x) -> Conscious(x))",
      "all x.(Conscious(x) -> -FastFood(x))",
      "all x.(Busy(x) -> FastFood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1011,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meat(x) | Vegetarian(x))",
      "all x.(Meat(x) -> Hamburgers(x))",
      "all x.(Vegetarian(x) -> Conscious(x))",
      "all x.(Conscious(x) -> -FastFood(x))",
      "all x.(Busy(x) -> FastFood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1012,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meat(x) | Vegetarian(x))",
      "all x.(Meat(x) -> Hamburgers(x))",
      "all x.(Vegetarian(x) -> Conscious(x))",
      "all x.(Conscious(x) -> -FastFood(x))",
      "all x.(Busy(x) -> FastFood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 521,
    "flag": "parsing error",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 522,
    "flag": "parsing error",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 523,
    "flag": "parsing error",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 703,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Rabbit(x) -> HasFur(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1390,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(App(x) -> Software(x))",
      "all x.(Youtube(x) -> App(x))",
      "all x.(Youtube(x) | Instagram(x))",
      "all x.(Instagram(x) -> Entertainment(x))",
      "all x.(Software(x) -> Program(x))",
      "all x.(Entertainment(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1391,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(App(x) -> Software(x))",
      "all x.(Youtube(x) -> App(x))",
      "all x.(Youtube(x) | Instagram(x))",
      "all x.(Instagram(x) -> Entertainment(x))",
      "all x.(Software(x) -> Program(x))",
      "all x.(Entertainment(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1392,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(App(x) -> Software(x))",
      "all x.(Youtube(x) -> App(x))",
      "all x.(Youtube(x) | Instagram(x))",
      "all x.(Instagram(x) -> Entertainment(x))",
      "all x.(Software(x) -> Program(x))",
      "all x.(Entertainment(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1393,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(App(x) -> Software(x))",
      "all x.(Youtube(x) -> App(x))",
      "all x.(Youtube(x) | Instagram(x))",
      "all x.(Instagram(x) -> Entertainment(x))",
      "all x.(Software(x) -> Program(x))",
      "all x.(Entertainment(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 317,
    "flag": "None goal or assumptions",
    "assumptions": [
      "UnincorporatedCommunity(Ordinary)",
      "(In(Ordinary,Elliotcounty) & On(Ordinary,Kentuckyroute32))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 318,
    "flag": "None goal or assumptions",
    "assumptions": [
      "UnincorporatedCommunity(Ordinary)",
      "(In(Ordinary,Elliotcounty) & On(Ordinary,Kentuckyroute32))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 926,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YoungAdult(x) -> GoOnDiet(x))",
      "all x.(CollegeStudent(x) -> YoungAdult(x))",
      "all x.(YaleStudent(x) -> CollegeStudent(x))",
      "all x.(YaleStudent(x) | HarvardStudent(x))",
      "all x.(HarvardStudent(x) -> Diligent(x))",
      "(HarvardStudent(Susan) -> YoungAdult(Susan))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 927,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YoungAdult(x) -> GoOnDiet(x))",
      "all x.(CollegeStudent(x) -> YoungAdult(x))",
      "all x.(YaleStudent(x) -> CollegeStudent(x))",
      "all x.(YaleStudent(x) | HarvardStudent(x))",
      "all x.(HarvardStudent(x) -> Diligent(x))",
      "(HarvardStudent(Susan) -> YoungAdult(Susan))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 928,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YoungAdult(x) -> GoOnDiet(x))",
      "all x.(CollegeStudent(x) -> YoungAdult(x))",
      "all x.(YaleStudent(x) -> CollegeStudent(x))",
      "all x.(YaleStudent(x) | HarvardStudent(x))",
      "all x.(HarvardStudent(x) -> Diligent(x))",
      "(HarvardStudent(Susan) -> YoungAdult(Susan))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 432,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 433,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 918,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Athlete(x) -> GoodAtSports(x))",
      "all x.(OlympicGoldMedalWinner(x) -> Athlete(x))",
      "all x.(Scientist(x) -> -GoodAtSports(x))",
      "all x.(NobelLaureate(x) -> Scientist(x))",
      "(GoodAtSports(Amy) | OlympicGoldMedalWinner(Amy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 919,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Athlete(x) -> GoodAtSports(x))",
      "all x.(OlympicGoldMedalWinner(x) -> Athlete(x))",
      "all x.(Scientist(x) -> -GoodAtSports(x))",
      "all x.(NobelLaureate(x) -> Scientist(x))",
      "(GoodAtSports(Amy) | OlympicGoldMedalWinner(Amy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 920,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Athlete(x) -> GoodAtSports(x))",
      "all x.(OlympicGoldMedalWinner(x) -> Athlete(x))",
      "all x.(Scientist(x) -> -GoodAtSports(x))",
      "all x.(NobelLaureate(x) -> Scientist(x))",
      "(GoodAtSports(Amy) | OlympicGoldMedalWinner(Amy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1147,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RedFruit(x) -> VC(x))",
      "all x.(Apple(x) -> RedFruit(x))",
      "all x.(VC(x) -> Benefit(x))",
      "all x.(Benefit(x) -> -WarningList(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1148,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RedFruit(x) -> VC(x))",
      "all x.(Apple(x) -> RedFruit(x))",
      "all x.(VC(x) -> Benefit(x))",
      "all x.(Benefit(x) -> -WarningList(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1149,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RedFruit(x) -> VC(x))",
      "all x.(Apple(x) -> RedFruit(x))",
      "all x.(VC(x) -> Benefit(x))",
      "all x.(Benefit(x) -> -WarningList(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1150,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RedFruit(x) -> VC(x))",
      "all x.(Apple(x) -> RedFruit(x))",
      "all x.(VC(x) -> Benefit(x))",
      "all x.(Benefit(x) -> -WarningList(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1151,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RedFruit(x) -> VC(x))",
      "all x.(Apple(x) -> RedFruit(x))",
      "all x.(VC(x) -> Benefit(x))",
      "all x.(Benefit(x) -> -WarningList(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1207,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meta(x) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -Bus(x))",
      "all x.(Bus(x) | Drive(x))",
      "all x.(HaveCars(x) -> Drive(x))",
      "all x.(Student(x) -> -Drive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1208,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meta(x) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -Bus(x))",
      "all x.(Bus(x) | Drive(x))",
      "all x.(HaveCars(x) -> Drive(x))",
      "all x.(Student(x) -> -Drive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1209,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meta(x) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -Bus(x))",
      "all x.(Bus(x) | Drive(x))",
      "all x.(HaveCars(x) -> Drive(x))",
      "all x.(Student(x) -> -Drive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1210,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meta(x) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -Bus(x))",
      "all x.(Bus(x) | Drive(x))",
      "all x.(HaveCars(x) -> Drive(x))",
      "all x.(Student(x) -> -Drive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1211,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meta(x) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -Bus(x))",
      "all x.(Bus(x) | Drive(x))",
      "all x.(HaveCars(x) -> Drive(x))",
      "all x.(Student(x) -> -Drive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1212,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Meta(x) -> HighIncome(x))",
      "all x.(HighIncome(x) -> -Bus(x))",
      "all x.(Bus(x) | Drive(x))",
      "all x.(HaveCars(x) -> Drive(x))",
      "all x.(Student(x) -> -Drive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1202,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Park(x) & -Movies(x)) | (-Park(x) & Movies(x)))",
      "all x.(Nature(x) -> -FreeTime(x))",
      "all x.(Movies(x) -> Nature(x))",
      "all x.(NoClass(x) -> FreeTime(x))",
      "all x.(SummerCamp(x) -> NoClass(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1203,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Park(x) & -Movies(x)) | (-Park(x) & Movies(x)))",
      "all x.(Nature(x) -> -FreeTime(x))",
      "all x.(Movies(x) -> Nature(x))",
      "all x.(NoClass(x) -> FreeTime(x))",
      "all x.(SummerCamp(x) -> NoClass(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 713,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(TelevisionStar(x) -> -CertifiedPublicAccoutant(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1174,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Math(x) & Chemistry(x))",
      "all x.(Chemistry(x) -> Experiment(x))",
      "all x.(Experiment(x) -> Planning(x))",
      "all x.(Planning(x) -> -Award(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1175,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Math(x) & Chemistry(x))",
      "all x.(Chemistry(x) -> Experiment(x))",
      "all x.(Experiment(x) -> Planning(x))",
      "all x.(Planning(x) -> -Award(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1176,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Math(x) & Chemistry(x))",
      "all x.(Chemistry(x) -> Experiment(x))",
      "all x.(Experiment(x) -> Planning(x))",
      "all x.(Planning(x) -> -Award(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1177,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Math(x) & Chemistry(x))",
      "all x.(Chemistry(x) -> Experiment(x))",
      "all x.(Experiment(x) -> Planning(x))",
      "all x.(Planning(x) -> -Award(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 69,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((Easy(x) & -Hard(x)) | (-Easy(x) & Hard(x)))",
      "all x.(Starred(x) -> Hard(x))",
      "Recommended(Twosum)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 70,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((Easy(x) & -Hard(x)) | (-Easy(x) & Hard(x)))",
      "all x.(Starred(x) -> Hard(x))",
      "Recommended(Twosum)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 71,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((Easy(x) & -Hard(x)) | (-Easy(x) & Hard(x)))",
      "all x.(Starred(x) -> Hard(x))",
      "Recommended(Twosum)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 692,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Rent(x,Car) -> Spend(x,Money))",
      "(GoesTo(Sarah,Vermont) -> DriveTo(Sarah,Vermont))",
      "all x y.((((-Own(x,Car) & DriveTo(x,y)) -> Borrow(x,Car)) & -Rent(x,Car)) | (-((-Own(x,Car) & DriveTo(x,y)) -> Borrow(x,Car)) & Rent(x,Car)))",
      "-Own(Sarah,Car)",
      "all x.(Camping(Sarah,x) -> -Borrow(Sarah,Car))",
      "Camping(Sarah,Vermont)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1013,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Weddings(x) -> GettingMarried(x))",
      "all x.(PreTeen(x) -> -GettingMarried(x))",
      "all x.(Celebrating(x) -> Weddings(x))",
      "all x.(LargeGathering(x) -> Celebrating(x))",
      "all x.(Outgoing(x) -> LargeGathering(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1014,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Weddings(x) -> GettingMarried(x))",
      "all x.(PreTeen(x) -> -GettingMarried(x))",
      "all x.(Celebrating(x) -> Weddings(x))",
      "all x.(LargeGathering(x) -> Celebrating(x))",
      "all x.(Outgoing(x) -> LargeGathering(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1015,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Weddings(x) -> GettingMarried(x))",
      "all x.(PreTeen(x) -> -GettingMarried(x))",
      "all x.(Celebrating(x) -> Weddings(x))",
      "all x.(LargeGathering(x) -> Celebrating(x))",
      "all x.(Outgoing(x) -> LargeGathering(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1073,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1074,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1075,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1076,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1077,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1078,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1079,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1080,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 714,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(AdvocateOfHighTariff(x) -> Republican(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 886,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Athlete(x) -> -SlowRunner(x))",
      "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(KnicksPlayer(x) -> NBAPlayer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 887,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Athlete(x) -> -SlowRunner(x))",
      "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(KnicksPlayer(x) -> NBAPlayer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 888,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Athlete(x) -> -SlowRunner(x))",
      "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "all x.(KnicksPlayer(x) -> NBAPlayer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 915,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kid(x) -> LoveAnimals(x))",
      "all x.(Toddler(x) -> Kid(x))",
      "all x.(LoveAnimals(x) -> -Bad(x))",
      "all x.(Pirate(x) -> Bad(x))",
      "(-Pirate(Nancy) -> LoveAnimals(Nancy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 916,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kid(x) -> LoveAnimals(x))",
      "all x.(Toddler(x) -> Kid(x))",
      "all x.(LoveAnimals(x) -> -Bad(x))",
      "all x.(Pirate(x) -> Bad(x))",
      "(-Pirate(Nancy) -> LoveAnimals(Nancy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 917,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kid(x) -> LoveAnimals(x))",
      "all x.(Toddler(x) -> Kid(x))",
      "all x.(LoveAnimals(x) -> -Bad(x))",
      "all x.(Pirate(x) -> Bad(x))",
      "(-Pirate(Nancy) -> LoveAnimals(Nancy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 202,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DirectedBy(After_Tiller,Lana_Wilson) & DirectedBy(The_Departure,Lana_Wilson) & DirectedBy(Miss_Americana,Lana_Wilson))",
      "all x.exists y.(DirectedBy(y,x) -> Filmmaker(x))",
      "IsDocumentary(After_Tiller)",
      "all x.(IsDocumentary(x) -> IsFilm(x))",
      "FromCity(Lana_Wilson,Kirkland)",
      "CityCountry(Kirkland,Us)",
      "all x y z.((FromCity(x,y) & CityCountry(y,z)) -> FromCountry(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 203,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DirectedBy(After_Tiller,Lana_Wilson) & DirectedBy(The_Departure,Lana_Wilson) & DirectedBy(Miss_Americana,Lana_Wilson))",
      "all x.exists y.(DirectedBy(y,x) -> Filmmaker(x))",
      "IsDocumentary(After_Tiller)",
      "all x.(IsDocumentary(x) -> IsFilm(x))",
      "FromCity(Lana_Wilson,Kirkland)",
      "CityCountry(Kirkland,Us)",
      "all x y z.((FromCity(x,y) & CityCountry(y,z)) -> FromCountry(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 204,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DirectedBy(After_Tiller,Lana_Wilson) & DirectedBy(The_Departure,Lana_Wilson) & DirectedBy(Miss_Americana,Lana_Wilson))",
      "all x.exists y.(DirectedBy(y,x) -> Filmmaker(x))",
      "IsDocumentary(After_Tiller)",
      "all x.(IsDocumentary(x) -> IsFilm(x))",
      "FromCity(Lana_Wilson,Kirkland)",
      "CityCountry(Kirkland,Us)",
      "all x y z.((FromCity(x,y) & CityCountry(y,z)) -> FromCountry(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 730,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Bear(x) & InZoo(x)) -> -Wild(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 166,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Leader(x) -> InMonarchy(x))",
      "all x.(((Leader(x) -> King(x)) & -Queen(x)) | (-(Leader(x) -> King(x)) & Queen(x)))",
      "all x.(Queen(x) -> Female(x))",
      "all x.(King(x) -> Male(x))",
      "Queen(Elizabeth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 167,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Leader(x) -> InMonarchy(x))",
      "all x.(((Leader(x) -> King(x)) & -Queen(x)) | (-(Leader(x) -> King(x)) & Queen(x)))",
      "all x.(Queen(x) -> Female(x))",
      "all x.(King(x) -> Male(x))",
      "Queen(Elizabeth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 168,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Leader(x) -> InMonarchy(x))",
      "all x.(((Leader(x) -> King(x)) & -Queen(x)) | (-(Leader(x) -> King(x)) & Queen(x)))",
      "all x.(Queen(x) -> Female(x))",
      "all x.(King(x) -> Male(x))",
      "Queen(Elizabeth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 981,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Matcha(x) -> -Late(x))",
      "all x.(California(x) -> Matcha(x))",
      "all x.(Celebrities(x) -> Late(x))",
      "all x.(Jobs(x) -> Celebrities(x))",
      "all x.(WorkHome(x) -> Jobs(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 982,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Matcha(x) -> -Late(x))",
      "all x.(California(x) -> Matcha(x))",
      "all x.(Celebrities(x) -> Late(x))",
      "all x.(Jobs(x) -> Celebrities(x))",
      "all x.(WorkHome(x) -> Jobs(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 983,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Matcha(x) -> -Late(x))",
      "all x.(California(x) -> Matcha(x))",
      "all x.(Celebrities(x) -> Late(x))",
      "all x.(Jobs(x) -> Celebrities(x))",
      "all x.(WorkHome(x) -> Jobs(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 54,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(English(ThomasBarber) & ProfessionalFootballer(ThomasBarber))",
      "PlayedInTheFootballLeagueFor(ThomasBarber,AstonVilla)",
      "(PlayedAs(ThomasBarber,AHalfBack) & PlayedAs(ThomasBarber,AnInsideLeft))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 55,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(English(ThomasBarber) & ProfessionalFootballer(ThomasBarber))",
      "PlayedInTheFootballLeagueFor(ThomasBarber,AstonVilla)",
      "(PlayedAs(ThomasBarber,AHalfBack) & PlayedAs(ThomasBarber,AnInsideLeft))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 56,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(English(ThomasBarber) & ProfessionalFootballer(ThomasBarber))",
      "PlayedInTheFootballLeagueFor(ThomasBarber,AstonVilla)",
      "(PlayedAs(ThomasBarber,AHalfBack) & PlayedAs(ThomasBarber,AnInsideLeft))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 467,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "(Play(Peter,Piano) & Play(Peter,Violin))",
      "PlayInConcert(Peter,Piano)",
      "(PlayerInConcert(Peter) & PlayerInConcert(Oliver))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 468,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "(Play(Peter,Piano) & Play(Peter,Violin))",
      "PlayInConcert(Peter,Piano)",
      "(PlayerInConcert(Peter) & PlayerInConcert(Oliver))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 469,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "(Play(Peter,Piano) & Play(Peter,Violin))",
      "PlayInConcert(Peter,Piano)",
      "(PlayerInConcert(Peter) & PlayerInConcert(Oliver))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1312,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(GoesUnderwater(x) -> EnjoysWater(x))",
      "all x.(CanSwim(x) -> GoesUnderwater(x))",
      "all x.(CanSwim(x) | CanWalk(x))",
      "all x.(CanWalk(x) -> TravelsOnLand(x))",
      "all x.(EnjoysWater(x) -> Splashes(x))",
      "all x.(TravelsOnLand(x) -> EnjoysBasking(x))",
      "(Splashes(George) & CanSwim(George))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1313,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(GoesUnderwater(x) -> EnjoysWater(x))",
      "all x.(CanSwim(x) -> GoesUnderwater(x))",
      "all x.(CanSwim(x) | CanWalk(x))",
      "all x.(CanWalk(x) -> TravelsOnLand(x))",
      "all x.(EnjoysWater(x) -> Splashes(x))",
      "all x.(TravelsOnLand(x) -> EnjoysBasking(x))",
      "(Splashes(George) & CanSwim(George))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1314,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(GoesUnderwater(x) -> EnjoysWater(x))",
      "all x.(CanSwim(x) -> GoesUnderwater(x))",
      "all x.(CanSwim(x) | CanWalk(x))",
      "all x.(CanWalk(x) -> TravelsOnLand(x))",
      "all x.(EnjoysWater(x) -> Splashes(x))",
      "all x.(TravelsOnLand(x) -> EnjoysBasking(x))",
      "(Splashes(George) & CanSwim(George))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 673,
    "flag": "None goal or assumptions",
    "assumptions": [
      "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(CancerBiology)",
      "PValue(CancerResearchers,TheImportanceOfSubstitutionsToCancerGrowth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 674,
    "flag": "None goal or assumptions",
    "assumptions": [
      "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(CancerBiology)",
      "PValue(CancerResearchers,TheImportanceOfSubstitutionsToCancerGrowth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 675,
    "flag": "None goal or assumptions",
    "assumptions": [
      "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(CancerBiology)",
      "PValue(CancerResearchers,TheImportanceOfSubstitutionsToCancerGrowth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 676,
    "flag": "None goal or assumptions",
    "assumptions": [
      "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(CancerBiology)",
      "PValue(CancerResearchers,TheImportanceOfSubstitutionsToCancerGrowth)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1407,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dispensable(x) -> EnvironmentFriendly(x))",
      "all x.(Woodware(x) -> Dispensable(x))",
      "all x.(Paper(x) -> Woodware(x))",
      "all x.(Good(x) -> -Bad(x))",
      "all x.(EnvironmentFriendly(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1408,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dispensable(x) -> EnvironmentFriendly(x))",
      "all x.(Woodware(x) -> Dispensable(x))",
      "all x.(Paper(x) -> Woodware(x))",
      "all x.(Good(x) -> -Bad(x))",
      "all x.(EnvironmentFriendly(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1409,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dispensable(x) -> EnvironmentFriendly(x))",
      "all x.(Woodware(x) -> Dispensable(x))",
      "all x.(Paper(x) -> Woodware(x))",
      "all x.(Good(x) -> -Bad(x))",
      "all x.(EnvironmentFriendly(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1410,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dispensable(x) -> EnvironmentFriendly(x))",
      "all x.(Woodware(x) -> Dispensable(x))",
      "all x.(Paper(x) -> Woodware(x))",
      "all x.(Good(x) -> -Bad(x))",
      "all x.(EnvironmentFriendly(x) -> Good(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 702,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Reptile(x) -> -HasFur(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 178,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 179,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 180,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1309,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ColdBlooded(x) -> -Bird(x))",
      "all x.(Reptile(x) -> ColdBlooded(x))",
      "all x.(Bird(x) | EatOtherAnimals(x))",
      "all x.(EatOtherAnimals(x) -> Carnivore(x))",
      "(-ColdBlooded(Ron) & -Carnivore(Ron))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1310,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ColdBlooded(x) -> -Bird(x))",
      "all x.(Reptile(x) -> ColdBlooded(x))",
      "all x.(Bird(x) | EatOtherAnimals(x))",
      "all x.(EatOtherAnimals(x) -> Carnivore(x))",
      "(-ColdBlooded(Ron) & -Carnivore(Ron))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1311,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ColdBlooded(x) -> -Bird(x))",
      "all x.(Reptile(x) -> ColdBlooded(x))",
      "all x.(Bird(x) | EatOtherAnimals(x))",
      "all x.(EatOtherAnimals(x) -> Carnivore(x))",
      "(-ColdBlooded(Ron) & -Carnivore(Ron))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 222,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(Species(x,Ambiortus) -> AmbiortusDementjevi(x))",
      "all x.(AmbiortusDementjevi(x) -> Lived(x,Mongolregion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 223,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(Species(x,Ambiortus) -> AmbiortusDementjevi(x))",
      "all x.(AmbiortusDementjevi(x) -> Lived(x,Mongolregion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 224,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(Species(x,Ambiortus) -> AmbiortusDementjevi(x))",
      "all x.(AmbiortusDementjevi(x) -> Lived(x,Mongolregion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 225,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Prehistoric(Ambiortus) & BirdGenus(Ambiortus))",
      "all x.(Species(x,Ambiortus) -> AmbiortusDementjevi(x))",
      "all x.(AmbiortusDementjevi(x) -> Lived(x,Mongolregion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1294,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UseFootball(x) -> ThrowFootball(x))",
      "all x.(PlayFootball(x) -> UseFootball(x))",
      "all x.(BasketballPlayer(x) | PlayFootball(x))",
      "all x.(BasketballPlayer(x) -> Tall(x))",
      "all x.(ThrowFootball(x) -> ThrowFootballSpiral(x))",
      "all x.(Tall(x) -> InShape(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1295,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UseFootball(x) -> ThrowFootball(x))",
      "all x.(PlayFootball(x) -> UseFootball(x))",
      "all x.(BasketballPlayer(x) | PlayFootball(x))",
      "all x.(BasketballPlayer(x) -> Tall(x))",
      "all x.(ThrowFootball(x) -> ThrowFootballSpiral(x))",
      "all x.(Tall(x) -> InShape(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1296,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UseFootball(x) -> ThrowFootball(x))",
      "all x.(PlayFootball(x) -> UseFootball(x))",
      "all x.(BasketballPlayer(x) | PlayFootball(x))",
      "all x.(BasketballPlayer(x) -> Tall(x))",
      "all x.(ThrowFootball(x) -> ThrowFootballSpiral(x))",
      "all x.(Tall(x) -> InShape(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 7,
    "flag": "None goal or assumptions",
    "assumptions": [
      "CurrentName(Fortticonderoga,Fortcarillon)",
      "Built(Pierrederigauddevaudreuil,Fortcarillon)",
      "LocatedIn(Fortcarillon,Newfrance)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 8,
    "flag": "None goal or assumptions",
    "assumptions": [
      "CurrentName(Fortticonderoga,Fortcarillon)",
      "Built(Pierrederigauddevaudreuil,Fortcarillon)",
      "LocatedIn(Fortcarillon,Newfrance)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 9,
    "flag": "None goal or assumptions",
    "assumptions": [
      "CurrentName(Fortticonderoga,Fortcarillon)",
      "Built(Pierrederigauddevaudreuil,Fortcarillon)",
      "LocatedIn(Fortcarillon,Newfrance)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 845,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 846,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 847,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1420,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1421,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1422,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1423,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Song(x) -> -Visual(x))",
      "all x.(FolkSong(x) -> Song(x))",
      "all x.(Video(x) -> Visual(x))",
      "all x.(Movie(x) -> Video(x))",
      "all x.(ScifiMovie(x) -> Movie(x))",
      "ScifiMovie(Inception)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1065,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Extroverts(x) -> OvertlyExpressive(x))",
      "all x.(Extroverts(x) | Introverts(x))",
      "all x.(Introverts(x) -> ShyAndReticentPerson(x))",
      "all x.(ShyAndReticentPerson(x) -> -LikeToTalkToStrangers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1066,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Extroverts(x) -> OvertlyExpressive(x))",
      "all x.(Extroverts(x) | Introverts(x))",
      "all x.(Introverts(x) -> ShyAndReticentPerson(x))",
      "all x.(ShyAndReticentPerson(x) -> -LikeToTalkToStrangers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1067,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Extroverts(x) -> OvertlyExpressive(x))",
      "all x.(Extroverts(x) | Introverts(x))",
      "all x.(Introverts(x) -> ShyAndReticentPerson(x))",
      "all x.(ShyAndReticentPerson(x) -> -LikeToTalkToStrangers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1138,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1139,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1140,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1141,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1142,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1143,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1144,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1145,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1146,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(LowScore(x) -> -TopPlayer(x))",
      "all x.(TopPlayer(x) | ThreePointer(x))",
      "all x.(ThreePointer(x) -> TwoPointer(x))",
      "all x.(TwoPointer(x) -> -BadMid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 720,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Plant(x) -> -Fungi(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 740,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Road(x) -> -Clean(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 632,
    "flag": "None goal or assumptions",
    "assumptions": [
      "On(Newyorkcity,Eastcoast)",
      "On(Seattle,Westcoast)",
      "all x y z.((TravelingFrom(x,y) & On(y,Eastcoast) & TravelingTo(x,z) & On(z,Westcoast)) -> On(x))",
      "exists x.(-InFirstClass(x) & TravelingFrom(x,Newyorkcity) & TravelingTo(x,Seattle))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 356,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Musician(x) -> Busy(x))",
      "(Musician(SinghKaur) & Famous(SinghKaur))",
      "all x.((Musician(x) & -Famous(x)) -> -MakeMoney(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 357,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Musician(x) -> Busy(x))",
      "(Musician(SinghKaur) & Famous(SinghKaur))",
      "all x.((Musician(x) & -Famous(x)) -> -MakeMoney(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 358,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Musician(x) -> Busy(x))",
      "(Musician(SinghKaur) & Famous(SinghKaur))",
      "all x.((Musician(x) & -Famous(x)) -> -MakeMoney(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 733,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Building(x) -> -Tall(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 376,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Cat(Garfield) & MainCharacterGarfield(Garfield) & BeOrange(Garfield) & BeFat(Garfield) & LikeLasagna(Garfield))",
      "(Pet(Garfield,Jon) & Pet(Odie,Jon) & ShareHome(Garfield,Odie))",
      "Hate(Garfield,Odie)",
      "all x y.exists z.(((Pet(x,z) & Pet(y,z) & Hate(x,y)) -> BeChildish(x)) & BePossessive(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1377,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Human(x) -> Eat(x))",
      "all x.(Eat(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1378,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Human(x) -> Eat(x))",
      "all x.(Eat(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1379,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Human(x) -> Eat(x))",
      "all x.(Eat(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1380,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Human(x) -> Eat(x))",
      "all x.(Eat(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1381,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Human(x) -> Eat(x))",
      "all x.(Eat(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1382,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Human(x) -> Eat(x))",
      "all x.(Eat(x) -> -Plant(x))",
      "all x.(Plant(x) | Animal(x))",
      "all x.(Goat(x) -> Animal(x))",
      "all x.(Dirt(x) -> -Animal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 136,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ControlledSubstances(x) -> Drugs(x))",
      "exists x x.(ControlledSubstances(x) & ControlledSubstances(y) & Beneficial(x) & Harmful(y))",
      "all x y.(ExposedToControlledSubstance(x,y) -> ChemicalEndangerment(x))",
      "all x.(ChemicalEndangerment(x) -> Harmful(x))",
      "(PassedIn(ControlledSubstancesAct,Year1971) & Act(ControlledSubstancesAct))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 137,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ControlledSubstances(x) -> Drugs(x))",
      "exists x x.(ControlledSubstances(x) & ControlledSubstances(y) & Beneficial(x) & Harmful(y))",
      "all x y.(ExposedToControlledSubstance(x,y) -> ChemicalEndangerment(x))",
      "all x.(ChemicalEndangerment(x) -> Harmful(x))",
      "(PassedIn(ControlledSubstancesAct,Year1971) & Act(ControlledSubstancesAct))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 138,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ControlledSubstances(x) -> Drugs(x))",
      "exists x x.(ControlledSubstances(x) & ControlledSubstances(y) & Beneficial(x) & Harmful(y))",
      "all x y.(ExposedToControlledSubstance(x,y) -> ChemicalEndangerment(x))",
      "all x.(ChemicalEndangerment(x) -> Harmful(x))",
      "(PassedIn(ControlledSubstancesAct,Year1971) & Act(ControlledSubstancesAct))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 821,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 822,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 823,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 573,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Kitchen(x) -> Up(x)) & -Down(x)) | (-(Kitchen(x) -> Up(x)) & Down(x)))",
      "((Cook(Downstairs) & -Run(Ac)) -> Smokey(FirstFloor))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 574,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Kitchen(x) -> Up(x)) & -Down(x)) | (-(Kitchen(x) -> Up(x)) & Down(x)))",
      "((Cook(Downstairs) & -Run(Ac)) -> Smokey(FirstFloor))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 575,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Kitchen(x) -> Up(x)) & -Down(x)) | (-(Kitchen(x) -> Up(x)) & Down(x)))",
      "((Cook(Downstairs) & -Run(Ac)) -> Smokey(FirstFloor))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 377,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Locate(Nyc,Usa)",
      "Locate(Usa,NorthAmerica)",
      "Locate(NorthAmerica,WestHemisphere)",
      "HighlyDeveloped(Nyc)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 378,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Locate(Nyc,Usa)",
      "Locate(Usa,NorthAmerica)",
      "Locate(NorthAmerica,WestHemisphere)",
      "HighlyDeveloped(Nyc)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 379,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Locate(Nyc,Usa)",
      "Locate(Usa,NorthAmerica)",
      "Locate(NorthAmerica,WestHemisphere)",
      "HighlyDeveloped(Nyc)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 429,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Poem(Callus4) & WrittenBy(Callus4,Catullus) & Roman(Catullus))",
      "RetirementShip(Callus4)",
      "(Poem(Callus4) -> AgingAnalogy(Callus4))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 430,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Poem(Callus4) & WrittenBy(Callus4,Catullus) & Roman(Catullus))",
      "RetirementShip(Callus4)",
      "(Poem(Callus4) -> AgingAnalogy(Callus4))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 431,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Poem(Callus4) & WrittenBy(Callus4,Catullus) & Roman(Catullus))",
      "RetirementShip(Callus4)",
      "(Poem(Callus4) -> AgingAnalogy(Callus4))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 671,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TVSeries(Westworld) & American(Westworld) & ScienceFictionThriller(Westworld))",
      "Debut(Westworld,Year2016)",
      "exists x.(Adapt(Westworld,x) & Produce(x,Year1973) & Write(Michael,x) & Direct(Michael,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 672,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TVSeries(Westworld) & American(Westworld) & ScienceFictionThriller(Westworld))",
      "Debut(Westworld,Year2016)",
      "exists x.(Adapt(Westworld,x) & Produce(x,Year1973) & Write(Michael,x) & Direct(Michael,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 659,
    "flag": "None goal or assumptions",
    "assumptions": [
      "HeldIn(Summer2008olympics,Beijingchina)",
      "SecondToBe(Summer2008olympics,Heldincommuniststate)",
      "Won(China,Mostgoldmedals)",
      "(Placed(Unitedstates,Secondingoldmedals) & Won(Unitedstates,Highestnumberofmedals))",
      "Placed(Russia,Thirdingoldmedals)",
      "all x y.((Placed(x,Thirdingoldmedals) & Won(y,Mostgoldmedals)) -> FewerGoldMedalsThan(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 660,
    "flag": "None goal or assumptions",
    "assumptions": [
      "HeldIn(Summer2008olympics,Beijingchina)",
      "SecondToBe(Summer2008olympics,Heldincommuniststate)",
      "Won(China,Mostgoldmedals)",
      "(Placed(Unitedstates,Secondingoldmedals) & Won(Unitedstates,Highestnumberofmedals))",
      "Placed(Russia,Thirdingoldmedals)",
      "all x y.((Placed(x,Thirdingoldmedals) & Won(y,Mostgoldmedals)) -> FewerGoldMedalsThan(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 661,
    "flag": "None goal or assumptions",
    "assumptions": [
      "HeldIn(Summer2008olympics,Beijingchina)",
      "SecondToBe(Summer2008olympics,Heldincommuniststate)",
      "Won(China,Mostgoldmedals)",
      "(Placed(Unitedstates,Secondingoldmedals) & Won(Unitedstates,Highestnumberofmedals))",
      "Placed(Russia,Thirdingoldmedals)",
      "all x y.((Placed(x,Thirdingoldmedals) & Won(y,Mostgoldmedals)) -> FewerGoldMedalsThan(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 78,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DistrictIn(Xiufeng,Guilin) & DistrictIn(Xiangshan,Guilin) & DistrictIn(Diecai,Guilin) & DistrictIn(Qixing,Guilin) & City(Guilin))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 79,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DistrictIn(Xiufeng,Guilin) & DistrictIn(Xiangshan,Guilin) & DistrictIn(Diecai,Guilin) & DistrictIn(Qixing,Guilin) & City(Guilin))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 80,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DistrictIn(Xiufeng,Guilin) & DistrictIn(Xiangshan,Guilin) & DistrictIn(Diecai,Guilin) & DistrictIn(Qixing,Guilin) & City(Guilin))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1004,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Garden(x) -> Space(x))",
      "all x.(Professional(x) -> -Space(x))",
      "all x.(Takeout(x) -> Garden(x))",
      "all x.(GoingOut(x) -> Takeout(x))",
      "all x.(Homecooked(x) -> GoingOut(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1005,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Garden(x) -> Space(x))",
      "all x.(Professional(x) -> -Space(x))",
      "all x.(Takeout(x) -> Garden(x))",
      "all x.(GoingOut(x) -> Takeout(x))",
      "all x.(Homecooked(x) -> GoingOut(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1006,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Garden(x) -> Space(x))",
      "all x.(Professional(x) -> -Space(x))",
      "all x.(Takeout(x) -> Garden(x))",
      "all x.(GoingOut(x) -> Takeout(x))",
      "all x.(Homecooked(x) -> GoingOut(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 184,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Company(x) -> GoogleHome(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> Controlled(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 185,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Company(x) -> GoogleHome(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> Controlled(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 186,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Company(x) -> GoogleHome(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> Controlled(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1135,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Orchestra(x) -> -Touring(x))",
      "all x.((Orchestra(x) & -Unique(x)) | (-Orchestra(x) & Unique(x)))",
      "all x.(Unique(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Capable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1136,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Orchestra(x) -> -Touring(x))",
      "all x.((Orchestra(x) & -Unique(x)) | (-Orchestra(x) & Unique(x)))",
      "all x.(Unique(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Capable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1137,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Orchestra(x) -> -Touring(x))",
      "all x.((Orchestra(x) & -Unique(x)) | (-Orchestra(x) & Unique(x)))",
      "all x.(Unique(x) -> Interesting(x))",
      "all x.(Interesting(x) -> Capable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1411,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Yell(x) -> -Cool(x))",
      "all x.(Angry(x) -> Yell(x))",
      "all x.(Fly(x) -> Cool(x))",
      "all x.(KnowMagic(x) -> Fly(x))",
      "all x.(Wizard(x) -> KnowMagic(x))",
      "((Yell(Harry) & Fly(Harry) & -(-Yell(Harry) & -Fly(Harry))) | (-(Yell(Harry) & Fly(Harry)) & -Yell(Harry) & -Fly(Harry)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1412,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Yell(x) -> -Cool(x))",
      "all x.(Angry(x) -> Yell(x))",
      "all x.(Fly(x) -> Cool(x))",
      "all x.(KnowMagic(x) -> Fly(x))",
      "all x.(Wizard(x) -> KnowMagic(x))",
      "((Yell(Harry) & Fly(Harry) & -(-Yell(Harry) & -Fly(Harry))) | (-(Yell(Harry) & Fly(Harry)) & -Yell(Harry) & -Fly(Harry)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1413,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Yell(x) -> -Cool(x))",
      "all x.(Angry(x) -> Yell(x))",
      "all x.(Fly(x) -> Cool(x))",
      "all x.(KnowMagic(x) -> Fly(x))",
      "all x.(Wizard(x) -> KnowMagic(x))",
      "((Yell(Harry) & Fly(Harry) & -(-Yell(Harry) & -Fly(Harry))) | (-(Yell(Harry) & Fly(Harry)) & -Yell(Harry) & -Fly(Harry)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1414,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Yell(x) -> -Cool(x))",
      "all x.(Angry(x) -> Yell(x))",
      "all x.(Fly(x) -> Cool(x))",
      "all x.(KnowMagic(x) -> Fly(x))",
      "all x.(Wizard(x) -> KnowMagic(x))",
      "((Yell(Harry) & Fly(Harry) & -(-Yell(Harry) & -Fly(Harry))) | (-(Yell(Harry) & Fly(Harry)) & -Yell(Harry) & -Fly(Harry)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1253,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) & -US(x)) | (-China(x) & US(x)))",
      "all x.(China(x) -> Labeled(x))",
      "all x.(US(x) -> SoldInUS(x))",
      "all x.(Labeled(x) -> Cheaper(x))",
      "all x.(SoldInUS(x) -> SoldInWalmart(x))",
      "all x.(DisplayedInHomepage(x) -> SoldInWalmart(x))",
      "all x.(ReturnedByCustomer(x) -> -SoldInWalmart(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1254,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) & -US(x)) | (-China(x) & US(x)))",
      "all x.(China(x) -> Labeled(x))",
      "all x.(US(x) -> SoldInUS(x))",
      "all x.(Labeled(x) -> Cheaper(x))",
      "all x.(SoldInUS(x) -> SoldInWalmart(x))",
      "all x.(DisplayedInHomepage(x) -> SoldInWalmart(x))",
      "all x.(ReturnedByCustomer(x) -> -SoldInWalmart(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1255,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) & -US(x)) | (-China(x) & US(x)))",
      "all x.(China(x) -> Labeled(x))",
      "all x.(US(x) -> SoldInUS(x))",
      "all x.(Labeled(x) -> Cheaper(x))",
      "all x.(SoldInUS(x) -> SoldInWalmart(x))",
      "all x.(DisplayedInHomepage(x) -> SoldInWalmart(x))",
      "all x.(ReturnedByCustomer(x) -> -SoldInWalmart(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1256,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) & -US(x)) | (-China(x) & US(x)))",
      "all x.(China(x) -> Labeled(x))",
      "all x.(US(x) -> SoldInUS(x))",
      "all x.(Labeled(x) -> Cheaper(x))",
      "all x.(SoldInUS(x) -> SoldInWalmart(x))",
      "all x.(DisplayedInHomepage(x) -> SoldInWalmart(x))",
      "all x.(ReturnedByCustomer(x) -> -SoldInWalmart(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1257,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) & -US(x)) | (-China(x) & US(x)))",
      "all x.(China(x) -> Labeled(x))",
      "all x.(US(x) -> SoldInUS(x))",
      "all x.(Labeled(x) -> Cheaper(x))",
      "all x.(SoldInUS(x) -> SoldInWalmart(x))",
      "all x.(DisplayedInHomepage(x) -> SoldInWalmart(x))",
      "all x.(ReturnedByCustomer(x) -> -SoldInWalmart(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 944,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Amazon(x) & -Environmental(x)) | (-Amazon(x) & Environmental(x)))",
      "all x.(Amazon(x) -> DailyMail(x))",
      "all x.(Environmental(x) -> Solar(x))",
      "all x.(DailyMail(x) -> Neighborhood(x))",
      "all x.(Solar(x) -> SaveMoney(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 945,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Amazon(x) & -Environmental(x)) | (-Amazon(x) & Environmental(x)))",
      "all x.(Amazon(x) -> DailyMail(x))",
      "all x.(Environmental(x) -> Solar(x))",
      "all x.(DailyMail(x) -> Neighborhood(x))",
      "all x.(Solar(x) -> SaveMoney(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 497,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Country(Indonesia)",
      "exists x y.((Country(Indonesia) & Prosecutor(x) & Crime(y)) -> InvestigatePersonally(x,y))",
      "Crime(Corruption)",
      "all x y.(((Crime(y) & PoliceCompInves(y) & Prosecutor(x)) -> Evidence(y)) & HandToProsecutor(x,y))",
      "all x.(Crime(x) & Evidence(x) & ((Satisfactory(x) & -Unsatisfactory(x)) | (-Satisfactory(x) & Unsatisfactory(x))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 498,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Country(Indonesia)",
      "exists x y.((Country(Indonesia) & Prosecutor(x) & Crime(y)) -> InvestigatePersonally(x,y))",
      "Crime(Corruption)",
      "all x y.(((Crime(y) & PoliceCompInves(y) & Prosecutor(x)) -> Evidence(y)) & HandToProsecutor(x,y))",
      "all x.(Crime(x) & Evidence(x) & ((Satisfactory(x) & -Unsatisfactory(x)) | (-Satisfactory(x) & Unsatisfactory(x))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 499,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Country(Indonesia)",
      "exists x y.((Country(Indonesia) & Prosecutor(x) & Crime(y)) -> InvestigatePersonally(x,y))",
      "Crime(Corruption)",
      "all x y.(((Crime(y) & PoliceCompInves(y) & Prosecutor(x)) -> Evidence(y)) & HandToProsecutor(x,y))",
      "all x.(Crime(x) & Evidence(x) & ((Satisfactory(x) & -Unsatisfactory(x)) | (-Satisfactory(x) & Unsatisfactory(x))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 901,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 902,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 903,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 904,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BatteryPoweredWatch(x) -> -AutomaticWatch(x))",
      "all x.(DigitalWatch(x) -> BatteryPoweredWatch(x))",
      "exists x.(MechanicalWatch(x) & AutomaticWatch(x))",
      "all x.(SmartWatch(x) -> DigitalWatch(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 691,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "all x.((People(x) & TalentCooking(x)) -> DistinguishCondiments(x))",
      "all x y.((MakeMeal(x,y) & Delicious(y) & People(x)) -> TalentCooking(x))",
      "all x y.((MakeMeal(x,y) & People(x) & Popular(y)) -> Delicious(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 701,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 421,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((VideoGag(x) -> FrenchTelevision(x)) & AirsWeekly(x))",
      "all x.(VideoGag(x) -> ChannelTF1(x))",
      "all x.(FunnyVideos(x) -> AirsWeekly(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 422,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((VideoGag(x) -> FrenchTelevision(x)) & AirsWeekly(x))",
      "all x.(VideoGag(x) -> ChannelTF1(x))",
      "all x.(FunnyVideos(x) -> AirsWeekly(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1386,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Engineer(x) -> Worker(x))",
      "all x.(Worker(x) -> Human(x))",
      "((Engineer(Jack) & -Worker(Jack)) | (-Engineer(Jack) & Worker(Jack)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1387,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Engineer(x) -> Worker(x))",
      "all x.(Worker(x) -> Human(x))",
      "((Engineer(Jack) & -Worker(Jack)) | (-Engineer(Jack) & Worker(Jack)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1388,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Engineer(x) -> Worker(x))",
      "all x.(Worker(x) -> Human(x))",
      "((Engineer(Jack) & -Worker(Jack)) | (-Engineer(Jack) & Worker(Jack)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1389,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Phone(x) -> Thing(x))",
      "all x.(Cellphone(x) -> Phone(x))",
      "all x.(Iphone(x) -> Cellphone(x))",
      "all x.(Engineer(x) -> Worker(x))",
      "all x.(Worker(x) -> Human(x))",
      "((Engineer(Jack) & -Worker(Jack)) | (-Engineer(Jack) & Worker(Jack)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 738,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(IPhone(x) -> Electronic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 111,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Museum(MetropolitanMuseumofArt) & InNYC(MetropolitanMuseumofArt))",
      "(Museum(WhitneyMuseumofAmericanArt) & InNYC(WhitneyMuseumofAmericanArt))",
      "(Museum(MuseumofModernArt) & InNYC(MuseumofModernArt))",
      "(Include(MetropolitanMuseumofArt,ByzantineArt) & Include(MetropolitanMuseumofArt,IslamicArt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 112,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Museum(MetropolitanMuseumofArt) & InNYC(MetropolitanMuseumofArt))",
      "(Museum(WhitneyMuseumofAmericanArt) & InNYC(WhitneyMuseumofAmericanArt))",
      "(Museum(MuseumofModernArt) & InNYC(MuseumofModernArt))",
      "(Include(MetropolitanMuseumofArt,ByzantineArt) & Include(MetropolitanMuseumofArt,IslamicArt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 113,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Museum(MetropolitanMuseumofArt) & InNYC(MetropolitanMuseumofArt))",
      "(Museum(WhitneyMuseumofAmericanArt) & InNYC(WhitneyMuseumofAmericanArt))",
      "(Museum(MuseumofModernArt) & InNYC(MuseumofModernArt))",
      "(Include(MetropolitanMuseumofArt,ByzantineArt) & Include(MetropolitanMuseumofArt,IslamicArt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1122,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Spanish(x) | Francophile(x))",
      "all x.(Francophile(x) -> -SpainFav(x))",
      "all x.(SpainFav(x) | Cheese(x))",
      "-(Cheese(Benji) & Spanish(Benji))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1123,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Spanish(x) | Francophile(x))",
      "all x.(Francophile(x) -> -SpainFav(x))",
      "all x.(SpainFav(x) | Cheese(x))",
      "-(Cheese(Benji) & Spanish(Benji))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1124,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Spanish(x) | Francophile(x))",
      "all x.(Francophile(x) -> -SpainFav(x))",
      "all x.(SpainFav(x) | Cheese(x))",
      "-(Cheese(Benji) & Spanish(Benji))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 84,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Village(Gasteren) & Province(Drenthe) & LocatedIn(Gasteren,Drenthe))",
      "(Province(Drenthe) & Dutch(Drenthe))",
      "all x.(City(x) -> -Village(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 85,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Village(Gasteren) & Province(Drenthe) & LocatedIn(Gasteren,Drenthe))",
      "(Province(Drenthe) & Dutch(Drenthe))",
      "all x.(City(x) -> -Village(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 86,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Village(Gasteren) & Province(Drenthe) & LocatedIn(Gasteren,Drenthe))",
      "(Province(Drenthe) & Dutch(Drenthe))",
      "all x.(City(x) -> -Village(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 603,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Mammal(x) & LayEgg(x)) -> ((Platypuses(x) & -Echidnas(x)) | (-Platypuses(x) & Echidnas(x))))",
      "all x.(Platypuses(x) -> -Hyrax(x))",
      "all x.(Echidnas(x) -> -Hyrax(x))",
      "all x.(Mammal(x) -> -Invertebrate(x))",
      "all x.(((Animal(x) -> Invertebrate(x)) & -Vertebrate(x)) | (-(Animal(x) -> Invertebrate(x)) & Vertebrate(x)))",
      "all x.(Mammal(x) -> Animal(x))",
      "all x.(Hyrax(x) -> Mammal(x))",
      "all x.(Grebes(x) -> LayEgg(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 604,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Mammal(x) & LayEgg(x)) -> ((Platypuses(x) & -Echidnas(x)) | (-Platypuses(x) & Echidnas(x))))",
      "all x.(Platypuses(x) -> -Hyrax(x))",
      "all x.(Echidnas(x) -> -Hyrax(x))",
      "all x.(Mammal(x) -> -Invertebrate(x))",
      "all x.(((Animal(x) -> Invertebrate(x)) & -Vertebrate(x)) | (-(Animal(x) -> Invertebrate(x)) & Vertebrate(x)))",
      "all x.(Mammal(x) -> Animal(x))",
      "all x.(Hyrax(x) -> Mammal(x))",
      "all x.(Grebes(x) -> LayEgg(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 605,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Mammal(x) & LayEgg(x)) -> ((Platypuses(x) & -Echidnas(x)) | (-Platypuses(x) & Echidnas(x))))",
      "all x.(Platypuses(x) -> -Hyrax(x))",
      "all x.(Echidnas(x) -> -Hyrax(x))",
      "all x.(Mammal(x) -> -Invertebrate(x))",
      "all x.(((Animal(x) -> Invertebrate(x)) & -Vertebrate(x)) | (-(Animal(x) -> Invertebrate(x)) & Vertebrate(x)))",
      "all x.(Mammal(x) -> Animal(x))",
      "all x.(Hyrax(x) -> Mammal(x))",
      "all x.(Grebes(x) -> LayEgg(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 271,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Singer(BobbyFlynn) & SongWriter(BobbyFlynn))",
      "(Finished7th(BobbyFlynn) & CompetedOnAustralianIdol(BobbyFlynn))",
      "all x.(CompetedOnAustralianIdol(x) -> AustralianCitizen(x))",
      "MadeNationWideTour2007(TheOmegaThreeBand)",
      "IsMember(BobbyFlynn,TheOmegaThreeBand)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 272,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Singer(BobbyFlynn) & SongWriter(BobbyFlynn))",
      "(Finished7th(BobbyFlynn) & CompetedOnAustralianIdol(BobbyFlynn))",
      "all x.(CompetedOnAustralianIdol(x) -> AustralianCitizen(x))",
      "MadeNationWideTour2007(TheOmegaThreeBand)",
      "IsMember(BobbyFlynn,TheOmegaThreeBand)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 273,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Singer(BobbyFlynn) & SongWriter(BobbyFlynn))",
      "(Finished7th(BobbyFlynn) & CompetedOnAustralianIdol(BobbyFlynn))",
      "all x.(CompetedOnAustralianIdol(x) -> AustralianCitizen(x))",
      "MadeNationWideTour2007(TheOmegaThreeBand)",
      "IsMember(BobbyFlynn,TheOmegaThreeBand)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 718,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Protein(x) -> OrganicCompound(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 296,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 297,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 298,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 359,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Evangeloseleftheriou) & ElectricalEngineer(Evangeloseleftheriou))",
      "(WorkedFor(Evangeloseleftheriou,Ibm) & WorkedIn(Evangeloseleftheriou,Zurich))",
      "all x x z.((Company(x) & WorkedFor(y,x) & WorkedIn(y,z)) -> HasOfficeIn(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 360,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Evangeloseleftheriou) & ElectricalEngineer(Evangeloseleftheriou))",
      "(WorkedFor(Evangeloseleftheriou,Ibm) & WorkedIn(Evangeloseleftheriou,Zurich))",
      "all x x z.((Company(x) & WorkedFor(y,x) & WorkedIn(y,z)) -> HasOfficeIn(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 434,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Song(x) & By(x,Boneym) & N1GermanSingle(x))",
      "(Song(Hooray) & HitEurope(Hooray))",
      "(Song(Hooray) & -N1GermanSingle(Hooray))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 435,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Song(x) & By(x,Boneym) & N1GermanSingle(x))",
      "(Song(Hooray) & HitEurope(Hooray))",
      "(Song(Hooray) & -N1GermanSingle(Hooray))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 436,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Song(x) & By(x,Boneym) & N1GermanSingle(x))",
      "(Song(Hooray) & HitEurope(Hooray))",
      "(Song(Hooray) & -N1GermanSingle(Hooray))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 697,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Chef(x) -> Cook(x))",
      "exists x.(-Chef(x) & Cook(x))",
      "all x.(Cook(x) -> (MakeScrambledEggs(x) & MakePasta(x)))",
      "all x.((MakeCookies(x) & MakeMuffins(x)) -> Baker(x))",
      "all x.((Baker(x) & MakeScrambledEggs(x)) -> MakeGoodBreakfast(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 698,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Chef(x) -> Cook(x))",
      "exists x.(-Chef(x) & Cook(x))",
      "all x.(Cook(x) -> (MakeScrambledEggs(x) & MakePasta(x)))",
      "all x.((MakeCookies(x) & MakeMuffins(x)) -> Baker(x))",
      "all x.((Baker(x) & MakeScrambledEggs(x)) -> MakeGoodBreakfast(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 561,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 562,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 563,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 998,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Gelato(x) -> Italy(x))",
      "all x.-Resist(x)",
      "all x.(Gelato(x) | Travel(x))",
      "all x.(Europe(x) -> -Regret(x))",
      "all x.(Travel(x) -> Europe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 999,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Gelato(x) -> Italy(x))",
      "all x.-Resist(x)",
      "all x.(Gelato(x) | Travel(x))",
      "all x.(Europe(x) -> -Regret(x))",
      "all x.(Travel(x) -> Europe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1000,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Gelato(x) -> Italy(x))",
      "all x.-Resist(x)",
      "all x.(Gelato(x) | Travel(x))",
      "all x.(Europe(x) -> -Regret(x))",
      "all x.(Travel(x) -> Europe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 781,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(StudentVisa(x) -> FullTimeAcademic(x))",
      "all x.(FullTimeAcademic(x) -> -WorkFullTime(x))",
      "all x.(StudyAbroad(x) -> StudentVisa(x))",
      "all x.(PhdGraduate(x) -> WorkFullTime(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 782,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(StudentVisa(x) -> FullTimeAcademic(x))",
      "all x.(FullTimeAcademic(x) -> -WorkFullTime(x))",
      "all x.(StudyAbroad(x) -> StudentVisa(x))",
      "all x.(PhdGraduate(x) -> WorkFullTime(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 783,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(StudentVisa(x) -> FullTimeAcademic(x))",
      "all x.(FullTimeAcademic(x) -> -WorkFullTime(x))",
      "all x.(StudyAbroad(x) -> StudentVisa(x))",
      "all x.(PhdGraduate(x) -> WorkFullTime(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 396,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UsesGAAP(x) -> UsesInstallmentMethod(x))",
      "all x.(UsesAccruralAccounting(x) -> RecognizedWhen(Revenues,Realized))",
      "all x.(UsesCashAccounting(x) -> RecognizedWhen(Revenues,Cashrecieved))",
      "(DevelopedBy(Usgaap,Ussecuritiesandexchangecommission) & UsesGAAP(Ussecuritiesandexchangecommission))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 397,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UsesGAAP(x) -> UsesInstallmentMethod(x))",
      "all x.(UsesAccruralAccounting(x) -> RecognizedWhen(Revenues,Realized))",
      "all x.(UsesCashAccounting(x) -> RecognizedWhen(Revenues,Cashrecieved))",
      "(DevelopedBy(Usgaap,Ussecuritiesandexchangecommission) & UsesGAAP(Ussecuritiesandexchangecommission))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 398,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UsesGAAP(x) -> UsesInstallmentMethod(x))",
      "all x.(UsesAccruralAccounting(x) -> RecognizedWhen(Revenues,Realized))",
      "all x.(UsesCashAccounting(x) -> RecognizedWhen(Revenues,Cashrecieved))",
      "(DevelopedBy(Usgaap,Ussecuritiesandexchangecommission) & UsesGAAP(Ussecuritiesandexchangecommission))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1216,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(HaveVisitWithoutAnyFees(x) -> Respected(x))",
      "all x.(Army(x) -> HaveVisitWithoutAnyFees(x))",
      "all x.(Thief(x) -> Prison(x))",
      "all x.(Prison(x) -> BadRecord(x))",
      "((Thief(James) & -Prison(James)) | (-Thief(James) & Prison(James)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1217,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(HaveVisitWithoutAnyFees(x) -> Respected(x))",
      "all x.(Army(x) -> HaveVisitWithoutAnyFees(x))",
      "all x.(Thief(x) -> Prison(x))",
      "all x.(Prison(x) -> BadRecord(x))",
      "((Thief(James) & -Prison(James)) | (-Thief(James) & Prison(James)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1218,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(HaveVisitWithoutAnyFees(x) -> Respected(x))",
      "all x.(Army(x) -> HaveVisitWithoutAnyFees(x))",
      "all x.(Thief(x) -> Prison(x))",
      "all x.(Prison(x) -> BadRecord(x))",
      "((Thief(James) & -Prison(James)) | (-Thief(James) & Prison(James)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1219,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(Respected(x) -> ContributeToCountry(x))",
      "all x.(HaveVisitWithoutAnyFees(x) -> Respected(x))",
      "all x.(Army(x) -> HaveVisitWithoutAnyFees(x))",
      "all x.(Thief(x) -> Prison(x))",
      "all x.(Prison(x) -> BadRecord(x))",
      "((Thief(James) & -Prison(James)) | (-Thief(James) & Prison(James)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 32,
    "flag": "None goal or assumptions",
    "assumptions": [
      "DrainageBasinOf(Crotonriver,Crotonriver)",
      "In(Crotonriver,Southwesternnewyork)",
      "exists x.(Water(x) & From(x,Crotonriverwatershed) & FlowsTo(x,Bronx))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 33,
    "flag": "None goal or assumptions",
    "assumptions": [
      "DrainageBasinOf(Crotonriver,Crotonriver)",
      "In(Crotonriver,Southwesternnewyork)",
      "exists x.(Water(x) & From(x,Crotonriverwatershed) & FlowsTo(x,Bronx))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 34,
    "flag": "None goal or assumptions",
    "assumptions": [
      "DrainageBasinOf(Crotonriver,Crotonriver)",
      "In(Crotonriver,Southwesternnewyork)",
      "exists x.(Water(x) & From(x,Crotonriverwatershed) & FlowsTo(x,Bronx))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 710,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NuclearPoweredSubmarine(x) -> Warship(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 199,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y z.((AlbumByBand(x,y) & RockBand(y,z)) -> Genre(x,Rock))",
      "all x y z.((AlbumByBand(x,y) & AlbumAward(x,z)) -> RockBandAward(y,z))",
      "AlbumByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)",
      "RockBand(The_Tragically_Hip,Canada)",
      "SongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)",
      "AlbumAward(Trouble_at_the_Henhouse,The_Album_of_the_Year)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 200,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y z.((AlbumByBand(x,y) & RockBand(y,z)) -> Genre(x,Rock))",
      "all x y z.((AlbumByBand(x,y) & AlbumAward(x,z)) -> RockBandAward(y,z))",
      "AlbumByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)",
      "RockBand(The_Tragically_Hip,Canada)",
      "SongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)",
      "AlbumAward(Trouble_at_the_Henhouse,The_Album_of_the_Year)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 201,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y z.((AlbumByBand(x,y) & RockBand(y,z)) -> Genre(x,Rock))",
      "all x y z.((AlbumByBand(x,y) & AlbumAward(x,z)) -> RockBandAward(y,z))",
      "AlbumByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)",
      "RockBand(The_Tragically_Hip,Canada)",
      "SongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)",
      "AlbumAward(Trouble_at_the_Henhouse,The_Album_of_the_Year)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 681,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(SoftwareEngineer(Daniel) & WorksAt(Daniel,PalantirTechnologies))",
      "StudiedBioengineering(Daniel,RiceUniversity)",
      "(WorksAtMeta(DanielsOlderSister) & TechnicalSourcer(DanielsOlderSister))",
      "(GraduatedFromStanfordUniversity(DanielsOlderSister) & GraduatedFromStanfordUniversity(DanielsDad))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 682,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(SoftwareEngineer(Daniel) & WorksAt(Daniel,PalantirTechnologies))",
      "StudiedBioengineering(Daniel,RiceUniversity)",
      "(WorksAtMeta(DanielsOlderSister) & TechnicalSourcer(DanielsOlderSister))",
      "(GraduatedFromStanfordUniversity(DanielsOlderSister) & GraduatedFromStanfordUniversity(DanielsDad))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 683,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(SoftwareEngineer(Daniel) & WorksAt(Daniel,PalantirTechnologies))",
      "StudiedBioengineering(Daniel,RiceUniversity)",
      "(WorksAtMeta(DanielsOlderSister) & TechnicalSourcer(DanielsOlderSister))",
      "(GraduatedFromStanfordUniversity(DanielsOlderSister) & GraduatedFromStanfordUniversity(DanielsDad))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 327,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((CommercialAircraft(x) -> ProducedBy(x,Boeing)) & -ProducedBy(x,Airbus)) | (-(CommercialAircraft(x) -> ProducedBy(x,Boeing)) & ProducedBy(x,Airbus)))",
      "all x.(AmericanAirlinesAircraft(x) -> CommercialAircraft(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 328,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((CommercialAircraft(x) -> ProducedBy(x,Boeing)) & -ProducedBy(x,Airbus)) | (-(CommercialAircraft(x) -> ProducedBy(x,Boeing)) & ProducedBy(x,Airbus)))",
      "all x.(AmericanAirlinesAircraft(x) -> CommercialAircraft(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 329,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((CommercialAircraft(x) -> ProducedBy(x,Boeing)) & -ProducedBy(x,Airbus)) | (-(CommercialAircraft(x) -> ProducedBy(x,Boeing)) & ProducedBy(x,Airbus)))",
      "all x.(AmericanAirlinesAircraft(x) -> CommercialAircraft(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 330,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((CommercialAircraft(x) -> ProducedBy(x,Boeing)) & -ProducedBy(x,Airbus)) | (-(CommercialAircraft(x) -> ProducedBy(x,Boeing)) & ProducedBy(x,Airbus)))",
      "all x.(AmericanAirlinesAircraft(x) -> CommercialAircraft(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 256,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Island(Luzon) & In(Luzon,Philippines))",
      "exists x.(Earthquake(x) & Struck(x,December1999) & Struck(x,Luzon))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 257,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Island(Luzon) & In(Luzon,Philippines))",
      "exists x.(Earthquake(x) & Struck(x,December1999) & Struck(x,Luzon))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 258,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Island(Luzon) & In(Luzon,Philippines))",
      "exists x.(Earthquake(x) & Struck(x,December1999) & Struck(x,Luzon))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 966,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Invests(x) | Gambling(x))",
      "all x.(Invests(x) -> Newspapers(x))",
      "all x.(Gambling(x) -> Casinos(x))",
      "all x.(Casinos(x) -> LasVegas(x))",
      "all x.(Casinos(x) -> DisposableIncome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 967,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Invests(x) | Gambling(x))",
      "all x.(Invests(x) -> Newspapers(x))",
      "all x.(Gambling(x) -> Casinos(x))",
      "all x.(Casinos(x) -> LasVegas(x))",
      "all x.(Casinos(x) -> DisposableIncome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 968,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Invests(x) | Gambling(x))",
      "all x.(Invests(x) -> Newspapers(x))",
      "all x.(Gambling(x) -> Casinos(x))",
      "all x.(Casinos(x) -> LasVegas(x))",
      "all x.(Casinos(x) -> DisposableIncome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 688,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Student(x) & LearningPiano(x)) -> StrikeRightNotes(x))",
      "all x.((Student(x) & StrikeRightNotes(x)) -> GetRhythmRight(x))",
      "all x.((Student(x) & GetRhythmRight(x)) -> StartCoordination(x))",
      "all x.((((Student(x) & StartCoordination(x)) -> GoodAtCoordination(x)) & -FindCoordinationChallenging(x)) | (-((Student(x) & StartCoordination(x)) -> GoodAtCoordination(x)) & FindCoordinationChallenging(x)))",
      "((StrikeRightNotes(John) & GetRhythmRight(John) & GoodAtCoordination(John)) -> PutEmotion(John))",
      "(Student(John) & LearningPiano(John))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 689,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Student(x) & LearningPiano(x)) -> StrikeRightNotes(x))",
      "all x.((Student(x) & StrikeRightNotes(x)) -> GetRhythmRight(x))",
      "all x.((Student(x) & GetRhythmRight(x)) -> StartCoordination(x))",
      "all x.((((Student(x) & StartCoordination(x)) -> GoodAtCoordination(x)) & -FindCoordinationChallenging(x)) | (-((Student(x) & StartCoordination(x)) -> GoodAtCoordination(x)) & FindCoordinationChallenging(x)))",
      "((StrikeRightNotes(John) & GetRhythmRight(John) & GoodAtCoordination(John)) -> PutEmotion(John))",
      "(Student(John) & LearningPiano(John))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 654,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FormerSwimmer(Barbaraannmarshall) & FormerWorldRecordHolder(Barbaraannmarshall))",
      "ParticipatedIn(Barbaraannmarshall,Summer1972olympics)",
      "HomeCountry(Barbaraannmarshall,Unitedstates)",
      "all x.exists y.((ParticipatedIn(x,Summer1972olympics) & HomeCountry(x,y)) -> Represented(x,y))",
      "ParticipatedIn(Barbaraannmarshall,Preliminaryheatfreestylerelay)",
      "-ParticipatedIn(Barbaraannmarshall,Finalheatfreestylerelay)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 655,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FormerSwimmer(Barbaraannmarshall) & FormerWorldRecordHolder(Barbaraannmarshall))",
      "ParticipatedIn(Barbaraannmarshall,Summer1972olympics)",
      "HomeCountry(Barbaraannmarshall,Unitedstates)",
      "all x.exists y.((ParticipatedIn(x,Summer1972olympics) & HomeCountry(x,y)) -> Represented(x,y))",
      "ParticipatedIn(Barbaraannmarshall,Preliminaryheatfreestylerelay)",
      "-ParticipatedIn(Barbaraannmarshall,Finalheatfreestylerelay)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 576,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.Player(x)",
      "all x.(Player(x) -> StartRed(x))",
      "all x.(Player(x) -> YellowToGreen(x))",
      "all x.(Player(x) -> RedToYellow(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 577,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.Player(x)",
      "all x.(Player(x) -> StartRed(x))",
      "all x.(Player(x) -> YellowToGreen(x))",
      "all x.(Player(x) -> RedToYellow(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 578,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.Player(x)",
      "all x.(Player(x) -> StartRed(x))",
      "all x.(Player(x) -> YellowToGreen(x))",
      "all x.(Player(x) -> RedToYellow(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1095,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Physical(x) | Words(x))",
      "all x.(Physical(x) -> GoodWithPets(x))",
      "all x.(GoodWithPets(x) -> -ScaredOfAnimals(x))",
      "all x.(ScaredOfAnimals(x) | LoveAnimals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1096,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Physical(x) | Words(x))",
      "all x.(Physical(x) -> GoodWithPets(x))",
      "all x.(GoodWithPets(x) -> -ScaredOfAnimals(x))",
      "all x.(ScaredOfAnimals(x) | LoveAnimals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1097,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Physical(x) | Words(x))",
      "all x.(Physical(x) -> GoodWithPets(x))",
      "all x.(GoodWithPets(x) -> -ScaredOfAnimals(x))",
      "all x.(ScaredOfAnimals(x) | LoveAnimals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1098,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Physical(x) | Words(x))",
      "all x.(Physical(x) -> GoodWithPets(x))",
      "all x.(GoodWithPets(x) -> -ScaredOfAnimals(x))",
      "all x.(ScaredOfAnimals(x) | LoveAnimals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1099,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Physical(x) | Words(x))",
      "all x.(Physical(x) -> GoodWithPets(x))",
      "all x.(GoodWithPets(x) -> -ScaredOfAnimals(x))",
      "all x.(ScaredOfAnimals(x) | LoveAnimals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1282,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Bird(x) -> Winged(x))",
      "all x.(Winged(x) -> -Reptile(x))",
      "exists x.(Fly(x) & Bird(x))",
      "all x.(Iguana(x) -> Reptile(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1283,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Bird(x) -> Winged(x))",
      "all x.(Winged(x) -> -Reptile(x))",
      "exists x.(Fly(x) & Bird(x))",
      "all x.(Iguana(x) -> Reptile(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1284,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Bird(x) -> Winged(x))",
      "all x.(Winged(x) -> -Reptile(x))",
      "exists x.(Fly(x) & Bird(x))",
      "all x.(Iguana(x) -> Reptile(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 87,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Movie(EndGame) & Released(EndGame,Year2006))",
      "Set(EndGame,Washington)",
      "FilmedOutside(EndGame,Washington)",
      "exists x.FilmedIn(x,NewYork)",
      "Directed(AndyChang,EndGame)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 88,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Movie(EndGame) & Released(EndGame,Year2006))",
      "Set(EndGame,Washington)",
      "FilmedOutside(EndGame,Washington)",
      "exists x.FilmedIn(x,NewYork)",
      "Directed(AndyChang,EndGame)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 89,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Movie(EndGame) & Released(EndGame,Year2006))",
      "Set(EndGame,Washington)",
      "FilmedOutside(EndGame,Washington)",
      "exists x.FilmedIn(x,NewYork)",
      "Directed(AndyChang,EndGame)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 17,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(RealNum(Six) & RealNum(Seven) & RealNum(Eight))",
      "all x y.((RealNum(x) & RealNum(y) & EqualAddOne(x,y)) -> Larger(x,y))",
      "all x y.(Larger(x,y) <-> -Larger(y,x))",
      "EqualAddOne(Seven,Six)",
      "EqualAddOne(Eight,Seven)",
      "Positive(Two)",
      "all x y.((Positive(x) & EqualDouble(y,x)) -> Positive(y))",
      "EqualDouble(Eight,Four)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 18,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(RealNum(Six) & RealNum(Seven) & RealNum(Eight))",
      "all x y.((RealNum(x) & RealNum(y) & EqualAddOne(x,y)) -> Larger(x,y))",
      "all x y.(Larger(x,y) <-> -Larger(y,x))",
      "EqualAddOne(Seven,Six)",
      "EqualAddOne(Eight,Seven)",
      "Positive(Two)",
      "all x y.((Positive(x) & EqualDouble(y,x)) -> Positive(y))",
      "EqualDouble(Eight,Four)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 19,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(RealNum(Six) & RealNum(Seven) & RealNum(Eight))",
      "all x y.((RealNum(x) & RealNum(y) & EqualAddOne(x,y)) -> Larger(x,y))",
      "all x y.(Larger(x,y) <-> -Larger(y,x))",
      "EqualAddOne(Seven,Six)",
      "EqualAddOne(Eight,Seven)",
      "Positive(Two)",
      "all x y.((Positive(x) & EqualDouble(y,x)) -> Positive(y))",
      "EqualDouble(Eight,Four)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 742,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dog(x) -> NeverTellsTruth(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1383,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Asian(x) -> Human(x))",
      "all x.(Chinese(x) -> Asian(x))",
      "all x.(Chinese(x) | British(x))",
      "all x.(British(x) -> European(x))",
      "all x.(Spanish(x) -> European(x))",
      "all x.(Indian(x) -> -European(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1384,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Asian(x) -> Human(x))",
      "all x.(Chinese(x) -> Asian(x))",
      "all x.(Chinese(x) | British(x))",
      "all x.(British(x) -> European(x))",
      "all x.(Spanish(x) -> European(x))",
      "all x.(Indian(x) -> -European(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1385,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Asian(x) -> Human(x))",
      "all x.(Chinese(x) -> Asian(x))",
      "all x.(Chinese(x) | British(x))",
      "all x.(British(x) -> European(x))",
      "all x.(Spanish(x) -> European(x))",
      "all x.(Indian(x) -> -European(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 717,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NeverAdmitMistakes(x) -> -GoodTeacher(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 72,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PhilatelicLit(x) -> (Stamp(x) | Periodical(x) | Auction(x) | Book(x) | Bibliography(x) | Background(x)))",
      "-Stamp(Mort)",
      "-(Periodical(Mort) | Auction(Mort) | Bibliography(Mort) | Background(Mort))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 73,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PhilatelicLit(x) -> (Stamp(x) | Periodical(x) | Auction(x) | Book(x) | Bibliography(x) | Background(x)))",
      "-Stamp(Mort)",
      "-(Periodical(Mort) | Auction(Mort) | Bibliography(Mort) | Background(Mort))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 74,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PhilatelicLit(x) -> (Stamp(x) | Periodical(x) | Auction(x) | Book(x) | Bibliography(x) | Background(x)))",
      "-Stamp(Mort)",
      "-(Periodical(Mort) | Auction(Mort) | Bibliography(Mort) | Background(Mort))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 280,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DramaFilm(Adventuresofrusty) & ChildrensFilm(Adventuresofrusty))",
      "Produced(Columbiapictures,Adventuresofrusty)",
      "Produced(Paramount,Tintin)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 281,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DramaFilm(Adventuresofrusty) & ChildrensFilm(Adventuresofrusty))",
      "Produced(Columbiapictures,Adventuresofrusty)",
      "Produced(Paramount,Tintin)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 282,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DramaFilm(Adventuresofrusty) & ChildrensFilm(Adventuresofrusty))",
      "Produced(Columbiapictures,Adventuresofrusty)",
      "Produced(Paramount,Tintin)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 283,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(DramaFilm(Adventuresofrusty) & ChildrensFilm(Adventuresofrusty))",
      "Produced(Columbiapictures,Adventuresofrusty)",
      "Produced(Paramount,Tintin)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 665,
    "flag": "None goal or assumptions",
    "assumptions": [
      "ParamountLeaderOf(Dengxiaoping,Prc)",
      "(PraisedFor(Dengxiaoping,Reaffirmationofreformprogram) & PraisedFor(Dengxiaoping,Reversionofhongkong) & PraisedFor(Dengxiaoping,Returnofmacau))",
      "(PartysSecretaryGeneral(Dengxiaoping) & Under(Dengxiaoping,Mao) & VicePremier(Dengxiaoping) & PresidedOver(Dengxiaoping,Antirightistcampaign) & LaunchedBy(Antirightistcampaign,Mao))",
      "(InstrumentalIn(Dengxiaoping,Chinaseconomicreconstruction) & Following(Chinaseconomicreconstruction,Greatleapforward) & Disastrous(Greatleapforward))",
      "DiedIn(Mao,Y1976)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 666,
    "flag": "None goal or assumptions",
    "assumptions": [
      "ParamountLeaderOf(Dengxiaoping,Prc)",
      "(PraisedFor(Dengxiaoping,Reaffirmationofreformprogram) & PraisedFor(Dengxiaoping,Reversionofhongkong) & PraisedFor(Dengxiaoping,Returnofmacau))",
      "(PartysSecretaryGeneral(Dengxiaoping) & Under(Dengxiaoping,Mao) & VicePremier(Dengxiaoping) & PresidedOver(Dengxiaoping,Antirightistcampaign) & LaunchedBy(Antirightistcampaign,Mao))",
      "(InstrumentalIn(Dengxiaoping,Chinaseconomicreconstruction) & Following(Chinaseconomicreconstruction,Greatleapforward) & Disastrous(Greatleapforward))",
      "DiedIn(Mao,Y1976)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 667,
    "flag": "None goal or assumptions",
    "assumptions": [
      "ParamountLeaderOf(Dengxiaoping,Prc)",
      "(PraisedFor(Dengxiaoping,Reaffirmationofreformprogram) & PraisedFor(Dengxiaoping,Reversionofhongkong) & PraisedFor(Dengxiaoping,Returnofmacau))",
      "(PartysSecretaryGeneral(Dengxiaoping) & Under(Dengxiaoping,Mao) & VicePremier(Dengxiaoping) & PresidedOver(Dengxiaoping,Antirightistcampaign) & LaunchedBy(Antirightistcampaign,Mao))",
      "(InstrumentalIn(Dengxiaoping,Chinaseconomicreconstruction) & Following(Chinaseconomicreconstruction,Greatleapforward) & Disastrous(Greatleapforward))",
      "DiedIn(Mao,Y1976)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1052,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1053,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1054,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1055,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1056,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1057,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1058,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1059,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1060,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1061,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 524,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Superhero(x) & American(x)) -> ((ComeFrom(x,DcUniverse) & -ComeFrom(x,MarvelUniverse)) | (-ComeFrom(x,DcUniverse) & ComeFrom(x,MarvelUniverse))))",
      "Superhero(CaptainAmerica)",
      "American(CaptainAmerica)",
      "-ComeFrom(CaptainAmerica,DcUniverse)",
      "all x.((Superhero(x) & American(x)) -> Speak(x,English))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 525,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Superhero(x) & American(x)) -> ((ComeFrom(x,DcUniverse) & -ComeFrom(x,MarvelUniverse)) | (-ComeFrom(x,DcUniverse) & ComeFrom(x,MarvelUniverse))))",
      "Superhero(CaptainAmerica)",
      "American(CaptainAmerica)",
      "-ComeFrom(CaptainAmerica,DcUniverse)",
      "all x.((Superhero(x) & American(x)) -> Speak(x,English))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 526,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Superhero(x) & American(x)) -> ((ComeFrom(x,DcUniverse) & -ComeFrom(x,MarvelUniverse)) | (-ComeFrom(x,DcUniverse) & ComeFrom(x,MarvelUniverse))))",
      "Superhero(CaptainAmerica)",
      "American(CaptainAmerica)",
      "-ComeFrom(CaptainAmerica,DcUniverse)",
      "all x.((Superhero(x) & American(x)) -> Speak(x,English))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 229,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornInGermany(RobertZimmer)",
      "IsEssayist(RobertZimmer)",
      "BornIn(RobertZimmer,Year1953)",
      "all x.(IsEssayist(x) -> IsWriter(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 230,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornInGermany(RobertZimmer)",
      "IsEssayist(RobertZimmer)",
      "BornIn(RobertZimmer,Year1953)",
      "all x.(IsEssayist(x) -> IsWriter(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 231,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornInGermany(RobertZimmer)",
      "IsEssayist(RobertZimmer)",
      "BornIn(RobertZimmer,Year1953)",
      "all x.(IsEssayist(x) -> IsWriter(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 699,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Repay(x) -> HighCreditScore(x))",
      "exists x.((HighCreditScore(x) & HighSalary(x)) -> Mortgage(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 912,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Student(x) -> MemberOfUniversity(x))",
      "all x.(GraduateStudent(x) -> Student(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "exists x.(PhDStudent(x) & HighIQ(x))",
      "(-PhDStudent(John) -> -MemberOfUniversity(John))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 913,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Student(x) -> MemberOfUniversity(x))",
      "all x.(GraduateStudent(x) -> Student(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "exists x.(PhDStudent(x) & HighIQ(x))",
      "(-PhDStudent(John) -> -MemberOfUniversity(John))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 914,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Student(x) -> MemberOfUniversity(x))",
      "all x.(GraduateStudent(x) -> Student(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "exists x.(PhDStudent(x) & HighIQ(x))",
      "(-PhDStudent(John) -> -MemberOfUniversity(John))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 476,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(EuropeanCountry(Belgium) | EuropeanCountry(France) | EuropeanCountry(Germany))",
      "CapitalOf(Paris,France)",
      "(TouristAttraction(EiffelTower) & LocatedIn(EiffelTower,Paris))",
      "exists x.(LiveIn(x,Belgium) -> Speak(x,French))",
      "exists x.(GoTo(John,Europe) -> (See(John,x) & TouristAttraction(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 477,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(EuropeanCountry(Belgium) | EuropeanCountry(France) | EuropeanCountry(Germany))",
      "CapitalOf(Paris,France)",
      "(TouristAttraction(EiffelTower) & LocatedIn(EiffelTower,Paris))",
      "exists x.(LiveIn(x,Belgium) -> Speak(x,French))",
      "exists x.(GoTo(John,Europe) -> (See(John,x) & TouristAttraction(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 478,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(EuropeanCountry(Belgium) | EuropeanCountry(France) | EuropeanCountry(Germany))",
      "CapitalOf(Paris,France)",
      "(TouristAttraction(EiffelTower) & LocatedIn(EiffelTower,Paris))",
      "exists x.(LiveIn(x,Belgium) -> Speak(x,French))",
      "exists x.(GoTo(John,Europe) -> (See(John,x) & TouristAttraction(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 905,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.(MadeInMaranello(x) -> Ferrari(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 906,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.(MadeInMaranello(x) -> Ferrari(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 907,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.(MadeInMaranello(x) -> Ferrari(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 908,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SportsCar(x) -> LoudCar(x))",
      "all x.(LoudCar(x) -> -ElectricCar(x))",
      "all x.(Ferrari(x) -> SportsCar(x))",
      "all x.(MadeInMaranello(x) -> Ferrari(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1288,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Plant(x) -> -CuteAnimal(x))",
      "all x.(Flower(x) -> Plant(x))",
      "all x.(Kitten(x) -> CuteAnimal(x))",
      "all x.(GrownInGarden(x) -> Flower(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1289,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Plant(x) -> -CuteAnimal(x))",
      "all x.(Flower(x) -> Plant(x))",
      "all x.(Kitten(x) -> CuteAnimal(x))",
      "all x.(GrownInGarden(x) -> Flower(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1290,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Plant(x) -> -CuteAnimal(x))",
      "all x.(Flower(x) -> Plant(x))",
      "all x.(Kitten(x) -> CuteAnimal(x))",
      "all x.(GrownInGarden(x) -> Flower(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 437,
    "flag": "None goal or assumptions",
    "assumptions": [
      "ParticipatedIn(Guam,Winterolympics)",
      "(Year(Y1988) -> BeHeld(Winterolympics,Calgary))",
      "(BeHeld(Winterolympics,Calgary) -> SendAthletes(Guam))",
      "(SendAthletes(Guam) -> ParticipatedIn(Guam,Winterolympics))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 438,
    "flag": "None goal or assumptions",
    "assumptions": [
      "ParticipatedIn(Guam,Winterolympics)",
      "(Year(Y1988) -> BeHeld(Winterolympics,Calgary))",
      "(BeHeld(Winterolympics,Calgary) -> SendAthletes(Guam))",
      "(SendAthletes(Guam) -> ParticipatedIn(Guam,Winterolympics))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 209,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 210,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 211,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 212,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 213,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(Michael) & Physician(Michael) & Journalist(Michael) & Author(Michael) & Broadcaster(Michael))",
      "WordSetter(Michael)",
      "(Magazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 704,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Homework(x) -> -IsFun(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 747,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Violence(x) & Good(x)) -> Justified(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1025,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Ranch(x) -> RegularlyRide(x))",
      "all x.(DisposableIncome(x) -> Ranch(x))",
      "all x.(Compete(x) -> DisposableIncome(x))",
      "all x.(Compete(x) -> Invested(x))",
      "all x.(RegularlyRide(x) -> -Cramped(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1026,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Ranch(x) -> RegularlyRide(x))",
      "all x.(DisposableIncome(x) -> Ranch(x))",
      "all x.(Compete(x) -> DisposableIncome(x))",
      "all x.(Compete(x) -> Invested(x))",
      "all x.(RegularlyRide(x) -> -Cramped(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1027,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Ranch(x) -> RegularlyRide(x))",
      "all x.(DisposableIncome(x) -> Ranch(x))",
      "all x.(Compete(x) -> DisposableIncome(x))",
      "all x.(Compete(x) -> Invested(x))",
      "all x.(RegularlyRide(x) -> -Cramped(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 159,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Roundel(x) -> Rounded(x)) & ArtilleryFortification(x))",
      "all x y.((Roundel(x) & AdjacentWall(y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 160,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Roundel(x) -> Rounded(x)) & ArtilleryFortification(x))",
      "all x y.((Roundel(x) & AdjacentWall(y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 161,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Roundel(x) -> Rounded(x)) & ArtilleryFortification(x))",
      "all x y.((Roundel(x) & AdjacentWall(y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 162,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Roundel(x) -> Rounded(x)) & ArtilleryFortification(x))",
      "all x y.((Roundel(x) & AdjacentWall(y)) -> -Higher(x,y))",
      "all x.(ArtilleryFortification(x) -> DeployCannons(x))",
      "all x y.((Roundel(x) & ArtilleryFortification(x) & ArtilleryFortification(y)) -> Older(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 737,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tissue(x) -> Soft(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 488,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Volunteer(x) -> GetIntangibleBenefits(x))",
      "all x.((Volunteer(x) -> WorkRegularly(x)) | WorkAsNeeded(x))",
      "exists x.(Volunteer(x) -> Trained(x))",
      "all x.(Volunteer(x) -> (WorkInGroup(x) | WorkIndividually(x)))",
      "all x.((Volunteer(x) & Environmental(x)) -> (ContributeTo(x,Environmentalmanagement) | ContributeTo(x,Environmentalconservation)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 489,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Volunteer(x) -> GetIntangibleBenefits(x))",
      "all x.((Volunteer(x) -> WorkRegularly(x)) | WorkAsNeeded(x))",
      "exists x.(Volunteer(x) -> Trained(x))",
      "all x.(Volunteer(x) -> (WorkInGroup(x) | WorkIndividually(x)))",
      "all x.((Volunteer(x) & Environmental(x)) -> (ContributeTo(x,Environmentalmanagement) | ContributeTo(x,Environmentalconservation)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 490,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Volunteer(x) -> GetIntangibleBenefits(x))",
      "all x.((Volunteer(x) -> WorkRegularly(x)) | WorkAsNeeded(x))",
      "exists x.(Volunteer(x) -> Trained(x))",
      "all x.(Volunteer(x) -> (WorkInGroup(x) | WorkIndividually(x)))",
      "all x.((Volunteer(x) & Environmental(x)) -> (ContributeTo(x,Environmentalmanagement) | ContributeTo(x,Environmentalconservation)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1007,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Consistent(x) -> NoSurprises(x))",
      "all x.(Flannel(x) -> Consistent(x))",
      "all x.(NoShopping(x) -> Flannel(x))",
      "all x.(Old(x) -> NoSurprises(x))",
      "all x.(Impulsive(x) -> -NoSurprises(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1008,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Consistent(x) -> NoSurprises(x))",
      "all x.(Flannel(x) -> Consistent(x))",
      "all x.(NoShopping(x) -> Flannel(x))",
      "all x.(Old(x) -> NoSurprises(x))",
      "all x.(Impulsive(x) -> -NoSurprises(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1009,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Consistent(x) -> NoSurprises(x))",
      "all x.(Flannel(x) -> Consistent(x))",
      "all x.(NoShopping(x) -> Flannel(x))",
      "all x.(Old(x) -> NoSurprises(x))",
      "all x.(Impulsive(x) -> -NoSurprises(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 619,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.Owns(Adam,x)",
      "exists x.Favorite(Adam,x)",
      "all x.((Owns(Adam,x) & Favorite(Adam,x)) -> European(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 620,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.Owns(Adam,x)",
      "exists x.Favorite(Adam,x)",
      "all x.((Owns(Adam,x) & Favorite(Adam,x)) -> European(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1240,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NewHaven(x) -> -High(x))",
      "all x.(YaleHousing(x) -> NewHaven(x))",
      "all x.(Manhattan(x) -> High(x))",
      "all x.(Bloomberg(x) -> Manhattan(x))",
      "all x.(Bloomberg(x) -> Bloomberg(x))",
      "-((NewHaven(Towera) & -Manhattan(Towera)) | (-NewHaven(Towera) & Manhattan(Towera)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1241,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NewHaven(x) -> -High(x))",
      "all x.(YaleHousing(x) -> NewHaven(x))",
      "all x.(Manhattan(x) -> High(x))",
      "all x.(Bloomberg(x) -> Manhattan(x))",
      "all x.(Bloomberg(x) -> Bloomberg(x))",
      "-((NewHaven(Towera) & -Manhattan(Towera)) | (-NewHaven(Towera) & Manhattan(Towera)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1242,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NewHaven(x) -> -High(x))",
      "all x.(YaleHousing(x) -> NewHaven(x))",
      "all x.(Manhattan(x) -> High(x))",
      "all x.(Bloomberg(x) -> Manhattan(x))",
      "all x.(Bloomberg(x) -> Bloomberg(x))",
      "-((NewHaven(Towera) & -Manhattan(Towera)) | (-NewHaven(Towera) & Manhattan(Towera)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1243,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NewHaven(x) -> -High(x))",
      "all x.(YaleHousing(x) -> NewHaven(x))",
      "all x.(Manhattan(x) -> High(x))",
      "all x.(Bloomberg(x) -> Manhattan(x))",
      "all x.(Bloomberg(x) -> Bloomberg(x))",
      "-((NewHaven(Towera) & -Manhattan(Towera)) | (-NewHaven(Towera) & Manhattan(Towera)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1266,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Fish(x) -> -Bird(x))",
      "all x.(Osprey(x) -> Bird(x))",
      "all x.(Carp(x) -> Fish(x))",
      "all x.(Goldfish(x) -> Carp(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1267,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Fish(x) -> -Bird(x))",
      "all x.(Osprey(x) -> Bird(x))",
      "all x.(Carp(x) -> Fish(x))",
      "all x.(Goldfish(x) -> Carp(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1268,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Fish(x) -> -Bird(x))",
      "all x.(Osprey(x) -> Bird(x))",
      "all x.(Carp(x) -> Fish(x))",
      "all x.(Goldfish(x) -> Carp(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 455,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 456,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 457,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1429,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Big(x) & -Small(x)) | (-Big(x) & Small(x)))",
      "all x.(Big(x) -> Heavy(x))",
      "all x.(Small(x) -> Light(x))",
      "all x.(Heavy(x) -> Still(x))",
      "all x.(Light(x) -> Unstable(x))",
      "all x.(Unstable(x) -> Changing(x))",
      "all x.(Unstable(x) -> Kinetic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1430,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Big(x) & -Small(x)) | (-Big(x) & Small(x)))",
      "all x.(Big(x) -> Heavy(x))",
      "all x.(Small(x) -> Light(x))",
      "all x.(Heavy(x) -> Still(x))",
      "all x.(Light(x) -> Unstable(x))",
      "all x.(Unstable(x) -> Changing(x))",
      "all x.(Unstable(x) -> Kinetic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1431,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Big(x) & -Small(x)) | (-Big(x) & Small(x)))",
      "all x.(Big(x) -> Heavy(x))",
      "all x.(Small(x) -> Light(x))",
      "all x.(Heavy(x) -> Still(x))",
      "all x.(Light(x) -> Unstable(x))",
      "all x.(Unstable(x) -> Changing(x))",
      "all x.(Unstable(x) -> Kinetic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1432,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Big(x) & -Small(x)) | (-Big(x) & Small(x)))",
      "all x.(Big(x) -> Heavy(x))",
      "all x.(Small(x) -> Light(x))",
      "all x.(Heavy(x) -> Still(x))",
      "all x.(Light(x) -> Unstable(x))",
      "all x.(Unstable(x) -> Changing(x))",
      "all x.(Unstable(x) -> Kinetic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1433,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Big(x) & -Small(x)) | (-Big(x) & Small(x)))",
      "all x.(Big(x) -> Heavy(x))",
      "all x.(Small(x) -> Light(x))",
      "all x.(Heavy(x) -> Still(x))",
      "all x.(Light(x) -> Unstable(x))",
      "all x.(Unstable(x) -> Changing(x))",
      "all x.(Unstable(x) -> Kinetic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1434,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Big(x) & -Small(x)) | (-Big(x) & Small(x)))",
      "all x.(Big(x) -> Heavy(x))",
      "all x.(Small(x) -> Light(x))",
      "all x.(Heavy(x) -> Still(x))",
      "all x.(Light(x) -> Unstable(x))",
      "all x.(Unstable(x) -> Changing(x))",
      "all x.(Unstable(x) -> Kinetic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 288,
    "flag": "None goal or assumptions",
    "assumptions": [
      "TelevisionSeries(DiRay)",
      "(Create(Maya,DiRay) & Write(Maya,DiRay))",
      "Produce(Jed,DiRay)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 289,
    "flag": "None goal or assumptions",
    "assumptions": [
      "TelevisionSeries(DiRay)",
      "(Create(Maya,DiRay) & Write(Maya,DiRay))",
      "Produce(Jed,DiRay)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1347,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Man(x) -> Human(x))",
      "all x.(Gentleman(x) -> Man(x))",
      "all x.(Lawyer(x) -> Gentleman(x))",
      "all x.(Woman(x) -> Human(x))",
      "all x.(Sheep(x) -> -Human(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1348,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Man(x) -> Human(x))",
      "all x.(Gentleman(x) -> Man(x))",
      "all x.(Lawyer(x) -> Gentleman(x))",
      "all x.(Woman(x) -> Human(x))",
      "all x.(Sheep(x) -> -Human(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1349,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Man(x) -> Human(x))",
      "all x.(Gentleman(x) -> Man(x))",
      "all x.(Lawyer(x) -> Gentleman(x))",
      "all x.(Woman(x) -> Human(x))",
      "all x.(Sheep(x) -> -Human(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 839,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 840,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 841,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 540,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Person(x) & Product(y) & -HaveEnoughMoneyFor(x,y)) -> -Buy(x,y))",
      "all x.(Monitor(x) -> Product(x))",
      "all x y z.(((Monitor(x) & Monitor(y) & Monitor(z) & FourK(x) & OneOEightO(y) & TwoK(z)) -> MoreExpensive(x,y)) & MoreExpensive(x,z))",
      "Person(John)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 541,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Person(x) & Product(y) & -HaveEnoughMoneyFor(x,y)) -> -Buy(x,y))",
      "all x.(Monitor(x) -> Product(x))",
      "all x y z.(((Monitor(x) & Monitor(y) & Monitor(z) & FourK(x) & OneOEightO(y) & TwoK(z)) -> MoreExpensive(x,y)) & MoreExpensive(x,z))",
      "Person(John)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 712,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 706,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Cat(x) & -Pet(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 972,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(CoffeeShop(x) -> CaffeineAddict(x))",
      "all x.(CoffeeShop(x) | Takeout(x))",
      "all x.(MakeFood(x) -> Takeout(x))",
      "all x.(KitchenAppliance(x) -> -Takeout(x))",
      "all x.(Busy(x) -> MakeFood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 973,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(CoffeeShop(x) -> CaffeineAddict(x))",
      "all x.(CoffeeShop(x) | Takeout(x))",
      "all x.(MakeFood(x) -> Takeout(x))",
      "all x.(KitchenAppliance(x) -> -Takeout(x))",
      "all x.(Busy(x) -> MakeFood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 974,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(CoffeeShop(x) -> CaffeineAddict(x))",
      "all x.(CoffeeShop(x) | Takeout(x))",
      "all x.(MakeFood(x) -> Takeout(x))",
      "all x.(KitchenAppliance(x) -> -Takeout(x))",
      "all x.(Busy(x) -> MakeFood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 842,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 843,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 844,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1279,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(TeacherWorkingAtPool(x) & -Nice(x))",
      "all x.(TeacherWorkingAtPool(x) -> PoolManager(x))",
      "all x.(PoolManager(x) -> Lifeguard(x))",
      "all x.(Lifeguard(x) -> WorkAtPool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1280,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(TeacherWorkingAtPool(x) & -Nice(x))",
      "all x.(TeacherWorkingAtPool(x) -> PoolManager(x))",
      "all x.(PoolManager(x) -> Lifeguard(x))",
      "all x.(Lifeguard(x) -> WorkAtPool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1281,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(TeacherWorkingAtPool(x) & -Nice(x))",
      "all x.(TeacherWorkingAtPool(x) -> PoolManager(x))",
      "all x.(PoolManager(x) -> Lifeguard(x))",
      "all x.(Lifeguard(x) -> WorkAtPool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 751,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ArtPiece(x) & -RequiresTalent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 268,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))",
      "BornIn(BernardaBrysonShahn,AthensOhio)",
      "MarriedTo(BernardaBrysonShahn,BenShahn)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 269,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))",
      "BornIn(BernardaBrysonShahn,AthensOhio)",
      "MarriedTo(BernardaBrysonShahn,BenShahn)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 270,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))",
      "BornIn(BernardaBrysonShahn,AthensOhio)",
      "MarriedTo(BernardaBrysonShahn,BenShahn)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 987,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Iphone(x) -> -House(x))",
      "all x.(Tech(x) -> Iphone(x))",
      "all x.(House(x) | Apartment(x))",
      "all x.(Roommate(x) -> -Pet(x))",
      "all x.(Apartment(x) -> Roommate(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 988,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Iphone(x) -> -House(x))",
      "all x.(Tech(x) -> Iphone(x))",
      "all x.(House(x) | Apartment(x))",
      "all x.(Roommate(x) -> -Pet(x))",
      "all x.(Apartment(x) -> Roommate(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1303,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OnPayroll(x) -> PaidBySchool(x))",
      "all x.(JobAtSchool(x) -> OnPayroll(x))",
      "all x.(FacultyMember(x) -> JobAtSchool(x))",
      "all x.(FacultyMember(x) | Teacher(x))",
      "all x.(Teacher(x) -> HasStudents(x))",
      "(Teacher(Nancy) -> OnPayroll(Nancy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1304,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OnPayroll(x) -> PaidBySchool(x))",
      "all x.(JobAtSchool(x) -> OnPayroll(x))",
      "all x.(FacultyMember(x) -> JobAtSchool(x))",
      "all x.(FacultyMember(x) | Teacher(x))",
      "all x.(Teacher(x) -> HasStudents(x))",
      "(Teacher(Nancy) -> OnPayroll(Nancy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1305,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OnPayroll(x) -> PaidBySchool(x))",
      "all x.(JobAtSchool(x) -> OnPayroll(x))",
      "all x.(FacultyMember(x) -> JobAtSchool(x))",
      "all x.(FacultyMember(x) | Teacher(x))",
      "all x.(Teacher(x) -> HasStudents(x))",
      "(Teacher(Nancy) -> OnPayroll(Nancy))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 696,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kangaroo(x) -> Animal(x))",
      "all x.(Kangaroo(x) -> -LiveIn(x,Germany))",
      "(EnoughMoney(Jane) -> FlyTo(Jane,Germany))",
      "(FlyTo(Jane,Germany) -> GoTo(Jane,Berlinzoo))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 615,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Prereq(x,y) & Taken(x)) <-> CanTake(y))",
      "all x y.(-Prereq(x,y) -> CanTake(y))",
      "(Prereq(Cpsc201,Cpsc323) & Prereq(Cpsc223,Cpsc323))",
      "((Prereq(Intromicro,Intermediatemicro) & Taken(Intromicro)) -> CanTake(Intermediatemicro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 616,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Prereq(x,y) & Taken(x)) <-> CanTake(y))",
      "all x y.(-Prereq(x,y) -> CanTake(y))",
      "(Prereq(Cpsc201,Cpsc323) & Prereq(Cpsc223,Cpsc323))",
      "((Prereq(Intromicro,Intermediatemicro) & Taken(Intromicro)) -> CanTake(Intermediatemicro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 617,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Prereq(x,y) & Taken(x)) <-> CanTake(y))",
      "all x y.(-Prereq(x,y) -> CanTake(y))",
      "(Prereq(Cpsc201,Cpsc323) & Prereq(Cpsc223,Cpsc323))",
      "((Prereq(Intromicro,Intermediatemicro) & Taken(Intromicro)) -> CanTake(Intermediatemicro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 618,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Prereq(x,y) & Taken(x)) <-> CanTake(y))",
      "all x y.(-Prereq(x,y) -> CanTake(y))",
      "(Prereq(Cpsc201,Cpsc323) & Prereq(Cpsc223,Cpsc323))",
      "((Prereq(Intromicro,Intermediatemicro) & Taken(Intromicro)) -> CanTake(Intermediatemicro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 108,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SevenDistinctWorks(x) -> Heptalogy(x))",
      "SevenDistinctWorks(HarryPotter)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 109,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SevenDistinctWorks(x) -> Heptalogy(x))",
      "SevenDistinctWorks(HarryPotter)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 110,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SevenDistinctWorks(x) -> Heptalogy(x))",
      "SevenDistinctWorks(HarryPotter)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1022,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RenaissanceFair(x) -> DressingUp(x))",
      "all x.(HistoryRenaissance(x) -> RenaissanceFair(x))",
      "all x.(HistoryRenaissance(x) | NotAcademics(x))",
      "all x.(Industry(x) -> NotAcademics(x))",
      "all x.(HistoryProf(x) -> -NotAcademics(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1023,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RenaissanceFair(x) -> DressingUp(x))",
      "all x.(HistoryRenaissance(x) -> RenaissanceFair(x))",
      "all x.(HistoryRenaissance(x) | NotAcademics(x))",
      "all x.(Industry(x) -> NotAcademics(x))",
      "all x.(HistoryProf(x) -> -NotAcademics(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1024,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RenaissanceFair(x) -> DressingUp(x))",
      "all x.(HistoryRenaissance(x) -> RenaissanceFair(x))",
      "all x.(HistoryRenaissance(x) | NotAcademics(x))",
      "all x.(Industry(x) -> NotAcademics(x))",
      "all x.(HistoryProf(x) -> -NotAcademics(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 719,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SportsCar(x) -> -IntendedToBeDrivenAtModerateSpeeds(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 949,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(WorkTeams(x) -> Colleagues(x))",
      "all x.(PositiveAttitude(x) -> WorkTeams(x))",
      "[[ERROR]]",
      "all x.(BossPromotions(x) -> -NegativeFeedback(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 950,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(WorkTeams(x) -> Colleagues(x))",
      "all x.(PositiveAttitude(x) -> WorkTeams(x))",
      "[[ERROR]]",
      "all x.(BossPromotions(x) -> -NegativeFeedback(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 951,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(WorkTeams(x) -> Colleagues(x))",
      "all x.(PositiveAttitude(x) -> WorkTeams(x))",
      "[[ERROR]]",
      "all x.(BossPromotions(x) -> -NegativeFeedback(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 725,
    "flag": "None goal or assumptions",
    "assumptions": [
      "OpenSource(Drishti)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 464,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Grade(A) | Grade(a) | Grade(B) | Grade(b) | Grade(c))",
      "all x.(GetGrade(x,A) -> GreaterThan95(x))",
      "all x.(GetGrade(x,a) -> Range90to95(x))",
      "GetGrade(Zhang,a)",
      "Better(Wang,Zhang)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 465,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Grade(A) | Grade(a) | Grade(B) | Grade(b) | Grade(c))",
      "all x.(GetGrade(x,A) -> GreaterThan95(x))",
      "all x.(GetGrade(x,a) -> Range90to95(x))",
      "GetGrade(Zhang,a)",
      "Better(Wang,Zhang)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 466,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Grade(A) | Grade(a) | Grade(B) | Grade(b) | Grade(c))",
      "all x.(GetGrade(x,A) -> GreaterThan95(x))",
      "all x.(GetGrade(x,a) -> Range90to95(x))",
      "GetGrade(Zhang,a)",
      "Better(Wang,Zhang)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 621,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Day(x) -> -PrefersWarmAt(Olivia,x))",
      "all x.(SleepingDuring(Olivia,x) -> PrefersCoolAt(Olivia,x))",
      "all x.(SleepingDuring(Olivia,x) -> Night(x))",
      "all x.(WorkingDuring(Olivia,x) -> Day(x))",
      "all x.(WorkingDuring(Olivia,x) | SleepingDuring(Olivia,x))",
      "all x.(Day(x) | Night(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 596,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Speech(TaylorSwift,Nyc)",
      "(Manhattan(ColumbiaUniversity) & Manhattan(Nyc))",
      "HaveAlbum(TaylorSwift)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 597,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Speech(TaylorSwift,Nyc)",
      "(Manhattan(ColumbiaUniversity) & Manhattan(Nyc))",
      "HaveAlbum(TaylorSwift)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1204,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PlanA(x) | PlanB(x))",
      "all x.(PlanB(x) -> Award(x))",
      "all x.-NoPlan(x)",
      "all x.(Award(x) -> -OlderThan80(x))",
      "all x.(OlderThan80(x) | StudyAtSchool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1205,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PlanA(x) | PlanB(x))",
      "all x.(PlanB(x) -> Award(x))",
      "all x.-NoPlan(x)",
      "all x.(Award(x) -> -OlderThan80(x))",
      "all x.(OlderThan80(x) | StudyAtSchool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1206,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PlanA(x) | PlanB(x))",
      "all x.(PlanB(x) -> Award(x))",
      "all x.-NoPlan(x)",
      "all x.(Award(x) -> -OlderThan80(x))",
      "all x.(OlderThan80(x) | StudyAtSchool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 500,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Horse(Detroitcity)",
      "exists x.(Horse(x) & Racehorse(x))",
      "all x.((Horse(x) & Racing(x) & Falls(x)) -> Dead(x))",
      "(Racing(Detroitcity) & Falls(Detroitcity))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 501,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Horse(Detroitcity)",
      "exists x.(Horse(x) & Racehorse(x))",
      "all x.((Horse(x) & Racing(x) & Falls(x)) -> Dead(x))",
      "(Racing(Detroitcity) & Falls(Detroitcity))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 502,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Horse(Detroitcity)",
      "exists x.(Horse(x) & Racehorse(x))",
      "all x.((Horse(x) & Racing(x) & Falls(x)) -> Dead(x))",
      "(Racing(Detroitcity) & Falls(Detroitcity))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 340,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Architect(Monhoff) & Artist(Monhoff) & Illustrator(Monhoff))",
      "American(Monhoff)",
      "all x.((Artist(x) -> GoodAt(x,Painting)) | GoodAt(x,Music))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 341,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Architect(Monhoff) & Artist(Monhoff) & Illustrator(Monhoff))",
      "American(Monhoff)",
      "all x.((Artist(x) -> GoodAt(x,Painting)) | GoodAt(x,Music))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 51,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Czech(Miroslavfiedler) & Mathematician(Miroslavfiedler))",
      "KnownFor(Miroslavfiedler,ContributionsToLinearAlgebraAndGraphTheory)",
      "HonoredBy(Miroslavfiedler,FiedlerEigenvalue)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 52,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Czech(Miroslavfiedler) & Mathematician(Miroslavfiedler))",
      "KnownFor(Miroslavfiedler,ContributionsToLinearAlgebraAndGraphTheory)",
      "HonoredBy(Miroslavfiedler,FiedlerEigenvalue)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 53,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Czech(Miroslavfiedler) & Mathematician(Miroslavfiedler))",
      "KnownFor(Miroslavfiedler,ContributionsToLinearAlgebraAndGraphTheory)",
      "HonoredBy(Miroslavfiedler,FiedlerEigenvalue)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 446,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Laptop(x) -> Computer(x))",
      "all x.(Computer(x) -> CanPlayGames(x))",
      "all x.(Phone(x) -> -Computer(x))"
    ],
    "goal": ""
  },
  {
    "id": 447,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Laptop(x) -> Computer(x))",
      "all x.(Computer(x) -> CanPlayGames(x))",
      "all x.(Phone(x) -> -Computer(x))"
    ],
    "goal": ""
  },
  {
    "id": 29,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(AmericanPolitician(Walterbrown) & Lawyer(Walterbrown) & ServedAs(Walterbrown,Postamastergeneral))",
      "(Graduated(Walterbrown,Harvard) & GraduatedWith(Walterbrown,Bachelorsofart))",
      "(In(Walterbrown,Toledo) & In(Walterbrownfather,Toledo) & PracticedLawTogether(Walterbrownfather,Walterbrown))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 30,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(AmericanPolitician(Walterbrown) & Lawyer(Walterbrown) & ServedAs(Walterbrown,Postamastergeneral))",
      "(Graduated(Walterbrown,Harvard) & GraduatedWith(Walterbrown,Bachelorsofart))",
      "(In(Walterbrown,Toledo) & In(Walterbrownfather,Toledo) & PracticedLawTogether(Walterbrownfather,Walterbrown))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 31,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(AmericanPolitician(Walterbrown) & Lawyer(Walterbrown) & ServedAs(Walterbrown,Postamastergeneral))",
      "(Graduated(Walterbrown,Harvard) & GraduatedWith(Walterbrown,Bachelorsofart))",
      "(In(Walterbrown,Toledo) & In(Walterbrownfather,Toledo) & PracticedLawTogether(Walterbrownfather,Walterbrown))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1152,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ShipChina(x) -> MadeInChina(x))",
      "all x.(SoldJD(x) -> ShipChina(x))",
      "all x.(CommonlyUsedChina(x) -> SoldJD(x))",
      "all x.(FavoredByYoungPeople(x) -> CommonlyUsedChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1153,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ShipChina(x) -> MadeInChina(x))",
      "all x.(SoldJD(x) -> ShipChina(x))",
      "all x.(CommonlyUsedChina(x) -> SoldJD(x))",
      "all x.(FavoredByYoungPeople(x) -> CommonlyUsedChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1154,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ShipChina(x) -> MadeInChina(x))",
      "all x.(SoldJD(x) -> ShipChina(x))",
      "all x.(CommonlyUsedChina(x) -> SoldJD(x))",
      "all x.(FavoredByYoungPeople(x) -> CommonlyUsedChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1155,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ShipChina(x) -> MadeInChina(x))",
      "all x.(SoldJD(x) -> ShipChina(x))",
      "all x.(CommonlyUsedChina(x) -> SoldJD(x))",
      "all x.(FavoredByYoungPeople(x) -> CommonlyUsedChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1156,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ShipChina(x) -> MadeInChina(x))",
      "all x.(SoldJD(x) -> ShipChina(x))",
      "all x.(CommonlyUsedChina(x) -> SoldJD(x))",
      "all x.(FavoredByYoungPeople(x) -> CommonlyUsedChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 589,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(OxfordStreet(OxfordCircus) & RegentStreet(OxfordCircus))",
      "all x.(OxfordStreet(x) -> London(x))",
      "exists x.(RegentStreet(x) & Design(JohnNash,x))",
      "Design(JohnNash,OxfordCircus)",
      "(British(JohnNash) & Architect(JohnNash))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 590,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(OxfordStreet(OxfordCircus) & RegentStreet(OxfordCircus))",
      "all x.(OxfordStreet(x) -> London(x))",
      "exists x.(RegentStreet(x) & Design(JohnNash,x))",
      "Design(JohnNash,OxfordCircus)",
      "(British(JohnNash) & Architect(JohnNash))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 591,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(OxfordStreet(OxfordCircus) & RegentStreet(OxfordCircus))",
      "all x.(OxfordStreet(x) -> London(x))",
      "exists x.(RegentStreet(x) & Design(JohnNash,x))",
      "Design(JohnNash,OxfordCircus)",
      "(British(JohnNash) & Architect(JohnNash))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 592,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(OxfordStreet(OxfordCircus) & RegentStreet(OxfordCircus))",
      "all x.(OxfordStreet(x) -> London(x))",
      "exists x.(RegentStreet(x) & Design(JohnNash,x))",
      "Design(JohnNash,OxfordCircus)",
      "(British(JohnNash) & Architect(JohnNash))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1374,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Cat(x) & -Dog(x)) | (-Cat(x) & Dog(x)))",
      "all x.(Dog(x) -> Bark(x))",
      "all x.-Ghost(x)",
      "all x.(Bark(x) -> -Alive(x))",
      "all x.((Alive(x) & -Dead(x)) | (-Alive(x) & Dead(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1375,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Cat(x) & -Dog(x)) | (-Cat(x) & Dog(x)))",
      "all x.(Dog(x) -> Bark(x))",
      "all x.-Ghost(x)",
      "all x.(Bark(x) -> -Alive(x))",
      "all x.((Alive(x) & -Dead(x)) | (-Alive(x) & Dead(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1376,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Cat(x) & -Dog(x)) | (-Cat(x) & Dog(x)))",
      "all x.(Dog(x) -> Bark(x))",
      "all x.-Ghost(x)",
      "all x.(Bark(x) -> -Alive(x))",
      "all x.((Alive(x) & -Dead(x)) | (-Alive(x) & Dead(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1269,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1270,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1271,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1272,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tiger(x) -> Cat(x))",
      "all x.(Cat(x) -> -Dog(x))",
      "all x.(BengalTiger(x) -> Tiger(x))",
      "all x.(Husky(x) -> Dog(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 196,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((SummerOlympicsCity(x,y) & CityInCountry(y,Us)) -> SummerOlympicsCountry(x,Us))",
      "all x y.((CityInState(x,y) & StateInCountry(y,Us)) -> CityInCountry(x,Us))",
      "all x y z.((CityInState(x,y) & SummerOlympicsCity(z,x)) -> SummerOlympicsState(z,y))",
      "SummerOlympicsCity(Y2028,La)",
      "CityInState(La,Ca)",
      "CityInCountry(Atlanta,Us)",
      "StateInCountry(Ca,Us)",
      "CityInState(Atlanta,Ga)",
      "(-InSummerOlympics(Y2028,Boxing) & -InSummerOlympics(Y2028,Modern_pentathlon) & -InSummerOlympics(Y2028,Weightlifting))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 197,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((SummerOlympicsCity(x,y) & CityInCountry(y,Us)) -> SummerOlympicsCountry(x,Us))",
      "all x y.((CityInState(x,y) & StateInCountry(y,Us)) -> CityInCountry(x,Us))",
      "all x y z.((CityInState(x,y) & SummerOlympicsCity(z,x)) -> SummerOlympicsState(z,y))",
      "SummerOlympicsCity(Y2028,La)",
      "CityInState(La,Ca)",
      "CityInCountry(Atlanta,Us)",
      "StateInCountry(Ca,Us)",
      "CityInState(Atlanta,Ga)",
      "(-InSummerOlympics(Y2028,Boxing) & -InSummerOlympics(Y2028,Modern_pentathlon) & -InSummerOlympics(Y2028,Weightlifting))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 198,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((SummerOlympicsCity(x,y) & CityInCountry(y,Us)) -> SummerOlympicsCountry(x,Us))",
      "all x y.((CityInState(x,y) & StateInCountry(y,Us)) -> CityInCountry(x,Us))",
      "all x y z.((CityInState(x,y) & SummerOlympicsCity(z,x)) -> SummerOlympicsState(z,y))",
      "SummerOlympicsCity(Y2028,La)",
      "CityInState(La,Ca)",
      "CityInCountry(Atlanta,Us)",
      "StateInCountry(Ca,Us)",
      "CityInState(Atlanta,Ga)",
      "(-InSummerOlympics(Y2028,Boxing) & -InSummerOlympics(Y2028,Modern_pentathlon) & -InSummerOlympics(Y2028,Weightlifting))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 23,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Vole(TaigaVole) & Find(TaigaVole,NorthAmerica))",
      "all x.(Vole(x) -> CatLikePlayingWith(x))",
      "Live(TaigaVole,BorealTaigaZone)",
      "all x.((Find(x,NorthAmerica) & Live(x,BorealTaigaZone)) -> LiveInColdPlace(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 24,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Vole(TaigaVole) & Find(TaigaVole,NorthAmerica))",
      "all x.(Vole(x) -> CatLikePlayingWith(x))",
      "Live(TaigaVole,BorealTaigaZone)",
      "all x.((Find(x,NorthAmerica) & Live(x,BorealTaigaZone)) -> LiveInColdPlace(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1046,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1047,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1048,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 175,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Lab(x) & AOC(x))",
      "all x.(Lab(x) -> Cheaper(x))",
      "all x.(Cheaper(x) -> A1080p(x))",
      "all x.(A1080p(x) -> -TypeC(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 176,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Lab(x) & AOC(x))",
      "all x.(Lab(x) -> Cheaper(x))",
      "all x.(Cheaper(x) -> A1080p(x))",
      "all x.(A1080p(x) -> -TypeC(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 177,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Lab(x) & AOC(x))",
      "all x.(Lab(x) -> Cheaper(x))",
      "all x.(Cheaper(x) -> A1080p(x))",
      "all x.(A1080p(x) -> -TypeC(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1160,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldBoston(x) -> ShippedFromColumbia(x))",
      "exists x.(SoldNewHaven(x) & ShippedFromMexico(x))",
      "all x.(ShippedFromColumbia(x) -> -SoldNewYork(x))",
      "(SoldNewYork(Avocado) | SoldBoston(Avocado))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1161,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldBoston(x) -> ShippedFromColumbia(x))",
      "exists x.(SoldNewHaven(x) & ShippedFromMexico(x))",
      "all x.(ShippedFromColumbia(x) -> -SoldNewYork(x))",
      "(SoldNewYork(Avocado) | SoldBoston(Avocado))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1162,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldBoston(x) -> ShippedFromColumbia(x))",
      "exists x.(SoldNewHaven(x) & ShippedFromMexico(x))",
      "all x.(ShippedFromColumbia(x) -> -SoldNewYork(x))",
      "(SoldNewYork(Avocado) | SoldBoston(Avocado))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1163,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldBoston(x) -> ShippedFromColumbia(x))",
      "exists x.(SoldNewHaven(x) & ShippedFromMexico(x))",
      "all x.(ShippedFromColumbia(x) -> -SoldNewYork(x))",
      "(SoldNewYork(Avocado) | SoldBoston(Avocado))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1183,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Library(x) & AOC(x))",
      "all x.(Library(x) -> Cheap(x))",
      "all x.(Cheap(x) -> A1080p(x))",
      "all x.(A1080p(x) -> -TypeC(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1184,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Library(x) & AOC(x))",
      "all x.(Library(x) -> Cheap(x))",
      "all x.(Cheap(x) -> A1080p(x))",
      "all x.(A1080p(x) -> -TypeC(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1185,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Library(x) & AOC(x))",
      "all x.(Library(x) -> Cheap(x))",
      "all x.(Cheap(x) -> A1080p(x))",
      "all x.(A1080p(x) -> -TypeC(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 10,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Hold(Suduva,Thelithuaniansupercup)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 286,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((AinderbyQuernhow(x) -> Village(x)) & CivilParish(x) & Hambleton(x))",
      "all x.(Hambleton(x) -> NorthYorkshire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 287,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((AinderbyQuernhow(x) -> Village(x)) & CivilParish(x) & Hambleton(x))",
      "all x.(Hambleton(x) -> NorthYorkshire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 139,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Author(DouglasAdams) & Book(TheSalmonOfDoubt))",
      "(AboutLifeExperience(TheSalmonOfDoubt) & AboutTechnology(TheSalmonOfDoubt))",
      "all x.(Author(x) -> Writer(x))",
      "all x.(Writer(x) -> CreateInnovativeIdea(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 140,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Author(DouglasAdams) & Book(TheSalmonOfDoubt))",
      "(AboutLifeExperience(TheSalmonOfDoubt) & AboutTechnology(TheSalmonOfDoubt))",
      "all x.(Author(x) -> Writer(x))",
      "all x.(Writer(x) -> CreateInnovativeIdea(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 141,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Author(DouglasAdams) & Book(TheSalmonOfDoubt))",
      "(AboutLifeExperience(TheSalmonOfDoubt) & AboutTechnology(TheSalmonOfDoubt))",
      "all x.(Author(x) -> Writer(x))",
      "all x.(Writer(x) -> CreateInnovativeIdea(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 827,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 828,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 829,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 830,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 831,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 832,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 284,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Cricketeer(Royrichardson) & PlayedFor(Royrichardson,Sintmaartener) & ConstituentCountry(Sintmaartener))",
      "(RightHanded(Royrichardson) & Batsman(Royrichardson) & MediumPaceBowler(Royrichardson))",
      "(Old(Royrichardson) & DebutedIn(Royrichardson,Cricket))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 285,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Cricketeer(Royrichardson) & PlayedFor(Royrichardson,Sintmaartener) & ConstituentCountry(Sintmaartener))",
      "(RightHanded(Royrichardson) & Batsman(Royrichardson) & MediumPaceBowler(Royrichardson))",
      "(Old(Royrichardson) & DebutedIn(Royrichardson,Cricket))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 700,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Employed(x,Google) -> WorkExp(x)) | GoodEduc(x))",
      "all x.((Yale(x) & CV(x,Google)) -> Employed(x,Google))",
      "WorkExp(John)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 889,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Student(x) -> -Doctor(x))",
      "all x.(TakingClass(x) -> Student(x))",
      "all x.(GraduateStudent(x) -> TakingClass(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 890,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Student(x) -> -Doctor(x))",
      "all x.(TakingClass(x) -> Student(x))",
      "all x.(GraduateStudent(x) -> TakingClass(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 891,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Student(x) -> -Doctor(x))",
      "all x.(TakingClass(x) -> Student(x))",
      "all x.(GraduateStudent(x) -> TakingClass(x))",
      "all x.(PhDStudent(x) -> GraduateStudent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 93,
    "flag": "None goal or assumptions",
    "assumptions": [
      "WorldLeadingLightningDesigner(HughVanstone)",
      "FromUK(HughVanstone)",
      "LitOver160Productions(HughVanstone)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 94,
    "flag": "None goal or assumptions",
    "assumptions": [
      "WorldLeadingLightningDesigner(HughVanstone)",
      "FromUK(HughVanstone)",
      "LitOver160Productions(HughVanstone)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 95,
    "flag": "None goal or assumptions",
    "assumptions": [
      "WorldLeadingLightningDesigner(HughVanstone)",
      "FromUK(HughVanstone)",
      "LitOver160Productions(HughVanstone)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 450,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Man(x) -> -FasterThanBolt(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 380,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorStanford(DonaldErvinKnuth))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 381,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorStanford(DonaldErvinKnuth))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 382,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorStanford(DonaldErvinKnuth))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 363,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FleaBeetle(Neocrepidoderacorpulenta) | Moth(Neocrepidoderacorpulenta))",
      "(Species(Neocrepidoderacorpulenta) & Family(Chrysomelidae) & In(Neocrepidoderacorpulenta,Chrysomelidae))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 364,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FleaBeetle(Neocrepidoderacorpulenta) | Moth(Neocrepidoderacorpulenta))",
      "(Species(Neocrepidoderacorpulenta) & Family(Chrysomelidae) & In(Neocrepidoderacorpulenta,Chrysomelidae))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 644,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MilaneseCoachbuilderCompany(Carrozzeriacolli) & EstablishedBy(Carrozzeriacolli,Giuseppecolli) & EstablishedIn(Carrozzeriacolli,Y1901))",
      "SpecializedIn(Carrozzeriacolli,Usingaluminum)",
      "all x.(FirstAutomobilesBy(x,Carrozzeriacolli) -> Racingcar(x))",
      "exists x.(RacingCar(x) & BuiltBy(x,Carrozzeriacolli) & Used(x,Fiat110mechanicals) & Used(x,Chasis))",
      "exists x.(Airforce(x) & WorkedFor(Carrozzeriacolli,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 645,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MilaneseCoachbuilderCompany(Carrozzeriacolli) & EstablishedBy(Carrozzeriacolli,Giuseppecolli) & EstablishedIn(Carrozzeriacolli,Y1901))",
      "SpecializedIn(Carrozzeriacolli,Usingaluminum)",
      "all x.(FirstAutomobilesBy(x,Carrozzeriacolli) -> Racingcar(x))",
      "exists x.(RacingCar(x) & BuiltBy(x,Carrozzeriacolli) & Used(x,Fiat110mechanicals) & Used(x,Chasis))",
      "exists x.(Airforce(x) & WorkedFor(Carrozzeriacolli,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 646,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MilaneseCoachbuilderCompany(Carrozzeriacolli) & EstablishedBy(Carrozzeriacolli,Giuseppecolli) & EstablishedIn(Carrozzeriacolli,Y1901))",
      "SpecializedIn(Carrozzeriacolli,Usingaluminum)",
      "all x.(FirstAutomobilesBy(x,Carrozzeriacolli) -> Racingcar(x))",
      "exists x.(RacingCar(x) & BuiltBy(x,Carrozzeriacolli) & Used(x,Fiat110mechanicals) & Used(x,Chasis))",
      "exists x.(Airforce(x) & WorkedFor(Carrozzeriacolli,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 647,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MilaneseCoachbuilderCompany(Carrozzeriacolli) & EstablishedBy(Carrozzeriacolli,Giuseppecolli) & EstablishedIn(Carrozzeriacolli,Y1901))",
      "SpecializedIn(Carrozzeriacolli,Usingaluminum)",
      "all x.(FirstAutomobilesBy(x,Carrozzeriacolli) -> Racingcar(x))",
      "exists x.(RacingCar(x) & BuiltBy(x,Carrozzeriacolli) & Used(x,Fiat110mechanicals) & Used(x,Chasis))",
      "exists x.(Airforce(x) & WorkedFor(Carrozzeriacolli,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 648,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MilaneseCoachbuilderCompany(Carrozzeriacolli) & EstablishedBy(Carrozzeriacolli,Giuseppecolli) & EstablishedIn(Carrozzeriacolli,Y1901))",
      "SpecializedIn(Carrozzeriacolli,Usingaluminum)",
      "all x.(FirstAutomobilesBy(x,Carrozzeriacolli) -> Racingcar(x))",
      "exists x.(RacingCar(x) & BuiltBy(x,Carrozzeriacolli) & Used(x,Fiat110mechanicals) & Used(x,Chasis))",
      "exists x.(Airforce(x) & WorkedFor(Carrozzeriacolli,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 387,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(GoToTheCinema(John,Today) <-> GoToTheCinema(Jack,Today))",
      "(GoToTheCinema(Jack,Today) <-> (Movie(Ironman) & -BadWeather(Today)))",
      "exists x.(Month(March) -> BadWeather(x))",
      "Movie(Ironman)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 388,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(GoToTheCinema(John,Today) <-> GoToTheCinema(Jack,Today))",
      "(GoToTheCinema(Jack,Today) <-> (Movie(Ironman) & -BadWeather(Today)))",
      "exists x.(Month(March) -> BadWeather(x))",
      "Movie(Ironman)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 247,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((QuiksilverSells(x) -> Sportswear(x)) | Clothing(x) | Footwear(x) | Accessory(x))",
      "Clothing(Flannel)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 248,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((QuiksilverSells(x) -> Sportswear(x)) | Clothing(x) | Footwear(x) | Accessory(x))",
      "Clothing(Flannel)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 249,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((QuiksilverSells(x) -> Sportswear(x)) | Clothing(x) | Footwear(x) | Accessory(x))",
      "Clothing(Flannel)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 765,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Nintendo(x) -> -SupportPS4(x))",
      "all x.(Pokemon(x) -> Nintendo(x))",
      "all x.(FIFA(x) -> SupportPS4(x))",
      "all x.(SoccerOnline(x) -> FIFA(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 766,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Nintendo(x) -> -SupportPS4(x))",
      "all x.(Pokemon(x) -> Nintendo(x))",
      "all x.(FIFA(x) -> SupportPS4(x))",
      "all x.(SoccerOnline(x) -> FIFA(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 767,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Nintendo(x) -> -SupportPS4(x))",
      "all x.(Pokemon(x) -> Nintendo(x))",
      "all x.(FIFA(x) -> SupportPS4(x))",
      "all x.(SoccerOnline(x) -> FIFA(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 768,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Nintendo(x) -> -SupportPS4(x))",
      "all x.(Pokemon(x) -> Nintendo(x))",
      "all x.(FIFA(x) -> SupportPS4(x))",
      "all x.(SoccerOnline(x) -> FIFA(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 778,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RussianBank(x) -> -ApplePay(x))",
      "all x.(Mir(x) -> RussianBank(x))",
      "exists x.(International(x) -> ApplePay(x))",
      "all x.(SocialRussia(x) -> Mir(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 779,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RussianBank(x) -> -ApplePay(x))",
      "all x.(Mir(x) -> RussianBank(x))",
      "exists x.(International(x) -> ApplePay(x))",
      "all x.(SocialRussia(x) -> Mir(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 780,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RussianBank(x) -> -ApplePay(x))",
      "all x.(Mir(x) -> RussianBank(x))",
      "exists x.(International(x) -> ApplePay(x))",
      "all x.(SocialRussia(x) -> Mir(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 151,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Chevrolet(LuminaAPV)",
      "(Chevrolet(Astro) & Van(Astro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 152,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Chevrolet(LuminaAPV)",
      "(Chevrolet(Astro) & Van(Astro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 153,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Chevrolet(LuminaAPV)",
      "(Chevrolet(Astro) & Van(Astro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 154,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Chevrolet(LuminaAPV)",
      "(Chevrolet(Astro) & Van(Astro))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1128,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InPerson(x) -> Commuter(x))",
      "all x.((InPerson(x) & -FromHome(x)) | (-InPerson(x) & FromHome(x)))",
      "all x.(FromHome(x) -> Relaxed(x))",
      "((Commuter(George) & -HomeOffice(George)) | (-Commuter(George) & HomeOffice(George)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1129,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InPerson(x) -> Commuter(x))",
      "all x.((InPerson(x) & -FromHome(x)) | (-InPerson(x) & FromHome(x)))",
      "all x.(FromHome(x) -> Relaxed(x))",
      "((Commuter(George) & -HomeOffice(George)) | (-Commuter(George) & HomeOffice(George)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1130,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InPerson(x) -> Commuter(x))",
      "all x.((InPerson(x) & -FromHome(x)) | (-InPerson(x) & FromHome(x)))",
      "all x.(FromHome(x) -> Relaxed(x))",
      "((Commuter(George) & -HomeOffice(George)) | (-Commuter(George) & HomeOffice(George)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 81,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MusicSupervisor(JasonKramer) & American(JasonKramer))",
      "exists x.(American(x) & MusicSupervisor(x) & RadioPersonality(x))",
      "all x.(HostShowOnPublicRadioStation(x) -> RadioPersonality(x))",
      "RadioPersonality(JoeRogan)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 82,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MusicSupervisor(JasonKramer) & American(JasonKramer))",
      "exists x.(American(x) & MusicSupervisor(x) & RadioPersonality(x))",
      "all x.(HostShowOnPublicRadioStation(x) -> RadioPersonality(x))",
      "RadioPersonality(JoeRogan)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 83,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(MusicSupervisor(JasonKramer) & American(JasonKramer))",
      "exists x.(American(x) & MusicSupervisor(x) & RadioPersonality(x))",
      "all x.(HostShowOnPublicRadioStation(x) -> RadioPersonality(x))",
      "RadioPersonality(JoeRogan)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1228,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Walmart(x) -> -France(x))",
      "all x.(Company(x) -> Walmart(x))",
      "all x.(Columbia(x) -> France(x))",
      "all x.(Favored(x) -> Columbia(x))",
      "all x.(HighPrice(x) -> Favored(x))",
      "-(Columbia(Civetcoffee) & HighPrice(Civetcoffee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1229,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Walmart(x) -> -France(x))",
      "all x.(Company(x) -> Walmart(x))",
      "all x.(Columbia(x) -> France(x))",
      "all x.(Favored(x) -> Columbia(x))",
      "all x.(HighPrice(x) -> Favored(x))",
      "-(Columbia(Civetcoffee) & HighPrice(Civetcoffee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1230,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Walmart(x) -> -France(x))",
      "all x.(Company(x) -> Walmart(x))",
      "all x.(Columbia(x) -> France(x))",
      "all x.(Favored(x) -> Columbia(x))",
      "all x.(HighPrice(x) -> Favored(x))",
      "-(Columbia(Civetcoffee) & HighPrice(Civetcoffee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1231,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Walmart(x) -> -France(x))",
      "all x.(Company(x) -> Walmart(x))",
      "all x.(Columbia(x) -> France(x))",
      "all x.(Favored(x) -> Columbia(x))",
      "all x.(HighPrice(x) -> Favored(x))",
      "-(Columbia(Civetcoffee) & HighPrice(Civetcoffee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 600,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Galicia(x) -> Spain(x)) & -Poland(x)) | (-(Galicia(x) -> Spain(x)) & Poland(x)))",
      "all x.(Spain(x) -> Europe(x))",
      "all x.(Poland(x) -> Europe(x))",
      "all x.(RochelleLive(x) -> Europe(x))",
      "all x.(DominiqueLive(x) -> -Europe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 601,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Galicia(x) -> Spain(x)) & -Poland(x)) | (-(Galicia(x) -> Spain(x)) & Poland(x)))",
      "all x.(Spain(x) -> Europe(x))",
      "all x.(Poland(x) -> Europe(x))",
      "all x.(RochelleLive(x) -> Europe(x))",
      "all x.(DominiqueLive(x) -> -Europe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 602,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Galicia(x) -> Spain(x)) & -Poland(x)) | (-(Galicia(x) -> Spain(x)) & Poland(x)))",
      "all x.(Spain(x) -> Europe(x))",
      "all x.(Poland(x) -> Europe(x))",
      "all x.(RochelleLive(x) -> Europe(x))",
      "all x.(DominiqueLive(x) -> -Europe(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 322,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(RalphHammerthaler,WasserburgAmInn)",
      "LocatedIn(WasserbAmInn,Germany)",
      "LocatedIn(Germany,Europe)",
      "Writer(RalphHammerthaler)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 323,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(RalphHammerthaler,WasserburgAmInn)",
      "LocatedIn(WasserbAmInn,Germany)",
      "LocatedIn(Germany,Europe)",
      "Writer(RalphHammerthaler)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1171,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(WrittenByTomas(x) -> SoldOneMillion(x))",
      "exists x.(WinningHugoAward(x) & WrittenByTomas(x))",
      "all x.(AboutFuture(x) -> InspiredFromShakespeare(x))",
      "((InspiredFromShakespeare(Y2001) & -SoldOneMillion(Y2001)) | (-InspiredFromShakespeare(Y2001) & SoldOneMillion(Y2001)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1172,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(WrittenByTomas(x) -> SoldOneMillion(x))",
      "exists x.(WinningHugoAward(x) & WrittenByTomas(x))",
      "all x.(AboutFuture(x) -> InspiredFromShakespeare(x))",
      "((InspiredFromShakespeare(Y2001) & -SoldOneMillion(Y2001)) | (-InspiredFromShakespeare(Y2001) & SoldOneMillion(Y2001)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1173,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(WrittenByTomas(x) -> SoldOneMillion(x))",
      "exists x.(WinningHugoAward(x) & WrittenByTomas(x))",
      "all x.(AboutFuture(x) -> InspiredFromShakespeare(x))",
      "((InspiredFromShakespeare(Y2001) & -SoldOneMillion(Y2001)) | (-InspiredFromShakespeare(Y2001) & SoldOneMillion(Y2001)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1398,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1399,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1400,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1401,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Grass(x) -> -Food(x))",
      "all x.(Meadow(x) -> Grass(x))",
      "all x.(Edible(x) -> Food(x))",
      "all x.(Fruit(x) -> Edible(x))",
      "all x.(Lemon(x) -> Fruit(x))",
      "-(Edible(Grape) & Lemon(Grape))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 60,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Team(Goldenstatewarriors) & From(Goldenstatewarriors,Sanfrancisco))",
      "Won(Goldenstatewarriors,Nbafinals)",
      "all x.((Team(x) & Attending(x,Nbafinals)) -> HasMoreThan(x,Thirtyyearsofhistory))",
      "(Team(Bostonceltics) & Lost(Bostonceltics,Nbafinals))",
      "all x.((Team(x) & Won(x,Nbafinals)) -> MoreIncome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 61,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Team(Goldenstatewarriors) & From(Goldenstatewarriors,Sanfrancisco))",
      "Won(Goldenstatewarriors,Nbafinals)",
      "all x.((Team(x) & Attending(x,Nbafinals)) -> HasMoreThan(x,Thirtyyearsofhistory))",
      "(Team(Bostonceltics) & Lost(Bostonceltics,Nbafinals))",
      "all x.((Team(x) & Won(x,Nbafinals)) -> MoreIncome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 62,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Team(Goldenstatewarriors) & From(Goldenstatewarriors,Sanfrancisco))",
      "Won(Goldenstatewarriors,Nbafinals)",
      "all x.((Team(x) & Attending(x,Nbafinals)) -> HasMoreThan(x,Thirtyyearsofhistory))",
      "(Team(Bostonceltics) & Lost(Bostonceltics,Nbafinals))",
      "all x.((Team(x) & Won(x,Nbafinals)) -> MoreIncome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 624,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(CanInjureFingures(Maya) -> -WillPlayViolin(Maya))",
      "all x.(VolleyballPlayer(x) -> CanInjureFingures(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1220,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InCompany(x) -> GoogleHome(x))",
      "all x.(CompanyLogo(x) -> InCompany(x))",
      "all x.(CompanyLogo(x) | Employee(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> ControlledByManager(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "all x.(EasyToOperate(x) -> ProducedAfter2020(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1221,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InCompany(x) -> GoogleHome(x))",
      "all x.(CompanyLogo(x) -> InCompany(x))",
      "all x.(CompanyLogo(x) | Employee(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> ControlledByManager(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "all x.(EasyToOperate(x) -> ProducedAfter2020(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1222,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InCompany(x) -> GoogleHome(x))",
      "all x.(CompanyLogo(x) -> InCompany(x))",
      "all x.(CompanyLogo(x) | Employee(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> ControlledByManager(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "all x.(EasyToOperate(x) -> ProducedAfter2020(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1223,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InCompany(x) -> GoogleHome(x))",
      "all x.(CompanyLogo(x) -> InCompany(x))",
      "all x.(CompanyLogo(x) | Employee(x))",
      "all x.(Employee(x) -> Wifi(x))",
      "all x.(GoogleHome(x) -> ControlledByManager(x))",
      "all x.(Wifi(x) -> EasyToOperate(x))",
      "all x.(EasyToOperate(x) -> ProducedAfter2020(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 715,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(CDPlayer(x) -> DelicateMechanism(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 921,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) | Mammal(Jumbo)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 922,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) | Mammal(Jumbo)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 923,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) | Mammal(Jumbo)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 924,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) | Mammal(Jumbo)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 925,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Mammal(x) -> LivingBeing(x))",
      "all x.(Elephant(x) -> Mammal(x))",
      "all x.(BabyElephant(x) -> Elephant(x))",
      "exists x.(BabyElephant(x) & Sleepy(x))",
      "(LivingBeing(Jumbo) -> -(Elephant(Jumbo) | Mammal(Jumbo)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1291,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Faculty(x) -> -DoesHomework(x))",
      "all x.(Student(x) -> DoesHomework(x))",
      "all x.(Kid(x) -> Student(x))",
      "all x.(WorkAtSchool(x) -> Faculty(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1292,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Faculty(x) -> -DoesHomework(x))",
      "all x.(Student(x) -> DoesHomework(x))",
      "all x.(Kid(x) -> Student(x))",
      "all x.(WorkAtSchool(x) -> Faculty(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1293,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Faculty(x) -> -DoesHomework(x))",
      "all x.(Student(x) -> DoesHomework(x))",
      "all x.(Kid(x) -> Student(x))",
      "all x.(WorkAtSchool(x) -> Faculty(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 941,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(MaxListensToClassicalMusic(x) | MaxListensToRap(x))",
      "all x.(MaxListensToClassicalMusic(x) -> SongsFrom12thCentury(x))",
      "all x.(MaxListensToRap(x) -> SongsFromKanyeWest(x))",
      "all x.(SongsFromKanyeWest(x) -> SongsFullOfLyrics(x))",
      "all x.(SongsFullOfLyrics(x) -> NeedToBeWrittenWithWords(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 942,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(MaxListensToClassicalMusic(x) | MaxListensToRap(x))",
      "all x.(MaxListensToClassicalMusic(x) -> SongsFrom12thCentury(x))",
      "all x.(MaxListensToRap(x) -> SongsFromKanyeWest(x))",
      "all x.(SongsFromKanyeWest(x) -> SongsFullOfLyrics(x))",
      "all x.(SongsFullOfLyrics(x) -> NeedToBeWrittenWithWords(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 943,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(MaxListensToClassicalMusic(x) | MaxListensToRap(x))",
      "all x.(MaxListensToClassicalMusic(x) -> SongsFrom12thCentury(x))",
      "all x.(MaxListensToRap(x) -> SongsFromKanyeWest(x))",
      "all x.(SongsFromKanyeWest(x) -> SongsFullOfLyrics(x))",
      "all x.(SongsFullOfLyrics(x) -> NeedToBeWrittenWithWords(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 114,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Produce(WhiteTown,YourWoman)",
      "Peak(YourWoman,UKSinglesChart)",
      "all x y.(Peak(x,y) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 115,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Produce(WhiteTown,YourWoman)",
      "Peak(YourWoman,UKSinglesChart)",
      "all x y.(Peak(x,y) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 116,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Produce(WhiteTown,YourWoman)",
      "Peak(YourWoman,UKSinglesChart)",
      "all x y.(Peak(x,y) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1001,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Limp(x) -> Medical(x))",
      "all x.(Medical(x) -> -Spry(x))",
      "[[ERROR]]",
      "all x.(Indoors(x) -> -Gym(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1002,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Limp(x) -> Medical(x))",
      "all x.(Medical(x) -> -Spry(x))",
      "[[ERROR]]",
      "all x.(Indoors(x) -> -Gym(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1003,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Limp(x) -> Medical(x))",
      "all x.(Medical(x) -> -Spry(x))",
      "[[ERROR]]",
      "all x.(Indoors(x) -> -Gym(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 543,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameScore(x,y) & During(RegularTime)) -> PlayExtra(x,y))",
      "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameScore(x,y) & During(RegularTime) & During(ExtraTime)) -> PlayPenalty(x,y))",
      "(SoccerTeam(RealMadrid) & SoccerTeam(AtleticoMadrid) & SameScore(RealMadrid,AtleticoMadrid) & During(RegularTime))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 544,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameScore(x,y) & During(RegularTime)) -> PlayExtra(x,y))",
      "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameScore(x,y) & During(RegularTime) & During(ExtraTime)) -> PlayPenalty(x,y))",
      "(SoccerTeam(RealMadrid) & SoccerTeam(AtleticoMadrid) & SameScore(RealMadrid,AtleticoMadrid) & During(RegularTime))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 35,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BasedOn(System7,Uk) & ElectronicDanceMusicBand(System7))",
      "(Formed(Stevehillage,System7) & Formed(Miquettegiraudy,System7))",
      "(FormerMemberOf(Stevehillage,Gong) & FormerMemberOf(Miquettegiraudy,Gong))",
      "all x.(ElectronicDanceMusicBand(x) -> Band(x))",
      "exists x.(ClubSingle(x) & Released(System7,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 36,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BasedOn(System7,Uk) & ElectronicDanceMusicBand(System7))",
      "(Formed(Stevehillage,System7) & Formed(Miquettegiraudy,System7))",
      "(FormerMemberOf(Stevehillage,Gong) & FormerMemberOf(Miquettegiraudy,Gong))",
      "all x.(ElectronicDanceMusicBand(x) -> Band(x))",
      "exists x.(ClubSingle(x) & Released(System7,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 37,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BasedOn(System7,Uk) & ElectronicDanceMusicBand(System7))",
      "(Formed(Stevehillage,System7) & Formed(Miquettegiraudy,System7))",
      "(FormerMemberOf(Stevehillage,Gong) & FormerMemberOf(Miquettegiraudy,Gong))",
      "all x.(ElectronicDanceMusicBand(x) -> Band(x))",
      "exists x.(ClubSingle(x) & Released(System7,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 545,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Model(x) & Summarization(x) & OnlyUseInputDocument(x)) -> Faithful(x))",
      "all x.((Model(x) & Extractive(x)) -> Summarization(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 546,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Model(x) & Summarization(x) & OnlyUseInputDocument(x)) -> Faithful(x))",
      "all x.((Model(x) & Extractive(x)) -> Summarization(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 989,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Coding(x) -> -StudyingToBeDoctor(x))",
      "all x.(Industry(x) -> Coding(x))",
      "all x.(Healthcare(x) -> StudyingToBeDoctor(x))",
      "all x.(ParentDoctors(x) -> Healthcare(x))",
      "all x.(Study(x) -> ParentDoctors(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 990,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Coding(x) -> -StudyingToBeDoctor(x))",
      "all x.(Industry(x) -> Coding(x))",
      "all x.(Healthcare(x) -> StudyingToBeDoctor(x))",
      "all x.(ParentDoctors(x) -> Healthcare(x))",
      "all x.(Study(x) -> ParentDoctors(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 991,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Coding(x) -> -StudyingToBeDoctor(x))",
      "all x.(Industry(x) -> Coding(x))",
      "all x.(Healthcare(x) -> StudyingToBeDoctor(x))",
      "all x.(ParentDoctors(x) -> Healthcare(x))",
      "all x.(Study(x) -> ParentDoctors(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1028,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Spa(x) -> -Miserly(x))",
      "all x.(Miserly(x) | Frivolous(x))",
      "all x.(Frivolous(x) -> Luxury(x))",
      "all x.(Luxury(x) -> Shopping(x))",
      "(-Miserly(Jess) -> -Luxury(Jess))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1029,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Spa(x) -> -Miserly(x))",
      "all x.(Miserly(x) | Frivolous(x))",
      "all x.(Frivolous(x) -> Luxury(x))",
      "all x.(Luxury(x) -> Shopping(x))",
      "(-Miserly(Jess) -> -Luxury(Jess))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1030,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Spa(x) -> -Miserly(x))",
      "all x.(Miserly(x) | Frivolous(x))",
      "all x.(Frivolous(x) -> Luxury(x))",
      "all x.(Luxury(x) -> Shopping(x))",
      "(-Miserly(Jess) -> -Luxury(Jess))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 628,
    "flag": "None goal or assumptions",
    "assumptions": [
      "AlbumsReleased(Phoenix,L6)",
      "(Album(Wolfgangamadeusphoenix) & IsAlbumOf(Wolfgangamadeusphoenix,Phoenix) & SoldOver(Wolfgangamadeusphoenix,L500000))",
      "all x.(((Album(x) | Single(x)) & SoldOver(x,L500000)) -> CertifiedGold(x))",
      "(Single(L1901) & From(L1901,Wolfgangamadeusphoenix) & By(L1901,Phoenix))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 629,
    "flag": "None goal or assumptions",
    "assumptions": [
      "AlbumsReleased(Phoenix,L6)",
      "(Album(Wolfgangamadeusphoenix) & IsAlbumOf(Wolfgangamadeusphoenix,Phoenix) & SoldOver(Wolfgangamadeusphoenix,L500000))",
      "all x.(((Album(x) | Single(x)) & SoldOver(x,L500000)) -> CertifiedGold(x))",
      "(Single(L1901) & From(L1901,Wolfgangamadeusphoenix) & By(L1901,Phoenix))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 11,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Superhero(Peter) & -Civilian(Peter)) | (-Superhero(Peter) & Civilian(Peter)))",
      "Destroyer(Hulk)",
      "(Angry(Hulk) -> Wake(Hulk))",
      "(Wake(Hulk) -> BreakBridge(Hulk))",
      "God(Thor)",
      "(Happy(Thor) -> BreakBridge(Thor))",
      "all x.(God(x) <-> -Destroyer(x))",
      "(Superhero(Peter) -> WearUniform(Peter))",
      "all x.(-Civilian(Peter) <-> (Destroyer(x) & BreakBridge(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 12,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Superhero(Peter) & -Civilian(Peter)) | (-Superhero(Peter) & Civilian(Peter)))",
      "Destroyer(Hulk)",
      "(Angry(Hulk) -> Wake(Hulk))",
      "(Wake(Hulk) -> BreakBridge(Hulk))",
      "God(Thor)",
      "(Happy(Thor) -> BreakBridge(Thor))",
      "all x.(God(x) <-> -Destroyer(x))",
      "(Superhero(Peter) -> WearUniform(Peter))",
      "all x.(-Civilian(Peter) <-> (Destroyer(x) & BreakBridge(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 13,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Superhero(Peter) & -Civilian(Peter)) | (-Superhero(Peter) & Civilian(Peter)))",
      "Destroyer(Hulk)",
      "(Angry(Hulk) -> Wake(Hulk))",
      "(Wake(Hulk) -> BreakBridge(Hulk))",
      "God(Thor)",
      "(Happy(Thor) -> BreakBridge(Thor))",
      "all x.(God(x) <-> -Destroyer(x))",
      "(Superhero(Peter) -> WearUniform(Peter))",
      "all x.(-Civilian(Peter) <-> (Destroyer(x) & BreakBridge(x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 259,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Diethylcarbamazine(x) & Medication(x) & DiscoveredIn(x,Year1947))",
      "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))",
      "all x y.((RiverBlindness(y) & PreferredTreatment(x,y)) -> Ivermectin(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 260,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Diethylcarbamazine(x) & Medication(x) & DiscoveredIn(x,Year1947))",
      "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))",
      "all x y.((RiverBlindness(y) & PreferredTreatment(x,y)) -> Ivermectin(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 261,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Diethylcarbamazine(x) & Medication(x) & DiscoveredIn(x,Year1947))",
      "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))",
      "all x y.((RiverBlindness(y) & PreferredTreatment(x,y)) -> Ivermectin(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1062,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))",
      "all x.(MultivoxelPatternAnalysis(x) -> ImplementingMachineLearningAlgorithms(x))",
      "all x.(ImplementingMachineLearningAlgorithms(x) -> LearnAndClassifyMultivariateData(x))",
      "(UsesGeneralizedLinearModel(LatentDirichletAllocationModel) | UnivariateAnalysis(LatentDirichletAllocationModel))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1063,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))",
      "all x.(MultivoxelPatternAnalysis(x) -> ImplementingMachineLearningAlgorithms(x))",
      "all x.(ImplementingMachineLearningAlgorithms(x) -> LearnAndClassifyMultivariateData(x))",
      "(UsesGeneralizedLinearModel(LatentDirichletAllocationModel) | UnivariateAnalysis(LatentDirichletAllocationModel))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1064,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))",
      "all x.(MultivoxelPatternAnalysis(x) -> ImplementingMachineLearningAlgorithms(x))",
      "all x.(ImplementingMachineLearningAlgorithms(x) -> LearnAndClassifyMultivariateData(x))",
      "(UsesGeneralizedLinearModel(LatentDirichletAllocationModel) | UnivariateAnalysis(LatentDirichletAllocationModel))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1040,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RequiresAMedicalDiagnosis(x) -> LabTestsOrImagingRequired(x))",
      "all x.(RareDiseases(x) -> RequiresAMedicalDiagnosis(x))",
      "all x.(Mild(x) -> -LabTestsOrImagingRequired(x))",
      "all x.(BloodCancer(x) -> RareDiseases(x))",
      "all x.(Leukemia(x) -> BloodCancer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1041,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RequiresAMedicalDiagnosis(x) -> LabTestsOrImagingRequired(x))",
      "all x.(RareDiseases(x) -> RequiresAMedicalDiagnosis(x))",
      "all x.(Mild(x) -> -LabTestsOrImagingRequired(x))",
      "all x.(BloodCancer(x) -> RareDiseases(x))",
      "all x.(Leukemia(x) -> BloodCancer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1042,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RequiresAMedicalDiagnosis(x) -> LabTestsOrImagingRequired(x))",
      "all x.(RareDiseases(x) -> RequiresAMedicalDiagnosis(x))",
      "all x.(Mild(x) -> -LabTestsOrImagingRequired(x))",
      "all x.(BloodCancer(x) -> RareDiseases(x))",
      "all x.(Leukemia(x) -> BloodCancer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1049,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1050,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1051,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 863,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OwnPet(x) -> -TidyHouse(x))",
      "all x.(ChildhoodPet(x) -> OwnPet(x))",
      "all x.(HireCleaning(x) -> TidyHouse(x))",
      "all x.(Suburbs(x) -> ChildhoodPet(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 864,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OwnPet(x) -> -TidyHouse(x))",
      "all x.(ChildhoodPet(x) -> OwnPet(x))",
      "all x.(HireCleaning(x) -> TidyHouse(x))",
      "all x.(Suburbs(x) -> ChildhoodPet(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 865,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OwnPet(x) -> -TidyHouse(x))",
      "all x.(ChildhoodPet(x) -> OwnPet(x))",
      "all x.(HireCleaning(x) -> TidyHouse(x))",
      "all x.(Suburbs(x) -> ChildhoodPet(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 866,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OwnPet(x) -> -TidyHouse(x))",
      "all x.(ChildhoodPet(x) -> OwnPet(x))",
      "all x.(HireCleaning(x) -> TidyHouse(x))",
      "all x.(Suburbs(x) -> ChildhoodPet(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 867,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OwnPet(x) -> -TidyHouse(x))",
      "all x.(ChildhoodPet(x) -> OwnPet(x))",
      "all x.(HireCleaning(x) -> TidyHouse(x))",
      "all x.(Suburbs(x) -> ChildhoodPet(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 727,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Upright(Bottle) & -ToppledOver(Bottle)) | (-Upright(Bottle) & ToppledOver(Bottle)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 957,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cereal(x) -> BusyMorning(x))",
      "all x.(YoungChildren(x) -> BusyMorning(x))",
      "all x.((YoungChildren(x) & -Committments(x)) | (-YoungChildren(x) & Committments(x)))",
      "all x.(Committments(x) -> Hardworking(x))",
      "all x.(Hardworking(x) -> -Organized(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 958,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cereal(x) -> BusyMorning(x))",
      "all x.(YoungChildren(x) -> BusyMorning(x))",
      "all x.((YoungChildren(x) & -Committments(x)) | (-YoungChildren(x) & Committments(x)))",
      "all x.(Committments(x) -> Hardworking(x))",
      "all x.(Hardworking(x) -> -Organized(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 959,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cereal(x) -> BusyMorning(x))",
      "all x.(YoungChildren(x) -> BusyMorning(x))",
      "all x.((YoungChildren(x) & -Committments(x)) | (-YoungChildren(x) & Committments(x)))",
      "all x.(Committments(x) -> Hardworking(x))",
      "all x.(Hardworking(x) -> -Organized(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 238,
    "flag": "None goal or assumptions",
    "assumptions": [
      "OfficeIn(Ableton,Germany)",
      "OfficeIn(Ableton,Usa)",
      "-SameCountry(Germany,Usa)",
      "all x y z.((OfficeIn(x,y) & OfficeIn(x,z) & -SameCountry(y,z)) -> IsMultinationalCompany(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 239,
    "flag": "None goal or assumptions",
    "assumptions": [
      "OfficeIn(Ableton,Germany)",
      "OfficeIn(Ableton,Usa)",
      "-SameCountry(Germany,Usa)",
      "all x y z.((OfficeIn(x,y) & OfficeIn(x,z) & -SameCountry(y,z)) -> IsMultinationalCompany(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 240,
    "flag": "None goal or assumptions",
    "assumptions": [
      "OfficeIn(Ableton,Germany)",
      "OfficeIn(Ableton,Usa)",
      "-SameCountry(Germany,Usa)",
      "all x y z.((OfficeIn(x,y) & OfficeIn(x,z) & -SameCountry(y,z)) -> IsMultinationalCompany(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1300,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Swimmer(x) -> GoesUnderwater(x))",
      "all x.(EatsFishCaughtThemselves(x) -> Swimmer(x))",
      "all x.(Penguin(x) -> EatsFishCaughtThemselves(x))",
      "all x.(NonFlyingBirdAntartica(x) -> Penguin(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1301,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Swimmer(x) -> GoesUnderwater(x))",
      "all x.(EatsFishCaughtThemselves(x) -> Swimmer(x))",
      "all x.(Penguin(x) -> EatsFishCaughtThemselves(x))",
      "all x.(NonFlyingBirdAntartica(x) -> Penguin(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1302,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Swimmer(x) -> GoesUnderwater(x))",
      "all x.(EatsFishCaughtThemselves(x) -> Swimmer(x))",
      "all x.(Penguin(x) -> EatsFishCaughtThemselves(x))",
      "all x.(NonFlyingBirdAntartica(x) -> Penguin(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1359,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Professor(x) -> Teacher(x))",
      "all x.(Researcher(x) -> Professor(x))",
      "all x.(Teacher(x) -> -Student(x))",
      "all x.(Study(x) -> Student(x))",
      "((-Study(Leon) & -Researcher(Leon)) | (--Study(Leon) & Researcher(Leon)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1360,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Professor(x) -> Teacher(x))",
      "all x.(Researcher(x) -> Professor(x))",
      "all x.(Teacher(x) -> -Student(x))",
      "all x.(Study(x) -> Student(x))",
      "((-Study(Leon) & -Researcher(Leon)) | (--Study(Leon) & Researcher(Leon)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1361,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Professor(x) -> Teacher(x))",
      "all x.(Researcher(x) -> Professor(x))",
      "all x.(Teacher(x) -> -Student(x))",
      "all x.(Study(x) -> Student(x))",
      "((-Study(Leon) & -Researcher(Leon)) | (--Study(Leon) & Researcher(Leon)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 345,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Cutman(x) -> Prevent(x,PhysicalDamage)) & Treat(x,PhysicalDamage))",
      "all x.((Cutman(x) -> Appear(x,Boxing)) | Appear(x,Kickboxing) | Appear(x,MixedMartialBout))",
      "all x.((Cutman(x) -> Handle(x,Swelling)) & Handle(x,Nosebleeds) & Handle(x,Lacerations))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 346,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Cutman(x) -> Prevent(x,PhysicalDamage)) & Treat(x,PhysicalDamage))",
      "all x.((Cutman(x) -> Appear(x,Boxing)) | Appear(x,Kickboxing) | Appear(x,MixedMartialBout))",
      "all x.((Cutman(x) -> Handle(x,Swelling)) & Handle(x,Nosebleeds) & Handle(x,Lacerations))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 347,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Cutman(x) -> Prevent(x,PhysicalDamage)) & Treat(x,PhysicalDamage))",
      "all x.((Cutman(x) -> Appear(x,Boxing)) | Appear(x,Kickboxing) | Appear(x,MixedMartialBout))",
      "all x.((Cutman(x) -> Handle(x,Swelling)) & Handle(x,Nosebleeds) & Handle(x,Lacerations))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 491,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Painting(MonaLisa) & WorldsBestKnown(MonaLisa))",
      "(PaintedBy(MonaLisa,LeonardodaVinci) & Portrait(MonaLisa))",
      "(Scientist(LeonardodaVinci) & Painter(LeonardodaVinci))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 492,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Painting(MonaLisa) & WorldsBestKnown(MonaLisa))",
      "(PaintedBy(MonaLisa,LeonardodaVinci) & Portrait(MonaLisa))",
      "(Scientist(LeonardodaVinci) & Painter(LeonardodaVinci))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 493,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Painting(MonaLisa) & WorldsBestKnown(MonaLisa))",
      "(PaintedBy(MonaLisa,LeonardodaVinci) & Portrait(MonaLisa))",
      "(Scientist(LeonardodaVinci) & Painter(LeonardodaVinci))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 892,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 893,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 894,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 895,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 896,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 897,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))",
      "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))",
      "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))",
      "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 368,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Buisness(x) -> Sanctioned(x)) & --Sanctioned(x)) | (-(Buisness(x) -> Sanctioned(x)) & -Sanctioned(x)))",
      "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))",
      "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 369,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Buisness(x) -> Sanctioned(x)) & --Sanctioned(x)) | (-(Buisness(x) -> Sanctioned(x)) & -Sanctioned(x)))",
      "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))",
      "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 370,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((Buisness(x) -> Sanctioned(x)) & --Sanctioned(x)) | (-(Buisness(x) -> Sanctioned(x)) & -Sanctioned(x)))",
      "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))",
      "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 750,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Depressing(x) -> Sad(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 314,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 315,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 316,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 274,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Japanese(Koeitecmo) & VideoGameHoldingCompany(Koeitecmo) & AnimeHoldingCompany(Koeitecmo))",
      "all x.exists y.((HoldingCompany(x) -> Company(y)) & Holds(x,y))",
      "(Disbanded(Tecmo) & DisbandedIn(Tecmo,Japan) & Survived(Koei) & Renamed(Koei))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 275,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Japanese(Koeitecmo) & VideoGameHoldingCompany(Koeitecmo) & AnimeHoldingCompany(Koeitecmo))",
      "all x.exists y.((HoldingCompany(x) -> Company(y)) & Holds(x,y))",
      "(Disbanded(Tecmo) & DisbandedIn(Tecmo,Japan) & Survived(Koei) & Renamed(Koei))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 276,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Japanese(Koeitecmo) & VideoGameHoldingCompany(Koeitecmo) & AnimeHoldingCompany(Koeitecmo))",
      "all x.exists y.((HoldingCompany(x) -> Company(y)) & Holds(x,y))",
      "(Disbanded(Tecmo) & DisbandedIn(Tecmo,Japan) & Survived(Koei) & Renamed(Koei))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 570,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Accessory(Pseyetoy,Ps2)",
      "Accessory(Pseye,Ps3)",
      "(Accessory(Pscamera,Ps4) & Accessory(Pscamera,Ps5))",
      "all x y.(Accessory(x,y) -> Compatible(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 571,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Accessory(Pseyetoy,Ps2)",
      "Accessory(Pseye,Ps3)",
      "(Accessory(Pscamera,Ps4) & Accessory(Pscamera,Ps5))",
      "all x y.(Accessory(x,y) -> Compatible(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 572,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Accessory(Pseyetoy,Ps2)",
      "Accessory(Pseye,Ps3)",
      "(Accessory(Pscamera,Ps4) & Accessory(Pscamera,Ps5))",
      "all x y.(Accessory(x,y) -> Compatible(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 723,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FootballPlayer(Adambuska) & European(Adambuska))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1157,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldMillion(x) -> BestSeller(x))",
      "all x.(DevelopedByParadox(x) -> SoldMillion(x))",
      "exists x.(PublishedBefore2010(x) & SupportLinuxSystem(x))",
      "all x.(BestSeller(x) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1158,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldMillion(x) -> BestSeller(x))",
      "all x.(DevelopedByParadox(x) -> SoldMillion(x))",
      "exists x.(PublishedBefore2010(x) & SupportLinuxSystem(x))",
      "all x.(BestSeller(x) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1159,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(SoldMillion(x) -> BestSeller(x))",
      "all x.(DevelopedByParadox(x) -> SoldMillion(x))",
      "exists x.(PublishedBefore2010(x) & SupportLinuxSystem(x))",
      "all x.(BestSeller(x) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 593,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) -> BRICS(x)) & EmergingEconomy(x))",
      "all x.((India(x) -> BRICS(x)) & EmergingEconomy(x))",
      "all x y.((From(x,y) & China(y)) -> Speak(x,Chinese))",
      "all x y.(((From(x,y) & India(y)) -> Speak(x,Hindi)) | Speak(x,English))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 594,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) -> BRICS(x)) & EmergingEconomy(x))",
      "all x.((India(x) -> BRICS(x)) & EmergingEconomy(x))",
      "all x y.((From(x,y) & China(y)) -> Speak(x,Chinese))",
      "all x y.(((From(x,y) & India(y)) -> Speak(x,Hindi)) | Speak(x,English))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 595,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((China(x) -> BRICS(x)) & EmergingEconomy(x))",
      "all x.((India(x) -> BRICS(x)) & EmergingEconomy(x))",
      "all x y.((From(x,y) & China(y)) -> Speak(x,Chinese))",
      "all x y.(((From(x,y) & India(y)) -> Speak(x,Hindi)) | Speak(x,English))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 265,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Actor(DaveedDiggs) & FilmProducer(DaveedDiggs))",
      "(PlayedTwoRoles(DaveedDiggs) & PlayedIn(DaveedDiggs,Hamilton) & Musical(Hamilton))",
      "exists x.(Actor(x) & PlayedIn(x,Hamilton) & WonBestActorAward(x))",
      "all x.((Actor(x) & Played(x,ThomasJefferson)) -> WonBestActorAward(x))",
      "Played(DaveedDiggs,ThomasJefferson)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 266,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Actor(DaveedDiggs) & FilmProducer(DaveedDiggs))",
      "(PlayedTwoRoles(DaveedDiggs) & PlayedIn(DaveedDiggs,Hamilton) & Musical(Hamilton))",
      "exists x.(Actor(x) & PlayedIn(x,Hamilton) & WonBestActorAward(x))",
      "all x.((Actor(x) & Played(x,ThomasJefferson)) -> WonBestActorAward(x))",
      "Played(DaveedDiggs,ThomasJefferson)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 267,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Actor(DaveedDiggs) & FilmProducer(DaveedDiggs))",
      "(PlayedTwoRoles(DaveedDiggs) & PlayedIn(DaveedDiggs,Hamilton) & Musical(Hamilton))",
      "exists x.(Actor(x) & PlayedIn(x,Hamilton) & WonBestActorAward(x))",
      "all x.((Actor(x) & Played(x,ThomasJefferson)) -> WonBestActorAward(x))",
      "Played(DaveedDiggs,ThomasJefferson)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 630,
    "flag": "None goal or assumptions",
    "assumptions": [
      "PolishFootballPlayer(Ernestpohl)",
      "exists x.(In(x,Polishfirstdivision) & ScoredMoreThan180Goals(x))",
      "(ScoredMoreThan180Goals(Ernestpohl) & In(Ernestpohl,Polishfirstdivision))",
      "exists x.(NamedAfter(Gornikzabrze,x) & FootballPlayer(x) & From(x,Rudaslaska))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 631,
    "flag": "None goal or assumptions",
    "assumptions": [
      "PolishFootballPlayer(Ernestpohl)",
      "exists x.(In(x,Polishfirstdivision) & ScoredMoreThan180Goals(x))",
      "(ScoredMoreThan180Goals(Ernestpohl) & In(Ernestpohl,Polishfirstdivision))",
      "exists x.(NamedAfter(Gornikzabrze,x) & FootballPlayer(x) & From(x,Rudaslaska))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 418,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(PhiladephiaCouncil(AnnJLand) & DemocraticParty(AnnJLand))",
      "((Year(Y1980) -> PhiladephiaCouncil(AnnJLand)) & RunFor(AnnJLand))",
      "all x.((RunFor(x) & PhiladephiaCouncil(x)) -> Elected(x))",
      "Challenger(Nutter)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 419,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(PhiladephiaCouncil(AnnJLand) & DemocraticParty(AnnJLand))",
      "((Year(Y1980) -> PhiladephiaCouncil(AnnJLand)) & RunFor(AnnJLand))",
      "all x.((RunFor(x) & PhiladephiaCouncil(x)) -> Elected(x))",
      "Challenger(Nutter)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 420,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(PhiladephiaCouncil(AnnJLand) & DemocraticParty(AnnJLand))",
      "((Year(Y1980) -> PhiladephiaCouncil(AnnJLand)) & RunFor(AnnJLand))",
      "all x.((RunFor(x) & PhiladephiaCouncil(x)) -> Elected(x))",
      "Challenger(Nutter)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 337,
    "flag": "None goal or assumptions",
    "assumptions": [
      "WonCup(Aberdeen,Twentythirteen)",
      "WonCup(Rangers,Twentyfourteen)",
      "(Different(Aberdeen,Rangers) & Different(Rangers,Aberdeen))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 338,
    "flag": "None goal or assumptions",
    "assumptions": [
      "WonCup(Aberdeen,Twentythirteen)",
      "WonCup(Rangers,Twentyfourteen)",
      "(Different(Aberdeen,Rangers) & Different(Rangers,Aberdeen))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 339,
    "flag": "None goal or assumptions",
    "assumptions": [
      "WonCup(Aberdeen,Twentythirteen)",
      "WonCup(Rangers,Twentyfourteen)",
      "(Different(Aberdeen,Rangers) & Different(Rangers,Aberdeen))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 848,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Working(x) -> Pets(x))",
      "exists x.(Manhattan(x) & Working(x))",
      "all x.(Pets(x) -> Child(x))",
      "all x.(Child(x) -> -Car(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 849,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Working(x) -> Pets(x))",
      "exists x.(Manhattan(x) & Working(x))",
      "all x.(Pets(x) -> Child(x))",
      "all x.(Child(x) -> -Car(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 850,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Working(x) -> Pets(x))",
      "exists x.(Manhattan(x) & Working(x))",
      "all x.(Pets(x) -> Child(x))",
      "all x.(Child(x) -> -Car(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1085,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1086,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1087,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1088,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 726,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(USNavyShip(Usslyon) & InWWII(Usslyon))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 929,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(DisposableChopsticks(x) -> MadeFromTrees(x))",
      "exists x.EcoFriendly(x)",
      "all x.((DisposableChopsticks(x) & -Reusable(x)) | (-DisposableChopsticks(x) & Reusable(x)))",
      "all x.(MadeFromMetals(x) -> -MadeFromPlastics(x))",
      "all x.(Reusable(x) -> MadeFromMetals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 930,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(DisposableChopsticks(x) -> MadeFromTrees(x))",
      "exists x.EcoFriendly(x)",
      "all x.((DisposableChopsticks(x) & -Reusable(x)) | (-DisposableChopsticks(x) & Reusable(x)))",
      "all x.(MadeFromMetals(x) -> -MadeFromPlastics(x))",
      "all x.(Reusable(x) -> MadeFromMetals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 931,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(DisposableChopsticks(x) -> MadeFromTrees(x))",
      "exists x.EcoFriendly(x)",
      "all x.((DisposableChopsticks(x) & -Reusable(x)) | (-DisposableChopsticks(x) & Reusable(x)))",
      "all x.(MadeFromMetals(x) -> -MadeFromPlastics(x))",
      "all x.(Reusable(x) -> MadeFromMetals(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1285,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Lazy(x) -> Unproductive(x))",
      "all x.(Unproductive(x) -> -Energetic(x))",
      "all x.(Sloth(x) -> Lazy(x))",
      "exists x.(Animal(x) & Sloth(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1286,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Lazy(x) -> Unproductive(x))",
      "all x.(Unproductive(x) -> -Energetic(x))",
      "all x.(Sloth(x) -> Lazy(x))",
      "exists x.(Animal(x) & Sloth(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1287,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Lazy(x) -> Unproductive(x))",
      "all x.(Unproductive(x) -> -Energetic(x))",
      "all x.(Sloth(x) -> Lazy(x))",
      "exists x.(Animal(x) & Sloth(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 542,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(((European(x) & SoccerClub(x)) -> Attend(x,Ucl)) | Attend(x,Uel) | Attend(x,Uecl))",
      "all x y.((SoccerClub(x) & SoccerClub(y) & Attend(x,Ucl) & Attend(y,Uel)) -> HigherRank(x,y))",
      "all x y.((SoccerClub(x) & SoccerClub(y) & Attend(x,Uel) & Attend(y,Uecl)) -> HigherRank(x,y))",
      "(European(Manchesterunited) & SoccerClub(Manchesterunited) & European(Manchestercity) & SoccerClub(Manchestercity))",
      "Attend(Manchesterunited,Uel)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 193,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Coach(x,y) & IsFootballClub(y)) -> IsFootballCoach(x))",
      "all x y z.((PlayFor(x,y) & NFLTeamYear(y,z) & InTeam(x,z)) -> PlayInNFL(x))",
      "IsFootballClub(Minnesota_Vikings)",
      "Coach(Dennis_Green,Minnesota_Vikings)",
      "TouchDownReceptionTime(Cris_Carter,T13)",
      "NFLTeamYear(Minnesota_Vikings,Y1997)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 194,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Coach(x,y) & IsFootballClub(y)) -> IsFootballCoach(x))",
      "all x y z.((PlayFor(x,y) & NFLTeamYear(y,z) & InTeam(x,z)) -> PlayInNFL(x))",
      "IsFootballClub(Minnesota_Vikings)",
      "Coach(Dennis_Green,Minnesota_Vikings)",
      "TouchDownReceptionTime(Cris_Carter,T13)",
      "NFLTeamYear(Minnesota_Vikings,Y1997)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 195,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x y.((Coach(x,y) & IsFootballClub(y)) -> IsFootballCoach(x))",
      "all x y z.((PlayFor(x,y) & NFLTeamYear(y,z) & InTeam(x,z)) -> PlayInNFL(x))",
      "IsFootballClub(Minnesota_Vikings)",
      "Coach(Dennis_Green,Minnesota_Vikings)",
      "TouchDownReceptionTime(Cris_Carter,T13)",
      "NFLTeamYear(Minnesota_Vikings,Y1997)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1338,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cat(x) -> Cute(x))",
      "all x.-Ghost(x)",
      "all x.(Cat(x) | Dog(x))",
      "all x.(Bark(x) -> -Lovely(x))",
      "all x.(Dog(x) -> Bark(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1339,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cat(x) -> Cute(x))",
      "all x.-Ghost(x)",
      "all x.(Cat(x) | Dog(x))",
      "all x.(Bark(x) -> -Lovely(x))",
      "all x.(Dog(x) -> Bark(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1340,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cat(x) -> Cute(x))",
      "all x.-Ghost(x)",
      "all x.(Cat(x) | Dog(x))",
      "all x.(Bark(x) -> -Lovely(x))",
      "all x.(Dog(x) -> Bark(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 299,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 300,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 301,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 214,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutored(Herodicus,Hippocrates)",
      "Recommended(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 215,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutored(Herodicus,Hippocrates)",
      "Recommended(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 216,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutored(Herodicus,Hippocrates)",
      "Recommended(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 217,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutored(Herodicus,Hippocrates)",
      "Recommended(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 218,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Greek(Herodicus) & Physician(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))",
      "(Born(Herodicus,Selymbia) & City(Selymbia))",
      "(Colony(Selymbia,Megara) & CityState(Megara))",
      "Tutored(Herodicus,Hippocrates)",
      "Recommended(Herodicus,Massages)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1263,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kid(x) -> -OperaLover(x))",
      "all x.(Adult(x) -> OperaLover(x))",
      "all x.(Scientist(x) -> Adult(x))",
      "exists x.(Student(x) & Kid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1264,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kid(x) -> -OperaLover(x))",
      "all x.(Adult(x) -> OperaLover(x))",
      "all x.(Scientist(x) -> Adult(x))",
      "exists x.(Student(x) & Kid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1265,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kid(x) -> -OperaLover(x))",
      "all x.(Adult(x) -> OperaLover(x))",
      "all x.(Scientist(x) -> Adult(x))",
      "exists x.(Student(x) & Kid(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 205,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Scottish(Brianwinter) & FootballReferee(Brianwinter))",
      "(Injured(Brianwinter) & Retired(Brianwinter))",
      "RefereeObserver(Brianwinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 206,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Scottish(Brianwinter) & FootballReferee(Brianwinter))",
      "(Injured(Brianwinter) & Retired(Brianwinter))",
      "RefereeObserver(Brianwinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 207,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Scottish(Brianwinter) & FootballReferee(Brianwinter))",
      "(Injured(Brianwinter) & Retired(Brianwinter))",
      "RefereeObserver(Brianwinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 208,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Scottish(Brianwinter) & FootballReferee(Brianwinter))",
      "(Injured(Brianwinter) & Retired(Brianwinter))",
      "RefereeObserver(Brianwinter)",
      "exists x.(FootballReferee(x) & RefereeObserver(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1105,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1106,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1107,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1108,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1109,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1110,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1111,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1112,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1113,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1114,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Puzzles(x) | BadChess(x))",
      "all x.(BadChess(x) -> -PlaysLots(x))",
      "all x.(Plans(x) | Creative(x))",
      "PlaysLots(Erica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 374,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SoccerPlayer(x) -> HasLeftFoot(x)) & HasRightFoot(x))",
      "all x.((SoccerPlayer(x) & Efficient(x,Left) & Efficient(x,Right)) -> Top(x))",
      "all x.((SoccerPlayer(x) & ScoreManyGoals(x,Left)) -> Efficient(x,Left))",
      "all x.((SoccerPlayer(x) & ScoreManyGoals(x,Right)) -> Efficient(x,Right))",
      "SoccerPlayer(Ronaldo)",
      "Efficient(Ronaldo,Right)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 375,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SoccerPlayer(x) -> HasLeftFoot(x)) & HasRightFoot(x))",
      "all x.((SoccerPlayer(x) & Efficient(x,Left) & Efficient(x,Right)) -> Top(x))",
      "all x.((SoccerPlayer(x) & ScoreManyGoals(x,Left)) -> Efficient(x,Left))",
      "all x.((SoccerPlayer(x) & ScoreManyGoals(x,Right)) -> Efficient(x,Right))",
      "SoccerPlayer(Ronaldo)",
      "Efficient(Ronaldo,Right)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 512,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Hatchery(Nationallobsterhatchery) & LocatedIn(Nationallobsterhatchery,Padstowengland))",
      "OpenToVisitors(Nationallobsterhatchery)",
      "all x.((Hatchery(x) -> ForConservation(x)) | ForProfit(x))",
      "exists x.(Hatchery(x) & ForConservation(x) & ReleasesAnimalsToWild(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 513,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Hatchery(Nationallobsterhatchery) & LocatedIn(Nationallobsterhatchery,Padstowengland))",
      "OpenToVisitors(Nationallobsterhatchery)",
      "all x.((Hatchery(x) -> ForConservation(x)) | ForProfit(x))",
      "exists x.(Hatchery(x) & ForConservation(x) & ReleasesAnimalsToWild(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 514,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Hatchery(Nationallobsterhatchery) & LocatedIn(Nationallobsterhatchery,Padstowengland))",
      "OpenToVisitors(Nationallobsterhatchery)",
      "all x.((Hatchery(x) -> ForConservation(x)) | ForProfit(x))",
      "exists x.(Hatchery(x) & ForConservation(x) & ReleasesAnimalsToWild(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 636,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Rhosaelwydfc(x) -> FootballClub(x)) & BasedInPonciau(x) & Welsh(x))",
      "all x.(BasedInPonciau(x) <-> Rhosaelwydfc(x))",
      "exists x.(BasedInPonciau(x) & WonPremierDivisionDuring(x,Y2005))",
      "all x.(WonPremierDivisionDuring(x,Y2009) -> Promoted(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 637,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Rhosaelwydfc(x) -> FootballClub(x)) & BasedInPonciau(x) & Welsh(x))",
      "all x.(BasedInPonciau(x) <-> Rhosaelwydfc(x))",
      "exists x.(BasedInPonciau(x) & WonPremierDivisionDuring(x,Y2005))",
      "all x.(WonPremierDivisionDuring(x,Y2009) -> Promoted(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1362,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OS(x) -> Software(x))",
      "all x.(Mac(x) -> OS(x))",
      "all x.(Mac(x) | Windows(x))",
      "all x.(Windows(x) -> Convenient(x))",
      "all x.(Software(x) -> Code(x))",
      "all x.(Convenient(x) -> Popular(x))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1363,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OS(x) -> Software(x))",
      "all x.(Mac(x) -> OS(x))",
      "all x.(Mac(x) | Windows(x))",
      "all x.(Windows(x) -> Convenient(x))",
      "all x.(Software(x) -> Code(x))",
      "all x.(Convenient(x) -> Popular(x))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1364,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OS(x) -> Software(x))",
      "all x.(Mac(x) -> OS(x))",
      "all x.(Mac(x) | Windows(x))",
      "all x.(Windows(x) -> Convenient(x))",
      "all x.(Software(x) -> Code(x))",
      "all x.(Convenient(x) -> Popular(x))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1365,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OS(x) -> Software(x))",
      "all x.(Mac(x) -> OS(x))",
      "all x.(Mac(x) | Windows(x))",
      "all x.(Windows(x) -> Convenient(x))",
      "all x.(Software(x) -> Code(x))",
      "all x.(Convenient(x) -> Popular(x))",
      "[[ERROR]]",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 353,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Road(x) & MadeOfConcrete(x) & Road(y) & MadeOfAsphalt(y)) -> LastLonger(x,y))",
      "all x y.((Road(x) & MadeOfAsphalt(x) & Road(y) & MadeOfConcrete(y)) -> Smoother(x,y))",
      "all x y z.((Road(x) & Road(y) & Smoother(x,y)) -> Prefers(z,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 354,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Road(x) & MadeOfConcrete(x) & Road(y) & MadeOfAsphalt(y)) -> LastLonger(x,y))",
      "all x y.((Road(x) & MadeOfAsphalt(x) & Road(y) & MadeOfConcrete(y)) -> Smoother(x,y))",
      "all x y z.((Road(x) & Road(y) & Smoother(x,y)) -> Prefers(z,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 355,
    "flag": "None goal or assumptions",
    "assumptions": [
      "[[ERROR]]",
      "all x y.((Road(x) & MadeOfConcrete(x) & Road(y) & MadeOfAsphalt(y)) -> LastLonger(x,y))",
      "all x y.((Road(x) & MadeOfAsphalt(x) & Road(y) & MadeOfConcrete(y)) -> Smoother(x,y))",
      "all x y z.((Road(x) & Road(y) & Smoother(x,y)) -> Prefers(z,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 226,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TraditionalSummerCamp(Campdavern) & ForBoysAndGirls(Campdavern))",
      "EstablishedIn(Campdavern,Year1946)",
      "OperatedByYMCAUntil(Campdavern,Year2015)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 227,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TraditionalSummerCamp(Campdavern) & ForBoysAndGirls(Campdavern))",
      "EstablishedIn(Campdavern,Year1946)",
      "OperatedByYMCAUntil(Campdavern,Year2015)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 228,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TraditionalSummerCamp(Campdavern) & ForBoysAndGirls(Campdavern))",
      "EstablishedIn(Campdavern,Year1946)",
      "OperatedByYMCAUntil(Campdavern,Year2015)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 995,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PublishJournals(x) -> -Entertainment(x))",
      "all x.(Novelist(x) -> PublishJournals(x))",
      "all x.(Entertainment(x) | Acclaimed(x))",
      "all x.(Acclaimed(x) -> Tenured(x))",
      "all x.(Acclaimed(x) -> Glowing(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 996,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PublishJournals(x) -> -Entertainment(x))",
      "all x.(Novelist(x) -> PublishJournals(x))",
      "all x.(Entertainment(x) | Acclaimed(x))",
      "all x.(Acclaimed(x) -> Tenured(x))",
      "all x.(Acclaimed(x) -> Glowing(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 997,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(PublishJournals(x) -> -Entertainment(x))",
      "all x.(Novelist(x) -> PublishJournals(x))",
      "all x.(Entertainment(x) | Acclaimed(x))",
      "all x.(Acclaimed(x) -> Tenured(x))",
      "all x.(Acclaimed(x) -> Glowing(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 25,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(YoungAdultFantasyNovel(Thickastheives) & WrittenBy(Thickastheives,Megan))",
      "PublishedBy(Thickastheives,Greenwillowbooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(Medeempire) & SetIn(Thickastheives,Medeempire))",
      "[[ERROR]]",
      "(Country(Attolia) & Nearby(Medeempire,Attolia) & Country(Sounis) & Nearby(Medeempire,Sounis))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 26,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(YoungAdultFantasyNovel(Thickastheives) & WrittenBy(Thickastheives,Megan))",
      "PublishedBy(Thickastheives,Greenwillowbooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(Medeempire) & SetIn(Thickastheives,Medeempire))",
      "[[ERROR]]",
      "(Country(Attolia) & Nearby(Medeempire,Attolia) & Country(Sounis) & Nearby(Medeempire,Sounis))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 27,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(YoungAdultFantasyNovel(Thickastheives) & WrittenBy(Thickastheives,Megan))",
      "PublishedBy(Thickastheives,Greenwillowbooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(Medeempire) & SetIn(Thickastheives,Medeempire))",
      "[[ERROR]]",
      "(Country(Attolia) & Nearby(Medeempire,Attolia) & Country(Sounis) & Nearby(Medeempire,Sounis))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 28,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(YoungAdultFantasyNovel(Thickastheives) & WrittenBy(Thickastheives,Megan))",
      "PublishedBy(Thickastheives,Greenwillowbooks)",
      "all x y z.((WrittenBy(x,y) & PublishedBy(x,z)) -> WorkedWith(y,z))",
      "(Fictional(Medeempire) & SetIn(Thickastheives,Medeempire))",
      "[[ERROR]]",
      "(Country(Attolia) & Nearby(Medeempire,Attolia) & Country(Sounis) & Nearby(Medeempire,Sounis))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 351,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((WeTab(x) -> MeeGoBased(x)) & TabletComputer(x))",
      "exists x.WeTab(x)",
      "all x.(WeTab(x) -> Announce(Neofonie,x))",
      "(German(Neofonie) & Producer(Neofonie))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 352,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((WeTab(x) -> MeeGoBased(x)) & TabletComputer(x))",
      "exists x.WeTab(x)",
      "all x.(WeTab(x) -> Announce(Neofonie,x))",
      "(German(Neofonie) & Producer(Neofonie))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1186,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(BusinessAnalysis(x) & GoodAtMath(x))",
      "all x.(BusinessAnalysis(x) -> WorkInCompany(x))",
      "all x.(WorkInCompany(x) -> -FromChina(x))",
      "all x.(SoftwareEngineering(x) -> FromChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1187,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(BusinessAnalysis(x) & GoodAtMath(x))",
      "all x.(BusinessAnalysis(x) -> WorkInCompany(x))",
      "all x.(WorkInCompany(x) -> -FromChina(x))",
      "all x.(SoftwareEngineering(x) -> FromChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1188,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(BusinessAnalysis(x) & GoodAtMath(x))",
      "all x.(BusinessAnalysis(x) -> WorkInCompany(x))",
      "all x.(WorkInCompany(x) -> -FromChina(x))",
      "all x.(SoftwareEngineering(x) -> FromChina(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 452,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Party(Strawberry) | Party(Orange) | Party(Blueberry) | Party(Grape) | Party(Cherry))",
      "all x.(Party(x) -> SameWeight(x))",
      "all x.(LowestAmount(x) -> MostPopular(x))",
      "LowestAmount(Strawberries)",
      "Lower(Blueberry,Cherry)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 453,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Party(Strawberry) | Party(Orange) | Party(Blueberry) | Party(Grape) | Party(Cherry))",
      "all x.(Party(x) -> SameWeight(x))",
      "all x.(LowestAmount(x) -> MostPopular(x))",
      "LowestAmount(Strawberries)",
      "Lower(Blueberry,Cherry)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 454,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Party(Strawberry) | Party(Orange) | Party(Blueberry) | Party(Grape) | Party(Cherry))",
      "all x.(Party(x) -> SameWeight(x))",
      "all x.(LowestAmount(x) -> MostPopular(x))",
      "LowestAmount(Strawberries)",
      "Lower(Blueberry,Cherry)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 187,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Attend(x) -> Registered(x))",
      "all x.(((Attend(x) -> InPerson(x)) & -Remotely(x)) | (-(Attend(x) -> InPerson(x)) & Remotely(x)))",
      "all x.((Attend(x) & China(x)) -> -Remotely(x))",
      "(Attend(James) & -Remotely(James))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 188,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Attend(x) -> Registered(x))",
      "all x.(((Attend(x) -> InPerson(x)) & -Remotely(x)) | (-(Attend(x) -> InPerson(x)) & Remotely(x)))",
      "all x.((Attend(x) & China(x)) -> -Remotely(x))",
      "(Attend(James) & -Remotely(James))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 189,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Attend(x) -> Registered(x))",
      "all x.(((Attend(x) -> InPerson(x)) & -Remotely(x)) | (-(Attend(x) -> InPerson(x)) & Remotely(x)))",
      "all x.((Attend(x) & China(x)) -> -Remotely(x))",
      "(Attend(James) & -Remotely(James))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 633,
    "flag": "None goal or assumptions",
    "assumptions": [
      "PoliticalStrategist(Davidhaivri)",
      "all x.exists y.((BornInIsrael(x) & ParentOf(x,y) & Israeli(y)) -> IsraeliCitizen(x))",
      "exists x.(EmigratedTo(Davidhaivri,America) & BornInIsrael(Davidhaivri) & ParentOf(Davidhaivri,x) & Israeli(x))",
      "exists x.(ZionistLeader(x) & ElectedTo(x,Shomronmunicipalcouncil))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 634,
    "flag": "None goal or assumptions",
    "assumptions": [
      "PoliticalStrategist(Davidhaivri)",
      "all x.exists y.((BornInIsrael(x) & ParentOf(x,y) & Israeli(y)) -> IsraeliCitizen(x))",
      "exists x.(EmigratedTo(Davidhaivri,America) & BornInIsrael(Davidhaivri) & ParentOf(Davidhaivri,x) & Israeli(x))",
      "exists x.(ZionistLeader(x) & ElectedTo(x,Shomronmunicipalcouncil))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 635,
    "flag": "None goal or assumptions",
    "assumptions": [
      "PoliticalStrategist(Davidhaivri)",
      "all x.exists y.((BornInIsrael(x) & ParentOf(x,y) & Israeli(y)) -> IsraeliCitizen(x))",
      "exists x.(EmigratedTo(Davidhaivri,America) & BornInIsrael(Davidhaivri) & ParentOf(Davidhaivri,x) & Israeli(x))",
      "exists x.(ZionistLeader(x) & ElectedTo(x,Shomronmunicipalcouncil))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 3,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Have(Mary,Flu)",
      "all x.(Have(x,Flu) <-> Have(x,Influenza))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 121,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(James) & Lawyer(James))",
      "(Whig(James) & Politician(James) & SatInHouseOfCommons(James))",
      "all x.(British(x) -> European(x))",
      "all x.(Lawyer(x) -> FamiliarWithLaws(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 122,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(James) & Lawyer(James))",
      "(Whig(James) & Politician(James) & SatInHouseOfCommons(James))",
      "all x.(British(x) -> European(x))",
      "all x.(Lawyer(x) -> FamiliarWithLaws(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 123,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(British(James) & Lawyer(James))",
      "(Whig(James) & Politician(James) & SatInHouseOfCommons(James))",
      "all x.(British(x) -> European(x))",
      "all x.(Lawyer(x) -> FamiliarWithLaws(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 365,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Novel(Beastsofprey) & Fantasy(Beastsofprey)) | ScienceFiction(Beastsofprey))",
      "all x y.((ScienceFiction(x) & Mythological(y) & Creature(y)) -> -About(x,y))",
      "(About(Beastsofprey,Shetani) & Creature(Shetani))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 366,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Novel(Beastsofprey) & Fantasy(Beastsofprey)) | ScienceFiction(Beastsofprey))",
      "all x y.((ScienceFiction(x) & Mythological(y) & Creature(y)) -> -About(x,y))",
      "(About(Beastsofprey,Shetani) & Creature(Shetani))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 367,
    "flag": "None goal or assumptions",
    "assumptions": [
      "((Novel(Beastsofprey) & Fantasy(Beastsofprey)) | ScienceFiction(Beastsofprey))",
      "all x y.((ScienceFiction(x) & Mythological(y) & Creature(y)) -> -About(x,y))",
      "(About(Beastsofprey,Shetani) & Creature(Shetani))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 47,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Odell(x) -> Surname(x))",
      "exists x.(Odell(x) & SpelledODell(x))",
      "(Odell(AmyOdell) & NotablePeople(AmyOdell) & Odell(JackOdell) & NotablePeople(JackOdell) & Odell(MatsOdell) & NotablePeople(MatsOdell))",
      "(British(AmyOdell) & Singer(AmyOdell) & SongWriter(AmyOdell))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 48,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Odell(x) -> Surname(x))",
      "exists x.(Odell(x) & SpelledODell(x))",
      "(Odell(AmyOdell) & NotablePeople(AmyOdell) & Odell(JackOdell) & NotablePeople(JackOdell) & Odell(MatsOdell) & NotablePeople(MatsOdell))",
      "(British(AmyOdell) & Singer(AmyOdell) & SongWriter(AmyOdell))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 49,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Odell(x) -> Surname(x))",
      "exists x.(Odell(x) & SpelledODell(x))",
      "(Odell(AmyOdell) & NotablePeople(AmyOdell) & Odell(JackOdell) & NotablePeople(JackOdell) & Odell(MatsOdell) & NotablePeople(MatsOdell))",
      "(British(AmyOdell) & Singer(AmyOdell) & SongWriter(AmyOdell))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 50,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Odell(x) -> Surname(x))",
      "exists x.(Odell(x) & SpelledODell(x))",
      "(Odell(AmyOdell) & NotablePeople(AmyOdell) & Odell(JackOdell) & NotablePeople(JackOdell) & Odell(MatsOdell) & NotablePeople(MatsOdell))",
      "(British(AmyOdell) & Singer(AmyOdell) & SongWriter(AmyOdell))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 482,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Train(x) -> -LoseTime(x))",
      "all x.((Car(x) & MeetJam(x)) -> LoseTime(x))",
      "all x.(LoseTime(x) <-> LateForWork(x))",
      "((Train(Mary) & -Car(Mary)) | (-Train(Mary) & Car(Mary)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 483,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Train(x) -> -LoseTime(x))",
      "all x.((Car(x) & MeetJam(x)) -> LoseTime(x))",
      "all x.(LoseTime(x) <-> LateForWork(x))",
      "((Train(Mary) & -Car(Mary)) | (-Train(Mary) & Car(Mary)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 484,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Train(x) -> -LoseTime(x))",
      "all x.((Car(x) & MeetJam(x)) -> LoseTime(x))",
      "all x.(LoseTime(x) <-> LateForWork(x))",
      "((Train(Mary) & -Car(Mary)) | (-Train(Mary) & Car(Mary)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 746,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Hungry(x) -> Uncomfortable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 769,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tipped(x) -> -GetMinWage(x))",
      "all x.(WhiteCollar(x) -> GetMinWage(x))",
      "all x.(Lawyer(x) -> WhiteCollar(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 770,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tipped(x) -> -GetMinWage(x))",
      "all x.(WhiteCollar(x) -> GetMinWage(x))",
      "all x.(Lawyer(x) -> WhiteCollar(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 771,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tipped(x) -> -GetMinWage(x))",
      "all x.(WhiteCollar(x) -> GetMinWage(x))",
      "all x.(Lawyer(x) -> WhiteCollar(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 772,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tipped(x) -> -GetMinWage(x))",
      "all x.(WhiteCollar(x) -> GetMinWage(x))",
      "all x.(Lawyer(x) -> WhiteCollar(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 773,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tipped(x) -> -GetMinWage(x))",
      "all x.(WhiteCollar(x) -> GetMinWage(x))",
      "all x.(Lawyer(x) -> WhiteCollar(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 774,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tipped(x) -> -GetMinWage(x))",
      "all x.(WhiteCollar(x) -> GetMinWage(x))",
      "all x.(Lawyer(x) -> WhiteCollar(x))",
      "all x.(Advocate(x) -> Lawyer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 232,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(AsaHoffmann,Newyorkcity)",
      "LivesIn(AsaHoffmann,Manhattan)",
      "IsChessPlayer(AsaHoffmann)",
      "exists x.(IsChestPlayer(x) & IsGrandMaster(x))",
      "all x.((BornIn(x,Newyorkcity) & LivesIn(x,Newyorkcity)) -> IsNewYorker(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 233,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(AsaHoffmann,Newyorkcity)",
      "LivesIn(AsaHoffmann,Manhattan)",
      "IsChessPlayer(AsaHoffmann)",
      "exists x.(IsChestPlayer(x) & IsGrandMaster(x))",
      "all x.((BornIn(x,Newyorkcity) & LivesIn(x,Newyorkcity)) -> IsNewYorker(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 234,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(AsaHoffmann,Newyorkcity)",
      "LivesIn(AsaHoffmann,Manhattan)",
      "IsChessPlayer(AsaHoffmann)",
      "exists x.(IsChestPlayer(x) & IsGrandMaster(x))",
      "all x.((BornIn(x,Newyorkcity) & LivesIn(x,Newyorkcity)) -> IsNewYorker(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 784,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ApplyVisa(x) -> GetVisa(x))",
      "all x.(ApplyVisa(x) -> FinancialGuarantees(x))",
      "all x.(FinancialGuarantees(x) -> RequestDocuments(x))",
      "all x.(RequestDocuments(x) -> -CloseBankAccount(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 785,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ApplyVisa(x) -> GetVisa(x))",
      "all x.(ApplyVisa(x) -> FinancialGuarantees(x))",
      "all x.(FinancialGuarantees(x) -> RequestDocuments(x))",
      "all x.(RequestDocuments(x) -> -CloseBankAccount(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 786,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ApplyVisa(x) -> GetVisa(x))",
      "all x.(ApplyVisa(x) -> FinancialGuarantees(x))",
      "all x.(FinancialGuarantees(x) -> RequestDocuments(x))",
      "all x.(RequestDocuments(x) -> -CloseBankAccount(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 745,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(Fear(x) & Anxiety(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 598,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((GreatLake(x) -> Superior(x)) | Michigan(x) | Huron(x) | Erie(x) | Ontario(x))",
      "exists x.all y.((Erie(y) & MajorSettlementOf(x,y) & In(x,Ny)) | In(x,Pa) | In(x,Oh) | In(x,Mi))",
      "(State(Ny,Us) & State(Pa,Us) & State(Oh,Us) & State(Mi,Us))",
      "State(On,Canada)",
      "exists x.all y.(Huron(y) & MajorSettlementOf(x,y) & In(x,On))",
      "all x y.(State(x,y) -> In(x,y))",
      "In(Us,Northamerica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 599,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((GreatLake(x) -> Superior(x)) | Michigan(x) | Huron(x) | Erie(x) | Ontario(x))",
      "exists x.all y.((Erie(y) & MajorSettlementOf(x,y) & In(x,Ny)) | In(x,Pa) | In(x,Oh) | In(x,Mi))",
      "(State(Ny,Us) & State(Pa,Us) & State(Oh,Us) & State(Mi,Us))",
      "State(On,Canada)",
      "exists x.all y.(Huron(y) & MajorSettlementOf(x,y) & In(x,On))",
      "all x y.(State(x,y) -> In(x,y))",
      "In(Us,Northamerica)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 836,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Defender(x) -> SoccerPlayer(x))",
      "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))",
      "all x.(CenterBack(x) -> Defender(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 837,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Defender(x) -> SoccerPlayer(x))",
      "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))",
      "all x.(CenterBack(x) -> Defender(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 838,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Defender(x) -> SoccerPlayer(x))",
      "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))",
      "all x.(CenterBack(x) -> Defender(x))",
      "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 90,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Proposed(JustinKruger,NaiveCynicism) & Proposed(ColleagueOfJustinKruger,NaiveCynicism))",
      "Colleague(ThomasGilovich,JustinKruger)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 91,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Proposed(JustinKruger,NaiveCynicism) & Proposed(ColleagueOfJustinKruger,NaiveCynicism))",
      "Colleague(ThomasGilovich,JustinKruger)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 92,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Proposed(JustinKruger,NaiveCynicism) & Proposed(ColleagueOfJustinKruger,NaiveCynicism))",
      "Colleague(ThomasGilovich,JustinKruger)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 383,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TuringAwarded(DonaldKnuth) & TuringAwarded(MarvinMinsky) & TuringAwarded(RichardHamming) & TuringAwarded(JohnMccarthy))",
      "ContributedTo(DonaldKnuth,Algorithms)",
      "ContributedTo(MarvinMinsky,Ai)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 384,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TuringAwarded(DonaldKnuth) & TuringAwarded(MarvinMinsky) & TuringAwarded(RichardHamming) & TuringAwarded(JohnMccarthy))",
      "ContributedTo(DonaldKnuth,Algorithms)",
      "ContributedTo(MarvinMinsky,Ai)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 385,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TuringAwarded(DonaldKnuth) & TuringAwarded(MarvinMinsky) & TuringAwarded(RichardHamming) & TuringAwarded(JohnMccarthy))",
      "ContributedTo(DonaldKnuth,Algorithms)",
      "ContributedTo(MarvinMinsky,Ai)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 386,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TuringAwarded(DonaldKnuth) & TuringAwarded(MarvinMinsky) & TuringAwarded(RichardHamming) & TuringAwarded(JohnMccarthy))",
      "ContributedTo(DonaldKnuth,Algorithms)",
      "ContributedTo(MarvinMinsky,Ai)",
      "ContributedTo(RichardHamming,NumericalMethods)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1224,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> -LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((LowerAC(x) & -Starred(x)) | (-LowerAC(x) & Starred(x)))",
      "all x.(Hard(x) -> Starred(x))",
      "all x.(PublishedAfter2022(x) -> -Starred(x))",
      "-(Recommended(Twosum) & Hard(Twosum))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1225,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> -LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((LowerAC(x) & -Starred(x)) | (-LowerAC(x) & Starred(x)))",
      "all x.(Hard(x) -> Starred(x))",
      "all x.(PublishedAfter2022(x) -> -Starred(x))",
      "-(Recommended(Twosum) & Hard(Twosum))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1226,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> -LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((LowerAC(x) & -Starred(x)) | (-LowerAC(x) & Starred(x)))",
      "all x.(Hard(x) -> Starred(x))",
      "all x.(PublishedAfter2022(x) -> -Starred(x))",
      "-(Recommended(Twosum) & Hard(Twosum))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1227,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Easy(x) -> -LowerAC(x))",
      "all x.(Recommended(x) -> Easy(x))",
      "all x.((LowerAC(x) & -Starred(x)) | (-LowerAC(x) & Starred(x)))",
      "all x.(Hard(x) -> Starred(x))",
      "all x.(PublishedAfter2022(x) -> -Starred(x))",
      "-(Recommended(Twosum) & Hard(Twosum))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 319,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Song(Showyourlove) & RecordedBy(Showyourlove,Btob4u) & SouthKorean(Btob4u) & BoyBand(Btob4u))",
      "(ExtendedPlay(Inside) & LeadSingle(Showyourlove) & LeadSingleOf(Showyourlove,Inside))",
      "Contains(Showyourlove,Hopefulmessage)",
      "(Member(Hyunsik,Btob4u) & Wrote(Hyunsik,Showyourlove))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 320,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Song(Showyourlove) & RecordedBy(Showyourlove,Btob4u) & SouthKorean(Btob4u) & BoyBand(Btob4u))",
      "(ExtendedPlay(Inside) & LeadSingle(Showyourlove) & LeadSingleOf(Showyourlove,Inside))",
      "Contains(Showyourlove,Hopefulmessage)",
      "(Member(Hyunsik,Btob4u) & Wrote(Hyunsik,Showyourlove))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 321,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Song(Showyourlove) & RecordedBy(Showyourlove,Btob4u) & SouthKorean(Btob4u) & BoyBand(Btob4u))",
      "(ExtendedPlay(Inside) & LeadSingle(Showyourlove) & LeadSingleOf(Showyourlove,Inside))",
      "Contains(Showyourlove,Hopefulmessage)",
      "(Member(Hyunsik,Btob4u) & Wrote(Hyunsik,Showyourlove))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 739,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Table(x) -> Round(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 716,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1089,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BrainReading(x) | BrainDecoding(x))",
      "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))",
      "all x.(ExtractingInformationFromBOLDSignals(x) -> -WithoutStatisticalPatternAnalysis(x))",
      "all x.(WritingANovel(x) -> WithoutStatisticalPatternAnalysis(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1090,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BrainReading(x) | BrainDecoding(x))",
      "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))",
      "all x.(ExtractingInformationFromBOLDSignals(x) -> -WithoutStatisticalPatternAnalysis(x))",
      "all x.(WritingANovel(x) -> WithoutStatisticalPatternAnalysis(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1091,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BrainReading(x) | BrainDecoding(x))",
      "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))",
      "all x.(ExtractingInformationFromBOLDSignals(x) -> -WithoutStatisticalPatternAnalysis(x))",
      "all x.(WritingANovel(x) -> WithoutStatisticalPatternAnalysis(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1092,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BrainReading(x) | BrainDecoding(x))",
      "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))",
      "all x.(ExtractingInformationFromBOLDSignals(x) -> -WithoutStatisticalPatternAnalysis(x))",
      "all x.(WritingANovel(x) -> WithoutStatisticalPatternAnalysis(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1093,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BrainReading(x) | BrainDecoding(x))",
      "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))",
      "all x.(ExtractingInformationFromBOLDSignals(x) -> -WithoutStatisticalPatternAnalysis(x))",
      "all x.(WritingANovel(x) -> WithoutStatisticalPatternAnalysis(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1094,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(BrainReading(x) | BrainDecoding(x))",
      "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))",
      "all x.(ExtractingInformationFromBOLDSignals(x) -> -WithoutStatisticalPatternAnalysis(x))",
      "all x.(WritingANovel(x) -> WithoutStatisticalPatternAnalysis(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 609,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RoomFor(x,Dessert) -> RoomFor(x,Broccoli))",
      "all x.(AtLuisParty(x) -> RoomFor(x,Dessert))",
      "-RoomFor(Mauricia,Broccoli)",
      "(FirstDinnerParty(Allison,Luisparty) & AtLuisParty(Allison))",
      "(RoomFor(Gustave,Broccoli) & RoomFor(Gustave,Asparagus))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 610,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RoomFor(x,Dessert) -> RoomFor(x,Broccoli))",
      "all x.(AtLuisParty(x) -> RoomFor(x,Dessert))",
      "-RoomFor(Mauricia,Broccoli)",
      "(FirstDinnerParty(Allison,Luisparty) & AtLuisParty(Allison))",
      "(RoomFor(Gustave,Broccoli) & RoomFor(Gustave,Asparagus))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 611,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(RoomFor(x,Dessert) -> RoomFor(x,Broccoli))",
      "all x.(AtLuisParty(x) -> RoomFor(x,Dessert))",
      "-RoomFor(Mauricia,Broccoli)",
      "(FirstDinnerParty(Allison,Luisparty) & AtLuisParty(Allison))",
      "(RoomFor(Gustave,Broccoli) & RoomFor(Gustave,Asparagus))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 124,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(American(ImagineDragon) & RockBand(ImagineDragon))",
      "LeadSinger(ImagineDragon,Dan)",
      "SongWriter(Dan)",
      "all x y.(LeadSinger(x,y) -> Singer(y))",
      "all x.(Singer(x) -> Musician(x))",
      "PopularSingle(ImagineDragon,Demons)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 125,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(American(ImagineDragon) & RockBand(ImagineDragon))",
      "LeadSinger(ImagineDragon,Dan)",
      "SongWriter(Dan)",
      "all x y.(LeadSinger(x,y) -> Singer(y))",
      "all x.(Singer(x) -> Musician(x))",
      "PopularSingle(ImagineDragon,Demons)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 126,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(American(ImagineDragon) & RockBand(ImagineDragon))",
      "LeadSinger(ImagineDragon,Dan)",
      "SongWriter(Dan)",
      "all x y.(LeadSinger(x,y) -> Singer(y))",
      "all x.(Singer(x) -> Musician(x))",
      "PopularSingle(ImagineDragon,Demons)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1315,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Bread(x) -> Food(x))",
      "exists x.(Sandwich(x) & Bread(x))",
      "all x.(Food(x) -> Edible(x))",
      "all x.(Edible(x) -> -Poisonous(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1316,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Bread(x) -> Food(x))",
      "exists x.(Sandwich(x) & Bread(x))",
      "all x.(Food(x) -> Edible(x))",
      "all x.(Edible(x) -> -Poisonous(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1317,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Bread(x) -> Food(x))",
      "exists x.(Sandwich(x) & Bread(x))",
      "all x.(Food(x) -> Edible(x))",
      "all x.(Edible(x) -> -Poisonous(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 461,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(CommonUtilities(Water) & CommonUtilities(Electricity) & CommonUtilities(Gas) & CommonUtilities(Heating))",
      "exists x.(Cover(x,Water) & Cover(x,Electricity))",
      "all x.Cover(Susan,x)",
      "all x.-Cover(Ava,x)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 462,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(CommonUtilities(Water) & CommonUtilities(Electricity) & CommonUtilities(Gas) & CommonUtilities(Heating))",
      "exists x.(Cover(x,Water) & Cover(x,Electricity))",
      "all x.Cover(Susan,x)",
      "all x.-Cover(Ava,x)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 463,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(CommonUtilities(Water) & CommonUtilities(Electricity) & CommonUtilities(Gas) & CommonUtilities(Heating))",
      "exists x.(Cover(x,Water) & Cover(x,Electricity))",
      "all x.Cover(Susan,x)",
      "all x.-Cover(Ava,x)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 804,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Clothes(x) -> Product(x))",
      "all x.(Product(x) -> -Perfect(x))",
      "all x.(Dress(x) -> Clothes(x))",
      "all x.(Skirt(x) -> Dress(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 805,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Clothes(x) -> Product(x))",
      "all x.(Product(x) -> -Perfect(x))",
      "all x.(Dress(x) -> Clothes(x))",
      "all x.(Skirt(x) -> Dress(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 806,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Clothes(x) -> Product(x))",
      "all x.(Product(x) -> -Perfect(x))",
      "all x.(Dress(x) -> Clothes(x))",
      "all x.(Skirt(x) -> Dress(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 169,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Pet(x) -> Animal(x))",
      "all x.(((Pet(x) -> Dog(x)) & -Cat(x)) | (-(Pet(x) -> Dog(x)) & Cat(x)))",
      "all x y.(HasPet(x) -> Cares(x,y))",
      "exists x.((Cat(x) & Naughty(x)) | (Dog(x) & Naughty(x)))",
      "all x y.((Pet(x) & Naughty(x)) -> -Liked(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 170,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Pet(x) -> Animal(x))",
      "all x.(((Pet(x) -> Dog(x)) & -Cat(x)) | (-(Pet(x) -> Dog(x)) & Cat(x)))",
      "all x y.(HasPet(x) -> Cares(x,y))",
      "exists x.((Cat(x) & Naughty(x)) | (Dog(x) & Naughty(x)))",
      "all x y.((Pet(x) & Naughty(x)) -> -Liked(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 171,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Pet(x) -> Animal(x))",
      "all x.(((Pet(x) -> Dog(x)) & -Cat(x)) | (-(Pet(x) -> Dog(x)) & Cat(x)))",
      "all x y.(HasPet(x) -> Cares(x,y))",
      "exists x.((Cat(x) & Naughty(x)) | (Dog(x) & Naughty(x)))",
      "all x y.((Pet(x) & Naughty(x)) -> -Liked(x,y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 728,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Surprise(x) -> ((Fun(x) & -Dreadful(x)) | (-Fun(x) & Dreadful(x))))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 66,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Book(x) & WrittenBy(x,Cixinliu)) -> SoldMoreThan(x,Onemillion))",
      "exists x.(Won(x,Hugoaward) & Book(x) & WrittenBy(x,Cixinliu))",
      "all x.((Book(x) & AboutFuture(x)) -> InfluencedBy(x,Isaacasimov))",
      "(Book(Threebodyproblem) & SoldMoreThan(Threebodyproblem,Onemillion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 67,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Book(x) & WrittenBy(x,Cixinliu)) -> SoldMoreThan(x,Onemillion))",
      "exists x.(Won(x,Hugoaward) & Book(x) & WrittenBy(x,Cixinliu))",
      "all x.((Book(x) & AboutFuture(x)) -> InfluencedBy(x,Isaacasimov))",
      "(Book(Threebodyproblem) & SoldMoreThan(Threebodyproblem,Onemillion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 68,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Book(x) & WrittenBy(x,Cixinliu)) -> SoldMoreThan(x,Onemillion))",
      "exists x.(Won(x,Hugoaward) & Book(x) & WrittenBy(x,Cixinliu))",
      "all x.((Book(x) & AboutFuture(x)) -> InfluencedBy(x,Isaacasimov))",
      "(Book(Threebodyproblem) & SoldMoreThan(Threebodyproblem,Onemillion))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1189,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ComputerScience(x) & GetUpEarly(x))",
      "all x.(GetUpEarly(x) -> StudyMorning(x))",
      "all x.(StudyMorning(x) -> GoodAtTimeManagement(x))",
      "all x.(GoodAtTimeManagement(x) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1190,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ComputerScience(x) & GetUpEarly(x))",
      "all x.(GetUpEarly(x) -> StudyMorning(x))",
      "all x.(StudyMorning(x) -> GoodAtTimeManagement(x))",
      "all x.(GoodAtTimeManagement(x) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1191,
    "flag": "None goal or assumptions",
    "assumptions": [
      "exists x.(ComputerScience(x) & GetUpEarly(x))",
      "all x.(GetUpEarly(x) -> StudyMorning(x))",
      "all x.(StudyMorning(x) -> GoodAtTimeManagement(x))",
      "all x.(GoodAtTimeManagement(x) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 721,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 41,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Elephantopus(x) -> Genus(x,Perennialplants)) & BelongTo(x,Daisyfamily))",
      "all x.((Elephantopus(x) -> WidespreadOver(x,Africa)) & WidespreadOver(x,Southernasia) & WidespreadOver(x,Australia) & WidespreadOver(x,Americas))",
      "exists x.(Elephantopus(x) & NativeTo(x,Southeasternunitedstates))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 42,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Elephantopus(x) -> Genus(x,Perennialplants)) & BelongTo(x,Daisyfamily))",
      "all x.((Elephantopus(x) -> WidespreadOver(x,Africa)) & WidespreadOver(x,Southernasia) & WidespreadOver(x,Australia) & WidespreadOver(x,Americas))",
      "exists x.(Elephantopus(x) & NativeTo(x,Southeasternunitedstates))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 43,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Elephantopus(x) -> Genus(x,Perennialplants)) & BelongTo(x,Daisyfamily))",
      "all x.((Elephantopus(x) -> WidespreadOver(x,Africa)) & WidespreadOver(x,Southernasia) & WidespreadOver(x,Australia) & WidespreadOver(x,Americas))",
      "exists x.(Elephantopus(x) & NativeTo(x,Southeasternunitedstates))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1236,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YaleDormitory(x) -> InYorkStreet(x))",
      "all x.(ManagedByYaleHousing(x) -> YaleDormitory(x))",
      "all x.(OperatedByYaleHousingStaffs(x) -> ManagedByYaleHousing(x))",
      "all x.(OpenToStudents(x) -> -EstablishedAfter1800(x))",
      "all x.(InYorkStreet(x) -> OpenToStudents(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1237,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YaleDormitory(x) -> InYorkStreet(x))",
      "all x.(ManagedByYaleHousing(x) -> YaleDormitory(x))",
      "all x.(OperatedByYaleHousingStaffs(x) -> ManagedByYaleHousing(x))",
      "all x.(OpenToStudents(x) -> -EstablishedAfter1800(x))",
      "all x.(InYorkStreet(x) -> OpenToStudents(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1238,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YaleDormitory(x) -> InYorkStreet(x))",
      "all x.(ManagedByYaleHousing(x) -> YaleDormitory(x))",
      "all x.(OperatedByYaleHousingStaffs(x) -> ManagedByYaleHousing(x))",
      "all x.(OpenToStudents(x) -> -EstablishedAfter1800(x))",
      "all x.(InYorkStreet(x) -> OpenToStudents(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1239,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(YaleDormitory(x) -> InYorkStreet(x))",
      "all x.(ManagedByYaleHousing(x) -> YaleDormitory(x))",
      "all x.(OperatedByYaleHousingStaffs(x) -> ManagedByYaleHousing(x))",
      "all x.(OpenToStudents(x) -> -EstablishedAfter1800(x))",
      "all x.(InYorkStreet(x) -> OpenToStudents(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 794,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 795,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 796,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 797,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 798,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 799,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 800,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 801,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 802,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 803,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UrbanArea(x) -> -MansionHouse(x))",
      "all x.(Skyscraper(x) -> UrbanArea(x))",
      "all x.(CreepyHauntedHouse(x) -> MansionHouse(x))",
      "all x.(TerrifyingHalloweenScare(x) -> CreepyHauntedHouse(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 331,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(NationalPark(PhuocBinh) & Locatedin(PhuocBinh,Vietnam))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> NatureReserve(x))",
      "exists x.(NationalPark(x) & Locatedin(x,Vietnam) & UNESCOWorldHeritageSite(x))",
      "all x.(((NationalPark(x) & Locatedin(x,Vietnam)) -> Mangedby(x,MinistryofAgriculture)) | Mangedby(x,PeoplesCommittee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 332,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(NationalPark(PhuocBinh) & Locatedin(PhuocBinh,Vietnam))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> NatureReserve(x))",
      "exists x.(NationalPark(x) & Locatedin(x,Vietnam) & UNESCOWorldHeritageSite(x))",
      "all x.(((NationalPark(x) & Locatedin(x,Vietnam)) -> Mangedby(x,MinistryofAgriculture)) | Mangedby(x,PeoplesCommittee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 333,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(NationalPark(PhuocBinh) & Locatedin(PhuocBinh,Vietnam))",
      "all x.((NationalPark(x) & Locatedin(x,Vietnam)) -> NatureReserve(x))",
      "exists x.(NationalPark(x) & Locatedin(x,Vietnam) & UNESCOWorldHeritageSite(x))",
      "all x.(((NationalPark(x) & Locatedin(x,Vietnam)) -> Mangedby(x,MinistryofAgriculture)) | Mangedby(x,PeoplesCommittee))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 404,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.exists y.((GreyhoundRacing(x) -> CompetitiveSport(x)) & Greyhound(y) & SpectatorsBetOn(x,y))",
      "all x.(GreyhoundRacing(x) <-> Coursing(x))",
      "exists x y.(CompetitiveSport(x) & SpectaorsBetOn(x,y) & Banned(x))",
      "all x.exists y z.((Coursing(x) -> Hare(y)) & SpectatorsBetOn(x,y) & GreyHound(z) & Pursue(z,y))",
      "all x.(Hare(x) -> SmallGame(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 405,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.exists y.((GreyhoundRacing(x) -> CompetitiveSport(x)) & Greyhound(y) & SpectatorsBetOn(x,y))",
      "all x.(GreyhoundRacing(x) <-> Coursing(x))",
      "exists x y.(CompetitiveSport(x) & SpectaorsBetOn(x,y) & Banned(x))",
      "all x.exists y z.((Coursing(x) -> Hare(y)) & SpectatorsBetOn(x,y) & GreyHound(z) & Pursue(z,y))",
      "all x.(Hare(x) -> SmallGame(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 547,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SoccerPlayer(x) & TwoYellow(x)) -> Eject(x))",
      "all x.((SoccerPlayer(x) & OneRed(x)) -> Eject(x))",
      "SoccerPlayer(Henry)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 548,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SoccerPlayer(x) & TwoYellow(x)) -> Eject(x))",
      "all x.((SoccerPlayer(x) & OneRed(x)) -> Eject(x))",
      "SoccerPlayer(Henry)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 736,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Tree(x) -> Plant(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 44,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dagfinn(x) -> GivenName(x))",
      "(Dagfinn(DagfinnAarskog) & NotablePeople(DagfinnAarskog) & Dagfinn(DagfinnBakke) & NotablePeople(DagfinnBakke) & Dagfinn(DagfinnDahl) & NotablePeople(DagfinnDahl))",
      "(Norwegian(DagfinnAarskog) & Physician(DagfinnAarskog))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 45,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dagfinn(x) -> GivenName(x))",
      "(Dagfinn(DagfinnAarskog) & NotablePeople(DagfinnAarskog) & Dagfinn(DagfinnBakke) & NotablePeople(DagfinnBakke) & Dagfinn(DagfinnDahl) & NotablePeople(DagfinnDahl))",
      "(Norwegian(DagfinnAarskog) & Physician(DagfinnAarskog))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 46,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Dagfinn(x) -> GivenName(x))",
      "(Dagfinn(DagfinnAarskog) & NotablePeople(DagfinnAarskog) & Dagfinn(DagfinnBakke) & NotablePeople(DagfinnBakke) & Dagfinn(DagfinnDahl) & NotablePeople(DagfinnDahl))",
      "(Norwegian(DagfinnAarskog) & Physician(DagfinnAarskog))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 749,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 687,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 334,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Scottish(Johnstone)",
      "PartOf(Johnstone,Scottishpremiership)",
      "all x y.(PartOf(x,y) -> Joined(x,y))",
      "(Different(Misnk,Johnstone) & Different(Johnstone,Minsk))",
      "all x y.(((Different(x,y) -> WonGame(x,y)) & -WonGame(y,x)) | (-(Different(x,y) -> WonGame(x,y)) & WonGame(y,x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 335,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Scottish(Johnstone)",
      "PartOf(Johnstone,Scottishpremiership)",
      "all x y.(PartOf(x,y) -> Joined(x,y))",
      "(Different(Misnk,Johnstone) & Different(Johnstone,Minsk))",
      "all x y.(((Different(x,y) -> WonGame(x,y)) & -WonGame(y,x)) | (-(Different(x,y) -> WonGame(x,y)) & WonGame(y,x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 336,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Scottish(Johnstone)",
      "PartOf(Johnstone,Scottishpremiership)",
      "all x y.(PartOf(x,y) -> Joined(x,y))",
      "(Different(Misnk,Johnstone) & Different(Johnstone,Minsk))",
      "all x y.(((Different(x,y) -> WonGame(x,y)) & -WonGame(y,x)) | (-(Different(x,y) -> WonGame(x,y)) & WonGame(y,x)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1232,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Boeing737(x) -> -Seats300(x))",
      "all x.(Delta(x) -> Boeing737(x))",
      "all x.(Seats300(x) | Passengers100(x))",
      "all x.(Passengers100(x) -> ShortDistance(x))",
      "all x.(Passengers100(x) -> ProducedBefore2010(x))",
      "((Boeing737(Jake32) & -Delta(Jake32)) | (-Boeing737(Jake32) & Delta(Jake32)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1233,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Boeing737(x) -> -Seats300(x))",
      "all x.(Delta(x) -> Boeing737(x))",
      "all x.(Seats300(x) | Passengers100(x))",
      "all x.(Passengers100(x) -> ShortDistance(x))",
      "all x.(Passengers100(x) -> ProducedBefore2010(x))",
      "((Boeing737(Jake32) & -Delta(Jake32)) | (-Boeing737(Jake32) & Delta(Jake32)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1234,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Boeing737(x) -> -Seats300(x))",
      "all x.(Delta(x) -> Boeing737(x))",
      "all x.(Seats300(x) | Passengers100(x))",
      "all x.(Passengers100(x) -> ShortDistance(x))",
      "all x.(Passengers100(x) -> ProducedBefore2010(x))",
      "((Boeing737(Jake32) & -Delta(Jake32)) | (-Boeing737(Jake32) & Delta(Jake32)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1235,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Boeing737(x) -> -Seats300(x))",
      "all x.(Delta(x) -> Boeing737(x))",
      "all x.(Seats300(x) | Passengers100(x))",
      "all x.(Passengers100(x) -> ShortDistance(x))",
      "all x.(Passengers100(x) -> ProducedBefore2010(x))",
      "((Boeing737(Jake32) & -Delta(Jake32)) | (-Boeing737(Jake32) & Delta(Jake32)))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 558,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Own(Sat,CollegeBoard) & -Own(Sat,Others))",
      "Test(Sat,Readiness)",
      "all x.((Year(x) & Before2016(x)) -> -AlignHighSchool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 559,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Own(Sat,CollegeBoard) & -Own(Sat,Others))",
      "Test(Sat,Readiness)",
      "all x.((Year(x) & Before2016(x)) -> -AlignHighSchool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 560,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Own(Sat,CollegeBoard) & -Own(Sat,Others))",
      "Test(Sat,Readiness)",
      "all x.((Year(x) & Before2016(x)) -> -AlignHighSchool(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 99,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(RafaNadal,Mallorca)",
      "ProfessionalTennisPlayer(RafaNadal)",
      "HighWinRatio(RafaNadal)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 100,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(RafaNadal,Mallorca)",
      "ProfessionalTennisPlayer(RafaNadal)",
      "HighWinRatio(RafaNadal)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 101,
    "flag": "None goal or assumptions",
    "assumptions": [
      "BornIn(RafaNadal,Mallorca)",
      "ProfessionalTennisPlayer(RafaNadal)",
      "HighWinRatio(RafaNadal)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 735,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cookie(x) -> -Healthy(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 787,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 788,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 789,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 790,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Animal(x) -> -Plant(x))",
      "all x.(Human(x) -> Animal(x))",
      "all x.(Pupil(x) -> Human(x))",
      "all x.(Flower(x) -> Plant(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1326,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Shoes(x) -> -Food(x))",
      "all x.(Slipper(x) -> Shoes(x))",
      "all x.((Food(x) & -Clothes(x)) | (-Food(x) & Clothes(x)))",
      "all x.(Wearable(x) -> -AirTight(x))",
      "all x.(Clothes(x) -> Wearable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1327,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Shoes(x) -> -Food(x))",
      "all x.(Slipper(x) -> Shoes(x))",
      "all x.((Food(x) & -Clothes(x)) | (-Food(x) & Clothes(x)))",
      "all x.(Wearable(x) -> -AirTight(x))",
      "all x.(Clothes(x) -> Wearable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1328,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Shoes(x) -> -Food(x))",
      "all x.(Slipper(x) -> Shoes(x))",
      "all x.((Food(x) & -Clothes(x)) | (-Food(x) & Clothes(x)))",
      "all x.(Wearable(x) -> -AirTight(x))",
      "all x.(Clothes(x) -> Wearable(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 102,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((DoesOlympicSport(x) & GoesToOlympicGames(x)) -> IsOlympian(x))",
      "DoesOlympicSport(CarlosReyes)",
      "GoesToOlympicGames(CarlosReyes)",
      "IsWelterWeight(CarlosReyes)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 103,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((DoesOlympicSport(x) & GoesToOlympicGames(x)) -> IsOlympian(x))",
      "DoesOlympicSport(CarlosReyes)",
      "GoesToOlympicGames(CarlosReyes)",
      "IsWelterWeight(CarlosReyes)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 104,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((DoesOlympicSport(x) & GoesToOlympicGames(x)) -> IsOlympian(x))",
      "DoesOlympicSport(CarlosReyes)",
      "GoesToOlympicGames(CarlosReyes)",
      "IsWelterWeight(CarlosReyes)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 868,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 869,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 870,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 871,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 872,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 873,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 874,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 875,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 876,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Decor(x) -> -MoveOut(x))",
      "all x.(Ambitious(x) -> MoveOut(x))",
      "all x.(Fans(x) -> Decor(x))",
      "all x.(CollegeTeen(x) -> Ambitious(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 527,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Student(x) & Shriek(x)) -> Punished(x))",
      "all x.(Swear(x) -> Student(x))",
      "all x.(Teacher(x) -> Talk(Bob,x))",
      "all x.(Gentleman(x) -> Suit(x))",
      "all x.(Teacher(x) -> Man(x))",
      "exists x.Teacher(x)",
      "all x.(-Gentleman(x) -> -Nice(x))",
      "Nice(Willy)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 528,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Student(x) & Shriek(x)) -> Punished(x))",
      "all x.(Swear(x) -> Student(x))",
      "all x.(Teacher(x) -> Talk(Bob,x))",
      "all x.(Gentleman(x) -> Suit(x))",
      "all x.(Teacher(x) -> Man(x))",
      "exists x.Teacher(x)",
      "all x.(-Gentleman(x) -> -Nice(x))",
      "Nice(Willy)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 529,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Student(x) & Shriek(x)) -> Punished(x))",
      "all x.(Swear(x) -> Student(x))",
      "all x.(Teacher(x) -> Talk(Bob,x))",
      "all x.(Gentleman(x) -> Suit(x))",
      "all x.(Teacher(x) -> Man(x))",
      "exists x.Teacher(x)",
      "all x.(-Gentleman(x) -> -Nice(x))",
      "Nice(Willy)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 142,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(American(Quincymcduffie) & Professional(Quincymcduffie) & WideReciever(Quincymcduffie) & In(Quincymcduffie,Canadianfootball))",
      "all x.exists y.((CanCatch(x,y) & Ball(y)) -> Good(x,Widereciever))",
      "exists x.(Football(x) & CanCatch(Quincymcduffie,x))",
      "all x.(Good(x,Widereciever) -> Professional(x))",
      "all x.((Good(x,Widereciever) -> CanCatchWith(x,Lefthand)) & CanCatchWith(x,Righthand))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 143,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(American(Quincymcduffie) & Professional(Quincymcduffie) & WideReciever(Quincymcduffie) & In(Quincymcduffie,Canadianfootball))",
      "all x.exists y.((CanCatch(x,y) & Ball(y)) -> Good(x,Widereciever))",
      "exists x.(Football(x) & CanCatch(Quincymcduffie,x))",
      "all x.(Good(x,Widereciever) -> Professional(x))",
      "all x.((Good(x,Widereciever) -> CanCatchWith(x,Lefthand)) & CanCatchWith(x,Righthand))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 144,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(American(Quincymcduffie) & Professional(Quincymcduffie) & WideReciever(Quincymcduffie) & In(Quincymcduffie,Canadianfootball))",
      "all x.exists y.((CanCatch(x,y) & Ball(y)) -> Good(x,Widereciever))",
      "exists x.(Football(x) & CanCatch(Quincymcduffie,x))",
      "all x.(Good(x,Widereciever) -> Professional(x))",
      "all x.((Good(x,Widereciever) -> CanCatchWith(x,Lefthand)) & CanCatchWith(x,Righthand))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 14,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(RailwayStation(Boves) & Locate(Boves,France))",
      "Precede(Boves,Longueau)",
      "Precede(Dommartin,Boves)",
      "Locate(France,Europe)",
      "Situate(Dommartin,PairsLille)",
      "all x y z.((Situate(x,z) & (Precede(x,y) | Precede(y,x))) -> Situate(y,z))",
      "Serve(HautsDeFrance,Boves)",
      "all x y z.((Locate(x,y) & Locate(y,z)) -> Locate(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 15,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(RailwayStation(Boves) & Locate(Boves,France))",
      "Precede(Boves,Longueau)",
      "Precede(Dommartin,Boves)",
      "Locate(France,Europe)",
      "Situate(Dommartin,PairsLille)",
      "all x y z.((Situate(x,z) & (Precede(x,y) | Precede(y,x))) -> Situate(y,z))",
      "Serve(HautsDeFrance,Boves)",
      "all x y z.((Locate(x,y) & Locate(y,z)) -> Locate(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 16,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(RailwayStation(Boves) & Locate(Boves,France))",
      "Precede(Boves,Longueau)",
      "Precede(Dommartin,Boves)",
      "Locate(France,Europe)",
      "Situate(Dommartin,PairsLille)",
      "all x y z.((Situate(x,z) & (Precede(x,y) | Precede(y,x))) -> Situate(y,z))",
      "Serve(HautsDeFrance,Boves)",
      "all x y z.((Locate(x,y) & Locate(y,z)) -> Locate(x,z))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 310,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(From(Edwinsmith,Newzealand) & Rower(Edwinsmith) & From(Edwinsmith,Auckland))",
      "KnownAs(Edwinsmith,Tedsmith)",
      "(WentTo(Edwinsmith,Roseroadprimaryschool) & LocatedIn(Roseroadprimaryschool,Greylynn))",
      "(Sergeant(Edwinsmith) & ServedWith(Edwinsmith,Newzealand24thbattalion) & ServedIn(Edwinsmith,Italy) & ServedIn(Edwinsmith,Egypt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 311,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(From(Edwinsmith,Newzealand) & Rower(Edwinsmith) & From(Edwinsmith,Auckland))",
      "KnownAs(Edwinsmith,Tedsmith)",
      "(WentTo(Edwinsmith,Roseroadprimaryschool) & LocatedIn(Roseroadprimaryschool,Greylynn))",
      "(Sergeant(Edwinsmith) & ServedWith(Edwinsmith,Newzealand24thbattalion) & ServedIn(Edwinsmith,Italy) & ServedIn(Edwinsmith,Egypt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 312,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(From(Edwinsmith,Newzealand) & Rower(Edwinsmith) & From(Edwinsmith,Auckland))",
      "KnownAs(Edwinsmith,Tedsmith)",
      "(WentTo(Edwinsmith,Roseroadprimaryschool) & LocatedIn(Roseroadprimaryschool,Greylynn))",
      "(Sergeant(Edwinsmith) & ServedWith(Edwinsmith,Newzealand24thbattalion) & ServedIn(Edwinsmith,Italy) & ServedIn(Edwinsmith,Egypt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 313,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(From(Edwinsmith,Newzealand) & Rower(Edwinsmith) & From(Edwinsmith,Auckland))",
      "KnownAs(Edwinsmith,Tedsmith)",
      "(WentTo(Edwinsmith,Roseroadprimaryschool) & LocatedIn(Roseroadprimaryschool,Greylynn))",
      "(Sergeant(Edwinsmith) & ServedWith(Edwinsmith,Newzealand24thbattalion) & ServedIn(Edwinsmith,Italy) & ServedIn(Edwinsmith,Egypt))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 506,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Human(x) & CanTurnInto(x,Wolf)) -> Werewolf(x))",
      "all x.exists y.((Werewolf(x) -> (BittenBy(x,y) | ScratchedBy(x,y))) & Werewolf(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 507,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Human(x) & CanTurnInto(x,Wolf)) -> Werewolf(x))",
      "all x.exists y.((Werewolf(x) -> (BittenBy(x,y) | ScratchedBy(x,y))) & Werewolf(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 508,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((Human(x) & CanTurnInto(x,Wolf)) -> Werewolf(x))",
      "all x.exists y.((Werewolf(x) -> (BittenBy(x,y) | ScratchedBy(x,y))) & Werewolf(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 409,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & Sweden(UFCFightNight))",
      "(Event(UFCFightNight) -> ScheduledToFight(Sadollah,Musoke))",
      "(Event(UFCFightNight) -> Fight(Sadollah,Akiyama))",
      "(Event(UFCFightNight) -> Fight(Musoke,Yakovlev))",
      "(Event(UFCFightNight) -> Injured(Jung))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 410,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & Sweden(UFCFightNight))",
      "(Event(UFCFightNight) -> ScheduledToFight(Sadollah,Musoke))",
      "(Event(UFCFightNight) -> Fight(Sadollah,Akiyama))",
      "(Event(UFCFightNight) -> Fight(Musoke,Yakovlev))",
      "(Event(UFCFightNight) -> Injured(Jung))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 411,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & Sweden(UFCFightNight))",
      "(Event(UFCFightNight) -> ScheduledToFight(Sadollah,Musoke))",
      "(Event(UFCFightNight) -> Fight(Sadollah,Akiyama))",
      "(Event(UFCFightNight) -> Fight(Musoke,Yakovlev))",
      "(Event(UFCFightNight) -> Injured(Jung))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 412,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(Event(UFCFightNight) & MixedMartial(UFCFightNight) & Sweden(UFCFightNight))",
      "(Event(UFCFightNight) -> ScheduledToFight(Sadollah,Musoke))",
      "(Event(UFCFightNight) -> Fight(Sadollah,Akiyama))",
      "(Event(UFCFightNight) -> Fight(Musoke,Yakovlev))",
      "(Event(UFCFightNight) -> Injured(Jung))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1356,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drink(x) -> Edible(x))",
      "all x.(Juice(x) -> Drink(x))",
      "all x.(OrangeJuice(x) -> Juice(x))",
      "all x.(OrangeJuice(x) | AppleJuice(x))",
      "all x.(AppleJuice(x) -> Sweet(x))",
      "(AppleJuice(Coke) -> Drink(Coke))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1357,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drink(x) -> Edible(x))",
      "all x.(Juice(x) -> Drink(x))",
      "all x.(OrangeJuice(x) -> Juice(x))",
      "all x.(OrangeJuice(x) | AppleJuice(x))",
      "all x.(AppleJuice(x) -> Sweet(x))",
      "(AppleJuice(Coke) -> Drink(Coke))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1358,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Drink(x) -> Edible(x))",
      "all x.(Juice(x) -> Drink(x))",
      "all x.(OrangeJuice(x) -> Juice(x))",
      "all x.(OrangeJuice(x) | AppleJuice(x))",
      "all x.(AppleJuice(x) -> Sweet(x))",
      "(AppleJuice(Coke) -> Drink(Coke))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 119,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TalentedPoet(Lorca) & SupportPopulists(Lorca))",
      "all x.(SupportPopulists(x) -> Opposed(Nationalists,x))",
      "all x.(TalentedPoet(x) -> Popular(x))",
      "all x.((Opposed(Nationalists,x) & Popular(x)) -> Killed(Nationalists,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 120,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(TalentedPoet(Lorca) & SupportPopulists(Lorca))",
      "all x.(SupportPopulists(x) -> Opposed(Nationalists,x))",
      "all x.(TalentedPoet(x) -> Popular(x))",
      "all x.((Opposed(Nationalists,x) & Popular(x)) -> Killed(Nationalists,x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 978,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kombucha(x) | CocaCola(x))",
      "all x.(CocaCola(x) -> BusyParents(x))",
      "all x.(CocaCola(x) -> Dentist(x))",
      "all x.(BusyParents(x) -> Erratic(x))",
      "all x.(Erratic(x) -> -Consistent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 979,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kombucha(x) | CocaCola(x))",
      "all x.(CocaCola(x) -> BusyParents(x))",
      "all x.(CocaCola(x) -> Dentist(x))",
      "all x.(BusyParents(x) -> Erratic(x))",
      "all x.(Erratic(x) -> -Consistent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 980,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Kombucha(x) | CocaCola(x))",
      "all x.(CocaCola(x) -> BusyParents(x))",
      "all x.(CocaCola(x) -> Dentist(x))",
      "all x.(BusyParents(x) -> Erratic(x))",
      "all x.(Erratic(x) -> -Consistent(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 63,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SubscribedTo(x,Amcalist) -> ThreeMovies(x)) & NoFees(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(Prefer(x,Tvseries) -> -WatchTVIn(x,Cinemas))",
      "WatchTVIn(James,Cinemas)",
      "SubscribedTo(James,Amcalist)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 64,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SubscribedTo(x,Amcalist) -> ThreeMovies(x)) & NoFees(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(Prefer(x,Tvseries) -> -WatchTVIn(x,Cinemas))",
      "WatchTVIn(James,Cinemas)",
      "SubscribedTo(James,Amcalist)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 65,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((SubscribedTo(x,Amcalist) -> ThreeMovies(x)) & NoFees(x))",
      "exists x.CinemaEveryWeek(x)",
      "all x.(Prefer(x,Tvseries) -> -WatchTVIn(x,Cinemas))",
      "WatchTVIn(James,Cinemas)",
      "SubscribedTo(James,Amcalist)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 724,
    "flag": "None goal or assumptions",
    "assumptions": [
      "InGenus(Bulbophyllum,Bulbophyllum)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 470,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FederalDistrictOfRussia(Central) | FederalDistrictOfRussia(Northwestern) | FederalDistrictOfRussia(Southern) | FederalDistrictOfRussia(Northcaucasian) | FederalDistrictOfRussia(Volga) | FederalDistrictOfRussia(Ural) | FederalDistrictOfRussia(Siberian) | FederalDistrictOfRussia(Fareastern))",
      "(FederalDistrictOfRussia(Central) & LargestPopulationIn(Central))",
      "AdministrativeCenterOf(Moscow,Central)",
      "AdministrativeCenterOf(Yekaterinburg,Ural)",
      "AdministrativeCenterOf(Vladivostok,Fareastern)",
      "(FederalDistrictOfRussia(Fareastern) & LargestAreaIn(Fareastern))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 471,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FederalDistrictOfRussia(Central) | FederalDistrictOfRussia(Northwestern) | FederalDistrictOfRussia(Southern) | FederalDistrictOfRussia(Northcaucasian) | FederalDistrictOfRussia(Volga) | FederalDistrictOfRussia(Ural) | FederalDistrictOfRussia(Siberian) | FederalDistrictOfRussia(Fareastern))",
      "(FederalDistrictOfRussia(Central) & LargestPopulationIn(Central))",
      "AdministrativeCenterOf(Moscow,Central)",
      "AdministrativeCenterOf(Yekaterinburg,Ural)",
      "AdministrativeCenterOf(Vladivostok,Fareastern)",
      "(FederalDistrictOfRussia(Fareastern) & LargestAreaIn(Fareastern))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 472,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(FederalDistrictOfRussia(Central) | FederalDistrictOfRussia(Northwestern) | FederalDistrictOfRussia(Southern) | FederalDistrictOfRussia(Northcaucasian) | FederalDistrictOfRussia(Volga) | FederalDistrictOfRussia(Ural) | FederalDistrictOfRussia(Siberian) | FederalDistrictOfRussia(Fareastern))",
      "(FederalDistrictOfRussia(Central) & LargestPopulationIn(Central))",
      "AdministrativeCenterOf(Moscow,Central)",
      "AdministrativeCenterOf(Yekaterinburg,Ural)",
      "AdministrativeCenterOf(Vladivostok,Fareastern)",
      "(FederalDistrictOfRussia(Fareastern) & LargestAreaIn(Fareastern))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 815,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cancer(x) -> MalignantTumor(x))",
      "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(HavingACold(x) -> CanBeTreatedAtHome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 816,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cancer(x) -> MalignantTumor(x))",
      "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(HavingACold(x) -> CanBeTreatedAtHome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 817,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cancer(x) -> MalignantTumor(x))",
      "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(HavingACold(x) -> CanBeTreatedAtHome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 818,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cancer(x) -> MalignantTumor(x))",
      "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(HavingACold(x) -> CanBeTreatedAtHome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 819,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cancer(x) -> MalignantTumor(x))",
      "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(HavingACold(x) -> CanBeTreatedAtHome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 820,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Cancer(x) -> MalignantTumor(x))",
      "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))",
      "all x.(ColorectalCancer(x) -> Cancer(x))",
      "all x.(HavingACold(x) -> CanBeTreatedAtHome(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 752,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(OutsideControl(x) -> -ShouldWorry(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 342,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UseAsSurname(x,Roversi) -> UseItalianSurname(x))",
      "UseAsSurname(Alba,Roversi)",
      "UseAsSurname(Paolo,Roversi)",
      "UseAsSurname(Roberto,Roversi)",
      "Photographer(Paolo)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 343,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UseAsSurname(x,Roversi) -> UseItalianSurname(x))",
      "UseAsSurname(Alba,Roversi)",
      "UseAsSurname(Paolo,Roversi)",
      "UseAsSurname(Roberto,Roversi)",
      "Photographer(Paolo)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 344,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(UseAsSurname(x,Roversi) -> UseItalianSurname(x))",
      "UseAsSurname(Alba,Roversi)",
      "UseAsSurname(Paolo,Roversi)",
      "UseAsSurname(Roberto,Roversi)",
      "Photographer(Paolo)",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 677,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 678,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 679,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 680,
    "flag": "None goal or assumptions",
    "assumptions": null,
    "goal": null
  },
  {
    "id": 1081,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))",
      "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))",
      "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))",
      "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1082,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))",
      "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))",
      "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))",
      "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1083,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))",
      "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))",
      "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))",
      "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1084,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))",
      "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))",
      "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))",
      "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1258,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Present(x) | Tutorial(x))",
      "all x.(Present(x) -> InPerson(x))",
      "all x.(Tutorial(x) -> Invited(x))",
      "all x.(InPerson(x) -> Souvenirs(x))",
      "all x.(Invited(x) -> Meals(x))",
      "all x.(Meals(x) -> HappyCommunicate(x))",
      "all x.(Meals(x) -> InvitedTakePhoto(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1259,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Present(x) | Tutorial(x))",
      "all x.(Present(x) -> InPerson(x))",
      "all x.(Tutorial(x) -> Invited(x))",
      "all x.(InPerson(x) -> Souvenirs(x))",
      "all x.(Invited(x) -> Meals(x))",
      "all x.(Meals(x) -> HappyCommunicate(x))",
      "all x.(Meals(x) -> InvitedTakePhoto(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1260,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Present(x) | Tutorial(x))",
      "all x.(Present(x) -> InPerson(x))",
      "all x.(Tutorial(x) -> Invited(x))",
      "all x.(InPerson(x) -> Souvenirs(x))",
      "all x.(Invited(x) -> Meals(x))",
      "all x.(Meals(x) -> HappyCommunicate(x))",
      "all x.(Meals(x) -> InvitedTakePhoto(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1261,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Present(x) | Tutorial(x))",
      "all x.(Present(x) -> InPerson(x))",
      "all x.(Tutorial(x) -> Invited(x))",
      "all x.(InPerson(x) -> Souvenirs(x))",
      "all x.(Invited(x) -> Meals(x))",
      "all x.(Meals(x) -> HappyCommunicate(x))",
      "all x.(Meals(x) -> InvitedTakePhoto(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1262,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Present(x) | Tutorial(x))",
      "all x.(Present(x) -> InPerson(x))",
      "all x.(Tutorial(x) -> Invited(x))",
      "all x.(InPerson(x) -> Souvenirs(x))",
      "all x.(Invited(x) -> Meals(x))",
      "all x.(Meals(x) -> HappyCommunicate(x))",
      "all x.(Meals(x) -> InvitedTakePhoto(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 38,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(HeavyCruiser(Usssalem) & BuiltFor(Usssalem,Unitedstatesnavy))",
      "LastHeavyCruiserToEnterService(Usssalem)",
      "MuseumShip(Usssalem)",
      "all x.(MuseumShip(x) -> OpenToPublic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 39,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(HeavyCruiser(Usssalem) & BuiltFor(Usssalem,Unitedstatesnavy))",
      "LastHeavyCruiserToEnterService(Usssalem)",
      "MuseumShip(Usssalem)",
      "all x.(MuseumShip(x) -> OpenToPublic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 40,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(HeavyCruiser(Usssalem) & BuiltFor(Usssalem,Unitedstatesnavy))",
      "LastHeavyCruiserToEnterService(Usssalem)",
      "MuseumShip(Usssalem)",
      "all x.(MuseumShip(x) -> OpenToPublic(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 415,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((TSLeda(x) -> Passenger(x)) & CargoVessel(x))",
      "all x.((TSLeda(x) -> Norweigian(x)) & Stabilizers(x))",
      "all x.((Stabilizers(x) -> OnlyOnShips(x)) & SteamTurbine(x))",
      "all x.(((Passenger(x) & CargoVessel(x)) -> Quiet(x)) & GoodSea(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 416,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((TSLeda(x) -> Passenger(x)) & CargoVessel(x))",
      "all x.((TSLeda(x) -> Norweigian(x)) & Stabilizers(x))",
      "all x.((Stabilizers(x) -> OnlyOnShips(x)) & SteamTurbine(x))",
      "all x.(((Passenger(x) & CargoVessel(x)) -> Quiet(x)) & GoodSea(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 417,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.((TSLeda(x) -> Passenger(x)) & CargoVessel(x))",
      "all x.((TSLeda(x) -> Norweigian(x)) & Stabilizers(x))",
      "all x.((Stabilizers(x) -> OnlyOnShips(x)) & SteamTurbine(x))",
      "all x.(((Passenger(x) & CargoVessel(x)) -> Quiet(x)) & GoodSea(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 555,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Born(Rosa,Santiago)",
      "(Capital(Santiago,Chile) & LargestCity(Santiago,Chile))",
      "(Daughter(Rosa,Jose) & BuildingContractor(Jose) & -Chilean(Jose))",
      "(Wife(Jose,Carmen) & Chilean(Carmen))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 556,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Born(Rosa,Santiago)",
      "(Capital(Santiago,Chile) & LargestCity(Santiago,Chile))",
      "(Daughter(Rosa,Jose) & BuildingContractor(Jose) & -Chilean(Jose))",
      "(Wife(Jose,Carmen) & Chilean(Carmen))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 557,
    "flag": "None goal or assumptions",
    "assumptions": [
      "Born(Rosa,Santiago)",
      "(Capital(Santiago,Chile) & LargestCity(Santiago,Chile))",
      "(Daughter(Rosa,Jose) & BuildingContractor(Jose) & -Chilean(Jose))",
      "(Wife(Jose,Carmen) & Chilean(Carmen))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 105,
    "flag": "None goal or assumptions",
    "assumptions": [
      "IsRapper(Tyga)",
      "ReleasedAlbum(Tyga,WellDone3)",
      "all x y.((IsRapper(x) & ReleasedAlbum(x,y)) -> IsRapAlbum(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 106,
    "flag": "None goal or assumptions",
    "assumptions": [
      "IsRapper(Tyga)",
      "ReleasedAlbum(Tyga,WellDone3)",
      "all x y.((IsRapper(x) & ReleasedAlbum(x,y)) -> IsRapAlbum(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 107,
    "flag": "None goal or assumptions",
    "assumptions": [
      "IsRapper(Tyga)",
      "ReleasedAlbum(Tyga,WellDone3)",
      "all x y.((IsRapper(x) & ReleasedAlbum(x,y)) -> IsRapAlbum(y))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 293,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BornIn(Deborahwallace,Scotland) & Actress(Deborahwallace) & Playwright(Deborahwallace) & Producer(Deborahwallace))",
      "(Play(Psyche) & BasedOn(Psyche,Lifeofjamesmirandabarry))",
      "(Play(Homesick) & From(Homesick,Deborahwallace) & Play(Psyche) & From(Psyche,Deborahwallace) & Play(Thevoid) & From(Thevoid,Deborahwallace))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 294,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BornIn(Deborahwallace,Scotland) & Actress(Deborahwallace) & Playwright(Deborahwallace) & Producer(Deborahwallace))",
      "(Play(Psyche) & BasedOn(Psyche,Lifeofjamesmirandabarry))",
      "(Play(Homesick) & From(Homesick,Deborahwallace) & Play(Psyche) & From(Psyche,Deborahwallace) & Play(Thevoid) & From(Thevoid,Deborahwallace))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 295,
    "flag": "None goal or assumptions",
    "assumptions": [
      "(BornIn(Deborahwallace,Scotland) & Actress(Deborahwallace) & Playwright(Deborahwallace) & Producer(Deborahwallace))",
      "(Play(Psyche) & BasedOn(Psyche,Lifeofjamesmirandabarry))",
      "(Play(Homesick) & From(Homesick,Deborahwallace) & Play(Psyche) & From(Psyche,Deborahwallace) & Play(Thevoid) & From(Thevoid,Deborahwallace))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1297,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NeedsLargeTerritory(x) -> TravelFar(x))",
      "all x.(EatsALot(x) -> NeedsLargeTerritory(x))",
      "all x.(BigAnimal(x) -> EatsALot(x))",
      "all x.(Bear(x) -> BigAnimal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1298,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NeedsLargeTerritory(x) -> TravelFar(x))",
      "all x.(EatsALot(x) -> NeedsLargeTerritory(x))",
      "all x.(BigAnimal(x) -> EatsALot(x))",
      "all x.(Bear(x) -> BigAnimal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1299,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(NeedsLargeTerritory(x) -> TravelFar(x))",
      "all x.(EatsALot(x) -> NeedsLargeTerritory(x))",
      "all x.(BigAnimal(x) -> EatsALot(x))",
      "all x.(Bear(x) -> BigAnimal(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1335,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Criminal(x) -> -Kind(x))",
      "all x.(BreakLaw(x) -> Criminal(x))",
      "all x.((Kind(x) & -Evil(x)) | (-Kind(x) & Evil(x)))",
      "all x.(Evil(x) -> Ugly(x))",
      "all x.(Evil(x) -> ColdBlood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1336,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Criminal(x) -> -Kind(x))",
      "all x.(BreakLaw(x) -> Criminal(x))",
      "all x.((Kind(x) & -Evil(x)) | (-Kind(x) & Evil(x)))",
      "all x.(Evil(x) -> Ugly(x))",
      "all x.(Evil(x) -> ColdBlood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 1337,
    "flag": "None goal or assumptions",
    "assumptions": [
      "all x.(Criminal(x) -> -Kind(x))",
      "all x.(BreakLaw(x) -> Criminal(x))",
      "all x.((Kind(x) & -Evil(x)) | (-Kind(x) & Evil(x)))",
      "all x.(Evil(x) -> Ugly(x))",
      "all x.(Evil(x) -> ColdBlood(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 402,
    "flag": "None goal or assumptions",
    "assumptions": [
      "IndiePop(Phoenix)",
      "(Band(Phoenix) & France(Phoenix))",
      "all x y.((((Band(x) & France(x) & Make(x,y)) -> FrenchSong(y)) & -EnglishSong(y)) | (-((Band(x) & France(x) & Make(x,y)) -> FrenchSong(y)) & EnglishSong(y)))",
      "all x.((IndiePop(x) -> -PopRock(x)) & -SynthPop(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  },
  {
    "id": 403,
    "flag": "None goal or assumptions",
    "assumptions": [
      "IndiePop(Phoenix)",
      "(Band(Phoenix) & France(Phoenix))",
      "all x y.((((Band(x) & France(x) & Make(x,y)) -> FrenchSong(y)) & -EnglishSong(y)) | (-((Band(x) & France(x) & Make(x,y)) -> FrenchSong(y)) & EnglishSong(y)))",
      "all x.((IndiePop(x) -> -PopRock(x)) & -SynthPop(x))",
      "[[ERROR]]"
    ],
    "goal": ""
  }
]