[
  {
    "id": 0,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Eli is jittery.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Perform(x) → (Attend(x) ∧ Engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\nPerform(x) ⊕ (Inactive(x) ∧ Disinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\nChaperone(x) → ¬Student(x) ::: If people chaperone high school dances, then they are not students who attend the school.\n(Inactive(x) ∧ Disinterested(x)) → Chaperone(x) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n(Young(x) ∨ Teenager(x)) ∧ Wish(x) → Student(x) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
      "First-Order-Logic Question": "Perform(bonnie) ::: Bonnie performs in school talent shows often."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 1,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Ronald is not scared.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Perform(x) → (Attend(x) ∧ Engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "Perform(x) ⊕ (Inactive(x) ∧ Disinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "Chaperone(x) → ¬Student(x) ::: If people chaperone high school dances, then they are not students who attend the school.",
        "(Inactive(x) ∧ Disinterested(x)) → Chaperone(x) ::: All people who are inactive and disinterested members of their community chaperone high school dances.",
        "Young(x) ∨ Teenager(x) → (Wish(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∨ Engaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."
      ],
      "First-Order-Logic Question": "(Young(bonnie) ∨ Teenager(bonnie)) ∧ Wish(bonnie) ∧ Chaperone(bonnie) ⊕ ¬(Young(bonnie) ∨ Teenager(bonnie) ∨ Wish(bonnie)) → (Student(bonnie) ∨ (Inactive(bonnie) ∧ Disinterested(bonnie))) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 2,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Patricia is scared.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Perform(x) → (Attend(x) ∧ Engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.",
        "Perform(x) ⊕ (Inactive(x) ∧ Disinterested(x)) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.",
        "Chaperone(x) → ¬Student(x) ::: If people chaperone high school dances, then they are not students who attend the school.",
        "(Inactive(x) ∧ Disinterested(x)) → Chaperone(x) ::: All people who are inactive and disinterested members of their community chaperone high school dances.",
        "Young(x) ∨ Teenager(x) → (Wish(x) → Student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.",
        "(Attend(bonnie) ∧ Engaged(bonnie) ∧ Student(bonnie)) ⊕ ¬(Attend(bonnie) ∧ Engaged(bonnie) ∨ Student(bonnie)) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."
      ],
      "First-Order-Logic Question": "(Chaperone(bonnie) ∨ Perform(bonnie)) → (Young(bonnie) ∨ Teenager(bonnie)) ∧ Wish(bonnie) ∧ (Inactive(bonnie) ∧ Disinterested(bonnie)) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 3,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Olive is not soft.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (ScheduleMeeting(x, y) → AppearInCompany(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (HaveLunchInCompany(x) → ScheduleMeeting(x, customer)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n∀x (HaveLunchAtHome(x) → WorkRemotelyFromHome(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (InOtherCountries(x) → WorkRemotelyFromHome(x)) ::: All employees who are in other countries work remotely from home.\n∀x (Manager(x) → ¬WorkRemotelyFromHome(x)) ::: No managers work remotely from home.\n(Manager(james) ∧ AppearInCompany(james)) ⊕ ¬(Manager(james) ∨ AppearInCompany(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
      "First-Order-Logic Question": "HaveLunchInCompany(james) ::: James has lunch in the company."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 4,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Eli is not southern.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Schedule(x, y) → Appear(x, company)) ::: All employees who schedule a meeting with their customers will appear in the company today.",
        "∀x (Lunch(x, company) → Schedule(x, y)) ::: Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (Lunch(x, company) ⊕ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.",
        "∀x (Lunch(x, home) → WorkRemotely(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.",
        "∀x (InCountry(x, country) → WorkRemotely(x)) ::: All employees who are in other countries work remotely from home.",
        "∀x (Manager(x) → ¬WorkRemotely(x)) ::: No managers work remotely from home.",
        "(Manager(james) ∧ Appear(james, company)) ⊕ ¬(Manager(james) ∨ Appear(james, company)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "First-Order-Logic Question": "¬HaveLunch(james, company) ::: James does not have lunch in the company."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 5,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Olive is jittery.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Schedule(x, y) ∧ Appear(x) → Appear(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.",
        "∀x (Lunch(x, company) → Schedule(x, y)) ::: Everyone who has lunch in the company schedules meetings with their customers.",
        "∀x (Lunch(x, company) ⊕ Lunch(x, home)) ::: Employees will either have lunch in the company or have lunch at home.",
        "∀x (Lunch(x, home) → WorkRemotely(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.",
        "∀x (InCountry(x) → WorkRemotely(x)) ::: All employees who are in other countries work remotely from home.",
        "∀x (Manager(x) → ¬WorkRemotely(x)) ::: No managers work remotely from home.",
        "(Manager(james) ∧ Appear(james)) ⊕ ¬(Manager(james) ∨ Appear(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today."
      ],
      "First-Order-Logic Question": "((Manager(james) ∨ InCountry(james)) → ((HaveLunch(james, home) ∧ WorkRemotely(james)) ⊕ ¬(HaveLunch(james, home) ∨ WorkRemotely(james))) ::: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 6,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Miles is civil.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (Virus(x) → ∃y (Animal(y) ∧ OccurIn(x, y))) ::: Monkeypox virus can occur in certain animals, including humans.\n∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\nSymptom(monkeypox, fever) ∧ Symptom(monkeypox, headache) ∧ Symptom(monkeypox, musclePains) ∧ Symptom(monkeypox, feelingTired) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Feel(x, tired) → ∃y (Get(x, y))) ::: People feel tired when they get a glu.",
      "First-Order-Logic Question": "∃x Animal(x) ::: There is an animal."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 7,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Patricia is not scared.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (Virus(x) → ∃y (Animal(y) ∧ OccurIn(x, y))) ::: Monkeypox virus can occur in certain animals, including humans.\n∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\nSymptoms(monkeypox, {fever, headache, muscle pains, feeling tired}) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Feel(x, tired) → Get(x, flu)) ::: People feel tired when they get a flu.",
      "First-Order-Logic Question": "¬∃x Get(x, flu) ::: No one gets flu."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 8,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Eli is civil.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, monkeypoxVirus) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∀x (Virus(x) → ∃y (Animal(y) ∧ OccurIn(x, y))) ::: Monkeypox virus can occur in certain animals, including humans.\n∀x (Human(x) → Mammal(x)) ::: Humans are mammals.\n∀x (Mammal(x) → Animal(x)) ::: Mammals are animals.\nSymptom(fever, monkeypox) ∧ Symptom(headache, monkeypox) ∧ Symptom(musclePains, monkeypox) ∧ Symptom(tired, monkeypox) ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (Get(x, glu) → Tired(x)) ::: People feel tired when they get a glu.",
      "First-Order-Logic Question": "¬Symptom(coughing, monkeypox) ::: Symptoms of Monkeypox include coughing."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 9,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Eli is not soft.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "¬Eastern(tom) ::: Tom is not an Eastern wild turkey.\n¬Osceola(tom) ::: Tom is not an Osceola wild turkey.\n¬(Gould(tom) ∨ Merriam(tom) ∨ RioGrande(tom)) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nWildTurkey(tom) ::: Tom is a wild turkey.",
      "First-Order-Logic Question": "Ocellated(tom) ::: Tom is an Ocellated wild turkey."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 10,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Ronald is not civil.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "WildTurkey(tom) ∧ ¬EasternWildTurkey(tom) ∧ ¬OsceolaWildTurkey(tom) ∧ (¬GouldsWildTurkey(tom) ∧ ¬MerriamsWildTurkey(tom) ∧ ¬RioGrandeWildTurkey(tom)) ::: Tom is a wild turkey.",
      "First-Order-Logic Question": "EasternWildTurkey(tom) ::: Tom is an Eastern wild turkey."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 11,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Broderick is civil.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "¬Eastern(tom) ∧ ¬Osceola(tom) ∧ (¬Gould(tom) ∨ ¬Merriam(tom) ∨ ¬RioGrande(tom)) ∧ WildTurkey(tom) ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
      "First-Order-Logic Question": "WildTurkey(joey) ::: Joey is a wild turkey."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 12,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Ronald is scared.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Create(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Game(x) ∧ Sell(x, moreThanOneMillionCopies) → Select(x, Top10Game(x))) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSell(legendOfZelda, moreThanOneMillionCopies) ::: The Legend of Zelda sold more than one million copies.",
      "First-Order-Logic Question": "Select(legendOfZelda, Top10Game(legendOfZelda)) ::: The Legend of Zelda is in the Top 10 list."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 13,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Eli is poised.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Create(japaneseGameCompany, LegendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Game(x) ∧ Sell(x, moreThanOneMillionCopies) → Select(x, Top10(x))) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSell(LegendOfZelda, moreThanOneMillionCopies) ::: The Legend of Zelda sold more than one million copies.\n∀x (Top10(x) → Japanese(Create(japaneseGameCompany, x))) ::: All games in the Top 10 list are made by Japanese game companies.",
      "First-Order-Logic Question": "Create(japaneseGameCompany, FIFA22) ::: FIFA 22 is made by a Japanese video game company."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 14,
    "context": [
      "Eli is not soft.",
      "Patricia is civil.",
      "Broderick is soft.",
      "Paul is civil.",
      "Miles is not southern.",
      "Paul is not scared.",
      "Ronald is jittery.",
      "Broderick is not scared.",
      "Broderick is not poised.",
      "Paul is not poised.",
      "Eli is not jittery.",
      "Eli is not poised.",
      "If someone is southern, then he is neither jittery nor soft.",
      "If someone is jittery or soft, then he is scared.",
      "Eli is scared if and only if Patricia is soft and Broderick is not civil.",
      "If there is someone who is southern, then Patricia is scared.",
      "If there is someone who is either not southern or not scared, then Patricia is poised.",
      "If there is at least one people who is either southern or not civil, then Paul is soft and Broderick is not poised.",
      "If someone is soft, then he is southern, and vice versa.",
      "It can be concluded that Broderick is scared once knowing that Miles is not soft.",
      "It can be concluded that Eli is not jittery once knowing that Olive is not civil and Broderick is poised.",
      "If someone is soft and poised, then he is both jittery and not southern, and vice versa.",
      "As long as someone is soft, he is poised and not scared.",
      "Someone who is not jittery is always both civil and not soft."
    ],
    "question": "Patricia is not civil.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Create(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\n∀x (Game(x) ∧ Top10(x) → Japanese(create(x, legendOfZelda))) ::: All games in the Top 10 list are made by Japanese game companies.\nSell(legendOfZelda, moreThanOneMillion) → Select(legendOfZelda, Top10) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nSell(legendOfZelda, moreThanOneMillion) ::: The Legend of Zelda sold more than one million copies.",
      "First-Order-Logic Question": "¬Top10(legendOfZelda) ::: The Legend of Zelda is not in the Top 10 list."
    },
    "predicates": [
      "Soft(x) ::: x is soft",
      "Civil(x) ::: x is civil",
      "Southern(x) ::: x is southern",
      "Scared(x) ::: x is scared",
      "Jittery(x) ::: x is jittery",
      "Poised(x) ::: x is poised"
    ]
  },
  {
    "id": 15,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Dan is talkative.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Square(x) → Side(x, 4)) ::: All squares have four sides.",
        "∀x (Side(x, 4) → Shape(x)) ::: All four-sided things are shapes."
      ],
      "First-Order-Logic Question": "Square(x) → Shape(x) ::: All squares are shapes."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 16,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Dan is angry.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nSkittish(x) → ¬Still(x) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.",
      "First-Order-Logic Question": "Turtle(rock) ::: Rock is a turtle."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 17,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Cary is not poised.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nSkittish(x) → ¬Still(x) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.",
      "First-Order-Logic Question": "¬Turtle(rock) ::: Rock is not a turtle."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 18,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Adler is not talkative.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) ↔ (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nSkittish(x) → ¬Still(x) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.",
      "First-Order-Logic Question": "Turtle(rock) ∨ Cute(rock) ::: Rock is a turtle or cute."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 19,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Lewis is not shiny.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\nExist(Turtle) ::: Some turtles exist.\n∀x (Animal(x) → (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nSkittish(x) → ¬Still(x) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(Rock) ::: Rock is still.",
      "First-Order-Logic Question": "NotBoth(Rock, Turtle, Squirrel) → (Cute(Rock) ∨ Skittish(Rock)) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 20,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Wiley is angry.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Rabbit(x) → Cute(x)) ::: All rabbits are cute.\n∃x Turtle(x) ::: Some turtles exist.\n∀x (Animal(x) ↔ (Rabbit(x) ∨ Squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nSkittish(x) → ¬Still(x) ::: If something is skittish, then it is not still.\n∀x (Squirrel(x) → Skittish(x)) ::: All squirrels are skittish.\nStill(rock) ::: Rock is still.",
      "First-Order-Logic Question": "(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock)) ::: If Rock is cute and still, then Rock is a turtle and skittish."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 21,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Rosa is not poised.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Popular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\nBingeWatch(karen, x) ↔ Download(karen, x) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(karen, blackMirror) ::: Karen does not download \"Black Mirror\".\nNetflixShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\nBingeWatch(karen, x) → Share(karen, lisa, x) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.",
      "First-Order-Logic Question": "Share(strangerThings, lisa) ::: Karen will share \"Stranger Things\" to Lisa."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 22,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Cary is talkative.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Popular(strangerThings) ::: 'Stranger Things' is a popular Netflix show.",
        "(Popular(x) → BingeWatch(karen, x)) ∧ (BingeWatch(karen, x) → Download(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it, and if and only if Karen binge-watches a Netflix show, she will download it.",
        "¬Download(karen, blackMirror) ::: Karen does not download 'Black Mirror'.",
        "Show(blackMirror) ::: 'Black Mirror' is a Netflix show.",
        "(BingeWatch(karen, x) → Share(karen, lisa, x)) ::: If Karen binge-watches a Netflix show, she will share it to Lisa."
      ],
      "First-Order-Logic Question": "Popular(blackMirror) ::: 'Black Mirror' is popular."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 23,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Dan is different.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Show(strangerThings) ∧ Popular(strangerThings) ::: \"Stranger Things\" is a popular Netflix show.\n∀x (Popular(x) → BingeWatch(karen, x)) ::: If a Netflix show is popular, Karen will binge-watch it.\nBingeWatch(karen, x) ↔ Download(karen, x) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬Download(blackMirror) ∧ Show(blackMirror) ::: Karen does not download \"Black Mirror\".\nShow(blackMirror) ::: \"Black Mirror\" is a Netflix show.\nBingeWatch(karen, x) → Share(karen, lisa, x) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.",
      "First-Order-Logic Question": "Share(blackMirror, lisa) ::: Karen will share \"Black Mirror\" to Lisa."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 24,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Adler is angry.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "CapitalOf(beijing, peoplesRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\nMostPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\nHosted(beijing, summerOlympics2008) ∧ Hosted(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympics) ∧ Hosted(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n∀x (University(x) ∧ Rank(x, asiaPacific, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
      "First-Order-Logic Question": "Hosted(beijing, summerOlympics2008) ∧ ∃x Hosted(beijing, winterOlympics) ::: Beijing has hosted both the 2008 Summer Olympics and a Winter Olympics."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 25,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Wiley is poised.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "CapitalOf(beijing, peoplesRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.\nMostPopulous(beijing) ::: Beijing is the world's most populous national capital city.\nLocatedIn(beijing, northernChina) ::: Beijing is located in Northern China.\nHosted(beijing, summerOlympics2008) ∧ Hosted(beijing, summerParalympics2008) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympics) ∧ Hosted(beijing, winterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n∀x (University(x) ∧ Rank(x, asiaPacific, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
      "First-Order-Logic Question": "¬LocatedIn(beijing, southernChina) ::: Beijing is located in southern China."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 26,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Dan is shiny.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "CapitalOf(beijing, PeoplesRepublicOfChina) ::: Beijing is the capital of the People's Republic of China.",
        "MostPopulous(beijing) ::: Beijing is the world's most populous national capital city.",
        "LocatedIn(beijing, NorthernChina) ::: Beijing is located in Northern China.",
        "Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympics) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
        "Hosted(beijing, SummerOlympics) ∧ Hosted(beijing, WinterOlympics) ∧ Hosted(beijing, SummerParalympics) ∧ Hosted(beijing, WinterParalympics) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics",
        "∀x (University(x) ∧ Rank(x, AsiaPacific, world)) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."
      ],
      "First-Order-Logic Question": "¬SecondLargest(beijing, China) ::: Beijing is the second largest Chinese city by urban population."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 27,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Lewis is talkative.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.\n¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.\n¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.",
      "First-Order-Logic Question": "Alien(marvin) ::: Marvin is an alien."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 28,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Wiley is not angry.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.",
        "∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.",
        "∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.",
        "∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.",
        "¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.",
        "¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial."
      ],
      "First-Order-Logic Question": "¬Human(marvin) ∧ ¬FromMars(marvin) ::: Marvin is neither a human nor from Mars."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 29,
    "context": [
      "Adler is angry.",
      "Wiley is short.",
      "Rosa is short.",
      "Rosa is not angry.",
      "Rosa is not poised.",
      "Wiley is not poised.",
      "Wiley is not angry.",
      "Rosa is shiny.",
      "Wiley is not different.",
      "Cary is short.",
      "Blaine is not different.",
      "Dan is poised.",
      "If there is at least one people who is different or poised, then Wiley is talkative.",
      "If everyone is talkative or not poised, then Rosa is not angry.",
      "If someone is short and not shiny, then he is not angry, and vice versa.",
      "If someone is different and short, then he is not talkative, and vice versa.",
      "If Dan is shiny or Adler is different, then Wiley is short.",
      "It can be concluded that Adler is angry and Blaine is not different once knowing that Rosa is not short.",
      "Wiley being talkative or Adler being short implies that Wiley is different.",
      "If there is at least one people who is angry, then Dan is not talkative.",
      "Dan being poised is equivalent to Rosa being not shiny.",
      "If Blaine is poised and Blaine is not angry, then Rosa is different and Rosa is shiny.",
      "If there is someone who is not short, then Adler is talkative.",
      "If someone is short or not shiny, then he is not angry."
    ],
    "question": "Cary is not angry.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Alien(x) → Extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (FromMars(x) → Alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (Extraterrestrial(x) → ¬Human(x)) ::: No extraterrestrial is human.\n∀x (FromEarth(x) → Human(x)) ::: Everyone from Earth is a human.\n¬(FromEarth(marvin) ∧ FromMars(marvin)) ::: Marvin cannot be from Earth and from Mars.\n¬FromEarth(marvin) → Extraterrestrial(marvin) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.",
      "First-Order-Logic Question": "¬FromMars(marvin) → Human(marvin) ::: If Marvin is not from Mars, then Marvin is a human."
    },
    "predicates": [
      "Angry(x) ::: x is angry",
      "Short(x) ::: x is short",
      "Poised(x) ::: x is poised",
      "Shiny(x) ::: x is shiny",
      "Different(x) ::: x is different",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 30,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Lyndon is not alert.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "GrandSlamChampion(x) ⊕ OscarNominee(x) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominee(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\n(Celebrity(x) → WellPaid(x)) ::: If a person is a celebrity then they are well paid.\n(Athlete(x) → Famous(x)) ::: If a person is an athlete then they are famous.\n∀x (WellPaid(x) → TaxHaven(x)) ::: All well-paid people live in tax havens.\n(Famous(djokovic) ∧ Athlete(djokovic)) → LivesIn(djokovic, wellPaid) ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
      "First-Order-Logic Question": "GrandSlamChampion(djokovic) ::: Djokovic is a Grand Slam champion."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 31,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Tristan is loving.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "GrandSlamChampion(x) ⊕ OscarNominee(x) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominee(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\nCelebrity(x) → WellPaid(x) ::: If a person is a celebrity then they are well paid.\nAthlete(x) → Famous(x) ::: If a person is an athlete then they are famous.\nWellPaid(x) → LiveIn(x, TaxHaven) ::: All well-paid people live in tax havens.\n(Famous(djokovic) ∧ Athlete(djokovic)) → LiveIn(djokovic, TaxHaven) ::: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.",
      "First-Order-Logic Question": "LiveIn(djokovic, TaxHaven) ::: Djokovic lives in a tax haven."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 32,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Jack is not loving.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "GrandSlamChampion(x) ⊕ OscarNominee(x) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (OscarNominee(x) → Celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ::: All professional tennis players are athletes.\nCelebrity(x) → WellPaid(x) ::: If a person is a celebrity then they are well paid.\nAthlete(x) → Famous(x) ::: If a person is an athlete then they are famous.\nWellPaid(x) → (LiveIn(x, taxHaven)) ::: All well-paid people live in tax havens.\n(Famous(djokovic) ∧ Athlete(djokovic)) → LiveIn(djokovic, wellPaid) ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
      "First-Order-Logic Question": "¬LiveIn(djokovic, taxHaven) ::: Djokovic does not live in a tax haven."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 33,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Tristan is alert.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Stable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLead(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nInclude(diamondMine, creedBrothers) ∧ Include(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.",
      "First-Order-Logic Question": "Lead(roderickStrong, stable) ::: Roderick strong leads a professional wrestling stable."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 34,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Jack is attractive.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Stable(diamondMine) ∧ FormedIn(diamondMine, wwe) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLead(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nInclude(diamondMine, creedBrothers) ∧ Include(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.",
      "First-Order-Logic Question": "Lead(roderickStrong, creedBrothers) ::: Roderick Strong leads the Creed Brothers."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 35,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Luther is giant.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Stable(diamondMine) ∧ FormedIn(diamondMine, WWE) ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nLead(roderickStrong, diamondMine) ::: Roderick Strong leads Diamond Mine.\nInclude(diamondMine, creedBrothers) ∧ Include(diamondMine, ivyNile) ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFeud(imperium, diamondMine) ::: Imperium has a feud with Diamond Mine.",
      "First-Order-Logic Question": "¬∃x (Stable(x) ∧ Include(x, ivyNile) ∧ Feud(imperium, x)) ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 36,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Juliana is alert.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MusicPiece(symphonyno9) ::: Symphony No. 9 is a music piece.",
        "∀x (Composer(x) → Write(x, musicPiece)) ::: Composers write music pieces.",
        "Write(beethoven, symphonyno9) ::: Beethoven wrote Symphony No. 9.",
        "Premiere(symphonyno9, viennamusicsociety) ∧ Orchestra(viennamusicsociety) ::: Vienna Music Society premiered Symphony No. 9 and Vienna Music Society is an orchestra.",
        "Lead(beethoven, viennamusicsociety) ∧ Orchestra(viennamusicsociety) ∧ Conductor(beethoven) ::: Beethoven leads the Vienna Music Society and orchestras are led by conductors."
      ],
      "First-Order-Logic Question": "Composer(beethoven) ::: Beethoven is a composer."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 37,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Lyndon is alert.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MusicPiece(symphonyno9) ::: Symphony No. 9 is a music piece.",
        "∀x (Composer(x) → ∃y (MusicPiece(y) ∧ Write(x, y))) ::: Composers write music pieces.",
        "Author(beethoven, symphonyno9) ::: Beethoven wrote Symphony No. 9.",
        "Orchestra(viennaMusicSociety) ∧ Premiere(viennaMusicSociety, symphonyno9) ::: Vienna Music Society premiered Symphony No. 9.",
        "Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.",
        "Lead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.",
        "∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors."
      ],
      "First-Order-Logic Question": "∃x ∃y (Orchestra(x) ∧ Premiered(x, y)) ::: Some orchestras premiered music pieces."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 38,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Burgess is not gleaming.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\n∀x (Composer(x) → ∃y (MusicPiece(y) ∧ Write(x, y))) ::: Composers write music pieces.\nWrite(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\nPremiere(symphonyNo9, viennaMusicSociety) ∧ Orchestra(viennaMusicSociety) ::: Vienna Music Society premiered Symphony No. 9.\nLead(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\n∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x))) ::: Orchestras are led by conductors.",
      "First-Order-Logic Question": "¬Conductor(beethoven) ::: Beethoven is not a conductor."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 39,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Juliana is loving.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (DesignStyle(zahaHadid, x) → Timeless(zahaHadid)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (¬Timeless(x) → ¬MassProductDesign(x)) ::: No mass product design is timeless.\nDesignStyle(zahaHadid, x) ∨ DesignStyle(kellyWearstler, x) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(kellyWearstler, x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(kellyWearstler, x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\nTimeless(max) → (MassProductDesign(max) ∧ Evocative(max)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
      "First-Order-Logic Question": "MassProductDesign(max) ::: A design by Max is a mass product design."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 40,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Luther is not alert.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (DesignStyle(x, zahaHadid) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.",
        "∀x (MassProductDesign(x) → ¬Timeless(x)) ::: No mass product design is timeless.",
        "DesignStyle(zahaHadid, y) ⊕ DesignStyle(kellyWearstler, y) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.",
        "∀x (DesignStyle(x, kellyWearstler) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.",
        "∀x (DesignStyle(x, kellyWearstler) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.",
        "Timeless(designBy(max)) → (MassProductDesign(designBy(max)) ∧ Evocative(designBy(max))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative."
      ],
      "First-Order-Logic Question": "Evocative(designBy(max)) ∧ Dreamy(designBy(max)) ::: A design by Max is evocative and dreamy."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 41,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Burgess is alert.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (DesignStyle(zahaHadid, x) → Timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (¬Timeless(x) → ¬MassProductDesign(x)) ::: No mass product design is timeless.\nDesignStyle(zahaHadid, x) ∨ DesignStyle(kellyWearstler, x) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (DesignStyle(kellyWearstler, x) → Evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (DesignStyle(kellyWearstler, x) → Dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\nTimeless(max) → (MassProductDesign(max) ∧ Evocative(max)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
      "First-Order-Logic Question": "Evocative(max) ∨ Dreamy(max) ::: A design by Max is either evocative or dreamy."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 42,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Luther is technical.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.\n(Female(x) ∧ AtTournament(x, rolandGarros2022)) ∨ (Male(x) ∧ AtTournament(x, rolandGarros2022)) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n∀x (Male(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n(RankedHighly(cocoGauff) ∨ LostTo(cocoGauff, rafaelNadal)) → ¬(Male(cocoGauff) ∧ AtTournament(cocoGauff, rolandGarros2022)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
      "First-Order-Logic Question": "Active(cocoGauff) ::: Coco Gauff is among the most active players in major tennis."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 43,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Juliana is not loving.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.",
        "∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.",
        "∀x (Female(x) ∧ TennisPlayer(x) ∧ At(x, RolandGarros2022) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.",
        "(Female(x) ∧ TennisPlayer(x) ∧ At(x, RolandGarros2022)) ∨ (Male(x) ∧ TennisPlayer(x) ∧ At(x, RolandGarros2022)) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.",
        "∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, RolandGarros2022) → LostToRafaelNadal(x)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.",
        "(RankedHighly(cocoGauff) ∨ LostToRafaelNadal(cocoGauff)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ At(cocoGauff, RolandGarros2022)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."
      ],
      "First-Order-Logic Question": "LostTo(cocoGauff, RafaelNadal) ::: Coco Gauff has lost to Rafael Nadal."
    },
    "predicates": [
      "Giant(x) ::: x is giant",
      "Technical(x) ::: x is technical",
      "Gleaming(x) ::: x is gleaming",
      "Alert(x) ::: x is alert",
      "Attractive(x) ::: x is attractive",
      "Loving(x) ::: x is loving"
    ]
  },
  {
    "id": 44,
    "context": [
      "Juliana is giant.",
      "Burgess is not technical.",
      "Blaine is not gleaming.",
      "Tristan is not gleaming.",
      "Luther is not alert.",
      "Lyndon is not technical.",
      "Lyndon is not attractive.",
      "Blaine is giant.",
      "Tristan is not giant.",
      "Luther is not giant.",
      "Blaine is technical.",
      "Tristan is not technical.",
      "If someone is not attractive, then he is both technical and gleaming.",
      "If someone is both technical and not loving, then he is giant.",
      "Someone is not attractive if and only if he is alert.",
      "If someone is alert or he is not loving, then he is not giant.",
      "Someone being alert is equivalent to being not attractive.",
      "If there is someone who is either alert or not loving, then Blaine is giant.",
      "Someone being not gleaming is equivalent to being alert.",
      "Someone who is both alert and technical is always giant.",
      "If someone is he or not technical is not attractive, then he is gleaming.",
      "If someone is attractive and not gleaming, then he is alert, and vice versa.",
      "If there is at least one people who is alert or not loving, then Luther is not technical.",
      "If there is at least one people who is alert, then Lyndon is technical and Juliana is not loving."
    ],
    "question": "Burgess is gleaming.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (RankedHighly(x) → Active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (LostTo(x, igaSwiatek) → RankedHighly(x)) ::: Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.\n∀x (Female(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, igaSwiatek)) ::: All female tennis players at Roland Garros 2022 lost to Iga Swiatek.\n(Female(x) ∧ AtTournament(x, rolandGarros2022)) ∨ (Male(x) ∧ AtTournament(x, rolandGarros2022)) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n∀x (Male(x) ∧ AtTournament(x, rolandGarros2022) → LostTo(x, rafaelNadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n(RankedHighly(cocoGauff) ∨ LostTo(cocoGauff, rafaelNadal)) → ¬(Male(cocoGauff) ∧ AtTournament(cocoGauff, rolandGarros2022)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
      "First-Order-Logic Question": "¬(LostTo(cocoGauff, igaSwiatek) ∨ Active(cocoGauff)) ::: Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 45,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Owen is sparkling.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cat(x) → Mammal(x)) ::: All cats are mammals.",
        "∃x (Pet(x) ∧ ¬Mammal(x)) ::: Some pets are not mammals."
      ],
      "First-Order-Logic Question": "∀x (Pet(x) → ¬Cat(x)) ::: No pets are cats."
    },
    "predicates": [
      "Faithful(x) ::: x is faithful",
      "Fearless(x) ::: x is fearless",
      "Reasonable(x) ::: x is reasonable",
      "Average(x) ::: x is average",
      "Sparkling(x) ::: x is sparkling",
      "Bewildered(x) ::: x is bewildered"
    ]
  },
  {
    "id": 46,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Lewis is not reasonable.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x (Student(x) ∧ WantLongVacation(x) → Love(x, summer)) ::: All students who want to have a long vacation love summer the most.\nFavoriteSeason(emma, summer) ::: Emma's favorite season is summer.\nFavoriteSeason(mia, y) ∧ NotSame(y, summer) ∧ NotSame(y, mia) ::: Mia's favorite season is not the same as Emma's.\nWantLongVacation(james) ::: James wants to have a long vacation.",
      "First-Order-Logic Question": "FavoriteSeason(james, summer) ::: James's favorite season is summer."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 47,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Tyra is faithful.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x (Student(x) ∧ WantLongVacation(x) → Love(x, summer)) ::: All students who want to have a long vacation love summer the most.\nFavoriteSeason(emma, summer) ::: Emma's favorite season is summer.\nFavoriteSeason(mia, y) ∧ NotSame(y, summer) ∧ NotSame(y, mia) ::: Mia's favorite season is not the same as Emma's.\nWantLongVacation(james) ::: James wants to have a long vacation.",
      "First-Order-Logic Question": "FavoriteSeason(james, fall) ::: James's favorite season is fall."
    },
    "predicates": [
      "Faithful(x) ::: x is faithful",
      "Fearless(x) ::: x is fearless",
      "Reasonable(x) ::: x is reasonable",
      "Average(x) ::: x is average",
      "Sparkling(x) ::: x is sparkling",
      "Bewildered(x) ::: x is bewildered"
    ]
  },
  {
    "id": 48,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Tyra is not average.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x (Student(x) ∧ WantLongVacation(x) → Love(x, summer)) ::: All students who want to have a long vacation love summer the most.\nFavoriteSeason(emma, summer) ::: Emma's favorite season is summer.\nFavoriteSeason(mia, y) ∧ ¬(y = summer) ::: Mia's favorite season is not the same as Emma's.\nWantLongVacation(james) ::: James wants to have a long vacation.",
      "First-Order-Logic Question": "FavoriteSeason(mia, spring) ::: Mia's favorite season is spring."
    },
    "predicates": [
      "Faithful(x) ::: x is faithful",
      "Fearless(x) ::: x is fearless",
      "Reasonable(x) ::: x is reasonable",
      "Average(x) ::: x is average",
      "Sparkling(x) ::: x is sparkling",
      "Bewildered(x) ::: x is bewildered"
    ]
  },
  {
    "id": 49,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Tyra is sparkling.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (DigitalMedia(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → DigitalMedia(x)) ::: All streaming services are digital.\nHardcoverBook(x) → PrintedText(x) ::: If an object is a hardcover book then it is printed text.\nStreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.",
      "First-Order-Logic Question": "PrintedText(1984) ::: 1984 is printed text."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 50,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Nigel is fearless.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\nHardcoverBook(x) → PrintedText(x) ::: If an object is a hardcover book then it is printed text.\nStreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.",
      "First-Order-Logic Question": "StreamingService(1984) ::: 1984 is a streaming service."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 51,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Nigel is not reasonable.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Digital(x) → ¬Analog(x)) ::: No digital media are analog.\n∀x (PrintedText(x) → Analog(x)) ::: Every printed text is analog.\n∀x (StreamingService(x) → Digital(x)) ::: All streaming services are digital.\nHardcoverBook(x) → PrintedText(x) ::: If an object is a hardcover book then it is printed text.\nStreamingService(1984) → HardcoverBook(1984) ::: If 1984 is a streaming service, then 1984 is a hardcover book.",
      "First-Order-Logic Question": "¬StreamingService(1984) ::: 1984 is not a streaming service."
    },
    "predicates": [
      "Faithful(x) ::: x is faithful",
      "Fearless(x) ::: x is fearless",
      "Reasonable(x) ::: x is reasonable",
      "Average(x) ::: x is average",
      "Sparkling(x) ::: x is sparkling",
      "Bewildered(x) ::: x is bewildered"
    ]
  },
  {
    "id": 52,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Wade is faithful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Romance(x) → IndoEuropean(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romance) ::: The Romance languages are a language family.\n∀x∀y (LanguageFamily(x) ∧ LanguageFamily(y) → Related(x, y)) ::: All languages within a language family are related to each other.\nRomance(french) ∧ Romance(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n¬∃x Related(basque, x) ::: Basque is not related to any other language.",
      "First-Order-Logic Question": "Romance(basque) ::: Basque is a Romance language."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 53,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Cara is not faithful.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Romance(x) → IndoEuropean(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romance) ::: The Romance languages are a language family.\n∀x∀y (LanguageFamily(x) ∧ LanguageFamily(y) → Related(x, y)) ::: All languages within a language family are related to each other.\nRomance(french) ∧ Romance(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n¬∃x Related(basque, x) ::: Basque is not related to any other language.",
      "First-Order-Logic Question": "Romance(german) ::: German is a Romance language."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 54,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Wade is not faithful.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Romance(x) → IndoEuropean(x)) ::: All Romance languages are Indo-European languages.\nLanguageFamily(romance) ::: The Romance languages are a language family.\n∀x∀y (LanguageFamily(x) ∧ LanguageFamily(y) → Related(x, y)) ::: All languages within a language family are related to each other.\nRomance(french) ∧ Romance(spanish) ::: French and Spanish are both Romance languages.\nRelated(german, spanish) ::: German is related to Spanish.\n¬∃x∃y (Related(x, y)) ::: Basque is not related to any other language.",
      "First-Order-Logic Question": "IndoEuropean(french) ::: French is an Indo-European language."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 55,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Cara is not average.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Striker(robertLewandowski) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\n¬PlayFor(robertLewandowski, bayernMunchen) → ¬PlayFor(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x∀y ((PlayFor(x, y) ∧ ¬PlayFor(x, y)) → ¬PlayFor(x, y)) ::: If a player left a team they no longer play for that team.",
      "First-Order-Logic Question": "SoccerPlayer(robertLewandowski) ::: Robert Lewandowski is a soccer player."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 56,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Wade is not average.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Striker(robertLewandowski) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeft(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x∀y (Left(x, y) → ¬PlayFor(x, y)) ::: If a player left a team they no longer play for that team.",
      "First-Order-Logic Question": "¬PlayFor(robertLewandowski, bayernMunchen) ::: Robert Lewandowski plays for Bayern Munchen."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 57,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Lewis is fearless.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Striker(robertLewandowski) ::: Robert Lewandowski is a striker.\n∀x (Striker(x) → SoccerPlayer(x)) ::: Strikers are soccer players.\nLeftTeam(robertLewandowski, bayernMunchen) ::: Robert Lewandowski left Bayern Munchen.\n∀x∀y (LeftTeam(x, y) → ¬PlayFor(x, y)) ::: If a player left a team they no longer play for that team.",
      "First-Order-Logic Question": "¬Star(robertLewandowski) ::: Robert Lewandowski is not a star."
    },
    "predicates": [
      "Faithful(x) ::: x is faithful",
      "Fearless(x) ::: x is fearless",
      "Reasonable(x) ::: x is reasonable",
      "Average(x) ::: x is average",
      "Sparkling(x) ::: x is sparkling",
      "Bewildered(x) ::: x is bewildered"
    ]
  },
  {
    "id": 58,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Nigel is not bewildered.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "City(billings) ∧ In(billings, montana) ::: Billings is a city in Montana.",
        "∀x (City(x) ∧ Include(montana, x) → (x = butte ∨ x = helena ∨ x = missoula)) ::: Montana includes the cities of Butte, Helena, and Missoula.",
        "(City(whiteSulphurSprings) ∧ City(butte)) ∧ In(whiteSulphurSprings, state) ∧ In(butte, state) ::: White Sulphur Springs and Butte are cities in the same state.",
        "¬In(pierre, montana) ::: The city of Pierre is not in Montana.",
        "∀x (City(x) ∧ In(x, butte) → ¬In(x, pierre)) ::: Any city in Butte is not in Pierre."
      ],
      "First-Order-Logic Question": "In(butte, state) ∧ In(pierre, state) ::: Butte and Pierre are in the same state."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 59,
    "context": [
      "Wade is not faithful.",
      "Wade is not fearless.",
      "Lewis is reasonable.",
      "Molly is not average.",
      "Nigel is fearless.",
      "Lewis is sparkling.",
      "Owen is bewildered.",
      "Molly is not bewildered.",
      "Cara is fearless.",
      "Molly is not faithful.",
      "Owen is reasonable.",
      "Lewis is not average.",
      "Someone being both fearless and reasonable is equivalent to being not sparkling.",
      "Tyra is not fearless and Cara is bewildered if and only if Tyra is not sparkling and Lewis is reasonable.",
      "If all people are fearless, then Tyra is reasonable.",
      "If there is someone who is either fearless or faithful, then Tyra is not bewildered and Nigel is reasonable.",
      "If someone is not sparkling, then he is both average and faithful.",
      "If there is someone who is either not sparkling or not fearless, then Molly is bewildered.",
      "Someone is not faithful if and only if he is not average.",
      "Someone being both bewildered and not faithful is equivalent to being reasonable.",
      "Someone is not sparkling if and only if he is bewildered.",
      "If there is someone who is not reasonable, then Cara is fearless and Nigel is not average.",
      "If there is at least one people who is both faithful and not reasonable, then Owen is bewildered.",
      "If someone is faithful and reasonable, then he is average, and vice versa."
    ],
    "question": "Wade is not fearless.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "City(billings) ∧ In(billings, montana) ::: Billings is a city in Montana.",
        "In(montana, butte) ∧ In(montana, helena) ∧ In(montana, missoula) ::: Montana includes the cities of Butte, Helena, and Missoula.",
        "In(whiteSulphurSprings, state) ∧ In(butte, state) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.",
        "¬In(pierre, montana) ::: The city of Pierre is not in Montana.",
        "∀x (In(x, butte) → ¬In(x, pierre)) ::: Any city in Butte is not in Pierre."
      ],
      "First-Order-Logic Question": "SameState(pierre, bismarck) ::: Pierre and Bismarck are in the same state."
    },
    "predicates": [
      "Faithful(x) ::: x is faithful",
      "Fearless(x) ::: x is fearless",
      "Reasonable(x) ::: x is reasonable",
      "Average(x) ::: x is average",
      "Sparkling(x) ::: x is sparkling",
      "Bewildered(x) ::: x is bewildered"
    ]
  },
  {
    "id": 60,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Wiley is not alert.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "City(billings) ∧ In(billings, montana) ::: Billings is a city in Montana.",
        "City(butte) ∧ In(butte, montana) ::: Montana includes the cities of Butte, Helena, and Missoula.",
        "City(whiteSulphurSprings) ∧ City(butte) ∧ SameState(whiteSulphurSprings, butte) ::: White Sulphur Springs and Butte are cities in the same state.",
        "City(pierre) ∧ ¬In(pierre, montana) ::: The city of Pierre is not in Montana.",
        "∀x (City(x) ∧ In(x, butte) → ¬In(x, pierre)) ::: Any city in Butte is not in Pierre."
      ],
      "First-Order-Logic Question": "HomeTo(montana, missoula) ::: Montana is home to the city of Missoula."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 61,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Aaron is bad.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (InternationalStudent(x) ∧ InUS(x) → (F1Visa(x) ∨ J1Visa(x))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x ((InternationalStudent(x) ∧ InUS(x) ∧ F1Visa(x)) → (ApplyFor(x, CPT) ∨ ApplyFor(x, OPT))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nInternationalStudent(mike) ::: Mike is an international student.\nWorkInUS(mike) ∧ ApplyFor(mike, CPT) ::: Mike needs to apply for CPT if he wants to work in the US.",
      "First-Order-Logic Question": "HasVisa(mike, F1) ::: Mike has an F1 visa."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 62,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Aaron is not average.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (InternationalStudent(x) → (F1Visa(x) ∨ J1Visa(x))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x ((InternationalStudent(x) ∧ HasVisa(x, F1)) → (ApplyFor(x, CPT) ∨ ApplyFor(x, OPT))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nInternationalStudent(mike) ::: Mike is an international student.\nWorkIn(mike, US) ∧ ApplyFor(mike, CPT) ::: Mike needs to apply for CPT if he wants to work in the US.",
      "First-Order-Logic Question": "J1Visa(mike) ::: Mike has a J1 visa."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 63,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Wiley is cultural.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.",
        "∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.",
        "∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.",
        "∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.",
        "Alligator(ted) ::: Ted is an alligator."
      ],
      "First-Order-Logic Question": "Pet(ted) ::: Ted is a pet."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 64,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Wiley is not cultural.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.",
        "∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.",
        "∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.",
        "∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.",
        "Alligator(ted) ::: Ted is an alligator."
      ],
      "First-Order-Logic Question": "Pet(ted) ∧ Cow(ted) ::: Ted is a pet and a cow."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 65,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Aaron is alert.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Cow(x) → Bovine(x)) ::: All cows are bovines.",
        "∃x (Pet(x) ∧ Cow(x)) ::: Some pets are cows.",
        "∀x (Bovine(x) → Domesticated(x)) ::: If something is a bovine, then it is domesticated.",
        "∀x (Domesticated(x) → ¬Alligator(x)) ::: No domesticated animals are alligators.",
        "Alligator(ted) ::: Ted is an alligator."
      ],
      "First-Order-Logic Question": "Cow(ted) → ¬Pet(ted) ::: If Ted is a cow, then Ted is not a pet."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 66,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Wiley is average.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "University(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\nMove(yale, newHaven) ∧ Value(endowmentYale, 42.3billion) ::: Yale University moved to New Haven in 1716 and Yale university's endowment was valued at $42.3 billion.\nOrganize(yale, {residentialColleges, graduateSchoolOfArtsAndSciences, twelveProfessionalSchools}) ∧ List(residentialColleges, {benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull}) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "First-Order-Logic Question": "University(x) ∧ Private(x) ∧ IvyLeague(x) ∧ ResearchUniversity(x) ∧ Move(x, newHaven) ::: A private Ivy League research university moved to New Haven."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 67,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Adler is average.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "University(yale) ∧ Private(yale) ∧ IvyLeague(yale) ∧ ResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\nMove(yale, newHaven1716) ::: Yale University moved to New Haven in 1716.\nEndowment(yale, 42.3billion) ::: Yale university's endowment was valued at $42.3 billion.\nOrganize(yale, list(residentialColleges)) ∧ College(benjaminFranklin) ∧ College(berkeley) ∧ College(branford) ∧ College(davenport) ∧ College(ezraStiles) ∧ College(graceHopper) ∧ College(jonathanEdwards) ∧ College(morse) ∧ College(pauliMurray) ∧ College(pierson) ∧ College(saybrook) ∧ College(silliman) ∧ College(timothyDwight) ∧ College(trumbull) ∧ School(graduateSchoolOfArtsAndSciences) ∧ School(professionalSchools) ∧ School(yaleGraduateSchoolOfArtsAndSciences) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nList(residentialColleges, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull]) ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
      "First-Order-Logic Question": "Largest(Endowment(yale), educationalInstitutions) ::: Yale University has the largest university endowment of any educational institution."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 68,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Adler is cultural.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "PrivateUniversity(yale) ∧ IvyLeagueUniversity(yale) ∧ ResearchUniversity(yale) ::: Yale University is a private Ivy League research university.\nMove(yale, newHaven1716) ::: Yale University moved to New Haven in 1716.\nEndowment(yale, 42.3billion) ::: Yale university's endowment was valued at $42.3 billion.\nOrganize(yale, [residentialColleges, graduateSchoolOfArtsAndSciences, professionalSchools]) ∧ List(residentialColleges, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull]) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.",
      "First-Order-Logic Question": "ResidentialCollege(pierson) ::: Pierson College is a residential college at Yale."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 69,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Luther is not long.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "British(badults) ∧ SitcomSeries(badults) ∧ Starring(badults, pappys) ::: Badults is a British Sitcom series, starring members of Pappy's.\nPiloted(badults, july2013) ::: Badults piloted in July 2013 on BBC Three.\nWorkingTitle(badults, theSecretDudeSociety) ::: The Working title 'The Secret Dude Society' was used for Badults.\nScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults.",
      "First-Order-Logic Question": "ScriptEditor(andrewCollins, seriesWithWorkingTitleTheSecretDudeSociety) ::: Andrew Collins was the script editor for a series with the working title 'The Secret Dude Society'."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 70,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Luther is not sore.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "British(badults) ∧ SitcomSeries(badults) ∧ Starring(badults, pappys) ::: Badults is a British Sitcom series, starring members of Pappy's.\nPiloted(badults, year2013) ∧ Channel(badults, BBCThree) ::: Badults piloted in July 2013 on BBC Three.\nWorkingTitle(badults, theSecretDudeSociety) ::: The Working title 'The Secret Dude Society' was used for Badults.\nScriptEditor(andrewCollins, badults) ::: Andrew Collins was the script editor for Badults.",
      "First-Order-Logic Question": "¬∃x (Member(pappys, x) ∧ (∃y (Show(y) ∧ Piloted(y, BBCTwo)) ∨ (∃z (Show(z) ∧ Piloted(z, BBCThree)))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 71,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Luther is not average.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (Stock(x) ∧ Company(y) ∧ GrowthStock(x) ∧ CompanyStock(x, y)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (MatureCompany(x) → SuitableForRetirementFund(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nKO(ko) ∧ Stock(ko) ∧ MatureCompany(ko) ::: KO is a stock of a mature company.",
      "First-Order-Logic Question": "CompanyStock(ko) ::: KO is a company stock."
    },
    "predicates": [
      "Long(x) ::: x is long",
      "Cultural(x) ::: x is cultural",
      "Bad(x) ::: x is bad",
      "Sore(x) ::: x is sore",
      "Alert(x) ::: x is alert",
      "Average(x) ::: x is average"
    ]
  },
  {
    "id": 72,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Quincy is sore.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirement(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (Stock(x) ∧ Company(y) ∧ GrowthStock(x) ∧ CompanyStock(x, y)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (MatureCompany(x) → SuitableForRetirement(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nStock(ko) ∧ MatureCompany(companyKO) ∧ CompanyStock(ko, companyKO) ::: KO is a stock of a mature company.",
      "First-Order-Logic Question": "Stock(ko) ∧ CompanyStock(ko, companyKO) ∧ GrowthStock(ko) ∧ Company(companyKO) ::: KO is a company stock and a growth stock of a company."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 73,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Quincy is long.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (GrowthStock(x) → Volatile(x)) ::: All growth stocks of companies are volatile.\n∀x (Volatile(x) → ¬SuitableForRetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x ∃y (StockOfCompany(x, y) ∧ GrowthStock(x)) ::: Some stocks of some companies are growth stocks of companies.\n∀x (MatureCompany(x) → SuitableForRetirementFund(x)) ::: All stocks of mature companies are suitable for a retirement fund.\nKO(ko) ∧ StockOfCompany(ko, matureCompany) ::: KO is a stock of a mature company.",
      "First-Order-Logic Question": "(GrowthStock(ko) ∨ Volatile(ko)) → ¬(StockOfCompany(ko, company) ∨ Volatile(ko)) ::: If KO is a growth stock of a company or if its price is volatile, then KO is neither a stock of a company nor is its price volatile."
    },
    "predicates": [
      "Long(x) ::: x is long",
      "Cultural(x) ::: x is cultural",
      "Bad(x) ::: x is bad",
      "Sore(x) ::: x is sore",
      "Alert(x) ::: x is alert",
      "Average(x) ::: x is average"
    ]
  },
  {
    "id": 74,
    "context": [
      "Ronald is long.",
      "Ronald is not cultural.",
      "Adler is not bad.",
      "Adler is not sore.",
      "Quincy is not sore.",
      "Aaron is alert.",
      "Luther is sore.",
      "Adler is not alert.",
      "Luther is average.",
      "Wiley is not bad.",
      "Ronald is not sore.",
      "Christina is not cultural.",
      "If there is at least one people who is neither long nor bad, then Wiley is alert.",
      "Someone is alert and not long if and only if he is cultural and not sore.",
      "Someone being both cultural and not alert is equivalent to being average and bad.",
      "Someone who is bad is always both sore and not alert.",
      "If someone who is not long is also not alert, then he is sore.",
      "If all people are not sore, then Wiley is average.",
      "If someone is not cultural or not alert, then he is average.",
      "If there is someone who is both long and not cultural, then Aaron is bad.",
      "It can be concluded that Wiley is bad once knowing that Quincy is not sore or Quincy is not long.",
      "If Christina is long and Christina is not alert, then Luther is average.",
      "Someone is cultural and not average if and only if he is long and not sore.",
      "If there is at least one people who is not long, then Ronald is cultural."
    ],
    "question": "Adler is alert.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Plate(x) → BeginWith(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x (Plate(x) ∧ ¬BeginWith(x, 34) → ¬FromCity(x, Istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\nInCity(joePlate, Istanbul) ::: Joe's vehicle registration plate is from Istanbul.\nBeginWith(tomPlate, 35) ::: Tom's license plate begins with the number 35.\nBG(BeginWith(35), ¬BeginWith(34)) ::: If a license plate begins with the number 35, then it does not begin with the number 34.",
      "First-Order-Logic Question": "BeginWith(joePlate, 34) ::: Joe's license plate begins with the number 34."
    },
    "predicates": [
      "Long(x) ::: x is long",
      "Cultural(x) ::: x is cultural",
      "Bad(x) ::: x is bad",
      "Sore(x) ::: x is sore",
      "Alert(x) ::: x is alert",
      "Average(x) ::: x is average"
    ]
  },
  {
    "id": 75,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Roderick is not fair.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Plate(x) → BeginWith(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x (Plate(x) ∧ ¬BeginWith(x, 34) → ¬FromCity(x, Istanbul)) ::: Plates that do not begin with the number 34 are not from Istanbul.\nFromCity(joe, Istanbul) ::: Joe's vehicle registration plate is from Istanbul.\nBeginWith(tomPlate, 35) ::: Tom's license plate begins with the number 35.\n(BeginWith(tomPlate, 35) → ¬BeginWith(tomPlate, 34)) ::: If a license plate begins with the number 35, then it does not begin with the number 34.",
      "First-Order-Logic Question": "FromCity(tomPlate, Istanbul) ::: Tom's license plate is from Istanbul."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 76,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Shane is not new.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Work(x) → EarnMoney(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (OrderTakeout(x) → Work(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (OrderTakeout(x) ⊕ Enjoy(x)) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (Enjoy(x) → SpendTime(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(Work(mary) ∧ EarnMoney(mary)) → ¬(Picky(mary) ∨ EarnMoney(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
      "First-Order-Logic Question": "EarnMoney(mary) ::: Mary needs to earn money to help pay for her college tuition."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 77,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Shane is not awful.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Work(x) → EarnMoney(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (OrderTakeout(x) → Work(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (OrderTakeout(x) ⊕ (Enjoy(x) ∧ ¬NotPicky(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (Enjoy(x) → SpendTime(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(Work(mary) ∧ EarnMoney(mary)) → (¬NotPicky(mary) ∧ ¬EarnMoney(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
      "First-Order-Logic Question": "¬NotPicky(mary) ∧ SpendTime(mary) ::: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 78,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Aaron is fair.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Work(x) → EarnMoney(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (OrderTakeout(x) → Work(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x (OrderTakeout(x) ⊕ (Enjoy(x) ∧ ¬Picky(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (Enjoy(x) → ¬Picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (Enjoy(x) → SpendTime(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(Work(mary) ∧ EarnMoney(mary)) → (¬Picky(mary) ∧ ¬EarnMoney(mary)) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
      "First-Order-Logic Question": "¬Picky(mary) ∨ (Picky(mary) → SpendTime(mary)) ::: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 79,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Joey is anxious.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(DriedThaiChilies(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
      "First-Order-Logic Question": "Product(driedThaiChilies, BakedByMelissa) ::: Dried Thai chilies are a product of Baked by Melissa."
    },
    "predicates": [
      "Fair(x) ::: x is fair",
      "Educational(x) ::: x is educational",
      "New(x) ::: x is new",
      "Anxious(x) ::: x is anxious",
      "Awful(x) ::: x is awful",
      "Short(x) ::: x is short"
    ]
  },
  {
    "id": 80,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Aaron is educational.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(DriedThaiChilies(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
      "First-Order-Logic Question": "¬Product(driedThaiChilies, BakedByMelissa) ::: Dried Thai chilies are not a product of Baked by Melissa."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 81,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Roderick is short.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(x, BakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(DriedThaiChilies(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
      "First-Order-Logic Question": "Hotpot(driedThaiChilies) ::: Dried Thai chilies are a hotpot."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 82,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Halbert is awful.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Bakery(x) → ¬Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (BakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(DriedThaiChilies(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
      "First-Order-Logic Question": "¬(Product(driedThaiChilies, BakedByMelissa) ∨ Bakery(driedThaiChilies)) ::: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 83,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Halsey is short.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "¬∃x (Bakery(x) ∧ Spicy(x)) ::: No bakery is spicy.\n∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\n∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\n∀x (Product(x, BakedByMelissa) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(DriedThaiChilies(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
      "First-Order-Logic Question": "Cupcake(driedThaiChilies) ∧ Product(driedThaiChilies, BakedByMelissa) ::: Dried Thai chilies are cupcakes and a product of Baked by Melissa."
    },
    "predicates": [
      "Fair(x) ::: x is fair",
      "Educational(x) ::: x is educational",
      "New(x) ::: x is new",
      "Awful(x) ::: x is awful",
      "Anxious(x) ::: x is anxious",
      "Short(x) ::: x is short"
    ]
  },
  {
    "id": 84,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Shane is awful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Listed(x) → NotReceiveManyNegativeReviews(x) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "∀x (RatingGreaterThan9(x) → Listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "∃x (¬ProvideTakeOutService(x) ∧ ReceiveManyNegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.",
        "∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.",
        "RatingGreaterThan9(subway) ∨ PopularAmongLocalResidents(subway) ::: Subway has a rating greater than 9 or is popular among local residents."
      ],
      "First-Order-Logic Question": "(ProvideTakeOutService(subway) ∧ ReceiveManyNegativeReviews(subway)) → (RatingGreaterThan9(subway) ∧ ¬ProvideTakeOutService(subway)) ::: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 85,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Shane is new.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Listed(x) → ¬NotNegative(x) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (RatingGreaterThan9(x) → Listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∃x (NoTakeOut(x) ∧ NegativeReviews(x, many)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (PopularAmongLocals(x) → RatingGreaterThan9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\nRatingGreaterThan9(subway) ∨ PopularAmongLocals(subway) ::: Subway has a rating greater than 9 or is popular among local residents.",
      "First-Order-Logic Question": "Provide(subway, takeOut) ∧ ¬NegativeReviews(subway, many) ::: Subway provides take-out service and does not receive many negative reviews."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 86,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Joey is awful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Listed(x) → NotManyNegativeReviews(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.",
        "∀x (RatingGreaterThan9(x) → Listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.",
        "∃x (Restaurant(x) ∧ ¬ProvideTakeOutService(x) ∧ ReceiveManyNegativeReviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.",
        "∀x (PopularAmongLocals(x) → RatingGreaterThan9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.",
        "RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway) ::: Subway has a rating greater than 9 or is popular among local residents."
      ],
      "First-Order-Logic Question": "¬ProvideTakeOutService(subway) ::: Subway does not provide take-out service."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 87,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Aaron is awful.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (SuperheroMovie(x) → Win(x)) ::: In superhero movies, the good guys always win.\nSuperheroMovie(surprisingAdventures) ∧ NamedAfter(surprisingAdventures, sirDigby) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n∀x (GoodGuy(x) ↔ Fight(x, badGuy)) ::: Good guys fight bad guys and vice versa.\nFight(sirDigby, nemesis) ::: Sir Digby fights his nemesis.\n∀x ((SuperheroMovie(x) ∧ NamedAfter(x, character)) → GoodGuy(character)) ::: If a superhero movie is named after a character, that character is a good guy.\nNamedAfter(surprisingAdventures, sirDigby) ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n∀x ∀y ((Win(x) ∧ Fight(x, y)) → Lose(y)) ::: If somebody wins a fight, the person they are fighting loses.\n∀x ∀y ((SuperheroMovie(x) ∧ NamedAfter(x, y)) → AppearIn(y, x)) ::: If a superhero movie is named after a character, that character appears in the movie.",
      "First-Order-Logic Question": "Lose(nemesis, sirDigby) ::: Sir Digby’s nemesis loses."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 88,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Halbert is new.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "[BG] ∀x (Book(x) → ContainKnowledge(x)) ::: Books contain tons of knowledge.\n[BG] ∀x∀y (Person(x) ∧ Read(x, y) → GainKnowledge(x)) ::: When a person reads a book, that person gains knowledge.\n[BG] ∀x (GainKnowledge(x) → BecomeSmarter(x)) ::: If a person gains knowledge, they become smarter.\nRead(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.",
      "First-Order-Logic Question": "ContainKnowledge(walden) ::: Walden contains knowledge."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 89,
    "context": [
      "Eli is fair.",
      "Shane is not fair.",
      "Joey is not educational.",
      "Halsey is new.",
      "Aaron is fair.",
      "Eli is not anxious.",
      "Joey is fair.",
      "Eli is educational.",
      "Halsey is awful.",
      "Shane is not educational.",
      "Halbert is fair.",
      "Halsey is short.",
      "All not awful people are not educational.",
      "If there is at least one people who is both short and anxious, then Halsey is fair.",
      "If Eli is not awful, then Eli is anxious, and vice versa.",
      "If Halbert is new and Eli is not awful, then Halsey is anxious and Eli is not fair.",
      "If Halbert is not educational and Roderick is short, then Joey is awful.",
      "If Halsey is not new or Halbert is not awful, then Halsey is not educational.",
      "Someone is not new and not anxious if and only if he is not educational.",
      "Someone is not awful if and only if he is not anxious.",
      "Halsey being not short implies that Halbert is not awful.",
      "If Roderick is short, then Halsey is fair.",
      "If someone is educational, then he is not awful, and vice versa.",
      "If there is at least one people who is new, then Halsey is educational and Roderick is fair."
    ],
    "question": "Joey is fair.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "[BG] ∀x (ContainKnowledge(x) → GainKnowledge(x)) ::: When a person reads a book, that person gains knowledge.\n[BG] ∀x (GainKnowledge(x) → BecomeSmarter(x)) ::: If a person gains knowledge, they become smarter.\nRead(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.",
      "First-Order-Logic Question": "Smarter(harry) ::: Harry is smarter than before."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 90,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Lowell is careful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "[BG] ∀x (Book(x) → ContainKnowledge(x)) ::: Books contain tons of knowledge.\n[BG] ∀x∀y (Person(x) ∧ Read(x, y) → GainKnowledge(x)) ::: When a person reads a book, that person gains knowledge.\n[BG] ∀x (GainKnowledge(x) → BecomeSmarter(x)) ::: If a person gains knowledge, they become smarter.\nRead(harry, walden) ::: Harry read the book “Walden” by Henry Thoreau.",
      "First-Order-Logic Question": "∀x (BecomeSmarter(x) → GainKnowledge(x)) ::: A person who is smarter has gained knowledge."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 91,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Seymour is not southern.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (CategorizedAs(x, LanguageGeneration) ∨ CategorizedAs(x, LanguageUnderstanding)) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.",
        "(Output(x, TextSequence) → CategorizedAs(x, LanguageGeneration)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.",
        "MachineTranslation(machineTranslation) ::: Machine translation is a natural language processing task.",
        "Output(machineTranslation, TextSequence) ::: The output of machine translation is a text sequence."
      ],
      "First-Order-Logic Question": "CategorizedAs(machineTranslation, LanguageGeneration) ::: Machine translation is a language generation task."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 92,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "George is anxious.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Task(x) → (LanguageGeneration(x) ∨ LanguageUnderstanding(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n∀x (Output(x, y) ∧ TextSequence(x) → LanguageGeneration(y)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachineTranslation(machineTranslation) ∧ Task(machineTranslation) ::: Machine translation is a natural language processing task.\nOutput(textSequence, machineTranslation) ∧ TextSequence(textSequence) ::: The output of machine translation is a text sequence.",
      "First-Order-Logic Question": "LanguageUnderstanding(machineTranslation) ::: Machine translation is a language understanding task."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 93,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Russell is not southern.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (ManagedBuilding(x) ∧ Pet(y) ∧ AllowedIn(y, x)) ::: Pets are allowed in some managed buildings.\n∀x (ManagedBuilding(x) → RequireDeposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (RequireDeposit(x) → (Equal(x, Rent(y)) ∨ MoreThan(x, Rent(y)))) ::: The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\n∀x (Cat(x) → Pet(x)) ::: Cats are pets.\nManagedBuilding(oliveGarden) ::: The Olive Garden is a managed building.\nMonthlyRent(oliveGarden, 2000) ::: The monthly rent at the Olive Garden is $2000.\nRent(tom, oliveGarden) ↔ (AllowedIn(tom, fluffy) ∧ MoreThan(deposit, 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.",
      "First-Order-Logic Question": "Rent(tom, oliveGarden) ::: Tom will rent an apartment in The Olive Garden."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 94,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "George is southern.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (ManagedBuilding(x) ∧ Pet(y) ∧ AllowedIn(y, x)) ::: Pets are allowed in some managed buildings.\n∀x (ManagedBuilding(x) → RequireDeposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (RequireDeposit(x) → (Equal(x, Rent(monthly, 1)) ∨ MoreThan(x, Rent(monthly, 1)))) ::: The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\n∀x (Cat(x) → Pet(x)) ::: Cats are pets.\nManagedBuilding(oliveGarden) ∧ MonthlyRent(oliveGarden, 2000) ::: The Olive Garden is a managed building with a monthly rent of $2000.\n(Rent(tom, oliveGarden) ↔ (MoveInWith(tom, fluffy) ∧ MoreThan(deposit, 1500))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: $2000 is more than $1500.",
      "First-Order-Logic Question": "MoveInWith(tom, fluffy) ∧ AllowedIn(tom, oliveGarden) ::: Tom is allowed to move in an apartment in The Olive Garden with Fluffy."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 95,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Adam is bewildered.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (ManagedBuilding(x) ∧ Pet(y) ∧ AllowedIn(y, x)) ::: Pets are allowed in some managed buildings.\n∀x (ManagedBuilding(x) → RequireDeposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (SecurityDeposit(x) ↔ Equal(x, MonthlyRent(oliveGarden, 1))) ∨ MoreThan(x, MonthlyRent(oliveGarden, 1)) ::: The security deposit can be either equal to one month's rent or more.\nCat(fluffy) ∧ Owner(tom, fluffy) ::: Fluffy is Tom's cat.\n∀x (Cat(x) → Pet(x)) ::: Cats are pets.\nManagedBuilding(oliveGarden) ::: The Olive Garden is a managed building.\nMonthlyRent(oliveGarden, 2000) ::: The monthly rent at the Olive Garden is $2000.\nRentApartment(tom) ↔ (AllowedIn(fluffy, oliveGarden) ∧ ¬MoreThan(SecurityDeposit(oliveGarden), 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nMoreThan(2000, 1500) ::: 2000$ is more than $1500.",
      "First-Order-Logic Question": "∀x (SecurityDeposit(oliveGarden) ↔ Equal(x, 2000)) ∨ MoreThan(x, 2000) ::: The security deposit at the Olive Garden is either $2000 or more."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 96,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Udolf is not bewildered.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (LovedBy(x, tourists) → Favorite(x, max)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (Australia(x) → LovedBy(x, tourists)) ::: All animals from Australia are loved by tourists.\n∀x (Quokka(x) → Australia(x)) ::: All quokka are animals from Australia.\n∀x (Favorite(x, max) → Fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (Favorite(x, max) → Sleep(x)) ::: All of Max's favorite animals love to sleep.\n(Fluffy(koala) → ¬Quokka(koala)) ::: If a koala is very fluffy, then the koala is not a quokka.",
      "First-Order-Logic Question": "Sleep(koala) ::: Koalas love to sleep."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 97,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Adam is not bewildered.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (LovedBy(x, tourists) → Favorite(x, max)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (Australia(x) → LovedBy(x, tourists)) ::: All animals from Australia are loved by tourists.\n∀x (Quokka(x) → Australia(x)) ::: All quokka are animals from Australia.\n∀x (Favorite(x, max) → (Fluffy(x) ∧ Sleep(x))) ::: All of Max's favorite animals are very fluffy and love to sleep.\n∀x (Koala(x) ∧ Fluffy(x) → ¬Quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.",
      "First-Order-Logic Question": "Sleep(koala) ∧ Quokka(koala) ::: Koalas love to sleep and are quokka."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 98,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Lowell is not dry.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (LovedBy(x, tourists) → Favorite(x, max)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (Australia(x) → LovedBy(x, tourists)) ::: All animals from Australia are loved by tourists.\n∀x (Quokka(x) → Australia(x)) ::: All quokka are animals from Australia.\n∀x (Favorite(x, max) → Fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (Favorite(x, max) → Sleep(x)) ::: All of Max's favorite animals love to sleep.\n(Fluffy(koala) → ¬Quokka(koala)) ::: If a koala is very fluffy, then the koala is not a quokka.",
      "First-Order-Logic Question": "(Quokka(koala) ∧ Koala(koala)) → (Sleep(koala) ∨ Fluffy(koala)) ::: If a koala is a quokka, then the koala either loves to sleep or is very fluffy."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 99,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Adam is sparkling.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Kind(x) ∨ Evil(x) ::: A man is either kind or evil.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\nGentleman(harry) ::: Harry is a gentleman.",
      "First-Order-Logic Question": "CEO(harry) ::: Harry is a CEO."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 100,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "George is not careful.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Man(x) → (Kind(x) ∨ Evil(x))) ::: A man is either kind or evil.",
        "∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.",
        "∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.",
        "∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.",
        "∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.",
        "Gentleman(harry) ::: Harry is a gentleman."
      ],
      "First-Order-Logic Question": "Kind(harry) ∨ CEO(harry) ::: Harry is kind or a CEO."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 101,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Adam is anxious.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Kind(x) ∨ Evil(x)) ::: A man is either kind or evil.\n∀x (Ugly(x) → ¬Handsome(x)) ::: No ugly person is handsome.\n∀x (Evil(x) → Ugly(x)) ::: All evil people are ugly.\n∀x (Gentleman(x) → Handsome(x)) ::: All gentlemen are handsome.\n∀x (CEO(x) → Gentleman(x)) ::: All CEOs are gentlemen.\nGentleman(harry) ::: Harry is a gentleman.",
      "First-Order-Logic Question": "((Evil(harry) ∧ Ugly(harry)) ∨ (¬Evil(harry) ∧ ¬Ugly(harry))) → (¬Kind(harry) ∧ ¬CEO(harry)) ::: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 102,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "George is not dry.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Twins(x) ∨ Triplets(x) → SpendTimeWith(x, Siblings(x))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "∀x (Siblings(x, y) → Twins(x) ∨ Triplets(x)) ::: If people have siblings who are the same age, then they are twins or triplets.",
        "∀x (Complain(x) → Siblings(x, y)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.",
        "∀x (¬LiveAtHome(x) → ¬DevelopBonds(x, FamilyMembers(x))) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "∀x (SpendTimeWith(x, Siblings(x)) → ¬LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "(Twins(luke) ∧ DevelopBonds(luke, FamilyMembers(luke))) ⊕ ¬(Twins(luke) ∨ DevelopBonds(luke, FamilyMembers(luke))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."
      ],
      "First-Order-Logic Question": "SpendTimeWith(luke, Siblings(luke)) ::: Luke spends a lot of time hanging out and playing with his siblings."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 103,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Lowell is not southern.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Twins(x) ∨ Triplets(x) → SpendTimeWith(x, Siblings(x))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "∀x (Siblings(x, y) ∧ SameAge(x, y) → Twins(x) ∨ Triplets(x)) ::: If people have siblings who are the same age, then they are twins or triplets.",
        "∀x (Complain(x) → Siblings(x, y) ∧ SameAge(x, y)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.",
        "∀x (¬LiveAtHomeRegularly(x) → ¬DevelopBonds(x, FamilyMembers(x))) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "∀x (SpendTimeWith(x, Siblings(x)) → ¬LiveAtHomeRegularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "(Twins(luke) ∧ DevelopBonds(luke, FamilyMembers(luke))) ⊕ ¬(Twins(luke) ∨ DevelopBonds(luke, FamilyMembers(luke))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."
      ],
      "First-Order-Logic Question": "Complain(luke) ::: Luke complains often about annoying siblings."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 104,
    "context": [
      "Udolf is bewildered.",
      "Lowell is dry.",
      "George is bewildered.",
      "Russell is not southern.",
      "Lowell is not bewildered.",
      "Adam is not careful.",
      "Seymour is not dry.",
      "Adam is not anxious.",
      "Crosby is careful.",
      "Udolf is careful.",
      "Adam is southern.",
      "Russell is anxious.",
      "It can be concluded that Lowell is sparkling once knowing that George is not bewildered or George is southern.",
      "It can be concluded that Seymour is not dry once knowing that Seymour is not sparkling or Lowell is careful.",
      "George being southern implies that Russell is bewildered.",
      "Someone being bewildered is equivalent to being not careful.",
      "If someone is dry, then he is both anxious and not careful.",
      "If there is at least one people who is both bewildered and not southern, then Adam is careful.",
      "If there is at least one people who is not careful, then George is not sparkling.",
      "If all people are sparkling or not bewildered, then Seymour is not dry.",
      "As long as someone is southern, he is sparkling and careful.",
      "If someone is dry and not bewildered, then he is neither anxious nor southern, and vice versa.",
      "If someone is not sparkling, then he is not bewildered, and vice versa.",
      "If there is someone who is not dry, then Russell is not southern and Crosby is not bewildered."
    ],
    "question": "Russell is not careful.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x ((Twins(x) ∨ Triplets(x)) → SpendTimeWith(x, Siblings(x))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.",
        "∀x (Siblings(x, y) → (Twins(x) ∨ Triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.",
        "∀x (Complain(x) → Siblings(x, y)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.",
        "∀x (¬LiveAtHome(x) → ¬DevelopBonds(x, FamilyMembers(x))) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.",
        "∀x (SpendTimeWith(x, Siblings(x)) → ¬LiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.",
        "(Twins(luke) ∧ DevelopBonds(luke, FamilyMembers(luke))) ⊕ ¬(Twins(luke) ∨ DevelopBonds(luke, FamilyMembers(luke))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."
      ],
      "First-Order-Logic Question": "¬(Twins(luke) ∨ Triplets(luke) ∨ Complain(luke)) ::: Luke is neither a twin nor triplet nor complains often about annoying siblings."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Dry(x) ::: x is dry",
      "Southern(x) ::: x is southern",
      "Careful(x) ::: x is careful",
      "Anxious(x) ::: x is anxious",
      "Sparkling(x) ::: x is sparkling"
    ]
  },
  {
    "id": 105,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Molly is not impossible.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Cost(greTest, 205) ::: It costs US $205 to take the GRE test.\n∀x (Prove(x, EconomicHardship(x)) → ProvideAid(ETS, x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\n∀x (EconomicHardship(x) ↔ (Difficulty(x, littleMoney) ∨ Difficulty(x, fewResources))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nSingleParent(tom) ::: Tom lives in a single-parent family.\nOutOfWork(tomDad, moreThanAYear) ::: His dad has been out of work for more than a year.",
      "First-Order-Logic Question": "ApplyFor(tom, ETS, greTest) ::: Tom can apply for financial aid from ETS to take the GRE test."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 106,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Broderick is octagonal.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Cost(GREtest, 205) ::: It costs US $205 to take the GRE test.\n∀x (Take(GREtest, x) → (EconomicHardship(x) → Provide(ETS, financialAid, x))) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\n∀x (EconomicHardship(x) ↔ (Cause(x, Difficulty(tooLittleMoney)) ∨ Cause(x, Difficulty(tooFewResources)))) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nSingleParent(tom) ∧ Unemployed(dad) ∧ (¬(Unemployed(dad, year1)) ∨ Unemployed(dad, year1)) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year.",
      "First-Order-Logic Question": "CostBelow(GREtest, 300) ::: It cost below US $300 to take the GRE test."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 107,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Brandan is faithful.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Cost(GRE, 205) ::: It costs US $205 to take the GRE test.\n∀x (Prove(EconomicHardship(x)) → Provide(ETS, financialAid, x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nEconomicHardship(x) ↔ (LittleMoney(x) ∨ FewResources(x)) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nSingleParent(tom) ∧ OutOfWork(dad, year1) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year.",
      "First-Order-Logic Question": "¬∃x Available(financialAid, GRE) ::: There is no financial aid available for the GRE test."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 108,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Leroy is not impossible.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (SpillFood(x) → (¬TidySpaces(x) ∧ ¬EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ GoOut(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) ∧ ¬Siblings(x) → (TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → (OnlyChild(x) ∧ ¬Siblings(x))) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(Person(x))) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(SpillFood(peter) ∧ OnlyChild(peter) ∧ ¬Siblings(peter)) ⊕ ¬(SpillFood(peter) ∨ (OnlyChild(peter) ∧ ¬Siblings(peter))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
      "First-Order-Logic Question": "TidySpaces(peter) ∧ EnjoyCleaning(peter) ::: Peter tidies his space consistently and enjoys the process of cleaning."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 109,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Leroy is not technical.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (SpillFood(x) → (¬TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ FindNewRestaurants(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) → (TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → OnlyChild(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → BusyParents(Person(x))) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
      "First-Order-Logic Question": "FindNewRestaurants(peter) ∨ HighIncomeHousehold(peter) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 110,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Joseph is not faithful.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (SpillFood(x) → (¬TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (Foodie(x) ∧ FindNewFoodRestaurants(x) → SpillFood(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (OnlyChild(x) ∧ ¬∃y (Sibling(y, x)) → (TidySpaces(x) ∧ EnjoyCleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (BusyParents(x) → (OnlyChild(x) ∧ ¬∃y (Sibling(y, x)))) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (HighIncomeHousehold(x) → ∃y (BusyParents(y) ∧ BelongTo(x, y))) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter)) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
      "First-Order-Logic Question": "((Foodie(peter) ∧ FindNewFoodRestaurants(peter)) ∧ HighIncomeHousehold(peter)) ⊕ ((Foodie(peter) ∧ FindNewFoodRestaurants(peter)) ∨ HighIncomeHousehold(peter)) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 111,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Broderick is not faithful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (FirTree(x) → Evergreen(x)) ::: All fir trees are evergreens.",
        "∃x (ObjectOfWorship(x) ∧ FirTree(x)) ::: Some objects of worship are fir trees."
      ],
      "First-Order-Logic Question": "∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x)) ::: Some evergreens are not objects of worship."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 112,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Brandan is supportive.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "MountainRange(picuris) ∧ (In(picuris, newMexico) ∨ In(picuris, texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nVisited(juan, picuris) ::: Juan de Onate visited the Picuris Mountains.\nLocatedIn(hardingPegmatiteMine, picuris) ∧ Donated(hardingPegmatiteMine) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n∀x (MountainRange(x) ∧ In(x, texas) → NoMinesDonated(x)) ::: There are no mountain ranges in Texas that have mines which have been donated.",
      "First-Order-Logic Question": "∃x (MountainRange(x) ∧ In(x, newMexico) ∧ Visited(juan, x)) ::: Juan de Onate visited a mountain range in New Mexico."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 113,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Molly is supportive.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MountainRange(picuris) ∨ MountainRange(texas)",
        "Visited(juan, picuris)",
        "LocatedIn(harding, picuris) ∧ Donated(harding)",
        "∀x (MountainRange(texas) → ¬(∃y (Mine(y) ∧ LocatedIn(y, texas) ∧ Donated(y))))"
      ],
      "First-Order-Logic Question": "Visited(juan, texas)"
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 114,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Molly is octagonal.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "MountainRange(picuris) ∨ MountainRange(texas) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.",
        "Visited(juan, picuris) ::: Juan de Onate visited the Picuris Mountains.",
        "Mine(hardingPegmatite) ∧ LocatedIn(hardingPegmatite, picuris) ∧ Donated(hardingPegmatite) ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
        "∀x (MountainRange(texas) → (∀y (Mine(y) ∧ LocatedIn(y, texas) → ¬Donated(y)))) ::: There are no mountain ranges in Texas that have mines which have been donated."
      ],
      "First-Order-Logic Question": "NotLocatedIn(hardingPegmatite, newMexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 115,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Lamont is not faithful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.",
        "Man(michael) ∧ ∀x (Classmate(x, michael) → Taller(michael, x)) ::: Michael is a man who is taller than everyone else in his class.",
        "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.",
        "Man(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.",
        "∀x (Shooter(x) ∧ ¬Jump(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.",
        "¬Block(michael, windy) ::: Michael cannot block Windy's shooting.",
        "∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter."
      ],
      "First-Order-Logic Question": "∃x (Man(x) ∧ Classmate(x, michael) ∧ Taller(x, peter)) ::: Peter is shorter than a man in Michael's class."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 116,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Joseph is not impossible.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nMan(michael) ∧ ∀x (Classmate(x, michael) → Taller(michael, x)) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\nMan(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.\n∀x (Shooter(x) ∧ ¬Jump(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n¬Block(michael, windy) ::: Michael cannot block Windy's shooting.\n∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.",
      "First-Order-Logic Question": "GreatShooter(windy) ::: Windy is a great shooter."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 117,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "George is careful.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nMan(michael) ∧ ∀x (Classmate(x, michael) → Taller(michael, x)) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\nMan(peter) ∧ Taller(peter, michael) ::: Peter is a man who is taller than Michael.\n∀x (Shoot(x) ∧ ¬Jump(x) → Block(michael, x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n¬Block(michael, windy) ::: Michael cannot block Windy's shooting.\n∀x (Jump(x) → GreatShooter(x)) ::: Every shooter who can jump when shooting is a great shooter.",
      "First-Order-Logic Question": "Block(peter, windy) ::: Peter can block Windy's shooting."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 118,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Brandan is technical.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "NamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nOn(barutinCove, snowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\nPartOf(snowIsland, southShetlandIslands) ∧ PartOf(greenwichIsland, southShetlandIslands) ∧ PartOf(deceptionIsland, southShetlandIslands) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.\n∀x∀y∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C.",
      "First-Order-Logic Question": "∀x (NamedAfter(barutin, x) → NamedAfter(barutinCove, x)) ::: Barutin is named after all islands in Antarctica."
    },
    "predicates": [
      "Technical(x) ::: x is technical",
      "Impossible(x) ::: x is impossible",
      "Supportive(x) ::: x is supportive",
      "Octagonal(x) ::: x is octagonal",
      "Faithful(x) ::: x is faithful",
      "Careful(x) ::: x is careful"
    ]
  },
  {
    "id": 119,
    "context": [
      "Joseph is not technical.",
      "Leroy is not impossible.",
      "George is supportive.",
      "Molly is not octagonal.",
      "Broderick is not octagonal.",
      "Lamont is impossible.",
      "Joseph is not faithful.",
      "George is not faithful.",
      "George is octagonal.",
      "Lamont is not supportive.",
      "Broderick is impossible.",
      "Brandan is technical.",
      "If all people are not supportive or not faithful, then Leroy is careful.",
      "Leroy being not faithful implies that Joseph is not supportive and George is not octagonal.",
      "Someone who is not supportive is always both faithful and not impossible.",
      "If there is at least one people who is faithful or not technical, then Brandan is supportive.",
      "If someone is octagonal or he is impossible, then he is not supportive.",
      "If there is at least one people who is faithful, then George is careful.",
      "Broderick being supportive or Leroy being impossible implies that Leroy is careful.",
      "Someone who is careful is always impossible.",
      "If George is not supportive or Leroy is not careful, then Leroy is faithful.",
      "It can be concluded that Brandan is not faithful once knowing that Leroy is not octagonal.",
      "If Leroy is technical, then Brandan is not faithful and Molly is supportive.",
      "It can be concluded that Brandan is technical and Leroy is not impossible once knowing that Molly is octagonal."
    ],
    "question": "Lamont is supportive.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "NamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nOn(barutinCove, snowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\nIsland(snowIsland) ∧ PartOf(snowIsland, southShetlandIslands) ∧ PartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island, and are considered part of Antarctica.\n∀x∀y∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C.",
      "First-Order-Logic Question": "∃x∃y (Cove(x) ∧ NamedAfter(x, y) ∧ Settlement(y) ∧ LocatedIn(y, bulgaria) ∧ PartOf(x, antarctica)) ::: There is at least one cove in Antarctica named after a place in Bulgaria."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 120,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Noel is not mushy.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "NamedAfter(barutinCove, barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nOn(barutinCove, southwestCoastSnowIsland) ::: Barutin Cove is on the southwest coast of Snow Island.\nIsland(snowIsland) ∧ Island(greenwichIsland) ∧ Island(deceptionIsland) ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nPartOf(southShetlandIslands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.\n∀x∀y∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)) ::: If A is located in B and B is located in C, then A is located in C.",
      "First-Order-Logic Question": "¬LocatedIn(barutin, antarctica) ::: Barutin is not located in Antarctica."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 121,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Shane is not mushy.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Affection(x) ∧ Love(x)) ::: Some affection is love.\n∃x (Love(x) ∧ Positive(x)) ::: Some love is positive.",
      "First-Order-Logic Question": "∃x (Affection(x) ∧ Positive(x)) ::: Some affection is positive."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 122,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Crosby is hungry.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬Airline(greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.",
      "First-Order-Logic Question": "Airline(greyhound) ::: Greyhound is an airline."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 123,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Shane is not wicked.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬Airline(greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.",
      "First-Order-Logic Question": "Boeing707(greyhound) ::: A Greyhound is a Boeing 707."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 124,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Shane is not hungry.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Transport(x) → ¬Empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (Airline(x) → Transport(x)) ::: All airlines can transport multiple passengers.\n∀x (Plane(x) → Empty(x)) ::: All planes are empty.\n∀x (Boeing707(x) → Plane(x)) ::: All Boeing 707s are planes.\n¬Airline(greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.",
      "First-Order-Logic Question": "¬(Greyhound(x) ∧ Boeing707(x)) ::: A Greyhound is not a Boeing 707."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 125,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Noel is mushy.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ↔ (Monkey(x) ∨ Bird(x))) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Fly(x) → Wings(x)) ::: If something can fly, then it has wings.\n¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
      "First-Order-Logic Question": "Monkey(rock) ::: Rock is a monkey."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 126,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "George is not mushy.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ↔ (Monkey(x) ∨ Bird(x))) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.\n¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
      "First-Order-Logic Question": "HasWings(rock) ::: Rock has wings."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 127,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Ronald is not teak.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Mammal(x) → Animal(x)) ::: All mammals are animals.\n∀x (Monkey(x) → Mammal(x)) ::: All monkeys are mammals.\n∀x (Animal(x) ↔ (Monkey(x) ∨ Bird(x))) ::: An animal is either a monkey or a bird.\n∀x (Bird(x) → Fly(x)) ::: All birds fly.\n∀x (Animal(x) → Breathe(x)) ::: All animals breathe.\n∀x (Fly(x) → HasWings(x)) ::: If something can fly, then it has wings.\n¬(Fly(rock) ∨ Bird(rock)) → ¬(Fly(rock) ∨ Breathe(rock)) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
      "First-Order-Logic Question": "¬HasWings(rock) ::: Rock does not have wings."
    },
    "predicates": [
      "Hungry(x) ::: x is hungry",
      "Mushy(x) ::: x is mushy",
      "Teak(x) ::: x is teak",
      "Poised(x) ::: x is poised",
      "Frank(x) ::: x is frank",
      "Wicked(x) ::: x is wicked"
    ]
  },
  {
    "id": 128,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Crosby is not hungry.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (HaveWedding(x) → HaveChild(x)) ::: All people who have a wedding are people who have at least one child.",
        "∀x (TravelToParisForHoneymoon(x) → HaveWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (OccurIn(wedding, July) ∧ BelongTo(wedding, TravelToParisForHoneymoon(x)) → TravelToParisForHoneymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "∃x (OccurIn(wedding, July) ∧ WellAttended(wedding)) ::: Some weddings in July are well-attended.",
        "(HaveChild(john) → ¬(TravelToParisForHoneymoon(john) ∧ HaveWedding(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "(WellAttended(john) → (OccurIn(john, July) ∨ (¬OccurIn(john, July) ∧ TravelToParisForHoneymoon(john)))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."
      ],
      "First-Order-Logic Question": "WellAttended(john) ::: John has a wedding that is well-attended."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 129,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Keith is not mushy.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (HaveWedding(x) → HaveChild(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (TravelToParisForHoneymoon(x) → HaveWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (WeddingsInJuly(x) → (TravelToParisForHoneymoon(x) ∧ HaveWedding(x))) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (WeddingsInJuly(x) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.\n(HaveChild(john) → (¬TravelToParisForHoneymoon(john) ∧ ¬HaveWedding(john))) ∧ (WellAttended(john) → (WeddingsInJuly(john) ∨ (¬WeddingsInJuly(john) ∧ TravelToParisForHoneymoon(john))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
      "First-Order-Logic Question": "¬WellAttended(john) ::: John does not have a wedding that is well-attended."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 130,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Keith is poised.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (HaveWedding(x) → HaveChild(x)) ::: All people who have a wedding are people who have at least one child.",
        "∀x (TravelToParisForHoneymoon(x) → HaveWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.",
        "∀x (OccurIn(x, July) ∧ HaveWedding(x) → TravelToParisForHoneymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.",
        "∃x (OccurIn(x, July) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.",
        "HaveChild(john) → ¬(TravelToParisForHoneymoon(john) ∧ HaveWedding(john)) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.",
        "WellAttended(john) → (OccurIn(john, July) ∨ (¬OccurIn(john, July) → TravelToParisForHoneymoon(john))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."
      ],
      "First-Order-Logic Question": "HaveChild(john) ::: John has at least one child."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 131,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "George is poised.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (HaveWedding(x) → HaveChild(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (TravelToParisForHoneymoon(x) → HaveWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (OccurIn(x, July) ∧ HaveWedding(x) → TravelToParisForHoneymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (OccurIn(x, July) ∧ WellAttended(x)) ::: Some weddings in July are well-attended.\nHaveChild(john) → ¬(TravelToParisForHoneymoon(john) ∧ HaveWedding(john)) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(WellAttended(john) → (OccurIn(john, July) ∨ TravelToParisForHoneymoon(john))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
      "First-Order-Logic Question": "¬(WellAttended(john) ∨ TravelToParisForHoneymoon(john)) ::: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 132,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Noel is poised.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "[∃x (Mammal(x) ∧ HaveTeeth(x))] ::: Some mammals have teeth.\n¬∃x (Platypus(x) ∧ HaveTeeth(x)) ::: Platypus have no teeth.\nPlatypus(platypus) ∧ Mammal(platypus) ::: Platypus are mammals.\n∃x (Human(x) ∧ HaveTeeth(x)) ::: Humans have teeth.",
      "First-Order-Logic Question": "Platypus(platypus) ∧ Mammal(platypus) ∧ ¬∃x (Platypus(x) ∧ HaveTeeth(x)) ::: Platypus are mammals with no teeth."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 133,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Crosby is mushy.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Mammal(x) ∧ HasTeeth(x)) ::: Some mammals have teeth.\n¬∃x (Platypus(x) ∧ HasTeeth(x)) ::: Platypus have no teeth.\nPlatypus(platypus) ∧ Mammal(platypus) ::: Platypus are mammals.\nHuman(human) ∧ HasTeeth(human) ::: Humans have teeth.",
      "First-Order-Logic Question": "¬Reptile(platypus) ::: Platypus are not reptiles."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 134,
    "context": [
      "Gregory is not hungry.",
      "Ronald is mushy.",
      "Keith is teak.",
      "Crosby is poised.",
      "Shane is frank.",
      "Gregory is poised.",
      "Shane is not poised.",
      "Keith is mushy.",
      "Noel is not frank.",
      "George is frank.",
      "George is wicked.",
      "Keith is frank.",
      "If someone is either mushy or not poised, then he is hungry and not wicked.",
      "If Gregory is not poised, then Shane is mushy.",
      "If there is at least one people who is wicked, then Shane is not poised and George is not frank.",
      "If Noel is teak, then Noel is not poised, and vice versa.",
      "If there is nobody who is not, then Shane is teak and Shane is not poised.",
      "Someone is wicked and mushy if and only if he is poised.",
      "If there is at least one people who is poised or not hungry, then George is not mushy.",
      "If there is at least one people who is both wicked and not teak, then Crosby is poised.",
      "Keith is teak if and only if Gregory is not poised and Noel is not wicked.",
      "Noel is teak if and only if Shane is hungry.",
      "If Gregory is not teak and Crosby is wicked, then Keith is not mushy.",
      "If there is at least one people who is both hungry and wicked, then Noel is teak."
    ],
    "question": "Keith is frank.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Mammal(x) ∧ HaveTeeth(x)) ::: Some mammals have teeth.\n¬∃x (Platypus(x) ∧ HaveTeeth(x)) ::: Platypus have no teeth.\nPlatypus(platypus) ∧ Mammal(platypus) ::: Platypus are mammals.\nHuman(human) ∧ HaveTeeth(human) ::: Humans have teeth.",
      "First-Order-Logic Question": "Mammal(human) ::: Humans are mammals."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 135,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Cara is new.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Plunger(x) → Suck(x) ::: Plungers suck.\nVacuum(x) → Suck(x) ::: Vacuums suck.\nVampire(x) → Suck(x) ::: Vampires suck.\nSpace(x) → Vacuum(x) ::: Space is a vacuum.\nDuster(x) ∧ HouseholdAppliance(x) → ¬Suck(x) ::: A duster is a household appliance that doesn't suck.",
      "First-Order-Logic Question": "Suck(space) ::: Space sucks."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 136,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Algernon is not cultural.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Plunger(x) → Suck(x) ::: Plungers suck.\nVacuum(x) → Suck(x) ::: Vacuums suck.\nVampire(x) → Suck(x) ::: Vampires suck.\nSpace(x) → Vacuum(x) ::: Space is a vacuum.\nDuster(x) ∧ HouseholdAppliance(x) → ¬Suck(x) ::: A duster is a household appliance that doesn't suck.",
      "First-Order-Logic Question": "Space(x) ↔ Vampire(x) ::: Space is a vampire."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 137,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Maurice is new.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Plunger(x) → Suck(x) ::: Plungers suck.\nVacuum(x) → Suck(x) ::: Vacuums suck.\nVampire(x) → Suck(x) ::: Vampires suck.\nSpace(x) → Vacuum(x) ::: Space is a vacuum.\nDuster(x) ∧ HouseholdAppliance(x) → ¬Suck(x) ::: A duster is a household appliance that doesn't suck.",
      "First-Order-Logic Question": "HouseholdAppliance(x) → Suck(x) ::: If something is a household appliance, it sucks."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 138,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Seymour is able.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (MachineLearningAlgorithm(x) → (SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x))) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "∀x (UnsupervisedLearning(x) → ¬RequireLabelledData(x)) ::: Unsupervised learning doesn't require labelled data.",
        "StateOfTheArtModel(textSummarizationModel) ∧ TrainedWith(textSummarizationModel, MachineLearningAlgorithm) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "ReinforcementLearning(x) → ¬UsedToTrain(x, StateOfTheArtModel) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "∀x (MachineLearningAlgorithm(x) ∧ UsedToTrain(x, StateOfTheArtModel) → RequireLabelledData(x)) ::: The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "First-Order-Logic Question": "UsedToTrain(SupervisedLearning, StateOfTheArtModel) ::: Supervised learning is used to train the state-of-the-art text summarization model."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 139,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Lesley is cultural.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (SupervisedLearning(x) ∨ UnsupervisedLearning(x) ∨ ReinforcementLearning(x)) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
        "UnsupervisedLearning(x) → ¬RequiresLabelledData(x) ::: Unsupervised learning doesn't require labelled data.",
        "TrainedWith(stateOfTheArtModel, machineLearningAlgorithms) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.",
        "ReinforcementLearning(x) → ¬UsedToTrain(x, stateOfTheArtModel) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.",
        "RequiresLabelledData(machineLearningAlgorithm) ::: The Machine Learning algorithm for training text summarization model requires labelled data."
      ],
      "First-Order-Logic Question": "UsedToTrain(UnsupervisedLearning, stateOfTheArtModel) ::: Unsupervised learning is used to train the state-of-the-art text summarization model."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 140,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Abel is not octagonal.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Funny(x) → Popular(x)) ::: If a cartoon character is funny, then it is popular.\n∀x (Ugly(x) → ¬Popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n∀x (LovedByChildren(x) → Funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n∀x (FromTheSimpsons(x) → LovedByChildren(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n∀x (Yellow(x) → FromTheSimpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(FromTheSimpsons(ben) ∨ Funny(ben)) ::: Ben is either from The Simpsons or funny.",
      "First-Order-Logic Question": "LovedByChildren(ben) ::: Ben is loved by children."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 141,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Seymour is octagonal.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Funny(x) → Popular(x)) ::: If a cartoon character is funny, then it is popular.\n∀x (Ugly(x) → ¬Popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n∀x (LovedByChildren(x) → Funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n∀x (FromTheSimpsons(x) → LovedByChildren(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n∀x (Yellow(x) → FromTheSimpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(FromTheSimpsons(ben) ∨ Funny(ben)) ::: Ben is either from The Simpsons or funny.",
      "First-Order-Logic Question": "Ugly(ben) ∨ Yellow(ben) ::: Ben is ugly or yellow."
    },
    "predicates": [
      "Bewildered(x) ::: x is bewildered",
      "Cultural(x) ::: x is cultural",
      "Able(x) ::: x is able",
      "Jolly(x) ::: x is jolly",
      "Octagonal(x) ::: x is octagonal",
      "New(x) ::: x is new"
    ]
  },
  {
    "id": 142,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Algernon is bewildered.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Funny(x) → Popular(x)) ::: If a cartoon character is funny, then it is popular.\n∀x (Ugly(x) → ¬Popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n∀x (LovedByChildren(x) → Funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n∀x (FromTheSimpsons(x) → LovedByChildren(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n∀x (Yellow(x) → FromTheSimpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\nFromTheSimpsons(ben) ∨ Funny(ben) ::: Ben is either from The Simpsons or funny.",
      "First-Order-Logic Question": "Yellow(ben) ∧ Ugly(ben) ⊕ ¬(Yellow(ben) ∨ Ugly(ben)) ::: Ben is either yellow and ugly or neither yellow nor ugly."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 143,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Maurice is not octagonal.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "BreedingBack(x) ↔ (∃y (SelectiveBreeding(y) ∧ DomesticAnimal(x))) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nBredBack(heckCattle, 1920) ∧ Resemble(heckCattle, aurochs) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\n∀x (BG(x) → Animal(x)) ::: Heck cattle are animals.\n∀x (BG(x) → Animal(x)) ::: Aurochs are animals.\n∃x (BG(x) ∧ Extinct(x) ∧ Resemble(x, animalsToBeBredBack)) ::: Some animals to be bred-back resemble animals that are extinct.",
      "First-Order-Logic Question": "∃x (BG(x) ∧ ArtificiallySelected(x)) ::: Some Heck cattle are artificially selected."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 144,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Abel is not able.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "BreedingBack(x) ↔ (∃y,z (SelectiveBreeding(x, y) ∧ DomesticAnimal(y) ∧ Resemble(y, z) ∧ Extinct(z))) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeckCattle(heck) ∧ SelectiveBreeding(heck, aurochs) ∧ Resemble(heck, aurochs) ∧ Animal(heck) ∧ Animal(aurochs) ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nAurochs(aurochs) ∧ Animal(aurochs) ::: Aurochs are animals.",
      "First-Order-Logic Question": "Extinct(aurochs) ::: Aurochs are extinct."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 145,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Cara is not octagonal.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.\n¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.",
      "First-Order-Logic Question": "Young(jerry) ::: Jerry is young."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 146,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Abel is not cultural.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Student(x) → Human(x)) ::: All students are humans.",
        "∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.",
        "∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.",
        "∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.",
        "¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.",
        "Young(rose) ∨ Student(rose) ::: Rose is young or a student."
      ],
      "First-Order-Logic Question": "¬Young(jerry) ::: Jerry is not young."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 147,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Aaron is not jolly.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.\n¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.",
      "First-Order-Logic Question": "Human(rose) ∨ Manager(rose) ::: Rose is a human or a manager."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 148,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Algernon is cultural.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Studies(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Studies(x) ⊕ Teaches(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teaches(x)) ::: No young person teaches.\n¬(Teaches(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.",
      "First-Order-Logic Question": "Human(rose) ∨ Manager(jerry) ::: Rose is a human or Jerry is a manager."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 149,
    "context": [
      "Abel is not bewildered.",
      "Aaron is cultural.",
      "Seymour is cultural.",
      "Abel is able.",
      "Maurice is jolly.",
      "Cara is bewildered.",
      "Maurice is cultural.",
      "Abel is cultural.",
      "Algernon is not jolly.",
      "Algernon is not new.",
      "Seymour is bewildered.",
      "Maurice is new.",
      "If Algernon is not jolly or Maurice is able, then Cara is cultural.",
      "If there is at least one people who is both bewildered and not octagonal, then Algernon is jolly.",
      "Someone who is not new is always both bewildered and cultural.",
      "If Abel is bewildered, then Algernon is not jolly, and vice versa.",
      "If there is someone who is not new, then Lesley is not jolly and Lesley is octagonal.",
      "If someone is both jolly and not bewildered, then he is not cultural.",
      "If there is someone who is either new or not able, then Cara is not cultural.",
      "Someone being neither bewildered nor able is equivalent to being jolly.",
      "If someone is octagonal and not cultural, then he is both jolly and bewildered, and vice versa.",
      "If there is someone who is not bewildered, then Cara is jolly.",
      "Someone who is eithor not jolly or not able is always new.",
      "If there is at least one people who is bewildered, then Lesley is not cultural and Seymour is octagonal."
    ],
    "question": "Aaron is bewildered.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Student(x) → Human(x)) ::: All students are humans.\n∀x (Study(x) → Student(x)) ::: If someone studies, then they are a student.\n∀x (Study(x) ⊕ Teach(x)) ::: A person either studies or teaches.\n∀x (Young(x) → ¬Teach(x)) ::: No young person teaches.\n¬(Teach(jerry) ∨ Manager(jerry)) ::: Jerry neither teaches nor is a manager.\nYoung(rose) ∨ Student(rose) ::: Rose is young or a student.",
      "First-Order-Logic Question": "¬(Student(rose) ∧ Human(jerry)) ::: It is not true that Rose is a student and Jerry is a human."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 150,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Joseph is substantial.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "PublishingHouse(newVesselPress) ∧ SpecializeIn(newVesselPress, foreignLiterature) ∧ SpecializeIn(newVesselPress, english) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (PublishedBy(newVesselPress, x) → Language(x, english)) ::: All of New Vessel Press's published books are in English.\nBook(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nTranslate(neapolitanChronicles, italian, english) ::: Neapolitan Chronicles was translated from Italian.\nBook(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress) ::: Palace of Flies is a book published by New Vessel Press.",
      "First-Order-Logic Question": "Language(neapolitanChronicles, english) ::: Neapolitan Chronicles is an English book."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 151,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Joseph is not substantial.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "PublishingHouse(newVesselPress) ∧ SpecializeIn(newVesselPress, foreignLiterature) ∧ Translate(newVesselPress, foreignLiterature, english) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (PublishedIn(newVesselPress, x) → PublishedIn(x, english)) ::: All of New Vessel Press's published books are in English.\nBook(neapolitanChronicles) ∧ PublishedIn(neapolitanChronicles, newVesselPress) ∧ TranslatedFrom(neapolitanChronicles, italian) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nBook(palaceOfFlies) ∧ PublishedIn(palaceOfFlies, newVesselPress) ::: Palace of Flies is a book published by New Vessel Press.",
      "First-Order-Logic Question": "¬PublishedIn(harryPotter, newVesselPress) ::: Harry Potter was published by New Vessel Press."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 152,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Clarence is frank.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "PublishingHouse(newVesselPress) ∧ SpecializeIn(newVesselPress, foreignLiterature) ∧ Translate(neapolitanChronicles, italian) ∧ Translate(palaceOfFlies, italian) ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (PublishingHouse(newVesselPress) ∧ Book(x) → PublishedIn(x, english)) ::: All of New Vessel Press's published books are in English.\nBook(neapolitanChronicles) ∧ Publish(newVesselPress, neapolitanChronicles) ::: Neapolitan Chronicles is a book published by New Vessel Press.\nBook(palaceOfFlies) ∧ Publish(newVesselPress, palaceOfFlies) ::: Palace of Flies is a book published by New Vessel Press.",
      "First-Order-Logic Question": "Translate(palaceOfFlies, italian) ::: Palace of Flies was translated from Italian."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 153,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Juliana is not poised.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Owns(x, largeDesktopMonitor) → (WorkRegularlyAtHome(x) ∧ TidyOrganize(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (HasHomeOffice(x) → Owns(x, largeDesktopMonitor)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n∀x (WorkRegularlyAtHome(x) → TidyOrganize(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n∀x (WorkRegularlyAtHome(x) → VisitStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n∀x (TidyOrganize(x) → (¬GoToBedLate(x) ∧ ¬WakeUpLate(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n¬((GoToBedLate(remy) ∧ WakeUpLate(remy) ∧ TidyOrganize(remy)) → (¬GoToBedLate(remy) ∧ ¬WakeUpLate(remy))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
      "First-Order-Logic Question": "VisitStore(remy) ::: Remy visits the office supply store regularly."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Wonderful(x) ::: x is wonderful",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 154,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Molly is not substantial.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Owns(x, y) ∧ LargeDesktopMonitor(x, y) → (WorkRegularlyAtHome(x) ∧ TidyOrganize(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStockedImpressiveHomeOffice(x) → (Owns(x, y) ∧ LargeDesktopMonitor(x, y))) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x (WorkRegularlyAtHome(x) → TidyOrganize(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "∀x (WorkRegularlyAtHome(x) → VisitOfficeStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.",
        "∀x (TidyOrganize(x) → (¬GoToBedLate(x) ∧ ¬WakeUpAfterNoon(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "(GoToBedLate(remy) ∧ WakeUpAfterNoon(remy) ∧ TidyOrganize(remy)) ⊕ (¬GoToBedLate(remy) ∧ ¬WakeUpAfterNoon(remy) ∧ ¬TidyOrganize(remy)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "First-Order-Logic Question": "FullyStockedImpressiveHomeOffice(remy) ∧ VisitOfficeStore(remy) ::: Remy has a fully stocked and impressive home office and also visits the office supply store regularly."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 155,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Juliana is not octagonal.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Owns(x, largeDesktopMonitor) → (WorkRegularly(x) ∧ WorkOften(x) ∧ Home(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.",
        "∀x (FullyStocked(x) ∧ Impressive(x) → Owns(x, largeDesktopMonitor)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.",
        "∀x ((WorkRegularly(x) ∧ WorkOften(x) ∧ Home(x)) → (Tidy(x) ∧ Organize(x))) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.",
        "∀x ((WorkRegularly(x) ∧ WorkOften(x) ∧ Home(x)) → VisitStore(x)) ::: All people who work regularly and often at home visit the office supply store regularly.",
        "∀x (Tidy(x) ∧ Organize(x) → (¬Late(x) ∧ WakeLate(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.",
        "Late(remy) ∧ WakeLate(remy) ∧ Tidy(remy) ∧ Organize(remy) ⊕ (¬Late(remy) ∧ ¬WakeLate(remy) ∧ ¬Tidy(remy) ∧ ¬Organize(remy)) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."
      ],
      "First-Order-Logic Question": "((Late(remy) ∧ WakeLate(remy)) ∨ VisitStore(remy)) → (¬Tidy(remy) ∧ ¬Owns(remy, largeDesktopMonitor)) ::: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 156,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Clarence is not substantial.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Human(x) → Mortal(x)) ::: All humans are mortal.",
        "∀x (Greek(x) → Human(x)) ::: All Greeks are humans."
      ],
      "First-Order-Logic Question": "∃x (Greek(x) ∧ Mortal(x)) ::: Some Greeks are mortal."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 157,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Graciela is not talkative.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (LibraryWorker(x) → ¬CSDeptStudent(x)) ::: No students who work in the library are from the computer science department.\n∀x (PartTimeJobStudent(x) → LibraryWorker(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (DatabaseStudent(x) → CSDeptStudent(x)) ::: All students who take the database course are from the computer science department.\n∀x (Instructs(professorDavid, x) → DatabaseStudent(x)) ::: All students instructed by professor David are taking the database course.\n∀x (LabWorker(x) → Instructs(professorDavid, x)) ::: All students working in the lab are instructed by professor David.\nLabWorker(james) ::: James is a student working in the lab.\n¬(PartTimeJobStudent(jack) ∨ LabWorker(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.",
      "First-Order-Logic Question": "PartTimeJobStudent(james) ::: James has a part-time job offered by the university."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 158,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Joseph is not wonderful.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (WorkLibrary(x) → ¬ComputerScienceDept(x)) ::: No students who work in the library are from the computer science department.\n∀x (PartTimeJob(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (TakeDatabaseCourse(x) → ComputerScienceDept(x)) ::: All students who take the database course are from the computer science department.\n∀x (Instructed(x, david) → TakeDatabaseCourse(x)) ::: All students instructed by professor David are taking the database course.\n∀x (WorkLab(x) → Instructed(x, david)) ::: All students working in the lab are instructed by professor David.\nWorkLab(james) ::: James is a student working in the lab.\n¬(PartTimeJob(jack) ∨ WorkLab(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.",
      "First-Order-Logic Question": "¬PartTimeJob(james) ::: James does not have a part-time job offered by the university."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative",
      "Wonderful(x) ::: x is wonderful"
    ]
  },
  {
    "id": 159,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Rose is octagonal.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Student(x) ∧ WorkLibrary(x) → ¬ComputerScienceDept(x)) ::: No students who work in the library are from the computer science department.\n∀x (Student(x) ∧ PartTimeJob(x) offeredByUniversity(x) → WorkLibrary(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (Student(x) ∧ TakeDatabaseCourse(x) → ComputerScienceDept(x)) ::: All students who take the database course are from the computer science department.\n∀x (Student(x) ∧ Instructed(x, david) → TakeDatabaseCourse(x)) ::: All students instructed by professor David are taking the database course.\n∀x (Student(x) ∧ WorkingLab(x) → Instructed(x, david)) ::: All students working in the lab are instructed by professor David.\nStudent(james) ∧ WorkingLab(james) ::: James is a student working in the lab.\n¬(PartTimeJob(jack) ∧ WorkLibrary(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.",
      "First-Order-Logic Question": "TakeDatabaseCourse(james) ∨ PartTimeJob(james) ::: James either takes the database course or has a part-time job offered by the university."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 160,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Molly is not poised.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (LibraryWorker(x) → ¬ComputerScienceStudent(x)) ::: No students who work in the library are from the computer science department.\n∀x (PartTimeJobStudent(x) → LibraryWorker(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (DatabaseStudent(x) → ComputerScienceStudent(x)) ::: All students who take the database course are from the computer science department.\n∀x (Instructs(professorDavid, x) → DatabaseStudent(x)) ::: All students instructed by professor David are taking the database course.\n∀x (LabWorker(x) → Instructs(professorDavid, x)) ::: All students working in the lab are instructed by professor David.\nLabWorker(james) ::: James is a student working in the lab.\n¬(PartTimeJobStudent(jack) ∨ LabWorker(jack)) ::: Jack neither has a part-time job offered by the university nor works in the lab.",
      "First-Order-Logic Question": "DatabaseStudent(jack) ::: Jack takes the database course."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 161,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Graciela is not octagonal.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Likes(george, music) → WantsToCompose(george) ::: If George likes music, he wants to compose.\nHasAccess(george) → Composes(george) ::: If George has access to a program, he can compose.\n(Composes(george) ∧ WantsToCompose(george)) → Composes(george) ::: If George can compose and wants to compose, he will compose.",
      "First-Order-Logic Question": "(Likes(george, music) ∧ HasAccess(george)) → Composes(george) ::: If George likes music and has access to a program, he will compose."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 162,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Juliana is not wonderful.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "Likes(george, music) → WantsToCompose(george) ::: If George likes music, he wants to compose.",
        "HasAccess(george, program) → CanCompose(george) ::: If George has access to a program, he can compose.",
        "CanCompose(george) ∧ WantsToCompose(george) → WillCompose(george) ::: If George can compose and wants to compose, he will compose."
      ],
      "First-Order-Logic Question": "¬WillCompose(george) → ¬CanCompose(george) ::: If George will not compose, George can not compose."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 163,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Molly is frank.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Hawk(x) → NeverLands(x)) ::: A hawk never lands.",
        "∃x (Bird(x) ∧ Hawk(x)) ::: Some birds are hawks."
      ],
      "First-Order-Logic Question": "∀x (Bird(x) → Lands(x)) ::: All birds land"
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 164,
    "context": [
      "Molly is frank.",
      "Joseph is not wonderful.",
      "Jasper is not poised.",
      "Rose is octagonal.",
      "Juliana is not substantial.",
      "Juliana is talkative.",
      "Molly is not talkative.",
      "Juliana is wonderful.",
      "Clarence is substantial.",
      "Clarence is not frank.",
      "Rose is talkative.",
      "Jasper is not wonderful.",
      "If Molly is talkative or Molly is poised, then Joseph is substantial.",
      "Someone being talkative is equivalent to being frank.",
      "If there is someone who is both substantial and frank, then Joseph is octagonal and Juliana is talkative.",
      "If there is at least one people who is poised or octagonal, then Juliana is not talkative.",
      "If Juliana is wonderful, then Molly is poised.",
      "Jasper being talkative is equivalent to Molly being wonderful and Molly being substantial.",
      "If there is someone who is substantial, then Juliana is not frank.",
      "If there is someone who is octagonal, then Joseph is substantial and Juliana is frank.",
      "If someone is frank, then he is wonderful, and vice versa.",
      "If Jasper is poised and Clarence is octagonal, then Rose is not wonderful.",
      "If there is someone who is not wonderful, then Juliana is not frank.",
      "Molly is not wonderful if and only if Rose is frank."
    ],
    "question": "Joseph is octagonal.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Rose(x) ∧ GivenOut(x, monday8pm)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x (Rose(x) ∧ GivenOut(x, TV) → On(x, Bachelor)) ::: Every rose given out on TV is on the Bachelor.\n∀x (On(x, Bachelor) → Portray(x, realPeople)) ::: Everything on the Bachelor portrays the lives of real people.\n∀x (Portray(x, realPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTVShow(breakingBad) ::: Breaking Bad is not a reality TV show.",
      "First-Order-Logic Question": "On(breakingBad, monday8pm) ::: Breaking Bad is on Monday at 8 pm."
    },
    "predicates": [
      "Frank(x) ::: x is frank",
      "Wonderful(x) ::: x is wonderful",
      "Poised(x) ::: x is poised",
      "Octagonal(x) ::: x is octagonal",
      "Substantial(x) ::: x is substantial",
      "Talkative(x) ::: x is talkative"
    ]
  },
  {
    "id": 165,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Tristin is not asleep.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Roses(x) ∧ GivenOut(x, monday8pm)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x (Roses(x) → On(x, Bachelor)) ::: Every rose given out on TV is on the Bachelor.\n∀x (On(Bachelor, x) → Portray(x, realPeople)) ::: Everything on the Bachelor portrays the lives of real people.\n∀x (Portray(x, realPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTVShow(BreakingBad) ::: Breaking Bad is not a reality TV show.",
      "First-Order-Logic Question": "On(monday8pm, BreakingBad) ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned",
      "Elderly(x) ::: x is an elderly person",
      "Courteous(x) ::: x is courteous",
      "Timid(x) ::: x is timid",
      "Excited(x) ::: x is excited",
      "Various(x) ::: x is various",
      "Disgusted(x) ::: x is disgusted"
    ]
  },
  {
    "id": 166,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Kody is asleep.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (Monday(x) ∧ Time(x, 8pm) ∧ GivenOut(roses, x)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x (GivenOut(x, TVShow) → On(x, Bachelor)) ::: Every rose given out on TV is on the Bachelor.\n∀x (On(x, Bachelor) → Portray(x, RealPeople)) ::: Everything on the Bachelor portrays the lives of real people.\n∀x (Portray(x, RealPeople) → RealityTVShow(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬RealityTVShow(BreakingBad) ::: Breaking Bad is not a reality TV show.",
      "First-Order-Logic Question": "GivenOut(roses, Monday8pm) → On(BreakingBad, Monday8pm) ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 167,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Crosby is not melodic.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Nazi(heinrich) ∧ Politician(heinrich) ∧ Member(heinrich, StateParliament) ∧ Member(heinrich, Reichstag) ::: Heinrich Scmidt was a Nazi German politician. \nGerman(heinrich) ⊕ Russian(heinrich) ::: Heinrich Schmidt was either German or Russian.",
      "First-Order-Logic Question": "German(heinrich) ⊕ Russian(heinrich) ::: Heinrich Schmidt was either German or Russian."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned",
      "Collier(x) ::: x is Collier",
      "John(x) ::: x is John",
      "Baird(x) ::: x is Baird",
      "Quinlan(x) ::: x is Quinlan",
      "Gabriel(x) ::: x is Gabriel",
      "Arthur(x) ::: x is Arthur",
      "Nathalie(x) ::: x is Nathalie",
      "Collier(x) ::: x is Collier"
    ]
  },
  {
    "id": 168,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Godfrey is not zany.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "German(heinrich) ∧ Nazi(heinrich) ::: Heinrich Scmidt was a Nazi German politician.\nMember(heinrich, parliament) ∧ Parliament(parliament) ∧ Member(heinrich, reichstag) ∧ Reichstag(reichstag) ::: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
      "First-Order-Logic Question": "∃x (Nazi(x) ∧ Member(x, parliament) ∧ Member(x, reichstag)) ::: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned",
      "Elderly(x) ::: x is an elderly person",
      "Courteous(x) ::: x is courteous",
      "Timid(x) ::: x is timid",
      "Excited(x) ::: x is excited",
      "Various(x) ::: x is various",
      "Disgusted(x) ::: x is disgusted",
      "Melodic(x) ::: x is melodic",
      "Bad(x) ::: x is bad",
      "Asleep(x) ::: x is asleep",
      "Zany(x) ::: x is zany",
      "Bewildered(x) ::: x is bewildered",
      "Strong(x) ::: x is strong"
    ]
  },
  {
    "id": 169,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Tristin is not zany.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Nazi(heinrich) ∧ Politician(heinrich) ∧ Member(heinrich, prussianStateParliament) ∧ Member(heinrich, naziReichstag) ::: Heinrich Scmidt was a Nazi German politician who was a member of the Prussian State Parliament and the Nazi Reichstag.",
      "First-Order-Logic Question": "∀x (Politician(x) → ¬Member(x, naziReichstag)) ::: No politicians are part of the Nazi Reichstag."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned",
      "Elderly(x) ::: x is an elderly person",
      "Courteous(x) ::: x is courteous",
      "Timid(x) ::: x is timid",
      "Excited(x) ::: x is excited",
      "Various(x) ::: x is various",
      "Disgusted(x) ::: x is disgusted",
      "Melodic(x) ::: x is melodic",
      "Bad(x) ::: x is bad",
      "Asleep(x) ::: x is asleep",
      "Zany(x) ::: x is zany",
      "Bewildered(x) ::: x is bewildered",
      "Strong(x) ::: x is strong"
    ]
  },
  {
    "id": 170,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Cyril is not zany.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\nSevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬(MildFlu(x) ∧ LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n(ColorectalCancer(x) ∧ BileDuctCancer(x) ∧ LowSurvivalRate(x)) → ¬(ColorectalCancer(x) ∧ BileDuctCancer(x)) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
      "First-Order-Logic Question": "SevereCancer(colorectalCancer) ::: Colorectal cancer is a severe cancer"
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 172,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Barrett is bewildered.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\nBileDuctCancer(bileDuctCancer) ∧ SevereCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n¬(MildFlu(x) ∧ LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\n(ColorectalCancer(colorectalCancer) ∧ BileDuctCancer(colorectalCancer) ∧ LowSurvivalRate(colorectalCancer)) → ¬(ColorectalCancer(colorectalCancer) ∧ BileDuctCancer(colorectalCancer)) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
      "First-Order-Logic Question": "¬(MildFlu(colorectalCancer) ∧ Cholangiocarcinoma(colorectalCancer)) → (BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ::: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 173,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Godwin is not bad.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (EatSalad(x) → Conscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (GrewUpHealth(x) → EatSalad(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (FulfillNutritionalIntake(x) → GrewUpHealth(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\nGoodRelationship(x) → FulfillNutritionalIntake(x) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\nGoodRelationship(x) → ¬EatSalad(x) ::: If people have good relationships with their parents, then they do not eat salads regularly.\nVisitGym(x) → AlwaysFulfillNutritionalIntake(x) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUpHealth(taylor) ∧ GoodRelationship(taylor)) ∨ (¬GrewUpHealth(taylor) ∧ ¬GoodRelationship(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
      "First-Order-Logic Question": "EatSalad(taylor) ::: Taylor eats salads regularly."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 174,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Tristin is asleep.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (EatSalads(x) → (Conscious(x) ∧ FulfillIntakes(x))) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (GrewUpHealthConscious(x) → EatSalads(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (FulfillIntakes(x) → GrewUpHealthConscious(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\nGoodRelationship(x) → FulfillIntakes(x) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\nGoodRelationship(x) → ¬EatSalads(x) ::: If people have good relationships with their parents, then they do not eat salads regularly.\nVisitGym(x) → FulfillIntakes(x) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUpHealthConscious(taylor) ∧ GoodRelationship(taylor)) ⊕ ¬(GrewUpHealthConscious(taylor) ∨ GoodRelationship(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
      "First-Order-Logic Question": "VisitGym(taylor) ::: Taylor visits the gym at least once a day."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 175,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Kody is bewildered.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (EatSalads(x) → (Conscious(x) ∧ FulfillNutritionalIntakes(x))) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (GrewUpHealthConscious(x) → EatSalads(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (FulfillNutritionalIntakes(x) → GrewUpHealthConscious(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\nGoodRelationship(x) → FulfillNutritionalIntakes(x) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\nGoodRelationship(x) → ¬EatSalads(x) ::: If people have good relationships with their parents, then they do not eat salads regularly.\nVisitGym(x) → FulfillNutritionalIntakes(x) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(GrewUpHealthConscious(taylor) ∧ GoodRelationship(taylor)) ⊕ ¬(GrewUpHealthConscious(taylor) ∨ GoodRelationship(taylor)) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
      "First-Order-Logic Question": "¬GrewUpHealthConscious(taylor) ∧ ¬VisitGym(taylor) ::: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 176,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Barrett is strong.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "OlympicGames(x) → SportingEvent(x) ::: The Olympic games is a sporting event.\nLastOlympicGames(tokyo) ::: The last Olympic games was in Tokyo.\nWinMostMedals(unitedStates, tokyo) ::: The United States won the most medals in Tokyo.",
      "First-Order-Logic Question": "SportingEvent(worldChampionships) ::: The world championships is a sporting event."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 177,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Tristin is not bad.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "OlympicGames(x) → SportingEvent(x) ::: The Olympic games is a sporting event.\nLastOlympicGames(tokyo) ::: The last Olympic games was in Tokyo.\nLocation(unitedStates, tokyo) ∧ WonMostMedals(unitedStates) ::: The United States won the most medals in Tokyo.",
      "First-Order-Logic Question": "¬Location(lastOlympicGames, tokyo) ::: The last Olympic games were not in Tokyo."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 178,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Godwin is bad.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "SportingEvent(olympicGames) ::: The Olympic games is a sporting event.\nLastOlympicGames(tokyo) ∧ Location(lastOlympicGames, tokyo) ::: The last Olympic games was in Tokyo.\nWonMostMedals(unitedStates, tokyo) ::: The United States won the most medals in Tokyo.",
      "First-Order-Logic Question": "WonMostMedals(unitedStates, lastOlympicGames) ::: The United States won the most medals in the last Olympic games."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned",
      "Collier(x) ::: x is Collier",
      "John(x) ::: x is John",
      "Baird(x) ::: x is Baird",
      "Quinlan(x) ::: x is Quinlan",
      "Gabriel(x) ::: x is Gabriel",
      "Arthur(x) ::: x is Arthur",
      "Nathalie(x) ::: x is Nathalie"
    ]
  },
  {
    "id": 179,
    "context": [
      "Crosby is asleep.",
      "Cyril is asleep.",
      "Cyril is not zany.",
      "Kody is bewildered.",
      "Tristin is not melodic.",
      "Godwin is not bad.",
      "Tristin is asleep.",
      "Cyril is not bad.",
      "Kody is not melodic.",
      "Cyril is not bewildered.",
      "Godwin is zany.",
      "Cyril is strong.",
      "If there is someone who is either asleep or not strong, then Barrett is bad.",
      "If everyone is not strong, then Crosby is zany and Barrett is not asleep.",
      "Someone being both strong and bewildered is equivalent to being melodic and not asleep.",
      "If someone is both zany and not bad, then he is not strong.",
      "If there is someone who is either bad or not asleep, then Crosby is melodic.",
      "If Kody is zany, then Kody is bad and Crosby is asleep, and vice versa.",
      "Kody being strong implies that Godfrey is not asleep.",
      "As long as someone is zany, he is strong and melodic.",
      "If someone is bewildered or not strong, then he is not bad.",
      "If there is someone who is bewildered, then Barrett is not strong.",
      "If there is at least one people who is not strong, then Cyril is melodic and Godwin is not zany.",
      "It can be concluded that Tristin is zany once knowing that Kody is not asleep or Cyril is melodic."
    ],
    "question": "Godfrey is asleep.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": [
        "∀x (Horse(x) → Hooves(x)) ::: All horses have hooves.",
        "∀x (Human(x) → ¬Hooves(x)) ::: No humans have hooves."
      ],
      "First-Order-Logic Question": "∃x (Human(x) ∧ Horse(x)) ::: Some humans are horses."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 180,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Montague is not fat.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Flies(susan, LGA) ::: Susan flies to LGA airport.\nDeparture(x, y) ∧ Arrival(x, y) ⊕ ¬(x = y) ::: The departure and arrival can not be the same airport.\nFrom(john, LGA) ::: John flies from LGA airport.",
      "First-Order-Logic Question": "From(susan, LGA) ::: Susan flies from LGA airport."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 181,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Montague is not southern.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Flies(susan, LGA) ::: Susan flies to LGA airport.\n∀x (Departure(x, y) ∧ Arrival(x, z) → NotSame(y, z)) ::: The departure and arrival can not be the same airport.\nFlies(john, LGA) ::: John flies from LGA airport.",
      "First-Order-Logic Question": "Flies(john, LGA) ::: John flies to LGA airport."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 182,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Christopher is southern.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.\n∀x (OwnsPet(x) → Love(x, animals)) ::: If someone owns a pet, then they love animals.\nOwnsPet(tom) ::: Tom is a pet owner.",
      "First-Order-Logic Question": "¬Grumpy(tom) ::: Tom is a grumpy person."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 183,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Juliana is strong.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (NiceToAnimals(x) → ¬MeanToAnimals(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ MeanToAnimals(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → NiceToAnimals(x)) ::: All animal lovers are nice to animals.\n∀x (OwnsPet(x) → Love(x, animals)) ::: If someone owns a pet, then they love animals.\nOwnsPet(tom) ::: Tom is a pet owner.",
      "First-Order-Logic Question": "¬(Grumpy(tom) ∧ MeanToAnimals(tom)) ::: Tom is not a grumpy person and mean to animals."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 184,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Unwin is persistent.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (NiceTo(x) → ¬MeanTo(x)) ::: No one nice to animals is mean to animals.\n∃x (Grumpy(x) ∧ MeanTo(x)) ::: Some grumpy people are mean to animals.\n∀x (AnimalLover(x) → NiceTo(x)) ::: All animal lovers are nice to animals.\n∀x (Owns(x, y) → Love(x, y)) ::: If someone owns a pet, then they love animals.\nOwns(tom, pet) ::: Tom is a pet owner.",
      "First-Order-Logic Question": "¬(Grumpy(tom) ∧ MeanTo(tom)) → ¬(Grumpy(tom) ∨ AnimalLover(tom)) ::: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 185,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Tyra is not persistent.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "¬Podcast(x) ⊕ ¬Novel(x) ::: A podcast is not a novel.\n∀x (BornInCity(x, y) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ((Book(x) ∧ Novel(x)) → (WrittenBy(y, x) → NovelWriter(y))) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nAmerican(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.\nBook(familyHistory) ∧ WrittenBy(daniShapiro, familyHistory) ∧ Novel(familyHistory) ∧ Year(familyHistory, 2003) ::: Family History is a novel written in 2003.\nCreated(daniShapiro, familySecrets) ∧ Title(familySecrets, familySecrets) ∧ Podcast(familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\nCity(boston) ∧ American(boston) ::: Boston is an American city.",
      "First-Order-Logic Question": "NovelWriter(daniShapiro) ::: Dani Shapiro is a novel writer."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 186,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "George is persistent.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "¬Podcast(x) ⊃ Novel(x) ::: A podcast is not a novel.\n∀x (BornInCity(x, y) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ((Book(x) ∧ Novel(x)) → (WrittenBy(y, x) → NovelWriter(y))) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nAmerican(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.\nBook(familyHistory) ∧ WrittenBy(daniShapiro, familyHistory) ∧ Novel(familyHistory) ∧ PublishedIn(familyHistory, year2003) ::: Family History is a novel written in 2003.\nCreated(daniShapiro, familySecrets) ∧ Title(familySecrets, familySecrets) ∧ Podcast(familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\nAmerican(boston) ∧ City(boston) ::: Boston is an American city.",
      "First-Order-Logic Question": "Novel(familySecrets) ::: Family Secrets is a novel."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 187,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Juliana is new.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "¬Podcast(x) ⊃ ¬Novel(x) ::: A podcast is not a novel.\n∀x (BornInCity(x, americanCity) → American(x)) ::: If a person is born in American City, the person is American.\n∀x ((Book(x) ∧ Novel(x)) → (WrittenBy(y, x) → NovelWriter(y))) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nAmerican(daniShapiro) ∧ Writer(daniShapiro) ::: Dani Shapiro is an American writer.\nBook(familyHistory) ∧ WrittenBy(daniShapiro, familyHistory) ∧ Novel(familyHistory) ∧ Year(familyHistory, 2003) ::: Family History is a novel written in 2003.\nCreated(daniShapiro, familySecrets) ∧ Podcast(familySecrets) ::: Dani Shapiro created a podcast called Family Secrets.\nBornInCity(daniShapiro, boston) ::: Boston is an American city.",
      "First-Order-Logic Question": "BornInCity(daniShapiro, boston) ::: Dani Shapiro was born in Boston."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 188,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Juliana is not attractive.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.",
      "First-Order-Logic Question": "¬American(yuri) ::: Yuri is an American."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned",
      "Elderly(x) ::: x is an elderly person",
      "Courteous(x) ::: x is courteous",
      "Timid(x) ::: x is timid",
      "Excited(x) ::: x is excited",
      "Various(x) ::: x is various",
      "Disgusted(x) ::: x is disgusted",
      "Strong(x) ::: x is strong",
      "Attractive(x) ::: x is attractive",
      "Southern(x) ::: x is southern",
      "Persistent(x) ::: x is persistent",
      "Fat(x) ::: x is fat",
      "New(x) ::: x is new"
    ]
  },
  {
    "id": 189,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "George is not attractive.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.",
      "First-Order-Logic Question": "¬(American(yuri) ∧ BasketballPlayer(yuri)) ::: Yuri is not an American basketball player."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 190,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Montague is not strong.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.",
      "First-Order-Logic Question": "BasketballPlayer(yuri) ∧ American(yuri) ::: Yuri is an American basketball player."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 191,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Juliana is not persistent.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.",
      "First-Order-Logic Question": "¬WearLargeShoes(yuri) → (American(yuri) ∧ BasketballPlayer(yuri)) ::: If Yuri does not wear large shoes, then Yuri is an American basketball player."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 192,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Juliana is attractive.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∃x (BasketballPlayer(x) ∧ ¬American(x)) ::: Some basketball players are not American.\n∀x (BasketballPlayer(x) → Tall(x)) ::: All basketball players are tall.\n∀x (Tall(x) → WearLargeShoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (WearLargeShoes(x) → WearLargeClothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬WearLargeClothes(yuri) ::: Yuri does not wear large-size clothes.",
      "First-Order-Logic Question": "¬(American(yuri) ∧ BasketballPlayer(yuri)) → BasketballPlayer(yuri) ::: If Yuri is not an American basketball player, then Yuri is a basketball player."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 193,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "George is strong.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Happy(x) ∨ Sad(x)) ::: Events are either happy or sad.\n∃x Happy(x) ::: At least one event is happy.",
      "First-Order-Logic Question": "∀x Sad(x) ::: All events are sad."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 194,
    "context": [
      "Tyra is not persistent.",
      "Juliana is new.",
      "Cyril is not persistent.",
      "Christopher is new.",
      "Unwin is new.",
      "Cyril is southern.",
      "George is not persistent.",
      "Tyra is not new.",
      "Christopher is southern.",
      "George is not strong.",
      "Montague is not attractive.",
      "Cyril is not attractive.",
      "If someone is not strong and not persistent, then he is not southern, and vice versa.",
      "If Unwin is not strong and Juliana is not southern, then Tyra is not attractive.",
      "All persistent people are not new.",
      "Someone being neither fat nor strong is equivalent to being attractive.",
      "If all people are not new, then Montague is not attractive and Montague is southern.",
      "As long as someone is either southern or not attractive, he is not strong and not new.",
      "Someone is not strong if and only if he is southern.",
      "Cyril being not persistent is equivalent to Christopher being southern.",
      "All persistent people are southern.",
      "If someone is not fat, then he is attractive, and vice versa.",
      "If someone is southern, then he is both new and not fat.",
      "Montague being new implies that Tyra is fat."
    ],
    "question": "Christopher is not attractive.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Winner(steinhauer, duMaurierClassic1992) ∧ Participant(steinhauer, duMaurierClassic1992) ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (LeaderboardTie(x) ∧ From(x, belgium)) ∧ OnLeaderboard(descampe, duMaurierClassic1992) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n∀x (OnLeaderboard(x, duMaurierClassic1992) → Participant(x, duMaurierClassic1992)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
      "First-Order-Logic Question": "¬Winner(steinhauer, duMaurierClassic1992) ::: Steinhauer was not the winner of the 1992 du Maurier Classic."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 195,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Lyndon is cultural.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Winner(steinhauer, duMaurierClassic1992) ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nParticipant(steinhauer, duMaurierClassic1992) ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (LeaderboardTie(x) ∧ From(x, belgium)) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFrom(descampe, belgium) ∧ OnLeaderboard(descampe, duMaurierClassic1992) ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n∀x (OnLeaderboard(x, duMaurierClassic1992) → Participant(x, duMaurierClassic1992)) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
      "First-Order-Logic Question": "LeaderboardTie(descampe) ∧ OnLeaderboard(descampe, duMaurierClassic1992) ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 196,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Lewis is not hollow.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Barks(x) → Likes(jane, x)) ::: If an animal barks, then Jane does not like it.\n∀x (Dogs(x) → Barks(x)) ::: All dogs are animals that bark.\n∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.\n∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\n∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\n¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
      "First-Order-Logic Question": "Terricolous(kiki) ::: KiKi is terricolous."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 197,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Brandi is cultural.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Barks(x) → ¬Likes(jane, x)) ::: If an animal barks, then Jane does not like it.\n∀x (Dogs(x) → (Barks(x) ∧ HasLegs(x))) ::: All dogs are animals that bark.\n∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.\n∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\n∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\n¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
      "First-Order-Logic Question": "Barks(kiki) ∧ Dogs(kiki) ::: KiKi barks and is a dog."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 198,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Brandi is creative.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "∀x (Barks(x) → ¬Likes(jane, x)) ::: If an animal barks, then Jane does not like it.\n∀x (Dogs(x) → Barks(x)) ::: All dogs are animals that bark.\n∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.\n∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\n∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\n¬(Jumps(kiki) ∨ HasLegs(kiki)) → (Terricolous(kiki) ∨ HasLegs(kiki)) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
      "First-Order-Logic Question": "¬Barks(kiki) ∧ ¬Dogs(kiki) ::: KiKi neither barks nor is a dog."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 199,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Lyndon is creative.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Person(ailton) ∧ Born(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ Loan(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nPerson(ailtonSilva) ∧ Brazilian(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nClub(nautico) ∧ Club(braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "¬∃x (PlaysFor(x, nautico) ∧ Brazilian(x)) ::: No one playing for Nautico is Brazilian."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 200,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Brandi is hollow.",
    "answer": "B",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Person(ailton) ∧ BornIn(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ Loan(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nPerson(ailtonSilva) ∧ Brazilian(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nClub(nautico) ∧ Club(braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "DoesNotPlayFor(ailtonSilva, club) ::: Ailton Silva does not play for a football club."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 201,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Brandi is not hollow.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Person(ailton) ∧ Born(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ Loan(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nBrazilian(ailton) ∧ FootballPlayer(ailton) ∧ PlaysFor(ailton, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nTeam(nautico, braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "¬∃x Loan(ailton, club) ::: Ailton was not loaned out to a football club."
    },
    "predicates": [
      "Blue(x) ::: x is blue",
      "Serious(x) ::: x is serious",
      "Fresh(x) ::: x is fresh",
      "Entire(x) ::: x is entire",
      "Accurate(x) ::: x is accurate",
      "Concerned(x) ::: x is concerned"
    ]
  },
  {
    "id": 202,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Lewis is shiny.",
    "answer": "A",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Person(ailton) ∧ Born(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ Loan(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nPerson(ailtonSilva) ∧ Country(ailtonSilva, brazil) ∧ FootballPlayer(ailtonSilva) ∧ PlaysFor(ailtonSilva, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nClub(nautico) ∧ Club(braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "PlaysFor(ailtonSilva, fluminense) ::: Ailton Silva played for Fluminense."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  },
  {
    "id": 203,
    "context": [
      "Clarence is lovely.",
      "Katelynn is not shiny.",
      "Seymour is not shiny.",
      "Katelynn is southern.",
      "Clarence is not creative.",
      "Seymour is not lovely.",
      "Brandi is not cultural.",
      "Lyndon is not lovely.",
      "Seymour is cultural.",
      "Luka is shiny.",
      "Katelynn is cultural.",
      "Lyndon is not creative.",
      "It can be concluded that Katelynn is not southern once knowing that Brandi is cultural or Seymour is creative.",
      "If there is someone who is shiny, then Lewis is not cultural and Seymour is creative.",
      "If there is at least one people who is not creative or not southern, then Brandi is not hollow.",
      "Seymour is not southern if and only if Clarence is not lovely.",
      "Someone is shiny if and only if he is hollow.",
      "Someone who is cultural is always both shiny and not creative.",
      "Someone who is both southern and lovely is always not cultural.",
      "If Katelynn is southern, then Seymour is not cultural and Lewis is shiny.",
      "Someone being both hollow and lovely is equivalent to being cultural and not southern.",
      "If there is at least one people who is neither cultural nor southern, then Seymour is creative.",
      "Someone is creative and not hollow if and only if he is southern and lovely.",
      "Seymour being creative is equivalent to Katelynn being cultural and Katelynn being southern."
    ],
    "question": "Luka is not creative.",
    "answer": "C",
    "raw_logic_programs": {
      "First-Order-Logic Rules": "Person(ailton) ∧ Born(ailton, 1995) ∧ KnownAs(ailton, ailton) ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nFootballPlayer(ailton) ∧ Loan(ailton, braga) ::: Ailton is a football player who was loaned out to Braga.\nBrazilian(ailton) ∧ FootballPlayer(ailton) ∧ PlaysFor(ailton, nautico) ::: Ailton Silva is a Brazilian footballer who plays for Nautico.\nClub(nautico) ∧ Club(braga) ∧ SameClub(nautico, braga) ::: Nautico is a football club along with Braga.\nClub(fluminense) ::: Fluminense is a football club.",
      "First-Order-Logic Question": "Loan(ailton, club) ::: Ailton Silva was loaned out to a football club."
    },
    "predicates": [
      "Lovely(x) ::: x is lovely",
      "Shiny(x) ::: x is shiny",
      "Southern(x) ::: x is southern",
      "Creative(x) ::: x is creative",
      "Cultural(x) ::: x is cultural",
      "Hollow(x) ::: x is hollow"
    ]
  }
]