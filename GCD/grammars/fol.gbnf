# root is the starting point, generating a full first-order logic expression
root ::= expr

# expr defines the structure of expressions, including quantified expressions
expr ::= quantified | binary | unary | atom

# quantified expressions involve a quantifier and a variable, followed by an expression
quantified ::= quantifier var "." expr

# quantifiers for universal and existential quantification
quantifier ::= "\u2200" | "\u2203"

# binary expressions include two sub-expressions joined by a binary operator
binary ::= expr binop expr

# binary operators as per the logic operations defined
binop ::= "\u2227" | "\u2228" | "\u2295" | "\u2192" | "\u2194"

# unary expressions include a unary operator followed by a single sub-expression
unary ::= unop expr

# unary operator for negation
unop ::= "¬"

# atoms are the simplest form of expressions, typically just variables
atom ::= var

# var defines a variable as a single lowercase letter
var ::= [a-z]

# Example usage might generate something like:
# ∀x. (x → ∃y. (y ∧ ¬x))
