[
  {
    "id": 1014,
    "question": "Bonnie performs in school talent shows often.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))\n∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))\n∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))\n∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))\n∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))\nInThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInThisClub(bonnie) ∧ (Perform(bonnie, schoolTalentShow))\n\"\"\""
    ]
  },
  {
    "id": 1015,
    "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))\n∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))\n∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))\n∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))\n∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))\nInThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ⊕ Chaperone(bonnie, highSchoolDance)) → (Studen(x) ∧ AttendSchool(x)) ⊕ (YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer))\n\"\"\""
    ]
  },
  {
    "id": 1016,
    "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))\n∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))\n∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))\n∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))\n∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))\nInThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Chaperone(bonnie, highSchoolDance) ⊕ Perform(bonnie, schoolTalentShow)) → (YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ∧ (InActive(bonnie) ∧ Disinterested(bonnie) ∧ MemberOf(bonnie, community))\n\"\"\""
    ]
  },
  {
    "id": 1208,
    "question": "James has lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))\n∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))\n∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))\n∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))\n∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))\n∀x (Manager(x) → ¬Work(x, home))\n¬(Manager(james) ⊕ AppearIn(james, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHasLunch(james, company)\n\"\"\""
    ]
  },
  {
    "id": 1209,
    "question": "James does not have lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))\n∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))\n∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))\n∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))\n∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))\n∀x (Manager(x) → ¬Work(x, home))\n¬(Manager(james) ⊕ AppearIn(james, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬HasLunch(james, company)\n\"\"\""
    ]
  },
  {
    "id": 1210,
    "question": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))\n∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))\n∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))\n∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))\n∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))\n∀x (Manager(x) → ¬Work(x, home))\n¬(Manager(james) ⊕ AppearIn(james, company))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nManager(james) → ¬Work(james, home)\n\"\"\""
    ]
  },
  {
    "id": 563,
    "question": "There is an animal.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))\n∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))\n∀x (Human(x) → Mammal(x))\n∀x (Mammal(x) → Animal(x))\n∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Animal(x))\n\"\"\""
    ]
  },
  {
    "id": 564,
    "question": "No one gets the flu.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))\n∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))\n∀x (Human(x) → Mammal(x))\n∀x (Mammal(x) → Animal(x))\n∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Human(x) → ¬Get(x, flu))\n\"\"\""
    ]
  },
  {
    "id": 565,
    "question": "Symptoms of Monkeypox include coughing.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))\n∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))\n∀x (Human(x) → Mammal(x))\n∀x (Mammal(x) → Animal(x))\n∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SymptonOf(x, monkeypoxVirus) ∧ Coughing(x))\n\"\"\""
    ]
  },
  {
    "id": 0,
    "question": "Tom is an Ocellated wild turkey.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))\n¬(EasternWildTurkey(tom))\n¬(OsceolaWildTurkey(tom))\n¬(GouldsWildTurkey(tom))\n¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))\nWildTurkey(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOcellatedWildTurkey(tom)\n\"\"\""
    ]
  },
  {
    "id": 1,
    "question": "Tom is an Eastern wild turkey.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))\n¬(EasternWildTurkey(tom))\n¬(OsceolaWildTurkey(tom))\n¬(GouldsWildTurkey(tom))\n¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))\nWildTurkey(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEasternWildTurkey(tom)\n\"\"\""
    ]
  },
  {
    "id": 2,
    "question": "Joey is a wild turkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))\n¬(EasternWildTurkey(tom))\n¬(OsceolaWildTurkey(tom))\n¬(GouldsWildTurkey(tom))\n¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))\nWildTurkey(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWildTurkey(joey)\n\"\"\""
    ]
  },
  {
    "id": 57,
    "question": "The Legend of Zelda is on the Top 10 list.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGame(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))\n∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))\n∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))\n∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTop10(thelegendofzelda)\n\"\"\""
    ]
  },
  {
    "id": 58,
    "question": "FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGame(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))\n∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))\n∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))\n∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x(Created(x, fifa22) ∧ Japanese(x) ∧ VideoGameCompany(x))\n\"\"\""
    ]
  },
  {
    "id": 59,
    "question": "The Legend of Zelda is not on the Top 10 list.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGame(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))\n∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))\n∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))\n∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Top10(thelegendofzelda)\n\"\"\""
    ]
  },
  {
    "id": 726,
    "question": "All squares are shapes.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Square(x) → FourSided(x))\n∀x (FourSided(x) → Shape(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Square(x) → Shape(x))\n\"\"\""
    ]
  },
  {
    "id": 1361,
    "question": "Rockie is a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n∀x (Skittish(x) → ¬Calm(x))\n∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\nCanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTurtle(rockie)\n\"\"\""
    ]
  },
  {
    "id": 1362,
    "question": "Rockie is not a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n∀x (Skittish(x) → ¬Calm(x))\n∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\nCanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Turtle(rockie)\n\"\"\""
    ]
  },
  {
    "id": 1363,
    "question": "Rockie is a turtle or cute.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n∀x (Skittish(x) → ¬Calm(x))\n∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\nCanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTurtle(rockie) ∨ Cute(rockie)\n\"\"\""
    ]
  },
  {
    "id": 1364,
    "question": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n∀x (Skittish(x) → ¬Calm(x))\n∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\nCanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Turtle(rockie) ∧ Squirrel(rockie)) → Cute(rockie) ⊕ Skittish(rockie)\n\"\"\""
    ]
  },
  {
    "id": 1365,
    "question": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))\n∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))\n∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))\n∀x (Skittish(x) → ¬Calm(x))\n∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))\nCanBeSpottedNear(rockie, campus) ∧ Calm(rockie) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCute(rockie) ∧ Calm(rockie) → Turtle(rockie) ∧ Skittish(rockie)\n\"\"\""
    ]
  },
  {
    "id": 530,
    "question": "Karen will share \"Stranger Things\" with Lisa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNetflixShow(strangerThings) ∧ Popular(strangerThings)\n∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n¬Download(karen, blackMirror)\nNetflixShow(blackMirror)\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nShareWith(karen, strangerThings, lisa)\n\"\"\""
    ]
  },
  {
    "id": 531,
    "question": "\"Black Mirror\" is popular.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNetflixShow(strangerThings) ∧ Popular(strangerThings)\n∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n¬Download(karen, blackMirror)\nNetflixShow(blackMirror)\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(blackMirror)\n\"\"\""
    ]
  },
  {
    "id": 532,
    "question": "Karen will share \"Black Mirror\" with Lisa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNetflixShow(strangerThings) ∧ Popular(strangerThings)\n∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n¬Download(karen, blackMirror)\nNetflixShow(blackMirror)\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nShareWith(karen, blackMirror, lisa)\n\"\"\""
    ]
  },
  {
    "id": 657,
    "question": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCapitalOf(beijing, peoplesRepublicOfChina)\n∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))\nLocatedIn(beijing, northernChina)\nHosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)\n∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics)\n\"\"\""
    ]
  },
  {
    "id": 658,
    "question": "Beijing is located in southern China.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCapitalOf(beijing, peoplesRepublicOfChina)\n∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))\nLocatedIn(beijing, northernChina)\nHosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)\n∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLocatedIn(beijing, southernChina)\n\"\"\""
    ]
  },
  {
    "id": 659,
    "question": "Beijing is the second largest Chinese city.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCapitalOf(beijing, peoplesRepublicOfChina)\n∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))\nLocatedIn(beijing, northernChina)\nHosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)\nHosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)\n∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSecondLargestChineseCity(beijing)\n\"\"\""
    ]
  },
  {
    "id": 1301,
    "question": "Marvin is an alien.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x))\n∀x (From(x, mars) → Alien(x))\n∀x (Extraterrestrial(x) → ¬Human(x))\n∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))\nHighlyIntelligentBeing(marvin)\n¬(From(marvin, earth) ⊕ From(marvin, mars))\n¬From(marvin, earth) → Extraterrestrial(marvin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAlien(marvin)\n\"\"\""
    ]
  },
  {
    "id": 1302,
    "question": "Marvin is neither a human nor from Mars.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x))\n∀x (From(x, mars) → Alien(x))\n∀x (Extraterrestrial(x) → ¬Human(x))\n∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))\nHighlyIntelligentBeing(marvin)\n¬(From(marvin, earth) ⊕ From(marvin, mars))\n¬From(marvin, earth) → Extraterrestrial(marvin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Human(marvin) ∧ ¬From(marvin, mars)\n\"\"\""
    ]
  },
  {
    "id": 1303,
    "question": "If Marvin is not from Mars, then Marvin is a human.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x))\n∀x (From(x, mars) → Alien(x))\n∀x (Extraterrestrial(x) → ¬Human(x))\n∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))\nHighlyIntelligentBeing(marvin)\n¬(From(marvin, earth) ⊕ From(marvin, mars))\n¬From(marvin, earth) → Extraterrestrial(marvin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬From(marvin, mars) → Human(marvin)\n\"\"\""
    ]
  },
  {
    "id": 893,
    "question": "Djokovic is a Grand Slam champion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))\n∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))\n∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))\n∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))\n∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))\n∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))\n∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))\nAt(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandSlam(djokovic) ∧ Champion(djokovic)\n\"\"\""
    ]
  },
  {
    "id": 894,
    "question": "Djokovic lives in a tax haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))\n∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))\n∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))\n∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))\n∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))\n∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))\n∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))\nAt(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLiveIn(djokovic, taxHaven)\n\"\"\""
    ]
  },
  {
    "id": 895,
    "question": "Djokovic does not live in a tax haven.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))\n∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))\n∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))\n∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))\n∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))\n∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))\n∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))\nAt(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LiveIn(djokovic, taxHaven)\n\"\"\""
    ]
  },
  {
    "id": 289,
    "question": "Roderick Strong leads a professional wrestling stable.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)\nLeads(roderickStrong, diamondMine)\nIncludes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)\nFeuds(imperium, diamondMine)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x))\n\"\"\""
    ]
  },
  {
    "id": 290,
    "question": "Roderick Strong leads the Creed Brothers.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)\nLeads(roderickStrong, diamondMine)\nIncludes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)\nFeuds(imperium, diamondMine)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeads(roderickstrong, creedbrothers)\n\"\"\""
    ]
  },
  {
    "id": 291,
    "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)\nLeads(roderickStrong, diamondMine)\nIncludes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)\nFeuds(imperium, diamondMine)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ((ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile)) → ¬Feuds(imperium, x))\n\"\"\""
    ]
  },
  {
    "id": 621,
    "question": "Beethoven is a composer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphony9)\n∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))\nWrittenby(symphony9, beethoven)\nPremiered(viennaMusicSociety, symphony9)\nOrchestra(viennaMusicSociety)\nLead(beethoven, viennaMusicSociety)\n∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComposer(beethoven)\n\"\"\""
    ]
  },
  {
    "id": 622,
    "question": "Some orchestras premiered music pieces.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphony9)\n∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))\nWrittenby(symphony9, beethoven)\nPremiered(viennaMusicSociety, symphony9)\nOrchestra(viennaMusicSociety)\nLead(beethoven, viennaMusicSociety)\n∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))\n\"\"\""
    ]
  },
  {
    "id": 623,
    "question": "Beethoven is not a conductor.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphony9)\n∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))\nWrittenby(symphony9, beethoven)\nPremiered(viennaMusicSociety, symphony9)\nOrchestra(viennaMusicSociety)\nLead(beethoven, viennaMusicSociety)\n∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Conductor(beethoven)\n\"\"\""
    ]
  },
  {
    "id": 927,
    "question": "A design by Max is a brutalist building.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))\n∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))\n∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))\n∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))\n∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))\n∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Design(x) ∧ ByMax(x) ∧ BrutalistBuilding(x))\n\"\"\""
    ]
  },
  {
    "id": 928,
    "question": "A design by Max is evocative and dreamy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))\n∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))\n∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))\n∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))\n∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))\n∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Design(x) ∧ ByMax(x) ∧ Evocative(x) ∧ Dreamy(x))\n\"\"\""
    ]
  },
  {
    "id": 929,
    "question": "A design by Max is either evocative or dreamy.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))\n∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))\n∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))\n∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))\n∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))\n∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Design(x) ∧ ByMax(x) ∧ (Evocative(x) ⊕ Dreamy(x)))\n\"\"\""
    ]
  },
  {
    "id": 1029,
    "question": "Coco Gauff is among the most active Grand-Slam players.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))\n∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))\n∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))\n∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) \n∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))\nRankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))\nTennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMostActivePlayerIn(cocoGauff, majorTennis)\n\"\"\""
    ]
  },
  {
    "id": 1030,
    "question": "Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))\n∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))\n∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))\n∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) \n∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))\nRankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))\nTennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)\n\"\"\""
    ]
  },
  {
    "id": 1031,
    "question": "Coco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))\n∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))\n∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))\n∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) \n∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))\nRankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))\nTennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(LostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)) ∨ ¬MostActivePlayerIn(cocoGauff, majorTennis)\n\"\"\""
    ]
  },
  {
    "id": 700,
    "question": "No pets are cats.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) → Mammal(x))\n∃x (Pet(x) ∧ ¬Mammal(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Pet(x) → ¬Cat(x))\n\"\"\""
    ]
  },
  {
    "id": 456,
    "question": "James's favorite season is summer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSeason(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))\n∀x (Want(x, longvacation) → Favorite(x, summer))\nFavorite(emma, summer)\n∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x=y))\nWant(james, longVacation)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFavorite(james, summer)\n\"\"\""
    ]
  },
  {
    "id": 457,
    "question": "Mia's favorite season is spring.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSeason(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))\n∀x (Want(x, longvacation) → Favorite(x, summer))\nFavorite(emma, summer)\n∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x=y))\nWant(james, longVacation)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFavorite(mia, spring)\n\"\"\""
    ]
  },
  {
    "id": 904,
    "question": "1984 is printed text.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DigitalMedia(x) → ¬AnalogMedia(x))\n∀x (PrintedText(x) → AnalogMedia(x))\n∀x (StreamingService(x) → DigitalMedia(x))\n∀x (HardcoverBook(x) → PrintedText(x))\nStreamingService(1984) → HardcoverBook(1984)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrintedText(y1984)\n\"\"\""
    ]
  },
  {
    "id": 905,
    "question": "1984 is a streaming service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DigitalMedia(x) → ¬AnalogMedia(x))\n∀x (PrintedText(x) → AnalogMedia(x))\n∀x (StreamingService(x) → DigitalMedia(x))\n∀x (HardcoverBook(x) → PrintedText(x))\nStreamingService(1984) → HardcoverBook(1984)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStreamingService(y1984)\n\"\"\""
    ]
  },
  {
    "id": 906,
    "question": "1984 is not a streaming service.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DigitalMedia(x) → ¬AnalogMedia(x))\n∀x (PrintedText(x) → AnalogMedia(x))\n∀x (StreamingService(x) → DigitalMedia(x))\n∀x (HardcoverBook(x) → PrintedText(x))\nStreamingService(1984) → HardcoverBook(1984)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬StreamingService(y1984)\n\"\"\""
    ]
  },
  {
    "id": 608,
    "question": "Basque is a Romance language.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))\n∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\nRomanceLanguage(french) ∧ RomanceLanguage(spanish)\nRelated(german, spanish)\n∀x (Language(x) → ¬Related(basque, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRomanceLanguage(basque)\n\"\"\""
    ]
  },
  {
    "id": 609,
    "question": "German is a Romance language.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))\n∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\nRomanceLanguage(french) ∧ RomanceLanguage(spanish)\nRelated(german, spanish)\n∀x (Language(x) → ¬Related(basque, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRomanceLanguage(german)\n\"\"\""
    ]
  },
  {
    "id": 610,
    "question": "French is an Indo-European language.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))\n∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\nRomanceLanguage(french) ∧ RomanceLanguage(spanish)\nRelated(german, spanish)\n∀x (Language(x) → ¬Related(basque, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIndoEuropeanLanguage(french)\n\"\"\""
    ]
  },
  {
    "id": 240,
    "question": "Robert Lewandowski is a soccer player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nStriker(robertLewandowski)\n∀x (Striker(x) → SoccerPlayer(x))\nLeft(robertLewandowski, bayernMunchen)\n∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoccerPlayer(robertLewandowski)\n\"\"\""
    ]
  },
  {
    "id": 241,
    "question": "Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nStriker(robertLewandowski)\n∀x (Striker(x) → SoccerPlayer(x))\nLeft(robertLewandowski, bayernMunchen)\n∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaysFor(robertLewandowski, bayernMunchen)\n\"\"\""
    ]
  },
  {
    "id": 242,
    "question": "Robert Lewandowski is a star.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nStriker(robertLewandowski)\n∀x (Striker(x) → SoccerPlayer(x))\nLeft(robertLewandowski, bayernMunchen)\n∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoccerStar(robertLewandowski)\n\"\"\""
    ]
  },
  {
    "id": 4,
    "question": "Butte and St Pierre are in the same state.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCity(billings) ∧ In(billings, montana)\nCity(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)\n∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))\nCity(pierre) ∧ ¬(In(pierre, montana))\n∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))\n∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (In(butte, x) ∧ In(stPierre, x))\n\"\"\""
    ]
  },
  {
    "id": 5,
    "question": "St Pierre and Bismarck are in the same state.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCity(billings) ∧ In(billings, montana)\nCity(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)\n∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))\nCity(pierre) ∧ ¬(In(pierre, montana))\n∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))\n∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (City(pierre) ∧ In(pierre, x) ∧ City(bismarck) ∧ In(bismarck, x))\n\"\"\""
    ]
  },
  {
    "id": 6,
    "question": "Montana is home to the city of Missoula.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCity(billings) ∧ In(billings, montana)\nCity(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)\n∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))\nCity(pierre) ∧ ¬(In(pierre, montana))\n∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))\n∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCity(missoula) ∧ In(missoula, montana)\n\"\"\""
    ]
  },
  {
    "id": 548,
    "question": "Mike has an F1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))\n∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))\nInternationalStudent(mike)\nWantToWorkIn(x, unitedStates) → Apply(mike, cpt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nF1Visa(mike)\n\"\"\""
    ]
  },
  {
    "id": 549,
    "question": "Mike has a J1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))\n∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))\nInternationalStudent(mike)\nWantToWorkIn(x, unitedStates) → Apply(mike, cpt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nJ1Visa(mike)\n\"\"\""
    ]
  },
  {
    "id": 1271,
    "question": "Ted is a pet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrownSwissCattle(x) → Cow(x))\n∃x (Pet(x) ∧ BrownSwissCattle(x))\n∀x (Cow(x) → DomesticatedAnimal(x))\n∀x (Aligator(x) → ¬DomesticatedAnimal(x))\nAligator(ted)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPet(ted)\n\"\"\""
    ]
  },
  {
    "id": 1272,
    "question": "Ted is a pet and Brown Swiss cattle",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrownSwissCattle(x) → Cow(x))\n∃x (Pet(x) ∧ BrownSwissCattle(x))\n∀x (Cow(x) → DomesticatedAnimal(x))\n∀x (Aligator(x) → ¬DomesticatedAnimal(x))\nAligator(ted)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPet(ted) ∧ BrownSwissCattle(ted)\n\"\"\""
    ]
  },
  {
    "id": 1273,
    "question": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrownSwissCattle(x) → Cow(x))\n∃x (Pet(x) ∧ BrownSwissCattle(x))\n∀x (Cow(x) → DomesticatedAnimal(x))\n∀x (Aligator(x) → ¬DomesticatedAnimal(x))\nAligator(ted)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBrownSwissCattle(ted) → ¬Pet(ted)\n\"\"\""
    ]
  },
  {
    "id": 663,
    "question": "A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrivateIvyLeagueResearchUniversity(yaleUniversity)\nMovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)\nValuedAt(yaleUniversitysEndowment, 42point3billion)\n∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newHaven))\n\"\"\""
    ]
  },
  {
    "id": 664,
    "question": "Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrivateIvyLeagueResearchUniversity(yaleUniversity)\nMovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)\nValuedAt(yaleUniversitysEndowment, 42point3billion)\n∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLargestUniversityEndowmentOf(yale, anyEducationalInstitution)\n\"\"\""
    ]
  },
  {
    "id": 665,
    "question": "Pierson College is a residential college at Yale.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrivateIvyLeagueResearchUniversity(yaleUniversity)\nMovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)\nValuedAt(yaleUniversitysEndowment, 42point3billion)\n∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResidentialCollege(piersonCollege) ∧ At(piersonCollege, yale)\n\"\"\""
    ]
  },
  {
    "id": 360,
    "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))\nPilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)\nWorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)\nScriptEditorFor(andrewCollins, badults)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (ScriptEditorFor(andrewCollins, x) ∧ Series(x) ∧ WorkingTitle(theSecretDudeSociety, x))\n\"\"\""
    ]
  },
  {
    "id": 361,
    "question": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))\nPilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)\nWorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)\nScriptEditorFor(andrewCollins, badults)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bBCTwo) ∨ PilotedOn(y, bBCThree)))\n\"\"\""
    ]
  },
  {
    "id": 819,
    "question": "KO is a stock.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))\n∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) \n∃x (Stock(x) ∧ GrowthStock(x))\n∀x (MatureStock(x) → SuitableFor(x, retirementFund))\nMatureStock(kO)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStock(kO)\n\"\"\""
    ]
  },
  {
    "id": 820,
    "question": "KO is a stock and a growth stock.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))\n∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) \n∃x (Stock(x) ∧ GrowthStock(x))\n∀x (MatureStock(x) → SuitableFor(x, retirementFund))\nMatureStock(kO)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬GrowthStock(kO)\n\"\"\""
    ]
  },
  {
    "id": 821,
    "question": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))\n∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) \n∃x (Stock(x) ∧ GrowthStock(x))\n∀x (MatureStock(x) → SuitableFor(x, retirementFund))\nMatureStock(kO)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrowthStock(kO) ∨ BoughtToEarnProfitFrom(kO, earnProfit, rapidPriceAppreciation) → ¬Stock(kO) ∧ ¬BoughtToEarnProfitFrom(kO, rapidPriceAppreciation)\n\"\"\""
    ]
  },
  {
    "id": 253,
    "question": "Joe's license plate begins with the number 34.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))\n∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))\n∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))\n∃x (Owns(tom, x) ∧ BeginWith(x, num35))\n∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Owns(joe, x) ∧ BeginWith(x, num34))\n\"\"\""
    ]
  },
  {
    "id": 254,
    "question": "Tom's license plate is from Istanbul.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))\n∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))\n∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))\n∃x (Owns(tom, x) ∧ BeginWith(x, num35))\n∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Owns(tom, x) ∧ VehicleRegistrationPlateIn(x, istanbul))\n\"\"\""
    ]
  },
  {
    "id": 979,
    "question": "Hannah needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))\n∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))\n∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))\n∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))\n∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))\nAt(hannah, marysSchool)\n(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)\n\"\"\""
    ]
  },
  {
    "id": 980,
    "question": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))\n∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))\n∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))\n∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))\n∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))\nAt(hannah, marysSchool)\n(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(PickyEater(hannah) ∧ Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))\n\"\"\""
    ]
  },
  {
    "id": 981,
    "question": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))\n∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))\n∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))\n∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))\n∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))\nAt(hannah, marysSchool)\n(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPickyEater(hannah) ⊕ (Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))\n\"\"\""
    ]
  },
  {
    "id": 805,
    "question": "Dried Thai chilies are products of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BakedSweet(x) → ¬Spicy(x))\n∀x (Cupcake(x) → BakedSweet(x))\n∀x (MalaHotpot(x) → Spicy(x))\n∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\nSpicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProduct(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)\n\"\"\""
    ]
  },
  {
    "id": 806,
    "question": "Dried Thai chilies are not products of Baked by Melissa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BakedSweet(x) → ¬Spicy(x))\n∀x (Cupcake(x) → BakedSweet(x))\n∀x (MalaHotpot(x) → Spicy(x))\n∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\nSpicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa))\n\"\"\""
    ]
  },
  {
    "id": 807,
    "question": "Dried Thai chilies are a mala hotpot.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BakedSweet(x) → ¬Spicy(x))\n∀x (Cupcake(x) → BakedSweet(x))\n∀x (MalaHotpot(x) → Spicy(x))\n∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\nSpicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMalaHotpot(driedThaiChili)\n\"\"\""
    ]
  },
  {
    "id": 808,
    "question": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BakedSweet(x) → ¬Spicy(x))\n∀x (Cupcake(x) → BakedSweet(x))\n∀x (MalaHotpot(x) → Spicy(x))\n∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\nSpicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)) ∧ ¬BakedSweet(driedThaiChili)\n\"\"\""
    ]
  },
  {
    "id": 809,
    "question": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BakedSweet(x) → ¬Spicy(x))\n∀x (Cupcake(x) → BakedSweet(x))\n∀x (MalaHotpot(x) → Spicy(x))\n∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))\nSpicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCupcake(driedThaiChili) ∧ Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)\n\"\"\""
    ]
  },
  {
    "id": 754,
    "question": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))\n∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))\n∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))\n∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))\n∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ((TakeOutService(hamdenPlazaSubway) ∧ NegativeReview(x) ∧ Receive(hamdenPlazaSubway, x) → PopularAmong(hamdenPlazaSubway, localResidents) ∧ ¬Provide(hamdenPlazaSubway, takeOutService))\n\"\"\""
    ]
  },
  {
    "id": 755,
    "question": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))\n∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))\n∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))\n∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))\n∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Provide(hamdenPlazaSubway, takeOutService) ∨ (NegativeReview(x) ∧ ¬Receive(hamdenPlazaSubway, x)))\n\"\"\""
    ]
  },
  {
    "id": 756,
    "question": "The Hamden Plaza store does not provide take-out service.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))\n∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))\n∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))\n∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))\n∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Provide(hamdenPlazaSubway, takeOutService)\n\"\"\""
    ]
  },
  {
    "id": 688,
    "question": "Sir Digby’s nemesis does not win.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SuperheroMovie(x) ∧ In(y, x) ∧ GoodGuy(y) → Wins(y))\nSuperheroMovie(theSurprisingAdventuresofSirDigbyChickenCaesar)\n∀x ∀y (GoodGuy(x) ∧ Fight(x, y) ⟷ BadGuy(y) ∧ Fight(y, x))\nFight(sirDigby, sirDigbysNemesis)\n∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → GoodGuy(y))\nNamedAfter(theSurprisingAdventuresofSirDigbyChickenCaesar, sirDigby)\n∀x ∀y (Fights(x, y) ∧ Win(x) → ¬Wins(y))\n∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → In(y, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Win(sirDigbysNemesis)\n\"\"\""
    ]
  },
  {
    "id": 171,
    "question": "Walden contains knowledge.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) → Contains(x, knowledge))\n∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))\n∀x (Gains(x, knowledge) → Smarter(x))\nReadBook(harry, walden) ∧ Book(walden)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGains(harry, knowledge)\n\"\"\""
    ]
  },
  {
    "id": 172,
    "question": "Harry is smarter than before.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) → Contains(x, knowledge))\n∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))\n∀x (Gains(x, knowledge) → Smarter(x))\nReadBook(harry, walden) ∧ Book(walden)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSmarter(harry)\n\"\"\""
    ]
  },
  {
    "id": 173,
    "question": "A smarter person has gained knowledge.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) → Contains(x, knowledge))\n∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))\n∀x (Gains(x, knowledge) → Smarter(x))\nReadBook(harry, walden) ∧ Book(walden)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Smarter(x) → GainKnowledge(x))\n\"\"\""
    ]
  },
  {
    "id": 546,
    "question": "Machine translation is a language generation task.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))\n∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))\nNaturalLanguageProcessingTask(machineTranslation)\nOutputSequence(machineTranslation, text)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLanguageGenerationTask(machineTranslation)\n\"\"\""
    ]
  },
  {
    "id": 547,
    "question": "Machine translation is a language understanding task.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))\n∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))\nNaturalLanguageProcessingTask(machineTranslation)\nOutputSequence(machineTranslation, text)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLanguageUnderstandingTask(machineTranslation)\n\"\"\""
    ]
  },
  {
    "id": 476,
    "question": "Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ AllowPet(x))\n∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))\n∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))\nCat(fluffy) ∧ BelongTo(fluffy, tom)\n∀x (Cat(x) → Pet(x))\nManagedBuilding(oliveGarden)\nMonthlyRentAt(uSD2000, oliveGarden)\nMoreThan(uSD2000, uSD1500)\n∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))\n∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRentApartmentIn(tom, oliveGarden)\n\"\"\""
    ]
  },
  {
    "id": 477,
    "question": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ AllowPet(x))\n∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))\n∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))\nCat(fluffy) ∧ BelongTo(fluffy, tom)\n∀x (Cat(x) → Pet(x))\nManagedBuilding(oliveGarden)\nMonthlyRentAt(uSD2000, oliveGarden)\nMoreThan(uSD2000, uSD1500)\n∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))\n∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAllowedToMoveInWith(tom, oliveGarden, fluffy)\n\"\"\""
    ]
  },
  {
    "id": 478,
    "question": "The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ AllowPet(x))\n∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))\n∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))\nCat(fluffy) ∧ BelongTo(fluffy, tom)\n∀x (Cat(x) → Pet(x))\nManagedBuilding(oliveGarden)\nMonthlyRentAt(uSD2000, oliveGarden)\nMoreThan(uSD2000, uSD1500)\n∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))\n∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (SecurityDeposit(x, oliveGarden) → MoreThan(x, uSD2000) ⊕ Equal(x, uSD2000))\n\"\"\""
    ]
  },
  {
    "id": 933,
    "question": "The Harvard Weekly Book club has legal obligations.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BusinessOrganization(x) → LegalEntity(x))\n∀x (Company(x) → BusinessOrganization(x))\n∀x (PrivateCompany(x) → Company(x))\n∀x (LegalEntity(x) → CreatedUnderLaw(x))\n∀x (LegalEntity(x) → LegalObligation(x))\nCreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLegalObligation(harvardWeeklyBookClub)\n\"\"\""
    ]
  },
  {
    "id": 934,
    "question": "The Harvard Weekly Book club has legal obligations and is a private company.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BusinessOrganization(x) → LegalEntity(x))\n∀x (Company(x) → BusinessOrganization(x))\n∀x (PrivateCompany(x) → Company(x))\n∀x (LegalEntity(x) → CreatedUnderLaw(x))\n∀x (LegalEntity(x) → LegalObligation(x))\nCreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLegalObligation(harvardWeeklyBookClub) ∧ PrivateCompany(harvardWeeklyBookClub)\n\"\"\""
    ]
  },
  {
    "id": 935,
    "question": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BusinessOrganization(x) → LegalEntity(x))\n∀x (Company(x) → BusinessOrganization(x))\n∀x (PrivateCompany(x) → Company(x))\n∀x (LegalEntity(x) → CreatedUnderLaw(x))\n∀x (LegalEntity(x) → LegalObligation(x))\nCreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrivateCompany(harvardWeeklyBookClub) → LegalObligation(harvardWeeklyBookClub) ⊕ CreatedUnderLaw(harvardWeeklyBookClub)\n\"\"\""
    ]
  },
  {
    "id": 1366,
    "question": "Harry is a queen bee.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))\n∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))\n∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))\n∀x (QueenBee(x) → Bee(x))\nBee(harry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nQueenBee(harry)\n\"\"\""
    ]
  },
  {
    "id": 1367,
    "question": "Harry is an invertebrate or a queen bee.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))\n∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))\n∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))\n∀x (QueenBee(x) → Bee(x))\nBee(harry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInvertebrate(harry) ∨ QueenBee(harry)\n\"\"\""
    ]
  },
  {
    "id": 1368,
    "question": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))\n∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))\n∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))\n∀x (QueenBee(x) → Bee(x))\nBee(harry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Invertebrate(harry) ⊕ With(harry, backbone)) → ¬Invertebrate(harry) ∧ ¬QueenBee(harry)\n\"\"\""
    ]
  },
  {
    "id": 1011,
    "question": "Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))\n∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))\n∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))\n∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))\n∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))\n¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSpendTime(luke, playingWith, siblings)\n\"\"\""
    ]
  },
  {
    "id": 1012,
    "question": "Luke complains often about annoying siblings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))\n∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))\n∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))\n∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))\n∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))\n¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComplainAboutOften(luke, annoyingSiblings)\n\"\"\""
    ]
  },
  {
    "id": 1013,
    "question": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))\n∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))\n∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))\n∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))\n∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))\n¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(BornIn(luke, multipleBirth) ∨ ComplainAbout(luke, often, annoyingSiblings) )\n\"\"\""
    ]
  },
  {
    "id": 560,
    "question": "ETS provides financial aid to Tom.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCost(gRE, 205) ∧ Cheaper(205, 300)\n∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))\n∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))\nLivingIn(tom, singleParentFamily)\nOutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)\nApplicantOf(tom, gre)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProvidesFinancialAidTo(eTS, tom)\n\"\"\""
    ]
  },
  {
    "id": 561,
    "question": "It costs below US $300 to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCost(gRE, 205) ∧ Cheaper(205, 300)\n∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))\n∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))\nLivingIn(tom, singleParentFamily)\nOutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)\nApplicantOf(tom, gre)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCost(gRE, x) ∧ Cheaper(x, 300)\n\"\"\""
    ]
  },
  {
    "id": 562,
    "question": "No one taking the GRE test has financial aid provided to them by something.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCost(gRE, 205) ∧ Cheaper(205, 300)\n∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))\n∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))\nLivingIn(tom, singleParentFamily)\nOutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)\nApplicantOf(tom, gre)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x ∃y (Applicant(x, gRE) ∧ ProvidesFinancialAidTo(y, x)))\n\"\"\""
    ]
  },
  {
    "id": 958,
    "question": "Peter is notably tidy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))\n∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))\n∀x (Cleanly(x) → NotablyTidy(x))\n∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))\n∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) \n¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNotablyTidy(peter)\n\"\"\""
    ]
  },
  {
    "id": 959,
    "question": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))\n∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))\n∀x (Cleanly(x) → NotablyTidy(x))\n∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))\n∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) \n¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nClumsyFoodie(peter) ∨ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)))\n\"\"\""
    ]
  },
  {
    "id": 960,
    "question": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))\n∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))\n∀x (Cleanly(x) → NotablyTidy(x))\n∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))\n∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) \n¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(ClumsyFoodie(peter) ⊕ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness))))\n\"\"\""
    ]
  },
  {
    "id": 706,
    "question": "Some evergreens are not objects of worship.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (FirTree(x) → Evergreen(x))\n∃x ∃y (ObjectOfWorship(x) ∧ ObjectOfWorship(y) ∧ FirTree(x) ∧ FirTree(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Evergreen(x) ∧ Evergreen(y) ∧ ¬ObjectOfWorship(x) ∧ ¬ObjectOfWorship(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 370,
    "question": "Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))\nVisited(juanDeOnate, thePicurisMountains)\nIn(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)\n∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, newMexico))\n\"\"\""
    ]
  },
  {
    "id": 371,
    "question": "Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))\nVisited(juanDeOnate, thePicurisMountains)\nIn(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)\n∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, texas))\n\"\"\""
    ]
  },
  {
    "id": 372,
    "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))\nVisited(juanDeOnate, thePicurisMountains)\nIn(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)\n∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (In(hardingPegmatiteMine, x) → ¬(MountainRange(x) ∧ In(x, newMexico)))\n\"\"\""
    ]
  },
  {
    "id": 527,
    "question": "Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))\n∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))\n∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\nMan(peter) ∧ Taller(peter, michael)\n∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n¬CanBlock(michael, windy)\n∀x (JumpWhenShooting(x) → GreatShooter(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Man(x) ∧ SameClass(x, michael) ∧ ¬Taller(peter, x))\n\"\"\""
    ]
  },
  {
    "id": 528,
    "question": "Windy is a great shooter.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))\n∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))\n∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\nMan(peter) ∧ Taller(peter, michael)\n∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n¬CanBlock(michael, windy)\n∀x (JumpWhenShooting(x) → GreatShooter(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGreatShooter(windy)\n\"\"\""
    ]
  },
  {
    "id": 529,
    "question": "Peter can block Windy's shooting.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))\n∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))\n∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\nMan(peter) ∧ Taller(peter, michael)\n∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n¬CanBlock(michael, windy)\n∀x (JumpWhenShooting(x) → GreatShooter(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanBlock(peter, windy)\n\"\"\""
    ]
  },
  {
    "id": 439,
    "question": "Barutin Cove is named after all islands in Antarctica.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)\nLocatedIn(barutinCove, snowIsland)\nLocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)\nLocatedIn(southShetlandIslands, antarctica)\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (LocatedIn(x, antarctica) → NamedAfter(barutinCove, x))\n\"\"\""
    ]
  },
  {
    "id": 440,
    "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)\nLocatedIn(barutinCove, snowIsland)\nLocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)\nLocatedIn(southShetlandIslands, antarctica)\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Cove(x) ∧ LocatedIn(x, antarctica) ∧ NameAfter(x, y) ∧ LocatedIn(y, bulgaria))\n\"\"\""
    ]
  },
  {
    "id": 441,
    "question": "Barutin Cove is not located in Antarctica.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)\nLocatedIn(barutinCove, snowIsland)\nLocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)\nLocatedIn(southShetlandIslands, antarctica)\n∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LocatedIn(barutinCove, antarctica)\n\"\"\""
    ]
  },
  {
    "id": 739,
    "question": "Some affection is positive.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Affection(x) ∧ Love(x))\n∃x (Love(x) ∧ Positive(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Affection(x) ∧ Positive(x))\n\"\"\""
    ]
  },
  {
    "id": 786,
    "question": "John's car is a Tesla Model 3.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))\n∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))\n∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))\n∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))\n¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTeslaModel3(johnsCar)\n\"\"\""
    ]
  },
  {
    "id": 787,
    "question": "John's car is a Solo EV.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))\n∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))\n∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))\n∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))\n¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSoloEV(johnsCar) ∧ Car(johnsCar)\n\"\"\""
    ]
  },
  {
    "id": 788,
    "question": "John's car is not a Solo EV.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))\n∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))\n∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))\n∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))\n¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(SoloEV(johnsCar) ∧ Car(johnsCar))\n\"\"\""
    ]
  },
  {
    "id": 1348,
    "question": "Rock is a monkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))\n∀x (Monkey(x) → Mammal(x))\n∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))\n∀x (Bird(x) → CanFly(x))\n∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))\n∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\nPeterSPet(rock)\nCanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMonkey(rock)\n\"\"\""
    ]
  },
  {
    "id": 1349,
    "question": "Rock has wings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))\n∀x (Monkey(x) → Mammal(x))\n∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))\n∀x (Bird(x) → CanFly(x))\n∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))\n∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\nPeterSPet(rock)\nCanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z))\n\"\"\""
    ]
  },
  {
    "id": 1350,
    "question": "Rock does not have wings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))\n∀x (Monkey(x) → Mammal(x))\n∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))\n∀x (Bird(x) → CanFly(x))\n∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))\n∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))\nPeterSPet(rock)\nCanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z)))\n\"\"\""
    ]
  },
  {
    "id": 846,
    "question": "John has a larger family.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Make(x, weddingPlan) → Engaged(x))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\nEngaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\nHave(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHave(john, largeFamily)\n\"\"\""
    ]
  },
  {
    "id": 847,
    "question": "John does not have a larger family.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Make(x, weddingPlan) → Engaged(x))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\nEngaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\nHave(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Have(john, largerFamily)\n\"\"\""
    ]
  },
  {
    "id": 848,
    "question": "John is engaged.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Make(x, weddingPlan) → Engaged(x))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\nEngaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\nHave(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEngaged(john)\n\"\"\""
    ]
  },
  {
    "id": 849,
    "question": "John neither has a larger family nor does he invite others to his wedding.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Make(x, weddingPlan) → Engaged(x))\n∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))\n∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))\n∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))\nEngaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)\nHave(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Have(john, largerFamily) ∧ ¬(∃y ∃z (¬(y=john) ∧ ¬(z=john) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ InviteToComeTo(john, z, wedding)))\n\"\"\""
    ]
  },
  {
    "id": 74,
    "question": "Platypuses are mammals with no teeth.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))\n¬Have(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMammal(platypus) ∧ (¬Have(platypus, teeth))\n\"\"\""
    ]
  },
  {
    "id": 75,
    "question": "Platypuses are reptiles.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))\n¬Have(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nReptile(platypus)\n\"\"\""
    ]
  },
  {
    "id": 76,
    "question": "Humans are mammals.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))\n¬Have(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMammal(humans)\n\"\"\""
    ]
  },
  {
    "id": 578,
    "question": "Space sucks.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plunger(x) → Suck(x))\n∀x (Vacuum(x) → Suck(x))\n∀x (Vampire(x) → Suck(x))\nVacuum(space)\nHouseholdAppliance(duster) ∧ ¬Suck(duster)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSuck(space)\n\"\"\""
    ]
  },
  {
    "id": 579,
    "question": "Space is a vampire.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plunger(x) → Suck(x))\n∀x (Vacuum(x) → Suck(x))\n∀x (Vampire(x) → Suck(x))\nVacuum(space)\nHouseholdAppliance(duster) ∧ ¬Suck(duster)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVampire(space)\n\"\"\""
    ]
  },
  {
    "id": 580,
    "question": "If something is a household appliance, it sucks.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plunger(x) → Suck(x))\n∀x (Vacuum(x) → Suck(x))\n∀x (Vampire(x) → Suck(x))\nVacuum(space)\nHouseholdAppliance(duster) ∧ ¬Suck(duster)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (HouseHoldApp(x) → Suck(x))\n\"\"\""
    ]
  },
  {
    "id": 388,
    "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))\n∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))\n∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))\n∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))\n∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (SupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))\n\"\"\""
    ]
  },
  {
    "id": 389,
    "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))\n∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))\n∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))\n∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))\n∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (UnsupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))\n\"\"\""
    ]
  },
  {
    "id": 1327,
    "question": "\"Hachi: A dog's Tale\" is rated General Audience.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))\n∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))\n∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))\n∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))\n∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))\nFilm(hachiAdogsTale)\n(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRated(x, generalAudience)\n\"\"\""
    ]
  },
  {
    "id": 1328,
    "question": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))\n∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))\n∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))\n∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))\n∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))\nFilm(hachiAdogsTale)\n(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent)) ∨ InfrozenSeries(excessiveViolentContent)\n\"\"\""
    ]
  },
  {
    "id": 1329,
    "question": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))\n∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))\n∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))\n∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))\n∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))\nFilm(hachiAdogsTale)\n(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬((Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent)) ⊕ InfrozenSeries(excessiveViolentContent))\n\"\"\""
    ]
  },
  {
    "id": 133,
    "question": "Some Heck cattle are artificially selected.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))\n∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))\n∀x (HeckCattle(x) → Animal(x))\n∀x (Auroch(x) → Animal(x))\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ (¬(x=y)) ∧ BreedingBack(x) ∧ BreedingBack(y) ∧ (∃w(Dead(w) ∧ Resemble(x, w)) ∧ (¬(w=z)) ∧ (∃z(Dead(z) ∧ Resemble(y, z))))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y(HeckCattle(x) ∧ ArtificialSelection(x) ∧ (¬(x=y)) ∧ HeckCattle(y) ∧ ArtificialSelection(y))\n\"\"\""
    ]
  },
  {
    "id": 134,
    "question": "Aurochs are extinct.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))\n∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))\n∀x (HeckCattle(x) → Animal(x))\n∀x (Auroch(x) → Animal(x))\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ (¬(x=y)) ∧ BreedingBack(x) ∧ BreedingBack(y) ∧ (∃w(Dead(w) ∧ Resemble(x, w)) ∧ (¬(w=z)) ∧ (∃z(Dead(z) ∧ Resemble(y, z))))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Auroch(x) → Dead(x))\n\"\"\""
    ]
  },
  {
    "id": 1410,
    "question": "Vladimir is a Russian federation official",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRussian(vladimir) ∧ FederationOfficial(vladimir)\n\"\"\""
    ]
  },
  {
    "id": 1411,
    "question": "Vladimir is not a Russian federation official",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Russian(vladimir) ∧ FederationOfficial(vladimir))\n\"\"\""
    ]
  },
  {
    "id": 1412,
    "question": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanParticipateIn(ekaterina, 2024UnitedStatesElection) ∨ ManagerAt(ekaterina, gazprom)\n\"\"\""
    ]
  },
  {
    "id": 1413,
    "question": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanParticipateIn(ekaterina, 2024UnitedStatesElection) ⊕ ManagerAt(vladimir, gazprom)\n\"\"\""
    ]
  },
  {
    "id": 1414,
    "question": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))\n∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))\n∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))\n∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))\n¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)\n(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanRegisterToVoteIn(ekaterina, unitedStates) ∧ CanParticipateIn(vladimir, 2024UnitedStatesElection)\n\"\"\""
    ]
  },
  {
    "id": 243,
    "question": "Neapolitan Chronicles is an English book.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)\n∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))\nBook(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)\nTranslatedFrom(neapolitanChronicles, italian)\nBook(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBook(neapolitanChronicles) ∧ In(neapolitanChronicles, english)\n\"\"\""
    ]
  },
  {
    "id": 244,
    "question": "Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)\n∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))\nBook(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)\nTranslatedFrom(neapolitanChronicles, italian)\nBook(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPublishedBy(harryPotter, newVesselPress)\n\"\"\""
    ]
  },
  {
    "id": 245,
    "question": "Palace of Flies was translated from Italian.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)\n∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))\nBook(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)\nTranslatedFrom(neapolitanChronicles, italian)\nBook(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTranslatedFrom(palaceOfFlies, italian)\n\"\"\""
    ]
  },
  {
    "id": 964,
    "question": "The mixture contains carbon.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))\n∀x (Alkane(x) → Hydrocarbon(x))\n∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))\n∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))\n∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))\n¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nContain(mixture, carbon)\n\"\"\""
    ]
  },
  {
    "id": 965,
    "question": "The mixture is an alkane and contains carbon.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))\n∀x (Alkane(x) → Hydrocarbon(x))\n∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))\n∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))\n∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))\n¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAlkane(mixture) ∧ Contain(mixture, carbon)\n\"\"\""
    ]
  },
  {
    "id": 966,
    "question": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))\n∀x (Alkane(x) → Hydrocarbon(x))\n∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))\n∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))\n∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))\n¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(∀x ∀y (Contain(mixture, x) ∧ Contain(mixture, y) ∧ x=y)) ∨ Contain(mixture, carbon) → ¬(Chemical(mixture) ∧ Compound(mixture)) ∧ ¬Alkane(mixture))\n\"\"\""
    ]
  },
  {
    "id": 702,
    "question": "Some Greeks are mortal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Mortal(x))\n∀x (Greek(x) → Human(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Greek(x) ∧ Greek(y) ∧ Mortal(x) ∧ Mortal(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 1244,
    "question": "James has a part-time job offered by the university.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\nStudent(james) ∧ WorkIn(james, lab)\n¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))\n\"\"\""
    ]
  },
  {
    "id": 1245,
    "question": "James does not have a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\nStudent(james) ∧ WorkIn(james, lab)\n¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬∃y(PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))\n\"\"\""
    ]
  },
  {
    "id": 1246,
    "question": "James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\nStudent(james) ∧ WorkIn(james, lab)\n¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTake(james, databaseCourse) ⊕ (∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))\n\"\"\""
    ]
  },
  {
    "id": 1247,
    "question": "James takes the database course.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))\n∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))\n∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))\n∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))\n∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))\nStudent(james) ∧ WorkIn(james, lab)\n¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTake(james, databaseCourse)\n\"\"\""
    ]
  },
  {
    "id": 618,
    "question": "If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLikeMusic(george) → WantToCompose(george)\nAccesstoProgram(george) → CanCompose(george)\n(WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(LikeMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george)\n\"\"\""
    ]
  },
  {
    "id": 619,
    "question": "If George will not compose, George can not compose.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLikeMusic(george) → WantToCompose(george)\nAccesstoProgram(george) → CanCompose(george)\n(WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WantToCompose(george) → ¬WillCompose(george)\n\"\"\""
    ]
  },
  {
    "id": 736,
    "question": "All birds swim.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hawk(x) → ¬Swim(x))\n∃x ∃y (Bird(x) ∧ Bird(y) ∧ Hawk(x) ∧ Hawk(y) ∧ ¬(x=y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Bird(x) → Swim(x))\n\"\"\""
    ]
  },
  {
    "id": 802,
    "question": "Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))\n∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))\n∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))\n∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))\nShow(breakingBad)\n¬RealityTVShow(breakingBad)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (MondayAt8PM(x) ∧ On(breakingBad, x))\n\"\"\""
    ]
  },
  {
    "id": 803,
    "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))\n∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))\n∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))\n∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))\nShow(breakingBad)\n¬RealityTVShow(breakingBad)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (MondayAt8PM(x) ∧ Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad))\n\"\"\""
    ]
  },
  {
    "id": 804,
    "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))\n∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))\n∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))\n∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))\nShow(breakingBad)\n¬RealityTVShow(breakingBad)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y ((Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad)) → MondayAt8PM(x))\n\"\"\""
    ]
  },
  {
    "id": 323,
    "question": "Heinrich Schmidt was German or Russian or both.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGerman(heinrichSchmidt) ∧ Politician(heinrichSchmidt)\nMember(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGerman(heinrichSchmidt) ∨ Russian(heinrichSchmidt)\n\"\"\""
    ]
  },
  {
    "id": 324,
    "question": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGerman(heinrichSchmidt) ∧ Politician(heinrichSchmidt)\nMember(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (German(x) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag))\n\"\"\""
    ]
  },
  {
    "id": 325,
    "question": "No politicians are part of the Nazi Reichstag.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGerman(heinrichSchmidt) ∧ Politician(heinrichSchmidt)\nMember(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Politician(x) → ¬Member(x, naziReichstag))\n\"\"\""
    ]
  },
  {
    "id": 1032,
    "question": "Colorectal cancer is a kind of severe cancer",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))\n∀x (SevereCancer(x) → DeadlyDiseases(x))\n∀x (BileDuctCancer(x) → SevereCancer(x))\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) \n¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSevereCancer(colorectalCancer)\n\"\"\""
    ]
  },
  {
    "id": 1033,
    "question": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))\n∀x (SevereCancer(x) → DeadlyDiseases(x))\n∀x (BileDuctCancer(x) → SevereCancer(x))\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) \n¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ∨ (BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer))\n\"\"\""
    ]
  },
  {
    "id": 1034,
    "question": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))\n∀x (SevereCancer(x) → DeadlyDiseases(x))\n∀x (BileDuctCancer(x) → SevereCancer(x))\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) \n¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCholangiocarcinoma(colorectalCancer) ∧ (MildFlu(colorectalCancer) ∨ BileDuctCancer(colorectalCancer))\n\"\"\""
    ]
  },
  {
    "id": 941,
    "question": "Taylor eats salads regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))\n∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))\n∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))\n∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))\n∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))\n¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRegularlyEat(taylor, salad)\n\"\"\""
    ]
  },
  {
    "id": 942,
    "question": "Taylor visits the gym at least once a day.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))\n∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))\n∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))\n∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))\n∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))\n¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVisitDaily(taylor, gym)\n\"\"\""
    ]
  },
  {
    "id": 943,
    "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))\n∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))\n∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))\n∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))\n∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))\n¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬GrowUpIn(taylor, health-consciousChildhoodHome) ∧ ¬VisitDaily(taylor, gym))\n\"\"\""
    ]
  },
  {
    "id": 147,
    "question": "The world championships is a sporting event.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympics)\nLastSummerOlympics(tokyo)\nMostMedals(unitedStates, tokyo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSportingEvent(champs)\n\"\"\""
    ]
  },
  {
    "id": 148,
    "question": "The last summer Olympic games were not in Tokyo.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympics)\nLastSummerOlympics(tokyo)\nMostMedals(unitedStates, tokyo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LastSummerOlympics(tokyo)\n\"\"\""
    ]
  },
  {
    "id": 149,
    "question": "The United States won the most medals in the last summer Olympic games.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympics)\nLastSummerOlympics(tokyo)\nMostMedals(unitedStates, tokyo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (LastSummerOlympics(x) ∧ MostMedals(unitedStates, x))\n\"\"\""
    ]
  },
  {
    "id": 703,
    "question": "Some humans are horses.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Horse(x) → ∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z)))\n∀x (Human(x) → ¬(∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z))))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Human(x) ∧ Human(y) ∧ Horse(x) ∧ Horse(y) ∧ ¬(x=y))\n\"\"\""
    ]
  },
  {
    "id": 442,
    "question": "Susan flies from LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFlyTo(susan, lgaAirport)\n∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))\nFlyFrom(john, lgaAirport)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlyFrom(susan, lgaAirport)\n\"\"\""
    ]
  },
  {
    "id": 443,
    "question": "John flies to LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFlyTo(susan, lgaAirport)\n∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))\nFlyFrom(john, lgaAirport)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlyTo(john, lgaAirport)\n\"\"\""
    ]
  },
  {
    "id": 1268,
    "question": "Tom is a grumpy person.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))\n∃x (Grumpy(x) ∧ MeanTo(x, animal))\n∀x (AnimalLover(x) → NiceTo(x, animal))\n∀x (PetOwner(x) → AnimalLover(x))\nPetOwner(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrumpy(tom)\n\"\"\""
    ]
  },
  {
    "id": 1269,
    "question": "Tom is not both a grumpy person and mean to animals.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))\n∃x (Grumpy(x) ∧ MeanTo(x, animal))\n∀x (AnimalLover(x) → NiceTo(x, animal))\n∀x (PetOwner(x) → AnimalLover(x))\nPetOwner(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Grumpy(tom) ∧ MeanTo(tom, animal))\n\"\"\""
    ]
  },
  {
    "id": 1270,
    "question": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))\n∃x (Grumpy(x) ∧ MeanTo(x, animal))\n∀x (AnimalLover(x) → NiceTo(x, animal))\n∀x (PetOwner(x) → AnimalLover(x))\nPetOwner(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Grumpy(tom) ∧ MeanTo(tom, animal)) → ¬Grumpy(tom) ∧ ¬AnimalLover(tom))\n\"\"\""
    ]
  },
  {
    "id": 189,
    "question": "Dani Shapiro is a novel writer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Podcast(x) → ¬Novel(x))\n∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))\n∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))\nAmerican(dani_Shapiro) ∧ Writer(dani_Shapiro)\nWrittenBy(family_History, dani_Shapiro)\nNovel(family_History) ∧ WrittenIn(family_History, yr2003)\nPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\nCity(boston) ∧ American(boston)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWritesNovel(dani_Shapiro)\n\"\"\""
    ]
  },
  {
    "id": 190,
    "question": "Family Secrets is a novel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Podcast(x) → ¬Novel(x))\n∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))\n∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))\nAmerican(dani_Shapiro) ∧ Writer(dani_Shapiro)\nWrittenBy(family_History, dani_Shapiro)\nNovel(family_History) ∧ WrittenIn(family_History, yr2003)\nPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\nCity(boston) ∧ American(boston)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsNovel(family_Secrets)\n\"\"\""
    ]
  },
  {
    "id": 191,
    "question": "Dani Shapiro was born in Boston.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Podcast(x) → ¬Novel(x))\n∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))\n∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))\nAmerican(dani_Shapiro) ∧ Writer(dani_Shapiro)\nWrittenBy(family_History, dani_Shapiro)\nNovel(family_History) ∧ WrittenIn(family_History, yr2003)\nPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\nCity(boston) ∧ American(boston)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBornIn(dani_Shapiro, boston)\n\"\"\""
    ]
  },
  {
    "id": 1313,
    "question": "Yuri is an American national.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n¬Activate(yuri, legMuscle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmericanNational(yuri)\n\"\"\""
    ]
  },
  {
    "id": 1314,
    "question": "Yuri is not an American professional basketball player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n¬Activate(yuri, legMuscle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))\n\"\"\""
    ]
  },
  {
    "id": 1315,
    "question": "Yuri is an American professional basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n¬Activate(yuri, legMuscle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)\n\"\"\""
    ]
  },
  {
    "id": 1316,
    "question": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n¬Activate(yuri, legMuscle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LeapStraightIntoAir(yuri) → (AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))\n\"\"\""
    ]
  },
  {
    "id": 1317,
    "question": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))\n∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))\n∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))\n∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))\n¬Activate(yuri, legMuscle)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)) → (Professional(yuri) ∧ BasketballPlayer(yuri))\n\"\"\""
    ]
  },
  {
    "id": 724,
    "question": "All events are sad.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Event(x) → Happy(x) ⊕ Sad(x))\n∃x (Event(x) ∧ Happy(x)) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Event(x) → Sad(x))\n\"\"\""
    ]
  },
  {
    "id": 411,
    "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWinnerOf(steinhauer, duMaurierClassic, year1992)\nParticipate(duMaurierClassic, steinhauer, year1992)\n∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x)) ∧ In(y, sixWayTie) ∧ Belgium(y))\nFrom(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)\n∀x (LeaderBoard(maurier, x) → Participate(maurier, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WinnerOf(steinhauer, duMaurierClassic, year1992)\n\"\"\""
    ]
  },
  {
    "id": 412,
    "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWinnerOf(steinhauer, duMaurierClassic, year1992)\nParticipate(duMaurierClassic, steinhauer, year1992)\n∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x)) ∧ In(y, sixWayTie) ∧ Belgium(y))\nFrom(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)\n∀x (LeaderBoard(maurier, x) → Participate(maurier, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSixWayTie(descampe)\n\"\"\""
    ]
  },
  {
    "id": 1324,
    "question": "KiKi is terricolous.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))\n∀x (Dog(x) → Animal(x) ∧ Bark(x))\n∀x (Animal(x) ∧ Jump(x) → Like(jane, x))\n∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))\n∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))\nAnimal(kiki)\n¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTerricolous(kiki)\n\"\"\""
    ]
  },
  {
    "id": 1325,
    "question": "KiKi is a barking dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))\n∀x (Dog(x) → Animal(x) ∧ Bark(x))\n∀x (Animal(x) ∧ Jump(x) → Like(jane, x))\n∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))\n∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))\nAnimal(kiki)\n¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBark(kiki) ∧ Dog(kiki)\n\"\"\""
    ]
  },
  {
    "id": 1326,
    "question": "KiKi does not bark and he is not a dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))\n∀x (Dog(x) → Animal(x) ∧ Bark(x))\n∀x (Animal(x) ∧ Jump(x) → Like(jane, x))\n∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))\n∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))\nAnimal(kiki)\n¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Bark(kiki) ∧ ¬Dog(kiki)\n\"\"\""
    ]
  },
  {
    "id": 304,
    "question": "No one playing for Nautico is Brazilian.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (PlayFor(x, nautico) → ¬Brazilian(x))\n\"\"\""
    ]
  },
  {
    "id": 305,
    "question": "Ailton Silva does not play for a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (FootballClub(x) → ¬PlayFor(ailtonSilva, x))\n\"\"\""
    ]
  },
  {
    "id": 306,
    "question": "Ailton was not loaned out to a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (FootballClub(x) → ¬LoanedTo(ailton, x))\n\"\"\""
    ]
  },
  {
    "id": 307,
    "question": "Ailton Silva played for Fluminense.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlayFor(ailtonSilva, fluminense)\n\"\"\""
    ]
  },
  {
    "id": 308,
    "question": "Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (FootballClub(x) ∧ LoanedTo(ailtonSilva, x))\n\"\"\""
    ]
  }
]