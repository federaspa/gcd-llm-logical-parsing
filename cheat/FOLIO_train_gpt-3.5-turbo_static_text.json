[
  {
    "id": 1131,
    "question": "Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drinks(x) → Dependent(x))\n∀x (Drinks(x) ⊕ Jokes(x))\n∀x (Jokes(x) → ¬Unaware(x))\n(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))\n¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))\"\"\""
    ]
  },
  {
    "id": 1132,
    "question": "Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drinks(x) → Dependent(x))\n∀x (Drinks(x) ⊕ Jokes(x))\n∀x (Jokes(x) → ¬Unaware(x))\n(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))\n¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))\"\"\""
    ]
  },
  {
    "id": 1133,
    "question": "Rina is either a person who regularly drinks coffee or a person who is unaware that caffeine is a drug.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drinks(x) → Dependent(x))\n∀x (Drinks(x) ⊕ Jokes(x))\n∀x (Jokes(x) → ¬Unaware(x))\n(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))\n¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))\"\"\""
    ]
  },
  {
    "id": 1134,
    "question": "If Rina is either a person who jokes about being addicted to caffeine and a person who is unaware that caffeine is a drug, or neither a person who jokes about being addicted to caffeine nor a person who is unaware that caffeine is a drug, then Rina jokes about being addicted to caffeine and regularly drinks coffee.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drinks(x) → Dependent(x))\n∀x (Drinks(x) ⊕ Jokes(x))\n∀x (Jokes(x) → ¬Unaware(x))\n(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))\n¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))\"\"\""
    ]
  },
  {
    "id": 20,
    "question": "Miroslav Venhoda loved music.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)\n∀x (ChoralConductor(x) → Musician(x))\n∃x (Musician(x) → Love(x, music))\nBook(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)\"\"\""
    ]
  },
  {
    "id": 21,
    "question": "A Czech person wrote a book in 1946.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)\n∀x (ChoralConductor(x) → Musician(x))\n∃x (Musician(x) → Love(x, music))\nBook(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)\"\"\""
    ]
  },
  {
    "id": 22,
    "question": "No choral conductor specialized in the performance of Renaissance.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)\n∀x (ChoralConductor(x) → Musician(x))\n∃x (Musician(x) → Love(x, music))\nBook(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)\"\"\""
    ]
  },
  {
    "id": 1341,
    "question": "Sea eel is an eel.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x  (Eel (x)→  Fish (x))\n∀x  (Fish (x)→ ¬ Plant (x))\n∀x ( Plant (x) ∨  Animal (x))\n∀x  (Breathe (x)→ ¬ Paper (x))\n∀x  (Animal (x)→  Breathe (x))\n Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) \"\"\""
    ]
  },
  {
    "id": 1342,
    "question": "Sea eel is a paper.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x  (Eel (x)→  Fish (x))\n∀x  (Fish (x)→ ¬ Plant (x))\n∀x ( Plant (x) ∨  Animal (x))\n∀x  (Breathe (x)→ ¬ Paper (x))\n∀x  (Animal (x)→  Breathe (x))\n Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) \"\"\""
    ]
  },
  {
    "id": 1343,
    "question": "Sea eel breathes or is a paper.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x  (Eel (x)→  Fish (x))\n∀x  (Fish (x)→ ¬ Plant (x))\n∀x ( Plant (x) ∨  Animal (x))\n∀x  (Breathe (x)→ ¬ Paper (x))\n∀x  (Animal (x)→  Breathe (x))\n Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) \"\"\""
    ]
  },
  {
    "id": 393,
    "question": "A five-story building is built in 1915.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Blake(x) → Building(x))\n∀x (Blake(x) → Historic(x, year1990))\n∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))\n∀x (Emmet(x) → Construct(x, year1915))\n∀x (Emmet(x) ↔ Blake(x))\n∃x (Emmet(x) ∧ Work(john, x))\"\"\""
    ]
  },
  {
    "id": 394,
    "question": "The Blake McFall Company Building is located in Portland, Oregon.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Blake(x) → Building(x))\n∀x (Blake(x) → Historic(x, year1990))\n∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))\n∀x (Emmet(x) → Construct(x, year1915))\n∀x (Emmet(x) ↔ Blake(x))\n∃x (Emmet(x) ∧ Work(john, x))\"\"\""
    ]
  },
  {
    "id": 395,
    "question": "John started his current job in 1990.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Blake(x) → Building(x))\n∀x (Blake(x) → Historic(x, year1990))\n∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))\n∀x (Emmet(x) → Construct(x, year1915))\n∀x (Emmet(x) ↔ Blake(x))\n∃x (Emmet(x) ∧ Work(john, x))\"\"\""
    ]
  },
  {
    "id": 640,
    "question": "William Dickinson did not get a seat in the Parliament.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)\nAttended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)\nLocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)\nSupported(williamdickinson, portlandwhigs)\n∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))\"\"\""
    ]
  },
  {
    "id": 641,
    "question": "William Dickinson went to schools located in the United Kingdom for both high school and university.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)\nAttended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)\nLocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)\nSupported(williamdickinson, portlandwhigs)\n∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))\"\"\""
    ]
  },
  {
    "id": 642,
    "question": "William Dickinson attended university in the United Kingdom.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)\nAttended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)\nLocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)\nSupported(williamdickinson, portlandwhigs)\n∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))\"\"\""
    ]
  },
  {
    "id": 643,
    "question": "William Dickinson sat in the House of Commons.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)\nAttended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)\nLocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)\nSupported(williamdickinson, portlandwhigs)\n∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))\"\"\""
    ]
  },
  {
    "id": 695,
    "question": "Danil knows LanguageA.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUniversalLanguage(languageA)\n∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y))\nKnow(katya, languageA)\n¬Communicate(katya, danil)\"\"\""
    ]
  },
  {
    "id": 1197,
    "question": "James goes to cinemas every week.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AMC(x) → ThreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (AMC(x) ∨ HBO(x))\n∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))\n∀x (HBO(x) → PreferTVSeries(x))\nWatchTVInCinema(james)\"\"\""
    ]
  },
  {
    "id": 1198,
    "question": "James does not go to cinemas every week.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AMC(x) → ThreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (AMC(x) ∨ HBO(x))\n∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))\n∀x (HBO(x) → PreferTVSeries(x))\nWatchTVInCinema(james)\"\"\""
    ]
  },
  {
    "id": 1199,
    "question": "James goes to cinemas every week or watches 3 movies every week without any additional fees.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AMC(x) → ThreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (AMC(x) ∨ HBO(x))\n∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))\n∀x (HBO(x) → PreferTVSeries(x))\nWatchTVInCinema(james)\"\"\""
    ]
  },
  {
    "id": 1200,
    "question": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AMC(x) → ThreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (AMC(x) ∨ HBO(x))\n∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))\n∀x (HBO(x) → PreferTVSeries(x))\nWatchTVInCinema(james)\"\"\""
    ]
  },
  {
    "id": 1201,
    "question": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AMC(x) → ThreeMovies(x))\n∃x (CinemaEveryWeek(x))\n∀x (AMC(x) ∨ HBO(x))\n∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))\n∀x (HBO(x) → PreferTVSeries(x))\nWatchTVInCinema(james)\"\"\""
    ]
  },
  {
    "id": 553,
    "question": "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ MorePoints(x, y) → HigherRank(x, y))\n∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y))\nLaLiga(realMadrid) ∧ LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)\"\"\""
    ]
  },
  {
    "id": 554,
    "question": "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ MorePoints(x, y) → HigherRank(x, y))\n∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y))\nLaLiga(realMadrid) ∧ LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)\"\"\""
    ]
  },
  {
    "id": 250,
    "question": "Tom uses the zip code 98199.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodin(lawtonPark, seattle)\n∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))\nCitizenof(tom, lawtonPark)\nUsezipcode(daniel, number98199)\"\"\""
    ]
  },
  {
    "id": 251,
    "question": "Tom doesn't use the zip code 98199.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodin(lawtonPark, seattle)\n∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))\nCitizenof(tom, lawtonPark)\nUsezipcode(daniel, number98199)\"\"\""
    ]
  },
  {
    "id": 252,
    "question": "Tom is a citizen of Washington.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodin(lawtonPark, seattle)\n∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))\nCitizenof(tom, lawtonPark)\nUsezipcode(daniel, number98199)\"\"\""
    ]
  },
  {
    "id": 253,
    "question": "Daniel is a citizen of Lawton Park.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNeighbourhoodin(lawtonPark, seattle)\n∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))\nCitizenof(tom, lawtonPark)\nUsezipcode(daniel, number98199)\"\"\""
    ]
  },
  {
    "id": 262,
    "question": "Tiffany T. Alston was suspended from the Maryland House of Delegates.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))\nIsLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston)\"\"\""
    ]
  },
  {
    "id": 263,
    "question": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))\nIsLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston)\"\"\""
    ]
  },
  {
    "id": 264,
    "question": "Tiffany T. Alston went to prison for stealing government funds.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))\nIsLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston)\"\"\""
    ]
  },
  {
    "id": 494,
    "question": "If you step on a stonefish and don’t use an antivenom, it will cause death.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fish(x) → Sting(x,y))\nFish(stonefish)\n∀x (StepOn(stonefish, x) → Sting(stonefish, x))\n∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))\n∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))\"\"\""
    ]
  },
  {
    "id": 495,
    "question": "Stings of some fish can cause death if not treated.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fish(x) → Sting(x,y))\nFish(stonefish)\n∀x (StepOn(stonefish, x) → Sting(stonefish, x))\n∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))\n∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))\"\"\""
    ]
  },
  {
    "id": 496,
    "question": "If you step on a stonefish and apply heat to the affected area, stings will cause death.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ∃y (Fish(x) → Sting(x,y))\nFish(stonefish)\n∀x (StepOn(stonefish, x) → Sting(stonefish, x))\n∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))\n∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))\"\"\""
    ]
  },
  {
    "id": 1178,
    "question": "L-2021 is in the library.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LG(x) ∧ TypeC(x))\n∀x (TypeC(x) → ¬AOC(x))\n∀x (Library(x) → AOC(x))\nLibrary(l-2021) ⊕ TypeC(l-2021) \n¬(AOC(l-2021) ⊕ LG(l-2021))\"\"\""
    ]
  },
  {
    "id": 1179,
    "question": "L-2021 is either in the library or produced by LG.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LG(x) ∧ TypeC(x))\n∀x (TypeC(x) → ¬AOC(x))\n∀x (Library(x) → AOC(x))\nLibrary(l-2021) ⊕ TypeC(l-2021) \n¬(AOC(l-2021) ⊕ LG(l-2021))\"\"\""
    ]
  },
  {
    "id": 1180,
    "question": "L-2021 either has a type-c port or is produced by LG.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LG(x) ∧ TypeC(x))\n∀x (TypeC(x) → ¬AOC(x))\n∀x (Library(x) → AOC(x))\nLibrary(l-2021) ⊕ TypeC(l-2021) \n¬(AOC(l-2021) ⊕ LG(l-2021))\"\"\""
    ]
  },
  {
    "id": 1181,
    "question": "If L-2021 is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LG(x) ∧ TypeC(x))\n∀x (TypeC(x) → ¬AOC(x))\n∀x (Library(x) → AOC(x))\nLibrary(l-2021) ⊕ TypeC(l-2021) \n¬(AOC(l-2021) ⊕ LG(l-2021))\"\"\""
    ]
  },
  {
    "id": 1182,
    "question": "If L-2021 is either produced by LG and produced by AOC or neither produced by LG nor produced by AOC,  then L-2021 is either in the library or produced by LG.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (LG(x) ∧ TypeC(x))\n∀x (TypeC(x) → ¬AOC(x))\n∀x (Library(x) → AOC(x))\nLibrary(l-2021) ⊕ TypeC(l-2021) \n¬(AOC(l-2021) ⊕ LG(l-2021))\"\"\""
    ]
  },
  {
    "id": 1010,
    "question": "Jeremy has a busy schedule without time to cook.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meat(x) ∨ Vegetarian(x))\n∀x (Meat(x) → Hamburgers(x))\n∀x (Vegetarian(x) → Conscious(x))\n∀x (Conscious(x) → ¬FastFood(x))\n∀x (Busy(x) → FastFood(x))\n¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)\"\"\""
    ]
  },
  {
    "id": 1011,
    "question": "Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meat(x) ∨ Vegetarian(x))\n∀x (Meat(x) → Hamburgers(x))\n∀x (Vegetarian(x) → Conscious(x))\n∀x (Conscious(x) → ¬FastFood(x))\n∀x (Busy(x) → FastFood(x))\n¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)\"\"\""
    ]
  },
  {
    "id": 1012,
    "question": "If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meat(x) ∨ Vegetarian(x))\n∀x (Meat(x) → Hamburgers(x))\n∀x (Vegetarian(x) → Conscious(x))\n∀x (Conscious(x) → ¬FastFood(x))\n∀x (Busy(x) → FastFood(x))\n¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)\"\"\""
    ]
  },
  {
    "id": 521,
    "question": "The project Sam is doing is written in C++.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Project(x) ∧ Do(sam, x))\n ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))\n ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))\n Use(sam, mac)\n Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))\n ∀x (¬Be(x, perfect) → ¬Play(sam, x))\"\"\""
    ]
  },
  {
    "id": 522,
    "question": "The song Sam is playing is \"Perfect\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Project(x) ∧ Do(sam, x))\n ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))\n ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))\n Use(sam, mac)\n Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))\n ∀x (¬Be(x, perfect) → ¬Play(sam, x))\"\"\""
    ]
  },
  {
    "id": 523,
    "question": "If a song is \"Perfect\", Sam will play it.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Project(x) ∧ Do(sam, x))\n ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))\n ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))\n Use(sam, mac)\n Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))\n ∀x (¬Be(x, perfect) → ¬Play(sam, x))\"\"\""
    ]
  },
  {
    "id": 703,
    "question": "Some pets do not have fur.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → HasFur(x))\n∃x (Pet(x) ∧ Reptile(x))\"\"\""
    ]
  },
  {
    "id": 1390,
    "question": "Tiktok is a program.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (App(x) → Software(x))\n∀x (Youtube(x) → App(x))\n∀x (Youtube(x) ∨ Instagram(x))\n∀x (Instagram(x) → Entertainment(x))\n∀x (Software(x) → Program(x))\n∀x (Entertainment(x) → Interesting(x))\n∀x (Interesting(x) → Good(x))\n¬Good(tiktok)\"\"\""
    ]
  },
  {
    "id": 1391,
    "question": "Tiktok is either good or a program.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (App(x) → Software(x))\n∀x (Youtube(x) → App(x))\n∀x (Youtube(x) ∨ Instagram(x))\n∀x (Instagram(x) → Entertainment(x))\n∀x (Software(x) → Program(x))\n∀x (Entertainment(x) → Interesting(x))\n∀x (Interesting(x) → Good(x))\n¬Good(tiktok)\"\"\""
    ]
  },
  {
    "id": 1392,
    "question": "Tiktok is not both related to youtube and a program.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (App(x) → Software(x))\n∀x (Youtube(x) → App(x))\n∀x (Youtube(x) ∨ Instagram(x))\n∀x (Instagram(x) → Entertainment(x))\n∀x (Software(x) → Program(x))\n∀x (Entertainment(x) → Interesting(x))\n∀x (Interesting(x) → Good(x))\n¬Good(tiktok)\"\"\""
    ]
  },
  {
    "id": 1393,
    "question": "Tiktok is either related to youtube or a program.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (App(x) → Software(x))\n∀x (Youtube(x) → App(x))\n∀x (Youtube(x) ∨ Instagram(x))\n∀x (Instagram(x) → Entertainment(x))\n∀x (Software(x) → Program(x))\n∀x (Entertainment(x) → Interesting(x))\n∀x (Interesting(x) → Good(x))\n¬Good(tiktok)\"\"\""
    ]
  },
  {
    "id": 317,
    "question": "There are no unincorporated communities along Kentucky Route 32.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUnincorporatedCommunity(ordinary)\nIn(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)\nNorthwestOf(ordinary, sandyhook)\"\"\""
    ]
  },
  {
    "id": 318,
    "question": "There is an unincorporated community in Elliot County.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUnincorporatedCommunity(ordinary)\nIn(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)\nNorthwestOf(ordinary, sandyhook)\"\"\""
    ]
  },
  {
    "id": 926,
    "question": "Susan is a college student.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YoungAdult(x) → GoOnDiet(x))\n∀x (CollegeStudent(x) → YoungAdult(x))\n∀x (YaleStudent(x) → CollegeStudent(x))\n∀x (YaleStudent(x) ∨ HarvardStudent(x))\n∀x (HarvardStudent(x) → Diligent(x))\nHarvardStudent(susan) → YoungAdult(susan)\nYaleStudent(susan) → ¬GoOnDiet(susan)\"\"\""
    ]
  },
  {
    "id": 927,
    "question": "Susan goes on a diet and is diligent.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YoungAdult(x) → GoOnDiet(x))\n∀x (CollegeStudent(x) → YoungAdult(x))\n∀x (YaleStudent(x) → CollegeStudent(x))\n∀x (YaleStudent(x) ∨ HarvardStudent(x))\n∀x (HarvardStudent(x) → Diligent(x))\nHarvardStudent(susan) → YoungAdult(susan)\nYaleStudent(susan) → ¬GoOnDiet(susan)\"\"\""
    ]
  },
  {
    "id": 928,
    "question": "Susan does not go on a diet and is diligent.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YoungAdult(x) → GoOnDiet(x))\n∀x (CollegeStudent(x) → YoungAdult(x))\n∀x (YaleStudent(x) → CollegeStudent(x))\n∀x (YaleStudent(x) ∨ HarvardStudent(x))\n∀x (HarvardStudent(x) → Diligent(x))\nHarvardStudent(susan) → YoungAdult(susan)\nYaleStudent(susan) → ¬GoOnDiet(susan)\"\"\""
    ]
  },
  {
    "id": 432,
    "question": "Inside Out was a punk band.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPlay(vicdicara, guitar) ∧ Play(vicdicara, bass)\n¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x)))\nBand(vicdicara, insideOut)\"\"\""
    ]
  },
  {
    "id": 433,
    "question": "A musician of Inside Out plays bass.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPlay(vicdicara, guitar) ∧ Play(vicdicara, bass)\n¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x)))\nBand(vicdicara, insideOut)\"\"\""
    ]
  },
  {
    "id": 918,
    "question": "Amy is an athlete.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → GoodAtSports(x))\n∀x (OlympicGoldMedalWinner(x) → Athlete(x))\n∀x (Scientist(x) → ¬GoodAtSports(x))\n∀x (NobelLaureate(x) → Scientist(x))\nGoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)\n¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy)\"\"\""
    ]
  },
  {
    "id": 919,
    "question": "Amy is neither a scientist nor an Olympic gold medal winner.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → GoodAtSports(x))\n∀x (OlympicGoldMedalWinner(x) → Athlete(x))\n∀x (Scientist(x) → ¬GoodAtSports(x))\n∀x (NobelLaureate(x) → Scientist(x))\nGoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)\n¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy)\"\"\""
    ]
  },
  {
    "id": 920,
    "question": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel laureate.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → GoodAtSports(x))\n∀x (OlympicGoldMedalWinner(x) → Athlete(x))\n∀x (Scientist(x) → ¬GoodAtSports(x))\n∀x (NobelLaureate(x) → Scientist(x))\nGoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)\n¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy)\"\"\""
    ]
  },
  {
    "id": 1147,
    "question": "K is an apple.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RedFruit(x) → VC(x))\n∀x (Apple(x) → RedFruit(x))\n∀x (VC(x) → Benefit(x))\n∀x (Benefit(x) → ¬WarningList(x))\n¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)\"\"\""
    ]
  },
  {
    "id": 1148,
    "question": "K either contains a large amount of vitamin C or is on a warning list.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RedFruit(x) → VC(x))\n∀x (Apple(x) → RedFruit(x))\n∀x (VC(x) → Benefit(x))\n∀x (Benefit(x) → ¬WarningList(x))\n¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)\"\"\""
    ]
  },
  {
    "id": 1149,
    "question": "K is either on a warning list or with the color red.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RedFruit(x) → VC(x))\n∀x (Apple(x) → RedFruit(x))\n∀x (VC(x) → Benefit(x))\n∀x (Benefit(x) → ¬WarningList(x))\n¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)\"\"\""
    ]
  },
  {
    "id": 1150,
    "question": "If K is either beneficial to people or on a warning list, then it is not red.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RedFruit(x) → VC(x))\n∀x (Apple(x) → RedFruit(x))\n∀x (VC(x) → Benefit(x))\n∀x (Benefit(x) → ¬WarningList(x))\n¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)\"\"\""
    ]
  },
  {
    "id": 1151,
    "question": "If K is either on a warning list or with the color red, then it is not beneficial to people and does not contain a large amount of vitamin C.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RedFruit(x) → VC(x))\n∀x (Apple(x) → RedFruit(x))\n∀x (VC(x) → Benefit(x))\n∀x (Benefit(x) → ¬WarningList(x))\n¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)\"\"\""
    ]
  },
  {
    "id": 1207,
    "question": "James has a high income.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meta(x) → HighIncome(x))\n∀x (HighIncome(x) → ¬Bus(x))\n∀x (Bus(x) ∨ Drive(x))\n∀x (HaveCars(x) → Drive(x))\n∀x (Student(x) → ¬Drive(x))\nHaveCars(james) ∨ Meta(james)\"\"\""
    ]
  },
  {
    "id": 1208,
    "question": "James does not have a high income.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meta(x) → HighIncome(x))\n∀x (HighIncome(x) → ¬Bus(x))\n∀x (Bus(x) ∨ Drive(x))\n∀x (HaveCars(x) → Drive(x))\n∀x (Student(x) → ¬Drive(x))\nHaveCars(james) ∨ Meta(james)\"\"\""
    ]
  },
  {
    "id": 1209,
    "question": "James is a student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meta(x) → HighIncome(x))\n∀x (HighIncome(x) → ¬Bus(x))\n∀x (Bus(x) ∨ Drive(x))\n∀x (HaveCars(x) → Drive(x))\n∀x (Student(x) → ¬Drive(x))\nHaveCars(james) ∨ Meta(james)\"\"\""
    ]
  },
  {
    "id": 1210,
    "question": "James drives to his destination or he is a student.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meta(x) → HighIncome(x))\n∀x (HighIncome(x) → ¬Bus(x))\n∀x (Bus(x) ∨ Drive(x))\n∀x (HaveCars(x) → Drive(x))\n∀x (Student(x) → ¬Drive(x))\nHaveCars(james) ∨ Meta(james)\"\"\""
    ]
  },
  {
    "id": 1211,
    "question": "James either drives to their destination or is a student.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meta(x) → HighIncome(x))\n∀x (HighIncome(x) → ¬Bus(x))\n∀x (Bus(x) ∨ Drive(x))\n∀x (HaveCars(x) → Drive(x))\n∀x (Student(x) → ¬Drive(x))\nHaveCars(james) ∨ Meta(james)\"\"\""
    ]
  },
  {
    "id": 1212,
    "question": "If James either drives to his destination or is a student, then he has a high income and is a student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meta(x) → HighIncome(x))\n∀x (HighIncome(x) → ¬Bus(x))\n∀x (Bus(x) ∨ Drive(x))\n∀x (HaveCars(x) → Drive(x))\n∀x (Student(x) → ¬Drive(x))\nHaveCars(james) ∨ Meta(james)\"\"\""
    ]
  },
  {
    "id": 1202,
    "question": "James is in summer camp.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Park(x) ⊕ Movies(x))\n∀x (Nature(x) → ¬FreeTime(x))\n∀x (Movies(x) → Nature(x))\n∀x (NoClass(x) → FreeTime(x))\n∀x (SummerCamp(x) → NoClass(x))\nNoClass(james)\"\"\""
    ]
  },
  {
    "id": 1203,
    "question": "James goes to the park or is in summer camp.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Park(x) ⊕ Movies(x))\n∀x (Nature(x) → ¬FreeTime(x))\n∀x (Movies(x) → Nature(x))\n∀x (NoClass(x) → FreeTime(x))\n∀x (SummerCamp(x) → NoClass(x))\nNoClass(james)\"\"\""
    ]
  },
  {
    "id": 713,
    "question": "All television stars have good business sense.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TelevisionStar(x) → ¬CertifiedPublicAccoutant(x))\n∀x (CertifiedPublicAccoutant(x) → GoodBusinessSense(x))\"\"\""
    ]
  },
  {
    "id": 1174,
    "question": "James is good at planning.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Math(x) ∧ Chemistry(x))\n∀x (Chemistry(x) → Experiment(x))\n∀x (Experiment(x) → Planning(x))\n∀x (Planning(x) → ¬Award(x))\n¬(Chemistry(james) ⊕ Award(james))\"\"\""
    ]
  },
  {
    "id": 1175,
    "question": "James is either good at planning or good at math.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Math(x) ∧ Chemistry(x))\n∀x (Chemistry(x) → Experiment(x))\n∀x (Experiment(x) → Planning(x))\n∀x (Planning(x) → ¬Award(x))\n¬(Chemistry(james) ⊕ Award(james))\"\"\""
    ]
  },
  {
    "id": 1176,
    "question": "James is either good at chemistry or good at math.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Math(x) ∧ Chemistry(x))\n∀x (Chemistry(x) → Experiment(x))\n∀x (Experiment(x) → Planning(x))\n∀x (Planning(x) → ¬Award(x))\n¬(Chemistry(james) ⊕ Award(james))\"\"\""
    ]
  },
  {
    "id": 1177,
    "question": "If James is good at Chemistry or gets awarded the Dean's List, then James is either good at planning or good at math.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Math(x) ∧ Chemistry(x))\n∀x (Chemistry(x) → Experiment(x))\n∀x (Experiment(x) → Planning(x))\n∀x (Planning(x) → ¬Award(x))\n¬(Chemistry(james) ⊕ Award(james))\"\"\""
    ]
  },
  {
    "id": 69,
    "question": "2Sum is a Leetcode problem with an easy level.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (Easy(x) ⊕ Hard(x))\n∀x (Starred(x) → Hard(x))\nRecommended(twosum) \nStarred(foursum)\"\"\""
    ]
  },
  {
    "id": 70,
    "question": "4Sum is a Leetcode problem recommended to the novice.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (Easy(x) ⊕ Hard(x))\n∀x (Starred(x) → Hard(x))\nRecommended(twosum) \nStarred(foursum)\"\"\""
    ]
  },
  {
    "id": 71,
    "question": "2Sum has an AC rate higher than 20 percent.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (Easy(x) ⊕ Hard(x))\n∀x (Starred(x) → Hard(x))\nRecommended(twosum) \nStarred(foursum)\"\"\""
    ]
  },
  {
    "id": 692,
    "question": "Sarah will spend money this weekend.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rent(x, car) → Spend(x, money))\nGoesTo(sarah, vermont) → DriveTo(sarah, vermont)\n∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))\n¬Own(sarah, car)\n∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))\nCamping(sarah, vermont)\n∀x ∀y (Camping(x, y) → GoesTo(x, y))\"\"\""
    ]
  },
  {
    "id": 1013,
    "question": "Carol is outgoing and very spirited.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Weddings(x) → GettingMarried(x)\n∀x PreTeen(x) → ¬GettingMarried(x)\n∀x Celebrating(x) → Weddings(x)\n∀x LargeGathering(x) → Celebrating(x)\n∀x Outgoing(x) → LargeGathering(x)\n¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)\"\"\""
    ]
  },
  {
    "id": 1014,
    "question": "Carol is either a preteen or other young child.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Weddings(x) → GettingMarried(x)\n∀x PreTeen(x) → ¬GettingMarried(x)\n∀x Celebrating(x) → Weddings(x)\n∀x LargeGathering(x) → Celebrating(x)\n∀x Outgoing(x) → LargeGathering(x)\n¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)\"\"\""
    ]
  },
  {
    "id": 1015,
    "question": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Weddings(x) → GettingMarried(x)\n∀x PreTeen(x) → ¬GettingMarried(x)\n∀x Celebrating(x) → Weddings(x)\n∀x LargeGathering(x) → Celebrating(x)\n∀x Outgoing(x) → LargeGathering(x)\n¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)\"\"\""
    ]
  },
  {
    "id": 1073,
    "question": "A U.S government official is a Democrat.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1074,
    "question": "A U.S government official is anti-abortion and a liberal.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1075,
    "question": "A U.S government official is either anti-abortion or a liberal.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1076,
    "question": "If a U.S government official is not anti-abortion and a Republican, then a U.S government official is neither anti-abortion nor a liberal.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1077,
    "question": "If a U.S government official is anti-abortion and a liberal, then a U.S government official is either a Republican or a liberal.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1078,
    "question": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is either a conservative and a liberal or neither a conservative nor a liberal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1079,
    "question": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is neither a Democrat or a liberal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 1080,
    "question": "If an U.S government official is anti-abortion or a liberal, then a U.S government official is either anti-abortion or a liberal.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Republicans(x) → Anti-abortion(x))\n ∀x (Republicans(x) ∨ Democrats(x))\n ∀x (Democrats(x) → ¬Conservative(x))\n ∀x (Conservative(x) ∨ Liberal(x))\n Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)\"\"\""
    ]
  },
  {
    "id": 714,
    "question": "Some conservatives are advocates of high tariff rates.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AdvocateOfHighTariff(x) → Republican(x))\n∃x (Republican(x) ∧ ¬Conservative(x))\"\"\""
    ]
  },
  {
    "id": 886,
    "question": "Jim is a Knicks player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → ¬SlowRunner(x))\n∀x (ProfessionalBasketballPlayer(x) → Athlete(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (KnicksPlayer(x) → NBAPlayer(x))\n¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))\"\"\""
    ]
  },
  {
    "id": 887,
    "question": "Jim is not a Knicks player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → ¬SlowRunner(x))\n∀x (ProfessionalBasketballPlayer(x) → Athlete(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (KnicksPlayer(x) → NBAPlayer(x))\n¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))\"\"\""
    ]
  },
  {
    "id": 888,
    "question": "Jim is an athlete.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Athlete(x) → ¬SlowRunner(x))\n∀x (ProfessionalBasketballPlayer(x) → Athlete(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (KnicksPlayer(x) → NBAPlayer(x))\n¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))\"\"\""
    ]
  },
  {
    "id": 915,
    "question": "Nancy is a pirate.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → LoveAnimals(x))\n∀x (Toddler(x) → Kid(x))\n∀x (LoveAnimals(x) → ¬Bad(x))\n∀x (Pirate(x) → Bad(x))\n¬Pirate(nancy) → LoveAnimals(nancy)\n¬Toddler(nancy) → Bad(nancy)\"\"\""
    ]
  },
  {
    "id": 916,
    "question": "Nancy is not a pirate or a toddler.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → LoveAnimals(x))\n∀x (Toddler(x) → Kid(x))\n∀x (LoveAnimals(x) → ¬Bad(x))\n∀x (Pirate(x) → Bad(x))\n¬Pirate(nancy) → LoveAnimals(nancy)\n¬Toddler(nancy) → Bad(nancy)\"\"\""
    ]
  },
  {
    "id": 917,
    "question": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → LoveAnimals(x))\n∀x (Toddler(x) → Kid(x))\n∀x (LoveAnimals(x) → ¬Bad(x))\n∀x (Pirate(x) → Bad(x))\n¬Pirate(nancy) → LoveAnimals(nancy)\n¬Toddler(nancy) → Bad(nancy)\"\"\""
    ]
  },
  {
    "id": 202,
    "question": "Lana Wilson is a US filmmaker.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)\n∀x ∃y (DirectedBy(y, x) → Filmmaker(x))\nIsDocumentary(after_Tiller)\n∀x (IsDocumentary(x) → IsFilm(x))\nFromCity(lana_Wilson, kirkland)\nCityCountry(kirkland, us)\n∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))\nNomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)\"\"\""
    ]
  },
  {
    "id": 203,
    "question": "Miss Americana is not directed by a filmmaker from Kirkland.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)\n∀x ∃y (DirectedBy(y, x) → Filmmaker(x))\nIsDocumentary(after_Tiller)\n∀x (IsDocumentary(x) → IsFilm(x))\nFromCity(lana_Wilson, kirkland)\nCityCountry(kirkland, us)\n∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))\nNomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)\"\"\""
    ]
  },
  {
    "id": 204,
    "question": "Lana Wilson has won the Independent Spirit Award.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)\n∀x ∃y (DirectedBy(y, x) → Filmmaker(x))\nIsDocumentary(after_Tiller)\n∀x (IsDocumentary(x) → IsFilm(x))\nFromCity(lana_Wilson, kirkland)\nCityCountry(kirkland, us)\n∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))\nNomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)\"\"\""
    ]
  },
  {
    "id": 730,
    "question": "Not all bears are wild.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Bear(x) ∧ InZoo(x)) → ¬Wild(x))\n∃x (Bear(x) ∧ InZoo(x)) \"\"\""
    ]
  },
  {
    "id": 166,
    "question": "Elizabeth is a king.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Leader(x) → InMonarchy(x))\n∀x (Leader(x) → King(x) ⊕ Queen(x))\n∀x (Queen(x) → Female(x))\n∀x (King(x) → Male(x))\nQueen(elizabeth)\nLeader(elizabeth)\"\"\""
    ]
  },
  {
    "id": 167,
    "question": "Elizabeth is in a monarchy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Leader(x) → InMonarchy(x))\n∀x (Leader(x) → King(x) ⊕ Queen(x))\n∀x (Queen(x) → Female(x))\n∀x (King(x) → Male(x))\nQueen(elizabeth)\nLeader(elizabeth)\"\"\""
    ]
  },
  {
    "id": 168,
    "question": "Elizabeth is a leader of a country.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Leader(x) → InMonarchy(x))\n∀x (Leader(x) → King(x) ⊕ Queen(x))\n∀x (Queen(x) → Female(x))\n∀x (King(x) → Male(x))\nQueen(elizabeth)\nLeader(elizabeth)\"\"\""
    ]
  },
  {
    "id": 981,
    "question": "Clay does not have a regular 9-5 job.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Matcha(x) → ¬Late(x))\n∀x (California(x) → Matcha(x))\n∀x (Celebrities(x) → Late(x))\n∀x (Jobs(x) → Celebrities(x))\n∀x (WorkHome(x) → Jobs(x))\n(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))\"\"\""
    ]
  },
  {
    "id": 982,
    "question": "Clay lives in California and attends yoga classes regularly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Matcha(x) → ¬Late(x))\n∀x (California(x) → Matcha(x))\n∀x (Celebrities(x) → Late(x))\n∀x (Jobs(x) → Celebrities(x))\n∀x (WorkHome(x) → Jobs(x))\n(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))\"\"\""
    ]
  },
  {
    "id": 983,
    "question": "Clay neither prefers working at home over going to the office every day nor lives in California and attends yoga classes regularly.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Matcha(x) → ¬Late(x))\n∀x (California(x) → Matcha(x))\n∀x (Celebrities(x) → Late(x))\n∀x (Jobs(x) → Celebrities(x))\n∀x (WorkHome(x) → Jobs(x))\n(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))\"\"\""
    ]
  },
  {
    "id": 54,
    "question": "Thomas Barber played in the Football League for Bolton Wanderers",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEnglish(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)\nPlayedInTheFootballLeagueFor(thomasBarber, astonVilla)\nPlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)\"\"\""
    ]
  },
  {
    "id": 55,
    "question": "Thomas Barber played as an inside left.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEnglish(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)\nPlayedInTheFootballLeagueFor(thomasBarber, astonVilla)\nPlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)\"\"\""
    ]
  },
  {
    "id": 56,
    "question": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEnglish(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)\nPlayedInTheFootballLeagueFor(thomasBarber, astonVilla)\nPlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)\"\"\""
    ]
  },
  {
    "id": 467,
    "question": "Oliver plays piano in the concert.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))\nPlay(peter, piano) ∧Play(peter, violin)\nPlayInConcert(peter, piano)\nPlayerInConcert(peter) ∧ PlayerInConcert(oliver)\n¬PlayInConcert(oliver, piano)\"\"\""
    ]
  },
  {
    "id": 468,
    "question": "Oliver plays violin in the concert.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))\nPlay(peter, piano) ∧Play(peter, violin)\nPlayInConcert(peter, piano)\nPlayerInConcert(peter) ∧ PlayerInConcert(oliver)\n¬PlayInConcert(oliver, piano)\"\"\""
    ]
  },
  {
    "id": 469,
    "question": "Peter is good at playing piano.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))\nPlay(peter, piano) ∧Play(peter, violin)\nPlayInConcert(peter, piano)\nPlayerInConcert(peter) ∧ PlayerInConcert(oliver)\n¬PlayInConcert(oliver, piano)\"\"\""
    ]
  },
  {
    "id": 1312,
    "question": "George enjoys basking in the sun.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoesUnderwater(x) → EnjoysWater(x))\n∀x (CanSwim(x) → GoesUnderwater(x))\n∀x (CanSwim(x) ∨ CanWalk(x))\n∀x (CanWalk(x) → TravelsOnLand(x))\n∀x (EnjoysWater(x) → Splashes(x))\n∀x (TravelsOnLand(x) → EnjoysBasking(x))\nSplashes(george) ∧ CanSwim(george)\n(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))\"\"\""
    ]
  },
  {
    "id": 1313,
    "question": "Liam enjoys basking in the sun and splashing water around.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoesUnderwater(x) → EnjoysWater(x))\n∀x (CanSwim(x) → GoesUnderwater(x))\n∀x (CanSwim(x) ∨ CanWalk(x))\n∀x (CanWalk(x) → TravelsOnLand(x))\n∀x (EnjoysWater(x) → Splashes(x))\n∀x (TravelsOnLand(x) → EnjoysBasking(x))\nSplashes(george) ∧ CanSwim(george)\n(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))\"\"\""
    ]
  },
  {
    "id": 1314,
    "question": "Liam neither enjoys basking in the sun nor splashing water around.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GoesUnderwater(x) → EnjoysWater(x))\n∀x (CanSwim(x) → GoesUnderwater(x))\n∀x (CanSwim(x) ∨ CanWalk(x))\n∀x (CanWalk(x) → TravelsOnLand(x))\n∀x (EnjoysWater(x) → Splashes(x))\n∀x (TravelsOnLand(x) → EnjoysBasking(x))\nSplashes(george) ∧ CanSwim(george)\n(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))\"\"\""
    ]
  },
  {
    "id": 673,
    "question": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)\n PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)\n ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))\"\"\""
    ]
  },
  {
    "id": 674,
    "question": "P value represents the selection intensity for somatic variants in cancer cell lineages.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)\n PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)\n ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))\"\"\""
    ]
  },
  {
    "id": 675,
    "question": "Cancer effect size is a metric that is preferred by the majority of cancer researchers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)\n PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)\n ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))\"\"\""
    ]
  },
  {
    "id": 676,
    "question": "P value doesn't represent metrics of effect.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)\n PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)\n ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))\"\"\""
    ]
  },
  {
    "id": 1407,
    "question": "A worksheet is dispensable.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dispensable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Dispensable(x))\n∀x (Paper(x) → Woodware(x))\n∀x (Good(x) → ¬Bad(x))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\"\"\""
    ]
  },
  {
    "id": 1408,
    "question": "A worksheet is not dispensable.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dispensable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Dispensable(x))\n∀x (Paper(x) → Woodware(x))\n∀x (Good(x) → ¬Bad(x))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\"\"\""
    ]
  },
  {
    "id": 1409,
    "question": "A worksheet is bad.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dispensable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Dispensable(x))\n∀x (Paper(x) → Woodware(x))\n∀x (Good(x) → ¬Bad(x))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\"\"\""
    ]
  },
  {
    "id": 1410,
    "question": "A worksheet is not bad.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dispensable(x) → EnvironmentFriendly(x))\n∀x (Woodware(x) → Dispensable(x))\n∀x (Paper(x) → Woodware(x))\n∀x (Good(x) → ¬Bad(x))\n∀x (EnvironmentFriendly(x) → Good(x))\nPaper(worksheet) ⊕ EnvironmentFriendly(worksheet)\"\"\""
    ]
  },
  {
    "id": 702,
    "question": "Some snake has fur.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Reptile(x) → ¬HasFur(x))\n∀x (Snake(x) → Reptile(x))\"\"\""
    ]
  },
  {
    "id": 178,
    "question": "Tower A is low.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Located(newhaven, x) → ¬High(x))\n∀x (YaleHousing(x) → Located(newhaven, x))\n∀x (Located(manhattans, x) → High(x))\n∀x (Bloomberg(x) → Located(manhattans, x))\n∀x (BloombergLogo(x) → Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)\"\"\""
    ]
  },
  {
    "id": 179,
    "question": "Tower B is not located in Manhattans.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Located(newhaven, x) → ¬High(x))\n∀x (YaleHousing(x) → Located(newhaven, x))\n∀x (Located(manhattans, x) → High(x))\n∀x (Bloomberg(x) → Located(manhattans, x))\n∀x (BloombergLogo(x) → Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)\"\"\""
    ]
  },
  {
    "id": 180,
    "question": "Tower B is located in New Haven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Located(newhaven, x) → ¬High(x))\n∀x (YaleHousing(x) → Located(newhaven, x))\n∀x (Located(manhattans, x) → High(x))\n∀x (Bloomberg(x) → Located(manhattans, x))\n∀x (BloombergLogo(x) → Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)\"\"\""
    ]
  },
  {
    "id": 1309,
    "question": "Ron is a lizard.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ColdBlooded(x) → ¬Bird(x))\n∀x (Reptile(x) → ColdBlooded(x))\n∀x (Bird(x) ∨ EatOtherAnimals(x))\n∀x (EatOtherAnimals(x) → Carnivore(x))\n¬ColdBlooded(ron) ∧ ¬Carnivore(ron)\n¬Carnivore(henry) ∧ ¬Lizard(henry)\"\"\""
    ]
  },
  {
    "id": 1310,
    "question": "Either Henry is a reptile or Ron eats other animals.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ColdBlooded(x) → ¬Bird(x))\n∀x (Reptile(x) → ColdBlooded(x))\n∀x (Bird(x) ∨ EatOtherAnimals(x))\n∀x (EatOtherAnimals(x) → Carnivore(x))\n¬ColdBlooded(ron) ∧ ¬Carnivore(ron)\n¬Carnivore(henry) ∧ ¬Lizard(henry)\"\"\""
    ]
  },
  {
    "id": 1311,
    "question": "It is not true that Ron is a reptile or that Henry is cold-blooded.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ColdBlooded(x) → ¬Bird(x))\n∀x (Reptile(x) → ColdBlooded(x))\n∀x (Bird(x) ∨ EatOtherAnimals(x))\n∀x (EatOtherAnimals(x) → Carnivore(x))\n¬ColdBlooded(ron) ∧ ¬Carnivore(ron)\n¬Carnivore(henry) ∧ ¬Lizard(henry)\"\"\""
    ]
  },
  {
    "id": 222,
    "question": "Yevgeny Kurochkin discovered a new bird genus.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))\n∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))\nDiscovered(yevgenykurochkin, ambiortus)\"\"\""
    ]
  },
  {
    "id": 223,
    "question": "There is a species of Ambiortus that doesn't live in the Mongol region.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))\n∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))\nDiscovered(yevgenykurochkin, ambiortus)\"\"\""
    ]
  },
  {
    "id": 224,
    "question": "Yevgeny Kurochkin lived in the Mongol region.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))\n∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))\nDiscovered(yevgenykurochkin, ambiortus)\"\"\""
    ]
  },
  {
    "id": 225,
    "question": "All species of Ambiortus live in the Mongol region.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrehistoric(ambiortus) ∧ BirdGenus(ambiortus)\n∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))\n∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))\nDiscovered(yevgenykurochkin, ambiortus)\"\"\""
    ]
  },
  {
    "id": 1294,
    "question": "Jack plays football.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UseFootball(x) → ThrowFootball(x))\n∀x (PlayFootball(x) → UseFootball(x))\n∀x (BasketballPlayer(x) ∨ PlayFootball(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (ThrowFootball(x) → ThrowFootballSpiral(x))\n∀x (Tall(x) → InShape(x))\n¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)\"\"\""
    ]
  },
  {
    "id": 1295,
    "question": "Jack is in shape.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UseFootball(x) → ThrowFootball(x))\n∀x (PlayFootball(x) → UseFootball(x))\n∀x (BasketballPlayer(x) ∨ PlayFootball(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (ThrowFootball(x) → ThrowFootballSpiral(x))\n∀x (Tall(x) → InShape(x))\n¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)\"\"\""
    ]
  },
  {
    "id": 1296,
    "question": "Jack is not in shape.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UseFootball(x) → ThrowFootball(x))\n∀x (PlayFootball(x) → UseFootball(x))\n∀x (BasketballPlayer(x) ∨ PlayFootball(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (ThrowFootball(x) → ThrowFootballSpiral(x))\n∀x (Tall(x) → InShape(x))\n¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)\"\"\""
    ]
  },
  {
    "id": 7,
    "question": "Pierre de Rigaud de Vaudreuil built a fort in New France.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCurrentName(fortticonderoga, fortcarillon)\nBuilt(pierrederigauddevaudreuil, fortcarillon)\nLocatedIn(fortcarillon, newfrance)\n¬LocatedIn(newfrance, europe)\"\"\""
    ]
  },
  {
    "id": 8,
    "question": "Pierre de Rigaud de Vaudreuil built a fort in New England.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCurrentName(fortticonderoga, fortcarillon)\nBuilt(pierrederigauddevaudreuil, fortcarillon)\nLocatedIn(fortcarillon, newfrance)\n¬LocatedIn(newfrance, europe)\"\"\""
    ]
  },
  {
    "id": 9,
    "question": "Fort Carillon was located in Europe.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCurrentName(fortticonderoga, fortcarillon)\nBuilt(pierrederigauddevaudreuil, fortcarillon)\nLocatedIn(fortcarillon, newfrance)\n¬LocatedIn(newfrance, europe)\"\"\""
    ]
  },
  {
    "id": 845,
    "question": "Stephen Curry is an NBA player.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (Centerback(x) → Defender(x))\n(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)\"\"\""
    ]
  },
  {
    "id": 846,
    "question": "Stephen Curry is a centerback player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (Centerback(x) → Defender(x))\n(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)\"\"\""
    ]
  },
  {
    "id": 847,
    "question": "Stephen Curry is not a centerback player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (Centerback(x) → Defender(x))\n(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)\"\"\""
    ]
  },
  {
    "id": 1420,
    "question": "Inception is a folk song.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\"\"\""
    ]
  },
  {
    "id": 1421,
    "question": "Inception is not a folk song.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\"\"\""
    ]
  },
  {
    "id": 1422,
    "question": "Inception is either a video or a folk song.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\"\"\""
    ]
  },
  {
    "id": 1423,
    "question": "Mac is a video.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Song(x) → ¬Visual(x))\n∀x (FolkSong(x) → Song(x))\n∀x (Video(x) → Visual(x))\n∀x (Movie(x) → Video(x))\n∀x (ScifiMovie(x) → Movie(x))\nScifiMovie(inception)\n¬FolkSong(mac) ∧ ¬ScifiMovie(mac)\"\"\""
    ]
  },
  {
    "id": 1065,
    "question": "Jeff is a shy and reticent person.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Extroverts(x) → OvertlyExpressive(x))\n ∀x (Extroverts(x) ∨ Introverts(x)) \n ∀x (Introverts(x) → ShyAndReticentPerson(x))\n ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))\n ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)\"\"\""
    ]
  },
  {
    "id": 1066,
    "question": "Jeff is overtly expressive and likes to talk to strangers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Extroverts(x) → OvertlyExpressive(x))\n ∀x (Extroverts(x) ∨ Introverts(x)) \n ∀x (Introverts(x) → ShyAndReticentPerson(x))\n ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))\n ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)\"\"\""
    ]
  },
  {
    "id": 1067,
    "question": "If Jeff is either overtly expressive and likes to talk to strangers or neither overtly expressive nor likes to talk to strangers, then Jeff is neither an extrovert nor likes to talk to strangers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Extroverts(x) → OvertlyExpressive(x))\n ∀x (Extroverts(x) ∨ Introverts(x)) \n ∀x (Introverts(x) → ShyAndReticentPerson(x))\n ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))\n ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)\"\"\""
    ]
  },
  {
    "id": 1138,
    "question": "Candace is a top player in the league.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1139,
    "question": "Candace is bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1140,
    "question": "Candace is solid at shooting 2-pointers or bad at mid-range shots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1141,
    "question": "Candace is either solid at shooting 2-pointers or bad at mid-range shots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1142,
    "question": "Candace is a low-scoring player or bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1143,
    "question": "Candace is either a low-scoring player or bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1144,
    "question": "Candace is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1145,
    "question": "If Candace is not solid at shooting 2-pointers and bad at mid-range shots, then Candace is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 1146,
    "question": "If Candace is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Candace is a top player in the league and bad at mid-range shots.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (LowScore(x) → ¬TopPlayer(x))\n∀x (TopPlayer(x) ∨ ThreePointer(x))\n∀x (ThreePointer(x) → TwoPointer(x))\n∀x (TwoPointer(x) → ¬BadMid(x))\nLowScore(candace) ⊕ ThreePointer(candace)\"\"\""
    ]
  },
  {
    "id": 720,
    "question": "No plants are mushrooms.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬Fungi(x))\n∀x (Mushroom(x) → Fungi(x))\"\"\""
    ]
  },
  {
    "id": 740,
    "question": "Some streets are clean",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → ¬Clean(x))\n∃x (Street(x) ∧ Road(x))\"\"\""
    ]
  },
  {
    "id": 632,
    "question": "Some people flying from New York City to Seattle will be uncomfortable.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOn(newyorkcity, eastcoast)\nOn(seattle, westcoast)\n∀x ∀y ∀z ((TravelingFrom(x, y) ∧ On(y, eastcoast) ∧ TravelingTo(x, z) ∧ On(z, westcoast)) → OnLongFlight(x))\n∃x (¬InFirstClass(x) ∧ TravelingFrom(x, newyorkcity) ∧ TravelingTo(x, seattle))\n∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))\"\"\""
    ]
  },
  {
    "id": 356,
    "question": "Singh Kaur makes a lot of money.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Musician(x) → Busy(x))\nMusician(singhKaur) ∧ Famous(singhKaur)\n∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))\n∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))\"\"\""
    ]
  },
  {
    "id": 357,
    "question": "Singh Kaur is a writer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Musician(x) → Busy(x))\nMusician(singhKaur) ∧ Famous(singhKaur)\n∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))\n∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))\"\"\""
    ]
  },
  {
    "id": 358,
    "question": "Singh Kaur has a very busy life.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Musician(x) → Busy(x))\nMusician(singhKaur) ∧ Famous(singhKaur)\n∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))\n∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))\"\"\""
    ]
  },
  {
    "id": 733,
    "question": "All buildings are magnificent.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Building(x) → ¬Tall(x))\n∀x (Tall(x) → HasHeight(x))\"\"\""
    ]
  },
  {
    "id": 376,
    "question": "The main character of the film Garfield is childish and possessive.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield)\nPet(garfield, jon) ∧ Pet(odie, jon) ∧ ShareHome(garfield, odie)\nHate(garfield, odie)\n∀x ∀y ∃z (Pet(x, z) ∧ Pet(y, z) ∧ Hate(x, y) → BeChildish(x) ∧ BePossessive(x))\n∀x ∃y (Cat(x) → Pet(x, y))\"\"\""
    ]
  },
  {
    "id": 1377,
    "question": "Hulu eats.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Eat(x))\n∀x (Eat(x) → ¬Plant(x))\n∀x (Plant(x) ∨ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ Human(hulu)\"\"\""
    ]
  },
  {
    "id": 1378,
    "question": "Hulu does not eat.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Eat(x))\n∀x (Eat(x) → ¬Plant(x))\n∀x (Plant(x) ∨ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ Human(hulu)\"\"\""
    ]
  },
  {
    "id": 1379,
    "question": "Hulu is dirt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Eat(x))\n∀x (Eat(x) → ¬Plant(x))\n∀x (Plant(x) ∨ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ Human(hulu)\"\"\""
    ]
  },
  {
    "id": 1380,
    "question": "Hulu is an animal or dirt.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Eat(x))\n∀x (Eat(x) → ¬Plant(x))\n∀x (Plant(x) ∨ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ Human(hulu)\"\"\""
    ]
  },
  {
    "id": 1381,
    "question": "Hulu is either an animal or dirt.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Eat(x))\n∀x (Eat(x) → ¬Plant(x))\n∀x (Plant(x) ∨ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ Human(hulu)\"\"\""
    ]
  },
  {
    "id": 1382,
    "question": "If Hulu is either an animal or dirt, then Hulu eats and is dirt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Eat(x))\n∀x (Eat(x) → ¬Plant(x))\n∀x (Plant(x) ∨ Animal(x))\n∀x (Goat(x) → Animal(x))\n∀x (Dirt(x) → ¬Animal(x))\nGoat(hulu) ∨ Human(hulu)\"\"\""
    ]
  },
  {
    "id": 136,
    "question": "The Controlled Substances Act prevents harmful things.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ControlledSubstances(x) → Drugs(x))\n∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))\n∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))\n∀x (ChemicalEndangerment(x) → Harmful(x))\nPassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)\n∃x (Act(x) ∧ PreventsHarm(x))\"\"\""
    ]
  },
  {
    "id": 137,
    "question": "Some drugs are beneficial.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ControlledSubstances(x) → Drugs(x))\n∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))\n∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))\n∀x (ChemicalEndangerment(x) → Harmful(x))\nPassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)\n∃x (Act(x) ∧ PreventsHarm(x))\"\"\""
    ]
  },
  {
    "id": 138,
    "question": "A child in chemical endangerment is in harm.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ControlledSubstances(x) → Drugs(x))\n∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))\n∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))\n∀x (ChemicalEndangerment(x) → Harmful(x))\nPassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)\n∃x (Act(x) ∧ PreventsHarm(x))\"\"\""
    ]
  },
  {
    "id": 821,
    "question": "Mark Zuckerberg is an entrepreneur.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))\n ∀x (Entrepreneurs(x) → StartingANewCompany(x))\n ∀x (Risk-averse(x) → WorkAtCorporateJobs(x))\n ∀x (HateWorkingForOthers(x) → Entrepreneurs(x))\n ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)\"\"\""
    ]
  },
  {
    "id": 822,
    "question": "Mark Zuckerberg is a risk-averse person.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))\n ∀x (Entrepreneurs(x) → StartingANewCompany(x))\n ∀x (Risk-averse(x) → WorkAtCorporateJobs(x))\n ∀x (HateWorkingForOthers(x) → Entrepreneurs(x))\n ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)\"\"\""
    ]
  },
  {
    "id": 823,
    "question": "Mark Zuckerberg is not a risk-averse person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))\n ∀x (Entrepreneurs(x) → StartingANewCompany(x))\n ∀x (Risk-averse(x) → WorkAtCorporateJobs(x))\n ∀x (HateWorkingForOthers(x) → Entrepreneurs(x))\n ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)\"\"\""
    ]
  },
  {
    "id": 573,
    "question": "If someone is cooking downstairs, it will always cause the first floor to become smokey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kitchen(x) → Up(x) ⊕ Down(x))\n(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)\n(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)\"\"\""
    ]
  },
  {
    "id": 574,
    "question": "If someone is cooking upstairs, the first floor will become smokey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kitchen(x) → Up(x) ⊕ Down(x))\n(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)\n(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)\"\"\""
    ]
  },
  {
    "id": 575,
    "question": "If someone is cooking downstairs and the air conditioner is running, there will be smoke upstairs.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kitchen(x) → Up(x) ⊕ Down(x))\n(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)\n(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)\"\"\""
    ]
  },
  {
    "id": 377,
    "question": "A highly developed city is located in the western hemisphere of the earth.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocate(nyc, usa)\nLocate(usa, northAmerica)\nLocate(northAmerica, westHemisphere)\nHighlyDeveloped(nyc)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\"\"\""
    ]
  },
  {
    "id": 378,
    "question": "USA is not located in western hemisphere of the earth.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocate(nyc, usa)\nLocate(usa, northAmerica)\nLocate(northAmerica, westHemisphere)\nHighlyDeveloped(nyc)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\"\"\""
    ]
  },
  {
    "id": 379,
    "question": "New York City is located in the New York State.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLocate(nyc, usa)\nLocate(usa, northAmerica)\nLocate(northAmerica, westHemisphere)\nHighlyDeveloped(nyc)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\"\"\""
    ]
  },
  {
    "id": 429,
    "question": "There exists a poem written by an ancient Roman writer with a strong analogy of human aging.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)\nRetirementShip(callus4)\nPoem(callus4) → AgingAnalogy(callus4)\nPoem(callus4) → Lambic(callus4) ∧ Waves(callus4)\"\"\""
    ]
  },
  {
    "id": 430,
    "question": "There exists a poem written by an ancient Roman writer written in iambic petameter.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)\nRetirementShip(callus4)\nPoem(callus4) → AgingAnalogy(callus4)\nPoem(callus4) → Lambic(callus4) ∧ Waves(callus4)\"\"\""
    ]
  },
  {
    "id": 431,
    "question": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)\nRetirementShip(callus4)\nPoem(callus4) → AgingAnalogy(callus4)\nPoem(callus4) → Lambic(callus4) ∧ Waves(callus4)\"\"\""
    ]
  },
  {
    "id": 671,
    "question": "Michael Crichton has directed a film about robots.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)\nDebut(westworld, year2016)\n∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))\nAbout(westworld, robots)\"\"\""
    ]
  },
  {
    "id": 672,
    "question": "An American TV series debuted in 2016.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)\nDebut(westworld, year2016)\n∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))\nAbout(westworld, robots)\"\"\""
    ]
  },
  {
    "id": 659,
    "question": "Russia did not win fewer gold medals than China.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeldIn(summer2008olympics, beijingchina)\nSecondToBe(summer2008olympics, heldincommuniststate)\nWon(china, mostgoldmedals)\nPlaced(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)\nPlaced(russia, thirdingoldmedals)\n∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))\n∃x (Country(x) ∧ Won(x, medal))\"\"\""
    ]
  },
  {
    "id": 660,
    "question": "The United States won fewer gold medals than China.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeldIn(summer2008olympics, beijingchina)\nSecondToBe(summer2008olympics, heldincommuniststate)\nWon(china, mostgoldmedals)\nPlaced(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)\nPlaced(russia, thirdingoldmedals)\n∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))\n∃x (Country(x) ∧ Won(x, medal))\"\"\""
    ]
  },
  {
    "id": 661,
    "question": "Russia won fewer gold medals than China.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeldIn(summer2008olympics, beijingchina)\nSecondToBe(summer2008olympics, heldincommuniststate)\nWon(china, mostgoldmedals)\nPlaced(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)\nPlaced(russia, thirdingoldmedals)\n∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))\n∃x (Country(x) ∧ Won(x, medal))\"\"\""
    ]
  },
  {
    "id": 78,
    "question": "Xiangshan and Diecai are districts in the same city.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)\n¬DistrictIn(yangshuo, guilin)\"\"\""
    ]
  },
  {
    "id": 79,
    "question": "Xiufeng is in Guilin.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)\n¬DistrictIn(yangshuo, guilin)\"\"\""
    ]
  },
  {
    "id": 80,
    "question": "Kowloon District is in Hong Kong.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)\n¬DistrictIn(yangshuo, guilin)\"\"\""
    ]
  },
  {
    "id": 1004,
    "question": "Michael enjoys going out often to restaurants with friends.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Garden(x) → Space(x))\n∀x (Professional(x) → ¬Space(x))\n∀x (Takeout(x) → Garden(x))\n∀x (GoingOut(x) → Takeout(x))\n∀x (Homecooked(x) → GoingOut(x))\nGarden(michael) ∨ Homecooked(michael)\"\"\""
    ]
  },
  {
    "id": 1005,
    "question": "Michael is a young working professional who lives in large cities.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Garden(x) → Space(x))\n∀x (Professional(x) → ¬Space(x))\n∀x (Takeout(x) → Garden(x))\n∀x (GoingOut(x) → Takeout(x))\n∀x (Homecooked(x) → GoingOut(x))\nGarden(michael) ∨ Homecooked(michael)\"\"\""
    ]
  },
  {
    "id": 1006,
    "question": "Michael grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Garden(x) → Space(x))\n∀x (Professional(x) → ¬Space(x))\n∀x (Takeout(x) → Garden(x))\n∀x (GoingOut(x) → Takeout(x))\n∀x (Homecooked(x) → GoingOut(x))\nGarden(michael) ∨ Homecooked(michael)\"\"\""
    ]
  },
  {
    "id": 184,
    "question": "iPod1 is easy to operate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Company(x) → GoogleHome(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → Controlled(x))\n∀x (Wifi(x) → EasyToOperate(x))\nEmployee(iPod1)\"\"\""
    ]
  },
  {
    "id": 185,
    "question": "iPod1 is controlled by managers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Company(x) → GoogleHome(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → Controlled(x))\n∀x (Wifi(x) → EasyToOperate(x))\nEmployee(iPod1)\"\"\""
    ]
  },
  {
    "id": 186,
    "question": "iPod1 is connected to Google Home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Company(x) → GoogleHome(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → Controlled(x))\n∀x (Wifi(x) → EasyToOperate(x))\nEmployee(iPod1)\"\"\""
    ]
  },
  {
    "id": 1135,
    "question": "Ryan is interesting as an individual performer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Orchestra(x) → ¬Touring(x))\n∀x (Orchestra(x) ⊕ Unique(x))\n∀x (Unique(x) → Interesting(x))\n∀x (Interesting(x) → Capable(x))\n(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))\"\"\""
    ]
  },
  {
    "id": 1136,
    "question": "Ryan is either a permanent member of an orchestra or a touring soloist musician.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Orchestra(x) → ¬Touring(x))\n∀x (Orchestra(x) ⊕ Unique(x))\n∀x (Unique(x) → Interesting(x))\n∀x (Interesting(x) → Capable(x))\n(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))\"\"\""
    ]
  },
  {
    "id": 1137,
    "question": "Ryan is either a permanent member of an orchestra or has a unique musical voice or style.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Orchestra(x) → ¬Touring(x))\n∀x (Orchestra(x) ⊕ Unique(x))\n∀x (Unique(x) → Interesting(x))\n∀x (Interesting(x) → Capable(x))\n(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))\"\"\""
    ]
  },
  {
    "id": 1411,
    "question": "Harry is cool.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Yell(x) → ¬Cool(x))\n∀x (Angry(x) → Yell(x))\n∀x (Fly(x) → Cool(x))\n∀x (KnowMagic(x) → Fly(x))\n∀x (Wizard(x) → KnowMagic(x))\n(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))\nWizard(potter) ∧ Fly(potter)\"\"\""
    ]
  },
  {
    "id": 1412,
    "question": "Harry is not cool.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Yell(x) → ¬Cool(x))\n∀x (Angry(x) → Yell(x))\n∀x (Fly(x) → Cool(x))\n∀x (KnowMagic(x) → Fly(x))\n∀x (Wizard(x) → KnowMagic(x))\n(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))\nWizard(potter) ∧ Fly(potter)\"\"\""
    ]
  },
  {
    "id": 1413,
    "question": "Harry is a wizard or angry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Yell(x) → ¬Cool(x))\n∀x (Angry(x) → Yell(x))\n∀x (Fly(x) → Cool(x))\n∀x (KnowMagic(x) → Fly(x))\n∀x (Wizard(x) → KnowMagic(x))\n(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))\nWizard(potter) ∧ Fly(potter)\"\"\""
    ]
  },
  {
    "id": 1414,
    "question": "Harry is neither a wizard nor angry.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Yell(x) → ¬Cool(x))\n∀x (Angry(x) → Yell(x))\n∀x (Fly(x) → Cool(x))\n∀x (KnowMagic(x) → Fly(x))\n∀x (Wizard(x) → KnowMagic(x))\n(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))\nWizard(potter) ∧ Fly(potter)\"\"\""
    ]
  },
  {
    "id": 1253,
    "question": "G-910 is displayed on the homepage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) ⊕ US(x))\n∀x (China(x) → Labeled(x))\n∀x (US(x) → SoldInUS(x))\n∀x (Labeled(x) → Cheaper(x))\n∀x (SoldInUS(x) → SoldInWalmart(x))\n∀x (DisplayedInHomepage(x) → SoldInWalmart(x))\n∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))\n¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))\"\"\""
    ]
  },
  {
    "id": 1254,
    "question": "G-910 is not displayed on the homepage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) ⊕ US(x))\n∀x (China(x) → Labeled(x))\n∀x (US(x) → SoldInUS(x))\n∀x (Labeled(x) → Cheaper(x))\n∀x (SoldInUS(x) → SoldInWalmart(x))\n∀x (DisplayedInHomepage(x) → SoldInWalmart(x))\n∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))\n¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))\"\"\""
    ]
  },
  {
    "id": 1255,
    "question": "G-910 is a product returned by customers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) ⊕ US(x))\n∀x (China(x) → Labeled(x))\n∀x (US(x) → SoldInUS(x))\n∀x (Labeled(x) → Cheaper(x))\n∀x (SoldInUS(x) → SoldInWalmart(x))\n∀x (DisplayedInHomepage(x) → SoldInWalmart(x))\n∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))\n¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))\"\"\""
    ]
  },
  {
    "id": 1256,
    "question": "G-910 is a product returned by customers or sold in Walmart.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) ⊕ US(x))\n∀x (China(x) → Labeled(x))\n∀x (US(x) → SoldInUS(x))\n∀x (Labeled(x) → Cheaper(x))\n∀x (SoldInUS(x) → SoldInWalmart(x))\n∀x (DisplayedInHomepage(x) → SoldInWalmart(x))\n∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))\n¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))\"\"\""
    ]
  },
  {
    "id": 1257,
    "question": "G-910 is either returned by customers or sold in Walmart.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) ⊕ US(x))\n∀x (China(x) → Labeled(x))\n∀x (US(x) → SoldInUS(x))\n∀x (Labeled(x) → Cheaper(x))\n∀x (SoldInUS(x) → SoldInWalmart(x))\n∀x (DisplayedInHomepage(x) → SoldInWalmart(x))\n∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))\n¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))\"\"\""
    ]
  },
  {
    "id": 944,
    "question": "Marcy either orders a lot of Amazon packages or saves a lot of money.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Amazon(x) ⊕ Environmental(x))\n∀x (Amazon(x) → DailyMail(x))\n∀x (Environmental(x) → Solar(x))\n∀x (DailyMail(x) → Neighborhood(x))\n∀x (Solar(x) → SaveMoney(x))\n¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → (¬DailyMail(marcy) ∨ ¬Amazon(marcy))\"\"\""
    ]
  },
  {
    "id": 945,
    "question": "If Marcy is not a person who orders a lot of Amazon packages and is very environmentally conscious, then Taylor is not someone who saves a lot of money and is environmentally conscious.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Amazon(x) ⊕ Environmental(x))\n∀x (Amazon(x) → DailyMail(x))\n∀x (Environmental(x) → Solar(x))\n∀x (DailyMail(x) → Neighborhood(x))\n∀x (Solar(x) → SaveMoney(x))\n¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → (¬DailyMail(marcy) ∨ ¬Amazon(marcy))\"\"\""
    ]
  },
  {
    "id": 497,
    "question": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCountry(indonesia)\n∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))\nCrime(corruption)\n∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))\n∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))\n∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))\"\"\""
    ]
  },
  {
    "id": 498,
    "question": "In Indonesia, the prosecutor personally investigates cases of corruption.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCountry(indonesia)\n∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))\nCrime(corruption)\n∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))\n∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))\n∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))\"\"\""
    ]
  },
  {
    "id": 499,
    "question": "When the police complete investigations, the prosecutor investigates in personally.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCountry(indonesia)\n∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))\nCrime(corruption)\n∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))\n∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))\n∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))\"\"\""
    ]
  },
  {
    "id": 901,
    "question": "Moonwatch is a mechanical watch.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)\"\"\""
    ]
  },
  {
    "id": 902,
    "question": "Moonwatch is a smartwatch and a mechanical watch.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)\"\"\""
    ]
  },
  {
    "id": 903,
    "question": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)\"\"\""
    ]
  },
  {
    "id": 904,
    "question": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))\n∀x (DigitalWatch(x) → BatteryPoweredWatch(x))\n∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))\n∀x (SmartWatch(x) → DigitalWatch(x))\n¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)\"\"\""
    ]
  },
  {
    "id": 691,
    "question": "John cannot use different condiments to cook.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))\n∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))\n∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) \n∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))\n∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))\"\"\""
    ]
  },
  {
    "id": 701,
    "question": "In Russia, an effective monetary policy is possible.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (EffMonPolicy(x) → InfControl(x) ∧ StongCurr(x))\n¬(∀x (InfControl(x) ∧ ExRate(x)))\n∀x (Embargo(x) → ExportFall(x))\n∀x (ExportFall(x) → ¬StongCurr(x))\n∀x (ExRate(x) → StongCurr(x))\nEmbargo(russia)\"\"\""
    ]
  },
  {
    "id": 421,
    "question": "Viewers send in funny videos to the French broadcast channel that are in French.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))\n∀x (VideoGag(x) → ChannelTF1(x))\n∀x (FunnyVideos(x) → AirsWeekly(x))\n∀x (VideoGag(x) → AirsWeekly(x) ∧ French(x))\"\"\""
    ]
  },
  {
    "id": 422,
    "question": "Viewers send in funny videos to the French broadcast channel that are in English.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))\n∀x (VideoGag(x) → ChannelTF1(x))\n∀x (FunnyVideos(x) → AirsWeekly(x))\n∀x (VideoGag(x) → AirsWeekly(x) ∧ French(x))\"\"\""
    ]
  },
  {
    "id": 1386,
    "question": "Jack is a thing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Engineer(x) → Worker(x))\n∀x (Worker(x) → Human(x))\nEngineer(jack) ⊕ Worker(jack) \nHuman(jack) ⊕ Phone(jack)\"\"\""
    ]
  },
  {
    "id": 1387,
    "question": "Jack is not a thing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Engineer(x) → Worker(x))\n∀x (Worker(x) → Human(x))\nEngineer(jack) ⊕ Worker(jack) \nHuman(jack) ⊕ Phone(jack)\"\"\""
    ]
  },
  {
    "id": 1388,
    "question": "Jack is a thing and an iPhone.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Engineer(x) → Worker(x))\n∀x (Worker(x) → Human(x))\nEngineer(jack) ⊕ Worker(jack) \nHuman(jack) ⊕ Phone(jack)\"\"\""
    ]
  },
  {
    "id": 1389,
    "question": "Jack is not both a thing and an iPhone.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Phone(x) → Thing(x))\n∀x (Cellphone(x) → Phone(x))\n∀x (Iphone(x) → Cellphone(x))\n∀x (Engineer(x) → Worker(x))\n∀x (Worker(x) → Human(x))\nEngineer(jack) ⊕ Worker(jack) \nHuman(jack) ⊕ Phone(jack)\"\"\""
    ]
  },
  {
    "id": 738,
    "question": "No phones are electronic.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IPhone(x) → Electronic(x))\n∃x (Phone(x) ∧ IPhone(x))\"\"\""
    ]
  },
  {
    "id": 111,
    "question": "A museum in NYC includes Byzantine and Islamic Art.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMuseum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)\nMuseum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)\nMuseum(museumofModernArt) ∧ InNYC(museumofModernArt)\nInclude(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)\nInclude(whitneyMuseumofAmericanArt, americanArt)\"\"\""
    ]
  },
  {
    "id": 112,
    "question": "A museum in NYC includes American art.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMuseum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)\nMuseum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)\nMuseum(museumofModernArt) ∧ InNYC(museumofModernArt)\nInclude(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)\nInclude(whitneyMuseumofAmericanArt, americanArt)\"\"\""
    ]
  },
  {
    "id": 113,
    "question": "A museum in NYC includes Greek art.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMuseum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)\nMuseum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)\nMuseum(museumofModernArt) ∧ InNYC(museumofModernArt)\nInclude(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)\nInclude(whitneyMuseumofAmericanArt, americanArt)\"\"\""
    ]
  },
  {
    "id": 1122,
    "question": "Benji is a person who likes eating cheese.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spanish(x) ∨ Francophile(x))\n∀x (Francophile(x) → ¬SpainFav(x))\n∀x (SpainFav(x) ∨ Cheese(x))\n¬(Cheese(benji) ∧ Spanish(benji))\n¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))\"\"\""
    ]
  },
  {
    "id": 1123,
    "question": "If Benji is either a person who likes eating cheese or a francophile, then Benji is neither a person who studies Spanish nor a person who studies French.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spanish(x) ∨ Francophile(x))\n∀x (Francophile(x) → ¬SpainFav(x))\n∀x (SpainFav(x) ∨ Cheese(x))\n¬(Cheese(benji) ∧ Spanish(benji))\n¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))\"\"\""
    ]
  },
  {
    "id": 1124,
    "question": "If Benji is a person who likes Spain as their favorite country or studies French, then Benji is either a person who studies Spanish or a person who likes Spain as their favorite country.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spanish(x) ∨ Francophile(x))\n∀x (Francophile(x) → ¬SpainFav(x))\n∀x (SpainFav(x) ∨ Cheese(x))\n¬(Cheese(benji) ∧ Spanish(benji))\n¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))\"\"\""
    ]
  },
  {
    "id": 84,
    "question": "Gasteren is a Dutch village.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)\nProvince(drenthe) ∧ Dutch(drenthe)\n∀x (City(x) → ¬Village(x))\n∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))\"\"\""
    ]
  },
  {
    "id": 85,
    "question": "Gasteren is a city.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)\nProvince(drenthe) ∧ Dutch(drenthe)\n∀x (City(x) → ¬Village(x))\n∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))\"\"\""
    ]
  },
  {
    "id": 86,
    "question": "Gasteren has a population of 155.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVillage(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)\nProvince(drenthe) ∧ Dutch(drenthe)\n∀x (City(x) → ¬Village(x))\n∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))\"\"\""
    ]
  },
  {
    "id": 603,
    "question": "Hyraxes lay eggs.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))\n∀x (Platypuses(x) → ¬Hyrax(x))\n∀x (Echidnas(x) → ¬Hyrax(x))\n∀x (Mammal(x) → ¬Invertebrate(x))\n∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n∀x (Mammal(x) → Animal(x))\n∀x (Hyrax(x) → Mammal(x))\n∀x (Grebes(x) → LayEgg(x))\n∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))\"\"\""
    ]
  },
  {
    "id": 604,
    "question": "Grebes are not mammals.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))\n∀x (Platypuses(x) → ¬Hyrax(x))\n∀x (Echidnas(x) → ¬Hyrax(x))\n∀x (Mammal(x) → ¬Invertebrate(x))\n∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n∀x (Mammal(x) → Animal(x))\n∀x (Hyrax(x) → Mammal(x))\n∀x (Grebes(x) → LayEgg(x))\n∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))\"\"\""
    ]
  },
  {
    "id": 605,
    "question": "Platypuses are vertebrates.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))\n∀x (Platypuses(x) → ¬Hyrax(x))\n∀x (Echidnas(x) → ¬Hyrax(x))\n∀x (Mammal(x) → ¬Invertebrate(x))\n∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))\n∀x (Mammal(x) → Animal(x))\n∀x (Hyrax(x) → Mammal(x))\n∀x (Grebes(x) → LayEgg(x))\n∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))\"\"\""
    ]
  },
  {
    "id": 271,
    "question": "Bobby Flynn is an Australian citizen.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSinger(bobbyFlynn) ∧ SongWriter(bobbyFlynn)\nFinished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)\n∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))\nMadeNationWideTour2007(theOmegaThreeBand) \nIsMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)\"\"\""
    ]
  },
  {
    "id": 272,
    "question": "Bobby Flynn flew to America in 2007.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSinger(bobbyFlynn) ∧ SongWriter(bobbyFlynn)\nFinished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)\n∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))\nMadeNationWideTour2007(theOmegaThreeBand) \nIsMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)\"\"\""
    ]
  },
  {
    "id": 273,
    "question": "Bobby Flynn was born in Queens.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSinger(bobbyFlynn) ∧ SongWriter(bobbyFlynn)\nFinished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)\n∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))\nMadeNationWideTour2007(theOmegaThreeBand) \nIsMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)\"\"\""
    ]
  },
  {
    "id": 718,
    "question": "All enzymes are proteins.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Protein(x) → OrganicCompound(x))\n∀x (Enzyme(x) → OrganicCompound(x))\"\"\""
    ]
  },
  {
    "id": 296,
    "question": "There is a series by ABC that was developed by the showrunner of Witches of East End.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)\nShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)\nFantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)\nProduced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)\nSeries(eastwick) ∧ By(eastwick, abc)\"\"\""
    ]
  },
  {
    "id": 297,
    "question": "There isn't a series by ABC that was developed by the showrunner of Witches of East End.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)\nShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)\nFantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)\nProduced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)\nSeries(eastwick) ∧ By(eastwick, abc)\"\"\""
    ]
  },
  {
    "id": 298,
    "question": "Maggie Friedman developed Witches of East End.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)\nShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)\nFantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)\nProduced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)\nSeries(eastwick) ∧ By(eastwick, abc)\"\"\""
    ]
  },
  {
    "id": 359,
    "question": "IBM has an office in London or Zurich.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(evangeloseleftheriou) ∧ ElectricalEngineer(evangeloseleftheriou)\nWorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)\n∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))\nCompany(ibm)\"\"\""
    ]
  },
  {
    "id": 360,
    "question": "No Greeks have worked for IBM.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(evangeloseleftheriou) ∧ ElectricalEngineer(evangeloseleftheriou)\nWorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)\n∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))\nCompany(ibm)\"\"\""
    ]
  },
  {
    "id": 434,
    "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a #1 hit in Germany.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))\nSong(hooray) ∧ HitEurope(hooray)\nSong(hooray) ∧ ¬N1GermanSingle(hooray)\n∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))\"\"\""
    ]
  },
  {
    "id": 435,
    "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))\nSong(hooray) ∧ HitEurope(hooray)\nSong(hooray) ∧ ¬N1GermanSingle(hooray)\n∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))\"\"\""
    ]
  },
  {
    "id": 436,
    "question": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))\nSong(hooray) ∧ HitEurope(hooray)\nSong(hooray) ∧ ¬N1GermanSingle(hooray)\n∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))\"\"\""
    ]
  },
  {
    "id": 697,
    "question": "Luke can make a good breakfast.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Chef(x) → Cook(x))\n∃x (¬Chef(x) ∧ Cook(x))\n∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))\n∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))\n∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))\nMakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)\"\"\""
    ]
  },
  {
    "id": 698,
    "question": "Luke is a chef.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Chef(x) → Cook(x))\n∃x (¬Chef(x) ∧ Cook(x))\n∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))\n∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))\n∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))\nMakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)\"\"\""
    ]
  },
  {
    "id": 561,
    "question": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))\n∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))\n∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))\n∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))\"\"\""
    ]
  },
  {
    "id": 562,
    "question": "ETS doesn't administer tests internationally.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))\n∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))\n∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))\n∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))\"\"\""
    ]
  },
  {
    "id": 563,
    "question": "ETS administers international tests including the TOEFL, GRE and subject tests in China.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))\n∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))\n∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))\n∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))\"\"\""
    ]
  },
  {
    "id": 998,
    "question": "Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Gelato(x) → Italy(x))\n∀x (¬Resist(x))\n∀x (Gelato(x) ∨ Travel(x))\n∀x (Europe(x) → ¬Regret(x))\n∀x (Travel(x) → Europe(x))\n(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))\"\"\""
    ]
  },
  {
    "id": 999,
    "question": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or, if not, then he can resist the hallmark delectable drinks and desserts that are famed in Italy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Gelato(x) → Italy(x))\n∀x (¬Resist(x))\n∀x (Gelato(x) ∨ Travel(x))\n∀x (Europe(x) → ¬Regret(x))\n∀x (Travel(x) → Europe(x))\n(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))\"\"\""
    ]
  },
  {
    "id": 1000,
    "question": "If Robert is not both a person who can resist the hallmark delectable drinks and desserts that are famed in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Gelato(x) → Italy(x))\n∀x (¬Resist(x))\n∀x (Gelato(x) ∨ Travel(x))\n∀x (Europe(x) → ¬Regret(x))\n∀x (Travel(x) → Europe(x))\n(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))\"\"\""
    ]
  },
  {
    "id": 781,
    "question": "Tom is a PhD graduate.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (StudentVisa(x) → FullTimeAcademic(x))\n∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))\n∀x (StudyAbroad(x) → StudentVisa(x))\n∀x (PhdGraduate(x) → WorkFullTime(x))\n¬StudyAbroad(tom) → FullTimeAcademic(tom)\"\"\""
    ]
  },
  {
    "id": 782,
    "question": "Tom is not a PhD graduate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (StudentVisa(x) → FullTimeAcademic(x))\n∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))\n∀x (StudyAbroad(x) → StudentVisa(x))\n∀x (PhdGraduate(x) → WorkFullTime(x))\n¬StudyAbroad(tom) → FullTimeAcademic(tom)\"\"\""
    ]
  },
  {
    "id": 783,
    "question": "Tom wants to study abroad.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (StudentVisa(x) → FullTimeAcademic(x))\n∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))\n∀x (StudyAbroad(x) → StudentVisa(x))\n∀x (PhdGraduate(x) → WorkFullTime(x))\n¬StudyAbroad(tom) → FullTimeAcademic(tom)\"\"\""
    ]
  },
  {
    "id": 396,
    "question": "Sally's company utilizes the installment sales method.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsesGAAP(x) → UsesInstallmentMethod(x))\n∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))\n∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))\nDevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)\nWorksFor(sally, ussecuritiesandexchangecommission)\"\"\""
    ]
  },
  {
    "id": 397,
    "question": "The company Sally works for performs accrual accounting.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsesGAAP(x) → UsesInstallmentMethod(x))\n∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))\n∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))\nDevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)\nWorksFor(sally, ussecuritiesandexchangecommission)\"\"\""
    ]
  },
  {
    "id": 398,
    "question": "Sally does not work for a company that uses the GAAP.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UsesGAAP(x) → UsesInstallmentMethod(x))\n∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))\n∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))\nDevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)\nWorksFor(sally, ussecuritiesandexchangecommission)\"\"\""
    ]
  },
  {
    "id": 1216,
    "question": "James contributes to the country.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (HaveVisitWithoutAnyFees(x) → Respected(x))\n∀x (Army(x) → HaveVisitWithoutAnyFees(x))\n∀x (Thief(x) → Prison(x))\n∀x (Prison(x) → BadRecord(x))\nThief(james) ⊕ Prison(james) \nBadRecord(james) ⊕ Respected(james)\"\"\""
    ]
  },
  {
    "id": 1217,
    "question": "James does not contribute to the country.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (HaveVisitWithoutAnyFees(x) → Respected(x))\n∀x (Army(x) → HaveVisitWithoutAnyFees(x))\n∀x (Thief(x) → Prison(x))\n∀x (Prison(x) → BadRecord(x))\nThief(james) ⊕ Prison(james) \nBadRecord(james) ⊕ Respected(james)\"\"\""
    ]
  },
  {
    "id": 1218,
    "question": "James contributes to the country, and he once served in the army.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (HaveVisitWithoutAnyFees(x) → Respected(x))\n∀x (Army(x) → HaveVisitWithoutAnyFees(x))\n∀x (Thief(x) → Prison(x))\n∀x (Prison(x) → BadRecord(x))\nThief(james) ⊕ Prison(james) \nBadRecord(james) ⊕ Respected(james)\"\"\""
    ]
  },
  {
    "id": 1219,
    "question": "James did not contribute to the country and did not serve in the army.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (Respected(x) → ContributeToCountry(x))\n∀x (HaveVisitWithoutAnyFees(x) → Respected(x))\n∀x (Army(x) → HaveVisitWithoutAnyFees(x))\n∀x (Thief(x) → Prison(x))\n∀x (Prison(x) → BadRecord(x))\nThief(james) ⊕ Prison(james) \nBadRecord(james) ⊕ Respected(james)\"\"\""
    ]
  },
  {
    "id": 32,
    "question": "Water from the Croton River watershed flows to somewhere in New York.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDrainageBasinOf(crotonriverwatershed, crotonriver)\nIn(crotonriver, southwesternnewyork)\n∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))\nIn(bronx, newyork)\"\"\""
    ]
  },
  {
    "id": 33,
    "question": "The Croton River watershed is in the Bronx.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDrainageBasinOf(crotonriverwatershed, crotonriver)\nIn(crotonriver, southwesternnewyork)\n∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))\nIn(bronx, newyork)\"\"\""
    ]
  },
  {
    "id": 34,
    "question": "Water from the Croton River flows to the Bronx.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDrainageBasinOf(crotonriverwatershed, crotonriver)\nIn(crotonriver, southwesternnewyork)\n∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))\nIn(bronx, newyork)\"\"\""
    ]
  },
  {
    "id": 710,
    "question": "Some warships are commercial vessels.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NuclearPoweredSubmarine(x) → Warship(x))\n∀x (NuclearPoweredSubmarine(x) → ¬CommercialVessel(x))\"\"\""
    ]
  },
  {
    "id": 199,
    "question": "The genre of Trouble at the Henhouse is rock.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))\"\"\""
    ]
  },
  {
    "id": 200,
    "question": "A canada rock band didn't win the Album of the Year award.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))\"\"\""
    ]
  },
  {
    "id": 201,
    "question": "\"Butts Wigglin'\" appeared in a film.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))\n∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))\"\"\""
    ]
  },
  {
    "id": 681,
    "question": "Daniel once applied to Stanford University, but he couldn’t get in even though he has family members who are Stanford alumni.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)\n StudiedBioengineering(daniel, riceUniversity)\n WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)\n DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)\"\"\""
    ]
  },
  {
    "id": 682,
    "question": "Daniel studied bioengineering as his major at Rice University.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)\n StudiedBioengineering(daniel, riceUniversity)\n WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)\n DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)\"\"\""
    ]
  },
  {
    "id": 683,
    "question": "Daniel and his sister grew up in Minneapolis, Minnesota.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)\n StudiedBioengineering(daniel, riceUniversity)\n WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)\n DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)\"\"\""
    ]
  },
  {
    "id": 327,
    "question": "An American Airlines plane is either a Boeing or Airbus plane.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))\n∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))\nMoreinRevenue(airbus, boeing)\"\"\""
    ]
  },
  {
    "id": 328,
    "question": "There exists a SpaceX commerical aircraft.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))\n∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))\nMoreinRevenue(airbus, boeing)\"\"\""
    ]
  },
  {
    "id": 329,
    "question": "There does not exist a United Airlines plane produced by Boeing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))\n∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))\nMoreinRevenue(airbus, boeing)\"\"\""
    ]
  },
  {
    "id": 330,
    "question": "There is a commercial plane made by both Airbus and Boeing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))\n∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))\nMoreinRevenue(airbus, boeing)\"\"\""
    ]
  },
  {
    "id": 256,
    "question": "Leyte is an island in the Philippines.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsland(luzon) ∧ In(luzon, philippines)\n∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon))\n∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))\"\"\""
    ]
  },
  {
    "id": 257,
    "question": "No one has ever died of an earthquake that struck in the Philippines.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsland(luzon) ∧ In(luzon, philippines)\n∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon))\n∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))\"\"\""
    ]
  },
  {
    "id": 258,
    "question": "In 1999, there was at least one earthquake in the Philippines.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsland(luzon) ∧ In(luzon, philippines)\n∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon))\n∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))\"\"\""
    ]
  },
  {
    "id": 966,
    "question": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Invests(x) ∨ Gambling(x))\n∀x (Invests(x) → Newspapers(x))\n∀x (Gambling(x) → Casinos(x))\n∀x (Casinos(x) → LasVegas(x))\n∀x (Casinos(x) → DisposableIncome(x))\nInvests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt)\"\"\""
    ]
  },
  {
    "id": 967,
    "question": "If Matt is either both a person who has a lot of disposable income to spend and invests in the public stock market regularly, or neither has a lot of disposable income to spend nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Invests(x) ∨ Gambling(x))\n∀x (Invests(x) → Newspapers(x))\n∀x (Gambling(x) → Casinos(x))\n∀x (Casinos(x) → LasVegas(x))\n∀x (Casinos(x) → DisposableIncome(x))\nInvests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt)\"\"\""
    ]
  },
  {
    "id": 968,
    "question": "If Matt is either a person who has a lot of disposable income to spend or reads the Wall Street Journal and other newspapers regularly, then Matt neither has a lot of disposable income to spend nor visits the Las Vegas Strip Regularly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Invests(x) ∨ Gambling(x))\n∀x (Invests(x) → Newspapers(x))\n∀x (Gambling(x) → Casinos(x))\n∀x (Casinos(x) → LasVegas(x))\n∀x (Casinos(x) → DisposableIncome(x))\nInvests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt)\"\"\""
    ]
  },
  {
    "id": 688,
    "question": "John can get the rhythms right.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))\n∀x (Student(x) ∧ StrikeRightNotes(x) → GetRhythmRight(x))\n∀x (Student(x) ∧ GetRhythmRight(x) → StartCoordination(x))\n∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x))\nStrikeRightNotes(john) ∧ GetRhythmRight(john) ∧ GoodAtCoordination(john) → PutEmotion(john)\nStudent(john) ∧ LearningPiano(john)\n¬FindCoordinationChallenging(john)\"\"\""
    ]
  },
  {
    "id": 689,
    "question": "John does not put emotions into his playing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))\n∀x (Student(x) ∧ StrikeRightNotes(x) → GetRhythmRight(x))\n∀x (Student(x) ∧ GetRhythmRight(x) → StartCoordination(x))\n∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x))\nStrikeRightNotes(john) ∧ GetRhythmRight(john) ∧ GoodAtCoordination(john) → PutEmotion(john)\nStudent(john) ∧ LearningPiano(john)\n¬FindCoordinationChallenging(john)\"\"\""
    ]
  },
  {
    "id": 654,
    "question": "Barbara Ann Marshall did not receive medals.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)\nParticipatedIn(barbaraannmarshall, summer1972olympics)\nHomeCountry(barbaraannmarshall, unitedstates)\n∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))\nParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)\n¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)\n∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))\"\"\""
    ]
  },
  {
    "id": 655,
    "question": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)\nParticipatedIn(barbaraannmarshall, summer1972olympics)\nHomeCountry(barbaraannmarshall, unitedstates)\n∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))\nParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)\n¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)\n∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))\"\"\""
    ]
  },
  {
    "id": 576,
    "question": "It is possible to move to the green stage without ever reaching the yellow stage.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Player(x))\n∀x (Player(x) → StartRed(x))\n∀x (Player(x) → YellowToGreen(x))\n∀x (Player(x) → RedToYellow(x))\n∀x (Player(x) → ¬RedToGreen(x))\"\"\""
    ]
  },
  {
    "id": 577,
    "question": "It is possible to reach the yellow stage without ever reaching the green stage.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Player(x))\n∀x (Player(x) → StartRed(x))\n∀x (Player(x) → YellowToGreen(x))\n∀x (Player(x) → RedToYellow(x))\n∀x (Player(x) → ¬RedToGreen(x))\"\"\""
    ]
  },
  {
    "id": 578,
    "question": "It is possible to complete the game without ever reaching the green stage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Player(x))\n∀x (Player(x) → StartRed(x))\n∀x (Player(x) → YellowToGreen(x))\n∀x (Player(x) → RedToYellow(x))\n∀x (Player(x) → ¬RedToGreen(x))\"\"\""
    ]
  },
  {
    "id": 1095,
    "question": "Adam is scared of animals.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Physical(x) ∨ Words(x))\n∀x (Physical(x) → GoodWithPets(x))\n∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))\n∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))\nPhysical(adam) ⊕ LoveAnimals(adam)\"\"\""
    ]
  },
  {
    "id": 1096,
    "question": "Adam values words of affirmation as an especially important love language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Physical(x) ∨ Words(x))\n∀x (Physical(x) → GoodWithPets(x))\n∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))\n∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))\nPhysical(adam) ⊕ LoveAnimals(adam)\"\"\""
    ]
  },
  {
    "id": 1097,
    "question": "Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Physical(x) ∨ Words(x))\n∀x (Physical(x) → GoodWithPets(x))\n∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))\n∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))\nPhysical(adam) ⊕ LoveAnimals(adam)\"\"\""
    ]
  },
  {
    "id": 1098,
    "question": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Physical(x) ∨ Words(x))\n∀x (Physical(x) → GoodWithPets(x))\n∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))\n∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))\nPhysical(adam) ⊕ LoveAnimals(adam)\"\"\""
    ]
  },
  {
    "id": 1099,
    "question": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Physical(x) ∨ Words(x))\n∀x (Physical(x) → GoodWithPets(x))\n∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))\n∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))\nPhysical(adam) ⊕ LoveAnimals(adam)\"\"\""
    ]
  },
  {
    "id": 1282,
    "question": "John is a reptile.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → Winged(x))\n∀x (Winged(x) → ¬Reptile(x))\n∃x (Fly(x) ∧ Bird(x))\n∀x (Iguana(x) → Reptile(x))\n¬Iguana(john) ⊕ Bird(john)\"\"\""
    ]
  },
  {
    "id": 1283,
    "question": "John is not an iguana and an animal that can fly.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → Winged(x))\n∀x (Winged(x) → ¬Reptile(x))\n∃x (Fly(x) ∧ Bird(x))\n∀x (Iguana(x) → Reptile(x))\n¬Iguana(john) ⊕ Bird(john)\"\"\""
    ]
  },
  {
    "id": 1284,
    "question": "John is an animal that can fly and a bird.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bird(x) → Winged(x))\n∀x (Winged(x) → ¬Reptile(x))\n∃x (Fly(x) ∧ Bird(x))\n∀x (Iguana(x) → Reptile(x))\n¬Iguana(john) ⊕ Bird(john)\"\"\""
    ]
  },
  {
    "id": 87,
    "question": "EndGame was filmed in New York.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMovie(endGame) ∧ Released(endGame, year2006)\nSet(endGame, washington)\nFilmedOutside(endGame, washington)\n∃x (FilmedIn(x, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)\"\"\""
    ]
  },
  {
    "id": 88,
    "question": "EndGame was not directed by someone from Hong Kong.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMovie(endGame) ∧ Released(endGame, year2006)\nSet(endGame, washington)\nFilmedOutside(endGame, washington)\n∃x (FilmedIn(x, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)\"\"\""
    ]
  },
  {
    "id": 89,
    "question": "All of Andy Chang's movies are filmed outside of Washington.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMovie(endGame) ∧ Released(endGame, year2006)\nSet(endGame, washington)\nFilmedOutside(endGame, washington)\n∃x (FilmedIn(x, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)\"\"\""
    ]
  },
  {
    "id": 17,
    "question": "Eight is larger than seven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRealNum(six) ∧ RealNum(seven) ∧ RealNum(eight)\n∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))\n∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))\nEqualAddOne(seven, six)\nEqualAddOne(eight, seven)\nPositive(two)\n∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))\nEqualDouble(eight, four)\nEqualDouble(four, two)\"\"\""
    ]
  },
  {
    "id": 18,
    "question": "Eight is positive.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRealNum(six) ∧ RealNum(seven) ∧ RealNum(eight)\n∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))\n∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))\nEqualAddOne(seven, six)\nEqualAddOne(eight, seven)\nPositive(two)\n∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))\nEqualDouble(eight, four)\nEqualDouble(four, two)\"\"\""
    ]
  },
  {
    "id": 19,
    "question": "Six is larger than seven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRealNum(six) ∧ RealNum(seven) ∧ RealNum(eight)\n∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))\n∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))\nEqualAddOne(seven, six)\nEqualAddOne(eight, seven)\nPositive(two)\n∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))\nEqualDouble(eight, four)\nEqualDouble(four, two)\"\"\""
    ]
  },
  {
    "id": 742,
    "question": "Some poker players never tell the truth.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dog(x) → NeverTellsTruth(x))\n∃x (PokerPlayer(x) ∧ Dog(x))\"\"\""
    ]
  },
  {
    "id": 1383,
    "question": "Jesse is Chinese.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Asian(x)→  Human(x))\n∀x ( Chinese(x)→  Asian(x))\n∀x ( Chinese(x) ∨  British(x))\n∀x ( British(x)→  European(x))\n∀x ( Spanish(x)→  European(x))\n∀x ( Indian(x)→ ¬ European(x))\n( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))\"\"\""
    ]
  },
  {
    "id": 1384,
    "question": "Jesse is not Chinese.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Asian(x)→  Human(x))\n∀x ( Chinese(x)→  Asian(x))\n∀x ( Chinese(x) ∨  British(x))\n∀x ( British(x)→  European(x))\n∀x ( Spanish(x)→  European(x))\n∀x ( Indian(x)→ ¬ European(x))\n( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))\"\"\""
    ]
  },
  {
    "id": 1385,
    "question": "If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Asian(x)→  Human(x))\n∀x ( Chinese(x)→  Asian(x))\n∀x ( Chinese(x) ∨  British(x))\n∀x ( British(x)→  European(x))\n∀x ( Spanish(x)→  European(x))\n∀x ( Indian(x)→ ¬ European(x))\n( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))\"\"\""
    ]
  },
  {
    "id": 717,
    "question": "Some good teachers are not well-informed people.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeverAdmitMistakes(x) → ¬GoodTeacher(x))\n∃x (WellInformed(x) ∧ NeverAdmitMistakes(x))\"\"\""
    ]
  },
  {
    "id": 72,
    "question": "Mort is a book",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))\n¬Stamp(mort)\n¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))\nPhilatelicLit(mort)\"\"\""
    ]
  },
  {
    "id": 73,
    "question": "Mort is background material.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))\n¬Stamp(mort)\n¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))\nPhilatelicLit(mort)\"\"\""
    ]
  },
  {
    "id": 74,
    "question": "Eragon is a piece of Philatelic literature.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))\n¬Stamp(mort)\n¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))\nPhilatelicLit(mort)\"\"\""
    ]
  },
  {
    "id": 280,
    "question": "Columbia pictures produces drama films.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)\nProduced(columbiapictures, adventuresofrusty)\nProduced(paramount, tintin)\nAdventureFilm(tintin)\"\"\""
    ]
  },
  {
    "id": 281,
    "question": "Columbia pictures produces adventure films.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)\nProduced(columbiapictures, adventuresofrusty)\nProduced(paramount, tintin)\nAdventureFilm(tintin)\"\"\""
    ]
  },
  {
    "id": 282,
    "question": "Paramount produces children's films.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)\nProduced(columbiapictures, adventuresofrusty)\nProduced(paramount, tintin)\nAdventureFilm(tintin)\"\"\""
    ]
  },
  {
    "id": 283,
    "question": "Paramount produces adventure films.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nDramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)\nProduced(columbiapictures, adventuresofrusty)\nProduced(paramount, tintin)\nAdventureFilm(tintin)\"\"\""
    ]
  },
  {
    "id": 665,
    "question": "The paramount leader of the PRC was also the vice premier.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParamountLeaderOf(dengxiaoping, prc)\nPraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)\nPartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)\nInstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)\nDiedIn(mao, y1976)\nGraduallyRoseTo(dengxiaoping, supremepower)\"\"\""
    ]
  },
  {
    "id": 666,
    "question": "Deng Xiaoping presided over something launched by someone he was under.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParamountLeaderOf(dengxiaoping, prc)\nPraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)\nPartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)\nInstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)\nDiedIn(mao, y1976)\nGraduallyRoseTo(dengxiaoping, supremepower)\"\"\""
    ]
  },
  {
    "id": 667,
    "question": "The person instrumental in china's economic reconstruction gradually rose to supreme power.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParamountLeaderOf(dengxiaoping, prc)\nPraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)\nPartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)\nInstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)\nDiedIn(mao, y1976)\nGraduallyRoseTo(dengxiaoping, supremepower)\"\"\""
    ]
  },
  {
    "id": 1052,
    "question": "Dune is a fact.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1053,
    "question": "Dune is produced in human brains and is an imaginative process.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1054,
    "question": "Dune is either produced in human brains or an imaginative process.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1055,
    "question": "Dune is produced in human brains and is science fiction.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1056,
    "question": "Dune is either produced in human brains or science-fiction.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1057,
    "question": "If Dune is produced in human brains and is an imaginative process, then Dune is not produced in human brains and science-fiction.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1058,
    "question": "If Dune is either a fact and produced in human brains, or neither a fact nor produced in human brains, then Dune is produced in human brains and science-fiction.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1059,
    "question": "If Dune is science-fiction, then Dune is not produced in human brains and science-fiction.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1060,
    "question": "If Dune is not produced in human brains and science-fiction, then Dune is neither an imaginative process nor proved to be false.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 1061,
    "question": "If Dune is not an imaginative process and science-fiction, then Dune is neither produced in human brains nor an imaginative process.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))\n ∀x (Science-fiction(x) → ImaginativeProcess(x)) \n ∀x (Science-fiction(x) ∨ Fact(x))\n ∀x (Fact(x) → ¬ProvedToBeFalse(x)) \n Science-fiction(dune) ∨ ProvedToBeFalse(dune)\"\"\""
    ]
  },
  {
    "id": 524,
    "question": "Captain America does not speak English.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) \n Superhero(captain america) \n American(captain america) \n ¬ComeFrom(captain america, dc universe) \n ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) \n ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))\"\"\""
    ]
  },
  {
    "id": 525,
    "question": "Captain America comes from Marvel universe.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) \n Superhero(captain america) \n American(captain america) \n ¬ComeFrom(captain america, dc universe) \n ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) \n ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))\"\"\""
    ]
  },
  {
    "id": 526,
    "question": "Captain America speaks Spanish.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) \n Superhero(captain america) \n American(captain america) \n ¬ComeFrom(captain america, dc universe) \n ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) \n ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))\"\"\""
    ]
  },
  {
    "id": 229,
    "question": "Robert Zimmer is German.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornInGermany(robertZimmer)\nIsEssayist(robertZimmer)\nBornIn(robertZimmer, year1953)\n∀x (IsEssayist(x) → IsWriter(x))\n∀x (BornInGermany(x) → IsGerman(x))\"\"\""
    ]
  },
  {
    "id": 230,
    "question": "Robert Zimmer is not a writer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornInGermany(robertZimmer)\nIsEssayist(robertZimmer)\nBornIn(robertZimmer, year1953)\n∀x (IsEssayist(x) → IsWriter(x))\n∀x (BornInGermany(x) → IsGerman(x))\"\"\""
    ]
  },
  {
    "id": 231,
    "question": "Robert Zimmer is a biographer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornInGermany(robertZimmer)\nIsEssayist(robertZimmer)\nBornIn(robertZimmer, year1953)\n∀x (IsEssayist(x) → IsWriter(x))\n∀x (BornInGermany(x) → IsGerman(x))\"\"\""
    ]
  },
  {
    "id": 699,
    "question": "If John repays his loans on time, he will be approved for a mortgage.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Repay(x) → HighCreditScore(x))\n∃x ((HighCreditScore(x) ∧ HighSalary(x)) → Mortgage(x))\nHighSalary(john)\"\"\""
    ]
  },
  {
    "id": 912,
    "question": "John has a high IQ.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → MemberOfUniversity(x))\n∀x (GraduateStudent(x) → Student(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\n∃x (PhDStudent(x) ∧ HighIQ(x))\n¬PhDStudent(john) → ¬MemberOfUniversity(john)\nHighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)\"\"\""
    ]
  },
  {
    "id": 913,
    "question": "John does not have a high IQ.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → MemberOfUniversity(x))\n∀x (GraduateStudent(x) → Student(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\n∃x (PhDStudent(x) ∧ HighIQ(x))\n¬PhDStudent(john) → ¬MemberOfUniversity(john)\nHighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)\"\"\""
    ]
  },
  {
    "id": 914,
    "question": "John is a PhD student.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → MemberOfUniversity(x))\n∀x (GraduateStudent(x) → Student(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\n∃x (PhDStudent(x) ∧ HighIQ(x))\n¬PhDStudent(john) → ¬MemberOfUniversity(john)\nHighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)\"\"\""
    ]
  },
  {
    "id": 476,
    "question": "If John goes to Europe, he will see the Eiffel Tower.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)\n∃x (LiveIn(x, belgium) → Speak(x, french))\n∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))\nSpeak(john, french)\"\"\""
    ]
  },
  {
    "id": 477,
    "question": "The Eiffel Tower is located in the capital of France.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)\n∃x (LiveIn(x, belgium) → Speak(x, french))\n∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))\nSpeak(john, french)\"\"\""
    ]
  },
  {
    "id": 478,
    "question": "John lives in Belgium.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)\n∃x (LiveIn(x, belgium) → Speak(x, french))\n∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))\nSpeak(john, french)\"\"\""
    ]
  },
  {
    "id": 905,
    "question": "Prius is an electric car.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x (MadeInMaranello(x) → Ferrari(x))\n∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))\"\"\""
    ]
  },
  {
    "id": 906,
    "question": "Prius is not an electric car.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x (MadeInMaranello(x) → Ferrari(x))\n∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))\"\"\""
    ]
  },
  {
    "id": 907,
    "question": "Prius is a Maranello-made car.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x (MadeInMaranello(x) → Ferrari(x))\n∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))\"\"\""
    ]
  },
  {
    "id": 908,
    "question": "If Prius is a Ferrari or a loud car, then Prius is an electric car.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → LoudCar(x))\n∀x (LoudCar(x) → ¬ElectricCar(x))\n∀x (Ferrari(x) → SportsCar(x))\n∀x (MadeInMaranello(x) → Ferrari(x))\n∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))\"\"\""
    ]
  },
  {
    "id": 1288,
    "question": "Piper was grown in a garden.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬CuteAnimal(x))\n∀x (Flower(x) → Plant(x))\n∀x (Kitten(x) → CuteAnimal(x))\n∀x (GrownInGarden(x) → Flower(x))\nKitten(piper) ∨ CuteAnimal(piper)\"\"\""
    ]
  },
  {
    "id": 1289,
    "question": "Piper was not grown in a garden.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬CuteAnimal(x))\n∀x (Flower(x) → Plant(x))\n∀x (Kitten(x) → CuteAnimal(x))\n∀x (GrownInGarden(x) → Flower(x))\nKitten(piper) ∨ CuteAnimal(piper)\"\"\""
    ]
  },
  {
    "id": 1290,
    "question": "Piper is a kitten.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plant(x) → ¬CuteAnimal(x))\n∀x (Flower(x) → Plant(x))\n∀x (Kitten(x) → CuteAnimal(x))\n∀x (GrownInGarden(x) → Flower(x))\nKitten(piper) ∨ CuteAnimal(piper)\"\"\""
    ]
  },
  {
    "id": 437,
    "question": "Judd Bankert competed in the 1992 Winter Olympics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParticipatedIn(guam, winterolympics)\nYear(y1988) → BeHeld(winterolympics, calgary)\nBeHeld(winterolympics, calgary) → SendAthletes(guam)\nSendAthletes(guam) → ParticipatedIn(guam, winterolympics)\nBeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)\"\"\""
    ]
  },
  {
    "id": 438,
    "question": "Guam has participated in the Summer Olympics at least once.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParticipatedIn(guam, winterolympics)\nYear(y1988) → BeHeld(winterolympics, calgary)\nBeHeld(winterolympics, calgary) → SendAthletes(guam)\nSendAthletes(guam) → ParticipatedIn(guam, winterolympics)\nBeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)\"\"\""
    ]
  },
  {
    "id": 209,
    "question": "The son of a general practitioner was a word-setter of My Word!.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)\n∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))\"\"\""
    ]
  },
  {
    "id": 210,
    "question": "World Medicine is not a magazine.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)\n∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))\"\"\""
    ]
  },
  {
    "id": 211,
    "question": "There are no British authors.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)\n∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))\"\"\""
    ]
  },
  {
    "id": 212,
    "question": "There are no journalists that were born in Yorkshire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)\n∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))\"\"\""
    ]
  },
  {
    "id": 213,
    "question": "There is a son of a general practitioner that is not an author.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)\n∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))\"\"\""
    ]
  },
  {
    "id": 704,
    "question": "Some reading is fun.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Homework(x) → ¬IsFun(x))\n∃x (IsReading(x) ∧ Homework(x))\"\"\""
    ]
  },
  {
    "id": 747,
    "question": "If violence is good, it is lawful.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Violence(x) ∧ Good(x)) → Justified(x))\n∀x (Justified(x) → Lawful(x))\"\"\""
    ]
  },
  {
    "id": 1025,
    "question": "Manny regularly rides horses for pleasure and sport.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Ranch(x) → RegularlyRide(x))\n∀x (DisposableIncome(x) → Ranch(x))\n∀x (Compete(x) → DisposableIncome(x))\n∀x (Compete(x) → Invested(x))\n∀x (RegularlyRide(x) → ¬Cramped(x))\n(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))\"\"\""
    ]
  },
  {
    "id": 1026,
    "question": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Ranch(x) → RegularlyRide(x))\n∀x (DisposableIncome(x) → Ranch(x))\n∀x (Compete(x) → DisposableIncome(x))\n∀x (Compete(x) → Invested(x))\n∀x (RegularlyRide(x) → ¬Cramped(x))\n(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))\"\"\""
    ]
  },
  {
    "id": 1027,
    "question": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Ranch(x) → RegularlyRide(x))\n∀x (DisposableIncome(x) → Ranch(x))\n∀x (Compete(x) → DisposableIncome(x))\n∀x (Compete(x) → Invested(x))\n∀x (RegularlyRide(x) → ¬Cramped(x))\n(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))\"\"\""
    ]
  },
  {
    "id": 159,
    "question": "Cannons can be deployed on battery towers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))\n∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\"\"\""
    ]
  },
  {
    "id": 160,
    "question": "Roundels are older than battery towers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))\n∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\"\"\""
    ]
  },
  {
    "id": 161,
    "question": "Battery towers are higher than adjacent walls.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))\n∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\"\"\""
    ]
  },
  {
    "id": 162,
    "question": "Roundels can be deployed on roundels.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))\n∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))\n∀x (ArtilleryFortification(x) → DeployCannons(x))\n∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))\n∀x (BatteryTower(x) → ArtilleryFortification(x))\"\"\""
    ]
  },
  {
    "id": 737,
    "question": "Some papers are hard.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tissue(x) → Soft(x))\n∃x (Paper(x) ∧ Tissue(x))\"\"\""
    ]
  },
  {
    "id": 488,
    "question": "Volunteers who participate in natural disaster response receive intangible benefits for their work.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Volunteer(x) → GetIntangibleBenefits(x))\n∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))\n∃x (Volunteer(x) → Trained(x))\n∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))\n∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation)))\n∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))\"\"\""
    ]
  },
  {
    "id": 489,
    "question": "Environmental volunteers work in groups.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Volunteer(x) → GetIntangibleBenefits(x))\n∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))\n∃x (Volunteer(x) → Trained(x))\n∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))\n∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation)))\n∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))\"\"\""
    ]
  },
  {
    "id": 490,
    "question": "To be a volunteer, you must be trained.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Volunteer(x) → GetIntangibleBenefits(x))\n∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))\n∃x (Volunteer(x) → Trained(x))\n∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))\n∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation)))\n∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))\"\"\""
    ]
  },
  {
    "id": 1007,
    "question": "Mike is an old person living in a stable home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Consistent(x) → NoSurprises(x))\n∀x (Flannel(x) → Consistent(x))\n∀x (NoShopping(x) → Flannel(x))\n∀x (Old(x) → NoSurprises(x))\n∀x (Impulsive(x) → ¬NoSurprises(x))\n¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)\"\"\""
    ]
  },
  {
    "id": 1008,
    "question": "If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Consistent(x) → NoSurprises(x))\n∀x (Flannel(x) → Consistent(x))\n∀x (NoShopping(x) → Flannel(x))\n∀x (Old(x) → NoSurprises(x))\n∀x (Impulsive(x) → ¬NoSurprises(x))\n¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)\"\"\""
    ]
  },
  {
    "id": 1009,
    "question": "If Mike is not an old person living in a stable home and does not like shopping for clothes and other materialistic goods, then Mike does not like shopping for clothes and other materialistic goods.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Consistent(x) → NoSurprises(x))\n∀x (Flannel(x) → Consistent(x))\n∀x (NoShopping(x) → Flannel(x))\n∀x (Old(x) → NoSurprises(x))\n∀x (Impulsive(x) → ¬NoSurprises(x))\n¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)\"\"\""
    ]
  },
  {
    "id": 619,
    "question": "Adam owns a Japanese car.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Owns(adam, x))\n∃x (Favorite(adam, x))\n∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x))\n∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))\"\"\""
    ]
  },
  {
    "id": 620,
    "question": "Adam broke a European car.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Owns(adam, x))\n∃x (Favorite(adam, x))\n∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x))\n∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))\"\"\""
    ]
  },
  {
    "id": 1240,
    "question": "Tower A is higher than 400 meters.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NewHaven(x) → ¬High(x))\n∀x (YaleHousing(x) → NewHaven(x))\n∀x (Manhattan(x) → High(x))\n∀x (Bloomberg(x) → Manhattan(x))\n∀x (BloombergLogo(x) → Bloomberg(x))\n¬(NewHaven(towera) ⊕ Manhattan(towera))\nBloombergLogo(towerb) ∧ Manhattan(towerb)\"\"\""
    ]
  },
  {
    "id": 1241,
    "question": "Tower A is not higher than 400 meters.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NewHaven(x) → ¬High(x))\n∀x (YaleHousing(x) → NewHaven(x))\n∀x (Manhattan(x) → High(x))\n∀x (Bloomberg(x) → Manhattan(x))\n∀x (BloombergLogo(x) → Bloomberg(x))\n¬(NewHaven(towera) ⊕ Manhattan(towera))\nBloombergLogo(towerb) ∧ Manhattan(towerb)\"\"\""
    ]
  },
  {
    "id": 1242,
    "question": "Tower A is a building with the Bloomberg logo or managed by Yale Housing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NewHaven(x) → ¬High(x))\n∀x (YaleHousing(x) → NewHaven(x))\n∀x (Manhattan(x) → High(x))\n∀x (Bloomberg(x) → Manhattan(x))\n∀x (BloombergLogo(x) → Bloomberg(x))\n¬(NewHaven(towera) ⊕ Manhattan(towera))\nBloombergLogo(towerb) ∧ Manhattan(towerb)\"\"\""
    ]
  },
  {
    "id": 1243,
    "question": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NewHaven(x) → ¬High(x))\n∀x (YaleHousing(x) → NewHaven(x))\n∀x (Manhattan(x) → High(x))\n∀x (Bloomberg(x) → Manhattan(x))\n∀x (BloombergLogo(x) → Bloomberg(x))\n¬(NewHaven(towera) ⊕ Manhattan(towera))\nBloombergLogo(towerb) ∧ Manhattan(towerb)\"\"\""
    ]
  },
  {
    "id": 1266,
    "question": "Bubbles is an Osprey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Fish(x) → ¬Bird(x))\n∀x (Osprey(x) → Bird(x))\n∀x (Carp(x) → Fish(x))\n∀x (Goldfish(x) → Carp(x))\nOsprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)\"\"\""
    ]
  },
  {
    "id": 1267,
    "question": "Bubbles is a carp.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Fish(x) → ¬Bird(x))\n∀x (Osprey(x) → Bird(x))\n∀x (Carp(x) → Fish(x))\n∀x (Goldfish(x) → Carp(x))\nOsprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)\"\"\""
    ]
  },
  {
    "id": 1268,
    "question": "Bubbles is not a carp.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Fish(x) → ¬Bird(x))\n∀x (Osprey(x) → Bird(x))\n∀x (Carp(x) → Fish(x))\n∀x (Goldfish(x) → Carp(x))\nOsprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)\"\"\""
    ]
  },
  {
    "id": 455,
    "question": "Mr. Smith has been to San Francisco.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))\n∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))\n∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))\nCaliforniaCityVisited(mr.smith, two)\nFloridaCityVisited(mrs.smith, one)\"\"\""
    ]
  },
  {
    "id": 456,
    "question": "They have at leat one candidate city in Florida to visit.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))\n∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))\n∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))\nCaliforniaCityVisited(mr.smith, two)\nFloridaCityVisited(mrs.smith, one)\"\"\""
    ]
  },
  {
    "id": 457,
    "question": "They have at least two candidate cities in California to visit.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))\n∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))\n∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))\nCaliforniaCityVisited(mr.smith, two)\nFloridaCityVisited(mrs.smith, one)\"\"\""
    ]
  },
  {
    "id": 1429,
    "question": "A bird is still.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Big(x) ⊕ Small(x))\n∀x (Big(x) → Heavy(x))\n∀x (Small(x) → Light(x))\n∀x (Heavy(x) → Still(x))\n∀x (Light(x) → Unstable(x))\n∀x (Unstable(x) → Changing(x))\n∀x (Unstable(x) → Kinetic(x))\n¬(Heavy(bird) ∧ Still(bird))\"\"\""
    ]
  },
  {
    "id": 1430,
    "question": "A bird is not still.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Big(x) ⊕ Small(x))\n∀x (Big(x) → Heavy(x))\n∀x (Small(x) → Light(x))\n∀x (Heavy(x) → Still(x))\n∀x (Light(x) → Unstable(x))\n∀x (Unstable(x) → Changing(x))\n∀x (Unstable(x) → Kinetic(x))\n¬(Heavy(bird) ∧ Still(bird))\"\"\""
    ]
  },
  {
    "id": 1431,
    "question": "A bird is kinetic and changing.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Big(x) ⊕ Small(x))\n∀x (Big(x) → Heavy(x))\n∀x (Small(x) → Light(x))\n∀x (Heavy(x) → Still(x))\n∀x (Light(x) → Unstable(x))\n∀x (Unstable(x) → Changing(x))\n∀x (Unstable(x) → Kinetic(x))\n¬(Heavy(bird) ∧ Still(bird))\"\"\""
    ]
  },
  {
    "id": 1432,
    "question": "A bird is kinetic or changing.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Big(x) ⊕ Small(x))\n∀x (Big(x) → Heavy(x))\n∀x (Small(x) → Light(x))\n∀x (Heavy(x) → Still(x))\n∀x (Light(x) → Unstable(x))\n∀x (Unstable(x) → Changing(x))\n∀x (Unstable(x) → Kinetic(x))\n¬(Heavy(bird) ∧ Still(bird))\"\"\""
    ]
  },
  {
    "id": 1433,
    "question": "A bird is either kinetic or changing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Big(x) ⊕ Small(x))\n∀x (Big(x) → Heavy(x))\n∀x (Small(x) → Light(x))\n∀x (Heavy(x) → Still(x))\n∀x (Light(x) → Unstable(x))\n∀x (Unstable(x) → Changing(x))\n∀x (Unstable(x) → Kinetic(x))\n¬(Heavy(bird) ∧ Still(bird))\"\"\""
    ]
  },
  {
    "id": 1434,
    "question": "If a bird is small or still, then the bird is either kinetic or changing.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Big(x) ⊕ Small(x))\n∀x (Big(x) → Heavy(x))\n∀x (Small(x) → Light(x))\n∀x (Heavy(x) → Still(x))\n∀x (Light(x) → Unstable(x))\n∀x (Unstable(x) → Changing(x))\n∀x (Unstable(x) → Kinetic(x))\n¬(Heavy(bird) ∧ Still(bird))\"\"\""
    ]
  },
  {
    "id": 288,
    "question": "DI Ray was created by a Brit.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTelevisionSeries(diRay)\nCreate(maya, diRay) ∧ Write(maya, diRay)\nProduce(jed, diRay)\nBritish(maya) ∧ British(jed) \"\"\""
    ]
  },
  {
    "id": 289,
    "question": "Some Brit produced a television series.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTelevisionSeries(diRay)\nCreate(maya, diRay) ∧ Write(maya, diRay)\nProduce(jed, diRay)\nBritish(maya) ∧ British(jed) \"\"\""
    ]
  },
  {
    "id": 1347,
    "question": "Mike is a woman.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → Human(x))\n∀x (Gentleman(x) → Man(x))\n∀x (Lawyer(x) → Gentleman(x))\n∀x (Woman(x) → Human(x))\n∀x (Sheep(x) → ¬Human(x))\n(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)\"\"\""
    ]
  },
  {
    "id": 1348,
    "question": "If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → Human(x))\n∀x (Gentleman(x) → Man(x))\n∀x (Lawyer(x) → Gentleman(x))\n∀x (Woman(x) → Human(x))\n∀x (Sheep(x) → ¬Human(x))\n(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)\"\"\""
    ]
  },
  {
    "id": 1349,
    "question": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → Human(x))\n∀x (Gentleman(x) → Man(x))\n∀x (Lawyer(x) → Gentleman(x))\n∀x (Woman(x) → Human(x))\n∀x (Sheep(x) → ¬Human(x))\n(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)\"\"\""
    ]
  },
  {
    "id": 839,
    "question": "Stephen Curry is a centerback.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Defender(x) ∧ Centerback(x))\n∀x (Defender(x) → SoccerPlayer(x))\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)\"\"\""
    ]
  },
  {
    "id": 840,
    "question": "Stephen Curry is not a centerback and a defender.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Defender(x) ∧ Centerback(x))\n∀x (Defender(x) → SoccerPlayer(x))\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)\"\"\""
    ]
  },
  {
    "id": 841,
    "question": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Defender(x) ∧ Centerback(x))\n∀x (Defender(x) → SoccerPlayer(x))\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)\"\"\""
    ]
  },
  {
    "id": 540,
    "question": "John can not buy the 1080 monitor.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))\n∀x (Monitor(x) → Product(x))\n∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))\nPerson(john)\n∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))\"\"\""
    ]
  },
  {
    "id": 541,
    "question": "John can not buy the 2k monitor.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))\n∀x (Monitor(x) → Product(x))\n∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))\nPerson(john)\n∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))\"\"\""
    ]
  },
  {
    "id": 712,
    "question": "All important scientific achievements are U.S. inventions.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))\n∃x (ArtificialSatellite(x) ∧ ¬USInvention(x))\"\"\""
    ]
  },
  {
    "id": 706,
    "question": "Some mammals are not pets.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Cat(x) ∧ ¬Pet(x))\n∀x (Cat(x) → Mammal(x))\"\"\""
    ]
  },
  {
    "id": 972,
    "question": "Sam is addicted to coffee and other caffeinated drinks.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CoffeeShop(x) → CaffeineAddict(x))\n∀x (CoffeeShop(x) ∨ Takeout(x))\n∀x (MakeFood(x) → Takeout(x))\n∀x (KitchenAppliance(x) → ¬Takeout(x))\n∀x (Busy(x) → MakeFood(x))\n(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))\"\"\""
    ]
  },
  {
    "id": 973,
    "question": "Sam owns at least one coffeemaker and one blender in her home.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CoffeeShop(x) → CaffeineAddict(x))\n∀x (CoffeeShop(x) ∨ Takeout(x))\n∀x (MakeFood(x) → Takeout(x))\n∀x (KitchenAppliance(x) → ¬Takeout(x))\n∀x (Busy(x) → MakeFood(x))\n(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))\"\"\""
    ]
  },
  {
    "id": 974,
    "question": "Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CoffeeShop(x) → CaffeineAddict(x))\n∀x (CoffeeShop(x) ∨ Takeout(x))\n∀x (MakeFood(x) → Takeout(x))\n∀x (KitchenAppliance(x) → ¬Takeout(x))\n∀x (Busy(x) → MakeFood(x))\n(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))\"\"\""
    ]
  },
  {
    "id": 842,
    "question": "Roger Federer is a centerback.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (Centerback(x) → Defender(x))\n¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))\"\"\""
    ]
  },
  {
    "id": 843,
    "question": "Roger Federer is not a centerback.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (Centerback(x) → Defender(x))\n¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))\"\"\""
    ]
  },
  {
    "id": 844,
    "question": "Roger Federer is a soccer player.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (Centerback(x) → Defender(x))\n¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))\"\"\""
    ]
  },
  {
    "id": 1279,
    "question": "Mary is nice.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))\n∀x (TeacherWorkingAtPool(x) → PoolManager(x))\n∀x (PoolManager(x) → Lifeguard(x))\n∀x (Lifeguard(x) → WorkAtPool(x))\n¬WorkAtPool(mary))\"\"\""
    ]
  },
  {
    "id": 1280,
    "question": "Mary is not nice and is a teacher working at a pool.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))\n∀x (TeacherWorkingAtPool(x) → PoolManager(x))\n∀x (PoolManager(x) → Lifeguard(x))\n∀x (Lifeguard(x) → WorkAtPool(x))\n¬WorkAtPool(mary))\"\"\""
    ]
  },
  {
    "id": 1281,
    "question": "Mary is nice and is a teacher working at a pool.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))\n∀x (TeacherWorkingAtPool(x) → PoolManager(x))\n∀x (PoolManager(x) → Lifeguard(x))\n∀x (Lifeguard(x) → WorkAtPool(x))\n¬WorkAtPool(mary))\"\"\""
    ]
  },
  {
    "id": 751,
    "question": "There exist art pieces that do not require practice.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ArtPiece(x) ∧ ¬RequiresTalent(x))\n∀x (RequiresTalent(x) → RequiresPractice(x))\"\"\""
    ]
  },
  {
    "id": 268,
    "question": "Bernarda Bryson Shahn was born in Greece.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n∀x (BornIn(x, athensOhio) → American(x))\"\"\""
    ]
  },
  {
    "id": 269,
    "question": "Bernarda Bryson Shahn was American.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n∀x (BornIn(x, athensOhio) → American(x))\"\"\""
    ]
  },
  {
    "id": 270,
    "question": "Bernarda Bryson Shahn had been divorced once.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n∀x (BornIn(x, athensOhio) → American(x))\"\"\""
    ]
  },
  {
    "id": 987,
    "question": "Emma lives with at least one roommate.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Iphone(x) → ¬House(x))\n∀x (Tech(x) → Iphone(x))\n∀x (House(x) ∨ Apartment(x))\n∀x (Roommate(x) → ¬Pet(x))\n∀x (Apartment(x) → Roommate(x))\n¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))\"\"\""
    ]
  },
  {
    "id": 988,
    "question": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Iphone(x) → ¬House(x))\n∀x (Tech(x) → Iphone(x))\n∀x (House(x) ∨ Apartment(x))\n∀x (Roommate(x) → ¬Pet(x))\n∀x (Apartment(x) → Roommate(x))\n¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))\"\"\""
    ]
  },
  {
    "id": 1303,
    "question": "Nancy is a faculty member.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnPayroll(x) → PaidBySchool(x))\n∀x (JobAtSchool(x) → OnPayroll(x))\n∀x (FacultyMember(x) → JobAtSchool(x))\n∀x (FacultyMember(x) ∨ Teacher(x))\n∀x (Teacher(x) → HasStudents(x))\nTeacher(nancy) → OnPayroll(nancy)\n¬Teacher(nancy) → ¬OnPayroll(nancy)\"\"\""
    ]
  },
  {
    "id": 1304,
    "question": "Nancy is paid by the school and has students.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnPayroll(x) → PaidBySchool(x))\n∀x (JobAtSchool(x) → OnPayroll(x))\n∀x (FacultyMember(x) → JobAtSchool(x))\n∀x (FacultyMember(x) ∨ Teacher(x))\n∀x (Teacher(x) → HasStudents(x))\nTeacher(nancy) → OnPayroll(nancy)\n¬Teacher(nancy) → ¬OnPayroll(nancy)\"\"\""
    ]
  },
  {
    "id": 1305,
    "question": "Nancy is not paid by the school and has students.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OnPayroll(x) → PaidBySchool(x))\n∀x (JobAtSchool(x) → OnPayroll(x))\n∀x (FacultyMember(x) → JobAtSchool(x))\n∀x (FacultyMember(x) ∨ Teacher(x))\n∀x (Teacher(x) → HasStudents(x))\nTeacher(nancy) → OnPayroll(nancy)\n¬Teacher(nancy) → ¬OnPayroll(nancy)\"\"\""
    ]
  },
  {
    "id": 696,
    "question": "If Jane saves enough money for the summer, she will see a kangaroo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kangaroo(x) → Animal(x))\n∀x (Kangaroo(x) → ¬LiveIn(x, germany))\nEnoughMoney(jane) → FlyTo(jane, germany)\nFlyTo(jane, germany) → GoTo(jane, berlinzoo) \n∀x ∃y (GoTo(x, berlinzoo) ∧ Animal(y) → MaySee(y, x, berlinzoo))\"\"\""
    ]
  },
  {
    "id": 615,
    "question": "CPSC 201 has no prerequisites.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))\n∀x ∀y (¬Prereq(x, y) → CanTake(y))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)\n∀x (¬Prereq(x, introgeology))\"\"\""
    ]
  },
  {
    "id": 616,
    "question": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))\n∀x ∀y (¬Prereq(x, y) → CanTake(y))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)\n∀x (¬Prereq(x, introgeology))\"\"\""
    ]
  },
  {
    "id": 617,
    "question": "A student cannot take Intro Geology.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))\n∀x ∀y (¬Prereq(x, y) → CanTake(y))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)\n∀x (¬Prereq(x, introgeology))\"\"\""
    ]
  },
  {
    "id": 618,
    "question": "Intermediate Microeconomics has one prerequisite.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))\n∀x ∀y (¬Prereq(x, y) → CanTake(y))\nPrereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)\n(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)\n∀x (¬Prereq(x, introgeology))\"\"\""
    ]
  },
  {
    "id": 108,
    "question": "The Harry Potter series of books is a heptalogy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SevenDistinctWorks(x) → Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesofNarnia)\"\"\""
    ]
  },
  {
    "id": 109,
    "question": "The Chronicles of Narnia series of books is not a heptalogy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SevenDistinctWorks(x) → Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesofNarnia)\"\"\""
    ]
  },
  {
    "id": 110,
    "question": "The Lord of Rings is a heptalogy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SevenDistinctWorks(x) → Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesofNarnia)\"\"\""
    ]
  },
  {
    "id": 1022,
    "question": "Clyde attends Renaissance fairs regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RenaissanceFair(x) → DressingUp(x))\n∀x (HistoryRenaissance(x) → RenaissanceFair(x))\n∀x (HistoryRenaissance(x) ∨ NotAcademics(x))\n∀x (Industry(x) → NotAcademics(x))\n∀x (HistoryProf(x) → ¬NotAcademics(x))\n¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))\"\"\""
    ]
  },
  {
    "id": 1023,
    "question": "Clyde is a history professor who is passionate about his job and subject.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RenaissanceFair(x) → DressingUp(x))\n∀x (HistoryRenaissance(x) → RenaissanceFair(x))\n∀x (HistoryRenaissance(x) ∨ NotAcademics(x))\n∀x (Industry(x) → NotAcademics(x))\n∀x (HistoryProf(x) → ¬NotAcademics(x))\n¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))\"\"\""
    ]
  },
  {
    "id": 1024,
    "question": "Clyde is a history professor who is passionate about his job and subject, or is not a nostalgic academic who enjoys learning.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RenaissanceFair(x) → DressingUp(x))\n∀x (HistoryRenaissance(x) → RenaissanceFair(x))\n∀x (HistoryRenaissance(x) ∨ NotAcademics(x))\n∀x (Industry(x) → NotAcademics(x))\n∀x (HistoryProf(x) → ¬NotAcademics(x))\n¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))\"\"\""
    ]
  },
  {
    "id": 719,
    "question": "No sports cars are automobiles designed for family use.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SportsCar(x) → ¬IntendedToBeDrivenAtModerateSpeeds(x))\n∀x (ForFamilyUse(x) → IntendedToBeDrivenAtModerateSpeeds(x))\"\"\""
    ]
  },
  {
    "id": 949,
    "question": "Kat is a person who comes to work every day with a positive attitude.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkTeams(x) → Colleagues(x))\n∀x (PositiveAttitude(x) → WorkTeams(x))\n∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x)))\n∀x (BossPromotions(x) → ¬NegativeFeedback(x))\n(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat))\"\"\""
    ]
  },
  {
    "id": 950,
    "question": "Kat gets along with her colleagues at her work and receives negative feedback from teams at her work.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkTeams(x) → Colleagues(x))\n∀x (PositiveAttitude(x) → WorkTeams(x))\n∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x)))\n∀x (BossPromotions(x) → ¬NegativeFeedback(x))\n(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat))\"\"\""
    ]
  },
  {
    "id": 951,
    "question": "Kat either gets along with her colleagues at her work or receives negative feedback from teams at her work.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkTeams(x) → Colleagues(x))\n∀x (PositiveAttitude(x) → WorkTeams(x))\n∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x)))\n∀x (BossPromotions(x) → ¬NegativeFeedback(x))\n(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat))\"\"\""
    ]
  },
  {
    "id": 725,
    "question": "Drishti is free to modify.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOpenSource(drishti)\n∀x (OpenSource(x) → ModifyFree(x))\"\"\""
    ]
  },
  {
    "id": 464,
    "question": "Zhang's English score is lower than 95.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGrade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)\n∀x (GetGrade(x, a+) → GreaterThan95(x))\n∀x (GetGrade(x, a) → Range90to95(x))\nGetGrade(zhang, a)\nBetter(wang, zhang)\nLowerThan90(wu)\"\"\""
    ]
  },
  {
    "id": 465,
    "question": "Wang got an A+ in English.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGrade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)\n∀x (GetGrade(x, a+) → GreaterThan95(x))\n∀x (GetGrade(x, a) → Range90to95(x))\nGetGrade(zhang, a)\nBetter(wang, zhang)\nLowerThan90(wu)\"\"\""
    ]
  },
  {
    "id": 466,
    "question": "Wu does not get an A or A+ in English.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGrade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)\n∀x (GetGrade(x, a+) → GreaterThan95(x))\n∀x (GetGrade(x, a) → Range90to95(x))\nGetGrade(zhang, a)\nBetter(wang, zhang)\nLowerThan90(wu)\"\"\""
    ]
  },
  {
    "id": 621,
    "question": "At all times, Olivia prefers cool temperature.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Day(x) → ¬PrefersWarmAt(olivia, x))\n∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x))\n∀x (SleepingDuring(olivia, x) → Night(x))\n∀x (WorkingDuring(olivia, x) → Day(x))\n∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x))\n∀x (Day(x) ∨ Night(x))\n∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x))\"\"\""
    ]
  },
  {
    "id": 596,
    "question": "Taylor Swift delivers a commencement speech in Manhattan.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSpeech(taylorSwift, nyc)\nManhattan(columbiaUniversity) ∧ Manhattan(nyc)\nHaveAlbum(taylorSwift)\nIvyLeague(columbiaUniversity)\"\"\""
    ]
  },
  {
    "id": 597,
    "question": "The commencement speaker of NYU does not have any album.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSpeech(taylorSwift, nyc)\nManhattan(columbiaUniversity) ∧ Manhattan(nyc)\nHaveAlbum(taylorSwift)\nIvyLeague(columbiaUniversity)\"\"\""
    ]
  },
  {
    "id": 1204,
    "question": "James is a customer who does not choose any plans.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PlanA(x) ∨ PlanB(x))\n∀x (PlanB(x) → Award(x))\n∀x (¬NoPlan(x))\n∀x (Award(x) → ¬OlderThan80(x))\n∀x (OlderThan80(x) ∨ StudyAtSchool(x))\n¬StudyAtSchool(james)\"\"\""
    ]
  },
  {
    "id": 1205,
    "question": "James is a customer who chooses Plan A or does not choose any plans.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PlanA(x) ∨ PlanB(x))\n∀x (PlanB(x) → Award(x))\n∀x (¬NoPlan(x))\n∀x (Award(x) → ¬OlderThan80(x))\n∀x (OlderThan80(x) ∨ StudyAtSchool(x))\n¬StudyAtSchool(james)\"\"\""
    ]
  },
  {
    "id": 1206,
    "question": "Suppose James is a customer who chooses Plan A or does not choose any plans, then he is either rewarded a $30 gift card or chooses Plan B.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PlanA(x) ∨ PlanB(x))\n∀x (PlanB(x) → Award(x))\n∀x (¬NoPlan(x))\n∀x (Award(x) → ¬OlderThan80(x))\n∀x (OlderThan80(x) ∨ StudyAtSchool(x))\n¬StudyAtSchool(james)\"\"\""
    ]
  },
  {
    "id": 500,
    "question": "Detroit City has been in multiple races.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHorse(detroitcity)\n∃x (Horse(x) ∧ Racehorse(x))\n∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))\nRacing(detroitcity) ∧ Falls(detroitcity)\n∀x (Horse(x) ∧ Racing(x) → Racehorse(x))\"\"\""
    ]
  },
  {
    "id": 501,
    "question": "Detroit City is dead.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHorse(detroitcity)\n∃x (Horse(x) ∧ Racehorse(x))\n∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))\nRacing(detroitcity) ∧ Falls(detroitcity)\n∀x (Horse(x) ∧ Racing(x) → Racehorse(x))\"\"\""
    ]
  },
  {
    "id": 502,
    "question": "Detroit City is a racehorse.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHorse(detroitcity)\n∃x (Horse(x) ∧ Racehorse(x))\n∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))\nRacing(detroitcity) ∧ Falls(detroitcity)\n∀x (Horse(x) ∧ Racing(x) → Racehorse(x))\"\"\""
    ]
  },
  {
    "id": 340,
    "question": "Frederick Monhoff is good at music.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nArchitect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)\nAmerican(monhoff)\n∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music))\n∀x (American(x) → Speak(x, english))\"\"\""
    ]
  },
  {
    "id": 341,
    "question": "There is no illustrator who speaks English.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nArchitect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)\nAmerican(monhoff)\n∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music))\n∀x (American(x) → Speak(x, english))\"\"\""
    ]
  },
  {
    "id": 51,
    "question": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)\nKnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavfiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)\"\"\""
    ]
  },
  {
    "id": 52,
    "question": "Miroslav Fiedler was a French mathematician.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)\nKnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavfiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)\"\"\""
    ]
  },
  {
    "id": 53,
    "question": "A Czech mathematician is known for his contributions to linear algebra and graph theory.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCzech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)\nKnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavfiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)\"\"\""
    ]
  },
  {
    "id": 446,
    "question": "You can play games on a laptop.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Laptop(x) → Computer(x))\n∀x (Computer(x) → CanPlayGames(x))\n∀x (Phone(x) → ¬Computer(x))\n\"\"\""
    ]
  },
  {
    "id": 447,
    "question": "You can not play games on a phone.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Laptop(x) → Computer(x))\n∀x (Computer(x) → CanPlayGames(x))\n∀x (Phone(x) → ¬Computer(x))\n\"\"\""
    ]
  },
  {
    "id": 29,
    "question": "Walter Folger Brown graduated with a Bachelors of Arts.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)\nGraduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart)\nIn(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)\nMarried(ketherinhafer, walterbrown)\"\"\""
    ]
  },
  {
    "id": 30,
    "question": "Walter Folger Brown's father was in Toledo.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)\nGraduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart)\nIn(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)\nMarried(ketherinhafer, walterbrown)\"\"\""
    ]
  },
  {
    "id": 31,
    "question": "Walter Folger Brown was not in Toledo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)\nGraduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart)\nIn(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)\nMarried(ketherinhafer, walterbrown)\"\"\""
    ]
  },
  {
    "id": 1152,
    "question": "The MacBook is favored by young people.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ShipChina(x) → MadeInChina(x))\n∀x (SoldJD(x) → ShipChina(x))\n∀x (CommonlyUsedChina(x) → SoldJD(x))\n∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))\n¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))\"\"\""
    ]
  },
  {
    "id": 1153,
    "question": "The MacBook is made in China.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ShipChina(x) → MadeInChina(x))\n∀x (SoldJD(x) → ShipChina(x))\n∀x (CommonlyUsedChina(x) → SoldJD(x))\n∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))\n¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))\"\"\""
    ]
  },
  {
    "id": 1154,
    "question": "The MacBook is favored by young people and commonly used in China.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ShipChina(x) → MadeInChina(x))\n∀x (SoldJD(x) → ShipChina(x))\n∀x (CommonlyUsedChina(x) → SoldJD(x))\n∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))\n¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))\"\"\""
    ]
  },
  {
    "id": 1155,
    "question": "The MacBook is either favored by young people or commonly used in China.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ShipChina(x) → MadeInChina(x))\n∀x (SoldJD(x) → ShipChina(x))\n∀x (CommonlyUsedChina(x) → SoldJD(x))\n∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))\n¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))\"\"\""
    ]
  },
  {
    "id": 1156,
    "question": "If the MacBook is favored by young people and commonly used in China, then it is neither favored by young people nor made in China.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ShipChina(x) → MadeInChina(x))\n∀x (SoldJD(x) → ShipChina(x))\n∀x (CommonlyUsedChina(x) → SoldJD(x))\n∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))\n¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))\"\"\""
    ]
  },
  {
    "id": 589,
    "question": "Oxford Circus is in London.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)\n∀x (OxfordStreet(x) → London(x))\n∃x (RegentStreet(x) ∧ Design(johnNash, x))\nDesign(johnNash, oxfordCircus)\nBritish(johnNash) ∧ Architect(johnNash)\nCentralLine(oxfordCircus)\"\"\""
    ]
  },
  {
    "id": 590,
    "question": "Oxford Circus is designed by a British architect.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)\n∀x (OxfordStreet(x) → London(x))\n∃x (RegentStreet(x) ∧ Design(johnNash, x))\nDesign(johnNash, oxfordCircus)\nBritish(johnNash) ∧ Architect(johnNash)\nCentralLine(oxfordCircus)\"\"\""
    ]
  },
  {
    "id": 591,
    "question": "John Nash designed the Central line in 1900.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)\n∀x (OxfordStreet(x) → London(x))\n∃x (RegentStreet(x) ∧ Design(johnNash, x))\nDesign(johnNash, oxfordCircus)\nBritish(johnNash) ∧ Architect(johnNash)\nCentralLine(oxfordCircus)\"\"\""
    ]
  },
  {
    "id": 592,
    "question": "Regent Street is not in London.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)\n∀x (OxfordStreet(x) → London(x))\n∃x (RegentStreet(x) ∧ Design(johnNash, x))\nDesign(johnNash, oxfordCircus)\nBritish(johnNash) ∧ Architect(johnNash)\nCentralLine(oxfordCircus)\"\"\""
    ]
  },
  {
    "id": 1374,
    "question": "Jojo is a ghost.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) ⊕ Dog(x))\n∀x (Dog(x) → Bark(x))\n∀x (¬Ghost(x))\n∀x (Bark(x) → ¬Alive(x))\n∀x (Alive(x) ⊕ Dead(x))\n¬Dead(jojo)\"\"\""
    ]
  },
  {
    "id": 1375,
    "question": "Jojo is a cat or a ghost.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) ⊕ Dog(x))\n∀x (Dog(x) → Bark(x))\n∀x (¬Ghost(x))\n∀x (Bark(x) → ¬Alive(x))\n∀x (Alive(x) ⊕ Dead(x))\n¬Dead(jojo)\"\"\""
    ]
  },
  {
    "id": 1376,
    "question": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) ⊕ Dog(x))\n∀x (Dog(x) → Bark(x))\n∀x (¬Ghost(x))\n∀x (Bark(x) → ¬Alive(x))\n∀x (Alive(x) ⊕ Dead(x))\n¬Dead(jojo)\"\"\""
    ]
  },
  {
    "id": 1269,
    "question": "Fido is a husky.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ∨ Cat(fido)\"\"\""
    ]
  },
  {
    "id": 1270,
    "question": "Fido is not a husky.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ∨ Cat(fido)\"\"\""
    ]
  },
  {
    "id": 1271,
    "question": "Fido is a Bengal tiger.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ∨ Cat(fido)\"\"\""
    ]
  },
  {
    "id": 1272,
    "question": "Fido is neither a dog nor a husky.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tiger(x) → Cat(x))\n∀x (Cat(x) → ¬Dog(x))\n∀x (BengalTiger(x) → Tiger(x))\n∀x (Husky(x) → Dog(x))\nBengalTiger(fido) ∨ Cat(fido)\"\"\""
    ]
  },
  {
    "id": 196,
    "question": "The 2028 Summer Olympics will take place in the US.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))\n∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))\n∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))\nSummerOlympicsCity(y2028, la)\nCityInState(la, ca)\nCityInCountry(atlanta, us)\nStateInCountry(ca, us)\nCityInState(atlanta, ga)\n¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)\nSummerOlympicsCity(y1996, atlanta)\"\"\""
    ]
  },
  {
    "id": 197,
    "question": "The 1996 Summer Olympics is not in Georgia.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))\n∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))\n∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))\nSummerOlympicsCity(y2028, la)\nCityInState(la, ca)\nCityInCountry(atlanta, us)\nStateInCountry(ca, us)\nCityInState(atlanta, ga)\n¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)\nSummerOlympicsCity(y1996, atlanta)\"\"\""
    ]
  },
  {
    "id": 198,
    "question": "Skateboarding will appear at The 2028 Summer Olympics.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))\n∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))\n∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))\nSummerOlympicsCity(y2028, la)\nCityInState(la, ca)\nCityInCountry(atlanta, us)\nStateInCountry(ca, us)\nCityInState(atlanta, ga)\n¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)\nSummerOlympicsCity(y1996, atlanta)\"\"\""
    ]
  },
  {
    "id": 23,
    "question": "Cats like playing with taiga vole.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVole(taigaVole) ∧ Find(taigaVole, northAmerica)\n∀x (Vole(x) → CatLikePlayingWith(x))\nLive(taigaVole, borealTaigaZone)\n∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))\nLarger(taigaVole, microtusVole)\"\"\""
    ]
  },
  {
    "id": 24,
    "question": "Taiga vole's living place is not cold.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nVole(taigaVole) ∧ Find(taigaVole, northAmerica)\n∀x (Vole(x) → CatLikePlayingWith(x))\nLive(taigaVole, borealTaigaZone)\n∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))\nLarger(taigaVole, microtusVole)\"\"\""
    ]
  },
  {
    "id": 1046,
    "question": "Adenocarcinoma is a breast cancer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Women(x) ∨ Men(x)) \n ∀x (Men(x) → ¬BreastCancer(x))\n ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) \n ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x)) \n ∀x (Non-BreastCancer(x) → ATypeOfCancer(x)) \n ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)\"\"\""
    ]
  },
  {
    "id": 1047,
    "question": "Adenocarcinoma is in women.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Women(x) ∨ Men(x)) \n ∀x (Men(x) → ¬BreastCancer(x))\n ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) \n ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x)) \n ∀x (Non-BreastCancer(x) → ATypeOfCancer(x)) \n ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)\"\"\""
    ]
  },
  {
    "id": 1048,
    "question": "If adenocarcinoma is in women or without a tumor, then adenocarcinoma is without a tumor and a non-breast cancer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Women(x) ∨ Men(x)) \n ∀x (Men(x) → ¬BreastCancer(x))\n ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) \n ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x)) \n ∀x (Non-BreastCancer(x) → ATypeOfCancer(x)) \n ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)\"\"\""
    ]
  },
  {
    "id": 175,
    "question": "LG34 machine is produced by AOC.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Lab(x) ∧ AOC(x))\n∀x (Lab(x) → Cheaper(x))\n∀x (Cheaper(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nLab(lg-34)\"\"\""
    ]
  },
  {
    "id": 176,
    "question": "LG34 machine does not support the type-c port.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Lab(x) ∧ AOC(x))\n∀x (Lab(x) → Cheaper(x))\n∀x (Cheaper(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nLab(lg-34)\"\"\""
    ]
  },
  {
    "id": 177,
    "question": "LG34 is not with a resolution of 1080p.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Lab(x) ∧ AOC(x))\n∀x (Lab(x) → Cheaper(x))\n∀x (Cheaper(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nLab(lg-34)\"\"\""
    ]
  },
  {
    "id": 1160,
    "question": "Avocados are a kind of fruit sold in New York.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldBoston(x) → ShippedFromColumbia(x))\n∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))\n∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))\nSoldNewYork(avocado) ∨ SoldBoston(avocado)\n¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))\"\"\""
    ]
  },
  {
    "id": 1161,
    "question": "Avocados are either sold in New York or sold in New Haven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldBoston(x) → ShippedFromColumbia(x))\n∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))\n∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))\nSoldNewYork(avocado) ∨ SoldBoston(avocado)\n¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))\"\"\""
    ]
  },
  {
    "id": 1162,
    "question": "Avocados are either sold in New Haven or sold in Boston",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldBoston(x) → ShippedFromColumbia(x))\n∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))\n∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))\nSoldNewYork(avocado) ∨ SoldBoston(avocado)\n¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))\"\"\""
    ]
  },
  {
    "id": 1163,
    "question": "If avocados are not sold in New York and not shipped from Columbia, then they are neither sold in New York nor New Haven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldBoston(x) → ShippedFromColumbia(x))\n∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))\n∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))\nSoldNewYork(avocado) ∨ SoldBoston(avocado)\n¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))\"\"\""
    ]
  },
  {
    "id": 1183,
    "question": "A-2017 is produced by AOC.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Library(x) ∧ AOC(x))\n∀x (Library(x) → Cheap(x))\n∀x (Cheap(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nTypeC(a-2017)\"\"\""
    ]
  },
  {
    "id": 1184,
    "question": "A-2017 is produced by AOC and equipped in the library.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Library(x) ∧ AOC(x))\n∀x (Library(x) → Cheap(x))\n∀x (Cheap(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nTypeC(a-2017)\"\"\""
    ]
  },
  {
    "id": 1185,
    "question": "If A-2017 is not with a resolution of 1080p or produced by AOC, then it is not equipped in the library.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Library(x) ∧ AOC(x))\n∀x (Library(x) → Cheap(x))\n∀x (Cheap(x) → A1080p(x))\n∀x (A1080p(x) → ¬TypeC(x))\nTypeC(a-2017)\"\"\""
    ]
  },
  {
    "id": 10,
    "question": "Some soccer team holds the Lithuanian Supercup.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHold(suduva, thelithuaniansupercup)\nSoccerTeam(suduva)\"\"\""
    ]
  },
  {
    "id": 286,
    "question": "There is a village in England.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x))\n∀x (Hambleton(x) → NorthYorkshire(x))\n∀x (NorthYorkshire(x) → England(x))\"\"\""
    ]
  },
  {
    "id": 287,
    "question": "There is no civil parish in England.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x))\n∀x (Hambleton(x) → NorthYorkshire(x))\n∀x (NorthYorkshire(x) → England(x))\"\"\""
    ]
  },
  {
    "id": 139,
    "question": "Douglas Adams is a writer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAuthor(douglasAdams) ∧ Book(theSalmonOfDoubt)\nAboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)\n∀x (Author(x) → Writer(x))\n∀x (Writer(x) → CreateInnovativeIdea(x))\n∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))\"\"\""
    ]
  },
  {
    "id": 140,
    "question": "Douglas Adams created innovative ideas.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAuthor(douglasAdams) ∧ Book(theSalmonOfDoubt)\nAboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)\n∀x (Author(x) → Writer(x))\n∀x (Writer(x) → CreateInnovativeIdea(x))\n∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))\"\"\""
    ]
  },
  {
    "id": 141,
    "question": "The Salmon of Doubt has no innovative Ideas.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAuthor(douglasAdams) ∧ Book(theSalmonOfDoubt)\nAboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)\n∀x (Author(x) → Writer(x))\n∀x (Writer(x) → CreateInnovativeIdea(x))\n∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))\"\"\""
    ]
  },
  {
    "id": 827,
    "question": "Reformation is an eco-friendly brand.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))\n ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))\n ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))\n ∀x (FastFashionProducts(x) → DisposableProducts(x)) \n ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)\"\"\""
    ]
  },
  {
    "id": 828,
    "question": "Reformation produces fast fashion products.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))\n ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))\n ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))\n ∀x (FastFashionProducts(x) → DisposableProducts(x)) \n ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)\"\"\""
    ]
  },
  {
    "id": 829,
    "question": "Reformation does not produce fast fashion products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))\n ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))\n ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))\n ∀x (FastFashionProducts(x) → DisposableProducts(x)) \n ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)\"\"\""
    ]
  },
  {
    "id": 830,
    "question": "Reformation does not produce fast fashion products or does not produce disposable products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))\n ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))\n ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))\n ∀x (FastFashionProducts(x) → DisposableProducts(x)) \n ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)\"\"\""
    ]
  },
  {
    "id": 831,
    "question": "If Reformation produces disposable products, then Reformation produces fast fashion products.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))\n ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))\n ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))\n ∀x (FastFashionProducts(x) → DisposableProducts(x)) \n ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)\"\"\""
    ]
  },
  {
    "id": 832,
    "question": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))\n ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))\n ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))\n ∀x (FastFashionProducts(x) → DisposableProducts(x)) \n ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)\"\"\""
    ]
  },
  {
    "id": 284,
    "question": "Sherville Huggins has never dismissed anyone playing for a constituent country.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)\nRightHanded(royrichardson) ∧ Batsman(royrichardson) ∧ MediumPaceBowler(royrichardson)\nOld(royrichardson) ∧ DebutedIn(royrichardson, cricket)\nDismissed(shervillehuggins, royrichardson)\"\"\""
    ]
  },
  {
    "id": 285,
    "question": "There are no right handed medium pace bowlers playing for Sint Maartener.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)\nRightHanded(royrichardson) ∧ Batsman(royrichardson) ∧ MediumPaceBowler(royrichardson)\nOld(royrichardson) ∧ DebutedIn(royrichardson, cricket)\nDismissed(shervillehuggins, royrichardson)\"\"\""
    ]
  },
  {
    "id": 700,
    "question": "John is a Yale graduate.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Employed(x, google) → WorkExp(x) ∨ GoodEduc(x))\n∀x ((Yale(x) ∧ CV(x, google)) → Employed(x, google))\nWorkExp(john)\nCV(john, google) ∧ Employed(john, google)\"\"\""
    ]
  },
  {
    "id": 889,
    "question": "Joe is a person taking classes.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → ¬Doctor(x))\n∀x (TakingClass(x) → Student(x))\n∀x (GraduateStudent(x) → TakingClass(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\nGraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ^ Student(joe))\"\"\""
    ]
  },
  {
    "id": 890,
    "question": "Joe is a PhD student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → ¬Doctor(x))\n∀x (TakingClass(x) → Student(x))\n∀x (GraduateStudent(x) → TakingClass(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\nGraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ^ Student(joe))\"\"\""
    ]
  },
  {
    "id": 891,
    "question": "Joe is not a PhD student.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → ¬Doctor(x))\n∀x (TakingClass(x) → Student(x))\n∀x (GraduateStudent(x) → TakingClass(x))\n∀x (PhDStudent(x) → GraduateStudent(x))\nGraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ^ Student(joe))\"\"\""
    ]
  },
  {
    "id": 93,
    "question": "Hugh Vanstone is one of the world's leading ligting designers and from the uk",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWorldLeadingLightningDesigner(hughVanstone)\nFromUK(hughVanstone)\nLitOver160Productions(hughVanstone)\nAttendedSchoolWhereFrom(hughVanstone)\"\"\""
    ]
  },
  {
    "id": 94,
    "question": "Hugh Vanstone has lit 170 productions.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWorldLeadingLightningDesigner(hughVanstone)\nFromUK(hughVanstone)\nLitOver160Productions(hughVanstone)\nAttendedSchoolWhereFrom(hughVanstone)\"\"\""
    ]
  },
  {
    "id": 95,
    "question": "Hugh Vanstone attended school in the US.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWorldLeadingLightningDesigner(hughVanstone)\nFromUK(hughVanstone)\nLitOver160Productions(hughVanstone)\nAttendedSchoolWhereFrom(hughVanstone)\"\"\""
    ]
  },
  {
    "id": 450,
    "question": "Superman can run faster than Bolt.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Man(x) → ¬FasterThanBolt(x))\n¬Man(superman) \"\"\""
    ]
  },
  {
    "id": 380,
    "question": "An American scientist has been called the \"father of the analysis of algorithms\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)\nBeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)\"\"\""
    ]
  },
  {
    "id": 381,
    "question": "A mathematician has been called the \"father of the analysis of algorithms\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)\nBeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)\"\"\""
    ]
  },
  {
    "id": 382,
    "question": "Donald Knuth is a well-known figure in the field of artificial intelligence .",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)\nBeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)\"\"\""
    ]
  },
  {
    "id": 363,
    "question": "There is a flea beetle within the Chrysomelidae family.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta)\nSpecies(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpulenta, chrysomelidae)\n∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))\"\"\""
    ]
  },
  {
    "id": 364,
    "question": "There are no flea beetles within the Chrysomelidae family.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta)\nSpecies(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpulenta, chrysomelidae)\n∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))\"\"\""
    ]
  },
  {
    "id": 644,
    "question": "Carrozzeria Colli made car bodies in 1931.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)\nSpecializedIn(carrozzeriacolli, usingaluminum)\n∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))\n∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))\nMade(carrozzeriacolli, carbodies)\"\"\""
    ]
  },
  {
    "id": 645,
    "question": "Carrozzeria Colli built airplanes during World War II.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)\nSpecializedIn(carrozzeriacolli, usingaluminum)\n∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))\n∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))\nMade(carrozzeriacolli, carbodies)\"\"\""
    ]
  },
  {
    "id": 646,
    "question": "Giuseppe Colli established a company that made car bodies.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)\nSpecializedIn(carrozzeriacolli, usingaluminum)\n∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))\n∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))\nMade(carrozzeriacolli, carbodies)\"\"\""
    ]
  },
  {
    "id": 647,
    "question": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)\nSpecializedIn(carrozzeriacolli, usingaluminum)\n∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))\n∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))\nMade(carrozzeriacolli, carbodies)\"\"\""
    ]
  },
  {
    "id": 648,
    "question": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chasis.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)\nSpecializedIn(carrozzeriacolli, usingaluminum)\n∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))\n∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))\n∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))\nMade(carrozzeriacolli, carbodies)\"\"\""
    ]
  },
  {
    "id": 387,
    "question": "John will go to the cinema.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)\nGoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))\n∃x (Month(march) → BadWeather(x))\nMovie(ironman)\nMonth(march)\"\"\""
    ]
  },
  {
    "id": 388,
    "question": "The weather is good today.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)\nGoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))\n∃x (Month(march) → BadWeather(x))\nMovie(ironman)\nMonth(march)\"\"\""
    ]
  },
  {
    "id": 247,
    "question": "Quiksilver sells beer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))\nClothing(flannel)\n∃x (QuiksilverSells(x) → JoeOwns(x))\"\"\""
    ]
  },
  {
    "id": 248,
    "question": "Joe owns a flannel.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))\nClothing(flannel)\n∃x (QuiksilverSells(x) → JoeOwns(x))\"\"\""
    ]
  },
  {
    "id": 249,
    "question": "Joe owns at least one a piece of sportswear, clothing, footwear, or accessory",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))\nClothing(flannel)\n∃x (QuiksilverSells(x) → JoeOwns(x))\"\"\""
    ]
  },
  {
    "id": 765,
    "question": "The video game \"Be Lionel\" is in the pokemon series.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nintendo(x) → ¬SupportPS4(x))\n∀x (Pokemon(x) → Nintendo(x))\n∀x (FIFA(x) → SupportPS4(x))\n∀x (SoccerOnline(x) → FIFA(x))\nPokemon(belionel) ⊕ SoccerOnline(belionel)\"\"\""
    ]
  },
  {
    "id": 766,
    "question": "The video game named “Be Lionel” is not in the FIFA series or supports the PS4 platform.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nintendo(x) → ¬SupportPS4(x))\n∀x (Pokemon(x) → Nintendo(x))\n∀x (FIFA(x) → SupportPS4(x))\n∀x (SoccerOnline(x) → FIFA(x))\nPokemon(belionel) ⊕ SoccerOnline(belionel)\"\"\""
    ]
  },
  {
    "id": 767,
    "question": "The video game named “Be Lionel” is in the FIFA series or supports the PS4 platform.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nintendo(x) → ¬SupportPS4(x))\n∀x (Pokemon(x) → Nintendo(x))\n∀x (FIFA(x) → SupportPS4(x))\n∀x (SoccerOnline(x) → FIFA(x))\nPokemon(belionel) ⊕ SoccerOnline(belionel)\"\"\""
    ]
  },
  {
    "id": 768,
    "question": "The video game named “Be Lionel”  is not in the FIFA or Pokemon series.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nintendo(x) → ¬SupportPS4(x))\n∀x (Pokemon(x) → Nintendo(x))\n∀x (FIFA(x) → SupportPS4(x))\n∀x (SoccerOnline(x) → FIFA(x))\nPokemon(belionel) ⊕ SoccerOnline(belionel)\"\"\""
    ]
  },
  {
    "id": 778,
    "question": "Bank of America payment cards are international.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RussianBank(x) → ¬ApplePay(x))\n∀x (Mir(x) → RussianBank(x))\n∃x (International(x) → ApplePay(x))\n∀x (SocialRussia(x) → Mir(x))\nApplePay(boapaymentcards)\"\"\""
    ]
  },
  {
    "id": 779,
    "question": "Bank of America payment cards are international and can be used to transfer social payments in Russia.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RussianBank(x) → ¬ApplePay(x))\n∀x (Mir(x) → RussianBank(x))\n∃x (International(x) → ApplePay(x))\n∀x (SocialRussia(x) → Mir(x))\nApplePay(boapaymentcards)\"\"\""
    ]
  },
  {
    "id": 780,
    "question": "If Bank of America payment cards are international or issued by Russian banks, then they can not be used to transfer social payments in Russia.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RussianBank(x) → ¬ApplePay(x))\n∀x (Mir(x) → RussianBank(x))\n∃x (International(x) → ApplePay(x))\n∀x (SocialRussia(x) → Mir(x))\nApplePay(boapaymentcards)\"\"\""
    ]
  },
  {
    "id": 151,
    "question": "The Lumina APV is van.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nChevrolet(luminaAPV)\nChevrolet(astro) ∧ Van(astro)\n∀x (Chevrolet(x) → Car(x) ⊕ Van(x))\"\"\""
    ]
  },
  {
    "id": 152,
    "question": "The Lumina APV is either a car or a van.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nChevrolet(luminaAPV)\nChevrolet(astro) ∧ Van(astro)\n∀x (Chevrolet(x) → Car(x) ⊕ Van(x))\"\"\""
    ]
  },
  {
    "id": 153,
    "question": "The Astro is a van.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nChevrolet(luminaAPV)\nChevrolet(astro) ∧ Van(astro)\n∀x (Chevrolet(x) → Car(x) ⊕ Van(x))\"\"\""
    ]
  },
  {
    "id": 154,
    "question": "The Astro is a car.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nChevrolet(luminaAPV)\nChevrolet(astro) ∧ Van(astro)\n∀x (Chevrolet(x) → Car(x) ⊕ Van(x))\"\"\""
    ]
  },
  {
    "id": 1128,
    "question": "George is a person who works from home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InPerson(x) → Commuter(x))\n∀x (InPerson(x) ⊕ FromHome(x))\n∀x (FromHome(x) → Relaxed(x))\nCommuter(george) ⊕ HomeOffice(george)\nFromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))\"\"\""
    ]
  },
  {
    "id": 1129,
    "question": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InPerson(x) → Commuter(x))\n∀x (InPerson(x) ⊕ FromHome(x))\n∀x (FromHome(x) → Relaxed(x))\nCommuter(george) ⊕ HomeOffice(george)\nFromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))\"\"\""
    ]
  },
  {
    "id": 1130,
    "question": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InPerson(x) → Commuter(x))\n∀x (InPerson(x) ⊕ FromHome(x))\n∀x (FromHome(x) → Relaxed(x))\nCommuter(george) ⊕ HomeOffice(george)\nFromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))\"\"\""
    ]
  },
  {
    "id": 81,
    "question": "Joe Rogan is American.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicSupervisor(jasonKramer) ∧ American(jasonKramer)\n∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))\n∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x))\nRadioPersonality(joeRogan)\nHostShowOnPublicRadioStation(jasonKramer)\"\"\""
    ]
  },
  {
    "id": 82,
    "question": "Jason Kramer is a music supervisor.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicSupervisor(jasonKramer) ∧ American(jasonKramer)\n∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))\n∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x))\nRadioPersonality(joeRogan)\nHostShowOnPublicRadioStation(jasonKramer)\"\"\""
    ]
  },
  {
    "id": 83,
    "question": "Jason Kramer is a radio personality.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicSupervisor(jasonKramer) ∧ American(jasonKramer)\n∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))\n∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x))\nRadioPersonality(joeRogan)\nHostShowOnPublicRadioStation(jasonKramer)\"\"\""
    ]
  },
  {
    "id": 1228,
    "question": "Civet Coffee is produced in France.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Walmart(x) → ¬France(x))\n∀x (Company(x) → Walmart(x))\n∀x (Columbia(x) → France(x))\n∀x (Favored(x) → Columbia(x))\n∀x (HighPrice(x) → Favored(x))\n¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))\nWalmart(jamaicablue) ∨ Favored(jamaicablue)\"\"\""
    ]
  },
  {
    "id": 1229,
    "question": "Civet Coffee is not produced in France.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Walmart(x) → ¬France(x))\n∀x (Company(x) → Walmart(x))\n∀x (Columbia(x) → France(x))\n∀x (Favored(x) → Columbia(x))\n∀x (HighPrice(x) → Favored(x))\n¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))\nWalmart(jamaicablue) ∨ Favored(jamaicablue)\"\"\""
    ]
  },
  {
    "id": 1230,
    "question": "Jamaica Blue is expensive and supplied by the company.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Walmart(x) → ¬France(x))\n∀x (Company(x) → Walmart(x))\n∀x (Columbia(x) → France(x))\n∀x (Favored(x) → Columbia(x))\n∀x (HighPrice(x) → Favored(x))\n¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))\nWalmart(jamaicablue) ∨ Favored(jamaicablue)\"\"\""
    ]
  },
  {
    "id": 1231,
    "question": "Jamaica Blue is not expensive and is not supplied by the company.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Walmart(x) → ¬France(x))\n∀x (Company(x) → Walmart(x))\n∀x (Columbia(x) → France(x))\n∀x (Favored(x) → Columbia(x))\n∀x (HighPrice(x) → Favored(x))\n¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))\nWalmart(jamaicablue) ∨ Favored(jamaicablue)\"\"\""
    ]
  },
  {
    "id": 600,
    "question": "Rochelle lives in Galicia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Galicia(x) → Spain(x) ⊕ Poland(x))\n∀x (Spain(x) → Europe(x))\n∀x (Poland(x) → Europe(x))\n∀x (RochelleLive(x) → Europe(x))\n∀x (DominiqueLive(x) → ¬Europe(x))\n∀x (AlfonsoLive(x) → Galicia(x))\"\"\""
    ]
  },
  {
    "id": 601,
    "question": "Dominique does not live in Spain.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Galicia(x) → Spain(x) ⊕ Poland(x))\n∀x (Spain(x) → Europe(x))\n∀x (Poland(x) → Europe(x))\n∀x (RochelleLive(x) → Europe(x))\n∀x (DominiqueLive(x) → ¬Europe(x))\n∀x (AlfonsoLive(x) → Galicia(x))\"\"\""
    ]
  },
  {
    "id": 602,
    "question": "Alfonso lives in Europe.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Galicia(x) → Spain(x) ⊕ Poland(x))\n∀x (Spain(x) → Europe(x))\n∀x (Poland(x) → Europe(x))\n∀x (RochelleLive(x) → Europe(x))\n∀x (DominiqueLive(x) → ¬Europe(x))\n∀x (AlfonsoLive(x) → Galicia(x))\"\"\""
    ]
  },
  {
    "id": 322,
    "question": "Ralph Hammerthaler is a writer born in Asia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ralphHammerthaler, wasserburgAmInn)\nLocatedIn(wasserbAmInn, germany)\nLocatedIn(germany, europe)\nWriter(ralphHammerthaler)\nBornIn1965(ralphHammerthaler)\"\"\""
    ]
  },
  {
    "id": 323,
    "question": "Ralph Hammerthaler lives in Germany.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ralphHammerthaler, wasserburgAmInn)\nLocatedIn(wasserbAmInn, germany)\nLocatedIn(germany, europe)\nWriter(ralphHammerthaler)\nBornIn1965(ralphHammerthaler)\"\"\""
    ]
  },
  {
    "id": 1171,
    "question": "2001 is a book that has won a Hugo Award.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WrittenByTomas(x) → SoldOneMillion(x))\n∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))\n∀x (AboutFuture(x) → InspiredFromShakespeare(x))\nInspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) \nSoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)\"\"\""
    ]
  },
  {
    "id": 1172,
    "question": "2001 is a book that has won a Hugo Award and is about the future.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WrittenByTomas(x) → SoldOneMillion(x))\n∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))\n∀x (AboutFuture(x) → InspiredFromShakespeare(x))\nInspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) \nSoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)\"\"\""
    ]
  },
  {
    "id": 1173,
    "question": "If 2001 either has won a Hugo Award and is about the future, or neither has won a Hugo Award nor is about the future, then 2001 has neither won a Hugo Award nor is written by Tomas.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WrittenByTomas(x) → SoldOneMillion(x))\n∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))\n∀x (AboutFuture(x) → InspiredFromShakespeare(x))\nInspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) \nSoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)\"\"\""
    ]
  },
  {
    "id": 1398,
    "question": "Grapes are a food.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\"\"\""
    ]
  },
  {
    "id": 1399,
    "question": "Grapes are not a food.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\"\"\""
    ]
  },
  {
    "id": 1400,
    "question": "Bananas are a lemon and meadow.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\"\"\""
    ]
  },
  {
    "id": 1401,
    "question": "Bananas are not both a lemon and a meadow.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Grass(x) → ¬Food(x))\n∀x (Meadow(x) → Grass(x))\n∀x (Edible(x) → Food(x))\n∀x (Fruit(x) → Edible(x))\n∀x (Lemon(x) → Fruit(x))\n¬(Edible(grape) ∧ Lemon(grape))\nGrass(banana) ∨ Fruit(banana)\"\"\""
    ]
  },
  {
    "id": 60,
    "question": "The Boston Celtics is from San Francisco.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTeam(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)\nWon(goldenstatewarriors, nbafinals)\n∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))\nTeam(bostonceltics) ∧ Lost(bostonceltics, nbafinals)\n∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))\n∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))\"\"\""
    ]
  },
  {
    "id": 61,
    "question": "The Boston Celtics has more than 30 years of experience.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTeam(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)\nWon(goldenstatewarriors, nbafinals)\n∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))\nTeam(bostonceltics) ∧ Lost(bostonceltics, nbafinals)\n∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))\n∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))\"\"\""
    ]
  },
  {
    "id": 62,
    "question": "The Golden State Warriors will have more income for gate receipts.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTeam(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)\nWon(goldenstatewarriors, nbafinals)\n∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))\nTeam(bostonceltics) ∧ Lost(bostonceltics, nbafinals)\n∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))\n∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))\"\"\""
    ]
  },
  {
    "id": 624,
    "question": "Maya will not play violin.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCanInjureFingures(maya) → ¬WillPlayViolin(maya)\n∀x (VolleyballPlayer(x) → CanInjureFingures(x))\nVolleyballPlayer(maya)\"\"\""
    ]
  },
  {
    "id": 1220,
    "question": "IPod1 is controlled by managers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InCompany(x) → GoogleHome(x))\n∀x (CompanyLogo(x) → InCompany(x))\n∀x (CompanyLogo(x) ∨ Employee(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → ControlledByManager(x))\n∀x (Wifi(x) → EasyToOperate(x))\n∀x (EasyToOperate(x) → ProducedAfter2020(x))\n¬ProducedAfter2020(iPod1)\"\"\""
    ]
  },
  {
    "id": 1221,
    "question": "IPod1 is either produced after 2020 or controlled by managers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InCompany(x) → GoogleHome(x))\n∀x (CompanyLogo(x) → InCompany(x))\n∀x (CompanyLogo(x) ∨ Employee(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → ControlledByManager(x))\n∀x (Wifi(x) → EasyToOperate(x))\n∀x (EasyToOperate(x) → ProducedAfter2020(x))\n¬ProducedAfter2020(iPod1)\"\"\""
    ]
  },
  {
    "id": 1222,
    "question": "IPod1 is not with the company logo, and managers do not control it.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InCompany(x) → GoogleHome(x))\n∀x (CompanyLogo(x) → InCompany(x))\n∀x (CompanyLogo(x) ∨ Employee(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → ControlledByManager(x))\n∀x (Wifi(x) → EasyToOperate(x))\n∀x (EasyToOperate(x) → ProducedAfter2020(x))\n¬ProducedAfter2020(iPod1)\"\"\""
    ]
  },
  {
    "id": 1223,
    "question": "IPod1 is either with the company logo or controlled by managers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InCompany(x) → GoogleHome(x))\n∀x (CompanyLogo(x) → InCompany(x))\n∀x (CompanyLogo(x) ∨ Employee(x))\n∀x (Employee(x) → Wifi(x))\n∀x (GoogleHome(x) → ControlledByManager(x))\n∀x (Wifi(x) → EasyToOperate(x))\n∀x (EasyToOperate(x) → ProducedAfter2020(x))\n¬ProducedAfter2020(iPod1)\"\"\""
    ]
  },
  {
    "id": 715,
    "question": "Some CD players are suitable toys for children.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (CDPlayer(x) → DelicateMechanism(x))\n∀x (DelicateMechanism(x) → ¬SuitableToyForChildren(x))\"\"\""
    ]
  },
  {
    "id": 921,
    "question": "Jumbo is sleepy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)\"\"\""
    ]
  },
  {
    "id": 922,
    "question": "Jumbo is not sleepy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)\"\"\""
    ]
  },
  {
    "id": 923,
    "question": "Jumbo is a living being.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)\"\"\""
    ]
  },
  {
    "id": 924,
    "question": "Jumbo is neither sleepy nor a baby elephant.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)\"\"\""
    ]
  },
  {
    "id": 925,
    "question": "Jumbo is not sleepy or an elephant.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Mammal(x) → LivingBeing(x)) \n∀x (Elephant(x) → Mammal(x))\n∀x (BabyElephant(x) → Elephant(x))\n∃x (BabyElephant(x) ∧ Sleepy(x))\nLivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))\nSleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)\"\"\""
    ]
  },
  {
    "id": 1291,
    "question": "Jill works at a school.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Faculty(x) → ¬DoesHomework(x))\n∀x (Student(x) → DoesHomework(x))\n∀x (Kid(x) → Student(x))\n∀x (WorkAtSchool(x) → Faculty(x))\nWorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)\"\"\""
    ]
  },
  {
    "id": 1292,
    "question": "Jill is a kid.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Faculty(x) → ¬DoesHomework(x))\n∀x (Student(x) → DoesHomework(x))\n∀x (Kid(x) → Student(x))\n∀x (WorkAtSchool(x) → Faculty(x))\nWorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)\"\"\""
    ]
  },
  {
    "id": 1293,
    "question": "Jill is not a kid.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Faculty(x) → ¬DoesHomework(x))\n∀x (Student(x) → DoesHomework(x))\n∀x (Kid(x) → Student(x))\n∀x (WorkAtSchool(x) → Faculty(x))\nWorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)\"\"\""
    ]
  },
  {
    "id": 941,
    "question": "“As it was” by Harry Styles needs to be written with words.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))\n∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))\n∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))\n∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))\n∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))\nMaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)\"\"\""
    ]
  },
  {
    "id": 942,
    "question": "\"As it was” by Harry Styles is a song from the 12th century.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))\n∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))\n∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))\n∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))\n∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))\nMaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)\"\"\""
    ]
  },
  {
    "id": 943,
    "question": "\"As it was” by Harry Styles is not a song from Kanye West and needs to be written with words.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))\n∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))\n∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))\n∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))\n∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))\nMaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)\"\"\""
    ]
  },
  {
    "id": 114,
    "question": "\"Your Woman\" was extremely popular.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProduce(whiteTown, yourWoman)\nPeak(yourWoman, uKSinglesChart)\n∀x ∀y (Peak(x, y) → Popular(x))\nPeak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)\"\"\""
    ]
  },
  {
    "id": 115,
    "question": "White Town did not produce any popular song.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProduce(whiteTown, yourWoman)\nPeak(yourWoman, uKSinglesChart)\n∀x ∀y (Peak(x, y) → Popular(x))\nPeak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)\"\"\""
    ]
  },
  {
    "id": 116,
    "question": "White Town was a successful band.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProduce(whiteTown, yourWoman)\nPeak(yourWoman, uKSinglesChart)\n∀x ∀y (Peak(x, y) → Popular(x))\nPeak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)\"\"\""
    ]
  },
  {
    "id": 1001,
    "question": "Mark limps often and regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Limp(x) → Medical(x))\n∀x (Medical(x) → ¬Spry(x))\n∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))\n∀x (Indoors(x) → ¬Gym(x))\n(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)\"\"\""
    ]
  },
  {
    "id": 1002,
    "question": "Mark visits the gym at least once a day.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Limp(x) → Medical(x))\n∀x (Medical(x) → ¬Spry(x))\n∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))\n∀x (Indoors(x) → ¬Gym(x))\n(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)\"\"\""
    ]
  },
  {
    "id": 1003,
    "question": "Mark stays indoors and rests regularly at his home or visits the gym at least once a day.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Limp(x) → Medical(x))\n∀x (Medical(x) → ¬Spry(x))\n∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))\n∀x (Indoors(x) → ¬Gym(x))\n(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)\"\"\""
    ]
  },
  {
    "id": 543,
    "question": "Real Madrid and Atlético Madrid needed to play a penalty shoot-out in 2016 UCL final.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) → PlayExtra(x, y))\n∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)\"\"\""
    ]
  },
  {
    "id": 544,
    "question": "Real Madrid and Atlético Madrid did not need to play a penalty shoot-out in 2016 UCL final.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) → PlayExtra(x, y))\n∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)\nSoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)\"\"\""
    ]
  },
  {
    "id": 35,
    "question": "System 7 was formed by former members of Gong.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)\nFormed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)\n∀x (ElectronicDanceMusicBand(x) → Band(x))\n∃x (ClubSingle(x) ∧ Released(system7, x))\n∀x (ClubSingle(x) → ¬Single(x))\"\"\""
    ]
  },
  {
    "id": 36,
    "question": "System 7 has released several singles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)\nFormed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)\n∀x (ElectronicDanceMusicBand(x) → Band(x))\n∃x (ClubSingle(x) ∧ Released(system7, x))\n∀x (ClubSingle(x) → ¬Single(x))\"\"\""
    ]
  },
  {
    "id": 37,
    "question": "System 7 is not a band.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)\nFormed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)\n∀x (ElectronicDanceMusicBand(x) → Band(x))\n∃x (ClubSingle(x) ∧ Released(system7, x))\n∀x (ClubSingle(x) → ¬Single(x))\"\"\""
    ]
  },
  {
    "id": 545,
    "question": "Extractive models are always faithful.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))\n∀x (Model(x) ∧ Extractive(x) → Summarization(x))\n∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))\"\"\""
    ]
  },
  {
    "id": 546,
    "question": "Extractive models are not always faithful.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))\n∀x (Model(x) ∧ Extractive(x) → Summarization(x))\n∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))\"\"\""
    ]
  },
  {
    "id": 989,
    "question": "Robin is a person who studies hard.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Coding(x) → ¬StudyingToBeDoctor(x)\n∀x Industry(x) → Coding(x)\n∀x Healthcare(x) → StudyingToBeDoctor(x)\n∀x ParentDoctors(x) → Healthcare(x)\n∀x Study(x) → ParentDoctors(x)\n¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) \"\"\""
    ]
  },
  {
    "id": 990,
    "question": "Robin practices coding questions and wants to work in the software engineering industry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Coding(x) → ¬StudyingToBeDoctor(x)\n∀x Industry(x) → Coding(x)\n∀x Healthcare(x) → StudyingToBeDoctor(x)\n∀x ParentDoctors(x) → Healthcare(x)\n∀x Study(x) → ParentDoctors(x)\n¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) \"\"\""
    ]
  },
  {
    "id": 991,
    "question": "Robin neither practices coding questions nor works to work in the software engineering industry.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Coding(x) → ¬StudyingToBeDoctor(x)\n∀x Industry(x) → Coding(x)\n∀x Healthcare(x) → StudyingToBeDoctor(x)\n∀x ParentDoctors(x) → Healthcare(x)\n∀x Study(x) → ParentDoctors(x)\n¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) \"\"\""
    ]
  },
  {
    "id": 1028,
    "question": "Jess frivolously spends a lot of money every time they go out.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Spa(x) → ¬Miserly(x)\n∀x Miserly(x) ∨ Frivolous(x)\n∀x Frivolous(x) → Luxury(x)\n∀x Luxury(x) → Shopping(x)\n¬Miserly(Jess) → ¬Luxury(Jess)\nLuxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)\"\"\""
    ]
  },
  {
    "id": 1029,
    "question": "Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Spa(x) → ¬Miserly(x)\n∀x Miserly(x) ∨ Frivolous(x)\n∀x Frivolous(x) → Luxury(x)\n∀x Luxury(x) → Shopping(x)\n¬Miserly(Jess) → ¬Luxury(Jess)\nLuxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)\"\"\""
    ]
  },
  {
    "id": 1030,
    "question": "If Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week, then Jess neither values quality manufacturing and luxury items nor goes to the spa at least once a week.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x Spa(x) → ¬Miserly(x)\n∀x Miserly(x) ∨ Frivolous(x)\n∀x Frivolous(x) → Luxury(x)\n∀x Luxury(x) → Shopping(x)\n¬Miserly(Jess) → ¬Luxury(Jess)\nLuxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)\"\"\""
    ]
  },
  {
    "id": 628,
    "question": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAlbumsReleased(phoenix, l6)\nAlbum(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)\n∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x))\nSingle(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)\nSoldOver(l1901, l400000)\"\"\""
    ]
  },
  {
    "id": 629,
    "question": "The single \"1901\" is a certified gold single.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAlbumsReleased(phoenix, l6)\nAlbum(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)\n∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x))\nSingle(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)\nSoldOver(l1901, l400000)\"\"\""
    ]
  },
  {
    "id": 11,
    "question": "If the Hulk does not wake up, then Thor is not happy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSuperhero(peter) ⊕ Civilian(peter)\nDestroyer(hulk)\nAngry(hulk) → Wake(hulk)\nWake(hulk) → BreakBridge(hulk)\nGod(thor)\nHappy(thor) → BreakBridge(thor)\n∀x (God(x) ↔ ¬Destroyer(x))\nSuperhero(peter) → WearUniform(peter)\n∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))\nHappy(thor) → Angry(hulk)\"\"\""
    ]
  },
  {
    "id": 12,
    "question": "If Thor is happy, then Peter Parker wears a uniform.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSuperhero(peter) ⊕ Civilian(peter)\nDestroyer(hulk)\nAngry(hulk) → Wake(hulk)\nWake(hulk) → BreakBridge(hulk)\nGod(thor)\nHappy(thor) → BreakBridge(thor)\n∀x (God(x) ↔ ¬Destroyer(x))\nSuperhero(peter) → WearUniform(peter)\n∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))\nHappy(thor) → Angry(hulk)\"\"\""
    ]
  },
  {
    "id": 13,
    "question": "If Thor is not happy, then no bridge will be broken.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSuperhero(peter) ⊕ Civilian(peter)\nDestroyer(hulk)\nAngry(hulk) → Wake(hulk)\nWake(hulk) → BreakBridge(hulk)\nGod(thor)\nHappy(thor) → BreakBridge(thor)\n∀x (God(x) ↔ ¬Destroyer(x))\nSuperhero(peter) → WearUniform(peter)\n∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))\nHappy(thor) → Angry(hulk)\"\"\""
    ]
  },
  {
    "id": 259,
    "question": "Diethylcarbamazine is not preferred for the treatment of river blindness.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))\n∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))\n∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))\n∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))\"\"\""
    ]
  },
  {
    "id": 260,
    "question": "Diethylcarbamazine was often used to treat river blindness.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))\n∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))\n∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))\n∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))\"\"\""
    ]
  },
  {
    "id": 261,
    "question": "Diethylcarbamazine is used in the treatment of filariasis.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))\n∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))\n∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))\n∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))\"\"\""
    ]
  },
  {
    "id": 1062,
    "question": "Latent Dirichlet allocation model is implementing machine learning algorithms.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) \n ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))\n ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) \n UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)\n ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)\"\"\""
    ]
  },
  {
    "id": 1063,
    "question": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) \n ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))\n ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) \n UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)\n ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)\"\"\""
    ]
  },
  {
    "id": 1064,
    "question": "Latent Dirichlet allocation model either uses a generalized linear model or learns and classifies multivariate data.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) \n ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))\n ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) \n UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)\n ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)\"\"\""
    ]
  },
  {
    "id": 1040,
    "question": "Bladder cancer is mild.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) \n∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))\n∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) \n∀x (BloodCancer(x) → RareDiseases(x))\n∀x (Leukemia(x) → BloodCancer(x))\n¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)\"\"\""
    ]
  },
  {
    "id": 1041,
    "question": "Bladder cancer is Leukemia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) \n∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))\n∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) \n∀x (BloodCancer(x) → RareDiseases(x))\n∀x (Leukemia(x) → BloodCancer(x))\n¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)\"\"\""
    ]
  },
  {
    "id": 1042,
    "question": "Bladder cancer is either a rare disease or mild.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) \n∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))\n∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) \n∀x (BloodCancer(x) → RareDiseases(x))\n∀x (Leukemia(x) → BloodCancer(x))\n¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)\"\"\""
    ]
  },
  {
    "id": 1049,
    "question": "Lithium is a rare earth metal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PreciousMetals(x) → ¬NotScarce(x))\n ∀x (Non-rareEarthMetals(x) → NotScarce(x)) \n ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) \n ∀x (RareEarthMetals(x) → BeUsedForBatteries(x)) \n ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))\n ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium)\"\"\""
    ]
  },
  {
    "id": 1050,
    "question": "Lithium is a precious metal and is used for batteries.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PreciousMetals(x) → ¬NotScarce(x))\n ∀x (Non-rareEarthMetals(x) → NotScarce(x)) \n ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) \n ∀x (RareEarthMetals(x) → BeUsedForBatteries(x)) \n ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))\n ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium)\"\"\""
    ]
  },
  {
    "id": 1051,
    "question": "If Lithium is not essential for electric vehicles or a precious metal, then Lithium is not a non-rare earth metal or usable for batteries.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PreciousMetals(x) → ¬NotScarce(x))\n ∀x (Non-rareEarthMetals(x) → NotScarce(x)) \n ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) \n ∀x (RareEarthMetals(x) → BeUsedForBatteries(x)) \n ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))\n ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium)\"\"\""
    ]
  },
  {
    "id": 863,
    "question": "Jack lives in the suburbs.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnPet(x) → ¬TidyHouse(x))\n∀x (ChildhoodPet(x) → OwnPet(x))\n∀x (HireCleaning(x) → TidyHouse(x))\n∀x (Suburbs(x) → ChildhoodPet(x))\n¬(HireCleaning(jack) ⊕ OwnPet(jack))\"\"\""
    ]
  },
  {
    "id": 864,
    "question": "Jack does not live in the suburbs.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnPet(x) → ¬TidyHouse(x))\n∀x (ChildhoodPet(x) → OwnPet(x))\n∀x (HireCleaning(x) → TidyHouse(x))\n∀x (Suburbs(x) → ChildhoodPet(x))\n¬(HireCleaning(jack) ⊕ OwnPet(jack))\"\"\""
    ]
  },
  {
    "id": 865,
    "question": "Jack has a tidy house.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnPet(x) → ¬TidyHouse(x))\n∀x (ChildhoodPet(x) → OwnPet(x))\n∀x (HireCleaning(x) → TidyHouse(x))\n∀x (Suburbs(x) → ChildhoodPet(x))\n¬(HireCleaning(jack) ⊕ OwnPet(jack))\"\"\""
    ]
  },
  {
    "id": 866,
    "question": "Jack neither lives in the suburbs nor owns at least one pet.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnPet(x) → ¬TidyHouse(x))\n∀x (ChildhoodPet(x) → OwnPet(x))\n∀x (HireCleaning(x) → TidyHouse(x))\n∀x (Suburbs(x) → ChildhoodPet(x))\n¬(HireCleaning(jack) ⊕ OwnPet(jack))\"\"\""
    ]
  },
  {
    "id": 867,
    "question": "Jack grew up with childhood pets and lives in the suburbs.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OwnPet(x) → ¬TidyHouse(x))\n∀x (ChildhoodPet(x) → OwnPet(x))\n∀x (HireCleaning(x) → TidyHouse(x))\n∀x (Suburbs(x) → ChildhoodPet(x))\n¬(HireCleaning(jack) ⊕ OwnPet(jack))\"\"\""
    ]
  },
  {
    "id": 727,
    "question": "The bottle is toppled over.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nUpright(bottle) ⊕ ToppledOver(bottle)\n¬Upright(bottle)\"\"\""
    ]
  },
  {
    "id": 957,
    "question": "John is good at staying organized and motivated.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cereal(x) → BusyMorning(x))\n∀x (YoungChildren(x) → BusyMorning(x))\n∀x (YoungChildren(x) ⊕ Committments(x))\n∀x (Committments(x) → Hardworking(x))\n∀x (Hardworking(x) → ¬Organized(x))\n(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))\"\"\""
    ]
  },
  {
    "id": 958,
    "question": "John eats cereal and milk every day for breakfast.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cereal(x) → BusyMorning(x))\n∀x (YoungChildren(x) → BusyMorning(x))\n∀x (YoungChildren(x) ⊕ Committments(x))\n∀x (Committments(x) → Hardworking(x))\n∀x (Hardworking(x) → ¬Organized(x))\n(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))\"\"\""
    ]
  },
  {
    "id": 959,
    "question": "John is either a hardworking individual with high ambitions and goals for the future or is good at staying organized and motivated.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cereal(x) → BusyMorning(x))\n∀x (YoungChildren(x) → BusyMorning(x))\n∀x (YoungChildren(x) ⊕ Committments(x))\n∀x (Committments(x) → Hardworking(x))\n∀x (Hardworking(x) → ¬Organized(x))\n(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))\"\"\""
    ]
  },
  {
    "id": 238,
    "question": "Ableton is a multinational company.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOfficeIn(ableton, germany)\nOfficeIn(ableton, usa)\n¬SameCountry(germany, usa)\n∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))\nMakesMusicSoftware(ableton)\"\"\""
    ]
  },
  {
    "id": 239,
    "question": "Ableton makes AI software.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOfficeIn(ableton, germany)\nOfficeIn(ableton, usa)\n¬SameCountry(germany, usa)\n∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))\nMakesMusicSoftware(ableton)\"\"\""
    ]
  },
  {
    "id": 240,
    "question": "Ableton does not have an office in Germany.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOfficeIn(ableton, germany)\nOfficeIn(ableton, usa)\n¬SameCountry(germany, usa)\n∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))\nMakesMusicSoftware(ableton)\"\"\""
    ]
  },
  {
    "id": 1300,
    "question": "Fido eats fish they catch themselves.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Swimmer(x) → GoesUnderwater(x))\n∀x (EatsFishCaughtThemselves(x) → Swimmer(x))\n∀x (Penguin(x) → EatsFishCaughtThemselves(x))\n∀x (NonFlyingBirdAntartica(x) → Penguin(x))\nPenguin(fido) ∨ Swimmer(fido)\"\"\""
    ]
  },
  {
    "id": 1301,
    "question": "Fido is neither a non-flying bird nor can Fido go underwater.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Swimmer(x) → GoesUnderwater(x))\n∀x (EatsFishCaughtThemselves(x) → Swimmer(x))\n∀x (Penguin(x) → EatsFishCaughtThemselves(x))\n∀x (NonFlyingBirdAntartica(x) → Penguin(x))\nPenguin(fido) ∨ Swimmer(fido)\"\"\""
    ]
  },
  {
    "id": 1302,
    "question": "If Fido can either go underwater or is a swimmer, then Fido is a nonflying bird in Antartica.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Swimmer(x) → GoesUnderwater(x))\n∀x (EatsFishCaughtThemselves(x) → Swimmer(x))\n∀x (Penguin(x) → EatsFishCaughtThemselves(x))\n∀x (NonFlyingBirdAntartica(x) → Penguin(x))\nPenguin(fido) ∨ Swimmer(fido)\"\"\""
    ]
  },
  {
    "id": 1359,
    "question": "Leon is a professor.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Professor(x) → Teacher(x))\n∀x (Researcher(x) → Professor(x))\n∀x (Teacher(x) → ¬Student(x))\n∀x (Study(x) → Student(x))\n¬Study(leon) ⊕ Researcher(leon)\n¬Study(leon) → Teacher(leon)\"\"\""
    ]
  },
  {
    "id": 1360,
    "question": "Leon is neither a student nor a researcher.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Professor(x) → Teacher(x))\n∀x (Researcher(x) → Professor(x))\n∀x (Teacher(x) → ¬Student(x))\n∀x (Study(x) → Student(x))\n¬Study(leon) ⊕ Researcher(leon)\n¬Study(leon) → Teacher(leon)\"\"\""
    ]
  },
  {
    "id": 1361,
    "question": "If Leon is not a researcher, then Leon is a student.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Professor(x) → Teacher(x))\n∀x (Researcher(x) → Professor(x))\n∀x (Teacher(x) → ¬Student(x))\n∀x (Study(x) → Student(x))\n¬Study(leon) ⊕ Researcher(leon)\n¬Study(leon) → Teacher(leon)\"\"\""
    ]
  },
  {
    "id": 345,
    "question": "No cutmen appear in boxing matches.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))\n∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))\n∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))\nCutman(jack)\"\"\""
    ]
  },
  {
    "id": 346,
    "question": "If someone is not a cutman, then they cannot handle nosebleeds.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))\n∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))\n∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))\nCutman(jack)\"\"\""
    ]
  },
  {
    "id": 347,
    "question": "Jack can treat physical damage.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))\n∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))\n∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))\nCutman(jack)\"\"\""
    ]
  },
  {
    "id": 491,
    "question": "One of the world's best-known artworks is painted by a scientist.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainting(monaLisa) ∧ WorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)\nScientist(leonardodaVinci) ∧ Painter(leonardodaVinci)\n∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))\"\"\""
    ]
  },
  {
    "id": 492,
    "question": "Leonardo da Vinci has artworks in the landscape genre.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainting(monaLisa) ∧ WorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)\nScientist(leonardodaVinci) ∧ Painter(leonardodaVinci)\n∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))\"\"\""
    ]
  },
  {
    "id": 493,
    "question": "No world's best-known artworks are portraits.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPainting(monaLisa) ∧ WorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)\nScientist(leonardodaVinci) ∧ Painter(leonardodaVinci)\n∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))\"\"\""
    ]
  },
  {
    "id": 892,
    "question": "Nadal is a Grand Slam umpire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\"\"\""
    ]
  },
  {
    "id": 893,
    "question": "Nadal is not a Grand Slam umpire.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\"\"\""
    ]
  },
  {
    "id": 894,
    "question": "Nadal is a Grand Slam champion.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\"\"\""
    ]
  },
  {
    "id": 895,
    "question": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\"\"\""
    ]
  },
  {
    "id": 896,
    "question": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\"\"\""
    ]
  },
  {
    "id": 897,
    "question": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))\n∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))\n∀x (GrandSlamChampion(x) → WorldTourPlayer(x))\n∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)\"\"\""
    ]
  },
  {
    "id": 368,
    "question": "Crude Oil Data Exchange is sanctioned.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))\n∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))\n∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))\nBuisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange)\"\"\""
    ]
  },
  {
    "id": 369,
    "question": "Crude Oil Data Exchange is unsanctioned.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))\n∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))\n∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))\nBuisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange)\"\"\""
    ]
  },
  {
    "id": 370,
    "question": "Crude Oil Data Exchange is limited.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))\n∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))\n∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))\nBuisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange)\"\"\""
    ]
  },
  {
    "id": 750,
    "question": "V is invigorating",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Depressing(x) → Sad(x))\n∀x (V(x) → Depressing(x))\"\"\""
    ]
  },
  {
    "id": 314,
    "question": "John Evans Popularized the term paalstab.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))\n∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))\nArcheologist(johnevans) ∧ Popularized(johnevans, termpalstave)\n∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))\"\"\""
    ]
  },
  {
    "id": 315,
    "question": "There is an axe that is commonly found in Western Europe.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))\n∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))\nArcheologist(johnevans) ∧ Popularized(johnevans, termpalstave)\n∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))\"\"\""
    ]
  },
  {
    "id": 316,
    "question": "Archeologists haven't popularized anything.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))\n∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))\nArcheologist(johnevans) ∧ Popularized(johnevans, termpalstave)\n∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))\"\"\""
    ]
  },
  {
    "id": 274,
    "question": "Koei Tecmo holds another company.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nJapanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)\n∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))\nDisbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)\n∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))\"\"\""
    ]
  },
  {
    "id": 275,
    "question": "Tecmo holds another company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nJapanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)\n∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))\nDisbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)\n∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))\"\"\""
    ]
  },
  {
    "id": 276,
    "question": "Koei Tecmo holds anime.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nJapanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)\n∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))\nDisbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)\n∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))\"\"\""
    ]
  },
  {
    "id": 570,
    "question": "The Playstation Eye can be used with the Playstation 2 and the Playstation 3.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAccessory(pseyetoy, ps2)\nAccessory(pseye, ps3)\nAccessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)\n∀x ∀y (Accessory(x, y) → Compatible(x, y))\n¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)\"\"\""
    ]
  },
  {
    "id": 571,
    "question": "The Playstation EyeToy is compatible with the Playstation 2.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAccessory(pseyetoy, ps2)\nAccessory(pseye, ps3)\nAccessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)\n∀x ∀y (Accessory(x, y) → Compatible(x, y))\n¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)\"\"\""
    ]
  },
  {
    "id": 572,
    "question": "The Playstation Camera can be used for all Playstation consoles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAccessory(pseyetoy, ps2)\nAccessory(pseye, ps3)\nAccessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)\n∀x ∀y (Accessory(x, y) → Compatible(x, y))\n¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)\"\"\""
    ]
  },
  {
    "id": 723,
    "question": "Adam Buska plays what Americans call soccer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFootballPlayer(adambuska) ∧ European(adambuska)\n∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))\"\"\""
    ]
  },
  {
    "id": 1157,
    "question": "FIFA21 is published before 2010",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldMillion(x) → BestSeller(x))\n∀x (DevelopedByParadox(x) → SoldMillion(x))\n∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))\n∀x (BestSeller(x) → Popular(x))\n¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))\"\"\""
    ]
  },
  {
    "id": 1158,
    "question": "FIFA21 is published before 2010 and developed by Paradox Development Studio",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldMillion(x) → BestSeller(x))\n∀x (DevelopedByParadox(x) → SoldMillion(x))\n∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))\n∀x (BestSeller(x) → Popular(x))\n¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))\"\"\""
    ]
  },
  {
    "id": 1159,
    "question": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoldMillion(x) → BestSeller(x))\n∀x (DevelopedByParadox(x) → SoldMillion(x))\n∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))\n∀x (BestSeller(x) → Popular(x))\n¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))\"\"\""
    ]
  },
  {
    "id": 593,
    "question": "All people from BRICS neither speak Hindi nor speak English.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))\n∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))\n∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))\n∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))\n∃x ∃y (From(x, y) ∧ India(y))\"\"\""
    ]
  },
  {
    "id": 594,
    "question": "India's economy is not emerging.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))\n∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))\n∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))\n∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))\n∃x ∃y (From(x, y) ∧ India(y))\"\"\""
    ]
  },
  {
    "id": 595,
    "question": "There is a person from BRICS speaking Hindi.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))\n∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))\n∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))\n∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))\n∃x ∃y (From(x, y) ∧ India(y))\"\"\""
    ]
  },
  {
    "id": 265,
    "question": "Hamilton is a film.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nActor(daveedDiggs) ∧ FilmProducer(daveedDiggs)\nPlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)\n∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))\n∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))\nPlayed(daveedDiggs, thomasJefferson)\n∀x (Musical(x) → ¬Film(x))\"\"\""
    ]
  },
  {
    "id": 266,
    "question": "Daveed Diggs won the best actor award.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nActor(daveedDiggs) ∧ FilmProducer(daveedDiggs)\nPlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)\n∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))\n∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))\nPlayed(daveedDiggs, thomasJefferson)\n∀x (Musical(x) → ¬Film(x))\"\"\""
    ]
  },
  {
    "id": 267,
    "question": "Hamilton won two awards.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nActor(daveedDiggs) ∧ FilmProducer(daveedDiggs)\nPlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)\n∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))\n∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))\nPlayed(daveedDiggs, thomasJefferson)\n∀x (Musical(x) → ¬Film(x))\"\"\""
    ]
  },
  {
    "id": 630,
    "question": "Ernest Pohl has not scored more than 180 goals.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPolishFootballPlayer(ernestpohl)\n∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))\nScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)\n∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska))\nFrom(ernestpohl, rudaslaska)\"\"\""
    ]
  },
  {
    "id": 631,
    "question": "Górnik Zabrze's stadium was named after Ernest Pohl.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPolishFootballPlayer(ernestpohl)\n∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))\nScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)\n∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska))\nFrom(ernestpohl, rudaslaska)\"\"\""
    ]
  },
  {
    "id": 418,
    "question": "Ann J. Land was elected to the Philadelphia City Council in 1980.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)\nYear(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)\n∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))\nChallenger(nutter)\nYear(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)\"\"\""
    ]
  },
  {
    "id": 419,
    "question": "Ann J. Land was elected to the Philadelphia City Council in 1987.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)\nYear(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)\n∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))\nChallenger(nutter)\nYear(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)\"\"\""
    ]
  },
  {
    "id": 420,
    "question": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)\nYear(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)\n∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))\nChallenger(nutter)\nYear(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)\"\"\""
    ]
  },
  {
    "id": 337,
    "question": "Rangers won the cup in 2015.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWonCup(aberdeen, twentythirteen)\nWonCup(rangers, twentyfourteen)\nDifferent(aberdeen, rangers) ∧ Different(rangers, aberdeen)\n∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))\"\"\""
    ]
  },
  {
    "id": 338,
    "question": "Rangers won the cup in 2013.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWonCup(aberdeen, twentythirteen)\nWonCup(rangers, twentyfourteen)\nDifferent(aberdeen, rangers) ∧ Different(rangers, aberdeen)\n∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))\"\"\""
    ]
  },
  {
    "id": 339,
    "question": "Aberdeen has won a cup before.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWonCup(aberdeen, twentythirteen)\nWonCup(rangers, twentyfourteen)\nDifferent(aberdeen, rangers) ∧ Different(rangers, aberdeen)\n∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))\"\"\""
    ]
  },
  {
    "id": 848,
    "question": "Mary is a person who lives in Manhattan.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Working(x) → Pets(x))\n∃x (Manhattan(x) ∧ Working(x))\n∀x (Pets(x) → Child(x))\n∀x (Child(x) → ¬Car(x))\n¬(Car(mary) ⊕ Child(mary))\"\"\""
    ]
  },
  {
    "id": 849,
    "question": "Mary is a person who lives in Manhattan and is a young working professional who has a regular 9-5 job.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Working(x) → Pets(x))\n∃x (Manhattan(x) ∧ Working(x))\n∀x (Pets(x) → Child(x))\n∀x (Child(x) → ¬Car(x))\n¬(Car(mary) ⊕ Child(mary))\"\"\""
    ]
  },
  {
    "id": 850,
    "question": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Working(x) → Pets(x))\n∃x (Manhattan(x) ∧ Working(x))\n∀x (Pets(x) → Child(x))\n∀x (Child(x) → ¬Car(x))\n¬(Car(mary) ⊕ Child(mary))\"\"\""
    ]
  },
  {
    "id": 1085,
    "question": "Picture memory is preceded by data processing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BlockDesign(x) ∨ Event-relatedDesign(x))\n∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))\n∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))\n∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))\n(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))\"\"\""
    ]
  },
  {
    "id": 1086,
    "question": "Picture memory is a block design.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BlockDesign(x) ∨ Event-relatedDesign(x))\n∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))\n∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))\n∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))\n(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))\"\"\""
    ]
  },
  {
    "id": 1087,
    "question": "Picture memory is either a block design or acquiring data.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BlockDesign(x) ∨ Event-relatedDesign(x))\n∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))\n∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))\n∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))\n(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))\"\"\""
    ]
  },
  {
    "id": 1088,
    "question": "If picture memory is not acquiring data, then picture memory is a block design and acquiring data.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BlockDesign(x) ∨ Event-relatedDesign(x))\n∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))\n∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))\n∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))\n(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))\"\"\""
    ]
  },
  {
    "id": 726,
    "question": "The USS Lyon is decommissioned.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n(USNavyShip(usslyon) ∧ InWWII(usslyon))\n∀x (InWWII(x) → (Decommissioned(x) ∨ InMuseum(x)))\"\"\""
    ]
  },
  {
    "id": 929,
    "question": "Chopsticks at restaurants are eco-friendly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableChopsticks(x) → MadeFromTrees(x))\n∃x (EcoFriendly(x))\n∀x (DisposableChopsticks(x) ⊕ Reusable(x)) \n∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))\n∀x (Reusable(x) → MadeFromMetals(x))\n¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))\"\"\""
    ]
  },
  {
    "id": 930,
    "question": "Chopsticks at restaurants are eco-friendly or made from trees.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableChopsticks(x) → MadeFromTrees(x))\n∃x (EcoFriendly(x))\n∀x (DisposableChopsticks(x) ⊕ Reusable(x)) \n∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))\n∀x (Reusable(x) → MadeFromMetals(x))\n¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))\"\"\""
    ]
  },
  {
    "id": 931,
    "question": "If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DisposableChopsticks(x) → MadeFromTrees(x))\n∃x (EcoFriendly(x))\n∀x (DisposableChopsticks(x) ⊕ Reusable(x)) \n∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))\n∀x (Reusable(x) → MadeFromMetals(x))\n¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))\"\"\""
    ]
  },
  {
    "id": 1285,
    "question": "Sid is an animal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Lazy(x) → Unproductive(x))\n∀x (Unproductive(x) → ¬Energetic(x))\n∀x (Sloth(x) → Lazy(x))\n∃x (Animal(x) ∧ Sloth(x))\n¬Energetic(sid) ∨ Sloth(sid)\"\"\""
    ]
  },
  {
    "id": 1286,
    "question": "Sid is an energetic person and an animal.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Lazy(x) → Unproductive(x))\n∀x (Unproductive(x) → ¬Energetic(x))\n∀x (Sloth(x) → Lazy(x))\n∃x (Animal(x) ∧ Sloth(x))\n¬Energetic(sid) ∨ Sloth(sid)\"\"\""
    ]
  },
  {
    "id": 1287,
    "question": "If Sid is either an animal or unproductive, then Sid is not an energetic person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Lazy(x) → Unproductive(x))\n∀x (Unproductive(x) → ¬Energetic(x))\n∀x (Sloth(x) → Lazy(x))\n∃x (Animal(x) ∧ Sloth(x))\n¬Energetic(sid) ∨ Sloth(sid)\"\"\""
    ]
  },
  {
    "id": 542,
    "question": "Manchester City has a higher ranking than Manchester United.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (European(x) ∧ SoccerClub(x) → Attend(x, ucl) ∨ Attend(x, uel) ∨ Attend(x, uecl))\n∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, ucl) ∧ Attend(y, uel) → HigherRank(x, y))\n∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y))\nEuropean(manchesterunited) ∧ SoccerClub(manchesterunited) ∧ European(manchestercity) ∧ SoccerClub(manchestercity)\nAttend(manchesterunited, uel)\nAttend(manchestercity, ucl)\"\"\""
    ]
  },
  {
    "id": 193,
    "question": "Dennis Green is a football coach.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))\n∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x))\nIsFootballClub(minnesota_Vikings)\nCoach(dennis_Green, minnesota_Vikings)\nTouchDownReceptionTime(cris_Carter, t13)\nNFLTeamYear(minnesota_Vikings, y1997)\nPosition(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings)\"\"\""
    ]
  },
  {
    "id": 194,
    "question": "John Randle didn't play in the National Football League.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))\n∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x))\nIsFootballClub(minnesota_Vikings)\nCoach(dennis_Green, minnesota_Vikings)\nTouchDownReceptionTime(cris_Carter, t13)\nNFLTeamYear(minnesota_Vikings, y1997)\nPosition(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings)\"\"\""
    ]
  },
  {
    "id": 195,
    "question": "Cris Carter played for Minnesota Vikings.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))\n∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x))\nIsFootballClub(minnesota_Vikings)\nCoach(dennis_Green, minnesota_Vikings)\nTouchDownReceptionTime(cris_Carter, t13)\nNFLTeamYear(minnesota_Vikings, y1997)\nPosition(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings)\"\"\""
    ]
  },
  {
    "id": 1338,
    "question": "Grace is a ghost.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) → Cute(x))\n∀x (¬Ghost(x))\n∀x (Cat(x) ∨ Dog(x))\n∀x (Bark(x) → ¬Lovely(x))\n∀x (Dog(x) → Bark(x))\n(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))\"\"\""
    ]
  },
  {
    "id": 1339,
    "question": "If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) → Cute(x))\n∀x (¬Ghost(x))\n∀x (Cat(x) ∨ Dog(x))\n∀x (Bark(x) → ¬Lovely(x))\n∀x (Dog(x) → Bark(x))\n(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))\"\"\""
    ]
  },
  {
    "id": 1340,
    "question": "If Grace is not both a ghost and lovely, then Grace is either a cat or cute.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) → Cute(x))\n∀x (¬Ghost(x))\n∀x (Cat(x) ∨ Dog(x))\n∀x (Bark(x) → ¬Lovely(x))\n∀x (Dog(x) → Bark(x))\n(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))\"\"\""
    ]
  },
  {
    "id": 299,
    "question": "Baku is southeast of Shafaq-Asiman.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))\"\"\""
    ]
  },
  {
    "id": 300,
    "question": "A large complex is southeast of Baku.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))\"\"\""
    ]
  },
  {
    "id": 301,
    "question": "Baku is not northwest of an offshore geological structures.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))\"\"\""
    ]
  },
  {
    "id": 214,
    "question": "Herodicus tutored Hippocrates.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutored(herodicus, hippocrates)\nRecommended(herodicus, massages)\n∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))\"\"\""
    ]
  },
  {
    "id": 215,
    "question": "Herodicus was tutored by Hippocrates.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutored(herodicus, hippocrates)\nRecommended(herodicus, massages)\n∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))\"\"\""
    ]
  },
  {
    "id": 216,
    "question": "Herodicus was born in a city-state.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutored(herodicus, hippocrates)\nRecommended(herodicus, massages)\n∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))\"\"\""
    ]
  },
  {
    "id": 217,
    "question": "Herodicus did not recommend massages.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutored(herodicus, hippocrates)\nRecommended(herodicus, massages)\n∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))\"\"\""
    ]
  },
  {
    "id": 218,
    "question": "Herodicus was born in a colony of a city-state.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nGreek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)\nBorn(herodicus, selymbia) ∧ City(selymbia)\nColony(selymbia, megara) ∧ CityState(megara)\nTutored(herodicus, hippocrates)\nRecommended(herodicus, massages)\n∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))\"\"\""
    ]
  },
  {
    "id": 1263,
    "question": "Billy is a student.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → ¬OperaLover(x))\n∀x (Adult(x) → OperaLover(x))\n∀x (Scientist(x) → Adult(x))\n∃x (Student(x) ∧ Kid(x))\nKid(billy)\"\"\""
    ]
  },
  {
    "id": 1264,
    "question": "Billy is a student and a scientist.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → ¬OperaLover(x))\n∀x (Adult(x) → OperaLover(x))\n∀x (Scientist(x) → Adult(x))\n∃x (Student(x) ∧ Kid(x))\nKid(billy)\"\"\""
    ]
  },
  {
    "id": 1265,
    "question": "If Billy is a student or a scientist, then Billy is a student and a kid.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kid(x) → ¬OperaLover(x))\n∀x (Adult(x) → OperaLover(x))\n∀x (Scientist(x) → Adult(x))\n∃x (Student(x) ∧ Kid(x))\nKid(billy)\"\"\""
    ]
  },
  {
    "id": 205,
    "question": "There is a son of a referee observer that plays football.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianwinter) ∧ FootballReferee(brianwinter)\nInjured(brianwinter) ∧ Retired(brianwinter)\nRefereeObserver(brianwinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSon(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)\"\"\""
    ]
  },
  {
    "id": 206,
    "question": "Brian Winter is not a referee observer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianwinter) ∧ FootballReferee(brianwinter)\nInjured(brianwinter) ∧ Retired(brianwinter)\nRefereeObserver(brianwinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSon(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)\"\"\""
    ]
  },
  {
    "id": 207,
    "question": "Brian Winter is retired.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianwinter) ∧ FootballReferee(brianwinter)\nInjured(brianwinter) ∧ Retired(brianwinter)\nRefereeObserver(brianwinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSon(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)\"\"\""
    ]
  },
  {
    "id": 208,
    "question": "Andy Winter is a referee.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(brianwinter) ∧ FootballReferee(brianwinter)\nInjured(brianwinter) ∧ Retired(brianwinter)\nRefereeObserver(brianwinter)\n∃x (FootballReferee(x) ∧ RefereeObserver(x))\nSon(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)\"\"\""
    ]
  },
  {
    "id": 1105,
    "question": "Erica plans.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1106,
    "question": "Erica is interested in puzzles and is creative.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1107,
    "question": "Erica is either interested in puzzles or is creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1108,
    "question": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1109,
    "question": "If Erica is creative, then Erica is not interested in puzzles and creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1110,
    "question": "If Erica is interested in puzzles and is creative, then Erica is not creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1111,
    "question": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1112,
    "question": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1113,
    "question": "If Erica plans ahead or is interested in puzzles, then Erica is creative.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 1114,
    "question": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Puzzles(x) ∨ BadChess(x))\n∀x (BadChess(x) → ¬PlaysLots(x))\n∀x (Plans(x) ∨ Creative(x))\nPlaysLots(erica)\n¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))\"\"\""
    ]
  },
  {
    "id": 374,
    "question": "Cristiano Ronaldo is a top soccer player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))\n∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))\n∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))\n∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))\nSoccerPlayer(ronaldo)\nEfficient(ronaldo, right)\nScoreManyGoals(ronaldo, left)\"\"\""
    ]
  },
  {
    "id": 375,
    "question": "Cristiano Ronaldo is not a top soccer player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))\n∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))\n∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))\n∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))\nSoccerPlayer(ronaldo)\nEfficient(ronaldo, right)\nScoreManyGoals(ronaldo, left)\"\"\""
    ]
  },
  {
    "id": 512,
    "question": "The National Lobster Hatchery is for conservation.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)\nOpenToVisitors(nationallobsterhatchery)\n∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))\n∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))\n¬ForProfit(nationallobsterhatchery)\"\"\""
    ]
  },
  {
    "id": 513,
    "question": "All hatcheries are open to visitors.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)\nOpenToVisitors(nationallobsterhatchery)\n∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))\n∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))\n¬ForProfit(nationallobsterhatchery)\"\"\""
    ]
  },
  {
    "id": 514,
    "question": "The National Lobster Hatchery releases animals into the wild.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)\nOpenToVisitors(nationallobsterhatchery)\n∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))\n∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))\n¬ForProfit(nationallobsterhatchery)\"\"\""
    ]
  },
  {
    "id": 636,
    "question": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))\n∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))\n∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))\n∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))\n∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))\"\"\""
    ]
  },
  {
    "id": 637,
    "question": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))\n∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))\n∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))\n∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))\n∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))\"\"\""
    ]
  },
  {
    "id": 1362,
    "question": "Burger is popular.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OS(x) → Software(x))\n∀x (Mac(x) → OS(x))\n∀x (Mac(x) ∨ Windows(x))\n∀x (Windows(x) → Convenient(x))\n∀x (Software(x) → Code(x))\n∀x (Convenient(x) → Popular(x))\nCode(burger) ∧ Mac(burger))\n(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))\"\"\""
    ]
  },
  {
    "id": 1363,
    "question": "Burger is not popular.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OS(x) → Software(x))\n∀x (Mac(x) → OS(x))\n∀x (Mac(x) ∨ Windows(x))\n∀x (Windows(x) → Convenient(x))\n∀x (Software(x) → Code(x))\n∀x (Convenient(x) → Popular(x))\nCode(burger) ∧ Mac(burger))\n(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))\"\"\""
    ]
  },
  {
    "id": 1364,
    "question": "PyTorch is popular and has code.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OS(x) → Software(x))\n∀x (Mac(x) → OS(x))\n∀x (Mac(x) ∨ Windows(x))\n∀x (Windows(x) → Convenient(x))\n∀x (Software(x) → Code(x))\n∀x (Convenient(x) → Popular(x))\nCode(burger) ∧ Mac(burger))\n(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))\"\"\""
    ]
  },
  {
    "id": 1365,
    "question": "PyTorch is not popular and has code.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OS(x) → Software(x))\n∀x (Mac(x) → OS(x))\n∀x (Mac(x) ∨ Windows(x))\n∀x (Windows(x) → Convenient(x))\n∀x (Software(x) → Code(x))\n∀x (Convenient(x) → Popular(x))\nCode(burger) ∧ Mac(burger))\n(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))\"\"\""
    ]
  },
  {
    "id": 353,
    "question": "Road one will last longer than Road two",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x))\n∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))\n∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))\n∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x))\nRoad(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two)\"\"\""
    ]
  },
  {
    "id": 354,
    "question": "Road two is not smoother than Road one.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x))\n∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))\n∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))\n∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x))\nRoad(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two)\"\"\""
    ]
  },
  {
    "id": 355,
    "question": "John prefers Road two.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x))\n∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))\n∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))\n∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x))\nRoad(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two)\"\"\""
    ]
  },
  {
    "id": 226,
    "question": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)\nEstablishedIn(campdavern, year1946)\nOperatedByYMCAUntil(campdavern, year2015)\nOneOf(campdavern, ontariosoldestsummercamps)\"\"\""
    ]
  },
  {
    "id": 227,
    "question": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)\nEstablishedIn(campdavern, year1946)\nOperatedByYMCAUntil(campdavern, year2015)\nOneOf(campdavern, ontariosoldestsummercamps)\"\"\""
    ]
  },
  {
    "id": 228,
    "question": "Camp Davern was established in 1989.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)\nEstablishedIn(campdavern, year1946)\nOperatedByYMCAUntil(campdavern, year2015)\nOneOf(campdavern, ontariosoldestsummercamps)\"\"\""
    ]
  },
  {
    "id": 995,
    "question": "Emily often holds tenured and high-ranking positions at her workplace.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PublishJournals(x) → ¬Entertainment(x))\n∀x (Novelist(x) → PublishJournals(x))\n∀x (Entertainment(x) ∨ Acclaimed(x))\n∀x (Acclaimed(x) → Tenured(x))\n∀x (Acclaimed(x) → Glowing(x))\n(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily)\"\"\""
    ]
  },
  {
    "id": 996,
    "question": "Emily often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PublishJournals(x) → ¬Entertainment(x))\n∀x (Novelist(x) → PublishJournals(x))\n∀x (Entertainment(x) ∨ Acclaimed(x))\n∀x (Acclaimed(x) → Tenured(x))\n∀x (Acclaimed(x) → Glowing(x))\n(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily)\"\"\""
    ]
  },
  {
    "id": 997,
    "question": "If Emily either often receives glowing feedback and recommendations from her colleagues or is an award-winning novelist, then Emily does not both publish journals and is an award-winning novelist.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (PublishJournals(x) → ¬Entertainment(x))\n∀x (Novelist(x) → PublishJournals(x))\n∀x (Entertainment(x) ∨ Acclaimed(x))\n∀x (Acclaimed(x) → Tenured(x))\n∀x (Acclaimed(x) → Glowing(x))\n(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily)\"\"\""
    ]
  },
  {
    "id": 25,
    "question": "Megan Whalen Turner worked with Greenwillow Books.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)\nPublishedBy(thickastheives, greenwillowbooks)\n∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))\nFictional(medeempire) ∧ SetIn(thickastheives, medeempire)\n∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))\nCountry(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)\nSoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)\"\"\""
    ]
  },
  {
    "id": 26,
    "question": "The Mede Empire plans to swallow up Attolia.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)\nPublishedBy(thickastheives, greenwillowbooks)\n∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))\nFictional(medeempire) ∧ SetIn(thickastheives, medeempire)\n∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))\nCountry(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)\nSoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)\"\"\""
    ]
  },
  {
    "id": 27,
    "question": "Thick as Thieves is not set in the mede empire.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)\nPublishedBy(thickastheives, greenwillowbooks)\n∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))\nFictional(medeempire) ∧ SetIn(thickastheives, medeempire)\n∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))\nCountry(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)\nSoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)\"\"\""
    ]
  },
  {
    "id": 28,
    "question": "Megan Whalen Turner did not work with Greenwillow Books.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nYoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)\nPublishedBy(thickastheives, greenwillowbooks)\n∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))\nFictional(medeempire) ∧ SetIn(thickastheives, medeempire)\n∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))\nCountry(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)\nSoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)\"\"\""
    ]
  },
  {
    "id": 351,
    "question": "There is a tablet computer that was announced by a German.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WeTab(x) → MeeGoBased(x) ∧ TabletComputer(x))\n∃x (WeTab(x))\n∀x (WeTab(x) → Announce(neofonie, x))\nGerman(neofonie) ∧ Producer(neofonie)\n∀x (German(x) → Speak(x, english) ∨ Speak(x, german))\"\"\""
    ]
  },
  {
    "id": 352,
    "question": "Neofonie doesn't speak English or German.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WeTab(x) → MeeGoBased(x) ∧ TabletComputer(x))\n∃x (WeTab(x))\n∀x (WeTab(x) → Announce(neofonie, x))\nGerman(neofonie) ∧ Producer(neofonie)\n∀x (German(x) → Speak(x, english) ∨ Speak(x, german))\"\"\""
    ]
  },
  {
    "id": 1186,
    "question": "James is good at math.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x))\n∀x (BusinessAnalysis(x) → WorkInCompany(x))\n∀x (WorkInCompany(x) → ¬FromChina(x))\n∀x (SoftwareEngineering(x) → FromChina(x))\nSoftwareEngineering(james)\"\"\""
    ]
  },
  {
    "id": 1187,
    "question": "James is not good at math and he is working in business analysis.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x))\n∀x (BusinessAnalysis(x) → WorkInCompany(x))\n∀x (WorkInCompany(x) → ¬FromChina(x))\n∀x (SoftwareEngineering(x) → FromChina(x))\nSoftwareEngineering(james)\"\"\""
    ]
  },
  {
    "id": 1188,
    "question": "If James is not good at math and he is in business analysis, then he is neither working in this company nor working in software engineering.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x))\n∀x (BusinessAnalysis(x) → WorkInCompany(x))\n∀x (WorkInCompany(x) → ¬FromChina(x))\n∀x (SoftwareEngineering(x) → FromChina(x))\nSoftwareEngineering(james)\"\"\""
    ]
  },
  {
    "id": 452,
    "question": "Blueberries were the most popular fruit at the party.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParty(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) \n∀x (Party(x) → SameWeight(x))\n∀x (LowestAmount(x) → MostPopular(x)) \nLowestAmount(strawberries)\nLower(blueberry, cherry)\nEat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)\"\"\""
    ]
  },
  {
    "id": 453,
    "question": "Cherries were the most popular fruit at the party.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParty(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) \n∀x (Party(x) → SameWeight(x))\n∀x (LowestAmount(x) → MostPopular(x)) \nLowestAmount(strawberries)\nLower(blueberry, cherry)\nEat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)\"\"\""
    ]
  },
  {
    "id": 454,
    "question": "Benjamin ate blueberries at the party.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nParty(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) \n∀x (Party(x) → SameWeight(x))\n∀x (LowestAmount(x) → MostPopular(x)) \nLowestAmount(strawberries)\nLower(blueberry, cherry)\nEat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)\"\"\""
    ]
  },
  {
    "id": 187,
    "question": "James attends the conference but not in person.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Attend(x) → Registered(x))\n∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))\n∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x))\nAttend(james) ∧ ¬Remotely(james)\nChina(jack) ∧ Attend(jack)\"\"\""
    ]
  },
  {
    "id": 188,
    "question": "Jack attends the conference in person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Attend(x) → Registered(x))\n∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))\n∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x))\nAttend(james) ∧ ¬Remotely(james)\nChina(jack) ∧ Attend(jack)\"\"\""
    ]
  },
  {
    "id": 189,
    "question": "Jack has registered for the conference.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Attend(x) → Registered(x))\n∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))\n∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x))\nAttend(james) ∧ ¬Remotely(james)\nChina(jack) ∧ Attend(jack)\"\"\""
    ]
  },
  {
    "id": 633,
    "question": "David Ha'ivri is an Israeli citizen.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoliticalStrategist(davidhaivri)\n∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))\n∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))\n∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil))\nZionstLeader(davidhaivri)\"\"\""
    ]
  },
  {
    "id": 634,
    "question": "David Ha'ivri is a United States citizen.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoliticalStrategist(davidhaivri)\n∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))\n∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))\n∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil))\nZionstLeader(davidhaivri)\"\"\""
    ]
  },
  {
    "id": 635,
    "question": "David Ha'ivri has been elected to the Shomron Regional Municipal council.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPoliticalStrategist(davidhaivri)\n∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))\n∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))\n∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil))\nZionstLeader(davidhaivri)\"\"\""
    ]
  },
  {
    "id": 3,
    "question": "Either Mary or Susan has influenza.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHave(mary, flu)\n∀x (Have(x, flu) ↔ Have(x, influenza))\n¬Have(susan, influenza)\"\"\""
    ]
  },
  {
    "id": 121,
    "question": "No lawyer ever sat in the House of Commons.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(james) ∧ Lawyer(james)\nWhig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)\n∀x (British(x) → European(x))\n∀x (Lawyer(x) → FamiliarWithLaws(x))\n∃x (Whig(x) ∧ SpeakFrench(x))\"\"\""
    ]
  },
  {
    "id": 122,
    "question": "Some European is familiar with laws.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(james) ∧ Lawyer(james)\nWhig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)\n∀x (British(x) → European(x))\n∀x (Lawyer(x) → FamiliarWithLaws(x))\n∃x (Whig(x) ∧ SpeakFrench(x))\"\"\""
    ]
  },
  {
    "id": 123,
    "question": "James Cocks speaks French.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish(james) ∧ Lawyer(james)\nWhig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)\n∀x (British(x) → European(x))\n∀x (Lawyer(x) → FamiliarWithLaws(x))\n∃x (Whig(x) ∧ SpeakFrench(x))\"\"\""
    ]
  },
  {
    "id": 365,
    "question": "Beasts of prey is a fantasy novel.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNovel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)\n∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))\nAbout(beastsofprey, shetani) ∧ Creature(shetani)\nMythological(shetani)\"\"\""
    ]
  },
  {
    "id": 366,
    "question": "Beasts of prey isn't a science fiction novel.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNovel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)\n∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))\nAbout(beastsofprey, shetani) ∧ Creature(shetani)\nMythological(shetani)\"\"\""
    ]
  },
  {
    "id": 367,
    "question": "A shetani is either mythological or a creature.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNovel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)\n∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))\nAbout(beastsofprey, shetani) ∧ Creature(shetani)\nMythological(shetani)\"\"\""
    ]
  },
  {
    "id": 47,
    "question": "Jack Odell is a notable people.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Odell(x) → Surname(x))\n∃x (Odell(x) ∧ SpelledODell(x))\nOdell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)\nBritish(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)\nEnglish(jackOdell) ∧ ToyInvertor(jackOdell)\"\"\""
    ]
  },
  {
    "id": 48,
    "question": "Odell is Amy Odell's surname.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Odell(x) → Surname(x))\n∃x (Odell(x) ∧ SpelledODell(x))\nOdell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)\nBritish(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)\nEnglish(jackOdell) ∧ ToyInvertor(jackOdell)\"\"\""
    ]
  },
  {
    "id": 49,
    "question": "Amy Odell is an English toy inventor.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Odell(x) → Surname(x))\n∃x (Odell(x) ∧ SpelledODell(x))\nOdell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)\nBritish(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)\nEnglish(jackOdell) ∧ ToyInvertor(jackOdell)\"\"\""
    ]
  },
  {
    "id": 50,
    "question": "Amy Odell is also Amy O'dell.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Odell(x) → Surname(x))\n∃x (Odell(x) ∧ SpelledODell(x))\nOdell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)\nBritish(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)\nEnglish(jackOdell) ∧ ToyInvertor(jackOdell)\"\"\""
    ]
  },
  {
    "id": 482,
    "question": "Mary gets from New Haven to New York City by train.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Train(x) → ¬LoseTime(x))\n∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))\n∀x (LoseTime(x) ↔ LateForWork(x))\nTrain(mary) ⊕ Car(mary)\nLateForWork(mary)\"\"\""
    ]
  },
  {
    "id": 483,
    "question": "Mary gets from New Haven to New York City by car.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Train(x) → ¬LoseTime(x))\n∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))\n∀x (LoseTime(x) ↔ LateForWork(x))\nTrain(mary) ⊕ Car(mary)\nLateForWork(mary)\"\"\""
    ]
  },
  {
    "id": 484,
    "question": "Mary meets traffic jam.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Train(x) → ¬LoseTime(x))\n∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))\n∀x (LoseTime(x) ↔ LateForWork(x))\nTrain(mary) ⊕ Car(mary)\nLateForWork(mary)\"\"\""
    ]
  },
  {
    "id": 746,
    "question": "If a person is not hungry, the person is unhappy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hungry(x) → Uncomfortable(x))\n∀x (Uncomfortable(x) → ¬Happy(x))\"\"\""
    ]
  },
  {
    "id": 769,
    "question": "Mary is a white-collar worker.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tipped(x) → ¬GetMinWage(x))\n∀x (WhiteCollar(x) → GetMinWage(x))\n∀x (Lawyer(x) → WhiteCollar(x))\n∀x (Advocate(x) → Lawyer(x))\n¬Lawyer(mary) ⊕ Tipped(mary)\"\"\""
    ]
  },
  {
    "id": 770,
    "question": "Mary is an advocate.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tipped(x) → ¬GetMinWage(x))\n∀x (WhiteCollar(x) → GetMinWage(x))\n∀x (Lawyer(x) → WhiteCollar(x))\n∀x (Advocate(x) → Lawyer(x))\n¬Lawyer(mary) ⊕ Tipped(mary)\"\"\""
    ]
  },
  {
    "id": 771,
    "question": "Mary is not an advocate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tipped(x) → ¬GetMinWage(x))\n∀x (WhiteCollar(x) → GetMinWage(x))\n∀x (Lawyer(x) → WhiteCollar(x))\n∀x (Advocate(x) → Lawyer(x))\n¬Lawyer(mary) ⊕ Tipped(mary)\"\"\""
    ]
  },
  {
    "id": 772,
    "question": "Mary is either an advocate or a tipped employee.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tipped(x) → ¬GetMinWage(x))\n∀x (WhiteCollar(x) → GetMinWage(x))\n∀x (Lawyer(x) → WhiteCollar(x))\n∀x (Advocate(x) → Lawyer(x))\n¬Lawyer(mary) ⊕ Tipped(mary)\"\"\""
    ]
  },
  {
    "id": 773,
    "question": "If Mary is not an advocate and gets a guaranteed minimum wage, she is not a tipped employee.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tipped(x) → ¬GetMinWage(x))\n∀x (WhiteCollar(x) → GetMinWage(x))\n∀x (Lawyer(x) → WhiteCollar(x))\n∀x (Advocate(x) → Lawyer(x))\n¬Lawyer(mary) ⊕ Tipped(mary)\"\"\""
    ]
  },
  {
    "id": 774,
    "question": "If Mary is either an advocate or a tipped employee, she is an advocate.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tipped(x) → ¬GetMinWage(x))\n∀x (WhiteCollar(x) → GetMinWage(x))\n∀x (Lawyer(x) → WhiteCollar(x))\n∀x (Advocate(x) → Lawyer(x))\n¬Lawyer(mary) ⊕ Tipped(mary)\"\"\""
    ]
  },
  {
    "id": 232,
    "question": "Asa Hoffmann is a New Yorkers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(asaHoffmann, newyorkcity)\nLivesIn(asaHoffmann, manhattan)\nIsChessPlayer(asaHoffmann)\n∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))\n∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))\n∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))\"\"\""
    ]
  },
  {
    "id": 233,
    "question": "Asa Hoffmann is a grandmaster.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(asaHoffmann, newyorkcity)\nLivesIn(asaHoffmann, manhattan)\nIsChessPlayer(asaHoffmann)\n∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))\n∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))\n∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))\"\"\""
    ]
  },
  {
    "id": 234,
    "question": "Asa Hoffmann does not live in New York.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(asaHoffmann, newyorkcity)\nLivesIn(asaHoffmann, manhattan)\nIsChessPlayer(asaHoffmann)\n∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))\n∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))\n∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))\"\"\""
    ]
  },
  {
    "id": 784,
    "question": "Philip got a Schengen Visa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ApplyVisa(x) → GetVisa(x))\n∀x (ApplyVisa(x) → FinancialGuarantees(x))\n∀x (FinancialGuarantees(x) → RequestDocuments(x))\n∀x (RequestDocuments(x) → ¬CloseBankAccount(x))\nCloseBankAccount(philip)\"\"\""
    ]
  },
  {
    "id": 785,
    "question": "Philip applied for a Schengen Visa and got it.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ApplyVisa(x) → GetVisa(x))\n∀x (ApplyVisa(x) → FinancialGuarantees(x))\n∀x (FinancialGuarantees(x) → RequestDocuments(x))\n∀x (RequestDocuments(x) → ¬CloseBankAccount(x))\nCloseBankAccount(philip)\"\"\""
    ]
  },
  {
    "id": 786,
    "question": "If Philip did not request documents from the bank or get a Schengen Visa, he didn’t apply for a Schengen Visa.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ApplyVisa(x) → GetVisa(x))\n∀x (ApplyVisa(x) → FinancialGuarantees(x))\n∀x (FinancialGuarantees(x) → RequestDocuments(x))\n∀x (RequestDocuments(x) → ¬CloseBankAccount(x))\nCloseBankAccount(philip)\"\"\""
    ]
  },
  {
    "id": 745,
    "question": "No fears lead to terror.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Fear(x) ∧ Anxiety(x))\n∃x (Anxiety(x) ∧ Terror(x))\"\"\""
    ]
  },
  {
    "id": 598,
    "question": "Lake Erie has a major settlement.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))\n∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))\nState(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)\nState(on, canada)\n∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))\n∀x ∀y (State(x, y) → In(x, y))\nIn(us, northamerica)\n∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))\"\"\""
    ]
  },
  {
    "id": 599,
    "question": "There is a great lake that did not form at the end of the Last Glacial Period.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))\n∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))\nState(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)\nState(on, canada)\n∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))\n∀x ∀y (State(x, y) → In(x, y))\nIn(us, northamerica)\n∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))\"\"\""
    ]
  },
  {
    "id": 836,
    "question": "Stephen Curry is a professional basketball player.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))\n∀x (CenterBack(x) → Defender(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))\"\"\""
    ]
  },
  {
    "id": 837,
    "question": "Stephen Curry is a centerback.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))\n∀x (CenterBack(x) → Defender(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))\"\"\""
    ]
  },
  {
    "id": 838,
    "question": "Stephen Curry is not a centerback.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Defender(x) → SoccerPlayer(x))\n∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))\n∀x (CenterBack(x) → Defender(x))\n∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))\n¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))\"\"\""
    ]
  },
  {
    "id": 90,
    "question": "Thomas Gilovich proposed naive cynicism.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) \nColleague(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)\"\"\""
    ]
  },
  {
    "id": 91,
    "question": "Justin Kruger propose a philosophy of mind.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) \nColleague(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)\"\"\""
    ]
  },
  {
    "id": 92,
    "question": "Thomas Gilovich worked on philiophies of mind.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) \nColleague(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)\"\"\""
    ]
  },
  {
    "id": 383,
    "question": "At least two people who have won the Turing Award worked in the field of artificial intelligence.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nTuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)\nContributedTo(donaldKnuth, algorithms)\nContributedTo(marvinMinsky, ai)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, ai)\"\"\""
    ]
  },
  {
    "id": 384,
    "question": "At least two people who worked in the field of artificial intelligence have won the Turing Award.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nTuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)\nContributedTo(donaldKnuth, algorithms)\nContributedTo(marvinMinsky, ai)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, ai)\"\"\""
    ]
  },
  {
    "id": 385,
    "question": "Only one people who have won the Turing Award made significant contributions to the analysis of algorithms.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nTuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)\nContributedTo(donaldKnuth, algorithms)\nContributedTo(marvinMinsky, ai)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, ai)\"\"\""
    ]
  },
  {
    "id": 386,
    "question": "No Turing Award winners worked in the field of numerical methods.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n\nTuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)\nContributedTo(donaldKnuth, algorithms)\nContributedTo(marvinMinsky, ai)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, ai)\"\"\""
    ]
  },
  {
    "id": 1224,
    "question": "2Sum is an easy Leetcode problem.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ¬LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (LowerAC(x) ⊕ Starred(x))\n∀x (Hard(x) → Starred(x))\n∀x (PublishedAfter2022(x) → ¬Starred(x))\n¬(Recommended(twosum) ∧ Hard(twosum))\n¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))\"\"\""
    ]
  },
  {
    "id": 1225,
    "question": "2Sum is not an easy Leetcode problem.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ¬LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (LowerAC(x) ⊕ Starred(x))\n∀x (Hard(x) → Starred(x))\n∀x (PublishedAfter2022(x) → ¬Starred(x))\n¬(Recommended(twosum) ∧ Hard(twosum))\n¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))\"\"\""
    ]
  },
  {
    "id": 1226,
    "question": "4Sum is a Leetcode problem recommended to the novice or is hard.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ¬LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (LowerAC(x) ⊕ Starred(x))\n∀x (Hard(x) → Starred(x))\n∀x (PublishedAfter2022(x) → ¬Starred(x))\n¬(Recommended(twosum) ∧ Hard(twosum))\n¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))\"\"\""
    ]
  },
  {
    "id": 1227,
    "question": "4Sum is neither a 2Sum Leetcode problem recommended to the novice nor a Leetcode problem that's hard.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Easy(x) → ¬LowerAC(x))\n∀x (Recommended(x) → Easy(x))\n∀x (LowerAC(x) ⊕ Starred(x))\n∀x (Hard(x) → Starred(x))\n∀x (PublishedAfter2022(x) → ¬Starred(x))\n¬(Recommended(twosum) ∧ Hard(twosum))\n¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))\"\"\""
    ]
  },
  {
    "id": 319,
    "question": "Show your love wasn't written by a member of a boy band.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSong(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)\nExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)\nContains(showyourlove, hopefulmessage)\nMember(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)\nHasMusicVideo(showyourlove)\"\"\""
    ]
  },
  {
    "id": 320,
    "question": "A lead single of inside contains a a hopeful message.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSong(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)\nExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)\nContains(showyourlove, hopefulmessage)\nMember(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)\nHasMusicVideo(showyourlove)\"\"\""
    ]
  },
  {
    "id": 321,
    "question": "Hyunsik is Korean.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSong(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)\nExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)\nContains(showyourlove, hopefulmessage)\nMember(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)\nHasMusicVideo(showyourlove)\"\"\""
    ]
  },
  {
    "id": 739,
    "question": "Some furniture are round.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Table(x) → Round(x))\n∃x (Furniture(x) ∧ Table(x))\"\"\""
    ]
  },
  {
    "id": 716,
    "question": "Some maladjusted individuals are products of broken homes.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (JuvenileDelinquent(x) → MaladjustedIndividual(x))\n∃x (JuvenileDelinquent(x)  ∧ ProductOfBrokenHome(x))\"\"\""
    ]
  },
  {
    "id": 1089,
    "question": "Multivoxel (pattern) analysis is a brain decoding.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainReading(x) ∨ BrainDecoding(x)) \n∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))\n∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))\n∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) \nWithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\"\"\""
    ]
  },
  {
    "id": 1090,
    "question": "Multivoxel (pattern) analysis is the writing of a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainReading(x) ∨ BrainDecoding(x)) \n∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))\n∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))\n∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) \nWithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\"\"\""
    ]
  },
  {
    "id": 1091,
    "question": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainReading(x) ∨ BrainDecoding(x)) \n∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))\n∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))\n∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) \nWithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\"\"\""
    ]
  },
  {
    "id": 1092,
    "question": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainReading(x) ∨ BrainDecoding(x)) \n∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))\n∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))\n∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) \nWithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\"\"\""
    ]
  },
  {
    "id": 1093,
    "question": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainReading(x) ∨ BrainDecoding(x)) \n∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))\n∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))\n∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) \nWithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\"\"\""
    ]
  },
  {
    "id": 1094,
    "question": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (BrainReading(x) ∨ BrainDecoding(x)) \n∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))\n∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))\n∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) \nWithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)\"\"\""
    ]
  },
  {
    "id": 609,
    "question": "Allison has room for broccoli.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))\n∀x (AtLuisParty(x) → RoomFor(x, dessert))\n¬RoomFor(mauricia, broccoli)\nFirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison)\nRoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)\nVegetable(broccoli) ∧ Vegetable(asparagus)\"\"\""
    ]
  },
  {
    "id": 610,
    "question": "Mauricia is at Luis's dinner party.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))\n∀x (AtLuisParty(x) → RoomFor(x, dessert))\n¬RoomFor(mauricia, broccoli)\nFirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison)\nRoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)\nVegetable(broccoli) ∧ Vegetable(asparagus)\"\"\""
    ]
  },
  {
    "id": 611,
    "question": "Gustav has room for dessert.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))\n∀x (AtLuisParty(x) → RoomFor(x, dessert))\n¬RoomFor(mauricia, broccoli)\nFirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison)\nRoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)\nVegetable(broccoli) ∧ Vegetable(asparagus)\"\"\""
    ]
  },
  {
    "id": 124,
    "question": "Some rock band has a songwriter.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(imagineDragon) ∧ RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n∀x ∀y (LeadSinger(x, y) → Singer(y))\n∀x (Singer(x) → Musician(x))\nPopularSingle(imagineDragon, demons)\n∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))\"\"\""
    ]
  },
  {
    "id": 125,
    "question": "Dan is not a musician.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(imagineDragon) ∧ RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n∀x ∀y (LeadSinger(x, y) → Singer(y))\n∀x (Singer(x) → Musician(x))\nPopularSingle(imagineDragon, demons)\n∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))\"\"\""
    ]
  },
  {
    "id": 126,
    "question": "Demons has been on Billboard Hot 100.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(imagineDragon) ∧ RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n∀x ∀y (LeadSinger(x, y) → Singer(y))\n∀x (Singer(x) → Musician(x))\nPopularSingle(imagineDragon, demons)\n∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))\"\"\""
    ]
  },
  {
    "id": 1315,
    "question": "Deodorant is a sandwich.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bread(x) → Food(x))\n∃x (Sandwich(x) ∧ Bread(x))\n∀x (Food(x) → Edible(x))\n∀x (Edible(x) → ¬Poisonous(x))\nPoisonous(deodorant)\"\"\""
    ]
  },
  {
    "id": 1316,
    "question": "Deodorant is a sandwich and bread.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bread(x) → Food(x))\n∃x (Sandwich(x) ∧ Bread(x))\n∀x (Food(x) → Edible(x))\n∀x (Edible(x) → ¬Poisonous(x))\nPoisonous(deodorant)\"\"\""
    ]
  },
  {
    "id": 1317,
    "question": "If deodorant is a loaf of bread, then deodorant is not a sandwich.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bread(x) → Food(x))\n∃x (Sandwich(x) ∧ Bread(x))\n∀x (Food(x) → Edible(x))\n∀x (Edible(x) → ¬Poisonous(x))\nPoisonous(deodorant)\"\"\""
    ]
  },
  {
    "id": 461,
    "question": "Noah needs to pay the water bill.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)\n∃x (Cover(x, water) ∧ Cover(x, electricity))\n∀x (Cover(susan, x))\n∀x (¬Cover(ava, x))\n¬Cover(noah, heating)\"\"\""
    ]
  },
  {
    "id": 462,
    "question": "Noah and Ava both need to pay the heating bill.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)\n∃x (Cover(x, water) ∧ Cover(x, electricity))\n∀x (Cover(susan, x))\n∀x (¬Cover(ava, x))\n¬Cover(noah, heating)\"\"\""
    ]
  },
  {
    "id": 463,
    "question": "Susan does not need to pay the water bill.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)\n∃x (Cover(x, water) ∧ Cover(x, electricity))\n∀x (Cover(susan, x))\n∀x (¬Cover(ava, x))\n¬Cover(noah, heating)\"\"\""
    ]
  },
  {
    "id": 804,
    "question": "Nike is perfect.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Clothes(x) → Product(x))\n∀x (Product(x) → ¬Perfect(x))\n∀x (Dress(x) → Clothes(x))\n∀x (Skirt(x) → Dress(x))\nClothes(nike) → Perfect(nike) ∧ Dress(nike)\"\"\""
    ]
  },
  {
    "id": 805,
    "question": "Nike is a skirt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Clothes(x) → Product(x))\n∀x (Product(x) → ¬Perfect(x))\n∀x (Dress(x) → Clothes(x))\n∀x (Skirt(x) → Dress(x))\nClothes(nike) → Perfect(nike) ∧ Dress(nike)\"\"\""
    ]
  },
  {
    "id": 806,
    "question": "Nike is not a skirt.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Clothes(x) → Product(x))\n∀x (Product(x) → ¬Perfect(x))\n∀x (Dress(x) → Clothes(x))\n∀x (Skirt(x) → Dress(x))\nClothes(nike) → Perfect(nike) ∧ Dress(nike)\"\"\""
    ]
  },
  {
    "id": 169,
    "question": "Leo is an animal.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) → Animal(x))\n∀x (Pet(x) → Dog(x) ⊕ Cat(x))\n∀x ∀y (HasPet(x) → Cares(x, y))\n∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))\n∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))\nHasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)\"\"\""
    ]
  },
  {
    "id": 170,
    "question": "Charlie does not like Leo and does not care for Leo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) → Animal(x))\n∀x (Pet(x) → Dog(x) ⊕ Cat(x))\n∀x ∀y (HasPet(x) → Cares(x, y))\n∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))\n∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))\nHasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)\"\"\""
    ]
  },
  {
    "id": 171,
    "question": "Dogs are always not naughty.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Pet(x) → Animal(x))\n∀x (Pet(x) → Dog(x) ⊕ Cat(x))\n∀x ∀y (HasPet(x) → Cares(x, y))\n∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))\n∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))\nHasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)\"\"\""
    ]
  },
  {
    "id": 728,
    "question": "All scares are fun.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x)))\n∀x (Scare(x) → Surprise(x))\"\"\""
    ]
  },
  {
    "id": 66,
    "question": "The Three Body Problem won the Hugo Award.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))\n∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))\n∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))\nBook(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)\nAboutFuture(threebodyproblem)\"\"\""
    ]
  },
  {
    "id": 67,
    "question": "The Three Body Problem was influenced by Isaac Asimov.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))\n∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))\n∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))\nBook(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)\nAboutFuture(threebodyproblem)\"\"\""
    ]
  },
  {
    "id": 68,
    "question": "The Three Body Problem was written by Cixin Liu.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))\n∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))\n∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))\nBook(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)\nAboutFuture(threebodyproblem)\"\"\""
    ]
  },
  {
    "id": 1189,
    "question": "James majors in computer science.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ComputerScience(x) ∧ GetUpEarly(x))\n∀x (GetUpEarly(x) → StudyMorning(x))\n∀x (StudyMorning(x) → GoodAtTimeManagement(x))\n∀x (GoodAtTimeManagement(x) → Popular(x))\n¬Popular(james)\"\"\""
    ]
  },
  {
    "id": 1190,
    "question": "James majors in computer science and gets up early.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ComputerScience(x) ∧ GetUpEarly(x))\n∀x (GetUpEarly(x) → StudyMorning(x))\n∀x (StudyMorning(x) → GoodAtTimeManagement(x))\n∀x (GoodAtTimeManagement(x) → Popular(x))\n¬Popular(james)\"\"\""
    ]
  },
  {
    "id": 1191,
    "question": "If James gets up early, then he majors in computer science.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ComputerScience(x) ∧ GetUpEarly(x))\n∀x (GetUpEarly(x) → StudyMorning(x))\n∀x (StudyMorning(x) → GoodAtTimeManagement(x))\n∀x (GoodAtTimeManagement(x) → Popular(x))\n¬Popular(james)\"\"\""
    ]
  },
  {
    "id": 721,
    "question": "Something went wrong.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (Dog(x) ∧ OnRoof(x)))\n∀x ∃y ((Dog(x) ∧ OnRoof(x)) → WentWrong(y))\"\"\""
    ]
  },
  {
    "id": 41,
    "question": "Elephantopus is widespread over much of Australia and Southern Asia.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))\n∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))\n∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))\n∀x (ElephantopusScaber(x) → TraditionalMedicine(x))\"\"\""
    ]
  },
  {
    "id": 42,
    "question": "No Elephantopus is native to the southeastern United States.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))\n∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))\n∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))\n∀x (ElephantopusScaber(x) → TraditionalMedicine(x))\"\"\""
    ]
  },
  {
    "id": 43,
    "question": "Elephantopus is a traditional medicine.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))\n∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))\n∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))\n∀x (ElephantopusScaber(x) → TraditionalMedicine(x))\"\"\""
    ]
  },
  {
    "id": 1236,
    "question": "Harkness is a Yale dormitory.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → InYorkStreet(x))\n∀x (ManagedByYaleHousing(x) → YaleDormitory(x))\n∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))\n∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))\n∀x (InYorkStreet(x) → OpenToStudents(x))\nOperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)\"\"\""
    ]
  },
  {
    "id": 1237,
    "question": "Harkness is not a Yale dormitory.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → InYorkStreet(x))\n∀x (ManagedByYaleHousing(x) → YaleDormitory(x))\n∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))\n∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))\n∀x (InYorkStreet(x) → OpenToStudents(x))\nOperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)\"\"\""
    ]
  },
  {
    "id": 1238,
    "question": "Harkness is established after 1800.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → InYorkStreet(x))\n∀x (ManagedByYaleHousing(x) → YaleDormitory(x))\n∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))\n∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))\n∀x (InYorkStreet(x) → OpenToStudents(x))\nOperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)\"\"\""
    ]
  },
  {
    "id": 1239,
    "question": "Harkness is established before 1800.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YaleDormitory(x) → InYorkStreet(x))\n∀x (ManagedByYaleHousing(x) → YaleDormitory(x))\n∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))\n∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))\n∀x (InYorkStreet(x) → OpenToStudents(x))\nOperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)\"\"\""
    ]
  },
  {
    "id": 794,
    "question": "The Scream is a skyscraper.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 795,
    "question": "The Scream is not a skyscraper.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 796,
    "question": "The Scream is a terrifying Halloween scare.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 797,
    "question": "The Scream is either a skyscraper or a mansion house.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 798,
    "question": "The Scream is either a skyscraper or an urban area.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 799,
    "question": "The Scream is either a skyscraper or a creepy haunted house.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 800,
    "question": "If The Scream is not a mansion in an urban area, then it is either a skyscraper or an urban area.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 801,
    "question": "If The Scream is either a skyscraper or a mansion house, then it is in an urban area.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 802,
    "question": "If The Scream is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying Halloween scare.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 803,
    "question": "If The Scream is either a skyscraper or a creepy haunted house, then it is not a mansion house.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UrbanArea(x) → ¬MansionHouse(x))\n∀x (Skyscraper(x) → UrbanArea(x))\n∀x (CreepyHauntedHouse(x) → MansionHouse(x))\n∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))\nCreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)\"\"\""
    ]
  },
  {
    "id": 331,
    "question": "There is a nature reserve in Vietnam.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)\n∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))\n∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))\n∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))\n¬Mangedby(phuocBinh, ministryofAgriculture)\"\"\""
    ]
  },
  {
    "id": 332,
    "question": "Phuoc Binh is a UNESCO Heritage Site.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)\n∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))\n∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))\n∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))\n¬Mangedby(phuocBinh, ministryofAgriculture)\"\"\""
    ]
  },
  {
    "id": 333,
    "question": "Phuoc Binh is managed by the People's Committee.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)\n∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))\n∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))\n∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))\n¬Mangedby(phuocBinh, ministryofAgriculture)\"\"\""
    ]
  },
  {
    "id": 404,
    "question": "No coursing is banned.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∃y (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y))\n∀x (GreyhoundRacing(x) ↔ Coursing(x))\n∃x ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x))\n∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y))\n∀x (Hare(x) → SmallGame(x))\n∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ SpectatorsBetOn(x, y) → Banned(x))\"\"\""
    ]
  },
  {
    "id": 405,
    "question": "Greyhound racing is a competitive sport.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∃y (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y))\n∀x (GreyhoundRacing(x) ↔ Coursing(x))\n∃x ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x))\n∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y))\n∀x (Hare(x) → SmallGame(x))\n∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ SpectatorsBetOn(x, y) → Banned(x))\"\"\""
    ]
  },
  {
    "id": 547,
    "question": "Henry will be ejected from the rest of the game.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) ∧ TwoYellow(x) → Eject(x))\n∀x (SoccerPlayer(x) ∧ OneRed(x) → Eject(x))   \nSoccerPlayer(henry)\n¬TwoYellow(henry) ∧ OneRed(henry)\"\"\""
    ]
  },
  {
    "id": 548,
    "question": "Henry will not be ejected from the rest of the game.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SoccerPlayer(x) ∧ TwoYellow(x) → Eject(x))\n∀x (SoccerPlayer(x) ∧ OneRed(x) → Eject(x))   \nSoccerPlayer(henry)\n¬TwoYellow(henry) ∧ OneRed(henry)\"\"\""
    ]
  },
  {
    "id": 736,
    "question": "Some living things are plants.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Tree(x) → Plant(x))\n∃x (Living(x) ∧ Tree(x))\"\"\""
    ]
  },
  {
    "id": 44,
    "question": "Dagfinn Aarskog is a notable person.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dagfinn(x) → GivenName(x))\nDagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)\nNorwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)\"\"\""
    ]
  },
  {
    "id": 45,
    "question": "Dagfinn is Dagfinn Aarskog's given name.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dagfinn(x) → GivenName(x))\nDagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)\nNorwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)\"\"\""
    ]
  },
  {
    "id": 46,
    "question": "Dagfinn Dahl is a Norwegian physician.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Dagfinn(x) → GivenName(x))\nDagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)\nNorwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)\"\"\""
    ]
  },
  {
    "id": 749,
    "question": "If entertainment is interesting, it will be well-known.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))\n∀x (Popular(x) → WellKnown(x))\"\"\""
    ]
  },
  {
    "id": 687,
    "question": "GPT-3 is popular.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n¬(∃x (LanguageModel(x) ∧ Giant(x) ∧ ¬GoodPerformance(x)))\n∀x ((LanguageModel(x) ∧ GoodPerformance(x)) → UsedBySomeResearchers(x))\n∀x (UsedBySomeResearchers(x) → Popular(x))\n(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt-3) ∧ Giant(gpt-3)).\nLanguageModel(bert) ∧ Giant(bert) \"\"\""
    ]
  },
  {
    "id": 334,
    "question": "At least one Scottish team has joined the Scottish Premiership.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(johnstone)\nPartOf(johnstone, scottishpremiership)\n∀x ∀y (PartOf(x, y) → Joined(x, y))\nDifferent(misnk, johnstone) ∧ Different(johnstone, minsk)\n∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))\nWonGame(minsk, johnstone)\"\"\""
    ]
  },
  {
    "id": 335,
    "question": "St Johnstone won against Minsk.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(johnstone)\nPartOf(johnstone, scottishpremiership)\n∀x ∀y (PartOf(x, y) → Joined(x, y))\nDifferent(misnk, johnstone) ∧ Different(johnstone, minsk)\n∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))\nWonGame(minsk, johnstone)\"\"\""
    ]
  },
  {
    "id": 336,
    "question": "Minsk joined the Scottish Premiership.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nScottish(johnstone)\nPartOf(johnstone, scottishpremiership)\n∀x ∀y (PartOf(x, y) → Joined(x, y))\nDifferent(misnk, johnstone) ∧ Different(johnstone, minsk)\n∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))\nWonGame(minsk, johnstone)\"\"\""
    ]
  },
  {
    "id": 1232,
    "question": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Boeing737(x) → ¬Seats300(x))\n∀x (Delta(x) → Boeing737(x))\n∀x (Seats300(x) ∨ Passengers100(x))\n∀x (Passengers100(x) → ShortDistance(x))\n∀x (Passengers100(x) → ProducedBefore2010(x))\nBoeing737(jake32) ⊕ Delta(jake32) \nBoeing737(t10) ⊕ Delta(t10)\"\"\""
    ]
  },
  {
    "id": 1233,
    "question": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Boeing737(x) → ¬Seats300(x))\n∀x (Delta(x) → Boeing737(x))\n∀x (Seats300(x) ∨ Passengers100(x))\n∀x (Passengers100(x) → ShortDistance(x))\n∀x (Passengers100(x) → ProducedBefore2010(x))\nBoeing737(jake32) ⊕ Delta(jake32) \nBoeing737(t10) ⊕ Delta(t10)\"\"\""
    ]
  },
  {
    "id": 1234,
    "question": "Jake32 is produced before 2010 or scheduled for a short-distance flight.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Boeing737(x) → ¬Seats300(x))\n∀x (Delta(x) → Boeing737(x))\n∀x (Seats300(x) ∨ Passengers100(x))\n∀x (Passengers100(x) → ShortDistance(x))\n∀x (Passengers100(x) → ProducedBefore2010(x))\nBoeing737(jake32) ⊕ Delta(jake32) \nBoeing737(t10) ⊕ Delta(t10)\"\"\""
    ]
  },
  {
    "id": 1235,
    "question": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Boeing737(x) → ¬Seats300(x))\n∀x (Delta(x) → Boeing737(x))\n∀x (Seats300(x) ∨ Passengers100(x))\n∀x (Passengers100(x) → ShortDistance(x))\n∀x (Passengers100(x) → ProducedBefore2010(x))\nBoeing737(jake32) ⊕ Delta(jake32) \nBoeing737(t10) ⊕ Delta(t10)\"\"\""
    ]
  },
  {
    "id": 558,
    "question": "Since 2016 the SAT has been better aligned with high school curricula.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOwn(sat, collegeBoard) ∧ ¬Own(sat, others)\nTest(sat, readiness)\n∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) \n∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) \"\"\""
    ]
  },
  {
    "id": 559,
    "question": "The SAT test is owned by the College Board and multiple other third parties.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOwn(sat, collegeBoard) ∧ ¬Own(sat, others)\nTest(sat, readiness)\n∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) \n∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) \"\"\""
    ]
  },
  {
    "id": 560,
    "question": "The SAT test assesses student's math skills.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nOwn(sat, collegeBoard) ∧ ¬Own(sat, others)\nTest(sat, readiness)\n∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) \n∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) \"\"\""
    ]
  },
  {
    "id": 99,
    "question": "Nadal was not born in Mallorca.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))\"\"\""
    ]
  },
  {
    "id": 100,
    "question": "Nadal is in the Big 3.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))\"\"\""
    ]
  },
  {
    "id": 101,
    "question": "Nadal is the greatest player of all time.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))\"\"\""
    ]
  },
  {
    "id": 735,
    "question": "All cookies are delicious.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cookie(x) → ¬Healthy(x))\n∀x (Oreo(x) → Cookie(x))\"\"\""
    ]
  },
  {
    "id": 787,
    "question": "Jack is a pupil.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\nHuman(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)\"\"\""
    ]
  },
  {
    "id": 788,
    "question": "Jack is not a pupil.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\nHuman(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)\"\"\""
    ]
  },
  {
    "id": 789,
    "question": "Jack is a plant.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\nHuman(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)\"\"\""
    ]
  },
  {
    "id": 790,
    "question": "If Jack is a human, then Jack is not a pupil.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Animal(x) → ¬Plant(x))\n∀x (Human(x) → Animal(x))\n∀x (Pupil(x) → Human(x))\n∀x (Flower(x) → Plant(x))\nHuman(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)\"\"\""
    ]
  },
  {
    "id": 1326,
    "question": "Watch is a wearable.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Shoes(x) → ¬Food(x))\n∀x (Slipper(x) → Shoes(x))\n∀x (Food(x) ⊕ Clothes(x))\n∀x (Wearable(x) → ¬AirTight(x))\n∀x (Clothes(x) → Wearable(x))\n¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))\"\"\""
    ]
  },
  {
    "id": 1327,
    "question": "Watch is a slipper.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Shoes(x) → ¬Food(x))\n∀x (Slipper(x) → Shoes(x))\n∀x (Food(x) ⊕ Clothes(x))\n∀x (Wearable(x) → ¬AirTight(x))\n∀x (Clothes(x) → Wearable(x))\n¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))\"\"\""
    ]
  },
  {
    "id": 1328,
    "question": "Watch is neither airtight nor a slipper.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Shoes(x) → ¬Food(x))\n∀x (Slipper(x) → Shoes(x))\n∀x (Food(x) ⊕ Clothes(x))\n∀x (Wearable(x) → ¬AirTight(x))\n∀x (Clothes(x) → Wearable(x))\n¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))\"\"\""
    ]
  },
  {
    "id": 102,
    "question": "Carlos Reyes is an Olympian.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nIsWelterWeight(carlosReyes)\n∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))\"\"\""
    ]
  },
  {
    "id": 103,
    "question": "Carlos Reyes is a heavy weight.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nIsWelterWeight(carlosReyes)\n∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))\"\"\""
    ]
  },
  {
    "id": 104,
    "question": "Carlos Reyes won an Olympic medal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nIsWelterWeight(carlosReyes)\n∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))\"\"\""
    ]
  },
  {
    "id": 868,
    "question": "Sam is a young teenage girl who attends college.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 869,
    "question": "Sam is not a young teenage girl who attends college.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 870,
    "question": "Sam is a big fan of pop bands and singers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 871,
    "question": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 872,
    "question": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 873,
    "question": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 874,
    "question": "If Sam is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 875,
    "question": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 876,
    "question": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Decor(x) → ¬MoveOut(x))\n∀x (Ambitious(x) → MoveOut(x))\n∀x (Fans(x) → Decor(x))\n∀x (CollegeTeen(x) → Ambitious(x))\nAmbitious(sam) → Fans(sam)\"\"\""
    ]
  },
  {
    "id": 527,
    "question": "Willy is in a suit.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ Shriek(x) → Punished(x))\n∀x (Swear(x) → Student(x))\n∀x (Teacher(x) → Talk(bob, x))\n∀x (Gentleman(x) → Suit(x))\n∀x (Teacher(x) → Man(x))\n∃x (Teacher(x))\n∀x (¬Gentleman(x) → ¬Nice(x))\nNice(willy)\nShriek(bob) ∧ Swear(bob)\"\"\""
    ]
  },
  {
    "id": 528,
    "question": "Bob will be not punished.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ Shriek(x) → Punished(x))\n∀x (Swear(x) → Student(x))\n∀x (Teacher(x) → Talk(bob, x))\n∀x (Gentleman(x) → Suit(x))\n∀x (Teacher(x) → Man(x))\n∃x (Teacher(x))\n∀x (¬Gentleman(x) → ¬Nice(x))\nNice(willy)\nShriek(bob) ∧ Swear(bob)\"\"\""
    ]
  },
  {
    "id": 529,
    "question": "There is a man that Bob will talk to.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) ∧ Shriek(x) → Punished(x))\n∀x (Swear(x) → Student(x))\n∀x (Teacher(x) → Talk(bob, x))\n∀x (Gentleman(x) → Suit(x))\n∀x (Teacher(x) → Man(x))\n∃x (Teacher(x))\n∀x (¬Gentleman(x) → ¬Nice(x))\nNice(willy)\nShriek(bob) ∧ Swear(bob)\"\"\""
    ]
  },
  {
    "id": 142,
    "question": "Quincy McDuffie is a good wide receiver.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)\n∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))\n∃x (Football(x) ∧ CanCatch(quincymcduffie, x))\n∀x (Good(x, widereciever) → Professional(x))\n∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))\n∀x (Football(x) → Ball(x))\"\"\""
    ]
  },
  {
    "id": 143,
    "question": "Quincy McDuffie can catch every ball.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)\n∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))\n∃x (Football(x) ∧ CanCatch(quincymcduffie, x))\n∀x (Good(x, widereciever) → Professional(x))\n∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))\n∀x (Football(x) → Ball(x))\"\"\""
    ]
  },
  {
    "id": 144,
    "question": "Professional wide receivers are good at catching balls.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nAmerican(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)\n∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))\n∃x (Football(x) ∧ CanCatch(quincymcduffie, x))\n∀x (Good(x, widereciever) → Professional(x))\n∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))\n∀x (Football(x) → Ball(x))\"\"\""
    ]
  },
  {
    "id": 14,
    "question": "Longueau is situated on the Paris–Lille railway.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRailwayStation(boves) ∧ Locate(boves, france)\nPrecede(boves, longueau)\nPrecede(dommartin, boves)\nLocate(france, europe)\nSituate(dommartin, pairsLille)\n∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))\nServe(hautsDeFrance, boves)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\n∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))\"\"\""
    ]
  },
  {
    "id": 15,
    "question": "Boves is not in Europe.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRailwayStation(boves) ∧ Locate(boves, france)\nPrecede(boves, longueau)\nPrecede(dommartin, boves)\nLocate(france, europe)\nSituate(dommartin, pairsLille)\n∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))\nServe(hautsDeFrance, boves)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\n∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))\"\"\""
    ]
  },
  {
    "id": 16,
    "question": "Longueau is served by regional TER Hauts-de-France trains.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nRailwayStation(boves) ∧ Locate(boves, france)\nPrecede(boves, longueau)\nPrecede(dommartin, boves)\nLocate(france, europe)\nSituate(dommartin, pairsLille)\n∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))\nServe(hautsDeFrance, boves)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\n∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))\"\"\""
    ]
  },
  {
    "id": 310,
    "question": "Ted Smith was a sergeant.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)\nKnownAs(edwinsmith, tedsmith)\nWentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)\nSergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)\nBuisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)\"\"\""
    ]
  },
  {
    "id": 311,
    "question": "There are no rowers that own a buisness.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)\nKnownAs(edwinsmith, tedsmith)\nWentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)\nSergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)\nBuisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)\"\"\""
    ]
  },
  {
    "id": 312,
    "question": "No sergeants are from Auckland.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)\nKnownAs(edwinsmith, tedsmith)\nWentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)\nSergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)\nBuisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)\"\"\""
    ]
  },
  {
    "id": 313,
    "question": "No buisness owner has served in Egypt.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)\nKnownAs(edwinsmith, tedsmith)\nWentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)\nSergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)\nBuisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)\"\"\""
    ]
  },
  {
    "id": 506,
    "question": "All humans are werewolves.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))\n∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))\n∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)\"\"\""
    ]
  },
  {
    "id": 507,
    "question": "A werewolf is a wolf.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))\n∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))\n∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)\"\"\""
    ]
  },
  {
    "id": 508,
    "question": "A werewolf has scratched someone before.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))\n∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))\n∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)\"\"\""
    ]
  },
  {
    "id": 409,
    "question": "Jung fought Sadollah.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)\nEvent(uFCFightNight) → ScheduledToFight(sadollah, musoke)\nEvent(uFCFightNight) → Fight(sadollah, akiyama)\nEvent(uFCFightNight) → Fight(musoke, yakovlev)\nEvent(uFCFightNight) → Injured(jung)\n∀x (Injured(x) → ¬FightInUFC(x))\"\"\""
    ]
  },
  {
    "id": 410,
    "question": "Jung did not fight at UFC Fight Night.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)\nEvent(uFCFightNight) → ScheduledToFight(sadollah, musoke)\nEvent(uFCFightNight) → Fight(sadollah, akiyama)\nEvent(uFCFightNight) → Fight(musoke, yakovlev)\nEvent(uFCFightNight) → Injured(jung)\n∀x (Injured(x) → ¬FightInUFC(x))\"\"\""
    ]
  },
  {
    "id": 411,
    "question": "Sadollah fought Musoke.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)\nEvent(uFCFightNight) → ScheduledToFight(sadollah, musoke)\nEvent(uFCFightNight) → Fight(sadollah, akiyama)\nEvent(uFCFightNight) → Fight(musoke, yakovlev)\nEvent(uFCFightNight) → Injured(jung)\n∀x (Injured(x) → ¬FightInUFC(x))\"\"\""
    ]
  },
  {
    "id": 412,
    "question": "Nelson fought Story at UFC Fight Night.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nEvent(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)\nEvent(uFCFightNight) → ScheduledToFight(sadollah, musoke)\nEvent(uFCFightNight) → Fight(sadollah, akiyama)\nEvent(uFCFightNight) → Fight(musoke, yakovlev)\nEvent(uFCFightNight) → Injured(jung)\n∀x (Injured(x) → ¬FightInUFC(x))\"\"\""
    ]
  },
  {
    "id": 1356,
    "question": "Coke is orange juice.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drink(x) → Edible(x))\n∀x (Juice(x) → Drink(x))\n∀x (OrangeJuice(x) → Juice(x))\n∀x (OrangeJuice(x) ∨ AppleJuice(x))\n∀x (AppleJuice(x) → Sweet(x))\nAppleJuice(coke) → Drink(coke)\n¬AppleJuice(coke) → ¬Edible(coke)\"\"\""
    ]
  },
  {
    "id": 1357,
    "question": "Coke is edible and sweet.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drink(x) → Edible(x))\n∀x (Juice(x) → Drink(x))\n∀x (OrangeJuice(x) → Juice(x))\n∀x (OrangeJuice(x) ∨ AppleJuice(x))\n∀x (AppleJuice(x) → Sweet(x))\nAppleJuice(coke) → Drink(coke)\n¬AppleJuice(coke) → ¬Edible(coke)\"\"\""
    ]
  },
  {
    "id": 1358,
    "question": "Coke is not edible and sweet.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Drink(x) → Edible(x))\n∀x (Juice(x) → Drink(x))\n∀x (OrangeJuice(x) → Juice(x))\n∀x (OrangeJuice(x) ∨ AppleJuice(x))\n∀x (AppleJuice(x) → Sweet(x))\nAppleJuice(coke) → Drink(coke)\n¬AppleJuice(coke) → ¬Edible(coke)\"\"\""
    ]
  },
  {
    "id": 119,
    "question": "Daniel was not killed by the Spanish Nationalists.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTalentedPoet(lorca) ∧ SupportPopulists(lorca)\n∀x (SupportPopulists(x) → Opposed(nationalists, x))\n∀x (TalentedPoet(x) → Popular(x))\n∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x))\nSupportPopulists(daniel) ∧ ¬Popular(daniel)\"\"\""
    ]
  },
  {
    "id": 120,
    "question": "Lorca was killed by the Spanish Nationalists.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nTalentedPoet(lorca) ∧ SupportPopulists(lorca)\n∀x (SupportPopulists(x) → Opposed(nationalists, x))\n∀x (TalentedPoet(x) → Popular(x))\n∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x))\nSupportPopulists(daniel) ∧ ¬Popular(daniel)\"\"\""
    ]
  },
  {
    "id": 978,
    "question": "Franny has to visit the dentist frequently.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kombucha(x) ∨ CocaCola(x))\n∀x (CocaCola(x) → BusyParents(x))\n∀x (CocaCola(x) → Dentist(x))\n∀x (BusyParents(x) → Erratic(x))\n∀x (Erratic(x) → ¬Consistent(x))\n(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))\"\"\""
    ]
  },
  {
    "id": 979,
    "question": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kombucha(x) ∨ CocaCola(x))\n∀x (CocaCola(x) → BusyParents(x))\n∀x (CocaCola(x) → Dentist(x))\n∀x (BusyParents(x) → Erratic(x))\n∀x (Erratic(x) → ¬Consistent(x))\n(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))\"\"\""
    ]
  },
  {
    "id": 980,
    "question": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kombucha(x) ∨ CocaCola(x))\n∀x (CocaCola(x) → BusyParents(x))\n∀x (CocaCola(x) → Dentist(x))\n∀x (BusyParents(x) → Erratic(x))\n∀x (Erratic(x) → ¬Consistent(x))\n(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))\"\"\""
    ]
  },
  {
    "id": 63,
    "question": "James is not able to watch 3 movies every week without any additional fees.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))\n∃x (CinemaEveryWeek(x))\n∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, amcalist)\nPrefer(peter, tvseries)\"\"\""
    ]
  },
  {
    "id": 64,
    "question": "James goes to cinemas every week.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))\n∃x (CinemaEveryWeek(x))\n∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, amcalist)\nPrefer(peter, tvseries)\"\"\""
    ]
  },
  {
    "id": 65,
    "question": "Peter will not watch TV series in cinemas.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))\n∃x (CinemaEveryWeek(x))\n∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, amcalist)\nPrefer(peter, tvseries)\"\"\""
    ]
  },
  {
    "id": 724,
    "question": "Bulbophyllum attenuatum is not an orchid.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nInGenus(bulbophyllumattenuatum, bulbophyllum)\n∀x (InGenus(x, bulbophyllum) → Orchid(x))\"\"\""
    ]
  },
  {
    "id": 470,
    "question": "Vladivostok is the administrative center of the federal district with the largest area.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)\nFederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, fareastern)\nFederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)\n∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000))\"\"\""
    ]
  },
  {
    "id": 471,
    "question": "Moscow is the administrative center of the federal district with the largest population.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)\nFederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, fareastern)\nFederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)\n∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000))\"\"\""
    ]
  },
  {
    "id": 472,
    "question": "The Northwestern federal district was established in 2000.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)\nFederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, fareastern)\nFederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)\n∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000))\"\"\""
    ]
  },
  {
    "id": 815,
    "question": "Breast cancer can be treated at home.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → MalignantTumor(x))\n∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (HavingACold(x) → CanBeTreatedAtHome(x))\n¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))\"\"\""
    ]
  },
  {
    "id": 816,
    "question": "Breast cancer is colorectal cancer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → MalignantTumor(x))\n∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (HavingACold(x) → CanBeTreatedAtHome(x))\n¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))\"\"\""
    ]
  },
  {
    "id": 817,
    "question": "Breast cancer is not colorectal cancer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → MalignantTumor(x))\n∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (HavingACold(x) → CanBeTreatedAtHome(x))\n¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))\"\"\""
    ]
  },
  {
    "id": 818,
    "question": "Breast cancer is colorectal cancer or a malignant tumor.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → MalignantTumor(x))\n∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (HavingACold(x) → CanBeTreatedAtHome(x))\n¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))\"\"\""
    ]
  },
  {
    "id": 819,
    "question": "Breast cancer is colorectal cancer and a cancer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → MalignantTumor(x))\n∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (HavingACold(x) → CanBeTreatedAtHome(x))\n¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))\"\"\""
    ]
  },
  {
    "id": 820,
    "question": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cancer(x) → MalignantTumor(x))\n∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))\n∀x (ColorectalCancer(x) → Cancer(x))\n∀x (HavingACold(x) → CanBeTreatedAtHome(x))\n¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))\"\"\""
    ]
  },
  {
    "id": 752,
    "question": "I should not worry about traffic.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (OutsideControl(x) → ¬ShouldWorry(x))\n∀x (Traffic(x) → OutsideControl(x))\"\"\""
    ]
  },
  {
    "id": 342,
    "question": "Alba Roversi uses an Italian surname.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))\nUseAsSurname(alba, roversi)\nUseAsSurname(paolo, roversi)\nUseAsSurname(roberto, roversi)\nPhotographer(paolo)\n∀x (Photographer(x) → Professional(x) ∨ Amateur(x))\"\"\""
    ]
  },
  {
    "id": 343,
    "question": "There are no photographers using an Italian surname.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))\nUseAsSurname(alba, roversi)\nUseAsSurname(paolo, roversi)\nUseAsSurname(roberto, roversi)\nPhotographer(paolo)\n∀x (Photographer(x) → Professional(x) ∨ Amateur(x))\"\"\""
    ]
  },
  {
    "id": 344,
    "question": "Paolo is an amateur photographer.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))\nUseAsSurname(alba, roversi)\nUseAsSurname(paolo, roversi)\nUseAsSurname(roberto, roversi)\nPhotographer(paolo)\n∀x (Photographer(x) → Professional(x) ∨ Amateur(x))\"\"\""
    ]
  },
  {
    "id": 677,
    "question": "Hadid became a UK citizen later in her life.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-IraqiArchitect(zahaHadid)\nBornIn(zahaHadid, y1950)\nVisitingprofessor(zahaHadid, yaleSchoolofArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\"\"\""
    ]
  },
  {
    "id": 678,
    "question": "Hadid did some work in interior design.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-IraqiArchitect(zahaHadid)\nBornIn(zahaHadid, y1950)\nVisitingprofessor(zahaHadid, yaleSchoolofArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\"\"\""
    ]
  },
  {
    "id": 679,
    "question": "Hadid was born in 1982.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-IraqiArchitect(zahaHadid)\nBornIn(zahaHadid, y1950)\nVisitingprofessor(zahaHadid, yaleSchoolofArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\"\"\""
    ]
  },
  {
    "id": 680,
    "question": "Max admires Zaha Hadid.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBritish-IraqiArchitect(zahaHadid)\nBornIn(zahaHadid, y1950)\nVisitingprofessor(zahaHadid, yaleSchoolofArchitecture)\nAspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)\"\"\""
    ]
  },
  {
    "id": 1081,
    "question": "FMRI provides a spatial resolution of brains.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) \n ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) \n ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) \n ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))\n MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)\"\"\""
    ]
  },
  {
    "id": 1082,
    "question": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) \n ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) \n ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) \n ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))\n MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)\"\"\""
    ]
  },
  {
    "id": 1083,
    "question": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) \n ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) \n ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) \n ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))\n MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)\"\"\""
    ]
  },
  {
    "id": 1084,
    "question": "If fMRI is not an invasive neuroimaging technique and used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) \n ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) \n ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) \n ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))\n MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)\"\"\""
    ]
  },
  {
    "id": 1258,
    "question": "James is provided with souvenirs.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Present(x) ∨ Tutorial(x))\n∀x (Present(x) → InPerson(x))\n∀x (Tutorial(x) → Invited(x))\n∀x (InPerson(x) → Souvenirs(x))\n∀x (Invited(x) → Meals(x))\n∀x (Meals(x) → HappyCommunicate(x))\n∀x (Meals(x) → InvitedTakePhoto(x))\n¬(InPerson(james) ∧ Souvenirs(james))\"\"\""
    ]
  },
  {
    "id": 1259,
    "question": "James is not provided with souvenirs.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Present(x) ∨ Tutorial(x))\n∀x (Present(x) → InPerson(x))\n∀x (Tutorial(x) → Invited(x))\n∀x (InPerson(x) → Souvenirs(x))\n∀x (Invited(x) → Meals(x))\n∀x (Meals(x) → HappyCommunicate(x))\n∀x (Meals(x) → InvitedTakePhoto(x))\n¬(InPerson(james) ∧ Souvenirs(james))\"\"\""
    ]
  },
  {
    "id": 1260,
    "question": "James is invited to take a photo with the audience and is happy to communicate with each other at the dinner.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Present(x) ∨ Tutorial(x))\n∀x (Present(x) → InPerson(x))\n∀x (Tutorial(x) → Invited(x))\n∀x (InPerson(x) → Souvenirs(x))\n∀x (Invited(x) → Meals(x))\n∀x (Meals(x) → HappyCommunicate(x))\n∀x (Meals(x) → InvitedTakePhoto(x))\n¬(InPerson(james) ∧ Souvenirs(james))\"\"\""
    ]
  },
  {
    "id": 1261,
    "question": "James is invited to take a photo with the audience or is happy to communicate with each other during the dinner.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Present(x) ∨ Tutorial(x))\n∀x (Present(x) → InPerson(x))\n∀x (Tutorial(x) → Invited(x))\n∀x (InPerson(x) → Souvenirs(x))\n∀x (Invited(x) → Meals(x))\n∀x (Meals(x) → HappyCommunicate(x))\n∀x (Meals(x) → InvitedTakePhoto(x))\n¬(InPerson(james) ∧ Souvenirs(james))\"\"\""
    ]
  },
  {
    "id": 1262,
    "question": "James is either invited to take a photo with the audience or happy to communicate with each other during the dinner.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ( Present(x) ∨ Tutorial(x))\n∀x (Present(x) → InPerson(x))\n∀x (Tutorial(x) → Invited(x))\n∀x (InPerson(x) → Souvenirs(x))\n∀x (Invited(x) → Meals(x))\n∀x (Meals(x) → HappyCommunicate(x))\n∀x (Meals(x) → InvitedTakePhoto(x))\n¬(InPerson(james) ∧ Souvenirs(james))\"\"\""
    ]
  },
  {
    "id": 38,
    "question": "The USS Salem is open to the public.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n∀x (MuseumShip(x) → OpenToPublic(x))\nServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)\"\"\""
    ]
  },
  {
    "id": 39,
    "question": "There is a museum ship open to the public that served in the Mediterranean.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n∀x (MuseumShip(x) → OpenToPublic(x))\nServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)\"\"\""
    ]
  },
  {
    "id": 40,
    "question": "The USS Salem was not the last heavy cruiser to enter service.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nHeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n∀x (MuseumShip(x) → OpenToPublic(x))\nServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)\"\"\""
    ]
  },
  {
    "id": 415,
    "question": "TS Leda was quiet and good at sea.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))\n∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))\n∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))\n∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))\n∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))\"\"\""
    ]
  },
  {
    "id": 416,
    "question": "TS Leda had powerful steam turbine engines.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))\n∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))\n∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))\n∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))\n∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))\"\"\""
    ]
  },
  {
    "id": 417,
    "question": "TS Leda was not a Norweigian vessel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))\n∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))\n∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))\n∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))\n∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))\"\"\""
    ]
  },
  {
    "id": 555,
    "question": "Rosa was born in the largest city of Chile.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBorn(rosa, santiago)\nCapital(santiago, chile) ∧ LargestCity(santiago, chile)\nDaughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)\nWife(jose, carmen) ∧ Chilean(carmen)\n∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))\"\"\""
    ]
  },
  {
    "id": 556,
    "question": "Neither of Rosa's parents is Chilean.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBorn(rosa, santiago)\nCapital(santiago, chile) ∧ LargestCity(santiago, chile)\nDaughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)\nWife(jose, carmen) ∧ Chilean(carmen)\n∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))\"\"\""
    ]
  },
  {
    "id": 557,
    "question": "Rosa is the daughter of someone who is responsible for the oversight of traffic.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBorn(rosa, santiago)\nCapital(santiago, chile) ∧ LargestCity(santiago, chile)\nDaughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)\nWife(jose, carmen) ∧ Chilean(carmen)\n∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))\"\"\""
    ]
  },
  {
    "id": 105,
    "question": "Well Done 3 is a rap album.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsRapper(tyga)\nReleasedAlbum(tyga, wellDone3)\n∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))\n∀x (IsRapper(x) → ¬IsOperaSinger(x))\"\"\""
    ]
  },
  {
    "id": 106,
    "question": "Tyga is an opera singer.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsRapper(tyga)\nReleasedAlbum(tyga, wellDone3)\n∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))\n∀x (IsRapper(x) → ¬IsOperaSinger(x))\"\"\""
    ]
  },
  {
    "id": 107,
    "question": "Well Done 3 is worth listening.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsRapper(tyga)\nReleasedAlbum(tyga, wellDone3)\n∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))\n∀x (IsRapper(x) → ¬IsOperaSinger(x))\"\"\""
    ]
  },
  {
    "id": 293,
    "question": "Gasland was coproduced by the same person Homesick is from.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)\nPlay(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)\nPlay(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace)\nCo-Produced(deborahwallace, gasland)\"\"\""
    ]
  },
  {
    "id": 294,
    "question": "There isn't a play from Deborah Wallace that is based on the life of James Miranda Barry.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)\nPlay(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)\nPlay(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace)\nCo-Produced(deborahwallace, gasland)\"\"\""
    ]
  },
  {
    "id": 295,
    "question": "Gasland is a play.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)\nPlay(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)\nPlay(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace)\nCo-Produced(deborahwallace, gasland)\"\"\""
    ]
  },
  {
    "id": 1297,
    "question": "Larry is a bear.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeedsLargeTerritory(x) → TravelFar(x))\n∀x (EatsALot(x) → NeedsLargeTerritory(x))\n∀x (BigAnimal(x) → EatsALot(x))\n∀x (Bear(x) → BigAnimal(x))\nBigAnimal(larry)\"\"\""
    ]
  },
  {
    "id": 1298,
    "question": "Larry is neither a bear nor travels far.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeedsLargeTerritory(x) → TravelFar(x))\n∀x (EatsALot(x) → NeedsLargeTerritory(x))\n∀x (BigAnimal(x) → EatsALot(x))\n∀x (Bear(x) → BigAnimal(x))\nBigAnimal(larry)\"\"\""
    ]
  },
  {
    "id": 1299,
    "question": "If Larry either travels far or needs a large territory, then Larry is a bear.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NeedsLargeTerritory(x) → TravelFar(x))\n∀x (EatsALot(x) → NeedsLargeTerritory(x))\n∀x (BigAnimal(x) → EatsALot(x))\n∀x (Bear(x) → BigAnimal(x))\nBigAnimal(larry)\"\"\""
    ]
  },
  {
    "id": 1335,
    "question": "Garry is ugly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Criminal(x) → ¬Kind(x))\n∀x (BreakLaw(x) → Criminal(x))\n∀x (Kind(x) ⊕ Evil(x))\n∀x (Evil(x) → Ugly(x))\n∀x (Evil(x) → ColdBlood(x))\n((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)\"\"\""
    ]
  },
  {
    "id": 1336,
    "question": "Garry is cold-blooded and breaks the law.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Criminal(x) → ¬Kind(x))\n∀x (BreakLaw(x) → Criminal(x))\n∀x (Kind(x) ⊕ Evil(x))\n∀x (Evil(x) → Ugly(x))\n∀x (Evil(x) → ColdBlood(x))\n((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)\"\"\""
    ]
  },
  {
    "id": 1337,
    "question": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Criminal(x) → ¬Kind(x))\n∀x (BreakLaw(x) → Criminal(x))\n∀x (Kind(x) ⊕ Evil(x))\n∀x (Evil(x) → Ugly(x))\n∀x (Evil(x) → ColdBlood(x))\n((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)\"\"\""
    ]
  },
  {
    "id": 402,
    "question": "Phoenix makes pop rock music.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIndiePop(phoenix)\nBand(phoenix) ∧ France(phoenix)\n∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))\n∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))\n∀x (Make(phoenix, x) → ¬FrenchSong(x))\"\"\""
    ]
  },
  {
    "id": 403,
    "question": "Phoenix has songs in French.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIndiePop(phoenix)\nBand(phoenix) ∧ France(phoenix)\n∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))\n∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))\n∀x (Make(phoenix, x) → ¬FrenchSong(x))\"\"\""
    ]
  }
]