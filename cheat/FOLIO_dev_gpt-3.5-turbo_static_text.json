[
  {
    "id": 0,
    "question": "Bonnie performs in school talent shows often.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TalentShows(x) → Engaged(x))\n∀x (TalentShows(x) ∨ Inactive(x))\n∀x (Chaperone(x) → ¬Students(x))\n∀x (Inactive(x) → Chaperone(x))\n∀x (AcademicCareer(x) → Students(x))\n(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEngaged(bonnie)\n\"\"\""
    ]
  },
  {
    "id": 1,
    "question": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TalentShows(x) → Engaged(x))\n∀x (TalentShows(x) ∨ Inactive(x))\n∀x (Chaperone(x) → ¬Students(x))\n∀x (Inactive(x) → Chaperone(x))\n∀x (AcademicCareer(x) → Students(x))\n(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAcademicCareer(bonnie) ⊕ Chaperone(bonnie) → AcademicCareer(bonnie) ⊕ Inactive(bonnie)\n\"\"\""
    ]
  },
  {
    "id": 2,
    "question": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TalentShows(x) → Engaged(x))\n∀x (TalentShows(x) ∨ Inactive(x))\n∀x (Chaperone(x) → ¬Students(x))\n∀x (Inactive(x) → Chaperone(x))\n∀x (AcademicCareer(x) → Students(x))\n(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChaperone(bonnie) ⊕ TalentShows(bonnie) → AcademicCareer(bonnie) ∧ Inactive(bonnie))\n\"\"\""
    ]
  },
  {
    "id": 3,
    "question": "James has lunch in the company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meeting(x) → AppearInCompany(x))\n∀x (LunchInCompany(x) → Meetings(x))\n∀x (LunchInCompany(x) ∨ LunchAtHome(x))\n∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))\n∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))\n∀x (Manager(x) → ¬WorkRemotelyFromHome(x))\nManager(james) ⊕ AppearInCompany(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLunchInCompany(james)\n\"\"\""
    ]
  },
  {
    "id": 4,
    "question": "James does not have lunch in the company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meeting(x) → AppearInCompany(x))\n∀x (LunchInCompany(x) → Meetings(x))\n∀x (LunchInCompany(x) ∨ LunchAtHome(x))\n∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))\n∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))\n∀x (Manager(x) → ¬WorkRemotelyFromHome(x))\nManager(james) ⊕ AppearInCompany(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LunchInCompany(james)\n\"\"\""
    ]
  },
  {
    "id": 5,
    "question": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Meeting(x) → AppearInCompany(x))\n∀x (LunchInCompany(x) → Meetings(x))\n∀x (LunchInCompany(x) ∨ LunchAtHome(x))\n∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))\n∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))\n∀x (Manager(x) → ¬WorkRemotelyFromHome(x))\nManager(james) ⊕ AppearInCompany(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Manager(james) ⊕ InOtherCountries(james)) → (LunchAtHome(james) ⊕ WorkRemotelyFromHome(james))\n\"\"\""
    ]
  },
  {
    "id": 6,
    "question": "There is an animal.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x))\n∃x (Animal(x) ∧ OccurMonkeypoxVirus(x))\n∀x (Human(x) → Mammal(x))\n∀x (Mammal(x) → Animal(x))\n∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n∀x (Human(x) ∧ Flu(x) → Tired(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Animal(x))\n\"\"\""
    ]
  },
  {
    "id": 7,
    "question": "No one gets flu.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x))\n∃x (Animal(x) ∧ OccurMonkeypoxVirus(x))\n∀x (Human(x) → Mammal(x))\n∀x (Mammal(x) → Animal(x))\n∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n∀x (Human(x) ∧ Flu(x) → Tired(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Human(x) → ¬Flu(x))\n\"\"\""
    ]
  },
  {
    "id": 8,
    "question": "Symptons of Monkeypox include coughing.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x))\n∃x (Animal(x) ∧ OccurMonkeypoxVirus(x))\n∀x (Human(x) → Mammal(x))\n∀x (Mammal(x) → Animal(x))\n∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))\n∀x (Human(x) ∧ Flu(x) → Tired(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (GetMonkeypox(x) ∧ Coughing(x))\n\"\"\""
    ]
  },
  {
    "id": 9,
    "question": "Tom is an Ocellated wild turkey.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x)))\n¬(WildTurkey(tom) ∧ Eastern(tom))\n¬(WildTurkey(tom) ∧ Osceola(tom))\nWildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))\nWildTurkey(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOcellated(tom)\n\"\"\""
    ]
  },
  {
    "id": 10,
    "question": "Tom is an Eastern wild turkey.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x)))\n¬(WildTurkey(tom) ∧ Eastern(tom))\n¬(WildTurkey(tom) ∧ Osceola(tom))\nWildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))\nWildTurkey(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEastern(tom)\n\"\"\""
    ]
  },
  {
    "id": 11,
    "question": "Joey is a wild turkey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x)))\n¬(WildTurkey(tom) ∧ Eastern(tom))\n¬(WildTurkey(tom) ∧ Osceola(tom))\nWildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))\nWildTurkey(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWildTurkey(joey)\n\"\"\""
    ]
  },
  {
    "id": 12,
    "question": "The Legend of Zelda is in the Top 10 list.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda))\n∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y))\n∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x))\nSellsMoreThan(thelegendofzelda, onemillioncopies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTop10(thelegendofzelda)\n\"\"\""
    ]
  },
  {
    "id": 13,
    "question": "FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda))\n∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y))\n∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x))\nSellsMoreThan(thelegendofzelda, onemillioncopies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Created(fifa22, x) → Japanese(x) ∧ VideoGameCompany(x))\n\"\"\""
    ]
  },
  {
    "id": 14,
    "question": "The Legend of Zelda is not in the Top 10 list.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda))\n∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y))\n∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x))\nSellsMoreThan(thelegendofzelda, onemillioncopies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Top10(thelegendofzelda)\n\"\"\""
    ]
  },
  {
    "id": 15,
    "question": "All squares are shapes.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Square(x) → FourSides(x))\n∀x (FourSides(x) → IsShape(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Square(x) → IsShape(x))\n\"\"\""
    ]
  },
  {
    "id": 16,
    "question": "Rock is a turtle.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x))\n∃x (Turtle(x))\n∀x (Rabbit(x) ∨ Squirrel(x))\n∀x (Skittish(x) → ¬Still(x))\n∀x (Squirrel(x) → Skittish(x))\nStill(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTurtle(rock)\n\"\"\""
    ]
  },
  {
    "id": 17,
    "question": "Rock is not a turtle.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x))\n∃x (Turtle(x))\n∀x (Rabbit(x) ∨ Squirrel(x))\n∀x (Skittish(x) → ¬Still(x))\n∀x (Squirrel(x) → Skittish(x))\nStill(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Turtle(rock)\n\"\"\""
    ]
  },
  {
    "id": 18,
    "question": "Rock is a turtle or cute.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x))\n∃x (Turtle(x))\n∀x (Rabbit(x) ∨ Squirrel(x))\n∀x (Skittish(x) → ¬Still(x))\n∀x (Squirrel(x) → Skittish(x))\nStill(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTurtle(rock) ∨ Cute(rock)\n\"\"\""
    ]
  },
  {
    "id": 19,
    "question": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x))\n∃x (Turtle(x))\n∀x (Rabbit(x) ∨ Squirrel(x))\n∀x (Skittish(x) → ¬Still(x))\n∀x (Squirrel(x) → Skittish(x))\nStill(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Turtle(rock) ∧ Squirrel(rock)) → Cute(rock) ⊕ Skittish(rock)\n\"\"\""
    ]
  },
  {
    "id": 20,
    "question": "If Rock is cute and still, then Rock is a turtle and skittish.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Rabbit(x) → Cute(x))\n∃x (Turtle(x))\n∀x (Rabbit(x) ∨ Squirrel(x))\n∀x (Skittish(x) → ¬Still(x))\n∀x (Squirrel(x) → Skittish(x))\nStill(rock)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCute(rock) ∧ Still(rock) → Turtle(rock) ∧ Skittish(rock)\n\"\"\""
    ]
  },
  {
    "id": 21,
    "question": "Karen will share \"Stranger Things\" to Lisa.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNetflixShow(strangerThings) ∧ Popular(strangerThings)\n∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n¬Download(karen, blackMirror)\nNetflixShow(blackMirror)\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nShare(strangerThings, lisa)\n\"\"\""
    ]
  },
  {
    "id": 22,
    "question": "\"Black Mirror\" is popular.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNetflixShow(strangerThings) ∧ Popular(strangerThings)\n∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n¬Download(karen, blackMirror)\nNetflixShow(blackMirror)\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPopular(blackMirror)\n\"\"\""
    ]
  },
  {
    "id": 23,
    "question": "Karen will share \"Black Mirror\" to Lisa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nNetflixShow(strangerThings) ∧ Popular(strangerThings)\n∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))\n¬Download(karen, blackMirror)\nNetflixShow(blackMirror)\n∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nShare(blackMirror, lisa)\n\"\"\""
    ]
  },
  {
    "id": 24,
    "question": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCapitalOf(beijing, prx)\nMostPopulousNationalCapitalCity(beijing)\nInNorthernChina(beijing)\nHosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames)\nHosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames)\n∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHosted(beijing, summer2008olympic) ∧ Hosted(beijing, winterolympic)\n\"\"\""
    ]
  },
  {
    "id": 25,
    "question": "Beijing is located in southern China.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCapitalOf(beijing, prx)\nMostPopulousNationalCapitalCity(beijing)\nInNorthernChina(beijing)\nHosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames)\nHosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames)\n∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nInSouthernChina(beijing)\n\"\"\""
    ]
  },
  {
    "id": 26,
    "question": "Beijing is the second largest Chinese city by urban population.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCapitalOf(beijing, prx)\nMostPopulousNationalCapitalCity(beijing)\nInNorthernChina(beijing)\nHosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames)\nHosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames)\n∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSecondLargestChineseCity(beijing)\n\"\"\""
    ]
  },
  {
    "id": 27,
    "question": "Marvin is an alien.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x))\n∀x (FromMars(x) → Alien(x))\n∀x (Extraterrestrial(x) → ¬Human(x))\n∀x (FromEarth(x) → Human(x))\n¬FromEarth(marvin) ∧ ¬FromMars(marvin)\n¬FromEarth(marvin) → Extraterrestrial(marvin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAlien(marvin)\n\"\"\""
    ]
  },
  {
    "id": 28,
    "question": "Marvin is neither a human nor from Mars.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x))\n∀x (FromMars(x) → Alien(x))\n∀x (Extraterrestrial(x) → ¬Human(x))\n∀x (FromEarth(x) → Human(x))\n¬FromEarth(marvin) ∧ ¬FromMars(marvin)\n¬FromEarth(marvin) → Extraterrestrial(marvin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Human(marvin) ∧ ¬FromMars(marvin)\n\"\"\""
    ]
  },
  {
    "id": 29,
    "question": "If Marvin is not from Mars, then Marvin is a human.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Alien(x) → Extraterrestrial(x))\n∀x (FromMars(x) → Alien(x))\n∀x (Extraterrestrial(x) → ¬Human(x))\n∀x (FromEarth(x) → Human(x))\n¬FromEarth(marvin) ∧ ¬FromMars(marvin)\n¬FromEarth(marvin) → Extraterrestrial(marvin)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬FromMars(marvin) → Human(marvin)\n\"\"\""
    ]
  },
  {
    "id": 30,
    "question": "Djokovic is a Grand Slam champion.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\n∀x (OscarNominatedActor(x) → Celebrity(x))\n∀x (ProfessionalTennisPlayer(x) → Athlete(x))\n∀x (Celebrity(x) → WellPaid(x))\n∀x (Athlete(x) → Famous(x))\n∀x (WellPaid(x) → LivesInTaxHaven(x))\nFamous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrandSlamChampion(djokovic)\n\"\"\""
    ]
  },
  {
    "id": 31,
    "question": "Djokovic lives in a tax haven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\n∀x (OscarNominatedActor(x) → Celebrity(x))\n∀x (ProfessionalTennisPlayer(x) → Athlete(x))\n∀x (Celebrity(x) → WellPaid(x))\n∀x (Athlete(x) → Famous(x))\n∀x (WellPaid(x) → LivesInTaxHaven(x))\nFamous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLivesInTaxHaven(djokovic)\n\"\"\""
    ]
  },
  {
    "id": 32,
    "question": "Djokovic does not live in a tax haven.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))\n∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\n∀x (OscarNominatedActor(x) → Celebrity(x))\n∀x (ProfessionalTennisPlayer(x) → Athlete(x))\n∀x (Celebrity(x) → WellPaid(x))\n∀x (Athlete(x) → Famous(x))\n∀x (WellPaid(x) → LivesInTaxHaven(x))\nFamous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LivesInTaxHaven(djokovic)\n\"\"\""
    ]
  },
  {
    "id": 33,
    "question": "Roderick strong leads a professional wrestling stable.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe)\nLeads(roderickstrong, diamondmine)\nIncludes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile)\nHasFeud(imperium, diamondmine)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x))\n\"\"\""
    ]
  },
  {
    "id": 34,
    "question": "Roderick strong leads the Creed Brothers.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe)\nLeads(roderickstrong, diamondmine)\nIncludes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile)\nHasFeud(imperium, diamondmine)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLeads(roderickstrong, creedbrothers)\n\"\"\""
    ]
  },
  {
    "id": 35,
    "question": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe)\nLeads(roderickstrong, diamondmine)\nIncludes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile)\nHasFeud(imperium, diamondmine)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile) → ¬HasFeud(imperium, x))\n\"\"\""
    ]
  },
  {
    "id": 36,
    "question": "Beethoven is a composer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphony9)\n∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y))\nWrittenby(symphony9, beethoven)\nPremiered(viennamusicsociety, symphony9)\nOrchestra(viennamusicsociety)\nLead(beethoven, viennamusicsociety)\n∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComposer(beethoven)\n\"\"\""
    ]
  },
  {
    "id": 37,
    "question": "Some orchestras premiered music pieces.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphony9)\n∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y))\nWrittenby(symphony9, beethoven)\nPremiered(viennamusicsociety, symphony9)\nOrchestra(viennamusicsociety)\nLead(beethoven, viennamusicsociety)\n∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))\n\"\"\""
    ]
  },
  {
    "id": 38,
    "question": "Beethoven is not a conductor.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMusicPiece(symphony9)\n∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y))\nWrittenby(symphony9, beethoven)\nPremiered(viennamusicsociety, symphony9)\nOrchestra(viennamusicsociety)\nLead(beethoven, viennamusicsociety)\n∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Conductor(beethoven)\n\"\"\""
    ]
  },
  {
    "id": 39,
    "question": "A design by Max is a mass product design.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ZahaHadidDesignStyle(x) → Timeless(x))\n∀x (MassProductDesign(x) → ¬Timeless(x))\n∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x)) \n∀x (KellyWearstlerDesignStyle(x) → Evocative(x))\n∀x (KellyWearstlerDesignStyle(x) → Dreamy(x))\nTimeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMassProductDesign(aDesignByMax)\n\"\"\""
    ]
  },
  {
    "id": 40,
    "question": "A design by Max is evocative and dreamy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ZahaHadidDesignStyle(x) → Timeless(x))\n∀x (MassProductDesign(x) → ¬Timeless(x))\n∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x)) \n∀x (KellyWearstlerDesignStyle(x) → Evocative(x))\n∀x (KellyWearstlerDesignStyle(x) → Dreamy(x))\nTimeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEvocative(aDesignByMax) ∧ Dreamy(aDesignByMax)\n\"\"\""
    ]
  },
  {
    "id": 41,
    "question": "A design by Max is either evocative or dreamy.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (ZahaHadidDesignStyle(x) → Timeless(x))\n∀x (MassProductDesign(x) → ¬Timeless(x))\n∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x)) \n∀x (KellyWearstlerDesignStyle(x) → Evocative(x))\n∀x (KellyWearstlerDesignStyle(x) → Dreamy(x))\nTimeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nEvocative(aDesignByMax) ⊕ Dreamy(aDesignByMax)\n\"\"\""
    ]
  },
  {
    "id": 42,
    "question": "Coco Gauff is among the most active players in major tennis.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x))\n∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x))\n∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x)) \n∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x)) \n∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x))\nRankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmongMostActivePlayersInMajorTennis(cocoGauff)\n\"\"\""
    ]
  },
  {
    "id": 43,
    "question": "Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x))\n∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x))\n∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x)) \n∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x)) \n∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x))\nRankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLostToRafaelNadal(cocoGauff)\n\"\"\""
    ]
  },
  {
    "id": 44,
    "question": "Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x))\n∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x))\n∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x)) \n∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x)) \n∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x))\nRankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LostToIgaŚwiątek(cocoGauff) ∨ ¬AmongMostActivePlayersInMajorTennis(cocoGauff)\n\"\"\""
    ]
  },
  {
    "id": 45,
    "question": "No pets are cats.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cat(x) → Mammal(x))\n∃x (Pet(x) ∧ ¬Mammal(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Pet(x) → ¬Cat(x))\n\"\"\""
    ]
  },
  {
    "id": 46,
    "question": "James's favorite season is summer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSeason(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)\n∀x (WantlongVacation(x) → Love(x, summer))\nLove(emma, summer)\n¬Love(mia, emma)\nWantlongVacation(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLove(james, summer)\n\"\"\""
    ]
  },
  {
    "id": 47,
    "question": "James's favorite season is fall.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSeason(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)\n∀x (WantlongVacation(x) → Love(x, summer))\nLove(emma, summer)\n¬Love(mia, emma)\nWantlongVacation(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLove(james, fall)\n\"\"\""
    ]
  },
  {
    "id": 48,
    "question": "Mia's favorite season is spring.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSeason(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)\n∀x (WantlongVacation(x) → Love(x, summer))\nLove(emma, summer)\n¬Love(mia, emma)\nWantlongVacation(james)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLove(mia, spring)\n\"\"\""
    ]
  },
  {
    "id": 49,
    "question": "1984 is printed text.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Digital(x) → ¬Analog(x))\n∀x (PrintedText(x) → Analog(x))\n∀x (StreamingService(x) → Digital(x))\n∀x (HardcoverBook(x) → PrintedText(x))\nStreamingService(y1984) → HardcoverBook(y1984)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPrintedText(y1984)\n\"\"\""
    ]
  },
  {
    "id": 50,
    "question": "1984 is a streaming service.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Digital(x) → ¬Analog(x))\n∀x (PrintedText(x) → Analog(x))\n∀x (StreamingService(x) → Digital(x))\n∀x (HardcoverBook(x) → PrintedText(x))\nStreamingService(y1984) → HardcoverBook(y1984)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nStreamingService(y1984)\n\"\"\""
    ]
  },
  {
    "id": 51,
    "question": "1984 is not a streaming service.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Digital(x) → ¬Analog(x))\n∀x (PrintedText(x) → Analog(x))\n∀x (StreamingService(x) → Digital(x))\n∀x (HardcoverBook(x) → PrintedText(x))\nStreamingService(y1984) → HardcoverBook(y1984)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬StreamingService(y1984)\n\"\"\""
    ]
  },
  {
    "id": 52,
    "question": "Basque is a Romance language.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n∀x (RomanceLanguage(x) → MemberOf(x, romancefamily))\n∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\nRomanceLanguage(french) ∧ RomanceLanguage(spanish)\nRelated(german, spanish)\n∀x (¬Related(basque, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRomanceLanguage(basque)\n\"\"\""
    ]
  },
  {
    "id": 53,
    "question": "German is a Romance language.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n∀x (RomanceLanguage(x) → MemberOf(x, romancefamily))\n∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\nRomanceLanguage(french) ∧ RomanceLanguage(spanish)\nRelated(german, spanish)\n∀x (¬Related(basque, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRomanceLanguage(german)\n\"\"\""
    ]
  },
  {
    "id": 54,
    "question": "French is an Indo-European language.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\n∀x (RomanceLanguage(x) → MemberOf(x, romancefamily))\n∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))\nRomanceLanguage(french) ∧ RomanceLanguage(spanish)\nRelated(german, spanish)\n∀x (¬Related(basque, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIndoEuropeanLanguage(french)\n\"\"\""
    ]
  },
  {
    "id": 55,
    "question": "Robert Lewandowski is a soccer player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsStriker(robertLewandowski)\n∀x (IsStriker(x) → IsSoccerPlayer(x))\nLeftTeam(robertLewandowski, bayernMunchen)\n∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsSoccerPlayer(robertLewandowski)\n\"\"\""
    ]
  },
  {
    "id": 56,
    "question": "Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsStriker(robertLewandowski)\n∀x (IsStriker(x) → IsSoccerPlayer(x))\nLeftTeam(robertLewandowski, bayernMunchen)\n∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaysForTeam(robertLewandowski, bayernMunchen)\n\"\"\""
    ]
  },
  {
    "id": 57,
    "question": "Robert Lewandowski is a star.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nIsStriker(robertLewandowski)\n∀x (IsStriker(x) → IsSoccerPlayer(x))\nLeftTeam(robertLewandowski, bayernMunchen)\n∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsSoccerStar(robertLewandowski)\n\"\"\""
    ]
  },
  {
    "id": 58,
    "question": "Butte and Pierre are in the same state.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCityIn(billings, montana)\nCityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana)\n∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x))\n¬CityIn(pierre, montana)\n∀x (CityIn(butte, x) → ¬CityIn(pierre, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CityIn(butte, x) ∧ CityIn(pierre, x))\n\"\"\""
    ]
  },
  {
    "id": 59,
    "question": "Pierre and Bismarck are in the same state.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCityIn(billings, montana)\nCityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana)\n∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x))\n¬CityIn(pierre, montana)\n∀x (CityIn(butte, x) → ¬CityIn(pierre, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (CityIn(pierre, x) ∧ CityIn(bismarck, x))\n\"\"\""
    ]
  },
  {
    "id": 60,
    "question": "Montana is home to the city of Missoula.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCityIn(billings, montana)\nCityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana)\n∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x))\n¬CityIn(pierre, montana)\n∀x (CityIn(butte, x) → ¬CityIn(pierre, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCityIn(missoula, montana)\n\"\"\""
    ]
  },
  {
    "id": 61,
    "question": "Mike has an F1 visa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InternationalStudent(x) → F1(x) ⊕ J1(x))\n∀x (InternationalStudent(x) ∧ F1(x) ∧ WantWorkInUS(x) → Apply(x, cpt) ∨ Apply(x, opt))\nInternationalStudent(mike)\nWantWorkInUS(mike) → Apply(mike, cpt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nF1(mike)\n\"\"\""
    ]
  },
  {
    "id": 62,
    "question": "Mike has a J1 visa.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (InternationalStudent(x) → F1(x) ⊕ J1(x))\n∀x (InternationalStudent(x) ∧ F1(x) ∧ WantWorkInUS(x) → Apply(x, cpt) ∨ Apply(x, opt))\nInternationalStudent(mike)\nWantWorkInUS(mike) → Apply(mike, cpt)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nJ1(mike)\n\"\"\""
    ]
  },
  {
    "id": 63,
    "question": "Ted is a pet.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cow(x) → Bovine(x))\n∃x (Pet(x) ∧ Cow(x))\n∀x (Bovine(x) → Domesticated(x))\n∀x (Domesticated(x) → ¬Aligator(x))\nAligator(ted)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPet(ted)\n\"\"\""
    ]
  },
  {
    "id": 64,
    "question": "Ted is a pet and a cow.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cow(x) → Bovine(x))\n∃x (Pet(x) ∧ Cow(x))\n∀x (Bovine(x) → Domesticated(x))\n∀x (Domesticated(x) → ¬Aligator(x))\nAligator(ted)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPet(ted) ∧ Cow(ted)\n\"\"\""
    ]
  },
  {
    "id": 65,
    "question": "If Ted is a cow, then Ted is not a pet.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Cow(x) → Bovine(x))\n∃x (Pet(x) ∧ Cow(x))\n∀x (Bovine(x) → Domesticated(x))\n∀x (Domesticated(x) → ¬Aligator(x))\nAligator(ted)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCow(ted) → ¬Pet(ted)\n\"\"\""
    ]
  },
  {
    "id": 66,
    "question": "A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrivateIvyLeagueResearchUniversity(yale)\nMovedTo(yale, newhaven) ∧ MovedIn(yale, y1716)\nValuedAt(yalesendowment, y42.3billion)\n∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x)))\nResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newhaven))\n\"\"\""
    ]
  },
  {
    "id": 67,
    "question": "Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrivateIvyLeagueResearchUniversity(yale)\nMovedTo(yale, newhaven) ∧ MovedIn(yale, y1716)\nValuedAt(yalesendowment, y42.3billion)\n∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x)))\nResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLargestUniversityEndowmentOf(yale, anyeducationalinstitution)\n\"\"\""
    ]
  },
  {
    "id": 68,
    "question": "Pierson College is a residential college at Yale.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPrivateIvyLeagueResearchUniversity(yale)\nMovedTo(yale, newhaven) ∧ MovedIn(yale, y1716)\nValuedAt(yalesendowment, y42.3billion)\n∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x)))\nResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege)\n\"\"\""
    ]
  },
  {
    "id": 69,
    "question": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (MemberOf(x, pappys) ∧ BritishSitcom(badults) ∧ Series(badults) ∧ Starring(badults, x))\nPilotedIn(badults, july2013) ∧ PilotedOn(badults, bbcthree)\nWorkingTitle(thesecretdudesociety, badults)\nScriptEditor(andrewcollins) ∧ ScriptEditorFor(andrewcollins, badults)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (ScriptEditorFor(andrewcollins, x) ∧ Series(x) ∧ WorkingTitle(thesecretdudesociety, x))\n\"\"\""
    ]
  },
  {
    "id": 70,
    "question": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (MemberOf(x, pappys) ∧ BritishSitcom(badults) ∧ Series(badults) ∧ Starring(badults, x))\nPilotedIn(badults, july2013) ∧ PilotedOn(badults, bbcthree)\nWorkingTitle(thesecretdudesociety, badults)\nScriptEditor(andrewcollins) ∧ ScriptEditorFor(andrewcollins, badults)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bbctwo) ∨ PilotedOn(y, bbcthree)))\n\"\"\""
    ]
  },
  {
    "id": 71,
    "question": "KO is a company stock.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x))\n ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x)) \n ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x))\n ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x))\n MatureCompanies’Stocks(kO)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCompanies’Stocks(kO)\n\"\"\""
    ]
  },
  {
    "id": 72,
    "question": "KO is a company stock and a growth company’s stock.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x))\n ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x)) \n ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x))\n ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x))\n MatureCompanies’Stocks(kO)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCompanies’Stocks(kO) ∧ GrowthCompanies’Stocks(kO)\n\"\"\""
    ]
  },
  {
    "id": 73,
    "question": "If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x))\n ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x)) \n ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x))\n ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x))\n MatureCompanies’Stocks(kO)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrowthCompanies’Stocks(kO) ∨ PriceVolatile(kO) → ¬Companies’Stocks(kO) ∨ ¬PriceVolatile(kO)\n\"\"\""
    ]
  },
  {
    "id": 74,
    "question": "Joe's license plate begins with the number 34.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Vehicleregistrationplate(x, istanbul) → Beginwith(x, number34))\n∀x (¬Beginwith(x, number34) → ¬FromIstanbul(x))\nVehicleregistrationplate(joe, istanbul)\nBeginwith(tom, number35)\n∀x (Beginwith(x, number35) → ¬Beginwith(x, number34))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBeginwith(joe, number34)\n\"\"\""
    ]
  },
  {
    "id": 75,
    "question": "Tom's license plate is from Istanbul.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Vehicleregistrationplate(x, istanbul) → Beginwith(x, number34))\n∀x (¬Beginwith(x, number34) → ¬FromIstanbul(x))\nVehicleregistrationplate(joe, istanbul)\nBeginwith(tom, number35)\n∀x (Beginwith(x, number35) → ¬Beginwith(x, number34))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVehicleregistrationplate(tom, istanbul)\n\"\"\""
    ]
  },
  {
    "id": 76,
    "question": "Mary needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (StudentJobs(x) → Tuition(x))\n∀x (Takeout(x) → StudentJobs(x))\n∀x (Takeout(x) ∨ DiningHall(x))\n∀x (DiningHall(x) → NotPicky(x))\n∀x (DiningHall(x) → Eating(x))\nStudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTuition(mary)\n\"\"\""
    ]
  },
  {
    "id": 77,
    "question": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (StudentJobs(x) → Tuition(x))\n∀x (Takeout(x) → StudentJobs(x))\n∀x (Takeout(x) ∨ DiningHall(x))\n∀x (DiningHall(x) → NotPicky(x))\n∀x (DiningHall(x) → Eating(x))\nStudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNotPicky(mary) ∧ Eating(mary)\n\"\"\""
    ]
  },
  {
    "id": 78,
    "question": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (StudentJobs(x) → Tuition(x))\n∀x (Takeout(x) → StudentJobs(x))\n∀x (Takeout(x) ∨ DiningHall(x))\n∀x (DiningHall(x) → NotPicky(x))\n∀x (DiningHall(x) → Eating(x))\nStudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNotPicky(mary) ⊕ Eating(mary)\n\"\"\""
    ]
  },
  {
    "id": 79,
    "question": "Dried Thai chilies are a product of Baked by Melissa.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x))\n∀x (Cupcakes(x) → Bakery(x))\n∀x (Hotpot(x) → Spicy(x))\n∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))\nSpicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nProductsOfBakedByMelissa(driedThaiChilies)\n\"\"\""
    ]
  },
  {
    "id": 80,
    "question": "Dried Thai chilies are not a product of Baked by Melissa.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x))\n∀x (Cupcakes(x) → Bakery(x))\n∀x (Hotpot(x) → Spicy(x))\n∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))\nSpicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ProductsOfBakedByMelissa(driedThaiChilies)\n\"\"\""
    ]
  },
  {
    "id": 81,
    "question": "Dried Thai chilies are a hotpot.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x))\n∀x (Cupcakes(x) → Bakery(x))\n∀x (Hotpot(x) → Spicy(x))\n∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))\nSpicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHotpot(driedThaiChilies)\n\"\"\""
    ]
  },
  {
    "id": 82,
    "question": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x))\n∀x (Cupcakes(x) → Bakery(x))\n∀x (Hotpot(x) → Spicy(x))\n∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))\nSpicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ProductsOfBakedByMelissa(driedThaiChilies) ∧ ¬Bakery(driedThaiChilies)\n\"\"\""
    ]
  },
  {
    "id": 83,
    "question": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bakery(x) → ¬Spicy(x))\n∀x (Cupcakes(x) → Bakery(x))\n∀x (Hotpot(x) → Spicy(x))\n∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))\nSpicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCupcake(driedThaiChilies) ∧ ProductsOfBakedByMelissa(driedThaiChilies)\n\"\"\""
    ]
  },
  {
    "id": 84,
    "question": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YelpRecommendation(x) → ¬NegativeReview(x))\n∀x (RatingGreaterThan9(x) → YelpRecommendation(x))\n∃x (NoTakeOutService(x) ∧ NegativeReview(x))\n∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))\nRatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNoTakeOutService(subway)\n\"\"\""
    ]
  },
  {
    "id": 85,
    "question": "Subway provides take-out service and does not receive many negative reviews.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YelpRecommendation(x) → ¬NegativeReview(x))\n∀x (RatingGreaterThan9(x) → YelpRecommendation(x))\n∃x (NoTakeOutService(x) ∧ NegativeReview(x))\n∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))\nRatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(NoTakeOutService(subway) ∧ NegativeReview(subway))\n\"\"\""
    ]
  },
  {
    "id": 86,
    "question": "Subway does not provide take-out service.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (YelpRecommendation(x) → ¬NegativeReview(x))\n∀x (RatingGreaterThan9(x) → YelpRecommendation(x))\n∃x (NoTakeOutService(x) ∧ NegativeReview(x))\n∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))\nRatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(NoTakeOutService(subway) ∧ NegativeReview(subway)) → PopularAmongLocalResidents(subway) ∧ NoTakeOutService(subway)\n\"\"\""
    ]
  },
  {
    "id": 87,
    "question": "Sir Digby’s nemesis loses.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (SuperheroMovie(x) ∧ GoodGuy(y) ∧ AppearsIn(y, x) → Wins(y))\nSuperheroMovie(surprisingAdventuresofSirDigbyChickenCaesar)\n∀x ∀y (GoodGuy(x) ∧ Fights(x, y) ⟷ BadGuy(y) ∧ Fights(y, x))\nFights(sirDigby, sirDigbyNemesis)\n∀x ∀y (SuperheroMovie(x), NamedAfter(x, y) → GoodGuy(y))\nNamedAfter(surprisingAdventuresofSirDigbyChickenCaesar, sirDigby)\n∀x ∀y (Fights(x, y) ∧ Wins(x) → ¬Wins(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x ∀y (SuperheroMovie(x) ∧ AppearsIn(y, x) → GoodGuy(y))\n\"\"\""
    ]
  },
  {
    "id": 88,
    "question": "Walden contains knowledge.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) → Knowledge(x))\n∀x ∀y (ReadBook(x, y) → GainKnowledge(x))\n∀x (GainKnowledge(x) → Smarter(x))\nReadBook(harry, walden) ∧ Book(walden)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKnowledge(walden)\n\"\"\""
    ]
  },
  {
    "id": 89,
    "question": "Harry is smarter than before.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) → Knowledge(x))\n∀x ∀y (ReadBook(x, y) → GainKnowledge(x))\n∀x (GainKnowledge(x) → Smarter(x))\nReadBook(harry, walden) ∧ Book(walden)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSmarter(harry)\n\"\"\""
    ]
  },
  {
    "id": 90,
    "question": "A person who is smarter has gained knowledge.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Book(x) → Knowledge(x))\n∀x ∀y (ReadBook(x, y) → GainKnowledge(x))\n∀x (GainKnowledge(x) → Smarter(x))\nReadBook(harry, walden) ∧ Book(walden)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Smarter(x) → GainKnowledge(x))\n\"\"\""
    ]
  },
  {
    "id": 91,
    "question": "Machine translation is a language generation task.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NLP(x) → NLG(x) ⊕ NLU(x))\n∀x (NLP(x) ∧ OutputSequence(x) → NLG(x))\nNLP(machineTranslation)\nOutputSequence(machineTranslation)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNLG(machineTranslation)\n\"\"\""
    ]
  },
  {
    "id": 92,
    "question": "Machine translation is a language understanding task.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (NLP(x) → NLG(x) ⊕ NLU(x))\n∀x (NLP(x) ∧ OutputSequence(x) → NLG(x))\nNLP(machineTranslation)\nOutputSequence(machineTranslation)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nNLU(machineTranslation)\n\"\"\""
    ]
  },
  {
    "id": 93,
    "question": "Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ AllowPet(x))\n∀x (ManagedBuilding(x) → RequireDeposit(x))\n∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x))\n∀x (Rent2000(x) ↔ DepositNoLessThan2000(x))\nCat(fluffy)\n∀x (Cat(x) → Pet(x))\nManagedBuilding(oliveGarden)\nRent2000(oliveGarden)\n∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTomRent(oliveGarden)\n\"\"\""
    ]
  },
  {
    "id": 94,
    "question": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ AllowPet(x))\n∀x (ManagedBuilding(x) → RequireDeposit(x))\n∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x))\n∀x (Rent2000(x) ↔ DepositNoLessThan2000(x))\nCat(fluffy)\n∀x (Cat(x) → Pet(x))\nManagedBuilding(oliveGarden)\nRent2000(oliveGarden)\n∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAllowPet(oliveGarden)\n\"\"\""
    ]
  },
  {
    "id": 95,
    "question": "The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (ManagedBuilding(x) ∧ AllowPet(x))\n∀x (ManagedBuilding(x) → RequireDeposit(x))\n∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x))\n∀x (Rent2000(x) ↔ DepositNoLessThan2000(x))\nCat(fluffy)\n∀x (Cat(x) → Pet(x))\nManagedBuilding(oliveGarden)\nRent2000(oliveGarden)\n∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x)))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDepositNoLessThan2000(oliveGarden)\n\"\"\""
    ]
  },
  {
    "id": 96,
    "question": "Koalas love to sleep.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x))\n ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x))\n ∀x (Quokka(x) → AnimalsFromAustralia(x))\n ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x)) \n ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x))\n VeryFluffy(koala) → ¬Quokka(koala)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLoveToSleep(koala)\n\"\"\""
    ]
  },
  {
    "id": 97,
    "question": "Koalas love to sleep and are quokka.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x))\n ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x))\n ∀x (Quokka(x) → AnimalsFromAustralia(x))\n ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x)) \n ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x))\n VeryFluffy(koala) → ¬Quokka(koala)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLoveToSleep(koala) ∧ Quokka(koala)\n\"\"\""
    ]
  },
  {
    "id": 98,
    "question": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x))\n ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x))\n ∀x (Quokka(x) → AnimalsFromAustralia(x))\n ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x)) \n ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x))\n VeryFluffy(koala) → ¬Quokka(koala)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nQuokka(koala) → LoveToSleep(koala) ⊕ VeryFluffy(koala)\n\"\"\""
    ]
  },
  {
    "id": 99,
    "question": "Harry is a CEO.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kind(x) ⊕ Evil(x))\n∀x (Ugly(x) → ¬Handsome(x))\n∀x (Evil(x) → Ugly(x))\n∀x (Gentleman(x) → Handsome(x))\n∀x (CEO(x) → Gentleman(x))\nGentleman(harry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCEO(harry)\n\"\"\""
    ]
  },
  {
    "id": 100,
    "question": "Harry is kind or a CEO.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kind(x) ⊕ Evil(x))\n∀x (Ugly(x) → ¬Handsome(x))\n∀x (Evil(x) → Ugly(x))\n∀x (Gentleman(x) → Handsome(x))\n∀x (CEO(x) → Gentleman(x))\nGentleman(harry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nKind(harry) ∨ CEO(harry)\n\"\"\""
    ]
  },
  {
    "id": 101,
    "question": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Kind(x) ⊕ Evil(x))\n∀x (Ugly(x) → ¬Handsome(x))\n∀x (Evil(x) → Ugly(x))\n∀x (Gentleman(x) → Handsome(x))\n∀x (CEO(x) → Gentleman(x))\nGentleman(harry)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Evil(harry) ∧ Ugly(harry)) ⊕ (¬Evil(harry) ∧ ¬Ugly(harry)) → ¬Kind(harry) ∧ ¬CEO(harry)\n\"\"\""
    ]
  },
  {
    "id": 102,
    "question": "Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TwinTriplet(x) → Playing(x))\n∀x (SameAge(x) → TwinTriplet(x))\n∀x (Complain(x) → SameAge(x))\n∀x (NotHome(x) → ¬StrongBonds(x))\n∀x (Playing(x) → NotHome(x))\n(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaying(luke)\n\"\"\""
    ]
  },
  {
    "id": 103,
    "question": "Luke complains often about annoying siblings.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TwinTriplet(x) → Playing(x))\n∀x (SameAge(x) → TwinTriplet(x))\n∀x (Complain(x) → SameAge(x))\n∀x (NotHome(x) → ¬StrongBonds(x))\n∀x (Playing(x) → NotHome(x))\n(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nComplain(luke)\n\"\"\""
    ]
  },
  {
    "id": 104,
    "question": "Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TwinTriplet(x) → Playing(x))\n∀x (SameAge(x) → TwinTriplet(x))\n∀x (Complain(x) → SameAge(x))\n∀x (NotHome(x) → ¬StrongBonds(x))\n∀x (Playing(x) → NotHome(x))\n(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(TwinTriplet(luke) ∨ Complain(luke))\n\"\"\""
    ]
  },
  {
    "id": 105,
    "question": "Tom can apply for financial aid from ETS to take the GRE test.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCost205(gre)\n∀x (Cost205(x) → CostBelow300(x))\n∀x (Hardship(x) → FinancialAid(x))\n∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))\nSingleParent(tom)\nFewResources(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFinancialAid(tom)\n\"\"\""
    ]
  },
  {
    "id": 106,
    "question": "It cost below US $300 to take the GRE test.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCost205(gre)\n∀x (Cost205(x) → CostBelow300(x))\n∀x (Hardship(x) → FinancialAid(x))\n∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))\nSingleParent(tom)\nFewResources(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCostBelow300(gre)\n\"\"\""
    ]
  },
  {
    "id": 107,
    "question": "There is no financial aid available for the GRE test.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCost205(gre)\n∀x (Cost205(x) → CostBelow300(x))\n∀x (Hardship(x) → FinancialAid(x))\n∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))\nSingleParent(tom)\nFewResources(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(∃x (FinancialAid(x)))\n\"\"\""
    ]
  },
  {
    "id": 108,
    "question": "Peter tidies his space consistently and enjoys the process of cleaning.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spill(x) → ¬Tidy(x))\n∀x (Foodie(x) → Spill(x))\n∀x (OnlyChild(x) → Tidy(x))\n∀x (BusyParents(x) → OnlyChild(x))\n∀x (HighIncome(x) → BusyParents(x))\n(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTidy(peter)\n\"\"\""
    ]
  },
  {
    "id": 109,
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spill(x) → ¬Tidy(x))\n∀x (Foodie(x) → Spill(x))\n∀x (OnlyChild(x) → Tidy(x))\n∀x (BusyParents(x) → OnlyChild(x))\n∀x (HighIncome(x) → BusyParents(x))\n(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFoodie(peter) ∨ HighIncome(peter)\n\"\"\""
    ]
  },
  {
    "id": 110,
    "question": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Spill(x) → ¬Tidy(x))\n∀x (Foodie(x) → Spill(x))\n∀x (OnlyChild(x) → Tidy(x))\n∀x (BusyParents(x) → OnlyChild(x))\n∀x (HighIncome(x) → BusyParents(x))\n(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Foodie(peter) ∧ HighIncome(peter)) ∨ ¬Foodie(peter) ∧ ¬HighIncome(peter))\n\"\"\""
    ]
  },
  {
    "id": 111,
    "question": "Some evergreens are not objects of worship.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (FirTree(x) → Evergreen(x))\n∃x (ObjectOfWorship(x) ∧ FirTree(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x))\n\"\"\""
    ]
  },
  {
    "id": 112,
    "question": "Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas)\nVisited(juandeonate, picurismountains)\nIn(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine)\n∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Visited(juandeonate, x) ∧ MountainRange(x) ∧ In(x, newmexico))\n\"\"\""
    ]
  },
  {
    "id": 113,
    "question": "Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas)\nVisited(juandeonate, picurismountains)\nIn(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine)\n∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Visited(juandeonate, x) ∧ MountainRange(x) ∧ In(x, texas))\n\"\"\""
    ]
  },
  {
    "id": 114,
    "question": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas)\nVisited(juandeonate, picurismountains)\nIn(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine)\n∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (MountainRange(x) ∧ In(hardingpegmatitemine, x) → ¬In(x, newmexico))\n\"\"\""
    ]
  },
  {
    "id": 115,
    "question": "Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y))\n∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x))\n∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\nIsMan(peter) ∧ Taller(peter, michael)\n∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n¬CanBlock(michael, windy)\n∀x (JumpWhenShooting(x) → GreatShooter(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) ∧ ¬Taller(peter, x))\n\"\"\""
    ]
  },
  {
    "id": 116,
    "question": "Windy is a great shooter.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y))\n∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x))\n∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\nIsMan(peter) ∧ Taller(peter, michael)\n∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n¬CanBlock(michael, windy)\n∀x (JumpWhenShooting(x) → GreatShooter(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGreatShooter(windy)\n\"\"\""
    ]
  },
  {
    "id": 117,
    "question": "Peter can block Windy's shooting.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y))\n∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x))\n∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))\nIsMan(peter) ∧ Taller(peter, michael)\n∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))\n¬CanBlock(michael, windy)\n∀x (JumpWhenShooting(x) → GreatShooter(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nCanBlock(peter, windy)\n\"\"\""
    ]
  },
  {
    "id": 118,
    "question": "Barutin is named after all islands in Antarctica.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria)\nLocate(barutin, snow)\nLocate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland)\nLocate(shetland, antarctica)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Locate(x, antarctica) → NameAfter(barutin, x))\n\"\"\""
    ]
  },
  {
    "id": 119,
    "question": "There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria)\nLocate(barutin, snow)\nLocate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland)\nLocate(shetland, antarctica)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x ∃y (Cove(x) ∧ NameAfter(x, y) ∧ Locate(y, bulgaria))\n\"\"\""
    ]
  },
  {
    "id": 120,
    "question": "Barutin is not located in Antarctica.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nCove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria)\nLocate(barutin, snow)\nLocate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland)\nLocate(shetland, antarctica)\n∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Locate(barutin, antarctica)\n\"\"\""
    ]
  },
  {
    "id": 121,
    "question": "Some affection is positive.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Affection(x) ∧ Love(x))\n∃x (Love(x) ∧ Positive(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Affection(x) ∧ Positive(x))\n\"\"\""
    ]
  },
  {
    "id": 122,
    "question": "Greyhound is an airline.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TransportMultiplePassengers(x) → ¬Empty(x))\n∀x (Airline(x) → TransportMultiplePassengers(x))\n∀x (Plane(x) → Empty(x))\n∀x (Boeing707(x) → Plane(x))\n¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAirline(greyhound)\n\"\"\""
    ]
  },
  {
    "id": 123,
    "question": "A Greyhound is a Boeing 707.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TransportMultiplePassengers(x) → ¬Empty(x))\n∀x (Airline(x) → TransportMultiplePassengers(x))\n∀x (Plane(x) → Empty(x))\n∀x (Boeing707(x) → Plane(x))\n¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBoeing707(greyhound)\n\"\"\""
    ]
  },
  {
    "id": 124,
    "question": "A Greyhound is not a Boeing 707.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (TransportMultiplePassengers(x) → ¬Empty(x))\n∀x (Airline(x) → TransportMultiplePassengers(x))\n∀x (Plane(x) → Empty(x))\n∀x (Boeing707(x) → Plane(x))\n¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Boeing707(greyhound)\n\"\"\""
    ]
  },
  {
    "id": 125,
    "question": "Rock is a monkey.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x  (Mammal (x)→  Animal (x))\n∀x  (Monkey (x)→  Mammal (x))\n∀x ( Monkey (x) ∨  Bird (x))\n∀x  (Bird (x)→  Fly (x))\n∀x  (Animal (x)→  Breathe (x))\n∀x  (Fly (x)→  HaveWings (x))\n¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMonkey(rock)\n\"\"\""
    ]
  },
  {
    "id": 126,
    "question": "Rock has wings.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x  (Mammal (x)→  Animal (x))\n∀x  (Monkey (x)→  Mammal (x))\n∀x ( Monkey (x) ∨  Bird (x))\n∀x  (Bird (x)→  Fly (x))\n∀x  (Animal (x)→  Breathe (x))\n∀x  (Fly (x)→  HaveWings (x))\n¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHaveWings(rock)\n\"\"\""
    ]
  },
  {
    "id": 127,
    "question": "Rock does not have wings.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x  (Mammal (x)→  Animal (x))\n∀x  (Monkey (x)→  Mammal (x))\n∀x ( Monkey (x) ∨  Bird (x))\n∀x  (Bird (x)→  Fly (x))\n∀x  (Animal (x)→  Breathe (x))\n∀x  (Fly (x)→  HaveWings (x))\n¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬ HaveWings(rock)\n\"\"\""
    ]
  },
  {
    "id": 128,
    "question": "John has a wedding that is well-attended.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Wedding(x) → Child(x))\n∀x (Paris(x) → Wedding(x))\n∀x (July(x) → Paris(x))\n∃x (July(x) ∧ WellAttended(x))\nChild(john) → ¬(Paris(john) ∧ Wedding(john))\nWellAttended(john) → July(john) ⊕ Paris(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWellAttended(john)\n\"\"\""
    ]
  },
  {
    "id": 129,
    "question": "John does not have a wedding that is well-attended.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Wedding(x) → Child(x))\n∀x (Paris(x) → Wedding(x))\n∀x (July(x) → Paris(x))\n∃x (July(x) ∧ WellAttended(x))\nChild(john) → ¬(Paris(john) ∧ Wedding(john))\nWellAttended(john) → July(john) ⊕ Paris(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WellAttended(john)\n\"\"\""
    ]
  },
  {
    "id": 130,
    "question": "John has at least one child.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Wedding(x) → Child(x))\n∀x (Paris(x) → Wedding(x))\n∀x (July(x) → Paris(x))\n∃x (July(x) ∧ WellAttended(x))\nChild(john) → ¬(Paris(john) ∧ Wedding(john))\nWellAttended(john) → July(john) ⊕ Paris(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nChild(john)\n\"\"\""
    ]
  },
  {
    "id": 131,
    "question": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Wedding(x) → Child(x))\n∀x (Paris(x) → Wedding(x))\n∀x (July(x) → Paris(x))\n∃x (July(x) ∧ WellAttended(x))\nChild(john) → ¬(Paris(john) ∧ Wedding(john))\nWellAttended(john) → July(john) ⊕ Paris(john)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(WellAttended(john) ∨ July(john))\n\"\"\""
    ]
  },
  {
    "id": 132,
    "question": "Platypus are mammals with no teeth.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Mammal(x) ∧ Have(x, teeth))\n¬Have(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMammal(platypus) ∧ ¬Have(platypus, teeth)\n\"\"\""
    ]
  },
  {
    "id": 133,
    "question": "Platypus are reptiles.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Mammal(x) ∧ Have(x, teeth))\n¬Have(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nReptile(platypus)\n\"\"\""
    ]
  },
  {
    "id": 134,
    "question": "Humans are mammals.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Mammal(x) ∧ Have(x, teeth))\n¬Have(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMammal(humans)\n\"\"\""
    ]
  },
  {
    "id": 135,
    "question": "Space sucks.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plunger(x) → Suck(x))\n∀x (Vacuum(x) → Suck(x))\n∀x (Vampire(x) → Suck(x))\nVacuum(space)\nHouseHoldApp(duster) ∧ ¬ Suck(duster)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSuck(space)\n\"\"\""
    ]
  },
  {
    "id": 136,
    "question": "Space is a vampire.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plunger(x) → Suck(x))\n∀x (Vacuum(x) → Suck(x))\n∀x (Vampire(x) → Suck(x))\nVacuum(space)\nHouseHoldApp(duster) ∧ ¬ Suck(duster)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nVampire(space)\n\"\"\""
    ]
  },
  {
    "id": 137,
    "question": "If something is a household appliance, it sucks.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Plunger(x) → Suck(x))\n∀x (Vacuum(x) → Suck(x))\n∀x (Vampire(x) → Suck(x))\nVacuum(space)\nHouseHoldApp(duster) ∧ ¬ Suck(duster)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (HouseHoldApp(x) → Suck(x))\n\"\"\""
    ]
  },
  {
    "id": 138,
    "question": "Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMLAlgorithm(supervisedLearning) ∨ MLAlgorithm(unsupervisedLearning) ∨ MLAlgorithm(reinforcementLearning)\n¬RequireLabelledData(unsupervisedLearning)\nTrainTextSumModel(supervisedLearning) ∨ TrainTextSumModel(unsupervisedLearning) ∨ TrainTextSumModel(reinforcementLearning)\n¬TrainTextSumModel(reinforcementLearning)\n∀x ((MLAlgorithm(x) ∧ TrainTextSumModel(x)) → RequireLabelledData(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTrainTextSumModel(supervisedLearning)\n\"\"\""
    ]
  },
  {
    "id": 139,
    "question": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nMLAlgorithm(supervisedLearning) ∨ MLAlgorithm(unsupervisedLearning) ∨ MLAlgorithm(reinforcementLearning)\n¬RequireLabelledData(unsupervisedLearning)\nTrainTextSumModel(supervisedLearning) ∨ TrainTextSumModel(unsupervisedLearning) ∨ TrainTextSumModel(reinforcementLearning)\n¬TrainTextSumModel(reinforcementLearning)\n∀x ((MLAlgorithm(x) ∧ TrainTextSumModel(x)) → RequireLabelledData(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTrainTextSumModel(unsupervisedLearning)\n\"\"\""
    ]
  },
  {
    "id": 140,
    "question": "Ben is loved by children.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Funny(x) → Popular(x))\n∀x (Ugly(x) → ¬Popular(x))\n∀x (Love(children, x) → Funny(x))\n∀x (Simpsons(x) → Love(children, x))\n∀x (Yellow(x) → Simpsons(x))\nSimpsons(ben) ⊕ Funny(ben)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLove(children, ben)\n\"\"\""
    ]
  },
  {
    "id": 141,
    "question": "Ben is ugly or yellow.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Funny(x) → Popular(x))\n∀x (Ugly(x) → ¬Popular(x))\n∀x (Love(children, x) → Funny(x))\n∀x (Simpsons(x) → Love(children, x))\n∀x (Yellow(x) → Simpsons(x))\nSimpsons(ben) ⊕ Funny(ben)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nUgly(ben) ∨ Yellow(ben)\n\"\"\""
    ]
  },
  {
    "id": 142,
    "question": "Ben is either yellow and ugly or neither yellow nor ugly.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Funny(x) → Popular(x))\n∀x (Ugly(x) → ¬Popular(x))\n∀x (Love(children, x) → Funny(x))\n∀x (Simpsons(x) → Love(children, x))\n∀x (Yellow(x) → Simpsons(x))\nSimpsons(ben) ⊕ Funny(ben)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(Yellow(ben) ∧ Ugly(ben)) ⊕ (¬Yellow(ben) ∧ ¬Ugly(ben))\n\"\"\""
    ]
  },
  {
    "id": 143,
    "question": "Some Heck cattle are artificially selected.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (BreedingBack(x, y) → ArtificiallySelect(x))\n∃x ∃y (HeckCattle(x) ∧ Aurochs(y) ∧ BreedingBack(x, y))\n∀x (HeckCattle(x) → Animal(x))\n∀x (Aurochs(x) → Animal(x))\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ BreedingBack(x, y) ∧ Extinct(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (HeckCattle(x) ∧ ArtificiallySelect(x))\n\"\"\""
    ]
  },
  {
    "id": 144,
    "question": "Aurochs are extinct.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x ∀y (BreedingBack(x, y) → ArtificiallySelect(x))\n∃x ∃y (HeckCattle(x) ∧ Aurochs(y) ∧ BreedingBack(x, y))\n∀x (HeckCattle(x) → Animal(x))\n∀x (Aurochs(x) → Animal(x))\n∃x ∃y (Animal(x) ∧ Animal(y) ∧ BreedingBack(x, y) ∧ Extinct(y))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Aurochs(x) → Extinct(x))\n\"\"\""
    ]
  },
  {
    "id": 145,
    "question": "Jerry is young.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x))\n∀x (Study(x) → Student(x))\n∀x (Study(x) ∨ Teach(x))\n∀x (Young(x) → ¬Teach(x))\n¬Teach(jerry) ∧ ¬Manager(jerry)\nYoung(rose) ∨ Student(rose)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nYoung(jerry)\n\"\"\""
    ]
  },
  {
    "id": 146,
    "question": "Jerry is not young.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x))\n∀x (Study(x) → Student(x))\n∀x (Study(x) ∨ Teach(x))\n∀x (Young(x) → ¬Teach(x))\n¬Teach(jerry) ∧ ¬Manager(jerry)\nYoung(rose) ∨ Student(rose)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Young(jerry)\n\"\"\""
    ]
  },
  {
    "id": 147,
    "question": "Rose is a human or a manager.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x))\n∀x (Study(x) → Student(x))\n∀x (Study(x) ∨ Teach(x))\n∀x (Young(x) → ¬Teach(x))\n¬Teach(jerry) ∧ ¬Manager(jerry)\nYoung(rose) ∨ Student(rose)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHuman(rose) ∨ Manager(rose)\n\"\"\""
    ]
  },
  {
    "id": 148,
    "question": "Rose is a human or Jerry is a manager.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x))\n∀x (Study(x) → Student(x))\n∀x (Study(x) ∨ Teach(x))\n∀x (Young(x) → ¬Teach(x))\n¬Teach(jerry) ∧ ¬Manager(jerry)\nYoung(rose) ∨ Student(rose)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHuman(rose) ∨ Manager(jerry)\n\"\"\""
    ]
  },
  {
    "id": 149,
    "question": "It is not true that Rose is a student and Jerry is a human.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Student(x) → Human(x))\n∀x (Study(x) → Student(x))\n∀x (Study(x) ∨ Teach(x))\n∀x (Young(x) → ¬Teach(x))\n¬Teach(jerry) ∧ ¬Manager(jerry)\nYoung(rose) ∨ Student(rose)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Student(rose) ∧ Human(jerry))\n\"\"\""
    ]
  },
  {
    "id": 150,
    "question": "Neapolitan Chronicles is an English book.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish)\n∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english))\nBook(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress)\nTranslatedFrom(neapolitanchronicles, italian)\nBook(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBook(neapolitanchronicles) ∧ In(neapolitanchronicles, english)\n\"\"\""
    ]
  },
  {
    "id": 151,
    "question": "Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish)\n∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english))\nBook(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress)\nTranslatedFrom(neapolitanchronicles, italian)\nBook(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPublishedBy(harrrypotter, newvesselpress)\n\"\"\""
    ]
  },
  {
    "id": 152,
    "question": "Palace of Flies was translated from Italian.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nPublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish)\n∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english))\nBook(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress)\nTranslatedFrom(neapolitanchronicles, italian)\nBook(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTranslatedFrom(palaceofflies, italian)\n\"\"\""
    ]
  },
  {
    "id": 153,
    "question": "Remy visits the office supply store regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Desktop(x) → WorkHome(x))\n∀x (HomeOffice(x) → Desktop(x))\n∀x (WorkHome(x) → Tidying(x))\n∀x (WorkHome(x) → OfficeStore(x))\n∀x (Tidying(x) → ¬Late(x))\n(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nOfficeStore(remy)\n\"\"\""
    ]
  },
  {
    "id": 154,
    "question": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Desktop(x) → WorkHome(x))\n∀x (HomeOffice(x) → Desktop(x))\n∀x (WorkHome(x) → Tidying(x))\n∀x (WorkHome(x) → OfficeStore(x))\n∀x (Tidying(x) → ¬Late(x))\n(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nHomeOffice(remy) ∧ OfficeStore(remy)\n\"\"\""
    ]
  },
  {
    "id": 155,
    "question": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Desktop(x) → WorkHome(x))\n∀x (HomeOffice(x) → Desktop(x))\n∀x (WorkHome(x) → Tidying(x))\n∀x (WorkHome(x) → OfficeStore(x))\n∀x (Tidying(x) → ¬Late(x))\n(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nLate(remy) ∨ OfficeStore(remy) → ¬(Tidying(remy) ∨ HomeOffice(remy))\n\"\"\""
    ]
  },
  {
    "id": 156,
    "question": "Some Greeks are mortal.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Human(x) → Mortal(x))\n∀x (Greek(x) → Human(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Greek(x) ∧ Mortal(x))\n\"\"\""
    ]
  },
  {
    "id": 157,
    "question": "James has a part-time job offered by the university.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkLibrary(x) → ¬ComputerScience(x))\n∀x (PartTime(x) → WorkLibrary(x))\n∀x (Database(x) → ComputerScience(x))\n∀x (ProfessorDavid(x) → Database(x))\n∀x (WorkInLab(x) → ProfessorDavid(x))\nWorkInLab(james)\n¬PartTime(jack) ∧ ¬WorkInLab(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPartTime(james)\n\"\"\""
    ]
  },
  {
    "id": 158,
    "question": "James does not have a part-time job offered by the university.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkLibrary(x) → ¬ComputerScience(x))\n∀x (PartTime(x) → WorkLibrary(x))\n∀x (Database(x) → ComputerScience(x))\n∀x (ProfessorDavid(x) → Database(x))\n∀x (WorkInLab(x) → ProfessorDavid(x))\nWorkInLab(james)\n¬PartTime(jack) ∧ ¬WorkInLab(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬PartTime(james)\n\"\"\""
    ]
  },
  {
    "id": 159,
    "question": "James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkLibrary(x) → ¬ComputerScience(x))\n∀x (PartTime(x) → WorkLibrary(x))\n∀x (Database(x) → ComputerScience(x))\n∀x (ProfessorDavid(x) → Database(x))\n∀x (WorkInLab(x) → ProfessorDavid(x))\nWorkInLab(james)\n¬PartTime(jack) ∧ ¬WorkInLab(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDatabase(james) ⊕ PartTime(james)\n\"\"\""
    ]
  },
  {
    "id": 160,
    "question": "Jack takes the database course.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (WorkLibrary(x) → ¬ComputerScience(x))\n∀x (PartTime(x) → WorkLibrary(x))\n∀x (Database(x) → ComputerScience(x))\n∀x (ProfessorDavid(x) → Database(x))\n∀x (WorkInLab(x) → ProfessorDavid(x))\nWorkInLab(james)\n¬PartTime(jack) ∧ ¬WorkInLab(jack)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nDatabase(jack)\n\"\"\""
    ]
  },
  {
    "id": 161,
    "question": "If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLikesMusic(george) → WantsToCompose(george)\nAccesstoProgram(george) → CanCompose(george)\n(WantsToCompose(george) ∧ CanCompose(george)) → WillCompose(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n(LikesMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george)\n\"\"\""
    ]
  },
  {
    "id": 162,
    "question": "If George will not compose, George can not compose.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nLikesMusic(george) → WantsToCompose(george)\nAccesstoProgram(george) → CanCompose(george)\n(WantsToCompose(george) ∧ CanCompose(george)) → WillCompose(george)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WantsToCompose(george) → ¬WillCompose(george)\n\"\"\""
    ]
  },
  {
    "id": 163,
    "question": "All birds land",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Hawk(x) → ¬Lands(x))\n∃x (Bird(x) ∧ Hawk(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Bird(x) → Lands(x))\n\"\"\""
    ]
  },
  {
    "id": 164,
    "question": "Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x))\n∀x (RoseGivenOutOnTv(x) → OnBachelor(x))\n∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x))\n∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x))\n¬RealityTVShow(breakingbad)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMondayat8(breakingbad)\n\"\"\""
    ]
  },
  {
    "id": 165,
    "question": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x))\n∀x (RoseGivenOutOnTv(x) → OnBachelor(x))\n∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x))\n∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x))\n¬RealityTVShow(breakingbad)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nMondayat8(breakingbad) ∧ RoseGivenOutOnTv(breakingbad)\n\"\"\""
    ]
  },
  {
    "id": 166,
    "question": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x))\n∀x (RoseGivenOutOnTv(x) → OnBachelor(x))\n∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x))\n∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x))\n¬RealityTVShow(breakingbad)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nRoseGivenOutOnTv(breakingbad) → Mondayat8(breakingbad)\n\"\"\""
    ]
  },
  {
    "id": 167,
    "question": "Heinrich Schmidt was either German or Russian.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt)\nMember(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFrom(heinrichScmidt, naziGermany) ∨ From(heinrichScmidt, russia)\n\"\"\""
    ]
  },
  {
    "id": 168,
    "question": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt)\nMember(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (From(x, naziGermany) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag))\n\"\"\""
    ]
  },
  {
    "id": 169,
    "question": "No politicans are part of the Nazi Reichstag.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFrom(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt)\nMember(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Politician(x) → ¬Member(x, naziReichstag))\n\"\"\""
    ]
  },
  {
    "id": 170,
    "question": "Colorectal cancer is a severe cancer",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x))\n∀x (SevereCancer(x) → DeadlyDiseases(x))\n∀x (BileDuctCancer(x) → SevereCancer(x))\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n∀x (MildFlu(x) → ¬SurvivalRateIsLow(x)) \nBileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSevereCancer(colorectalCancer)\n\"\"\""
    ]
  },
  {
    "id": 171,
    "question": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x))\n∀x (SevereCancer(x) → DeadlyDiseases(x))\n∀x (BileDuctCancer(x) → SevereCancer(x))\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n∀x (MildFlu(x) → ¬SurvivalRateIsLow(x)) \nBileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer) → BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer)\n\"\"\""
    ]
  },
  {
    "id": 172,
    "question": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x))\n∀x (SevereCancer(x) → DeadlyDiseases(x))\n∀x (BileDuctCancer(x) → SevereCancer(x))\n∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))\n∀x (MildFlu(x) → ¬SurvivalRateIsLow(x)) \nBileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬MildFlu(colorectalCancer) ∨ ¬Cholangiocarcinoma(colorectalCancer) → BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)\n\"\"\""
    ]
  },
  {
    "id": 173,
    "question": "Taylor eats salads regularly.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Salad(x) → HealthyHabits(x))\n∀x (HealthyChildhood(x) → Salad(x))\n∀x (Nutritional(x) → HealthyChildhood(x))\n∀x (GoodRelationship(x) → ¬HealthyHabits(x))\n∀x (Gym(x) → Nutritional(x))\n(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSalad(taylor)\n\"\"\""
    ]
  },
  {
    "id": 174,
    "question": "Taylor visits the gym at least once a day.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Salad(x) → HealthyHabits(x))\n∀x (HealthyChildhood(x) → Salad(x))\n∀x (Nutritional(x) → HealthyChildhood(x))\n∀x (GoodRelationship(x) → ¬HealthyHabits(x))\n∀x (Gym(x) → Nutritional(x))\n(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGym(taylor)\n\"\"\""
    ]
  },
  {
    "id": 175,
    "question": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Salad(x) → HealthyHabits(x))\n∀x (HealthyChildhood(x) → Salad(x))\n∀x (Nutritional(x) → HealthyChildhood(x))\n∀x (GoodRelationship(x) → ¬HealthyHabits(x))\n∀x (Gym(x) → Nutritional(x))\n(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(HealthyChildhood(taylor) ∨ Gym(taylor))\n\"\"\""
    ]
  },
  {
    "id": 176,
    "question": "The world championships is a sporting event.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympics)\nLastOlympics(tokyo)\nMostMedals(unitedStates, tokyo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSportingEvent(champs)\n\"\"\""
    ]
  },
  {
    "id": 177,
    "question": "The last Olympic games were not in Tokyo.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympics)\nLastOlympics(tokyo)\nMostMedals(unitedStates, tokyo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬LastOlympics(tokyo)\n\"\"\""
    ]
  },
  {
    "id": 178,
    "question": "The United States won the most medals in the last Olympic games.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nSportingEvent(olympics)\nLastOlympics(tokyo)\nMostMedals(unitedStates, tokyo)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (LastOlympics(x) ∧ MostMedals(unitedStates, x))\n\"\"\""
    ]
  },
  {
    "id": 179,
    "question": "Some humans are horses.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Horse(x) → Hooves(x))\n∀x (Human(x) → ¬Hooves(x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (Human(x) ∧ Horse(x))\n\"\"\""
    ]
  },
  {
    "id": 180,
    "question": "Susan flies from LGA airport.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFlyTo(susan, lga)\n∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))\nFlyFrom(john, lga)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlyFrom(susan, lga)\n\"\"\""
    ]
  },
  {
    "id": 181,
    "question": "John flies to LGA airport.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nFlyTo(susan, lga)\n∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))\nFlyFrom(john, lga)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nFlyTo(john, lga)\n\"\"\""
    ]
  },
  {
    "id": 182,
    "question": "Tom is a grumpy person.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nice(x) → ¬Mean(x))\n∃x (Grumpy(x) ∧ Mean(x))\n∀x (AnimalLover(x) → Nice(x))\n∀x (PetOwner(x) → AnimalLover(x))\nPetOwner(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nGrumpy(tom)\n\"\"\""
    ]
  },
  {
    "id": 183,
    "question": "Tom is not a grumpy person and mean to animals.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nice(x) → ¬Mean(x))\n∃x (Grumpy(x) ∧ Mean(x))\n∀x (AnimalLover(x) → Nice(x))\n∀x (PetOwner(x) → AnimalLover(x))\nPetOwner(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Grumpy(tom) ∧ Mean(tom))\n\"\"\""
    ]
  },
  {
    "id": 184,
    "question": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Nice(x) → ¬Mean(x))\n∃x (Grumpy(x) ∧ Mean(x))\n∀x (AnimalLover(x) → Nice(x))\n∀x (PetOwner(x) → AnimalLover(x))\nPetOwner(tom)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(Grumpy(tom) ∧ Mean(tom)) → ¬(Grumpy(tom) ∨ AnimalLover(tom))\n\"\"\""
    ]
  },
  {
    "id": 185,
    "question": "Dani Shapiro is a novel writer.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IsPodcast(x) → ¬IsNovel(x))\n∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x))\n∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y))\nIsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro)\nWrittenBy(family_History, dani_Shapiro)\nIsNovel(family_History) ∧ WrittenIn(family_History, y2003)\nIsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\nIsCity(boston) ∧ IsAmerican(boston)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nWritesNovel(dani_Shapiro)\n\"\"\""
    ]
  },
  {
    "id": 186,
    "question": "Family Secrets is a novel.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IsPodcast(x) → ¬IsNovel(x))\n∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x))\n∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y))\nIsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro)\nWrittenBy(family_History, dani_Shapiro)\nIsNovel(family_History) ∧ WrittenIn(family_History, y2003)\nIsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\nIsCity(boston) ∧ IsAmerican(boston)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nIsNovel(family_Secrets)\n\"\"\""
    ]
  },
  {
    "id": 187,
    "question": "Dani Shapiro was born in Boston.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (IsPodcast(x) → ¬IsNovel(x))\n∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x))\n∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y))\nIsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro)\nWrittenBy(family_History, dani_Shapiro)\nIsNovel(family_History) ∧ WrittenIn(family_History, y2003)\nIsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)\nIsCity(boston) ∧ IsAmerican(boston)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBornIn(dani_Shapiro, boston)\n\"\"\""
    ]
  },
  {
    "id": 188,
    "question": "Yuri is an American.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (Tall(x) → WearLargeShoes(x))\n∀x (WearLargeShoes(x) → WearLargeClothes(x))\n¬WearLargeClothes(yuri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmerican(yuri)\n\"\"\""
    ]
  },
  {
    "id": 189,
    "question": "Yuri is not an American basketball player.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (Tall(x) → WearLargeShoes(x))\n∀x (WearLargeShoes(x) → WearLargeClothes(x))\n¬WearLargeClothes(yuri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(American(yuri) ∧ BasketballPlayer(yuri))\n\"\"\""
    ]
  },
  {
    "id": 190,
    "question": "Yuri is an American basketball player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (Tall(x) → WearLargeShoes(x))\n∀x (WearLargeShoes(x) → WearLargeClothes(x))\n¬WearLargeClothes(yuri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nAmerican(yuri) ∧ BasketballPlayer(yuri)\n\"\"\""
    ]
  },
  {
    "id": 191,
    "question": "If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (Tall(x) → WearLargeShoes(x))\n∀x (WearLargeShoes(x) → WearLargeClothes(x))\n¬WearLargeClothes(yuri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬WearLargeShoes(yuri) → (American(yuri) ∧ BasketballPlayer(yuri))\n\"\"\""
    ]
  },
  {
    "id": 192,
    "question": "If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∃x (BasketballPlayer(x) ∧ ¬American(x))\n∀x (BasketballPlayer(x) → Tall(x))\n∀x (Tall(x) → WearLargeShoes(x))\n∀x (WearLargeShoes(x) → WearLargeClothes(x))\n¬WearLargeClothes(yuri)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬(American(yuri) ∧ BasketballPlayer(yuri)) → BasketballPlayer(yuri)\n\"\"\""
    ]
  },
  {
    "id": 193,
    "question": "All events are sad.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Event(x) → Happy(x) ⊕ Sad(x))\n∃x (Event(x) ∧ Happy(x)) \n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (Event(x) → Sad(x))\n\"\"\""
    ]
  },
  {
    "id": 194,
    "question": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWinner(maurier, steinhauer)\nParticipate(maurier, steinhauer)\n∃x (LeaderBoard(maurier, x) ∧ SixWayTie(x) ∧ Belgium(x))\nBelgium(descampe) ∧ LeaderBoard(maurier, descampe)\n∀x (LeaderBoard(maurier, x) → Participate(maurier, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Winner(maurier, steinhauer)\n\"\"\""
    ]
  },
  {
    "id": 195,
    "question": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nWinner(maurier, steinhauer)\nParticipate(maurier, steinhauer)\n∃x (LeaderBoard(maurier, x) ∧ SixWayTie(x) ∧ Belgium(x))\nBelgium(descampe) ∧ LeaderBoard(maurier, descampe)\n∀x (LeaderBoard(maurier, x) → Participate(maurier, x))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nSixWayTie(descampe)\n\"\"\""
    ]
  },
  {
    "id": 196,
    "question": "KiKi is terricolous.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bark(x) → ¬Like(jane, x))\n∀x (Dog(x) → Bark(x))\n∀x (Jump(x) → Like(jane, x))\n∀x (HaveLegs(x) → Jump(x))\n∀x (Terricolous(x) → HaveLegs(x))\n(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nTerricolous(kiki)\n\"\"\""
    ]
  },
  {
    "id": 197,
    "question": "KiKi barks and is a dog.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bark(x) → ¬Like(jane, x))\n∀x (Dog(x) → Bark(x))\n∀x (Jump(x) → Like(jane, x))\n∀x (HaveLegs(x) → Jump(x))\n∀x (Terricolous(x) → HaveLegs(x))\n(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nBark(kiki) ∧ Dog(kiki)\n\"\"\""
    ]
  },
  {
    "id": 198,
    "question": "KiKi neither barks nor is a dog.",
    "answer": "A",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\n∀x (Bark(x) → ¬Like(jane, x))\n∀x (Dog(x) → Bark(x))\n∀x (Jump(x) → Like(jane, x))\n∀x (HaveLegs(x) → Jump(x))\n∀x (Terricolous(x) → HaveLegs(x))\n(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki))\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n¬Bark(kiki) ∧ ¬Dog(kiki)\n\"\"\""
    ]
  },
  {
    "id": 199,
    "question": "No one playing for Nautico is Brazilian.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (PlaysFor(x, nautico) → ¬Brazilian(x))\n\"\"\""
    ]
  },
  {
    "id": 200,
    "question": "Ailton Silva foes not play for a football club.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (FootballClub(x) → ¬PlaysFor(ailtonsilva, x))\n\"\"\""
    ]
  },
  {
    "id": 201,
    "question": "Ailton was not loaned out to a football club.",
    "answer": "B",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∀x (FootballClub(x) → ¬LoanedTo(ailton, x))\n\"\"\""
    ]
  },
  {
    "id": 202,
    "question": "Ailton Silva played for Fluminense.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\nPlaysFor(ailtonsilva, fluminense)\n\"\"\""
    ]
  },
  {
    "id": 203,
    "question": "Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "raw_logic_programs": [
      "First-Order-Logic Premises:\n\"\"\"\nBornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)\nFootballPlayer(ailton) ∧ LoanedTo(ailton, braga)\nBrazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)\nFootballClub(nautico) ∧ FootballClub(braga)\nFootballClub(fluminense)\n\"\"\"\nFirst-Order-Logic Question:\n\"\"\"\n∃x (FootballClub(x) ∧ LoanedTo(ailtonsilva, x))\n\"\"\""
    ]
  }
]